==========mod==========
#[version = "0.0.5"]
def @func_1248(%var_1243: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
  %0 = cast(%var_1243, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  sinh(%0) /* ty=Tensor[(15, 13, 6), float64] */
}

def @func_5310(%var_5284: Tensor[(896), int16], %var_5285: Tensor[(56), float64]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 5, 5), uint32], Tensor[(540, 3), bool], Tensor[(896), int16], Tensor[(56), float64], Tensor[(15, 13, 6), float64], Tensor[(10, 117), float64], Tensor[(3360), float32], Tensor[(2730), float32], Tensor[(126, 75), float64], Tensor[(15, 2, 9), uint32], Tensor[(270, 1), uint32]) {
  %1 = @func_5207() /* ty=(Tensor[(10, 1, 15), bool],) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(75), int32] */, dtype="int32") /* ty=Tensor[(75), int32] */;
  %3 = reshape(%2, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), int32] */;
  %4 = @func_5143(%3) /* ty=Tensor[(3, 5, 5), bool] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(75), int32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %9 = cast(%var_5284, dtype="int16") /* ty=Tensor[(896), int16] */;
  %10 = cast(%var_5284, dtype="int16") /* ty=Tensor[(896), int16] */;
  %11 = cast(%var_5285, dtype="float64") /* ty=Tensor[(56), float64] */;
  %12 = reshape(%9, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %13 = reshape(%10, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %14 = reshape(%11, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %15 = @func_2358(%12, %13, %14) /* ty=(Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 117), float64] */, dtype="float64") /* ty=Tensor[(10, 117), float64] */;
  %19 = reshape(%16, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %20 = reshape(%17, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %21 = reshape(%18, newshape=[130, 9]) /* ty=Tensor[(130, 9), float64] */;
  %22 = @func_4672(%19, %20, %21) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) */;
  %23 = %15.3;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %25 = cast(%23, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %26 = cast(%var_5285, dtype="float64") /* ty=Tensor[(56), float64] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %28 = reshape(%24, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %29 = reshape(%25, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %30 = reshape(%26, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %31 = reshape(%27, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %32 = @func_889(%28, %29, %30, %31) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(75), int32] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(126, 1), float32] */, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
  %37 = reshape(%35, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %38 = reshape(%36, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %39 = @func_1596(%37, %38) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %40 = %1.0;
  %41 = left_shift(%7, %8) /* ty=Tensor[(3, 5, 5), uint32] */;
  %42 = %22.1;
  %43 = %32.5;
  %44 = floor_mod(%33, %34) /* ty=Tensor[(126, 75), float64] */;
  %45 = %39.0;
  (%40, %41, %23, %var_5284, %var_5285, %42, meta[relay.Constant][2] /* ty=Tensor[(10, 117), float64] */, %43, meta[relay.Constant][3] /* ty=Tensor[(2730), float32] */, %44, %45, meta[relay.Constant][4] /* ty=Tensor[(270, 1), uint32] */)
}

def @func_6355(%var_6339: Tensor[(15, 3, 8), float64], %var_6340: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 2, 9), uint32]) {
  %46 = cast(%var_6340, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %47 = shape_of(%var_6339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_6339, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %50 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %51 = divide(%48, %49) /* ty=Tensor[(15, 3, 8), float64] */;
  %52 = %50.0;
  (%51, %52)
}

def @func_3551(%var_3533: Tensor[(56), float64]) -> (Tensor[(15, 2, 9), uint32], Tensor[(1, 4, 14), float32], Tensor[(1, 2730), float32], Tensor[(56), float64]) {
  %53 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %54 = cast(%var_3533, dtype="float64") /* ty=Tensor[(56), float64] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 2730), float32] */, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
  %56 = reshape(%54, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %57 = reshape(%55, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %58 = @func_696(%56, %57) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %59 = cast(%var_3533, dtype="float64") /* ty=Tensor[(56), float64] */;
  %60 = %53.1;
  %61 = %58.0;
  %62 = sin(%59) /* ty=Tensor[(56), float64] */;
  (%60, %61, meta[relay.Constant][5] /* ty=Tensor[(1, 2730), float32] */, %62)
}

def @main(%var_6395: Tensor[(4, 3, 13), float32], %var_6422: Tensor[(4, 3, 13), float32]) -> (Tensor[(12, 6, 2), float64], Tensor[(720), float32], Tensor[(30, 9), uint32], Tensor[(4, 3, 13), int16], Tensor[(4, 3, 13), float64]) {
  %63 = @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(30, 9), uint32] */, dtype="uint32") /* ty=Tensor[(30, 9), uint32] */;
  %65 = reshape(%64, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %66 = @func_5196(%65) /* ty=(Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) */;
  %67 = cast(%var_6395, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
  %68 = log(%67) /* ty=Tensor[(4, 3, 13), float32] */;
  %69 = cast(%var_6422, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %73 = cast(%68, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %74 = sinh(%73) /* ty=Tensor[(4, 3, 13), float64] */;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %76 = %63.0;
  %77 = %66.0;
  %78 = add(%71, %72) /* ty=Tensor[(4, 3, 13), int16] */;
  %79 = acos(%75) /* ty=Tensor[(4, 3, 13), float64] */;
  (%76, %77, meta[relay.Constant][6] /* ty=Tensor[(30, 9), uint32] */, %78, %79)
}

def @func_2634(%var_2629: Tensor[(3, 15, 16), float32]) -> Tensor[(3, 15, 16), float32] {
  %80 = cast(%var_2629, dtype="float32") /* ty=Tensor[(3, 15, 16), float32] */;
  log10(%80) /* ty=Tensor[(3, 15, 16), float32] */
}

def @func_696(%var_651: Tensor[(1, 4, 14), float64], %var_681: Tensor[(2730), float32]) -> (Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) {
  %81 = cast(%var_651, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
  %82 = cast(%var_651, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %83 = log10(%82) /* ty=Tensor[(1, 4, 14), float64] */;
  %84 = cast(%var_651, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
  %85 = atan(%84) /* ty=Tensor[(1, 4, 14), float32] */;
  %86 = cast(%85, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %87 = shape_of(%var_651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_651, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = logical_or(%88, %89) /* ty=Tensor[(?, 4, 14), bool] */;
  %91 = cast(%90, dtype="bool") /* ty=Tensor[(?, 4, 14), bool] */;
  %92 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%83, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = cast(%var_651, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %96 = cast(%var_681, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %97 = reshape(%96, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %98 = @func_40(%97) /* ty=Tensor[(14, 15, 13), uint16] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %100 = reshape(%99, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %101 = cast(%var_681, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %102 = reshape(%101, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %103 = exp(%81) /* ty=Tensor[(1, 4, 14), float32] */;
  %104 = greater_equal(%93, %94) /* ty=Tensor[(?, 4, 14), bool] */;
  %105 = sinh(%95) /* ty=Tensor[(1, 4, 14), float64] */;
  %106 = @func_40(%100) /* ty=Tensor[(14, 15, 13), uint16] */;
  %107 = @func_40(%102) /* ty=Tensor[(14, 15, 13), uint16] */;
  (%103, %104, %105, %98, %var_681, %106, %107)
}

def @func_3473() -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  %108 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %111 = reshape(%109, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %112 = reshape(%110, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %113 = @func_1596(%111, %112) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %114 = %108.0;
  %115 = %113.0;
  (%114, %115, meta[relay.Constant][7] /* ty=Tensor[(270), uint32] */)
}

def @func_4995() -> Tensor[(15, 2, 9), uint32] {
  %116 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %116.0
}

def @func_2568(%var_2517: Tensor[(9, 8, 6), float64], %var_2518: Tensor[(9, 8, 6), float64], %var_2526: Tensor[(1170), float64], %var_2551: Tensor[(56), float64], %var_2552: Tensor[(2730), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
  %117 = cast(%var_2526, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %118 = reshape(%117, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %119 = cast(%var_2518, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
  %120 = shape_of(%var_2517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_2517, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = equal(%121, %122) /* ty=Tensor[(9, 8, 6), bool] */;
  %124 = cast(%var_2517, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %128 = cast(meta[relay.Constant][8] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %130 = cast(%var_2551, dtype="float64") /* ty=Tensor[(56), float64] */;
  %131 = cast(%var_2552, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %132 = reshape(%128, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %133 = reshape(%129, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %134 = reshape(%130, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %135 = reshape(%131, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %136 = @func_889(%132, %133, %134, %135) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %137 = cast(%var_2551, dtype="float64") /* ty=Tensor[(56), float64] */;
  %138 = %136.4;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %140 = reshape(%137, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %141 = reshape(%139, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %142 = @func_696(%140, %141) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %144 = reshape(%143, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %145 = @func_1314(%144) /* ty=(Tensor[(14, 14, 4), float64],) */;
  %146 = @func_1248(%118) /* ty=Tensor[(15, 13, 6), float64] */;
  %147 = add(%126, %127) /* ty=Tensor[(9, 8, 6), uint64] */;
  %148 = %142.6;
  %149 = %145.0;
  (%146, %var_2526, %147, %138, meta[relay.Constant][8] /* ty=Tensor[(1620), bool] */, %var_2551, %var_2552, %148, %149, meta[relay.Constant][9] /* ty=Tensor[(784), float64] */)
}

def @func_2860(%var_2840: Tensor[(13, 5, 9), int64]) -> (Tensor[(13, 5, 9), float64],) {
  %150 = cast(%var_2840, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %151 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 5, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = less_equal(%152, %153) /* ty=Tensor[(13, 5, 9), bool] */;
  %155 = cast(%var_2840, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %159 = divide(%157, %158) /* ty=Tensor[(13, 5, 9), float64] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
  %161 = sigmoid(%160) /* ty=Tensor[(13, 5, 9), float64] */;
  (%161,)
}

def @func_3407(%var_3327: Tensor[(7, 6, 1), int8], %var_3328: Tensor[(7, 6, 8), int8], %var_3352: Tensor[(2730), float32], %var_3358: Tensor[(784), float32], %var_3359: Tensor[(270), uint32], %var_3386: Tensor[(432), float64], %var_3388: Tensor[(56), float64], %var_3400: Tensor[(7, 6, 8), float64]) -> (Tensor[(7, 6, 8), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(910, 3), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool], Tensor[(1620), bool], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(56), float64], Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), bool]) {
  %162 = cast(%var_3327, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
  %163 = cast(%var_3328, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %164 = less(%162, %163) /* ty=Tensor[(7, 6, 8), bool] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %166 = cast(%var_3327, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %167 = cast(%var_3352, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %168 = reshape(%167, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %169 = @func_40(%168) /* ty=Tensor[(14, 15, 13), uint16] */;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %171 = reshape(%170, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %172 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %173 = cast(%var_3358, dtype="float32") /* ty=Tensor[(784), float32] */;
  %174 = cast(%var_3359, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %176 = reshape(%172, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %177 = reshape(%173, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %178 = reshape(%174, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %179 = reshape(%175, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %180 = @func_1778(%176, %177, %178, %179) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %181 = cast(%var_3386, dtype="float64") /* ty=Tensor[(432), float64] */;
  %182 = cast(%var_3386, dtype="float64") /* ty=Tensor[(432), float64] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %184 = cast(%var_3388, dtype="float64") /* ty=Tensor[(56), float64] */;
  %185 = cast(%169, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %186 = reshape(%181, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %187 = reshape(%182, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %188 = reshape(%183, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %189 = reshape(%184, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %190 = reshape(%185, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %191 = @func_2568(%186, %187, %188, %189, %190) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %192 = cast(%var_3328, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %193 = sqrt(%192) /* ty=Tensor[(7, 6, 8), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %195 = sinh(%194) /* ty=Tensor[(7, 6, 8), float64] */;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %197 = log2(%196) /* ty=Tensor[(7, 6, 8), float32] */;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %199 = cast(%var_3327, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
  %200 = cast(%var_3400, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %201 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%195, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %204 = add(%165, %166) /* ty=Tensor[(7, 6, 8), float64] */;
  %205 = @func_40(%171) /* ty=Tensor[(14, 15, 13), uint16] */;
  %206 = %180.4;
  %207 = %191.4;
  %208 = floor_mod(%198, %199) /* ty=Tensor[(7, 6, 8), float32] */;
  %209 = not_equal(%202, %203) /* ty=Tensor[(7, 6, 8), bool] */;
  (%204, %169, %var_3352, %205, %206, meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, %var_3358, %var_3359, meta[relay.Constant][12] /* ty=Tensor[(1620), bool] */, %207, %var_3386, meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, %var_3388, %208, %209)
}

def @func_4200(%var_4174: Tensor[(12, 6, 2), float64], %var_4184: Tensor[(15, 13, 6), float64], %var_4195: Tensor[(784), float64]) -> (Tensor[(5, 234), float64], Tensor[(15, 13, 6), uint64], Tensor[(12, 6, 2), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64], Tensor[(12, 6, 2), float64]) {
  %210 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 234), float64] */, dtype="float64") /* ty=Tensor[(5, 234), float64] */;
  %211 = reshape(%210, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %212 = @func_1248(%211) /* ty=Tensor[(15, 13, 6), float64] */;
  %213 = cast(%var_4184, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %217 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
  %218 = cast(%var_4174, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %222 = bitwise_and(%220, %221) /* ty=Tensor[(12, 6, 2), int32] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %224 = cast(%var_4195, dtype="float64") /* ty=Tensor[(784), float64] */;
  %225 = reshape(%224, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %226 = @func_1314(%225) /* ty=(Tensor[(14, 14, 4), float64],) */;
  %227 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %228 = multiply(%215, %216) /* ty=Tensor[(15, 13, 6), uint64] */;
  %229 = sigmoid(%223) /* ty=Tensor[(12, 6, 2), float64] */;
  %230 = %226.0;
  %231 = %227.0;
  (meta[relay.Constant][14] /* ty=Tensor[(5, 234), float64] */, %228, %229, %230, %var_4195, %231)
}

def @func_3678() -> (Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) {
  %232 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 6, 2), float64] */, dtype="int16") /* ty=Tensor[(12, 6, 2), int16] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="int16") /* ty=Tensor[(12, 6, 2), int16] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %237 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %238 = reshape(%237, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float32] */;
  %239 = bitwise_xor(%235, %236) /* ty=Tensor[(12, 6, 2), int16] */;
  %240 = @func_2634(%238) /* ty=Tensor[(3, 15, 16), float32] */;
  (%239, %240, meta[relay.Constant][16] /* ty=Tensor[(720), float32] */)
}

def @func_5643() -> (Tensor[(15, 2, 9), uint32],) {
  %241 = @func_4886() /* ty=Tensor[(15, 2, 9), uint32] */;
  (%241,)
}

def @func_3591() -> Tensor[(12, 6, 2), float64] {
  @func_3560() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_4517(%var_4503: float64, %var_4506: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
  %242 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %243 = cast(%var_4503, dtype="float64") /* ty=float64 */;
  %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %245 = cast(meta[relay.Constant][18] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %246 = cast(%var_4506, dtype="int16") /* ty=Tensor[(896), int16] */;
  %247 = reshape(%243, newshape=[]) /* ty=float64 */;
  %248 = reshape(%244, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
  %249 = reshape(%245, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %250 = reshape(%246, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %251 = @func_3245(%247, %248, %249, %250) /* ty=(Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) */;
  %252 = %242.0;
  %253 = %251.2;
  (%252, %253, %var_4503, meta[relay.Constant][17] /* ty=Tensor[(1144), float64] */, meta[relay.Constant][18] /* ty=Tensor[(56), float64] */, %var_4506)
}

def @func_4886() -> Tensor[(15, 2, 9), uint32] {
  %254 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %254.0
}

def @func_1016(%var_1008: Tensor[(2, 28), float64], %var_1009: Tensor[(2730), float32]) -> (Tensor[(7, 1, 2), bool], Tensor[(14, 15, 13), uint16], Tensor[(2, 28), float64], Tensor[(2730), float32]) {
  %255 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %256 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 1, 2), uint16] */, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %257 = cast(%var_1008, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %258 = cast(%var_1009, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %259 = reshape(%257, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %260 = reshape(%258, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %261 = @func_696(%259, %260) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %262 = less_equal(%255, %256) /* ty=Tensor[(7, 1, 2), bool] */;
  %263 = %261.5;
  (%262, %263, %var_1008, %var_1009)
}

def @func_2358(%var_2316: Tensor[(16, 7, 8), int16], %var_2317: Tensor[(16, 7, 8), int16], %var_2346: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) {
  %264 = cast(%var_2317, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
  %265 = shape_of(%var_2316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%var_2316, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %268 = cast(%var_2317, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %269 = cast(meta[relay.Constant][21] /* ty=Tensor[(540, 3), bool] */, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(540, 3), bool] */, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %271 = cast(%var_2346, dtype="float64") /* ty=Tensor[(56), float64] */;
  %272 = cast(meta[relay.Constant][22] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %273 = reshape(%269, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %274 = reshape(%270, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %275 = reshape(%271, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %276 = reshape(%272, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %277 = @func_889(%273, %274, %275, %276) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %278 = subtract(%266, %267) /* ty=Tensor[(16, 7, 8), int16] */;
  %279 = log2(%268) /* ty=Tensor[(16, 7, 8), float64] */;
  %280 = %277.0;
  (%278, %279, %280, meta[relay.Constant][21] /* ty=Tensor[(540, 3), bool] */, %var_2346, meta[relay.Constant][22] /* ty=Tensor[(2730), float32] */)
}

def @func_4768(%var_4763: Tensor[(14, 15, 13), uint16]) -> (Tensor[(14, 15, 13), int32],) {
  %281 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %282 = %281.1;
  %283 = cast(%var_4763, dtype="int32") /* ty=Tensor[(14, 15, 13), int32] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="int32") /* ty=Tensor[(14, 15, 13), int32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %287 = left_shift(%285, %286) /* ty=Tensor[(14, 15, 13), int32] */;
  (%287,)
}

def @func_4958(%var_4953: Tensor[(12, 6, 2), float64]) -> Tensor[(12, 6, 2), int32] {
  %288 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %289 = %288.0;
  %290 = cast(%var_4953, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%292, %293) /* ty=Tensor[(12, 6, 2), int32] */
}

def @func_5698(%var_5688: Tensor[(12, 6, 2), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(12, 6, 2), float64]) {
  %294 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %295 = %294.0;
  %296 = cast(%var_5688, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %300 = @func_5418() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %301 = floor_divide(%298, %299) /* ty=Tensor[(12, 6, 2), float64] */;
  %302 = %300.0;
  (%301, %302)
}

def @func_40(%var_25: Tensor[(14, 15, 13), float32]) -> Tensor[(14, 15, 13), uint16] {
  %303 = cast(%var_25, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %304 = cos(%303) /* ty=Tensor[(14, 15, 13), float32] */;
  %305 = cast(%var_25, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%307, %308) /* ty=Tensor[(14, 15, 13), uint16] */
}

def @func_5520(%var_5499: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(2730), float32], float64, Tensor[(896), int16], Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), float64], Tensor[(12, 6, 2), float64]) {
  %309 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %310 = cast(meta[relay.Constant][23] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %311 = reshape(%310, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %312 = cast(-0.448906f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %313 = cast(%var_5499, dtype="int16") /* ty=Tensor[(896), int16] */;
  %314 = reshape(%312, newshape=[]) /* ty=float64 */;
  %315 = reshape(%313, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %316 = @func_4517(%314, %315) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */;
  %317 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %318 = @func_40(%311) /* ty=Tensor[(14, 15, 13), uint16] */;
  %319 = cast(%318, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
  %320 = reshape(%319, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint16] */;
  %321 = @func_4768(%320) /* ty=(Tensor[(14, 15, 13), int32],) */;
  %322 = %321.0;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %324 = @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %325 = %309.0;
  %326 = %316.1;
  %327 = %317.0;
  %328 = atanh(%323) /* ty=Tensor[(14, 15, 13), float64] */;
  %329 = %324.0;
  (%325, %318, meta[relay.Constant][23] /* ty=Tensor[(2730), float32] */, %326, -0.448906f64 /* ty=float64 */, %var_5499, %327, %328, %329)
}

def @func_1314(%var_1296: Tensor[(14, 14, 4), float64]) -> (Tensor[(14, 14, 4), float64],) {
  %330 = cast(%var_1296, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %331 = tan(%330) /* ty=Tensor[(14, 14, 4), float64] */;
  (%331,)
}

def @func_4150(%var_4147: Tensor[(1176), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(10, 1, 15), bool], Tensor[(1176), float32]) {
  %332 = cast(%var_4147, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %333 = reshape(%332, newshape=[6, 196]) /* ty=Tensor[(6, 196), float32] */;
  %334 = @func_3918(%333) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) */;
  %335 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  %336 = %334.0;
  (%335, %336, %var_4147)
}

def @func_1596(%var_1590: Tensor[(15, 2, 9), uint32], %var_1591: Tensor[(15, 2, 9), uint32]) -> (Tensor[(15, 2, 9), uint32],) {
  %337 = cast(%var_1591, dtype="uint32") /* ty=Tensor[(15, 2, 9), uint32] */;
  %338 = shape_of(%var_1590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_1590, dtype="uint32") /* ty=Tensor[(15, 2, 9), uint32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %341 = left_shift(%339, %340) /* ty=Tensor[(15, 2, 9), uint32] */;
  (%341,)
}

def @func_5774(%var_5734: Tensor[(9, 12, 3), uint32], %var_5735: Tensor[(9, 12, 3), uint32], %var_5746: Tensor[(14, 15, 13), uint16], %var_5753: Tensor[(9, 12, 3), bool]) -> (Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) {
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %343 = reshape(%342, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %344 = @func_40(%343) /* ty=Tensor[(14, 15, 13), uint16] */;
  %345 = cast(%var_5746, dtype="int64") /* ty=Tensor[(14, 15, 13), int64] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="int64") /* ty=Tensor[(14, 15, 13), int64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %349 = cast(%var_5735, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %350 = shape_of(%var_5734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_5734, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = less_equal(%351, %352) /* ty=Tensor[(9, 12, 3), bool] */;
  %354 = cast(%var_5753, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = cast(meta[relay.Constant][25] /* ty=Tensor[(36, 2), uint32] */, dtype="uint32") /* ty=Tensor[(36, 2), uint32] */;
  %359 = reshape(%358, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint32] */;
  %360 = @func_5245(%359) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) */;
  %361 = cast(%var_5734, dtype="float32") /* ty=Tensor[(9, 12, 3), float32] */;
  %362 = add(%347, %348) /* ty=Tensor[(14, 15, 13), int64] */;
  %363 = less(%356, %357) /* ty=Tensor[(9, 12, 3), bool] */;
  %364 = %360.2;
  %365 = exp(%361) /* ty=Tensor[(9, 12, 3), float32] */;
  (meta[relay.Constant][24] /* ty=Tensor[(2730), float32] */, %362, %363, %364, meta[relay.Constant][25] /* ty=Tensor[(36, 2), uint32] */, %365)
}

def @func_5363() -> Tensor[(15, 2, 9), uint32] {
  %366 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %366.0
}

def @func_3445() -> (Tensor[(12, 6, 2), float64],) {
  %367 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %368 = rsqrt(%367) /* ty=Tensor[(12, 6, 2), float64] */;
  (%368,)
}

def @func_5949(%var_5904: Tensor[(56), float64], %var_5932: Tensor[(130, 9), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(56), float64], Tensor[(2, 216), float64], Tensor[(56), float64], Tensor[(130, 9), uint8], Tensor[(2730), float64], Tensor[(12, 6, 2), float64]) {
  %369 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 216), float64] */, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 216), float64] */, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %371 = cast(meta[relay.Constant][28] /* ty=Tensor[(130, 9), float64] */, dtype="float64") /* ty=Tensor[(130, 9), float64] */;
  %372 = cast(%var_5904, dtype="float64") /* ty=Tensor[(56), float64] */;
  %373 = cast(meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %374 = reshape(%369, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %375 = reshape(%370, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %376 = reshape(%371, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %377 = reshape(%372, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %378 = reshape(%373, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %379 = @func_2568(%374, %375, %376, %377, %378) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %380 = cast(%var_5932, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %381 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(130, 9), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(meta[relay.Constant][28] /* ty=Tensor[(130, 9), float64] */, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, dtype="float64") /* ty=Tensor[(2730), float64] */;
  %385 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  %386 = %379.5;
  %387 = bitwise_xor(%382, %383) /* ty=Tensor[(130, 9), uint8] */;
  %388 = acos(%384) /* ty=Tensor[(2730), float64] */;
  %389 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%385, %386, meta[relay.Constant][27] /* ty=Tensor[(2, 216), float64] */, %var_5904, %387, %388, %389)
}

def @func_3831() -> Tensor[(10, 1, 15), bool] {
  %390 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %391 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 1, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  less_equal(%390, %391) /* ty=Tensor[(10, 1, 15), bool] */
}

def @func_5196(%var_5187: Tensor[(270), uint32]) -> (Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) {
  %392 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %393 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %394 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %395 = %394.2;
  %396 = cast(%var_5187, dtype="int16") /* ty=Tensor[(270), int16] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(1), int32] */;
  %398 = cast(%395, dtype="int16") /* ty=Tensor[(270), int16] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?), int16] */;
  %400 = %392.2;
  %401 = %393.0;
  %402 = bitwise_xor(%398, %399) /* ty=Tensor[(270), int16] */;
  (%400, %401, %402)
}

def @func_4588(%var_4575: Tensor[(12, 6, 2), float64]) -> (Tensor[(3360), float32], Tensor[(12, 6, 2), bool]) {
  %403 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %404 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  %405 = cast(%var_4575, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = %403.2;
  %410 = less_equal(%407, %408) /* ty=Tensor[(12, 6, 2), bool] */;
  (%409, %410)
}

def @func_4125() -> (Tensor[(12, 6, 2), float64],) {
  %411 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%411,)
}

def @func_3245(%var_3206: float64, %var_3207: Tensor[(8, 11, 13), float64], %var_3218: Tensor[(56), float64], %var_3232: Tensor[(896), int16]) -> (Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) {
  %412 = cast(%var_3206, dtype="bool") /* ty=bool */;
  %413 = cast(%var_3207, dtype="bool") /* ty=Tensor[(8, 11, 13), bool] */;
  %414 = cast(meta[relay.Constant][32] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %415 = reshape(%414, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %416 = cast(%var_3218, dtype="float64") /* ty=Tensor[(56), float64] */;
  %417 = @func_40(%415) /* ty=Tensor[(14, 15, 13), uint16] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %419 = reshape(%416, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %420 = reshape(%418, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %421 = @func_696(%419, %420) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %422 = cast(%var_3232, dtype="int16") /* ty=Tensor[(896), int16] */;
  %423 = cast(%var_3232, dtype="int16") /* ty=Tensor[(896), int16] */;
  %424 = %421.0;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %426 = reshape(%422, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %427 = reshape(%423, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %428 = reshape(%425, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %429 = @func_2358(%426, %427, %428) /* ty=(Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %430 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 1170), float64] */, dtype="float64") /* ty=Tensor[(1, 1170), float64] */;
  %431 = reshape(%430, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %432 = less(%412, %413) /* ty=Tensor[(8, 11, 13), bool] */;
  %433 = %429.2;
  %434 = @func_1248(%431) /* ty=Tensor[(15, 13, 6), float64] */;
  (%432, %417, meta[relay.Constant][32] /* ty=Tensor[(2730), float32] */, %424, %var_3218, %433, %var_3232, %434, meta[relay.Constant][33] /* ty=Tensor[(1, 1170), float64] */)
}

def @func_6062(%var_6053: Tensor[(6, 13, 7), int16], %var_6054: Tensor[(6, 13, 7), int16]) -> Tensor[(6, 13, 7), int16] {
  %435 = cast(%var_6054, dtype="int16") /* ty=Tensor[(6, 13, 7), int16] */;
  %436 = shape_of(%var_6053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_6053, dtype="int16") /* ty=Tensor[(6, 13, 7), int16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%437, %438) /* ty=Tensor[(6, 13, 7), int16] */
}

def @func_4724(%var_4712: Tensor[(7, 16, 14), uint32], %var_4722: Tensor[(1170), float64]) -> (Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) {
  %439 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %440 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_4712, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %444 = cast(meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %445 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %446 = reshape(%443, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %447 = reshape(%444, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %448 = reshape(%445, newshape=[130, 9]) /* ty=Tensor[(130, 9), float64] */;
  %449 = @func_4672(%446, %447, %448) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) */;
  %450 = maximum(%441, %442) /* ty=Tensor[(7, 16, 14), uint32] */;
  %451 = %449.2;
  (%450, %451, meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, %var_4722)
}

def @func_5878() -> (Tensor[(12, 6, 2), float64],) {
  %452 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_1778(%var_1697: Tensor[(576), float32], %var_1723: Tensor[(8, 7, 14), float32], %var_1733: Tensor[(270), uint32], %var_1745: Tensor[(6, 270), bool]) -> (Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) {
  %454 = cast(%var_1697, dtype="float32") /* ty=Tensor[(576), float32] */;
  %455 = reshape(%454, newshape=[12, 12, 4]) /* ty=Tensor[(12, 12, 4), float32] */;
  %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %457 = cast(meta[relay.Constant][37] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
  %458 = reshape(%456, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %459 = reshape(%457, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %460 = @func_696(%458, %459) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %461 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 14), float32] */;
  %462 = log(%461) /* ty=Tensor[(8, 7, 14), float32] */;
  %463 = cast(%var_1723, dtype="uint64") /* ty=Tensor[(8, 7, 14), uint64] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="uint64") /* ty=Tensor[(8, 7, 14), uint64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %467 = cast(%462, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %468 = asinh(%467) /* ty=Tensor[(8, 7, 14), float64] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(8, 7, 14), float32] */;
  %470 = cast(%var_1733, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %471 = cast(%var_1733, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %472 = reshape(%470, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %473 = reshape(%471, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %474 = @func_1596(%472, %473) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %475 = cast(meta[relay.Constant][39] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %476 = reshape(%475, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
  %477 = @func_945(%476) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) */;
  %478 = cast(%var_1745, dtype="bool") /* ty=Tensor[(6, 270), bool] */;
  %479 = cast(%var_1745, dtype="bool") /* ty=Tensor[(6, 270), bool] */;
  %480 = %460.1;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(?, 4, 14), float64] */;
  %482 = cast(meta[relay.Constant][37] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
  %483 = reshape(%478, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %484 = reshape(%479, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %485 = reshape(%481, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %486 = reshape(%482, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %487 = @func_889(%483, %484, %485, %486) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %488 = %477.2;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %490 = reshape(%489, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %491 = @func_793(%490) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %492 = sin(%469) /* ty=Tensor[(8, 7, 14), float32] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %494 = reshape(%493, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %495 = @func_1314(%494) /* ty=(Tensor[(14, 14, 4), float64],) */;
  %496 = @func_1150(%455) /* ty=Tensor[(12, 12, 4), float32] */;
  %497 = multiply(%465, %466) /* ty=Tensor[(8, 7, 14), uint64] */;
  %498 = %474.0;
  %499 = %487.0;
  %500 = %491.0;
  %501 = %495.0;
  (%496, %var_1697, %480, meta[relay.Constant][36] /* ty=Tensor[(56, 1), float64] */, meta[relay.Constant][37] /* ty=Tensor[(910, 3), float32] */, %497, %492, %498, %var_1733, %488, meta[relay.Constant][39] /* ty=Tensor[(55), float64] */, %499, %var_1745, %500, %501)
}

def @func_5354() -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), float32]) {
  %502 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %503 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
  %506 = %502.0;
  %507 = log(%505) /* ty=Tensor[(15, 2, 9), float32] */;
  (%506, %507)
}

def @func_4463() -> (Tensor[(15, 2, 9), uint32],) {
  %508 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %509 = %508.1;
  (%509,)
}

def @func_5813() -> (Tensor[(5, 5, 10), float64], Tensor[(12, 6, 2), float64]) {
  %510 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %511 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(5, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %514 = power(%512, %513) /* ty=Tensor[(5, 5, 10), float64] */;
  %515 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
  (%514, %515)
}

def @func_3918(%var_3861: Tensor[(6, 196), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) {
  %516 = cast(%var_3861, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
  %517 = cast(meta[relay.Constant][42] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %518 = cast(meta[relay.Constant][43] /* ty=Tensor[(392, 2), float32] */, dtype="float32") /* ty=Tensor[(392, 2), float32] */;
  %519 = reshape(%516, newshape=[12, 7, 14]) /* ty=Tensor[(12, 7, 14), float32] */;
  %520 = reshape(%517, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
  %521 = reshape(%518, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %522 = @func_1865(%519, %520, %521) /* ty=(Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) */;
  %523 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 196), float32] */, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
  %524 = shape_of(%var_3861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %525 = cast(%var_3861, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %527 = logical_and(%525, %526) /* ty=Tensor[(6, 196), bool] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
  %529 = sqrt(%528) /* ty=Tensor[(6, 196), float64] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
  %531 = asinh(%530) /* ty=Tensor[(6, 196), float32] */;
  %532 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 196), float32] */, dtype="int8") /* ty=Tensor[(6, 196), int8] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(2), int32] */;
  %534 = cast(%531, dtype="int8") /* ty=Tensor[(6, 196), int8] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %536 = logical_xor(%534, %535) /* ty=Tensor[(6, 196), int8] */;
  %537 = cast(%536, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
  %538 = shape_of(%529, dtype="int32") /* ty=Tensor[(2), int32] */;
  %539 = cast(%529, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %541 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  %542 = %522.6;
  %543 = less(%539, %540) /* ty=Tensor[(6, 196), bool] */;
  (%541, %542, meta[relay.Constant][42] /* ty=Tensor[(576), float32] */, meta[relay.Constant][43] /* ty=Tensor[(392, 2), float32] */, %543)
}

def @func_5245(%var_5227: Tensor[(2, 12, 3), uint32]) -> (Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) {
  %544 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(2, 12, 3), uint32] */;
  %545 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(2, 12, 3), uint32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %548 = maximum(%546, %547) /* ty=Tensor[(2, 12, 3), uint32] */;
  %549 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %553 = cast(%var_5227, dtype="uint64") /* ty=Tensor[(2, 12, 3), uint64] */;
  %554 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%548, dtype="uint64") /* ty=Tensor[(2, 12, 3), uint64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %557 = bitwise_xor(%555, %556) /* ty=Tensor[(2, 12, 3), uint64] */;
  %558 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %563 = left_shift(%551, %552) /* ty=Tensor[(2, 12, 3), uint16] */;
  %564 = logical_or(%560, %561) /* ty=Tensor[(2, 12, 3), bool] */;
  %565 = %562.0;
  (%563, %564, %565)
}

def @func_6263(%var_6137: Tensor[(6, 7, 15), float32], %var_6152: Tensor[(1568), uint32], %var_6153: Tensor[(1170), float64]) -> (Tensor[(126), float32], Tensor[(1568), uint32], Tensor[(1170), float64], Tensor[(36, 2), uint32], Tensor[(324), uint32], Tensor[(2730), uint16], Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(6, 7, 15), float64], Tensor[(6, 7, 15), uint32], Tensor[(12, 6, 2), float64]) {
  %566 = cast(%var_6152, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %567 = cast(%var_6153, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %568 = reshape(%566, newshape=[7, 16, 14]) /* ty=Tensor[(7, 16, 14), uint32] */;
  %569 = reshape(%567, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %570 = @func_4724(%568, %569) /* ty=(Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) */;
  %571 = cast(meta[relay.Constant][47] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %572 = cast(meta[relay.Constant][47] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %573 = cast(meta[relay.Constant][48] /* ty=Tensor[(2730), uint16] */, dtype="uint16") /* ty=Tensor[(2730), uint16] */;
  %574 = cast(meta[relay.Constant][47] /* ty=Tensor[(324), uint32] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %575 = reshape(%571, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %576 = reshape(%572, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %577 = reshape(%573, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint16] */;
  %578 = reshape(%574, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), bool] */;
  %579 = @func_5774(%575, %576, %577, %578) /* ty=(Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) */;
  %580 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %581 = @func_6128() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %582 = cast(%var_6137, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %583 = erf(%582) /* ty=Tensor[(6, 7, 15), float32] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %585 = acos(%584) /* ty=Tensor[(6, 7, 15), float32] */;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %587 = cast(%585, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %588 = cosh(%587) /* ty=Tensor[(6, 7, 15), float64] */;
  %589 = cast(%585, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = greater(%591, %592) /* ty=Tensor[(6, 7, 15), bool] */;
  %594 = cast(%593, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %595 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%588, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %598 = minimum(%596, %597) /* ty=Tensor[(6, 7, 15), int32] */;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %600 = acosh(%599) /* ty=Tensor[(6, 7, 15), float64] */;
  %601 = cast(%585, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %602 = asinh(%601) /* ty=Tensor[(6, 7, 15), float32] */;
  %603 = cast(%602, dtype="uint32") /* ty=Tensor[(6, 7, 15), uint32] */;
  %604 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%600, dtype="uint32") /* ty=Tensor[(6, 7, 15), uint32] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %607 = @func_5878() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %608 = %570.2;
  %609 = %579.4;
  %610 = %580.0;
  %611 = %581.0;
  %612 = asin(%586) /* ty=Tensor[(6, 7, 15), float64] */;
  %613 = right_shift(%605, %606) /* ty=Tensor[(6, 7, 15), uint32] */;
  %614 = %607.0;
  (%608, %var_6152, %var_6153, %609, meta[relay.Constant][47] /* ty=Tensor[(324), uint32] */, meta[relay.Constant][48] /* ty=Tensor[(2730), uint16] */, %610, %611, %612, %613, %614)
}

def @func_5118(%var_5114: Tensor[(3, 8), float64]) -> (Tensor[(3, 8), float64],) {
  %615 = cast(%var_5114, dtype="float64") /* ty=Tensor[(3, 8), float64] */;
  %616 = log(%615) /* ty=Tensor[(3, 8), float64] */;
  (%616,)
}

def @func_2599(%var_2576: Tensor[(15, 9, 15), int32], %var_2577: Tensor[(15, 9, 15), int32], %var_2595: Tensor[(784), float64]) -> (Tensor[(15, 9, 15), bool], Tensor[(2730), float32], Tensor[(?, 4, 14), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
  %617 = cast(%var_2577, dtype="bool") /* ty=Tensor[(15, 9, 15), bool] */;
  %618 = shape_of(%var_2576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_2576, dtype="bool") /* ty=Tensor[(15, 9, 15), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(meta[relay.Constant][50] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %622 = cast(meta[relay.Constant][49] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %623 = reshape(%621, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %624 = reshape(%622, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %625 = @func_696(%623, %624) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %626 = %625.2;
  %627 = cast(meta[relay.Constant][50] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %631 = cast(%var_2595, dtype="float64") /* ty=Tensor[(784), float64] */;
  %632 = reshape(%631, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %633 = @func_1314(%632) /* ty=(Tensor[(14, 14, 4), float64],) */;
  %634 = less_equal(%619, %620) /* ty=Tensor[(15, 9, 15), bool] */;
  %635 = floor_mod(%629, %630) /* ty=Tensor[(?, 4, 14), float64] */;
  %636 = %633.0;
  (%634, meta[relay.Constant][49] /* ty=Tensor[(2730), float32] */, %635, %636, %var_2595)
}

def @func_793(%var_785: Tensor[(14, 16, 15), float32]) -> (Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) {
  %637 = cast(%var_785, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %638 = cast(meta[relay.Constant][51] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %639 = cast(meta[relay.Constant][52] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %640 = reshape(%638, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %641 = reshape(%639, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %642 = @func_696(%640, %641) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %643 = atanh(%637) /* ty=Tensor[(14, 16, 15), float32] */;
  %644 = %642.3;
  (%643, %644, meta[relay.Constant][51] /* ty=Tensor[(56), float64] */, meta[relay.Constant][52] /* ty=Tensor[(2730), float32] */)
}

def @func_5143(%var_5139: Tensor[(3, 5, 5), int32]) -> Tensor[(3, 5, 5), bool] {
  %645 = cast(%var_5139, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %646 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(3, 5, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 5, 5), int32] */, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%647, %648) /* ty=Tensor[(3, 5, 5), bool] */
}

def @func_3990() -> Tensor[(12, 6, 2), float64] {
  @func_3596() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_4242(%var_4225: Tensor[(12, 6, 2), float64], %var_4232: Tensor[(432), float64]) -> (Tensor[(12, 6, 2), bool], Tensor[(784), float64], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(2, 28), float64], Tensor[(2730), float32], Tensor[(12, 6, 2), float64]) {
  %649 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
  %650 = cast(%var_4225, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%var_4232, dtype="float64") /* ty=Tensor[(432), float64] */;
  %655 = cast(%var_4232, dtype="float64") /* ty=Tensor[(432), float64] */;
  %656 = cast(meta[relay.Constant][54] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %657 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %658 = cast(meta[relay.Constant][56] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %659 = reshape(%654, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %660 = reshape(%655, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %661 = reshape(%656, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %662 = reshape(%657, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %663 = reshape(%658, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %664 = @func_2568(%659, %660, %661, %662, %663) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %665 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %666 = greater_equal(%652, %653) /* ty=Tensor[(12, 6, 2), bool] */;
  %667 = %664.9;
  %668 = %665.0;
  (%666, %667, %var_4232, meta[relay.Constant][54] /* ty=Tensor[(1170), float64] */, meta[relay.Constant][55] /* ty=Tensor[(2, 28), float64] */, meta[relay.Constant][56] /* ty=Tensor[(2730), float32] */, %668)
}

def @func_5418() -> (Tensor[(12, 6, 2), float64],) {
  %669 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  (%669,)
}

def @func_4289(%var_4283: Tensor[(576), float32], %var_4284: Tensor[(784), float32], %var_4286: Tensor[(3, 540), bool]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 15, 16), float32], Tensor[(14, 16, 15), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(3, 540), bool]) {
  %670 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %671 = cast(%var_4283, dtype="float32") /* ty=Tensor[(576), float32] */;
  %672 = cast(%var_4284, dtype="float32") /* ty=Tensor[(784), float32] */;
  %673 = cast(meta[relay.Constant][57] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %674 = cast(%var_4286, dtype="bool") /* ty=Tensor[(3, 540), bool] */;
  %675 = reshape(%671, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %676 = reshape(%672, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %677 = reshape(%673, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %678 = reshape(%674, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %679 = @func_1778(%675, %676, %677, %678) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %680 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  %681 = %670.1;
  %682 = %679.13;
  (%680, %681, %682, %var_4283, %var_4284, meta[relay.Constant][57] /* ty=Tensor[(270), uint32] */, %var_4286)
}

def @func_6128() -> (Tensor[(15, 2, 9), uint32],) {
  %683 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %684 = %683.0;
  (%684,)
}

def @func_3707() -> (Tensor[(12, 6, 2), float64],) {
  %685 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  (%685,)
}

def @func_4359(%var_4339: Tensor[(320), float32], %var_4340: Tensor[(1144), float64], %var_4341: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(3, 90), float32], Tensor[(320), float32], Tensor[(1144), float64], Tensor[(896), int16], Tensor[(12, 6, 2), int16]) {
  %686 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %687 = cast(%var_4339, dtype="float32") /* ty=Tensor[(320), float32] */;
  %688 = cast(%var_4340, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %689 = cast(%var_4341, dtype="int16") /* ty=Tensor[(896), int16] */;
  %690 = reshape(%687, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), float32] */;
  %691 = reshape(%688, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %692 = reshape(%689, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %693 = @func_3655(%690, %691, %692) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */;
  %694 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %695 = %686.0;
  %696 = %693.3;
  %697 = %694.0;
  (%695, %696, %var_4339, %var_4340, %var_4341, %697)
}

def @func_5615(%var_5599: Tensor[(270), uint32]) -> (Tensor[(12, 6, 2), bool], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  %698 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %701 = tan(%700) /* ty=Tensor[(12, 6, 2), float64] */;
  %702 = cast(%699, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %706 = cast(%var_5599, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %707 = cast(%var_5599, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %708 = reshape(%706, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %709 = reshape(%707, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %710 = @func_1596(%708, %709) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %711 = greater(%704, %705) /* ty=Tensor[(12, 6, 2), bool] */;
  %712 = %710.0;
  (%711, %712, %var_5599)
}

def @func_1150(%var_1138: Tensor[(12, 12, 4), float32]) -> Tensor[(12, 12, 4), float32] {
  %713 = cast(%var_1138, dtype="float32") /* ty=Tensor[(12, 12, 4), float32] */;
  cos(%713) /* ty=Tensor[(12, 12, 4), float32] */
}

def @func_4843() -> (Tensor[(15, 2, 9), uint32],) {
  %714 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %715 = %714.0;
  (%715,)
}

def @func_6112() -> (Tensor[(12, 6, 2), float64],) {
  %716 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%716,)
}

def @func_4401() -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) {
  %717 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %718 = cast(meta[relay.Constant][58] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %719 = reshape(%718, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %720 = @func_793(%719) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %721 = %717.0;
  %722 = %720.1;
  (%721, %722, meta[relay.Constant][58] /* ty=Tensor[(3360), float32] */)
}

def @func_3655(%var_3626: Tensor[(16, 5, 4), float32], %var_3650: Tensor[(1144), float64], %var_3652: Tensor[(896), int16]) -> (Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
  %723 = cast(%var_3626, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %724 = cast(meta[relay.Constant][59] /* ty=Tensor[(585), int64] */, dtype="int64") /* ty=Tensor[(585), int64] */;
  %725 = reshape(%724, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int64] */;
  %726 = @func_2860(%725) /* ty=(Tensor[(13, 5, 9), float64],) */;
  %727 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 90), uint32] */, dtype="uint32") /* ty=Tensor[(3, 90), uint32] */;
  %728 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 90), uint32] */, dtype="uint32") /* ty=Tensor[(3, 90), uint32] */;
  %729 = reshape(%727, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %730 = reshape(%728, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %731 = @func_1596(%729, %730) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
  %734 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(3, 90), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 90), uint32] */, dtype="float32") /* ty=Tensor[(3, 90), float32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %737 = cast(-4.47811f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %738 = cast(%var_3650, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %739 = cast(meta[relay.Constant][61] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %740 = cast(%var_3652, dtype="int16") /* ty=Tensor[(896), int16] */;
  %741 = reshape(%737, newshape=[]) /* ty=float64 */;
  %742 = reshape(%738, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
  %743 = reshape(%739, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %744 = reshape(%740, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %745 = @func_3245(%741, %742, %743, %744) /* ty=(Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) */;
  %746 = cos(%723) /* ty=Tensor[(16, 5, 4), float32] */;
  %747 = %726.0;
  %748 = power(%735, %736) /* ty=Tensor[(3, 90), float32] */;
  %749 = %745.3;
  (%746, %747, meta[relay.Constant][59] /* ty=Tensor[(585), int64] */, %748, %749, -4.47811f64 /* ty=float64 */, %var_3650, meta[relay.Constant][61] /* ty=Tensor[(56), float64] */, %var_3652)
}

def @func_3560() -> Tensor[(12, 6, 2), float64] {
  %750 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %750.0
}

def @func_889(%var_849: Tensor[(9, 15, 12), bool], %var_850: Tensor[(9, 15, 12), bool], %var_875: Tensor[(56, 1), float64], %var_876: Tensor[(2730), float32]) -> (Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) {
  %751 = cast(%var_850, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %752 = shape_of(%var_849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_849, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %755 = logical_or(%753, %754) /* ty=Tensor[(9, 15, 12), bool] */;
  %756 = cast(%var_850, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = cast(%var_875, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %761 = cast(%var_876, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %762 = reshape(%760, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %763 = reshape(%761, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %764 = @func_696(%762, %763) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %765 = cast(meta[relay.Constant][62] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %766 = reshape(%765, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %767 = @func_793(%766) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %768 = cast(meta[relay.Constant][62] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %769 = reshape(%768, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %770 = @func_793(%769) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %771 = less_equal(%758, %759) /* ty=Tensor[(9, 15, 12), bool] */;
  %772 = %764.4;
  %773 = %767.1;
  %774 = %770.2;
  (%771, %772, %var_875, %var_876, %773, meta[relay.Constant][62] /* ty=Tensor[(3360), float32] */, %774)
}

def @func_4553(%var_4528: uint64, %var_4529: Tensor[(9, 8, 6), uint64]) -> (Tensor[(9, 8, 6), uint64],) {
  %775 = cast(%var_4528, dtype="uint64") /* ty=uint64 */;
  %776 = cast(%var_4529, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
  %777 = bitwise_xor(%775, %776) /* ty=Tensor[(9, 8, 6), uint64] */;
  (%777,)
}

def @func_4301() -> Tensor[(12, 6, 2), float64] {
  %778 = @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %778.0
}

def @func_3692() -> (Tensor[(12, 6, 2), float64],) {
  %779 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%779,)
}

def @func_1865(%var_1816: Tensor[(12, 7, 14), float32], %var_1855: Tensor[(36, 16), float32], %var_1856: Tensor[(784), float32]) -> (Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) {
  %780 = cast(%var_1816, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %781 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(12, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(meta[relay.Constant][63] /* ty=Tensor[(12, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %784 = cast(%var_1816, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %785 = cast(%var_1855, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %786 = cast(%var_1856, dtype="float32") /* ty=Tensor[(784), float32] */;
  %787 = cast(meta[relay.Constant][64] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %788 = cast(meta[relay.Constant][65] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %789 = reshape(%785, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %790 = reshape(%786, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %791 = reshape(%787, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %792 = reshape(%788, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %793 = @func_1778(%789, %790, %791, %792) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %794 = less_equal(%782, %783) /* ty=Tensor[(12, 7, 14), bool] */;
  %795 = sin(%784) /* ty=Tensor[(12, 7, 14), float32] */;
  %796 = %793.2;
  (%794, %795, %796, %var_1855, %var_1856, meta[relay.Constant][64] /* ty=Tensor[(270), uint32] */, meta[relay.Constant][65] /* ty=Tensor[(1620), bool] */)
}

def @func_3596() -> Tensor[(12, 6, 2), float64] {
  @func_3591() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_5207() -> (Tensor[(10, 1, 15), bool],) {
  %797 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  (%797,)
}

def @func_945(%var_936: Tensor[(5, 11, 1), float64]) -> (Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) {
  %798 = cast(%var_936, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
  %799 = cast(meta[relay.Constant][66] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %800 = reshape(%799, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %801 = @func_793(%800) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %802 = atanh(%798) /* ty=Tensor[(5, 11, 1), float64] */;
  %803 = %801.2;
  (%802, %803, meta[relay.Constant][66] /* ty=Tensor[(3360), float32] */)
}

def @func_4829() -> (Tensor[(12, 6, 2), float64],) {
  %804 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %805 = %804.0;
  (%805,)
}

def @func_4672(%var_4659: Tensor[(6, 3, 7), float32], %var_4660: Tensor[(6, 3, 7), float32], %var_4668: Tensor[(130, 9), float64]) -> (Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) {
  %806 = cast(%var_4660, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
  %807 = shape_of(%var_4659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%var_4659, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %810 = cast(%var_4668, dtype="float64") /* ty=Tensor[(130, 9), float64] */;
  %811 = reshape(%810, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %812 = floor_divide(%808, %809) /* ty=Tensor[(6, 3, 7), float32] */;
  %813 = @func_1248(%811) /* ty=Tensor[(15, 13, 6), float64] */;
  (%812, %813, %var_4668)
}

def @func_6026() -> (Tensor[(15, 2, 9), uint32], Tensor[(14, 15, 13), float32]) {
  %814 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %815 = %814.1;
  %816 = cast(meta[relay.Constant][67] /* ty=Tensor[(14, 15, 13), uint16] */, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%815, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %820 = multiply(%818, %819) /* ty=Tensor[(14, 15, 13), float64] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %822 = @func_4995() /* ty=Tensor[(15, 2, 9), uint32] */;
  %823 = sigmoid(%821) /* ty=Tensor[(14, 15, 13), float32] */;
  (%822, %823)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5419() -> (Tensor[(12, 6, 2), float64],) {
  %1 = fn () -> (Tensor[(12, 6, 2), float64],) {
    %0 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_793(%var_785: Tensor[(14, 16, 15), float32]) -> (Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) {
  %2 = cast(%var_785, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %5 = reshape(%3, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %6 = reshape(%4, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %7 = @func_696(%5, %6) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %8 = atanh(%2) /* ty=Tensor[(14, 16, 15), float32] */;
  %9 = %7.3;
  (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(56), float64] */, meta[relay.Constant][1] /* ty=Tensor[(2730), float32] */)
}

def @func_945(%var_936: Tensor[(5, 11, 1), float64]) -> (Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) {
  %10 = cast(%var_936, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %12 = reshape(%11, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %13 = @func_793(%12) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %14 = atanh(%10) /* ty=Tensor[(5, 11, 1), float64] */;
  %15 = %13.2;
  (%14, %15, meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */)
}

def @func_4303() -> Tensor[(12, 6, 2), float64] {
  @func_4301() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_2574(%var_2569: Tensor[(9, 8, 6), float64], %var_2570: Tensor[(9, 8, 6), float64], %var_2571: Tensor[(1170), float64], %var_2572: Tensor[(56), float64], %var_2573: Tensor[(2730), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
  %49 = fn (%var_2517: Tensor[(9, 8, 6), float64], %var_2518: Tensor[(9, 8, 6), float64], %var_2526: Tensor[(1170), float64], %var_2551: Tensor[(56), float64], %var_2552: Tensor[(2730), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
    %16 = cast(%var_2526, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %17 = reshape(%16, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %18 = cast(%var_2518, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
    %19 = shape_of(%var_2517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %20 = cast(%var_2517, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
    %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %22 = equal(%20, %21) /* ty=Tensor[(9, 8, 6), bool] */;
    %23 = cast(%var_2517, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%22, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %29 = cast(%var_2551, dtype="float64") /* ty=Tensor[(56), float64] */;
    %30 = cast(%var_2552, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %31 = reshape(%27, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
    %32 = reshape(%28, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
    %33 = reshape(%29, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
    %34 = reshape(%30, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %35 = @func_889(%31, %32, %33, %34) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
    %36 = cast(%var_2551, dtype="float64") /* ty=Tensor[(56), float64] */;
    %37 = %35.4;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
    %39 = reshape(%36, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %40 = reshape(%38, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %41 = @func_696(%39, %40) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %43 = reshape(%42, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %44 = @func_1314(%43) /* ty=(Tensor[(14, 14, 4), float64],) */;
    %45 = @func_1248(%17) /* ty=Tensor[(15, 13, 6), float64] */;
    %46 = add(%25, %26) /* ty=Tensor[(9, 8, 6), uint64] */;
    %47 = %41.6;
    %48 = %44.0;
    (%45, %var_2526, %46, %37, meta[relay.Constant][3] /* ty=Tensor[(1620), bool] */, %var_2551, %var_2552, %47, %48, meta[relay.Constant][4] /* ty=Tensor[(784), float64] */)
  };
  %49(%var_2569, %var_2570, %var_2571, %var_2572, %var_2573) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */
}

def @func_4556(%var_4554: uint64, %var_4555: Tensor[(9, 8, 6), uint64]) -> (Tensor[(9, 8, 6), uint64],) {
  %53 = fn (%var_4528: uint64, %var_4529: Tensor[(9, 8, 6), uint64]) -> (Tensor[(9, 8, 6), uint64],) {
    %50 = cast(%var_4528, dtype="uint64") /* ty=uint64 */;
    %51 = cast(%var_4529, dtype="uint64") /* ty=Tensor[(9, 8, 6), uint64] */;
    %52 = bitwise_xor(%50, %51) /* ty=Tensor[(9, 8, 6), uint64] */;
    (%52,)
  };
  %53(%var_4554, %var_4555) /* ty=(Tensor[(9, 8, 6), uint64],) */
}

def @func_2634(%var_2629: Tensor[(3, 15, 16), float32]) -> Tensor[(3, 15, 16), float32] {
  %54 = cast(%var_2629, dtype="float32") /* ty=Tensor[(3, 15, 16), float32] */;
  log10(%54) /* ty=Tensor[(3, 15, 16), float32] */
}

def @func_4844() -> (Tensor[(15, 2, 9), uint32],) {
  %57 = fn () -> (Tensor[(15, 2, 9), uint32],) {
    %55 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %56 = %55.0;
    (%56,)
  };
  %57() /* ty=(Tensor[(15, 2, 9), uint32],) */
}

def @func_5815() -> (Tensor[(5, 5, 10), float64], Tensor[(12, 6, 2), float64]) {
  @func_5813() /* ty=(Tensor[(5, 5, 10), float64], Tensor[(12, 6, 2), float64]) */
}

def @func_5700(%var_5699: Tensor[(12, 6, 2), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(12, 6, 2), float64]) {
  %67 = fn (%var_5688: Tensor[(12, 6, 2), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(12, 6, 2), float64]) {
    %58 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %59 = %58.0;
    %60 = cast(%var_5688, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%59, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %64 = @func_5418() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %65 = floor_divide(%62, %63) /* ty=Tensor[(12, 6, 2), float64] */;
    %66 = %64.0;
    (%65, %66)
  };
  %67(%var_5699) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(12, 6, 2), float64]) */
}

def @func_5196(%var_5187: Tensor[(270), uint32]) -> (Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) {
  %68 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %69 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %70 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %71 = %70.2;
  %72 = cast(%var_5187, dtype="int16") /* ty=Tensor[(270), int16] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(1), int32] */;
  %74 = cast(%71, dtype="int16") /* ty=Tensor[(270), int16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?), int16] */;
  %76 = %68.2;
  %77 = %69.0;
  %78 = bitwise_xor(%74, %75) /* ty=Tensor[(270), int16] */;
  (%76, %77, %78)
}

def @main(%var_6395: Tensor[(4, 3, 13), float32], %var_6422: Tensor[(4, 3, 13), float32]) -> (Tensor[(12, 6, 2), float64], Tensor[(720), float32], Tensor[(30, 9), uint32], Tensor[(4, 3, 13), int16], Tensor[(4, 3, 13), float64]) {
  %79 = @func_4127() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(30, 9), uint32] */, dtype="uint32") /* ty=Tensor[(30, 9), uint32] */;
  %81 = reshape(%80, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %82 = @func_5199(%81) /* ty=(Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) */;
  %83 = cast(%var_6395, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
  %84 = log(%83) /* ty=Tensor[(4, 3, 13), float32] */;
  %85 = cast(%var_6422, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = cast(%84, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %90 = sinh(%89) /* ty=Tensor[(4, 3, 13), float64] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %92 = %79.0;
  %93 = %82.0;
  %94 = add(%87, %88) /* ty=Tensor[(4, 3, 13), int16] */;
  %95 = acos(%91) /* ty=Tensor[(4, 3, 13), float64] */;
  (%92, %93, meta[relay.Constant][5] /* ty=Tensor[(30, 9), uint32] */, %94, %95)
}

def @func_700(%var_698: Tensor[(1, 4, 14), float64], %var_699: Tensor[(2730), float32]) -> (Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) {
  @func_696(%var_698, %var_699) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */
}

def @func_5363() -> Tensor[(15, 2, 9), uint32] {
  %96 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %96.0
}

def @func_6065(%var_6063: Tensor[(6, 13, 7), int16], %var_6064: Tensor[(6, 13, 7), int16]) -> Tensor[(6, 13, 7), int16] {
  %101 = fn (%var_6053: Tensor[(6, 13, 7), int16], %var_6054: Tensor[(6, 13, 7), int16]) -> Tensor[(6, 13, 7), int16] {
    %97 = cast(%var_6054, dtype="int16") /* ty=Tensor[(6, 13, 7), int16] */;
    %98 = shape_of(%var_6053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_6053, dtype="int16") /* ty=Tensor[(6, 13, 7), int16] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%99, %100) /* ty=Tensor[(6, 13, 7), int16] */
  };
  %101(%var_6063, %var_6064) /* ty=Tensor[(6, 13, 7), int16] */
}

def @func_4886() -> Tensor[(15, 2, 9), uint32] {
  %102 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %102.0
}

def @func_5643() -> (Tensor[(15, 2, 9), uint32],) {
  %103 = @func_4886() /* ty=Tensor[(15, 2, 9), uint32] */;
  (%103,)
}

def @func_4588(%var_4575: Tensor[(12, 6, 2), float64]) -> (Tensor[(3360), float32], Tensor[(12, 6, 2), bool]) {
  %104 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %105 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  %106 = cast(%var_4575, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %110 = %104.2;
  %111 = less_equal(%108, %109) /* ty=Tensor[(12, 6, 2), bool] */;
  (%110, %111)
}

def @func_3475() -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */
}

def @func_6268(%var_6265: Tensor[(6, 7, 15), float32], %var_6266: Tensor[(1568), uint32], %var_6267: Tensor[(1170), float64]) -> (Tensor[(126), float32], Tensor[(1568), uint32], Tensor[(1170), float64], Tensor[(36, 2), uint32], Tensor[(324), uint32], Tensor[(2730), uint16], Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(6, 7, 15), float64], Tensor[(6, 7, 15), uint32], Tensor[(12, 6, 2), float64]) {
  @func_6263(%var_6265, %var_6266, %var_6267) /* ty=(Tensor[(126), float32], Tensor[(1568), uint32], Tensor[(1170), float64], Tensor[(36, 2), uint32], Tensor[(324), uint32], Tensor[(2730), uint16], Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(6, 7, 15), float64], Tensor[(6, 7, 15), uint32], Tensor[(12, 6, 2), float64]) */
}

def @func_2363(%var_2360: Tensor[(16, 7, 8), int16], %var_2361: Tensor[(16, 7, 8), int16], %var_2362: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) {
  @func_2358(%var_2360, %var_2361, %var_2362) /* ty=(Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) */
}

def @func_3655(%var_3626: Tensor[(16, 5, 4), float32], %var_3650: Tensor[(1144), float64], %var_3652: Tensor[(896), int16]) -> (Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
  %112 = cast(%var_3626, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(585), int64] */, dtype="int64") /* ty=Tensor[(585), int64] */;
  %114 = reshape(%113, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int64] */;
  %115 = @func_2860(%114) /* ty=(Tensor[(13, 5, 9), float64],) */;
  %116 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 90), uint32] */, dtype="uint32") /* ty=Tensor[(3, 90), uint32] */;
  %117 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 90), uint32] */, dtype="uint32") /* ty=Tensor[(3, 90), uint32] */;
  %118 = reshape(%116, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %119 = reshape(%117, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %120 = @func_1596(%118, %119) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %121 = %120.0;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
  %123 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(3, 90), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 90), uint32] */, dtype="float32") /* ty=Tensor[(3, 90), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %126 = cast(-4.47811f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %127 = cast(%var_3650, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %128 = cast(meta[relay.Constant][8] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %129 = cast(%var_3652, dtype="int16") /* ty=Tensor[(896), int16] */;
  %130 = reshape(%126, newshape=[]) /* ty=float64 */;
  %131 = reshape(%127, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
  %132 = reshape(%128, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %133 = reshape(%129, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %134 = @func_3245(%130, %131, %132, %133) /* ty=(Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) */;
  %135 = cos(%112) /* ty=Tensor[(16, 5, 4), float32] */;
  %136 = %115.0;
  %137 = power(%124, %125) /* ty=Tensor[(3, 90), float32] */;
  %138 = %134.3;
  (%135, %136, meta[relay.Constant][6] /* ty=Tensor[(585), int64] */, %137, %138, -4.47811f64 /* ty=float64 */, %var_3650, meta[relay.Constant][8] /* ty=Tensor[(56), float64] */, %var_3652)
}

def @func_3553(%var_3552: Tensor[(56), float64]) -> (Tensor[(15, 2, 9), uint32], Tensor[(1, 4, 14), float32], Tensor[(1, 2730), float32], Tensor[(56), float64]) {
  %149 = fn (%var_3533: Tensor[(56), float64]) -> (Tensor[(15, 2, 9), uint32], Tensor[(1, 4, 14), float32], Tensor[(1, 2730), float32], Tensor[(56), float64]) {
    %139 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
    %140 = cast(%var_3533, dtype="float64") /* ty=Tensor[(56), float64] */;
    %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 2730), float32] */, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
    %142 = reshape(%140, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %143 = reshape(%141, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %144 = @func_696(%142, %143) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %145 = cast(%var_3533, dtype="float64") /* ty=Tensor[(56), float64] */;
    %146 = %139.1;
    %147 = %144.0;
    %148 = sin(%145) /* ty=Tensor[(56), float64] */;
    (%146, %147, meta[relay.Constant][9] /* ty=Tensor[(1, 2730), float32] */, %148)
  };
  %149(%var_3552) /* ty=(Tensor[(15, 2, 9), uint32], Tensor[(1, 4, 14), float32], Tensor[(1, 2730), float32], Tensor[(56), float64]) */
}

def @func_5645() -> (Tensor[(15, 2, 9), uint32],) {
  @func_5643() /* ty=(Tensor[(15, 2, 9), uint32],) */
}

def @func_5121(%var_5119: Tensor[(3, 8), float64]) -> (Tensor[(3, 8), float64],) {
  @func_5118(%var_5119) /* ty=(Tensor[(3, 8), float64],) */
}

def @func_4728(%var_4726: Tensor[(7, 16, 14), uint32], %var_4727: Tensor[(1170), float64]) -> (Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) {
  @func_4724(%var_4726, %var_4727) /* ty=(Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) */
}

def @func_2862(%var_2861: Tensor[(13, 5, 9), int64]) -> (Tensor[(13, 5, 9), float64],) {
  %162 = fn (%var_2840: Tensor[(13, 5, 9), int64]) -> (Tensor[(13, 5, 9), float64],) {
    %150 = cast(%var_2840, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
    %151 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 5, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %154 = less_equal(%152, %153) /* ty=Tensor[(13, 5, 9), bool] */;
    %155 = cast(%var_2840, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
    %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %157 = cast(%154, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %159 = divide(%157, %158) /* ty=Tensor[(13, 5, 9), float64] */;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
    %161 = sigmoid(%160) /* ty=Tensor[(13, 5, 9), float64] */;
    (%161,)
  };
  %162(%var_2861) /* ty=(Tensor[(13, 5, 9), float64],) */
}

def @func_3561() -> Tensor[(12, 6, 2), float64] {
  %164 = fn () -> Tensor[(12, 6, 2), float64] {
    %163 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
    %163.0
  };
  %164() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_2358(%var_2316: Tensor[(16, 7, 8), int16], %var_2317: Tensor[(16, 7, 8), int16], %var_2346: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) {
  %165 = cast(%var_2317, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
  %166 = shape_of(%var_2316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_2316, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %169 = cast(%var_2317, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %170 = cast(meta[relay.Constant][11] /* ty=Tensor[(540, 3), bool] */, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(540, 3), bool] */, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %172 = cast(%var_2346, dtype="float64") /* ty=Tensor[(56), float64] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %174 = reshape(%170, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %175 = reshape(%171, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %176 = reshape(%172, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %177 = reshape(%173, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %178 = @func_889(%174, %175, %176, %177) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %179 = subtract(%167, %168) /* ty=Tensor[(16, 7, 8), int16] */;
  %180 = log2(%169) /* ty=Tensor[(16, 7, 8), float64] */;
  %181 = %178.0;
  (%179, %180, %181, meta[relay.Constant][11] /* ty=Tensor[(540, 3), bool] */, %var_2346, meta[relay.Constant][12] /* ty=Tensor[(2730), float32] */)
}

def @func_4403() -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) {
  @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */
}

def @func_4242(%var_4225: Tensor[(12, 6, 2), float64], %var_4232: Tensor[(432), float64]) -> (Tensor[(12, 6, 2), bool], Tensor[(784), float64], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(2, 28), float64], Tensor[(2730), float32], Tensor[(12, 6, 2), float64]) {
  %182 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
  %183 = cast(%var_4225, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = cast(%var_4232, dtype="float64") /* ty=Tensor[(432), float64] */;
  %188 = cast(%var_4232, dtype="float64") /* ty=Tensor[(432), float64] */;
  %189 = cast(meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %190 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %191 = cast(meta[relay.Constant][15] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %192 = reshape(%187, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %193 = reshape(%188, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %194 = reshape(%189, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %195 = reshape(%190, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %196 = reshape(%191, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %197 = @func_2568(%192, %193, %194, %195, %196) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %198 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %199 = greater_equal(%185, %186) /* ty=Tensor[(12, 6, 2), bool] */;
  %200 = %197.9;
  %201 = %198.0;
  (%199, %200, %var_4232, meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, meta[relay.Constant][14] /* ty=Tensor[(2, 28), float64] */, meta[relay.Constant][15] /* ty=Tensor[(2730), float32] */, %201)
}

def @func_3693() -> (Tensor[(12, 6, 2), float64],) {
  %203 = fn () -> (Tensor[(12, 6, 2), float64],) {
    %202 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_696(%var_651: Tensor[(1, 4, 14), float64], %var_681: Tensor[(2730), float32]) -> (Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) {
  %204 = cast(%var_651, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
  %205 = cast(%var_651, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %206 = log10(%205) /* ty=Tensor[(1, 4, 14), float64] */;
  %207 = cast(%var_651, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
  %208 = atan(%207) /* ty=Tensor[(1, 4, 14), float32] */;
  %209 = cast(%208, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %210 = shape_of(%var_651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_651, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = logical_or(%211, %212) /* ty=Tensor[(?, 4, 14), bool] */;
  %214 = cast(%213, dtype="bool") /* ty=Tensor[(?, 4, 14), bool] */;
  %215 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%206, dtype="bool") /* ty=Tensor[(1, 4, 14), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = cast(%var_651, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %219 = cast(%var_681, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %220 = reshape(%219, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %221 = @func_40(%220) /* ty=Tensor[(14, 15, 13), uint16] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %223 = reshape(%222, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %224 = cast(%var_681, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %225 = reshape(%224, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %226 = exp(%204) /* ty=Tensor[(1, 4, 14), float32] */;
  %227 = greater_equal(%216, %217) /* ty=Tensor[(?, 4, 14), bool] */;
  %228 = sinh(%218) /* ty=Tensor[(1, 4, 14), float64] */;
  %229 = @func_40(%223) /* ty=Tensor[(14, 15, 13), uint16] */;
  %230 = @func_40(%225) /* ty=Tensor[(14, 15, 13), uint16] */;
  (%226, %227, %228, %221, %var_681, %229, %230)
}

def @func_5245(%var_5227: Tensor[(2, 12, 3), uint32]) -> (Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) {
  %231 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(2, 12, 3), uint32] */;
  %232 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(2, 12, 3), uint32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %235 = maximum(%233, %234) /* ty=Tensor[(2, 12, 3), uint32] */;
  %236 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %240 = cast(%var_5227, dtype="uint64") /* ty=Tensor[(2, 12, 3), uint64] */;
  %241 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%235, dtype="uint64") /* ty=Tensor[(2, 12, 3), uint64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %244 = bitwise_xor(%242, %243) /* ty=Tensor[(2, 12, 3), uint64] */;
  %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %250 = left_shift(%238, %239) /* ty=Tensor[(2, 12, 3), uint16] */;
  %251 = logical_or(%247, %248) /* ty=Tensor[(2, 12, 3), bool] */;
  %252 = %249.0;
  (%250, %251, %252)
}

def @func_5779(%var_5775: Tensor[(9, 12, 3), uint32], %var_5776: Tensor[(9, 12, 3), uint32], %var_5777: Tensor[(14, 15, 13), uint16], %var_5778: Tensor[(9, 12, 3), bool]) -> (Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) {
  %277 = fn (%var_5734: Tensor[(9, 12, 3), uint32], %var_5735: Tensor[(9, 12, 3), uint32], %var_5746: Tensor[(14, 15, 13), uint16], %var_5753: Tensor[(9, 12, 3), bool]) -> (Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) {
    %253 = cast(meta[relay.Constant][18] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %254 = reshape(%253, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
    %255 = @func_40(%254) /* ty=Tensor[(14, 15, 13), uint16] */;
    %256 = cast(%var_5746, dtype="int64") /* ty=Tensor[(14, 15, 13), int64] */;
    %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%255, dtype="int64") /* ty=Tensor[(14, 15, 13), int64] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %260 = cast(%var_5735, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %261 = shape_of(%var_5734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%var_5734, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %264 = less_equal(%262, %263) /* ty=Tensor[(9, 12, 3), bool] */;
    %265 = cast(%var_5753, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%264, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %269 = cast(meta[relay.Constant][19] /* ty=Tensor[(36, 2), uint32] */, dtype="uint32") /* ty=Tensor[(36, 2), uint32] */;
    %270 = reshape(%269, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint32] */;
    %271 = @func_5245(%270) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) */;
    %272 = cast(%var_5734, dtype="float32") /* ty=Tensor[(9, 12, 3), float32] */;
    %273 = add(%258, %259) /* ty=Tensor[(14, 15, 13), int64] */;
    %274 = less(%267, %268) /* ty=Tensor[(9, 12, 3), bool] */;
    %275 = %271.2;
    %276 = exp(%272) /* ty=Tensor[(9, 12, 3), float32] */;
    (meta[relay.Constant][18] /* ty=Tensor[(2730), float32] */, %273, %274, %275, meta[relay.Constant][19] /* ty=Tensor[(36, 2), uint32] */, %276)
  };
  %277(%var_5775, %var_5776, %var_5777, %var_5778) /* ty=(Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) */
}

def @func_4127() -> (Tensor[(12, 6, 2), float64],) {
  @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_4888() -> Tensor[(15, 2, 9), uint32] {
  @func_4886() /* ty=Tensor[(15, 2, 9), uint32] */
}

def @func_3417(%var_3409: Tensor[(7, 6, 1), int8], %var_3410: Tensor[(7, 6, 8), int8], %var_3411: Tensor[(2730), float32], %var_3412: Tensor[(784), float32], %var_3413: Tensor[(270), uint32], %var_3414: Tensor[(432), float64], %var_3415: Tensor[(56), float64], %var_3416: Tensor[(7, 6, 8), float64]) -> (Tensor[(7, 6, 8), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(910, 3), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool], Tensor[(1620), bool], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(56), float64], Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), bool]) {
  @func_3407(%var_3409, %var_3410, %var_3411, %var_3412, %var_3413, %var_3414, %var_3415, %var_3416) /* ty=(Tensor[(7, 6, 8), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(910, 3), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool], Tensor[(1620), bool], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(56), float64], Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), bool]) */
}

def @func_5813() -> (Tensor[(5, 5, 10), float64], Tensor[(12, 6, 2), float64]) {
  %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %279 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %282 = power(%280, %281) /* ty=Tensor[(5, 5, 10), float64] */;
  %283 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
  (%282, %283)
}

def @func_4958(%var_4953: Tensor[(12, 6, 2), float64]) -> Tensor[(12, 6, 2), int32] {
  %284 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %285 = %284.0;
  %286 = cast(%var_4953, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%288, %289) /* ty=Tensor[(12, 6, 2), int32] */
}

def @func_796(%var_794: Tensor[(14, 16, 15), float32]) -> (Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) {
  @func_793(%var_794) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */
}

def @func_3250(%var_3246: float64, %var_3247: Tensor[(8, 11, 13), float64], %var_3248: Tensor[(56), float64], %var_3249: Tensor[(896), int16]) -> (Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) {
  %313 = fn (%var_3206: float64, %var_3207: Tensor[(8, 11, 13), float64], %var_3218: Tensor[(56), float64], %var_3232: Tensor[(896), int16]) -> (Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) {
    %290 = cast(%var_3206, dtype="bool") /* ty=bool */;
    %291 = cast(%var_3207, dtype="bool") /* ty=Tensor[(8, 11, 13), bool] */;
    %292 = cast(meta[relay.Constant][22] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %293 = reshape(%292, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
    %294 = cast(%var_3218, dtype="float64") /* ty=Tensor[(56), float64] */;
    %295 = @func_40(%293) /* ty=Tensor[(14, 15, 13), uint16] */;
    %296 = cast(%295, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
    %297 = reshape(%294, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %298 = reshape(%296, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %299 = @func_696(%297, %298) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %300 = cast(%var_3232, dtype="int16") /* ty=Tensor[(896), int16] */;
    %301 = cast(%var_3232, dtype="int16") /* ty=Tensor[(896), int16] */;
    %302 = %299.0;
    %303 = cast(%302, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
    %304 = reshape(%300, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
    %305 = reshape(%301, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
    %306 = reshape(%303, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %307 = @func_2358(%304, %305, %306) /* ty=(Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) */;
    %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1170), float64] */, dtype="float64") /* ty=Tensor[(1, 1170), float64] */;
    %309 = reshape(%308, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %310 = less(%290, %291) /* ty=Tensor[(8, 11, 13), bool] */;
    %311 = %307.2;
    %312 = @func_1248(%309) /* ty=Tensor[(15, 13, 6), float64] */;
    (%310, %295, meta[relay.Constant][22] /* ty=Tensor[(2730), float32] */, %302, %var_3218, %311, %var_3232, %312, meta[relay.Constant][23] /* ty=Tensor[(1, 1170), float64] */)
  };
  %313(%var_3246, %var_3247, %var_3248, %var_3249) /* ty=(Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) */
}

def @func_5207() -> (Tensor[(10, 1, 15), bool],) {
  %314 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  (%314,)
}

def @func_1865(%var_1816: Tensor[(12, 7, 14), float32], %var_1855: Tensor[(36, 16), float32], %var_1856: Tensor[(784), float32]) -> (Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) {
  %315 = cast(%var_1816, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %316 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(12, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(%var_1816, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %320 = cast(%var_1855, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %321 = cast(%var_1856, dtype="float32") /* ty=Tensor[(784), float32] */;
  %322 = cast(meta[relay.Constant][25] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %323 = cast(meta[relay.Constant][26] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %324 = reshape(%320, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %325 = reshape(%321, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %326 = reshape(%322, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %327 = reshape(%323, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %328 = @func_1778(%324, %325, %326, %327) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %329 = less_equal(%317, %318) /* ty=Tensor[(12, 7, 14), bool] */;
  %330 = sin(%319) /* ty=Tensor[(12, 7, 14), float32] */;
  %331 = %328.2;
  (%329, %330, %331, %var_1855, %var_1856, meta[relay.Constant][25] /* ty=Tensor[(270), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(1620), bool] */)
}

def @func_4520(%var_4518: float64, %var_4519: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
  %344 = fn (%var_4503: float64, %var_4506: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
    %332 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %333 = cast(%var_4503, dtype="float64") /* ty=float64 */;
    %334 = cast(meta[relay.Constant][27] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %335 = cast(meta[relay.Constant][28] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %336 = cast(%var_4506, dtype="int16") /* ty=Tensor[(896), int16] */;
    %337 = reshape(%333, newshape=[]) /* ty=float64 */;
    %338 = reshape(%334, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
    %339 = reshape(%335, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %340 = reshape(%336, newshape=[896]) /* ty=Tensor[(896), int16] */;
    %341 = @func_3245(%337, %338, %339, %340) /* ty=(Tensor[(8, 11, 13), bool], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(1, 4, 14), float32], Tensor[(56), float64], Tensor[(9, 15, 12), bool], Tensor[(896), int16], Tensor[(15, 13, 6), float64], Tensor[(1, 1170), float64]) */;
    %342 = %332.0;
    %343 = %341.2;
    (%342, %343, %var_4503, meta[relay.Constant][27] /* ty=Tensor[(1144), float64] */, meta[relay.Constant][28] /* ty=Tensor[(56), float64] */, %var_4506)
  };
  %344(%var_4518, %var_4519) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */
}

def @func_3473() -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  %345 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %346 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %347 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %348 = reshape(%346, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %349 = reshape(%347, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %350 = @func_1596(%348, %349) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %351 = %345.0;
  %352 = %350.0;
  (%351, %352, meta[relay.Constant][29] /* ty=Tensor[(270), uint32] */)
}

def @func_5953(%var_5951: Tensor[(56), float64], %var_5952: Tensor[(130, 9), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(56), float64], Tensor[(2, 216), float64], Tensor[(56), float64], Tensor[(130, 9), uint8], Tensor[(2730), float64], Tensor[(12, 6, 2), float64]) {
  @func_5949(%var_5951, %var_5952) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(56), float64], Tensor[(2, 216), float64], Tensor[(56), float64], Tensor[(130, 9), uint8], Tensor[(2730), float64], Tensor[(12, 6, 2), float64]) */
}

def @func_6026() -> (Tensor[(15, 2, 9), uint32], Tensor[(14, 15, 13), float32]) {
  %353 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %354 = %353.1;
  %355 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 15, 13), uint16] */, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %359 = multiply(%357, %358) /* ty=Tensor[(14, 15, 13), float64] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %361 = @func_4995() /* ty=Tensor[(15, 2, 9), uint32] */;
  %362 = sigmoid(%360) /* ty=Tensor[(14, 15, 13), float32] */;
  (%361, %362)
}

def @func_3991() -> Tensor[(12, 6, 2), float64] {
  %363 = fn () -> Tensor[(12, 6, 2), float64] {
    @func_3596() /* ty=Tensor[(12, 6, 2), float64] */
  };
  %363() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_4768(%var_4763: Tensor[(14, 15, 13), uint16]) -> (Tensor[(14, 15, 13), int32],) {
  %364 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
  %365 = %364.1;
  %366 = cast(%var_4763, dtype="int32") /* ty=Tensor[(14, 15, 13), int32] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="int32") /* ty=Tensor[(14, 15, 13), int32] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %370 = left_shift(%368, %369) /* ty=Tensor[(14, 15, 13), int32] */;
  (%370,)
}

def @func_5199(%var_5197: Tensor[(270), uint32]) -> (Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) {
  @func_5196(%var_5197) /* ty=(Tensor[(720), float32], Tensor[(12, 6, 2), float64], Tensor[(270), int16]) */
}

def @func_6129() -> (Tensor[(15, 2, 9), uint32],) {
  %373 = fn () -> (Tensor[(15, 2, 9), uint32],) {
    %371 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %372 = %371.0;
    (%372,)
  };
  %373() /* ty=(Tensor[(15, 2, 9), uint32],) */
}

def @func_889(%var_849: Tensor[(9, 15, 12), bool], %var_850: Tensor[(9, 15, 12), bool], %var_875: Tensor[(56, 1), float64], %var_876: Tensor[(2730), float32]) -> (Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) {
  %374 = cast(%var_850, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %375 = shape_of(%var_849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_849, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %378 = logical_or(%376, %377) /* ty=Tensor[(9, 15, 12), bool] */;
  %379 = cast(%var_850, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = cast(%var_875, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %384 = cast(%var_876, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %385 = reshape(%383, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
  %386 = reshape(%384, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %387 = @func_696(%385, %386) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
  %388 = cast(meta[relay.Constant][31] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %389 = reshape(%388, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %390 = @func_793(%389) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %391 = cast(meta[relay.Constant][31] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %392 = reshape(%391, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %393 = @func_793(%392) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %394 = less_equal(%381, %382) /* ty=Tensor[(9, 15, 12), bool] */;
  %395 = %387.4;
  %396 = %390.1;
  %397 = %393.2;
  (%394, %395, %var_875, %var_876, %396, meta[relay.Constant][31] /* ty=Tensor[(3360), float32] */, %397)
}

def @func_6028() -> (Tensor[(15, 2, 9), uint32], Tensor[(14, 15, 13), float32]) {
  @func_6026() /* ty=(Tensor[(15, 2, 9), uint32], Tensor[(14, 15, 13), float32]) */
}

def @func_4289(%var_4283: Tensor[(576), float32], %var_4284: Tensor[(784), float32], %var_4286: Tensor[(3, 540), bool]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 15, 16), float32], Tensor[(14, 16, 15), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(3, 540), bool]) {
  %398 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %399 = cast(%var_4283, dtype="float32") /* ty=Tensor[(576), float32] */;
  %400 = cast(%var_4284, dtype="float32") /* ty=Tensor[(784), float32] */;
  %401 = cast(meta[relay.Constant][32] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %402 = cast(%var_4286, dtype="bool") /* ty=Tensor[(3, 540), bool] */;
  %403 = reshape(%399, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %404 = reshape(%400, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %405 = reshape(%401, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %406 = reshape(%402, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %407 = @func_1778(%403, %404, %405, %406) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %408 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
  %409 = %398.1;
  %410 = %407.13;
  (%408, %409, %410, %var_4283, %var_4284, meta[relay.Constant][32] /* ty=Tensor[(270), uint32] */, %var_4286)
}

def @func_4301() -> Tensor[(12, 6, 2), float64] {
  %411 = @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %411.0
}

def @func_6113() -> (Tensor[(12, 6, 2), float64],) {
  %413 = fn () -> (Tensor[(12, 6, 2), float64],) {
    %412 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
    (%412,)
  };
  %413() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_3598() -> Tensor[(12, 6, 2), float64] {
  @func_3596() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_6358(%var_6356: Tensor[(15, 3, 8), float64], %var_6357: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 2, 9), uint32]) {
  %421 = fn (%var_6339: Tensor[(15, 3, 8), float64], %var_6340: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 2, 9), uint32]) {
    %414 = cast(%var_6340, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %415 = shape_of(%var_6339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%var_6339, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %418 = @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %419 = divide(%416, %417) /* ty=Tensor[(15, 3, 8), float64] */;
    %420 = %418.0;
    (%419, %420)
  };
  %421(%var_6356, %var_6357) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 2, 9), uint32]) */
}

def @func_4676(%var_4673: Tensor[(6, 3, 7), float32], %var_4674: Tensor[(6, 3, 7), float32], %var_4675: Tensor[(130, 9), float64]) -> (Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) {
  %430 = fn (%var_4659: Tensor[(6, 3, 7), float32], %var_4660: Tensor[(6, 3, 7), float32], %var_4668: Tensor[(130, 9), float64]) -> (Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) {
    %422 = cast(%var_4660, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
    %423 = shape_of(%var_4659, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%var_4659, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %426 = cast(%var_4668, dtype="float64") /* ty=Tensor[(130, 9), float64] */;
    %427 = reshape(%426, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %428 = floor_divide(%424, %425) /* ty=Tensor[(6, 3, 7), float32] */;
    %429 = @func_1248(%427) /* ty=Tensor[(15, 13, 6), float64] */;
    (%428, %429, %var_4668)
  };
  %430(%var_4673, %var_4674, %var_4675) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) */
}

def @func_5522(%var_5521: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(2730), float32], float64, Tensor[(896), int16], Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), float64], Tensor[(12, 6, 2), float64]) {
  %452 = fn (%var_5499: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(2730), float32], float64, Tensor[(896), int16], Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), float64], Tensor[(12, 6, 2), float64]) {
    %431 = @func_4401() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) */;
    %432 = cast(meta[relay.Constant][33] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %433 = reshape(%432, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
    %434 = cast(-0.448906f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %435 = cast(%var_5499, dtype="int16") /* ty=Tensor[(896), int16] */;
    %436 = reshape(%434, newshape=[]) /* ty=float64 */;
    %437 = reshape(%435, newshape=[896]) /* ty=Tensor[(896), int16] */;
    %438 = @func_4517(%436, %437) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(2730), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */;
    %439 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
    %440 = @func_40(%433) /* ty=Tensor[(14, 15, 13), uint16] */;
    %441 = cast(%440, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
    %442 = reshape(%441, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint16] */;
    %443 = @func_4768(%442) /* ty=(Tensor[(14, 15, 13), int32],) */;
    %444 = %443.0;
    %445 = cast(%444, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
    %446 = @func_4125() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %447 = %431.0;
    %448 = %438.1;
    %449 = %439.0;
    %450 = atanh(%445) /* ty=Tensor[(14, 15, 13), float64] */;
    %451 = %446.0;
    (%447, %440, meta[relay.Constant][33] /* ty=Tensor[(2730), float32] */, %448, -0.448906f64 /* ty=float64 */, %var_5499, %449, %450, %451)
  };
  %452(%var_5521) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(2730), float32], float64, Tensor[(896), int16], Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), float64], Tensor[(12, 6, 2), float64]) */
}

def @func_4465() -> (Tensor[(15, 2, 9), uint32],) {
  @func_4463() /* ty=(Tensor[(15, 2, 9), uint32],) */
}

def @func_5365() -> Tensor[(15, 2, 9), uint32] {
  @func_5363() /* ty=Tensor[(15, 2, 9), uint32] */
}

def @func_4831() -> (Tensor[(12, 6, 2), float64],) {
  @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_42(%var_41: Tensor[(14, 15, 13), float32]) -> Tensor[(14, 15, 13), uint16] {
  %459 = fn (%var_25: Tensor[(14, 15, 13), float32]) -> Tensor[(14, 15, 13), uint16] {
    %453 = cast(%var_25, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
    %454 = cos(%453) /* ty=Tensor[(14, 15, 13), float32] */;
    %455 = cast(%var_25, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
    %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%454, dtype="uint16") /* ty=Tensor[(14, 15, 13), uint16] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    maximum(%457, %458) /* ty=Tensor[(14, 15, 13), uint16] */
  };
  %459(%var_41) /* ty=Tensor[(14, 15, 13), uint16] */
}

def @func_3596() -> Tensor[(12, 6, 2), float64] {
  @func_3591() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_4204(%var_4201: Tensor[(12, 6, 2), float64], %var_4202: Tensor[(15, 13, 6), float64], %var_4203: Tensor[(784), float64]) -> (Tensor[(5, 234), float64], Tensor[(15, 13, 6), uint64], Tensor[(12, 6, 2), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64], Tensor[(12, 6, 2), float64]) {
  %482 = fn (%var_4174: Tensor[(12, 6, 2), float64], %var_4184: Tensor[(15, 13, 6), float64], %var_4195: Tensor[(784), float64]) -> (Tensor[(5, 234), float64], Tensor[(15, 13, 6), uint64], Tensor[(12, 6, 2), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64], Tensor[(12, 6, 2), float64]) {
    %460 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 234), float64] */, dtype="float64") /* ty=Tensor[(5, 234), float64] */;
    %461 = reshape(%460, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %462 = @func_1248(%461) /* ty=Tensor[(15, 13, 6), float64] */;
    %463 = cast(%var_4184, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%462, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %467 = @func_3596() /* ty=Tensor[(12, 6, 2), float64] */;
    %468 = cast(%var_4174, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
    %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%467, dtype="int32") /* ty=Tensor[(12, 6, 2), int32] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %472 = bitwise_and(%470, %471) /* ty=Tensor[(12, 6, 2), int32] */;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
    %474 = cast(%var_4195, dtype="float64") /* ty=Tensor[(784), float64] */;
    %475 = reshape(%474, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %476 = @func_1314(%475) /* ty=(Tensor[(14, 14, 4), float64],) */;
    %477 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %478 = multiply(%465, %466) /* ty=Tensor[(15, 13, 6), uint64] */;
    %479 = sigmoid(%473) /* ty=Tensor[(12, 6, 2), float64] */;
    %480 = %476.0;
    %481 = %477.0;
    (meta[relay.Constant][34] /* ty=Tensor[(5, 234), float64] */, %478, %479, %480, %var_4195, %481)
  };
  %482(%var_4201, %var_4202, %var_4203) /* ty=(Tensor[(5, 234), float64], Tensor[(15, 13, 6), uint64], Tensor[(12, 6, 2), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64], Tensor[(12, 6, 2), float64]) */
}

def @func_1019(%var_1017: Tensor[(2, 28), float64], %var_1018: Tensor[(2730), float32]) -> (Tensor[(7, 1, 2), bool], Tensor[(14, 15, 13), uint16], Tensor[(2, 28), float64], Tensor[(2730), float32]) {
  %492 = fn (%var_1008: Tensor[(2, 28), float64], %var_1009: Tensor[(2730), float32]) -> (Tensor[(7, 1, 2), bool], Tensor[(14, 15, 13), uint16], Tensor[(2, 28), float64], Tensor[(2730), float32]) {
    %483 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %484 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 1, 2), uint16] */, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
    %485 = cast(%var_1008, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
    %486 = cast(%var_1009, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %487 = reshape(%485, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %488 = reshape(%486, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %489 = @func_696(%487, %488) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %490 = less_equal(%483, %484) /* ty=Tensor[(7, 1, 2), bool] */;
    %491 = %489.5;
    (%490, %491, %var_1008, %var_1009)
  };
  %492(%var_1017, %var_1018) /* ty=(Tensor[(7, 1, 2), bool], Tensor[(14, 15, 13), uint16], Tensor[(2, 28), float64], Tensor[(2730), float32]) */
}

def @func_4829() -> (Tensor[(12, 6, 2), float64],) {
  %493 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %494 = %493.0;
  (%494,)
}

def @func_3709() -> (Tensor[(12, 6, 2), float64],) {
  @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_5314(%var_5312: Tensor[(896), int16], %var_5313: Tensor[(56), float64]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 5, 5), uint32], Tensor[(540, 3), bool], Tensor[(896), int16], Tensor[(56), float64], Tensor[(15, 13, 6), float64], Tensor[(10, 117), float64], Tensor[(3360), float32], Tensor[(2730), float32], Tensor[(126, 75), float64], Tensor[(15, 2, 9), uint32], Tensor[(270, 1), uint32]) {
  @func_5310(%var_5312, %var_5313) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(3, 5, 5), uint32], Tensor[(540, 3), bool], Tensor[(896), int16], Tensor[(56), float64], Tensor[(15, 13, 6), float64], Tensor[(10, 117), float64], Tensor[(3360), float32], Tensor[(2730), float32], Tensor[(126, 75), float64], Tensor[(15, 2, 9), uint32], Tensor[(270, 1), uint32]) */
}

def @func_3591() -> Tensor[(12, 6, 2), float64] {
  @func_3560() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_895(%var_891: Tensor[(9, 15, 12), bool], %var_892: Tensor[(9, 15, 12), bool], %var_893: Tensor[(56, 1), float64], %var_894: Tensor[(2730), float32]) -> (Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) {
  @func_889(%var_891, %var_892, %var_893, %var_894) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */
}

def @func_1250(%var_1249: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
  %496 = fn (%var_1243: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
    %495 = cast(%var_1243, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
    sinh(%495) /* ty=Tensor[(15, 13, 6), float64] */
  };
  %496(%var_1249) /* ty=Tensor[(15, 13, 6), float64] */
}

def @func_4771(%var_4769: Tensor[(14, 15, 13), uint16]) -> (Tensor[(14, 15, 13), int32],) {
  @func_4768(%var_4769) /* ty=(Tensor[(14, 15, 13), int32],) */
}

def @func_5615(%var_5599: Tensor[(270), uint32]) -> (Tensor[(12, 6, 2), bool], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  %497 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
  %500 = tan(%499) /* ty=Tensor[(12, 6, 2), float64] */;
  %501 = cast(%498, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(12, 6, 2), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(%var_5599, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %506 = cast(%var_5599, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %507 = reshape(%505, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %508 = reshape(%506, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %509 = @func_1596(%507, %508) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %510 = greater(%503, %504) /* ty=Tensor[(12, 6, 2), bool] */;
  %511 = %509.0;
  (%510, %511, %var_5599)
}

def @func_5949(%var_5904: Tensor[(56), float64], %var_5932: Tensor[(130, 9), float64]) -> (Tensor[(12, 6, 2), float64], Tensor[(56), float64], Tensor[(2, 216), float64], Tensor[(56), float64], Tensor[(130, 9), uint8], Tensor[(2730), float64], Tensor[(12, 6, 2), float64]) {
  %512 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 216), float64] */, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %513 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 216), float64] */, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %514 = cast(meta[relay.Constant][38] /* ty=Tensor[(130, 9), float64] */, dtype="float64") /* ty=Tensor[(130, 9), float64] */;
  %515 = cast(%var_5904, dtype="float64") /* ty=Tensor[(56), float64] */;
  %516 = cast(meta[relay.Constant][39] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %517 = reshape(%512, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %518 = reshape(%513, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %519 = reshape(%514, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %520 = reshape(%515, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %521 = reshape(%516, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %522 = @func_2568(%517, %518, %519, %520, %521) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %523 = cast(%var_5932, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %524 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(130, 9), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %525 = cast(meta[relay.Constant][38] /* ty=Tensor[(130, 9), float64] */, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %527 = cast(meta[relay.Constant][39] /* ty=Tensor[(2730), float32] */, dtype="float64") /* ty=Tensor[(2730), float64] */;
  %528 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  %529 = %522.5;
  %530 = bitwise_xor(%525, %526) /* ty=Tensor[(130, 9), uint8] */;
  %531 = acos(%527) /* ty=Tensor[(2730), float64] */;
  %532 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%528, %529, meta[relay.Constant][37] /* ty=Tensor[(2, 216), float64] */, %var_5904, %530, %531, %532)
}

def @func_3833() -> Tensor[(10, 1, 15), bool] {
  @func_3831() /* ty=Tensor[(10, 1, 15), bool] */
}

def @func_1783(%var_1779: Tensor[(576), float32], %var_1780: Tensor[(8, 7, 14), float32], %var_1781: Tensor[(270), uint32], %var_1782: Tensor[(6, 270), bool]) -> (Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) {
  %581 = fn (%var_1697: Tensor[(576), float32], %var_1723: Tensor[(8, 7, 14), float32], %var_1733: Tensor[(270), uint32], %var_1745: Tensor[(6, 270), bool]) -> (Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) {
    %533 = cast(%var_1697, dtype="float32") /* ty=Tensor[(576), float32] */;
    %534 = reshape(%533, newshape=[12, 12, 4]) /* ty=Tensor[(12, 12, 4), float32] */;
    %535 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
    %536 = cast(meta[relay.Constant][41] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
    %537 = reshape(%535, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %538 = reshape(%536, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %539 = @func_696(%537, %538) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %540 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 14), float32] */;
    %541 = log(%540) /* ty=Tensor[(8, 7, 14), float32] */;
    %542 = cast(%var_1723, dtype="uint64") /* ty=Tensor[(8, 7, 14), uint64] */;
    %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%541, dtype="uint64") /* ty=Tensor[(8, 7, 14), uint64] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %546 = cast(%541, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
    %547 = asinh(%546) /* ty=Tensor[(8, 7, 14), float64] */;
    %548 = cast(%547, dtype="float32") /* ty=Tensor[(8, 7, 14), float32] */;
    %549 = cast(%var_1733, dtype="uint32") /* ty=Tensor[(270), uint32] */;
    %550 = cast(%var_1733, dtype="uint32") /* ty=Tensor[(270), uint32] */;
    %551 = reshape(%549, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
    %552 = reshape(%550, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
    %553 = @func_1596(%551, %552) /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %554 = cast(meta[relay.Constant][43] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %555 = reshape(%554, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
    %556 = @func_945(%555) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) */;
    %557 = cast(%var_1745, dtype="bool") /* ty=Tensor[(6, 270), bool] */;
    %558 = cast(%var_1745, dtype="bool") /* ty=Tensor[(6, 270), bool] */;
    %559 = %539.1;
    %560 = cast(%559, dtype="float64") /* ty=Tensor[(?, 4, 14), float64] */;
    %561 = cast(meta[relay.Constant][41] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
    %562 = reshape(%557, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
    %563 = reshape(%558, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
    %564 = reshape(%560, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
    %565 = reshape(%561, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %566 = @func_889(%562, %563, %564, %565) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
    %567 = %556.2;
    %568 = cast(%567, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %569 = reshape(%568, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
    %570 = @func_793(%569) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
    %571 = sin(%548) /* ty=Tensor[(8, 7, 14), float32] */;
    %572 = cast(%571, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
    %573 = reshape(%572, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %574 = @func_1314(%573) /* ty=(Tensor[(14, 14, 4), float64],) */;
    %575 = @func_1150(%534) /* ty=Tensor[(12, 12, 4), float32] */;
    %576 = multiply(%544, %545) /* ty=Tensor[(8, 7, 14), uint64] */;
    %577 = %553.0;
    %578 = %566.0;
    %579 = %570.0;
    %580 = %574.0;
    (%575, %var_1697, %559, meta[relay.Constant][40] /* ty=Tensor[(56, 1), float64] */, meta[relay.Constant][41] /* ty=Tensor[(910, 3), float32] */, %576, %571, %577, %var_1733, %567, meta[relay.Constant][43] /* ty=Tensor[(55), float64] */, %578, %var_1745, %579, %580)
  };
  %581(%var_1779, %var_1780, %var_1781, %var_1782) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */
}

def @func_3707() -> (Tensor[(12, 6, 2), float64],) {
  %582 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
  (%582,)
}

def @func_4724(%var_4712: Tensor[(7, 16, 14), uint32], %var_4722: Tensor[(1170), float64]) -> (Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) {
  %583 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %584 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_4712, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %587 = cast(meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %588 = cast(meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %589 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %590 = reshape(%587, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %591 = reshape(%588, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %592 = reshape(%589, newshape=[130, 9]) /* ty=Tensor[(130, 9), float64] */;
  %593 = @func_4672(%590, %591, %592) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) */;
  %594 = maximum(%585, %586) /* ty=Tensor[(7, 16, 14), uint32] */;
  %595 = %593.2;
  (%594, %595, meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, %var_4722)
}

def @func_5146(%var_5144: Tensor[(3, 5, 5), int32]) -> Tensor[(3, 5, 5), bool] {
  @func_5143(%var_5144) /* ty=Tensor[(3, 5, 5), bool] */
}

def @func_5248(%var_5246: Tensor[(2, 12, 3), uint32]) -> (Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) {
  @func_5245(%var_5246) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(2, 12, 3), bool], Tensor[(12, 6, 2), float64]) */
}

def @func_1596(%var_1590: Tensor[(15, 2, 9), uint32], %var_1591: Tensor[(15, 2, 9), uint32]) -> (Tensor[(15, 2, 9), uint32],) {
  %596 = cast(%var_1591, dtype="uint32") /* ty=Tensor[(15, 2, 9), uint32] */;
  %597 = shape_of(%var_1590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%var_1590, dtype="uint32") /* ty=Tensor[(15, 2, 9), uint32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %600 = left_shift(%598, %599) /* ty=Tensor[(15, 2, 9), uint32] */;
  (%600,)
}

def @func_3407(%var_3327: Tensor[(7, 6, 1), int8], %var_3328: Tensor[(7, 6, 8), int8], %var_3352: Tensor[(2730), float32], %var_3358: Tensor[(784), float32], %var_3359: Tensor[(270), uint32], %var_3386: Tensor[(432), float64], %var_3388: Tensor[(56), float64], %var_3400: Tensor[(7, 6, 8), float64]) -> (Tensor[(7, 6, 8), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(910, 3), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool], Tensor[(1620), bool], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(56), float64], Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), bool]) {
  %601 = cast(%var_3327, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
  %602 = cast(%var_3328, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %603 = less(%601, %602) /* ty=Tensor[(7, 6, 8), bool] */;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %605 = cast(%var_3327, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %606 = cast(%var_3352, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %607 = reshape(%606, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %608 = @func_40(%607) /* ty=Tensor[(14, 15, 13), uint16] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %610 = reshape(%609, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %611 = cast(meta[relay.Constant][46] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %612 = cast(%var_3358, dtype="float32") /* ty=Tensor[(784), float32] */;
  %613 = cast(%var_3359, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %614 = cast(meta[relay.Constant][47] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %615 = reshape(%611, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %616 = reshape(%612, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float32] */;
  %617 = reshape(%613, newshape=[270]) /* ty=Tensor[(270), uint32] */;
  %618 = reshape(%614, newshape=[6, 270]) /* ty=Tensor[(6, 270), bool] */;
  %619 = @func_1778(%615, %616, %617, %618) /* ty=(Tensor[(12, 12, 4), float32], Tensor[(576), float32], Tensor[(?, 4, 14), bool], Tensor[(56, 1), float64], Tensor[(910, 3), float32], Tensor[(8, 7, 14), uint64], Tensor[(8, 7, 14), float32], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32], Tensor[(3360), float32], Tensor[(55), float64], Tensor[(9, 15, 12), bool], Tensor[(6, 270), bool], Tensor[(14, 16, 15), float32], Tensor[(14, 14, 4), float64]) */;
  %620 = cast(%var_3386, dtype="float64") /* ty=Tensor[(432), float64] */;
  %621 = cast(%var_3386, dtype="float64") /* ty=Tensor[(432), float64] */;
  %622 = cast(meta[relay.Constant][48] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %623 = cast(%var_3388, dtype="float64") /* ty=Tensor[(56), float64] */;
  %624 = cast(%608, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %625 = reshape(%620, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %626 = reshape(%621, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float64] */;
  %627 = reshape(%622, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %628 = reshape(%623, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %629 = reshape(%624, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %630 = @func_2568(%625, %626, %627, %628, %629) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(9, 8, 6), uint64], Tensor[(14, 15, 13), uint16], Tensor[(1620), bool], Tensor[(56), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */;
  %631 = cast(%var_3328, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %632 = sqrt(%631) /* ty=Tensor[(7, 6, 8), float64] */;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %634 = sinh(%633) /* ty=Tensor[(7, 6, 8), float64] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %636 = log2(%635) /* ty=Tensor[(7, 6, 8), float32] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %638 = cast(%var_3327, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
  %639 = cast(%var_3400, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %640 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%634, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = add(%604, %605) /* ty=Tensor[(7, 6, 8), float64] */;
  %644 = @func_40(%610) /* ty=Tensor[(14, 15, 13), uint16] */;
  %645 = %619.4;
  %646 = %630.4;
  %647 = floor_mod(%637, %638) /* ty=Tensor[(7, 6, 8), float32] */;
  %648 = not_equal(%641, %642) /* ty=Tensor[(7, 6, 8), bool] */;
  (%643, %608, %var_3352, %644, %645, meta[relay.Constant][46] /* ty=Tensor[(576), float32] */, %var_3358, %var_3359, meta[relay.Constant][47] /* ty=Tensor[(1620), bool] */, %646, %var_3386, meta[relay.Constant][48] /* ty=Tensor[(1170), float64] */, %var_3388, %647, %648)
}

def @func_2603(%var_2600: Tensor[(15, 9, 15), int32], %var_2601: Tensor[(15, 9, 15), int32], %var_2602: Tensor[(784), float64]) -> (Tensor[(15, 9, 15), bool], Tensor[(2730), float32], Tensor[(?, 4, 14), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
  %669 = fn (%var_2576: Tensor[(15, 9, 15), int32], %var_2577: Tensor[(15, 9, 15), int32], %var_2595: Tensor[(784), float64]) -> (Tensor[(15, 9, 15), bool], Tensor[(2730), float32], Tensor[(?, 4, 14), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) {
    %649 = cast(%var_2577, dtype="bool") /* ty=Tensor[(15, 9, 15), bool] */;
    %650 = shape_of(%var_2576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %651 = cast(%var_2576, dtype="bool") /* ty=Tensor[(15, 9, 15), bool] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %653 = cast(meta[relay.Constant][50] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %654 = cast(meta[relay.Constant][49] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %655 = reshape(%653, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float64] */;
    %656 = reshape(%654, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %657 = @func_696(%655, %656) /* ty=(Tensor[(1, 4, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(1, 4, 14), float64], Tensor[(14, 15, 13), uint16], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(14, 15, 13), uint16]) */;
    %658 = %657.2;
    %659 = cast(meta[relay.Constant][50] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %663 = cast(%var_2595, dtype="float64") /* ty=Tensor[(784), float64] */;
    %664 = reshape(%663, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %665 = @func_1314(%664) /* ty=(Tensor[(14, 14, 4), float64],) */;
    %666 = less_equal(%651, %652) /* ty=Tensor[(15, 9, 15), bool] */;
    %667 = floor_mod(%661, %662) /* ty=Tensor[(?, 4, 14), float64] */;
    %668 = %665.0;
    (%666, meta[relay.Constant][49] /* ty=Tensor[(2730), float32] */, %667, %668, %var_2595)
  };
  %669(%var_2600, %var_2601, %var_2602) /* ty=(Tensor[(15, 9, 15), bool], Tensor[(2730), float32], Tensor[(?, 4, 14), float64], Tensor[(14, 14, 4), float64], Tensor[(784), float64]) */
}

def @func_3920(%var_3919: Tensor[(6, 196), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) {
  %698 = fn (%var_3861: Tensor[(6, 196), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) {
    %670 = cast(%var_3861, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
    %671 = cast(meta[relay.Constant][51] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %672 = cast(meta[relay.Constant][52] /* ty=Tensor[(392, 2), float32] */, dtype="float32") /* ty=Tensor[(392, 2), float32] */;
    %673 = reshape(%670, newshape=[12, 7, 14]) /* ty=Tensor[(12, 7, 14), float32] */;
    %674 = reshape(%671, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
    %675 = reshape(%672, newshape=[784]) /* ty=Tensor[(784), float32] */;
    %676 = @func_1865(%673, %674, %675) /* ty=(Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) */;
    %677 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 196), float32] */, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
    %678 = shape_of(%var_3861, dtype="int32") /* ty=Tensor[(2), int32] */;
    %679 = cast(%var_3861, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %681 = logical_and(%679, %680) /* ty=Tensor[(6, 196), bool] */;
    %682 = cast(%681, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
    %683 = sqrt(%682) /* ty=Tensor[(6, 196), float64] */;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
    %685 = asinh(%684) /* ty=Tensor[(6, 196), float32] */;
    %686 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 196), float32] */, dtype="int8") /* ty=Tensor[(6, 196), int8] */;
    %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(2), int32] */;
    %688 = cast(%685, dtype="int8") /* ty=Tensor[(6, 196), int8] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %690 = logical_xor(%688, %689) /* ty=Tensor[(6, 196), int8] */;
    %691 = cast(%690, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
    %692 = shape_of(%683, dtype="int32") /* ty=Tensor[(2), int32] */;
    %693 = cast(%683, dtype="bool") /* ty=Tensor[(6, 196), bool] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %695 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
    %696 = %676.6;
    %697 = less(%693, %694) /* ty=Tensor[(6, 196), bool] */;
    (%695, %696, meta[relay.Constant][51] /* ty=Tensor[(576), float32] */, meta[relay.Constant][52] /* ty=Tensor[(392, 2), float32] */, %697)
  };
  %698(%var_3919) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) */
}

def @func_3679() -> (Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) {
  %708 = fn () -> (Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) {
    %699 = @func_3560() /* ty=Tensor[(12, 6, 2), float64] */;
    %700 = cast(meta[relay.Constant][54] /* ty=Tensor[(12, 6, 2), float64] */, dtype="int16") /* ty=Tensor[(12, 6, 2), int16] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="int16") /* ty=Tensor[(12, 6, 2), int16] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %704 = cast(meta[relay.Constant][55] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %705 = reshape(%704, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float32] */;
    %706 = bitwise_xor(%702, %703) /* ty=Tensor[(12, 6, 2), int16] */;
    %707 = @func_2634(%705) /* ty=Tensor[(3, 15, 16), float32] */;
    (%706, %707, meta[relay.Constant][55] /* ty=Tensor[(720), float32] */)
  };
  %708() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */
}

def @func_4961(%var_4959: Tensor[(12, 6, 2), float64]) -> Tensor[(12, 6, 2), int32] {
  @func_4958(%var_4959) /* ty=Tensor[(12, 6, 2), int32] */
}

def @func_5355() -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), float32]) {
  %715 = fn () -> (Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), float32]) {
    %709 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %710 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %711 = %710.0;
    %712 = cast(%711, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
    %713 = %709.0;
    %714 = log(%712) /* ty=Tensor[(15, 2, 9), float32] */;
    (%713, %714)
  };
  %715() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), float32]) */
}

def @func_4364(%var_4361: Tensor[(320), float32], %var_4362: Tensor[(1144), float64], %var_4363: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(3, 90), float32], Tensor[(320), float32], Tensor[(1144), float64], Tensor[(896), int16], Tensor[(12, 6, 2), int16]) {
  @func_4359(%var_4361, %var_4362, %var_4363) /* ty=(Tensor[(12, 6, 2), float64], Tensor[(3, 90), float32], Tensor[(320), float32], Tensor[(1144), float64], Tensor[(896), int16], Tensor[(12, 6, 2), int16]) */
}

def @func_3446() -> (Tensor[(12, 6, 2), float64],) {
  %718 = fn () -> (Tensor[(12, 6, 2), float64],) {
    %716 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 2), float64] */;
    %717 = rsqrt(%716) /* ty=Tensor[(12, 6, 2), float64] */;
    (%717,)
  };
  %718() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_4294(%var_4291: Tensor[(576), float32], %var_4292: Tensor[(784), float32], %var_4293: Tensor[(3, 540), bool]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 15, 16), float32], Tensor[(14, 16, 15), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(3, 540), bool]) {
  @func_4289(%var_4291, %var_4292, %var_4293) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(3, 15, 16), float32], Tensor[(14, 16, 15), float32], Tensor[(576), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(3, 540), bool]) */
}

def @func_3593() -> Tensor[(12, 6, 2), float64] {
  @func_3591() /* ty=Tensor[(12, 6, 2), float64] */
}

def @func_5143(%var_5139: Tensor[(3, 5, 5), int32]) -> Tensor[(3, 5, 5), bool] {
  %719 = cast(%var_5139, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %720 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 5, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 5, 5), int32] */, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%721, %722) /* ty=Tensor[(3, 5, 5), bool] */
}

def @func_5209() -> (Tensor[(10, 1, 15), bool],) {
  @func_5207() /* ty=(Tensor[(10, 1, 15), bool],) */
}

def @func_5118(%var_5114: Tensor[(3, 8), float64]) -> (Tensor[(3, 8), float64],) {
  %723 = cast(%var_5114, dtype="float64") /* ty=Tensor[(3, 8), float64] */;
  %724 = log(%723) /* ty=Tensor[(3, 8), float64] */;
  (%724,)
}

def @func_5879() -> (Tensor[(12, 6, 2), float64],) {
  %727 = fn () -> (Tensor[(12, 6, 2), float64],) {
    %725 = @func_4829() /* ty=(Tensor[(12, 6, 2), float64],) */;
    %726 = %725.0;
    (%726,)
  };
  %727() /* ty=(Tensor[(12, 6, 2), float64],) */
}

def @func_1870(%var_1867: Tensor[(12, 7, 14), float32], %var_1868: Tensor[(36, 16), float32], %var_1869: Tensor[(784), float32]) -> (Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) {
  @func_1865(%var_1867, %var_1868, %var_1869) /* ty=(Tensor[(12, 7, 14), bool], Tensor[(12, 7, 14), float32], Tensor[(?, 4, 14), bool], Tensor[(36, 16), float32], Tensor[(784), float32], Tensor[(270), uint32], Tensor[(1620), bool]) */
}

def @func_4125() -> (Tensor[(12, 6, 2), float64],) {
  %728 = @func_3591() /* ty=Tensor[(12, 6, 2), float64] */;
  (%728,)
}

def @func_4401() -> (Tensor[(12, 6, 2), float64], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32]) {
  %729 = @func_3692() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %730 = cast(meta[relay.Constant][58] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %731 = reshape(%730, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %732 = @func_793(%731) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(14, 15, 13), uint16], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %733 = %729.0;
  %734 = %732.1;
  (%733, %734, meta[relay.Constant][58] /* ty=Tensor[(3360), float32] */)
}

def @func_4246(%var_4244: Tensor[(12, 6, 2), float64], %var_4245: Tensor[(432), float64]) -> (Tensor[(12, 6, 2), bool], Tensor[(784), float64], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(2, 28), float64], Tensor[(2730), float32], Tensor[(12, 6, 2), float64]) {
  @func_4242(%var_4244, %var_4245) /* ty=(Tensor[(12, 6, 2), bool], Tensor[(784), float64], Tensor[(432), float64], Tensor[(1170), float64], Tensor[(2, 28), float64], Tensor[(2730), float32], Tensor[(12, 6, 2), float64]) */
}

def @func_1316(%var_1315: Tensor[(14, 14, 4), float64]) -> (Tensor[(14, 14, 4), float64],) {
  %737 = fn (%var_1296: Tensor[(14, 14, 4), float64]) -> (Tensor[(14, 14, 4), float64],) {
    %735 = cast(%var_1296, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
    %736 = tan(%735) /* ty=Tensor[(14, 14, 4), float64] */;
    (%736,)
  };
  %737(%var_1315) /* ty=(Tensor[(14, 14, 4), float64],) */
}

def @func_2637(%var_2635: Tensor[(3, 15, 16), float32]) -> Tensor[(3, 15, 16), float32] {
  @func_2634(%var_2635) /* ty=Tensor[(3, 15, 16), float32] */
}

def @func_5618(%var_5616: Tensor[(270), uint32]) -> (Tensor[(12, 6, 2), bool], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) {
  @func_5615(%var_5616) /* ty=(Tensor[(12, 6, 2), bool], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */
}

def @func_4591(%var_4589: Tensor[(12, 6, 2), float64]) -> (Tensor[(3360), float32], Tensor[(12, 6, 2), bool]) {
  @func_4588(%var_4589) /* ty=(Tensor[(3360), float32], Tensor[(12, 6, 2), bool]) */
}

def @func_5310(%var_5284: Tensor[(896), int16], %var_5285: Tensor[(56), float64]) -> (Tensor[(10, 1, 15), bool], Tensor[(3, 5, 5), uint32], Tensor[(540, 3), bool], Tensor[(896), int16], Tensor[(56), float64], Tensor[(15, 13, 6), float64], Tensor[(10, 117), float64], Tensor[(3360), float32], Tensor[(2730), float32], Tensor[(126, 75), float64], Tensor[(15, 2, 9), uint32], Tensor[(270, 1), uint32]) {
  %738 = @func_5207() /* ty=(Tensor[(10, 1, 15), bool],) */;
  %739 = cast(meta[relay.Constant][59] /* ty=Tensor[(75), int32] */, dtype="int32") /* ty=Tensor[(75), int32] */;
  %740 = reshape(%739, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), int32] */;
  %741 = @func_5143(%740) /* ty=Tensor[(3, 5, 5), bool] */;
  %742 = cast(meta[relay.Constant][59] /* ty=Tensor[(75), int32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %746 = cast(%var_5284, dtype="int16") /* ty=Tensor[(896), int16] */;
  %747 = cast(%var_5284, dtype="int16") /* ty=Tensor[(896), int16] */;
  %748 = cast(%var_5285, dtype="float64") /* ty=Tensor[(56), float64] */;
  %749 = reshape(%746, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %750 = reshape(%747, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), int16] */;
  %751 = reshape(%748, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %752 = @func_2358(%749, %750, %751) /* ty=(Tensor[(16, 7, 8), int16], Tensor[(16, 7, 8), float64], Tensor[(9, 15, 12), bool], Tensor[(540, 3), bool], Tensor[(56), float64], Tensor[(2730), float32]) */;
  %753 = cast(meta[relay.Constant][60] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
  %754 = cast(meta[relay.Constant][60] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
  %755 = cast(meta[relay.Constant][61] /* ty=Tensor[(10, 117), float64] */, dtype="float64") /* ty=Tensor[(10, 117), float64] */;
  %756 = reshape(%753, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %757 = reshape(%754, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %758 = reshape(%755, newshape=[130, 9]) /* ty=Tensor[(130, 9), float64] */;
  %759 = @func_4672(%756, %757, %758) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(15, 13, 6), float64], Tensor[(130, 9), float64]) */;
  %760 = %752.3;
  %761 = cast(%760, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %762 = cast(%760, dtype="bool") /* ty=Tensor[(540, 3), bool] */;
  %763 = cast(%var_5285, dtype="float64") /* ty=Tensor[(56), float64] */;
  %764 = cast(meta[relay.Constant][62] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %765 = reshape(%761, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %766 = reshape(%762, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %767 = reshape(%763, newshape=[56, 1]) /* ty=Tensor[(56, 1), float64] */;
  %768 = reshape(%764, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %769 = @func_889(%765, %766, %767, %768) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2730), float32], Tensor[(56, 1), float64], Tensor[(2730), float32], Tensor[(14, 15, 13), uint16], Tensor[(3360), float32], Tensor[(56), float64]) */;
  %770 = cast(meta[relay.Constant][59] /* ty=Tensor[(75), int32] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %771 = cast(meta[relay.Constant][60] /* ty=Tensor[(126, 1), float32] */, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
  %773 = cast(meta[relay.Constant][63] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
  %774 = reshape(%772, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %775 = reshape(%773, newshape=[15, 2, 9]) /* ty=Tensor[(15, 2, 9), uint32] */;
  %776 = @func_1596(%774, %775) /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %777 = %738.0;
  %778 = left_shift(%744, %745) /* ty=Tensor[(3, 5, 5), uint32] */;
  %779 = %759.1;
  %780 = %769.5;
  %781 = floor_mod(%770, %771) /* ty=Tensor[(126, 75), float64] */;
  %782 = %776.0;
  (%777, %778, %760, %var_5284, %var_5285, %779, meta[relay.Constant][61] /* ty=Tensor[(10, 117), float64] */, %780, meta[relay.Constant][62] /* ty=Tensor[(2730), float32] */, %781, %782, meta[relay.Constant][63] /* ty=Tensor[(270, 1), uint32] */)
}

def @func_6263(%var_6137: Tensor[(6, 7, 15), float32], %var_6152: Tensor[(1568), uint32], %var_6153: Tensor[(1170), float64]) -> (Tensor[(126), float32], Tensor[(1568), uint32], Tensor[(1170), float64], Tensor[(36, 2), uint32], Tensor[(324), uint32], Tensor[(2730), uint16], Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(6, 7, 15), float64], Tensor[(6, 7, 15), uint32], Tensor[(12, 6, 2), float64]) {
  %783 = cast(%var_6152, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %784 = cast(%var_6153, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %785 = reshape(%783, newshape=[7, 16, 14]) /* ty=Tensor[(7, 16, 14), uint32] */;
  %786 = reshape(%784, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %787 = @func_4724(%785, %786) /* ty=(Tensor[(7, 16, 14), uint32], Tensor[(130, 9), float64], Tensor[(126), float32], Tensor[(1170), float64]) */;
  %788 = cast(meta[relay.Constant][64] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %789 = cast(meta[relay.Constant][64] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %790 = cast(meta[relay.Constant][65] /* ty=Tensor[(2730), uint16] */, dtype="uint16") /* ty=Tensor[(2730), uint16] */;
  %791 = cast(meta[relay.Constant][64] /* ty=Tensor[(324), uint32] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %792 = reshape(%788, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %793 = reshape(%789, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %794 = reshape(%790, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint16] */;
  %795 = reshape(%791, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), bool] */;
  %796 = @func_5774(%792, %793, %794, %795) /* ty=(Tensor[(2730), float32], Tensor[(14, 15, 13), int64], Tensor[(9, 12, 3), bool], Tensor[(12, 6, 2), float64], Tensor[(36, 2), uint32], Tensor[(9, 12, 3), float32]) */;
  %797 = @func_3707() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %798 = @func_6128() /* ty=(Tensor[(15, 2, 9), uint32],) */;
  %799 = cast(%var_6137, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %800 = erf(%799) /* ty=Tensor[(6, 7, 15), float32] */;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %802 = acos(%801) /* ty=Tensor[(6, 7, 15), float32] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %804 = cast(%802, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %805 = cosh(%804) /* ty=Tensor[(6, 7, 15), float64] */;
  %806 = cast(%802, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = greater(%808, %809) /* ty=Tensor[(6, 7, 15), bool] */;
  %811 = cast(%810, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %812 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%805, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %815 = minimum(%813, %814) /* ty=Tensor[(6, 7, 15), int32] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %817 = acosh(%816) /* ty=Tensor[(6, 7, 15), float64] */;
  %818 = cast(%802, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %819 = asinh(%818) /* ty=Tensor[(6, 7, 15), float32] */;
  %820 = cast(%819, dtype="uint32") /* ty=Tensor[(6, 7, 15), uint32] */;
  %821 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%817, dtype="uint32") /* ty=Tensor[(6, 7, 15), uint32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %824 = @func_5878() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %825 = %787.2;
  %826 = %796.4;
  %827 = %797.0;
  %828 = %798.0;
  %829 = asin(%803) /* ty=Tensor[(6, 7, 15), float64] */;
  %830 = right_shift(%822, %823) /* ty=Tensor[(6, 7, 15), uint32] */;
  %831 = %824.0;
  (%825, %var_6152, %var_6153, %826, meta[relay.Constant][64] /* ty=Tensor[(324), uint32] */, meta[relay.Constant][65] /* ty=Tensor[(2730), uint16] */, %827, %828, %829, %830, %831)
}

def @func_4152(%var_4151: Tensor[(1176), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(10, 1, 15), bool], Tensor[(1176), float32]) {
  %837 = fn (%var_4147: Tensor[(1176), float32]) -> (Tensor[(10, 1, 15), bool], Tensor[(10, 1, 15), bool], Tensor[(1176), float32]) {
    %832 = cast(%var_4147, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %833 = reshape(%832, newshape=[6, 196]) /* ty=Tensor[(6, 196), float32] */;
    %834 = @func_3918(%833) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(1620), bool], Tensor[(576), float32], Tensor[(392, 2), float32], Tensor[(6, 196), bool]) */;
    %835 = @func_3831() /* ty=Tensor[(10, 1, 15), bool] */;
    %836 = %834.0;
    (%835, %836, %var_4147)
  };
  %837(%var_4151) /* ty=(Tensor[(10, 1, 15), bool], Tensor[(10, 1, 15), bool], Tensor[(1176), float32]) */
}

def @func_4996() -> Tensor[(15, 2, 9), uint32] {
  %839 = fn () -> Tensor[(15, 2, 9), uint32] {
    %838 = @func_4843() /* ty=(Tensor[(15, 2, 9), uint32],) */;
    %838.0
  };
  %839() /* ty=Tensor[(15, 2, 9), uint32] */
}

def @func_4463() -> (Tensor[(15, 2, 9), uint32],) {
  %840 = @func_3473() /* ty=(Tensor[(12, 6, 2), float64], Tensor[(15, 2, 9), uint32], Tensor[(270), uint32]) */;
  %841 = %840.1;
  (%841,)
}

def @func_3831() -> Tensor[(10, 1, 15), bool] {
  %842 = cast(meta[relay.Constant][66] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %843 = cast(meta[relay.Constant][67] /* ty=Tensor[(10, 1, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  less_equal(%842, %843) /* ty=Tensor[(10, 1, 15), bool] */
}

def @func_4359(%var_4339: Tensor[(320), float32], %var_4340: Tensor[(1144), float64], %var_4341: Tensor[(896), int16]) -> (Tensor[(12, 6, 2), float64], Tensor[(3, 90), float32], Tensor[(320), float32], Tensor[(1144), float64], Tensor[(896), int16], Tensor[(12, 6, 2), int16]) {
  %844 = @func_3445() /* ty=(Tensor[(12, 6, 2), float64],) */;
  %845 = cast(%var_4339, dtype="float32") /* ty=Tensor[(320), float32] */;
  %846 = cast(%var_4340, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %847 = cast(%var_4341, dtype="int16") /* ty=Tensor[(896), int16] */;
  %848 = reshape(%845, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), float32] */;
  %849 = reshape(%846, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %850 = reshape(%847, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %851 = @func_3655(%848, %849, %850) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */;
  %852 = @func_3678() /* ty=(Tensor[(12, 6, 2), int16], Tensor[(3, 15, 16), float32], Tensor[(720), float32]) */;
  %853 = %844.0;
  %854 = %851.3;
  %855 = %852.0;
  (%853, %854, %var_4339, %var_4340, %var_4341, %855)
}

def @func_1600(%var_1598: Tensor[(15, 2, 9), uint32], %var_1599: Tensor[(15, 2, 9), uint32]) -> (Tensor[(15, 2, 9), uint32],) {
  @func_1596(%var_1598, %var_1599) /* ty=(Tensor[(15, 2, 9), uint32],) */
}

def @func_948(%var_946: Tensor[(5, 11, 1), float64]) -> (Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) {
  @func_945(%var_946) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(56), float64], Tensor[(3360), float32]) */
}

def @func_3660(%var_3657: Tensor[(16, 5, 4), float32], %var_3658: Tensor[(1144), float64], %var_3659: Tensor[(896), int16]) -> (Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) {
  @func_3655(%var_3657, %var_3658, %var_3659) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(13, 5, 9), float64], Tensor[(585), int64], Tensor[(3, 90), float32], Tensor[(1, 4, 14), float32], float64, Tensor[(1144), float64], Tensor[(56), float64], Tensor[(896), int16]) */
}

def @func_1152(%var_1151: Tensor[(12, 12, 4), float32]) -> Tensor[(12, 12, 4), float32] {
  %857 = fn (%var_1138: Tensor[(12, 12, 4), float32]) -> Tensor[(12, 12, 4), float32] {
    %856 = cast(%var_1138, dtype="float32") /* ty=Tensor[(12, 12, 4), float32] */;
    cos(%856) /* ty=Tensor[(12, 12, 4), float32] */
  };
  %857(%var_1151) /* ty=Tensor[(12, 12, 4), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen96/build/output.py", line 1755, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

