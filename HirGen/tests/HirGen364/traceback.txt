==========mod==========
#[version = "0.0.5"]
def @func_3386() -> (Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) {
  %0 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %1 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
  %2 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %3 = reshape(%2, newshape=[]) /* ty=int64 */;
  %4 = @func_2676(%3) /* ty=(Tensor[(6, 12, 7), bool],) */;
  %5 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %7 = cast(%5, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %8 = reshape(%6, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %9 = reshape(%7, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %10 = @func_1581(%8, %9) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
  %11 = %10.0;
  %12 = cast(%5, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(2), int32] */;
  %14 = cast(%11, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %16 = %0.0;
  %17 = %1.2;
  %18 = %4.0;
  %19 = multiply(%14, %15) /* ty=Tensor[(7, 78), uint8] */;
  (%16, %17, %18, 1 /* ty=int64 */, %19)
}

def @func_2933() -> (Tensor[(630), uint64],) {
  %20 = @func_1343() /* ty=Tensor[(630), uint64] */;
  (%20,)
}

def @func_3030() -> (Tensor[(91, 6), float32],) {
  %21 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %22 = %21.0;
  (%22,)
}

def @func_707(%var_673: Tensor[(7, 6, 13), float32], %var_680: Tensor[(210), uint64]) -> (Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) {
  %23 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %26 = reshape(%23, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %27 = reshape(%24, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %28 = reshape(%25, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %29 = @func_245(%26, %27, %28) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %30 = cast(%var_673, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %31 = log10(%30) /* ty=Tensor[(7, 6, 13), float32] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %33 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %34 = %29.2;
  %35 = cast(%34, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %37 = reshape(%33, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %38 = reshape(%35, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %39 = reshape(%36, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %40 = @func_245(%37, %38, %39) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %41 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %43 = cast(%34, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %44 = reshape(%41, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %45 = reshape(%42, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %46 = reshape(%43, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %47 = @func_245(%44, %45, %46) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %48 = exp(%32) /* ty=Tensor[(7, 6, 13), float32] */;
  %49 = %40.0;
  %50 = %47.2;
  (%34, %var_680, meta[relay.Constant][0] /* ty=Tensor[(630), uint64] */, %48, %49, %50)
}

def @func_1581(%var_1534: Tensor[(7, 78), float32], %var_1551: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), float32], Tensor[(7, 78), int64]) {
  %51 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %52 = %51.2;
  %53 = cast(%var_1534, dtype="int8") /* ty=Tensor[(7, 78), int8] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(2), int32] */;
  %55 = cast(%52, dtype="int8") /* ty=Tensor[(7, 78), int8] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %57 = left_shift(%55, %56) /* ty=Tensor[(7, 78), int8] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %59 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(2), int32] */;
  %60 = cast(%var_1534, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %62 = cast(%var_1551, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %63 = shape_of(%52, dtype="int32") /* ty=Tensor[(2), int32] */;
  %64 = cast(%52, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %66 = power(%64, %65) /* ty=Tensor[(7, 78), float32] */;
  %67 = cast(%var_1534, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(2), int32] */;
  %69 = cast(%66, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %71 = divide(%60, %61) /* ty=Tensor[(7, 78), float32] */;
  %72 = bitwise_or(%69, %70) /* ty=Tensor[(7, 78), int64] */;
  (%71, %72)
}

def @func_2896() -> (Tensor[(7, 78), float64], Tensor[(7, 78), int64]) {
  %73 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %74 = %73.0;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %76 = reshape(%75, newshape=[546]) /* ty=Tensor[(546), float32] */;
  %77 = @func_1739(%76) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
  %78 = %77.1;
  (%74, %78)
}

def @func_4879(%var_4829: Tensor[(91, 6), int32], %var_4860: float64, %var_4861: Tensor[(117), float64], %var_4862: Tensor[(52, 1), float64]) -> (Tensor[(91, 6), bool], Tensor[(91, 6), bool], Tensor[(630), uint64], Tensor[(91, 6), float64], Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(52, 1), float64], Tensor[(15, 14, 7), uint32], Tensor[(1470, 1), uint32]) {
  %79 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %81 = sqrt(%80) /* ty=Tensor[(91, 6), float64] */;
  %82 = cast(%79, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(2), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %86 = cast(%81, dtype="int32") /* ty=Tensor[(91, 6), int32] */;
  %87 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %88 = cast(%79, dtype="int32") /* ty=Tensor[(91, 6), int32] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %90 = subtract(%88, %89) /* ty=Tensor[(91, 6), int32] */;
  %91 = cast(%var_4829, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%90, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %95 = cast(%79, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %96 = logical_and(%84, %85) /* ty=Tensor[(91, 6), bool] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %98 = cast(%var_4860, dtype="float64") /* ty=float64 */;
  %99 = cast(%var_4861, dtype="float64") /* ty=Tensor[(117), float64] */;
  %100 = cast(%var_4862, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %101 = reshape(%97, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
  %102 = reshape(%98, newshape=[]) /* ty=float64 */;
  %103 = reshape(%99, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %104 = reshape(%100, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %105 = @func_1451(%101, %102, %103, %104) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
  %106 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1470, 1), uint32] */;
  %107 = cast(%var_4862, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %108 = cast(%var_4861, dtype="float64") /* ty=Tensor[(117), float64] */;
  %109 = reshape(%106, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %110 = reshape(%107, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %111 = reshape(%108, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %112 = @func_3020(%109, %110, %111) /* ty=(Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) */;
  %113 = logical_or(%93, %94) /* ty=Tensor[(91, 6), bool] */;
  %114 = @func_2210() /* ty=Tensor[(630), uint64] */;
  %115 = tan(%95) /* ty=Tensor[(91, 6), float64] */;
  %116 = %105.0;
  %117 = %112.3;
  (%96, %113, %114, %115, %116, %var_4860, %var_4861, %var_4862, %117, meta[relay.Constant][1] /* ty=Tensor[(1470, 1), uint32] */)
}

def @func_5604(%var_5589: Tensor[(13, 9), float64]) -> (Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(546), float32], Tensor[(13, 4), float64], Tensor[(91, 6), float32], Tensor[(6, 12, 7), bool], Tensor[(26, 2), float64], Tensor[(13, 9), float64], Tensor[(7, 78), float64]) {
  %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %119 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 4), float64] */;
  %120 = reshape(%118, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %121 = reshape(%119, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %122 = @func_1140(%120, %121) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %123 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %124 = @func_3386() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
  %125 = cast(%var_5589, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
  %126 = reshape(%125, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %127 = @func_4379(%126) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) */;
  %128 = @func_2556() /* ty=(Tensor[(7, 78), float64],) */;
  %129 = @func_2724() /* ty=Tensor[(630), uint64] */;
  %130 = %122.3;
  %131 = %123.0;
  %132 = %124.2;
  %133 = %127.2;
  %134 = %128.0;
  (%129, %130, meta[relay.Constant][2] /* ty=Tensor[(546), float32] */, meta[relay.Constant][3] /* ty=Tensor[(13, 4), float64] */, %131, %132, %133, %var_5589, %134)
}

def @func_4379(%var_4306: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) {
  %135 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
  %136 = cast(%var_4306, dtype="float64") /* ty=Tensor[(117), float64] */;
  %137 = cast(meta[relay.Constant][4] /* ty=Tensor[(26, 2), float64] */, dtype="float64") /* ty=Tensor[(26, 2), float64] */;
  %138 = reshape(%136, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %139 = reshape(%137, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %140 = @func_1970(%138, %139) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %141 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %142 = cast(meta[relay.Constant][5] /* ty=Tensor[(117), float64] */, dtype="bool") /* ty=Tensor[(117), bool] */;
  %143 = shape_of(%var_4306, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(%var_4306, dtype="bool") /* ty=Tensor[(117), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), bool] */;
  %146 = logical_or(%144, %145) /* ty=Tensor[(117), bool] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(117), float64] */;
  %148 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(117), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %149 = cast(meta[relay.Constant][5] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?), float64] */;
  %151 = power(%149, %150) /* ty=Tensor[(117), float64] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(117), float32] */;
  %153 = cast(meta[relay.Constant][5] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %154 = cast(%146, dtype="int8") /* ty=Tensor[(117), int8] */;
  %155 = shape_of(%151, dtype="int32") /* ty=Tensor[(1), int32] */;
  %156 = cast(%151, dtype="int8") /* ty=Tensor[(117), int8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?), int8] */;
  %158 = cast(meta[relay.Constant][6] /* ty=Tensor[(210, 1), uint64] */, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %159 = %135.0;
  %160 = cast(%159, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %161 = cast(%159, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %162 = reshape(%158, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %163 = reshape(%160, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %164 = reshape(%161, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %165 = @func_245(%162, %163, %164) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %166 = cast(%151, dtype="float32") /* ty=Tensor[(117), float32] */;
  %167 = sin(%166) /* ty=Tensor[(117), float32] */;
  %168 = cast(%var_4306, dtype="bool") /* ty=Tensor[(117), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(1), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(117), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?), bool] */;
  %172 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %173 = %140.0;
  %174 = %141.0;
  %175 = cos(%152) /* ty=Tensor[(117), float32] */;
  %176 = asin(%153) /* ty=Tensor[(117), float64] */;
  %177 = bitwise_xor(%156, %157) /* ty=Tensor[(117), int8] */;
  %178 = %165.1;
  %179 = logical_and(%170, %171) /* ty=Tensor[(117), bool] */;
  %180 = %172.0;
  (%159, %173, meta[relay.Constant][4] /* ty=Tensor[(26, 2), float64] */, %174, %175, %176, %177, %178, meta[relay.Constant][6] /* ty=Tensor[(210, 1), uint64] */, %179, %180)
}

def @func_3083(%var_3070: Tensor[(7, 78), int64], %var_3075: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), bool], Tensor[(7, 78), bool]) {
  %181 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %182 = %181.1;
  %183 = cast(%var_3070, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %185 = cast(%182, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %187 = cast(%182, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %188 = log2(%187) /* ty=Tensor[(7, 78), float32] */;
  %189 = cast(%var_3075, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(2), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %193 = greater_equal(%185, %186) /* ty=Tensor[(7, 78), bool] */;
  %194 = greater(%191, %192) /* ty=Tensor[(7, 78), bool] */;
  (%193, %194)
}

def @func_5656() -> (Tensor[(630), uint64],) {
  %195 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %196 = %195.0;
  (%196,)
}

def @func_2556() -> (Tensor[(7, 78), float64],) {
  %197 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %198 = %197.0;
  (%198,)
}

def @func_4416() -> Tensor[(91, 6), float32] {
  %199 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %199.0
}

def @func_5938() -> Tensor[(91, 6), float32] {
  %200 = @func_5820() /* ty=(Tensor[(91, 6), float32],) */;
  %200.0
}

def @func_5468() -> (Tensor[(630), uint64], Tensor[(7, 78), float64]) {
  %201 = @func_3101() /* ty=(Tensor[(630), uint64],) */;
  %202 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %205 = atanh(%204) /* ty=Tensor[(7, 78), float64] */;
  %206 = cast(%203, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%205, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %210 = bitwise_and(%208, %209) /* ty=Tensor[(7, 78), int32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %212 = %201.0;
  %213 = log10(%211) /* ty=Tensor[(7, 78), float64] */;
  (%212, %213)
}

def @func_4267() -> (Tensor[(7, 13, ?), bool],) {
  %214 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 1), float64] */;
  %215 = cos(%214) /* ty=Tensor[(7, 13, 1), float64] */;
  %216 = cast(%215, dtype="bool") /* ty=Tensor[(7, 13, 1), bool] */;
  %217 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 13, 1), float64] */, dtype="bool") /* ty=Tensor[(7, 13, 1), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = greater(%218, %219) /* ty=Tensor[(7, 13, ?), bool] */;
  (%220,)
}

def @func_4586(%var_4566: float64, %var_4567: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) {
  %221 = cast(%var_4566, dtype="float64") /* ty=float64 */;
  %222 = cast(%var_4567, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %223 = @func_4291() /* ty=Tensor[(5, 14, 5), bool] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %225 = atan(%224) /* ty=Tensor[(5, 14, 5), float64] */;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = minimum(%221, %222) /* ty=Tensor[(16, 14, 11), float64] */;
  %231 = @func_2421() /* ty=Tensor[(630), uint64] */;
  %232 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %233 = divide(%228, %229) /* ty=Tensor[(5, 14, 5), float64] */;
  (%230, %231, %232, %233)
}

def @func_4205(%var_4184: Tensor[(1, 5, 13), uint32], %var_4185: Tensor[(13, 5, 13), uint32]) -> (Tensor[(13, 5, 13), bool], Tensor[(91, 6), float32], Tensor[(13, 5, 13), float64], Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(210), uint64]) {
  %234 = cast(%var_4184, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %235 = cast(%var_4185, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
  %236 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %237 = cast(%var_4185, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
  %238 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
  %239 = %236.0;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %241 = cast(meta[relay.Constant][8] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %242 = reshape(%240, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %243 = reshape(%241, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %244 = @func_707(%242, %243) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %245 = less_equal(%234, %235) /* ty=Tensor[(13, 5, 13), bool] */;
  %246 = log2(%237) /* ty=Tensor[(13, 5, 13), float64] */;
  %247 = %238.0;
  %248 = %244.1;
  (%245, %239, %246, %247, %248, meta[relay.Constant][8] /* ty=Tensor[(210), uint64] */)
}

def @func_1739(%var_1726: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) {
  %249 = cast(%var_1726, dtype="float32") /* ty=Tensor[(546), float32] */;
  %250 = cast(%var_1726, dtype="float32") /* ty=Tensor[(546), float32] */;
  %251 = reshape(%249, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %252 = reshape(%250, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %253 = @func_1581(%251, %252) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
  %254 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %255 = %253.1;
  (%254, %255, %var_1726)
}

def @func_1662() -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
  %256 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %257 = %256.1;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %259 = cast(%257, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %260 = reshape(%258, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %261 = reshape(%259, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %262 = @func_1581(%260, %261) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %265 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %266 = log(%264) /* ty=Tensor[(7, 78), float64] */;
  (%265, %257, %266)
}

def @func_5701() -> Tensor[(630), uint64] {
  %267 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
  %267.0
}

def @func_2050() -> (Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) {
  %268 = cast(meta[relay.Constant][9] /* ty=Tensor[(91, 6), float32] */, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %269 = reshape(%268, newshape=[546]) /* ty=Tensor[(546), float32] */;
  %270 = @func_1739(%269) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
  %271 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %272 = %270.2;
  %273 = @func_1343() /* ty=Tensor[(630), uint64] */;
  (%271, %272, meta[relay.Constant][9] /* ty=Tensor[(91, 6), float32] */, %273)
}

def @func_4220() -> (Tensor[(630), uint64],) {
  %274 = @func_3101() /* ty=(Tensor[(630), uint64],) */;
  %275 = %274.0;
  (%275,)
}

def @func_4291() -> Tensor[(5, 14, 5), bool] {
  %276 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 14, 5), uint64] */, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 14, 5), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  less_equal(%276, %277) /* ty=Tensor[(5, 14, 5), bool] */
}

def @func_5206() -> Tensor[(210), uint64] {
  %278 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
  %278.1
}

def @func_6094() -> Tensor[(7, 78), int64] {
  %279 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %279.1
}

def @func_1970(%var_1958: Tensor[(117), float64], %var_1959: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) {
  %280 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %283 = cast(3.05484f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %284 = cast(%var_1958, dtype="float64") /* ty=Tensor[(117), float64] */;
  %285 = cast(%var_1959, dtype="float64") /* ty=Tensor[(52), float64] */;
  %286 = reshape(%282, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
  %287 = reshape(%283, newshape=[]) /* ty=float64 */;
  %288 = reshape(%284, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %289 = reshape(%285, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %290 = @func_1451(%286, %287, %288, %289) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
  %291 = cast(meta[relay.Constant][12] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %292 = cast(meta[relay.Constant][12] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %293 = reshape(%291, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %294 = reshape(%292, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %295 = @func_1879(%293, %294) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %296 = %290.6;
  %297 = %295.1;
  (%281, %296, 3.05484f64 /* ty=float64 */, %var_1958, %var_1959, %297, meta[relay.Constant][12] /* ty=Tensor[(1470), uint32] */)
}

def @func_4698() -> Tensor[(91, 6), float32] {
  %298 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
  %298.3
}

def @func_3884() -> (Tensor[(6, 12, 7), bool],) {
  %299 = @func_3386() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
  %300 = %299.2;
  (%300,)
}

def @func_2676(%var_2671: int64) -> (Tensor[(6, 12, 7), bool],) {
  %301 = cast(%var_2671, dtype="bool") /* ty=bool */;
  %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 7), int64] */, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %303 = less(%301, %302) /* ty=Tensor[(6, 12, 7), bool] */;
  (%303,)
}

def @func_4175(%var_4155: Tensor[(12, 11, 10), float32]) -> (Tensor[(7, 78), float64], Tensor[(12, 11, 10), float64], Tensor[(12, 11, 10), uint32]) {
  %304 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %305 = cast(%var_4155, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
  %306 = rsqrt(%305) /* ty=Tensor[(12, 11, 10), float32] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(12, 11, 10), float64] */;
  %308 = cast(%var_4155, dtype="uint32") /* ty=Tensor[(12, 11, 10), uint32] */;
  %309 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%306, dtype="uint32") /* ty=Tensor[(12, 11, 10), uint32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %312 = %304.0;
  %313 = sqrt(%307) /* ty=Tensor[(12, 11, 10), float64] */;
  %314 = bitwise_or(%310, %311) /* ty=Tensor[(12, 11, 10), uint32] */;
  (%312, %313, %314)
}

def @func_2724() -> Tensor[(630), uint64] {
  %315 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
  %315.1
}

def @func_2501(%var_2437: Tensor[(10, 10, 14), uint8], %var_2438: Tensor[(10, 10, 14), uint8]) -> (Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) {
  %316 = cast(%var_2438, dtype="bool") /* ty=Tensor[(10, 10, 14), bool] */;
  %317 = shape_of(%var_2437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_2437, dtype="bool") /* ty=Tensor[(10, 10, 14), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = cast(%var_2437, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %321 = greater_equal(%318, %319) /* ty=Tensor[(10, 10, 14), bool] */;
  %322 = @func_2210() /* ty=Tensor[(630), uint64] */;
  %323 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
  %324 = sin(%320) /* ty=Tensor[(10, 10, 14), float64] */;
  (%321, %322, %323, %324)
}

def @func_1879(%var_1867: Tensor[(15, 14, 7), uint32], %var_1868: Tensor[(15, 14, 7), uint32]) -> (Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) {
  %325 = cast(%var_1868, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
  %326 = shape_of(%var_1867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_1867, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %329 = cast(%var_1868, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %330 = shape_of(%var_1867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%var_1867, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = bitwise_xor(%327, %328) /* ty=Tensor[(15, 14, 7), uint32] */;
  %334 = logical_or(%331, %332) /* ty=Tensor[(15, 14, 7), bool] */;
  (%333, %334)
}

def @func_2631(%var_2595: Tensor[(1470), uint32], %var_2602: Tensor[(52), float64], %var_2608: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) {
  %335 = cast(%var_2595, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %336 = cast(%var_2595, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %337 = reshape(%335, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %338 = reshape(%336, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %339 = @func_1879(%337, %338) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %340 = cast(meta[relay.Constant][14] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %341 = cast(%var_2602, dtype="float64") /* ty=Tensor[(52), float64] */;
  %342 = reshape(%340, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %343 = reshape(%341, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %344 = @func_1970(%342, %343) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %345 = %339.1;
  %346 = cast(%345, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
  %347 = cast(%345, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
  %348 = reshape(%346, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %349 = reshape(%347, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %350 = @func_1879(%348, %349) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %351 = cast(%var_2608, dtype="float32") /* ty=Tensor[(117), float32] */;
  %352 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(117), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %353 = cast(meta[relay.Constant][14] /* ty=Tensor[(117), float64] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?), float32] */;
  %355 = @func_2210() /* ty=Tensor[(630), uint64] */;
  %356 = %344.4;
  %357 = %350.0;
  %358 = floor_divide(%353, %354) /* ty=Tensor[(117), float32] */;
  %359 = @func_1343() /* ty=Tensor[(630), uint64] */;
  (%355, %345, %var_2595, %356, %var_2602, %357, %358, %359)
}

def @func_3020(%var_2996: Tensor[(1470), uint32], %var_3000: Tensor[(52), float64], %var_3001: Tensor[(117), float64]) -> (Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) {
  %360 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %361 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %362 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %363 = reshape(%361, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %364 = reshape(%362, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %365 = @func_1879(%363, %364) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %366 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %367 = cast(%var_3000, dtype="float64") /* ty=Tensor[(52), float64] */;
  %368 = cast(%var_3001, dtype="float64") /* ty=Tensor[(117), float64] */;
  %369 = reshape(%366, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %370 = reshape(%367, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %371 = reshape(%368, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %372 = @func_2631(%369, %370, %371) /* ty=(Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) */;
  %373 = cast(%var_3001, dtype="float64") /* ty=Tensor[(117), float64] */;
  %374 = cast(%var_3000, dtype="float64") /* ty=Tensor[(52), float64] */;
  %375 = reshape(%373, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %376 = reshape(%374, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %377 = @func_1970(%375, %376) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %378 = %377.2;
  %379 = cast(%var_3000, dtype="bool") /* ty=Tensor[(52), bool] */;
  %380 = cast(%378, dtype="bool") /* ty=bool */;
  %381 = %360.0;
  %382 = %365.1;
  %383 = %372.5;
  %384 = equal(%379, %380) /* ty=Tensor[(52), bool] */;
  (%381, %382, %var_2996, %383, %var_3001, %384)
}

def @func_1050() -> (Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) {
  %385 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
  %386 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 78), float32] */, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %387 = cast(meta[relay.Constant][17] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %388 = reshape(%386, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %389 = reshape(%387, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %390 = @func_707(%388, %389) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %391 = cast(meta[relay.Constant][17] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %392 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %393 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %394 = reshape(%391, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %395 = reshape(%392, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %396 = reshape(%393, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %397 = @func_245(%394, %395, %396) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %399 = reshape(%398, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), float64] */;
  %400 = @func_933(%399) /* ty=(Tensor[(4, 1, 13), float64],) */;
  %401 = tan(%385) /* ty=Tensor[(15, 9, 10), float32] */;
  %402 = %390.1;
  %403 = %397.1;
  %404 = %400.0;
  (%401, %402, meta[relay.Constant][16] /* ty=Tensor[(7, 78), float32] */, meta[relay.Constant][17] /* ty=Tensor[(210), uint64] */, %403, meta[relay.Constant][18] /* ty=Tensor[(630), uint64] */, %404, meta[relay.Constant][19] /* ty=Tensor[(52), float64] */)
}

def @func_5695() -> Tensor[(210), uint64] {
  @func_5206() /* ty=Tensor[(210), uint64] */
}

def @func_1850(%var_1820: Tensor[(52), float64]) -> (Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) {
  %405 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %406 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %407 = reshape(%405, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %408 = reshape(%406, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %409 = @func_707(%407, %408) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %410 = %409.5;
  %411 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %414 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%410, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %417 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %418 = cast(%412, dtype="float32") /* ty=Tensor[(630), float32] */;
  %419 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %420 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %421 = reshape(%419, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %422 = reshape(%420, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %423 = @func_707(%421, %422) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %424 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 1), float32] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %425 = log(%424) /* ty=Tensor[(546, 1), float64] */;
  %426 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 1), float32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(%425, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %430 = bitwise_or(%428, %429) /* ty=Tensor[(546, ?), int32] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(546, ?), float32] */;
  %432 = cast(%var_1820, dtype="float64") /* ty=Tensor[(52), float64] */;
  %433 = reshape(%431, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %434 = reshape(%432, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %435 = @func_1140(%433, %434) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %436 = cast(%430, dtype="bool") /* ty=Tensor[(546, ?), bool] */;
  %437 = cast(%412, dtype="bool") /* ty=Tensor[(630), bool] */;
  %438 = logical_or(%436, %437) /* ty=Tensor[(546, 630), bool] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(546, 630), float64] */;
  %440 = cast(%425, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %441 = logical_xor(%415, %416) /* ty=Tensor[(15, 3, 14), uint64] */;
  %442 = floor_divide(%417, %418) /* ty=Tensor[(546, 630), float32] */;
  %443 = %423.0;
  %444 = %435.4;
  %445 = atanh(%439) /* ty=Tensor[(546, 630), float64] */;
  %446 = atan(%440) /* ty=Tensor[(546, 1), float64] */;
  (meta[relay.Constant][20] /* ty=Tensor[(1, 210), uint64] */, %441, %442, %443, %444, %var_1820, %445, %446)
}

def @func_2103() -> Tensor[(7, 78), float64] {
  %447 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %447.0
}

def @func_1304() -> (Tensor[(7, 78), float64],) {
  %448 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %449 = %448.2;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %451 = erf(%450) /* ty=Tensor[(7, 78), float64] */;
  (%451,)
}

def @func_2145(%var_2121: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), float32], Tensor[(11, 16, 11), float64], Tensor[(7, 78), float32], Tensor[(546), float32]) {
  %452 = cast(%var_2121, dtype="float32") /* ty=Tensor[(11, 16, 11), float32] */;
  %453 = cast(%var_2121, dtype="float64") /* ty=Tensor[(11, 16, 11), float64] */;
  %454 = cast(meta[relay.Constant][22] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %455 = cast(meta[relay.Constant][22] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %456 = reshape(%454, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %457 = reshape(%455, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %458 = @func_1581(%456, %457) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
  %459 = sqrt(%452) /* ty=Tensor[(11, 16, 11), float32] */;
  %460 = acos(%453) /* ty=Tensor[(11, 16, 11), float64] */;
  %461 = %458.0;
  (%459, %460, %461, meta[relay.Constant][22] /* ty=Tensor[(546), float32] */)
}

def @func_1249() -> Tensor[(630), uint64] {
  %462 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %462.5
}

def @main(%var_6244: Tensor[(5, 14, 5), bool]) -> (Tensor[(5, 14, 5), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(6, 12, 7), bool], Tensor[(7, 78), uint8], Tensor[(630), uint64], Tensor[(2464), float32]) {
  %463 = @func_4291() /* ty=Tensor[(5, 14, 5), bool] */;
  %464 = cast(%var_6244, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %468 = @func_4220() /* ty=(Tensor[(630), uint64],) */;
  %469 = cast(1.4639f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %470 = cast(meta[relay.Constant][23] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %471 = reshape(%469, newshape=[]) /* ty=float64 */;
  %472 = reshape(%470, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %473 = @func_4740(%471, %472) /* ty=(Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) */;
  %474 = @func_3386() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
  %475 = cast(meta[relay.Constant][23] /* ty=Tensor[(2464), float64] */, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %476 = cast(1.4639f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %477 = mod(%466, %467) /* ty=Tensor[(5, 14, 5), float64] */;
  %478 = %468.0;
  %479 = %473.5;
  %480 = @func_5845() /* ty=Tensor[(6, 12, 7), bool] */;
  %481 = %474.4;
  %482 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %483 = minimum(%475, %476) /* ty=Tensor[(2464), float32] */;
  (%477, %478, %479, %480, %481, %482, %483)
}

def @func_1451(%var_1398: Tensor[(7, 78), float64], %var_1410: float64, %var_1411: Tensor[(117), float64], %var_1417: Tensor[(52), float64]) -> (Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) {
  %484 = cast(%var_1410, dtype="float64") /* ty=float64 */;
  %485 = cast(%var_1411, dtype="float64") /* ty=Tensor[(117), float64] */;
  %486 = reshape(%484, newshape=[]) /* ty=float64 */;
  %487 = reshape(%485, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %488 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %489 = %488.0;
  %490 = cast(%var_1398, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %492 = cast(%489, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %494 = floor_mod(%492, %493) /* ty=Tensor[(7, 78), float32] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %496 = cast(%var_1417, dtype="float64") /* ty=Tensor[(52), float64] */;
  %497 = reshape(%495, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %498 = reshape(%496, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %499 = @func_1140(%497, %498) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %500 = cast(%var_1398, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %501 = cast(%var_1417, dtype="float64") /* ty=Tensor[(52), float64] */;
  %502 = reshape(%500, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %503 = reshape(%501, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %504 = @func_1140(%502, %503) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %505 = cast(%494, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %506 = %504.0;
  %507 = cast(%506, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %508 = %499.1;
  %509 = cast(%508, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %510 = cast(%508, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %511 = reshape(%507, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %512 = reshape(%509, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %513 = reshape(%510, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %514 = @func_245(%511, %512, %513) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %515 = @func_1218(%486, %487) /* ty=Tensor[(1, 13, 9), int8] */;
  %516 = sqrt(%505) /* ty=Tensor[(7, 78), float64] */;
  %517 = %514.2;
  (%515, %var_1410, %var_1411, %508, %var_1417, %506, %516, %517)
}

def @func_3492(%var_3487: Tensor[(7, 78), float64], %var_3490: Tensor[(52), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(15, 3, 14), float32], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64]) {
  %518 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %519 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
  %520 = cast(%var_3487, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %521 = cast(-9.27592f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %523 = cast(%var_3490, dtype="float64") /* ty=Tensor[(52), float64] */;
  %524 = reshape(%520, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
  %525 = reshape(%521, newshape=[]) /* ty=float64 */;
  %526 = reshape(%522, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %527 = reshape(%523, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %528 = @func_1451(%524, %525, %526, %527) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
  %529 = %518.0;
  %530 = %519.0;
  %531 = %528.7;
  (%529, %530, %531, %var_3487, -9.27592f64 /* ty=float64 */, meta[relay.Constant][24] /* ty=Tensor[(117), float64] */, %var_3490)
}

def @func_5986(%var_5966: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), int8], Tensor[(1, 13, 9), int8], float64, Tensor[(1, 117), float64]) {
  %532 = @func_4416() /* ty=Tensor[(91, 6), float32] */;
  %533 = cast(%var_5966, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
  %535 = cast(%532, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %537 = cast(2.70916f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %538 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 117), float64] */, dtype="float64") /* ty=Tensor[(1, 117), float64] */;
  %539 = reshape(%537, newshape=[]) /* ty=float64 */;
  %540 = reshape(%538, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %541 = bitwise_and(%535, %536) /* ty=Tensor[(91, 6), int8] */;
  %542 = @func_1218(%539, %540) /* ty=Tensor[(1, 13, 9), int8] */;
  (%541, %542, 2.70916f64 /* ty=float64 */, meta[relay.Constant][25] /* ty=Tensor[(1, 117), float64] */)
}

def @func_3703() -> (Tensor[(630), uint64],) {
  %543 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %544 = %543.0;
  (%544,)
}

def @func_3328() -> (Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) {
  %545 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %546 = cast(meta[relay.Constant][26] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %547 = reshape(%546, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %548 = @func_3121(%547) /* ty=(Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) */;
  %549 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %550 = %545.0;
  %551 = %548.5;
  %552 = %549.0;
  (%550, %551, meta[relay.Constant][26] /* ty=Tensor[(117), float64] */, %552)
}

def @func_4638() -> (Tensor[(630), uint64],) {
  %553 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
  %554 = %553.0;
  (%554,)
}

def @func_3121(%var_3116: Tensor[(117), float64]) -> (Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) {
  %555 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %556 = cast(meta[relay.Constant][27] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %557 = cast(meta[relay.Constant][28] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %558 = cast(%var_3116, dtype="float64") /* ty=Tensor[(117), float64] */;
  %559 = reshape(%556, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %560 = reshape(%557, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %561 = reshape(%558, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %562 = @func_3020(%559, %560, %561) /* ty=(Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %565 = cast(meta[relay.Constant][28] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %566 = reshape(%564, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %567 = reshape(%565, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %568 = @func_1140(%566, %567) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %569 = %555.0;
  %570 = %568.0;
  (%569, %563, meta[relay.Constant][27] /* ty=Tensor[(1470), uint32] */, meta[relay.Constant][28] /* ty=Tensor[(52), float64] */, %var_3116, %570)
}

def @func_3856(%var_3786: Tensor[(7, 78), int32], %var_3814: float64, %var_3833: Tensor[(352), float32], %var_3845: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), int16], Tensor[(630), uint64], Tensor[(1, 13, 9), int8], float64, Tensor[(13, 9), float64], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(352), float32], Tensor[(7, 78), bool], Tensor[(7, 78), float32]) {
  %571 = @func_2796() /* ty=(Tensor[(7, 78), int32],) */;
  %572 = %571.0;
  %573 = cast(%var_3786, dtype="int16") /* ty=Tensor[(7, 78), int16] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(2), int32] */;
  %575 = cast(%572, dtype="int16") /* ty=Tensor[(7, 78), int16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %577 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %578 = cast(%var_3814, dtype="float64") /* ty=float64 */;
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
  %580 = reshape(%578, newshape=[]) /* ty=float64 */;
  %581 = reshape(%579, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %582 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
  %583 = cast(%var_3833, dtype="float32") /* ty=Tensor[(352), float32] */;
  %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
  %585 = reshape(%583, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %586 = reshape(%584, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %587 = @func_2022(%585, %586) /* ty=(Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) */;
  %588 = cast(%572, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %589 = atan(%588) /* ty=Tensor[(7, 78), float64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %591 = exp(%590) /* ty=Tensor[(7, 78), float32] */;
  %592 = cast(%var_3845, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(2), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %596 = cast(%var_3786, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %597 = shape_of(%572, dtype="int32") /* ty=Tensor[(2), int32] */;
  %598 = cast(%572, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %600 = right_shift(%575, %576) /* ty=Tensor[(7, 78), int16] */;
  %601 = %577.0;
  %602 = @func_1218(%580, %581) /* ty=Tensor[(1, 13, 9), int8] */;
  %603 = %582.0;
  %604 = %587.1;
  %605 = not_equal(%594, %595) /* ty=Tensor[(7, 78), bool] */;
  %606 = mod(%598, %599) /* ty=Tensor[(7, 78), float32] */;
  (%600, %601, %602, %var_3814, meta[relay.Constant][29] /* ty=Tensor[(13, 9), float64] */, %603, %604, %var_3833, %605, %606)
}

def @func_5820() -> (Tensor[(91, 6), float32],) {
  %607 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %608 = %607.0;
  (%608,)
}

def @func_1343() -> Tensor[(630), uint64] {
  @func_1249() /* ty=Tensor[(630), uint64] */
}

def @func_4740(%var_4727: float64, %var_4728: Tensor[(2464), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) {
  %609 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %610 = cast(%var_4727, dtype="float64") /* ty=float64 */;
  %611 = cast(%var_4728, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %612 = reshape(%610, newshape=[]) /* ty=float64 */;
  %613 = reshape(%611, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %614 = @func_4586(%612, %613) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) */;
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %616 = reshape(%615, newshape=[546]) /* ty=Tensor[(546), float32] */;
  %617 = @func_1739(%616) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
  %618 = %609.0;
  %619 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %620 = %614.0;
  %621 = %617.0;
  (%618, %619, %620, %var_4727, %var_4728, %621, meta[relay.Constant][30] /* ty=Tensor[(546), float32] */)
}

def @func_5311(%var_5258: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) {
  %622 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %623 = %622.0;
  %624 = cast(%var_5258, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %626 = cast(%623, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %628 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %629 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %630 = divide(%626, %627) /* ty=Tensor[(91, 6), float64] */;
  %631 = %628.0;
  %632 = %629.1;
  (%630, %631, %632)
}

def @func_5059() -> Tensor[(7, 78), float64] {
  %633 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %634 = %633.1;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  asinh(%635) /* ty=Tensor[(7, 78), float64] */
}

def @func_3440(%var_3430: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(630), uint64]) {
  %636 = cast(%var_3430, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %637 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
  %638 = cos(%636) /* ty=Tensor[(15, 3, 3), float32] */;
  %639 = %637.0;
  (%638, %639)
}

def @func_5146(%var_5110: Tensor[(10, 140), uint8], %var_5115: Tensor[(156), float32], %var_5116: Tensor[(1560), float32], %var_5122: Tensor[(117), float64]) -> (Tensor[(7, 78), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 140), uint8], Tensor[(10, 13, 12), bool], Tensor[(156), float32], Tensor[(1560), float32], Tensor[(1470), uint32], Tensor[(117), float64], Tensor[(7, 78), uint32], Tensor[(6, 12, 7), bool]) {
  %640 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %641 = %640.1;
  %642 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 78), float64] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %646 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %647 = cast(%var_5110, dtype="uint8") /* ty=Tensor[(10, 140), uint8] */;
  %648 = cast(%var_5110, dtype="uint8") /* ty=Tensor[(10, 140), uint8] */;
  %649 = reshape(%647, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), uint8] */;
  %650 = reshape(%648, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), uint8] */;
  %651 = @func_2501(%649, %650) /* ty=(Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) */;
  %652 = cast(%var_5115, dtype="float32") /* ty=Tensor[(156), float32] */;
  %653 = cast(%var_5116, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %654 = reshape(%652, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
  %655 = reshape(%653, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float32] */;
  %656 = @func_4677(%654, %655) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %657 = cast(%var_5122, dtype="float64") /* ty=Tensor[(117), float64] */;
  %658 = reshape(%657, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %659 = @func_3121(%658) /* ty=(Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) */;
  %660 = cast(%641, dtype="uint32") /* ty=Tensor[(7, 78), uint32] */;
  %661 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(7, 78), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %662 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 78), float64] */, dtype="uint32") /* ty=Tensor[(7, 78), uint32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %664 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
  %665 = less(%644, %645) /* ty=Tensor[(7, 78), bool] */;
  %666 = %646.0;
  %667 = %651.2;
  %668 = %656.0;
  %669 = %659.2;
  %670 = subtract(%662, %663) /* ty=Tensor[(7, 78), uint32] */;
  %671 = %664.0;
  (%665, %666, %667, %var_5110, %668, %var_5115, %var_5116, %669, %var_5122, %670, %671)
}

def @func_5890() -> Tensor[(630), uint64] {
  %672 = @func_5468() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64]) */;
  %672.0
}

def @func_3610(%var_3603: Tensor[(91, 6), float32]) -> Tensor[(91, 6), bool] {
  %673 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
  %674 = %673.3;
  %675 = cast(%var_3603, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%677, %678) /* ty=Tensor[(91, 6), bool] */
}

def @func_2421() -> Tensor[(630), uint64] {
  %679 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
  %679.3
}

def @func_5778() -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
  %680 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 12, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %681 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
  %682 = %681.0;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
  %684 = asin(%683) /* ty=Tensor[(6, 12, 7), float32] */;
  %685 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 12, 7), float32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %689 = maximum(%687, %688) /* ty=Tensor[(6, 12, 7), int32] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
  %691 = tan(%680) /* ty=Tensor[(6, 12, 7), float64] */;
  %692 = log10(%690) /* ty=Tensor[(6, 12, 7), float32] */;
  (%691, %692)
}

def @func_2022(%var_1991: Tensor[(8, 4, 11), float32], %var_2015: Tensor[(117), float64]) -> (Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) {
  %693 = cast(%var_1991, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %694 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %695 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %696 = cast(%var_2015, dtype="float64") /* ty=Tensor[(117), float64] */;
  %697 = cast(meta[relay.Constant][33] /* ty=Tensor[(52, 1), float64] */, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %698 = reshape(%696, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %699 = reshape(%697, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %700 = @func_1970(%698, %699) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %701 = sigmoid(%693) /* ty=Tensor[(8, 4, 11), float32] */;
  %702 = %694.2;
  %703 = %695.1;
  %704 = %700.5;
  (%701, %702, %703, %704, %var_2015, meta[relay.Constant][33] /* ty=Tensor[(52, 1), float64] */)
}

def @func_2199() -> (Tensor[(630), uint64],) {
  %705 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
  %706 = %705.3;
  (%706,)
}

def @func_5558(%var_5526: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), uint16], Tensor[(91, 6), int8], Tensor[(91, 6), bool]) {
  %707 = cast(%var_5526, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %708 = rsqrt(%707) /* ty=Tensor[(91, 6), float64] */;
  %709 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %710 = %709.0;
  %711 = cast(%var_5526, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(2), int32] */;
  %713 = cast(%710, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %715 = floor_divide(%713, %714) /* ty=Tensor[(91, 6), float32] */;
  %716 = cast(%715, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
  %717 = shape_of(%708, dtype="int32") /* ty=Tensor[(2), int32] */;
  %718 = cast(%708, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %720 = cast(%var_5526, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %721 = shape_of(%708, dtype="int32") /* ty=Tensor[(2), int32] */;
  %722 = cast(%708, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %724 = cast(%var_5526, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %725 = shape_of(%715, dtype="int32") /* ty=Tensor[(2), int32] */;
  %726 = cast(%715, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %728 = bitwise_or(%718, %719) /* ty=Tensor[(91, 6), uint16] */;
  %729 = left_shift(%722, %723) /* ty=Tensor[(91, 6), int8] */;
  %730 = less_equal(%726, %727) /* ty=Tensor[(91, 6), bool] */;
  (%728, %729, %730)
}

def @func_3740(%var_3719: Tensor[(4, 2, 12), uint16], %var_3720: Tensor[(4, 2, 12), uint16]) -> (Tensor[(4, 2, 12), bool],) {
  %731 = cast(%var_3720, dtype="bool") /* ty=Tensor[(4, 2, 12), bool] */;
  %732 = shape_of(%var_3719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_3719, dtype="bool") /* ty=Tensor[(4, 2, 12), bool] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %735 = not_equal(%733, %734) /* ty=Tensor[(4, 2, 12), bool] */;
  (%735,)
}

def @func_2340() -> (Tensor[(630), uint64], Tensor[(630), uint64]) {
  %736 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %737 = @func_1249() /* ty=Tensor[(630), uint64] */;
  (%736, %737)
}

def @func_2796() -> (Tensor[(7, 78), int32],) {
  %738 = @func_2752() /* ty=Tensor[(7, 78), int32] */;
  (%738,)
}

def @func_1218(%var_1184: float64, %var_1185: Tensor[(1, 13, 9), float64]) -> Tensor[(1, 13, 9), int8] {
  %739 = cast(%var_1184, dtype="float64") /* ty=float64 */;
  %740 = cast(%var_1185, dtype="float64") /* ty=Tensor[(1, 13, 9), float64] */;
  %741 = floor_mod(%739, %740) /* ty=Tensor[(1, 13, 9), float64] */;
  %742 = cast(%var_1184, dtype="int8") /* ty=int8 */;
  %743 = cast(%741, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
  maximum(%742, %743) /* ty=Tensor[(1, 13, 9), int8] */
}

def @func_2752() -> Tensor[(7, 78), int32] {
  %744 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
  %745 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 78), float64] */, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(2), int32] */;
  %747 = cast(%744, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  maximum(%747, %748) /* ty=Tensor[(7, 78), int32] */
}

def @func_1140(%var_1098: Tensor[(7, 78), float32], %var_1135: Tensor[(1, 52), float64]) -> (Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) {
  %749 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %750 = cast(%var_1098, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %751 = %749.1;
  %752 = cast(%751, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %753 = reshape(%750, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %754 = reshape(%752, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %755 = @func_707(%753, %754) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %756 = cast(%751, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %757 = %755.5;
  %758 = cast(%757, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %759 = cast(%757, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %760 = reshape(%756, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %761 = reshape(%758, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %762 = reshape(%759, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %763 = @func_245(%760, %761, %762) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %764 = cast(%var_1135, dtype="float64") /* ty=Tensor[(1, 52), float64] */;
  %765 = reshape(%764, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), float64] */;
  %766 = @func_933(%765) /* ty=(Tensor[(4, 1, 13), float64],) */;
  %767 = cast(%var_1098, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %768 = cosh(%767) /* ty=Tensor[(7, 78), float64] */;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %770 = sigmoid(%769) /* ty=Tensor[(7, 78), float32] */;
  %771 = cast(%var_1098, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(2), int32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %775 = %763.1;
  %776 = %766.0;
  %777 = logical_or(%773, %774) /* ty=Tensor[(7, 78), bool] */;
  (%751, %757, %775, %776, %var_1135, %777)
}

def @func_4677(%var_4664: Tensor[(1, 13, 12), float32], %var_4672: Tensor[(10, 13, 12), float32]) -> (Tensor[(10, 13, 12), bool],) {
  %778 = cast(6.58892f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %779 = cast(%var_4664, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %780 = multiply(%778, %779) /* ty=Tensor[(1, 13, 12), float32] */;
  %781 = cast(%780, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
  %782 = cast(%var_4672, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %783 = logical_or(%781, %782) /* ty=Tensor[(10, 13, 12), bool] */;
  (%783,)
}

def @func_1473() -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
  %784 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %785 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %786 = %784.0;
  %787 = %785.0;
  (%786, %787)
}

def @func_3158() -> (Tensor[(630), uint64],) {
  %788 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
  %789 = %788.0;
  (%789,)
}

def @func_3260(%var_3233: Tensor[(7, 78), float64], %var_3254: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(91, 6), float32], Tensor[(52), float64], Tensor[(52), float64]) {
  %790 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %791 = %790.0;
  %792 = cast(%var_3233, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(2), int32] */;
  %794 = cast(%791, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %796 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
  %797 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
  %798 = cast(%var_3254, dtype="float64") /* ty=Tensor[(52), float64] */;
  %799 = reshape(%798, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %800 = @func_1850(%799) /* ty=(Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) */;
  %801 = floor_divide(%794, %795) /* ty=Tensor[(7, 78), float64] */;
  %802 = %796.0;
  %803 = %797.0;
  %804 = %800.5;
  (%801, %802, %803, %804, %var_3254)
}

def @func_5845() -> Tensor[(6, 12, 7), bool] {
  %805 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
  %805.0
}

def @func_5394() -> (Tensor[(91, 6), uint16],) {
  %806 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
  %808 = reshape(%807, newshape=[91, 6]) /* ty=Tensor[(91, 6), float32] */;
  %809 = @func_5311(%808) /* ty=(Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) */;
  %810 = %809.2;
  %811 = cast(%810, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
  %812 = shape_of(%806, dtype="int32") /* ty=Tensor[(2), int32] */;
  %813 = cast(%806, dtype="int64") /* ty=Tensor[(91, 6), int64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %815 = bitwise_xor(%813, %814) /* ty=Tensor[(91, 6), int64] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %817 = cos(%816) /* ty=Tensor[(91, 6), float64] */;
  %818 = @func_2556() /* ty=(Tensor[(7, 78), float64],) */;
  %819 = %818.0;
  %820 = cast(%819, dtype="uint16") /* ty=Tensor[(7, 78), uint16] */;
  %821 = shape_of(%817, dtype="int32") /* ty=Tensor[(2), int32] */;
  %822 = cast(%817, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %824 = multiply(%822, %823) /* ty=Tensor[(91, 6), uint16] */;
  (%824,)
}

def @func_6049(%var_6035: Tensor[(3, 12, 4), float32]) -> (Tensor[(3, 12, 4), float32], Tensor[(3, 12, 4), float64]) {
  %825 = cast(%var_6035, dtype="float32") /* ty=Tensor[(3, 12, 4), float32] */;
  %826 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
  %827 = shape_of(%var_6035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%var_6035, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %830 = log2(%825) /* ty=Tensor[(3, 12, 4), float32] */;
  %831 = minimum(%828, %829) /* ty=Tensor[(3, 12, 4), float64] */;
  (%830, %831)
}

def @func_933(%var_929: Tensor[(4, 1, 13), float64]) -> (Tensor[(4, 1, 13), float64],) {
  %832 = cast(%var_929, dtype="float64") /* ty=Tensor[(4, 1, 13), float64] */;
  %833 = sqrt(%832) /* ty=Tensor[(4, 1, 13), float64] */;
  (%833,)
}

def @func_6230() -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(630), uint64]) {
  %834 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %835 = @func_4220() /* ty=(Tensor[(630), uint64],) */;
  %836 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
  %837 = %834.1;
  %838 = %835.0;
  %839 = %836.0;
  (%837, %838, %839)
}

def @func_4974() -> (Tensor[(91, 6), float32], Tensor[(210), uint64], Tensor[(210, 1), uint64], Tensor[(117), float64]) {
  %840 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %841 = cast(meta[relay.Constant][36] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %842 = reshape(%841, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %843 = @func_4379(%842) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) */;
  %844 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
  %845 = %840.3;
  %846 = %843.8;
  (%844, %845, %846, meta[relay.Constant][36] /* ty=Tensor[(117), float64] */)
}

def @func_2210() -> Tensor[(630), uint64] {
  %847 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %847.0
}

def @func_245(%var_202: Tensor[(15, 1, 14), uint64], %var_203: Tensor[(15, 3, 14), uint64], %var_232: Tensor[(15, 3, 14), uint64]) -> (Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) {
  %848 = cast(%var_202, dtype="uint64") /* ty=Tensor[(15, 1, 14), uint64] */;
  %849 = cast(%var_203, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %850 = cast(%var_232, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
  %851 = shape_of(%var_203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%var_203, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %854 = cast(%var_232, dtype="float32") /* ty=Tensor[(15, 3, 14), float32] */;
  %855 = subtract(%848, %849) /* ty=Tensor[(15, 3, 14), uint64] */;
  %856 = power(%852, %853) /* ty=Tensor[(15, 3, 14), float64] */;
  %857 = acos(%854) /* ty=Tensor[(15, 3, 14), float32] */;
  (%855, %856, %857)
}

def @func_4246(%var_4243: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(91, 6), bool], Tensor[(546), float32]) {
  %858 = cast(%var_4243, dtype="float32") /* ty=Tensor[(546), float32] */;
  %859 = reshape(%858, newshape=[91, 6]) /* ty=Tensor[(91, 6), float32] */;
  %860 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %861 = @func_3610(%859) /* ty=Tensor[(91, 6), bool] */;
  (%860, %861, %var_4243)
}

def @func_2842() -> (Tensor[(91, 6), float32],) {
  %862 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
  %863 = %862.2;
  (%863,)
}

def @func_3101() -> (Tensor[(630), uint64],) {
  %864 = @func_2724() /* ty=Tensor[(630), uint64] */;
  (%864,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1222(%var_1220: float64, %var_1221: Tensor[(1, 13, 9), float64]) -> Tensor[(1, 13, 9), int8] {
  @func_1218(%var_1220, %var_1221) /* ty=Tensor[(1, 13, 9), int8] */
}

def @func_1882(%var_1880: Tensor[(15, 14, 7), uint32], %var_1881: Tensor[(15, 14, 7), uint32]) -> (Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) {
  %10 = fn (%var_1867: Tensor[(15, 14, 7), uint32], %var_1868: Tensor[(15, 14, 7), uint32]) -> (Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) {
    %0 = cast(%var_1868, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
    %1 = shape_of(%var_1867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_1867, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %4 = cast(%var_1868, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %5 = shape_of(%var_1867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%var_1867, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %8 = bitwise_xor(%2, %3) /* ty=Tensor[(15, 14, 7), uint32] */;
    %9 = logical_or(%6, %7) /* ty=Tensor[(15, 14, 7), bool] */;
    (%8, %9)
  };
  %10(%var_1880, %var_1881) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */
}

def @func_4744(%var_4742: float64, %var_4743: Tensor[(2464), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) {
  @func_4740(%var_4742, %var_4743) /* ty=(Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) */
}

def @func_249(%var_246: Tensor[(15, 1, 14), uint64], %var_247: Tensor[(15, 3, 14), uint64], %var_248: Tensor[(15, 3, 14), uint64]) -> (Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) {
  %21 = fn (%var_202: Tensor[(15, 1, 14), uint64], %var_203: Tensor[(15, 3, 14), uint64], %var_232: Tensor[(15, 3, 14), uint64]) -> (Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) {
    %11 = cast(%var_202, dtype="uint64") /* ty=Tensor[(15, 1, 14), uint64] */;
    %12 = cast(%var_203, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
    %13 = cast(%var_232, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
    %14 = shape_of(%var_203, dtype="int32") /* ty=Tensor[(3), int32] */;
    %15 = cast(%var_203, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %17 = cast(%var_232, dtype="float32") /* ty=Tensor[(15, 3, 14), float32] */;
    %18 = subtract(%11, %12) /* ty=Tensor[(15, 3, 14), uint64] */;
    %19 = power(%15, %16) /* ty=Tensor[(15, 3, 14), float64] */;
    %20 = acos(%17) /* ty=Tensor[(15, 3, 14), float32] */;
    (%18, %19, %20)
  };
  %21(%var_246, %var_247, %var_248) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */
}

def @func_4590(%var_4588: float64, %var_4589: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) {
  @func_4586(%var_4588, %var_4589) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) */
}

def @func_5821() -> (Tensor[(91, 6), float32],) {
  %24 = fn () -> (Tensor[(91, 6), float32],) {
    %22 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %23 = %22.0;
    (%23,)
  };
  %24() /* ty=(Tensor[(91, 6), float32],) */
}

def @func_4681(%var_4679: Tensor[(1, 13, 12), float32], %var_4680: Tensor[(10, 13, 12), float32]) -> (Tensor[(10, 13, 12), bool],) {
  @func_4677(%var_4679, %var_4680) /* ty=(Tensor[(10, 13, 12), bool],) */
}

def @func_5208() -> Tensor[(210), uint64] {
  @func_5206() /* ty=Tensor[(210), uint64] */
}

def @func_2897() -> (Tensor[(7, 78), float64], Tensor[(7, 78), int64]) {
  %31 = fn () -> (Tensor[(7, 78), float64], Tensor[(7, 78), int64]) {
    %25 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %26 = %25.0;
    %27 = cast(%26, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %28 = reshape(%27, newshape=[546]) /* ty=Tensor[(546), float32] */;
    %29 = @func_1739(%28) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
    %30 = %29.1;
    (%26, %30)
  };
  %31() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */
}

def @func_3886() -> (Tensor[(6, 12, 7), bool],) {
  @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */
}

def @func_4268() -> (Tensor[(7, 13, ?), bool],) {
  %39 = fn () -> (Tensor[(7, 13, ?), bool],) {
    %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 1), float64] */;
    %33 = cos(%32) /* ty=Tensor[(7, 13, 1), float64] */;
    %34 = cast(%33, dtype="bool") /* ty=Tensor[(7, 13, 1), bool] */;
    %35 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 13, 1), float64] */, dtype="bool") /* ty=Tensor[(7, 13, 1), bool] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %38 = greater(%36, %37) /* ty=Tensor[(7, 13, ?), bool] */;
    (%38,)
  };
  %39() /* ty=(Tensor[(7, 13, ?), bool],) */
}

def @func_5606(%var_5605: Tensor[(13, 9), float64]) -> (Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(546), float32], Tensor[(13, 4), float64], Tensor[(91, 6), float32], Tensor[(6, 12, 7), bool], Tensor[(26, 2), float64], Tensor[(13, 9), float64], Tensor[(7, 78), float64]) {
  %57 = fn (%var_5589: Tensor[(13, 9), float64]) -> (Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(546), float32], Tensor[(13, 4), float64], Tensor[(91, 6), float32], Tensor[(6, 12, 7), bool], Tensor[(26, 2), float64], Tensor[(13, 9), float64], Tensor[(7, 78), float64]) {
    %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
    %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 4), float64] */;
    %42 = reshape(%40, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %43 = reshape(%41, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
    %44 = @func_1140(%42, %43) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
    %45 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %46 = @func_3386() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
    %47 = cast(%var_5589, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
    %48 = reshape(%47, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %49 = @func_4379(%48) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) */;
    %50 = @func_2556() /* ty=(Tensor[(7, 78), float64],) */;
    %51 = @func_2724() /* ty=Tensor[(630), uint64] */;
    %52 = %44.3;
    %53 = %45.0;
    %54 = %46.2;
    %55 = %49.2;
    %56 = %50.0;
    (%51, %52, meta[relay.Constant][1] /* ty=Tensor[(546), float32] */, meta[relay.Constant][2] /* ty=Tensor[(13, 4), float64] */, %53, %54, %55, %var_5589, %56)
  };
  %57(%var_5605) /* ty=(Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(546), float32], Tensor[(13, 4), float64], Tensor[(91, 6), float32], Tensor[(6, 12, 7), bool], Tensor[(26, 2), float64], Tensor[(13, 9), float64], Tensor[(7, 78), float64]) */
}

def @func_3031() -> (Tensor[(91, 6), float32],) {
  %60 = fn () -> (Tensor[(91, 6), float32],) {
    %58 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
    %59 = %58.0;
    (%59,)
  };
  %60() /* ty=(Tensor[(91, 6), float32],) */
}

def @func_4249(%var_4247: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(91, 6), bool], Tensor[(546), float32]) {
  @func_4246(%var_4247) /* ty=(Tensor[(630), uint64], Tensor[(91, 6), bool], Tensor[(546), float32]) */
}

def @func_3123(%var_3122: Tensor[(117), float64]) -> (Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) {
  %77 = fn (%var_3116: Tensor[(117), float64]) -> (Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) {
    %61 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
    %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %64 = cast(%var_3116, dtype="float64") /* ty=Tensor[(117), float64] */;
    %65 = reshape(%62, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
    %66 = reshape(%63, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %67 = reshape(%64, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %68 = @func_3020(%65, %66, %67) /* ty=(Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) */;
    %69 = %68.0;
    %70 = cast(%69, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %72 = reshape(%70, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %73 = reshape(%71, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
    %74 = @func_1140(%72, %73) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
    %75 = %61.0;
    %76 = %74.0;
    (%75, %69, meta[relay.Constant][3] /* ty=Tensor[(1470), uint32] */, meta[relay.Constant][4] /* ty=Tensor[(52), float64] */, %var_3116, %76)
  };
  %77(%var_3122) /* ty=(Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) */
}

def @func_5560(%var_5559: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), uint16], Tensor[(91, 6), int8], Tensor[(91, 6), bool]) {
  %102 = fn (%var_5526: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), uint16], Tensor[(91, 6), int8], Tensor[(91, 6), bool]) {
    %78 = cast(%var_5526, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
    %79 = rsqrt(%78) /* ty=Tensor[(91, 6), float64] */;
    %80 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
    %81 = %80.0;
    %82 = cast(%var_5526, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(2), int32] */;
    %84 = cast(%81, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %86 = floor_divide(%84, %85) /* ty=Tensor[(91, 6), float32] */;
    %87 = cast(%86, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
    %88 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
    %89 = cast(%79, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %91 = cast(%var_5526, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
    %92 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
    %93 = cast(%79, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %95 = cast(%var_5526, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
    %96 = shape_of(%86, dtype="int32") /* ty=Tensor[(2), int32] */;
    %97 = cast(%86, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %99 = bitwise_or(%89, %90) /* ty=Tensor[(91, 6), uint16] */;
    %100 = left_shift(%93, %94) /* ty=Tensor[(91, 6), int8] */;
    %101 = less_equal(%97, %98) /* ty=Tensor[(91, 6), bool] */;
    (%99, %100, %101)
  };
  %102(%var_5559) /* ty=(Tensor[(91, 6), uint16], Tensor[(91, 6), int8], Tensor[(91, 6), bool]) */
}

def @func_6230() -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(630), uint64]) {
  %103 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %104 = @func_4220() /* ty=(Tensor[(630), uint64],) */;
  %105 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
  %106 = %103.1;
  %107 = %104.0;
  %108 = %105.0;
  (%106, %107, %108)
}

def @func_4976() -> (Tensor[(91, 6), float32], Tensor[(210), uint64], Tensor[(210, 1), uint64], Tensor[(117), float64]) {
  @func_4974() /* ty=(Tensor[(91, 6), float32], Tensor[(210), uint64], Tensor[(210, 1), uint64], Tensor[(117), float64]) */
}

def @main(%var_6244: Tensor[(5, 14, 5), bool]) -> (Tensor[(5, 14, 5), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(6, 12, 7), bool], Tensor[(7, 78), uint8], Tensor[(630), uint64], Tensor[(2464), float32]) {
  %109 = @func_4291() /* ty=Tensor[(5, 14, 5), bool] */;
  %110 = cast(%var_6244, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = @func_4221() /* ty=(Tensor[(630), uint64],) */;
  %115 = cast(1.4639f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %117 = reshape(%115, newshape=[]) /* ty=float64 */;
  %118 = reshape(%116, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %119 = @func_4744(%117, %118) /* ty=(Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) */;
  %120 = @func_3387() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(2464), float64] */, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %122 = cast(1.4639f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %123 = mod(%112, %113) /* ty=Tensor[(5, 14, 5), float64] */;
  %124 = %114.0;
  %125 = %119.5;
  %126 = @func_5845() /* ty=Tensor[(6, 12, 7), bool] */;
  %127 = %120.4;
  %128 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %129 = minimum(%121, %122) /* ty=Tensor[(2464), float32] */;
  (%123, %124, %125, %126, %127, %128, %129)
}

def @func_1474() -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
  %134 = fn () -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
    %130 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %131 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %132 = %130.0;
    %133 = %131.0;
    (%132, %133)
  };
  %134() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */
}

def @func_2933() -> (Tensor[(630), uint64],) {
  %135 = @func_1343() /* ty=Tensor[(630), uint64] */;
  (%135,)
}

def @func_5061() -> Tensor[(7, 78), float64] {
  @func_5059() /* ty=Tensor[(7, 78), float64] */
}

def @func_5847() -> Tensor[(6, 12, 7), bool] {
  @func_5845() /* ty=Tensor[(6, 12, 7), bool] */
}

def @func_3387() -> (Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) {
  %156 = fn () -> (Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) {
    %136 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
    %137 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
    %138 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %139 = reshape(%138, newshape=[]) /* ty=int64 */;
    %140 = @func_2676(%139) /* ty=(Tensor[(6, 12, 7), bool],) */;
    %141 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
    %142 = cast(%141, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %143 = cast(%141, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %144 = reshape(%142, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %145 = reshape(%143, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %146 = @func_1581(%144, %145) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
    %147 = %146.0;
    %148 = cast(%141, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(2), int32] */;
    %150 = cast(%147, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %152 = %136.0;
    %153 = %137.2;
    %154 = %140.0;
    %155 = multiply(%150, %151) /* ty=Tensor[(7, 78), uint8] */;
    (%152, %153, %154, 1 /* ty=int64 */, %155)
  };
  %156() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */
}

def @func_4292() -> Tensor[(5, 14, 5), bool] {
  %159 = fn () -> Tensor[(5, 14, 5), bool] {
    %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 14, 5), uint64] */, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
    %158 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
    less_equal(%157, %158) /* ty=Tensor[(5, 14, 5), bool] */
  };
  %159() /* ty=Tensor[(5, 14, 5), bool] */
}

def @func_5313(%var_5312: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) {
  %171 = fn (%var_5258: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) {
    %160 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %161 = %160.0;
    %162 = cast(%var_5258, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(2), int32] */;
    %164 = cast(%161, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %166 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
    %167 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
    %168 = divide(%164, %165) /* ty=Tensor[(91, 6), float64] */;
    %169 = %166.0;
    %170 = %167.1;
    (%168, %169, %170)
  };
  %171(%var_5312) /* ty=(Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) */
}

def @func_5151(%var_5147: Tensor[(10, 140), uint8], %var_5148: Tensor[(156), float32], %var_5149: Tensor[(1560), float32], %var_5150: Tensor[(117), float64]) -> (Tensor[(7, 78), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 140), uint8], Tensor[(10, 13, 12), bool], Tensor[(156), float32], Tensor[(1560), float32], Tensor[(1470), uint32], Tensor[(117), float64], Tensor[(7, 78), uint32], Tensor[(6, 12, 7), bool]) {
  %204 = fn (%var_5110: Tensor[(10, 140), uint8], %var_5115: Tensor[(156), float32], %var_5116: Tensor[(1560), float32], %var_5122: Tensor[(117), float64]) -> (Tensor[(7, 78), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 140), uint8], Tensor[(10, 13, 12), bool], Tensor[(156), float32], Tensor[(1560), float32], Tensor[(1470), uint32], Tensor[(117), float64], Tensor[(7, 78), uint32], Tensor[(6, 12, 7), bool]) {
    %172 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
    %173 = %172.1;
    %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 78), float64] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(2), int32] */;
    %176 = cast(%173, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %178 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
    %179 = cast(%var_5110, dtype="uint8") /* ty=Tensor[(10, 140), uint8] */;
    %180 = cast(%var_5110, dtype="uint8") /* ty=Tensor[(10, 140), uint8] */;
    %181 = reshape(%179, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), uint8] */;
    %182 = reshape(%180, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), uint8] */;
    %183 = @func_2501(%181, %182) /* ty=(Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) */;
    %184 = cast(%var_5115, dtype="float32") /* ty=Tensor[(156), float32] */;
    %185 = cast(%var_5116, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %186 = reshape(%184, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
    %187 = reshape(%185, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float32] */;
    %188 = @func_4677(%186, %187) /* ty=(Tensor[(10, 13, 12), bool],) */;
    %189 = cast(%var_5122, dtype="float64") /* ty=Tensor[(117), float64] */;
    %190 = reshape(%189, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %191 = @func_3121(%190) /* ty=(Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) */;
    %192 = cast(%173, dtype="uint32") /* ty=Tensor[(7, 78), uint32] */;
    %193 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(7, 78), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %194 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 78), float64] */, dtype="uint32") /* ty=Tensor[(7, 78), uint32] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %196 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
    %197 = less(%176, %177) /* ty=Tensor[(7, 78), bool] */;
    %198 = %178.0;
    %199 = %183.2;
    %200 = %188.0;
    %201 = %191.2;
    %202 = subtract(%194, %195) /* ty=Tensor[(7, 78), uint32] */;
    %203 = %196.0;
    (%197, %198, %199, %var_5110, %200, %var_5115, %var_5116, %201, %var_5122, %202, %203)
  };
  %204(%var_5147, %var_5148, %var_5149, %var_5150) /* ty=(Tensor[(7, 78), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 140), uint8], Tensor[(10, 13, 12), bool], Tensor[(156), float32], Tensor[(1560), float32], Tensor[(1470), uint32], Tensor[(117), float64], Tensor[(7, 78), uint32], Tensor[(6, 12, 7), bool]) */
}

def @func_4879(%var_4829: Tensor[(91, 6), int32], %var_4860: float64, %var_4861: Tensor[(117), float64], %var_4862: Tensor[(52, 1), float64]) -> (Tensor[(91, 6), bool], Tensor[(91, 6), bool], Tensor[(630), uint64], Tensor[(91, 6), float64], Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(52, 1), float64], Tensor[(15, 14, 7), uint32], Tensor[(1470, 1), uint32]) {
  %205 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %207 = sqrt(%206) /* ty=Tensor[(91, 6), float64] */;
  %208 = cast(%205, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(2), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %212 = cast(%207, dtype="int32") /* ty=Tensor[(91, 6), int32] */;
  %213 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
  %214 = cast(%205, dtype="int32") /* ty=Tensor[(91, 6), int32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %216 = subtract(%214, %215) /* ty=Tensor[(91, 6), int32] */;
  %217 = cast(%var_4829, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %221 = cast(%205, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %222 = logical_and(%210, %211) /* ty=Tensor[(91, 6), bool] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %224 = cast(%var_4860, dtype="float64") /* ty=float64 */;
  %225 = cast(%var_4861, dtype="float64") /* ty=Tensor[(117), float64] */;
  %226 = cast(%var_4862, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %227 = reshape(%223, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
  %228 = reshape(%224, newshape=[]) /* ty=float64 */;
  %229 = reshape(%225, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %230 = reshape(%226, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %231 = @func_1451(%227, %228, %229, %230) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
  %232 = cast(meta[relay.Constant][9] /* ty=Tensor[(1470, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1470, 1), uint32] */;
  %233 = cast(%var_4862, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %234 = cast(%var_4861, dtype="float64") /* ty=Tensor[(117), float64] */;
  %235 = reshape(%232, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %236 = reshape(%233, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %237 = reshape(%234, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %238 = @func_3020(%235, %236, %237) /* ty=(Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) */;
  %239 = logical_or(%219, %220) /* ty=Tensor[(91, 6), bool] */;
  %240 = @func_2210() /* ty=Tensor[(630), uint64] */;
  %241 = tan(%221) /* ty=Tensor[(91, 6), float64] */;
  %242 = %231.0;
  %243 = %238.3;
  (%222, %239, %240, %241, %242, %var_4860, %var_4861, %var_4862, %243, meta[relay.Constant][9] /* ty=Tensor[(1470, 1), uint32] */)
}

def @func_3743(%var_3741: Tensor[(4, 2, 12), uint16], %var_3742: Tensor[(4, 2, 12), uint16]) -> (Tensor[(4, 2, 12), bool],) {
  %249 = fn (%var_3719: Tensor[(4, 2, 12), uint16], %var_3720: Tensor[(4, 2, 12), uint16]) -> (Tensor[(4, 2, 12), bool],) {
    %244 = cast(%var_3720, dtype="bool") /* ty=Tensor[(4, 2, 12), bool] */;
    %245 = shape_of(%var_3719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%var_3719, dtype="bool") /* ty=Tensor[(4, 2, 12), bool] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %248 = not_equal(%246, %247) /* ty=Tensor[(4, 2, 12), bool] */;
    (%248,)
  };
  %249(%var_3741, %var_3742) /* ty=(Tensor[(4, 2, 12), bool],) */
}

def @func_5779() -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
  %263 = fn () -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
    %250 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 12, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %251 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
    %252 = %251.0;
    %253 = cast(%252, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
    %254 = asin(%253) /* ty=Tensor[(6, 12, 7), float32] */;
    %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 12, 7), float32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
    %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%254, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %259 = maximum(%257, %258) /* ty=Tensor[(6, 12, 7), int32] */;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
    %261 = tan(%250) /* ty=Tensor[(6, 12, 7), float64] */;
    %262 = log10(%260) /* ty=Tensor[(6, 12, 7), float32] */;
    (%261, %262)
  };
  %263() /* ty=(Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) */
}

def @func_1970(%var_1958: Tensor[(117), float64], %var_1959: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) {
  %264 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %267 = cast(3.05484f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %268 = cast(%var_1958, dtype="float64") /* ty=Tensor[(117), float64] */;
  %269 = cast(%var_1959, dtype="float64") /* ty=Tensor[(52), float64] */;
  %270 = reshape(%266, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
  %271 = reshape(%267, newshape=[]) /* ty=float64 */;
  %272 = reshape(%268, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %273 = reshape(%269, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %274 = @func_1451(%270, %271, %272, %273) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
  %275 = cast(meta[relay.Constant][11] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %276 = cast(meta[relay.Constant][11] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %277 = reshape(%275, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %278 = reshape(%276, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %279 = @func_1879(%277, %278) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %280 = %274.6;
  %281 = %279.1;
  (%265, %280, 3.05484f64 /* ty=float64 */, %var_1958, %var_1959, %281, meta[relay.Constant][11] /* ty=Tensor[(1470), uint32] */)
}

def @func_5696() -> Tensor[(210), uint64] {
  %282 = fn () -> Tensor[(210), uint64] {
    @func_5206() /* ty=Tensor[(210), uint64] */
  };
  %282() /* ty=Tensor[(210), uint64] */
}

def @func_2026(%var_2024: Tensor[(8, 4, 11), float32], %var_2025: Tensor[(117), float64]) -> (Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) {
  @func_2022(%var_2024, %var_2025) /* ty=(Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) */
}

def @func_2051() -> (Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) {
  %289 = fn () -> (Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) {
    %283 = cast(meta[relay.Constant][12] /* ty=Tensor[(91, 6), float32] */, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %284 = reshape(%283, newshape=[546]) /* ty=Tensor[(546), float32] */;
    %285 = @func_1739(%284) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
    %286 = @func_1343() /* ty=Tensor[(630), uint64] */;
    %287 = %285.2;
    %288 = @func_1343() /* ty=Tensor[(630), uint64] */;
    (%286, %287, meta[relay.Constant][12] /* ty=Tensor[(91, 6), float32] */, %288)
  };
  %289() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */
}

def @func_3861(%var_3857: Tensor[(7, 78), int32], %var_3858: float64, %var_3859: Tensor[(352), float32], %var_3860: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), int16], Tensor[(630), uint64], Tensor[(1, 13, 9), int8], float64, Tensor[(13, 9), float64], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(352), float32], Tensor[(7, 78), bool], Tensor[(7, 78), float32]) {
  %326 = fn (%var_3786: Tensor[(7, 78), int32], %var_3814: float64, %var_3833: Tensor[(352), float32], %var_3845: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), int16], Tensor[(630), uint64], Tensor[(1, 13, 9), int8], float64, Tensor[(13, 9), float64], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(352), float32], Tensor[(7, 78), bool], Tensor[(7, 78), float32]) {
    %290 = @func_2796() /* ty=(Tensor[(7, 78), int32],) */;
    %291 = %290.0;
    %292 = cast(%var_3786, dtype="int16") /* ty=Tensor[(7, 78), int16] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(2), int32] */;
    %294 = cast(%291, dtype="int16") /* ty=Tensor[(7, 78), int16] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %296 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
    %297 = cast(%var_3814, dtype="float64") /* ty=float64 */;
    %298 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
    %299 = reshape(%297, newshape=[]) /* ty=float64 */;
    %300 = reshape(%298, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
    %301 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
    %302 = cast(%var_3833, dtype="float32") /* ty=Tensor[(352), float32] */;
    %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9), float64] */;
    %304 = reshape(%302, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
    %305 = reshape(%303, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %306 = @func_2022(%304, %305) /* ty=(Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) */;
    %307 = cast(%291, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %308 = atan(%307) /* ty=Tensor[(7, 78), float64] */;
    %309 = cast(%308, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %310 = exp(%309) /* ty=Tensor[(7, 78), float32] */;
    %311 = cast(%var_3845, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(2), int32] */;
    %313 = cast(%310, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %315 = cast(%var_3786, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %316 = shape_of(%291, dtype="int32") /* ty=Tensor[(2), int32] */;
    %317 = cast(%291, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %319 = right_shift(%294, %295) /* ty=Tensor[(7, 78), int16] */;
    %320 = %296.0;
    %321 = @func_1218(%299, %300) /* ty=Tensor[(1, 13, 9), int8] */;
    %322 = %301.0;
    %323 = %306.1;
    %324 = not_equal(%313, %314) /* ty=Tensor[(7, 78), bool] */;
    %325 = mod(%317, %318) /* ty=Tensor[(7, 78), float32] */;
    (%319, %320, %321, %var_3814, meta[relay.Constant][13] /* ty=Tensor[(13, 9), float64] */, %322, %323, %var_3833, %324, %325)
  };
  %326(%var_3857, %var_3858, %var_3859, %var_3860) /* ty=(Tensor[(7, 78), int16], Tensor[(630), uint64], Tensor[(1, 13, 9), int8], float64, Tensor[(13, 9), float64], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(352), float32], Tensor[(7, 78), bool], Tensor[(7, 78), float32]) */
}

def @func_6095() -> Tensor[(7, 78), int64] {
  %328 = fn () -> Tensor[(7, 78), int64] {
    %327 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
    %327.1
  };
  %328() /* ty=Tensor[(7, 78), int64] */
}

def @func_4586(%var_4566: float64, %var_4567: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) {
  %329 = cast(%var_4566, dtype="float64") /* ty=float64 */;
  %330 = cast(%var_4567, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %331 = @func_4291() /* ty=Tensor[(5, 14, 5), bool] */;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %333 = atan(%332) /* ty=Tensor[(5, 14, 5), float64] */;
  %334 = cast(%331, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %338 = minimum(%329, %330) /* ty=Tensor[(16, 14, 11), float64] */;
  %339 = @func_2421() /* ty=Tensor[(630), uint64] */;
  %340 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %341 = divide(%336, %337) /* ty=Tensor[(5, 14, 5), float64] */;
  (%338, %339, %340, %341)
}

def @func_1456(%var_1452: Tensor[(7, 78), float64], %var_1453: float64, %var_1454: Tensor[(117), float64], %var_1455: Tensor[(52), float64]) -> (Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) {
  %376 = fn (%var_1398: Tensor[(7, 78), float64], %var_1410: float64, %var_1411: Tensor[(117), float64], %var_1417: Tensor[(52), float64]) -> (Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) {
    %342 = cast(%var_1410, dtype="float64") /* ty=float64 */;
    %343 = cast(%var_1411, dtype="float64") /* ty=Tensor[(117), float64] */;
    %344 = reshape(%342, newshape=[]) /* ty=float64 */;
    %345 = reshape(%343, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
    %346 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %347 = %346.0;
    %348 = cast(%var_1398, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(2), int32] */;
    %350 = cast(%347, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %352 = floor_mod(%350, %351) /* ty=Tensor[(7, 78), float32] */;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %354 = cast(%var_1417, dtype="float64") /* ty=Tensor[(52), float64] */;
    %355 = reshape(%353, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %356 = reshape(%354, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
    %357 = @func_1140(%355, %356) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
    %358 = cast(%var_1398, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %359 = cast(%var_1417, dtype="float64") /* ty=Tensor[(52), float64] */;
    %360 = reshape(%358, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %361 = reshape(%359, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
    %362 = @func_1140(%360, %361) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
    %363 = cast(%352, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %364 = %362.0;
    %365 = cast(%364, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %366 = %357.1;
    %367 = cast(%366, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
    %368 = cast(%366, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
    %369 = reshape(%365, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
    %370 = reshape(%367, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %371 = reshape(%368, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %372 = @func_245(%369, %370, %371) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
    %373 = @func_1218(%344, %345) /* ty=Tensor[(1, 13, 9), int8] */;
    %374 = sqrt(%363) /* ty=Tensor[(7, 78), float64] */;
    %375 = %372.2;
    (%373, %var_1410, %var_1411, %366, %var_1417, %364, %374, %375)
  };
  %376(%var_1452, %var_1453, %var_1454, %var_1455) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */
}

def @func_1218(%var_1184: float64, %var_1185: Tensor[(1, 13, 9), float64]) -> Tensor[(1, 13, 9), int8] {
  %377 = cast(%var_1184, dtype="float64") /* ty=float64 */;
  %378 = cast(%var_1185, dtype="float64") /* ty=Tensor[(1, 13, 9), float64] */;
  %379 = floor_mod(%377, %378) /* ty=Tensor[(1, 13, 9), float64] */;
  %380 = cast(%var_1184, dtype="int8") /* ty=int8 */;
  %381 = cast(%379, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
  maximum(%380, %381) /* ty=Tensor[(1, 13, 9), int8] */
}

def @func_707(%var_673: Tensor[(7, 6, 13), float32], %var_680: Tensor[(210), uint64]) -> (Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) {
  %382 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %383 = cast(meta[relay.Constant][14] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %384 = cast(meta[relay.Constant][14] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %385 = reshape(%382, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %386 = reshape(%383, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %387 = reshape(%384, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %388 = @func_245(%385, %386, %387) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %389 = cast(%var_673, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %390 = log10(%389) /* ty=Tensor[(7, 6, 13), float32] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %392 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %393 = %388.2;
  %394 = cast(%393, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %395 = cast(meta[relay.Constant][14] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %396 = reshape(%392, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %397 = reshape(%394, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %398 = reshape(%395, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %399 = @func_245(%396, %397, %398) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %400 = cast(%var_680, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %401 = cast(meta[relay.Constant][14] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %402 = cast(%393, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %403 = reshape(%400, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %404 = reshape(%401, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %405 = reshape(%402, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %406 = @func_245(%403, %404, %405) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %407 = exp(%391) /* ty=Tensor[(7, 6, 13), float32] */;
  %408 = %399.0;
  %409 = %406.2;
  (%393, %var_680, meta[relay.Constant][14] /* ty=Tensor[(630), uint64] */, %407, %408, %409)
}

def @func_2212() -> Tensor[(630), uint64] {
  @func_2210() /* ty=Tensor[(630), uint64] */
}

def @func_2935() -> (Tensor[(630), uint64],) {
  @func_2933() /* ty=(Tensor[(630), uint64],) */
}

def @func_2635(%var_2632: Tensor[(1470), uint32], %var_2633: Tensor[(52), float64], %var_2634: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) {
  %435 = fn (%var_2595: Tensor[(1470), uint32], %var_2602: Tensor[(52), float64], %var_2608: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) {
    %410 = cast(%var_2595, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
    %411 = cast(%var_2595, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
    %412 = reshape(%410, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
    %413 = reshape(%411, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
    %414 = @func_1879(%412, %413) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
    %415 = cast(meta[relay.Constant][15] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %416 = cast(%var_2602, dtype="float64") /* ty=Tensor[(52), float64] */;
    %417 = reshape(%415, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %418 = reshape(%416, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %419 = @func_1970(%417, %418) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
    %420 = %414.1;
    %421 = cast(%420, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
    %422 = cast(%420, dtype="uint32") /* ty=Tensor[(15, 14, 7), uint32] */;
    %423 = reshape(%421, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
    %424 = reshape(%422, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
    %425 = @func_1879(%423, %424) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
    %426 = cast(%var_2608, dtype="float32") /* ty=Tensor[(117), float32] */;
    %427 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(117), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %428 = cast(meta[relay.Constant][15] /* ty=Tensor[(117), float64] */, dtype="float32") /* ty=Tensor[(117), float32] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?), float32] */;
    %430 = @func_2210() /* ty=Tensor[(630), uint64] */;
    %431 = %419.4;
    %432 = %425.0;
    %433 = floor_divide(%428, %429) /* ty=Tensor[(117), float32] */;
    %434 = @func_1343() /* ty=Tensor[(630), uint64] */;
    (%430, %420, %var_2595, %431, %var_2602, %432, %433, %434)
  };
  %435(%var_2632, %var_2633, %var_2634) /* ty=(Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) */
}

def @func_3703() -> (Tensor[(630), uint64],) {
  %436 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %437 = %436.0;
  (%437,)
}

def @func_1739(%var_1726: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) {
  %438 = cast(%var_1726, dtype="float32") /* ty=Tensor[(546), float32] */;
  %439 = cast(%var_1726, dtype="float32") /* ty=Tensor[(546), float32] */;
  %440 = reshape(%438, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %441 = reshape(%439, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %442 = @func_1581(%440, %441) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
  %443 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %444 = %442.1;
  (%443, %444, %var_1726)
}

def @func_2556() -> (Tensor[(7, 78), float64],) {
  %445 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %446 = %445.0;
  (%446,)
}

def @func_5986(%var_5966: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), int8], Tensor[(1, 13, 9), int8], float64, Tensor[(1, 117), float64]) {
  %447 = @func_4416() /* ty=Tensor[(91, 6), float32] */;
  %448 = cast(%var_5966, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(2), int32] */;
  %450 = cast(%447, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %452 = cast(2.70916f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %453 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 117), float64] */, dtype="float64") /* ty=Tensor[(1, 117), float64] */;
  %454 = reshape(%452, newshape=[]) /* ty=float64 */;
  %455 = reshape(%453, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %456 = bitwise_and(%450, %451) /* ty=Tensor[(91, 6), int8] */;
  %457 = @func_1218(%454, %455) /* ty=Tensor[(1, 13, 9), int8] */;
  (%456, %457, 2.70916f64 /* ty=float64 */, meta[relay.Constant][16] /* ty=Tensor[(1, 117), float64] */)
}

def @func_6051(%var_6050: Tensor[(3, 12, 4), float32]) -> (Tensor[(3, 12, 4), float32], Tensor[(3, 12, 4), float64]) {
  %465 = fn (%var_6035: Tensor[(3, 12, 4), float32]) -> (Tensor[(3, 12, 4), float32], Tensor[(3, 12, 4), float64]) {
    %458 = cast(%var_6035, dtype="float32") /* ty=Tensor[(3, 12, 4), float32] */;
    %459 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
    %460 = shape_of(%var_6035, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%var_6035, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %463 = log2(%458) /* ty=Tensor[(3, 12, 4), float32] */;
    %464 = minimum(%461, %462) /* ty=Tensor[(3, 12, 4), float64] */;
    (%463, %464)
  };
  %465(%var_6050) /* ty=(Tensor[(3, 12, 4), float32], Tensor[(3, 12, 4), float64]) */
}

def @func_1344() -> Tensor[(630), uint64] {
  %466 = fn () -> Tensor[(630), uint64] {
    @func_1249() /* ty=Tensor[(630), uint64] */
  };
  %466() /* ty=Tensor[(630), uint64] */
}

def @func_5395() -> (Tensor[(91, 6), uint16],) {
  %486 = fn () -> (Tensor[(91, 6), uint16],) {
    %467 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
    %468 = cast(%467, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %469 = reshape(%468, newshape=[91, 6]) /* ty=Tensor[(91, 6), float32] */;
    %470 = @func_5311(%469) /* ty=(Tensor[(91, 6), float64], Tensor[(630), uint64], Tensor[(7, 78), int64]) */;
    %471 = %470.2;
    %472 = cast(%471, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
    %473 = shape_of(%467, dtype="int32") /* ty=Tensor[(2), int32] */;
    %474 = cast(%467, dtype="int64") /* ty=Tensor[(91, 6), int64] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %476 = bitwise_xor(%474, %475) /* ty=Tensor[(91, 6), int64] */;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
    %478 = cos(%477) /* ty=Tensor[(91, 6), float64] */;
    %479 = @func_2556() /* ty=(Tensor[(7, 78), float64],) */;
    %480 = %479.0;
    %481 = cast(%480, dtype="uint16") /* ty=Tensor[(7, 78), uint16] */;
    %482 = shape_of(%478, dtype="int32") /* ty=Tensor[(2), int32] */;
    %483 = cast(%478, dtype="uint16") /* ty=Tensor[(91, 6), uint16] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %485 = multiply(%483, %484) /* ty=Tensor[(91, 6), uint16] */;
    (%485,)
  };
  %486() /* ty=(Tensor[(91, 6), uint16],) */
}

def @func_5890() -> Tensor[(630), uint64] {
  %487 = @func_5468() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64]) */;
  %487.0
}

def @func_5989(%var_5987: Tensor[(91, 6), float32]) -> (Tensor[(91, 6), int8], Tensor[(1, 13, 9), int8], float64, Tensor[(1, 117), float64]) {
  @func_5986(%var_5987) /* ty=(Tensor[(91, 6), int8], Tensor[(1, 13, 9), int8], float64, Tensor[(1, 117), float64]) */
}

def @func_3495(%var_3493: Tensor[(7, 78), float64], %var_3494: Tensor[(52), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(15, 3, 14), float32], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64]) {
  %502 = fn (%var_3487: Tensor[(7, 78), float64], %var_3490: Tensor[(52), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(15, 3, 14), float32], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64]) {
    %488 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
    %489 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
    %490 = cast(%var_3487, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %491 = cast(-9.27592f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %492 = cast(meta[relay.Constant][18] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %493 = cast(%var_3490, dtype="float64") /* ty=Tensor[(52), float64] */;
    %494 = reshape(%490, newshape=[7, 78]) /* ty=Tensor[(7, 78), float64] */;
    %495 = reshape(%491, newshape=[]) /* ty=float64 */;
    %496 = reshape(%492, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %497 = reshape(%493, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %498 = @func_1451(%494, %495, %496, %497) /* ty=(Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(15, 3, 14), float32], Tensor[(52), float64], Tensor[(210), uint64], Tensor[(7, 78), float64], Tensor[(15, 3, 14), float32]) */;
    %499 = %488.0;
    %500 = %489.0;
    %501 = %498.7;
    (%499, %500, %501, %var_3487, -9.27592f64 /* ty=float64 */, meta[relay.Constant][18] /* ty=Tensor[(117), float64] */, %var_3490)
  };
  %502(%var_3493, %var_3494) /* ty=(Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(15, 3, 14), float32], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64]) */
}

def @func_1853(%var_1851: Tensor[(52), float64]) -> (Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) {
  @func_1850(%var_1851) /* ty=(Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) */
}

def @func_4417() -> Tensor[(91, 6), float32] {
  %504 = fn () -> Tensor[(91, 6), float32] {
    %503 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
    %503.0
  };
  %504() /* ty=Tensor[(91, 6), float32] */
}

def @func_6232() -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(630), uint64]) {
  @func_6230() /* ty=(Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(630), uint64]) */
}

def @func_3083(%var_3070: Tensor[(7, 78), int64], %var_3075: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), bool], Tensor[(7, 78), bool]) {
  %505 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %506 = %505.1;
  %507 = cast(%var_3070, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %511 = cast(%506, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %512 = log2(%511) /* ty=Tensor[(7, 78), float32] */;
  %513 = cast(%var_3075, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(%512, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %517 = greater_equal(%509, %510) /* ty=Tensor[(7, 78), bool] */;
  %518 = greater(%515, %516) /* ty=Tensor[(7, 78), bool] */;
  (%517, %518)
}

def @func_5206() -> Tensor[(210), uint64] {
  %519 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
  %519.1
}

def @func_5470() -> (Tensor[(630), uint64], Tensor[(7, 78), float64]) {
  @func_5468() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64]) */
}

def @func_2022(%var_1991: Tensor[(8, 4, 11), float32], %var_2015: Tensor[(117), float64]) -> (Tensor[(8, 4, 11), float32], Tensor[(7, 78), float64], Tensor[(7, 78), float64], Tensor[(15, 14, 7), bool], Tensor[(117), float64], Tensor[(52, 1), float64]) {
  %520 = cast(%var_1991, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %521 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %522 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %523 = cast(%var_2015, dtype="float64") /* ty=Tensor[(117), float64] */;
  %524 = cast(meta[relay.Constant][19] /* ty=Tensor[(52, 1), float64] */, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %525 = reshape(%523, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %526 = reshape(%524, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %527 = @func_1970(%525, %526) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %528 = sigmoid(%520) /* ty=Tensor[(8, 4, 11), float32] */;
  %529 = %521.2;
  %530 = %522.1;
  %531 = %527.5;
  (%528, %529, %530, %531, %var_2015, meta[relay.Constant][19] /* ty=Tensor[(52, 1), float64] */)
}

def @func_1305() -> (Tensor[(7, 78), float64],) {
  %536 = fn () -> (Tensor[(7, 78), float64],) {
    %532 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
    %533 = %532.2;
    %534 = cast(%533, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %535 = erf(%534) /* ty=Tensor[(7, 78), float64] */;
    (%535,)
  };
  %536() /* ty=(Tensor[(7, 78), float64],) */
}

def @func_3884() -> (Tensor[(6, 12, 7), bool],) {
  %537 = @func_3386() /* ty=(Tensor[(630), uint64], Tensor[(117), float64], Tensor[(6, 12, 7), bool], int64, Tensor[(7, 78), uint8]) */;
  %538 = %537.2;
  (%538,)
}

def @func_4208(%var_4206: Tensor[(1, 5, 13), uint32], %var_4207: Tensor[(13, 5, 13), uint32]) -> (Tensor[(13, 5, 13), bool], Tensor[(91, 6), float32], Tensor[(13, 5, 13), float64], Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(210), uint64]) {
  %554 = fn (%var_4184: Tensor[(1, 5, 13), uint32], %var_4185: Tensor[(13, 5, 13), uint32]) -> (Tensor[(13, 5, 13), bool], Tensor[(91, 6), float32], Tensor[(13, 5, 13), float64], Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(210), uint64]) {
    %539 = cast(%var_4184, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
    %540 = cast(%var_4185, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
    %541 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
    %542 = cast(%var_4185, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
    %543 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
    %544 = %541.0;
    %545 = cast(%544, dtype="float32") /* ty=Tensor[(91, 6), float32] */;
    %546 = cast(meta[relay.Constant][20] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %547 = reshape(%545, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
    %548 = reshape(%546, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %549 = @func_707(%547, %548) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
    %550 = less_equal(%539, %540) /* ty=Tensor[(13, 5, 13), bool] */;
    %551 = log2(%542) /* ty=Tensor[(13, 5, 13), float64] */;
    %552 = %543.0;
    %553 = %549.1;
    (%550, %544, %551, %552, %553, meta[relay.Constant][20] /* ty=Tensor[(210), uint64] */)
  };
  %554(%var_4206, %var_4207) /* ty=(Tensor[(13, 5, 13), bool], Tensor[(91, 6), float32], Tensor[(13, 5, 13), float64], Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(210), uint64]) */
}

def @func_2147(%var_2146: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), float32], Tensor[(11, 16, 11), float64], Tensor[(7, 78), float32], Tensor[(546), float32]) {
  %565 = fn (%var_2121: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), float32], Tensor[(11, 16, 11), float64], Tensor[(7, 78), float32], Tensor[(546), float32]) {
    %555 = cast(%var_2121, dtype="float32") /* ty=Tensor[(11, 16, 11), float32] */;
    %556 = cast(%var_2121, dtype="float64") /* ty=Tensor[(11, 16, 11), float64] */;
    %557 = cast(meta[relay.Constant][21] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
    %558 = cast(meta[relay.Constant][21] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
    %559 = reshape(%557, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %560 = reshape(%558, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %561 = @func_1581(%559, %560) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
    %562 = sqrt(%555) /* ty=Tensor[(11, 16, 11), float32] */;
    %563 = acos(%556) /* ty=Tensor[(11, 16, 11), float64] */;
    %564 = %561.0;
    (%562, %563, %564, meta[relay.Constant][21] /* ty=Tensor[(546), float32] */)
  };
  %565(%var_2146) /* ty=(Tensor[(11, 16, 11), float32], Tensor[(11, 16, 11), float64], Tensor[(7, 78), float32], Tensor[(546), float32]) */
}

def @func_3443(%var_3441: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(630), uint64]) {
  @func_3440(%var_3441) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(630), uint64]) */
}

def @func_1144(%var_1142: Tensor[(7, 78), float32], %var_1143: Tensor[(1, 52), float64]) -> (Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) {
  @func_1140(%var_1142, %var_1143) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */
}

def @func_3025(%var_3022: Tensor[(1470), uint32], %var_3023: Tensor[(52), float64], %var_3024: Tensor[(117), float64]) -> (Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) {
  @func_3020(%var_3022, %var_3023, %var_3024) /* ty=(Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) */
}

def @func_2558() -> (Tensor[(7, 78), float64],) {
  @func_2556() /* ty=(Tensor[(7, 78), float64],) */
}

def @func_935(%var_934: Tensor[(4, 1, 13), float64]) -> (Tensor[(4, 1, 13), float64],) {
  %568 = fn (%var_929: Tensor[(4, 1, 13), float64]) -> (Tensor[(4, 1, 13), float64],) {
    %566 = cast(%var_929, dtype="float64") /* ty=Tensor[(4, 1, 13), float64] */;
    %567 = sqrt(%566) /* ty=Tensor[(4, 1, 13), float64] */;
    (%567,)
  };
  %568(%var_934) /* ty=(Tensor[(4, 1, 13), float64],) */
}

def @func_4974() -> (Tensor[(91, 6), float32], Tensor[(210), uint64], Tensor[(210, 1), uint64], Tensor[(117), float64]) {
  %569 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %570 = cast(meta[relay.Constant][22] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %571 = reshape(%570, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %572 = @func_4379(%571) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) */;
  %573 = @func_4698() /* ty=Tensor[(91, 6), float32] */;
  %574 = %569.3;
  %575 = %572.8;
  (%573, %574, %575, meta[relay.Constant][22] /* ty=Tensor[(117), float64] */)
}

def @func_4677(%var_4664: Tensor[(1, 13, 12), float32], %var_4672: Tensor[(10, 13, 12), float32]) -> (Tensor[(10, 13, 12), bool],) {
  %576 = cast(6.58892f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %577 = cast(%var_4664, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %578 = multiply(%576, %577) /* ty=Tensor[(1, 13, 12), float32] */;
  %579 = cast(%578, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
  %580 = cast(%var_4672, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %581 = logical_or(%579, %580) /* ty=Tensor[(10, 13, 12), bool] */;
  (%581,)
}

def @func_4177(%var_4176: Tensor[(12, 11, 10), float32]) -> (Tensor[(7, 78), float64], Tensor[(12, 11, 10), float64], Tensor[(12, 11, 10), uint32]) {
  %593 = fn (%var_4155: Tensor[(12, 11, 10), float32]) -> (Tensor[(7, 78), float64], Tensor[(12, 11, 10), float64], Tensor[(12, 11, 10), uint32]) {
    %582 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
    %583 = cast(%var_4155, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
    %584 = rsqrt(%583) /* ty=Tensor[(12, 11, 10), float32] */;
    %585 = cast(%584, dtype="float64") /* ty=Tensor[(12, 11, 10), float64] */;
    %586 = cast(%var_4155, dtype="uint32") /* ty=Tensor[(12, 11, 10), uint32] */;
    %587 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %588 = cast(%584, dtype="uint32") /* ty=Tensor[(12, 11, 10), uint32] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %590 = %582.0;
    %591 = sqrt(%585) /* ty=Tensor[(12, 11, 10), float64] */;
    %592 = bitwise_or(%588, %589) /* ty=Tensor[(12, 11, 10), uint32] */;
    (%590, %591, %592)
  };
  %593(%var_4176) /* ty=(Tensor[(7, 78), float64], Tensor[(12, 11, 10), float64], Tensor[(12, 11, 10), uint32]) */
}

def @func_5658() -> (Tensor[(630), uint64],) {
  @func_5656() /* ty=(Tensor[(630), uint64],) */
}

def @func_1051() -> (Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) {
  %614 = fn () -> (Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) {
    %594 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
    %595 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 78), float32] */, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %596 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %597 = reshape(%595, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
    %598 = reshape(%596, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %599 = @func_707(%597, %598) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
    %600 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %601 = cast(meta[relay.Constant][26] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %602 = cast(meta[relay.Constant][26] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %603 = reshape(%600, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
    %604 = reshape(%601, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %605 = reshape(%602, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %606 = @func_245(%603, %604, %605) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
    %607 = cast(meta[relay.Constant][27] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %608 = reshape(%607, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), float64] */;
    %609 = @func_933(%608) /* ty=(Tensor[(4, 1, 13), float64],) */;
    %610 = tan(%594) /* ty=Tensor[(15, 9, 10), float32] */;
    %611 = %599.1;
    %612 = %606.1;
    %613 = %609.0;
    (%610, %611, meta[relay.Constant][24] /* ty=Tensor[(7, 78), float32] */, meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, %612, meta[relay.Constant][26] /* ty=Tensor[(630), uint64] */, %613, meta[relay.Constant][27] /* ty=Tensor[(52), float64] */)
  };
  %614() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */
}

def @func_4381(%var_4380: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) {
  %661 = fn (%var_4306: Tensor[(117), float64]) -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) {
    %615 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
    %616 = cast(%var_4306, dtype="float64") /* ty=Tensor[(117), float64] */;
    %617 = cast(meta[relay.Constant][28] /* ty=Tensor[(26, 2), float64] */, dtype="float64") /* ty=Tensor[(26, 2), float64] */;
    %618 = reshape(%616, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %619 = reshape(%617, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %620 = @func_1970(%618, %619) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
    %621 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %622 = cast(meta[relay.Constant][29] /* ty=Tensor[(117), float64] */, dtype="bool") /* ty=Tensor[(117), bool] */;
    %623 = shape_of(%var_4306, dtype="int32") /* ty=Tensor[(1), int32] */;
    %624 = cast(%var_4306, dtype="bool") /* ty=Tensor[(117), bool] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), bool] */;
    %626 = logical_or(%624, %625) /* ty=Tensor[(117), bool] */;
    %627 = cast(%626, dtype="float64") /* ty=Tensor[(117), float64] */;
    %628 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(117), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %629 = cast(meta[relay.Constant][29] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?), float64] */;
    %631 = power(%629, %630) /* ty=Tensor[(117), float64] */;
    %632 = cast(%631, dtype="float32") /* ty=Tensor[(117), float32] */;
    %633 = cast(meta[relay.Constant][29] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %634 = cast(%626, dtype="int8") /* ty=Tensor[(117), int8] */;
    %635 = shape_of(%631, dtype="int32") /* ty=Tensor[(1), int32] */;
    %636 = cast(%631, dtype="int8") /* ty=Tensor[(117), int8] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?), int8] */;
    %638 = cast(meta[relay.Constant][30] /* ty=Tensor[(210, 1), uint64] */, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
    %639 = %615.0;
    %640 = cast(%639, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %641 = cast(%639, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %642 = reshape(%638, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
    %643 = reshape(%640, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %644 = reshape(%641, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
    %645 = @func_245(%642, %643, %644) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
    %646 = cast(%631, dtype="float32") /* ty=Tensor[(117), float32] */;
    %647 = sin(%646) /* ty=Tensor[(117), float32] */;
    %648 = cast(%var_4306, dtype="bool") /* ty=Tensor[(117), bool] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(1), int32] */;
    %650 = cast(%647, dtype="bool") /* ty=Tensor[(117), bool] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?), bool] */;
    %652 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %653 = %620.0;
    %654 = %621.0;
    %655 = cos(%632) /* ty=Tensor[(117), float32] */;
    %656 = asin(%633) /* ty=Tensor[(117), float64] */;
    %657 = bitwise_xor(%636, %637) /* ty=Tensor[(117), int8] */;
    %658 = %645.1;
    %659 = logical_and(%650, %651) /* ty=Tensor[(117), bool] */;
    %660 = %652.0;
    (%639, %653, meta[relay.Constant][28] /* ty=Tensor[(26, 2), float64] */, %654, %655, %656, %657, %658, meta[relay.Constant][30] /* ty=Tensor[(210, 1), uint64] */, %659, %660)
  };
  %661(%var_4380) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(26, 2), float64], Tensor[(7, 78), float64], Tensor[(117), float32], Tensor[(117), float64], Tensor[(117), int8], Tensor[(15, 3, 14), float64], Tensor[(210, 1), uint64], Tensor[(117), bool], Tensor[(91, 6), float32]) */
}

def @func_4639() -> (Tensor[(630), uint64],) {
  %664 = fn () -> (Tensor[(630), uint64],) {
    %662 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
    %663 = %662.0;
    (%663,)
  };
  %664() /* ty=(Tensor[(630), uint64],) */
}

def @func_4740(%var_4727: float64, %var_4728: Tensor[(2464), float64]) -> (Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(16, 14, 11), float64], float64, Tensor[(2464), float64], Tensor[(630), uint64], Tensor[(546), float32]) {
  %665 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %666 = cast(%var_4727, dtype="float64") /* ty=float64 */;
  %667 = cast(%var_4728, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %668 = reshape(%666, newshape=[]) /* ty=float64 */;
  %669 = reshape(%667, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %670 = @func_4586(%668, %669) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(630), uint64], Tensor[(630), uint64], Tensor[(5, 14, 5), float64]) */;
  %671 = cast(meta[relay.Constant][31] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %672 = reshape(%671, newshape=[546]) /* ty=Tensor[(546), float32] */;
  %673 = @func_1739(%672) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */;
  %674 = %665.0;
  %675 = @func_1343() /* ty=Tensor[(630), uint64] */;
  %676 = %670.0;
  %677 = %673.0;
  (%674, %675, %676, %var_4727, %var_4728, %677, meta[relay.Constant][31] /* ty=Tensor[(546), float32] */)
}

def @func_5845() -> Tensor[(6, 12, 7), bool] {
  %678 = @func_3884() /* ty=(Tensor[(6, 12, 7), bool],) */;
  %678.0
}

def @func_5940() -> Tensor[(91, 6), float32] {
  @func_5938() /* ty=Tensor[(91, 6), float32] */
}

def @func_1585(%var_1583: Tensor[(7, 78), float32], %var_1584: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), float32], Tensor[(7, 78), int64]) {
  @func_1581(%var_1583, %var_1584) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */
}

def @func_3329() -> (Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) {
  %687 = fn () -> (Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) {
    %679 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
    %680 = cast(meta[relay.Constant][32] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %681 = reshape(%680, newshape=[117]) /* ty=Tensor[(117), float64] */;
    %682 = @func_3121(%681) /* ty=(Tensor[(7, 78), float64], Tensor[(91, 6), float32], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(117), float64], Tensor[(210), uint64]) */;
    %683 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %684 = %679.0;
    %685 = %682.5;
    %686 = %683.0;
    (%684, %685, meta[relay.Constant][32] /* ty=Tensor[(117), float64] */, %686)
  };
  %687() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */
}

def @func_1974(%var_1972: Tensor[(117), float64], %var_1973: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) {
  @func_1970(%var_1972, %var_1973) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */
}

def @func_2103() -> Tensor[(7, 78), float64] {
  %688 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %688.0
}

def @func_4221() -> (Tensor[(630), uint64],) {
  %691 = fn () -> (Tensor[(630), uint64],) {
    %689 = @func_3101() /* ty=(Tensor[(630), uint64],) */;
    %690 = %689.0;
    (%690,)
  };
  %691() /* ty=(Tensor[(630), uint64],) */
}

def @func_3440(%var_3430: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(630), uint64]) {
  %692 = cast(%var_3430, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %693 = @func_3158() /* ty=(Tensor[(630), uint64],) */;
  %694 = cos(%692) /* ty=Tensor[(15, 3, 3), float32] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_1251() -> Tensor[(630), uint64] {
  @func_1249() /* ty=Tensor[(630), uint64] */
}

def @func_2423() -> Tensor[(630), uint64] {
  @func_2421() /* ty=Tensor[(630), uint64] */
}

def @func_4246(%var_4243: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(91, 6), bool], Tensor[(546), float32]) {
  %696 = cast(%var_4243, dtype="float32") /* ty=Tensor[(546), float32] */;
  %697 = reshape(%696, newshape=[91, 6]) /* ty=Tensor[(91, 6), float32] */;
  %698 = @func_1249() /* ty=Tensor[(630), uint64] */;
  %699 = @func_3610(%697) /* ty=Tensor[(91, 6), bool] */;
  (%698, %699, %var_4243)
}

def @func_3020(%var_2996: Tensor[(1470), uint32], %var_3000: Tensor[(52), float64], %var_3001: Tensor[(117), float64]) -> (Tensor[(91, 6), float32], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(15, 14, 7), uint32], Tensor[(117), float64], Tensor[(52), bool]) {
  %700 = @func_2842() /* ty=(Tensor[(91, 6), float32],) */;
  %701 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %702 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %703 = reshape(%701, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %704 = reshape(%702, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint32] */;
  %705 = @func_1879(%703, %704) /* ty=(Tensor[(15, 14, 7), uint32], Tensor[(15, 14, 7), bool]) */;
  %706 = cast(%var_2996, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %707 = cast(%var_3000, dtype="float64") /* ty=Tensor[(52), float64] */;
  %708 = cast(%var_3001, dtype="float64") /* ty=Tensor[(117), float64] */;
  %709 = reshape(%706, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %710 = reshape(%707, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %711 = reshape(%708, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %712 = @func_2631(%709, %710, %711) /* ty=(Tensor[(630), uint64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(15, 14, 7), uint32], Tensor[(117), float32], Tensor[(630), uint64]) */;
  %713 = cast(%var_3001, dtype="float64") /* ty=Tensor[(117), float64] */;
  %714 = cast(%var_3000, dtype="float64") /* ty=Tensor[(52), float64] */;
  %715 = reshape(%713, newshape=[117]) /* ty=Tensor[(117), float64] */;
  %716 = reshape(%714, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %717 = @func_1970(%715, %716) /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64], float64, Tensor[(117), float64], Tensor[(52), float64], Tensor[(15, 14, 7), bool], Tensor[(1470), uint32]) */;
  %718 = %717.2;
  %719 = cast(%var_3000, dtype="bool") /* ty=Tensor[(52), bool] */;
  %720 = cast(%718, dtype="bool") /* ty=bool */;
  %721 = %700.0;
  %722 = %705.1;
  %723 = %712.5;
  %724 = equal(%719, %720) /* ty=Tensor[(52), bool] */;
  (%721, %722, %var_2996, %723, %var_3001, %724)
}

def @func_1581(%var_1534: Tensor[(7, 78), float32], %var_1551: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), float32], Tensor[(7, 78), int64]) {
  %725 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %726 = %725.2;
  %727 = cast(%var_1534, dtype="int8") /* ty=Tensor[(7, 78), int8] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(2), int32] */;
  %729 = cast(%726, dtype="int8") /* ty=Tensor[(7, 78), int8] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %731 = left_shift(%729, %730) /* ty=Tensor[(7, 78), int8] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %733 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(2), int32] */;
  %734 = cast(%var_1534, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %736 = cast(%var_1551, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %737 = shape_of(%726, dtype="int32") /* ty=Tensor[(2), int32] */;
  %738 = cast(%726, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %740 = power(%738, %739) /* ty=Tensor[(7, 78), float32] */;
  %741 = cast(%var_1534, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(2), int32] */;
  %743 = cast(%740, dtype="int64") /* ty=Tensor[(7, 78), int64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %745 = divide(%734, %735) /* ty=Tensor[(7, 78), float32] */;
  %746 = bitwise_or(%743, %744) /* ty=Tensor[(7, 78), int64] */;
  (%745, %746)
}

def @func_4885(%var_4881: Tensor[(91, 6), int32], %var_4882: float64, %var_4883: Tensor[(117), float64], %var_4884: Tensor[(52, 1), float64]) -> (Tensor[(91, 6), bool], Tensor[(91, 6), bool], Tensor[(630), uint64], Tensor[(91, 6), float64], Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(52, 1), float64], Tensor[(15, 14, 7), uint32], Tensor[(1470, 1), uint32]) {
  @func_4879(%var_4881, %var_4882, %var_4883, %var_4884) /* ty=(Tensor[(91, 6), bool], Tensor[(91, 6), bool], Tensor[(630), uint64], Tensor[(91, 6), float64], Tensor[(1, 13, 9), int8], float64, Tensor[(117), float64], Tensor[(52, 1), float64], Tensor[(15, 14, 7), uint32], Tensor[(1470, 1), uint32]) */
}

def @func_5468() -> (Tensor[(630), uint64], Tensor[(7, 78), float64]) {
  %747 = @func_3101() /* ty=(Tensor[(630), uint64],) */;
  %748 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %751 = atanh(%750) /* ty=Tensor[(7, 78), float64] */;
  %752 = cast(%749, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(2), int32] */;
  %754 = cast(%751, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %756 = bitwise_and(%754, %755) /* ty=Tensor[(7, 78), int32] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %758 = %747.0;
  %759 = log10(%757) /* ty=Tensor[(7, 78), float64] */;
  (%758, %759)
}

def @func_3263(%var_3261: Tensor[(7, 78), float64], %var_3262: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(91, 6), float32], Tensor[(52), float64], Tensor[(52), float64]) {
  %775 = fn (%var_3233: Tensor[(7, 78), float64], %var_3254: Tensor[(52), float64]) -> (Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(91, 6), float32], Tensor[(52), float64], Tensor[(52), float64]) {
    %760 = @func_1304() /* ty=(Tensor[(7, 78), float64],) */;
    %761 = %760.0;
    %762 = cast(%var_3233, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(2), int32] */;
    %764 = cast(%761, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %766 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
    %767 = @func_3030() /* ty=(Tensor[(91, 6), float32],) */;
    %768 = cast(%var_3254, dtype="float64") /* ty=Tensor[(52), float64] */;
    %769 = reshape(%768, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %770 = @func_1850(%769) /* ty=(Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) */;
    %771 = floor_divide(%764, %765) /* ty=Tensor[(7, 78), float64] */;
    %772 = %766.0;
    %773 = %767.0;
    %774 = %770.5;
    (%771, %772, %773, %774, %var_3254)
  };
  %775(%var_3261, %var_3262) /* ty=(Tensor[(7, 78), float64], Tensor[(630), uint64], Tensor[(91, 6), float32], Tensor[(52), float64], Tensor[(52), float64]) */
}

def @func_1850(%var_1820: Tensor[(52), float64]) -> (Tensor[(1, 210), uint64], Tensor[(15, 3, 14), uint64], Tensor[(546, 630), float32], Tensor[(15, 3, 14), float32], Tensor[(1, 52), float64], Tensor[(52), float64], Tensor[(546, 630), float64], Tensor[(546, 1), float64]) {
  %776 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %777 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %778 = reshape(%776, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %779 = reshape(%777, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %780 = @func_707(%778, %779) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %781 = %780.5;
  %782 = @func_1662() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %785 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%781, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %788 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %789 = cast(%783, dtype="float32") /* ty=Tensor[(630), float32] */;
  %790 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %791 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %792 = reshape(%790, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %793 = reshape(%791, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %794 = @func_707(%792, %793) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %795 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), float32] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %796 = log(%795) /* ty=Tensor[(546, 1), float64] */;
  %797 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), float32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(2), int32] */;
  %799 = cast(%796, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %801 = bitwise_or(%799, %800) /* ty=Tensor[(546, ?), int32] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(546, ?), float32] */;
  %803 = cast(%var_1820, dtype="float64") /* ty=Tensor[(52), float64] */;
  %804 = reshape(%802, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
  %805 = reshape(%803, newshape=[1, 52]) /* ty=Tensor[(1, 52), float64] */;
  %806 = @func_1140(%804, %805) /* ty=(Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) */;
  %807 = cast(%801, dtype="bool") /* ty=Tensor[(546, ?), bool] */;
  %808 = cast(%783, dtype="bool") /* ty=Tensor[(630), bool] */;
  %809 = logical_or(%807, %808) /* ty=Tensor[(546, 630), bool] */;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(546, 630), float64] */;
  %811 = cast(%796, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %812 = logical_xor(%786, %787) /* ty=Tensor[(15, 3, 14), uint64] */;
  %813 = floor_divide(%788, %789) /* ty=Tensor[(546, 630), float32] */;
  %814 = %794.0;
  %815 = %806.4;
  %816 = atanh(%810) /* ty=Tensor[(546, 630), float64] */;
  %817 = atan(%811) /* ty=Tensor[(546, 1), float64] */;
  (meta[relay.Constant][33] /* ty=Tensor[(1, 210), uint64] */, %812, %813, %814, %815, %var_1820, %816, %817)
}

def @func_5701() -> Tensor[(630), uint64] {
  %818 = @func_2933() /* ty=(Tensor[(630), uint64],) */;
  %818.0
}

def @func_711(%var_709: Tensor[(7, 6, 13), float32], %var_710: Tensor[(210), uint64]) -> (Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) {
  @func_707(%var_709, %var_710) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */
}

def @func_1742(%var_1740: Tensor[(546), float32]) -> (Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) {
  @func_1739(%var_1740) /* ty=(Tensor[(630), uint64], Tensor[(7, 78), int64], Tensor[(546), float32]) */
}

def @func_3612(%var_3611: Tensor[(91, 6), float32]) -> Tensor[(91, 6), bool] {
  %825 = fn (%var_3603: Tensor[(91, 6), float32]) -> Tensor[(91, 6), bool] {
    %819 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
    %820 = %819.3;
    %821 = cast(%var_3603, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(2), int32] */;
    %823 = cast(%820, dtype="bool") /* ty=Tensor[(91, 6), bool] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    not_equal(%823, %824) /* ty=Tensor[(91, 6), bool] */
  };
  %825(%var_3611) /* ty=Tensor[(91, 6), bool] */
}

def @func_2678(%var_2677: int64) -> (Tensor[(6, 12, 7), bool],) {
  %829 = fn (%var_2671: int64) -> (Tensor[(6, 12, 7), bool],) {
    %826 = cast(%var_2671, dtype="bool") /* ty=bool */;
    %827 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 12, 7), int64] */, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
    %828 = less(%826, %827) /* ty=Tensor[(6, 12, 7), bool] */;
    (%828,)
  };
  %829(%var_2677) /* ty=(Tensor[(6, 12, 7), bool],) */
}

def @func_3102() -> (Tensor[(630), uint64],) {
  %831 = fn () -> (Tensor[(630), uint64],) {
    %830 = @func_2724() /* ty=Tensor[(630), uint64] */;
    (%830,)
  };
  %831() /* ty=(Tensor[(630), uint64],) */
}

def @func_4699() -> Tensor[(91, 6), float32] {
  %833 = fn () -> Tensor[(91, 6), float32] {
    %832 = @func_3328() /* ty=(Tensor[(630), uint64], Tensor[(210), uint64], Tensor[(117), float64], Tensor[(91, 6), float32]) */;
    %832.3
  };
  %833() /* ty=Tensor[(91, 6), float32] */
}

def @func_2421() -> Tensor[(630), uint64] {
  %834 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
  %834.3
}

def @func_2843() -> (Tensor[(91, 6), float32],) {
  %837 = fn () -> (Tensor[(91, 6), float32],) {
    %835 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
    %836 = %835.2;
    (%836,)
  };
  %837() /* ty=(Tensor[(91, 6), float32],) */
}

def @func_1140(%var_1098: Tensor[(7, 78), float32], %var_1135: Tensor[(1, 52), float64]) -> (Tensor[(210), uint64], Tensor[(15, 3, 14), float32], Tensor[(15, 3, 14), float64], Tensor[(4, 1, 13), float64], Tensor[(1, 52), float64], Tensor[(7, 78), bool]) {
  %838 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %839 = cast(%var_1098, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %840 = %838.1;
  %841 = cast(%840, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %842 = reshape(%839, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), float32] */;
  %843 = reshape(%841, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %844 = @func_707(%842, %843) /* ty=(Tensor[(15, 3, 14), float32], Tensor[(210), uint64], Tensor[(630), uint64], Tensor[(7, 6, 13), float32], Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float32]) */;
  %845 = cast(%840, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %846 = %844.5;
  %847 = cast(%846, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %848 = cast(%846, dtype="uint64") /* ty=Tensor[(15, 3, 14), uint64] */;
  %849 = reshape(%845, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint64] */;
  %850 = reshape(%847, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %851 = reshape(%848, newshape=[15, 3, 14]) /* ty=Tensor[(15, 3, 14), uint64] */;
  %852 = @func_245(%849, %850, %851) /* ty=(Tensor[(15, 3, 14), uint64], Tensor[(15, 3, 14), float64], Tensor[(15, 3, 14), float32]) */;
  %853 = cast(%var_1135, dtype="float64") /* ty=Tensor[(1, 52), float64] */;
  %854 = reshape(%853, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), float64] */;
  %855 = @func_933(%854) /* ty=(Tensor[(4, 1, 13), float64],) */;
  %856 = cast(%var_1098, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  %857 = cosh(%856) /* ty=Tensor[(7, 78), float64] */;
  %858 = cast(%857, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %859 = sigmoid(%858) /* ty=Tensor[(7, 78), float32] */;
  %860 = cast(%var_1098, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(2), int32] */;
  %862 = cast(%859, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %864 = %852.1;
  %865 = %855.0;
  %866 = logical_or(%862, %863) /* ty=Tensor[(7, 78), bool] */;
  (%840, %846, %864, %865, %var_1135, %866)
}

def @func_1249() -> Tensor[(630), uint64] {
  %867 = @func_1050() /* ty=(Tensor[(15, 9, 10), float32], Tensor[(210), uint64], Tensor[(7, 78), float32], Tensor[(210), uint64], Tensor[(15, 3, 14), float64], Tensor[(630), uint64], Tensor[(4, 1, 13), float64], Tensor[(52), float64]) */;
  %867.5
}

def @func_2753() -> Tensor[(7, 78), int32] {
  %873 = fn () -> Tensor[(7, 78), int32] {
    %868 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
    %869 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 78), float64] */, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
    %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(2), int32] */;
    %871 = cast(%868, dtype="int32") /* ty=Tensor[(7, 78), int32] */;
    %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    maximum(%871, %872) /* ty=Tensor[(7, 78), int32] */
  };
  %873() /* ty=Tensor[(7, 78), int32] */
}

def @func_2105() -> Tensor[(7, 78), float64] {
  @func_2103() /* ty=Tensor[(7, 78), float64] */
}

def @func_5059() -> Tensor[(7, 78), float64] {
  %874 = @func_2896() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), int64]) */;
  %875 = %874.1;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
  asinh(%876) /* ty=Tensor[(7, 78), float64] */
}

def @func_5938() -> Tensor[(91, 6), float32] {
  %877 = @func_5820() /* ty=(Tensor[(91, 6), float32],) */;
  %877.0
}

def @func_3705() -> (Tensor[(630), uint64],) {
  @func_3703() /* ty=(Tensor[(630), uint64],) */
}

def @func_2725() -> Tensor[(630), uint64] {
  %879 = fn () -> Tensor[(630), uint64] {
    %878 = @func_2340() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */;
    %878.1
  };
  %879() /* ty=Tensor[(630), uint64] */
}

def @func_3159() -> (Tensor[(630), uint64],) {
  %882 = fn () -> (Tensor[(630), uint64],) {
    %880 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
    %881 = %880.0;
    (%881,)
  };
  %882() /* ty=(Tensor[(630), uint64],) */
}

def @func_2341() -> (Tensor[(630), uint64], Tensor[(630), uint64]) {
  %885 = fn () -> (Tensor[(630), uint64], Tensor[(630), uint64]) {
    %883 = @func_1249() /* ty=Tensor[(630), uint64] */;
    %884 = @func_1249() /* ty=Tensor[(630), uint64] */;
    (%883, %884)
  };
  %885() /* ty=(Tensor[(630), uint64], Tensor[(630), uint64]) */
}

def @func_3087(%var_3085: Tensor[(7, 78), int64], %var_3086: Tensor[(7, 78), float32]) -> (Tensor[(7, 78), bool], Tensor[(7, 78), bool]) {
  @func_3083(%var_3085, %var_3086) /* ty=(Tensor[(7, 78), bool], Tensor[(7, 78), bool]) */
}

def @func_5703() -> Tensor[(630), uint64] {
  @func_5701() /* ty=Tensor[(630), uint64] */
}

def @func_2504(%var_2502: Tensor[(10, 10, 14), uint8], %var_2503: Tensor[(10, 10, 14), uint8]) -> (Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) {
  %895 = fn (%var_2437: Tensor[(10, 10, 14), uint8], %var_2438: Tensor[(10, 10, 14), uint8]) -> (Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) {
    %886 = cast(%var_2438, dtype="bool") /* ty=Tensor[(10, 10, 14), bool] */;
    %887 = shape_of(%var_2437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %888 = cast(%var_2437, dtype="bool") /* ty=Tensor[(10, 10, 14), bool] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %890 = cast(%var_2437, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
    %891 = greater_equal(%888, %889) /* ty=Tensor[(10, 10, 14), bool] */;
    %892 = @func_2210() /* ty=Tensor[(630), uint64] */;
    %893 = @func_2103() /* ty=Tensor[(7, 78), float64] */;
    %894 = sin(%890) /* ty=Tensor[(10, 10, 14), float64] */;
    (%891, %892, %893, %894)
  };
  %895(%var_2502, %var_2503) /* ty=(Tensor[(10, 10, 14), bool], Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(10, 10, 14), float64]) */
}

def @func_2200() -> (Tensor[(630), uint64],) {
  %898 = fn () -> (Tensor[(630), uint64],) {
    %896 = @func_2050() /* ty=(Tensor[(630), uint64], Tensor[(546), float32], Tensor[(91, 6), float32], Tensor[(630), uint64]) */;
    %897 = %896.3;
    (%897,)
  };
  %898() /* ty=(Tensor[(630), uint64],) */
}

def @func_2797() -> (Tensor[(7, 78), int32],) {
  %900 = fn () -> (Tensor[(7, 78), int32],) {
    %899 = @func_2752() /* ty=Tensor[(7, 78), int32] */;
    (%899,)
  };
  %900() /* ty=(Tensor[(7, 78), int32],) */
}

def @func_5892() -> Tensor[(630), uint64] {
  @func_5890() /* ty=Tensor[(630), uint64] */
}

def @func_1663() -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
  %912 = fn () -> (Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) {
    %901 = @func_1473() /* ty=(Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */;
    %902 = %901.1;
    %903 = cast(%902, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %904 = cast(%902, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
    %905 = reshape(%903, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %906 = reshape(%904, newshape=[7, 78]) /* ty=Tensor[(7, 78), float32] */;
    %907 = @func_1581(%905, %906) /* ty=(Tensor[(7, 78), float32], Tensor[(7, 78), int64]) */;
    %908 = %907.0;
    %909 = cast(%908, dtype="float64") /* ty=Tensor[(7, 78), float64] */;
    %910 = @func_1343() /* ty=Tensor[(630), uint64] */;
    %911 = log(%909) /* ty=Tensor[(7, 78), float64] */;
    (%910, %902, %911)
  };
  %912() /* ty=(Tensor[(630), uint64], Tensor[(7, 78), float64], Tensor[(7, 78), float64]) */
}

def @func_5656() -> (Tensor[(630), uint64],) {
  %913 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %914 = %913.0;
  (%914,)
}

def @func_2210() -> Tensor[(630), uint64] {
  %915 = @func_2199() /* ty=(Tensor[(630), uint64],) */;
  %915.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
