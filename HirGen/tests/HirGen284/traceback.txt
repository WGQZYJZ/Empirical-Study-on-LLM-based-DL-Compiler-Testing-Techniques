==========mod==========
#[version = "0.0.5"]
def @func_6486(%var_6431: int64, %var_6432: Tensor[(7, 14, 8), int64], %var_6463: Tensor[(180), float64]) -> (Tensor[(7, 14, 8), int64], Tensor[(7, 14, 8), uint32], Tensor[(7, 14, 8), bool], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float32]) {
  %0 = cast(%var_6431, dtype="int64") /* ty=int64 */;
  %1 = cast(%var_6432, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 14, 8), int64] */, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %3 = shape_of(%var_6432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_6432, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %6 = cast(%var_6432, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
  %7 = cast(%var_6431, dtype="bool") /* ty=bool */;
  %8 = cast(%var_6463, dtype="float64") /* ty=Tensor[(180), float64] */;
  %9 = cast(%var_6463, dtype="float64") /* ty=Tensor[(180), float64] */;
  %10 = reshape(%8, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %11 = reshape(%9, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %12 = @func_798(%10, %11) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %13 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %14 = multiply(%0, %1) /* ty=Tensor[(7, 14, 8), int64] */;
  %15 = maximum(%4, %5) /* ty=Tensor[(7, 14, 8), uint32] */;
  %16 = less(%6, %7) /* ty=Tensor[(7, 14, 8), bool] */;
  %17 = %12.2;
  %18 = %13.0;
  (%14, %15, %16, %17, %var_6463, %18)
}

def @func_8455() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) {
  %19 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
  %20 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
  (%19, %20)
}

def @func_8688() -> (Tensor[(14, 5, 2), float32],) {
  %21 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %22 = %21.1;
  (%22,)
}

def @func_3496() -> Tensor[(14, 5, 2), float32] {
  @func_1964() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8151(%var_8140: Tensor[(16, 9, 10), float64]) -> (Tensor[(16, 9, 10), uint64], Tensor[(14, 5, 2), float32]) {
  %23 = @func_5009() /* ty=(Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) */;
  %24 = %23.0;
  %25 = cast(%var_8140, dtype="uint64") /* ty=Tensor[(16, 9, 10), uint64] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="uint64") /* ty=Tensor[(16, 9, 10), uint64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %29 = @func_7147() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
  %30 = bitwise_or(%27, %28) /* ty=Tensor[(16, 9, 10), uint64] */;
  %31 = %29.0;
  (%30, %31)
}

def @func_220(%var_202: Tensor[(500), float32], %var_208: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) {
  %32 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %33 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %34 = cast(%var_202, dtype="float32") /* ty=Tensor[(500), float32] */;
  %35 = reshape(%34, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %36 = @func_81(%35) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) */;
  %37 = cast(%var_208, dtype="bool") /* ty=Tensor[(500), bool] */;
  %38 = shape_of(%var_202, dtype="int32") /* ty=Tensor[(1), int32] */;
  %39 = cast(%var_202, dtype="bool") /* ty=Tensor[(500), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?), bool] */;
  %41 = %32.0;
  %42 = %33.0;
  %43 = %36.1;
  %44 = logical_and(%39, %40) /* ty=Tensor[(500), bool] */;
  (%41, %42, %43, %44)
}

def @func_2919() -> (Tensor[(14, 5, 2), float64],) {
  %45 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %46 = %45.1;
  (%46,)
}

def @func_2770(%var_2593: Tensor[(4, 7, 11), float32], %var_2670: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %47 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %48 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %49 = %48.1;
  %50 = cast(%var_2593, dtype="bool") /* ty=Tensor[(4, 7, 11), bool] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="bool") /* ty=Tensor[(4, 7, 11), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %55 = cast(%var_2593, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  %56 = reshape(%55, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %57 = @func_1169(%56) /* ty=Tensor[(4, 7, 11), float32] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(4, 7, 11), float64] */;
  %59 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_2593, dtype="float64") /* ty=Tensor[(4, 7, 11), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %63 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %64 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %65 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %66 = cast(%var_2670, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %70 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %71 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %72 = %47.1;
  %73 = greater_equal(%52, %53) /* ty=Tensor[(4, 7, 11), bool] */;
  %74 = %54.1;
  %75 = floor_mod(%60, %61) /* ty=Tensor[(4, 7, 11), float64] */;
  %76 = %62.0;
  %77 = %63.0;
  %78 = %64.0;
  %79 = bitwise_xor(%68, %69) /* ty=Tensor[(14, 5, 2), uint16] */;
  %80 = %70.1;
  %81 = %71.0;
  %82 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%72, %73, %74, %75, %76, %77, %78, %79, %80, %81, %82)
}

def @func_7954() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) {
  %83 = @func_7213() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %84 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %85 = %83.0;
  %86 = %84.0;
  (%85, %86)
}

def @func_8886() -> (Tensor[(480), float64],) {
  %87 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
  %88 = %87.5;
  (%88,)
}

def @func_1141() -> Tensor[(14, 5, 2), float32] {
  @func_541() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_81(%var_60: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) {
  %89 = cast(%var_60, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
  %90 = cast(%var_60, dtype="float64") /* ty=Tensor[(10, 10, 5), float64] */;
  %91 = cosh(%89) /* ty=Tensor[(10, 10, 5), float32] */;
  %92 = asin(%90) /* ty=Tensor[(10, 10, 5), float64] */;
  (%91, %92)
}

def @func_6125() -> Tensor[(14, 5, 2), uint16] {
  %93 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %93.0
}

def @func_2037() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
  %94 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %96 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %97 = erf(%95) /* ty=Tensor[(14, 5, 2), float32] */;
  %98 = %96.0;
  (%97, %98)
}

def @func_9983() -> Tensor[(14, 5, 2), float64] {
  %99 = @func_6242() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %99.2
}

def @func_9523(%var_9516: Tensor[(2100), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) {
  %100 = @func_4854() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %101 = cast(%var_9516, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %102 = reshape(%101, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), float64] */;
  %103 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %104 = %100.0;
  %105 = @func_8369(%102) /* ty=Tensor[(10, 14, 15), float64] */;
  %106 = %103.1;
  (%104, %105, %var_9516, %106)
}

def @func_1130(%var_1111: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), uint64],) {
  %107 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %108 = cast(%var_1111, dtype="uint64") /* ty=Tensor[(14, 5, 2), uint64] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="uint64") /* ty=Tensor[(14, 5, 2), uint64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %112 = subtract(%110, %111) /* ty=Tensor[(14, 5, 2), uint64] */;
  (%112,)
}

def @func_3931() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %113 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %114 = @func_3221() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %115 = %113.2;
  %116 = %114.0;
  (%115, %116)
}

def @func_4653() -> (Tensor[(14, 5, 2), float64],) {
  %117 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  (%117,)
}

def @func_1515() -> (Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  %118 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %119 = cast(meta[relay.Constant][1] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %120 = reshape(%119, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %121 = %118.0;
  %122 = @func_1169(%120) /* ty=Tensor[(4, 7, 11), float32] */;
  (%121, %122, meta[relay.Constant][1] /* ty=Tensor[(308), float32] */)
}

def @func_6608(%var_6593: Tensor[(12, 13, 10), float64]) -> (Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) {
  %123 = cast(%var_6593, dtype="float64") /* ty=Tensor[(12, 13, 10), float64] */;
  %124 = log(%123) /* ty=Tensor[(12, 13, 10), float64] */;
  %125 = cast(%var_6593, dtype="int8") /* ty=Tensor[(12, 13, 10), int8] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="int8") /* ty=Tensor[(12, 13, 10), int8] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %129 = subtract(%127, %128) /* ty=Tensor[(12, 13, 10), int8] */;
  %130 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
  (%129, %130)
}

def @func_2362() -> Tensor[(14, 5, 2), float32] {
  %131 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %131.3
}

def @func_4509() -> Tensor[(14, 5, 2), float32] {
  %132 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  asin(%133) /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_1338(%var_1327: float64, %var_1328: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), bool],) {
  %134 = cast(%var_1327, dtype="bool") /* ty=bool */;
  %135 = cast(%var_1328, dtype="bool") /* ty=Tensor[(16, 10, 3), bool] */;
  %136 = less(%134, %135) /* ty=Tensor[(16, 10, 3), bool] */;
  %137 = cast(%var_1327, dtype="bool") /* ty=bool */;
  %138 = cast(%136, dtype="bool") /* ty=Tensor[(16, 10, 3), bool] */;
  %139 = greater(%137, %138) /* ty=Tensor[(16, 10, 3), bool] */;
  (%139,)
}

def @func_2832(%var_2819: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), uint8]) {
  %140 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %141 = @func_1858() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %142 = %141.0;
  %143 = cast(%var_2819, dtype="uint8") /* ty=Tensor[(14, 5, 2), uint8] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="uint8") /* ty=Tensor[(14, 5, 2), uint8] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %147 = %140.0;
  %148 = multiply(%145, %146) /* ty=Tensor[(14, 5, 2), uint8] */;
  (%147, %148)
}

def @func_5174() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %149 = @func_1141() /* ty=Tensor[(14, 5, 2), float32] */;
  %150 = @func_4639() /* ty=Tensor[(14, 5, 2), float32] */;
  %151 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  (%149, %150, %151)
}

def @func_5726(%var_5660: Tensor[(16, 10, 1), float64], %var_5669: Tensor[(16, 10, 15), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 15), bool], Tensor[(16, 10, ?), float32], Tensor[(16, 10, ?), float64], Tensor[(14, 5, 2), float32]) {
  %152 = @func_3221() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %153 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %154 = cast(%var_5660, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %155 = asinh(%154) /* ty=Tensor[(16, 10, 1), float64] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %157 = rsqrt(%156) /* ty=Tensor[(16, 10, 1), float64] */;
  %158 = cast(%157, dtype="int16") /* ty=Tensor[(16, 10, 1), int16] */;
  %159 = cast(%var_5669, dtype="int16") /* ty=Tensor[(16, 10, 15), int16] */;
  %160 = logical_xor(%158, %159) /* ty=Tensor[(16, 10, 15), int16] */;
  %161 = cast(%var_5669, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %165 = cast(%var_5660, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
  %166 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%155, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %169 = cast(%155, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %170 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%157, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %173 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %174 = %152.0;
  %175 = %153.0;
  %176 = less_equal(%163, %164) /* ty=Tensor[(16, 10, 15), bool] */;
  %177 = floor_divide(%167, %168) /* ty=Tensor[(16, 10, ?), float32] */;
  %178 = maximum(%171, %172) /* ty=Tensor[(16, 10, ?), float64] */;
  %179 = %173.1;
  (%174, %175, %176, %177, %178, %179)
}

def @func_7699() -> (Tensor[(14, 5, 2), float64],) {
  %180 = @func_6078() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %181 = %180.1;
  (%181,)
}

def @func_8263() -> (Tensor[(14, 5, 2), float64],) {
  %182 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  (%182,)
}

def @func_5009() -> (Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) {
  %183 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %184 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
  %185 = @func_4685() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %186 = %183.2;
  %187 = %184.4;
  %188 = %185.0;
  (%186, %187, %188)
}

def @func_1567(%var_1558: Tensor[(14, 5, 2), uint16]) -> (Tensor[(14, 5, 2), bool],) {
  %189 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %190 = %189.0;
  %191 = cast(%var_1558, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = less(%193, %194) /* ty=Tensor[(14, 5, 2), bool] */;
  (%195,)
}

def @func_6972() -> (Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) {
  %196 = @func_3878() /* ty=(Tensor[(14, 5, 2), int64],) */;
  %197 = %196.0;
  %198 = @func_5522() /* ty=Tensor[(16, 9, 10), bool] */;
  (%197, %198)
}

def @func_2093() -> (Tensor[(14, 5, 2), float64],) {
  %199 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%199,)
}

def @func_8581() -> Tensor[(14, 5, 2), float32] {
  %200 = @func_6885() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %200.1
}

def @func_8506() -> Tensor[(14, 5, 2), float64] {
  %201 = @func_2919() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %201.0
}

def @func_10157() -> Tensor[(14, 5, 2), float32] {
  %202 = @func_3084() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %202.1
}

def @func_5749(%var_5734: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %203 = @func_1858() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %204 = cast(%var_5734, dtype="float64") /* ty=float64 */;
  %205 = cast(meta[relay.Constant][2] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %206 = reshape(%204, newshape=[]) /* ty=float64 */;
  %207 = reshape(%205, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %208 = @func_1338(%206, %207) /* ty=(Tensor[(16, 10, 3), bool],) */;
  %209 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %210 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %211 = %203.1;
  %212 = %208.0;
  %213 = %209.1;
  %214 = %210.1;
  (%211, %212, %var_5734, meta[relay.Constant][2] /* ty=Tensor[(480), float64] */, %213, %214)
}

def @func_7507(%var_7492: Tensor[(4, 3, 4), float64]) -> (Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %215 = cast(%var_7492, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
  %216 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %217 = @func_6885() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %218 = log2(%215) /* ty=Tensor[(4, 3, 4), float64] */;
  %219 = %216.0;
  %220 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %221 = %217.1;
  (%218, %219, %220, %221)
}

def @func_9827(%var_9789: Tensor[(2100), float64], %var_9814: Tensor[(1690, 1), uint64]) -> (Tensor[(3, 2, 5), int32], Tensor[(14, 5, 2), float64], Tensor[(2100), float64], Tensor[(1690, ?), uint16]) {
  %222 = @func_7088() /* ty=(Tensor[(3, 2, 5), int32],) */;
  %223 = cast(%var_9789, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %224 = reshape(%223, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %225 = @func_9523(%224) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) */;
  %226 = cast(%var_9814, dtype="uint64") /* ty=Tensor[(1690, 1), uint64] */;
  %227 = cast(%var_9814, dtype="uint64") /* ty=Tensor[(1690, 1), uint64] */;
  %228 = reshape(%226, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), uint64] */;
  %229 = reshape(%227, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), uint64] */;
  %230 = @func_5879(%228, %229) /* ty=(Tensor[(13, 10, 13), uint64],) */;
  %231 = %230.0;
  %232 = cast(%231, dtype="uint16") /* ty=Tensor[(13, 10, 13), uint16] */;
  %233 = shape_of(%var_9814, dtype="int32") /* ty=Tensor[(2), int32] */;
  %234 = cast(%var_9814, dtype="uint16") /* ty=Tensor[(1690, 1), uint16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %236 = %222.0;
  %237 = %225.3;
  %238 = bitwise_xor(%234, %235) /* ty=Tensor[(1690, ?), uint16] */;
  (%236, %237, %var_9789, %238)
}

def @func_7969() -> Tensor[(14, 5, 2), uint16] {
  %239 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %239.0
}

def @func_8537(%var_8514: Tensor[(7, 6, 2), uint16]) -> (Tensor[(7, 6, 2), uint16], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %240 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 6, 2), uint16] */;
  %241 = shape_of(%var_8514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_8514, dtype="uint16") /* ty=Tensor[(7, 6, 2), uint16] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %244 = @func_3084() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %245 = @func_3355() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %246 = bitwise_or(%242, %243) /* ty=Tensor[(7, 6, 2), uint16] */;
  %247 = %244.0;
  %248 = %245.1;
  (%246, %247, %248)
}

def @func_3221() -> (Tensor[(14, 5, 2), float32],) {
  %249 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
  (%249,)
}

def @func_3355() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %250 = @func_2093() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %251 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %252 = %250.0;
  %253 = %251.1;
  (%252, %253)
}

def @func_2319() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) {
  %254 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %255 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %256 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %257 = %256.1;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  %259 = %254.0;
  %260 = %255.1;
  %261 = sin(%258) /* ty=Tensor[(4, 7, 11), float32] */;
  (%259, %260, %261)
}

def @func_6919() -> (Tensor[(14, 5, 2), float32],) {
  %262 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %263 = %262.1;
  (%263,)
}

def @func_7213() -> (Tensor[(14, 5, 2), float64],) {
  %264 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%264,)
}

def @func_6345() -> (Tensor[(16, 9, 10), bool],) {
  %265 = @func_5522() /* ty=Tensor[(16, 9, 10), bool] */;
  (%265,)
}

def @func_6078() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %266 = @func_4653() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %267 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %268 = %266.0;
  %269 = %267.0;
  (%268, %269)
}

def @func_1236() -> (Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %270 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %271 = %270.0;
  %272 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 2), float32] */, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %276 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %277 = add(%274, %275) /* ty=Tensor[(14, 5, 2), int64] */;
  %278 = %276.0;
  %279 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%277, %278, %279)
}

def @func_8012() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(25, 6), float64]) {
  %280 = cast(meta[relay.Constant][5] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %281 = reshape(%280, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %282 = @func_3413(%281) /* ty=(Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) */;
  %283 = @func_5550() /* ty=Tensor[(14, 5, 2), float64] */;
  %284 = %282.1;
  (%283, %284, meta[relay.Constant][5] /* ty=Tensor[(25, 6), float64] */)
}

def @func_576() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %285 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %286 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %287 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %288 = %285.0;
  %289 = %286.0;
  (%287, %288, %289)
}

def @func_3878() -> (Tensor[(14, 5, 2), int64],) {
  %290 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %291 = %290.0;
  (%291,)
}

def @func_3048(%var_3028: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %292 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  %293 = cast(%var_3028, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %297 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %298 = mod(%295, %296) /* ty=Tensor[(14, 5, 2), float32] */;
  %299 = %297.2;
  (%298, %299)
}

def @func_9667() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64]) {
  %300 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %301 = @func_6972() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) */;
  %302 = %300.0;
  %303 = %301.0;
  (%302, %303)
}

def @func_1772() -> (Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %304 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %305 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %306 = %304.1;
  %307 = %305.0;
  (%306, %307)
}

def @func_3169() -> (Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) {
  %308 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %309 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %310 = reshape(%308, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %311 = reshape(%309, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %312 = @func_798(%310, %311) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %313 = %312.1;
  %314 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), float64] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %318 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %320 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %321 = cast(9.15759f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %322 = cast(meta[relay.Constant][7] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %323 = reshape(%321, newshape=[]) /* ty=float64 */;
  %324 = reshape(%322, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %325 = @func_1338(%323, %324) /* ty=(Tensor[(16, 10, 3), bool],) */;
  %326 = bitwise_xor(%316, %317) /* ty=Tensor[(9, 5, 4), uint32] */;
  %327 = log10(%319) /* ty=Tensor[(14, 5, 2), float64] */;
  %328 = %320.2;
  %329 = %325.0;
  (%326, %327, %328, %329, 9.15759f64 /* ty=float64 */, meta[relay.Constant][7] /* ty=Tensor[(480), float64] */)
}

def @func_8238(%var_8207: Tensor[(14, 3, 14), float64], %var_8226: Tensor[(150), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(15, 2, 5), float64], Tensor[(150), float64]) {
  %330 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %331 = shape_of(%var_8207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_8207, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %334 = cast(%var_8226, dtype="float64") /* ty=Tensor[(150), float64] */;
  %335 = reshape(%334, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %336 = @func_3413(%335) /* ty=(Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) */;
  %337 = floor_mod(%332, %333) /* ty=Tensor[(14, 3, 14), float64] */;
  %338 = %336.0;
  (%337, %338, %var_8226)
}

def @func_5798(%var_5790: Tensor[(16, 13, 13), float64], %var_5794: Tensor[(16, 13, 13), float64]) -> Tensor[(16, 13, 13), uint16] {
  %339 = cast(%var_5790, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
  %340 = atanh(%339) /* ty=Tensor[(16, 13, 13), float64] */;
  %341 = cast(%var_5794, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%343, %344) /* ty=Tensor[(16, 13, 13), uint16] */
}

def @func_259() -> (Tensor[(14, 5, 2), float32],) {
  %345 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %346 = %345.0;
  (%346,)
}

def @func_1012() -> Tensor[(14, 5, 2), bool] {
  %347 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %348 = %347.0;
  %349 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 5, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%351, %352) /* ty=Tensor[(14, 5, 2), bool] */
}

def @func_1284() -> (Tensor[(14, 5, 2), uint16],) {
  %353 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %354 = %353.1;
  %355 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 5, 2), float32] */, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %359 = left_shift(%357, %358) /* ty=Tensor[(14, 5, 2), uint16] */;
  (%359,)
}

def @func_5134(%var_5096: Tensor[(3, 36), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) {
  %360 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %361 = cast(%var_5096, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %362 = cast(%var_5096, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %363 = reshape(%361, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %364 = reshape(%362, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %365 = @func_4140(%363, %364) /* ty=Tensor[(3, 12, 3), float64] */;
  %366 = cast(%var_5096, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %370 = cast(%365, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %371 = shape_of(%var_5096, dtype="int32") /* ty=Tensor[(2), int32] */;
  %372 = cast(%var_5096, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %374 = @func_4509() /* ty=Tensor[(14, 5, 2), float32] */;
  %375 = %360.0;
  %376 = floor_mod(%368, %369) /* ty=Tensor[(3, 12, 3), float32] */;
  %377 = less_equal(%372, %373) /* ty=Tensor[(3, 36), bool] */;
  %378 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  (%374, %375, %376, %377, %378)
}

def @func_7037() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %379 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %380 = @func_6919() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %381 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %382 = %379.0;
  %383 = %380.0;
  %384 = %381.0;
  (%382, %383, %384)
}

def @func_9508() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool], Tensor[(48), float64], Tensor[(14, 5, 2), float32]) {
  %385 = @func_5441() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %386 = @func_2919() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %387 = cast(meta[relay.Constant][11] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %388 = reshape(%387, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float64] */;
  %389 = @func_7507(%388) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
  %390 = @func_7147() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
  %391 = %385.0;
  %392 = %386.0;
  %393 = %389.2;
  %394 = %390.1;
  (%391, %392, %393, meta[relay.Constant][11] /* ty=Tensor[(48), float64] */, %394)
}

def @func_9613(%var_9608: Tensor[(5, 9, 7), int32]) -> Tensor[(5, 9, 7), int32] {
  %395 = cast(%var_9608, dtype="int32") /* ty=Tensor[(5, 9, 7), int32] */;
  %396 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(5, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(5, 9, 7), int32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%397, %398) /* ty=Tensor[(5, 9, 7), int32] */
}

def @func_5311() -> Tensor[(14, 5, 2), float32] {
  @func_1141() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_6885() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %399 = @func_5236() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %400 = @func_4639() /* ty=Tensor[(14, 5, 2), float32] */;
  %401 = %399.1;
  (%400, %401)
}

def @func_10008() -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), bool]) {
  %402 = @func_7549() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %403 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %404 = %402.0;
  %405 = %403.0;
  (%404, %405)
}

def @func_10113() -> (Tensor[(16, 9, 10), float32], Tensor[(3, 2, 5), int32]) {
  %406 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %407 = %406.0;
  %408 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 9, 10), float64] */, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%407, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %412 = @func_7088() /* ty=(Tensor[(3, 2, 5), int32],) */;
  %413 = floor_mod(%410, %411) /* ty=Tensor[(16, 9, 10), float32] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_6693() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) {
  %415 = @func_4854() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %416 = cast(meta[relay.Constant][14] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %417 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  %418 = cast(%417, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %419 = reshape(%416, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %420 = reshape(%418, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %421 = @func_2770(%419, %420) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %422 = %415.0;
  %423 = %421.1;
  (%417, %422, %423, meta[relay.Constant][14] /* ty=Tensor[(308), float32] */)
}

def @func_7147() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %424 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %425 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %426 = %425.1;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %428 = reshape(%427, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %429 = @func_6771(%428) /* ty=(Tensor[(14, 5, 2), bool],) */;
  %430 = %424.1;
  %431 = %429.0;
  %432 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  (%430, %426, %431, %432)
}

def @func_3571() -> Tensor[(14, 5, 2), float64] {
  %433 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %433.0
}

def @func_5059() -> (Tensor[(14, 5, 2), float32],) {
  %434 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  (%434,)
}

def @func_798(%var_770: Tensor[(9, 5, 4), float64], %var_771: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) {
  %435 = cast(%var_771, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
  %436 = shape_of(%var_770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_770, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %439 = cast(%var_770, dtype="int16") /* ty=Tensor[(9, 5, 4), int16] */;
  %440 = shape_of(%var_771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_771, dtype="int16") /* ty=Tensor[(9, 5, 4), int16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %443 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %444 = divide(%437, %438) /* ty=Tensor[(9, 5, 4), float64] */;
  %445 = left_shift(%441, %442) /* ty=Tensor[(9, 5, 4), int16] */;
  %446 = %443.0;
  (%444, %445, %446)
}

def @func_2871() -> (Tensor[(14, 5, 2), bool],) {
  %447 = @func_2362() /* ty=Tensor[(14, 5, 2), float32] */;
  %448 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %449 = %448.0;
  %450 = cast(%449, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %451 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%447, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = greater_equal(%452, %453) /* ty=Tensor[(14, 5, 2), bool] */;
  (%454,)
}

def @func_5323() -> (Tensor[(14, 5, 2), float32],) {
  %455 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %456 = %455.0;
  (%456,)
}

def @func_9580(%var_9544: int32, %var_9545: Tensor[(1, 15, 14), int32]) -> (Tensor[(14, 5, 2), bool], Tensor[(?, 15, 14), int32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float64]) {
  %457 = cast(%var_9544, dtype="int32") /* ty=int32 */;
  %458 = cast(%var_9545, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %459 = add(%457, %458) /* ty=Tensor[(1, 15, 14), int32] */;
  %460 = cast(%459, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %461 = shape_of(%var_9545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_9545, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %464 = cast(meta[relay.Constant][15] /* ty=Tensor[(2704), float64] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %465 = cast(meta[relay.Constant][15] /* ty=Tensor[(2704), float64] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %466 = reshape(%464, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %467 = reshape(%465, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %468 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %469 = minimum(%462, %463) /* ty=Tensor[(?, 15, 14), int32] */;
  %470 = @func_5798(%466, %467) /* ty=Tensor[(16, 13, 13), uint16] */;
  (%468, %469, %470, meta[relay.Constant][15] /* ty=Tensor[(2704), float64] */)
}

def @func_8664() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) {
  %471 = @func_8280() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %472 = @func_7394() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %473 = cast(meta[relay.Constant][16] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %474 = reshape(%473, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %475 = @func_4897(%474) /* ty=(Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) */;
  %476 = %471.0;
  %477 = %472.0;
  %478 = %475.2;
  (%476, %477, %478, meta[relay.Constant][16] /* ty=Tensor[(500), float32] */)
}

def @func_2519(%var_2506: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(500), bool], Tensor[(500), float64], Tensor[(14, 5, 2), float64]) {
  %479 = cast(%var_2506, dtype="float32") /* ty=Tensor[(500), float32] */;
  %480 = cast(%var_2506, dtype="float32") /* ty=Tensor[(500), float32] */;
  %481 = reshape(%479, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %482 = reshape(%480, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %483 = @func_220(%481, %482) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
  %484 = cast(%var_2506, dtype="float64") /* ty=Tensor[(500), float64] */;
  %485 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  %486 = %483.3;
  %487 = log(%484) /* ty=Tensor[(500), float64] */;
  %488 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%485, %486, %487, %488)
}

def @func_6848() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %489 = @func_4596() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %490 = @func_6078() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %491 = @func_2319() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) */;
  %492 = %489.1;
  %493 = %490.0;
  %494 = %491.0;
  %495 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %496 = @func_3571() /* ty=Tensor[(14, 5, 2), float64] */;
  (%492, %493, %494, %495, %496)
}

def @func_762(%var_739: Tensor[(1, 500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) {
  %497 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %498 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %499 = cast(%var_739, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
  %500 = cast(%var_739, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
  %501 = reshape(%499, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %502 = reshape(%500, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %503 = @func_220(%501, %502) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
  %504 = %503.2;
  %505 = cast(%var_739, dtype="bool") /* ty=Tensor[(1, 500), bool] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = %497.1;
  %510 = %498.0;
  %511 = greater(%507, %508) /* ty=Tensor[(10, 10, 5), bool] */;
  (%509, %510, %511)
}

def @func_1964() -> Tensor[(14, 5, 2), float32] {
  %512 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %512.1
}

def @func_541() -> Tensor[(14, 5, 2), float32] {
  %513 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %513.0
}

def @func_5035(%var_5020: Tensor[(6, 13, 10), float64]) -> (Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) {
  %514 = cast(-2.23143f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %515 = cast(%var_5020, dtype="float64") /* ty=Tensor[(6, 13, 10), float64] */;
  %516 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %517 = mod(%514, %515) /* ty=Tensor[(6, 13, 10), float64] */;
  %518 = %516.1;
  (%517, %518)
}

def @func_6151(%var_6138: Tensor[(7, 5, 8), float64]) -> (Tensor[(7, 5, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 5, 8), float64]) {
  %519 = cast(%var_6138, dtype="float64") /* ty=Tensor[(7, 5, 8), float64] */;
  %520 = cast(%var_6138, dtype="float64") /* ty=Tensor[(7, 5, 8), float64] */;
  %521 = cosh(%519) /* ty=Tensor[(7, 5, 8), float64] */;
  %522 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
  %523 = acos(%520) /* ty=Tensor[(7, 5, 8), float64] */;
  (%521, %522, %523)
}

def @func_3858() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
  %524 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %525 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %526 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %527 = %524.0;
  %528 = %525.1;
  %529 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
  %530 = %526.0;
  (%527, %528, %529, %530)
}

def @func_4475(%var_4464: Tensor[(12, 9, 5), float32], %var_4465: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 9, 5), float64], Tensor[(14, 5, 2), int64]) {
  %531 = cast(%var_4465, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %532 = shape_of(%var_4464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_4464, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %535 = divide(%533, %534) /* ty=Tensor[(12, 9, 5), float32] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %537 = @func_4095() /* ty=(Tensor[(14, 9, 5), float64],) */;
  %538 = @func_3878() /* ty=(Tensor[(14, 5, 2), int64],) */;
  %539 = asin(%536) /* ty=Tensor[(12, 9, 5), float64] */;
  %540 = %537.0;
  %541 = %538.0;
  (%539, %540, %541)
}

def @func_3297() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %542 = @func_2319() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) */;
  %543 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %544 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %545 = %542.1;
  %546 = %543.1;
  (%544, %545, %546)
}

def @main() -> Tensor[(500), float64] {
  %547 = @func_8664() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) */;
  %548 = %547.2;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(500), float64] */;
  %550 = asin(%549) /* ty=Tensor[(500), float64] */;
  %551 = cast(%548, dtype="float64") /* ty=Tensor[(500), float64] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(1), int32] */;
  %553 = cast(%550, dtype="float64") /* ty=Tensor[(500), float64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?), float64] */;
  power(%553, %554) /* ty=Tensor[(500), float64] */
}

def @func_4155() -> (Tensor[(14, 5, 2), float64],) {
  %555 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %556 = %555.1;
  (%556,)
}

def @func_9469() -> Tensor[(14, 5, 2), float32] {
  %557 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %557.3
}

def @func_5286() -> Tensor[(14, 5, 2), float32] {
  @func_541() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_6307() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint64], Tensor[(4, 7, 11), float32]) {
  %558 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %559 = @func_3698() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %560 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %561 = %558.0;
  %562 = %559.1;
  %563 = %560.1;
  (%561, %562, %563)
}

def @func_5368() -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %564 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %565 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
  (%564, %565)
}

def @func_486() -> (Tensor[(14, 5, 2), float32],) {
  %566 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %567 = %566.0;
  (%567,)
}

def @func_1426(%var_1348: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) {
  %568 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %569 = cast(%var_1348, dtype="int32") /* ty=Tensor[(14, 5, 2), int32] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="int32") /* ty=Tensor[(14, 5, 2), int32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %573 = cast(%var_1348, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %574 = acos(%573) /* ty=Tensor[(14, 5, 2), float64] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %576 = reshape(%575, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %577 = @func_1130(%576) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %578 = cast(%574, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %579 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 308), float32] */, dtype="float32") /* ty=Tensor[(1, 308), float32] */;
  %580 = reshape(%579, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %581 = @func_1302(%580) /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %582 = cast(meta[relay.Constant][18] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %583 = cast(meta[relay.Constant][18] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %584 = reshape(%582, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %585 = reshape(%583, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %586 = @func_220(%584, %585) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
  %587 = right_shift(%571, %572) /* ty=Tensor[(14, 5, 2), int32] */;
  %588 = %577.0;
  %589 = log2(%578) /* ty=Tensor[(14, 5, 2), float32] */;
  %590 = %581.1;
  %591 = %586.2;
  (%587, %588, %589, %590, meta[relay.Constant][17] /* ty=Tensor[(1, 308), float32] */, %591, meta[relay.Constant][18] /* ty=Tensor[(500), float32] */)
}

def @func_3084() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %592 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %593 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %594 = %592.1;
  %595 = %593.0;
  (%594, %595)
}

def @func_4095() -> (Tensor[(14, 9, 5), float64],) {
  %596 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
  %597 = sigmoid(%596) /* ty=Tensor[(14, 9, 5), float64] */;
  (%597,)
}

def @func_1458() -> (Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) {
  %598 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %599 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %600 = asin(%598) /* ty=Tensor[(16, 9, 10), float64] */;
  %601 = %599.0;
  (%600, %601)
}

def @func_8823() -> Tensor[(14, 5, 2), float64] {
  %602 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %602.0
}

def @func_944() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %603 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %604 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %606 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %607 = %603.0;
  %608 = atanh(%605) /* ty=Tensor[(14, 5, 2), float32] */;
  %609 = %606.0;
  (%607, %608, %609)
}

def @func_7667() -> Tensor[(308), float32] {
  %610 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %610.2
}

def @func_7469(%var_7417: Tensor[(5, 1, 13), float32], %var_7463: Tensor[(5, 2, 13), bool]) -> (Tensor[(14, 5, 2), uint16], Tensor[(12, 130), float64], Tensor[(16, 9, 10), bool], Tensor[(5, ?, 13), float64], Tensor[(14, 5, 2), float32], Tensor[(5, 2, 13), int8], Tensor[(1, 308), float32]) {
  %611 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 130), float64] */, dtype="float64") /* ty=Tensor[(12, 130), float64] */;
  %612 = reshape(%611, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float64] */;
  %613 = @func_6608(%612) /* ty=(Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) */;
  %614 = @func_6345() /* ty=(Tensor[(16, 9, 10), bool],) */;
  %615 = cast(%var_7417, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %616 = sin(%615) /* ty=Tensor[(5, 1, 13), float32] */;
  %617 = cast(%var_7417, dtype="int8") /* ty=Tensor[(5, 1, 13), int8] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="int8") /* ty=Tensor[(5, 1, 13), int8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %621 = multiply(%619, %620) /* ty=Tensor[(5, ?, 13), int8] */;
  %622 = cast(%621, dtype="float64") /* ty=Tensor[(5, ?, 13), float64] */;
  %623 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%616, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %626 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %627 = cast(%616, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
  %628 = sqrt(%627) /* ty=Tensor[(5, 1, 13), float64] */;
  %629 = cast(%628, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
  %630 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%616, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = greater_equal(%631, %632) /* ty=Tensor[(5, ?, 13), bool] */;
  %634 = cast(%633, dtype="int8") /* ty=Tensor[(5, ?, 13), int8] */;
  %635 = cast(%var_7463, dtype="int8") /* ty=Tensor[(5, 2, 13), int8] */;
  %636 = %626.2;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %638 = reshape(%637, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %639 = @func_1426(%638) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
  %640 = %613.1;
  %641 = %614.0;
  %642 = mod(%624, %625) /* ty=Tensor[(5, ?, 13), float64] */;
  %643 = bitwise_xor(%634, %635) /* ty=Tensor[(5, 2, 13), int8] */;
  %644 = %639.4;
  (%640, meta[relay.Constant][21] /* ty=Tensor[(12, 130), float64] */, %641, %642, %636, %643, %644)
}

def @func_9735() -> Tensor[(14, 5, 2), float64] {
  %645 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %645.0
}

def @func_3698() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %646 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %647 = %646.1;
  %648 = cast(%647, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %649 = reshape(%648, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %650 = @func_1130(%649) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %651 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %652 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %653 = reshape(%651, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %654 = reshape(%652, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %655 = @func_798(%653, %654) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %656 = @func_2093() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %657 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %658 = %650.0;
  %659 = %655.2;
  %660 = %656.0;
  %661 = %657.1;
  (%647, %658, %659, meta[relay.Constant][22] /* ty=Tensor[(180), float64] */, %660, %661)
}

def @func_5632() -> Tensor[(14, 5, 2), float64] {
  %662 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %662.1
}

def @func_1595() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %663 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %664 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %665 = %663.0;
  %666 = %664.1;
  (%665, %666)
}

def @func_5916() -> (Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) {
  %667 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %668 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 500), float32] */, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
  %669 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 500), float32] */, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
  %670 = reshape(%668, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %671 = reshape(%669, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %672 = @func_220(%670, %671) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
  %673 = %667.0;
  %674 = %672.3;
  (%673, %674, meta[relay.Constant][23] /* ty=Tensor[(1, 500), float32] */)
}

def @func_167() -> (Tensor[(14, 5, 2), float32],) {
  %675 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %676 = acosh(%675) /* ty=Tensor[(14, 5, 2), float32] */;
  (%676,)
}

def @func_5879(%var_5842: Tensor[(13, 10, 13), uint64], %var_5843: Tensor[(13, 10, 13), uint64]) -> (Tensor[(13, 10, 13), uint64],) {
  %677 = cast(%var_5843, dtype="uint64") /* ty=Tensor[(13, 10, 13), uint64] */;
  %678 = shape_of(%var_5842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_5842, dtype="uint64") /* ty=Tensor[(13, 10, 13), uint64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %681 = left_shift(%679, %680) /* ty=Tensor[(13, 10, 13), uint64] */;
  (%681,)
}

def @func_8086() -> Tensor[(14, 5, 2), float32] {
  %682 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %682.0
}

def @func_1502() -> (Tensor[(14, 5, 2), float32],) {
  %683 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  %684 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 5, 2), float64] */, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %688 = bitwise_or(%686, %687) /* ty=Tensor[(14, 5, 2), int64] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %690 = sigmoid(%689) /* ty=Tensor[(14, 5, 2), float32] */;
  (%690,)
}

def @func_8854(%var_8848: uint64, %var_8849: Tensor[(3, 13, 13), uint64]) -> (Tensor[(3, 13, 13), uint64],) {
  %691 = cast(%var_8848, dtype="uint64") /* ty=uint64 */;
  %692 = cast(%var_8849, dtype="uint64") /* ty=Tensor[(3, 13, 13), uint64] */;
  %693 = add(%691, %692) /* ty=Tensor[(3, 13, 13), uint64] */;
  (%693,)
}

def @func_8951() -> (Tensor[(14, 5, 2), float64],) {
  %694 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%694,)
}

def @func_8438() -> Tensor[(14, 5, 2), float64] {
  %695 = @func_5822() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  sqrt(%697) /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_4314() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %698 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %699 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %700 = %698.2;
  %701 = %699.0;
  (%700, %701)
}

def @func_8252(%var_8244: uint64) -> (Tensor[(15, 10, 15), bool],) {
  %702 = cast(%var_8244, dtype="bool") /* ty=bool */;
  %703 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 15), uint64] */, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %704 = less(%702, %703) /* ty=Tensor[(15, 10, 15), bool] */;
  (%704,)
}

def @func_5934() -> Tensor[(14, 5, 2), float64] {
  %705 = @func_4155() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %705.0
}

def @func_4120() -> (Tensor[(14, 5, 2), float64],) {
  %706 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %707 = %706.1;
  (%707,)
}

def @func_6869() -> Tensor[(16, 9, 10), bool] {
  %708 = @func_6345() /* ty=(Tensor[(16, 9, 10), bool],) */;
  %708.0
}

def @func_4897(%var_4894: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) {
  %709 = cast(%var_4894, dtype="float32") /* ty=Tensor[(500), float32] */;
  %710 = reshape(%709, newshape=[1, 500]) /* ty=Tensor[(1, 500), float32] */;
  %711 = @func_762(%710) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) */;
  %712 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  %713 = %711.2;
  (%712, %713, %var_4894)
}

def @func_9454(%var_9445: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], float64, Tensor[(14, 5, 2), float64]) {
  %714 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %715 = cast(%var_9445, dtype="float64") /* ty=float64 */;
  %716 = reshape(%715, newshape=[]) /* ty=float64 */;
  %717 = @func_5749(%716) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %718 = @func_8951() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %719 = %714.2;
  %720 = @func_4509() /* ty=Tensor[(14, 5, 2), float32] */;
  %721 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  %722 = %717.5;
  %723 = %718.0;
  (%719, %720, %721, %722, %var_9445, %723)
}

def @func_5822() -> (Tensor[(14, 5, 2), float64],) {
  %724 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %725 = %724.1;
  (%725,)
}

def @func_4639() -> Tensor[(14, 5, 2), float32] {
  @func_3496() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_7251(%var_7241: Tensor[(10, 1, 15), uint16], %var_7242: Tensor[(10, 15, 15), uint16]) -> (Tensor[(10, 15, 15), bool], Tensor[(14, 5, 2), float64]) {
  %726 = cast(%var_7241, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %727 = cast(%var_7242, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %728 = greater(%726, %727) /* ty=Tensor[(10, 15, 15), bool] */;
  %729 = @func_3571() /* ty=Tensor[(14, 5, 2), float64] */;
  (%728, %729)
}

def @func_8369(%var_8357: Tensor[(10, 14, 15), float64]) -> Tensor[(10, 14, 15), float64] {
  %730 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %731 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%var_8357, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%732, %733) /* ty=Tensor[(10, 14, 15), float64] */
}

def @func_9974() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(18, 6), float64]) {
  %734 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %735 = cast(meta[relay.Constant][28] /* ty=Tensor[(18, 6), float64] */, dtype="float64") /* ty=Tensor[(18, 6), float64] */;
  %736 = reshape(%735, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %737 = @func_5134(%736) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) */;
  %738 = %734.0;
  %739 = %737.4;
  (%738, %739, meta[relay.Constant][28] /* ty=Tensor[(18, 6), float64] */)
}

def @func_290() -> (Tensor[(14, 5, 2), float64],) {
  %740 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %743 = rsqrt(%742) /* ty=Tensor[(14, 5, 2), float64] */;
  (%743,)
}

def @func_7680() -> Tensor[(14, 5, 2), float32] {
  %744 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %744.1
}

def @func_3470() -> Tensor[(14, 5, 2), float64] {
  %745 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %745.1
}

def @func_8937() -> Tensor[(14, 5, 2), float32] {
  %746 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %746.0
}

def @func_9539(%var_9532: Tensor[(2704), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float32]) {
  %747 = cast(%var_9532, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %748 = cast(%var_9532, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %749 = reshape(%747, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %750 = reshape(%748, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %751 = cast(%var_9532, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %752 = @func_2362() /* ty=Tensor[(14, 5, 2), float32] */;
  %753 = @func_5798(%749, %750) /* ty=Tensor[(16, 13, 13), uint16] */;
  %754 = tan(%751) /* ty=Tensor[(2704), float32] */;
  (%752, %753, %754)
}

def @func_668() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %755 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %756 = %755.0;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %758 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %759 = atan(%757) /* ty=Tensor[(14, 5, 2), float64] */;
  %760 = %758.1;
  (%759, %760)
}

def @func_8804() -> Tensor[(14, 5, 2), uint16] {
  %761 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %761.0
}

def @func_8404(%var_8388: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %762 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %763 = shape_of(%var_8388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_8388, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %766 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %767 = %766.0;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %769 = reshape(%768, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float64] */;
  %770 = @func_3048(%769) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %771 = floor_divide(%764, %765) /* ty=Tensor[(9, 3, 8), float64] */;
  %772 = %770.0;
  (%771, %767, %772)
}

def @func_639() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %773 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %774 = %773.1;
  %775 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  (%774, %775)
}

def @func_2400() -> (Tensor[(14, 5, 2), float32],) {
  %776 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %777 = %776.1;
  (%777,)
}

def @func_7591() -> Tensor[(14, 5, 2), float32] {
  %778 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %778.0
}

def @func_10219() -> (Tensor[(14, 5, 2), float64],) {
  %779 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %780 = %779.2;
  (%780,)
}

def @func_1858() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %781 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %782 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %785 = %781.0;
  %786 = log(%784) /* ty=Tensor[(14, 5, 2), float32] */;
  (%785, %786)
}

def @func_1793() -> (Tensor[(14, 5, 2), bool],) {
  %787 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  (%787,)
}

def @func_4596() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %788 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %789 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %790 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %791 = %788.0;
  %792 = %789.0;
  %793 = %790.0;
  (%791, %792, %793)
}

def @func_9775() -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %794 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %795 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %796 = %794.3;
  %797 = @func_9735() /* ty=Tensor[(14, 5, 2), float64] */;
  %798 = %795.0;
  (%796, %797, %798)
}

def @func_7549() -> (Tensor[(14, 5, 2), uint16],) {
  %799 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
  (%799,)
}

def @func_3207() -> (Tensor[(14, 5, 2), float32],) {
  %800 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %801 = %800.0;
  (%801,)
}

def @func_9892() -> Tensor[(14, 5, 2), float32] {
  %802 = @func_8455() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) */;
  %802.0
}

def @func_4685() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %803 = @func_4155() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %804 = @func_3698() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %805 = %804.1;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %807 = %803.0;
  %808 = asinh(%806) /* ty=Tensor[(14, 5, 2), float32] */;
  (%807, %808)
}

def @func_7885() -> Tensor[(14, 5, 2), bool] {
  %809 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %809.0
}

def @func_9214() -> (Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) {
  %810 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %811 = reshape(%810, newshape=[]) /* ty=uint64 */;
  %812 = @func_8252(%811) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %813 = @func_8628() /* ty=Tensor[(14, 5, 2), float32] */;
  %814 = cast(%813, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %815 = reshape(%814, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %816 = @func_1130(%815) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %817 = %812.0;
  %818 = %816.0;
  (%813, %817, meta[relay.Constant][30] /* ty=uint64 */, %818)
}

def @func_9856() -> Tensor[(15, 10, 15), bool] {
  %819 = @func_9214() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) */;
  %819.1
}

def @func_9134(%var_9072: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), bool], Tensor[(10, 10, 5), float64]) {
  %820 = cast(%var_9072, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %821 = @func_7954() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) */;
  %822 = cast(%var_9072, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %823 = @func_2871() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %824 = %823.0;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %826 = reshape(%825, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %827 = @func_1426(%826) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
  %828 = sinh(%820) /* ty=Tensor[(7, 14, 4), float32] */;
  %829 = %821.0;
  %830 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
  %831 = sigmoid(%822) /* ty=Tensor[(7, 14, 4), float32] */;
  %832 = %827.5;
  (%828, %829, %830, %831, %824, %832)
}

def @func_4140(%var_4130: Tensor[(3, 12, 3), float64], %var_4131: Tensor[(3, 12, 3), float64]) -> Tensor[(3, 12, 3), float64] {
  %833 = cast(%var_4131, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %834 = shape_of(%var_4130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%var_4130, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%835, %836) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_8280() -> (Tensor[(14, 5, 2), float32],) {
  %837 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %838 = %837.0;
  (%838,)
}

def @func_9303() -> (Tensor[(14, 5, 2), float64],) {
  %839 = @func_5009() /* ty=(Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) */;
  %840 = %839.2;
  (%840,)
}

def @func_1302(%var_1299: Tensor[(308), float32]) -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  %841 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %842 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %843 = cast(%var_1299, dtype="float32") /* ty=Tensor[(308), float32] */;
  %844 = reshape(%843, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %845 = %841.0;
  %846 = %842.0;
  %847 = @func_1169(%844) /* ty=Tensor[(4, 7, 11), float32] */;
  (%845, %846, %847, %var_1299)
}

def @func_5236() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %848 = @func_5174() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %849 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  %850 = %848.1;
  (%849, %850)
}

def @func_9324() -> (Tensor[(14, 5, 2), float32],) {
  %851 = @func_7591() /* ty=Tensor[(14, 5, 2), float32] */;
  (%851,)
}

def @func_6985() -> (Tensor[(14, 5, 2), float64],) {
  %852 = @func_5550() /* ty=Tensor[(14, 5, 2), float64] */;
  (%852,)
}

def @func_5550() -> Tensor[(14, 5, 2), float64] {
  %853 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %853.0
}

def @func_1199() -> Tensor[(14, 5, 2), float64] {
  %854 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %854.0
}

def @func_9180() -> (Tensor[(1, 500), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %855 = @func_8833() /* ty=(Tensor[(1, 500), float32],) */;
  %856 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %857 = %855.0;
  %858 = %856.0;
  %859 = @func_5286() /* ty=Tensor[(14, 5, 2), float32] */;
  (%857, %858, %859)
}

def @func_4283() -> (Tensor[(4, 12, 16), int16], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %860 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int16") /* ty=Tensor[(4, 12, 16), int16] */;
  %861 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int16") /* ty=Tensor[(4, 12, 16), int16] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %864 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %867 = reshape(%866, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %868 = @func_1426(%867) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
  %869 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %870 = minimum(%862, %863) /* ty=Tensor[(4, 12, 16), int16] */;
  %871 = %868.5;
  %872 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  %873 = %869.0;
  (%870, %865, %871, %872, %873)
}

def @func_4438(%var_4409: Tensor[(54, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(54, 2), float64], Tensor[(3, 12, 3), float64], Tensor[(14, 5, 2), float64]) {
  %874 = cast(%var_4409, dtype="float64") /* ty=Tensor[(54, 2), float64] */;
  %875 = cast(%var_4409, dtype="float64") /* ty=Tensor[(54, 2), float64] */;
  %876 = reshape(%874, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %877 = reshape(%875, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %878 = @func_4140(%876, %877) /* ty=Tensor[(3, 12, 3), float64] */;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %880 = @func_1141() /* ty=Tensor[(14, 5, 2), float32] */;
  %881 = acos(%879) /* ty=Tensor[(3, 12, 3), float64] */;
  %882 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%880, %var_4409, %881, %882)
}

def @func_3746() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %883 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %884 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %885 = %883.0;
  %886 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  %887 = %884.1;
  (%885, %886, %887)
}

def @func_1701() -> Tensor[(14, 5, 2), float64] {
  %888 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %888.0
}

def @func_7297(%var_7276: Tensor[(2, 14, 1), float64], %var_7277: Tensor[(2, 14, 7), float64]) -> (Tensor[(2, 14, 7), float64], Tensor[(14, 5, 2), float64]) {
  %889 = cast(%var_7276, dtype="float64") /* ty=Tensor[(2, 14, 1), float64] */;
  %890 = cast(%var_7277, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
  %891 = @func_4653() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %892 = floor_mod(%889, %890) /* ty=Tensor[(2, 14, 7), float64] */;
  %893 = %891.0;
  (%892, %893)
}

def @func_4854() -> (Tensor[(14, 5, 2), float32],) {
  %894 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %895 = %894.1;
  (%895,)
}

def @func_5441() -> (Tensor[(14, 5, 2), float64],) {
  %896 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %897 = %896.1;
  (%897,)
}

def @func_7723() -> Tensor[(14, 5, 2), int64] {
  %898 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %898.0
}

def @func_7159(%var_7153: uint16, %var_7154: Tensor[(8, 13, 11), uint16]) -> Tensor[(8, 13, 11), bool] {
  %899 = cast(%var_7153, dtype="bool") /* ty=bool */;
  %900 = cast(%var_7154, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
  greater(%899, %900) /* ty=Tensor[(8, 13, 11), bool] */
}

def @func_8628() -> Tensor[(14, 5, 2), float32] {
  %901 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %901.0
}

def @func_1169(%var_1166: Tensor[(4, 7, 11), float32]) -> Tensor[(4, 7, 11), float32] {
  %902 = cast(%var_1166, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  cos(%902) /* ty=Tensor[(4, 7, 11), float32] */
}

def @func_3413(%var_3379: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) {
  %903 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %904 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%var_3379, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %907 = @func_3355() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %908 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
  %909 = minimum(%905, %906) /* ty=Tensor[(15, 2, 5), float64] */;
  %910 = %907.0;
  %911 = %908.3;
  (%909, %910, %911)
}

def @func_7088() -> (Tensor[(3, 2, 5), int32],) {
  %912 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %913 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(3, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %916 = floor_mod(%914, %915) /* ty=Tensor[(3, 2, 5), float64] */;
  %917 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3, 2, 5), int32] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="int32") /* ty=Tensor[(3, 2, 5), int32] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %921 = bitwise_xor(%919, %920) /* ty=Tensor[(3, 2, 5), int32] */;
  (%921,)
}

def @func_5522() -> Tensor[(16, 9, 10), bool] {
  %922 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %923 = %922.0;
  %924 = cast(%923, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %925 = log10(%924) /* ty=Tensor[(16, 9, 10), float64] */;
  %926 = cast(%925, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %927 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%923, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%928, %929) /* ty=Tensor[(16, 9, 10), bool] */
}

def @func_6242() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %930 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %931 = @func_5323() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %932 = %930.1;
  %933 = %931.0;
  %934 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%932, %933, %934)
}

def @func_8833() -> (Tensor[(1, 500), float32],) {
  %935 = @func_5916() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) */;
  %936 = %935.2;
  (%936,)
}

def @func_2169() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %937 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %938 = %937.0;
  %939 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%938, %939)
}

def @func_4753(%var_4742: Tensor[(16, 9, 10), float64]) -> (Tensor[(4, 7, 11), float64], Tensor[(308), float32], Tensor[(140), bool], Tensor[(16, 9, 10), bool], Tensor[(14, 5, 2), float64]) {
  %940 = cast(meta[relay.Constant][36] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %941 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %942 = reshape(%940, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %943 = reshape(%941, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %944 = @func_2770(%942, %943) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %945 = @func_3746() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %946 = %945.2;
  %947 = cast(%var_4742, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%946, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %951 = %944.3;
  %952 = less_equal(%949, %950) /* ty=Tensor[(16, 9, 10), bool] */;
  %953 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%951, meta[relay.Constant][36] /* ty=Tensor[(308), float32] */, meta[relay.Constant][37] /* ty=Tensor[(140), bool] */, %952, %953)
}

def @func_6771(%var_6764: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), bool],) {
  %954 = @func_5323() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %955 = %954.0;
  %956 = cast(%var_6764, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %960 = logical_or(%958, %959) /* ty=Tensor[(14, 5, 2), bool] */;
  (%960,)
}

def @func_1092() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %961 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %962 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %963 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %964 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %965 = %961.1;
  %966 = %962.0;
  %967 = %963.1;
  %968 = %964.0;
  (%965, %966, %967, %968)
}

def @func_5982(%var_5965: Tensor[(16, 1, 8), float32]) -> (Tensor[(16, 1, 8), float32], Tensor[(6, 13, 10), float64], Tensor[(780), float64]) {
  %969 = cast(%var_5965, dtype="float32") /* ty=Tensor[(16, 1, 8), float32] */;
  %970 = cast(meta[relay.Constant][38] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %971 = reshape(%970, newshape=[6, 13, 10]) /* ty=Tensor[(6, 13, 10), float64] */;
  %972 = @func_5035(%971) /* ty=(Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %973 = atan(%969) /* ty=Tensor[(16, 1, 8), float32] */;
  %974 = %972.0;
  (%973, %974, meta[relay.Constant][38] /* ty=Tensor[(780), float64] */)
}

def @func_7394() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %975 = @func_6693() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) */;
  %976 = @func_5059() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %977 = %975.0;
  %978 = %976.0;
  (%977, %978)
}

def @func_2233(%var_2199: Tensor[(9, 11), float64], %var_2200: Tensor[(9, 11), float64], %var_2226: Tensor[(180), float64]) -> (Tensor[(9, 11), float64], Tensor[(14, 5, 2), uint64], Tensor[(140), bool], Tensor[(9, 5, 4), int16], Tensor[(180), float64]) {
  %979 = cast(%var_2200, dtype="float64") /* ty=Tensor[(9, 11), float64] */;
  %980 = shape_of(%var_2199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %981 = cast(%var_2199, dtype="float64") /* ty=Tensor[(9, 11), float64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %983 = cast(meta[relay.Constant][39] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %984 = reshape(%983, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %985 = @func_1130(%984) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %986 = cast(%var_2226, dtype="float64") /* ty=Tensor[(180), float64] */;
  %987 = cast(%var_2226, dtype="float64") /* ty=Tensor[(180), float64] */;
  %988 = reshape(%986, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %989 = reshape(%987, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %990 = @func_798(%988, %989) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %991 = mod(%981, %982) /* ty=Tensor[(9, 11), float64] */;
  %992 = %985.0;
  %993 = %990.1;
  (%991, %992, meta[relay.Constant][39] /* ty=Tensor[(140), bool] */, %993, %var_2226)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4753(%var_4742: Tensor[(16, 9, 10), float64]) -> (Tensor[(4, 7, 11), float64], Tensor[(308), float32], Tensor[(140), bool], Tensor[(16, 9, 10), bool], Tensor[(14, 5, 2), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %2 = reshape(%0, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %3 = reshape(%1, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %4 = @func_2770(%2, %3) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %5 = @func_3746() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %6 = %5.2;
  %7 = cast(%var_4742, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = %4.3;
  %12 = less_equal(%9, %10) /* ty=Tensor[(16, 9, 10), bool] */;
  %13 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%11, meta[relay.Constant][0] /* ty=Tensor[(308), float32] */, meta[relay.Constant][1] /* ty=Tensor[(140), bool] */, %12, %13)
}

def @func_6886() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %17 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %14 = @func_5236() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %15 = @func_4639() /* ty=Tensor[(14, 5, 2), float32] */;
    %16 = %14.1;
    (%15, %16)
  };
  %17() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_3880() -> (Tensor[(14, 5, 2), int64],) {
  @func_3878() /* ty=(Tensor[(14, 5, 2), int64],) */
}

def @func_7668() -> Tensor[(308), float32] {
  %19 = fn () -> Tensor[(308), float32] {
    %18 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
    %18.2
  };
  %19() /* ty=Tensor[(308), float32] */
}

def @func_9668() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64]) {
  %24 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64]) {
    %20 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %21 = @func_6972() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) */;
    %22 = %20.0;
    %23 = %21.0;
    (%22, %23)
  };
  %24() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64]) */
}

def @func_7159(%var_7153: uint16, %var_7154: Tensor[(8, 13, 11), uint16]) -> Tensor[(8, 13, 11), bool] {
  %25 = cast(%var_7153, dtype="bool") /* ty=bool */;
  %26 = cast(%var_7154, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
  greater(%25, %26) /* ty=Tensor[(8, 13, 11), bool] */
}

def @func_3051(%var_3049: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  @func_3048(%var_3049) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_9580(%var_9544: int32, %var_9545: Tensor[(1, 15, 14), int32]) -> (Tensor[(14, 5, 2), bool], Tensor[(?, 15, 14), int32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float64]) {
  %27 = cast(%var_9544, dtype="int32") /* ty=int32 */;
  %28 = cast(%var_9545, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %29 = add(%27, %28) /* ty=Tensor[(1, 15, 14), int32] */;
  %30 = cast(%29, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %31 = shape_of(%var_9545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_9545, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(2704), float64] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(2704), float64] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %36 = reshape(%34, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %37 = reshape(%35, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %38 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %39 = minimum(%32, %33) /* ty=Tensor[(?, 15, 14), int32] */;
  %40 = @func_5798(%36, %37) /* ty=Tensor[(16, 13, 13), uint16] */;
  (%38, %39, %40, meta[relay.Constant][2] /* ty=Tensor[(2704), float64] */)
}

def @func_1503() -> (Tensor[(14, 5, 2), float32],) {
  %49 = fn () -> (Tensor[(14, 5, 2), float32],) {
    %41 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
    %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 5, 2), float64] */, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
    %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%41, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %46 = bitwise_or(%44, %45) /* ty=Tensor[(14, 5, 2), int64] */;
    %47 = cast(%46, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %48 = sigmoid(%47) /* ty=Tensor[(14, 5, 2), float32] */;
    (%48,)
  };
  %49() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_640() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %53 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
    %50 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %51 = %50.1;
    %52 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    (%51, %52)
  };
  %53() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_5729(%var_5727: Tensor[(16, 10, 1), float64], %var_5728: Tensor[(16, 10, 15), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 15), bool], Tensor[(16, 10, ?), float32], Tensor[(16, 10, ?), float64], Tensor[(14, 5, 2), float32]) {
  %82 = fn (%var_5660: Tensor[(16, 10, 1), float64], %var_5669: Tensor[(16, 10, 15), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 15), bool], Tensor[(16, 10, ?), float32], Tensor[(16, 10, ?), float64], Tensor[(14, 5, 2), float32]) {
    %54 = @func_3221() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %55 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %56 = cast(%var_5660, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
    %57 = asinh(%56) /* ty=Tensor[(16, 10, 1), float64] */;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
    %59 = rsqrt(%58) /* ty=Tensor[(16, 10, 1), float64] */;
    %60 = cast(%59, dtype="int16") /* ty=Tensor[(16, 10, 1), int16] */;
    %61 = cast(%var_5669, dtype="int16") /* ty=Tensor[(16, 10, 15), int16] */;
    %62 = logical_xor(%60, %61) /* ty=Tensor[(16, 10, 15), int16] */;
    %63 = cast(%var_5669, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%62, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = cast(%var_5660, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
    %68 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%57, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %71 = cast(%57, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
    %72 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%59, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %75 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %76 = %54.0;
    %77 = %55.0;
    %78 = less_equal(%65, %66) /* ty=Tensor[(16, 10, 15), bool] */;
    %79 = floor_divide(%69, %70) /* ty=Tensor[(16, 10, ?), float32] */;
    %80 = maximum(%73, %74) /* ty=Tensor[(16, 10, ?), float64] */;
    %81 = %75.1;
    (%76, %77, %78, %79, %80, %81)
  };
  %82(%var_5727, %var_5728) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 15), bool], Tensor[(16, 10, ?), float32], Tensor[(16, 10, ?), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_1302(%var_1299: Tensor[(308), float32]) -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  %83 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %84 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %85 = cast(%var_1299, dtype="float32") /* ty=Tensor[(308), float32] */;
  %86 = reshape(%85, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %87 = %83.0;
  %88 = %84.0;
  %89 = @func_1169(%86) /* ty=Tensor[(4, 7, 11), float32] */;
  (%87, %88, %89, %var_1299)
}

def @func_6920() -> (Tensor[(14, 5, 2), float32],) {
  %92 = fn () -> (Tensor[(14, 5, 2), float32],) {
    %90 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %91 = %90.1;
    (%91,)
  };
  %92() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_7088() -> (Tensor[(3, 2, 5), int32],) {
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %94 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %97 = floor_mod(%95, %96) /* ty=Tensor[(3, 2, 5), float64] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3, 2, 5), int32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="int32") /* ty=Tensor[(3, 2, 5), int32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %102 = bitwise_xor(%100, %101) /* ty=Tensor[(3, 2, 5), int32] */;
  (%102,)
}

def @func_4156() -> (Tensor[(14, 5, 2), float64],) {
  %105 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %103 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %104 = %103.1;
    (%104,)
  };
  %105() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_8508() -> Tensor[(14, 5, 2), float64] {
  @func_8506() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_8371(%var_8370: Tensor[(10, 14, 15), float64]) -> Tensor[(10, 14, 15), float64] {
  %110 = fn (%var_8357: Tensor[(10, 14, 15), float64]) -> Tensor[(10, 14, 15), float64] {
    %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
    %107 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%var_8357, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%108, %109) /* ty=Tensor[(10, 14, 15), float64] */
  };
  %110(%var_8370) /* ty=Tensor[(10, 14, 15), float64] */
}

def @func_8282() -> (Tensor[(14, 5, 2), float32],) {
  @func_8280() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_8440() -> Tensor[(14, 5, 2), float64] {
  @func_8438() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_4143(%var_4141: Tensor[(3, 12, 3), float64], %var_4142: Tensor[(3, 12, 3), float64]) -> Tensor[(3, 12, 3), float64] {
  %115 = fn (%var_4130: Tensor[(3, 12, 3), float64], %var_4131: Tensor[(3, 12, 3), float64]) -> Tensor[(3, 12, 3), float64] {
    %111 = cast(%var_4131, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %112 = shape_of(%var_4130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(%var_4130, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%113, %114) /* ty=Tensor[(3, 12, 3), float64] */
  };
  %115(%var_4141, %var_4142) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_1094() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_3086() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  @func_3084() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_10159() -> Tensor[(14, 5, 2), float32] {
  @func_10157() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_7090() -> (Tensor[(3, 2, 5), int32],) {
  @func_7088() /* ty=(Tensor[(3, 2, 5), int32],) */
}

def @func_8151(%var_8140: Tensor[(16, 9, 10), float64]) -> (Tensor[(16, 9, 10), uint64], Tensor[(14, 5, 2), float32]) {
  %116 = @func_5009() /* ty=(Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) */;
  %117 = %116.0;
  %118 = cast(%var_8140, dtype="uint64") /* ty=Tensor[(16, 9, 10), uint64] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="uint64") /* ty=Tensor[(16, 9, 10), uint64] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %122 = @func_7147() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
  %123 = bitwise_or(%120, %121) /* ty=Tensor[(16, 9, 10), uint64] */;
  %124 = %122.0;
  (%123, %124)
}

def @func_6774(%var_6772: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), bool],) {
  @func_6771(%var_6772) /* ty=(Tensor[(14, 5, 2), bool],) */
}

def @func_8406(%var_8405: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %136 = fn (%var_8388: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
    %126 = shape_of(%var_8388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%var_8388, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %129 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %130 = %129.0;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
    %132 = reshape(%131, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float64] */;
    %133 = @func_3048(%132) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %134 = floor_divide(%127, %128) /* ty=Tensor[(9, 3, 8), float64] */;
    %135 = %133.0;
    (%134, %130, %135)
  };
  %136(%var_8405) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_5286() -> Tensor[(14, 5, 2), float32] {
  @func_541() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8888() -> (Tensor[(480), float64],) {
  @func_8886() /* ty=(Tensor[(480), float64],) */
}

def @func_2233(%var_2199: Tensor[(9, 11), float64], %var_2200: Tensor[(9, 11), float64], %var_2226: Tensor[(180), float64]) -> (Tensor[(9, 11), float64], Tensor[(14, 5, 2), uint64], Tensor[(140), bool], Tensor[(9, 5, 4), int16], Tensor[(180), float64]) {
  %137 = cast(%var_2200, dtype="float64") /* ty=Tensor[(9, 11), float64] */;
  %138 = shape_of(%var_2199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %139 = cast(%var_2199, dtype="float64") /* ty=Tensor[(9, 11), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %142 = reshape(%141, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %143 = @func_1130(%142) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %144 = cast(%var_2226, dtype="float64") /* ty=Tensor[(180), float64] */;
  %145 = cast(%var_2226, dtype="float64") /* ty=Tensor[(180), float64] */;
  %146 = reshape(%144, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %147 = reshape(%145, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %148 = @func_798(%146, %147) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %149 = mod(%139, %140) /* ty=Tensor[(9, 11), float64] */;
  %150 = %143.0;
  %151 = %148.1;
  (%149, %150, meta[relay.Constant][8] /* ty=Tensor[(140), bool] */, %151, %var_2226)
}

def @func_220(%var_202: Tensor[(500), float32], %var_208: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) {
  %152 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %153 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %154 = cast(%var_202, dtype="float32") /* ty=Tensor[(500), float32] */;
  %155 = reshape(%154, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %156 = @func_81(%155) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) */;
  %157 = cast(%var_208, dtype="bool") /* ty=Tensor[(500), bool] */;
  %158 = shape_of(%var_202, dtype="int32") /* ty=Tensor[(1), int32] */;
  %159 = cast(%var_202, dtype="bool") /* ty=Tensor[(500), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?), bool] */;
  %161 = %152.0;
  %162 = %153.0;
  %163 = %156.1;
  %164 = logical_and(%159, %160) /* ty=Tensor[(500), bool] */;
  (%161, %162, %163, %164)
}

def @func_1130(%var_1111: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), uint64],) {
  %165 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %166 = cast(%var_1111, dtype="uint64") /* ty=Tensor[(14, 5, 2), uint64] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="uint64") /* ty=Tensor[(14, 5, 2), uint64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %170 = subtract(%168, %169) /* ty=Tensor[(14, 5, 2), uint64] */;
  (%170,)
}

def @func_8824() -> Tensor[(14, 5, 2), float64] {
  %172 = fn () -> Tensor[(14, 5, 2), float64] {
    %171 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %171.0
  };
  %172() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_4856() -> (Tensor[(14, 5, 2), float32],) {
  @func_4854() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_8886() -> (Tensor[(480), float64],) {
  %173 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
  %174 = %173.5;
  (%174,)
}

def @func_4510() -> Tensor[(14, 5, 2), float32] {
  %177 = fn () -> Tensor[(14, 5, 2), float32] {
    %175 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
    %176 = cast(%175, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    asin(%176) /* ty=Tensor[(14, 5, 2), float32] */
  };
  %177() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_291() -> (Tensor[(14, 5, 2), float64],) {
  %182 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %178 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %179 = %178.0;
    %180 = cast(%179, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
    %181 = rsqrt(%180) /* ty=Tensor[(14, 5, 2), float64] */;
    (%181,)
  };
  %182() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_3860() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
  @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */
}

def @func_8264() -> (Tensor[(14, 5, 2), float64],) {
  %184 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %183 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
    (%183,)
  };
  %184() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_1199() -> Tensor[(14, 5, 2), float64] {
  %185 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %185.0
}

def @func_7969() -> Tensor[(14, 5, 2), uint16] {
  %186 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %186.0
}

def @func_3207() -> (Tensor[(14, 5, 2), float32],) {
  %187 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %188 = %187.0;
  (%188,)
}

def @func_4654() -> (Tensor[(14, 5, 2), float64],) {
  %190 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %189 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
    (%189,)
  };
  %190() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_5633() -> Tensor[(14, 5, 2), float64] {
  %192 = fn () -> Tensor[(14, 5, 2), float64] {
    %191 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %191.1
  };
  %192() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_6608(%var_6593: Tensor[(12, 13, 10), float64]) -> (Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) {
  %193 = cast(%var_6593, dtype="float64") /* ty=Tensor[(12, 13, 10), float64] */;
  %194 = log(%193) /* ty=Tensor[(12, 13, 10), float64] */;
  %195 = cast(%var_6593, dtype="int8") /* ty=Tensor[(12, 13, 10), int8] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="int8") /* ty=Tensor[(12, 13, 10), int8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %199 = subtract(%197, %198) /* ty=Tensor[(12, 13, 10), int8] */;
  %200 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
  (%199, %200)
}

def @func_6987() -> (Tensor[(14, 5, 2), float64],) {
  @func_6985() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_1859() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %207 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
    %201 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %202 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %203 = %202.0;
    %204 = cast(%203, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %205 = %201.0;
    %206 = log(%204) /* ty=Tensor[(14, 5, 2), float32] */;
    (%205, %206)
  };
  %207() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_4687() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_4685() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_3209() -> (Tensor[(14, 5, 2), float32],) {
  @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_6849() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %216 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
    %208 = @func_4596() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %209 = @func_6078() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %210 = @func_2319() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) */;
    %211 = %208.1;
    %212 = %209.0;
    %213 = %210.0;
    %214 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %215 = @func_3571() /* ty=Tensor[(14, 5, 2), float64] */;
    (%211, %212, %213, %214, %215)
  };
  %216() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_1172(%var_1170: Tensor[(4, 7, 11), float32]) -> Tensor[(4, 7, 11), float32] {
  @func_1169(%var_1170) /* ty=Tensor[(4, 7, 11), float32] */
}

def @func_3571() -> Tensor[(14, 5, 2), float64] {
  %217 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %217.0
}

def @func_1285() -> (Tensor[(14, 5, 2), uint16],) {
  %225 = fn () -> (Tensor[(14, 5, 2), uint16],) {
    %218 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %219 = %218.1;
    %220 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 5, 2), float32] */, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%219, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %224 = left_shift(%222, %223) /* ty=Tensor[(14, 5, 2), uint16] */;
    (%224,)
  };
  %225() /* ty=(Tensor[(14, 5, 2), uint16],) */
}

def @func_5059() -> (Tensor[(14, 5, 2), float32],) {
  %226 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  (%226,)
}

def @func_8664() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) {
  %227 = @func_8280() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %228 = @func_7394() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %230 = reshape(%229, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %231 = @func_4897(%230) /* ty=(Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) */;
  %232 = %227.0;
  %233 = %228.0;
  %234 = %231.2;
  (%232, %233, %234, meta[relay.Constant][10] /* ty=Tensor[(500), float32] */)
}

def @func_2319() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) {
  %235 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %236 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %237 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %238 = %237.1;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  %240 = %235.0;
  %241 = %236.1;
  %242 = sin(%239) /* ty=Tensor[(4, 7, 11), float32] */;
  (%240, %241, %242)
}

def @func_4285() -> (Tensor[(4, 12, 16), int16], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_4283() /* ty=(Tensor[(4, 12, 16), int16], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_4120() -> (Tensor[(14, 5, 2), float64],) {
  %243 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %244 = %243.1;
  (%244,)
}

def @func_2921() -> (Tensor[(14, 5, 2), float64],) {
  @func_2919() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_6126() -> Tensor[(14, 5, 2), uint16] {
  %246 = fn () -> Tensor[(14, 5, 2), uint16] {
    %245 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
    %245.0
  };
  %246() /* ty=Tensor[(14, 5, 2), uint16] */
}

def @func_169() -> (Tensor[(14, 5, 2), float32],) {
  @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_3472() -> Tensor[(14, 5, 2), float64] {
  @func_3470() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_670() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_3858() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
  %247 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %248 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %249 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %250 = %247.0;
  %251 = %248.1;
  %252 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
  %253 = %249.0;
  (%250, %251, %252, %253)
}

def @func_6345() -> (Tensor[(16, 9, 10), bool],) {
  %254 = @func_5522() /* ty=Tensor[(16, 9, 10), bool] */;
  (%254,)
}

def @func_3222() -> (Tensor[(14, 5, 2), float32],) {
  %256 = fn () -> (Tensor[(14, 5, 2), float32],) {
    %255 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
    (%255,)
  };
  %256() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_6490(%var_6487: int64, %var_6488: Tensor[(7, 14, 8), int64], %var_6489: Tensor[(180), float64]) -> (Tensor[(7, 14, 8), int64], Tensor[(7, 14, 8), uint32], Tensor[(7, 14, 8), bool], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float32]) {
  %276 = fn (%var_6431: int64, %var_6432: Tensor[(7, 14, 8), int64], %var_6463: Tensor[(180), float64]) -> (Tensor[(7, 14, 8), int64], Tensor[(7, 14, 8), uint32], Tensor[(7, 14, 8), bool], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float32]) {
    %257 = cast(%var_6431, dtype="int64") /* ty=int64 */;
    %258 = cast(%var_6432, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
    %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 14, 8), int64] */, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
    %260 = shape_of(%var_6432, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%var_6432, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %263 = cast(%var_6432, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
    %264 = cast(%var_6431, dtype="bool") /* ty=bool */;
    %265 = cast(%var_6463, dtype="float64") /* ty=Tensor[(180), float64] */;
    %266 = cast(%var_6463, dtype="float64") /* ty=Tensor[(180), float64] */;
    %267 = reshape(%265, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
    %268 = reshape(%266, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
    %269 = @func_798(%267, %268) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
    %270 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %271 = multiply(%257, %258) /* ty=Tensor[(7, 14, 8), int64] */;
    %272 = maximum(%261, %262) /* ty=Tensor[(7, 14, 8), uint32] */;
    %273 = less(%263, %264) /* ty=Tensor[(7, 14, 8), bool] */;
    %274 = %269.2;
    %275 = %270.0;
    (%271, %272, %273, %274, %var_6463, %275)
  };
  %276(%var_6487, %var_6488, %var_6489) /* ty=(Tensor[(7, 14, 8), int64], Tensor[(7, 14, 8), uint32], Tensor[(7, 14, 8), bool], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_8628() -> Tensor[(14, 5, 2), float32] {
  %277 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %277.0
}

def @func_9539(%var_9532: Tensor[(2704), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float32]) {
  %278 = cast(%var_9532, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %279 = cast(%var_9532, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %280 = reshape(%278, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %281 = reshape(%279, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %282 = cast(%var_9532, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %283 = @func_2362() /* ty=Tensor[(14, 5, 2), float32] */;
  %284 = @func_5798(%280, %281) /* ty=Tensor[(16, 13, 13), uint16] */;
  %285 = tan(%282) /* ty=Tensor[(2704), float32] */;
  (%283, %284, %285)
}

def @func_3415(%var_3414: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) {
  %295 = fn (%var_3379: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) {
    %286 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %287 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%var_3379, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %290 = @func_3355() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %291 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
    %292 = minimum(%288, %289) /* ty=Tensor[(15, 2, 5), float64] */;
    %293 = %290.0;
    %294 = %291.3;
    (%292, %293, %294)
  };
  %295(%var_3414) /* ty=(Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) */
}

def @func_9134(%var_9072: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), bool], Tensor[(10, 10, 5), float64]) {
  %296 = cast(%var_9072, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %297 = @func_7954() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) */;
  %298 = cast(%var_9072, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %299 = @func_2871() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %302 = reshape(%301, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %303 = @func_1426(%302) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
  %304 = sinh(%296) /* ty=Tensor[(7, 14, 4), float32] */;
  %305 = %297.0;
  %306 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
  %307 = sigmoid(%298) /* ty=Tensor[(7, 14, 4), float32] */;
  %308 = %303.5;
  (%304, %305, %306, %307, %300, %308)
}

def @func_6243() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %314 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
    %309 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %310 = @func_5323() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %311 = %309.1;
    %312 = %310.0;
    %313 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
    (%311, %312, %313)
  };
  %314() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_1342(%var_1340: float64, %var_1341: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), bool],) {
  @func_1338(%var_1340, %var_1341) /* ty=(Tensor[(16, 10, 3), bool],) */
}

def @func_7472(%var_7470: Tensor[(5, 1, 13), float32], %var_7471: Tensor[(5, 2, 13), bool]) -> (Tensor[(14, 5, 2), uint16], Tensor[(12, 130), float64], Tensor[(16, 9, 10), bool], Tensor[(5, ?, 13), float64], Tensor[(14, 5, 2), float32], Tensor[(5, 2, 13), int8], Tensor[(1, 308), float32]) {
  %349 = fn (%var_7417: Tensor[(5, 1, 13), float32], %var_7463: Tensor[(5, 2, 13), bool]) -> (Tensor[(14, 5, 2), uint16], Tensor[(12, 130), float64], Tensor[(16, 9, 10), bool], Tensor[(5, ?, 13), float64], Tensor[(14, 5, 2), float32], Tensor[(5, 2, 13), int8], Tensor[(1, 308), float32]) {
    %315 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 130), float64] */, dtype="float64") /* ty=Tensor[(12, 130), float64] */;
    %316 = reshape(%315, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float64] */;
    %317 = @func_6608(%316) /* ty=(Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) */;
    %318 = @func_6345() /* ty=(Tensor[(16, 9, 10), bool],) */;
    %319 = cast(%var_7417, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
    %320 = sin(%319) /* ty=Tensor[(5, 1, 13), float32] */;
    %321 = cast(%var_7417, dtype="int8") /* ty=Tensor[(5, 1, 13), int8] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="int8") /* ty=Tensor[(5, 1, 13), int8] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %325 = multiply(%323, %324) /* ty=Tensor[(5, ?, 13), int8] */;
    %326 = cast(%325, dtype="float64") /* ty=Tensor[(5, ?, 13), float64] */;
    %327 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%320, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %330 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
    %331 = cast(%320, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
    %332 = sqrt(%331) /* ty=Tensor[(5, 1, 13), float64] */;
    %333 = cast(%332, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
    %334 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%320, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %337 = greater_equal(%335, %336) /* ty=Tensor[(5, ?, 13), bool] */;
    %338 = cast(%337, dtype="int8") /* ty=Tensor[(5, ?, 13), int8] */;
    %339 = cast(%var_7463, dtype="int8") /* ty=Tensor[(5, 2, 13), int8] */;
    %340 = %330.2;
    %341 = cast(%340, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %342 = reshape(%341, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
    %343 = @func_1426(%342) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
    %344 = %317.1;
    %345 = %318.0;
    %346 = mod(%328, %329) /* ty=Tensor[(5, ?, 13), float64] */;
    %347 = bitwise_xor(%338, %339) /* ty=Tensor[(5, 2, 13), int8] */;
    %348 = %343.4;
    (%344, meta[relay.Constant][13] /* ty=Tensor[(12, 130), float64] */, %345, %346, %340, %347, %348)
  };
  %349(%var_7470, %var_7471) /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(12, 130), float64], Tensor[(16, 9, 10), bool], Tensor[(5, ?, 13), float64], Tensor[(14, 5, 2), float32], Tensor[(5, 2, 13), int8], Tensor[(1, 308), float32]) */
}

def @func_9542(%var_9540: Tensor[(2704), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float32]) {
  @func_9539(%var_9540) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float32]) */
}

def @func_7251(%var_7241: Tensor[(10, 1, 15), uint16], %var_7242: Tensor[(10, 15, 15), uint16]) -> (Tensor[(10, 15, 15), bool], Tensor[(14, 5, 2), float64]) {
  %350 = cast(%var_7241, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %351 = cast(%var_7242, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %352 = greater(%350, %351) /* ty=Tensor[(10, 15, 15), bool] */;
  %353 = @func_3571() /* ty=Tensor[(14, 5, 2), float64] */;
  (%352, %353)
}

def @func_1966() -> Tensor[(14, 5, 2), float32] {
  @func_1964() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_4854() -> (Tensor[(14, 5, 2), float32],) {
  %354 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %355 = %354.1;
  (%355,)
}

def @func_8252(%var_8244: uint64) -> (Tensor[(15, 10, 15), bool],) {
  %356 = cast(%var_8244, dtype="bool") /* ty=bool */;
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 10, 15), uint64] */, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %358 = less(%356, %357) /* ty=Tensor[(15, 10, 15), bool] */;
  (%358,)
}

def @func_9526(%var_9524: Tensor[(2100), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) {
  @func_9523(%var_9524) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_1338(%var_1327: float64, %var_1328: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), bool],) {
  %359 = cast(%var_1327, dtype="bool") /* ty=bool */;
  %360 = cast(%var_1328, dtype="bool") /* ty=Tensor[(16, 10, 3), bool] */;
  %361 = less(%359, %360) /* ty=Tensor[(16, 10, 3), bool] */;
  %362 = cast(%var_1327, dtype="bool") /* ty=bool */;
  %363 = cast(%361, dtype="bool") /* ty=Tensor[(16, 10, 3), bool] */;
  %364 = greater(%362, %363) /* ty=Tensor[(16, 10, 3), bool] */;
  (%364,)
}

def @func_2095() -> (Tensor[(14, 5, 2), float64],) {
  @func_2093() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_9976() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(18, 6), float64]) {
  @func_9974() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(18, 6), float64]) */
}

def @func_2364() -> Tensor[(14, 5, 2), float32] {
  @func_2362() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8154(%var_8152: Tensor[(16, 9, 10), float64]) -> (Tensor[(16, 9, 10), uint64], Tensor[(14, 5, 2), float32]) {
  @func_8151(%var_8152) /* ty=(Tensor[(16, 9, 10), uint64], Tensor[(14, 5, 2), float32]) */
}

def @func_1596() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %369 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %365 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %366 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
    %367 = %365.0;
    %368 = %366.1;
    (%367, %368)
  };
  %369() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_9216() -> (Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) {
  @func_9214() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) */
}

def @func_2521(%var_2520: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(500), bool], Tensor[(500), float64], Tensor[(14, 5, 2), float64]) {
  %380 = fn (%var_2506: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(500), bool], Tensor[(500), float64], Tensor[(14, 5, 2), float64]) {
    %370 = cast(%var_2506, dtype="float32") /* ty=Tensor[(500), float32] */;
    %371 = cast(%var_2506, dtype="float32") /* ty=Tensor[(500), float32] */;
    %372 = reshape(%370, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %373 = reshape(%371, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %374 = @func_220(%372, %373) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
    %375 = cast(%var_2506, dtype="float64") /* ty=Tensor[(500), float64] */;
    %376 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
    %377 = %374.3;
    %378 = log(%375) /* ty=Tensor[(500), float64] */;
    %379 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
    (%376, %377, %378, %379)
  };
  %380(%var_2520) /* ty=(Tensor[(14, 5, 2), float64], Tensor[(500), bool], Tensor[(500), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_1236() -> (Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %381 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %382 = %381.0;
  %383 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 5, 2), float32] */, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="int64") /* ty=Tensor[(14, 5, 2), int64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %387 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %388 = add(%385, %386) /* ty=Tensor[(14, 5, 2), int64] */;
  %389 = %387.0;
  %390 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%388, %389, %390)
}

def @func_5550() -> Tensor[(14, 5, 2), float64] {
  %391 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %391.0
}

def @func_8506() -> Tensor[(14, 5, 2), float64] {
  %392 = @func_2919() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %392.0
}

def @func_1133(%var_1131: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), uint64],) {
  @func_1130(%var_1131) /* ty=(Tensor[(14, 5, 2), uint64],) */
}

def @func_4096() -> (Tensor[(14, 9, 5), float64],) {
  %395 = fn () -> (Tensor[(14, 9, 5), float64],) {
    %393 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
    %394 = sigmoid(%393) /* ty=Tensor[(14, 9, 5), float64] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(14, 9, 5), float64],) */
}

def @func_4897(%var_4894: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) {
  %396 = cast(%var_4894, dtype="float32") /* ty=Tensor[(500), float32] */;
  %397 = reshape(%396, newshape=[1, 500]) /* ty=Tensor[(1, 500), float32] */;
  %398 = @func_762(%397) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) */;
  %399 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  %400 = %398.2;
  (%399, %400, %var_4894)
}

def @func_3048(%var_3028: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %401 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  %402 = cast(%var_3028, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %406 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %407 = mod(%404, %405) /* ty=Tensor[(14, 5, 2), float32] */;
  %408 = %406.2;
  (%407, %408)
}

def @func_3084() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %409 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %410 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %411 = %409.1;
  %412 = %410.0;
  (%411, %412)
}

def @func_8666() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) {
  @func_8664() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) */
}

def @func_1169(%var_1166: Tensor[(4, 7, 11), float32]) -> Tensor[(4, 7, 11), float32] {
  %413 = cast(%var_1166, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  cos(%413) /* ty=Tensor[(4, 7, 11), float32] */
}

def @func_9214() -> (Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) {
  %414 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %415 = reshape(%414, newshape=[]) /* ty=uint64 */;
  %416 = @func_8252(%415) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %417 = @func_8628() /* ty=Tensor[(14, 5, 2), float32] */;
  %418 = cast(%417, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %419 = reshape(%418, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %420 = @func_1130(%419) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %421 = %416.0;
  %422 = %420.0;
  (%417, %421, meta[relay.Constant][17] /* ty=uint64 */, %422)
}

def @func_5879(%var_5842: Tensor[(13, 10, 13), uint64], %var_5843: Tensor[(13, 10, 13), uint64]) -> (Tensor[(13, 10, 13), uint64],) {
  %423 = cast(%var_5843, dtype="uint64") /* ty=Tensor[(13, 10, 13), uint64] */;
  %424 = shape_of(%var_5842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%var_5842, dtype="uint64") /* ty=Tensor[(13, 10, 13), uint64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %427 = left_shift(%425, %426) /* ty=Tensor[(13, 10, 13), uint64] */;
  (%427,)
}

def @func_6309() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint64], Tensor[(4, 7, 11), float32]) {
  @func_6307() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint64], Tensor[(4, 7, 11), float32]) */
}

def @main() -> Tensor[(500), float64] {
  %428 = @func_8666() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(500), float32], Tensor[(500), float32]) */;
  %429 = %428.2;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(500), float64] */;
  %431 = asin(%430) /* ty=Tensor[(500), float64] */;
  %432 = cast(%429, dtype="float64") /* ty=Tensor[(500), float64] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(1), int32] */;
  %434 = cast(%431, dtype="float64") /* ty=Tensor[(500), float64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?), float64] */;
  power(%434, %435) /* ty=Tensor[(500), float64] */
}

def @func_3171() -> (Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) {
  @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */
}

def @func_4315() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %440 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
    %436 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %437 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %438 = %436.2;
    %439 = %437.0;
    (%438, %439)
  };
  %440() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_3470() -> Tensor[(14, 5, 2), float64] {
  %441 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %441.1
}

def @func_9857() -> Tensor[(15, 10, 15), bool] {
  %443 = fn () -> Tensor[(15, 10, 15), bool] {
    %442 = @func_9214() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(15, 10, 15), bool], uint64, Tensor[(14, 5, 2), uint64]) */;
    %442.1
  };
  %443() /* ty=Tensor[(15, 10, 15), bool] */
}

def @func_6347() -> (Tensor[(16, 9, 10), bool],) {
  @func_6345() /* ty=(Tensor[(16, 9, 10), bool],) */
}

def @func_5443() -> (Tensor[(14, 5, 2), float64],) {
  @func_5441() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_4438(%var_4409: Tensor[(54, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(54, 2), float64], Tensor[(3, 12, 3), float64], Tensor[(14, 5, 2), float64]) {
  %444 = cast(%var_4409, dtype="float64") /* ty=Tensor[(54, 2), float64] */;
  %445 = cast(%var_4409, dtype="float64") /* ty=Tensor[(54, 2), float64] */;
  %446 = reshape(%444, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %447 = reshape(%445, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %448 = @func_4140(%446, %447) /* ty=Tensor[(3, 12, 3), float64] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %450 = @func_1141() /* ty=Tensor[(14, 5, 2), float32] */;
  %451 = acos(%449) /* ty=Tensor[(3, 12, 3), float64] */;
  %452 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%450, %var_4409, %451, %452)
}

def @func_7550() -> (Tensor[(14, 5, 2), uint16],) {
  %454 = fn () -> (Tensor[(14, 5, 2), uint16],) {
    %453 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
    (%453,)
  };
  %454() /* ty=(Tensor[(14, 5, 2), uint16],) */
}

def @func_9831(%var_9829: Tensor[(2100), float64], %var_9830: Tensor[(1690, 1), uint64]) -> (Tensor[(3, 2, 5), int32], Tensor[(14, 5, 2), float64], Tensor[(2100), float64], Tensor[(1690, ?), uint16]) {
  @func_9827(%var_9829, %var_9830) /* ty=(Tensor[(3, 2, 5), int32], Tensor[(14, 5, 2), float64], Tensor[(2100), float64], Tensor[(1690, ?), uint16]) */
}

def @func_224(%var_222: Tensor[(500), float32], %var_223: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) {
  @func_220(%var_222, %var_223) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */
}

def @func_7147() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %455 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %456 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %457 = %456.1;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %459 = reshape(%458, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %460 = @func_6771(%459) /* ty=(Tensor[(14, 5, 2), bool],) */;
  %461 = %455.1;
  %462 = %460.0;
  %463 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
  (%461, %457, %462, %463)
}

def @func_81(%var_60: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) {
  %464 = cast(%var_60, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
  %465 = cast(%var_60, dtype="float64") /* ty=Tensor[(10, 10, 5), float64] */;
  %466 = cosh(%464) /* ty=Tensor[(10, 10, 5), float32] */;
  %467 = asin(%465) /* ty=Tensor[(10, 10, 5), float64] */;
  (%466, %467)
}

def @func_3496() -> Tensor[(14, 5, 2), float32] {
  @func_1964() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_3931() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %468 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %469 = @func_3221() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %470 = %468.2;
  %471 = %469.0;
  (%470, %471)
}

def @func_2919() -> (Tensor[(14, 5, 2), float64],) {
  %472 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %473 = %472.1;
  (%473,)
}

def @func_1795() -> (Tensor[(14, 5, 2), bool],) {
  @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */
}

def @func_2362() -> Tensor[(14, 5, 2), float32] {
  %474 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %474.3
}

def @func_5288() -> Tensor[(14, 5, 2), float32] {
  @func_5286() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_1774() -> (Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */
}

def @func_5524() -> Tensor[(16, 9, 10), bool] {
  @func_5522() /* ty=Tensor[(16, 9, 10), bool] */
}

def @func_6154(%var_6152: Tensor[(7, 5, 8), float64]) -> (Tensor[(7, 5, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 5, 8), float64]) {
  @func_6151(%var_6152) /* ty=(Tensor[(7, 5, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 5, 8), float64]) */
}

def @func_6985() -> (Tensor[(14, 5, 2), float64],) {
  %475 = @func_5550() /* ty=Tensor[(14, 5, 2), float64] */;
  (%475,)
}

def @func_7255(%var_7253: Tensor[(10, 1, 15), uint16], %var_7254: Tensor[(10, 15, 15), uint16]) -> (Tensor[(10, 15, 15), bool], Tensor[(14, 5, 2), float64]) {
  @func_7251(%var_7253, %var_7254) /* ty=(Tensor[(10, 15, 15), bool], Tensor[(14, 5, 2), float64]) */
}

def @func_5936() -> Tensor[(14, 5, 2), float64] {
  @func_5934() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_2402() -> (Tensor[(14, 5, 2), float32],) {
  @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_10219() -> (Tensor[(14, 5, 2), float64],) {
  %476 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %477 = %476.2;
  (%477,)
}

def @func_3498() -> Tensor[(14, 5, 2), float32] {
  @func_3496() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_6974() -> (Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) {
  @func_6972() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) */
}

def @func_2834(%var_2833: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), uint8]) {
  %487 = fn (%var_2819: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), uint8]) {
    %478 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
    %479 = @func_1858() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %480 = %479.0;
    %481 = cast(%var_2819, dtype="uint8") /* ty=Tensor[(14, 5, 2), uint8] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%480, dtype="uint8") /* ty=Tensor[(14, 5, 2), uint8] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %485 = %478.0;
    %486 = multiply(%483, %484) /* ty=Tensor[(14, 5, 2), uint8] */;
    (%485, %486)
  };
  %487(%var_2833) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), uint8]) */
}

def @func_4640() -> Tensor[(14, 5, 2), float32] {
  %488 = fn () -> Tensor[(14, 5, 2), float32] {
    @func_3496() /* ty=Tensor[(14, 5, 2), float32] */
  };
  %488() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_6771(%var_6764: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), bool],) {
  %489 = @func_5323() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %490 = %489.0;
  %491 = cast(%var_6764, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = logical_or(%493, %494) /* ty=Tensor[(14, 5, 2), bool] */;
  (%495,)
}

def @func_5552() -> Tensor[(14, 5, 2), float64] {
  @func_5550() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_3573() -> Tensor[(14, 5, 2), float64] {
  @func_3571() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_2873() -> (Tensor[(14, 5, 2), bool],) {
  @func_2871() /* ty=(Tensor[(14, 5, 2), bool],) */
}

def @func_8630() -> Tensor[(14, 5, 2), float32] {
  @func_8628() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_7300(%var_7298: Tensor[(2, 14, 1), float64], %var_7299: Tensor[(2, 14, 7), float64]) -> (Tensor[(2, 14, 7), float64], Tensor[(14, 5, 2), float64]) {
  %501 = fn (%var_7276: Tensor[(2, 14, 1), float64], %var_7277: Tensor[(2, 14, 7), float64]) -> (Tensor[(2, 14, 7), float64], Tensor[(14, 5, 2), float64]) {
    %496 = cast(%var_7276, dtype="float64") /* ty=Tensor[(2, 14, 1), float64] */;
    %497 = cast(%var_7277, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
    %498 = @func_4653() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %499 = floor_mod(%496, %497) /* ty=Tensor[(2, 14, 7), float64] */;
    %500 = %498.0;
    (%499, %500)
  };
  %501(%var_7298, %var_7299) /* ty=(Tensor[(2, 14, 7), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_8805() -> Tensor[(14, 5, 2), uint16] {
  %503 = fn () -> Tensor[(14, 5, 2), uint16] {
    %502 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
    %502.0
  };
  %503() /* ty=Tensor[(14, 5, 2), uint16] */
}

def @func_6870() -> Tensor[(16, 9, 10), bool] {
  %505 = fn () -> Tensor[(16, 9, 10), bool] {
    %504 = @func_6345() /* ty=(Tensor[(16, 9, 10), bool],) */;
    %504.0
  };
  %505() /* ty=Tensor[(16, 9, 10), bool] */
}

def @func_6151(%var_6138: Tensor[(7, 5, 8), float64]) -> (Tensor[(7, 5, 8), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 5, 8), float64]) {
  %506 = cast(%var_6138, dtype="float64") /* ty=Tensor[(7, 5, 8), float64] */;
  %507 = cast(%var_6138, dtype="float64") /* ty=Tensor[(7, 5, 8), float64] */;
  %508 = cosh(%506) /* ty=Tensor[(7, 5, 8), float64] */;
  %509 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
  %510 = acos(%507) /* ty=Tensor[(7, 5, 8), float64] */;
  (%508, %509, %510)
}

def @func_3298() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %516 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
    %511 = @func_2319() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) */;
    %512 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %513 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %514 = %511.1;
    %515 = %512.1;
    (%513, %514, %515)
  };
  %516() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */
}

def @func_9324() -> (Tensor[(14, 5, 2), float32],) {
  %517 = @func_7591() /* ty=Tensor[(14, 5, 2), float32] */;
  (%517,)
}

def @func_10009() -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), bool]) {
  %522 = fn () -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), bool]) {
    %518 = @func_7549() /* ty=(Tensor[(14, 5, 2), uint16],) */;
    %519 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
    %520 = %518.0;
    %521 = %519.0;
    (%520, %521)
  };
  %522() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), bool]) */
}

def @func_3700() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_3698() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_5823() -> (Tensor[(14, 5, 2), float64],) {
  %525 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %523 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %524 = %523.1;
    (%524,)
  };
  %525() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_5917() -> (Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) {
  %534 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) {
    %526 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %527 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 500), float32] */, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
    %528 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 500), float32] */, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
    %529 = reshape(%527, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %530 = reshape(%528, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %531 = @func_220(%529, %530) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
    %532 = %526.0;
    %533 = %531.3;
    (%532, %533, meta[relay.Constant][18] /* ty=Tensor[(1, 500), float32] */)
  };
  %534() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) */
}

def @func_542() -> Tensor[(14, 5, 2), float32] {
  %536 = fn () -> Tensor[(14, 5, 2), float32] {
    %535 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %535.0
  };
  %536() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_1793() -> (Tensor[(14, 5, 2), bool],) {
  %537 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  (%537,)
}

def @func_9737() -> Tensor[(14, 5, 2), float64] {
  @func_9735() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_5369() -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %540 = fn () -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
    %538 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
    %539 = @func_5311() /* ty=Tensor[(14, 5, 2), float32] */;
    (%538, %539)
  };
  %540() /* ty=(Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */
}

def @func_7700() -> (Tensor[(14, 5, 2), float64],) {
  %543 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %541 = @func_6078() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %542 = %541.1;
    (%542,)
  };
  %543() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_5134(%var_5096: Tensor[(3, 36), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) {
  %544 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %545 = cast(%var_5096, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %546 = cast(%var_5096, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %547 = reshape(%545, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %548 = reshape(%546, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float64] */;
  %549 = @func_4140(%547, %548) /* ty=Tensor[(3, 12, 3), float64] */;
  %550 = cast(%var_5096, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = cast(%549, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %555 = shape_of(%var_5096, dtype="int32") /* ty=Tensor[(2), int32] */;
  %556 = cast(%var_5096, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %558 = @func_4509() /* ty=Tensor[(14, 5, 2), float32] */;
  %559 = %544.0;
  %560 = floor_mod(%552, %553) /* ty=Tensor[(3, 12, 3), float32] */;
  %561 = less_equal(%556, %557) /* ty=Tensor[(3, 36), bool] */;
  %562 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  (%558, %559, %560, %561, %562)
}

def @func_8690() -> (Tensor[(14, 5, 2), float32],) {
  @func_8688() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_7956() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) {
  @func_7954() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) */
}

def @func_8086() -> Tensor[(14, 5, 2), float32] {
  %563 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %563.0
}

def @func_7394() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %564 = @func_6693() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) */;
  %565 = @func_5059() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %566 = %564.0;
  %567 = %565.0;
  (%566, %567)
}

def @func_8088() -> Tensor[(14, 5, 2), float32] {
  @func_8086() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_1238() -> (Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_9470() -> Tensor[(14, 5, 2), float32] {
  %569 = fn () -> Tensor[(14, 5, 2), float32] {
    %568 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %568.3
  };
  %569() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_5801(%var_5799: Tensor[(16, 13, 13), float64], %var_5800: Tensor[(16, 13, 13), float64]) -> Tensor[(16, 13, 13), uint16] {
  %576 = fn (%var_5790: Tensor[(16, 13, 13), float64], %var_5794: Tensor[(16, 13, 13), float64]) -> Tensor[(16, 13, 13), uint16] {
    %570 = cast(%var_5790, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
    %571 = atanh(%570) /* ty=Tensor[(16, 13, 13), float64] */;
    %572 = cast(%var_5794, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%574, %575) /* ty=Tensor[(16, 13, 13), uint16] */
  };
  %576(%var_5799, %var_5800) /* ty=Tensor[(16, 13, 13), uint16] */
}

def @func_4597() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %583 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %577 = @func_4314() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %578 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %579 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %580 = %577.0;
    %581 = %578.0;
    %582 = %579.0;
    (%580, %581, %582)
  };
  %583() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_1772() -> (Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %584 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %585 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %586 = %584.1;
  %587 = %585.0;
  (%586, %587)
}

def @func_5324() -> (Tensor[(14, 5, 2), float32],) {
  %590 = fn () -> (Tensor[(14, 5, 2), float32],) {
    %588 = @func_1502() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %589 = %588.0;
    (%589,)
  };
  %590() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_3356() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %595 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
    %591 = @func_2093() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %592 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %593 = %591.0;
    %594 = %592.1;
    (%593, %594)
  };
  %595() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_7681() -> Tensor[(14, 5, 2), float32] {
  %597 = fn () -> Tensor[(14, 5, 2), float32] {
    %596 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %596.1
  };
  %597() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_10221() -> (Tensor[(14, 5, 2), float64],) {
  @func_10219() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_7038() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %604 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %598 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %599 = @func_6919() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %600 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %601 = %598.0;
    %602 = %599.0;
    %603 = %600.0;
    (%601, %602, %603)
  };
  %604() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_577() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %610 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
    %605 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %606 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %607 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %608 = %605.0;
    %609 = %606.0;
    (%607, %608, %609)
  };
  %610() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_5137(%var_5135: Tensor[(3, 36), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) {
  @func_5134(%var_5135) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) */
}

def @func_7724() -> Tensor[(14, 5, 2), int64] {
  %612 = fn () -> Tensor[(14, 5, 2), int64] {
    %611 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %611.0
  };
  %612() /* ty=Tensor[(14, 5, 2), int64] */
}

def @func_1964() -> Tensor[(14, 5, 2), float32] {
  %613 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %613.1
}

def @func_5035(%var_5020: Tensor[(6, 13, 10), float64]) -> (Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) {
  %614 = cast(-2.23143f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %615 = cast(%var_5020, dtype="float64") /* ty=Tensor[(6, 13, 10), float64] */;
  %616 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %617 = mod(%614, %615) /* ty=Tensor[(6, 13, 10), float64] */;
  %618 = %616.1;
  (%617, %618)
}

def @func_5751(%var_5750: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %631 = fn (%var_5734: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
    %619 = @func_1858() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %620 = cast(%var_5734, dtype="float64") /* ty=float64 */;
    %621 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %622 = reshape(%620, newshape=[]) /* ty=float64 */;
    %623 = reshape(%621, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %624 = @func_1338(%622, %623) /* ty=(Tensor[(16, 10, 3), bool],) */;
    %625 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %626 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %627 = %619.1;
    %628 = %624.0;
    %629 = %625.1;
    %630 = %626.1;
    (%627, %628, %var_5734, meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, %629, %630)
  };
  %631(%var_5750) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_5934() -> Tensor[(14, 5, 2), float64] {
  %632 = @func_4155() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %632.0
}

def @func_7214() -> (Tensor[(14, 5, 2), float64],) {
  %634 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %633 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_10157() -> Tensor[(14, 5, 2), float32] {
  %635 = @func_3084() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %635.1
}

def @func_8238(%var_8207: Tensor[(14, 3, 14), float64], %var_8226: Tensor[(150), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(15, 2, 5), float64], Tensor[(150), float64]) {
  %636 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %637 = shape_of(%var_8207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%var_8207, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %640 = cast(%var_8226, dtype="float64") /* ty=Tensor[(150), float64] */;
  %641 = reshape(%640, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %642 = @func_3413(%641) /* ty=(Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) */;
  %643 = floor_mod(%638, %639) /* ty=Tensor[(14, 3, 14), float64] */;
  %644 = %642.0;
  (%643, %644, %var_8226)
}

def @func_8582() -> Tensor[(14, 5, 2), float32] {
  %646 = fn () -> Tensor[(14, 5, 2), float32] {
    %645 = @func_6885() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %645.1
  };
  %646() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8255(%var_8253: uint64) -> (Tensor[(15, 10, 15), bool],) {
  @func_8252(%var_8253) /* ty=(Tensor[(15, 10, 15), bool],) */
}

def @func_8688() -> (Tensor[(14, 5, 2), float32],) {
  %647 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %648 = %647.1;
  (%648,)
}

def @func_9182() -> (Tensor[(1, 500), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  @func_9180() /* ty=(Tensor[(1, 500), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_6693() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) {
  %649 = @func_4854() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %650 = cast(meta[relay.Constant][21] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %651 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  %652 = cast(%651, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %653 = reshape(%650, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %654 = reshape(%652, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %655 = @func_2770(%653, %654) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %656 = %649.0;
  %657 = %655.1;
  (%651, %656, %657, meta[relay.Constant][21] /* ty=Tensor[(308), float32] */)
}

def @func_1702() -> Tensor[(14, 5, 2), float64] {
  %659 = fn () -> Tensor[(14, 5, 2), float64] {
    %658 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %658.0
  };
  %659() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_8857(%var_8855: uint64, %var_8856: Tensor[(3, 13, 13), uint64]) -> (Tensor[(3, 13, 13), uint64],) {
  %663 = fn (%var_8848: uint64, %var_8849: Tensor[(3, 13, 13), uint64]) -> (Tensor[(3, 13, 13), uint64],) {
    %660 = cast(%var_8848, dtype="uint64") /* ty=uint64 */;
    %661 = cast(%var_8849, dtype="uint64") /* ty=Tensor[(3, 13, 13), uint64] */;
    %662 = add(%660, %661) /* ty=Tensor[(3, 13, 13), uint64] */;
    (%662,)
  };
  %663(%var_8855, %var_8856) /* ty=(Tensor[(3, 13, 13), uint64],) */
}

def @func_4441(%var_4439: Tensor[(54, 2), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(54, 2), float64], Tensor[(3, 12, 3), float64], Tensor[(14, 5, 2), float64]) {
  @func_4438(%var_4439) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(54, 2), float64], Tensor[(3, 12, 3), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_1013() -> Tensor[(14, 5, 2), bool] {
  %670 = fn () -> Tensor[(14, 5, 2), bool] {
    %664 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %665 = %664.0;
    %666 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 5, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%665, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%668, %669) /* ty=Tensor[(14, 5, 2), bool] */
  };
  %670() /* ty=Tensor[(14, 5, 2), bool] */
}

def @func_1201() -> Tensor[(14, 5, 2), float64] {
  @func_1199() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_3169() -> (Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) {
  %671 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %672 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %673 = reshape(%671, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %674 = reshape(%672, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %675 = @func_798(%673, %674) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %676 = %675.1;
  %677 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %681 = @func_1701() /* ty=Tensor[(14, 5, 2), float64] */;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %683 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %684 = cast(9.15759f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %685 = cast(meta[relay.Constant][24] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %686 = reshape(%684, newshape=[]) /* ty=float64 */;
  %687 = reshape(%685, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %688 = @func_1338(%686, %687) /* ty=(Tensor[(16, 10, 3), bool],) */;
  %689 = bitwise_xor(%679, %680) /* ty=Tensor[(9, 5, 4), uint32] */;
  %690 = log10(%682) /* ty=Tensor[(14, 5, 2), float64] */;
  %691 = %683.2;
  %692 = %688.0;
  (%689, %690, %691, %692, 9.15759f64 /* ty=float64 */, meta[relay.Constant][24] /* ty=Tensor[(480), float64] */)
}

def @func_4283() -> (Tensor[(4, 12, 16), int16], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %693 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int16") /* ty=Tensor[(4, 12, 16), int16] */;
  %694 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 12, 16), int16] */, dtype="int16") /* ty=Tensor[(4, 12, 16), int16] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %697 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %700 = reshape(%699, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), float32] */;
  %701 = @func_1426(%700) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */;
  %702 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %703 = minimum(%695, %696) /* ty=Tensor[(4, 12, 16), int16] */;
  %704 = %701.5;
  %705 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  %706 = %702.0;
  (%703, %698, %704, %705, %706)
}

def @func_4122() -> (Tensor[(14, 5, 2), float64],) {
  @func_4120() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_7149() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  @func_7147() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */
}

def @func_9180() -> (Tensor[(1, 500), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %707 = @func_8833() /* ty=(Tensor[(1, 500), float32],) */;
  %708 = @func_3207() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %709 = %707.0;
  %710 = %708.0;
  %711 = @func_5286() /* ty=Tensor[(14, 5, 2), float32] */;
  (%709, %710, %711)
}

def @func_5174() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %712 = @func_1141() /* ty=Tensor[(14, 5, 2), float32] */;
  %713 = @func_4639() /* ty=Tensor[(14, 5, 2), float32] */;
  %714 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  (%712, %713, %714)
}

def @func_8013() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(25, 6), float64]) {
  %720 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(25, 6), float64]) {
    %715 = cast(meta[relay.Constant][27] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %716 = reshape(%715, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
    %717 = @func_3413(%716) /* ty=(Tensor[(15, 2, 5), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool]) */;
    %718 = @func_5550() /* ty=Tensor[(14, 5, 2), float64] */;
    %719 = %717.1;
    (%718, %719, meta[relay.Constant][27] /* ty=Tensor[(25, 6), float64] */)
  };
  %720() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(25, 6), float64]) */
}

def @func_9827(%var_9789: Tensor[(2100), float64], %var_9814: Tensor[(1690, 1), uint64]) -> (Tensor[(3, 2, 5), int32], Tensor[(14, 5, 2), float64], Tensor[(2100), float64], Tensor[(1690, ?), uint16]) {
  %721 = @func_7088() /* ty=(Tensor[(3, 2, 5), int32],) */;
  %722 = cast(%var_9789, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %723 = reshape(%722, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %724 = @func_9523(%723) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) */;
  %725 = cast(%var_9814, dtype="uint64") /* ty=Tensor[(1690, 1), uint64] */;
  %726 = cast(%var_9814, dtype="uint64") /* ty=Tensor[(1690, 1), uint64] */;
  %727 = reshape(%725, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), uint64] */;
  %728 = reshape(%726, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), uint64] */;
  %729 = @func_5879(%727, %728) /* ty=(Tensor[(13, 10, 13), uint64],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="uint16") /* ty=Tensor[(13, 10, 13), uint16] */;
  %732 = shape_of(%var_9814, dtype="int32") /* ty=Tensor[(2), int32] */;
  %733 = cast(%var_9814, dtype="uint16") /* ty=Tensor[(1690, 1), uint16] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %735 = %721.0;
  %736 = %724.3;
  %737 = bitwise_xor(%733, %734) /* ty=Tensor[(1690, ?), uint16] */;
  (%735, %736, %var_9789, %737)
}

def @func_2871() -> (Tensor[(14, 5, 2), bool],) {
  %738 = @func_2362() /* ty=Tensor[(14, 5, 2), float32] */;
  %739 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %742 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%738, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %745 = greater_equal(%743, %744) /* ty=Tensor[(14, 5, 2), bool] */;
  (%745,)
}

def @func_7954() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool]) {
  %746 = @func_7213() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %747 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
  %748 = %746.0;
  %749 = %747.0;
  (%748, %749)
}

def @func_801(%var_799: Tensor[(9, 5, 4), float64], %var_800: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) {
  %762 = fn (%var_770: Tensor[(9, 5, 4), float64], %var_771: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) {
    %750 = cast(%var_771, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
    %751 = shape_of(%var_770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%var_770, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %754 = cast(%var_770, dtype="int16") /* ty=Tensor[(9, 5, 4), int16] */;
    %755 = shape_of(%var_771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%var_771, dtype="int16") /* ty=Tensor[(9, 5, 4), int16] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %758 = @func_486() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %759 = divide(%752, %753) /* ty=Tensor[(9, 5, 4), float64] */;
    %760 = left_shift(%756, %757) /* ty=Tensor[(9, 5, 4), int16] */;
    %761 = %758.0;
    (%759, %760, %761)
  };
  %762(%var_799, %var_800) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */
}

def @func_2093() -> (Tensor[(14, 5, 2), float64],) {
  %763 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%763,)
}

def @func_6080() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  @func_6078() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */
}

def @func_2038() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
  %769 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) {
    %764 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
    %765 = cast(%764, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %766 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
    %767 = erf(%765) /* ty=Tensor[(14, 5, 2), float32] */;
    %768 = %766.0;
    (%767, %768)
  };
  %769() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */
}

def @func_1517() -> (Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */
}

def @func_5522() -> Tensor[(16, 9, 10), bool] {
  %770 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %773 = log10(%772) /* ty=Tensor[(16, 9, 10), float64] */;
  %774 = cast(%773, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %775 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%771, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%776, %777) /* ty=Tensor[(16, 9, 10), bool] */
}

def @func_4685() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %778 = @func_4155() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %779 = @func_3698() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %780 = %779.1;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %782 = %778.0;
  %783 = asinh(%781) /* ty=Tensor[(14, 5, 2), float32] */;
  (%782, %783)
}

def @func_668() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %784 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %785 = %784.0;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %787 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %788 = atan(%786) /* ty=Tensor[(14, 5, 2), float64] */;
  %789 = %787.1;
  (%788, %789)
}

def @func_7163(%var_7161: uint16, %var_7162: Tensor[(8, 13, 11), uint16]) -> Tensor[(8, 13, 11), bool] {
  @func_7159(%var_7161, %var_7162) /* ty=Tensor[(8, 13, 11), bool] */
}

def @func_9892() -> Tensor[(14, 5, 2), float32] {
  %790 = @func_8455() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) */;
  %790.0
}

def @func_5038(%var_5036: Tensor[(6, 13, 10), float64]) -> (Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) {
  @func_5035(%var_5036) /* ty=(Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_9984() -> Tensor[(14, 5, 2), float64] {
  %792 = fn () -> Tensor[(14, 5, 2), float64] {
    %791 = @func_6242() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %791.2
  };
  %792() /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_8833() -> (Tensor[(1, 500), float32],) {
  %793 = @func_5916() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(500), bool], Tensor[(1, 500), float32]) */;
  %794 = %793.2;
  (%794,)
}

def @func_9509() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool], Tensor[(48), float64], Tensor[(14, 5, 2), float32]) {
  %805 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool], Tensor[(48), float64], Tensor[(14, 5, 2), float32]) {
    %795 = @func_5441() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %796 = @func_2919() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %797 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %798 = reshape(%797, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float64] */;
    %799 = @func_7507(%798) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
    %800 = @func_7147() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */;
    %801 = %795.0;
    %802 = %796.0;
    %803 = %799.2;
    %804 = %800.1;
    (%801, %802, %803, meta[relay.Constant][28] /* ty=Tensor[(48), float64] */, %804)
  };
  %805() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), bool], Tensor[(48), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_8835() -> (Tensor[(1, 500), float32],) {
  @func_8833() /* ty=(Tensor[(1, 500), float32],) */
}

def @func_5883(%var_5881: Tensor[(13, 10, 13), uint64], %var_5882: Tensor[(13, 10, 13), uint64]) -> (Tensor[(13, 10, 13), uint64],) {
  @func_5879(%var_5881, %var_5882) /* ty=(Tensor[(13, 10, 13), uint64],) */
}

def @func_9326() -> (Tensor[(14, 5, 2), float32],) {
  @func_9324() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_8456() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) {
  %808 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) {
    %806 = @func_1964() /* ty=Tensor[(14, 5, 2), float32] */;
    %807 = @func_6125() /* ty=Tensor[(14, 5, 2), uint16] */;
    (%806, %807)
  };
  %808() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16]) */
}

def @func_6611(%var_6609: Tensor[(12, 13, 10), float64]) -> (Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) {
  @func_6608(%var_6609) /* ty=(Tensor[(12, 13, 10), int8], Tensor[(14, 5, 2), uint16]) */
}

def @func_9137(%var_9135: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), bool], Tensor[(10, 10, 5), float64]) {
  @func_9134(%var_9135) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(7, 14, 4), float32], Tensor[(14, 5, 2), bool], Tensor[(10, 10, 5), float64]) */
}

def @func_5176() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  @func_5174() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_764(%var_763: Tensor[(1, 500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) {
  %824 = fn (%var_739: Tensor[(1, 500), float32]) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) {
    %809 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %810 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %811 = cast(%var_739, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
    %812 = cast(%var_739, dtype="float32") /* ty=Tensor[(1, 500), float32] */;
    %813 = reshape(%811, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %814 = reshape(%812, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %815 = @func_220(%813, %814) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
    %816 = %815.2;
    %817 = cast(%var_739, dtype="bool") /* ty=Tensor[(1, 500), bool] */;
    %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
    %819 = cast(%816, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %821 = %809.1;
    %822 = %810.0;
    %823 = greater(%819, %820) /* ty=Tensor[(10, 10, 5), bool] */;
    (%821, %822, %823)
  };
  %824(%var_763) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), bool]) */
}

def @func_3747() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
  %830 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) {
    %825 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
    %826 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %827 = %825.0;
    %828 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %829 = %826.1;
    (%827, %828, %829)
  };
  %830() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */
}

def @func_6695() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) {
  @func_6693() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), bool], Tensor[(308), float32]) */
}

def @func_4900(%var_4898: Tensor[(500), float32]) -> (Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) {
  @func_4897(%var_4898) /* ty=(Tensor[(14, 5, 2), float64], Tensor[(10, 10, 5), bool], Tensor[(500), float32]) */
}

def @func_84(%var_82: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) {
  @func_81(%var_82) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(10, 10, 5), float64]) */
}

def @func_2774(%var_2772: Tensor[(4, 7, 11), float32], %var_2773: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  @func_2770(%var_2772, %var_2773) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_5061() -> (Tensor[(14, 5, 2), float32],) {
  @func_5059() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_8242(%var_8240: Tensor[(14, 3, 14), float64], %var_8241: Tensor[(150), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(15, 2, 5), float64], Tensor[(150), float64]) {
  @func_8238(%var_8240, %var_8241) /* ty=(Tensor[(14, 3, 14), float64], Tensor[(15, 2, 5), float64], Tensor[(150), float64]) */
}

def @func_7886() -> Tensor[(14, 5, 2), bool] {
  %832 = fn () -> Tensor[(14, 5, 2), bool] {
    %831 = @func_1793() /* ty=(Tensor[(14, 5, 2), bool],) */;
    %831.0
  };
  %832() /* ty=Tensor[(14, 5, 2), bool] */
}

def @func_7509(%var_7508: Tensor[(4, 3, 4), float64]) -> (Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
  %840 = fn (%var_7492: Tensor[(4, 3, 4), float64]) -> (Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) {
    %833 = cast(%var_7492, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
    %834 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %835 = @func_6885() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %836 = log2(%833) /* ty=Tensor[(4, 3, 4), float64] */;
    %837 = %834.0;
    %838 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
    %839 = %835.1;
    (%836, %837, %838, %839)
  };
  %840(%var_7508) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float32]) */
}

def @func_9974() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(18, 6), float64]) {
  %841 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %842 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 6), float64] */, dtype="float64") /* ty=Tensor[(18, 6), float64] */;
  %843 = reshape(%842, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %844 = @func_5134(%843) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), int64], Tensor[(3, 12, 3), float32], Tensor[(3, 36), bool], Tensor[(14, 5, 2), float64]) */;
  %845 = %841.0;
  %846 = %844.4;
  (%845, %846, meta[relay.Constant][29] /* ty=Tensor[(18, 6), float64] */)
}

def @func_8953() -> (Tensor[(14, 5, 2), float64],) {
  @func_8951() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_9584(%var_9582: int32, %var_9583: Tensor[(1, 15, 14), int32]) -> (Tensor[(14, 5, 2), bool], Tensor[(?, 15, 14), int32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float64]) {
  @func_9580(%var_9582, %var_9583) /* ty=(Tensor[(14, 5, 2), bool], Tensor[(?, 15, 14), int32], Tensor[(16, 13, 13), uint16], Tensor[(2704), float64]) */
}

def @func_9615(%var_9614: Tensor[(5, 9, 7), int32]) -> Tensor[(5, 9, 7), int32] {
  %851 = fn (%var_9608: Tensor[(5, 9, 7), int32]) -> Tensor[(5, 9, 7), int32] {
    %847 = cast(%var_9608, dtype="int32") /* ty=Tensor[(5, 9, 7), int32] */;
    %848 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(5, 9, 7), int32] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    left_shift(%849, %850) /* ty=Tensor[(5, 9, 7), int32] */
  };
  %851(%var_9614) /* ty=Tensor[(5, 9, 7), int32] */
}

def @func_1567(%var_1558: Tensor[(14, 5, 2), uint16]) -> (Tensor[(14, 5, 2), bool],) {
  %852 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %853 = %852.0;
  %854 = cast(%var_1558, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = less(%856, %857) /* ty=Tensor[(14, 5, 2), bool] */;
  (%858,)
}

def @func_8938() -> Tensor[(14, 5, 2), float32] {
  %860 = fn () -> Tensor[(14, 5, 2), float32] {
    %859 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %859.0
  };
  %860() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_10113() -> (Tensor[(16, 9, 10), float32], Tensor[(3, 2, 5), int32]) {
  %861 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %862 = %861.0;
  %863 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 9, 10), float64] */, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %867 = @func_7088() /* ty=(Tensor[(3, 2, 5), int32],) */;
  %868 = floor_mod(%865, %866) /* ty=Tensor[(16, 9, 10), float32] */;
  %869 = %867.0;
  (%868, %869)
}

def @func_5984(%var_5983: Tensor[(16, 1, 8), float32]) -> (Tensor[(16, 1, 8), float32], Tensor[(6, 13, 10), float64], Tensor[(780), float64]) {
  %876 = fn (%var_5965: Tensor[(16, 1, 8), float32]) -> (Tensor[(16, 1, 8), float32], Tensor[(6, 13, 10), float64], Tensor[(780), float64]) {
    %870 = cast(%var_5965, dtype="float32") /* ty=Tensor[(16, 1, 8), float32] */;
    %871 = cast(meta[relay.Constant][32] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
    %872 = reshape(%871, newshape=[6, 13, 10]) /* ty=Tensor[(6, 13, 10), float64] */;
    %873 = @func_5035(%872) /* ty=(Tensor[(6, 13, 10), float64], Tensor[(14, 5, 2), float32]) */;
    %874 = atan(%870) /* ty=Tensor[(16, 1, 8), float32] */;
    %875 = %873.0;
    (%874, %875, meta[relay.Constant][32] /* ty=Tensor[(780), float64] */)
  };
  %876(%var_5983) /* ty=(Tensor[(16, 1, 8), float32], Tensor[(6, 13, 10), float64], Tensor[(780), float64]) */
}

def @func_3698() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %877 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %878 = %877.1;
  %879 = cast(%878, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
  %880 = reshape(%879, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
  %881 = @func_1130(%880) /* ty=(Tensor[(14, 5, 2), uint64],) */;
  %882 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %883 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %884 = reshape(%882, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %885 = reshape(%883, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float64] */;
  %886 = @func_798(%884, %885) /* ty=(Tensor[(9, 5, 4), float64], Tensor[(9, 5, 4), int16], Tensor[(14, 5, 2), float32]) */;
  %887 = @func_2093() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %888 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %889 = %881.0;
  %890 = %886.2;
  %891 = %887.0;
  %892 = %888.1;
  (%878, %889, %890, meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, %891, %892)
}

def @func_5312() -> Tensor[(14, 5, 2), float32] {
  %893 = fn () -> Tensor[(14, 5, 2), float32] {
    @func_1141() /* ty=Tensor[(14, 5, 2), float32] */
  };
  %893() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8438() -> Tensor[(14, 5, 2), float64] {
  %894 = @func_5822() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %895 = %894.0;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  sqrt(%896) /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_4478(%var_4476: Tensor[(12, 9, 5), float32], %var_4477: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 9, 5), float64], Tensor[(14, 5, 2), int64]) {
  %908 = fn (%var_4464: Tensor[(12, 9, 5), float32], %var_4465: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 9, 5), float64], Tensor[(14, 5, 2), int64]) {
    %897 = cast(%var_4465, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
    %898 = shape_of(%var_4464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%var_4464, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %901 = divide(%899, %900) /* ty=Tensor[(12, 9, 5), float32] */;
    %902 = cast(%901, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
    %903 = @func_4095() /* ty=(Tensor[(14, 9, 5), float64],) */;
    %904 = @func_3878() /* ty=(Tensor[(14, 5, 2), int64],) */;
    %905 = asin(%902) /* ty=Tensor[(12, 9, 5), float64] */;
    %906 = %903.0;
    %907 = %904.0;
    (%905, %906, %907)
  };
  %908(%var_4476, %var_4477) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(14, 9, 5), float64], Tensor[(14, 5, 2), int64]) */
}

def @func_6078() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) {
  %909 = @func_4653() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %910 = @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %911 = %909.0;
  %912 = %910.0;
  (%911, %912)
}

def @func_1092() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %913 = @func_639() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %914 = @func_290() /* ty=(Tensor[(14, 5, 2), float64],) */;
  %915 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %916 = @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %917 = %913.1;
  %918 = %914.0;
  %919 = %915.1;
  %920 = %916.0;
  (%917, %918, %919, %920)
}

def @func_2770(%var_2593: Tensor[(4, 7, 11), float32], %var_2670: Tensor[(14, 5, 2), bool]) -> (Tensor[(14, 5, 2), bool], Tensor[(4, 7, 11), bool], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %921 = @func_2037() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
  %922 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %923 = %922.1;
  %924 = cast(%var_2593, dtype="bool") /* ty=Tensor[(4, 7, 11), bool] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%923, dtype="bool") /* ty=Tensor[(4, 7, 11), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = @func_1458() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */;
  %929 = cast(%var_2593, dtype="float32") /* ty=Tensor[(4, 7, 11), float32] */;
  %930 = reshape(%929, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %931 = @func_1169(%930) /* ty=Tensor[(4, 7, 11), float32] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(4, 7, 11), float64] */;
  %933 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(%var_2593, dtype="float64") /* ty=Tensor[(4, 7, 11), float64] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %936 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %937 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %938 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %939 = @func_1012() /* ty=Tensor[(14, 5, 2), bool] */;
  %940 = cast(%var_2670, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %941 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%939, dtype="uint16") /* ty=Tensor[(14, 5, 2), uint16] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %944 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %945 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %946 = %921.1;
  %947 = greater_equal(%926, %927) /* ty=Tensor[(4, 7, 11), bool] */;
  %948 = %928.1;
  %949 = floor_mod(%934, %935) /* ty=Tensor[(4, 7, 11), float64] */;
  %950 = %936.0;
  %951 = %937.0;
  %952 = %938.0;
  %953 = bitwise_xor(%942, %943) /* ty=Tensor[(14, 5, 2), uint16] */;
  %954 = %944.1;
  %955 = %945.0;
  %956 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
  (%946, %947, %948, %949, %950, %951, %952, %953, %954, %955, %956)
}

def @func_1142() -> Tensor[(14, 5, 2), float32] {
  %957 = fn () -> Tensor[(14, 5, 2), float32] {
    @func_541() /* ty=Tensor[(14, 5, 2), float32] */
  };
  %957() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_1459() -> (Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) {
  %962 = fn () -> (Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) {
    %958 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
    %959 = @func_576() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %960 = asin(%958) /* ty=Tensor[(16, 9, 10), float64] */;
    %961 = %959.0;
    (%960, %961)
  };
  %962() /* ty=(Tensor[(16, 9, 10), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_945() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %970 = fn () -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
    %963 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %964 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %965 = cast(%964, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %966 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %967 = %963.0;
    %968 = atanh(%965) /* ty=Tensor[(14, 5, 2), float32] */;
    %969 = %966.0;
    (%967, %968, %969)
  };
  %970() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_2400() -> (Tensor[(14, 5, 2), float32],) {
  %971 = @func_944() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %972 = %971.1;
  (%972,)
}

def @func_5238() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  @func_5236() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */
}

def @func_9523(%var_9516: Tensor[(2100), float64]) -> (Tensor[(14, 5, 2), float32], Tensor[(10, 14, 15), float64], Tensor[(2100), float64], Tensor[(14, 5, 2), float64]) {
  %973 = @func_4854() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %974 = cast(%var_9516, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %975 = reshape(%974, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), float64] */;
  %976 = @func_2169() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %977 = %973.0;
  %978 = @func_8369(%975) /* ty=Tensor[(10, 14, 15), float64] */;
  %979 = %976.1;
  (%977, %978, %var_9516, %979)
}

def @func_2321() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) {
  @func_2319() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32], Tensor[(4, 7, 11), float32]) */
}

def @func_261() -> (Tensor[(14, 5, 2), float32],) {
  @func_259() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_1305(%var_1303: Tensor[(308), float32]) -> (Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  @func_1302(%var_1303) /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */
}

def @func_9735() -> Tensor[(14, 5, 2), float64] {
  %980 = @func_668() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
  %980.0
}

def @func_1515() -> (Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) {
  %981 = @func_1284() /* ty=(Tensor[(14, 5, 2), uint16],) */;
  %982 = cast(meta[relay.Constant][35] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %983 = reshape(%982, newshape=[4, 7, 11]) /* ty=Tensor[(4, 7, 11), float32] */;
  %984 = %981.0;
  %985 = @func_1169(%983) /* ty=Tensor[(4, 7, 11), float32] */;
  (%984, %985, meta[relay.Constant][35] /* ty=Tensor[(308), float32] */)
}

def @func_1428(%var_1427: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) {
  %1010 = fn (%var_1348: Tensor[(14, 5, 2), float32]) -> (Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) {
    %986 = @func_541() /* ty=Tensor[(14, 5, 2), float32] */;
    %987 = cast(%var_1348, dtype="int32") /* ty=Tensor[(14, 5, 2), int32] */;
    %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%986, dtype="int32") /* ty=Tensor[(14, 5, 2), int32] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %991 = cast(%var_1348, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
    %992 = acos(%991) /* ty=Tensor[(14, 5, 2), float64] */;
    %993 = cast(%992, dtype="bool") /* ty=Tensor[(14, 5, 2), bool] */;
    %994 = reshape(%993, newshape=[14, 5, 2]) /* ty=Tensor[(14, 5, 2), bool] */;
    %995 = @func_1130(%994) /* ty=(Tensor[(14, 5, 2), uint64],) */;
    %996 = cast(%992, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
    %997 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 308), float32] */, dtype="float32") /* ty=Tensor[(1, 308), float32] */;
    %998 = reshape(%997, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %999 = @func_1302(%998) /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(14, 5, 2), float64], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
    %1000 = cast(meta[relay.Constant][37] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %1001 = cast(meta[relay.Constant][37] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %1002 = reshape(%1000, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %1003 = reshape(%1001, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %1004 = @func_220(%1002, %1003) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(10, 10, 5), float64], Tensor[(500), bool]) */;
    %1005 = right_shift(%989, %990) /* ty=Tensor[(14, 5, 2), int32] */;
    %1006 = %995.0;
    %1007 = log2(%996) /* ty=Tensor[(14, 5, 2), float32] */;
    %1008 = %999.1;
    %1009 = %1004.2;
    (%1005, %1006, %1007, %1008, meta[relay.Constant][36] /* ty=Tensor[(1, 308), float32] */, %1009, meta[relay.Constant][37] /* ty=Tensor[(500), float32] */)
  };
  %1010(%var_1427) /* ty=(Tensor[(14, 5, 2), int32], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(1, 308), float32], Tensor[(10, 10, 5), float64], Tensor[(500), float32]) */
}

def @func_1570(%var_1568: Tensor[(14, 5, 2), uint16]) -> (Tensor[(14, 5, 2), bool],) {
  @func_1567(%var_1568) /* ty=(Tensor[(14, 5, 2), bool],) */
}

def @func_9894() -> Tensor[(14, 5, 2), float32] {
  @func_9892() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_8951() -> (Tensor[(14, 5, 2), float64],) {
  %1011 = @func_3470() /* ty=Tensor[(14, 5, 2), float64] */;
  (%1011,)
}

def @func_9304() -> (Tensor[(14, 5, 2), float64],) {
  %1014 = fn () -> (Tensor[(14, 5, 2), float64],) {
    %1012 = @func_5009() /* ty=(Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) */;
    %1013 = %1012.2;
    (%1013,)
  };
  %1014() /* ty=(Tensor[(14, 5, 2), float64],) */
}

def @func_8539(%var_8538: Tensor[(7, 6, 2), uint16]) -> (Tensor[(7, 6, 2), uint16], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %1024 = fn (%var_8514: Tensor[(7, 6, 2), uint16]) -> (Tensor[(7, 6, 2), uint16], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
    %1015 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 6, 2), uint16] */;
    %1016 = shape_of(%var_8514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1017 = cast(%var_8514, dtype="uint16") /* ty=Tensor[(7, 6, 2), uint16] */;
    %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1019 = @func_3084() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %1020 = @func_3355() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64]) */;
    %1021 = bitwise_or(%1017, %1018) /* ty=Tensor[(7, 6, 2), uint16] */;
    %1022 = %1019.0;
    %1023 = %1020.1;
    (%1021, %1022, %1023)
  };
  %1024(%var_8538) /* ty=(Tensor[(7, 6, 2), uint16], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_2238(%var_2235: Tensor[(9, 11), float64], %var_2236: Tensor[(9, 11), float64], %var_2237: Tensor[(180), float64]) -> (Tensor[(9, 11), float64], Tensor[(14, 5, 2), uint64], Tensor[(140), bool], Tensor[(9, 5, 4), int16], Tensor[(180), float64]) {
  @func_2233(%var_2235, %var_2236, %var_2237) /* ty=(Tensor[(9, 11), float64], Tensor[(14, 5, 2), uint64], Tensor[(140), bool], Tensor[(9, 5, 4), int16], Tensor[(180), float64]) */
}

def @func_259() -> (Tensor[(14, 5, 2), float32],) {
  %1025 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %1026 = %1025.0;
  (%1026,)
}

def @func_3878() -> (Tensor[(14, 5, 2), int64],) {
  %1027 = @func_1236() /* ty=(Tensor[(14, 5, 2), int64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
  %1028 = %1027.0;
  (%1028,)
}

def @func_10115() -> (Tensor[(16, 9, 10), float32], Tensor[(3, 2, 5), int32]) {
  @func_10113() /* ty=(Tensor[(16, 9, 10), float32], Tensor[(3, 2, 5), int32]) */
}

def @func_7396() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_7394() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_5441() -> (Tensor[(14, 5, 2), float64],) {
  %1029 = @func_1092() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %1030 = %1029.1;
  (%1030,)
}

def @func_167() -> (Tensor[(14, 5, 2), float32],) {
  %1031 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 2), float32] */;
  %1032 = acosh(%1031) /* ty=Tensor[(14, 5, 2), float32] */;
  (%1032,)
}

def @func_487() -> (Tensor[(14, 5, 2), float32],) {
  %1035 = fn () -> (Tensor[(14, 5, 2), float32],) {
    %1033 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
    %1034 = %1033.0;
    (%1034,)
  };
  %1035() /* ty=(Tensor[(14, 5, 2), float32],) */
}

def @func_7592() -> Tensor[(14, 5, 2), float32] {
  %1037 = fn () -> Tensor[(14, 5, 2), float32] {
    %1036 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %1036.0
  };
  %1037() /* ty=Tensor[(14, 5, 2), float32] */
}

def @func_5236() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) {
  %1038 = @func_5174() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
  %1039 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
  %1040 = %1038.1;
  (%1039, %1040)
}

def @func_3933() -> (Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  @func_3931() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_6972() -> (Tensor[(14, 5, 2), int64], Tensor[(16, 9, 10), bool]) {
  %1041 = @func_3878() /* ty=(Tensor[(14, 5, 2), int64],) */;
  %1042 = %1041.0;
  %1043 = @func_5522() /* ty=Tensor[(16, 9, 10), bool] */;
  (%1042, %1043)
}

def @func_5010() -> (Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) {
  %1050 = fn () -> (Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) {
    %1044 = @func_3297() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %1045 = @func_3169() /* ty=(Tensor[(9, 5, 4), uint32], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float64], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64]) */;
    %1046 = @func_4685() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
    %1047 = %1044.2;
    %1048 = %1045.4;
    %1049 = %1046.0;
    (%1047, %1048, %1049)
  };
  %1050() /* ty=(Tensor[(16, 9, 10), float64], float64, Tensor[(14, 5, 2), float64]) */
}

def @func_9776() -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
  %1056 = fn () -> (Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) {
    %1051 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
    %1052 = @func_1595() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32]) */;
    %1053 = %1051.3;
    %1054 = @func_9735() /* ty=Tensor[(14, 5, 2), float64] */;
    %1055 = %1052.0;
    (%1053, %1054, %1055)
  };
  %1056() /* ty=(Tensor[(14, 5, 2), bool], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */
}

def @func_6307() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), uint64], Tensor[(4, 7, 11), float32]) {
  %1057 = @func_167() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %1058 = @func_3698() /* ty=(Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), uint64], Tensor[(14, 5, 2), float32], Tensor[(180), float64], Tensor[(14, 5, 2), float64], Tensor[(14, 5, 2), float32]) */;
  %1059 = @func_1515() /* ty=(Tensor[(14, 5, 2), uint16], Tensor[(4, 7, 11), float32], Tensor[(308), float32]) */;
  %1060 = %1057.0;
  %1061 = %1058.1;
  %1062 = %1059.1;
  (%1060, %1061, %1062)
}

def @func_9456(%var_9455: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], float64, Tensor[(14, 5, 2), float64]) {
  %1073 = fn (%var_9445: float64) -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], float64, Tensor[(14, 5, 2), float64]) {
    %1063 = @func_3858() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), bool]) */;
    %1064 = cast(%var_9445, dtype="float64") /* ty=float64 */;
    %1065 = reshape(%1064, newshape=[]) /* ty=float64 */;
    %1066 = @func_5749(%1065) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 10, 3), bool], float64, Tensor[(480), float64], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */;
    %1067 = @func_8951() /* ty=(Tensor[(14, 5, 2), float64],) */;
    %1068 = %1063.2;
    %1069 = @func_4509() /* ty=Tensor[(14, 5, 2), float32] */;
    %1070 = @func_3496() /* ty=Tensor[(14, 5, 2), float32] */;
    %1071 = %1066.5;
    %1072 = %1067.0;
    (%1068, %1069, %1070, %1071, %var_9445, %1072)
  };
  %1073(%var_9455) /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64], float64, Tensor[(14, 5, 2), float64]) */
}

def @func_7971() -> Tensor[(14, 5, 2), uint16] {
  @func_7969() /* ty=Tensor[(14, 5, 2), uint16] */
}

def @func_4756(%var_4754: Tensor[(16, 9, 10), float64]) -> (Tensor[(4, 7, 11), float64], Tensor[(308), float32], Tensor[(140), bool], Tensor[(16, 9, 10), bool], Tensor[(14, 5, 2), float64]) {
  @func_4753(%var_4754) /* ty=(Tensor[(4, 7, 11), float64], Tensor[(308), float32], Tensor[(140), bool], Tensor[(16, 9, 10), bool], Tensor[(14, 5, 2), float64]) */
}

def @func_2170() -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
  %1077 = fn () -> (Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) {
    %1074 = @func_1772() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(16, 9, 10), float64]) */;
    %1075 = %1074.0;
    %1076 = @func_1199() /* ty=Tensor[(14, 5, 2), float64] */;
    (%1075, %1076)
  };
  %1077() /* ty=(Tensor[(14, 5, 2), float32], Tensor[(14, 5, 2), float64]) */
}

def @func_8280() -> (Tensor[(14, 5, 2), float32],) {
  %1078 = @func_2400() /* ty=(Tensor[(14, 5, 2), float32],) */;
  %1079 = %1078.0;
  (%1079,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen284/build/output.py", line 3657, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

