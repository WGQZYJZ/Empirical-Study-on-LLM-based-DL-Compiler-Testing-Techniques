==========mod==========
#[version = "0.0.5"]
def @func_8715(%var_8700: Tensor[(16, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 12), float32], float32, Tensor[(16, 2), float32]) {
  %0 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %1 = cast(-3.68172f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %2 = cast(%var_8700, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
  %3 = reshape(%1, newshape=[]) /* ty=float32 */;
  %4 = reshape(%2, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), float32] */;
  %5 = @func_3231(%3, %4) /* ty=(Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) */;
  %6 = %0.0;
  %7 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
  %8 = %5.2;
  (%6, %7, %8, -3.68172f /* ty=float32 */, %var_8700)
}

def @func_4611() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %9 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %10 = %9.0;
  %11 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
  (%10, %11)
}

def @func_5542() -> Tensor[(8, 7, 3), uint8] {
  %12 = @func_3259() /* ty=Tensor[(8, 7, 3), float32] */;
  %13 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
  %16 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%12, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%17, %18) /* ty=Tensor[(8, 7, 3), uint8] */
}

def @func_6365() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %19 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %20 = @func_5838() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %21 = %19.0;
  %22 = %20.2;
  (%21, %22)
}

def @func_8571() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %23 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %24 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
  %25 = %23.1;
  (%24, %25)
}

def @func_7820() -> (Tensor[(8, 7, 3), float32],) {
  %26 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %27 = %26.0;
  (%27,)
}

def @func_9062() -> (Tensor[(8, 7, 3), float32],) {
  %28 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %29 = %28.0;
  (%29,)
}

def @func_9496() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %30 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %31 = @func_3579() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %32 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
  %33 = %30.0;
  %34 = %31.0;
  (%32, %33, %34)
}

def @func_6319() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %35 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %36 = @func_5657() /* ty=Tensor[(8, 7, 3), float32] */;
  %37 = %35.1;
  (%36, %37)
}

def @func_7388(%var_7382: uint32, %var_7383: Tensor[(180, 2), uint32]) -> (Tensor[(7, 15, 14), uint8], Tensor[(8, 7, 3), int32], uint32, Tensor[(180, 2), uint32], Tensor[(8, 7, 3), int32]) {
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 14), uint8] */;
  %39 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 14), uint8] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %42 = cast(%var_7382, dtype="uint32") /* ty=uint32 */;
  %43 = cast(%var_7383, dtype="uint32") /* ty=Tensor[(180, 2), uint32] */;
  %44 = reshape(%42, newshape=[]) /* ty=uint32 */;
  %45 = reshape(%43, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
  %46 = @func_1189(%44, %45) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
  %47 = @func_5276() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) */;
  %48 = logical_xor(%40, %41) /* ty=Tensor[(7, 15, 14), uint8] */;
  %49 = %46.1;
  %50 = %47.4;
  (%48, %49, %var_7382, %var_7383, %50)
}

def @func_1394(%var_1383: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
  %51 = cast(%var_1383, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  atanh(%51) /* ty=Tensor[(8, 12), float32] */
}

def @func_7910(%var_7904: Tensor[(616), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) {
  %52 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %53 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %54 = cast(%var_7904, dtype="float32") /* ty=Tensor[(616), float32] */;
  %55 = reshape(%54, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %56 = @func_385(%55) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %57 = %52.0;
  %58 = %53.0;
  %59 = %56.0;
  (%57, %58, %59, %var_7904)
}

def @main(%var_9717: Tensor[(8, 5, 3), float32]) -> Tensor[(8, 5, 3), float32] {
  %60 = cast(%var_9717, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %61 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%62, %63) /* ty=Tensor[(8, 5, 3), float32] */
}

def @func_5838() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %64 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %65 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %66 = %64.0;
  %67 = %65.0;
  %68 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  (%66, %67, %68)
}

def @func_1639(%var_1633: Tensor[(4, 9, 13), float32], %var_1634: Tensor[(4, 9, 13), float32]) -> (Tensor[(4, 9, 13), bool],) {
  %69 = cast(%var_1634, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %70 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_1633, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %73 = not_equal(%71, %72) /* ty=Tensor[(4, 9, 13), bool] */;
  (%73,)
}

def @func_5109() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %74 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %75 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %76 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %77 = %74.0;
  %78 = %75.0;
  %79 = %76.2;
  (%77, %78, %79)
}

def @func_5204(%var_5183: Tensor[(10, 10, 7), float32], %var_5196: Tensor[(468), float32]) -> (Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %80 = cast(%var_5183, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %81 = cast(%var_5183, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %82 = cast(%var_5196, dtype="float32") /* ty=Tensor[(468), float32] */;
  %83 = reshape(%82, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %84 = @func_3179(%83) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %85 = acosh(%80) /* ty=Tensor[(10, 10, 7), float32] */;
  %86 = atan(%81) /* ty=Tensor[(10, 10, 7), float32] */;
  %87 = %84.1;
  (%85, %86, %87, %var_5196)
}

def @func_8109(%var_8101: Tensor[(9, 2, 10), int16], %var_8102: Tensor[(9, 2, 10), int16]) -> Tensor[(9, 2, 10), int16] {
  %88 = cast(%var_8102, dtype="int16") /* ty=Tensor[(9, 2, 10), int16] */;
  %89 = shape_of(%var_8101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_8101, dtype="int16") /* ty=Tensor[(9, 2, 10), int16] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%90, %91) /* ty=Tensor[(9, 2, 10), int16] */
}

def @func_329() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %92 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %93 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %94 = %92.1;
  %95 = %93.1;
  (%94, %95)
}

def @func_8739() -> Tensor[(8, 7, 3), uint8] {
  %96 = @func_7245() /* ty=(uint32, Tensor[(8, 7, 3), uint8]) */;
  %96.1
}

def @func_5501() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %97 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %98 = %97.0;
  %99 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
  (%98, %99)
}

def @func_5787() -> (Tensor[(8, 7, 3), int32],) {
  %100 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %101 = %100.0;
  (%101,)
}

def @func_6071(%var_6048: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), int32]) {
  %102 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %103 = cast(%var_6048, dtype="int8") /* ty=Tensor[(198), int8] */;
  %104 = cast(%var_6048, dtype="int8") /* ty=Tensor[(198), int8] */;
  %105 = reshape(%103, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %106 = reshape(%104, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %107 = @func_3323() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %108 = %102.1;
  %109 = @func_4698(%105, %106) /* ty=Tensor[(2, 11, 9), bool] */;
  %110 = %107.0;
  (%108, %109, %var_6048, %110)
}

def @func_6619(%var_6567: Tensor[(2, 11, 14), float64], %var_6602: Tensor[(2, 11, 14), float32]) -> (Tensor[(2, 11, 14), float64], Tensor[(2, 11, 14), uint64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint8]) {
  %111 = cast(%var_6567, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %112 = log2(%111) /* ty=Tensor[(2, 11, 14), float64] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %114 = cast(%var_6567, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
  %115 = acosh(%114) /* ty=Tensor[(2, 11, 14), float32] */;
  %116 = cast(%var_6602, dtype="uint64") /* ty=Tensor[(2, 11, 14), uint64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="uint64") /* ty=Tensor[(2, 11, 14), uint64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %120 = @func_5501() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %121 = @func_4129() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %122 = log10(%113) /* ty=Tensor[(2, 11, 14), float64] */;
  %123 = logical_xor(%118, %119) /* ty=Tensor[(2, 11, 14), uint64] */;
  %124 = %120.1;
  %125 = %121.0;
  %126 = @func_5542() /* ty=Tensor[(8, 7, 3), uint8] */;
  (%122, %123, %124, %125, %126)
}

def @func_4009() -> (Tensor[(8, 7, 3), float32],) {
  %127 = @func_2526() /* ty=Tensor[(8, 7, 3), float32] */;
  (%127,)
}

def @func_1570() -> (Tensor[(8, 7, 3), float32],) {
  %128 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %129 = %128.0;
  (%129,)
}

def @func_6938() -> (Tensor[(8, 7, 3), int32],) {
  %130 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  (%130,)
}

def @func_7864() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(520), float32]) {
  %131 = @func_2786() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %132 = cast(meta[relay.Constant][3] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %133 = reshape(%132, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %134 = @func_2999(%133) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
  %135 = %131.2;
  %136 = %134.1;
  (%135, %136, meta[relay.Constant][3] /* ty=Tensor[(520), float32] */)
}

def @func_3583() -> (Tensor[(8, 7, 3), int32],) {
  %137 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %138 = %137.1;
  (%138,)
}

def @func_9615() -> (Tensor[(8, 7, 3), float32],) {
  %139 = @func_8855() /* ty=Tensor[(8, 7, 3), float32] */;
  (%139,)
}

def @func_8378() -> Tensor[(8, 7, 3), float32] {
  @func_2704() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_6903(%var_6874: Tensor[(26, 7), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) {
  %140 = @func_5990() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %141 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %142 = cast(-9.45595f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %143 = cast(%var_6874, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
  %144 = cast(%var_6874, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
  %145 = reshape(%142, newshape=[]) /* ty=float32 */;
  %146 = reshape(%143, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
  %147 = reshape(%144, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
  %148 = @func_6732(%145, %146, %147) /* ty=(Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) */;
  %149 = @func_6249() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %150 = %140.0;
  %151 = %141.0;
  %152 = %148.0;
  %153 = %149.1;
  (%150, %151, %152, -9.45595f /* ty=float32 */, %var_6874, %153)
}

def @func_3416() -> (Tensor[(8, 7, 3), float32],) {
  %154 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %155 = %154.0;
  (%155,)
}

def @func_9668() -> (Tensor[(8, 7, 3), float32],) {
  %156 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %157 = %156.0;
  (%157,)
}

def @func_2876() -> (Tensor[(8, 7, 3), int32],) {
  %158 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %159 = %158.1;
  (%159,)
}

def @func_2231() -> Tensor[(8, 7, 3), int32] {
  @func_1620() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_7361() -> (Tensor[(8, 7, 3), int32], Tensor[(1, 56), float32], Tensor[(4, 7, 2), float32]) {
  %160 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %161 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
  %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
  %163 = reshape(%161, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %164 = reshape(%162, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %165 = @func_6188(%163, %164) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) */;
  %166 = %165.3;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %168 = %160.0;
  %169 = asin(%167) /* ty=Tensor[(4, 7, 2), float32] */;
  (%168, meta[relay.Constant][4] /* ty=Tensor[(1, 56), float32] */, %169)
}

def @func_7550() -> (Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) {
  %170 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %172 = reshape(%171, newshape=[26, 7]) /* ty=Tensor[(26, 7), float32] */;
  %173 = @func_6903(%172) /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) */;
  %174 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
  %175 = cast(%174, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %176 = reshape(%175, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %177 = @func_995(%176) /* ty=(Tensor[(8, 7, 3), int8],) */;
  %178 = %170.0;
  %179 = %173.3;
  %180 = %177.0;
  (%178, %179, meta[relay.Constant][5] /* ty=Tensor[(182), float32] */, %174, %180)
}

def @func_1987() -> (Tensor[(8, 7, 3), float32],) {
  %181 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %182 = %181.0;
  (%182,)
}

def @func_8089(%var_8078: int64) -> (Tensor[(8, 15, 14), bool],) {
  %183 = cast(%var_8078, dtype="bool") /* ty=bool */;
  %184 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 15, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
  %185 = greater(%183, %184) /* ty=Tensor[(8, 15, 14), bool] */;
  (%185,)
}

def @func_2220() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %186 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %187 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  %188 = %186.0;
  (%187, %188)
}

def @func_7156(%var_7085: Tensor[(11, 12, 16), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(11, 12, 16), uint16], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(11, 12, 16), int32]) {
  %189 = cast(%var_7085, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
  %190 = asinh(%189) /* ty=Tensor[(11, 12, 16), float32] */;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %192 = erf(%191) /* ty=Tensor[(11, 12, 16), float64] */;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
  %194 = exp(%193) /* ty=Tensor[(11, 12, 16), float32] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
  %196 = sinh(%195) /* ty=Tensor[(11, 12, 16), float32] */;
  %197 = cast(%192, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = @func_2220() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %204 = reshape(%203, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %205 = @func_1080(%204) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %206 = @func_3583() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %207 = cast(%192, dtype="uint16") /* ty=Tensor[(11, 12, 16), uint16] */;
  %208 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%196, dtype="uint16") /* ty=Tensor[(11, 12, 16), uint16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %211 = @func_3579() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %212 = @func_5771() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %213 = cast(%192, dtype="int32") /* ty=Tensor[(11, 12, 16), int32] */;
  %214 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%194, dtype="int32") /* ty=Tensor[(11, 12, 16), int32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %217 = power(%199, %200) /* ty=Tensor[(11, 12, 16), float64] */;
  %218 = %205.3;
  %219 = %206.0;
  %220 = bitwise_xor(%209, %210) /* ty=Tensor[(11, 12, 16), uint16] */;
  %221 = %211.0;
  %222 = %212.1;
  %223 = bitwise_or(%215, %216) /* ty=Tensor[(11, 12, 16), int32] */;
  (%217, %202, %218, %219, %220, %221, %222, %223)
}

def @func_7302() -> Tensor[(8, 7, 3), float32] {
  %224 = @func_4969() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %224.0
}

def @func_5017() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) {
  %225 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 24), float32] */, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %227 = reshape(%226, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %228 = %225.0;
  %229 = @func_1394(%227) /* ty=Tensor[(8, 12), float32] */;
  (%228, %229, meta[relay.Constant][7] /* ty=Tensor[(4, 24), float32] */)
}

def @func_5454(%var_5443: Tensor[(2, 4, 1), uint8]) -> Tensor[(2, 4, ?), uint8] {
  %230 = cast(%var_5443, dtype="uint8") /* ty=Tensor[(2, 4, 1), uint8] */;
  %231 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2, 4, 1), uint8] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%232, %233) /* ty=Tensor[(2, 4, ?), uint8] */
}

def @func_4969() -> (Tensor[(8, 7, 3), float32],) {
  %234 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %235 = %234.0;
  (%235,)
}

def @func_1659(%var_1654: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), float32],) {
  %236 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %237 = %236.0;
  %238 = cast(%var_1654, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %242 = floor_divide(%240, %241) /* ty=Tensor[(8, 7, 3), float32] */;
  (%242,)
}

def @func_2526() -> Tensor[(8, 7, 3), float32] {
  %243 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %243.0
}

def @func_9079() -> (Tensor[(11, 11, 6), uint16], Tensor[(8, 12), float32]) {
  %244 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 6), uint16] */;
  %245 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 6), uint16] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %248 = @func_5017() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) */;
  %249 = bitwise_or(%246, %247) /* ty=Tensor[(11, 11, 6), uint16] */;
  %250 = %248.1;
  (%249, %250)
}

def @func_2999(%var_2993: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) {
  %251 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %252 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %253 = cast(%var_2993, dtype="float32") /* ty=Tensor[(520), float32] */;
  %254 = reshape(%253, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
  %255 = %251.0;
  %256 = %252.0;
  %257 = @func_1690(%254) /* ty=Tensor[(10, 4, 13), float32] */;
  (%255, %256, %257, %var_2993)
}

def @func_9331() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32], Tensor[(616), float32], Tensor[(308, 2), float32]) {
  %258 = @func_4009() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %259 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %260 = %259.1;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %262 = @func_7550() /* ty=(Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) */;
  %263 = @func_6692() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %264 = @func_7820() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %266 = reshape(%265, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %267 = @func_7910(%266) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) */;
  %268 = %258.0;
  %269 = @func_7302() /* ty=Tensor[(8, 7, 3), float32] */;
  %270 = log(%261) /* ty=Tensor[(8, 7, 3), float32] */;
  %271 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  %272 = %262.0;
  %273 = %263.3;
  %274 = %264.0;
  %275 = %267.3;
  (%268, %269, %270, %271, %272, %273, %274, %275, meta[relay.Constant][11] /* ty=Tensor[(308, 2), float32] */)
}

def @func_7203(%var_7200: Tensor[(6, 16, 1), float32]) -> Tensor[(6, 16, 1), float32] {
  %276 = cast(%var_7200, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  erf(%276) /* ty=Tensor[(6, 16, 1), float32] */
}

def @func_5914() -> (Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %277 = @func_5017() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) */;
  %278 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %279 = %277.1;
  %280 = %278.0;
  %281 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  (%279, %280, %281)
}

def @func_6188(%var_6170: Tensor[(56), float32], %var_6174: Tensor[(4, 7, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) {
  %282 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %283 = cast(%var_6170, dtype="float32") /* ty=Tensor[(56), float32] */;
  %284 = reshape(%283, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %285 = @func_4280(%284) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %286 = %285.0;
  %287 = cast(%var_6174, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %291 = %282.0;
  %292 = @func_6114() /* ty=Tensor[(8, 7, 3), float32] */;
  %293 = left_shift(%289, %290) /* ty=Tensor[(4, 7, 2), uint32] */;
  (%291, %292, %var_6170, %293)
}

def @func_4129() -> (Tensor[(8, 7, 3), int32],) {
  %294 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %295 = %294.1;
  (%295,)
}

def @func_1244() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %296 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %297 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  %298 = %296.1;
  (%297, %298)
}

def @func_7972() -> (Tensor[(8, 7, 3), int32],) {
  %299 = @func_4761() /* ty=(Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) */;
  %300 = %299.1;
  (%300,)
}

def @func_2441() -> Tensor[(8, 7, 3), float64] {
  %301 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %301.4
}

def @func_2786() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %302 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %303 = @func_1833() /* ty=Tensor[(8, 7, 3), uint8] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %305 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %306 = %302.0;
  %307 = log10(%304) /* ty=Tensor[(8, 7, 3), float32] */;
  %308 = %305.1;
  (%306, %307, %308)
}

def @func_621() -> (Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) {
  %309 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %310 = %309.1;
  %311 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %312 = %311.0;
  %313 = cast(%312, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
  %314 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%310, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %317 = cast(%310, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %318 = right_shift(%315, %316) /* ty=Tensor[(8, 7, 3), uint8] */;
  %319 = sinh(%317) /* ty=Tensor[(8, 7, 3), float32] */;
  (%318, %319)
}

def @func_1504() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) {
  %320 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %321 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %322 = reshape(%321, newshape=[]) /* ty=uint32 */;
  %323 = @func_1329(%322) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %324 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %325 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %326 = %325.1;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %328 = %320.0;
  %329 = %323.5;
  %330 = %324.0;
  %331 = sin(%327) /* ty=Tensor[(8, 7, 3), float64] */;
  (%328, %329, meta[relay.Constant][12] /* ty=uint32 */, %330, %331)
}

def @func_6490(%var_6472: Tensor[(1080), float64]) -> (Tensor[(8, 7, 3), int32], Tensor[(12, 6, 15), int32]) {
  %332 = @func_2911() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %333 = cast(%var_6472, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %334 = reshape(%333, newshape=[12, 6, 15]) /* ty=Tensor[(12, 6, 15), float64] */;
  %335 = @func_3131(%334) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %336 = %335.0;
  %337 = cast(%var_6472, dtype="int32") /* ty=Tensor[(1080), int32] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="int32") /* ty=Tensor[(12, 6, 15), int32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %341 = %332.0;
  %342 = bitwise_xor(%339, %340) /* ty=Tensor[(12, 6, 15), int32] */;
  (%341, %342)
}

def @func_7564(%var_7556: Tensor[(7, 16, 15), uint8], %var_7557: Tensor[(7, 16, 15), uint8]) -> Tensor[(7, 16, 15), uint8] {
  %343 = cast(%var_7557, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %344 = shape_of(%var_7556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_7556, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%345, %346) /* ty=Tensor[(7, 16, 15), uint8] */
}

def @func_4698(%var_4672: Tensor[(2, 11, 9), int8], %var_4673: Tensor[(2, 11, 9), int8]) -> Tensor[(2, 11, 9), bool] {
  %347 = cast(%var_4673, dtype="bool") /* ty=Tensor[(2, 11, 9), bool] */;
  %348 = shape_of(%var_4672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_4672, dtype="bool") /* ty=Tensor[(2, 11, 9), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%349, %350) /* ty=Tensor[(2, 11, 9), bool] */
}

def @func_4079(%var_4076: Tensor[(168), int8]) -> (Tensor[(15, 15, 15), float32], Tensor[(8, 7, 3), int8], Tensor[(168), int8]) {
  %351 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %352 = cast(%var_4076, dtype="int8") /* ty=Tensor[(168), int8] */;
  %353 = reshape(%352, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %354 = @func_1080(%353) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %355 = acosh(%351) /* ty=Tensor[(15, 15, 15), float32] */;
  %356 = %354.2;
  (%355, %356, %var_4076)
}

def @func_1942() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) {
  %357 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %358 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %359 = reshape(%358, newshape=[]) /* ty=uint32 */;
  %360 = @func_1329(%359) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %361 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %362 = reshape(%361, newshape=[]) /* ty=uint32 */;
  %363 = @func_1329(%362) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %364 = %357.0;
  %365 = %360.5;
  %366 = %363.0;
  (%364, %365, meta[relay.Constant][14] /* ty=uint32 */, %366)
}

def @func_505() -> (Tensor[(8, 7, 3), float32],) {
  %367 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%367,)
}

def @func_1690(%var_1686: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), float32] {
  %368 = cast(%var_1686, dtype="float32") /* ty=Tensor[(10, 4, 13), float32] */;
  sinh(%368) /* ty=Tensor[(10, 4, 13), float32] */
}

def @func_2128(%var_2120: Tensor[(9, 5, 5), float32]) -> Tensor[(9, 5, 5), float32] {
  %369 = cast(%var_2120, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  erf(%369) /* ty=Tensor[(9, 5, 5), float32] */
}

def @func_486(%var_471: uint8, %var_472: Tensor[(2, 15, 9), uint8]) -> (Tensor[(2, 15, 9), uint8],) {
  %370 = cast(%var_471, dtype="uint8") /* ty=uint8 */;
  %371 = cast(%var_472, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %372 = maximum(%370, %371) /* ty=Tensor[(2, 15, 9), uint8] */;
  (%372,)
}

def @func_9241(%var_9224: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(198), int8], Tensor[(2, 11, 9), float32], Tensor[(8, 7, 3), int32]) {
  %373 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %374 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %375 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %376 = cast(%var_9224, dtype="int8") /* ty=Tensor[(198), int8] */;
  %377 = cast(%var_9224, dtype="int8") /* ty=Tensor[(198), int8] */;
  %378 = reshape(%376, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %379 = reshape(%377, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %380 = @func_4698(%378, %379) /* ty=Tensor[(2, 11, 9), bool] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(2, 11, 9), float32] */;
  %382 = @func_7733() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %383 = %373.0;
  %384 = %374.0;
  %385 = %375.1;
  %386 = acos(%381) /* ty=Tensor[(2, 11, 9), float32] */;
  %387 = %382.0;
  (%383, %384, %385, %var_9224, %386, %387)
}

def @func_6249() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %388 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %389 = %388.0;
  %390 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%389, %390)
}

def @func_5730(%var_5725: Tensor[(96), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  %391 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %392 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %393 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %394 = cast(%var_5725, dtype="float32") /* ty=Tensor[(96), float32] */;
  %395 = reshape(%394, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %396 = %391.0;
  %397 = %392.0;
  %398 = %393.0;
  %399 = @func_1394(%395) /* ty=Tensor[(8, 12), float32] */;
  (%396, %397, %398, %399, %var_5725)
}

def @func_9441(%var_9366: uint16, %var_9367: Tensor[(5, 1, 9), uint16]) -> (Tensor[(4, 7, 2), float32], Tensor[(1, 56), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(5, ?, 9), bool]) {
  %400 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
  %401 = reshape(%400, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %402 = @func_4280(%401) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %403 = @func_2786() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %404 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %405 = %402.0;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %407 = reshape(%406, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %408 = @func_4280(%407) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %409 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %410 = cast(%var_9367, dtype="float32") /* ty=Tensor[(5, 1, 9), float32] */;
  %411 = sinh(%410) /* ty=Tensor[(5, 1, 9), float32] */;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(5, 1, 9), float32] */;
  %413 = tan(%412) /* ty=Tensor[(5, 1, 9), float32] */;
  %414 = cast(%var_9366, dtype="uint16") /* ty=uint16 */;
  %415 = cast(%var_9367, dtype="uint16") /* ty=Tensor[(5, 1, 9), uint16] */;
  %416 = bitwise_xor(%414, %415) /* ty=Tensor[(5, 1, 9), uint16] */;
  %417 = cast(%416, dtype="bool") /* ty=Tensor[(5, 1, 9), bool] */;
  %418 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%413, dtype="bool") /* ty=Tensor[(5, 1, 9), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = %403.2;
  %422 = %404.1;
  %423 = %408.1;
  %424 = %409.0;
  %425 = logical_and(%419, %420) /* ty=Tensor[(5, ?, 9), bool] */;
  (%405, meta[relay.Constant][15] /* ty=Tensor[(1, 56), float32] */, %421, %422, %423, %424, %425)
}

def @func_4215() -> Tensor[(8, 7, 3), int32] {
  %426 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %426.0
}

def @func_5954(%var_5949: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 2), bool] {
  %427 = cast(%var_5949, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %428 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 11, 2), int8] */, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  less_equal(%427, %428) /* ty=Tensor[(16, 11, 2), bool] */
}

def @func_3579() -> (Tensor[(8, 7, 3), float32],) {
  %429 = @func_2220() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %430 = %429.0;
  (%430,)
}

def @func_7474() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %431 = @func_5771() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %432 = %431.1;
  %433 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  (%432, %433)
}

def @func_9643() -> (Tensor[(8, 7, 3), int32],) {
  %434 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %435 = %434.0;
  (%435,)
}

def @func_7707(%var_7676: Tensor[(11, 13, 8), float32], %var_7677: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
  %436 = cast(%var_7677, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %437 = shape_of(%var_7676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_7676, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %440 = cast(%var_7676, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %441 = mod(%438, %439) /* ty=Tensor[(11, 13, 8), float32] */;
  %442 = exp(%440) /* ty=Tensor[(11, 13, 8), float32] */;
  (%441, %442)
}

def @func_9015() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %443 = @func_5914() /* ty=(Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %444 = %443.2;
  %445 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  (%444, %445)
}

def @func_656() -> (Tensor[(8, 7, 3), float64],) {
  %446 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %448 = atan(%447) /* ty=Tensor[(8, 7, 3), float64] */;
  (%448,)
}

def @func_6803() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %449 = @func_5787() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %450 = @func_4129() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %451 = %449.0;
  %452 = %450.0;
  (%451, %452)
}

def @func_2911() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %453 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %454 = cast(%453, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %455 = reshape(%454, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %456 = @func_1659(%455) /* ty=(Tensor[(8, 7, 3), float32],) */;
  %457 = cast(%453, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %458 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %459 = %456.0;
  %460 = asin(%457) /* ty=Tensor[(8, 7, 3), float32] */;
  (%458, %459, %460)
}

def @func_4260(%var_4222: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int64], Tensor[(8, 7, 3), float64]) {
  %461 = @func_4215() /* ty=Tensor[(8, 7, 3), int32] */;
  %462 = cast(%var_4222, dtype="int64") /* ty=Tensor[(8, 7, 3), int64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="int64") /* ty=Tensor[(8, 7, 3), int64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %466 = multiply(%464, %465) /* ty=Tensor[(8, 7, 3), int64] */;
  %467 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
  (%466, %467)
}

def @func_3528(%var_3522: Tensor[(7, 7, 1), float32]) -> (Tensor[(7, 7, 1), float32],) {
  %468 = cast(%var_3522, dtype="float32") /* ty=Tensor[(7, 7, 1), float32] */;
  %469 = acosh(%468) /* ty=Tensor[(7, 7, 1), float32] */;
  (%469,)
}

def @func_3259() -> Tensor[(8, 7, 3), float32] {
  @func_2526() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5990() -> (Tensor[(8, 7, 3), float32],) {
  %470 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %471 = %470.0;
  (%471,)
}

def @func_7422() -> Tensor[(8, 7, 3), float32] {
  %472 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %472.0
}

def @func_1329(%var_1289: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %473 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %474 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %475 = cast(%var_1289, dtype="uint32") /* ty=uint32 */;
  %476 = cast(meta[relay.Constant][17] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %477 = reshape(%475, newshape=[]) /* ty=uint32 */;
  %478 = reshape(%476, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
  %479 = @func_1189(%477, %478) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
  %480 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %481 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %484 = %473.0;
  %485 = %474.1;
  %486 = %479.1;
  %487 = %480.0;
  %488 = acosh(%483) /* ty=Tensor[(8, 7, 3), float64] */;
  (%484, %485, %486, %var_1289, meta[relay.Constant][17] /* ty=Tensor[(360), uint32] */, %487, %488)
}

def @func_377() -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %489 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %490 = %489.0;
  %491 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %496 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %497 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %498 = logical_or(%493, %494) /* ty=Tensor[(8, 7, 3), bool] */;
  %499 = %495.1;
  %500 = %496.1;
  %501 = %497.0;
  (%498, %499, %500, %501)
}

def @func_7838() -> Tensor[(8, 7, 3), float32] {
  %502 = @func_3021() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %502.1
}

def @func_776() -> (Tensor[(8, 7, 3), int32],) {
  %503 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %504 = %503.1;
  (%504,)
}

def @func_4929() -> (uint32, Tensor[(8, 7, 3), int32]) {
  %505 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %506 = %505.2;
  %507 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
  (%506, %507)
}

def @func_4726(%var_4720: Tensor[(9, 5, 16), float32]) -> (Tensor[(9, 5, 16), bool],) {
  %508 = cast(%var_4720, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %509 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(9, 5, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = less_equal(%510, %511) /* ty=Tensor[(9, 5, 16), bool] */;
  (%512,)
}

def @func_5427() -> Tensor[(8, 7, 3), int32] {
  %513 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %513.0
}

def @func_6527() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %514 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %515 = @func_5787() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %516 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %517 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
  %518 = %514.0;
  %519 = %515.0;
  %520 = %516.0;
  (%517, %518, %519, %520)
}

def @func_7959(%var_7930: Tensor[(11, 11, 3), float32]) -> (Tensor[(11, 11, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %521 = cast(%var_7930, dtype="float32") /* ty=Tensor[(11, 11, 3), float32] */;
  %522 = sigmoid(%521) /* ty=Tensor[(11, 11, 3), float32] */;
  %523 = @func_4457() /* ty=Tensor[(8, 7, 3), float32] */;
  %524 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
  (%522, %523, %524)
}

def @func_3455() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %525 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %526 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %527 = %525.0;
  (%526, %527)
}

def @func_4628() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %528 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %529 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %530 = %528.1;
  %531 = %529.1;
  (%530, %531)
}

def @func_8855() -> Tensor[(8, 7, 3), float32] {
  %532 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %532.0
}

def @func_976() -> (Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) {
  %533 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %534 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %535 = atan(%534) /* ty=Tensor[(16, 10, 8), float32] */;
  %536 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10, 8), float32] */, dtype="uint16") /* ty=Tensor[(16, 10, 8), uint16] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="uint16") /* ty=Tensor[(16, 10, 8), uint16] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %540 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %541 = cast(%535, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %542 = atanh(%541) /* ty=Tensor[(16, 10, 8), float32] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %544 = %533.0;
  %545 = right_shift(%538, %539) /* ty=Tensor[(16, 10, 8), uint16] */;
  %546 = %540.1;
  %547 = exp(%543) /* ty=Tensor[(16, 10, 8), float64] */;
  (%544, %545, %546, %547)
}

def @func_5573() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %548 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %549 = %548.0;
  %550 = @func_3271() /* ty=Tensor[(8, 7, 3), int32] */;
  (%549, %550)
}

def @func_5276() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) {
  %551 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %552 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %555 = reshape(%554, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %556 = @func_995(%555) /* ty=(Tensor[(8, 7, 3), int8],) */;
  %557 = @func_4761() /* ty=(Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) */;
  %558 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %559 = %551.1;
  %560 = %556.0;
  %561 = %557.0;
  %562 = %558.0;
  (%559, %553, %560, %561, %562)
}

def @func_2513() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) {
  %563 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %564 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %565 = %564.1;
  %566 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
  %567 = %566.2;
  %568 = cast(%567, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %569 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%565, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %572 = %563.0;
  %573 = bitwise_xor(%570, %571) /* ty=Tensor[(8, 7, 3), int8] */;
  (%572, %573)
}

def @func_9588() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32) {
  %574 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %575 = @func_4969() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %576 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %577 = reshape(%576, newshape=[]) /* ty=uint32 */;
  %578 = @func_5334(%577) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) */;
  %579 = %574.1;
  %580 = @func_8739() /* ty=Tensor[(8, 7, 3), uint8] */;
  %581 = %575.0;
  %582 = %578.2;
  (%579, %580, %581, %582, meta[relay.Constant][21] /* ty=uint32 */)
}

def @func_7787(%var_7767: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32]) {
  %583 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %584 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %585 = cast(%var_7767, dtype="float32") /* ty=Tensor[(520), float32] */;
  %586 = reshape(%585, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
  %587 = @func_6365() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %588 = %583.3;
  %589 = %584.0;
  %590 = @func_1690(%586) /* ty=Tensor[(10, 4, 13), float32] */;
  %591 = %587.0;
  (%588, %589, %590, %var_7767, %591)
}

def @func_273() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %592 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %593 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %594 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 7, 3), float32] */, dtype="int32") /* ty=Tensor[(1, 7, 3), int32] */;
  %595 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 7, 3), float32] */, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %596 = floor_mod(%592, %593) /* ty=Tensor[(8, 7, 3), float32] */;
  %597 = bitwise_or(%594, %595) /* ty=Tensor[(8, 7, 3), int32] */;
  (%596, %597)
}

def @func_1080(%var_1058: Tensor[(8, 7, 3), int8]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) {
  %598 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %601 = reshape(%600, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %602 = @func_995(%601) /* ty=(Tensor[(8, 7, 3), int8],) */;
  %603 = %602.0;
  %604 = cast(%var_1058, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %608 = cast(%var_1058, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %609 = reshape(%608, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %610 = @func_995(%609) /* ty=(Tensor[(8, 7, 3), int8],) */;
  %611 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %612 = power(%606, %607) /* ty=Tensor[(8, 7, 3), float64] */;
  %613 = %610.0;
  %614 = %611.0;
  (%599, %612, %613, %614)
}

def @func_1189(%var_1151: uint32, %var_1152: Tensor[(12, 3, 10), uint32]) -> (Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) {
  %615 = cast(%var_1151, dtype="uint32") /* ty=uint32 */;
  %616 = cast(%var_1152, dtype="uint32") /* ty=Tensor[(12, 3, 10), uint32] */;
  %617 = add(%615, %616) /* ty=Tensor[(12, 3, 10), uint32] */;
  %618 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 3, 10), uint32] */, dtype="uint16") /* ty=Tensor[(12, 3, 10), uint16] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="uint16") /* ty=Tensor[(12, 3, 10), uint16] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %622 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %623 = bitwise_xor(%620, %621) /* ty=Tensor[(12, 3, 10), uint16] */;
  %624 = %622.1;
  (%623, %624)
}

def @func_4457() -> Tensor[(8, 7, 3), float32] {
  %625 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %625.0
}

def @func_6692() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %626 = @func_5501() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %629 = reshape(%628, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %630 = @func_1080(%629) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %631 = cast(meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %632 = reshape(%631, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %633 = @func_2999(%632) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
  %634 = cast(%627, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %635 = reshape(%634, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %636 = @func_1080(%635) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %637 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %638 = %630.0;
  %639 = %633.2;
  %640 = %636.3;
  %641 = %637.0;
  (%627, %638, %639, meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, %640, %641)
}

def @func_2394() -> Tensor[(8, 7, 3), int32] {
  %642 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %642.1
}

def @func_6732(%var_6709: float32, %var_6710: Tensor[(2, 13, 7), float32], %var_6719: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) {
  %643 = cast(%var_6709, dtype="float32") /* ty=float32 */;
  %644 = cast(%var_6710, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %645 = cast(%var_6710, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %646 = asinh(%645) /* ty=Tensor[(2, 13, 7), float32] */;
  %647 = cast(%var_6719, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = @func_6249() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %652 = cast(%var_6719, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %653 = cos(%652) /* ty=Tensor[(2, 13, 7), float32] */;
  %654 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 13, 7), float32] */, dtype="uint16") /* ty=Tensor[(2, 13, 7), uint16] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="uint16") /* ty=Tensor[(2, 13, 7), uint16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %658 = floor_divide(%643, %644) /* ty=Tensor[(2, 13, 7), float32] */;
  %659 = not_equal(%649, %650) /* ty=Tensor[(2, 13, 7), bool] */;
  %660 = %651.1;
  %661 = bitwise_xor(%656, %657) /* ty=Tensor[(2, 13, 7), uint16] */;
  (%658, %659, %660, %661)
}

def @func_6563(%var_6545: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(7, 14, 12), bool]) {
  %662 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 14, 12), int16] */, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
  %663 = shape_of(%var_6545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%var_6545, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %666 = cast(%var_6545, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %667 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 14, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 14, 12), int16] */, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %670 = minimum(%668, %669) /* ty=Tensor[(7, 14, 12), uint16] */;
  %671 = cast(%var_6545, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = bitwise_xor(%664, %665) /* ty=Tensor[(7, 14, 12), int16] */;
  %676 = not_equal(%673, %674) /* ty=Tensor[(7, 14, 12), bool] */;
  (%675, %676)
}

def @func_3231(%var_3196: float32, %var_3197: Tensor[(8, 1, 4), float32]) -> (Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  %677 = cast(%var_3196, dtype="float32") /* ty=float32 */;
  %678 = cast(%var_3197, dtype="float32") /* ty=Tensor[(8, 1, 4), float32] */;
  %679 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %680 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %681 = reshape(%680, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %682 = floor_mod(%677, %678) /* ty=Tensor[(8, 1, 4), float32] */;
  %683 = %679.1;
  %684 = @func_1394(%681) /* ty=Tensor[(8, 12), float32] */;
  (%682, %683, %684, meta[relay.Constant][28] /* ty=Tensor[(96), float32] */)
}

def @func_7626() -> Tensor[(8, 7, 3), float32] {
  %685 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %685.0
}

def @func_4579() -> Tensor[(8, 7, 3), float32] {
  @func_4457() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5771() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %686 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %687 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %688 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %689 = %686.0;
  %690 = %687.0;
  %691 = %688.0;
  (%689, %690, %691)
}

def @func_3271() -> Tensor[(8, 7, 3), int32] {
  %692 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %692.1
}

def @func_1833() -> Tensor[(8, 7, 3), uint8] {
  %693 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %693.0
}

def @func_8202() -> Tensor[(8, 7, 3), int32] {
  %694 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %694.1
}

def @func_869() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %695 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %698 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %699 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %700 = rsqrt(%697) /* ty=Tensor[(8, 7, 3), float64] */;
  %701 = %698.0;
  %702 = %699.3;
  (%700, %701, %702)
}

def @func_7038(%var_6985: uint32, %var_6986: Tensor[(360), uint32]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), float64]) {
  %703 = @func_4611() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %704 = cast(%var_6985, dtype="uint32") /* ty=uint32 */;
  %705 = cast(%var_6986, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %706 = reshape(%704, newshape=[]) /* ty=uint32 */;
  %707 = reshape(%705, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
  %708 = @func_1189(%706, %707) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
  %709 = cast(meta[relay.Constant][29] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %710 = cast(meta[relay.Constant][29] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %711 = reshape(%709, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %712 = reshape(%710, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %713 = %703.1;
  %714 = %708.1;
  %715 = @func_4698(%711, %712) /* ty=Tensor[(2, 11, 9), bool] */;
  %716 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
  (%713, %714, %var_6985, %var_6986, %715, meta[relay.Constant][29] /* ty=Tensor[(198), int8] */, %716)
}

def @func_7604() -> (Tensor[(8, 7, 3), int32], Tensor[(2, 4, ?), int16]) {
  %717 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 8), uint8] */, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
  %718 = reshape(%717, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), uint8] */;
  %719 = @func_5454(%718) /* ty=Tensor[(2, 4, ?), uint8] */;
  %720 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 8), uint8] */, dtype="int16") /* ty=Tensor[(1, 8), int16] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="int16") /* ty=Tensor[(2, 4, ?), int16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %724 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %725 = minimum(%722, %723) /* ty=Tensor[(2, 4, ?), int16] */;
  (%724, %725)
}

def @func_6114() -> Tensor[(8, 7, 3), float32] {
  %726 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %726.3
}

def @func_9713() -> (Tensor[(8, 7, 3), float32],) {
  %727 = @func_8041() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %728 = %727.1;
  (%728,)
}

def @func_8041() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %729 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %730 = @func_3927() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %731 = %729.0;
  %732 = %730.0;
  (%731, %732)
}

def @func_5064() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %733 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %734 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %735 = %733.0;
  (%734, %735)
}

def @func_4523(%var_4496: int16, %var_4497: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), bool], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520, 1), float32]) {
  %736 = cast(%var_4496, dtype="bool") /* ty=bool */;
  %737 = cast(%var_4497, dtype="bool") /* ty=Tensor[(14, 2, 11), bool] */;
  %738 = @func_4457() /* ty=Tensor[(8, 7, 3), float32] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %740 = cast(meta[relay.Constant][31] /* ty=Tensor[(520, 1), float32] */, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
  %741 = reshape(%740, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
  %742 = equal(%736, %737) /* ty=Tensor[(14, 2, 11), bool] */;
  %743 = atanh(%739) /* ty=Tensor[(8, 7, 3), float32] */;
  %744 = @func_1690(%741) /* ty=Tensor[(10, 4, 13), float32] */;
  (%742, %743, %744, meta[relay.Constant][31] /* ty=Tensor[(520, 1), float32] */)
}

def @func_4655() -> Tensor[(8, 7, 3), float32] {
  %745 = @func_2631() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) */;
  %745.0
}

def @func_6957() -> (Tensor[(8, 7, 3), float64],) {
  %746 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
  (%746,)
}

def @func_5417(%var_5368: Tensor[(10, 6, 6), uint8], %var_5369: Tensor[(10, 6, 6), uint8]) -> (Tensor[(10, 6, 6), float32], Tensor[(10, 6, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(10, 6, 6), float64], Tensor[(520), float32], Tensor[(260, 2), float32]) {
  %747 = cast(%var_5369, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
  %748 = cast(%var_5369, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %749 = shape_of(%var_5368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_5368, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = equal(%750, %751) /* ty=Tensor[(10, 6, 6), bool] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
  %754 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %755 = cast(%var_5369, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %756 = erf(%755) /* ty=Tensor[(10, 6, 6), float64] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %758 = cast(meta[relay.Constant][32] /* ty=Tensor[(260, 2), float32] */, dtype="float32") /* ty=Tensor[(260, 2), float32] */;
  %759 = reshape(%758, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %760 = @func_2999(%759) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
  %761 = log(%747) /* ty=Tensor[(10, 6, 6), float32] */;
  %762 = sinh(%753) /* ty=Tensor[(10, 6, 6), float32] */;
  %763 = %754.2;
  %764 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  %765 = @func_4655() /* ty=Tensor[(8, 7, 3), float32] */;
  %766 = asinh(%757) /* ty=Tensor[(10, 6, 6), float64] */;
  %767 = %760.3;
  (%761, %762, %763, %764, %765, %766, %767, meta[relay.Constant][32] /* ty=Tensor[(260, 2), float32] */)
}

def @func_449() -> Tensor[(8, 7, 3), float32] {
  %768 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %768.0
}

def @func_3131(%var_3055: Tensor[(12, 6, 15), float64]) -> (Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %769 = cast(%var_3055, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %770 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %771 = cast(%var_3055, dtype="float32") /* ty=Tensor[(12, 6, 15), float32] */;
  %772 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %773 = cast(meta[relay.Constant][33] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %774 = cast(meta[relay.Constant][33] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %775 = reshape(%773, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %776 = reshape(%774, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %777 = @func_1639(%775, %776) /* ty=(Tensor[(4, 9, 13), bool],) */;
  %778 = log(%769) /* ty=Tensor[(12, 6, 15), float64] */;
  %779 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %780 = %770.1;
  %781 = @func_2526() /* ty=Tensor[(8, 7, 3), float32] */;
  %782 = sinh(%771) /* ty=Tensor[(12, 6, 15), float32] */;
  %783 = %772.0;
  %784 = %777.0;
  (%778, %779, %780, %781, %782, %783, %784, meta[relay.Constant][33] /* ty=Tensor[(468), float32] */)
}

def @func_1956() -> (Tensor[(8, 7, 3), float32],) {
  %785 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%785,)
}

def @func_2631() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) {
  %786 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %787 = @func_2436() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %788 = %787.2;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %790 = asinh(%789) /* ty=Tensor[(8, 7, 3), float64] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %792 = cosh(%791) /* ty=Tensor[(8, 7, 3), float32] */;
  %793 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  %798 = %786.1;
  %799 = equal(%795, %796) /* ty=Tensor[(8, 7, 3), bool] */;
  (%797, %798, %799)
}

def @func_385(%var_382: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
  %800 = cast(%var_382, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %801 = cos(%800) /* ty=Tensor[(8, 11, 7), float32] */;
  (%801,)
}

def @func_2704() -> Tensor[(8, 7, 3), float32] {
  %802 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %802.0
}

def @func_3021() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %803 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %804 = @func_2436() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %805 = %803.0;
  %806 = %804.1;
  (%805, %806)
}

def @func_7245() -> (uint32, Tensor[(8, 7, 3), uint8]) {
  %807 = @func_4929() /* ty=(uint32, Tensor[(8, 7, 3), int32]) */;
  %808 = %807.0;
  %809 = @func_5542() /* ty=Tensor[(8, 7, 3), uint8] */;
  (%808, %809)
}

def @func_8462(%var_8413: Tensor[(13, 12, 6), float32], %var_8414: Tensor[(13, 12, 6), float32], %var_8444: Tensor[(2, 28), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 28), float32], Tensor[(13, 12, 6), float32]) {
  %810 = cast(%var_8414, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %811 = shape_of(%var_8413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_8413, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %814 = cast(%var_8444, dtype="float32") /* ty=Tensor[(2, 28), float32] */;
  %815 = reshape(%814, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %816 = @func_4280(%815) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %817 = cast(%var_8413, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %818 = subtract(%812, %813) /* ty=Tensor[(13, 12, 6), float32] */;
  %819 = %816.1;
  %820 = tan(%817) /* ty=Tensor[(13, 12, 6), float32] */;
  (%818, %819, %var_8444, %820)
}

def @func_4570() -> (Tensor[(8, 7, 3), float32],) {
  %821 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %822 = %821.0;
  (%822,)
}

def @func_5581() -> Tensor[(8, 7, 3), float64] {
  %823 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %823.0
}

def @func_995(%var_989: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int8],) {
  %824 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
  %825 = %824.2;
  %826 = cast(%var_989, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %830 = left_shift(%828, %829) /* ty=Tensor[(8, 7, 3), int8] */;
  (%830,)
}

def @func_1781() -> Tensor[(8, 7, 3), float32] {
  %831 = @func_1730() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %831.0
}

def @func_1730() -> (Tensor[(8, 7, 3), float32],) {
  %832 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%832,)
}

def @func_4280(%var_4268: Tensor[(4, 7, 2), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) {
  %833 = cast(%var_4268, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %834 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %835 = atanh(%833) /* ty=Tensor[(4, 7, 2), float32] */;
  %836 = %834.0;
  (%835, %836)
}

def @func_5030() -> (Tensor[(8, 7, 3), int32],) {
  %837 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %838 = %837.0;
  (%838,)
}

def @func_3323() -> (Tensor[(8, 7, 3), int32],) {
  %839 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
  %840 = %839.2;
  (%840,)
}

def @func_1620() -> Tensor[(8, 7, 3), int32] {
  %841 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %841.1
}

def @func_3927() -> (Tensor[(8, 7, 3), float32],) {
  %842 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %843 = %842.1;
  (%843,)
}

def @func_5657() -> Tensor[(8, 7, 3), float32] {
  %844 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %844.0
}

def @func_2436() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %845 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %846 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %847 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %848 = %845.1;
  %849 = %846.1;
  %850 = %847.0;
  (%848, %849, %850)
}

def @func_2385() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %851 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %852 = %851.0;
  %853 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  (%852, %853)
}

def @func_740() -> (Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) {
  %854 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %855 = %854.1;
  %856 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  %857 = cast(%856, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %858 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%855, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %861 = cast(%856, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %862 = sigmoid(%861) /* ty=Tensor[(8, 7, 3), float64] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %864 = logical_xor(%859, %860) /* ty=Tensor[(8, 7, 3), uint16] */;
  %865 = tan(%863) /* ty=Tensor[(8, 7, 3), float32] */;
  (%864, %865)
}

def @func_3499() -> (Tensor[(8, 7, 3), float32],) {
  %866 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %867 = %866.0;
  (%867,)
}

def @func_8527(%var_8516: Tensor[(78, 6), float32]) -> (Tensor[(8, 7, 3), int8], Tensor[(10, 10, 7), float32], Tensor[(1, 700), float32], Tensor[(78, 6), float32]) {
  %868 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
  %869 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 700), float32] */, dtype="float32") /* ty=Tensor[(1, 700), float32] */;
  %870 = cast(%var_8516, dtype="float32") /* ty=Tensor[(78, 6), float32] */;
  %871 = reshape(%869, newshape=[10, 10, 7]) /* ty=Tensor[(10, 10, 7), float32] */;
  %872 = reshape(%870, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %873 = @func_5204(%871, %872) /* ty=(Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %874 = %868.1;
  %875 = %873.0;
  (%874, %875, meta[relay.Constant][35] /* ty=Tensor[(1, 700), float32] */, %var_8516)
}

def @func_8827(%var_8806: Tensor[(180), int16]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(180), int16], Tensor[(9, 2, 10), uint64]) {
  %876 = @func_8326() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %877 = @func_4009() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %878 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %879 = cast(%var_8806, dtype="int16") /* ty=Tensor[(180), int16] */;
  %880 = cast(%var_8806, dtype="int16") /* ty=Tensor[(180), int16] */;
  %881 = reshape(%879, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int16] */;
  %882 = reshape(%880, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int16] */;
  %883 = @func_8109(%881, %882) /* ty=Tensor[(9, 2, 10), int16] */;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %885 = asinh(%884) /* ty=Tensor[(9, 2, 10), float32] */;
  %886 = cast(%883, dtype="uint64") /* ty=Tensor[(9, 2, 10), uint64] */;
  %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%885, dtype="uint64") /* ty=Tensor[(9, 2, 10), uint64] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %890 = %876.0;
  %891 = %877.0;
  %892 = %878.1;
  %893 = bitwise_xor(%888, %889) /* ty=Tensor[(9, 2, 10), uint64] */;
  (%890, %891, %892, %var_8806, %893)
}

def @func_1428() -> (Tensor[(8, 7, 3), float32],) {
  %894 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %895 = %894.0;
  (%895,)
}

def @func_4761() -> (Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) {
  %896 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
  %897 = cast(meta[relay.Constant][36] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %898 = reshape(%897, newshape=[12, 6, 15]) /* ty=Tensor[(12, 6, 15), float64] */;
  %899 = @func_3131(%898) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %900 = %896.1;
  %901 = %899.1;
  (%900, %901, meta[relay.Constant][36] /* ty=Tensor[(1080), float64] */)
}

def @func_8326() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %902 = @func_3583() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %903 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %904 = @func_8041() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %905 = %902.0;
  %906 = %903.1;
  %907 = %904.0;
  %908 = @func_7838() /* ty=Tensor[(8, 7, 3), float32] */;
  (%905, %906, %907, %908)
}

def @func_4834(%var_4816: Tensor[(3, 7, 11), float32]) -> Tensor[(3, 7, 11), float32] {
  %909 = cast(%var_4816, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %910 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 7, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 7, 11), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%911, %912) /* ty=Tensor[(3, 7, 11), float32] */
}

def @func_5334(%var_5332: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) {
  %913 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
  %914 = cast(%var_5332, dtype="uint32") /* ty=uint32 */;
  %915 = reshape(%914, newshape=[]) /* ty=uint32 */;
  %916 = @func_1329(%915) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %917 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %918 = %913.0;
  %919 = %916.0;
  (%917, %918, %919, %var_5332)
}

def @func_2072() -> Tensor[(8, 7, 3), int32] {
  %920 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %921 = %920.1;
  %922 = @func_1942() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) */;
  %923 = %922.0;
  %924 = cast(%923, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %925 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%921, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%926, %927) /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_4107(%var_4103: Tensor[(5, 2, 6), float64]) -> (Tensor[(5, 2, 6), float64],) {
  %928 = cast(%var_4103, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %929 = rsqrt(%928) /* ty=Tensor[(5, 2, 6), float64] */;
  (%929,)
}

def @func_3179(%var_3164: Tensor[(468), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %930 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %931 = cast(%var_3164, dtype="float32") /* ty=Tensor[(468), float32] */;
  %932 = cast(%var_3164, dtype="float32") /* ty=Tensor[(468), float32] */;
  %933 = reshape(%931, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %934 = reshape(%932, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %935 = @func_1639(%933, %934) /* ty=(Tensor[(4, 9, 13), bool],) */;
  %936 = %930.1;
  %937 = %935.0;
  (%936, %937, %var_3164)
}

def @func_2732() -> (Tensor[(8, 7, 3), float32],) {
  %938 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %939 = %938.0;
  (%939,)
}

def @func_7733() -> (Tensor[(8, 7, 3), int32],) {
  %940 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %941 = %940.1;
  (%941,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4527(%var_4525: int16, %var_4526: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), bool], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520, 1), float32]) {
  @func_4523(%var_4525, %var_4526) /* ty=(Tensor[(14, 2, 11), bool], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520, 1), float32]) */
}

def @func_1642(%var_1640: Tensor[(4, 9, 13), float32], %var_1641: Tensor[(4, 9, 13), float32]) -> (Tensor[(4, 9, 13), bool],) {
  %5 = fn (%var_1633: Tensor[(4, 9, 13), float32], %var_1634: Tensor[(4, 9, 13), float32]) -> (Tensor[(4, 9, 13), bool],) {
    %0 = cast(%var_1634, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
    %1 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_1633, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = not_equal(%2, %3) /* ty=Tensor[(4, 9, 13), bool] */;
    (%4,)
  };
  %5(%var_1640, %var_1641) /* ty=(Tensor[(4, 9, 13), bool],) */
}

def @func_7423() -> Tensor[(8, 7, 3), float32] {
  %7 = fn () -> Tensor[(8, 7, 3), float32] {
    %6 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %6.0
  };
  %7() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_8857() -> Tensor[(8, 7, 3), float32] {
  @func_8855() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_7303() -> Tensor[(8, 7, 3), float32] {
  %9 = fn () -> Tensor[(8, 7, 3), float32] {
    %8 = @func_4969() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %8.0
  };
  %9() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_776() -> (Tensor[(8, 7, 3), int32],) {
  %10 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %11 = %10.1;
  (%11,)
}

def @func_377() -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %12 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %13 = %12.0;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %19 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %20 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %21 = logical_or(%16, %17) /* ty=Tensor[(8, 7, 3), bool] */;
  %22 = %18.1;
  %23 = %19.1;
  %24 = %20.0;
  (%21, %22, %23, %24)
}

def @func_3271() -> Tensor[(8, 7, 3), int32] {
  %25 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %25.1
}

def @func_4630() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */
}

def @func_7973() -> (Tensor[(8, 7, 3), int32],) {
  %28 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %26 = @func_4761() /* ty=(Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) */;
    %27 = %26.1;
    (%27,)
  };
  %28() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_7787(%var_7767: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32]) {
  %29 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %30 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %31 = cast(%var_7767, dtype="float32") /* ty=Tensor[(520), float32] */;
  %32 = reshape(%31, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
  %33 = @func_6365() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %34 = %29.3;
  %35 = %30.0;
  %36 = @func_1690(%32) /* ty=Tensor[(10, 4, 13), float32] */;
  %37 = %33.0;
  (%34, %35, %36, %var_7767, %37)
}

def @func_9333() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32], Tensor[(616), float32], Tensor[(308, 2), float32]) {
  @func_9331() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32], Tensor[(616), float32], Tensor[(308, 2), float32]) */
}

def @func_1504() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) {
  %38 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %39 = cast(meta[relay.Constant][1] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %40 = reshape(%39, newshape=[]) /* ty=uint32 */;
  %41 = @func_1329(%40) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %42 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %43 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %46 = %38.0;
  %47 = %41.5;
  %48 = %42.0;
  %49 = sin(%45) /* ty=Tensor[(8, 7, 3), float64] */;
  (%46, %47, meta[relay.Constant][1] /* ty=uint32 */, %48, %49)
}

def @func_3181(%var_3180: Tensor[(468), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %58 = fn (%var_3164: Tensor[(468), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
    %50 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %51 = cast(%var_3164, dtype="float32") /* ty=Tensor[(468), float32] */;
    %52 = cast(%var_3164, dtype="float32") /* ty=Tensor[(468), float32] */;
    %53 = reshape(%51, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
    %54 = reshape(%52, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
    %55 = @func_1639(%53, %54) /* ty=(Tensor[(4, 9, 13), bool],) */;
    %56 = %50.1;
    %57 = %55.0;
    (%56, %57, %var_3164)
  };
  %58(%var_3180) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */
}

def @func_4262(%var_4261: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int64], Tensor[(8, 7, 3), float64]) {
  %66 = fn (%var_4222: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int64], Tensor[(8, 7, 3), float64]) {
    %59 = @func_4215() /* ty=Tensor[(8, 7, 3), int32] */;
    %60 = cast(%var_4222, dtype="int64") /* ty=Tensor[(8, 7, 3), int64] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%59, dtype="int64") /* ty=Tensor[(8, 7, 3), int64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %64 = multiply(%62, %63) /* ty=Tensor[(8, 7, 3), int64] */;
    %65 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
    (%64, %65)
  };
  %66(%var_4261) /* ty=(Tensor[(8, 7, 3), int64], Tensor[(8, 7, 3), float64]) */
}

def @func_9064() -> (Tensor[(8, 7, 3), float32],) {
  @func_9062() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_4011() -> (Tensor[(8, 7, 3), float32],) {
  @func_4009() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_1245() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %70 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
    %67 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
    %68 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
    %69 = %67.1;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_8717(%var_8716: Tensor[(16, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 12), float32], float32, Tensor[(16, 2), float32]) {
  %80 = fn (%var_8700: Tensor[(16, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 12), float32], float32, Tensor[(16, 2), float32]) {
    %71 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %72 = cast(-3.68172f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %73 = cast(%var_8700, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
    %74 = reshape(%72, newshape=[]) /* ty=float32 */;
    %75 = reshape(%73, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), float32] */;
    %76 = @func_3231(%74, %75) /* ty=(Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) */;
    %77 = %71.0;
    %78 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
    %79 = %76.2;
    (%77, %78, %79, -3.68172f /* ty=float32 */, %var_8700)
  };
  %80(%var_8716) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 12), float32], float32, Tensor[(16, 2), float32]) */
}

def @func_6114() -> Tensor[(8, 7, 3), float32] {
  %81 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %81.3
}

def @func_6365() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %82 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %83 = @func_5838() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %84 = %82.0;
  %85 = %83.2;
  (%84, %85)
}

def @func_3022() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %90 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
    %86 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %87 = @func_2436() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
    %88 = %86.0;
    %89 = %87.1;
    (%88, %89)
  };
  %90() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_3235(%var_3233: float32, %var_3234: Tensor[(8, 1, 4), float32]) -> (Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  @func_3231(%var_3233, %var_3234) /* ty=(Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) */
}

def @func_9645() -> (Tensor[(8, 7, 3), int32],) {
  @func_9643() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_6732(%var_6709: float32, %var_6710: Tensor[(2, 13, 7), float32], %var_6719: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) {
  %91 = cast(%var_6709, dtype="float32") /* ty=float32 */;
  %92 = cast(%var_6710, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %93 = cast(%var_6710, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %94 = asinh(%93) /* ty=Tensor[(2, 13, 7), float32] */;
  %95 = cast(%var_6719, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = @func_6249() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %100 = cast(%var_6719, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %101 = cos(%100) /* ty=Tensor[(2, 13, 7), float32] */;
  %102 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 7), float32] */, dtype="uint16") /* ty=Tensor[(2, 13, 7), uint16] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint16") /* ty=Tensor[(2, 13, 7), uint16] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %106 = floor_divide(%91, %92) /* ty=Tensor[(2, 13, 7), float32] */;
  %107 = not_equal(%97, %98) /* ty=Tensor[(2, 13, 7), bool] */;
  %108 = %99.1;
  %109 = bitwise_xor(%104, %105) /* ty=Tensor[(2, 13, 7), uint16] */;
  (%106, %107, %108, %109)
}

def @func_6938() -> (Tensor[(8, 7, 3), int32],) {
  %110 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  (%110,)
}

def @func_8740() -> Tensor[(8, 7, 3), uint8] {
  %112 = fn () -> Tensor[(8, 7, 3), uint8] {
    %111 = @func_7245() /* ty=(uint32, Tensor[(8, 7, 3), uint8]) */;
    %111.1
  };
  %112() /* ty=Tensor[(8, 7, 3), uint8] */
}

def @func_6493(%var_6491: Tensor[(1080), float64]) -> (Tensor[(8, 7, 3), int32], Tensor[(12, 6, 15), int32]) {
  @func_6490(%var_6491) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(12, 6, 15), int32]) */
}

def @func_2441() -> Tensor[(8, 7, 3), float64] {
  %113 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %113.4
}

def @func_5454(%var_5443: Tensor[(2, 4, 1), uint8]) -> Tensor[(2, 4, ?), uint8] {
  %114 = cast(%var_5443, dtype="uint8") /* ty=Tensor[(2, 4, 1), uint8] */;
  %115 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 4, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 4, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2, 4, 1), uint8] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%116, %117) /* ty=Tensor[(2, 4, ?), uint8] */
}

def @func_6367() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  @func_6365() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_7564(%var_7556: Tensor[(7, 16, 15), uint8], %var_7557: Tensor[(7, 16, 15), uint8]) -> Tensor[(7, 16, 15), uint8] {
  %118 = cast(%var_7557, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %119 = shape_of(%var_7556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_7556, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%120, %121) /* ty=Tensor[(7, 16, 15), uint8] */
}

def @func_1332(%var_1330: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  @func_1329(%var_1330) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */
}

def @func_2787() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %129 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
    %122 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %123 = @func_1833() /* ty=Tensor[(8, 7, 3), uint8] */;
    %124 = cast(%123, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
    %125 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
    %126 = %122.0;
    %127 = log10(%124) /* ty=Tensor[(8, 7, 3), float32] */;
    %128 = %125.1;
    (%126, %127, %128)
  };
  %129() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */
}

def @func_1692(%var_1691: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), float32] {
  %131 = fn (%var_1686: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), float32] {
    %130 = cast(%var_1686, dtype="float32") /* ty=Tensor[(10, 4, 13), float32] */;
    sinh(%130) /* ty=Tensor[(10, 4, 13), float32] */
  };
  %131(%var_1691) /* ty=Tensor[(10, 4, 13), float32] */
}

def @func_7710(%var_7708: Tensor[(11, 13, 8), float32], %var_7709: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
  %139 = fn (%var_7676: Tensor[(11, 13, 8), float32], %var_7677: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
    %132 = cast(%var_7677, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %133 = shape_of(%var_7676, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%var_7676, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %136 = cast(%var_7676, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %137 = mod(%134, %135) /* ty=Tensor[(11, 13, 8), float32] */;
    %138 = exp(%136) /* ty=Tensor[(11, 13, 8), float32] */;
    (%137, %138)
  };
  %139(%var_7708, %var_7709) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */
}

def @func_1781() -> Tensor[(8, 7, 3), float32] {
  %140 = @func_1730() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %140.0
}

def @func_4728(%var_4727: Tensor[(9, 5, 16), float32]) -> (Tensor[(9, 5, 16), bool],) {
  %146 = fn (%var_4720: Tensor[(9, 5, 16), float32]) -> (Tensor[(9, 5, 16), bool],) {
    %141 = cast(%var_4720, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %142 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(9, 5, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %145 = less_equal(%143, %144) /* ty=Tensor[(9, 5, 16), bool] */;
    (%145,)
  };
  %146(%var_4727) /* ty=(Tensor[(9, 5, 16), bool],) */
}

def @func_3001(%var_3000: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) {
  %154 = fn (%var_2993: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) {
    %147 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %148 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %149 = cast(%var_2993, dtype="float32") /* ty=Tensor[(520), float32] */;
    %150 = reshape(%149, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
    %151 = %147.0;
    %152 = %148.0;
    %153 = @func_1690(%150) /* ty=Tensor[(10, 4, 13), float32] */;
    (%151, %152, %153, %var_2993)
  };
  %154(%var_3000) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */
}

def @func_5773() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  @func_5771() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */
}

def @func_7627() -> Tensor[(8, 7, 3), float32] {
  %156 = fn () -> Tensor[(8, 7, 3), float32] {
    %155 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %155.0
  };
  %156() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_6528() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %164 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %157 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
    %158 = @func_5787() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %159 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %160 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
    %161 = %157.0;
    %162 = %158.0;
    %163 = %159.0;
    (%160, %161, %162, %163)
  };
  %164() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_9244(%var_9242: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(198), int8], Tensor[(2, 11, 9), float32], Tensor[(8, 7, 3), int32]) {
  @func_9241(%var_9242) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(198), int8], Tensor[(2, 11, 9), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_9615() -> (Tensor[(8, 7, 3), float32],) {
  %165 = @func_8855() /* ty=Tensor[(8, 7, 3), float32] */;
  (%165,)
}

def @func_1622() -> Tensor[(8, 7, 3), int32] {
  @func_1620() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_1329(%var_1289: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %166 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %167 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %168 = cast(%var_1289, dtype="uint32") /* ty=uint32 */;
  %169 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %170 = reshape(%168, newshape=[]) /* ty=uint32 */;
  %171 = reshape(%169, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
  %172 = @func_1189(%170, %171) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
  %173 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %174 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %177 = %166.0;
  %178 = %167.1;
  %179 = %172.1;
  %180 = %173.0;
  %181 = acosh(%176) /* ty=Tensor[(8, 7, 3), float64] */;
  (%177, %178, %179, %var_1289, meta[relay.Constant][5] /* ty=Tensor[(360), uint32] */, %180, %181)
}

def @func_2131(%var_2129: Tensor[(9, 5, 5), float32]) -> Tensor[(9, 5, 5), float32] {
  @func_2128(%var_2129) /* ty=Tensor[(9, 5, 5), float32] */
}

def @func_9715() -> (Tensor[(8, 7, 3), float32],) {
  @func_9713() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_1944() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) {
  @func_1942() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) */
}

def @func_2733() -> (Tensor[(8, 7, 3), float32],) {
  %184 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %182 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %183 = %182.0;
    (%183,)
  };
  %184() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_9497() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %190 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
    %185 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %186 = @func_3579() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %187 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
    %188 = %185.0;
    %189 = %186.0;
    (%187, %188, %189)
  };
  %190() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */
}

def @func_6565(%var_6564: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(7, 14, 12), bool]) {
  %206 = fn (%var_6545: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(7, 14, 12), bool]) {
    %191 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 14, 12), int16] */, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
    %192 = shape_of(%var_6545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%var_6545, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %195 = cast(%var_6545, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
    %196 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 14, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 14, 12), int16] */, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %199 = minimum(%197, %198) /* ty=Tensor[(7, 14, 12), uint16] */;
    %200 = cast(%var_6545, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
    %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%199, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %204 = bitwise_xor(%193, %194) /* ty=Tensor[(7, 14, 12), int16] */;
    %205 = not_equal(%202, %203) /* ty=Tensor[(7, 14, 12), bool] */;
    (%204, %205)
  };
  %206(%var_6564) /* ty=(Tensor[(7, 14, 12), int16], Tensor[(7, 14, 12), bool]) */
}

def @func_7362() -> (Tensor[(8, 7, 3), int32], Tensor[(1, 56), float32], Tensor[(4, 7, 2), float32]) {
  %217 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(1, 56), float32], Tensor[(4, 7, 2), float32]) {
    %207 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %208 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
    %209 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
    %210 = reshape(%208, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %211 = reshape(%209, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
    %212 = @func_6188(%210, %211) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) */;
    %213 = %212.3;
    %214 = cast(%213, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
    %215 = %207.0;
    %216 = asin(%214) /* ty=Tensor[(4, 7, 2), float32] */;
    (%215, meta[relay.Constant][7] /* ty=Tensor[(1, 56), float32] */, %216)
  };
  %217() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(1, 56), float32], Tensor[(4, 7, 2), float32]) */
}

def @func_379() -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */
}

def @func_4282(%var_4281: Tensor[(4, 7, 2), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) {
  %222 = fn (%var_4268: Tensor[(4, 7, 2), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) {
    %218 = cast(%var_4268, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
    %219 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %220 = atanh(%218) /* ty=Tensor[(4, 7, 2), float32] */;
    %221 = %219.0;
    (%220, %221)
  };
  %222(%var_4281) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_330() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %227 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %223 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %224 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %225 = %223.1;
    %226 = %224.1;
    (%225, %226)
  };
  %227() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_2222() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  @func_2220() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_3131(%var_3055: Tensor[(12, 6, 15), float64]) -> (Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %228 = cast(%var_3055, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %229 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %230 = cast(%var_3055, dtype="float32") /* ty=Tensor[(12, 6, 15), float32] */;
  %231 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %234 = reshape(%232, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %235 = reshape(%233, newshape=[4, 9, 13]) /* ty=Tensor[(4, 9, 13), float32] */;
  %236 = @func_1639(%234, %235) /* ty=(Tensor[(4, 9, 13), bool],) */;
  %237 = log(%228) /* ty=Tensor[(12, 6, 15), float64] */;
  %238 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %239 = %229.1;
  %240 = @func_2526() /* ty=Tensor[(8, 7, 3), float32] */;
  %241 = sinh(%230) /* ty=Tensor[(12, 6, 15), float32] */;
  %242 = %231.0;
  %243 = %236.0;
  (%237, %238, %239, %240, %241, %242, %243, meta[relay.Constant][8] /* ty=Tensor[(468), float32] */)
}

def @func_4217() -> Tensor[(8, 7, 3), int32] {
  @func_4215() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_2911() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %244 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %245 = cast(%244, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %246 = reshape(%245, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %247 = @func_1659(%246) /* ty=(Tensor[(8, 7, 3), float32],) */;
  %248 = cast(%244, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %249 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  %250 = %247.0;
  %251 = asin(%248) /* ty=Tensor[(8, 7, 3), float32] */;
  (%249, %250, %251)
}

def @func_5992() -> (Tensor[(8, 7, 3), float32],) {
  @func_5990() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_1192(%var_1190: uint32, %var_1191: Tensor[(12, 3, 10), uint32]) -> (Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) {
  %262 = fn (%var_1151: uint32, %var_1152: Tensor[(12, 3, 10), uint32]) -> (Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) {
    %252 = cast(%var_1151, dtype="uint32") /* ty=uint32 */;
    %253 = cast(%var_1152, dtype="uint32") /* ty=Tensor[(12, 3, 10), uint32] */;
    %254 = add(%252, %253) /* ty=Tensor[(12, 3, 10), uint32] */;
    %255 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 3, 10), uint32] */, dtype="uint16") /* ty=Tensor[(12, 3, 10), uint16] */;
    %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%254, dtype="uint16") /* ty=Tensor[(12, 3, 10), uint16] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %259 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %260 = bitwise_xor(%257, %258) /* ty=Tensor[(12, 3, 10), uint16] */;
    %261 = %259.1;
    (%260, %261)
  };
  %262(%var_1190, %var_1191) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */
}

def @func_6694() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  @func_6692() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */
}

def @func_740() -> (Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) {
  %263 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %264 = %263.1;
  %265 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  %266 = cast(%265, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %267 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%264, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %270 = cast(%265, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %271 = sigmoid(%270) /* ty=Tensor[(8, 7, 3), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %273 = logical_xor(%268, %269) /* ty=Tensor[(8, 7, 3), uint16] */;
  %274 = tan(%272) /* ty=Tensor[(8, 7, 3), float32] */;
  (%273, %274)
}

def @func_1989() -> (Tensor[(8, 7, 3), float32],) {
  @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_3259() -> Tensor[(8, 7, 3), float32] {
  @func_2526() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5110() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %281 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
    %275 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %276 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %277 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
    %278 = %275.0;
    %279 = %276.0;
    %280 = %277.2;
    (%278, %279, %280)
  };
  %281() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_5031() -> (Tensor[(8, 7, 3), int32],) {
  %284 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %282 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_6074(%var_6072: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), int32]) {
  @func_6071(%var_6072) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), int32]) */
}

def @func_778() -> (Tensor[(8, 7, 3), int32],) {
  @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_3500() -> (Tensor[(8, 7, 3), float32],) {
  %287 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %285 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %286 = %285.0;
    (%286,)
  };
  %287() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_4082(%var_4080: Tensor[(168), int8]) -> (Tensor[(15, 15, 15), float32], Tensor[(8, 7, 3), int8], Tensor[(168), int8]) {
  @func_4079(%var_4080) /* ty=(Tensor[(15, 15, 15), float32], Tensor[(8, 7, 3), int8], Tensor[(168), int8]) */
}

def @func_9588() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32) {
  %288 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %289 = @func_4969() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %290 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %291 = reshape(%290, newshape=[]) /* ty=uint32 */;
  %292 = @func_5334(%291) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) */;
  %293 = %288.1;
  %294 = @func_8739() /* ty=Tensor[(8, 7, 3), uint8] */;
  %295 = %289.0;
  %296 = %292.2;
  (%293, %294, %295, %296, meta[relay.Constant][10] /* ty=uint32 */)
}

def @func_7790(%var_7788: Tensor[(520), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32]) {
  @func_7787(%var_7788) /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_2436() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %297 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %298 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %299 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %300 = %297.1;
  %301 = %298.1;
  %302 = %299.0;
  (%300, %301, %302)
}

def @func_6803() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %303 = @func_5787() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %304 = @func_4129() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %305 = %303.0;
  %306 = %304.0;
  (%305, %306)
}

def @func_7475() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %310 = fn () -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
    %307 = @func_5771() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
    %308 = %307.1;
    %309 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
    (%308, %309)
  };
  %310() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */
}

def @func_9017() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  @func_9015() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_7821() -> (Tensor[(8, 7, 3), float32],) {
  %313 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %311 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %312 = %311.0;
    (%312,)
  };
  %313() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_871() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */
}

def @func_8380() -> Tensor[(8, 7, 3), float32] {
  @func_8378() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5208(%var_5206: Tensor[(10, 10, 7), float32], %var_5207: Tensor[(468), float32]) -> (Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  @func_5204(%var_5206, %var_5207) /* ty=(Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */
}

def @func_4837(%var_4835: Tensor[(3, 7, 11), float32]) -> Tensor[(3, 7, 11), float32] {
  @func_4834(%var_4835) /* ty=Tensor[(3, 7, 11), float32] */
}

def @func_9441(%var_9366: uint16, %var_9367: Tensor[(5, 1, 9), uint16]) -> (Tensor[(4, 7, 2), float32], Tensor[(1, 56), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(5, ?, 9), bool]) {
  %314 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 56), float32] */, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
  %315 = reshape(%314, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %316 = @func_4280(%315) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %317 = @func_2786() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %318 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %319 = %316.0;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %321 = reshape(%320, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %322 = @func_4280(%321) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %323 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %324 = cast(%var_9367, dtype="float32") /* ty=Tensor[(5, 1, 9), float32] */;
  %325 = sinh(%324) /* ty=Tensor[(5, 1, 9), float32] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(5, 1, 9), float32] */;
  %327 = tan(%326) /* ty=Tensor[(5, 1, 9), float32] */;
  %328 = cast(%var_9366, dtype="uint16") /* ty=uint16 */;
  %329 = cast(%var_9367, dtype="uint16") /* ty=Tensor[(5, 1, 9), uint16] */;
  %330 = bitwise_xor(%328, %329) /* ty=Tensor[(5, 1, 9), uint16] */;
  %331 = cast(%330, dtype="bool") /* ty=Tensor[(5, 1, 9), bool] */;
  %332 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%327, dtype="bool") /* ty=Tensor[(5, 1, 9), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = %317.2;
  %336 = %318.1;
  %337 = %322.1;
  %338 = %323.0;
  %339 = logical_and(%333, %334) /* ty=Tensor[(5, ?, 9), bool] */;
  (%319, meta[relay.Constant][11] /* ty=Tensor[(1, 56), float32] */, %335, %336, %337, %338, %339)
}

def @func_742() -> (Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) {
  @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */
}

def @func_4009() -> (Tensor[(8, 7, 3), float32],) {
  %340 = @func_2526() /* ty=Tensor[(8, 7, 3), float32] */;
  (%340,)
}

def @func_2074() -> Tensor[(8, 7, 3), int32] {
  @func_2072() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_7568(%var_7566: Tensor[(7, 16, 15), uint8], %var_7567: Tensor[(7, 16, 15), uint8]) -> Tensor[(7, 16, 15), uint8] {
  @func_7564(%var_7566, %var_7567) /* ty=Tensor[(7, 16, 15), uint8] */
}

def @func_6251() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  @func_6249() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */
}

def @func_7205(%var_7204: Tensor[(6, 16, 1), float32]) -> Tensor[(6, 16, 1), float32] {
  %342 = fn (%var_7200: Tensor[(6, 16, 1), float32]) -> Tensor[(6, 16, 1), float32] {
    %341 = cast(%var_7200, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
    erf(%341) /* ty=Tensor[(6, 16, 1), float32] */
  };
  %342(%var_7204) /* ty=Tensor[(6, 16, 1), float32] */
}

def @func_6249() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %343 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %344 = %343.0;
  %345 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%344, %345)
}

def @func_7962(%var_7960: Tensor[(11, 11, 3), float32]) -> (Tensor[(11, 11, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  @func_7959(%var_7960) /* ty=(Tensor[(11, 11, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_3324() -> (Tensor[(8, 7, 3), int32],) {
  %348 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %346 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
    %347 = %346.2;
    (%347,)
  };
  %348() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_5914() -> (Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %349 = @func_5017() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) */;
  %350 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %351 = %349.1;
  %352 = %350.0;
  %353 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  (%351, %352, %353)
}

def @func_6906(%var_6904: Tensor[(26, 7), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) {
  @func_6903(%var_6904) /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_4107(%var_4103: Tensor[(5, 2, 6), float64]) -> (Tensor[(5, 2, 6), float64],) {
  %354 = cast(%var_4103, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %355 = rsqrt(%354) /* ty=Tensor[(5, 2, 6), float64] */;
  (%355,)
}

def @func_2704() -> Tensor[(8, 7, 3), float32] {
  %356 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %356.0
}

def @func_9670() -> (Tensor[(8, 7, 3), float32],) {
  @func_9668() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_5019() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) {
  @func_5017() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) */
}

def @func_4459() -> Tensor[(8, 7, 3), float32] {
  @func_4457() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_3261() -> Tensor[(8, 7, 3), float32] {
  @func_3259() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5334(%var_5332: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) {
  %357 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
  %358 = cast(%var_5332, dtype="uint32") /* ty=uint32 */;
  %359 = reshape(%358, newshape=[]) /* ty=uint32 */;
  %360 = @func_1329(%359) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %361 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %362 = %357.0;
  %363 = %360.0;
  (%361, %362, %363, %var_5332)
}

def @func_2220() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %364 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %365 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  %366 = %364.0;
  (%365, %366)
}

def @func_5839() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %372 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %367 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %368 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %369 = %367.0;
    %370 = %368.0;
    %371 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
    (%369, %370, %371)
  };
  %372() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_1833() -> Tensor[(8, 7, 3), uint8] {
  %373 = @func_621() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */;
  %373.0
}

def @func_4129() -> (Tensor[(8, 7, 3), int32],) {
  %374 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %375 = %374.1;
  (%375,)
}

def @func_7865() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(520), float32]) {
  %382 = fn () -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(520), float32]) {
    %376 = @func_2786() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
    %377 = cast(meta[relay.Constant][12] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %378 = reshape(%377, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %379 = @func_2999(%378) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
    %380 = %376.2;
    %381 = %379.1;
    (%380, %381, meta[relay.Constant][12] /* ty=Tensor[(520), float32] */)
  };
  %382() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(520), float32]) */
}

def @func_4110(%var_4108: Tensor[(5, 2, 6), float64]) -> (Tensor[(5, 2, 6), float64],) {
  @func_4107(%var_4108) /* ty=(Tensor[(5, 2, 6), float64],) */
}

def @func_9668() -> (Tensor[(8, 7, 3), float32],) {
  %383 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %384 = %383.0;
  (%384,)
}

def @func_1783() -> Tensor[(8, 7, 3), float32] {
  @func_1781() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_4612() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  %388 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
    %385 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %386 = %385.0;
    %387 = @func_2441() /* ty=Tensor[(8, 7, 3), float64] */;
    (%386, %387)
  };
  %388() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */
}

def @func_3418() -> (Tensor[(8, 7, 3), float32],) {
  @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_5916() -> (Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  @func_5914() /* ty=(Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */
}

def @func_8089(%var_8078: int64) -> (Tensor[(8, 15, 14), bool],) {
  %389 = cast(%var_8078, dtype="bool") /* ty=bool */;
  %390 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 15, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
  %391 = greater(%389, %390) /* ty=Tensor[(8, 15, 14), bool] */;
  (%391,)
}

def @func_5428() -> Tensor[(8, 7, 3), int32] {
  %393 = fn () -> Tensor[(8, 7, 3), int32] {
    %392 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %392.0
  };
  %393() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_387(%var_386: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
  %396 = fn (%var_382: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
    %394 = cast(%var_382, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
    %395 = cos(%394) /* ty=Tensor[(8, 11, 7), float32] */;
    (%395,)
  };
  %396(%var_386) /* ty=(Tensor[(8, 11, 7), float32],) */
}

def @func_6116() -> Tensor[(8, 7, 3), float32] {
  @func_6114() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_1957() -> (Tensor[(8, 7, 3), float32],) {
  %398 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %397 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
    (%397,)
  };
  %398() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_6490(%var_6472: Tensor[(1080), float64]) -> (Tensor[(8, 7, 3), int32], Tensor[(12, 6, 15), int32]) {
  %399 = @func_2911() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %400 = cast(%var_6472, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %401 = reshape(%400, newshape=[12, 6, 15]) /* ty=Tensor[(12, 6, 15), float64] */;
  %402 = @func_3131(%401) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %403 = %402.0;
  %404 = cast(%var_6472, dtype="int32") /* ty=Tensor[(1080), int32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="int32") /* ty=Tensor[(12, 6, 15), int32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %408 = %399.0;
  %409 = bitwise_xor(%406, %407) /* ty=Tensor[(12, 6, 15), int32] */;
  (%408, %409)
}

def @func_5502() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %413 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %410 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %411 = %410.0;
    %412 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
    (%411, %412)
  };
  %413() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @main(%var_9717: Tensor[(8, 5, 3), float32]) -> Tensor[(8, 5, 3), float32] {
  %414 = cast(%var_9717, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %415 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(8, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%416, %417) /* ty=Tensor[(8, 5, 3), float32] */
}

def @func_2526() -> Tensor[(8, 7, 3), float32] {
  %418 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %418.0
}

def @func_7041(%var_7039: uint32, %var_7040: Tensor[(360), uint32]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), float64]) {
  %433 = fn (%var_6985: uint32, %var_6986: Tensor[(360), uint32]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), float64]) {
    %419 = @func_4611() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
    %420 = cast(%var_6985, dtype="uint32") /* ty=uint32 */;
    %421 = cast(%var_6986, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %422 = reshape(%420, newshape=[]) /* ty=uint32 */;
    %423 = reshape(%421, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
    %424 = @func_1189(%422, %423) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
    %425 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
    %426 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
    %427 = reshape(%425, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
    %428 = reshape(%426, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
    %429 = %419.1;
    %430 = %424.1;
    %431 = @func_4698(%427, %428) /* ty=Tensor[(2, 11, 9), bool] */;
    %432 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
    (%429, %430, %var_6985, %var_6986, %431, meta[relay.Constant][15] /* ty=Tensor[(198), int8] */, %432)
  };
  %433(%var_7039, %var_7040) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), float64]) */
}

def @func_450() -> Tensor[(8, 7, 3), float32] {
  %435 = fn () -> Tensor[(8, 7, 3), float32] {
    %434 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %434.0
  };
  %435() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_1506() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) {
  @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */
}

def @func_5543() -> Tensor[(8, 7, 3), uint8] {
  %443 = fn () -> Tensor[(8, 7, 3), uint8] {
    %436 = @func_3259() /* ty=Tensor[(8, 7, 3), float32] */;
    %437 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %438 = %437.0;
    %439 = cast(%438, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
    %440 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%436, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%441, %442) /* ty=Tensor[(8, 7, 3), uint8] */
  };
  %443() /* ty=Tensor[(8, 7, 3), uint8] */
}

def @func_490(%var_488: uint8, %var_489: Tensor[(2, 15, 9), uint8]) -> (Tensor[(2, 15, 9), uint8],) {
  @func_486(%var_488, %var_489) /* ty=(Tensor[(2, 15, 9), uint8],) */
}

def @func_5730(%var_5725: Tensor[(96), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  %444 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %445 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %446 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %447 = cast(%var_5725, dtype="float32") /* ty=Tensor[(96), float32] */;
  %448 = reshape(%447, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %449 = %444.0;
  %450 = %445.0;
  %451 = %446.0;
  %452 = @func_1394(%448) /* ty=Tensor[(8, 12), float32] */;
  (%449, %450, %451, %452, %var_5725)
}

def @func_3455() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  %453 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %454 = @func_2394() /* ty=Tensor[(8, 7, 3), int32] */;
  %455 = %453.0;
  (%454, %455)
}

def @func_8529(%var_8528: Tensor[(78, 6), float32]) -> (Tensor[(8, 7, 3), int8], Tensor[(10, 10, 7), float32], Tensor[(1, 700), float32], Tensor[(78, 6), float32]) {
  %464 = fn (%var_8516: Tensor[(78, 6), float32]) -> (Tensor[(8, 7, 3), int8], Tensor[(10, 10, 7), float32], Tensor[(1, 700), float32], Tensor[(78, 6), float32]) {
    %456 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
    %457 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 700), float32] */, dtype="float32") /* ty=Tensor[(1, 700), float32] */;
    %458 = cast(%var_8516, dtype="float32") /* ty=Tensor[(78, 6), float32] */;
    %459 = reshape(%457, newshape=[10, 10, 7]) /* ty=Tensor[(10, 10, 7), float32] */;
    %460 = reshape(%458, newshape=[468]) /* ty=Tensor[(468), float32] */;
    %461 = @func_5204(%459, %460) /* ty=(Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
    %462 = %456.1;
    %463 = %461.0;
    (%462, %463, meta[relay.Constant][16] /* ty=Tensor[(1, 700), float32] */, %var_8516)
  };
  %464(%var_8528) /* ty=(Tensor[(8, 7, 3), int8], Tensor[(10, 10, 7), float32], Tensor[(1, 700), float32], Tensor[(78, 6), float32]) */
}

def @func_4580() -> Tensor[(8, 7, 3), float32] {
  %465 = fn () -> Tensor[(8, 7, 3), float32] {
    @func_4457() /* ty=Tensor[(8, 7, 3), float32] */
  };
  %465() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_2913() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  @func_2911() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_997(%var_996: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int8],) {
  %473 = fn (%var_989: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), int8],) {
    %466 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
    %467 = %466.2;
    %468 = cast(%var_989, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
    %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%467, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %472 = left_shift(%470, %471) /* ty=Tensor[(8, 7, 3), int8] */;
    (%472,)
  };
  %473(%var_996) /* ty=(Tensor[(8, 7, 3), int8],) */
}

def @func_9643() -> (Tensor[(8, 7, 3), int32],) {
  %474 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %475 = %474.0;
  (%475,)
}

def @func_3416() -> (Tensor[(8, 7, 3), float32],) {
  %476 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %477 = %476.0;
  (%477,)
}

def @func_3928() -> (Tensor[(8, 7, 3), float32],) {
  %480 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %478 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
    %479 = %478.1;
    (%479,)
  };
  %480() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_9015() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %481 = @func_5914() /* ty=(Tensor[(8, 12), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %482 = %481.2;
  %483 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  (%482, %483)
}

def @func_4215() -> Tensor[(8, 7, 3), int32] {
  %484 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %484.0
}

def @func_4834(%var_4816: Tensor[(3, 7, 11), float32]) -> Tensor[(3, 7, 11), float32] {
  %485 = cast(%var_4816, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %486 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(3, 7, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 7, 11), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%487, %488) /* ty=Tensor[(3, 7, 11), float32] */
}

def @func_869() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %489 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %490 = %489.0;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %492 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %493 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %494 = rsqrt(%491) /* ty=Tensor[(8, 7, 3), float64] */;
  %495 = %492.0;
  %496 = %493.3;
  (%494, %495, %496)
}

def @func_3531(%var_3529: Tensor[(7, 7, 1), float32]) -> (Tensor[(7, 7, 1), float32],) {
  @func_3528(%var_3529) /* ty=(Tensor[(7, 7, 1), float32],) */
}

def @func_2631() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) {
  %497 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %498 = @func_2436() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %499 = %498.2;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %501 = asinh(%500) /* ty=Tensor[(8, 7, 3), float64] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %503 = cosh(%502) /* ty=Tensor[(8, 7, 3), float32] */;
  %504 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = @func_1781() /* ty=Tensor[(8, 7, 3), float32] */;
  %509 = %497.1;
  %510 = equal(%506, %507) /* ty=Tensor[(8, 7, 3), bool] */;
  (%508, %509, %510)
}

def @func_3231(%var_3196: float32, %var_3197: Tensor[(8, 1, 4), float32]) -> (Tensor[(8, 1, 4), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  %511 = cast(%var_3196, dtype="float32") /* ty=float32 */;
  %512 = cast(%var_3197, dtype="float32") /* ty=Tensor[(8, 1, 4), float32] */;
  %513 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %514 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %515 = reshape(%514, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %516 = floor_mod(%511, %512) /* ty=Tensor[(8, 1, 4), float32] */;
  %517 = %513.1;
  %518 = @func_1394(%515) /* ty=Tensor[(8, 12), float32] */;
  (%516, %517, %518, meta[relay.Constant][19] /* ty=Tensor[(96), float32] */)
}

def @func_2072() -> Tensor[(8, 7, 3), int32] {
  %519 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
  %520 = %519.1;
  %521 = @func_1942() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) */;
  %522 = %521.0;
  %523 = cast(%522, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %524 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%520, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%525, %526) /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_4762() -> (Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) {
  %533 = fn () -> (Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) {
    %527 = @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */;
    %528 = cast(meta[relay.Constant][20] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %529 = reshape(%528, newshape=[12, 6, 15]) /* ty=Tensor[(12, 6, 15), float64] */;
    %530 = @func_3131(%529) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
    %531 = %527.1;
    %532 = %530.1;
    (%531, %532, meta[relay.Constant][20] /* ty=Tensor[(1080), float64] */)
  };
  %533() /* ty=(Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) */
}

def @func_486(%var_471: uint8, %var_472: Tensor[(2, 15, 9), uint8]) -> (Tensor[(2, 15, 9), uint8],) {
  %534 = cast(%var_471, dtype="uint8") /* ty=uint8 */;
  %535 = cast(%var_472, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %536 = maximum(%534, %535) /* ty=Tensor[(2, 15, 9), uint8] */;
  (%536,)
}

def @func_8092(%var_8090: int64) -> (Tensor[(8, 15, 14), bool],) {
  @func_8089(%var_8090) /* ty=(Tensor[(8, 15, 14), bool],) */
}

def @func_5583() -> Tensor[(8, 7, 3), float64] {
  @func_5581() /* ty=Tensor[(8, 7, 3), float64] */
}

def @func_6071(%var_6048: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(2, 11, 9), bool], Tensor[(198), int8], Tensor[(8, 7, 3), int32]) {
  %537 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %538 = cast(%var_6048, dtype="int8") /* ty=Tensor[(198), int8] */;
  %539 = cast(%var_6048, dtype="int8") /* ty=Tensor[(198), int8] */;
  %540 = reshape(%538, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %541 = reshape(%539, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %542 = @func_3323() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %543 = %537.1;
  %544 = @func_4698(%540, %541) /* ty=Tensor[(2, 11, 9), bool] */;
  %545 = %542.0;
  (%543, %544, %var_6048, %545)
}

def @func_1835() -> Tensor[(8, 7, 3), uint8] {
  @func_1833() /* ty=Tensor[(8, 7, 3), uint8] */
}

def @func_7912(%var_7911: Tensor[(616), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) {
  %554 = fn (%var_7904: Tensor[(616), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) {
    %546 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %547 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %548 = cast(%var_7904, dtype="float32") /* ty=Tensor[(616), float32] */;
    %549 = reshape(%548, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %550 = @func_385(%549) /* ty=(Tensor[(8, 11, 7), float32],) */;
    %551 = %546.0;
    %552 = %547.0;
    %553 = %550.0;
    (%551, %552, %553, %var_7904)
  };
  %554(%var_7911) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) */
}

def @func_6321() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  @func_6319() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_5017() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) {
  %555 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %556 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 24), float32] */, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %557 = reshape(%556, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %558 = %555.0;
  %559 = @func_1394(%557) /* ty=Tensor[(8, 12), float32] */;
  (%558, %559, meta[relay.Constant][21] /* ty=Tensor[(4, 24), float32] */)
}

def @func_7838() -> Tensor[(8, 7, 3), float32] {
  %560 = @func_3021() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %560.1
}

def @func_3584() -> (Tensor[(8, 7, 3), int32],) {
  %563 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %561 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %562 = %561.1;
    (%562,)
  };
  %563() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_8466(%var_8463: Tensor[(13, 12, 6), float32], %var_8464: Tensor[(13, 12, 6), float32], %var_8465: Tensor[(2, 28), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 28), float32], Tensor[(13, 12, 6), float32]) {
  %575 = fn (%var_8413: Tensor[(13, 12, 6), float32], %var_8414: Tensor[(13, 12, 6), float32], %var_8444: Tensor[(2, 28), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 28), float32], Tensor[(13, 12, 6), float32]) {
    %564 = cast(%var_8414, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %565 = shape_of(%var_8413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%var_8413, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %568 = cast(%var_8444, dtype="float32") /* ty=Tensor[(2, 28), float32] */;
    %569 = reshape(%568, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
    %570 = @func_4280(%569) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
    %571 = cast(%var_8413, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %572 = subtract(%566, %567) /* ty=Tensor[(13, 12, 6), float32] */;
    %573 = %570.1;
    %574 = tan(%571) /* ty=Tensor[(13, 12, 6), float32] */;
    (%572, %573, %var_8444, %574)
  };
  %575(%var_8463, %var_8464, %var_8465) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 28), float32], Tensor[(13, 12, 6), float32]) */
}

def @func_1942() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32]) {
  %576 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %577 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %578 = reshape(%577, newshape=[]) /* ty=uint32 */;
  %579 = @func_1329(%578) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %580 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %581 = reshape(%580, newshape=[]) /* ty=uint32 */;
  %582 = @func_1329(%581) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32, Tensor[(360), uint32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */;
  %583 = %576.0;
  %584 = %579.5;
  %585 = %582.0;
  (%583, %584, meta[relay.Constant][22] /* ty=uint32 */, %585)
}

def @func_2438() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) {
  @func_2436() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64]) */
}

def @func_6903(%var_6874: Tensor[(26, 7), float32]) -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) {
  %586 = @func_5990() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %587 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %588 = cast(-9.45595f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %589 = cast(%var_6874, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
  %590 = cast(%var_6874, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
  %591 = reshape(%588, newshape=[]) /* ty=float32 */;
  %592 = reshape(%589, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
  %593 = reshape(%590, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
  %594 = @func_6732(%591, %592, %593) /* ty=(Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) */;
  %595 = @func_6249() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %596 = %586.0;
  %597 = %587.0;
  %598 = %594.0;
  %599 = %595.1;
  (%596, %597, %598, -9.45595f /* ty=float32 */, %var_6874, %599)
}

def @func_977() -> (Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) {
  %615 = fn () -> (Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) {
    %600 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
    %601 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
    %602 = atan(%601) /* ty=Tensor[(16, 10, 8), float32] */;
    %603 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 10, 8), float32] */, dtype="uint16") /* ty=Tensor[(16, 10, 8), uint16] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="uint16") /* ty=Tensor[(16, 10, 8), uint16] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %607 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %608 = cast(%602, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
    %609 = atanh(%608) /* ty=Tensor[(16, 10, 8), float32] */;
    %610 = cast(%609, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
    %611 = %600.0;
    %612 = right_shift(%605, %606) /* ty=Tensor[(16, 10, 8), uint16] */;
    %613 = %607.1;
    %614 = exp(%610) /* ty=Tensor[(16, 10, 8), float64] */;
    (%611, %612, %613, %614)
  };
  %615() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */
}

def @func_6319() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %616 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %617 = @func_5657() /* ty=Tensor[(8, 7, 3), float32] */;
  %618 = %616.1;
  (%617, %618)
}

def @func_1429() -> (Tensor[(8, 7, 3), float32],) {
  %621 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %619 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %620 = %619.0;
    (%620,)
  };
  %621() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_2528() -> Tensor[(8, 7, 3), float32] {
  @func_2526() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_8378() -> Tensor[(8, 7, 3), float32] {
  @func_2704() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_4571() -> (Tensor[(8, 7, 3), float32],) {
  %624 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %622 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_3457() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) {
  @func_3455() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */
}

def @func_8827(%var_8806: Tensor[(180), int16]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(180), int16], Tensor[(9, 2, 10), uint64]) {
  %625 = @func_8326() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %626 = @func_4009() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %627 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %628 = cast(%var_8806, dtype="int16") /* ty=Tensor[(180), int16] */;
  %629 = cast(%var_8806, dtype="int16") /* ty=Tensor[(180), int16] */;
  %630 = reshape(%628, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int16] */;
  %631 = reshape(%629, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int16] */;
  %632 = @func_8109(%630, %631) /* ty=Tensor[(9, 2, 10), int16] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %634 = asinh(%633) /* ty=Tensor[(9, 2, 10), float32] */;
  %635 = cast(%632, dtype="uint64") /* ty=Tensor[(9, 2, 10), uint64] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="uint64") /* ty=Tensor[(9, 2, 10), uint64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %639 = %625.0;
  %640 = %626.0;
  %641 = %627.1;
  %642 = bitwise_xor(%637, %638) /* ty=Tensor[(9, 2, 10), uint64] */;
  (%639, %640, %641, %var_8806, %642)
}

def @func_5957(%var_5955: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 2), bool] {
  @func_5954(%var_5955) /* ty=Tensor[(16, 11, 2), bool] */
}

def @func_4970() -> (Tensor[(8, 7, 3), float32],) {
  %645 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %643 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %644 = %643.0;
    (%644,)
  };
  %645() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_5788() -> (Tensor[(8, 7, 3), int32],) {
  %648 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %646 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %647 = %646.0;
    (%647,)
  };
  %648() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_8113(%var_8111: Tensor[(9, 2, 10), int16], %var_8112: Tensor[(9, 2, 10), int16]) -> Tensor[(9, 2, 10), int16] {
  @func_8109(%var_8111, %var_8112) /* ty=Tensor[(9, 2, 10), int16] */
}

def @func_1394(%var_1383: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
  %649 = cast(%var_1383, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  atanh(%649) /* ty=Tensor[(8, 12), float32] */
}

def @func_5420(%var_5418: Tensor[(10, 6, 6), uint8], %var_5419: Tensor[(10, 6, 6), uint8]) -> (Tensor[(10, 6, 6), float32], Tensor[(10, 6, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(10, 6, 6), float64], Tensor[(520), float32], Tensor[(260, 2), float32]) {
  %671 = fn (%var_5368: Tensor[(10, 6, 6), uint8], %var_5369: Tensor[(10, 6, 6), uint8]) -> (Tensor[(10, 6, 6), float32], Tensor[(10, 6, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(10, 6, 6), float64], Tensor[(520), float32], Tensor[(260, 2), float32]) {
    %650 = cast(%var_5369, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
    %651 = cast(%var_5369, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
    %652 = shape_of(%var_5368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%var_5368, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %655 = equal(%653, %654) /* ty=Tensor[(10, 6, 6), bool] */;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
    %657 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
    %658 = cast(%var_5369, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
    %659 = erf(%658) /* ty=Tensor[(10, 6, 6), float64] */;
    %660 = cast(%659, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
    %661 = cast(meta[relay.Constant][24] /* ty=Tensor[(260, 2), float32] */, dtype="float32") /* ty=Tensor[(260, 2), float32] */;
    %662 = reshape(%661, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %663 = @func_2999(%662) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
    %664 = log(%650) /* ty=Tensor[(10, 6, 6), float32] */;
    %665 = sinh(%656) /* ty=Tensor[(10, 6, 6), float32] */;
    %666 = %657.2;
    %667 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
    %668 = @func_4655() /* ty=Tensor[(8, 7, 3), float32] */;
    %669 = asinh(%660) /* ty=Tensor[(10, 6, 6), float64] */;
    %670 = %663.3;
    (%664, %665, %666, %667, %668, %669, %670, meta[relay.Constant][24] /* ty=Tensor[(260, 2), float32] */)
  };
  %671(%var_5418, %var_5419) /* ty=(Tensor[(10, 6, 6), float32], Tensor[(10, 6, 6), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(10, 6, 6), float64], Tensor[(520), float32], Tensor[(260, 2), float32]) */
}

def @func_5733(%var_5731: Tensor[(96), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(96), float32]) {
  @func_5730(%var_5731) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(96), float32]) */
}

def @func_6692() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) {
  %672 = @func_5501() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %675 = reshape(%674, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %676 = @func_1080(%675) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %677 = cast(meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %678 = reshape(%677, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %679 = @func_2999(%678) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520), float32]) */;
  %680 = cast(%673, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %681 = reshape(%680, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %682 = @func_1080(%681) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %683 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %684 = %676.0;
  %685 = %679.2;
  %686 = %682.3;
  %687 = %683.0;
  (%673, %684, %685, meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, %686, %687)
}

def @func_1731() -> (Tensor[(8, 7, 3), float32],) {
  %689 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %688 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
    (%688,)
  };
  %689() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_4702(%var_4700: Tensor[(2, 11, 9), int8], %var_4701: Tensor[(2, 11, 9), int8]) -> Tensor[(2, 11, 9), bool] {
  @func_4698(%var_4700, %var_4701) /* ty=Tensor[(2, 11, 9), bool] */
}

def @func_6805() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  @func_6803() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_7840() -> Tensor[(8, 7, 3), float32] {
  @func_7838() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5990() -> (Tensor[(8, 7, 3), float32],) {
  %690 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %691 = %690.0;
  (%691,)
}

def @func_9713() -> (Tensor[(8, 7, 3), float32],) {
  %692 = @func_8041() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
  %693 = %692.1;
  (%693,)
}

def @func_7959(%var_7930: Tensor[(11, 11, 3), float32]) -> (Tensor[(11, 11, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %694 = cast(%var_7930, dtype="float32") /* ty=Tensor[(11, 11, 3), float32] */;
  %695 = sigmoid(%694) /* ty=Tensor[(11, 11, 3), float32] */;
  %696 = @func_4457() /* ty=Tensor[(8, 7, 3), float32] */;
  %697 = @func_2072() /* ty=Tensor[(8, 7, 3), int32] */;
  (%695, %696, %697)
}

def @func_6940() -> (Tensor[(8, 7, 3), int32],) {
  @func_6938() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_7550() -> (Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) {
  %698 = @func_4570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %699 = cast(meta[relay.Constant][26] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %700 = reshape(%699, newshape=[26, 7]) /* ty=Tensor[(26, 7), float32] */;
  %701 = @func_6903(%700) /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), float32], float32, Tensor[(26, 7), float32], Tensor[(8, 7, 3), float32]) */;
  %702 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
  %703 = cast(%702, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %704 = reshape(%703, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
  %705 = @func_995(%704) /* ty=(Tensor[(8, 7, 3), int8],) */;
  %706 = %698.0;
  %707 = %701.3;
  %708 = %705.0;
  (%706, %707, meta[relay.Constant][26] /* ty=Tensor[(182), float32] */, %702, %708)
}

def @func_6959() -> (Tensor[(8, 7, 3), float64],) {
  @func_6957() /* ty=(Tensor[(8, 7, 3), float64],) */
}

def @func_4930() -> (uint32, Tensor[(8, 7, 3), int32]) {
  %712 = fn () -> (uint32, Tensor[(8, 7, 3), int32]) {
    %709 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
    %710 = %709.2;
    %711 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
    (%710, %711)
  };
  %712() /* ty=(uint32, Tensor[(8, 7, 3), int32]) */
}

def @func_2515() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) {
  @func_2513() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) */
}

def @func_4131() -> (Tensor[(8, 7, 3), int32],) {
  @func_4129() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_9590() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32) {
  @func_9588() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], uint32) */
}

def @func_2387() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */
}

def @func_6188(%var_6170: Tensor[(56), float32], %var_6174: Tensor[(4, 7, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) {
  %713 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %714 = cast(%var_6170, dtype="float32") /* ty=Tensor[(56), float32] */;
  %715 = reshape(%714, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float32] */;
  %716 = @func_4280(%715) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(8, 7, 3), float32]) */;
  %717 = %716.0;
  %718 = cast(%var_6174, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %722 = %713.0;
  %723 = @func_6114() /* ty=Tensor[(8, 7, 3), float32] */;
  %724 = left_shift(%720, %721) /* ty=Tensor[(4, 7, 2), uint32] */;
  (%722, %723, %var_6170, %724)
}

def @func_2513() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int8]) {
  %725 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %726 = @func_1504() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], uint32, Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64]) */;
  %727 = %726.1;
  %728 = @func_976() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(16, 10, 8), uint16], Tensor[(8, 7, 3), int32], Tensor[(16, 10, 8), float64]) */;
  %729 = %728.2;
  %730 = cast(%729, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %731 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%727, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %734 = %725.0;
  %735 = bitwise_xor(%732, %733) /* ty=Tensor[(8, 7, 3), int8] */;
  (%734, %735)
}

def @func_2395() -> Tensor[(8, 7, 3), int32] {
  %737 = fn () -> Tensor[(8, 7, 3), int32] {
    %736 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
    %736.1
  };
  %737() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_3580() -> (Tensor[(8, 7, 3), float32],) {
  %740 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %738 = @func_2220() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
    %739 = %738.0;
    (%739,)
  };
  %740() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_505() -> (Tensor[(8, 7, 3), float32],) {
  %741 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
  (%741,)
}

def @func_9080() -> (Tensor[(11, 11, 6), uint16], Tensor[(8, 12), float32]) {
  %749 = fn () -> (Tensor[(11, 11, 6), uint16], Tensor[(8, 12), float32]) {
    %742 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 6), uint16] */;
    %743 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 6), uint16] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %746 = @func_5017() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 12), float32], Tensor[(4, 24), float32]) */;
    %747 = bitwise_or(%744, %745) /* ty=Tensor[(11, 11, 6), uint16] */;
    %748 = %746.1;
    (%747, %748)
  };
  %749() /* ty=(Tensor[(11, 11, 6), uint16], Tensor[(8, 12), float32]) */
}

def @func_6192(%var_6190: Tensor[(56), float32], %var_6191: Tensor[(4, 7, 2), float32]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) {
  @func_6188(%var_6190, %var_6191) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(56), float32], Tensor[(4, 7, 2), uint32]) */
}

def @func_5771() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %750 = @func_3416() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %751 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %752 = @func_5109() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %753 = %750.0;
  %754 = %751.0;
  %755 = %752.0;
  (%753, %754, %755)
}

def @func_1987() -> (Tensor[(8, 7, 3), float32],) {
  %756 = @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %757 = %756.0;
  (%757,)
}

def @func_2633() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) {
  @func_2631() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) */
}

def @func_8572() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %761 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %758 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
    %759 = @func_1620() /* ty=Tensor[(8, 7, 3), int32] */;
    %760 = %758.1;
    (%759, %760)
  };
  %761() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_5457(%var_5455: Tensor[(2, 4, 1), uint8]) -> Tensor[(2, 4, ?), uint8] {
  @func_5454(%var_5455) /* ty=Tensor[(2, 4, ?), uint8] */
}

def @func_7246() -> (uint32, Tensor[(8, 7, 3), uint8]) {
  %765 = fn () -> (uint32, Tensor[(8, 7, 3), uint8]) {
    %762 = @func_4929() /* ty=(uint32, Tensor[(8, 7, 3), int32]) */;
    %763 = %762.0;
    %764 = @func_5542() /* ty=Tensor[(8, 7, 3), uint8] */;
    (%763, %764)
  };
  %765() /* ty=(uint32, Tensor[(8, 7, 3), uint8]) */
}

def @func_622() -> (Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) {
  %777 = fn () -> (Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) {
    %766 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %767 = %766.1;
    %768 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
    %769 = %768.0;
    %770 = cast(%769, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
    %771 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%767, dtype="uint8") /* ty=Tensor[(8, 7, 3), uint8] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %774 = cast(%767, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
    %775 = right_shift(%772, %773) /* ty=Tensor[(8, 7, 3), uint8] */;
    %776 = sinh(%774) /* ty=Tensor[(8, 7, 3), float32] */;
    (%775, %776)
  };
  %777() /* ty=(Tensor[(8, 7, 3), uint8], Tensor[(8, 7, 3), float32]) */
}

def @func_7158(%var_7157: Tensor[(11, 12, 16), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(11, 12, 16), uint16], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(11, 12, 16), int32]) {
  %813 = fn (%var_7085: Tensor[(11, 12, 16), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(11, 12, 16), uint16], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(11, 12, 16), int32]) {
    %778 = cast(%var_7085, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
    %779 = asinh(%778) /* ty=Tensor[(11, 12, 16), float32] */;
    %780 = cast(%779, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %781 = erf(%780) /* ty=Tensor[(11, 12, 16), float64] */;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
    %783 = exp(%782) /* ty=Tensor[(11, 12, 16), float32] */;
    %784 = cast(%783, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
    %785 = sinh(%784) /* ty=Tensor[(11, 12, 16), float32] */;
    %786 = cast(%781, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
    %788 = cast(%785, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %790 = @func_2220() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
    %791 = %790.0;
    %792 = cast(%791, dtype="int8") /* ty=Tensor[(8, 7, 3), int8] */;
    %793 = reshape(%792, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
    %794 = @func_1080(%793) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
    %795 = @func_3583() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %796 = cast(%781, dtype="uint16") /* ty=Tensor[(11, 12, 16), uint16] */;
    %797 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%785, dtype="uint16") /* ty=Tensor[(11, 12, 16), uint16] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %800 = @func_3579() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %801 = @func_5771() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
    %802 = cast(%781, dtype="int32") /* ty=Tensor[(11, 12, 16), int32] */;
    %803 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%783, dtype="int32") /* ty=Tensor[(11, 12, 16), int32] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %806 = power(%788, %789) /* ty=Tensor[(11, 12, 16), float64] */;
    %807 = %794.3;
    %808 = %795.0;
    %809 = bitwise_xor(%798, %799) /* ty=Tensor[(11, 12, 16), uint16] */;
    %810 = %800.0;
    %811 = %801.1;
    %812 = bitwise_or(%804, %805) /* ty=Tensor[(11, 12, 16), int32] */;
    (%806, %791, %807, %808, %809, %810, %811, %812)
  };
  %813(%var_7157) /* ty=(Tensor[(11, 12, 16), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32], Tensor[(11, 12, 16), uint16], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float64], Tensor[(11, 12, 16), int32]) */
}

def @func_6957() -> (Tensor[(8, 7, 3), float64],) {
  %814 = @func_5581() /* ty=Tensor[(8, 7, 3), float64] */;
  (%814,)
}

def @func_3528(%var_3522: Tensor[(7, 7, 1), float32]) -> (Tensor[(7, 7, 1), float32],) {
  %815 = cast(%var_3522, dtype="float32") /* ty=Tensor[(7, 7, 1), float32] */;
  %816 = acosh(%815) /* ty=Tensor[(7, 7, 1), float32] */;
  (%816,)
}

def @func_2877() -> (Tensor[(8, 7, 3), int32],) {
  %819 = fn () -> (Tensor[(8, 7, 3), int32],) {
    %817 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
    %818 = %817.1;
    (%818,)
  };
  %819() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_1661(%var_1660: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), float32],) {
  %827 = fn (%var_1654: Tensor[(8, 7, 3), int32]) -> (Tensor[(8, 7, 3), float32],) {
    %820 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %821 = %820.0;
    %822 = cast(%var_1654, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
    %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
    %824 = cast(%821, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %826 = floor_divide(%824, %825) /* ty=Tensor[(8, 7, 3), float32] */;
    (%826,)
  };
  %827(%var_1660) /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_5581() -> Tensor[(8, 7, 3), float64] {
  %828 = @func_4628() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %828.0
}

def @func_9445(%var_9443: uint16, %var_9444: Tensor[(5, 1, 9), uint16]) -> (Tensor[(4, 7, 2), float32], Tensor[(1, 56), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(5, ?, 9), bool]) {
  @func_9441(%var_9443, %var_9444) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(1, 56), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(5, ?, 9), bool]) */
}

def @func_8830(%var_8828: Tensor[(180), int16]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(180), int16], Tensor[(9, 2, 10), uint64]) {
  @func_8827(%var_8828) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(180), int16], Tensor[(9, 2, 10), uint64]) */
}

def @func_6737(%var_6734: float32, %var_6735: Tensor[(2, 13, 7), float32], %var_6736: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) {
  @func_6732(%var_6734, %var_6735, %var_6736) /* ty=(Tensor[(2, 13, 7), float32], Tensor[(2, 13, 7), bool], Tensor[(8, 7, 3), float32], Tensor[(2, 13, 7), uint16]) */
}

def @func_4656() -> Tensor[(8, 7, 3), float32] {
  %830 = fn () -> Tensor[(8, 7, 3), float32] {
    %829 = @func_2631() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), bool]) */;
    %829.0
  };
  %830() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_273() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  %831 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %832 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %833 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 7, 3), float32] */, dtype="int32") /* ty=Tensor[(1, 7, 3), int32] */;
  %834 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 7, 3), float32] */, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
  %835 = floor_mod(%831, %832) /* ty=Tensor[(8, 7, 3), float32] */;
  %836 = bitwise_or(%833, %834) /* ty=Tensor[(8, 7, 3), int32] */;
  (%835, %836)
}

def @func_5277() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) {
  %849 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) {
    %837 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
    %838 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
    %839 = %838.0;
    %840 = cast(%839, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
    %841 = reshape(%840, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
    %842 = @func_995(%841) /* ty=(Tensor[(8, 7, 3), int8],) */;
    %843 = @func_4761() /* ty=(Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32], Tensor[(1080), float64]) */;
    %844 = @func_2876() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %845 = %837.1;
    %846 = %842.0;
    %847 = %843.0;
    %848 = %844.0;
    (%845, %839, %846, %847, %848)
  };
  %849() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) */
}

def @func_4457() -> Tensor[(8, 7, 3), float32] {
  %850 = @func_1244() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %850.0
}

def @func_5954(%var_5949: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 2), bool] {
  %851 = cast(%var_5949, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %852 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 11, 2), int8] */, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  less_equal(%851, %852) /* ty=Tensor[(16, 11, 2), bool] */
}

def @func_275() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) {
  @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */
}

def @func_6619(%var_6567: Tensor[(2, 11, 14), float64], %var_6602: Tensor[(2, 11, 14), float32]) -> (Tensor[(2, 11, 14), float64], Tensor[(2, 11, 14), uint64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint8]) {
  %853 = cast(%var_6567, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %854 = log2(%853) /* ty=Tensor[(2, 11, 14), float64] */;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %856 = cast(%var_6567, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
  %857 = acosh(%856) /* ty=Tensor[(2, 11, 14), float32] */;
  %858 = cast(%var_6602, dtype="uint64") /* ty=Tensor[(2, 11, 14), uint64] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="uint64") /* ty=Tensor[(2, 11, 14), uint64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %862 = @func_5501() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %863 = @func_4129() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %864 = log10(%855) /* ty=Tensor[(2, 11, 14), float64] */;
  %865 = logical_xor(%860, %861) /* ty=Tensor[(2, 11, 14), uint64] */;
  %866 = %862.1;
  %867 = %863.0;
  %868 = @func_5542() /* ty=Tensor[(8, 7, 3), uint8] */;
  (%864, %865, %866, %867, %868)
}

def @func_4698(%var_4672: Tensor[(2, 11, 9), int8], %var_4673: Tensor[(2, 11, 9), int8]) -> Tensor[(2, 11, 9), bool] {
  %869 = cast(%var_4673, dtype="bool") /* ty=Tensor[(2, 11, 9), bool] */;
  %870 = shape_of(%var_4672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%var_4672, dtype="bool") /* ty=Tensor[(2, 11, 9), bool] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%871, %872) /* ty=Tensor[(2, 11, 9), bool] */
}

def @func_8327() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %880 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
    %873 = @func_3583() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %874 = @func_740() /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), float32]) */;
    %875 = @func_8041() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */;
    %876 = %873.0;
    %877 = %874.1;
    %878 = %875.0;
    %879 = @func_7838() /* ty=Tensor[(8, 7, 3), float32] */;
    (%876, %877, %878, %879)
  };
  %880() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_4628() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %881 = @func_869() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %882 = @func_2385() /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) */;
  %883 = %881.1;
  %884 = %882.1;
  (%883, %884)
}

def @func_1571() -> (Tensor[(8, 7, 3), float32],) {
  %887 = fn () -> (Tensor[(8, 7, 3), float32],) {
    %885 = @func_1428() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %886 = %885.0;
    (%886,)
  };
  %887() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_7605() -> (Tensor[(8, 7, 3), int32], Tensor[(2, 4, ?), int16]) {
  %897 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(2, 4, ?), int16]) {
    %888 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 8), uint8] */, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
    %889 = reshape(%888, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), uint8] */;
    %890 = @func_5454(%889) /* ty=Tensor[(2, 4, ?), uint8] */;
    %891 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 8), uint8] */, dtype="int16") /* ty=Tensor[(1, 8), int16] */;
    %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
    %893 = cast(%890, dtype="int16") /* ty=Tensor[(2, 4, ?), int16] */;
    %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %895 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
    %896 = minimum(%893, %894) /* ty=Tensor[(2, 4, ?), int16] */;
    (%895, %896)
  };
  %897() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(2, 4, ?), int16]) */
}

def @func_4079(%var_4076: Tensor[(168), int8]) -> (Tensor[(15, 15, 15), float32], Tensor[(8, 7, 3), int8], Tensor[(168), int8]) {
  %898 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %899 = cast(%var_4076, dtype="int8") /* ty=Tensor[(168), int8] */;
  %900 = reshape(%899, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int8] */;
  %901 = @func_1080(%900) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */;
  %902 = acosh(%898) /* ty=Tensor[(15, 15, 15), float32] */;
  %903 = %901.2;
  (%902, %903, %var_4076)
}

def @func_2128(%var_2120: Tensor[(9, 5, 5), float32]) -> Tensor[(9, 5, 5), float32] {
  %904 = cast(%var_2120, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  erf(%904) /* ty=Tensor[(9, 5, 5), float32] */
}

def @func_4523(%var_4496: int16, %var_4497: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), bool], Tensor[(8, 7, 3), float32], Tensor[(10, 4, 13), float32], Tensor[(520, 1), float32]) {
  %905 = cast(%var_4496, dtype="bool") /* ty=bool */;
  %906 = cast(%var_4497, dtype="bool") /* ty=Tensor[(14, 2, 11), bool] */;
  %907 = @func_4457() /* ty=Tensor[(8, 7, 3), float32] */;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %909 = cast(meta[relay.Constant][34] /* ty=Tensor[(520, 1), float32] */, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
  %910 = reshape(%909, newshape=[10, 4, 13]) /* ty=Tensor[(10, 4, 13), float32] */;
  %911 = equal(%905, %906) /* ty=Tensor[(14, 2, 11), bool] */;
  %912 = atanh(%908) /* ty=Tensor[(8, 7, 3), float32] */;
  %913 = @func_1690(%910) /* ty=Tensor[(10, 4, 13), float32] */;
  (%911, %912, %913, meta[relay.Constant][34] /* ty=Tensor[(520, 1), float32] */)
}

def @func_7552() -> (Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) {
  @func_7550() /* ty=(Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) */
}

def @func_9331() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float32], Tensor[(616), float32], Tensor[(308, 2), float32]) {
  %914 = @func_4009() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %915 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
  %916 = %915.1;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %918 = @func_7550() /* ty=(Tensor[(8, 7, 3), float32], float32, Tensor[(182), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8]) */;
  %919 = @func_6692() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float64], Tensor[(10, 4, 13), float32], Tensor[(520), float32], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float32]) */;
  %920 = @func_7820() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %921 = cast(meta[relay.Constant][35] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %922 = reshape(%921, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %923 = @func_7910(%922) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32]) */;
  %924 = %914.0;
  %925 = @func_7302() /* ty=Tensor[(8, 7, 3), float32] */;
  %926 = log(%917) /* ty=Tensor[(8, 7, 3), float32] */;
  %927 = @func_4579() /* ty=Tensor[(8, 7, 3), float32] */;
  %928 = %918.0;
  %929 = %919.3;
  %930 = %920.0;
  %931 = %923.3;
  (%924, %925, %926, %927, %928, %929, %930, %931, meta[relay.Constant][35] /* ty=Tensor[(308, 2), float32] */)
}

def @func_2232() -> Tensor[(8, 7, 3), int32] {
  %932 = fn () -> Tensor[(8, 7, 3), int32] {
    @func_1620() /* ty=Tensor[(8, 7, 3), int32] */
  };
  %932() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_2706() -> Tensor[(8, 7, 3), float32] {
  @func_2704() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_3273() -> Tensor[(8, 7, 3), int32] {
  @func_3271() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_5204(%var_5183: Tensor[(10, 10, 7), float32], %var_5196: Tensor[(468), float32]) -> (Tensor[(10, 10, 7), float32], Tensor[(10, 10, 7), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  %933 = cast(%var_5183, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %934 = cast(%var_5183, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %935 = cast(%var_5196, dtype="float32") /* ty=Tensor[(468), float32] */;
  %936 = reshape(%935, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %937 = @func_3179(%936) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */;
  %938 = acosh(%933) /* ty=Tensor[(10, 10, 7), float32] */;
  %939 = atan(%934) /* ty=Tensor[(10, 10, 7), float32] */;
  %940 = %937.1;
  (%938, %939, %940, %var_5196)
}

def @func_1397(%var_1395: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
  @func_1394(%var_1395) /* ty=Tensor[(8, 12), float32] */
}

def @func_1082(%var_1081: Tensor[(8, 7, 3), int8]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) {
  %958 = fn (%var_1058: Tensor[(8, 7, 3), int8]) -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) {
    %941 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
    %942 = %941.0;
    %943 = cast(%942, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
    %944 = reshape(%943, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
    %945 = @func_995(%944) /* ty=(Tensor[(8, 7, 3), int8],) */;
    %946 = %945.0;
    %947 = cast(%var_1058, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
    %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %949 = cast(%946, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %951 = cast(%var_1058, dtype="int32") /* ty=Tensor[(8, 7, 3), int32] */;
    %952 = reshape(%951, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), int32] */;
    %953 = @func_995(%952) /* ty=(Tensor[(8, 7, 3), int8],) */;
    %954 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
    %955 = power(%949, %950) /* ty=Tensor[(8, 7, 3), float64] */;
    %956 = %953.0;
    %957 = %954.0;
    (%942, %955, %956, %957)
  };
  %958(%var_1081) /* ty=(Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), float64]) */
}

def @func_7735() -> (Tensor[(8, 7, 3), int32],) {
  @func_7733() /* ty=(Tensor[(8, 7, 3), int32],) */
}

def @func_657() -> (Tensor[(8, 7, 3), float64],) {
  %962 = fn () -> (Tensor[(8, 7, 3), float64],) {
    %959 = @func_449() /* ty=Tensor[(8, 7, 3), float32] */;
    %960 = cast(%959, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
    %961 = atan(%960) /* ty=Tensor[(8, 7, 3), float64] */;
    (%961,)
  };
  %962() /* ty=(Tensor[(8, 7, 3), float64],) */
}

def @func_9062() -> (Tensor[(8, 7, 3), float32],) {
  %963 = @func_1570() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %964 = %963.0;
  (%964,)
}

def @func_2385() -> (Tensor[(8, 7, 3), float64], Tensor[(8, 7, 3), int32]) {
  %965 = @func_656() /* ty=(Tensor[(8, 7, 3), float64],) */;
  %966 = %965.0;
  %967 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
  (%966, %967)
}

def @func_9617() -> (Tensor[(8, 7, 3), float32],) {
  @func_9615() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_5065() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %971 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %968 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %969 = @func_2231() /* ty=Tensor[(8, 7, 3), int32] */;
    %970 = %968.0;
    (%969, %970)
  };
  %971() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_1620() -> Tensor[(8, 7, 3), int32] {
  %972 = @func_329() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %972.1
}

def @func_2443() -> Tensor[(8, 7, 3), float64] {
  @func_2441() /* ty=Tensor[(8, 7, 3), float64] */
}

def @func_5337(%var_5335: uint32) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) {
  @func_5334(%var_5335) /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], uint32) */
}

def @func_9241(%var_9224: Tensor[(198), int8]) -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32], Tensor[(198), int8], Tensor[(2, 11, 9), float32], Tensor[(8, 7, 3), int32]) {
  %973 = @func_776() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %974 = @func_2732() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %975 = @func_273() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), int32]) */;
  %976 = cast(%var_9224, dtype="int8") /* ty=Tensor[(198), int8] */;
  %977 = cast(%var_9224, dtype="int8") /* ty=Tensor[(198), int8] */;
  %978 = reshape(%976, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %979 = reshape(%977, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), int8] */;
  %980 = @func_4698(%978, %979) /* ty=Tensor[(2, 11, 9), bool] */;
  %981 = cast(%980, dtype="float32") /* ty=Tensor[(2, 11, 9), float32] */;
  %982 = @func_7733() /* ty=(Tensor[(8, 7, 3), int32],) */;
  %983 = %973.0;
  %984 = %974.0;
  %985 = %975.1;
  %986 = acos(%981) /* ty=Tensor[(2, 11, 9), float32] */;
  %987 = %982.0;
  (%983, %984, %985, %var_9224, %986, %987)
}

def @func_7391(%var_7389: uint32, %var_7390: Tensor[(180, 2), uint32]) -> (Tensor[(7, 15, 14), uint8], Tensor[(8, 7, 3), int32], uint32, Tensor[(180, 2), uint32], Tensor[(8, 7, 3), int32]) {
  %1001 = fn (%var_7382: uint32, %var_7383: Tensor[(180, 2), uint32]) -> (Tensor[(7, 15, 14), uint8], Tensor[(8, 7, 3), int32], uint32, Tensor[(180, 2), uint32], Tensor[(8, 7, 3), int32]) {
    %988 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 14), uint8] */;
    %989 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %990 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 14), uint8] */;
    %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %992 = cast(%var_7382, dtype="uint32") /* ty=uint32 */;
    %993 = cast(%var_7383, dtype="uint32") /* ty=Tensor[(180, 2), uint32] */;
    %994 = reshape(%992, newshape=[]) /* ty=uint32 */;
    %995 = reshape(%993, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint32] */;
    %996 = @func_1189(%994, %995) /* ty=(Tensor[(12, 3, 10), uint16], Tensor[(8, 7, 3), int32]) */;
    %997 = @func_5276() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint16], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int8], Tensor[(8, 7, 3), int32]) */;
    %998 = logical_xor(%990, %991) /* ty=Tensor[(7, 15, 14), uint8] */;
    %999 = %996.1;
    %1000 = %997.4;
    (%998, %999, %var_7382, %var_7383, %1000)
  };
  %1001(%var_7389, %var_7390) /* ty=(Tensor[(7, 15, 14), uint8], Tensor[(8, 7, 3), int32], uint32, Tensor[(180, 2), uint32], Tensor[(8, 7, 3), int32]) */
}

def @func_507() -> (Tensor[(8, 7, 3), float32],) {
  @func_505() /* ty=(Tensor[(8, 7, 3), float32],) */
}

def @func_8109(%var_8101: Tensor[(9, 2, 10), int16], %var_8102: Tensor[(9, 2, 10), int16]) -> Tensor[(9, 2, 10), int16] {
  %1002 = cast(%var_8102, dtype="int16") /* ty=Tensor[(9, 2, 10), int16] */;
  %1003 = shape_of(%var_8101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1004 = cast(%var_8101, dtype="int16") /* ty=Tensor[(9, 2, 10), int16] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%1004, %1005) /* ty=Tensor[(9, 2, 10), int16] */
}

def @func_7733() -> (Tensor[(8, 7, 3), int32],) {
  %1006 = @func_5064() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */;
  %1007 = %1006.1;
  (%1007,)
}

def @func_8203() -> Tensor[(8, 7, 3), int32] {
  %1009 = fn () -> Tensor[(8, 7, 3), int32] {
    %1008 = @func_377() /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32]) */;
    %1008.1
  };
  %1009() /* ty=Tensor[(8, 7, 3), int32] */
}

def @func_8855() -> Tensor[(8, 7, 3), float32] {
  %1010 = @func_1987() /* ty=(Tensor[(8, 7, 3), float32],) */;
  %1010.0
}

def @func_8042() -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
  %1015 = fn () -> (Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) {
    %1011 = @func_1956() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %1012 = @func_3927() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %1013 = %1011.0;
    %1014 = %1012.0;
    (%1013, %1014)
  };
  %1015() /* ty=(Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32]) */
}

def @func_3134(%var_3132: Tensor[(12, 6, 15), float64]) -> (Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) {
  @func_3131(%var_3132) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), float32], Tensor[(12, 6, 15), float32], Tensor[(8, 7, 3), float32], Tensor[(4, 9, 13), bool], Tensor[(468), float32]) */
}

def @func_5658() -> Tensor[(8, 7, 3), float32] {
  %1017 = fn () -> Tensor[(8, 7, 3), float32] {
    %1016 = @func_3499() /* ty=(Tensor[(8, 7, 3), float32],) */;
    %1016.0
  };
  %1017() /* ty=Tensor[(8, 7, 3), float32] */
}

def @func_5574() -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
  %1021 = fn () -> (Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) {
    %1018 = @func_5030() /* ty=(Tensor[(8, 7, 3), int32],) */;
    %1019 = %1018.0;
    %1020 = @func_3271() /* ty=Tensor[(8, 7, 3), int32] */;
    (%1019, %1020)
  };
  %1021() /* ty=(Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32]) */
}

def @func_6623(%var_6621: Tensor[(2, 11, 14), float64], %var_6622: Tensor[(2, 11, 14), float32]) -> (Tensor[(2, 11, 14), float64], Tensor[(2, 11, 14), uint64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint8]) {
  @func_6619(%var_6621, %var_6622) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(2, 11, 14), uint64], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), int32], Tensor[(8, 7, 3), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen223/build/output.py:3402: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen223/build/output.py", line 3407, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_reshape_subtract_kernel0(float* __restrict__ T_subtract, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_subtract[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] - placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

