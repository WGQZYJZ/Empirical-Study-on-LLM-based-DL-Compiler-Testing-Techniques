==========mod==========
#[version = "0.0.5"]
def @func_3187() -> (Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %1 = reshape(%0, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
  %2 = @func_3023(%1) /* ty=(Tensor[(3, 9, 8), float32],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
  %5 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
  %6 = cos(%4) /* ty=Tensor[(3, 9, 8), float32] */;
  (%5, meta[relay.Constant][0] /* ty=Tensor[(216), float32] */, %6)
}

def @func_4806(%var_4795: Tensor[(3, 15, 14), int32], %var_4796: Tensor[(3, 15, 14), int32]) -> Tensor[(3, 15, 14), int32] {
  %7 = cast(%var_4796, dtype="int32") /* ty=Tensor[(3, 15, 14), int32] */;
  %8 = shape_of(%var_4795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_4795, dtype="int32") /* ty=Tensor[(3, 15, 14), int32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%9, %10) /* ty=Tensor[(3, 15, 14), int32] */
}

def @func_5406(%var_5398: Tensor[(770), float64], %var_5403: Tensor[(480), float64]) -> (Tensor[(3, 9, ?), float32], Tensor[(11, 12, 10), bool], Tensor[(1320), int16], Tensor[(770), float64], Tensor[(3, 9, 1), float32], Tensor[(480), float64]) {
  %11 = @func_5214() /* ty=(Tensor[(3, 9, ?), float32],) */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(1320), int16] */, dtype="int16") /* ty=Tensor[(1320), int16] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(1320), int16] */, dtype="int16") /* ty=Tensor[(1320), int16] */;
  %14 = cast(%var_5398, dtype="float64") /* ty=Tensor[(770), float64] */;
  %15 = reshape(%12, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %16 = reshape(%13, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %17 = reshape(%14, newshape=[77, 10]) /* ty=Tensor[(77, 10), float64] */;
  %18 = @func_3647(%15, %16, %17) /* ty=(Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) */;
  %19 = cast(%var_5403, dtype="float64") /* ty=Tensor[(480), float64] */;
  %20 = reshape(%19, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %21 = @func_5046(%20) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %22 = %11.0;
  %23 = %18.0;
  %24 = %21.1;
  (%22, %23, meta[relay.Constant][1] /* ty=Tensor[(1320), int16] */, %var_5398, %24, %var_5403)
}

def @func_2665() -> (Tensor[(3, 9, 1), float32],) {
  %25 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %26 = %25.0;
  (%26,)
}

def @func_4171(%var_4135: Tensor[(1, 3, 6), float32]) -> (Tensor[(1, 3, 6), float32], Tensor[(90), float64], Tensor[(45, 2), float64], Tensor[(3, 9, 1), float32]) {
  %27 = cast(%var_4135, dtype="float32") /* ty=Tensor[(1, 3, 6), float32] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
  %29 = reshape(%28, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %30 = @func_2787(%29) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) */;
  %31 = @func_3767() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %32 = log(%27) /* ty=Tensor[(1, 3, 6), float32] */;
  %33 = %30.2;
  %34 = %31.0;
  (%32, %33, meta[relay.Constant][2] /* ty=Tensor[(45, 2), float64] */, %34)
}

def @func_3836(%var_3833: float64, %var_3834: Tensor[(91, 10), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(91, 10), float64]) {
  %35 = cast(%var_3833, dtype="float64") /* ty=float64 */;
  %36 = cast(%var_3834, dtype="float64") /* ty=Tensor[(91, 10), float64] */;
  %37 = reshape(%35, newshape=[]) /* ty=float64 */;
  %38 = reshape(%36, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %39 = @func_3227(%37, %38) /* ty=(Tensor[(10, 7, 13), float64],) */;
  %40 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
  %41 = %39.0;
  (%40, %41, %var_3833, %var_3834)
}

def @func_536(%var_533: Tensor[(1960), uint8]) -> (Tensor[(16, 4, 2), float64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 2), float32] */;
  %43 = tan(%42) /* ty=Tensor[(16, 4, 2), float32] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(16, 4, 2), float64] */;
  %45 = cast(%var_533, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %46 = cast(%var_533, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %47 = reshape(%45, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %48 = reshape(%46, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %49 = @func_125(%47, %48) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %50 = sin(%44) /* ty=Tensor[(16, 4, 2), float64] */;
  %51 = %49.0;
  (%50, %51, %var_533)
}

def @func_3797(%var_3794: Tensor[(100), float64], %var_3795: Tensor[(140, 14), uint8]) -> (Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) {
  %52 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %55 = asinh(%54) /* ty=Tensor[(3, 9, 1), float64] */;
  %56 = cast(%53, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %60 = cast(%var_3794, dtype="float64") /* ty=Tensor[(100), float64] */;
  %61 = cast(%var_3795, dtype="uint8") /* ty=Tensor[(140, 14), uint8] */;
  %62 = reshape(%60, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
  %63 = reshape(%61, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
  %64 = @func_658(%62, %63) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
  %65 = mod(%58, %59) /* ty=Tensor[(3, 9, ?), float64] */;
  %66 = %64.2;
  (%65, %66, %var_3794, %var_3795)
}

def @func_5802() -> Tensor[(3, 9, 1), float32] {
  %67 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %67.0
}

def @func_3297(%var_3292: Tensor[(12, 3, 7), int8]) -> Tensor[(12, 3, 7), bool] {
  %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 3, 7), int8] */, dtype="bool") /* ty=Tensor[(12, 3, 7), bool] */;
  %69 = shape_of(%var_3292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_3292, dtype="bool") /* ty=Tensor[(12, 3, 7), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%70, %71) /* ty=Tensor[(12, 3, 7), bool] */
}

def @func_5181() -> (Tensor[(3, 9, 1), float32],) {
  %72 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %73 = %72.0;
  (%73,)
}

def @func_1762(%var_1750: Tensor[(3, 16, 15), float64]) -> (Tensor[(3, 16, 15), float64],) {
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %75 = shape_of(%var_1750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_1750, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %78 = power(%76, %77) /* ty=Tensor[(3, 16, 15), float64] */;
  (%78,)
}

def @func_1447(%var_1408: Tensor[(5, 11, 14), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) {
  %79 = cast(%var_1408, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %80 = tan(%79) /* ty=Tensor[(5, 11, 14), float64] */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 11, 14), float64] */, dtype="int16") /* ty=Tensor[(5, 11, 14), int16] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="int16") /* ty=Tensor[(5, 11, 14), int16] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(245, 2), float32] */, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %86 = reshape(%85, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %87 = @func_422(%86) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
  %88 = bitwise_or(%83, %84) /* ty=Tensor[(5, 11, 14), int16] */;
  %89 = %87.6;
  (%88, %89, meta[relay.Constant][7] /* ty=Tensor[(245, 2), float32] */)
}

def @func_1797(%var_1773: Tensor[(16, 13, 1), float64], %var_1777: Tensor[(96), float32], %var_1778: Tensor[(245, 2), float32]) -> (Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) {
  %90 = cast(%var_1773, dtype="float64") /* ty=Tensor[(16, 13, 1), float64] */;
  %91 = cast(%var_1777, dtype="float32") /* ty=Tensor[(96), float32] */;
  %92 = cast(%var_1777, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %93 = cast(%var_1778, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %94 = reshape(%91, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %95 = reshape(%92, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %96 = reshape(%93, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %97 = @func_764(%94, %95, %96) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %98 = cast(%var_1778, dtype="float64") /* ty=Tensor[(245, 2), float64] */;
  %99 = cos(%90) /* ty=Tensor[(16, 13, 1), float64] */;
  %100 = %97.0;
  %101 = acos(%98) /* ty=Tensor[(245, 2), float64] */;
  (%99, %100, %var_1777, %101)
}

def @func_5214() -> (Tensor[(3, 9, ?), float32],) {
  %102 = @func_4974() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %103 = %102.0;
  %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 9, 1), float32] */, dtype="uint64") /* ty=Tensor[(3, 9, 1), uint64] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="uint64") /* ty=Tensor[(3, 9, 1), uint64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %108 = multiply(%106, %107) /* ty=Tensor[(3, 9, ?), uint64] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(3, 9, ?), float32] */;
  %110 = exp(%109) /* ty=Tensor[(3, 9, ?), float32] */;
  (%110,)
}

def @func_2312(%var_2299: Tensor[(16, 16, 13), float64], %var_2300: Tensor[(16, 16, 13), float64]) -> (Tensor[(16, 16, 13), float64],) {
  %111 = cast(%var_2300, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %112 = shape_of(%var_2299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_2299, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %115 = power(%113, %114) /* ty=Tensor[(16, 16, 13), float64] */;
  (%115,)
}

def @func_3647(%var_3610: Tensor[(11, 12, 10), int16], %var_3611: Tensor[(11, 12, 10), int16], %var_3616: Tensor[(77, 10), float64]) -> (Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) {
  %116 = cast(%var_3611, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %117 = shape_of(%var_3610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_3610, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = cast(%var_3616, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
  %121 = reshape(%120, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
  %122 = @func_1447(%121) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) */;
  %123 = %122.1;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %125 = tan(%124) /* ty=Tensor[(14, 10, 14), float32] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %127 = sqrt(%126) /* ty=Tensor[(14, 10, 14), float64] */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %132 = greater_equal(%118, %119) /* ty=Tensor[(11, 12, 10), bool] */;
  %133 = add(%130, %131) /* ty=Tensor[(14, 10, 14), float64] */;
  (%132, %var_3616, %133)
}

def @func_2947(%var_2928: Tensor[(100), float64], %var_2929: Tensor[(1960), uint8]) -> (Tensor[(3, 9, 14), bool], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1960), float32]) {
  %134 = cast(%var_2928, dtype="float64") /* ty=Tensor[(100), float64] */;
  %135 = cast(%var_2929, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %136 = reshape(%134, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
  %137 = reshape(%135, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
  %138 = @func_658(%136, %137) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
  %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %140 = reshape(%139, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %141 = @func_2787(%140) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) */;
  %142 = cast(%var_2929, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %143 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
  %144 = %138.2;
  %145 = %141.2;
  %146 = sqrt(%142) /* ty=Tensor[(1960), float32] */;
  (%143, %144, %var_2928, %145, meta[relay.Constant][10] /* ty=Tensor[(90), float64] */, %146)
}

def @main(%var_5912: Tensor[(3, 8, 9), float32]) -> Tensor[(3, 8, 9), float32] {
  %147 = cast(%var_5912, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  acosh(%147) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_603(%var_576: Tensor[(8, 8, 12), float64]) -> Tensor[(8, 8, 12), float32] {
  %148 = cast(%var_576, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  %149 = atanh(%148) /* ty=Tensor[(8, 8, 12), float64] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(8, 8, 12), float32] */;
  sqrt(%150) /* ty=Tensor[(8, 8, 12), float32] */
}

def @func_2905() -> Tensor[(3, 9, 14), bool] {
  %151 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 9, 14), bool] */;
  equal(%153, %154) /* ty=Tensor[(3, 9, 14), bool] */
}

def @func_2980() -> (Tensor[(3, 9, 1), float32],) {
  %155 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %156 = %155.0;
  (%156,)
}

def @func_2874() -> Tensor[(3, 9, 1), float32] {
  %157 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %157.0
}

def @func_3443(%var_3377: Tensor[(768), float64], %var_3392: Tensor[(2, 48), float32], %var_3393: Tensor[(490), float32], %var_3404: Tensor[(1960, 16), float64]) -> (Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) {
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %159 = reshape(%158, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %160 = @func_1762(%159) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %161 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %162 = %161.0;
  %163 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %166 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%162, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = cast(meta[relay.Constant][13] /* ty=Tensor[(1960, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1960, 1), uint8] */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(1960, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1960, 1), uint8] */;
  %171 = reshape(%169, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %172 = reshape(%170, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %173 = @func_125(%171, %172) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %174 = cast(%var_3377, dtype="float64") /* ty=Tensor[(768), float64] */;
  %175 = reshape(%174, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %176 = cast(%var_3392, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %177 = cast(%var_3392, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %178 = cast(%var_3393, dtype="float32") /* ty=Tensor[(490), float32] */;
  %179 = reshape(%176, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %180 = reshape(%177, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %181 = reshape(%178, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %182 = @func_764(%179, %180, %181) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %183 = %182.1;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %185 = cast(%var_3393, dtype="float32") /* ty=Tensor[(490), float32] */;
  %186 = reshape(%184, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %187 = reshape(%185, newshape=[1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %188 = @func_1143(%186, %187) /* ty=(Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) */;
  %189 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
  %190 = cast(meta[relay.Constant][13] /* ty=Tensor[(1960, 1), uint8] */, dtype="float64") /* ty=Tensor[(1960, 1), float64] */;
  %191 = sinh(%190) /* ty=Tensor[(1960, 1), float64] */;
  %192 = cast(%191, dtype="bool") /* ty=Tensor[(1960, 1), bool] */;
  %193 = cast(%var_3404, dtype="bool") /* ty=Tensor[(1960, 16), bool] */;
  %194 = cast(meta[relay.Constant][13] /* ty=Tensor[(1960, 1), uint8] */, dtype="int32") /* ty=Tensor[(1960, 1), int32] */;
  %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %196 = cast(%191, dtype="int8") /* ty=Tensor[(1960, 1), int8] */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %198 = multiply(%196, %197) /* ty=Tensor[(1960, 720), int8] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(1960, 720), float32] */;
  %200 = cast(%198, dtype="float32") /* ty=Tensor[(1960, 720), float32] */;
  %201 = sinh(%200) /* ty=Tensor[(1960, 720), float32] */;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(1960, 720), float64] */;
  %203 = %160.0;
  %204 = logical_and(%167, %168) /* ty=Tensor[(3, 9, ?), bool] */;
  %205 = %173.0;
  %206 = @func_603(%175) /* ty=Tensor[(8, 8, 12), float32] */;
  %207 = %188.1;
  %208 = %189.0;
  %209 = logical_or(%192, %193) /* ty=Tensor[(1960, 16), bool] */;
  %210 = bitwise_xor(%194, %195) /* ty=Tensor[(1960, 720), int32] */;
  %211 = tan(%199) /* ty=Tensor[(1960, 720), float32] */;
  %212 = rsqrt(%202) /* ty=Tensor[(1960, 720), float64] */;
  (%203, %204, %205, %206, %var_3377, %183, %var_3392, %var_3393, %207, %208, %209, %210, %211, %212)
}

def @func_4518(%var_4463: Tensor[(252), int8]) -> (Tensor[(12, 3, 7), bool], Tensor[(3, 9, 252), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %213 = cast(%var_4463, dtype="int8") /* ty=Tensor[(252), int8] */;
  %214 = reshape(%213, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), int8] */;
  %215 = @func_4005() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
  %218 = cast(%var_4463, dtype="uint32") /* ty=Tensor[(252), uint32] */;
  %219 = right_shift(%217, %218) /* ty=Tensor[(3, 9, 252), uint32] */;
  %220 = cast(%219, dtype="uint32") /* ty=Tensor[(3, 9, 252), uint32] */;
  %221 = cast(%var_4463, dtype="uint32") /* ty=Tensor[(252), uint32] */;
  %222 = multiply(%220, %221) /* ty=Tensor[(3, 9, 252), uint32] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(3, 9, 252), float64] */;
  %224 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%219, dtype="float64") /* ty=Tensor[(3, 9, 252), float64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %227 = cast(meta[relay.Constant][14] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %228 = reshape(%227, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %229 = @func_422(%228) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
  %230 = cast(meta[relay.Constant][15] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %231 = reshape(%230, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %232 = @func_1762(%231) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %233 = @func_3297(%214) /* ty=Tensor[(12, 3, 7), bool] */;
  %234 = mod(%225, %226) /* ty=Tensor[(3, 9, 252), float64] */;
  %235 = %229.5;
  %236 = %232.0;
  (%233, %234, %235, meta[relay.Constant][14] /* ty=Tensor[(490), float32] */, %236, meta[relay.Constant][15] /* ty=Tensor[(720), float64] */)
}

def @func_5280(%var_5244: Tensor[(8, 4, 1), float64], %var_5264: Tensor[(208), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(5, 2, 10), int64], Tensor[(100), float64], Tensor[(1960), uint8], Tensor[(3, 9, 1), float32], Tensor[(480), float64], Tensor[(8, 4, 1), float64], Tensor[(16, 13, 1), float64], Tensor[(208), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(3, 9, ?), float64]) {
  %237 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %239 = cast(meta[relay.Constant][17] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %240 = reshape(%238, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
  %241 = reshape(%239, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
  %242 = @func_658(%240, %241) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
  %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %244 = reshape(%243, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %245 = @func_5046(%244) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %246 = cast(%var_5244, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %247 = log10(%246) /* ty=Tensor[(8, 4, 1), float64] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %249 = cast(%var_5264, dtype="float64") /* ty=Tensor[(208), float64] */;
  %250 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %251 = cast(meta[relay.Constant][20] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %252 = reshape(%249, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %253 = reshape(%250, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %254 = reshape(%251, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %255 = @func_1797(%252, %253, %254) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %256 = %242.0;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %259 = reshape(%257, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %260 = reshape(%258, newshape=[140, 14]) /* ty=Tensor[(140, 14), uint8] */;
  %261 = @func_3797(%259, %260) /* ty=(Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) */;
  %262 = %237.0;
  %263 = %245.2;
  %264 = asinh(%248) /* ty=Tensor[(8, 4, 1), float64] */;
  %265 = %255.0;
  %266 = %261.0;
  (%262, %256, meta[relay.Constant][16] /* ty=Tensor[(100), float64] */, meta[relay.Constant][17] /* ty=Tensor[(1960), uint8] */, %263, meta[relay.Constant][18] /* ty=Tensor[(480), float64] */, %264, %265, %var_5264, meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, meta[relay.Constant][20] /* ty=Tensor[(490), float32] */, %266)
}

def @func_5110(%var_5080: Tensor[(31360), float64], %var_5093: Tensor[(3, 9, 4), float32], %var_5108: Tensor[(720), float64]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 30), float64], Tensor[(490), float32], Tensor[(3, 9, 16), uint8], Tensor[(432), float32], Tensor[(768), float64], Tensor[(31360), float64], Tensor[(3, 9, 96), bool], Tensor[(3, 9, 4), bool], Tensor[(1960, 16), float64], Tensor[(3, 9, 1), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %267 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 30), float64] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %268 = cast(meta[relay.Constant][22] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %269 = reshape(%267, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float64] */;
  %270 = reshape(%268, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %271 = @func_2505(%269, %270) /* ty=(Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */;
  %272 = cast(meta[relay.Constant][23] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %273 = reshape(%272, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %274 = @func_4119(%273) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) */;
  %275 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
  %276 = cast(%275, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %277 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), float32] */, dtype="bool") /* ty=Tensor[(96), bool] */;
  %278 = cast(%275, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %279 = log(%278) /* ty=Tensor[(3, 9, 1), float32] */;
  %280 = cast(%279, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %281 = cast(%var_5093, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %282 = cast(meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %283 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %285 = cast(%var_5080, dtype="float64") /* ty=Tensor[(31360), float64] */;
  %286 = reshape(%282, newshape=[768]) /* ty=Tensor[(768), float64] */;
  %287 = reshape(%283, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %288 = reshape(%284, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %289 = reshape(%285, newshape=[1960, 16]) /* ty=Tensor[(1960, 16), float64] */;
  %290 = @func_3443(%286, %287, %288, %289) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) */;
  %291 = %290.10;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(1960, 16), float64] */;
  %293 = cast(%var_5108, dtype="float64") /* ty=Tensor[(720), float64] */;
  %294 = reshape(%293, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %295 = @func_1762(%294) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %296 = %271.4;
  %297 = %274.2;
  %298 = not_equal(%276, %277) /* ty=Tensor[(3, 9, 96), bool] */;
  %299 = equal(%280, %281) /* ty=Tensor[(3, 9, 4), bool] */;
  %300 = exp(%292) /* ty=Tensor[(1960, 16), float64] */;
  %301 = @func_4857() /* ty=Tensor[(3, 9, 1), float32] */;
  %302 = %295.0;
  (%296, meta[relay.Constant][21] /* ty=Tensor[(3, 30), float64] */, meta[relay.Constant][22] /* ty=Tensor[(490), float32] */, %297, meta[relay.Constant][23] /* ty=Tensor[(432), float32] */, meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, %var_5080, %298, %299, %300, %301, %302, %var_5108)
}

def @func_125(%var_111: Tensor[(14, 10, 14), uint8], %var_112: Tensor[(14, 10, 14), uint8]) -> (Tensor[(14, 10, 14), uint8],) {
  %303 = cast(%var_112, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %304 = shape_of(%var_111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_111, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %307 = right_shift(%305, %306) /* ty=Tensor[(14, 10, 14), uint8] */;
  (%307,)
}

def @func_1695(%var_1666: Tensor[(12, 5, 15), int32], %var_1683: Tensor[(96, 1), float32]) -> (Tensor[(12, 5, 15), bool], Tensor[(14, 10, 14), uint8], Tensor[(96, 1), float32], Tensor[(245, 2), float32], Tensor[(12, 5, 15), float32]) {
  %308 = cast(%var_1666, dtype="int32") /* ty=Tensor[(12, 5, 15), int32] */;
  %309 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 5, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 5, 15), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 15), int32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %312 = maximum(%310, %311) /* ty=Tensor[(12, 5, 15), int32] */;
  %313 = cast(%312, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %314 = shape_of(%var_1666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_1666, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = cast(%var_1683, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %318 = cast(%var_1683, dtype="uint64") /* ty=Tensor[(96, 1), uint64] */;
  %319 = cast(meta[relay.Constant][27] /* ty=Tensor[(245, 2), float32] */, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %320 = reshape(%317, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %321 = reshape(%318, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %322 = reshape(%319, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %323 = @func_764(%320, %321, %322) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %324 = cast(%var_1666, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %325 = greater_equal(%315, %316) /* ty=Tensor[(12, 5, 15), bool] */;
  %326 = %323.2;
  %327 = acosh(%324) /* ty=Tensor[(12, 5, 15), float32] */;
  (%325, %326, %var_1683, meta[relay.Constant][27] /* ty=Tensor[(245, 2), float32] */, %327)
}

def @func_4853() -> Tensor[(3, 9, 1), float64] {
  %328 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
  %328.0
}

def @func_3494() -> (Tensor[(3, 9, 1), float32],) {
  %329 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
  (%329,)
}

def @func_3589(%var_3585: Tensor[(234), uint8]) -> (Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
  %330 = @func_3187() /* ty=(Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) */;
  %331 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2), uint8] */;
  %332 = cast(%var_3585, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %333 = reshape(%331, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
  %334 = reshape(%332, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
  %335 = @func_2066(%333, %334) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
  %336 = %330.2;
  %337 = %335.0;
  (%336, %337, meta[relay.Constant][28] /* ty=Tensor[(13, 2), uint8] */, %var_3585)
}

def @func_5772(%var_5739: Tensor[(3, 9, 6), float32], %var_5748: Tensor[(910), float64], %var_5752: Tensor[(100), float64]) -> (Tensor[(3, 9, 6), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(910), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(3, 9, 234), uint16]) {
  %338 = @func_3565() /* ty=(Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %339 = %338.0;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %341 = cast(%var_5739, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %342 = cast(0.361342f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %343 = cast(%var_5748, dtype="float64") /* ty=Tensor[(910), float64] */;
  %344 = reshape(%342, newshape=[]) /* ty=float64 */;
  %345 = reshape(%343, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %346 = @func_3227(%344, %345) /* ty=(Tensor[(10, 7, 13), float64],) */;
  %347 = cast(%var_5752, dtype="float64") /* ty=Tensor[(100), float64] */;
  %348 = cast(meta[relay.Constant][29] /* ty=Tensor[(234), uint8] */, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %349 = reshape(%347, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %350 = reshape(%348, newshape=[39, 6]) /* ty=Tensor[(39, 6), uint8] */;
  %351 = @func_2712(%349, %350) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) */;
  %352 = cast(meta[relay.Constant][29] /* ty=Tensor[(234), uint8] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %353 = cast(%339, dtype="uint16") /* ty=Tensor[(3, 9, 1), uint16] */;
  %354 = power(%340, %341) /* ty=Tensor[(3, 9, 6), float32] */;
  %355 = %346.0;
  %356 = %351.2;
  %357 = left_shift(%352, %353) /* ty=Tensor[(3, 9, 234), uint16] */;
  (%354, %355, 0.361342f64 /* ty=float64 */, %var_5748, %356, %var_5752, %357)
}

def @func_4336(%var_4275: Tensor[(4, 8, 3), int16], %var_4316: Tensor[(208), float64], %var_4317: Tensor[(490), float32], %var_4325: Tensor[(234), uint8], %var_4331: Tensor[(490), float32]) -> (Tensor[(4, 8, 3), int16], Tensor[(4, 8, 3), int16], Tensor[(96), float32], Tensor[(208), float64], Tensor[(13, 2, 9), uint8], Tensor[(26), uint8], Tensor[(234), uint8], Tensor[(490), float64]) {
  %358 = cast(%var_4275, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %359 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %362 = cast(%var_4275, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %363 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %366 = cast(%var_4316, dtype="float64") /* ty=Tensor[(208), float64] */;
  %367 = cast(%var_4275, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %368 = cast(%var_4317, dtype="float32") /* ty=Tensor[(490), float32] */;
  %369 = reshape(%366, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %370 = reshape(%367, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %371 = reshape(%368, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %372 = @func_1797(%369, %370, %371) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(26), uint8] */, dtype="uint8") /* ty=Tensor[(26), uint8] */;
  %374 = cast(%var_4325, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %375 = reshape(%373, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
  %376 = reshape(%374, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
  %377 = @func_2066(%375, %376) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
  %378 = cast(%var_4331, dtype="float64") /* ty=Tensor[(490), float64] */;
  %379 = shape_of(%var_4317, dtype="int32") /* ty=Tensor[(1), int32] */;
  %380 = cast(%var_4317, dtype="float64") /* ty=Tensor[(490), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), float64] */;
  %382 = subtract(%360, %361) /* ty=Tensor[(4, 8, 3), int16] */;
  %383 = right_shift(%364, %365) /* ty=Tensor[(4, 8, 3), int16] */;
  %384 = %372.2;
  %385 = %377.0;
  %386 = divide(%380, %381) /* ty=Tensor[(490), float64] */;
  (%382, %383, %384, %var_4316, %385, meta[relay.Constant][31] /* ty=Tensor[(26), uint8] */, %var_4325, %386)
}

def @func_3034() -> Tensor[(3, 9, 1), float32] {
  %387 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %387.0
}

def @func_3023(%var_3016: Tensor[(3, 9, 8), float32]) -> (Tensor[(3, 9, 8), float32],) {
  %388 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %391 = log2(%390) /* ty=Tensor[(3, 9, 1), float32] */;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %393 = cast(%var_3016, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
  %394 = minimum(%392, %393) /* ty=Tensor[(3, 9, 8), float32] */;
  (%394,)
}

def @func_4857() -> Tensor[(3, 9, 1), float32] {
  @func_3034() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_4238() -> (Tensor[(3, 9, 1), float32],) {
  %395 = @func_3672() /* ty=(Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) */;
  %396 = %395.1;
  (%396,)
}

def @func_4005() -> (Tensor[(3, 9, 1), float32],) {
  %397 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %398 = %397.0;
  (%398,)
}

def @func_5443() -> (Tensor[(3, 9, 1), float32],) {
  %399 = @func_2874() /* ty=Tensor[(3, 9, 1), float32] */;
  (%399,)
}

def @func_3565() -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %400 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %401 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
  %402 = %400.0;
  (%401, %402)
}

def @func_764(%var_719: Tensor[(2, 12, 4), float32], %var_748: Tensor[(2, 12, 4), uint64], %var_758: Tensor[(490), float32]) -> (Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) {
  %403 = cast(%var_719, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %404 = cast(%var_719, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %405 = asinh(%404) /* ty=Tensor[(2, 12, 4), float32] */;
  %406 = cast(%var_719, dtype="uint64") /* ty=Tensor[(2, 12, 4), uint64] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="uint64") /* ty=Tensor[(2, 12, 4), uint64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %410 = left_shift(%408, %409) /* ty=Tensor[(2, 12, 4), uint64] */;
  %411 = cast(%var_748, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %415 = cast(%var_758, dtype="float32") /* ty=Tensor[(490), float32] */;
  %416 = reshape(%415, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %417 = @func_422(%416) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
  %418 = sigmoid(%403) /* ty=Tensor[(2, 12, 4), float64] */;
  %419 = mod(%413, %414) /* ty=Tensor[(2, 12, 4), float64] */;
  %420 = %417.0;
  (%418, %419, %420, %var_758)
}

def @func_2275(%var_2257: Tensor[(16, 3, 6), float64], %var_2263: Tensor[(16, 3, 6), float64], %var_2268: Tensor[(770), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(770), float64], Tensor[(16, 3, 6), float64]) {
  %421 = cast(%var_2268, dtype="float64") /* ty=Tensor[(770), float64] */;
  %422 = reshape(%421, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
  %423 = @func_1447(%422) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) */;
  %424 = cast(%var_2257, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %425 = atanh(%424) /* ty=Tensor[(16, 3, 6), float64] */;
  %426 = cast(%var_2263, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %430 = power(%428, %429) /* ty=Tensor[(16, 3, 6), float64] */;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %432 = %423.0;
  %433 = log(%431) /* ty=Tensor[(16, 3, 6), float64] */;
  (%432, %var_2268, %433)
}

def @func_2505(%var_2433: Tensor[(1, 15, 6), float64], %var_2469: Tensor[(490), float32]) -> (Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %434 = cast(%var_2433, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %435 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 6), float64] */;
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %437 = cast(%var_2469, dtype="float32") /* ty=Tensor[(490), float32] */;
  %438 = reshape(%436, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %439 = reshape(%437, newshape=[1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %440 = @func_1143(%438, %439) /* ty=(Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) */;
  %441 = cast(%var_2433, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %442 = acosh(%441) /* ty=Tensor[(1, 15, 6), float32] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %444 = cast(meta[relay.Constant][34] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %445 = reshape(%444, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %446 = @func_1762(%445) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %447 = floor_mod(%434, %435) /* ty=Tensor[(16, 15, 6), float64] */;
  %448 = %440.1;
  %449 = log(%443) /* ty=Tensor[(1, 15, 6), float64] */;
  %450 = %446.0;
  (%447, %448, meta[relay.Constant][33] /* ty=Tensor[(96), float32] */, %var_2469, %449, %450, meta[relay.Constant][34] /* ty=Tensor[(720), float64] */)
}

def @func_5708() -> (Tensor[(3, 9, ?), float32], Tensor[(3, 9, 8), float32], Tensor[(216), float32]) {
  %451 = @func_5214() /* ty=(Tensor[(3, 9, ?), float32],) */;
  %452 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %453 = reshape(%452, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
  %454 = @func_3023(%453) /* ty=(Tensor[(3, 9, 8), float32],) */;
  %455 = %451.0;
  %456 = %454.0;
  (%455, %456, meta[relay.Constant][35] /* ty=Tensor[(216), float32] */)
}

def @func_2712(%var_2691: Tensor[(100), float64], %var_2695: Tensor[(39, 6), uint8]) -> (Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) {
  %457 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %458 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 64), float64] */, dtype="float64") /* ty=Tensor[(2, 64), float64] */;
  %459 = cast(%var_2691, dtype="float64") /* ty=Tensor[(100), float64] */;
  %460 = reshape(%458, newshape=[4, 16, 2]) /* ty=Tensor[(4, 16, 2), float64] */;
  %461 = reshape(%459, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %462 = @func_1295(%460, %461) /* ty=(Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) */;
  %463 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2), uint8] */;
  %464 = cast(%var_2695, dtype="uint8") /* ty=Tensor[(39, 6), uint8] */;
  %465 = reshape(%463, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
  %466 = reshape(%464, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
  %467 = @func_2066(%465, %466) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
  %468 = %457.0;
  %469 = %462.0;
  %470 = %467.1;
  (%468, %469, meta[relay.Constant][36] /* ty=Tensor[(2, 64), float64] */, %var_2691, %470, meta[relay.Constant][37] /* ty=Tensor[(13, 2), uint8] */, %var_2695)
}

def @func_2405(%var_2397: Tensor[(768), float64]) -> (Tensor[(10, 14, 12), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64], Tensor[(8, 8, 12), float32], Tensor[(768), float64]) {
  %471 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %472 = atanh(%471) /* ty=Tensor[(10, 14, 12), float64] */;
  %473 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %477 = cast(meta[relay.Constant][39] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %478 = reshape(%477, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %479 = @func_1762(%478) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %480 = cast(%var_2397, dtype="float64") /* ty=Tensor[(768), float64] */;
  %481 = reshape(%480, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %482 = multiply(%475, %476) /* ty=Tensor[(10, 14, 12), float32] */;
  %483 = %479.0;
  %484 = @func_603(%481) /* ty=Tensor[(8, 8, 12), float32] */;
  (%482, %483, meta[relay.Constant][39] /* ty=Tensor[(720), float64] */, %484, %var_2397)
}

def @func_3284() -> Tensor[(3, 9, 1), float32] {
  @func_3034() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_658(%var_621: Tensor[(5, 2, 10), float64], %var_650: Tensor[(1960), uint8]) -> (Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  %485 = cast(%var_621, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
  %486 = asin(%485) /* ty=Tensor[(5, 2, 10), float64] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(5, 2, 10), float32] */;
  %488 = sqrt(%487) /* ty=Tensor[(5, 2, 10), float32] */;
  %489 = cast(%486, dtype="int64") /* ty=Tensor[(5, 2, 10), int64] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="int64") /* ty=Tensor[(5, 2, 10), int64] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %493 = cast(%var_650, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %494 = cast(%var_650, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %495 = reshape(%493, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %496 = reshape(%494, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %497 = @func_125(%495, %496) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %498 = add(%491, %492) /* ty=Tensor[(5, 2, 10), int64] */;
  %499 = %497.0;
  (%498, %499, %var_650)
}

def @func_5511() -> (Tensor[(8, 3, 13), uint32], Tensor[(8, 8, 12), float32], Tensor[(2, 384), float64]) {
  %500 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 3, 1), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 1), uint32] */;
  %501 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 3, 13), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 13), uint32] */;
  %502 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 384), float64] */, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %503 = reshape(%502, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %504 = bitwise_or(%500, %501) /* ty=Tensor[(8, 3, 13), uint32] */;
  %505 = @func_603(%503) /* ty=Tensor[(8, 8, 12), float32] */;
  (%504, %505, meta[relay.Constant][42] /* ty=Tensor[(2, 384), float64] */)
}

def @func_4119(%var_4105: Tensor[(3, 9, 16), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) {
  %506 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
  %507 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
  %508 = reshape(%506, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %509 = reshape(%507, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %510 = @func_125(%508, %509) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %511 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="uint8") /* ty=Tensor[(3, 9, 1), uint8] */;
  %514 = cast(%var_4105, dtype="uint8") /* ty=Tensor[(3, 9, 16), uint8] */;
  %515 = %510.0;
  %516 = bitwise_xor(%513, %514) /* ty=Tensor[(3, 9, 16), uint8] */;
  (%515, meta[relay.Constant][43] /* ty=Tensor[(10, 196), uint8] */, %516)
}

def @func_5672() -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %517 = @func_4238() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %518 = %517.0;
  %519 = @func_2874() /* ty=Tensor[(3, 9, 1), float32] */;
  (%518, %519)
}

def @func_5875(%var_5833: Tensor[(3328), float64], %var_5862: Tensor[(560), float32], %var_5864: Tensor[(490), float32]) -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, ?), uint32], Tensor[(3328), float64], Tensor[(3, 9, 1), float32], Tensor[(7, 70), float32], Tensor[(560), float32], Tensor[(96), float32], Tensor[(490), float32], Tensor[(16, 16, 13), float64], Tensor[(3, 9, 1), float32]) {
  %520 = @func_3767() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %521 = @func_4238() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %522 = cast(%var_5862, dtype="float32") /* ty=Tensor[(560), float32] */;
  %523 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %524 = cast(%var_5864, dtype="float32") /* ty=Tensor[(490), float32] */;
  %525 = reshape(%522, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), float32] */;
  %526 = reshape(%523, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %527 = reshape(%524, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %528 = @func_4562(%525, %526, %527) /* ty=(Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) */;
  %529 = cast(%var_5833, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %530 = cast(%var_5833, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %531 = reshape(%529, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), float64] */;
  %532 = reshape(%530, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), float64] */;
  %533 = @func_2312(%531, %532) /* ty=(Tensor[(16, 16, 13), float64],) */;
  %534 = %533.0;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %536 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %537 = %520.0;
  %538 = @func_3533() /* ty=Tensor[(3, 9, ?), uint32] */;
  %539 = %521.0;
  %540 = %528.4;
  %541 = asinh(%535) /* ty=Tensor[(16, 16, 13), float64] */;
  %542 = %536.0;
  (%537, %538, %var_5833, %539, %540, %var_5862, meta[relay.Constant][44] /* ty=Tensor[(96), float32] */, %var_5864, %541, %542)
}

def @func_4735(%var_4707: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), uint8], Tensor[(3, 9, 1), float32]) {
  %543 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
  %544 = cast(%543, dtype="uint8") /* ty=Tensor[(3, 9, 1), uint8] */;
  %545 = cast(%var_4707, dtype="uint8") /* ty=Tensor[(3, 9, 4), uint8] */;
  %546 = cast(%543, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %547 = right_shift(%544, %545) /* ty=Tensor[(3, 9, 4), uint8] */;
  %548 = sigmoid(%546) /* ty=Tensor[(3, 9, 1), float32] */;
  (%547, %548)
}

def @func_1295(%var_1287: Tensor[(4, 16, 2), float64], %var_1292: Tensor[(100), float64]) -> (Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) {
  %549 = cast(%var_1287, dtype="float64") /* ty=Tensor[(4, 16, 2), float64] */;
  %550 = cast(%var_1292, dtype="float64") /* ty=Tensor[(100), float64] */;
  %551 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
  %552 = reshape(%550, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
  %553 = reshape(%551, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
  %554 = @func_658(%552, %553) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
  %555 = exp(%549) /* ty=Tensor[(4, 16, 2), float64] */;
  %556 = %554.2;
  (%555, %556, %var_1292, meta[relay.Constant][45] /* ty=Tensor[(10, 196), uint8] */)
}

def @func_422(%var_295: Tensor[(7, 10, 7), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) {
  %557 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %558 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %559 = reshape(%557, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %560 = reshape(%558, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %561 = @func_125(%559, %560) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %562 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %563 = %561.0;
  %564 = cast(%563, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %565 = reshape(%562, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %566 = reshape(%564, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %567 = @func_125(%565, %566) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %570 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %571 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %572 = reshape(%570, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %573 = reshape(%571, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %574 = @func_125(%572, %573) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %575 = cast(%563, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %576 = acosh(%569) /* ty=Tensor[(14, 10, 14), float32] */;
  %577 = cast(%576, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %578 = reshape(%575, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %579 = reshape(%577, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %580 = @func_125(%578, %579) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %581 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %582 = %580.0;
  %583 = cast(%582, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %584 = reshape(%581, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %585 = reshape(%583, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %586 = @func_125(%584, %585) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %587 = %574.0;
  %588 = cast(%587, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %589 = cast(%568, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %590 = reshape(%588, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %591 = reshape(%589, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %592 = @func_125(%590, %591) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %593 = cast(%587, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %594 = cast(%582, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %595 = reshape(%593, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %596 = reshape(%594, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %597 = @func_125(%595, %596) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %598 = cast(%582, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %599 = %586.0;
  %600 = cast(%599, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %601 = reshape(%598, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %602 = reshape(%600, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %603 = @func_125(%601, %602) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %604 = %597.0;
  %605 = cast(%604, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %606 = cast(%604, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %607 = reshape(%605, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %608 = reshape(%606, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %609 = @func_125(%607, %608) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %610 = cast(%604, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
  %611 = cast(meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %612 = reshape(%610, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %613 = reshape(%611, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %614 = @func_125(%612, %613) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %615 = cast(%var_295, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %616 = log10(%615) /* ty=Tensor[(7, 10, 7), float32] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %618 = rsqrt(%617) /* ty=Tensor[(7, 10, 7), float32] */;
  %619 = cast(%var_295, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %620 = exp(%619) /* ty=Tensor[(7, 10, 7), float64] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %625 = %592.0;
  %626 = %603.0;
  %627 = %609.0;
  %628 = %614.0;
  %629 = floor_mod(%623, %624) /* ty=Tensor[(7, 10, 7), float64] */;
  (%563, meta[relay.Constant][46] /* ty=Tensor[(1960), uint8] */, %576, %587, %582, %599, %625, %604, %626, %627, %628, %629)
}

def @func_3533() -> Tensor[(3, 9, ?), uint32] {
  %630 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %633 = acos(%632) /* ty=Tensor[(3, 9, 1), float64] */;
  %634 = cast(%631, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%636, %637) /* ty=Tensor[(3, 9, ?), uint32] */
}

def @func_3264() -> (Tensor[(3, 9, 1), float64],) {
  %638 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %641 = sin(%640) /* ty=Tensor[(3, 9, 1), float64] */;
  (%641,)
}

def @func_5551() -> (Tensor[(3, 9, 1), float32],) {
  %642 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %645 = rsqrt(%644) /* ty=Tensor[(3, 9, 1), float32] */;
  (%645,)
}

def @func_1491(%var_1483: Tensor[(6, 12, 7), float64]) -> Tensor[(6, 12, 7), float64] {
  %646 = cast(%var_1483, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %647 = acosh(%646) /* ty=Tensor[(6, 12, 7), float64] */;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  erf(%648) /* ty=Tensor[(6, 12, 7), float64] */
}

def @func_1143(%var_1139: Tensor[(1, 96), float32], %var_1140: Tensor[(1, 490), float32]) -> (Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) {
  %649 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
  %650 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(4, 5, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %653 = cast(%var_1139, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %654 = cast(%var_1139, dtype="uint64") /* ty=Tensor[(1, 96), uint64] */;
  %655 = cast(%var_1140, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %656 = reshape(%653, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %657 = reshape(%654, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %658 = reshape(%655, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %659 = @func_764(%656, %657, %658) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %660 = divide(%651, %652) /* ty=Tensor[(4, 5, 15), float32] */;
  %661 = %659.0;
  (%660, %661, %var_1139, %var_1140)
}

def @func_4562(%var_4545: Tensor[(8, 7, 10), float32], %var_4558: Tensor[(96), float32], %var_4559: Tensor[(7, 70), float32]) -> (Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) {
  %662 = cast(%var_4545, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %663 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(8, 7, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 104), float64] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
  %667 = cast(%var_4558, dtype="float32") /* ty=Tensor[(96), float32] */;
  %668 = cast(%var_4559, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %669 = reshape(%666, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %670 = reshape(%667, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %671 = reshape(%668, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %672 = @func_1797(%669, %670, %671) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %673 = divide(%664, %665) /* ty=Tensor[(8, 7, 10), float32] */;
  %674 = %672.3;
  (%673, %674, meta[relay.Constant][50] /* ty=Tensor[(2, 104), float64] */, %var_4558, %var_4559)
}

def @func_2794() -> Tensor[(3, 9, 1), float32] {
  %675 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %675.0
}

def @func_4880() -> (Tensor[(3, 9, ?), uint32],) {
  %676 = @func_3533() /* ty=Tensor[(3, 9, ?), uint32] */;
  (%676,)
}

def @func_5046(%var_5025: Tensor[(8, 4, 15), float64]) -> (Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %677 = cast(%var_5025, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %678 = asinh(%677) /* ty=Tensor[(8, 4, 15), float64] */;
  %679 = cast(%678, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %680 = shape_of(%var_5025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_5025, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %684 = greater(%681, %682) /* ty=Tensor[(8, 4, 15), bool] */;
  %685 = %683.0;
  %686 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
  (%684, %685, %686)
}

def @func_3767() -> (Tensor[(3, 9, 1), float32],) {
  %687 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %688 = %687.0;
  (%688,)
}

def @func_4034(%var_4023: Tensor[(96), float32], %var_4024: Tensor[(490, 1), float32]) -> (Tensor[(3, 9, 14), bool], Tensor[(77, 10), float64], Tensor[(12, 110), int16], Tensor[(770), float64], Tensor[(14, 10, 14), uint8], Tensor[(96), float32], Tensor[(490, 1), float32]) {
  %689 = @func_3187() /* ty=(Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) */;
  %690 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 110), int16] */, dtype="int16") /* ty=Tensor[(12, 110), int16] */;
  %691 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 110), int16] */, dtype="int16") /* ty=Tensor[(12, 110), int16] */;
  %692 = cast(meta[relay.Constant][52] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %693 = reshape(%690, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %694 = reshape(%691, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %695 = reshape(%692, newshape=[77, 10]) /* ty=Tensor[(77, 10), float64] */;
  %696 = @func_3647(%693, %694, %695) /* ty=(Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) */;
  %697 = cast(%var_4023, dtype="float32") /* ty=Tensor[(96), float32] */;
  %698 = cast(%var_4023, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %699 = cast(%var_4024, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %700 = reshape(%697, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %701 = reshape(%698, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %702 = reshape(%699, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %703 = @func_764(%700, %701, %702) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %704 = %689.0;
  %705 = %696.1;
  %706 = %703.2;
  (%704, %705, meta[relay.Constant][51] /* ty=Tensor[(12, 110), int16] */, meta[relay.Constant][52] /* ty=Tensor[(770), float64] */, %706, %var_4023, %var_4024)
}

def @func_2583() -> (Tensor[(3, 9, 1), float32],) {
  %707 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %708 = acosh(%707) /* ty=Tensor[(3, 9, 1), float32] */;
  (%708,)
}

def @func_3227(%var_3205: float64, %var_3206: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64],) {
  %709 = cast(%var_3205, dtype="float64") /* ty=float64 */;
  %710 = cast(%var_3206, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %711 = floor_mod(%709, %710) /* ty=Tensor[(10, 7, 13), float64] */;
  (%711,)
}

def @func_3944(%var_3894: Tensor[(4, 5, 8), uint8], %var_3895: Tensor[(4, 5, 8), uint8]) -> (Tensor[(4, 5, 8), uint8], Tensor[(4, 5, 8), float64], Tensor[(3, 9, 14), bool], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
  %712 = cast(%var_3895, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
  %713 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_3894, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %716 = cast(%var_3894, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %717 = cast(meta[relay.Constant][54] /* ty=Tensor[(234), uint8] */, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %718 = reshape(%717, newshape=[234]) /* ty=Tensor[(234), uint8] */;
  %719 = @func_3589(%718) /* ty=(Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) */;
  %720 = maximum(%714, %715) /* ty=Tensor[(4, 5, 8), uint8] */;
  %721 = sin(%716) /* ty=Tensor[(4, 5, 8), float64] */;
  %722 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
  %723 = %719.2;
  (%720, %721, %722, %723, meta[relay.Constant][54] /* ty=Tensor[(234), uint8] */)
}

def @func_3672() -> (Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) {
  %724 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
  %725 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %726 = %724.0;
  %727 = %725.0;
  (%726, %727)
}

def @func_2066(%var_2036: Tensor[(13, 2, 1), uint8], %var_2037: Tensor[(13, 2, 9), uint8]) -> (Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) {
  %728 = cast(%var_2036, dtype="uint8") /* ty=Tensor[(13, 2, 1), uint8] */;
  %729 = cast(%var_2037, dtype="uint8") /* ty=Tensor[(13, 2, 9), uint8] */;
  %730 = cast(%var_2036, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %731 = erf(%730) /* ty=Tensor[(13, 2, 1), float64] */;
  %732 = cast(%731, dtype="uint64") /* ty=Tensor[(13, 2, 1), uint64] */;
  %733 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %734 = minimum(%732, %733) /* ty=Tensor[(13, 2, 9), uint64] */;
  %735 = cast(%var_2037, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
  %736 = cast(%var_2036, dtype="bool") /* ty=Tensor[(13, 2, 1), bool] */;
  %737 = logical_and(%735, %736) /* ty=Tensor[(13, 2, 9), bool] */;
  %738 = cast(%737, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %739 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%734, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %742 = maximum(%728, %729) /* ty=Tensor[(13, 2, 9), uint8] */;
  %743 = bitwise_or(%740, %741) /* ty=Tensor[(13, 2, 9), uint64] */;
  (%742, %743)
}

def @func_2787(%var_2782: Tensor[(90), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) {
  %744 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %745 = cast(%var_2782, dtype="float64") /* ty=Tensor[(90), float64] */;
  %746 = cast(meta[relay.Constant][55] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %747 = reshape(%745, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float64] */;
  %748 = reshape(%746, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %749 = @func_2505(%747, %748) /* ty=(Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */;
  %750 = %744.0;
  %751 = %749.0;
  (%750, %751, %var_2782, meta[relay.Constant][55] /* ty=Tensor[(490), float32] */)
}

def @func_5348() -> (Tensor[(9, 7, 13), bool],) {
  %752 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %753 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(9, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = greater(%754, %755) /* ty=Tensor[(9, 7, 13), bool] */;
  (%756,)
}

def @func_4974() -> (Tensor[(3, 9, 1), float32],) {
  %757 = @func_3284() /* ty=Tensor[(3, 9, 1), float32] */;
  (%757,)
}

def @func_4959(%var_4939: Tensor[(3, 9, 14), float32], %var_4953: Tensor[(104, 2), float64]) -> (Tensor[(3, 9, 14), int32], Tensor[(3, 9, 1), float64], Tensor[(96), float32], Tensor[(104, 2), float64], Tensor[(96), float32], Tensor[(490), float32]) {
  %758 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="int32") /* ty=Tensor[(3, 9, 1), int32] */;
  %761 = cast(%var_4939, dtype="int32") /* ty=Tensor[(3, 9, 14), int32] */;
  %762 = cast(%var_4953, dtype="float64") /* ty=Tensor[(104, 2), float64] */;
  %763 = cast(meta[relay.Constant][58] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %764 = cast(meta[relay.Constant][59] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %765 = reshape(%762, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %766 = reshape(%763, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %767 = reshape(%764, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %768 = @func_1797(%765, %766, %767) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %769 = logical_xor(%760, %761) /* ty=Tensor[(3, 9, 14), int32] */;
  %770 = @func_4853() /* ty=Tensor[(3, 9, 1), float64] */;
  %771 = %768.2;
  (%769, %770, %771, %var_4953, meta[relay.Constant][58] /* ty=Tensor[(96), float32] */, meta[relay.Constant][59] /* ty=Tensor[(490), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_539(%var_537: Tensor[(1960), uint8]) -> (Tensor[(16, 4, 2), float64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  @func_536(%var_537) /* ty=(Tensor[(16, 4, 2), float64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */
}

def @func_2408(%var_2406: Tensor[(768), float64]) -> (Tensor[(10, 14, 12), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64], Tensor[(8, 8, 12), float32], Tensor[(768), float64]) {
  @func_2405(%var_2406) /* ty=(Tensor[(10, 14, 12), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64], Tensor[(8, 8, 12), float32], Tensor[(768), float64]) */
}

def @func_3839(%var_3837: float64, %var_3838: Tensor[(91, 10), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(91, 10), float64]) {
  %7 = fn (%var_3833: float64, %var_3834: Tensor[(91, 10), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(91, 10), float64]) {
    %0 = cast(%var_3833, dtype="float64") /* ty=float64 */;
    %1 = cast(%var_3834, dtype="float64") /* ty=Tensor[(91, 10), float64] */;
    %2 = reshape(%0, newshape=[]) /* ty=float64 */;
    %3 = reshape(%1, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
    %4 = @func_3227(%2, %3) /* ty=(Tensor[(10, 7, 13), float64],) */;
    %5 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
    %6 = %4.0;
    (%5, %6, %var_3833, %var_3834)
  };
  %7(%var_3837, %var_3838) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(91, 10), float64]) */
}

def @func_3496() -> (Tensor[(3, 9, 1), float32],) {
  @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_5513() -> (Tensor[(8, 3, 13), uint32], Tensor[(8, 8, 12), float32], Tensor[(2, 384), float64]) {
  @func_5511() /* ty=(Tensor[(8, 3, 13), uint32], Tensor[(8, 8, 12), float32], Tensor[(2, 384), float64]) */
}

def @func_5802() -> Tensor[(3, 9, 1), float32] {
  %8 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %8.0
}

def @func_5511() -> (Tensor[(8, 3, 13), uint32], Tensor[(8, 8, 12), float32], Tensor[(2, 384), float64]) {
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 3, 1), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 1), uint32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 3, 13), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 13), uint32] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 384), float64] */, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %12 = reshape(%11, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %13 = bitwise_or(%9, %10) /* ty=Tensor[(8, 3, 13), uint32] */;
  %14 = @func_603(%12) /* ty=Tensor[(8, 8, 12), float32] */;
  (%13, %14, meta[relay.Constant][2] /* ty=Tensor[(2, 384), float64] */)
}

def @func_5214() -> (Tensor[(3, 9, ?), float32],) {
  %15 = @func_4974() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %16 = %15.0;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 9, 1), float32] */, dtype="uint64") /* ty=Tensor[(3, 9, 1), uint64] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="uint64") /* ty=Tensor[(3, 9, 1), uint64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %21 = multiply(%19, %20) /* ty=Tensor[(3, 9, ?), uint64] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(3, 9, ?), float32] */;
  %23 = exp(%22) /* ty=Tensor[(3, 9, ?), float32] */;
  (%23,)
}

def @func_4037(%var_4035: Tensor[(96), float32], %var_4036: Tensor[(490, 1), float32]) -> (Tensor[(3, 9, 14), bool], Tensor[(77, 10), float64], Tensor[(12, 110), int16], Tensor[(770), float64], Tensor[(14, 10, 14), uint8], Tensor[(96), float32], Tensor[(490, 1), float32]) {
  %42 = fn (%var_4023: Tensor[(96), float32], %var_4024: Tensor[(490, 1), float32]) -> (Tensor[(3, 9, 14), bool], Tensor[(77, 10), float64], Tensor[(12, 110), int16], Tensor[(770), float64], Tensor[(14, 10, 14), uint8], Tensor[(96), float32], Tensor[(490, 1), float32]) {
    %24 = @func_3187() /* ty=(Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) */;
    %25 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 110), int16] */, dtype="int16") /* ty=Tensor[(12, 110), int16] */;
    %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 110), int16] */, dtype="int16") /* ty=Tensor[(12, 110), int16] */;
    %27 = cast(meta[relay.Constant][5] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %28 = reshape(%25, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
    %29 = reshape(%26, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
    %30 = reshape(%27, newshape=[77, 10]) /* ty=Tensor[(77, 10), float64] */;
    %31 = @func_3647(%28, %29, %30) /* ty=(Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) */;
    %32 = cast(%var_4023, dtype="float32") /* ty=Tensor[(96), float32] */;
    %33 = cast(%var_4023, dtype="uint64") /* ty=Tensor[(96), uint64] */;
    %34 = cast(%var_4024, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
    %35 = reshape(%32, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
    %36 = reshape(%33, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
    %37 = reshape(%34, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %38 = @func_764(%35, %36, %37) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
    %39 = %24.0;
    %40 = %31.1;
    %41 = %38.2;
    (%39, %40, meta[relay.Constant][4] /* ty=Tensor[(12, 110), int16] */, meta[relay.Constant][5] /* ty=Tensor[(770), float64] */, %41, %var_4023, %var_4024)
  };
  %42(%var_4035, %var_4036) /* ty=(Tensor[(3, 9, 14), bool], Tensor[(77, 10), float64], Tensor[(12, 110), int16], Tensor[(770), float64], Tensor[(14, 10, 14), uint8], Tensor[(96), float32], Tensor[(490, 1), float32]) */
}

def @func_1802(%var_1799: Tensor[(16, 13, 1), float64], %var_1800: Tensor[(96), float32], %var_1801: Tensor[(245, 2), float32]) -> (Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) {
  @func_1797(%var_1799, %var_1800, %var_1801) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */
}

def @func_424(%var_423: Tensor[(7, 10, 7), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) {
  %116 = fn (%var_295: Tensor[(7, 10, 7), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) {
    %43 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %44 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %45 = reshape(%43, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %46 = reshape(%44, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %47 = @func_125(%45, %46) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %48 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %49 = %47.0;
    %50 = cast(%49, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %51 = reshape(%48, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %52 = reshape(%50, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %53 = @func_125(%51, %52) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %54 = %53.0;
    %55 = cast(%54, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
    %56 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %58 = reshape(%56, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %59 = reshape(%57, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %60 = @func_125(%58, %59) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %61 = cast(%49, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %62 = acosh(%55) /* ty=Tensor[(14, 10, 14), float32] */;
    %63 = cast(%62, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %64 = reshape(%61, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %65 = reshape(%63, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %66 = @func_125(%64, %65) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %68 = %66.0;
    %69 = cast(%68, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %70 = reshape(%67, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %71 = reshape(%69, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %72 = @func_125(%70, %71) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %73 = %60.0;
    %74 = cast(%73, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %75 = cast(%54, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %76 = reshape(%74, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %77 = reshape(%75, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %78 = @func_125(%76, %77) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %79 = cast(%73, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %80 = cast(%68, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %81 = reshape(%79, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %82 = reshape(%80, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %83 = @func_125(%81, %82) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %84 = cast(%68, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %85 = %72.0;
    %86 = cast(%85, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %87 = reshape(%84, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %88 = reshape(%86, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %89 = @func_125(%87, %88) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %90 = %83.0;
    %91 = cast(%90, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %92 = cast(%90, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %93 = reshape(%91, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %94 = reshape(%92, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %95 = @func_125(%93, %94) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %96 = cast(%90, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %97 = cast(meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %98 = reshape(%96, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %99 = reshape(%97, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
    %100 = @func_125(%98, %99) /* ty=(Tensor[(14, 10, 14), uint8],) */;
    %101 = cast(%var_295, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %102 = log10(%101) /* ty=Tensor[(7, 10, 7), float32] */;
    %103 = cast(%102, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %104 = rsqrt(%103) /* ty=Tensor[(7, 10, 7), float32] */;
    %105 = cast(%var_295, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
    %106 = exp(%105) /* ty=Tensor[(7, 10, 7), float64] */;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
    %108 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%104, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %111 = %78.0;
    %112 = %89.0;
    %113 = %95.0;
    %114 = %100.0;
    %115 = floor_mod(%109, %110) /* ty=Tensor[(7, 10, 7), float64] */;
    (%49, meta[relay.Constant][6] /* ty=Tensor[(1960), uint8] */, %62, %73, %68, %85, %111, %90, %112, %113, %114, %115)
  };
  %116(%var_423) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */
}

def @func_3674() -> (Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) {
  @func_3672() /* ty=(Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) */
}

def @func_5880(%var_5877: Tensor[(3328), float64], %var_5878: Tensor[(560), float32], %var_5879: Tensor[(490), float32]) -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, ?), uint32], Tensor[(3328), float64], Tensor[(3, 9, 1), float32], Tensor[(7, 70), float32], Tensor[(560), float32], Tensor[(96), float32], Tensor[(490), float32], Tensor[(16, 16, 13), float64], Tensor[(3, 9, 1), float32]) {
  @func_5875(%var_5877, %var_5878, %var_5879) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(3, 9, ?), uint32], Tensor[(3328), float64], Tensor[(3, 9, 1), float32], Tensor[(7, 70), float32], Tensor[(560), float32], Tensor[(96), float32], Tensor[(490), float32], Tensor[(16, 16, 13), float64], Tensor[(3, 9, 1), float32]) */
}

def @func_3286() -> Tensor[(3, 9, 1), float32] {
  @func_3284() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_3025(%var_3024: Tensor[(3, 9, 8), float32]) -> (Tensor[(3, 9, 8), float32],) {
  %124 = fn (%var_3016: Tensor[(3, 9, 8), float32]) -> (Tensor[(3, 9, 8), float32],) {
    %117 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %118 = %117.0;
    %119 = cast(%118, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
    %120 = log2(%119) /* ty=Tensor[(3, 9, 1), float32] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
    %122 = cast(%var_3016, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
    %123 = minimum(%121, %122) /* ty=Tensor[(3, 9, 8), float32] */;
    (%123,)
  };
  %124(%var_3024) /* ty=(Tensor[(3, 9, 8), float32],) */
}

def @func_5182() -> (Tensor[(3, 9, 1), float32],) {
  %127 = fn () -> (Tensor[(3, 9, 1), float32],) {
    %125 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %126 = %125.0;
    (%126,)
  };
  %127() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_2665() -> (Tensor[(3, 9, 1), float32],) {
  %128 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %129 = %128.0;
  (%129,)
}

def @func_4174(%var_4172: Tensor[(1, 3, 6), float32]) -> (Tensor[(1, 3, 6), float32], Tensor[(90), float64], Tensor[(45, 2), float64], Tensor[(3, 9, 1), float32]) {
  @func_4171(%var_4172) /* ty=(Tensor[(1, 3, 6), float32], Tensor[(90), float64], Tensor[(45, 2), float64], Tensor[(3, 9, 1), float32]) */
}

def @func_5406(%var_5398: Tensor[(770), float64], %var_5403: Tensor[(480), float64]) -> (Tensor[(3, 9, ?), float32], Tensor[(11, 12, 10), bool], Tensor[(1320), int16], Tensor[(770), float64], Tensor[(3, 9, 1), float32], Tensor[(480), float64]) {
  %130 = @func_5214() /* ty=(Tensor[(3, 9, ?), float32],) */;
  %131 = cast(meta[relay.Constant][7] /* ty=Tensor[(1320), int16] */, dtype="int16") /* ty=Tensor[(1320), int16] */;
  %132 = cast(meta[relay.Constant][7] /* ty=Tensor[(1320), int16] */, dtype="int16") /* ty=Tensor[(1320), int16] */;
  %133 = cast(%var_5398, dtype="float64") /* ty=Tensor[(770), float64] */;
  %134 = reshape(%131, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %135 = reshape(%132, newshape=[11, 12, 10]) /* ty=Tensor[(11, 12, 10), int16] */;
  %136 = reshape(%133, newshape=[77, 10]) /* ty=Tensor[(77, 10), float64] */;
  %137 = @func_3647(%134, %135, %136) /* ty=(Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) */;
  %138 = cast(%var_5403, dtype="float64") /* ty=Tensor[(480), float64] */;
  %139 = reshape(%138, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %140 = @func_5046(%139) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %141 = %130.0;
  %142 = %137.0;
  %143 = %140.1;
  (%141, %142, meta[relay.Constant][7] /* ty=Tensor[(1320), int16] */, %var_5398, %143, %var_5403)
}

def @func_3566() -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %147 = fn () -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
    %144 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %145 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
    %146 = %144.0;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */
}

def @func_5875(%var_5833: Tensor[(3328), float64], %var_5862: Tensor[(560), float32], %var_5864: Tensor[(490), float32]) -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, ?), uint32], Tensor[(3328), float64], Tensor[(3, 9, 1), float32], Tensor[(7, 70), float32], Tensor[(560), float32], Tensor[(96), float32], Tensor[(490), float32], Tensor[(16, 16, 13), float64], Tensor[(3, 9, 1), float32]) {
  %148 = @func_3767() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %149 = @func_4238() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %150 = cast(%var_5862, dtype="float32") /* ty=Tensor[(560), float32] */;
  %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %152 = cast(%var_5864, dtype="float32") /* ty=Tensor[(490), float32] */;
  %153 = reshape(%150, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), float32] */;
  %154 = reshape(%151, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %155 = reshape(%152, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %156 = @func_4562(%153, %154, %155) /* ty=(Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) */;
  %157 = cast(%var_5833, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %158 = cast(%var_5833, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %159 = reshape(%157, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), float64] */;
  %160 = reshape(%158, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), float64] */;
  %161 = @func_2312(%159, %160) /* ty=(Tensor[(16, 16, 13), float64],) */;
  %162 = %161.0;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %164 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %165 = %148.0;
  %166 = @func_3533() /* ty=Tensor[(3, 9, ?), uint32] */;
  %167 = %149.0;
  %168 = %156.4;
  %169 = asinh(%163) /* ty=Tensor[(16, 16, 13), float64] */;
  %170 = %164.0;
  (%165, %166, %var_5833, %167, %168, %var_5862, meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, %var_5864, %169, %170)
}

def @func_5410(%var_5408: Tensor[(770), float64], %var_5409: Tensor[(480), float64]) -> (Tensor[(3, 9, ?), float32], Tensor[(11, 12, 10), bool], Tensor[(1320), int16], Tensor[(770), float64], Tensor[(3, 9, 1), float32], Tensor[(480), float64]) {
  @func_5406(%var_5408, %var_5409) /* ty=(Tensor[(3, 9, ?), float32], Tensor[(11, 12, 10), bool], Tensor[(1320), int16], Tensor[(770), float64], Tensor[(3, 9, 1), float32], Tensor[(480), float64]) */
}

def @func_2876() -> Tensor[(3, 9, 1), float32] {
  @func_2874() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_3187() -> (Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) {
  %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %172 = reshape(%171, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
  %173 = @func_3023(%172) /* ty=(Tensor[(3, 9, 8), float32],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
  %176 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
  %177 = cos(%175) /* ty=Tensor[(3, 9, 8), float32] */;
  (%176, meta[relay.Constant][9] /* ty=Tensor[(216), float32] */, %177)
}

def @func_4336(%var_4275: Tensor[(4, 8, 3), int16], %var_4316: Tensor[(208), float64], %var_4317: Tensor[(490), float32], %var_4325: Tensor[(234), uint8], %var_4331: Tensor[(490), float32]) -> (Tensor[(4, 8, 3), int16], Tensor[(4, 8, 3), int16], Tensor[(96), float32], Tensor[(208), float64], Tensor[(13, 2, 9), uint8], Tensor[(26), uint8], Tensor[(234), uint8], Tensor[(490), float64]) {
  %178 = cast(%var_4275, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %179 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %182 = cast(%var_4275, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %183 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 3), int16] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %186 = cast(%var_4316, dtype="float64") /* ty=Tensor[(208), float64] */;
  %187 = cast(%var_4275, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %188 = cast(%var_4317, dtype="float32") /* ty=Tensor[(490), float32] */;
  %189 = reshape(%186, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %190 = reshape(%187, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %191 = reshape(%188, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %192 = @func_1797(%189, %190, %191) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(26), uint8] */, dtype="uint8") /* ty=Tensor[(26), uint8] */;
  %194 = cast(%var_4325, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %195 = reshape(%193, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
  %196 = reshape(%194, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
  %197 = @func_2066(%195, %196) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
  %198 = cast(%var_4331, dtype="float64") /* ty=Tensor[(490), float64] */;
  %199 = shape_of(%var_4317, dtype="int32") /* ty=Tensor[(1), int32] */;
  %200 = cast(%var_4317, dtype="float64") /* ty=Tensor[(490), float64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?), float64] */;
  %202 = subtract(%180, %181) /* ty=Tensor[(4, 8, 3), int16] */;
  %203 = right_shift(%184, %185) /* ty=Tensor[(4, 8, 3), int16] */;
  %204 = %192.2;
  %205 = %197.0;
  %206 = divide(%200, %201) /* ty=Tensor[(490), float64] */;
  (%202, %203, %204, %var_4316, %205, meta[relay.Constant][11] /* ty=Tensor[(26), uint8] */, %var_4325, %206)
}

def @func_4007() -> (Tensor[(3, 9, 1), float32],) {
  @func_4005() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_1298(%var_1296: Tensor[(4, 16, 2), float64], %var_1297: Tensor[(100), float64]) -> (Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) {
  %215 = fn (%var_1287: Tensor[(4, 16, 2), float64], %var_1292: Tensor[(100), float64]) -> (Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) {
    %207 = cast(%var_1287, dtype="float64") /* ty=Tensor[(4, 16, 2), float64] */;
    %208 = cast(%var_1292, dtype="float64") /* ty=Tensor[(100), float64] */;
    %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
    %210 = reshape(%208, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
    %211 = reshape(%209, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
    %212 = @func_658(%210, %211) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
    %213 = exp(%207) /* ty=Tensor[(4, 16, 2), float64] */;
    %214 = %212.2;
    (%213, %214, %var_1292, meta[relay.Constant][12] /* ty=Tensor[(10, 196), uint8] */)
  };
  %215(%var_1296, %var_1297) /* ty=(Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) */
}

def @func_2795() -> Tensor[(3, 9, 1), float32] {
  %217 = fn () -> Tensor[(3, 9, 1), float32] {
    %216 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %216.0
  };
  %217() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_764(%var_719: Tensor[(2, 12, 4), float32], %var_748: Tensor[(2, 12, 4), uint64], %var_758: Tensor[(490), float32]) -> (Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) {
  %218 = cast(%var_719, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %219 = cast(%var_719, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %220 = asinh(%219) /* ty=Tensor[(2, 12, 4), float32] */;
  %221 = cast(%var_719, dtype="uint64") /* ty=Tensor[(2, 12, 4), uint64] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="uint64") /* ty=Tensor[(2, 12, 4), uint64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %225 = left_shift(%223, %224) /* ty=Tensor[(2, 12, 4), uint64] */;
  %226 = cast(%var_748, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = cast(%var_758, dtype="float32") /* ty=Tensor[(490), float32] */;
  %231 = reshape(%230, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %232 = @func_422(%231) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
  %233 = sigmoid(%218) /* ty=Tensor[(2, 12, 4), float64] */;
  %234 = mod(%228, %229) /* ty=Tensor[(2, 12, 4), float64] */;
  %235 = %232.0;
  (%233, %234, %235, %var_758)
}

def @func_4854() -> Tensor[(3, 9, 1), float64] {
  %237 = fn () -> Tensor[(3, 9, 1), float64] {
    %236 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
    %236.0
  };
  %237() /* ty=Tensor[(3, 9, 1), float64] */
}

def @func_4880() -> (Tensor[(3, 9, ?), uint32],) {
  %238 = @func_3533() /* ty=Tensor[(3, 9, ?), uint32] */;
  (%238,)
}

def @func_2905() -> Tensor[(3, 9, 14), bool] {
  %239 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %242 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 9, 14), bool] */;
  equal(%241, %242) /* ty=Tensor[(3, 9, 14), bool] */
}

def @func_3767() -> (Tensor[(3, 9, 1), float32],) {
  %243 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %244 = %243.0;
  (%244,)
}

def @func_4238() -> (Tensor[(3, 9, 1), float32],) {
  %245 = @func_3672() /* ty=(Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) */;
  %246 = %245.1;
  (%246,)
}

def @func_5804() -> Tensor[(3, 9, 1), float32] {
  @func_5802() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_769(%var_766: Tensor[(2, 12, 4), float32], %var_767: Tensor[(2, 12, 4), uint64], %var_768: Tensor[(490), float32]) -> (Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) {
  @func_764(%var_766, %var_767, %var_768) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */
}

def @func_5280(%var_5244: Tensor[(8, 4, 1), float64], %var_5264: Tensor[(208), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(5, 2, 10), int64], Tensor[(100), float64], Tensor[(1960), uint8], Tensor[(3, 9, 1), float32], Tensor[(480), float64], Tensor[(8, 4, 1), float64], Tensor[(16, 13, 1), float64], Tensor[(208), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(3, 9, ?), float64]) {
  %247 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %248 = cast(meta[relay.Constant][14] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %250 = reshape(%248, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
  %251 = reshape(%249, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
  %252 = @func_658(%250, %251) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
  %253 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %254 = reshape(%253, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %255 = @func_5046(%254) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %256 = cast(%var_5244, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %257 = log10(%256) /* ty=Tensor[(8, 4, 1), float64] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %259 = cast(%var_5264, dtype="float64") /* ty=Tensor[(208), float64] */;
  %260 = cast(meta[relay.Constant][17] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %261 = cast(meta[relay.Constant][18] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %262 = reshape(%259, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
  %263 = reshape(%260, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %264 = reshape(%261, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
  %265 = @func_1797(%262, %263, %264) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
  %266 = %252.0;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
  %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %269 = reshape(%267, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %270 = reshape(%268, newshape=[140, 14]) /* ty=Tensor[(140, 14), uint8] */;
  %271 = @func_3797(%269, %270) /* ty=(Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) */;
  %272 = %247.0;
  %273 = %255.2;
  %274 = asinh(%258) /* ty=Tensor[(8, 4, 1), float64] */;
  %275 = %265.0;
  %276 = %271.0;
  (%272, %266, meta[relay.Constant][14] /* ty=Tensor[(100), float64] */, meta[relay.Constant][15] /* ty=Tensor[(1960), uint8] */, %273, meta[relay.Constant][16] /* ty=Tensor[(480), float64] */, %274, %275, %var_5264, meta[relay.Constant][17] /* ty=Tensor[(96), float32] */, meta[relay.Constant][18] /* ty=Tensor[(490), float32] */, %276)
}

def @func_128(%var_126: Tensor[(14, 10, 14), uint8], %var_127: Tensor[(14, 10, 14), uint8]) -> (Tensor[(14, 10, 14), uint8],) {
  %282 = fn (%var_111: Tensor[(14, 10, 14), uint8], %var_112: Tensor[(14, 10, 14), uint8]) -> (Tensor[(14, 10, 14), uint8],) {
    %277 = cast(%var_112, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %278 = shape_of(%var_111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%var_111, dtype="uint8") /* ty=Tensor[(14, 10, 14), uint8] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %281 = right_shift(%279, %280) /* ty=Tensor[(14, 10, 14), uint8] */;
    (%281,)
  };
  %282(%var_126, %var_127) /* ty=(Tensor[(14, 10, 14), uint8],) */
}

def @func_536(%var_533: Tensor[(1960), uint8]) -> (Tensor[(16, 4, 2), float64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  %283 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 2), float32] */;
  %284 = tan(%283) /* ty=Tensor[(16, 4, 2), float32] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(16, 4, 2), float64] */;
  %286 = cast(%var_533, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %287 = cast(%var_533, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %288 = reshape(%286, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %289 = reshape(%287, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %290 = @func_125(%288, %289) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %291 = sin(%285) /* ty=Tensor[(16, 4, 2), float64] */;
  %292 = %290.0;
  (%291, %292, %var_533)
}

def @main(%var_5912: Tensor[(3, 8, 9), float32]) -> Tensor[(3, 8, 9), float32] {
  %293 = cast(%var_5912, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  acosh(%293) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_3800(%var_3798: Tensor[(100), float64], %var_3799: Tensor[(140, 14), uint8]) -> (Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) {
  %309 = fn (%var_3794: Tensor[(100), float64], %var_3795: Tensor[(140, 14), uint8]) -> (Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) {
    %294 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %295 = %294.0;
    %296 = cast(%295, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
    %297 = asinh(%296) /* ty=Tensor[(3, 9, 1), float64] */;
    %298 = cast(%295, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
    %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
    %300 = cast(%297, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
    %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %302 = cast(%var_3794, dtype="float64") /* ty=Tensor[(100), float64] */;
    %303 = cast(%var_3795, dtype="uint8") /* ty=Tensor[(140, 14), uint8] */;
    %304 = reshape(%302, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
    %305 = reshape(%303, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
    %306 = @func_658(%304, %305) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
    %307 = mod(%300, %301) /* ty=Tensor[(3, 9, ?), float64] */;
    %308 = %306.2;
    (%307, %308, %var_3794, %var_3795)
  };
  %309(%var_3798, %var_3799) /* ty=(Tensor[(3, 9, ?), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(140, 14), uint8]) */
}

def @func_2667() -> (Tensor[(3, 9, 1), float32],) {
  @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_3189() -> (Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) {
  @func_3187() /* ty=(Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) */
}

def @func_2950(%var_2948: Tensor[(100), float64], %var_2949: Tensor[(1960), uint8]) -> (Tensor[(3, 9, 14), bool], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1960), float32]) {
  %323 = fn (%var_2928: Tensor[(100), float64], %var_2929: Tensor[(1960), uint8]) -> (Tensor[(3, 9, 14), bool], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1960), float32]) {
    %310 = cast(%var_2928, dtype="float64") /* ty=Tensor[(100), float64] */;
    %311 = cast(%var_2929, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %312 = reshape(%310, newshape=[5, 2, 10]) /* ty=Tensor[(5, 2, 10), float64] */;
    %313 = reshape(%311, newshape=[1960]) /* ty=Tensor[(1960), uint8] */;
    %314 = @func_658(%312, %313) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */;
    %315 = cast(meta[relay.Constant][20] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %316 = reshape(%315, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %317 = @func_2787(%316) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) */;
    %318 = cast(%var_2929, dtype="float32") /* ty=Tensor[(1960), float32] */;
    %319 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
    %320 = %314.2;
    %321 = %317.2;
    %322 = sqrt(%318) /* ty=Tensor[(1960), float32] */;
    (%319, %320, %var_2928, %321, meta[relay.Constant][20] /* ty=Tensor[(90), float64] */, %322)
  };
  %323(%var_2948, %var_2949) /* ty=(Tensor[(3, 9, 14), bool], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1960), float32]) */
}

def @func_3266() -> (Tensor[(3, 9, 1), float64],) {
  @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */
}

def @func_1764(%var_1763: Tensor[(3, 16, 15), float64]) -> (Tensor[(3, 16, 15), float64],) {
  %329 = fn (%var_1750: Tensor[(3, 16, 15), float64]) -> (Tensor[(3, 16, 15), float64],) {
    %324 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
    %325 = shape_of(%var_1750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%var_1750, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %328 = power(%326, %327) /* ty=Tensor[(3, 16, 15), float64] */;
    (%328,)
  };
  %329(%var_1763) /* ty=(Tensor[(3, 16, 15), float64],) */
}

def @func_3227(%var_3205: float64, %var_3206: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64],) {
  %330 = cast(%var_3205, dtype="float64") /* ty=float64 */;
  %331 = cast(%var_3206, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %332 = floor_mod(%330, %331) /* ty=Tensor[(10, 7, 13), float64] */;
  (%332,)
}

def @func_2275(%var_2257: Tensor[(16, 3, 6), float64], %var_2263: Tensor[(16, 3, 6), float64], %var_2268: Tensor[(770), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(770), float64], Tensor[(16, 3, 6), float64]) {
  %333 = cast(%var_2268, dtype="float64") /* ty=Tensor[(770), float64] */;
  %334 = reshape(%333, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
  %335 = @func_1447(%334) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) */;
  %336 = cast(%var_2257, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %337 = atanh(%336) /* ty=Tensor[(16, 3, 6), float64] */;
  %338 = cast(%var_2263, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %342 = power(%340, %341) /* ty=Tensor[(16, 3, 6), float64] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %344 = %335.0;
  %345 = log(%343) /* ty=Tensor[(16, 3, 6), float64] */;
  (%344, %var_2268, %345)
}

def @func_1449(%var_1448: Tensor[(5, 11, 14), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) {
  %357 = fn (%var_1408: Tensor[(5, 11, 14), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) {
    %346 = cast(%var_1408, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
    %347 = tan(%346) /* ty=Tensor[(5, 11, 14), float64] */;
    %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 14), float64] */, dtype="int16") /* ty=Tensor[(5, 11, 14), int16] */;
    %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%347, dtype="int16") /* ty=Tensor[(5, 11, 14), int16] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %352 = cast(meta[relay.Constant][23] /* ty=Tensor[(245, 2), float32] */, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
    %353 = reshape(%352, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %354 = @func_422(%353) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
    %355 = bitwise_or(%350, %351) /* ty=Tensor[(5, 11, 14), int16] */;
    %356 = %354.6;
    (%355, %356, meta[relay.Constant][23] /* ty=Tensor[(245, 2), float32] */)
  };
  %357(%var_1448) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) */
}

def @func_5110(%var_5080: Tensor[(31360), float64], %var_5093: Tensor[(3, 9, 4), float32], %var_5108: Tensor[(720), float64]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 30), float64], Tensor[(490), float32], Tensor[(3, 9, 16), uint8], Tensor[(432), float32], Tensor[(768), float64], Tensor[(31360), float64], Tensor[(3, 9, 96), bool], Tensor[(3, 9, 4), bool], Tensor[(1960, 16), float64], Tensor[(3, 9, 1), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 30), float64] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %360 = reshape(%358, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float64] */;
  %361 = reshape(%359, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %362 = @func_2505(%360, %361) /* ty=(Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */;
  %363 = cast(meta[relay.Constant][26] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %364 = reshape(%363, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %365 = @func_4119(%364) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) */;
  %366 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
  %367 = cast(%366, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %368 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="bool") /* ty=Tensor[(96), bool] */;
  %369 = cast(%366, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %370 = log(%369) /* ty=Tensor[(3, 9, 1), float32] */;
  %371 = cast(%370, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %372 = cast(%var_5093, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %373 = cast(meta[relay.Constant][27] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %374 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %375 = cast(meta[relay.Constant][25] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %376 = cast(%var_5080, dtype="float64") /* ty=Tensor[(31360), float64] */;
  %377 = reshape(%373, newshape=[768]) /* ty=Tensor[(768), float64] */;
  %378 = reshape(%374, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %379 = reshape(%375, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %380 = reshape(%376, newshape=[1960, 16]) /* ty=Tensor[(1960, 16), float64] */;
  %381 = @func_3443(%377, %378, %379, %380) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) */;
  %382 = %381.10;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(1960, 16), float64] */;
  %384 = cast(%var_5108, dtype="float64") /* ty=Tensor[(720), float64] */;
  %385 = reshape(%384, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %386 = @func_1762(%385) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %387 = %362.4;
  %388 = %365.2;
  %389 = not_equal(%367, %368) /* ty=Tensor[(3, 9, 96), bool] */;
  %390 = equal(%371, %372) /* ty=Tensor[(3, 9, 4), bool] */;
  %391 = exp(%383) /* ty=Tensor[(1960, 16), float64] */;
  %392 = @func_4857() /* ty=Tensor[(3, 9, 1), float32] */;
  %393 = %386.0;
  (%387, meta[relay.Constant][24] /* ty=Tensor[(3, 30), float64] */, meta[relay.Constant][25] /* ty=Tensor[(490), float32] */, %388, meta[relay.Constant][26] /* ty=Tensor[(432), float32] */, meta[relay.Constant][27] /* ty=Tensor[(768), float64] */, %var_5080, %389, %390, %391, %392, %393, %var_5108)
}

def @func_4735(%var_4707: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), uint8], Tensor[(3, 9, 1), float32]) {
  %394 = @func_3034() /* ty=Tensor[(3, 9, 1), float32] */;
  %395 = cast(%394, dtype="uint8") /* ty=Tensor[(3, 9, 1), uint8] */;
  %396 = cast(%var_4707, dtype="uint8") /* ty=Tensor[(3, 9, 4), uint8] */;
  %397 = cast(%394, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %398 = right_shift(%395, %396) /* ty=Tensor[(3, 9, 4), uint8] */;
  %399 = sigmoid(%397) /* ty=Tensor[(3, 9, 1), float32] */;
  (%398, %399)
}

def @func_2405(%var_2397: Tensor[(768), float64]) -> (Tensor[(10, 14, 12), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64], Tensor[(8, 8, 12), float32], Tensor[(768), float64]) {
  %400 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %401 = atanh(%400) /* ty=Tensor[(10, 14, 12), float64] */;
  %402 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %406 = cast(meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %407 = reshape(%406, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %408 = @func_1762(%407) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %409 = cast(%var_2397, dtype="float64") /* ty=Tensor[(768), float64] */;
  %410 = reshape(%409, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %411 = multiply(%404, %405) /* ty=Tensor[(10, 14, 12), float32] */;
  %412 = %408.0;
  %413 = @func_603(%410) /* ty=Tensor[(8, 8, 12), float32] */;
  (%411, %412, meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, %413, %var_2397)
}

def @func_3651(%var_3648: Tensor[(11, 12, 10), int16], %var_3649: Tensor[(11, 12, 10), int16], %var_3650: Tensor[(77, 10), float64]) -> (Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) {
  %432 = fn (%var_3610: Tensor[(11, 12, 10), int16], %var_3611: Tensor[(11, 12, 10), int16], %var_3616: Tensor[(77, 10), float64]) -> (Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) {
    %414 = cast(%var_3611, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
    %415 = shape_of(%var_3610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%var_3610, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %418 = cast(%var_3616, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
    %419 = reshape(%418, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
    %420 = @func_1447(%419) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(14, 10, 14), uint8], Tensor[(245, 2), float32]) */;
    %421 = %420.1;
    %422 = cast(%421, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
    %423 = tan(%422) /* ty=Tensor[(14, 10, 14), float32] */;
    %424 = cast(%423, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
    %425 = sqrt(%424) /* ty=Tensor[(14, 10, 14), float64] */;
    %426 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%425, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %430 = greater_equal(%416, %417) /* ty=Tensor[(11, 12, 10), bool] */;
    %431 = add(%428, %429) /* ty=Tensor[(14, 10, 14), float64] */;
    (%430, %var_3616, %431)
  };
  %432(%var_3648, %var_3649, %var_3650) /* ty=(Tensor[(11, 12, 10), bool], Tensor[(77, 10), float64], Tensor[(14, 10, 14), float64]) */
}

def @func_4806(%var_4795: Tensor[(3, 15, 14), int32], %var_4796: Tensor[(3, 15, 14), int32]) -> Tensor[(3, 15, 14), int32] {
  %433 = cast(%var_4796, dtype="int32") /* ty=Tensor[(3, 15, 14), int32] */;
  %434 = shape_of(%var_4795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_4795, dtype="int32") /* ty=Tensor[(3, 15, 14), int32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%435, %436) /* ty=Tensor[(3, 15, 14), int32] */
}

def @func_4520(%var_4519: Tensor[(252), int8]) -> (Tensor[(12, 3, 7), bool], Tensor[(3, 9, 252), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %461 = fn (%var_4463: Tensor[(252), int8]) -> (Tensor[(12, 3, 7), bool], Tensor[(3, 9, 252), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
    %437 = cast(%var_4463, dtype="int8") /* ty=Tensor[(252), int8] */;
    %438 = reshape(%437, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), int8] */;
    %439 = @func_4005() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %440 = %439.0;
    %441 = cast(%440, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
    %442 = cast(%var_4463, dtype="uint32") /* ty=Tensor[(252), uint32] */;
    %443 = right_shift(%441, %442) /* ty=Tensor[(3, 9, 252), uint32] */;
    %444 = cast(%443, dtype="uint32") /* ty=Tensor[(3, 9, 252), uint32] */;
    %445 = cast(%var_4463, dtype="uint32") /* ty=Tensor[(252), uint32] */;
    %446 = multiply(%444, %445) /* ty=Tensor[(3, 9, 252), uint32] */;
    %447 = cast(%446, dtype="float64") /* ty=Tensor[(3, 9, 252), float64] */;
    %448 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%443, dtype="float64") /* ty=Tensor[(3, 9, 252), float64] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %451 = cast(meta[relay.Constant][32] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %452 = reshape(%451, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %453 = @func_422(%452) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8], Tensor[(14, 10, 14), float32], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(14, 10, 14), uint8], Tensor[(7, 10, 7), float64]) */;
    %454 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %455 = reshape(%454, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
    %456 = @func_1762(%455) /* ty=(Tensor[(3, 16, 15), float64],) */;
    %457 = @func_3297(%438) /* ty=Tensor[(12, 3, 7), bool] */;
    %458 = mod(%449, %450) /* ty=Tensor[(3, 9, 252), float64] */;
    %459 = %453.5;
    %460 = %456.0;
    (%457, %458, %459, meta[relay.Constant][32] /* ty=Tensor[(490), float32] */, %460, meta[relay.Constant][33] /* ty=Tensor[(720), float64] */)
  };
  %461(%var_4519) /* ty=(Tensor[(12, 3, 7), bool], Tensor[(3, 9, 252), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */
}

def @func_658(%var_621: Tensor[(5, 2, 10), float64], %var_650: Tensor[(1960), uint8]) -> (Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  %462 = cast(%var_621, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
  %463 = asin(%462) /* ty=Tensor[(5, 2, 10), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(5, 2, 10), float32] */;
  %465 = sqrt(%464) /* ty=Tensor[(5, 2, 10), float32] */;
  %466 = cast(%463, dtype="int64") /* ty=Tensor[(5, 2, 10), int64] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int64") /* ty=Tensor[(5, 2, 10), int64] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %470 = cast(%var_650, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %471 = cast(%var_650, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %472 = reshape(%470, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %473 = reshape(%471, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %474 = @func_125(%472, %473) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %475 = add(%468, %469) /* ty=Tensor[(5, 2, 10), int64] */;
  %476 = %474.0;
  (%475, %476, %var_650)
}

def @func_4976() -> (Tensor[(3, 9, 1), float32],) {
  @func_4974() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_4171(%var_4135: Tensor[(1, 3, 6), float32]) -> (Tensor[(1, 3, 6), float32], Tensor[(90), float64], Tensor[(45, 2), float64], Tensor[(3, 9, 1), float32]) {
  %477 = cast(%var_4135, dtype="float32") /* ty=Tensor[(1, 3, 6), float32] */;
  %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
  %479 = reshape(%478, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %480 = @func_2787(%479) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) */;
  %481 = @func_3767() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %482 = log(%477) /* ty=Tensor[(1, 3, 6), float32] */;
  %483 = %480.2;
  %484 = %481.0;
  (%482, %483, meta[relay.Constant][34] /* ty=Tensor[(45, 2), float64] */, %484)
}

def @func_5709() -> (Tensor[(3, 9, ?), float32], Tensor[(3, 9, 8), float32], Tensor[(216), float32]) {
  %491 = fn () -> (Tensor[(3, 9, ?), float32], Tensor[(3, 9, 8), float32], Tensor[(216), float32]) {
    %485 = @func_5214() /* ty=(Tensor[(3, 9, ?), float32],) */;
    %486 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %487 = reshape(%486, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
    %488 = @func_3023(%487) /* ty=(Tensor[(3, 9, 8), float32],) */;
    %489 = %485.0;
    %490 = %488.0;
    (%489, %490, meta[relay.Constant][35] /* ty=Tensor[(216), float32] */)
  };
  %491() /* ty=(Tensor[(3, 9, ?), float32], Tensor[(3, 9, 8), float32], Tensor[(216), float32]) */
}

def @func_3672() -> (Tensor[(3, 9, 1), float64], Tensor[(3, 9, 1), float32]) {
  %492 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
  %493 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %494 = %492.0;
  %495 = %493.0;
  (%494, %495)
}

def @func_3948(%var_3946: Tensor[(4, 5, 8), uint8], %var_3947: Tensor[(4, 5, 8), uint8]) -> (Tensor[(4, 5, 8), uint8], Tensor[(4, 5, 8), float64], Tensor[(3, 9, 14), bool], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
  @func_3944(%var_3946, %var_3947) /* ty=(Tensor[(4, 5, 8), uint8], Tensor[(4, 5, 8), float64], Tensor[(3, 9, 14), bool], Tensor[(13, 2), uint8], Tensor[(234), uint8]) */
}

def @func_4882() -> (Tensor[(3, 9, ?), uint32],) {
  @func_4880() /* ty=(Tensor[(3, 9, ?), uint32],) */
}

def @func_2712(%var_2691: Tensor[(100), float64], %var_2695: Tensor[(39, 6), uint8]) -> (Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) {
  %496 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %497 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 64), float64] */, dtype="float64") /* ty=Tensor[(2, 64), float64] */;
  %498 = cast(%var_2691, dtype="float64") /* ty=Tensor[(100), float64] */;
  %499 = reshape(%497, newshape=[4, 16, 2]) /* ty=Tensor[(4, 16, 2), float64] */;
  %500 = reshape(%498, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %501 = @func_1295(%499, %500) /* ty=(Tensor[(4, 16, 2), float64], Tensor[(1960), uint8], Tensor[(100), float64], Tensor[(10, 196), uint8]) */;
  %502 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2), uint8] */;
  %503 = cast(%var_2695, dtype="uint8") /* ty=Tensor[(39, 6), uint8] */;
  %504 = reshape(%502, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
  %505 = reshape(%503, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
  %506 = @func_2066(%504, %505) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
  %507 = %496.0;
  %508 = %501.0;
  %509 = %506.1;
  (%507, %508, meta[relay.Constant][36] /* ty=Tensor[(2, 64), float64] */, %var_2691, %509, meta[relay.Constant][37] /* ty=Tensor[(13, 2), uint8] */, %var_2695)
}

def @func_5772(%var_5739: Tensor[(3, 9, 6), float32], %var_5748: Tensor[(910), float64], %var_5752: Tensor[(100), float64]) -> (Tensor[(3, 9, 6), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(910), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(3, 9, 234), uint16]) {
  %510 = @func_3565() /* ty=(Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
  %513 = cast(%var_5739, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %514 = cast(0.361342f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %515 = cast(%var_5748, dtype="float64") /* ty=Tensor[(910), float64] */;
  %516 = reshape(%514, newshape=[]) /* ty=float64 */;
  %517 = reshape(%515, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %518 = @func_3227(%516, %517) /* ty=(Tensor[(10, 7, 13), float64],) */;
  %519 = cast(%var_5752, dtype="float64") /* ty=Tensor[(100), float64] */;
  %520 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), uint8] */, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %521 = reshape(%519, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %522 = reshape(%520, newshape=[39, 6]) /* ty=Tensor[(39, 6), uint8] */;
  %523 = @func_2712(%521, %522) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) */;
  %524 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), uint8] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %525 = cast(%511, dtype="uint16") /* ty=Tensor[(3, 9, 1), uint16] */;
  %526 = power(%512, %513) /* ty=Tensor[(3, 9, 6), float32] */;
  %527 = %518.0;
  %528 = %523.2;
  %529 = left_shift(%524, %525) /* ty=Tensor[(3, 9, 234), uint16] */;
  (%526, %527, 0.361342f64 /* ty=float64 */, %var_5748, %528, %var_5752, %529)
}

def @func_662(%var_660: Tensor[(5, 2, 10), float64], %var_661: Tensor[(1960), uint8]) -> (Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) {
  @func_658(%var_660, %var_661) /* ty=(Tensor[(5, 2, 10), int64], Tensor[(14, 10, 14), uint8], Tensor[(1960), uint8]) */
}

def @func_3494() -> (Tensor[(3, 9, 1), float32],) {
  %530 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
  (%530,)
}

def @func_3264() -> (Tensor[(3, 9, 1), float64],) {
  %531 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
  %534 = sin(%533) /* ty=Tensor[(3, 9, 1), float64] */;
  (%534,)
}

def @func_1146(%var_1144: Tensor[(1, 96), float32], %var_1145: Tensor[(1, 490), float32]) -> (Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) {
  %548 = fn (%var_1139: Tensor[(1, 96), float32], %var_1140: Tensor[(1, 490), float32]) -> (Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) {
    %535 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
    %536 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(4, 5, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %539 = cast(%var_1139, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
    %540 = cast(%var_1139, dtype="uint64") /* ty=Tensor[(1, 96), uint64] */;
    %541 = cast(%var_1140, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
    %542 = reshape(%539, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
    %543 = reshape(%540, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
    %544 = reshape(%541, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %545 = @func_764(%542, %543, %544) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
    %546 = divide(%537, %538) /* ty=Tensor[(4, 5, 15), float32] */;
    %547 = %545.0;
    (%546, %547, %var_1139, %var_1140)
  };
  %548(%var_1144, %var_1145) /* ty=(Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) */
}

def @func_5115(%var_5112: Tensor[(31360), float64], %var_5113: Tensor[(3, 9, 4), float32], %var_5114: Tensor[(720), float64]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 30), float64], Tensor[(490), float32], Tensor[(3, 9, 16), uint8], Tensor[(432), float32], Tensor[(768), float64], Tensor[(31360), float64], Tensor[(3, 9, 96), bool], Tensor[(3, 9, 4), bool], Tensor[(1960, 16), float64], Tensor[(3, 9, 1), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  @func_5110(%var_5112, %var_5113, %var_5114) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 30), float64], Tensor[(490), float32], Tensor[(3, 9, 16), uint8], Tensor[(432), float32], Tensor[(768), float64], Tensor[(31360), float64], Tensor[(3, 9, 96), bool], Tensor[(3, 9, 4), bool], Tensor[(1960, 16), float64], Tensor[(3, 9, 1), float32], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */
}

def @func_2066(%var_2036: Tensor[(13, 2, 1), uint8], %var_2037: Tensor[(13, 2, 9), uint8]) -> (Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) {
  %549 = cast(%var_2036, dtype="uint8") /* ty=Tensor[(13, 2, 1), uint8] */;
  %550 = cast(%var_2037, dtype="uint8") /* ty=Tensor[(13, 2, 9), uint8] */;
  %551 = cast(%var_2036, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %552 = erf(%551) /* ty=Tensor[(13, 2, 1), float64] */;
  %553 = cast(%552, dtype="uint64") /* ty=Tensor[(13, 2, 1), uint64] */;
  %554 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %555 = minimum(%553, %554) /* ty=Tensor[(13, 2, 9), uint64] */;
  %556 = cast(%var_2037, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
  %557 = cast(%var_2036, dtype="bool") /* ty=Tensor[(13, 2, 1), bool] */;
  %558 = logical_and(%556, %557) /* ty=Tensor[(13, 2, 9), bool] */;
  %559 = cast(%558, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %560 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%555, dtype="uint64") /* ty=Tensor[(13, 2, 9), uint64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %563 = maximum(%549, %550) /* ty=Tensor[(13, 2, 9), uint8] */;
  %564 = bitwise_or(%561, %562) /* ty=Tensor[(13, 2, 9), uint64] */;
  (%563, %564)
}

def @func_2787(%var_2782: Tensor[(90), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) {
  %565 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %566 = cast(%var_2782, dtype="float64") /* ty=Tensor[(90), float64] */;
  %567 = cast(meta[relay.Constant][41] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %568 = reshape(%566, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float64] */;
  %569 = reshape(%567, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %570 = @func_2505(%568, %569) /* ty=(Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */;
  %571 = %565.0;
  %572 = %570.0;
  (%571, %572, %var_2782, meta[relay.Constant][41] /* ty=Tensor[(490), float32] */)
}

def @func_1493(%var_1492: Tensor[(6, 12, 7), float64]) -> Tensor[(6, 12, 7), float64] {
  %576 = fn (%var_1483: Tensor[(6, 12, 7), float64]) -> Tensor[(6, 12, 7), float64] {
    %573 = cast(%var_1483, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %574 = acosh(%573) /* ty=Tensor[(6, 12, 7), float64] */;
    %575 = cast(%574, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    erf(%575) /* ty=Tensor[(6, 12, 7), float64] */
  };
  %576(%var_1492) /* ty=Tensor[(6, 12, 7), float64] */
}

def @func_2315(%var_2313: Tensor[(16, 16, 13), float64], %var_2314: Tensor[(16, 16, 13), float64]) -> (Tensor[(16, 16, 13), float64],) {
  %582 = fn (%var_2299: Tensor[(16, 16, 13), float64], %var_2300: Tensor[(16, 16, 13), float64]) -> (Tensor[(16, 16, 13), float64],) {
    %577 = cast(%var_2300, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
    %578 = shape_of(%var_2299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%var_2299, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %581 = power(%579, %580) /* ty=Tensor[(16, 16, 13), float64] */;
    (%581,)
  };
  %582(%var_2313, %var_2314) /* ty=(Tensor[(16, 16, 13), float64],) */
}

def @func_5046(%var_5025: Tensor[(8, 4, 15), float64]) -> (Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %583 = cast(%var_5025, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %584 = asinh(%583) /* ty=Tensor[(8, 4, 15), float64] */;
  %585 = cast(%584, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %586 = shape_of(%var_5025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_5025, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %590 = greater(%587, %588) /* ty=Tensor[(8, 4, 15), bool] */;
  %591 = %589.0;
  %592 = @func_2794() /* ty=Tensor[(3, 9, 1), float32] */;
  (%590, %591, %592)
}

def @func_5049(%var_5047: Tensor[(8, 4, 15), float64]) -> (Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  @func_5046(%var_5047) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */
}

def @func_4858() -> Tensor[(3, 9, 1), float32] {
  %593 = fn () -> Tensor[(3, 9, 1), float32] {
    @func_3034() /* ty=Tensor[(3, 9, 1), float32] */
  };
  %593() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_2509(%var_2507: Tensor[(1, 15, 6), float64], %var_2508: Tensor[(490), float32]) -> (Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  @func_2505(%var_2507, %var_2508) /* ty=(Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) */
}

def @func_2070(%var_2068: Tensor[(13, 2, 1), uint8], %var_2069: Tensor[(13, 2, 9), uint8]) -> (Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) {
  @func_2066(%var_2068, %var_2069) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */
}

def @func_1698(%var_1696: Tensor[(12, 5, 15), int32], %var_1697: Tensor[(96, 1), float32]) -> (Tensor[(12, 5, 15), bool], Tensor[(14, 10, 14), uint8], Tensor[(96, 1), float32], Tensor[(245, 2), float32], Tensor[(12, 5, 15), float32]) {
  %614 = fn (%var_1666: Tensor[(12, 5, 15), int32], %var_1683: Tensor[(96, 1), float32]) -> (Tensor[(12, 5, 15), bool], Tensor[(14, 10, 14), uint8], Tensor[(96, 1), float32], Tensor[(245, 2), float32], Tensor[(12, 5, 15), float32]) {
    %594 = cast(%var_1666, dtype="int32") /* ty=Tensor[(12, 5, 15), int32] */;
    %595 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(12, 5, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %596 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 5, 15), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 15), int32] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %598 = maximum(%596, %597) /* ty=Tensor[(12, 5, 15), int32] */;
    %599 = cast(%598, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %600 = shape_of(%var_1666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%var_1666, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %603 = cast(%var_1683, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
    %604 = cast(%var_1683, dtype="uint64") /* ty=Tensor[(96, 1), uint64] */;
    %605 = cast(meta[relay.Constant][43] /* ty=Tensor[(245, 2), float32] */, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
    %606 = reshape(%603, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
    %607 = reshape(%604, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
    %608 = reshape(%605, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %609 = @func_764(%606, %607, %608) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
    %610 = cast(%var_1666, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    %611 = greater_equal(%601, %602) /* ty=Tensor[(12, 5, 15), bool] */;
    %612 = %609.2;
    %613 = acosh(%610) /* ty=Tensor[(12, 5, 15), float32] */;
    (%611, %612, %var_1683, meta[relay.Constant][43] /* ty=Tensor[(245, 2), float32] */, %613)
  };
  %614(%var_1696, %var_1697) /* ty=(Tensor[(12, 5, 15), bool], Tensor[(14, 10, 14), uint8], Tensor[(96, 1), float32], Tensor[(245, 2), float32], Tensor[(12, 5, 15), float32]) */
}

def @func_3591(%var_3590: Tensor[(234), uint8]) -> (Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
  %623 = fn (%var_3585: Tensor[(234), uint8]) -> (Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
    %615 = @func_3187() /* ty=(Tensor[(3, 9, 14), bool], Tensor[(216), float32], Tensor[(3, 9, 8), float32]) */;
    %616 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2), uint8] */;
    %617 = cast(%var_3585, dtype="uint8") /* ty=Tensor[(234), uint8] */;
    %618 = reshape(%616, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), uint8] */;
    %619 = reshape(%617, newshape=[13, 2, 9]) /* ty=Tensor[(13, 2, 9), uint8] */;
    %620 = @func_2066(%618, %619) /* ty=(Tensor[(13, 2, 9), uint8], Tensor[(13, 2, 9), uint64]) */;
    %621 = %615.2;
    %622 = %620.0;
    (%621, %622, meta[relay.Constant][44] /* ty=Tensor[(13, 2), uint8] */, %var_3585)
  };
  %623(%var_3590) /* ty=(Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) */
}

def @func_3284() -> Tensor[(3, 9, 1), float32] {
  @func_3034() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_4005() -> (Tensor[(3, 9, 1), float32],) {
  %624 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %625 = %624.0;
  (%625,)
}

def @func_2981() -> (Tensor[(3, 9, 1), float32],) {
  %628 = fn () -> (Tensor[(3, 9, 1), float32],) {
    %626 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %627 = %626.0;
    (%627,)
  };
  %628() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_5284(%var_5282: Tensor[(8, 4, 1), float64], %var_5283: Tensor[(208), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(5, 2, 10), int64], Tensor[(100), float64], Tensor[(1960), uint8], Tensor[(3, 9, 1), float32], Tensor[(480), float64], Tensor[(8, 4, 1), float64], Tensor[(16, 13, 1), float64], Tensor[(208), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(3, 9, ?), float64]) {
  @func_5280(%var_5282, %var_5283) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(5, 2, 10), int64], Tensor[(100), float64], Tensor[(1960), uint8], Tensor[(3, 9, 1), float32], Tensor[(480), float64], Tensor[(8, 4, 1), float64], Tensor[(16, 13, 1), float64], Tensor[(208), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(3, 9, ?), float64]) */
}

def @func_605(%var_604: Tensor[(8, 8, 12), float64]) -> Tensor[(8, 8, 12), float32] {
  %632 = fn (%var_576: Tensor[(8, 8, 12), float64]) -> Tensor[(8, 8, 12), float32] {
    %629 = cast(%var_576, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
    %630 = atanh(%629) /* ty=Tensor[(8, 8, 12), float64] */;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(8, 8, 12), float32] */;
    sqrt(%631) /* ty=Tensor[(8, 8, 12), float32] */
  };
  %632(%var_604) /* ty=Tensor[(8, 8, 12), float32] */
}

def @func_5216() -> (Tensor[(3, 9, ?), float32],) {
  @func_5214() /* ty=(Tensor[(3, 9, ?), float32],) */
}

def @func_3534() -> Tensor[(3, 9, ?), uint32] {
  %641 = fn () -> Tensor[(3, 9, ?), uint32] {
    %633 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %634 = %633.0;
    %635 = cast(%634, dtype="float64") /* ty=Tensor[(3, 9, 1), float64] */;
    %636 = acos(%635) /* ty=Tensor[(3, 9, 1), float64] */;
    %637 = cast(%634, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%636, dtype="uint32") /* ty=Tensor[(3, 9, 1), uint32] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%639, %640) /* ty=Tensor[(3, 9, ?), uint32] */
  };
  %641() /* ty=Tensor[(3, 9, ?), uint32] */
}

def @func_2280(%var_2277: Tensor[(16, 3, 6), float64], %var_2278: Tensor[(16, 3, 6), float64], %var_2279: Tensor[(770), float64]) -> (Tensor[(5, 11, 14), int16], Tensor[(770), float64], Tensor[(16, 3, 6), float64]) {
  @func_2275(%var_2277, %var_2278, %var_2279) /* ty=(Tensor[(5, 11, 14), int16], Tensor[(770), float64], Tensor[(16, 3, 6), float64]) */
}

def @func_2790(%var_2788: Tensor[(90), float64]) -> (Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) {
  @func_2787(%var_2788) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(16, 15, 6), float64], Tensor[(90), float64], Tensor[(490), float32]) */
}

def @func_4566(%var_4563: Tensor[(8, 7, 10), float32], %var_4564: Tensor[(96), float32], %var_4565: Tensor[(7, 70), float32]) -> (Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) {
  %655 = fn (%var_4545: Tensor[(8, 7, 10), float32], %var_4558: Tensor[(96), float32], %var_4559: Tensor[(7, 70), float32]) -> (Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) {
    %642 = cast(%var_4545, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
    %643 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(8, 7, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %646 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 104), float64] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
    %647 = cast(%var_4558, dtype="float32") /* ty=Tensor[(96), float32] */;
    %648 = cast(%var_4559, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %649 = reshape(%646, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
    %650 = reshape(%647, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %651 = reshape(%648, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
    %652 = @func_1797(%649, %650, %651) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
    %653 = divide(%644, %645) /* ty=Tensor[(8, 7, 10), float32] */;
    %654 = %652.3;
    (%653, %654, meta[relay.Constant][46] /* ty=Tensor[(2, 104), float64] */, %var_4558, %var_4559)
  };
  %655(%var_4563, %var_4564, %var_4565) /* ty=(Tensor[(8, 7, 10), float32], Tensor[(245, 2), float64], Tensor[(2, 104), float64], Tensor[(96), float32], Tensor[(7, 70), float32]) */
}

def @func_4240() -> (Tensor[(3, 9, 1), float32],) {
  @func_4238() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_1797(%var_1773: Tensor[(16, 13, 1), float64], %var_1777: Tensor[(96), float32], %var_1778: Tensor[(245, 2), float32]) -> (Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) {
  %656 = cast(%var_1773, dtype="float64") /* ty=Tensor[(16, 13, 1), float64] */;
  %657 = cast(%var_1777, dtype="float32") /* ty=Tensor[(96), float32] */;
  %658 = cast(%var_1777, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %659 = cast(%var_1778, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %660 = reshape(%657, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %661 = reshape(%658, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %662 = reshape(%659, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %663 = @func_764(%660, %661, %662) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %664 = cast(%var_1778, dtype="float64") /* ty=Tensor[(245, 2), float64] */;
  %665 = cos(%656) /* ty=Tensor[(16, 13, 1), float64] */;
  %666 = %663.0;
  %667 = acos(%664) /* ty=Tensor[(245, 2), float64] */;
  (%665, %666, %var_1777, %667)
}

def @func_4810(%var_4808: Tensor[(3, 15, 14), int32], %var_4809: Tensor[(3, 15, 14), int32]) -> Tensor[(3, 15, 14), int32] {
  @func_4806(%var_4808, %var_4809) /* ty=Tensor[(3, 15, 14), int32] */
}

def @func_2505(%var_2433: Tensor[(1, 15, 6), float64], %var_2469: Tensor[(490), float32]) -> (Tensor[(16, 15, 6), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(490), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 16, 15), float64], Tensor[(720), float64]) {
  %668 = cast(%var_2433, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %669 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 6), float64] */;
  %670 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %671 = cast(%var_2469, dtype="float32") /* ty=Tensor[(490), float32] */;
  %672 = reshape(%670, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %673 = reshape(%671, newshape=[1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %674 = @func_1143(%672, %673) /* ty=(Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) */;
  %675 = cast(%var_2433, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %676 = acosh(%675) /* ty=Tensor[(1, 15, 6), float32] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %678 = cast(meta[relay.Constant][49] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %679 = reshape(%678, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %680 = @func_1762(%679) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %681 = floor_mod(%668, %669) /* ty=Tensor[(16, 15, 6), float64] */;
  %682 = %674.1;
  %683 = log(%677) /* ty=Tensor[(1, 15, 6), float64] */;
  %684 = %680.0;
  (%681, %682, meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, %var_2469, %683, %684, meta[relay.Constant][49] /* ty=Tensor[(720), float64] */)
}

def @func_3769() -> (Tensor[(3, 9, 1), float32],) {
  @func_3767() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_5552() -> (Tensor[(3, 9, 1), float32],) {
  %689 = fn () -> (Tensor[(3, 9, 1), float32],) {
    %685 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %686 = %685.0;
    %687 = cast(%686, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
    %688 = rsqrt(%687) /* ty=Tensor[(3, 9, 1), float32] */;
    (%688,)
  };
  %689() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_4962(%var_4960: Tensor[(3, 9, 14), float32], %var_4961: Tensor[(104, 2), float64]) -> (Tensor[(3, 9, 14), int32], Tensor[(3, 9, 1), float64], Tensor[(96), float32], Tensor[(104, 2), float64], Tensor[(96), float32], Tensor[(490), float32]) {
  %704 = fn (%var_4939: Tensor[(3, 9, 14), float32], %var_4953: Tensor[(104, 2), float64]) -> (Tensor[(3, 9, 14), int32], Tensor[(3, 9, 1), float64], Tensor[(96), float32], Tensor[(104, 2), float64], Tensor[(96), float32], Tensor[(490), float32]) {
    %690 = @func_2583() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %691 = %690.0;
    %692 = cast(%691, dtype="int32") /* ty=Tensor[(3, 9, 1), int32] */;
    %693 = cast(%var_4939, dtype="int32") /* ty=Tensor[(3, 9, 14), int32] */;
    %694 = cast(%var_4953, dtype="float64") /* ty=Tensor[(104, 2), float64] */;
    %695 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %696 = cast(meta[relay.Constant][51] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %697 = reshape(%694, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float64] */;
    %698 = reshape(%695, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %699 = reshape(%696, newshape=[245, 2]) /* ty=Tensor[(245, 2), float32] */;
    %700 = @func_1797(%697, %698, %699) /* ty=(Tensor[(16, 13, 1), float64], Tensor[(2, 12, 4), float64], Tensor[(96), float32], Tensor[(245, 2), float64]) */;
    %701 = logical_xor(%692, %693) /* ty=Tensor[(3, 9, 14), int32] */;
    %702 = @func_4853() /* ty=Tensor[(3, 9, 1), float64] */;
    %703 = %700.2;
    (%701, %702, %703, %var_4953, meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, meta[relay.Constant][51] /* ty=Tensor[(490), float32] */)
  };
  %704(%var_4960, %var_4961) /* ty=(Tensor[(3, 9, 14), int32], Tensor[(3, 9, 1), float64], Tensor[(96), float32], Tensor[(104, 2), float64], Tensor[(96), float32], Tensor[(490), float32]) */
}

def @func_4738(%var_4736: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), uint8], Tensor[(3, 9, 1), float32]) {
  @func_4735(%var_4736) /* ty=(Tensor[(3, 9, 4), uint8], Tensor[(3, 9, 1), float32]) */
}

def @func_2716(%var_2714: Tensor[(100), float64], %var_2715: Tensor[(39, 6), uint8]) -> (Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) {
  @func_2712(%var_2714, %var_2715) /* ty=(Tensor[(3, 9, 1), float32], Tensor[(4, 16, 2), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(13, 2, 9), uint64], Tensor[(13, 2), uint8], Tensor[(39, 6), uint8]) */
}

def @func_5777(%var_5774: Tensor[(3, 9, 6), float32], %var_5775: Tensor[(910), float64], %var_5776: Tensor[(100), float64]) -> (Tensor[(3, 9, 6), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(910), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(3, 9, 234), uint16]) {
  @func_5772(%var_5774, %var_5775, %var_5776) /* ty=(Tensor[(3, 9, 6), float32], Tensor[(10, 7, 13), float64], float64, Tensor[(910), float64], Tensor[(2, 64), float64], Tensor[(100), float64], Tensor[(3, 9, 234), uint16]) */
}

def @func_3299(%var_3298: Tensor[(12, 3, 7), int8]) -> Tensor[(12, 3, 7), bool] {
  %709 = fn (%var_3292: Tensor[(12, 3, 7), int8]) -> Tensor[(12, 3, 7), bool] {
    %705 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 3, 7), int8] */, dtype="bool") /* ty=Tensor[(12, 3, 7), bool] */;
    %706 = shape_of(%var_3292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%var_3292, dtype="bool") /* ty=Tensor[(12, 3, 7), bool] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%707, %708) /* ty=Tensor[(12, 3, 7), bool] */
  };
  %709(%var_3298) /* ty=Tensor[(12, 3, 7), bool] */
}

def @func_3449(%var_3445: Tensor[(768), float64], %var_3446: Tensor[(2, 48), float32], %var_3447: Tensor[(490), float32], %var_3448: Tensor[(1960, 16), float64]) -> (Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) {
  @func_3443(%var_3445, %var_3446, %var_3447, %var_3448) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) */
}

def @func_2584() -> (Tensor[(3, 9, 1), float32],) {
  %712 = fn () -> (Tensor[(3, 9, 1), float32],) {
    %710 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 1), float32] */;
    %711 = acosh(%710) /* ty=Tensor[(3, 9, 1), float32] */;
    (%711,)
  };
  %712() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_5444() -> (Tensor[(3, 9, 1), float32],) {
  %714 = fn () -> (Tensor[(3, 9, 1), float32],) {
    %713 = @func_2874() /* ty=Tensor[(3, 9, 1), float32] */;
    (%713,)
  };
  %714() /* ty=(Tensor[(3, 9, 1), float32],) */
}

def @func_4343(%var_4338: Tensor[(4, 8, 3), int16], %var_4339: Tensor[(208), float64], %var_4340: Tensor[(490), float32], %var_4341: Tensor[(234), uint8], %var_4342: Tensor[(490), float32]) -> (Tensor[(4, 8, 3), int16], Tensor[(4, 8, 3), int16], Tensor[(96), float32], Tensor[(208), float64], Tensor[(13, 2, 9), uint8], Tensor[(26), uint8], Tensor[(234), uint8], Tensor[(490), float64]) {
  @func_4336(%var_4338, %var_4339, %var_4340, %var_4341, %var_4342) /* ty=(Tensor[(4, 8, 3), int16], Tensor[(4, 8, 3), int16], Tensor[(96), float32], Tensor[(208), float64], Tensor[(13, 2, 9), uint8], Tensor[(26), uint8], Tensor[(234), uint8], Tensor[(490), float64]) */
}

def @func_2907() -> Tensor[(3, 9, 14), bool] {
  @func_2905() /* ty=Tensor[(3, 9, 14), bool] */
}

def @func_3035() -> Tensor[(3, 9, 1), float32] {
  %716 = fn () -> Tensor[(3, 9, 1), float32] {
    %715 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %715.0
  };
  %716() /* ty=Tensor[(3, 9, 1), float32] */
}

def @func_3231(%var_3229: float64, %var_3230: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64],) {
  @func_3227(%var_3229, %var_3230) /* ty=(Tensor[(10, 7, 13), float64],) */
}

def @func_3944(%var_3894: Tensor[(4, 5, 8), uint8], %var_3895: Tensor[(4, 5, 8), uint8]) -> (Tensor[(4, 5, 8), uint8], Tensor[(4, 5, 8), float64], Tensor[(3, 9, 14), bool], Tensor[(13, 2), uint8], Tensor[(234), uint8]) {
  %717 = cast(%var_3895, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
  %718 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%var_3894, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %721 = cast(%var_3894, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %722 = cast(meta[relay.Constant][54] /* ty=Tensor[(234), uint8] */, dtype="uint8") /* ty=Tensor[(234), uint8] */;
  %723 = reshape(%722, newshape=[234]) /* ty=Tensor[(234), uint8] */;
  %724 = @func_3589(%723) /* ty=(Tensor[(3, 9, 8), float32], Tensor[(13, 2, 9), uint8], Tensor[(13, 2), uint8], Tensor[(234), uint8]) */;
  %725 = maximum(%719, %720) /* ty=Tensor[(4, 5, 8), uint8] */;
  %726 = sin(%721) /* ty=Tensor[(4, 5, 8), float64] */;
  %727 = @func_2905() /* ty=Tensor[(3, 9, 14), bool] */;
  %728 = %724.2;
  (%725, %726, %727, %728, meta[relay.Constant][54] /* ty=Tensor[(234), uint8] */)
}

def @func_4122(%var_4120: Tensor[(3, 9, 16), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) {
  @func_4119(%var_4120) /* ty=(Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) */
}

def @func_4974() -> (Tensor[(3, 9, 1), float32],) {
  %729 = @func_3284() /* ty=Tensor[(3, 9, 1), float32] */;
  (%729,)
}

def @func_5349() -> (Tensor[(9, 7, 13), bool],) {
  %735 = fn () -> (Tensor[(9, 7, 13), bool],) {
    %730 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
    %731 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(9, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %734 = greater(%732, %733) /* ty=Tensor[(9, 7, 13), bool] */;
    (%734,)
  };
  %735() /* ty=(Tensor[(9, 7, 13), bool],) */
}

def @func_4119(%var_4105: Tensor[(3, 9, 16), float32]) -> (Tensor[(14, 10, 14), uint8], Tensor[(10, 196), uint8], Tensor[(3, 9, 16), uint8]) {
  %736 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
  %737 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 196), uint8] */, dtype="uint8") /* ty=Tensor[(10, 196), uint8] */;
  %738 = reshape(%736, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %739 = reshape(%737, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %740 = @func_125(%738, %739) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %741 = @func_3494() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="uint8") /* ty=Tensor[(3, 9, 1), uint8] */;
  %744 = cast(%var_4105, dtype="uint8") /* ty=Tensor[(3, 9, 16), uint8] */;
  %745 = %740.0;
  %746 = bitwise_xor(%743, %744) /* ty=Tensor[(3, 9, 16), uint8] */;
  (%745, meta[relay.Constant][57] /* ty=Tensor[(10, 196), uint8] */, %746)
}

def @func_2874() -> Tensor[(3, 9, 1), float32] {
  %747 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %747.0
}

def @func_3443(%var_3377: Tensor[(768), float64], %var_3392: Tensor[(2, 48), float32], %var_3393: Tensor[(490), float32], %var_3404: Tensor[(1960, 16), float64]) -> (Tensor[(3, 16, 15), float64], Tensor[(3, 9, ?), bool], Tensor[(14, 10, 14), uint8], Tensor[(8, 8, 12), float32], Tensor[(768), float64], Tensor[(2, 12, 4), float64], Tensor[(2, 48), float32], Tensor[(490), float32], Tensor[(2, 12, 4), float64], Tensor[(3, 9, 1), float64], Tensor[(1960, 16), bool], Tensor[(1960, 720), int32], Tensor[(1960, 720), float32], Tensor[(1960, 720), float64]) {
  %748 = cast(meta[relay.Constant][58] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %749 = reshape(%748, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %750 = @func_1762(%749) /* ty=(Tensor[(3, 16, 15), float64],) */;
  %751 = @func_2980() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %752 = %751.0;
  %753 = @func_2665() /* ty=(Tensor[(3, 9, 1), float32],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %756 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%752, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = cast(meta[relay.Constant][59] /* ty=Tensor[(1960, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1960, 1), uint8] */;
  %760 = cast(meta[relay.Constant][59] /* ty=Tensor[(1960, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1960, 1), uint8] */;
  %761 = reshape(%759, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %762 = reshape(%760, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), uint8] */;
  %763 = @func_125(%761, %762) /* ty=(Tensor[(14, 10, 14), uint8],) */;
  %764 = cast(%var_3377, dtype="float64") /* ty=Tensor[(768), float64] */;
  %765 = reshape(%764, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %766 = cast(%var_3392, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %767 = cast(%var_3392, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %768 = cast(%var_3393, dtype="float32") /* ty=Tensor[(490), float32] */;
  %769 = reshape(%766, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), float32] */;
  %770 = reshape(%767, newshape=[2, 12, 4]) /* ty=Tensor[(2, 12, 4), uint64] */;
  %771 = reshape(%768, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %772 = @func_764(%769, %770, %771) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(2, 12, 4), float64], Tensor[(14, 10, 14), uint8], Tensor[(490), float32]) */;
  %773 = %772.1;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %775 = cast(%var_3393, dtype="float32") /* ty=Tensor[(490), float32] */;
  %776 = reshape(%774, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %777 = reshape(%775, newshape=[1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %778 = @func_1143(%776, %777) /* ty=(Tensor[(4, 5, 15), float32], Tensor[(2, 12, 4), float64], Tensor[(1, 96), float32], Tensor[(1, 490), float32]) */;
  %779 = @func_3264() /* ty=(Tensor[(3, 9, 1), float64],) */;
  %780 = cast(meta[relay.Constant][59] /* ty=Tensor[(1960, 1), uint8] */, dtype="float64") /* ty=Tensor[(1960, 1), float64] */;
  %781 = sinh(%780) /* ty=Tensor[(1960, 1), float64] */;
  %782 = cast(%781, dtype="bool") /* ty=Tensor[(1960, 1), bool] */;
  %783 = cast(%var_3404, dtype="bool") /* ty=Tensor[(1960, 16), bool] */;
  %784 = cast(meta[relay.Constant][59] /* ty=Tensor[(1960, 1), uint8] */, dtype="int32") /* ty=Tensor[(1960, 1), int32] */;
  %785 = cast(meta[relay.Constant][58] /* ty=Tensor[(720), float64] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %786 = cast(%781, dtype="int8") /* ty=Tensor[(1960, 1), int8] */;
  %787 = cast(meta[relay.Constant][58] /* ty=Tensor[(720), float64] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %788 = multiply(%786, %787) /* ty=Tensor[(1960, 720), int8] */;
  %789 = cast(%788, dtype="float32") /* ty=Tensor[(1960, 720), float32] */;
  %790 = cast(%788, dtype="float32") /* ty=Tensor[(1960, 720), float32] */;
  %791 = sinh(%790) /* ty=Tensor[(1960, 720), float32] */;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(1960, 720), float64] */;
  %793 = %750.0;
  %794 = logical_and(%757, %758) /* ty=Tensor[(3, 9, ?), bool] */;
  %795 = %763.0;
  %796 = @func_603(%765) /* ty=Tensor[(8, 8, 12), float32] */;
  %797 = %778.1;
  %798 = %779.0;
  %799 = logical_or(%782, %783) /* ty=Tensor[(1960, 16), bool] */;
  %800 = bitwise_xor(%784, %785) /* ty=Tensor[(1960, 720), int32] */;
  %801 = tan(%789) /* ty=Tensor[(1960, 720), float32] */;
  %802 = rsqrt(%792) /* ty=Tensor[(1960, 720), float64] */;
  (%793, %794, %795, %796, %var_3377, %773, %var_3392, %var_3393, %797, %798, %799, %800, %801, %802)
}

def @func_5673() -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
  %806 = fn () -> (Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) {
    %803 = @func_4238() /* ty=(Tensor[(3, 9, 1), float32],) */;
    %804 = %803.0;
    %805 = @func_2874() /* ty=Tensor[(3, 9, 1), float32] */;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(3, 9, 1), float32], Tensor[(3, 9, 1), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen142/build/output.py:1724: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen142/build/output.py", line 1729, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(216) tvmgen_default_fused_acosh_kernel0(float* __restrict__ T_acosh, float* __restrict__ placeholder) {
  T_acosh[(((int)threadIdx.x))] = acoshf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

