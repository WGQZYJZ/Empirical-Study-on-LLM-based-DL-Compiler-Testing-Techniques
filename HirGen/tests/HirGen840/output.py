import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_405 = relay.const([[[2.033888],[-6.429691],[-7.494084],[-0.966769],[8.192119],[8.363666],[6.130712],[-5.808854],[9.923530],[-6.183577],[4.943489],[2.945179],[1.085202]],[[2.592627],[-4.204884],[9.795158],[-9.544226],[-3.592984],[3.714941],[-7.936189],[9.129127],[6.394264],[-9.494742],[0.862096],[7.709490],[3.181670]],[[0.039565],[-0.222782],[5.413175],[0.787973],[-8.069798],[-9.969285],[-7.804707],[-3.757258],[6.316771],[-5.567053],[-6.297297],[9.531775],[-2.673529]],[[-2.572731],[-8.750050],[-1.529379],[-6.491133],[-2.963047],[-2.945675],[9.352495],[0.272705],[3.383164],[-0.497596],[4.608200],[-3.150755],[9.317919]],[[3.761005],[7.594822],[5.270867],[5.609447],[-9.632193],[1.959306],[-5.676371],[-4.991578],[2.324992],[-9.584423],[8.234193],[1.483509],[6.658897]],[[5.116901],[-9.423675],[-1.092747],[8.685663],[3.349809],[0.201197],[-9.250413],[-1.678807],[-6.130279],[-8.026730],[8.427866],[-3.240034],[-0.432569]],[[-0.160200],[-6.737736],[-2.541533],[4.149394],[-8.244152],[-1.939097],[-3.553746],[-3.852709],[-3.304163],[2.166230],[1.539476],[-5.271796],[-8.908099]],[[5.682933],[1.926716],[8.863845],[1.985468],[4.744266],[2.591476],[9.047404],[-6.730237],[-9.240193],[1.591573],[-8.197283],[9.537813],[5.879623]],[[3.739988],[-3.762321],[3.856978],[-4.121488],[4.310529],[-7.230020],[9.641738],[-3.383244],[4.638463],[-7.084860],[0.432288],[-0.694892],[-1.033585]],[[8.750093],[-6.338539],[-3.878257],[-3.869788],[6.472955],[-8.210824],[-9.342250],[8.493405],[1.840120],[-1.569658],[-3.375367],[8.834227],[6.141453]],[[1.064263],[5.631713],[-6.459976],[5.316779],[6.949562],[-8.681903],[8.087240],[-7.850828],[5.896117],[5.860871],[1.152052],[-7.157965],[6.938783]],[[1.994838],[2.784182],[0.565957],[-2.735962],[-2.909520],[1.353369],[0.857201],[4.659990],[-3.541502],[-2.094001],[9.387228],[0.931892],[-3.288100]],[[6.090860],[-4.215730],[7.291011],[2.519196],[-9.598269],[8.722746],[3.026675],[7.601306],[-6.214225],[-3.370384],[-6.247416],[-5.767540],[8.371432]]], dtype = "float32")#candidate|405|(13, 13, 1)|const|float32
uop_406 = relay.atanh(const_405.astype('float32')) # shape=(13, 13, 1)
bop_419 = relay.divide(uop_406.astype('float64'), relay.reshape(const_405.astype('float64'), relay.shape_of(uop_406))) # shape=(13, 13, 1)
bop_424 = relay.greater_equal(bop_419.astype('bool'), relay.reshape(const_405.astype('bool'), relay.shape_of(bop_419))) # shape=(13, 13, 1)
uop_454 = relay.erf(uop_406.astype('float64')) # shape=(13, 13, 1)
output = relay.Tuple([bop_424,uop_454,])
output2 = relay.Tuple([bop_424,uop_454,])
func_468 = relay.Function([], output)
mod['func_468'] = func_468
mod = relay.transform.InferType()(mod)
mutated_mod['func_468'] = func_468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mutated_mod.get_global_var('func_468')
call_469 = func_468_call()
output = call_469
func_470 = relay.Function([], output)
mutated_mod['func_470'] = func_470
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_499 = relay.TupleGetItem(func_468_call(), 1)
call_500 = relay.TupleGetItem(func_470_call(), 1)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_504 = relay.TupleGetItem(func_468_call(), 0)
call_505 = relay.TupleGetItem(func_470_call(), 0)
output = relay.Tuple([call_499,call_504,])
output2 = relay.Tuple([call_500,call_505,])
func_510 = relay.Function([], output)
mod['func_510'] = func_510
mod = relay.transform.InferType()(mod)
output = func_510()
func_511 = relay.Function([], output)
mutated_mod['func_511'] = func_511
mutated_mod = relay.transform.InferType()(mutated_mod)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_512 = relay.TupleGetItem(func_510_call(), 1)
call_513 = relay.TupleGetItem(func_511_call(), 1)
output = relay.Tuple([call_512,])
output2 = relay.Tuple([call_513,])
func_531 = relay.Function([], output)
mod['func_531'] = func_531
mod = relay.transform.InferType()(mod)
mutated_mod['func_531'] = func_531
mutated_mod = relay.transform.InferType()(mutated_mod)
func_531_call = mutated_mod.get_global_var('func_531')
call_532 = func_531_call()
output = call_532
func_533 = relay.Function([], output)
mutated_mod['func_533'] = func_533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_542 = relay.TupleGetItem(func_510_call(), 1)
call_543 = relay.TupleGetItem(func_511_call(), 1)
output = relay.Tuple([call_542,])
output2 = relay.Tuple([call_543,])
func_547 = relay.Function([], output)
mod['func_547'] = func_547
mod = relay.transform.InferType()(mod)
output = func_547()
func_548 = relay.Function([], output)
mutated_mod['func_548'] = func_548
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_574 = relay.TupleGetItem(func_547_call(), 0)
call_575 = relay.TupleGetItem(func_548_call(), 0)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_608 = relay.TupleGetItem(func_531_call(), 0)
call_609 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([call_574,call_608,])
output2 = relay.Tuple([call_575,call_609,])
func_610 = relay.Function([], output)
mod['func_610'] = func_610
mod = relay.transform.InferType()(mod)
output = func_610()
func_611 = relay.Function([], output)
mutated_mod['func_611'] = func_611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_715 = relay.TupleGetItem(func_468_call(), 1)
call_716 = relay.TupleGetItem(func_470_call(), 1)
output = relay.Tuple([call_715,])
output2 = relay.Tuple([call_716,])
func_725 = relay.Function([], output)
mod['func_725'] = func_725
mod = relay.transform.InferType()(mod)
mutated_mod['func_725'] = func_725
mutated_mod = relay.transform.InferType()(mutated_mod)
func_725_call = mutated_mod.get_global_var('func_725')
call_726 = func_725_call()
output = call_726
func_727 = relay.Function([], output)
mutated_mod['func_727'] = func_727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_758 = relay.TupleGetItem(func_610_call(), 0)
call_759 = relay.TupleGetItem(func_611_call(), 0)
uop_771 = relay.tan(call_758.astype('float32')) # shape=(13, 13, 1)
uop_773 = relay.tan(call_759.astype('float32')) # shape=(13, 13, 1)
output = relay.Tuple([uop_771,])
output2 = relay.Tuple([uop_773,])
func_780 = relay.Function([], output)
mod['func_780'] = func_780
mod = relay.transform.InferType()(mod)
mutated_mod['func_780'] = func_780
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mutated_mod.get_global_var('func_780')
call_781 = func_780_call()
output = call_781
func_782 = relay.Function([], output)
mutated_mod['func_782'] = func_782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_818 = relay.TupleGetItem(func_610_call(), 1)
call_819 = relay.TupleGetItem(func_611_call(), 1)
output = relay.Tuple([call_818,])
output2 = relay.Tuple([call_819,])
func_820 = relay.Function([], output)
mod['func_820'] = func_820
mod = relay.transform.InferType()(mod)
output = func_820()
func_821 = relay.Function([], output)
mutated_mod['func_821'] = func_821
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_832 = relay.TupleGetItem(func_547_call(), 0)
call_833 = relay.TupleGetItem(func_548_call(), 0)
var_842 = relay.var("var_842", dtype = "bool", shape = (13, 13, 1))#candidate|842|(13, 13, 1)|var|bool
bop_843 = relay.bitwise_or(call_832.astype('uint32'), relay.reshape(var_842.astype('uint32'), relay.shape_of(call_832))) # shape=(13, 13, 1)
bop_846 = relay.bitwise_or(call_833.astype('uint32'), relay.reshape(var_842.astype('uint32'), relay.shape_of(call_833))) # shape=(13, 13, 1)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_865 = relay.TupleGetItem(func_468_call(), 1)
call_866 = relay.TupleGetItem(func_470_call(), 1)
uop_867 = relay.sin(var_842.astype('float64')) # shape=(13, 13, 1)
func_725_call = mod.get_global_var('func_725')
func_727_call = mutated_mod.get_global_var('func_727')
call_869 = relay.TupleGetItem(func_725_call(), 0)
call_870 = relay.TupleGetItem(func_727_call(), 0)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_875 = relay.TupleGetItem(func_468_call(), 0)
call_876 = relay.TupleGetItem(func_470_call(), 0)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_902 = relay.TupleGetItem(func_547_call(), 0)
call_903 = relay.TupleGetItem(func_548_call(), 0)
output = relay.Tuple([bop_843,call_865,uop_867,call_869,call_875,call_902,])
output2 = relay.Tuple([bop_846,call_866,uop_867,call_870,call_876,call_903,])
func_904 = relay.Function([var_842,], output)
mod['func_904'] = func_904
mod = relay.transform.InferType()(mod)
var_905 = relay.var("var_905", dtype = "bool", shape = (13, 13, 1))#candidate|905|(13, 13, 1)|var|bool
output = func_904(var_905)
func_906 = relay.Function([var_905], output)
mutated_mod['func_906'] = func_906
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_932 = relay.TupleGetItem(func_468_call(), 0)
call_933 = relay.TupleGetItem(func_470_call(), 0)
uop_939 = relay.exp(call_932.astype('float32')) # shape=(13, 13, 1)
uop_941 = relay.exp(call_933.astype('float32')) # shape=(13, 13, 1)
uop_959 = relay.asinh(uop_939.astype('float32')) # shape=(13, 13, 1)
uop_961 = relay.asinh(uop_941.astype('float32')) # shape=(13, 13, 1)
var_962 = relay.var("var_962", dtype = "bool", shape = (13, 13, 1))#candidate|962|(13, 13, 1)|var|bool
bop_963 = relay.floor_mod(call_932.astype('float32'), relay.reshape(var_962.astype('float32'), relay.shape_of(call_932))) # shape=(13, 13, 1)
bop_966 = relay.floor_mod(call_933.astype('float32'), relay.reshape(var_962.astype('float32'), relay.shape_of(call_933))) # shape=(13, 13, 1)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_970 = relay.TupleGetItem(func_468_call(), 0)
call_971 = relay.TupleGetItem(func_470_call(), 0)
bop_981 = relay.power(uop_959.astype('float64'), relay.reshape(bop_963.astype('float64'), relay.shape_of(uop_959))) # shape=(13, 13, 1)
bop_984 = relay.power(uop_961.astype('float64'), relay.reshape(bop_966.astype('float64'), relay.shape_of(uop_961))) # shape=(13, 13, 1)
output = relay.Tuple([call_970,bop_981,])
output2 = relay.Tuple([call_971,bop_984,])
func_985 = relay.Function([var_962,], output)
mod['func_985'] = func_985
mod = relay.transform.InferType()(mod)
mutated_mod['func_985'] = func_985
mutated_mod = relay.transform.InferType()(mutated_mod)
var_986 = relay.var("var_986", dtype = "bool", shape = (13, 13, 1))#candidate|986|(13, 13, 1)|var|bool
func_985_call = mutated_mod.get_global_var('func_985')
call_987 = func_985_call(var_986)
output = call_987
func_988 = relay.Function([var_986], output)
mutated_mod['func_988'] = func_988
mutated_mod = relay.transform.InferType()(mutated_mod)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_1027 = relay.TupleGetItem(func_531_call(), 0)
call_1028 = relay.TupleGetItem(func_533_call(), 0)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_1029 = relay.TupleGetItem(func_531_call(), 0)
call_1030 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([call_1027,call_1029,])
output2 = relay.Tuple([call_1028,call_1030,])
func_1037 = relay.Function([], output)
mod['func_1037'] = func_1037
mod = relay.transform.InferType()(mod)
output = func_1037()
func_1038 = relay.Function([], output)
mutated_mod['func_1038'] = func_1038
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_1135 = relay.TupleGetItem(func_780_call(), 0)
call_1136 = relay.TupleGetItem(func_782_call(), 0)
output = relay.Tuple([call_1135,])
output2 = relay.Tuple([call_1136,])
func_1142 = relay.Function([], output)
mod['func_1142'] = func_1142
mod = relay.transform.InferType()(mod)
output = func_1142()
func_1143 = relay.Function([], output)
mutated_mod['func_1143'] = func_1143
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_1146 = relay.TupleGetItem(func_1037_call(), 1)
call_1147 = relay.TupleGetItem(func_1038_call(), 1)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_1152 = relay.TupleGetItem(func_531_call(), 0)
call_1153 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([call_1146,call_1152,])
output2 = relay.Tuple([call_1147,call_1153,])
func_1167 = relay.Function([], output)
mod['func_1167'] = func_1167
mod = relay.transform.InferType()(mod)
mutated_mod['func_1167'] = func_1167
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1167_call = mutated_mod.get_global_var('func_1167')
call_1168 = func_1167_call()
output = call_1168
func_1169 = relay.Function([], output)
mutated_mod['func_1169'] = func_1169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_1194 = relay.TupleGetItem(func_468_call(), 0)
call_1195 = relay.TupleGetItem(func_470_call(), 0)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_1203 = relay.TupleGetItem(func_904_call(relay.reshape(call_1194.astype('bool'), [13, 13, 1])), 5)
call_1204 = relay.TupleGetItem(func_906_call(relay.reshape(call_1194.astype('bool'), [13, 13, 1])), 5)
uop_1209 = relay.cosh(call_1194.astype('float32')) # shape=(13, 13, 1)
uop_1211 = relay.cosh(call_1195.astype('float32')) # shape=(13, 13, 1)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_1220 = relay.TupleGetItem(func_904_call(relay.reshape(uop_1209.astype('bool'), [13, 13, 1])), 0)
call_1221 = relay.TupleGetItem(func_906_call(relay.reshape(uop_1209.astype('bool'), [13, 13, 1])), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1233 = relay.TupleGetItem(func_820_call(), 0)
call_1234 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_1203,uop_1209,call_1220,call_1233,])
output2 = relay.Tuple([call_1204,uop_1211,call_1221,call_1234,])
func_1247 = relay.Function([], output)
mod['func_1247'] = func_1247
mod = relay.transform.InferType()(mod)
output = func_1247()
func_1248 = relay.Function([], output)
mutated_mod['func_1248'] = func_1248
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1142_call = mod.get_global_var('func_1142')
func_1143_call = mutated_mod.get_global_var('func_1143')
call_1351 = relay.TupleGetItem(func_1142_call(), 0)
call_1352 = relay.TupleGetItem(func_1143_call(), 0)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
call_1368 = relay.TupleGetItem(func_1167_call(), 1)
call_1369 = relay.TupleGetItem(func_1169_call(), 1)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_1372 = relay.TupleGetItem(func_904_call(relay.reshape(call_1351.astype('bool'), [13, 13, 1])), 1)
call_1373 = relay.TupleGetItem(func_906_call(relay.reshape(call_1351.astype('bool'), [13, 13, 1])), 1)
bop_1380 = relay.logical_xor(call_1372.astype('uint32'), relay.reshape(call_1351.astype('uint32'), relay.shape_of(call_1372))) # shape=(13, 13, 1)
bop_1383 = relay.logical_xor(call_1373.astype('uint32'), relay.reshape(call_1352.astype('uint32'), relay.shape_of(call_1373))) # shape=(13, 13, 1)
output = relay.Tuple([call_1368,bop_1380,])
output2 = relay.Tuple([call_1369,bop_1383,])
func_1414 = relay.Function([], output)
mod['func_1414'] = func_1414
mod = relay.transform.InferType()(mod)
output = func_1414()
func_1415 = relay.Function([], output)
mutated_mod['func_1415'] = func_1415
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_1416 = relay.TupleGetItem(func_610_call(), 0)
call_1417 = relay.TupleGetItem(func_611_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1433 = relay.TupleGetItem(func_820_call(), 0)
call_1434 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_1416,call_1433,])
output2 = relay.Tuple([call_1417,call_1434,])
func_1464 = relay.Function([], output)
mod['func_1464'] = func_1464
mod = relay.transform.InferType()(mod)
mutated_mod['func_1464'] = func_1464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mutated_mod.get_global_var('func_1464')
call_1465 = func_1464_call()
output = call_1465
func_1466 = relay.Function([], output)
mutated_mod['func_1466'] = func_1466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_725_call = mod.get_global_var('func_725')
func_727_call = mutated_mod.get_global_var('func_727')
call_1475 = relay.TupleGetItem(func_725_call(), 0)
call_1476 = relay.TupleGetItem(func_727_call(), 0)
var_1482 = relay.var("var_1482", dtype = "float64", shape = (13, 13, 10))#candidate|1482|(13, 13, 10)|var|float64
bop_1483 = relay.less_equal(call_1475.astype('bool'), var_1482.astype('bool')) # shape=(13, 13, 10)
bop_1486 = relay.less_equal(call_1476.astype('bool'), var_1482.astype('bool')) # shape=(13, 13, 10)
output = relay.Tuple([bop_1483,])
output2 = relay.Tuple([bop_1486,])
func_1490 = relay.Function([var_1482,], output)
mod['func_1490'] = func_1490
mod = relay.transform.InferType()(mod)
var_1491 = relay.var("var_1491", dtype = "float64", shape = (13, 13, 10))#candidate|1491|(13, 13, 10)|var|float64
output = func_1490(var_1491)
func_1492 = relay.Function([var_1491], output)
mutated_mod['func_1492'] = func_1492
mutated_mod = relay.transform.InferType()(mutated_mod)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_1511 = relay.TupleGetItem(func_531_call(), 0)
call_1512 = relay.TupleGetItem(func_533_call(), 0)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_1515 = relay.TupleGetItem(func_531_call(), 0)
call_1516 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([call_1511,call_1515,])
output2 = relay.Tuple([call_1512,call_1516,])
func_1518 = relay.Function([], output)
mod['func_1518'] = func_1518
mod = relay.transform.InferType()(mod)
mutated_mod['func_1518'] = func_1518
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1518_call = mutated_mod.get_global_var('func_1518')
call_1519 = func_1518_call()
output = call_1519
func_1520 = relay.Function([], output)
mutated_mod['func_1520'] = func_1520
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_1538 = relay.TupleGetItem(func_780_call(), 0)
call_1539 = relay.TupleGetItem(func_782_call(), 0)
func_985_call = mod.get_global_var('func_985')
func_988_call = mutated_mod.get_global_var('func_988')
call_1547 = relay.TupleGetItem(func_985_call(relay.reshape(call_1538.astype('bool'), [13, 13, 1])), 0)
call_1548 = relay.TupleGetItem(func_988_call(relay.reshape(call_1538.astype('bool'), [13, 13, 1])), 0)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_1559 = relay.TupleGetItem(func_904_call(relay.reshape(call_1547.astype('bool'), [13, 13, 1])), 3)
call_1560 = relay.TupleGetItem(func_906_call(relay.reshape(call_1547.astype('bool'), [13, 13, 1])), 3)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1569 = relay.TupleGetItem(func_820_call(), 0)
call_1570 = relay.TupleGetItem(func_821_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1571 = relay.TupleGetItem(func_820_call(), 0)
call_1572 = relay.TupleGetItem(func_821_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1577 = relay.TupleGetItem(func_820_call(), 0)
call_1578 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_1538,call_1547,call_1559,call_1569,call_1571,call_1577,])
output2 = relay.Tuple([call_1539,call_1548,call_1560,call_1570,call_1572,call_1578,])
func_1587 = relay.Function([], output)
mod['func_1587'] = func_1587
mod = relay.transform.InferType()(mod)
mutated_mod['func_1587'] = func_1587
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1587_call = mutated_mod.get_global_var('func_1587')
call_1588 = func_1587_call()
output = call_1588
func_1589 = relay.Function([], output)
mutated_mod['func_1589'] = func_1589
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_1640 = relay.TupleGetItem(func_468_call(), 1)
call_1641 = relay.TupleGetItem(func_470_call(), 1)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_1643 = relay.TupleGetItem(func_468_call(), 1)
call_1644 = relay.TupleGetItem(func_470_call(), 1)
output = relay.Tuple([call_1640,call_1643,])
output2 = relay.Tuple([call_1641,call_1644,])
func_1662 = relay.Function([], output)
mod['func_1662'] = func_1662
mod = relay.transform.InferType()(mod)
output = func_1662()
func_1663 = relay.Function([], output)
mutated_mod['func_1663'] = func_1663
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_1692 = relay.TupleGetItem(func_780_call(), 0)
call_1693 = relay.TupleGetItem(func_782_call(), 0)
func_725_call = mod.get_global_var('func_725')
func_727_call = mutated_mod.get_global_var('func_727')
call_1713 = relay.TupleGetItem(func_725_call(), 0)
call_1714 = relay.TupleGetItem(func_727_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_1717 = relay.TupleGetItem(func_820_call(), 0)
call_1718 = relay.TupleGetItem(func_821_call(), 0)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
call_1729 = relay.TupleGetItem(func_1167_call(), 0)
call_1730 = relay.TupleGetItem(func_1169_call(), 0)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_1735 = relay.TupleGetItem(func_610_call(), 0)
call_1736 = relay.TupleGetItem(func_611_call(), 0)
output = relay.Tuple([call_1692,call_1713,call_1717,call_1729,call_1735,])
output2 = relay.Tuple([call_1693,call_1714,call_1718,call_1730,call_1736,])
func_1759 = relay.Function([], output)
mod['func_1759'] = func_1759
mod = relay.transform.InferType()(mod)
mutated_mod['func_1759'] = func_1759
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mutated_mod.get_global_var('func_1759')
call_1760 = func_1759_call()
output = call_1760
func_1761 = relay.Function([], output)
mutated_mod['func_1761'] = func_1761
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_1791 = relay.TupleGetItem(func_610_call(), 0)
call_1792 = relay.TupleGetItem(func_611_call(), 0)
uop_1794 = relay.rsqrt(call_1791.astype('float32')) # shape=(13, 13, 1)
uop_1796 = relay.rsqrt(call_1792.astype('float32')) # shape=(13, 13, 1)
output = relay.Tuple([uop_1794,])
output2 = relay.Tuple([uop_1796,])
func_1798 = relay.Function([], output)
mod['func_1798'] = func_1798
mod = relay.transform.InferType()(mod)
mutated_mod['func_1798'] = func_1798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1798_call = mutated_mod.get_global_var('func_1798')
call_1799 = func_1798_call()
output = call_1799
func_1800 = relay.Function([], output)
mutated_mod['func_1800'] = func_1800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_1810 = relay.TupleGetItem(func_610_call(), 1)
call_1811 = relay.TupleGetItem(func_611_call(), 1)
output = call_1810
output2 = call_1811
func_1829 = relay.Function([], output)
mod['func_1829'] = func_1829
mod = relay.transform.InferType()(mod)
mutated_mod['func_1829'] = func_1829
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1829_call = mutated_mod.get_global_var('func_1829')
call_1830 = func_1829_call()
output = call_1830
func_1831 = relay.Function([], output)
mutated_mod['func_1831'] = func_1831
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1829_call = mod.get_global_var('func_1829')
func_1831_call = mutated_mod.get_global_var('func_1831')
call_1875 = func_1829_call()
call_1876 = func_1829_call()
output = relay.Tuple([call_1875,])
output2 = relay.Tuple([call_1876,])
func_1888 = relay.Function([], output)
mod['func_1888'] = func_1888
mod = relay.transform.InferType()(mod)
mutated_mod['func_1888'] = func_1888
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mutated_mod.get_global_var('func_1888')
call_1889 = func_1888_call()
output = call_1889
func_1890 = relay.Function([], output)
mutated_mod['func_1890'] = func_1890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_1926 = relay.TupleGetItem(func_1247_call(), 3)
call_1927 = relay.TupleGetItem(func_1248_call(), 3)
output = relay.Tuple([call_1926,])
output2 = relay.Tuple([call_1927,])
func_1947 = relay.Function([], output)
mod['func_1947'] = func_1947
mod = relay.transform.InferType()(mod)
mutated_mod['func_1947'] = func_1947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mutated_mod.get_global_var('func_1947')
call_1948 = func_1947_call()
output = call_1948
func_1949 = relay.Function([], output)
mutated_mod['func_1949'] = func_1949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_1984 = relay.TupleGetItem(func_1464_call(), 1)
call_1985 = relay.TupleGetItem(func_1466_call(), 1)
output = relay.Tuple([call_1984,])
output2 = relay.Tuple([call_1985,])
func_1986 = relay.Function([], output)
mod['func_1986'] = func_1986
mod = relay.transform.InferType()(mod)
output = func_1986()
func_1987 = relay.Function([], output)
mutated_mod['func_1987'] = func_1987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_1990 = relay.TupleGetItem(func_1888_call(), 0)
call_1991 = relay.TupleGetItem(func_1890_call(), 0)
var_2021 = relay.var("var_2021", dtype = "bool", shape = (13, 13, 15))#candidate|2021|(13, 13, 15)|var|bool
bop_2022 = relay.subtract(call_1990.astype('uint64'), var_2021.astype('uint64')) # shape=(13, 13, 15)
bop_2025 = relay.subtract(call_1991.astype('uint64'), var_2021.astype('uint64')) # shape=(13, 13, 15)
output = relay.Tuple([bop_2022,])
output2 = relay.Tuple([bop_2025,])
func_2035 = relay.Function([var_2021,], output)
mod['func_2035'] = func_2035
mod = relay.transform.InferType()(mod)
var_2036 = relay.var("var_2036", dtype = "bool", shape = (13, 13, 15))#candidate|2036|(13, 13, 15)|var|bool
output = func_2035(var_2036)
func_2037 = relay.Function([var_2036], output)
mutated_mod['func_2037'] = func_2037
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_2108 = relay.TupleGetItem(func_1947_call(), 0)
call_2109 = relay.TupleGetItem(func_1949_call(), 0)
output = call_2108
output2 = call_2109
func_2110 = relay.Function([], output)
mod['func_2110'] = func_2110
mod = relay.transform.InferType()(mod)
mutated_mod['func_2110'] = func_2110
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2110_call = mutated_mod.get_global_var('func_2110')
call_2111 = func_2110_call()
output = call_2111
func_2112 = relay.Function([], output)
mutated_mod['func_2112'] = func_2112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_2156 = relay.TupleGetItem(func_468_call(), 0)
call_2157 = relay.TupleGetItem(func_470_call(), 0)
output = relay.Tuple([call_2156,])
output2 = relay.Tuple([call_2157,])
func_2169 = relay.Function([], output)
mod['func_2169'] = func_2169
mod = relay.transform.InferType()(mod)
mutated_mod['func_2169'] = func_2169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2169_call = mutated_mod.get_global_var('func_2169')
call_2170 = func_2169_call()
output = call_2170
func_2171 = relay.Function([], output)
mutated_mod['func_2171'] = func_2171
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_2283 = relay.TupleGetItem(func_1947_call(), 0)
call_2284 = relay.TupleGetItem(func_1949_call(), 0)
output = relay.Tuple([call_2283,])
output2 = relay.Tuple([call_2284,])
func_2286 = relay.Function([], output)
mod['func_2286'] = func_2286
mod = relay.transform.InferType()(mod)
output = func_2286()
func_2287 = relay.Function([], output)
mutated_mod['func_2287'] = func_2287
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_2350 = relay.TupleGetItem(func_780_call(), 0)
call_2351 = relay.TupleGetItem(func_782_call(), 0)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_2352 = relay.TupleGetItem(func_610_call(), 0)
call_2353 = relay.TupleGetItem(func_611_call(), 0)
var_2358 = relay.var("var_2358", dtype = "float32", shape = (13, 13, 10))#candidate|2358|(13, 13, 10)|var|float32
bop_2359 = relay.right_shift(call_2350.astype('int64'), var_2358.astype('int64')) # shape=(13, 13, 10)
bop_2362 = relay.right_shift(call_2351.astype('int64'), var_2358.astype('int64')) # shape=(13, 13, 10)
output = relay.Tuple([call_2352,bop_2359,])
output2 = relay.Tuple([call_2353,bop_2362,])
func_2363 = relay.Function([var_2358,], output)
mod['func_2363'] = func_2363
mod = relay.transform.InferType()(mod)
var_2364 = relay.var("var_2364", dtype = "float32", shape = (13, 13, 10))#candidate|2364|(13, 13, 10)|var|float32
output = func_2363(var_2364)
func_2365 = relay.Function([var_2364], output)
mutated_mod['func_2365'] = func_2365
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1986_call = mod.get_global_var('func_1986')
func_1987_call = mutated_mod.get_global_var('func_1987')
call_2370 = relay.TupleGetItem(func_1986_call(), 0)
call_2371 = relay.TupleGetItem(func_1987_call(), 0)
output = call_2370
output2 = call_2371
func_2376 = relay.Function([], output)
mod['func_2376'] = func_2376
mod = relay.transform.InferType()(mod)
mutated_mod['func_2376'] = func_2376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mutated_mod.get_global_var('func_2376')
call_2377 = func_2376_call()
output = call_2377
func_2378 = relay.Function([], output)
mutated_mod['func_2378'] = func_2378
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_2468 = relay.TupleGetItem(func_610_call(), 0)
call_2469 = relay.TupleGetItem(func_611_call(), 0)
output = call_2468
output2 = call_2469
func_2478 = relay.Function([], output)
mod['func_2478'] = func_2478
mod = relay.transform.InferType()(mod)
output = func_2478()
func_2479 = relay.Function([], output)
mutated_mod['func_2479'] = func_2479
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mod.get_global_var('func_2286')
func_2287_call = mutated_mod.get_global_var('func_2287')
call_2515 = relay.TupleGetItem(func_2286_call(), 0)
call_2516 = relay.TupleGetItem(func_2287_call(), 0)
func_1662_call = mod.get_global_var('func_1662')
func_1663_call = mutated_mod.get_global_var('func_1663')
call_2529 = relay.TupleGetItem(func_1662_call(), 1)
call_2530 = relay.TupleGetItem(func_1663_call(), 1)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_2531 = relay.TupleGetItem(func_820_call(), 0)
call_2532 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_2515,call_2529,call_2531,])
output2 = relay.Tuple([call_2516,call_2530,call_2532,])
func_2544 = relay.Function([], output)
mod['func_2544'] = func_2544
mod = relay.transform.InferType()(mod)
mutated_mod['func_2544'] = func_2544
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2544_call = mutated_mod.get_global_var('func_2544')
call_2545 = func_2544_call()
output = call_2545
func_2546 = relay.Function([], output)
mutated_mod['func_2546'] = func_2546
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_2603 = relay.TupleGetItem(func_1247_call(), 3)
call_2604 = relay.TupleGetItem(func_1248_call(), 3)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
call_2606 = relay.TupleGetItem(func_1167_call(), 1)
call_2607 = relay.TupleGetItem(func_1169_call(), 1)
bop_2619 = relay.left_shift(call_2603.astype('int8'), relay.reshape(call_2606.astype('int8'), relay.shape_of(call_2603))) # shape=(13, 13, 1)
bop_2622 = relay.left_shift(call_2604.astype('int8'), relay.reshape(call_2607.astype('int8'), relay.shape_of(call_2604))) # shape=(13, 13, 1)
output = bop_2619
output2 = bop_2622
func_2623 = relay.Function([], output)
mod['func_2623'] = func_2623
mod = relay.transform.InferType()(mod)
mutated_mod['func_2623'] = func_2623
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2623_call = mutated_mod.get_global_var('func_2623')
call_2624 = func_2623_call()
output = call_2624
func_2625 = relay.Function([], output)
mutated_mod['func_2625'] = func_2625
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_2644 = func_2376_call()
call_2645 = func_2376_call()
output = relay.Tuple([call_2644,])
output2 = relay.Tuple([call_2645,])
func_2646 = relay.Function([], output)
mod['func_2646'] = func_2646
mod = relay.transform.InferType()(mod)
output = func_2646()
func_2647 = relay.Function([], output)
mutated_mod['func_2647'] = func_2647
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_2648 = relay.TupleGetItem(func_1247_call(), 0)
call_2649 = relay.TupleGetItem(func_1248_call(), 0)
var_2662 = relay.var("var_2662", dtype = "bool", shape = (13, 13, 11))#candidate|2662|(13, 13, 11)|var|bool
bop_2663 = relay.maximum(call_2648.astype('float32'), var_2662.astype('float32')) # shape=(13, 13, 11)
bop_2666 = relay.maximum(call_2649.astype('float32'), var_2662.astype('float32')) # shape=(13, 13, 11)
uop_2676 = relay.log(var_2662.astype('float32')) # shape=(13, 13, 11)
output = relay.Tuple([bop_2663,uop_2676,])
output2 = relay.Tuple([bop_2666,uop_2676,])
func_2682 = relay.Function([var_2662,], output)
mod['func_2682'] = func_2682
mod = relay.transform.InferType()(mod)
var_2683 = relay.var("var_2683", dtype = "bool", shape = (13, 13, 11))#candidate|2683|(13, 13, 11)|var|bool
output = func_2682(var_2683)
func_2684 = relay.Function([var_2683], output)
mutated_mod['func_2684'] = func_2684
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1518_call = mod.get_global_var('func_1518')
func_1520_call = mutated_mod.get_global_var('func_1520')
call_2686 = relay.TupleGetItem(func_1518_call(), 0)
call_2687 = relay.TupleGetItem(func_1520_call(), 0)
const_2689 = relay.const([[[False,True],[False,True],[False,True],[True,False],[False,False],[True,False],[False,False],[False,True],[True,True],[False,True],[True,False],[False,False],[True,False]],[[True,True],[True,False],[False,False],[True,False],[True,True],[True,False],[True,True],[True,True],[False,True],[True,False],[False,False],[False,False],[True,True]],[[False,True],[False,True],[True,True],[True,True],[True,True],[True,False],[True,False],[True,True],[False,False],[False,True],[True,False],[False,False],[True,False]],[[False,True],[True,True],[False,True],[False,False],[True,False],[True,False],[True,False],[True,False],[False,False],[False,True],[True,False],[False,False],[False,True]],[[False,False],[False,True],[True,False],[False,False],[False,True],[True,False],[True,False],[False,True],[False,True],[True,True],[True,False],[False,True],[True,True]],[[False,True],[True,False],[True,False],[False,True],[True,True],[True,False],[True,True],[True,True],[False,False],[True,False],[True,False],[False,True],[True,True]],[[True,True],[True,False],[True,True],[False,False],[True,True],[False,True],[False,False],[True,True],[False,False],[True,True],[True,True],[True,True],[True,True]],[[True,True],[False,False],[True,True],[False,False],[True,True],[True,True],[True,False],[False,False],[True,False],[False,False],[False,False],[True,True],[True,False]],[[False,False],[True,True],[True,False],[True,True],[True,False],[False,True],[False,False],[False,True],[True,True],[True,False],[True,False],[False,True],[True,False]],[[True,False],[True,False],[False,True],[True,False],[True,False],[False,False],[False,True],[False,False],[False,False],[False,False],[True,False],[False,False],[False,True]],[[False,False],[True,True],[True,False],[True,False],[True,False],[False,False],[False,True],[False,False],[True,False],[False,True],[True,False],[True,True],[True,False]],[[True,True],[False,True],[False,False],[False,True],[False,True],[False,True],[True,True],[True,True],[True,True],[False,True],[False,True],[False,False],[False,True]],[[False,True],[False,True],[True,False],[False,True],[True,True],[False,True],[False,False],[False,False],[True,False],[True,True],[True,False],[False,False],[False,False]]], dtype = "bool")#candidate|2689|(13, 13, 2)|const|bool
bop_2690 = relay.minimum(call_2686.astype('float64'), const_2689.astype('float64')) # shape=(13, 13, 2)
bop_2693 = relay.minimum(call_2687.astype('float64'), const_2689.astype('float64')) # shape=(13, 13, 2)
output = relay.Tuple([bop_2690,])
output2 = relay.Tuple([bop_2693,])
func_2695 = relay.Function([], output)
mod['func_2695'] = func_2695
mod = relay.transform.InferType()(mod)
output = func_2695()
func_2696 = relay.Function([], output)
mutated_mod['func_2696'] = func_2696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_2902 = relay.TupleGetItem(func_610_call(), 0)
call_2903 = relay.TupleGetItem(func_611_call(), 0)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_2911 = relay.TupleGetItem(func_2646_call(), 0)
call_2912 = relay.TupleGetItem(func_2647_call(), 0)
bop_2916 = relay.add(call_2902.astype('int64'), relay.reshape(call_2911.astype('int64'), relay.shape_of(call_2902))) # shape=(13, 13, 1)
bop_2919 = relay.add(call_2903.astype('int64'), relay.reshape(call_2912.astype('int64'), relay.shape_of(call_2903))) # shape=(13, 13, 1)
bop_2920 = relay.subtract(call_2902.astype('int8'), relay.reshape(bop_2916.astype('int8'), relay.shape_of(call_2902))) # shape=(13, 13, 1)
bop_2923 = relay.subtract(call_2903.astype('int8'), relay.reshape(bop_2919.astype('int8'), relay.shape_of(call_2903))) # shape=(13, 13, 1)
func_1986_call = mod.get_global_var('func_1986')
func_1987_call = mutated_mod.get_global_var('func_1987')
call_2936 = relay.TupleGetItem(func_1986_call(), 0)
call_2937 = relay.TupleGetItem(func_1987_call(), 0)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_2947 = func_2110_call()
call_2948 = func_2110_call()
output = relay.Tuple([bop_2920,call_2936,call_2947,])
output2 = relay.Tuple([bop_2923,call_2937,call_2948,])
func_2952 = relay.Function([], output)
mod['func_2952'] = func_2952
mod = relay.transform.InferType()(mod)
output = func_2952()
func_2953 = relay.Function([], output)
mutated_mod['func_2953'] = func_2953
mutated_mod = relay.transform.InferType()(mutated_mod)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_2967 = relay.TupleGetItem(func_820_call(), 0)
call_2968 = relay.TupleGetItem(func_821_call(), 0)
func_2952_call = mod.get_global_var('func_2952')
func_2953_call = mutated_mod.get_global_var('func_2953')
call_2972 = relay.TupleGetItem(func_2952_call(), 0)
call_2973 = relay.TupleGetItem(func_2953_call(), 0)
output = relay.Tuple([call_2967,call_2972,])
output2 = relay.Tuple([call_2968,call_2973,])
func_2985 = relay.Function([], output)
mod['func_2985'] = func_2985
mod = relay.transform.InferType()(mod)
mutated_mod['func_2985'] = func_2985
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2985_call = mutated_mod.get_global_var('func_2985')
call_2986 = func_2985_call()
output = call_2986
func_2987 = relay.Function([], output)
mutated_mod['func_2987'] = func_2987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mod.get_global_var('func_2286')
func_2287_call = mutated_mod.get_global_var('func_2287')
call_2997 = relay.TupleGetItem(func_2286_call(), 0)
call_2998 = relay.TupleGetItem(func_2287_call(), 0)
output = call_2997
output2 = call_2998
func_3011 = relay.Function([], output)
mod['func_3011'] = func_3011
mod = relay.transform.InferType()(mod)
mutated_mod['func_3011'] = func_3011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3011_call = mutated_mod.get_global_var('func_3011')
call_3012 = func_3011_call()
output = call_3012
func_3013 = relay.Function([], output)
mutated_mod['func_3013'] = func_3013
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2623_call = mod.get_global_var('func_2623')
func_2625_call = mutated_mod.get_global_var('func_2625')
call_3049 = func_2623_call()
call_3050 = func_2623_call()
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_3057 = func_2376_call()
call_3058 = func_2376_call()
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_3067 = relay.TupleGetItem(func_1037_call(), 0)
call_3068 = relay.TupleGetItem(func_1038_call(), 0)
output = relay.Tuple([call_3049,call_3057,call_3067,])
output2 = relay.Tuple([call_3050,call_3058,call_3068,])
func_3073 = relay.Function([], output)
mod['func_3073'] = func_3073
mod = relay.transform.InferType()(mod)
mutated_mod['func_3073'] = func_3073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3073_call = mutated_mod.get_global_var('func_3073')
call_3074 = func_3073_call()
output = call_3074
func_3075 = relay.Function([], output)
mutated_mod['func_3075'] = func_3075
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2695_call = mod.get_global_var('func_2695')
func_2696_call = mutated_mod.get_global_var('func_2696')
call_3094 = relay.TupleGetItem(func_2695_call(), 0)
call_3095 = relay.TupleGetItem(func_2696_call(), 0)
output = relay.Tuple([call_3094,])
output2 = relay.Tuple([call_3095,])
func_3103 = relay.Function([], output)
mod['func_3103'] = func_3103
mod = relay.transform.InferType()(mod)
mutated_mod['func_3103'] = func_3103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3103_call = mutated_mod.get_global_var('func_3103')
call_3104 = func_3103_call()
output = call_3104
func_3105 = relay.Function([], output)
mutated_mod['func_3105'] = func_3105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2544_call = mod.get_global_var('func_2544')
func_2546_call = mutated_mod.get_global_var('func_2546')
call_3119 = relay.TupleGetItem(func_2544_call(), 2)
call_3120 = relay.TupleGetItem(func_2546_call(), 2)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_3125 = relay.TupleGetItem(func_610_call(), 1)
call_3126 = relay.TupleGetItem(func_611_call(), 1)
output = relay.Tuple([call_3119,call_3125,])
output2 = relay.Tuple([call_3120,call_3126,])
func_3130 = relay.Function([], output)
mod['func_3130'] = func_3130
mod = relay.transform.InferType()(mod)
output = func_3130()
func_3131 = relay.Function([], output)
mutated_mod['func_3131'] = func_3131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2478_call = mod.get_global_var('func_2478')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_3153 = func_2478_call()
call_3154 = func_2478_call()
uop_3167 = relay.acos(call_3153.astype('float64')) # shape=(13, 13, 1)
uop_3169 = relay.acos(call_3154.astype('float64')) # shape=(13, 13, 1)
output = uop_3167
output2 = uop_3169
func_3208 = relay.Function([], output)
mod['func_3208'] = func_3208
mod = relay.transform.InferType()(mod)
mutated_mod['func_3208'] = func_3208
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3208_call = mutated_mod.get_global_var('func_3208')
call_3209 = func_3208_call()
output = call_3209
func_3210 = relay.Function([], output)
mutated_mod['func_3210'] = func_3210
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3406 = relay.var("var_3406", dtype = "float32", shape = (1, 1, 7))#candidate|3406|(1, 1, 7)|var|float32
uop_3407 = relay.sigmoid(var_3406.astype('float32')) # shape=(1, 1, 7)
output = uop_3407
output2 = uop_3407
func_3417 = relay.Function([var_3406,], output)
mod['func_3417'] = func_3417
mod = relay.transform.InferType()(mod)
var_3418 = relay.var("var_3418", dtype = "float32", shape = (1, 1, 7))#candidate|3418|(1, 1, 7)|var|float32
output = func_3417(var_3418)
func_3419 = relay.Function([var_3418], output)
mutated_mod['func_3419'] = func_3419
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3130_call = mod.get_global_var('func_3130')
func_3131_call = mutated_mod.get_global_var('func_3131')
call_3424 = relay.TupleGetItem(func_3130_call(), 1)
call_3425 = relay.TupleGetItem(func_3131_call(), 1)
output = call_3424
output2 = call_3425
func_3430 = relay.Function([], output)
mod['func_3430'] = func_3430
mod = relay.transform.InferType()(mod)
output = func_3430()
func_3431 = relay.Function([], output)
mutated_mod['func_3431'] = func_3431
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_3441 = relay.TupleGetItem(func_2646_call(), 0)
call_3442 = relay.TupleGetItem(func_2647_call(), 0)
func_1829_call = mod.get_global_var('func_1829')
func_1831_call = mutated_mod.get_global_var('func_1831')
call_3457 = func_1829_call()
call_3458 = func_1829_call()
output = relay.Tuple([call_3441,call_3457,])
output2 = relay.Tuple([call_3442,call_3458,])
func_3472 = relay.Function([], output)
mod['func_3472'] = func_3472
mod = relay.transform.InferType()(mod)
mutated_mod['func_3472'] = func_3472
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3472_call = mutated_mod.get_global_var('func_3472')
call_3473 = func_3472_call()
output = call_3473
func_3474 = relay.Function([], output)
mutated_mod['func_3474'] = func_3474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_3521 = relay.TupleGetItem(func_610_call(), 1)
call_3522 = relay.TupleGetItem(func_611_call(), 1)
output = relay.Tuple([call_3521,])
output2 = relay.Tuple([call_3522,])
func_3525 = relay.Function([], output)
mod['func_3525'] = func_3525
mod = relay.transform.InferType()(mod)
output = func_3525()
func_3526 = relay.Function([], output)
mutated_mod['func_3526'] = func_3526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_3696 = relay.TupleGetItem(func_510_call(), 0)
call_3697 = relay.TupleGetItem(func_511_call(), 0)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_3704 = relay.TupleGetItem(func_780_call(), 0)
call_3705 = relay.TupleGetItem(func_782_call(), 0)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_3708 = relay.TupleGetItem(func_1947_call(), 0)
call_3709 = relay.TupleGetItem(func_1949_call(), 0)
output = relay.Tuple([call_3696,call_3704,call_3708,])
output2 = relay.Tuple([call_3697,call_3705,call_3709,])
func_3712 = relay.Function([], output)
mod['func_3712'] = func_3712
mod = relay.transform.InferType()(mod)
mutated_mod['func_3712'] = func_3712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3712_call = mutated_mod.get_global_var('func_3712')
call_3713 = func_3712_call()
output = call_3713
func_3714 = relay.Function([], output)
mutated_mod['func_3714'] = func_3714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3103_call = mod.get_global_var('func_3103')
func_3105_call = mutated_mod.get_global_var('func_3105')
call_3739 = relay.TupleGetItem(func_3103_call(), 0)
call_3740 = relay.TupleGetItem(func_3105_call(), 0)
output = relay.Tuple([call_3739,])
output2 = relay.Tuple([call_3740,])
func_3746 = relay.Function([], output)
mod['func_3746'] = func_3746
mod = relay.transform.InferType()(mod)
mutated_mod['func_3746'] = func_3746
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3746_call = mutated_mod.get_global_var('func_3746')
call_3747 = func_3746_call()
output = call_3747
func_3748 = relay.Function([], output)
mutated_mod['func_3748'] = func_3748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3011_call = mod.get_global_var('func_3011')
func_3013_call = mutated_mod.get_global_var('func_3013')
call_3758 = func_3011_call()
call_3759 = func_3011_call()
func_1518_call = mod.get_global_var('func_1518')
func_1520_call = mutated_mod.get_global_var('func_1520')
call_3760 = relay.TupleGetItem(func_1518_call(), 0)
call_3761 = relay.TupleGetItem(func_1520_call(), 0)
output = relay.Tuple([call_3758,call_3760,])
output2 = relay.Tuple([call_3759,call_3761,])
func_3763 = relay.Function([], output)
mod['func_3763'] = func_3763
mod = relay.transform.InferType()(mod)
output = func_3763()
func_3764 = relay.Function([], output)
mutated_mod['func_3764'] = func_3764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_3765 = relay.TupleGetItem(func_1888_call(), 0)
call_3766 = relay.TupleGetItem(func_1890_call(), 0)
output = call_3765
output2 = call_3766
func_3767 = relay.Function([], output)
mod['func_3767'] = func_3767
mod = relay.transform.InferType()(mod)
output = func_3767()
func_3768 = relay.Function([], output)
mutated_mod['func_3768'] = func_3768
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_3769 = relay.TupleGetItem(func_547_call(), 0)
call_3770 = relay.TupleGetItem(func_548_call(), 0)
func_3767_call = mod.get_global_var('func_3767')
func_3768_call = mutated_mod.get_global_var('func_3768')
call_3785 = func_3767_call()
call_3786 = func_3767_call()
output = relay.Tuple([call_3769,call_3785,])
output2 = relay.Tuple([call_3770,call_3786,])
func_3794 = relay.Function([], output)
mod['func_3794'] = func_3794
mod = relay.transform.InferType()(mod)
output = func_3794()
func_3795 = relay.Function([], output)
mutated_mod['func_3795'] = func_3795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1414_call = mod.get_global_var('func_1414')
func_1415_call = mutated_mod.get_global_var('func_1415')
call_3827 = relay.TupleGetItem(func_1414_call(), 0)
call_3828 = relay.TupleGetItem(func_1415_call(), 0)
output = call_3827
output2 = call_3828
func_3858 = relay.Function([], output)
mod['func_3858'] = func_3858
mod = relay.transform.InferType()(mod)
output = func_3858()
func_3859 = relay.Function([], output)
mutated_mod['func_3859'] = func_3859
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_3936 = relay.TupleGetItem(func_780_call(), 0)
call_3937 = relay.TupleGetItem(func_782_call(), 0)
uop_3939 = relay.log10(call_3936.astype('float64')) # shape=(13, 13, 1)
uop_3941 = relay.log10(call_3937.astype('float64')) # shape=(13, 13, 1)
output = relay.Tuple([uop_3939,])
output2 = relay.Tuple([uop_3941,])
func_3942 = relay.Function([], output)
mod['func_3942'] = func_3942
mod = relay.transform.InferType()(mod)
mutated_mod['func_3942'] = func_3942
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3942_call = mutated_mod.get_global_var('func_3942')
call_3943 = func_3942_call()
output = call_3943
func_3944 = relay.Function([], output)
mutated_mod['func_3944'] = func_3944
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_3951 = relay.TupleGetItem(func_547_call(), 0)
call_3952 = relay.TupleGetItem(func_548_call(), 0)
output = relay.Tuple([call_3951,])
output2 = relay.Tuple([call_3952,])
func_3967 = relay.Function([], output)
mod['func_3967'] = func_3967
mod = relay.transform.InferType()(mod)
mutated_mod['func_3967'] = func_3967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3967_call = mutated_mod.get_global_var('func_3967')
call_3968 = func_3967_call()
output = call_3968
func_3969 = relay.Function([], output)
mutated_mod['func_3969'] = func_3969
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_4011 = relay.TupleGetItem(func_3472_call(), 1)
call_4012 = relay.TupleGetItem(func_3474_call(), 1)
output = call_4011
output2 = call_4012
func_4015 = relay.Function([], output)
mod['func_4015'] = func_4015
mod = relay.transform.InferType()(mod)
mutated_mod['func_4015'] = func_4015
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4015_call = mutated_mod.get_global_var('func_4015')
call_4016 = func_4015_call()
output = call_4016
func_4017 = relay.Function([], output)
mutated_mod['func_4017'] = func_4017
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_4032 = relay.TupleGetItem(func_3472_call(), 1)
call_4033 = relay.TupleGetItem(func_3474_call(), 1)
output = relay.Tuple([call_4032,])
output2 = relay.Tuple([call_4033,])
func_4067 = relay.Function([], output)
mod['func_4067'] = func_4067
mod = relay.transform.InferType()(mod)
mutated_mod['func_4067'] = func_4067
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4067_call = mutated_mod.get_global_var('func_4067')
call_4068 = func_4067_call()
output = call_4068
func_4069 = relay.Function([], output)
mutated_mod['func_4069'] = func_4069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3208_call = mod.get_global_var('func_3208')
func_3210_call = mutated_mod.get_global_var('func_3210')
call_4157 = func_3208_call()
call_4158 = func_3208_call()
func_3417_call = mod.get_global_var('func_3417')
func_3419_call = mutated_mod.get_global_var('func_3419')
var_4194 = relay.var("var_4194", dtype = "float32", shape = (7,))#candidate|4194|(7,)|var|float32
call_4193 = func_3417_call(relay.reshape(var_4194.astype('float32'), [1, 1, 7]))
call_4195 = func_3417_call(relay.reshape(var_4194.astype('float32'), [1, 1, 7]))
func_3073_call = mod.get_global_var('func_3073')
func_3075_call = mutated_mod.get_global_var('func_3075')
call_4197 = relay.TupleGetItem(func_3073_call(), 2)
call_4198 = relay.TupleGetItem(func_3075_call(), 2)
output = relay.Tuple([call_4157,call_4193,var_4194,call_4197,])
output2 = relay.Tuple([call_4158,call_4195,var_4194,call_4198,])
func_4199 = relay.Function([var_4194,], output)
mod['func_4199'] = func_4199
mod = relay.transform.InferType()(mod)
var_4200 = relay.var("var_4200", dtype = "float32", shape = (7,))#candidate|4200|(7,)|var|float32
output = func_4199(var_4200)
func_4201 = relay.Function([var_4200], output)
mutated_mod['func_4201'] = func_4201
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2952_call = mod.get_global_var('func_2952')
func_2953_call = mutated_mod.get_global_var('func_2953')
call_4314 = relay.TupleGetItem(func_2952_call(), 1)
call_4315 = relay.TupleGetItem(func_2953_call(), 1)
output = call_4314
output2 = call_4315
func_4333 = relay.Function([], output)
mod['func_4333'] = func_4333
mod = relay.transform.InferType()(mod)
output = func_4333()
func_4334 = relay.Function([], output)
mutated_mod['func_4334'] = func_4334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_4338 = relay.TupleGetItem(func_531_call(), 0)
call_4339 = relay.TupleGetItem(func_533_call(), 0)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_4344 = relay.TupleGetItem(func_2646_call(), 0)
call_4345 = relay.TupleGetItem(func_2647_call(), 0)
func_1490_call = mod.get_global_var('func_1490')
func_1492_call = mutated_mod.get_global_var('func_1492')
const_4348 = relay.const([4.032205,-5.101415,8.705717,-7.040646,-8.241575,3.843485,-8.988910,-0.986122,-5.071960,4.980495,-0.316404,-0.346506,2.917049,7.471603,-3.586917,3.627269,6.538764,7.371578,-3.747908,5.401232,4.008320,9.963478,9.309930,-4.279430,4.140623,-3.695469,8.093954,-0.702653,5.082431,8.949089,8.851189,-5.314563,-1.248482,5.531391,9.977113,-4.859392,-2.300049,2.367014,3.769524,6.636943,9.517614,9.370724,2.957023,5.868514,5.391945,-0.607290,-9.947710,-5.611641,-2.006376,6.782139,-2.029367,-9.749704,8.364803,-4.904533,-0.107131,9.718634,-4.119380,-1.280032,-3.513839,-6.086929,-4.571265,-5.619731,8.458545,-0.852094,6.470710,-4.071193,3.531868,-4.323457,-8.762968,4.201111,-0.525025,-7.844647,3.851057,-5.196336,5.871073,-9.141828,2.598082,-6.185982,2.703029,6.941341,-7.352317,-1.433576,-4.452730,-6.010546,3.409635,2.215109,0.364758,-0.794346,-8.838749,-6.312365,-1.183547,-5.309700,-0.001193,-8.975445,3.152874,-0.898957,0.390385,0.939801,0.233858,-8.224967,9.362941,-7.305905,-9.779797,-9.934426,-3.646239,-0.655639,4.882850,-1.860180,9.061836,8.184083,-2.744636,-9.035058,-1.907652,-0.061215,1.783433,-8.094912,-3.021836,6.236779,-4.448507,-9.011101,3.969123,3.131769,1.449276,-6.610160,-7.618403,8.799482,9.648062,9.442254,3.652292,7.999908,-4.898196,1.893274,-1.784942,0.377454,-0.800728,4.259136,-6.234119,-4.042978,7.806570,-0.872219,-9.744980,-5.147806,9.751904,3.791664,1.193844,-9.129311,7.486330,9.828207,-7.982781,-6.231896,-1.196692,-7.913621,-3.025950,-4.780328,4.544116,5.460627,-3.738894,2.341727,2.792121,-7.105172,8.201742,4.051414,-4.854187,3.521151,3.317937,-7.777822,6.477656,5.216664,2.439170,3.140598,-2.785358,6.759742,7.103011,4.016020,2.096794,4.467127,-8.050796,6.241765,8.419141,5.914245,-1.369823,-9.802357,6.585864,9.967525,1.507694,2.783946,-2.793175,-2.951184,-6.599744,-6.091752,2.915113,-9.088610,-2.249535,8.750814,-3.491789,8.205386,-8.821520,0.171186,2.774042,-7.107707,3.249264,-6.829713,-9.650828,7.291870,-3.703433,1.805696,-5.774839,9.789576,2.746564,-0.502726,-7.836396,1.571856,-1.247318,-1.214563,4.750298,-9.384768,-4.556635,-5.509722,-7.159095,8.256205,-7.796814,-1.381790,0.557323,6.143145,-1.117973,-5.293218,7.384279,1.864385,-8.730686,5.191599,6.849867,4.577264,4.339380,-4.856225,4.302837,-2.870780,-8.469040,-8.146665,0.994853,3.651053,-7.028842,-8.602705,3.217349,8.553965,6.942671,8.736698,-9.356362,-8.329496,9.552203,4.892358,0.818184,-6.126642,6.339779,8.397890,-2.003382,-8.551810,-5.009390,7.910963,4.851711,-3.747937,1.878798,5.245508,-5.797983,1.881888,-6.029806,-8.110193,9.260936,-0.383821,-7.726493,1.276116,-9.942861,6.474692,-1.344643,-0.453104,0.958121,-0.947632,-1.826353,-1.246231,5.234257,-3.718069,9.723699,3.007060,4.190929,0.630275,9.745309,8.266422,-7.442572,1.911344,8.131916,-8.209643,-8.150173,6.917970,-6.487143,4.710211,-8.412858,-4.677873,-0.228237,-1.853055,2.864621,7.316621,-7.330589,-1.250087,3.081482,1.316267,8.333516,1.745765,-9.593923,-6.633197,1.413824,-9.918517,-5.817082,4.327244,8.297322,-9.201178,2.189699,5.685555,-5.827989,-7.772994,7.596888,-6.996974,-4.208965,-0.182818,9.062244,3.126976,-3.649094,-2.972887,-5.240948,-0.372169,1.107630,-7.859873,-1.803842,-2.729750,2.587585,5.576604,-5.851081,1.717685,4.361186,0.084173,4.784555,4.316051,-5.501995,-1.048298,8.620157,-3.248840,1.551845,2.454847,4.450192,1.836671,2.941659,3.702249,-6.706129,-9.145568,3.532938,-5.163634,-6.687907,-7.804625,3.457387,-1.774826,7.760160,1.864619,2.217838,9.859326,-4.046902,-3.872478,4.449352,6.628418,-9.669910,6.895700,7.459483,-9.487067,-9.468967,4.716612,7.273490,-3.602265,-5.194125,-0.261406,2.176604,-4.043515,-9.389147,0.316172,2.439100,8.335516,-4.936934,7.652616,6.046296,1.929702,-4.845315,0.700829,-8.333210,5.376557,-1.376933,9.405246,7.962731,6.509881,-9.796218,9.345399,-9.674383,3.728971,2.711693,-2.656386,0.578510,-7.240101,-5.554172,1.897655,-2.972952,-5.054231,-0.462555,-4.571028,9.407425,6.872488,-6.024219,6.280823,-6.920463,8.910398,7.648412,-8.934233,5.858541,6.563732,-8.965525,7.023153,3.064187,0.078135,1.548637,4.640611,-2.201792,-7.838810,8.631952,0.372379,-5.234088,8.309711,-1.804259,-0.697635,2.218535,-5.499551,0.803476,-3.000803,8.585094,-0.715275,9.140221,1.708331,8.284999,-0.844157,-3.165177,-4.201179,-6.923272,-1.204029,6.621478,-3.889675,-6.655086,-0.646951,-6.824832,-9.895814,7.217494,-1.304334,-1.166879,-1.250496,1.287987,-5.462220,-6.463538,0.683265,6.682418,1.183424,-0.474307,2.832306,-6.573908,-4.328579,-2.911279,-5.555136,-5.004582,-4.410289,9.733569,-2.062093,9.675067,-2.746066,2.476761,-5.995226,5.806854,9.048948,6.103560,4.562403,-5.742501,8.570696,-2.831299,-7.046812,-7.759104,-3.615449,1.053446,4.922250,4.843283,-9.138785,4.898999,9.096107,3.553943,-0.324999,4.151374,-0.407514,-6.312036,-9.796239,-0.095059,4.825739,2.924897,-3.489120,-8.469009,9.601014,7.026638,-3.449581,-7.883439,9.403442,-7.601368,9.024962,7.709373,0.815533,9.506010,2.800888,2.619782,-4.717619,-3.138326,8.788831,-7.917190,-1.024107,1.927986,-9.725483,4.518471,7.151637,-7.923034,0.101855,-9.852726,9.812444,2.884544,3.869268,3.872053,5.929889,-2.983409,-0.710099,-1.457610,-0.843507,7.416334,1.264362,5.001570,-3.975916,5.539665,8.218167,-3.818587,4.914446,4.238774,-9.141656,8.441155,-6.521534,1.372675,-1.690399,-9.350177,3.747745,-0.006473,-1.056038,2.372701,6.316694,-8.842510,-5.638322,6.533056,-7.271237,6.760123,4.408558,4.363361,-3.147970,-6.418865,-9.035235,-2.723494,-8.770957,-2.518095,-5.236798,8.503677,7.849144,-5.067119,-5.151009,0.521553,5.420754,-8.172557,1.775182,-5.396922,-2.543549,9.561776,5.883210,-3.242663,-7.143136,-3.779036,-5.188435,-8.619677,-4.468116,5.773032,-3.331863,1.236714,6.336262,-5.227499,4.856698,2.795951,3.639155,-8.163123,-5.581852,-1.130671,-7.007533,7.039384,-1.601405,-9.557249,-8.778938,6.994274,-7.345827,-7.185226,-0.165084,4.426646,-6.763207,7.239677,1.543598,-3.631598,-6.900914,-0.956492,-7.838791,9.894782,1.876424,2.341473,-2.080300,-1.409130,8.778884,-8.963700,9.133249,-6.220320,-1.731012,4.991621,2.686556,0.644413,-3.731189,-2.594006,9.804037,0.922999,0.561406,4.383321,1.224789,8.260806,-1.316837,6.962045,1.788314,9.367786,4.872219,9.635593,4.894376,6.900167,-8.159588,-0.548335,1.599737,-3.989869,-2.966098,-2.048227,4.486162,-5.009363,-8.111121,9.102962,4.811766,4.838958,2.226046,-1.657821,-0.831559,-0.038790,4.002217,-1.466860,-8.619781,-5.593289,-2.299156,-6.832222,-8.522391,-8.295093,-8.926145,-8.872630,-3.046461,7.044099,-5.100906,-1.043842,3.018721,9.103150,4.449581,8.759530,-1.347067,-0.298865,5.702481,-8.315339,-7.124365,-5.618105,-4.242272,-3.103606,-7.580419,-5.728063,8.534909,4.423963,3.967324,-7.614513,3.549058,-4.962974,5.272267,-4.989180,9.682206,-5.552316,3.226572,4.196566,3.645357,1.835365,9.858255,-0.750542,-3.242591,0.428159,-1.597569,5.301823,0.482163,9.343072,-9.760671,0.559741,-1.513106,7.395808,-9.459255,0.690242,1.647083,-1.724689,-0.658596,3.333203,-3.003664,-0.677218,-3.560367,-9.748805,1.496461,-2.599527,-2.814220,2.611453,4.716695,-0.093899,8.344087,0.390311,-9.809285,8.631053,-5.986222,-1.523847,0.246428,8.296669,-3.076237,-8.036733,9.246728,4.976378,-8.074853,-6.512615,-0.082227,-0.903451,-9.573971,-4.409075,2.229253,3.212684,-9.850806,-7.149027,-1.363003,-3.630392,-5.469335,-5.726632,1.197106,6.678102,8.127059,-5.731274,-9.213106,2.050126,-8.083254,-7.558839,-9.634083,-0.017972,7.837462,-2.333204,-7.891126,-5.883306,5.651389,7.964222,-2.325675,7.731958,-7.857940,7.599556,-8.810896,-5.044638,-6.645321,-8.328125,-6.337759,-5.582020,4.075285,-6.305131,5.883961,-2.241564,5.283929,4.597138,-9.447859,3.033701,-2.238568,-0.093534,-2.511440,-1.224832,4.026538,8.968424,3.198659,9.549340,-8.129990,-2.919271,-9.143169,6.293695,-7.123795,2.858328,0.020640,-4.008668,-9.400885,-4.452965,4.714020,9.758754,5.468788,-8.438255,-2.443795,4.487553,7.717780,-2.305864,0.759384,-7.920897,2.919044,-9.339406,-4.471286,-2.171052,5.479915,6.009620,5.058169,1.834510,3.770082,9.715087,8.519212,3.716660,1.218908,-2.636586,5.786899,-8.867770,4.943391,2.261103,1.978578,-4.365872,-0.132103,6.891806,-4.230057,-9.716766,0.569754,-3.634326,-8.694558,0.332593,7.472686,-6.507585,-7.420303,4.883810,-4.554760,-7.121737,5.500546,-5.215502,-6.059761,5.507305,4.084604,1.769389,-7.609570,8.126899,6.047183,-7.439825,4.630385,9.185877,4.524158,3.650163,2.877890,-1.281701,-5.214951,-0.358133,-6.265664,4.883670,8.464038,-9.691971,-7.899265,-9.159685,5.986567,9.680224,-7.543352,-2.857718,6.878033,5.702260,4.097765,4.137403,-3.142825,5.337192,-0.561353,-3.771311,0.702759,0.122551,5.796574,3.159499,-3.810693,0.338823,1.080863,-1.686001,2.261577,1.649552,5.533494,-0.359313,-6.661114,4.573170,-5.576258,-5.249810,-9.618572,-0.810367,7.518154,-5.995173,-2.054418,-1.886909,-9.951037,-4.671047,-1.729485,-8.132161,4.770925,-2.522434,-9.952214,-0.874032,6.319453,-4.865912,-0.094239,0.077029,-0.683307,4.679126,8.603790,-6.555698,-9.312257,6.552829,-3.467674,3.869956,-7.776842,4.058124,4.415596,-3.976818,-5.095723,-5.533286,7.237136,5.134447,-8.228264,-6.083449,-0.775371,2.767291,9.410605,-9.785888,-7.084442,4.221121,2.563002,-2.736449,-3.449737,1.968403,2.532721,1.629261,-6.742381,0.619531,7.267754,-7.066884,-1.246660,9.583816,5.075205,-2.076048,2.050695,-4.512938,-6.192222,4.184964,0.106798,-6.398284,-6.628255,0.294986,-1.648184,3.653231,-2.134237,3.910886,9.316930,9.951079,-3.108507,0.827487,4.430391,-9.516017,-0.060314,8.064664,0.890009,-2.236962,9.992590,-4.068154,-6.603804,-7.164906,0.018939,-7.885504,-2.478872,4.092325,1.182129,-2.788365,4.960464,-9.557477,-2.456869,1.493547,2.072540,4.139954,-1.489853,-6.714047,-1.460842,5.249022,2.257273,-3.893779,4.753766,-5.885110,-6.566368,-9.639981,-4.764661,1.381360,-7.791684,-6.249970,8.952876,-9.418619,2.858018,-2.095765,0.790528,7.927477,5.755470,-6.117245,-1.081313,2.105799,6.591136,-3.518278,0.550861,-5.028938,-3.866410,9.450857,7.945149,9.578422,8.808046,-5.128937,-5.031736,3.740954,7.336583,-0.359294,-4.393319,4.447041,4.649245,6.759535,3.565966,-1.748230,-6.468868,1.508211,-1.387199,-9.242577,5.420608,-6.281561,2.057800,9.064425,-1.660898,-6.512797,-1.910351,-6.724673,3.253480,-9.518633,-9.913916,-5.859927,-2.674381,-0.356776,7.474600,-3.145827,4.380424,-1.581183,-3.216702,2.425646,9.967777,-5.359930,6.801390,-6.135734,-4.464540,-0.374338,3.741360,-6.018407,-6.972886,-1.195420,0.307338,-6.781951,-2.392320,0.005432,6.487035,2.023504,-3.893557,-0.013720,-0.217174,-5.510030,5.180270,7.098462,-5.121803,-3.444093,-5.605189,-0.477742,-0.348451,-1.630952,4.844559,9.335606,5.709252,0.574857,-3.330908,8.141458,-6.986988,-8.892284,-6.857120,9.790844,9.558011,-4.727350,-0.092623,7.154964,8.966965,7.538395,-4.124597,3.017491,4.819282,9.730430,-2.572738,1.183018,3.345184,-9.967331,3.540835,-4.709611,-4.613944,6.083854,0.851723,5.585448,-6.316639,4.141197,6.282465,-8.612915,7.180738,7.775965,3.331470,3.823167,-0.514007,-3.558541,5.059335,-3.927001,3.035275,-5.384004,-1.442320,-9.428196,1.757658,3.773811,-8.751956,8.974988,-7.720963,-6.735276,8.694377,-0.606859,8.048471,-2.838149,3.317775,-2.436410,-5.781997,6.508178,-3.236738,5.553398,0.298499,9.631187,8.326748,2.251708,6.479193,2.040588,9.434937,-4.532967,-1.068922,6.345493,8.881851,9.463926,3.018605,-8.549061,-2.707131,4.299882,9.668434,0.890186,2.848743,-5.862379,-2.762536,-4.172163,1.961297,3.655446,6.551191,2.142527,-7.914490,-3.993815,8.141146,-1.464622,-7.426257,1.970099,-9.614170,-3.873768,2.684615,-0.998344,-4.914180,-8.936901,0.223800,-1.940890,-0.316129,8.641961,-2.640074,-1.662486,-4.034037,1.850835,-9.448249,-2.151155,4.327548,6.462573,3.345983,7.971149,-4.723407,1.457616,6.573279,-8.296830,0.904783,-1.839824,9.914746,2.356181,6.696681,-8.057363,0.506892,-0.122316,-1.027826,-1.954249,6.589293,0.935614,0.049586,4.447801,-8.666396,-3.457388,3.871686,2.184564,-1.668025,3.627271,2.410867,3.259162,-2.819640,-2.690134,9.729694,5.788599,-3.145690,-1.378601,8.374845,-8.719601,6.551833,-3.580841,3.554480,3.958664,-7.148490,-0.579729,2.963590,3.384962,6.327059,-5.517858,-7.645197,-4.035829,-9.553962,-0.979142,-0.838116,-8.590675,7.843131,9.900903,-4.916506,-6.590604,4.148952,5.436067,7.685712,-7.944683,-1.248584,8.158593,-2.176215,7.228319,0.118451,0.314656,-3.288337,6.813064,-1.120518,-9.605035,-8.383328,7.823480,9.903028,-8.711913,0.463426,-7.742407,9.308700,-6.844916,9.421049,-7.938909,1.960518,-8.995119,6.159535,-9.243381,-6.856384,5.692082,8.940819,-6.312345,2.998415,3.858157,-5.933036,-8.943980,-9.985512,3.420084,-4.005544,-1.192300,6.786979,0.772368,-5.367818,-1.491970,-0.645713,3.316666,9.728008,5.798240,-9.458314,5.398005,-8.657331,-6.284275,3.204328,-3.548028,-8.181736,1.425309,7.749954,-1.198803,-8.712732,9.151017,-5.784667,2.078397,-6.865653,-7.625511,1.686903,5.159575,8.312892,-9.758466,-0.577444,-9.786281,8.070363,-7.654626,-4.235599,0.032648,-6.859838,-2.045040,2.724452,-6.780838,-9.380085,3.955122,-5.780523,1.958698,-1.375217,-7.790157,-1.846567,1.414651,6.053254,-6.047867,4.179133,-2.424250,-1.687615,-9.202898,-3.955244,-7.190534,-0.570389,0.830854,-4.716919,-9.749471,-5.011891,8.786751,-2.786630,9.208045,9.448855,2.045434,3.263201,-7.854139,-5.271977,5.396367,8.799226,5.015172,0.033712,-6.756844,7.441488,9.459817,-3.911512,-2.631826,5.982505,-4.244486,-2.224202,5.822921,1.768239,4.429737,2.959197,1.233419,-3.275009,-4.933466,8.333992,-4.640969,8.499298,-1.206154,-3.977218,-7.732365,-8.263434,-7.814237,7.279154,-5.138976,7.899520,-6.595691,4.375765,8.709299,0.308707,8.730552,2.790248,2.133342,4.153032,-3.666864,3.265564,-3.083091,4.199390,-2.200707,-2.223103,3.392511,-1.607951,-3.834950,8.858898,-4.290497,4.790504,0.192604,8.828256,-7.605301,7.245745,-5.616001,3.534042,-8.906633,-7.719184,9.906122,-9.265081,-9.783713,2.564005,-8.922327,2.611397,9.841403,-9.040506,5.716477,4.534715,8.707270,-6.630950,2.768643,-3.382818,-8.311916,-3.806644,1.749675,-1.156228,-5.191264,3.871625,2.687125,0.511764,3.267211,0.491239,5.683828,-1.967477,5.309423,-8.458034,6.517010,0.576970,8.530443,1.849686,-3.019691,3.141143,1.557915,7.745818,8.971560,9.362436,-4.139075,5.098229,-3.397195,-1.770443,-9.185120,-2.003771,8.246993,0.665278,-8.106990,-6.196889,-7.560138,7.448762,-2.204204,-2.330933,2.120661,-8.414978,4.720751,1.240880,-5.316916,2.874948,-0.857404,-7.581764,6.460233,0.308765,-4.750285,-7.930069,0.356618,2.393978,-4.465116,6.016288,1.115817,-2.276906,2.243769,-2.180649,8.881476,-1.249588,-7.488929,-5.541368,-0.561189,5.870506,9.454416,6.876524,2.635840,-1.580038,9.115248,3.776337,8.340288,3.216903,4.782358,-4.132311,8.381125,-9.011338,4.090818,-8.198219,-2.347123,5.571226,9.395566,-8.673781,7.731307,1.568589,-0.003414,3.511470,-9.671293,-6.301615,9.318085,-0.120642,5.387556,-7.328562,1.797857,-0.779916,-7.022464,7.658295,7.794243,-6.554440,-8.227461,7.212479,-6.961414,9.805612,3.717134,-7.699431,-0.394759,3.503599,7.064913,3.847556,-5.385397,0.471105,2.541266,4.942891,-7.959464,8.340283,7.320636,-8.486995,7.654340,-3.156724,1.151199,9.398490,4.258082,-6.122966,-5.769304,-2.382938,6.383358,9.103545,-4.895676,2.979996,-0.779296,-8.154657,2.715605,3.831046,-5.024210,2.533825,-9.622396,5.786866,-6.583864,9.983052,4.078133,0.868117,0.305826,1.848339,5.075196,-6.090718,4.218385,1.671615,3.055871,-0.656843,-5.811228,-1.948455,-8.313179,2.451657,7.981381,-5.220416,-6.251337,6.486254,-1.348629,7.058190,-6.661467,-4.545785,-2.210070,-9.522429,-0.474359,1.110376,2.100574,-6.285109,-8.261354,-1.096708,-1.389472,-1.206267,-4.168470,-0.439161,8.430018,9.988127,2.321500,5.007437,4.059224,-8.604958,-9.345003,0.379358,5.076294,-7.972825,2.770798,1.425639,4.976162,-2.489597,0.378982,-1.313173,-5.321140,-6.791391,8.682655,-4.017610,-6.497461,9.745441,-4.259308,-4.074999,-1.690733,1.569425,3.159372,6.484954,1.348148,-1.830328,-8.037589,4.247165,-1.537829,-8.079099,0.277435,1.148497,4.365935,2.306774,6.627826,8.194481,-1.542896,3.723367,8.669668,-3.362926,-6.887272,-3.358057,1.874065,9.912450,6.579091,-5.678817,-2.074680,-1.547303,-5.897414,-3.482842,2.962125,9.102448,-2.167558,3.218966,9.015781,-7.195828,3.125014,-5.397576,-3.104144,-3.122811,9.006696,8.998920,-8.886046,-1.156811,6.754996,-5.621823,-5.028244,-0.583870,-8.669618,9.049684,1.846995,3.920924], dtype = "float64")#candidate|4348|(1690,)|const|float64
call_4347 = relay.TupleGetItem(func_1490_call(relay.reshape(const_4348.astype('float64'), [13, 13, 10])), 0)
call_4349 = relay.TupleGetItem(func_1492_call(relay.reshape(const_4348.astype('float64'), [13, 13, 10])), 0)
output = relay.Tuple([call_4338,call_4344,call_4347,const_4348,])
output2 = relay.Tuple([call_4339,call_4345,call_4349,const_4348,])
func_4351 = relay.Function([], output)
mod['func_4351'] = func_4351
mod = relay.transform.InferType()(mod)
mutated_mod['func_4351'] = func_4351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4351_call = mutated_mod.get_global_var('func_4351')
call_4352 = func_4351_call()
output = call_4352
func_4353 = relay.Function([], output)
mutated_mod['func_4353'] = func_4353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_4354 = relay.TupleGetItem(func_610_call(), 1)
call_4355 = relay.TupleGetItem(func_611_call(), 1)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_4362 = relay.TupleGetItem(func_1037_call(), 1)
call_4363 = relay.TupleGetItem(func_1038_call(), 1)
output = relay.Tuple([call_4354,call_4362,])
output2 = relay.Tuple([call_4355,call_4363,])
func_4381 = relay.Function([], output)
mod['func_4381'] = func_4381
mod = relay.transform.InferType()(mod)
mutated_mod['func_4381'] = func_4381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4381_call = mutated_mod.get_global_var('func_4381')
call_4382 = func_4381_call()
output = call_4382
func_4383 = relay.Function([], output)
mutated_mod['func_4383'] = func_4383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_4403 = relay.TupleGetItem(func_1464_call(), 1)
call_4404 = relay.TupleGetItem(func_1466_call(), 1)
func_2363_call = mod.get_global_var('func_2363')
func_2365_call = mutated_mod.get_global_var('func_2365')
const_4420 = relay.const([[-7.356797,-5.608886,-1.155766,-7.498887,-3.271828,2.015073,7.723292,-2.314156,0.899840,6.574115,-7.712343,1.110458,8.776159,0.250554,-2.224934,1.161770,0.086168,-8.429491,-6.114647,0.327661,-4.010158,6.723394,-9.619708,6.450022,-7.079757,0.975544,-1.823285,-3.360627,4.219815,9.112164,-6.455525,-3.489280,2.970546,-0.849552,4.565667,-2.158774,-5.220995,-6.035221,4.469271,1.081067,-3.434531,4.304724,5.621983,-6.309820,5.269575,-7.122124,-8.755332,-8.548985,-0.834695,-3.936392,-8.461762,2.334299,-4.878047,1.392975,9.405308,-0.419076,3.186722,-7.275767,4.804716,-5.050988,4.942051,-1.894899,8.583354,9.982513,7.072066,-0.593434,-3.338357,9.411422,0.592884,9.334749,8.759508,-2.747133,2.077487,8.687997,1.933367,7.829822,-5.649688,-7.888436,-2.905977,7.637169,4.255842,7.160513,1.403866,7.216462,-1.143762,-0.445893,-1.396614,-8.420671,8.468627,-4.035576,6.385384,4.271705,3.288547,-3.813475,0.119884,-1.687383,1.924538,7.695248,-3.271794,7.679425,8.505783,-7.222223,-3.410209,4.964835,-5.464786,-8.011689,1.145149,1.898260,9.716804,9.629241,-9.833582,-5.290555,7.122421,-5.767778,-8.049694,-3.916390,4.664055,0.910910,-0.170792,-4.447728,-3.466973,-8.488793,-1.332317,-6.171066,7.004191,9.067549,5.032386,9.172089,4.119505,-9.234272],[7.186193,3.053980,7.208722,-4.264866,2.991292,-3.086568,5.822389,9.838555,6.001555,-2.403097,2.472559,-3.941782,5.229734,-9.764698,7.815100,-8.932284,5.500856,-3.952966,-0.189798,-5.758647,3.723869,7.513288,-6.067015,-6.392787,-6.895746,-9.491605,-2.203161,6.150507,3.470693,-9.982542,-6.952710,6.047421,-0.933589,9.247125,3.283594,-5.965719,-4.384223,3.555286,0.161707,-7.764358,-2.897869,4.918646,0.660547,-5.968989,-1.684953,-4.210056,9.502424,0.970667,2.201402,-4.773052,-3.518596,2.582570,-0.364364,2.098305,-5.767683,-6.425692,3.380325,-8.014587,-0.746796,6.420269,2.280511,9.057374,4.126667,4.996501,6.597542,4.884812,-8.651401,5.378684,-3.772445,-7.445167,-7.173397,8.765057,4.869582,3.705549,6.035502,-1.246263,-5.291919,7.356647,-6.063615,-1.632474,7.902145,-8.011521,-2.753313,-1.138756,-0.411043,6.464426,4.041589,-4.351288,-8.343839,-7.110772,-0.792815,8.888191,1.286916,9.730401,9.336941,0.185448,5.072633,-9.402168,1.558407,-3.133187,-9.398775,4.314348,7.745585,-8.566939,7.392019,9.397498,3.603909,-4.499195,7.900358,8.115364,0.599235,4.168484,-2.984642,-5.997070,5.605017,3.097026,-6.080061,7.444866,6.490490,-4.547681,6.295455,-8.199671,-9.262392,3.295712,-1.072044,-1.710697,9.640528,7.768651,6.922520,-3.778508],[-7.913097,-4.085656,-6.823920,-3.888377,0.495205,-5.481784,-9.436139,-9.541242,4.997236,0.302390,-5.831886,8.375535,9.670972,7.517236,-3.384631,3.361601,1.646116,9.475770,-8.519407,9.181952,-2.622243,-7.302211,9.299279,3.562711,-5.481241,-8.064977,-2.599657,-8.076241,-9.011715,6.905629,2.967893,-4.148323,-1.428722,-3.581995,3.066462,3.304291,1.767283,5.789329,-1.623803,8.036555,0.730926,3.225660,7.641286,9.538630,7.010524,-1.956654,-1.914215,4.256457,9.958681,9.927887,-1.922690,-1.100677,-1.079412,-5.696004,3.825843,1.455079,0.930812,-9.024748,-4.112274,7.493242,-4.390582,9.967541,-8.507076,-5.950260,-2.666814,-6.706343,-9.138993,7.776412,-1.423674,9.721580,5.160887,-2.204987,7.581610,-1.976552,0.444968,2.829177,7.545068,-3.942673,7.064037,3.233672,-4.360702,-2.198060,5.839239,0.924753,3.338204,9.840687,4.095805,-6.205580,-0.608339,-2.633192,-2.953419,-0.433543,-4.732058,1.619462,6.135870,-0.578717,-5.564434,-2.314756,-8.889741,-8.609829,-6.837215,-7.211531,9.003279,-4.148365,7.110735,0.906620,-4.366471,-0.234851,-5.736417,-3.624925,-1.052618,0.108149,-9.047589,-1.972950,0.302423,-7.141128,-5.015799,7.816463,2.114935,-3.514626,2.294528,-9.491286,3.986226,-2.578021,-6.563199,4.171520,5.062097,-0.898845,-4.175407,-5.666819],[0.987065,2.046875,-9.774965,4.058628,-6.999726,-6.774078,-0.256564,7.983583,3.835240,6.605613,-9.397901,4.806949,-4.997700,8.850354,-6.248140,-5.515488,3.657415,-7.547494,8.173561,7.776773,9.290899,0.012982,2.829396,3.318030,-2.115858,-6.546036,9.181064,1.459974,1.470197,-2.750770,-7.466289,8.976540,-4.857745,6.482131,-9.454760,8.540860,9.162901,6.397775,2.212327,8.434528,1.637044,-1.650321,5.102151,-6.488763,1.596528,9.786186,-7.704623,7.828292,-1.060579,-0.679828,4.081502,-6.118897,-0.832253,4.829913,-8.280890,8.386222,8.549535,-3.429465,9.622734,3.129862,6.935969,1.266381,-4.006217,-1.470225,0.812184,9.326131,-7.480544,7.534852,7.372384,-2.672435,-4.525586,9.510268,7.850618,-0.037443,4.505193,7.835455,-0.293790,-9.231834,2.759425,2.046066,5.180944,-4.521581,-7.936519,-7.471140,-6.534573,7.593561,-4.428292,-1.190926,-2.651887,3.834250,4.252377,-1.221592,7.691976,-3.649902,8.721263,1.554647,-1.489923,-5.239388,-9.279928,-9.879353,4.993916,7.483298,-6.913943,-6.998499,-6.408596,-2.107391,-0.616155,-5.329116,7.955537,7.162676,-1.448904,9.829748,-7.477830,-0.047758,-0.501597,0.292218,-3.950587,-2.477263,7.704378,-0.813668,-4.713523,1.214549,8.768718,-5.001664,-8.503517,-3.060452,-6.548639,6.533104,3.143966,8.999486],[-4.156176,-9.770909,5.080008,4.551441,4.789745,0.701134,1.098302,-4.331926,-7.938113,3.125798,-0.581925,0.759099,-5.113428,7.663070,-9.859414,1.970854,-7.500553,-6.607576,-1.515705,-5.812654,6.160299,6.154739,-7.713257,6.908853,-9.145905,4.316984,-7.951786,-0.737858,8.095013,9.609656,-0.330531,-2.996190,-5.524525,8.864976,-7.682476,-1.575168,8.353974,-4.336980,2.184481,-4.510828,6.550554,6.627018,-4.873216,-1.754037,3.930469,-2.653408,-3.654917,-5.730905,8.899200,-5.623270,3.461485,1.413926,-5.313053,-1.516310,8.936874,-1.636432,-6.221303,3.466385,8.147715,-0.353345,0.126880,-0.580548,5.463977,-3.816575,-3.175627,6.210769,2.394150,-9.343815,-9.181482,9.586782,5.092899,-4.928572,2.237514,3.872154,8.030496,-9.115401,-7.745502,8.172375,6.821793,-9.687855,-0.949893,-1.115283,-6.782377,7.733752,6.765428,-7.007365,-8.987431,3.547088,-8.566081,-8.778855,-7.263096,-3.761538,-3.709079,8.736767,4.645359,1.643511,5.733956,9.873792,1.357396,-4.013046,-6.551569,6.248057,-7.863438,-4.254046,1.680408,-1.630258,0.201489,-6.126063,-4.860023,-8.426712,9.520582,2.408102,3.980329,-4.187863,-6.247037,1.024561,-3.604440,7.947064,7.270900,0.986255,1.284678,3.421979,1.676370,-9.437676,0.876206,3.189033,-7.450261,7.734411,-9.751387,-9.178471],[-9.115217,0.915320,4.346874,3.312440,-0.320018,4.235997,0.753031,6.543458,9.127362,-1.632466,-6.595209,1.040264,2.186714,-4.892827,9.342659,-4.520073,-8.795938,-4.885822,-3.747172,5.200288,-6.830977,-4.726673,7.173918,-8.628805,8.529289,2.776177,3.532600,5.980179,3.965861,-4.060649,-6.708345,-0.299712,-3.645900,-9.728368,0.220121,2.479106,2.819639,6.449275,6.612084,8.803072,-4.653087,-1.112255,5.093909,-2.232675,8.535319,4.276696,8.100749,7.758298,-2.249750,4.724797,3.014622,-3.348102,-7.227651,1.406917,0.235218,9.279182,8.530491,7.528152,6.403798,9.669378,-8.643838,-3.750157,-8.066581,6.752684,-2.396819,-1.425938,-2.039806,-5.104215,-5.379175,-1.641148,-7.573789,-9.181246,-9.013821,-5.666307,3.609192,-0.833672,3.678287,-0.532266,-4.880887,-1.771016,-5.611437,-9.972749,6.500482,5.232864,-9.184825,-7.026936,9.571256,-9.148677,-6.980996,9.825979,-9.692152,-1.011722,6.164837,-0.806833,-6.985085,-0.790704,0.319155,5.741927,1.592626,6.160535,4.755247,-7.823557,-2.223152,-3.466648,5.981318,-4.380768,9.816307,8.461997,6.985447,0.982191,7.638653,-9.422311,-9.128363,6.011932,8.356891,-9.258002,-9.893695,9.230009,6.283318,-7.213822,-3.225009,0.066136,9.262589,-1.612203,-0.472410,-4.320982,0.055635,-5.549737,4.210725,4.642218],[-8.834258,6.130189,-2.697047,3.302564,-9.041567,-6.688208,8.798274,-8.856467,6.754976,8.482824,-5.602035,4.251533,6.678639,-9.641105,2.615689,3.995037,9.968700,5.611862,5.150543,3.125425,-1.183118,-2.952122,5.916064,-9.197057,1.827084,-8.441612,8.044880,6.359688,-3.495473,0.287533,8.124340,1.515482,4.415651,-9.563105,-1.620417,-1.159319,-5.150365,-6.845300,-8.999446,-1.446958,-5.281799,4.764821,-7.364642,-6.196881,-0.222447,-7.983038,-2.651744,-1.085911,-6.303231,6.133930,0.730314,3.823823,-8.867568,1.570250,-9.047990,4.062768,4.237554,7.669207,5.545061,-1.630527,7.283611,-7.345891,-7.768980,-5.691116,2.501516,8.979812,8.159588,-5.395054,-7.374068,-4.648520,2.114754,-7.137271,6.331558,-2.096558,8.150981,-9.324749,-2.956187,9.821053,-3.346366,1.983522,2.172412,-4.286890,-2.312293,-5.145044,-4.051081,0.625722,-2.437056,-1.506187,6.452214,3.269834,7.004619,-9.013792,-4.826917,7.020123,0.860857,-8.553288,3.136341,8.790851,-1.473467,2.217120,8.019984,-2.108113,-3.983350,9.261597,-7.312809,-1.751399,-4.414652,9.770472,-6.938827,1.653748,6.593076,-3.428725,-4.946550,-1.217567,-5.092857,-2.932867,7.021095,8.958577,8.994246,2.558429,9.256342,-1.602761,-6.537833,-3.602455,-1.029741,-5.404033,-4.508891,-4.652362,2.599333,1.667844],[-0.135387,1.076214,-0.956939,7.763823,5.309826,3.542138,2.836586,-6.000215,8.076610,-9.855450,2.811592,-2.681723,-7.402981,-0.816928,0.037600,0.548012,1.756223,5.562353,3.284947,-3.496724,-2.782309,-6.978564,4.200720,6.003487,7.184294,-7.442087,5.922661,-3.793489,1.603115,5.091619,-8.450181,9.785451,7.486963,-3.257005,7.520317,2.322234,-4.392078,1.812684,-2.094744,7.472164,6.431431,-2.642640,-8.316462,-5.665734,-2.758210,-4.155329,-5.960196,-2.576322,6.414574,-9.202482,8.585914,-1.984077,3.809817,9.889682,-0.208822,-2.382050,-5.450579,-9.169501,4.015428,1.154791,-6.969750,0.787492,1.741048,-8.139155,-4.822980,0.202862,-6.141844,9.255568,-6.055056,-7.337181,6.682877,-6.860415,2.502040,-1.691854,5.683121,-3.578299,-0.055008,-4.417127,-1.418946,-6.787686,6.899713,-1.223640,4.700061,-2.752181,2.825787,-0.174591,9.135665,-4.888250,-6.833033,6.642718,-4.440824,9.977683,1.740446,-7.404831,0.185478,-5.707497,8.465919,-4.864399,9.311041,-0.081293,2.289382,1.201011,3.253923,-2.420008,3.438058,2.967171,1.234560,-2.357339,-3.414611,-7.783857,0.813978,-9.356464,-6.964580,6.588034,6.283877,-1.617997,-9.755997,0.891091,0.386745,4.156161,-1.667748,7.821537,-3.819293,-3.854426,-9.933179,-6.996328,-1.753547,-2.820969,5.672560,-8.614979],[2.533850,-3.070786,-1.884299,1.513419,3.552036,-7.136077,5.586133,5.118877,4.700599,-8.574595,5.667365,7.726509,-3.918550,-3.810485,0.225190,-5.962107,6.817817,4.447666,4.525986,8.621906,8.191781,-1.299255,1.651334,-1.169515,5.635713,7.110032,8.276670,-1.127240,-0.131574,-0.480920,8.668206,2.680575,0.457578,9.755009,5.997333,3.759079,-0.679697,-5.984406,5.869800,6.867248,8.912546,8.631848,7.681356,-7.987568,-0.495523,-5.784077,-2.334311,-4.020085,-4.340871,-1.859597,1.921340,-8.181886,4.648292,2.614832,-0.794957,0.250110,5.262841,-4.339323,5.279202,9.951351,9.589572,3.662363,8.043275,4.831430,4.878351,6.669573,7.394064,9.881793,-9.209166,-3.288308,0.932532,5.406663,-0.155945,1.504001,-4.893036,-7.308139,-2.456727,9.403202,0.678780,6.436195,-0.923159,9.098582,4.222078,-1.978924,-3.171734,-4.005786,5.205974,-8.847443,5.917937,6.040520,-0.146229,-3.489048,3.362724,-0.327905,-1.568435,-4.657143,8.334472,5.648459,-5.608288,-9.725778,-5.014398,-3.878144,-3.497372,4.520447,-4.520269,-5.013489,-0.705746,-1.063360,-7.311755,2.879758,-6.425293,-1.200160,0.660764,-6.468229,4.604961,-3.607252,6.921686,6.572287,-9.773229,-3.475918,4.757407,8.344130,5.225387,-7.773473,7.371912,-3.683809,8.349658,5.756208,-8.317330,-2.906255],[-0.250668,8.790870,9.509457,-1.090686,-7.014601,-3.718160,8.142226,6.804346,9.195129,-9.984399,4.305017,5.416892,1.517384,-0.392855,-3.342583,-1.269962,9.894718,2.254490,-9.087372,-2.220234,-9.128040,6.341443,1.262570,-0.790721,-9.849921,0.309075,1.377627,-0.001624,8.754174,4.362502,4.056261,-6.412581,8.701748,8.938426,1.229777,-3.678578,-1.602917,2.570628,5.506887,1.684785,0.888222,0.320405,6.027268,8.414199,-3.558135,-5.281293,-1.480604,1.786670,-2.620753,-1.231820,-2.509634,2.532443,-2.423417,-5.074407,-0.358665,2.786475,-2.695249,7.024730,-7.377686,-8.988781,9.182409,-9.932813,-4.633588,8.998235,-5.712231,-8.457604,3.867200,0.496006,7.680804,4.773216,1.880671,0.611323,0.435256,9.533880,3.180973,1.586616,7.705519,0.605339,0.514852,-9.564755,-2.583125,-9.497898,9.278705,1.351434,-7.725815,-3.102389,4.033602,8.962380,-3.767023,-2.340275,7.864877,-2.771569,0.859770,-8.387928,2.688124,-4.551157,8.196057,2.511316,-4.790425,4.580769,0.048306,7.101425,5.713499,4.174853,1.938584,-6.144600,2.826428,5.151171,-1.697950,1.690022,0.730547,7.324624,2.495986,7.019680,9.152351,-3.884607,-4.858914,1.220814,-5.501078,-7.395023,-4.680730,-3.218815,7.253058,-4.876883,6.642522,7.535178,8.357047,-3.830448,5.123504,-0.236275],[-2.748846,1.982323,-9.897597,7.851454,-2.489047,5.060235,-6.937478,-5.844216,8.053656,6.832101,9.782617,8.330040,5.262201,1.389516,4.171965,7.524666,-8.373259,4.598305,1.532432,5.735054,-4.316640,-5.251606,3.029005,-9.518624,4.366653,3.028511,9.515484,3.352048,-5.887428,7.201093,-2.446483,-2.568741,-8.482981,-7.240381,-4.039664,4.522837,-4.762415,2.747962,-2.210026,-2.622364,3.026613,-7.888890,0.765018,3.648826,-4.239807,4.574428,2.400736,6.754773,5.347623,3.018506,-9.456176,-7.674966,-9.405153,-6.296835,-1.994342,-7.650156,-2.333545,-0.100784,-6.150959,-2.002721,-0.899846,3.603961,5.282323,6.331775,-9.757086,-2.762631,9.764956,7.801614,-2.722333,3.402294,9.687852,-1.446241,-8.372008,1.851648,-7.828000,-4.553141,6.237487,-5.765232,-3.082075,-1.798605,-2.675487,9.365858,0.429528,9.222196,-3.831801,-1.940473,-6.781324,-0.388669,8.680949,5.393796,7.215503,8.948315,3.698757,9.606989,4.620917,0.963017,-1.811281,-7.678263,0.481429,6.328119,-6.223629,0.306218,-4.921889,3.413877,9.137912,1.072496,-6.462526,-4.699406,-1.862836,-3.664573,5.797577,8.446155,-3.632880,3.395447,3.510351,-3.821276,0.865911,-4.652868,9.501084,9.022336,-6.903689,8.526222,0.067314,-7.872871,7.375873,-8.269431,-5.013021,-0.231683,2.763429,1.710871],[-8.302935,-5.831816,0.791527,2.585169,-5.571249,-6.270128,5.445318,-1.736772,1.346710,-7.288400,5.686353,5.531238,-8.261490,-4.888039,1.677714,-0.908387,3.456280,8.796994,3.908335,9.306872,-1.474303,-0.048115,9.423104,-1.519749,8.365882,8.108852,4.377900,6.364096,-4.267617,5.576026,4.923177,3.133190,-0.513395,1.630794,0.787944,-9.015005,-1.344437,2.068015,5.147999,-6.941155,-2.230869,0.353879,-5.383309,9.455482,-3.170769,5.009419,-0.990958,5.342313,5.306151,-0.003482,3.914500,-9.523008,1.911728,-1.639242,-1.293300,-4.935551,-4.818762,-7.870025,-2.104509,-3.001608,6.746703,-5.217214,-3.035896,-7.336259,-2.878862,9.439853,7.419917,-7.491230,6.924725,3.791997,6.604608,1.018893,1.271234,1.366405,6.324030,8.470060,5.092387,3.843133,7.624394,8.232445,-5.805870,6.198775,1.605003,9.833784,-3.438117,-9.840469,-2.948548,-3.060891,1.655795,6.355734,7.622440,7.582027,-5.006727,-0.668045,2.697820,8.296103,-7.057405,5.641928,-6.427328,1.578308,-4.736741,2.872810,1.735929,-6.395247,0.926993,9.758939,-0.784413,4.648956,6.318620,-3.183367,6.660073,1.888145,3.348091,8.080461,6.698699,-2.539500,-6.344146,-3.954370,2.623696,6.075735,-5.502206,4.206296,3.506574,0.867207,7.789932,1.137028,2.747639,-7.107310,-9.899401,9.280312],[-7.238879,3.729918,3.379250,-8.508241,-4.256959,4.804723,9.181550,-3.881284,3.347981,9.891377,8.558926,4.821704,0.478325,7.893873,-4.354446,8.056651,2.268627,9.875475,-7.122222,5.858613,5.183556,6.756913,-1.963240,-7.249626,5.551148,-2.311653,-5.324303,-7.754949,3.938521,5.588278,-4.804754,5.941992,3.901352,-0.124836,-3.308055,5.939972,-8.301922,-5.264008,-5.313905,-0.054279,3.017856,-8.298866,-5.745082,6.349973,8.111099,2.717665,-3.245662,0.327952,-6.184695,7.995877,5.275601,-6.975394,-2.683368,-9.749490,7.534560,-1.163807,4.658309,2.922888,2.466661,-9.303141,4.155585,-4.736874,-8.417591,-4.120011,9.857692,8.661717,-7.320281,-6.711998,2.959678,5.888162,8.244563,5.407205,-0.217543,2.097565,4.709393,-9.799647,4.430718,-7.255709,-2.281241,-1.348330,6.314557,0.776744,-4.154162,-1.710841,-8.124495,-2.352297,7.046403,8.921203,-3.028049,-9.270280,-3.482492,4.824795,8.244772,8.729841,-3.659027,-3.204015,0.031986,0.491336,6.341632,4.792957,1.752999,-3.533351,0.071067,-5.753244,-2.769822,-4.056125,-9.828667,-7.516536,4.963184,8.596448,-9.007683,9.685354,0.195836,8.035611,-0.049294,4.437500,-6.439804,8.834332,1.202676,-0.425817,-2.113091,-8.955300,-2.528829,-9.559508,-2.779689,0.928687,0.366646,-0.346164,0.420030,-4.543337]], dtype = "float32")#candidate|4420|(13, 130)|const|float32
call_4419 = relay.TupleGetItem(func_2363_call(relay.reshape(const_4420.astype('float32'), [13, 13, 10])), 1)
call_4421 = relay.TupleGetItem(func_2365_call(relay.reshape(const_4420.astype('float32'), [13, 13, 10])), 1)
output = relay.Tuple([call_4403,call_4419,const_4420,])
output2 = relay.Tuple([call_4404,call_4421,const_4420,])
func_4424 = relay.Function([], output)
mod['func_4424'] = func_4424
mod = relay.transform.InferType()(mod)
output = func_4424()
func_4425 = relay.Function([], output)
mutated_mod['func_4425'] = func_4425
mutated_mod = relay.transform.InferType()(mutated_mod)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_4426 = relay.TupleGetItem(func_820_call(), 0)
call_4427 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_4426,])
output2 = relay.Tuple([call_4427,])
func_4432 = relay.Function([], output)
mod['func_4432'] = func_4432
mod = relay.transform.InferType()(mod)
mutated_mod['func_4432'] = func_4432
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4432_call = mutated_mod.get_global_var('func_4432')
call_4433 = func_4432_call()
output = call_4433
func_4434 = relay.Function([], output)
mutated_mod['func_4434'] = func_4434
mutated_mod = relay.transform.InferType()(mutated_mod)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_4442 = relay.TupleGetItem(func_510_call(), 0)
call_4443 = relay.TupleGetItem(func_511_call(), 0)
func_1798_call = mod.get_global_var('func_1798')
func_1800_call = mutated_mod.get_global_var('func_1800')
call_4446 = relay.TupleGetItem(func_1798_call(), 0)
call_4447 = relay.TupleGetItem(func_1800_call(), 0)
output = relay.Tuple([call_4442,call_4446,])
output2 = relay.Tuple([call_4443,call_4447,])
func_4466 = relay.Function([], output)
mod['func_4466'] = func_4466
mod = relay.transform.InferType()(mod)
mutated_mod['func_4466'] = func_4466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4466_call = mutated_mod.get_global_var('func_4466')
call_4467 = func_4466_call()
output = call_4467
func_4468 = relay.Function([], output)
mutated_mod['func_4468'] = func_4468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2544_call = mod.get_global_var('func_2544')
func_2546_call = mutated_mod.get_global_var('func_2546')
call_4500 = relay.TupleGetItem(func_2544_call(), 2)
call_4501 = relay.TupleGetItem(func_2546_call(), 2)
output = relay.Tuple([call_4500,])
output2 = relay.Tuple([call_4501,])
func_4528 = relay.Function([], output)
mod['func_4528'] = func_4528
mod = relay.transform.InferType()(mod)
output = func_4528()
func_4529 = relay.Function([], output)
mutated_mod['func_4529'] = func_4529
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3746_call = mod.get_global_var('func_3746')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_4582 = relay.TupleGetItem(func_3746_call(), 0)
call_4583 = relay.TupleGetItem(func_3748_call(), 0)
func_4351_call = mod.get_global_var('func_4351')
func_4353_call = mutated_mod.get_global_var('func_4353')
call_4587 = relay.TupleGetItem(func_4351_call(), 2)
call_4588 = relay.TupleGetItem(func_4353_call(), 2)
func_3746_call = mod.get_global_var('func_3746')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_4606 = relay.TupleGetItem(func_3746_call(), 0)
call_4607 = relay.TupleGetItem(func_3748_call(), 0)
output = relay.Tuple([call_4582,call_4587,call_4606,])
output2 = relay.Tuple([call_4583,call_4588,call_4607,])
func_4610 = relay.Function([], output)
mod['func_4610'] = func_4610
mod = relay.transform.InferType()(mod)
mutated_mod['func_4610'] = func_4610
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4610_call = mutated_mod.get_global_var('func_4610')
call_4611 = func_4610_call()
output = call_4611
func_4612 = relay.Function([], output)
mutated_mod['func_4612'] = func_4612
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2544_call = mod.get_global_var('func_2544')
func_2546_call = mutated_mod.get_global_var('func_2546')
call_4617 = relay.TupleGetItem(func_2544_call(), 1)
call_4618 = relay.TupleGetItem(func_2546_call(), 1)
output = call_4617
output2 = call_4618
func_4640 = relay.Function([], output)
mod['func_4640'] = func_4640
mod = relay.transform.InferType()(mod)
mutated_mod['func_4640'] = func_4640
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4640_call = mutated_mod.get_global_var('func_4640')
call_4641 = func_4640_call()
output = call_4641
func_4642 = relay.Function([], output)
mutated_mod['func_4642'] = func_4642
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3767_call = mod.get_global_var('func_3767')
func_3768_call = mutated_mod.get_global_var('func_3768')
call_4654 = func_3767_call()
call_4655 = func_3767_call()
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_4658 = relay.TupleGetItem(func_1464_call(), 1)
call_4659 = relay.TupleGetItem(func_1466_call(), 1)
output = relay.Tuple([call_4654,call_4658,])
output2 = relay.Tuple([call_4655,call_4659,])
func_4672 = relay.Function([], output)
mod['func_4672'] = func_4672
mod = relay.transform.InferType()(mod)
output = func_4672()
func_4673 = relay.Function([], output)
mutated_mod['func_4673'] = func_4673
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4677 = relay.const([[[-6.700914,-1.541953,9.282305,-3.059361,8.301182,9.435055,2.529115,6.597604,-6.053428,-5.642304,-3.907884,8.487968,2.386206,-4.550285,-6.370196]],[[-2.885828,-2.457930,-8.701171,-8.360556,5.167880,2.598806,-9.794054,-1.184892,2.964089,-3.072668,-0.606943,-9.781471,8.884325,-6.539607,-1.690898]],[[0.697201,-3.597667,9.350852,6.159434,3.877925,8.962646,-7.516960,3.292616,-0.822792,8.717076,-7.577572,6.537955,-1.101121,8.456548,-3.617045]],[[3.142064,-3.751091,-0.623269,-9.236308,-1.521236,-4.905219,-5.401576,6.237532,-5.581066,-5.626753,-4.084133,7.883554,2.286049,-1.087487,3.774857]]], dtype = "float64")#candidate|4677|(4, 1, 15)|const|float64
uop_4678 = relay.acosh(const_4677.astype('float64')) # shape=(4, 1, 15)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_4681 = relay.TupleGetItem(func_547_call(), 0)
call_4682 = relay.TupleGetItem(func_548_call(), 0)
func_3430_call = mod.get_global_var('func_3430')
func_3431_call = mutated_mod.get_global_var('func_3431')
call_4683 = func_3430_call()
call_4684 = func_3430_call()
func_2035_call = mod.get_global_var('func_2035')
func_2037_call = mutated_mod.get_global_var('func_2037')
const_4687 = relay.const([True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True], dtype = "bool")#candidate|4687|(2535,)|const|bool
call_4686 = relay.TupleGetItem(func_2035_call(relay.reshape(const_4687.astype('bool'), [13, 13, 15])), 0)
call_4688 = relay.TupleGetItem(func_2037_call(relay.reshape(const_4687.astype('bool'), [13, 13, 15])), 0)
uop_4712 = relay.sin(uop_4678.astype('float32')) # shape=(4, 1, 15)
uop_4723 = relay.log2(const_4687.astype('float32')) # shape=(2535,)
func_1986_call = mod.get_global_var('func_1986')
func_1987_call = mutated_mod.get_global_var('func_1987')
call_4729 = relay.TupleGetItem(func_1986_call(), 0)
call_4730 = relay.TupleGetItem(func_1987_call(), 0)
output = relay.Tuple([call_4681,call_4683,call_4686,uop_4712,uop_4723,call_4729,])
output2 = relay.Tuple([call_4682,call_4684,call_4688,uop_4712,uop_4723,call_4730,])
func_4731 = relay.Function([], output)
mod['func_4731'] = func_4731
mod = relay.transform.InferType()(mod)
mutated_mod['func_4731'] = func_4731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4731_call = mutated_mod.get_global_var('func_4731')
call_4732 = func_4731_call()
output = call_4732
func_4733 = relay.Function([], output)
mutated_mod['func_4733'] = func_4733
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_4802 = func_2376_call()
call_4803 = func_2376_call()
uop_4807 = relay.asin(call_4802.astype('float32')) # shape=(13, 13, 1)
uop_4809 = relay.asin(call_4803.astype('float32')) # shape=(13, 13, 1)
func_3942_call = mod.get_global_var('func_3942')
func_3944_call = mutated_mod.get_global_var('func_3944')
call_4817 = relay.TupleGetItem(func_3942_call(), 0)
call_4818 = relay.TupleGetItem(func_3944_call(), 0)
func_4333_call = mod.get_global_var('func_4333')
func_4334_call = mutated_mod.get_global_var('func_4334')
call_4835 = func_4333_call()
call_4836 = func_4333_call()
func_3967_call = mod.get_global_var('func_3967')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_4848 = relay.TupleGetItem(func_3967_call(), 0)
call_4849 = relay.TupleGetItem(func_3969_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_4855 = relay.TupleGetItem(func_820_call(), 0)
call_4856 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([uop_4807,call_4817,call_4835,call_4848,call_4855,])
output2 = relay.Tuple([uop_4809,call_4818,call_4836,call_4849,call_4856,])
func_4878 = relay.Function([], output)
mod['func_4878'] = func_4878
mod = relay.transform.InferType()(mod)
output = func_4878()
func_4879 = relay.Function([], output)
mutated_mod['func_4879'] = func_4879
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4466_call = mod.get_global_var('func_4466')
func_4468_call = mutated_mod.get_global_var('func_4468')
call_4906 = relay.TupleGetItem(func_4466_call(), 0)
call_4907 = relay.TupleGetItem(func_4468_call(), 0)
output = relay.Tuple([call_4906,])
output2 = relay.Tuple([call_4907,])
func_4912 = relay.Function([], output)
mod['func_4912'] = func_4912
mod = relay.transform.InferType()(mod)
mutated_mod['func_4912'] = func_4912
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4912_call = mutated_mod.get_global_var('func_4912')
call_4913 = func_4912_call()
output = call_4913
func_4914 = relay.Function([], output)
mutated_mod['func_4914'] = func_4914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_4919 = func_2110_call()
call_4920 = func_2110_call()
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_4941 = relay.TupleGetItem(func_510_call(), 0)
call_4942 = relay.TupleGetItem(func_511_call(), 0)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_4952 = relay.TupleGetItem(func_531_call(), 0)
call_4953 = relay.TupleGetItem(func_533_call(), 0)
func_1662_call = mod.get_global_var('func_1662')
func_1663_call = mutated_mod.get_global_var('func_1663')
call_4954 = relay.TupleGetItem(func_1662_call(), 1)
call_4955 = relay.TupleGetItem(func_1663_call(), 1)
bop_4957 = relay.bitwise_and(call_4919.astype('uint8'), relay.reshape(call_4954.astype('uint8'), relay.shape_of(call_4919))) # shape=(13, 13, 1)
bop_4960 = relay.bitwise_and(call_4920.astype('uint8'), relay.reshape(call_4955.astype('uint8'), relay.shape_of(call_4920))) # shape=(13, 13, 1)
output = relay.Tuple([call_4941,call_4952,bop_4957,])
output2 = relay.Tuple([call_4942,call_4953,bop_4960,])
func_4964 = relay.Function([], output)
mod['func_4964'] = func_4964
mod = relay.transform.InferType()(mod)
mutated_mod['func_4964'] = func_4964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4964_call = mutated_mod.get_global_var('func_4964')
call_4965 = func_4964_call()
output = call_4965
func_4966 = relay.Function([], output)
mutated_mod['func_4966'] = func_4966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3942_call = mod.get_global_var('func_3942')
func_3944_call = mutated_mod.get_global_var('func_3944')
call_4970 = relay.TupleGetItem(func_3942_call(), 0)
call_4971 = relay.TupleGetItem(func_3944_call(), 0)
func_3011_call = mod.get_global_var('func_3011')
func_3013_call = mutated_mod.get_global_var('func_3013')
call_4983 = func_3011_call()
call_4984 = func_3011_call()
output = relay.Tuple([call_4970,call_4983,])
output2 = relay.Tuple([call_4971,call_4984,])
func_5007 = relay.Function([], output)
mod['func_5007'] = func_5007
mod = relay.transform.InferType()(mod)
output = func_5007()
func_5008 = relay.Function([], output)
mutated_mod['func_5008'] = func_5008
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1829_call = mod.get_global_var('func_1829')
func_1831_call = mutated_mod.get_global_var('func_1831')
call_5043 = func_1829_call()
call_5044 = func_1829_call()
output = relay.Tuple([call_5043,])
output2 = relay.Tuple([call_5044,])
func_5068 = relay.Function([], output)
mod['func_5068'] = func_5068
mod = relay.transform.InferType()(mod)
output = func_5068()
func_5069 = relay.Function([], output)
mutated_mod['func_5069'] = func_5069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_5079 = relay.TupleGetItem(func_1037_call(), 1)
call_5080 = relay.TupleGetItem(func_1038_call(), 1)
func_3767_call = mod.get_global_var('func_3767')
func_3768_call = mutated_mod.get_global_var('func_3768')
call_5109 = func_3767_call()
call_5110 = func_3767_call()
func_985_call = mod.get_global_var('func_985')
func_988_call = mutated_mod.get_global_var('func_988')
call_5115 = relay.TupleGetItem(func_985_call(relay.reshape(call_5109.astype('bool'), [13, 13, 1])), 1)
call_5116 = relay.TupleGetItem(func_988_call(relay.reshape(call_5109.astype('bool'), [13, 13, 1])), 1)
output = relay.Tuple([call_5079,call_5109,call_5115,])
output2 = relay.Tuple([call_5080,call_5110,call_5116,])
func_5119 = relay.Function([], output)
mod['func_5119'] = func_5119
mod = relay.transform.InferType()(mod)
output = func_5119()
func_5120 = relay.Function([], output)
mutated_mod['func_5120'] = func_5120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_5174 = relay.TupleGetItem(func_780_call(), 0)
call_5175 = relay.TupleGetItem(func_782_call(), 0)
output = call_5174
output2 = call_5175
func_5214 = relay.Function([], output)
mod['func_5214'] = func_5214
mod = relay.transform.InferType()(mod)
output = func_5214()
func_5215 = relay.Function([], output)
mutated_mod['func_5215'] = func_5215
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_5233 = relay.TupleGetItem(func_547_call(), 0)
call_5234 = relay.TupleGetItem(func_548_call(), 0)
output = call_5233
output2 = call_5234
func_5262 = relay.Function([], output)
mod['func_5262'] = func_5262
mod = relay.transform.InferType()(mod)
mutated_mod['func_5262'] = func_5262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5262_call = mutated_mod.get_global_var('func_5262')
call_5263 = func_5262_call()
output = call_5263
func_5264 = relay.Function([], output)
mutated_mod['func_5264'] = func_5264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_5314 = relay.TupleGetItem(func_3472_call(), 0)
call_5315 = relay.TupleGetItem(func_3474_call(), 0)
output = call_5314
output2 = call_5315
func_5330 = relay.Function([], output)
mod['func_5330'] = func_5330
mod = relay.transform.InferType()(mod)
output = func_5330()
func_5331 = relay.Function([], output)
mutated_mod['func_5331'] = func_5331
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4731_call = mod.get_global_var('func_4731')
func_4733_call = mutated_mod.get_global_var('func_4733')
call_5353 = relay.TupleGetItem(func_4731_call(), 2)
call_5354 = relay.TupleGetItem(func_4733_call(), 2)
output = relay.Tuple([call_5353,])
output2 = relay.Tuple([call_5354,])
func_5363 = relay.Function([], output)
mod['func_5363'] = func_5363
mod = relay.transform.InferType()(mod)
mutated_mod['func_5363'] = func_5363
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5363_call = mutated_mod.get_global_var('func_5363')
call_5364 = func_5363_call()
output = call_5364
func_5365 = relay.Function([], output)
mutated_mod['func_5365'] = func_5365
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2169_call = mod.get_global_var('func_2169')
func_2171_call = mutated_mod.get_global_var('func_2171')
call_5423 = relay.TupleGetItem(func_2169_call(), 0)
call_5424 = relay.TupleGetItem(func_2171_call(), 0)
func_5068_call = mod.get_global_var('func_5068')
func_5069_call = mutated_mod.get_global_var('func_5069')
call_5459 = relay.TupleGetItem(func_5068_call(), 0)
call_5460 = relay.TupleGetItem(func_5069_call(), 0)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_5463 = relay.TupleGetItem(func_531_call(), 0)
call_5464 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([call_5423,call_5459,call_5463,])
output2 = relay.Tuple([call_5424,call_5460,call_5464,])
func_5486 = relay.Function([], output)
mod['func_5486'] = func_5486
mod = relay.transform.InferType()(mod)
mutated_mod['func_5486'] = func_5486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5486_call = mutated_mod.get_global_var('func_5486')
call_5487 = func_5486_call()
output = call_5487
func_5488 = relay.Function([], output)
mutated_mod['func_5488'] = func_5488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1662_call = mod.get_global_var('func_1662')
func_1663_call = mutated_mod.get_global_var('func_1663')
call_5615 = relay.TupleGetItem(func_1662_call(), 1)
call_5616 = relay.TupleGetItem(func_1663_call(), 1)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_5620 = relay.TupleGetItem(func_1888_call(), 0)
call_5621 = relay.TupleGetItem(func_1890_call(), 0)
output = relay.Tuple([call_5615,call_5620,])
output2 = relay.Tuple([call_5616,call_5621,])
func_5637 = relay.Function([], output)
mod['func_5637'] = func_5637
mod = relay.transform.InferType()(mod)
output = func_5637()
func_5638 = relay.Function([], output)
mutated_mod['func_5638'] = func_5638
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4466_call = mod.get_global_var('func_4466')
func_4468_call = mutated_mod.get_global_var('func_4468')
call_5682 = relay.TupleGetItem(func_4466_call(), 1)
call_5683 = relay.TupleGetItem(func_4468_call(), 1)
output = call_5682
output2 = call_5683
func_5688 = relay.Function([], output)
mod['func_5688'] = func_5688
mod = relay.transform.InferType()(mod)
mutated_mod['func_5688'] = func_5688
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5688_call = mutated_mod.get_global_var('func_5688')
call_5689 = func_5688_call()
output = call_5689
func_5690 = relay.Function([], output)
mutated_mod['func_5690'] = func_5690
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5068_call = mod.get_global_var('func_5068')
func_5069_call = mutated_mod.get_global_var('func_5069')
call_5721 = relay.TupleGetItem(func_5068_call(), 0)
call_5722 = relay.TupleGetItem(func_5069_call(), 0)
const_5723 = relay.const([[[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False]],[[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True]],[[True],[True],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[True]],[[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True]],[[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False]],[[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False]],[[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True]],[[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False]],[[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False]],[[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True]],[[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False]],[[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[True]],[[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False]]], dtype = "bool")#candidate|5723|(13, 13, 1)|const|bool
bop_5724 = relay.equal(call_5721.astype('bool'), relay.reshape(const_5723.astype('bool'), relay.shape_of(call_5721))) # shape=(13, 13, 1)
bop_5727 = relay.equal(call_5722.astype('bool'), relay.reshape(const_5723.astype('bool'), relay.shape_of(call_5722))) # shape=(13, 13, 1)
output = bop_5724
output2 = bop_5727
func_5735 = relay.Function([], output)
mod['func_5735'] = func_5735
mod = relay.transform.InferType()(mod)
output = func_5735()
func_5736 = relay.Function([], output)
mutated_mod['func_5736'] = func_5736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1142_call = mod.get_global_var('func_1142')
func_1143_call = mutated_mod.get_global_var('func_1143')
call_5771 = relay.TupleGetItem(func_1142_call(), 0)
call_5772 = relay.TupleGetItem(func_1143_call(), 0)
func_3130_call = mod.get_global_var('func_3130')
func_3131_call = mutated_mod.get_global_var('func_3131')
call_5784 = relay.TupleGetItem(func_3130_call(), 0)
call_5785 = relay.TupleGetItem(func_3131_call(), 0)
output = relay.Tuple([call_5771,call_5784,])
output2 = relay.Tuple([call_5772,call_5785,])
func_5791 = relay.Function([], output)
mod['func_5791'] = func_5791
mod = relay.transform.InferType()(mod)
mutated_mod['func_5791'] = func_5791
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5791_call = mutated_mod.get_global_var('func_5791')
call_5792 = func_5791_call()
output = call_5792
func_5793 = relay.Function([], output)
mutated_mod['func_5793'] = func_5793
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_5812 = relay.TupleGetItem(func_547_call(), 0)
call_5813 = relay.TupleGetItem(func_548_call(), 0)
output = call_5812
output2 = call_5813
func_5814 = relay.Function([], output)
mod['func_5814'] = func_5814
mod = relay.transform.InferType()(mod)
mutated_mod['func_5814'] = func_5814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5814_call = mutated_mod.get_global_var('func_5814')
call_5815 = func_5814_call()
output = call_5815
func_5816 = relay.Function([], output)
mutated_mod['func_5816'] = func_5816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3073_call = mod.get_global_var('func_3073')
func_3075_call = mutated_mod.get_global_var('func_3075')
call_5829 = relay.TupleGetItem(func_3073_call(), 1)
call_5830 = relay.TupleGetItem(func_3075_call(), 1)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_5831 = relay.TupleGetItem(func_1464_call(), 0)
call_5832 = relay.TupleGetItem(func_1466_call(), 0)
output = relay.Tuple([call_5829,call_5831,])
output2 = relay.Tuple([call_5830,call_5832,])
func_5839 = relay.Function([], output)
mod['func_5839'] = func_5839
mod = relay.transform.InferType()(mod)
output = func_5839()
func_5840 = relay.Function([], output)
mutated_mod['func_5840'] = func_5840
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5947 = relay.var("var_5947", dtype = "float64", shape = (3, 9, 6))#candidate|5947|(3, 9, 6)|var|float64
var_5948 = relay.var("var_5948", dtype = "float64", shape = (3, 9, 6))#candidate|5948|(3, 9, 6)|var|float64
bop_5949 = relay.floor_divide(var_5947.astype('float64'), relay.reshape(var_5948.astype('float64'), relay.shape_of(var_5947))) # shape=(3, 9, 6)
output = relay.Tuple([bop_5949,])
output2 = relay.Tuple([bop_5949,])
func_5958 = relay.Function([var_5947,var_5948,], output)
mod['func_5958'] = func_5958
mod = relay.transform.InferType()(mod)
mutated_mod['func_5958'] = func_5958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5958_call = mutated_mod.get_global_var('func_5958')
var_5960 = relay.var("var_5960", dtype = "float64", shape = (3, 9, 6))#candidate|5960|(3, 9, 6)|var|float64
var_5961 = relay.var("var_5961", dtype = "float64", shape = (3, 9, 6))#candidate|5961|(3, 9, 6)|var|float64
call_5959 = func_5958_call(var_5960,var_5961,)
output = call_5959
func_5962 = relay.Function([var_5960,var_5961,], output)
mutated_mod['func_5962'] = func_5962
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4879_call = mutated_mod.get_global_var('func_4879')
call_5967 = relay.TupleGetItem(func_4878_call(), 3)
call_5968 = relay.TupleGetItem(func_4879_call(), 3)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_5984 = relay.TupleGetItem(func_904_call(relay.reshape(call_5967.astype('bool'), [13, 13, 1])), 0)
call_5985 = relay.TupleGetItem(func_906_call(relay.reshape(call_5967.astype('bool'), [13, 13, 1])), 0)
output = relay.Tuple([call_5967,call_5984,])
output2 = relay.Tuple([call_5968,call_5985,])
func_6002 = relay.Function([], output)
mod['func_6002'] = func_6002
mod = relay.transform.InferType()(mod)
mutated_mod['func_6002'] = func_6002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mutated_mod.get_global_var('func_6002')
call_6003 = func_6002_call()
output = call_6003
func_6004 = relay.Function([], output)
mutated_mod['func_6004'] = func_6004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_6010 = func_2376_call()
call_6011 = func_2376_call()
func_1759_call = mod.get_global_var('func_1759')
func_1761_call = mutated_mod.get_global_var('func_1761')
call_6030 = relay.TupleGetItem(func_1759_call(), 3)
call_6031 = relay.TupleGetItem(func_1761_call(), 3)
func_4610_call = mod.get_global_var('func_4610')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_6032 = relay.TupleGetItem(func_4610_call(), 1)
call_6033 = relay.TupleGetItem(func_4612_call(), 1)
output = relay.Tuple([call_6010,call_6030,call_6032,])
output2 = relay.Tuple([call_6011,call_6031,call_6033,])
func_6034 = relay.Function([], output)
mod['func_6034'] = func_6034
mod = relay.transform.InferType()(mod)
output = func_6034()
func_6035 = relay.Function([], output)
mutated_mod['func_6035'] = func_6035
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3967_call = mod.get_global_var('func_3967')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_6061 = relay.TupleGetItem(func_3967_call(), 0)
call_6062 = relay.TupleGetItem(func_3969_call(), 0)
output = call_6061
output2 = call_6062
func_6063 = relay.Function([], output)
mod['func_6063'] = func_6063
mod = relay.transform.InferType()(mod)
output = func_6063()
func_6064 = relay.Function([], output)
mutated_mod['func_6064'] = func_6064
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mod.get_global_var('func_2286')
func_2287_call = mutated_mod.get_global_var('func_2287')
call_6074 = relay.TupleGetItem(func_2286_call(), 0)
call_6075 = relay.TupleGetItem(func_2287_call(), 0)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_6080 = relay.TupleGetItem(func_1037_call(), 1)
call_6081 = relay.TupleGetItem(func_1038_call(), 1)
output = relay.Tuple([call_6074,call_6080,])
output2 = relay.Tuple([call_6075,call_6081,])
func_6096 = relay.Function([], output)
mod['func_6096'] = func_6096
mod = relay.transform.InferType()(mod)
output = func_6096()
func_6097 = relay.Function([], output)
mutated_mod['func_6097'] = func_6097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3103_call = mod.get_global_var('func_3103')
func_3105_call = mutated_mod.get_global_var('func_3105')
call_6109 = relay.TupleGetItem(func_3103_call(), 0)
call_6110 = relay.TupleGetItem(func_3105_call(), 0)
func_4199_call = mod.get_global_var('func_4199')
func_4201_call = mutated_mod.get_global_var('func_4201')
var_6117 = relay.var("var_6117", dtype = "float32", shape = (7,))#candidate|6117|(7,)|var|float32
call_6116 = relay.TupleGetItem(func_4199_call(relay.reshape(var_6117.astype('float32'), [7,])), 0)
call_6118 = relay.TupleGetItem(func_4201_call(relay.reshape(var_6117.astype('float32'), [7,])), 0)
output = relay.Tuple([call_6109,call_6116,var_6117,])
output2 = relay.Tuple([call_6110,call_6118,var_6117,])
func_6135 = relay.Function([var_6117,], output)
mod['func_6135'] = func_6135
mod = relay.transform.InferType()(mod)
var_6136 = relay.var("var_6136", dtype = "float32", shape = (7,))#candidate|6136|(7,)|var|float32
output = func_6135(var_6136)
func_6137 = relay.Function([var_6136], output)
mutated_mod['func_6137'] = func_6137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6161 = relay.var("var_6161", dtype = "float64", shape = (7, 2, 1))#candidate|6161|(7, 2, 1)|var|float64
uop_6162 = relay.sigmoid(var_6161.astype('float64')) # shape=(7, 2, 1)
bop_6192 = relay.right_shift(var_6161.astype('int8'), relay.reshape(uop_6162.astype('int8'), relay.shape_of(var_6161))) # shape=(7, 2, 1)
output = bop_6192
output2 = bop_6192
func_6195 = relay.Function([var_6161,], output)
mod['func_6195'] = func_6195
mod = relay.transform.InferType()(mod)
var_6196 = relay.var("var_6196", dtype = "float64", shape = (7, 2, 1))#candidate|6196|(7, 2, 1)|var|float64
output = func_6195(var_6196)
func_6197 = relay.Function([var_6196], output)
mutated_mod['func_6197'] = func_6197
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6199 = relay.const([[[-7,4,-3,2,5,1,7,-10],[8,2,-7,1,2,8,-10,-7],[-9,2,6,-7,7,-4,5,-9],[-9,-6,5,-2,7,-8,10,-3],[-4,3,8,-10,2,-9,8,-10],[8,-5,-3,2,7,-6,-5,8],[-5,-1,4,6,-7,-3,-3,-4],[-8,4,4,-3,7,-9,-10,4],[-7,8,8,7,1,10,4,-4],[3,-8,-3,-9,2,-5,-5,10]],[[3,5,-4,-7,-2,-10,3,1],[-2,-2,-9,7,10,-6,10,1],[5,-7,8,-5,-2,-9,9,-10],[6,-7,-6,-6,6,-3,9,-2],[-10,3,-6,8,-3,3,-4,4],[7,-7,-4,9,-7,8,8,10],[10,6,2,-6,-1,-9,-3,9],[2,5,2,-10,8,-7,-10,6],[10,8,8,-9,2,-7,10,-7],[1,2,5,4,-2,2,6,3]],[[-10,10,-6,8,-6,3,9,2],[-1,5,8,9,-10,1,-9,-4],[7,6,2,1,6,-5,5,7],[4,2,-3,2,-2,-9,-9,-9],[-4,10,-8,3,-7,9,8,10],[1,-5,-2,8,-2,-6,-10,9],[-7,-2,-2,-9,5,-4,5,8],[5,2,2,3,7,-7,2,2],[5,-6,-1,9,-2,-3,-7,7],[-4,-1,-7,10,-6,2,3,9]],[[8,-6,-2,-6,-9,3,8,10],[-9,10,-7,-1,-9,1,4,9],[-7,2,-1,-4,-7,-6,9,9],[-7,5,1,-7,6,2,9,-4],[8,8,6,10,10,-8,-4,-8],[-6,-6,-6,9,2,4,3,-10],[7,10,1,-5,-8,2,10,4],[5,-4,5,-5,-5,10,10,-10],[-9,10,-2,1,-8,5,-4,-3],[-1,2,-2,-6,-7,-6,-6,5]],[[9,-5,8,3,10,-5,7,5],[-7,-7,-3,6,7,10,10,-1],[9,-10,-4,5,10,-8,8,-6],[-8,5,-6,-5,5,-8,-9,4],[7,-6,-8,4,-1,-5,-6,5],[6,7,-1,4,-6,-2,3,2],[1,-2,-9,5,1,-10,-4,10],[4,-1,10,4,-8,-10,2,5],[-9,2,-5,9,-10,-2,-3,4],[10,6,-1,-5,-7,-3,6,-4]],[[-5,5,5,8,3,8,4,5],[7,3,2,-8,2,7,9,5],[8,-6,5,6,5,6,-8,-5],[-4,3,-6,-4,2,6,-5,-5],[-4,5,6,9,-9,-3,6,2],[-6,-4,5,1,-1,1,10,8],[9,-5,-7,10,-7,-3,-3,-3],[-9,1,6,3,9,-3,2,-6],[7,9,6,-1,6,-6,-6,-10],[-5,-1,5,10,8,4,7,4]],[[-1,-1,4,-10,6,9,-4,-9],[2,-1,3,-10,7,2,3,-9],[1,-1,-1,-5,-8,9,5,-2],[7,1,-7,1,-4,7,1,6],[-7,6,8,5,8,-8,3,2],[-3,9,4,3,5,9,-7,7],[-2,10,-6,7,-10,-9,-5,2],[-3,-10,-1,9,5,1,3,-6],[10,-6,-2,2,-8,-4,1,-4],[6,-5,9,4,-4,-7,-2,-3]],[[-8,9,-3,-1,-2,-5,2,-1],[-3,7,2,7,-8,-6,-5,3],[9,-5,-2,3,-3,9,8,-6],[-6,-3,6,-8,-4,5,3,-5],[9,-5,6,5,6,7,-1,5],[5,10,9,6,-10,3,8,-6],[-5,5,6,-3,1,-6,-10,-4],[8,6,9,9,4,3,-7,6],[9,-7,3,-9,9,-9,-4,-6],[6,-10,-6,4,-10,-2,5,2]],[[1,-9,9,-9,1,9,-2,10],[9,-10,-8,6,1,-6,8,-8],[-7,-3,3,7,1,-1,-3,8],[-10,8,5,5,-4,2,-1,10],[7,4,-7,-6,-7,1,8,1],[-2,-4,-4,2,-2,-9,5,10],[-5,2,7,2,6,1,3,-2],[2,-1,-6,6,7,10,-7,4],[7,5,7,-6,-1,5,-3,-8],[-2,1,3,-8,3,2,8,-3]]], dtype = "uint16")#candidate|6199|(9, 10, 8)|const|uint16
var_6200 = relay.var("var_6200", dtype = "uint16", shape = (9, 10, 8))#candidate|6200|(9, 10, 8)|var|uint16
bop_6201 = relay.right_shift(const_6199.astype('uint16'), relay.reshape(var_6200.astype('uint16'), relay.shape_of(const_6199))) # shape=(9, 10, 8)
uop_6206 = relay.log10(var_6200.astype('float32')) # shape=(9, 10, 8)
func_2544_call = mod.get_global_var('func_2544')
func_2546_call = mutated_mod.get_global_var('func_2546')
call_6248 = relay.TupleGetItem(func_2544_call(), 2)
call_6249 = relay.TupleGetItem(func_2546_call(), 2)
output = relay.Tuple([bop_6201,uop_6206,call_6248,])
output2 = relay.Tuple([bop_6201,uop_6206,call_6249,])
func_6250 = relay.Function([var_6200,], output)
mod['func_6250'] = func_6250
mod = relay.transform.InferType()(mod)
mutated_mod['func_6250'] = func_6250
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6251 = relay.var("var_6251", dtype = "uint16", shape = (9, 10, 8))#candidate|6251|(9, 10, 8)|var|uint16
func_6250_call = mutated_mod.get_global_var('func_6250')
call_6252 = func_6250_call(var_6251)
output = call_6252
func_6253 = relay.Function([var_6251], output)
mutated_mod['func_6253'] = func_6253
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6373 = relay.var("var_6373", dtype = "uint8", shape = ())#candidate|6373|()|var|uint8
var_6374 = relay.var("var_6374", dtype = "uint8", shape = (8, 8, 1))#candidate|6374|(8, 8, 1)|var|uint8
bop_6375 = relay.less_equal(var_6373.astype('bool'), var_6374.astype('bool')) # shape=(8, 8, 1)
bop_6378 = relay.divide(var_6373.astype('float64'), bop_6375.astype('float64')) # shape=(8, 8, 1)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_6394 = relay.TupleGetItem(func_5119_call(), 1)
call_6395 = relay.TupleGetItem(func_5120_call(), 1)
bop_6396 = relay.greater_equal(var_6373.astype('bool'), var_6374.astype('bool')) # shape=(8, 8, 1)
func_985_call = mod.get_global_var('func_985')
func_988_call = mutated_mod.get_global_var('func_988')
call_6408 = relay.TupleGetItem(func_985_call(relay.reshape(call_6394.astype('bool'), [13, 13, 1])), 0)
call_6409 = relay.TupleGetItem(func_988_call(relay.reshape(call_6394.astype('bool'), [13, 13, 1])), 0)
func_1414_call = mod.get_global_var('func_1414')
func_1415_call = mutated_mod.get_global_var('func_1415')
call_6413 = relay.TupleGetItem(func_1414_call(), 1)
call_6414 = relay.TupleGetItem(func_1415_call(), 1)
output = relay.Tuple([bop_6378,call_6394,bop_6396,call_6408,call_6413,])
output2 = relay.Tuple([bop_6378,call_6395,bop_6396,call_6409,call_6414,])
func_6417 = relay.Function([var_6373,var_6374,], output)
mod['func_6417'] = func_6417
mod = relay.transform.InferType()(mod)
var_6418 = relay.var("var_6418", dtype = "uint8", shape = ())#candidate|6418|()|var|uint8
var_6419 = relay.var("var_6419", dtype = "uint8", shape = (8, 8, 1))#candidate|6419|(8, 8, 1)|var|uint8
output = func_6417(var_6418,var_6419,)
func_6420 = relay.Function([var_6418,var_6419,], output)
mutated_mod['func_6420'] = func_6420
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2169_call = mod.get_global_var('func_2169')
func_2171_call = mutated_mod.get_global_var('func_2171')
call_6473 = relay.TupleGetItem(func_2169_call(), 0)
call_6474 = relay.TupleGetItem(func_2171_call(), 0)
func_5735_call = mod.get_global_var('func_5735')
func_5736_call = mutated_mod.get_global_var('func_5736')
call_6492 = func_5735_call()
call_6493 = func_5735_call()
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_6495 = relay.TupleGetItem(func_780_call(), 0)
call_6496 = relay.TupleGetItem(func_782_call(), 0)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_6504 = relay.TupleGetItem(func_510_call(), 0)
call_6505 = relay.TupleGetItem(func_511_call(), 0)
output = relay.Tuple([call_6473,call_6492,call_6495,call_6504,])
output2 = relay.Tuple([call_6474,call_6493,call_6496,call_6505,])
func_6524 = relay.Function([], output)
mod['func_6524'] = func_6524
mod = relay.transform.InferType()(mod)
mutated_mod['func_6524'] = func_6524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6524_call = mutated_mod.get_global_var('func_6524')
call_6525 = func_6524_call()
output = call_6525
func_6526 = relay.Function([], output)
mutated_mod['func_6526'] = func_6526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3208_call = mod.get_global_var('func_3208')
func_3210_call = mutated_mod.get_global_var('func_3210')
call_6571 = func_3208_call()
call_6572 = func_3208_call()
output = call_6571
output2 = call_6572
func_6578 = relay.Function([], output)
mod['func_6578'] = func_6578
mod = relay.transform.InferType()(mod)
mutated_mod['func_6578'] = func_6578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6578_call = mutated_mod.get_global_var('func_6578')
call_6579 = func_6578_call()
output = call_6579
func_6580 = relay.Function([], output)
mutated_mod['func_6580'] = func_6580
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5486_call = mod.get_global_var('func_5486')
func_5488_call = mutated_mod.get_global_var('func_5488')
call_6589 = relay.TupleGetItem(func_5486_call(), 1)
call_6590 = relay.TupleGetItem(func_5488_call(), 1)
output = call_6589
output2 = call_6590
func_6595 = relay.Function([], output)
mod['func_6595'] = func_6595
mod = relay.transform.InferType()(mod)
output = func_6595()
func_6596 = relay.Function([], output)
mutated_mod['func_6596'] = func_6596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3208_call = mod.get_global_var('func_3208')
func_3210_call = mutated_mod.get_global_var('func_3210')
call_6686 = func_3208_call()
call_6687 = func_3208_call()
var_6688 = relay.var("var_6688", dtype = "float64", shape = (13, 13, 12))#candidate|6688|(13, 13, 12)|var|float64
bop_6689 = relay.less(call_6686.astype('bool'), var_6688.astype('bool')) # shape=(13, 13, 12)
bop_6692 = relay.less(call_6687.astype('bool'), var_6688.astype('bool')) # shape=(13, 13, 12)
output = bop_6689
output2 = bop_6692
func_6700 = relay.Function([var_6688,], output)
mod['func_6700'] = func_6700
mod = relay.transform.InferType()(mod)
var_6701 = relay.var("var_6701", dtype = "float64", shape = (13, 13, 12))#candidate|6701|(13, 13, 12)|var|float64
output = func_6700(var_6701)
func_6702 = relay.Function([var_6701], output)
mutated_mod['func_6702'] = func_6702
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3712_call = mod.get_global_var('func_3712')
func_3714_call = mutated_mod.get_global_var('func_3714')
call_6756 = relay.TupleGetItem(func_3712_call(), 1)
call_6757 = relay.TupleGetItem(func_3714_call(), 1)
output = relay.Tuple([call_6756,])
output2 = relay.Tuple([call_6757,])
func_6763 = relay.Function([], output)
mod['func_6763'] = func_6763
mod = relay.transform.InferType()(mod)
output = func_6763()
func_6764 = relay.Function([], output)
mutated_mod['func_6764'] = func_6764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2695_call = mod.get_global_var('func_2695')
func_2696_call = mutated_mod.get_global_var('func_2696')
call_6777 = relay.TupleGetItem(func_2695_call(), 0)
call_6778 = relay.TupleGetItem(func_2696_call(), 0)
output = call_6777
output2 = call_6778
func_6795 = relay.Function([], output)
mod['func_6795'] = func_6795
mod = relay.transform.InferType()(mod)
output = func_6795()
func_6796 = relay.Function([], output)
mutated_mod['func_6796'] = func_6796
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4351_call = mod.get_global_var('func_4351')
func_4353_call = mutated_mod.get_global_var('func_4353')
call_6828 = relay.TupleGetItem(func_4351_call(), 1)
call_6829 = relay.TupleGetItem(func_4353_call(), 1)
output = call_6828
output2 = call_6829
func_6847 = relay.Function([], output)
mod['func_6847'] = func_6847
mod = relay.transform.InferType()(mod)
mutated_mod['func_6847'] = func_6847
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6847_call = mutated_mod.get_global_var('func_6847')
call_6848 = func_6847_call()
output = call_6848
func_6849 = relay.Function([], output)
mutated_mod['func_6849'] = func_6849
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2623_call = mod.get_global_var('func_2623')
func_2625_call = mutated_mod.get_global_var('func_2625')
call_6860 = func_2623_call()
call_6861 = func_2623_call()
var_6862 = relay.var("var_6862", dtype = "int8", shape = (13, 13, 2))#candidate|6862|(13, 13, 2)|var|int8
bop_6863 = relay.subtract(call_6860.astype('uint8'), var_6862.astype('uint8')) # shape=(13, 13, 2)
bop_6866 = relay.subtract(call_6861.astype('uint8'), var_6862.astype('uint8')) # shape=(13, 13, 2)
output = bop_6863
output2 = bop_6866
func_6888 = relay.Function([var_6862,], output)
mod['func_6888'] = func_6888
mod = relay.transform.InferType()(mod)
mutated_mod['func_6888'] = func_6888
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6889 = relay.var("var_6889", dtype = "int8", shape = (13, 13, 2))#candidate|6889|(13, 13, 2)|var|int8
func_6888_call = mutated_mod.get_global_var('func_6888')
call_6890 = func_6888_call(var_6889)
output = call_6890
func_6891 = relay.Function([var_6889], output)
mutated_mod['func_6891'] = func_6891
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3430_call = mod.get_global_var('func_3430')
func_3431_call = mutated_mod.get_global_var('func_3431')
call_6978 = func_3430_call()
call_6979 = func_3430_call()
func_4731_call = mod.get_global_var('func_4731')
func_4733_call = mutated_mod.get_global_var('func_4733')
call_6980 = relay.TupleGetItem(func_4731_call(), 3)
call_6981 = relay.TupleGetItem(func_4733_call(), 3)
output = relay.Tuple([call_6978,call_6980,])
output2 = relay.Tuple([call_6979,call_6981,])
func_7040 = relay.Function([], output)
mod['func_7040'] = func_7040
mod = relay.transform.InferType()(mod)
mutated_mod['func_7040'] = func_7040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7040_call = mutated_mod.get_global_var('func_7040')
call_7041 = func_7040_call()
output = call_7041
func_7042 = relay.Function([], output)
mutated_mod['func_7042'] = func_7042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1414_call = mod.get_global_var('func_1414')
func_1415_call = mutated_mod.get_global_var('func_1415')
call_7086 = relay.TupleGetItem(func_1414_call(), 0)
call_7087 = relay.TupleGetItem(func_1415_call(), 0)
func_4015_call = mod.get_global_var('func_4015')
func_4017_call = mutated_mod.get_global_var('func_4017')
call_7097 = func_4015_call()
call_7098 = func_4015_call()
func_4610_call = mod.get_global_var('func_4610')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_7106 = relay.TupleGetItem(func_4610_call(), 1)
call_7107 = relay.TupleGetItem(func_4612_call(), 1)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_7112 = relay.TupleGetItem(func_468_call(), 1)
call_7113 = relay.TupleGetItem(func_470_call(), 1)
output = relay.Tuple([call_7086,call_7097,call_7106,call_7112,])
output2 = relay.Tuple([call_7087,call_7098,call_7107,call_7113,])
func_7120 = relay.Function([], output)
mod['func_7120'] = func_7120
mod = relay.transform.InferType()(mod)
mutated_mod['func_7120'] = func_7120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7120_call = mutated_mod.get_global_var('func_7120')
call_7121 = func_7120_call()
output = call_7121
func_7122 = relay.Function([], output)
mutated_mod['func_7122'] = func_7122
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5735_call = mod.get_global_var('func_5735')
func_5736_call = mutated_mod.get_global_var('func_5736')
call_7196 = func_5735_call()
call_7197 = func_5735_call()
func_3858_call = mod.get_global_var('func_3858')
func_3859_call = mutated_mod.get_global_var('func_3859')
call_7208 = func_3858_call()
call_7209 = func_3858_call()
func_1829_call = mod.get_global_var('func_1829')
func_1831_call = mutated_mod.get_global_var('func_1831')
call_7228 = func_1829_call()
call_7229 = func_1829_call()
func_6135_call = mod.get_global_var('func_6135')
func_6137_call = mutated_mod.get_global_var('func_6137')
var_7232 = relay.var("var_7232", dtype = "float32", shape = (7,))#candidate|7232|(7,)|var|float32
call_7231 = relay.TupleGetItem(func_6135_call(relay.reshape(var_7232.astype('float32'), [7,])), 1)
call_7233 = relay.TupleGetItem(func_6137_call(relay.reshape(var_7232.astype('float32'), [7,])), 1)
output = relay.Tuple([call_7196,call_7208,call_7228,call_7231,var_7232,])
output2 = relay.Tuple([call_7197,call_7209,call_7229,call_7233,var_7232,])
func_7262 = relay.Function([var_7232,], output)
mod['func_7262'] = func_7262
mod = relay.transform.InferType()(mod)
var_7263 = relay.var("var_7263", dtype = "float32", shape = (7,))#candidate|7263|(7,)|var|float32
output = func_7262(var_7263)
func_7264 = relay.Function([var_7263], output)
mutated_mod['func_7264'] = func_7264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3858_call = mod.get_global_var('func_3858')
func_3859_call = mutated_mod.get_global_var('func_3859')
call_7329 = func_3858_call()
call_7330 = func_3858_call()
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_7337 = func_2376_call()
call_7338 = func_2376_call()
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
call_7341 = relay.TupleGetItem(func_1167_call(), 1)
call_7342 = relay.TupleGetItem(func_1169_call(), 1)
func_5363_call = mod.get_global_var('func_5363')
func_5365_call = mutated_mod.get_global_var('func_5365')
call_7350 = relay.TupleGetItem(func_5363_call(), 0)
call_7351 = relay.TupleGetItem(func_5365_call(), 0)
output = relay.Tuple([call_7329,call_7337,call_7341,call_7350,])
output2 = relay.Tuple([call_7330,call_7338,call_7342,call_7351,])
func_7353 = relay.Function([], output)
mod['func_7353'] = func_7353
mod = relay.transform.InferType()(mod)
mutated_mod['func_7353'] = func_7353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7353_call = mutated_mod.get_global_var('func_7353')
call_7354 = func_7353_call()
output = call_7354
func_7355 = relay.Function([], output)
mutated_mod['func_7355'] = func_7355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4610_call = mod.get_global_var('func_4610')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_7432 = relay.TupleGetItem(func_4610_call(), 1)
call_7433 = relay.TupleGetItem(func_4612_call(), 1)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_7441 = relay.TupleGetItem(func_1247_call(), 0)
call_7442 = relay.TupleGetItem(func_1248_call(), 0)
output = relay.Tuple([call_7432,call_7441,])
output2 = relay.Tuple([call_7433,call_7442,])
func_7443 = relay.Function([], output)
mod['func_7443'] = func_7443
mod = relay.transform.InferType()(mod)
mutated_mod['func_7443'] = func_7443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7443_call = mutated_mod.get_global_var('func_7443')
call_7444 = func_7443_call()
output = call_7444
func_7445 = relay.Function([], output)
mutated_mod['func_7445'] = func_7445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_7446 = relay.TupleGetItem(func_1947_call(), 0)
call_7447 = relay.TupleGetItem(func_1949_call(), 0)
output = call_7446
output2 = call_7447
func_7457 = relay.Function([], output)
mod['func_7457'] = func_7457
mod = relay.transform.InferType()(mod)
mutated_mod['func_7457'] = func_7457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7457_call = mutated_mod.get_global_var('func_7457')
call_7458 = func_7457_call()
output = call_7458
func_7459 = relay.Function([], output)
mutated_mod['func_7459'] = func_7459
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3130_call = mod.get_global_var('func_3130')
func_3131_call = mutated_mod.get_global_var('func_3131')
call_7468 = relay.TupleGetItem(func_3130_call(), 1)
call_7469 = relay.TupleGetItem(func_3131_call(), 1)
output = relay.Tuple([call_7468,])
output2 = relay.Tuple([call_7469,])
func_7487 = relay.Function([], output)
mod['func_7487'] = func_7487
mod = relay.transform.InferType()(mod)
mutated_mod['func_7487'] = func_7487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7487_call = mutated_mod.get_global_var('func_7487')
call_7488 = func_7487_call()
output = call_7488
func_7489 = relay.Function([], output)
mutated_mod['func_7489'] = func_7489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1142_call = mod.get_global_var('func_1142')
func_1143_call = mutated_mod.get_global_var('func_1143')
call_7495 = relay.TupleGetItem(func_1142_call(), 0)
call_7496 = relay.TupleGetItem(func_1143_call(), 0)
output = call_7495
output2 = call_7496
func_7498 = relay.Function([], output)
mod['func_7498'] = func_7498
mod = relay.transform.InferType()(mod)
mutated_mod['func_7498'] = func_7498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7498_call = mutated_mod.get_global_var('func_7498')
call_7499 = func_7498_call()
output = call_7499
func_7500 = relay.Function([], output)
mutated_mod['func_7500'] = func_7500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_7623 = relay.TupleGetItem(func_5119_call(), 1)
call_7624 = relay.TupleGetItem(func_5120_call(), 1)
output = relay.Tuple([call_7623,])
output2 = relay.Tuple([call_7624,])
func_7659 = relay.Function([], output)
mod['func_7659'] = func_7659
mod = relay.transform.InferType()(mod)
output = func_7659()
func_7660 = relay.Function([], output)
mutated_mod['func_7660'] = func_7660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_7664 = relay.TupleGetItem(func_2646_call(), 0)
call_7665 = relay.TupleGetItem(func_2647_call(), 0)
output = call_7664
output2 = call_7665
func_7692 = relay.Function([], output)
mod['func_7692'] = func_7692
mod = relay.transform.InferType()(mod)
mutated_mod['func_7692'] = func_7692
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7692_call = mutated_mod.get_global_var('func_7692')
call_7693 = func_7692_call()
output = call_7693
func_7694 = relay.Function([], output)
mutated_mod['func_7694'] = func_7694
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4879_call = mutated_mod.get_global_var('func_4879')
call_7708 = relay.TupleGetItem(func_4878_call(), 3)
call_7709 = relay.TupleGetItem(func_4879_call(), 3)
output = call_7708
output2 = call_7709
func_7716 = relay.Function([], output)
mod['func_7716'] = func_7716
mod = relay.transform.InferType()(mod)
mutated_mod['func_7716'] = func_7716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7716_call = mutated_mod.get_global_var('func_7716')
call_7717 = func_7716_call()
output = call_7717
func_7718 = relay.Function([], output)
mutated_mod['func_7718'] = func_7718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3525_call = mod.get_global_var('func_3525')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_7735 = relay.TupleGetItem(func_3525_call(), 0)
call_7736 = relay.TupleGetItem(func_3526_call(), 0)
func_4466_call = mod.get_global_var('func_4466')
func_4468_call = mutated_mod.get_global_var('func_4468')
call_7748 = relay.TupleGetItem(func_4466_call(), 0)
call_7749 = relay.TupleGetItem(func_4468_call(), 0)
func_2363_call = mod.get_global_var('func_2363')
func_2365_call = mutated_mod.get_global_var('func_2365')
var_7756 = relay.var("var_7756", dtype = "float32", shape = (1690,))#candidate|7756|(1690,)|var|float32
call_7755 = relay.TupleGetItem(func_2363_call(relay.reshape(var_7756.astype('float32'), [13, 13, 10])), 0)
call_7757 = relay.TupleGetItem(func_2365_call(relay.reshape(var_7756.astype('float32'), [13, 13, 10])), 0)
output = relay.Tuple([call_7735,call_7748,call_7755,var_7756,])
output2 = relay.Tuple([call_7736,call_7749,call_7757,var_7756,])
func_7767 = relay.Function([var_7756,], output)
mod['func_7767'] = func_7767
mod = relay.transform.InferType()(mod)
mutated_mod['func_7767'] = func_7767
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7768 = relay.var("var_7768", dtype = "float32", shape = (1690,))#candidate|7768|(1690,)|var|float32
func_7767_call = mutated_mod.get_global_var('func_7767')
call_7769 = func_7767_call(var_7768)
output = call_7769
func_7770 = relay.Function([var_7768], output)
mutated_mod['func_7770'] = func_7770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_7774 = relay.TupleGetItem(func_2646_call(), 0)
call_7775 = relay.TupleGetItem(func_2647_call(), 0)
func_6700_call = mod.get_global_var('func_6700')
func_6702_call = mutated_mod.get_global_var('func_6702')
var_7781 = relay.var("var_7781", dtype = "float64", shape = (1014, 2))#candidate|7781|(1014, 2)|var|float64
call_7780 = func_6700_call(relay.reshape(var_7781.astype('float64'), [13, 13, 12]))
call_7782 = func_6700_call(relay.reshape(var_7781.astype('float64'), [13, 13, 12]))
bop_7785 = relay.logical_and(var_7781.astype('bool'), relay.reshape(call_7780.astype('bool'), relay.shape_of(var_7781))) # shape=(1014, 2)
bop_7788 = relay.logical_and(var_7781.astype('bool'), relay.reshape(call_7782.astype('bool'), relay.shape_of(var_7781))) # shape=(1014, 2)
var_7796 = relay.var("var_7796", dtype = "bool", shape = (1014, 2))#candidate|7796|(1014, 2)|var|bool
bop_7797 = relay.mod(bop_7785.astype('float32'), relay.reshape(var_7796.astype('float32'), relay.shape_of(bop_7785))) # shape=(1014, 2)
bop_7800 = relay.mod(bop_7788.astype('float32'), relay.reshape(var_7796.astype('float32'), relay.shape_of(bop_7788))) # shape=(1014, 2)
uop_7803 = relay.cosh(bop_7785.astype('float64')) # shape=(1014, 2)
uop_7805 = relay.cosh(bop_7788.astype('float64')) # shape=(1014, 2)
uop_7815 = relay.cos(uop_7803.astype('float32')) # shape=(1014, 2)
uop_7817 = relay.cos(uop_7805.astype('float32')) # shape=(1014, 2)
uop_7820 = relay.tan(uop_7815.astype('float32')) # shape=(1014, 2)
uop_7822 = relay.tan(uop_7817.astype('float32')) # shape=(1014, 2)
output = relay.Tuple([call_7774,bop_7797,uop_7820,])
output2 = relay.Tuple([call_7775,bop_7800,uop_7822,])
func_7826 = relay.Function([var_7781,var_7796,], output)
mod['func_7826'] = func_7826
mod = relay.transform.InferType()(mod)
mutated_mod['func_7826'] = func_7826
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7826_call = mutated_mod.get_global_var('func_7826')
var_7828 = relay.var("var_7828", dtype = "float64", shape = (1014, 2))#candidate|7828|(1014, 2)|var|float64
var_7829 = relay.var("var_7829", dtype = "bool", shape = (1014, 2))#candidate|7829|(1014, 2)|var|bool
call_7827 = func_7826_call(var_7828,var_7829,)
output = call_7827
func_7830 = relay.Function([var_7828,var_7829,], output)
mutated_mod['func_7830'] = func_7830
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1142_call = mod.get_global_var('func_1142')
func_1143_call = mutated_mod.get_global_var('func_1143')
call_7932 = relay.TupleGetItem(func_1142_call(), 0)
call_7933 = relay.TupleGetItem(func_1143_call(), 0)
output = relay.Tuple([call_7932,])
output2 = relay.Tuple([call_7933,])
func_7935 = relay.Function([], output)
mod['func_7935'] = func_7935
mod = relay.transform.InferType()(mod)
output = func_7935()
func_7936 = relay.Function([], output)
mutated_mod['func_7936'] = func_7936
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3130_call = mod.get_global_var('func_3130')
func_3131_call = mutated_mod.get_global_var('func_3131')
call_7937 = relay.TupleGetItem(func_3130_call(), 0)
call_7938 = relay.TupleGetItem(func_3131_call(), 0)
var_7960 = relay.var("var_7960", dtype = "bool", shape = (13, 13, 1))#candidate|7960|(13, 13, 1)|var|bool
bop_7961 = relay.not_equal(call_7937.astype('bool'), relay.reshape(var_7960.astype('bool'), relay.shape_of(call_7937))) # shape=(13, 13, 1)
bop_7964 = relay.not_equal(call_7938.astype('bool'), relay.reshape(var_7960.astype('bool'), relay.shape_of(call_7938))) # shape=(13, 13, 1)
output = bop_7961
output2 = bop_7964
func_7980 = relay.Function([var_7960,], output)
mod['func_7980'] = func_7980
mod = relay.transform.InferType()(mod)
var_7981 = relay.var("var_7981", dtype = "bool", shape = (13, 13, 1))#candidate|7981|(13, 13, 1)|var|bool
output = func_7980(var_7981)
func_7982 = relay.Function([var_7981], output)
mutated_mod['func_7982'] = func_7982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4640_call = mod.get_global_var('func_4640')
func_4642_call = mutated_mod.get_global_var('func_4642')
call_8005 = func_4640_call()
call_8006 = func_4640_call()
output = call_8005
output2 = call_8006
func_8013 = relay.Function([], output)
mod['func_8013'] = func_8013
mod = relay.transform.InferType()(mod)
output = func_8013()
func_8014 = relay.Function([], output)
mutated_mod['func_8014'] = func_8014
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6847_call = mod.get_global_var('func_6847')
func_6849_call = mutated_mod.get_global_var('func_6849')
call_8029 = func_6847_call()
call_8030 = func_6847_call()
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_8043 = relay.TupleGetItem(func_6002_call(), 1)
call_8044 = relay.TupleGetItem(func_6004_call(), 1)
func_547_call = mod.get_global_var('func_547')
func_548_call = mutated_mod.get_global_var('func_548')
call_8047 = relay.TupleGetItem(func_547_call(), 0)
call_8048 = relay.TupleGetItem(func_548_call(), 0)
output = relay.Tuple([call_8029,call_8043,call_8047,])
output2 = relay.Tuple([call_8030,call_8044,call_8048,])
func_8051 = relay.Function([], output)
mod['func_8051'] = func_8051
mod = relay.transform.InferType()(mod)
mutated_mod['func_8051'] = func_8051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8051_call = mutated_mod.get_global_var('func_8051')
call_8052 = func_8051_call()
output = call_8052
func_8053 = relay.Function([], output)
mutated_mod['func_8053'] = func_8053
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5688_call = mod.get_global_var('func_5688')
func_5690_call = mutated_mod.get_global_var('func_5690')
call_8062 = func_5688_call()
call_8063 = func_5688_call()
func_3858_call = mod.get_global_var('func_3858')
func_3859_call = mutated_mod.get_global_var('func_3859')
call_8083 = func_3858_call()
call_8084 = func_3858_call()
output = relay.Tuple([call_8062,call_8083,])
output2 = relay.Tuple([call_8063,call_8084,])
func_8087 = relay.Function([], output)
mod['func_8087'] = func_8087
mod = relay.transform.InferType()(mod)
output = func_8087()
func_8088 = relay.Function([], output)
mutated_mod['func_8088'] = func_8088
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8176 = relay.var("var_8176", dtype = "float64", shape = (3, 8, 6))#candidate|8176|(3, 8, 6)|var|float64
const_8177 = relay.const([[[-4.516329,-1.550040,-5.929185,8.292908,-2.725614,-8.265162],[2.131931,-5.654137,-8.496564,-8.563609,0.502884,-7.661101],[1.995940,-6.804577,-0.567568,0.700259,-9.828948,-5.559495],[5.710882,5.781497,9.164767,8.193987,6.727313,-6.430750],[2.868963,-7.720448,-6.441911,-5.563438,-6.136854,-2.470670],[-0.057840,2.171730,5.840942,7.482973,1.521503,2.073387],[8.679296,-2.829325,-4.681351,-9.489416,9.797447,-8.077977],[1.509270,2.244913,-3.541764,-7.218906,6.882554,7.768090]],[[1.388598,-0.365895,0.991362,3.634829,-6.593737,9.526804],[-3.812196,-9.365887,9.683459,-0.673260,2.894913,-6.589281],[7.671208,-4.980940,-3.848595,0.124377,-9.378374,7.749228],[7.674409,-8.422198,-6.858575,-6.494901,5.739835,-2.948101],[-7.940233,3.048566,-8.034807,6.900243,-5.245010,1.334155],[8.487253,-8.958182,-5.875680,3.802152,9.546599,3.120484],[-5.723216,-4.896465,-1.091035,-3.557625,8.411521,-2.979660],[7.448433,4.160441,5.370041,-8.363616,-5.963766,-5.001250]],[[-2.116590,-3.085302,-9.556133,3.085741,-0.357627,-9.256430],[-9.549578,5.703899,0.361012,-4.871597,2.609290,-7.445071],[-9.821042,6.134888,-9.275537,3.396307,6.775870,-0.362129],[3.189886,-8.876843,3.792701,-4.954334,9.879866,-8.317282],[2.222641,5.747403,-0.553798,7.512722,9.955065,3.888364],[-0.318197,-2.814915,2.081700,5.203786,1.521377,-5.093883],[6.456382,-8.563360,-3.210043,1.192130,7.083294,-5.928915],[-4.638607,-3.316210,-8.488940,8.939297,-4.762571,-6.015527]]], dtype = "float64")#candidate|8177|(3, 8, 6)|const|float64
bop_8178 = relay.add(var_8176.astype('float64'), relay.reshape(const_8177.astype('float64'), relay.shape_of(var_8176))) # shape=(3, 8, 6)
func_3794_call = mod.get_global_var('func_3794')
func_3795_call = mutated_mod.get_global_var('func_3795')
call_8184 = relay.TupleGetItem(func_3794_call(), 0)
call_8185 = relay.TupleGetItem(func_3795_call(), 0)
func_4528_call = mod.get_global_var('func_4528')
func_4529_call = mutated_mod.get_global_var('func_4529')
call_8190 = relay.TupleGetItem(func_4528_call(), 0)
call_8191 = relay.TupleGetItem(func_4529_call(), 0)
output = relay.Tuple([bop_8178,call_8184,call_8190,])
output2 = relay.Tuple([bop_8178,call_8185,call_8191,])
func_8199 = relay.Function([var_8176,], output)
mod['func_8199'] = func_8199
mod = relay.transform.InferType()(mod)
mutated_mod['func_8199'] = func_8199
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8200 = relay.var("var_8200", dtype = "float64", shape = (3, 8, 6))#candidate|8200|(3, 8, 6)|var|float64
func_8199_call = mutated_mod.get_global_var('func_8199')
call_8201 = func_8199_call(var_8200)
output = call_8201
func_8202 = relay.Function([var_8200], output)
mutated_mod['func_8202'] = func_8202
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3103_call = mod.get_global_var('func_3103')
func_3105_call = mutated_mod.get_global_var('func_3105')
call_8262 = relay.TupleGetItem(func_3103_call(), 0)
call_8263 = relay.TupleGetItem(func_3105_call(), 0)
output = call_8262
output2 = call_8263
func_8266 = relay.Function([], output)
mod['func_8266'] = func_8266
mod = relay.transform.InferType()(mod)
output = func_8266()
func_8267 = relay.Function([], output)
mutated_mod['func_8267'] = func_8267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2623_call = mod.get_global_var('func_2623')
func_2625_call = mutated_mod.get_global_var('func_2625')
call_8286 = func_2623_call()
call_8287 = func_2623_call()
func_7767_call = mod.get_global_var('func_7767')
func_7770_call = mutated_mod.get_global_var('func_7770')
var_8292 = relay.var("var_8292", dtype = "float32", shape = (1690,))#candidate|8292|(1690,)|var|float32
call_8291 = relay.TupleGetItem(func_7767_call(relay.reshape(var_8292.astype('float32'), [1690,])), 0)
call_8293 = relay.TupleGetItem(func_7770_call(relay.reshape(var_8292.astype('float32'), [1690,])), 0)
var_8299 = relay.var("var_8299", dtype = "float32", shape = (1690,))#candidate|8299|(1690,)|var|float32
bop_8300 = relay.left_shift(var_8292.astype('int32'), relay.reshape(var_8299.astype('int32'), relay.shape_of(var_8292))) # shape=(1690,)
uop_8305 = relay.atan(bop_8300.astype('float64')) # shape=(1690,)
bop_8311 = relay.mod(uop_8305.astype('float64'), relay.reshape(bop_8300.astype('float64'), relay.shape_of(uop_8305))) # shape=(1690,)
bop_8316 = relay.maximum(uop_8305.astype('int64'), relay.reshape(var_8292.astype('int64'), relay.shape_of(uop_8305))) # shape=(1690,)
bop_8325 = relay.greater_equal(uop_8305.astype('bool'), relay.reshape(bop_8316.astype('bool'), relay.shape_of(uop_8305))) # shape=(1690,)
output = relay.Tuple([call_8286,call_8291,bop_8311,bop_8325,])
output2 = relay.Tuple([call_8287,call_8293,bop_8311,bop_8325,])
func_8329 = relay.Function([var_8292,var_8299,], output)
mod['func_8329'] = func_8329
mod = relay.transform.InferType()(mod)
var_8330 = relay.var("var_8330", dtype = "float32", shape = (1690,))#candidate|8330|(1690,)|var|float32
var_8331 = relay.var("var_8331", dtype = "float32", shape = (1690,))#candidate|8331|(1690,)|var|float32
output = func_8329(var_8330,var_8331,)
func_8332 = relay.Function([var_8330,var_8331,], output)
mutated_mod['func_8332'] = func_8332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_8346 = relay.TupleGetItem(func_5119_call(), 1)
call_8347 = relay.TupleGetItem(func_5120_call(), 1)
func_7040_call = mod.get_global_var('func_7040')
func_7042_call = mutated_mod.get_global_var('func_7042')
call_8354 = relay.TupleGetItem(func_7040_call(), 0)
call_8355 = relay.TupleGetItem(func_7042_call(), 0)
output = relay.Tuple([call_8346,call_8354,])
output2 = relay.Tuple([call_8347,call_8355,])
func_8356 = relay.Function([], output)
mod['func_8356'] = func_8356
mod = relay.transform.InferType()(mod)
mutated_mod['func_8356'] = func_8356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8356_call = mutated_mod.get_global_var('func_8356')
call_8357 = func_8356_call()
output = call_8357
func_8358 = relay.Function([], output)
mutated_mod['func_8358'] = func_8358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2544_call = mod.get_global_var('func_2544')
func_2546_call = mutated_mod.get_global_var('func_2546')
call_8390 = relay.TupleGetItem(func_2544_call(), 1)
call_8391 = relay.TupleGetItem(func_2546_call(), 1)
output = relay.Tuple([call_8390,])
output2 = relay.Tuple([call_8391,])
func_8394 = relay.Function([], output)
mod['func_8394'] = func_8394
mod = relay.transform.InferType()(mod)
mutated_mod['func_8394'] = func_8394
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8394_call = mutated_mod.get_global_var('func_8394')
call_8395 = func_8394_call()
output = call_8395
func_8396 = relay.Function([], output)
mutated_mod['func_8396'] = func_8396
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8403 = relay.var("var_8403", dtype = "float64", shape = (10, 8, 1))#candidate|8403|(10, 8, 1)|var|float64
uop_8404 = relay.exp(var_8403.astype('float64')) # shape=(10, 8, 1)
bop_8412 = relay.logical_and(uop_8404.astype('bool'), relay.reshape(var_8403.astype('bool'), relay.shape_of(uop_8404))) # shape=(10, 8, 1)
output = relay.Tuple([bop_8412,])
output2 = relay.Tuple([bop_8412,])
func_8433 = relay.Function([var_8403,], output)
mod['func_8433'] = func_8433
mod = relay.transform.InferType()(mod)
mutated_mod['func_8433'] = func_8433
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8434 = relay.var("var_8434", dtype = "float64", shape = (10, 8, 1))#candidate|8434|(10, 8, 1)|var|float64
func_8433_call = mutated_mod.get_global_var('func_8433')
call_8435 = func_8433_call(var_8434)
output = call_8435
func_8436 = relay.Function([var_8434], output)
mutated_mod['func_8436'] = func_8436
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5688_call = mod.get_global_var('func_5688')
func_5690_call = mutated_mod.get_global_var('func_5690')
call_8501 = func_5688_call()
call_8502 = func_5688_call()
output = relay.Tuple([call_8501,])
output2 = relay.Tuple([call_8502,])
func_8503 = relay.Function([], output)
mod['func_8503'] = func_8503
mod = relay.transform.InferType()(mod)
mutated_mod['func_8503'] = func_8503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8503_call = mutated_mod.get_global_var('func_8503')
call_8504 = func_8503_call()
output = call_8504
func_8505 = relay.Function([], output)
mutated_mod['func_8505'] = func_8505
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7692_call = mod.get_global_var('func_7692')
func_7694_call = mutated_mod.get_global_var('func_7694')
call_8569 = func_7692_call()
call_8570 = func_7692_call()
func_7040_call = mod.get_global_var('func_7040')
func_7042_call = mutated_mod.get_global_var('func_7042')
call_8589 = relay.TupleGetItem(func_7040_call(), 0)
call_8590 = relay.TupleGetItem(func_7042_call(), 0)
output = relay.Tuple([call_8569,call_8589,])
output2 = relay.Tuple([call_8570,call_8590,])
func_8597 = relay.Function([], output)
mod['func_8597'] = func_8597
mod = relay.transform.InferType()(mod)
output = func_8597()
func_8598 = relay.Function([], output)
mutated_mod['func_8598'] = func_8598
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_8634 = func_2110_call()
call_8635 = func_2110_call()
func_3712_call = mod.get_global_var('func_3712')
func_3714_call = mutated_mod.get_global_var('func_3714')
call_8642 = relay.TupleGetItem(func_3712_call(), 1)
call_8643 = relay.TupleGetItem(func_3714_call(), 1)
func_6795_call = mod.get_global_var('func_6795')
func_6796_call = mutated_mod.get_global_var('func_6796')
call_8651 = func_6795_call()
call_8652 = func_6795_call()
output = relay.Tuple([call_8634,call_8642,call_8651,])
output2 = relay.Tuple([call_8635,call_8643,call_8652,])
func_8663 = relay.Function([], output)
mod['func_8663'] = func_8663
mod = relay.transform.InferType()(mod)
output = func_8663()
func_8664 = relay.Function([], output)
mutated_mod['func_8664'] = func_8664
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_8679 = func_2376_call()
call_8680 = func_2376_call()
output = relay.Tuple([call_8679,])
output2 = relay.Tuple([call_8680,])
func_8696 = relay.Function([], output)
mod['func_8696'] = func_8696
mod = relay.transform.InferType()(mod)
mutated_mod['func_8696'] = func_8696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8696_call = mutated_mod.get_global_var('func_8696')
call_8697 = func_8696_call()
output = call_8697
func_8698 = relay.Function([], output)
mutated_mod['func_8698'] = func_8698
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_8730 = relay.TupleGetItem(func_1888_call(), 0)
call_8731 = relay.TupleGetItem(func_1890_call(), 0)
func_7767_call = mod.get_global_var('func_7767')
func_7770_call = mutated_mod.get_global_var('func_7770')
var_8744 = relay.var("var_8744", dtype = "float32", shape = (1690,))#candidate|8744|(1690,)|var|float32
call_8743 = relay.TupleGetItem(func_7767_call(relay.reshape(var_8744.astype('float32'), [1690,])), 0)
call_8745 = relay.TupleGetItem(func_7770_call(relay.reshape(var_8744.astype('float32'), [1690,])), 0)
output = relay.Tuple([call_8730,call_8743,var_8744,])
output2 = relay.Tuple([call_8731,call_8745,var_8744,])
func_8768 = relay.Function([var_8744,], output)
mod['func_8768'] = func_8768
mod = relay.transform.InferType()(mod)
var_8769 = relay.var("var_8769", dtype = "float32", shape = (1690,))#candidate|8769|(1690,)|var|float32
output = func_8768(var_8769)
func_8770 = relay.Function([var_8769], output)
mutated_mod['func_8770'] = func_8770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5791_call = mod.get_global_var('func_5791')
func_5793_call = mutated_mod.get_global_var('func_5793')
call_8789 = relay.TupleGetItem(func_5791_call(), 0)
call_8790 = relay.TupleGetItem(func_5793_call(), 0)
func_6763_call = mod.get_global_var('func_6763')
func_6764_call = mutated_mod.get_global_var('func_6764')
call_8802 = relay.TupleGetItem(func_6763_call(), 0)
call_8803 = relay.TupleGetItem(func_6764_call(), 0)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
call_8836 = relay.TupleGetItem(func_1167_call(), 0)
call_8837 = relay.TupleGetItem(func_1169_call(), 0)
output = relay.Tuple([call_8789,call_8802,call_8836,])
output2 = relay.Tuple([call_8790,call_8803,call_8837,])
func_8838 = relay.Function([], output)
mod['func_8838'] = func_8838
mod = relay.transform.InferType()(mod)
output = func_8838()
func_8839 = relay.Function([], output)
mutated_mod['func_8839'] = func_8839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6578_call = mod.get_global_var('func_6578')
func_6580_call = mutated_mod.get_global_var('func_6580')
call_8845 = func_6578_call()
call_8846 = func_6578_call()
func_3967_call = mod.get_global_var('func_3967')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_8856 = relay.TupleGetItem(func_3967_call(), 0)
call_8857 = relay.TupleGetItem(func_3969_call(), 0)
output = relay.Tuple([call_8845,call_8856,])
output2 = relay.Tuple([call_8846,call_8857,])
func_8882 = relay.Function([], output)
mod['func_8882'] = func_8882
mod = relay.transform.InferType()(mod)
mutated_mod['func_8882'] = func_8882
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8882_call = mutated_mod.get_global_var('func_8882')
call_8883 = func_8882_call()
output = call_8883
func_8884 = relay.Function([], output)
mutated_mod['func_8884'] = func_8884
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8888 = relay.const([[[-7,7,-2,-7,6,-6,7,4],[-5,8,5,-8,-8,1,-2,7],[5,-7,4,1,-7,7,-5,4],[2,-2,2,5,10,7,-8,-3],[8,-9,-3,2,-1,4,8,6],[3,-10,-7,-7,8,10,8,-10],[-3,-9,-3,-6,10,10,9,-1],[-3,7,3,-8,-8,10,2,-2],[-10,3,4,8,1,-5,4,-3]],[[4,-9,-4,9,-7,-7,10,8],[-4,5,-2,3,1,-6,-3,-3],[10,3,1,7,-2,9,-8,2],[-7,2,-10,-5,-5,7,1,-5],[2,-7,4,2,-10,6,5,-10],[4,4,-8,-6,-1,1,1,-4],[-5,-9,-5,-5,-2,-3,-8,1],[-4,8,5,5,7,9,3,2],[-2,-7,1,-4,-2,2,-9,-3]],[[-8,-4,-7,9,6,-1,-9,5],[3,2,5,-9,-10,-6,-3,-1],[4,-4,-6,-2,-10,9,5,5],[-9,5,3,-8,4,4,-7,-6],[2,-9,-4,-1,5,8,-6,-1],[3,9,-8,1,-3,9,1,10],[-7,4,-3,10,6,9,2,-7],[3,-1,2,-7,10,-6,1,-6],[6,-2,4,-8,-1,-2,-6,9]],[[6,-4,-5,-5,5,4,7,4],[2,4,-9,8,-9,4,1,7],[-5,-8,-10,-3,-4,10,-9,-7],[-4,8,-5,-5,7,2,-5,7],[-9,-10,8,3,2,-3,10,3],[3,7,-6,-6,2,-4,6,6],[-8,4,10,8,-1,-3,3,2],[7,-5,2,7,9,10,7,-3],[-2,1,-6,-4,-3,5,4,1]],[[-9,-4,10,-4,5,8,-9,6],[-10,5,-9,-1,9,8,5,5],[-8,4,2,-8,-1,-10,-7,-4],[-5,-3,2,-7,-1,-2,-6,2],[-6,3,4,7,-8,-6,3,-4],[-10,3,2,-3,-6,-3,4,6],[4,9,1,-3,-1,5,-10,-2],[-7,-4,-6,-6,-4,5,-6,9],[2,-8,-2,-3,-2,8,-9,-6]],[[-5,9,-9,-6,-4,4,-5,8],[1,-10,8,7,-2,-4,5,-9],[-10,4,3,-4,-4,-7,-1,6],[-2,4,-10,10,8,-4,3,3],[-4,-5,-10,4,-7,-5,-5,-2],[-9,-4,9,-2,-9,-8,-10,6],[-2,8,9,-8,-2,-7,-5,-3],[5,-3,3,-1,-2,3,-4,3],[-9,7,-7,-6,-9,-6,-6,-1]],[[8,7,-1,-4,-9,-2,-7,8],[10,-5,4,5,-8,10,-2,5],[6,1,-10,10,-3,4,-9,-7],[-8,5,-6,5,-3,-10,-7,5],[8,-1,-1,10,3,-6,-4,3],[-5,-6,-1,7,-8,-9,3,-8],[-9,9,-8,-6,3,-7,-4,3],[-1,2,-1,-7,7,4,9,-1],[1,-8,9,3,-5,10,-1,9]]], dtype = "int32")#candidate|8888|(7, 9, 8)|const|int32
var_8889 = relay.var("var_8889", dtype = "int32", shape = (7, 9, 8))#candidate|8889|(7, 9, 8)|var|int32
bop_8890 = relay.bitwise_xor(const_8888.astype('int32'), relay.reshape(var_8889.astype('int32'), relay.shape_of(const_8888))) # shape=(7, 9, 8)
output = relay.Tuple([bop_8890,])
output2 = relay.Tuple([bop_8890,])
func_8894 = relay.Function([var_8889,], output)
mod['func_8894'] = func_8894
mod = relay.transform.InferType()(mod)
var_8895 = relay.var("var_8895", dtype = "int32", shape = (7, 9, 8))#candidate|8895|(7, 9, 8)|var|int32
output = func_8894(var_8895)
func_8896 = relay.Function([var_8895], output)
mutated_mod['func_8896'] = func_8896
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7040_call = mod.get_global_var('func_7040')
func_7042_call = mutated_mod.get_global_var('func_7042')
call_8942 = relay.TupleGetItem(func_7040_call(), 0)
call_8943 = relay.TupleGetItem(func_7042_call(), 0)
output = relay.Tuple([call_8942,])
output2 = relay.Tuple([call_8943,])
func_8948 = relay.Function([], output)
mod['func_8948'] = func_8948
mod = relay.transform.InferType()(mod)
output = func_8948()
func_8949 = relay.Function([], output)
mutated_mod['func_8949'] = func_8949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4528_call = mod.get_global_var('func_4528')
func_4529_call = mutated_mod.get_global_var('func_4529')
call_8972 = relay.TupleGetItem(func_4528_call(), 0)
call_8973 = relay.TupleGetItem(func_4529_call(), 0)
const_8979 = relay.const([[[False,True,False,False,False,True,True],[False,True,False,True,False,False,True],[True,False,True,True,False,False,False],[True,False,True,True,True,False,False],[True,False,False,True,True,False,True],[True,True,False,False,True,False,True],[True,True,False,True,True,False,False],[False,False,False,True,False,False,False],[True,False,False,False,True,False,True],[False,False,True,False,False,True,False],[True,False,True,False,True,False,True],[False,False,True,False,False,False,False],[False,False,False,False,False,True,False]],[[True,True,False,False,False,True,False],[False,False,False,True,False,True,True],[True,True,True,False,True,False,False],[True,False,False,False,False,True,False],[True,False,False,False,True,False,False],[True,True,False,True,False,False,False],[False,False,False,False,True,True,False],[True,True,False,False,False,True,False],[False,False,False,True,False,True,False],[True,True,False,True,True,True,False],[True,True,True,True,True,True,True],[True,False,True,False,True,False,False],[True,True,True,False,True,True,True]],[[True,False,True,False,False,False,True],[True,True,False,False,False,True,True],[False,False,True,True,False,False,True],[True,False,True,True,True,False,True],[False,False,False,True,False,False,False],[False,False,True,True,True,True,True],[True,False,True,True,False,False,False],[False,False,True,False,True,True,True],[False,True,False,True,True,False,False],[False,False,False,False,False,False,False],[True,True,True,True,False,False,False],[False,False,True,True,True,False,True],[False,True,False,False,True,False,True]],[[False,False,False,False,True,False,True],[True,False,True,True,False,False,False],[False,True,False,False,True,True,True],[False,False,False,False,True,False,True],[False,False,False,True,True,False,True],[False,True,False,True,True,True,False],[True,False,False,True,True,True,False],[False,False,True,True,False,False,True],[False,False,False,False,True,True,True],[False,True,True,False,False,True,True],[False,True,False,True,True,False,True],[False,True,True,False,False,False,True],[False,False,True,False,True,True,True]],[[False,False,False,False,False,True,False],[False,True,True,False,False,True,False],[True,False,True,True,True,False,True],[True,False,True,False,True,False,False],[False,True,True,False,False,False,False],[False,True,False,False,False,True,True],[False,True,True,True,True,False,False],[False,False,False,False,False,True,False],[True,True,False,True,False,False,True],[False,False,True,False,True,True,True],[False,True,False,False,False,True,False],[True,True,False,True,True,False,True],[True,True,True,True,False,False,False]],[[True,False,False,True,False,True,False],[True,True,True,True,False,True,False],[False,False,False,True,True,False,False],[False,True,False,True,False,True,False],[True,True,True,False,True,True,True],[True,False,True,True,True,False,False],[True,True,False,True,True,False,False],[False,True,True,False,False,True,False],[False,False,False,True,False,True,True],[True,False,True,True,True,False,False],[False,True,False,False,False,True,True],[False,True,False,False,False,True,True],[False,False,True,True,False,True,False]],[[False,True,False,False,True,True,True],[False,True,True,True,False,True,True],[True,False,False,True,False,False,True],[False,True,False,True,True,True,False],[False,True,False,False,False,False,False],[True,True,True,False,True,False,True],[True,False,False,False,False,False,True],[False,True,True,True,False,True,False],[False,True,False,False,False,False,False],[False,True,True,True,False,False,True],[True,True,False,True,True,False,True],[True,True,True,False,False,False,True],[False,True,True,False,False,True,False]],[[False,True,True,False,False,False,False],[True,False,True,False,True,False,True],[False,False,True,False,True,False,False],[True,False,True,False,True,False,False],[False,True,True,False,False,False,True],[True,False,True,False,False,False,False],[False,False,False,False,True,True,False],[False,True,False,False,True,True,False],[False,True,False,False,False,True,True],[True,True,False,False,True,True,False],[False,True,False,False,False,False,False],[True,True,True,True,False,True,True],[True,True,True,False,False,False,False]],[[True,True,True,False,True,True,False],[False,False,False,False,False,False,False],[False,True,True,True,False,False,False],[True,True,False,False,False,True,False],[True,True,True,False,True,False,False],[False,False,False,False,False,False,True],[False,False,True,False,True,False,True],[False,False,False,True,False,False,True],[False,True,False,True,True,True,True],[False,True,True,False,True,True,False],[False,True,True,False,False,True,True],[True,True,False,True,False,False,False],[False,False,False,False,False,False,False]],[[True,True,True,True,False,True,True],[False,False,True,False,False,True,False],[False,False,True,True,True,False,True],[True,False,True,True,True,True,False],[True,True,False,False,False,True,True],[True,False,False,True,True,True,True],[True,False,True,True,False,True,False],[False,True,True,True,True,True,True],[False,False,True,True,False,True,True],[False,False,False,True,True,False,False],[False,False,True,True,False,True,False],[True,False,False,True,True,False,False],[False,True,True,True,True,False,False]],[[True,True,False,False,False,False,True],[True,True,False,True,True,True,False],[True,False,False,False,False,False,True],[True,False,False,False,True,True,True],[True,False,True,False,True,True,False],[True,False,False,False,True,False,True],[False,True,True,True,False,True,False],[False,False,True,False,False,True,False],[False,True,True,True,True,False,True],[False,False,False,False,False,False,False],[True,False,False,True,True,True,False],[True,True,False,False,True,False,False],[True,True,False,True,False,True,False]],[[True,True,False,False,True,False,False],[True,False,False,False,False,False,True],[True,False,False,True,True,False,True],[False,False,True,True,False,True,True],[False,False,True,False,True,True,False],[True,True,False,False,True,False,True],[True,True,False,True,True,False,False],[False,True,True,False,True,False,True],[True,True,False,False,True,False,False],[False,True,False,True,True,False,False],[False,False,True,False,True,True,True],[False,False,True,False,True,False,False],[False,False,False,False,True,False,False]],[[False,False,False,False,False,False,False],[True,False,False,True,False,True,True],[False,False,False,False,False,True,True],[True,True,True,False,True,True,False],[False,False,False,False,False,False,True],[False,False,True,True,False,True,True],[False,False,False,False,False,True,True],[True,False,False,False,False,True,False],[True,True,False,False,True,False,False],[True,False,True,False,False,False,True],[False,True,False,True,True,True,True],[False,False,False,True,False,False,True],[False,False,False,False,True,False,False]]], dtype = "bool")#candidate|8979|(13, 13, 7)|const|bool
bop_8980 = relay.right_shift(call_8972.astype('int64'), const_8979.astype('int64')) # shape=(13, 13, 7)
bop_8983 = relay.right_shift(call_8973.astype('int64'), const_8979.astype('int64')) # shape=(13, 13, 7)
func_8503_call = mod.get_global_var('func_8503')
func_8505_call = mutated_mod.get_global_var('func_8505')
call_8999 = relay.TupleGetItem(func_8503_call(), 0)
call_9000 = relay.TupleGetItem(func_8505_call(), 0)
bop_9007 = relay.greater(call_8999.astype('bool'), bop_8980.astype('bool')) # shape=(13, 13, 7)
bop_9010 = relay.greater(call_9000.astype('bool'), bop_8983.astype('bool')) # shape=(13, 13, 7)
output = relay.Tuple([bop_9007,])
output2 = relay.Tuple([bop_9010,])
func_9016 = relay.Function([], output)
mod['func_9016'] = func_9016
mod = relay.transform.InferType()(mod)
mutated_mod['func_9016'] = func_9016
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9016_call = mutated_mod.get_global_var('func_9016')
call_9017 = func_9016_call()
output = call_9017
func_9018 = relay.Function([], output)
mutated_mod['func_9018'] = func_9018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3525_call = mod.get_global_var('func_3525')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_9041 = relay.TupleGetItem(func_3525_call(), 0)
call_9042 = relay.TupleGetItem(func_3526_call(), 0)
func_6096_call = mod.get_global_var('func_6096')
func_6097_call = mutated_mod.get_global_var('func_6097')
call_9046 = relay.TupleGetItem(func_6096_call(), 1)
call_9047 = relay.TupleGetItem(func_6097_call(), 1)
output = relay.Tuple([call_9041,call_9046,])
output2 = relay.Tuple([call_9042,call_9047,])
func_9051 = relay.Function([], output)
mod['func_9051'] = func_9051
mod = relay.transform.InferType()(mod)
mutated_mod['func_9051'] = func_9051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9051_call = mutated_mod.get_global_var('func_9051')
call_9052 = func_9051_call()
output = call_9052
func_9053 = relay.Function([], output)
mutated_mod['func_9053'] = func_9053
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_9072 = relay.TupleGetItem(func_1888_call(), 0)
call_9073 = relay.TupleGetItem(func_1890_call(), 0)
output = call_9072
output2 = call_9073
func_9074 = relay.Function([], output)
mod['func_9074'] = func_9074
mod = relay.transform.InferType()(mod)
mutated_mod['func_9074'] = func_9074
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9074_call = mutated_mod.get_global_var('func_9074')
call_9075 = func_9074_call()
output = call_9075
func_9076 = relay.Function([], output)
mutated_mod['func_9076'] = func_9076
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3794_call = mod.get_global_var('func_3794')
func_3795_call = mutated_mod.get_global_var('func_3795')
call_9164 = relay.TupleGetItem(func_3794_call(), 1)
call_9165 = relay.TupleGetItem(func_3795_call(), 1)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_9171 = relay.TupleGetItem(func_1888_call(), 0)
call_9172 = relay.TupleGetItem(func_1890_call(), 0)
output = relay.Tuple([call_9164,call_9171,])
output2 = relay.Tuple([call_9165,call_9172,])
func_9177 = relay.Function([], output)
mod['func_9177'] = func_9177
mod = relay.transform.InferType()(mod)
mutated_mod['func_9177'] = func_9177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9177_call = mutated_mod.get_global_var('func_9177')
call_9178 = func_9177_call()
output = call_9178
func_9179 = relay.Function([], output)
mutated_mod['func_9179'] = func_9179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5637_call = mod.get_global_var('func_5637')
func_5638_call = mutated_mod.get_global_var('func_5638')
call_9225 = relay.TupleGetItem(func_5637_call(), 1)
call_9226 = relay.TupleGetItem(func_5638_call(), 1)
func_4964_call = mod.get_global_var('func_4964')
func_4966_call = mutated_mod.get_global_var('func_4966')
call_9247 = relay.TupleGetItem(func_4964_call(), 1)
call_9248 = relay.TupleGetItem(func_4966_call(), 1)
output = relay.Tuple([call_9225,call_9247,])
output2 = relay.Tuple([call_9226,call_9248,])
func_9251 = relay.Function([], output)
mod['func_9251'] = func_9251
mod = relay.transform.InferType()(mod)
output = func_9251()
func_9252 = relay.Function([], output)
mutated_mod['func_9252'] = func_9252
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8356_call = mod.get_global_var('func_8356')
func_8358_call = mutated_mod.get_global_var('func_8358')
call_9280 = relay.TupleGetItem(func_8356_call(), 1)
call_9281 = relay.TupleGetItem(func_8358_call(), 1)
func_6096_call = mod.get_global_var('func_6096')
func_6097_call = mutated_mod.get_global_var('func_6097')
call_9288 = relay.TupleGetItem(func_6096_call(), 1)
call_9289 = relay.TupleGetItem(func_6097_call(), 1)
output = relay.Tuple([call_9280,call_9288,])
output2 = relay.Tuple([call_9281,call_9289,])
func_9291 = relay.Function([], output)
mod['func_9291'] = func_9291
mod = relay.transform.InferType()(mod)
mutated_mod['func_9291'] = func_9291
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9291_call = mutated_mod.get_global_var('func_9291')
call_9292 = func_9291_call()
output = call_9292
func_9293 = relay.Function([], output)
mutated_mod['func_9293'] = func_9293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_9340 = relay.TupleGetItem(func_5119_call(), 1)
call_9341 = relay.TupleGetItem(func_5120_call(), 1)
output = call_9340
output2 = call_9341
func_9363 = relay.Function([], output)
mod['func_9363'] = func_9363
mod = relay.transform.InferType()(mod)
output = func_9363()
func_9364 = relay.Function([], output)
mutated_mod['func_9364'] = func_9364
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8266_call = mod.get_global_var('func_8266')
func_8267_call = mutated_mod.get_global_var('func_8267')
call_9418 = func_8266_call()
call_9419 = func_8266_call()
output = relay.Tuple([call_9418,])
output2 = relay.Tuple([call_9419,])
func_9424 = relay.Function([], output)
mod['func_9424'] = func_9424
mod = relay.transform.InferType()(mod)
mutated_mod['func_9424'] = func_9424
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9424_call = mutated_mod.get_global_var('func_9424')
call_9425 = func_9424_call()
output = call_9425
func_9426 = relay.Function([], output)
mutated_mod['func_9426'] = func_9426
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9363_call = mod.get_global_var('func_9363')
func_9364_call = mutated_mod.get_global_var('func_9364')
call_9532 = func_9363_call()
call_9533 = func_9363_call()
output = call_9532
output2 = call_9533
func_9539 = relay.Function([], output)
mod['func_9539'] = func_9539
mod = relay.transform.InferType()(mod)
output = func_9539()
func_9540 = relay.Function([], output)
mutated_mod['func_9540'] = func_9540
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9568 = relay.const([[[-3.472703,-6.289830,-1.018318,7.687573,-9.883355,5.131765,3.422110,-6.133620,-9.683445,-3.531988,0.305544],[7.209430,-8.555646,-4.269130,-8.858047,6.839176,-1.305592,-9.448669,-8.951651,4.972030,-9.987233,-6.489591],[-5.951751,-6.363036,-5.433885,-1.331469,5.645258,-4.460358,7.208639,3.239882,-8.711469,-7.431277,6.710322],[9.233356,-4.063846,-7.068412,5.026597,3.411839,3.776677,-6.649883,-3.020251,-6.703715,0.498152,-4.886782],[7.934518,-1.236134,-7.465216,5.084270,-2.525530,-7.756311,1.986376,9.856171,5.408468,-1.939023,-8.109600],[-3.317139,2.663516,6.672610,8.012021,2.948661,1.546109,-1.389075,-1.534776,3.454042,-3.649944,-6.145719],[9.234888,-7.917000,-6.285622,5.115614,5.605137,3.506556,-1.527041,2.091707,-9.376574,1.869119,1.600403],[-8.799891,0.687560,-5.464930,6.043379,7.385133,-7.202131,9.953721,9.920250,-8.192858,-7.615854,6.016292]],[[-6.927231,-2.234141,-9.035235,-5.583564,4.685385,9.378608,6.903550,-1.034365,-4.983563,3.211386,4.845569],[3.957704,6.290461,4.320044,-3.343001,3.829162,-8.166086,6.654867,9.418477,-8.614165,-6.428490,8.667558],[3.947468,-2.980366,8.315103,-7.958387,-5.100079,7.867236,5.919893,5.063046,-2.781905,-4.459887,-4.917373],[3.212959,-2.646446,-7.915646,6.043881,-5.880225,6.020593,4.393452,-6.782295,7.872711,0.494638,-8.206314],[-0.874874,-4.142460,-8.329191,5.242589,8.814301,-0.452431,-2.592222,-6.897951,-7.265195,-0.778381,-9.886535],[5.594642,2.028348,7.359322,9.189413,-5.133185,-2.329642,-2.233693,2.408827,7.748910,-8.737292,-2.661964],[7.918405,8.887626,0.545966,0.358860,1.104451,-2.375253,-7.701998,4.569117,-8.561008,3.896265,1.393050],[2.074471,7.421216,6.454013,7.475886,-3.811912,-8.000330,-5.749302,8.111951,0.601720,-4.648646,5.731435]],[[-8.488218,3.426007,-9.290610,8.954109,-0.170833,1.409235,9.399650,-1.057690,-2.264025,3.266872,-8.029422],[0.844508,-3.816658,-9.682331,-5.896625,9.600111,-8.216802,3.260907,2.169499,-7.883077,-7.455555,3.416678],[-5.364269,-9.209931,-7.738594,-6.760657,6.991097,-5.665187,-3.466367,6.061276,-3.523474,2.806736,9.098964],[-8.489954,9.362443,-0.074926,-2.834028,-2.697345,3.126376,6.335337,-0.232709,-9.616878,0.129052,3.617875],[3.369298,6.214459,0.857361,0.442812,8.499028,0.643498,-5.147838,-1.765171,4.402930,-2.087952,2.007413],[-9.223851,1.420353,-4.544448,6.737454,-8.482868,-5.410804,4.699120,6.242490,-7.671885,-6.722345,4.282318],[7.009914,5.763627,-3.208466,-2.985129,5.410761,-1.246097,7.066240,-8.283711,-4.273823,-6.244154,-1.855163],[8.747437,-4.678629,-4.634301,1.773308,2.633300,-4.384703,-9.882706,-4.455993,-2.503214,0.433534,-0.730519]],[[1.760387,-7.994630,-3.059468,-3.111040,-3.434804,-7.442919,6.123925,0.710066,-7.997710,-4.312675,5.388119],[-0.694304,4.636209,8.126427,4.582871,2.928196,-4.377802,-2.395642,-4.926459,3.375777,-6.960595,1.163032],[9.523903,8.014610,-8.150616,-3.730147,-7.545076,1.208950,2.513539,-2.243030,6.513862,-0.263422,4.156387],[-5.972464,1.964033,-5.410677,6.554904,-6.513234,-7.628798,-8.854002,8.640681,-8.786284,1.526919,8.402210],[3.954045,7.223203,0.040879,-8.421979,7.955368,9.106102,6.337104,-6.654121,9.569434,7.025393,-0.880115],[-4.850156,-4.751709,0.750807,8.821467,-6.607091,0.557790,9.094150,5.095156,8.486867,-3.528306,-9.929131],[4.917699,-7.728742,1.941507,-0.330417,3.414493,7.625241,-4.777502,-4.487088,0.628094,-2.513330,-0.442923],[6.809023,8.495025,-8.234635,2.499053,4.364559,-2.186605,-9.019214,6.349399,3.678935,1.945233,-1.574095]],[[-5.250063,5.934748,-4.033743,-9.931690,6.176012,-8.222636,-1.646499,-3.532543,1.852998,-1.939575,4.913392],[6.732840,-1.042761,-2.475314,4.336888,9.178233,2.864268,2.599500,-2.717253,-4.624757,-6.031374,-6.861250],[-5.017357,-3.839025,7.026779,8.518378,8.658616,4.336228,6.057018,-2.967585,3.216896,-5.190313,-1.630411],[-3.805146,9.907967,0.822409,3.871079,6.776848,-5.554100,-7.244759,-1.553891,2.129180,-4.055547,0.444667],[-7.286156,3.653222,7.657534,-6.947968,5.036173,-8.204937,1.323774,-5.827207,-2.636977,-9.828058,-0.728161],[-4.881402,-7.317584,-3.242778,-3.454501,1.914478,3.535540,-0.245015,-2.362328,2.396532,3.125454,7.694902],[6.931447,-9.072497,0.609707,-2.587699,6.678387,-4.020250,-4.200256,-7.187010,9.796865,5.093108,-1.721347],[6.762315,-6.505950,4.313141,5.118554,9.088366,-1.155417,-4.776591,-8.167752,6.543884,0.538245,-4.809391]],[[1.375013,-5.530411,-5.370169,0.036382,-6.511887,5.344787,9.994052,-2.147365,9.424031,2.679689,6.328113],[1.910004,8.049035,8.759354,7.692639,-8.560578,3.062565,0.195859,3.254433,-9.744503,5.706454,-3.434395],[-3.974142,4.599916,-7.221907,-7.337201,-5.583435,-7.239961,-2.971516,-5.669003,3.579549,-6.288101,-2.670849],[-5.708376,1.879184,0.746727,-6.596812,7.667136,-1.360859,8.369219,-7.113135,1.249743,6.123952,-4.548266],[1.597601,3.692661,2.554773,3.683509,9.512888,9.959723,1.234110,-6.294019,5.231980,-6.043900,-6.554299],[-9.035952,8.804680,-4.217836,0.011261,5.042686,2.412382,7.799794,-2.611871,-3.562160,-9.364274,-8.277540],[-4.057843,-2.226370,4.013110,-3.833203,-0.448926,-0.538817,-0.927803,-1.290939,3.485576,-0.562459,5.796632],[8.219145,1.323976,9.398790,-5.603434,6.443213,-4.128037,-1.775349,-0.394381,-5.522461,7.087436,4.319771]],[[8.999566,-5.099381,4.104996,6.806767,-6.294708,-8.306805,1.596090,-8.553825,-0.304106,-8.541255,5.757934],[-7.564554,9.678874,-2.758257,9.639050,-5.490662,2.684213,1.068483,-2.149040,1.042351,6.600742,-9.389805],[-6.334251,-8.127432,-7.558905,6.161673,9.341783,9.136617,-6.648616,-5.610880,4.121294,-3.887217,7.390460],[7.284980,9.297504,-6.951363,5.404808,5.457870,5.515458,-9.765139,-4.323666,3.795979,9.853400,2.481595],[-8.427819,7.281111,-1.879641,6.267125,5.925941,9.409474,1.567484,1.372739,-0.508031,-1.645281,8.288821],[8.938517,9.287968,6.607233,-4.723632,-0.176573,-6.179271,-2.809404,-0.546975,-7.124274,5.610334,-3.760201],[-5.576263,1.974513,-5.475938,-2.701250,-2.617499,3.960920,7.183442,-6.115915,8.785573,-7.832430,-0.710817],[0.903231,-4.171134,-2.372893,2.790072,8.261653,-5.319377,7.116964,-4.868170,-4.209555,7.277055,-0.903774]],[[7.102806,-5.268228,-0.874979,-0.952532,-2.088875,4.124806,-2.941259,-6.868171,-4.934363,8.464376,-6.806558],[0.704665,-6.349607,4.535933,6.692897,-4.493557,-4.806856,-0.411557,-2.255222,4.379171,-1.631071,0.694398],[-7.492574,-7.977918,6.149871,6.754551,-0.969318,3.518125,5.556185,8.999933,-0.140789,6.202229,-9.260785],[2.702307,-4.827746,2.307418,9.439704,4.978538,-6.989589,-4.619760,2.516789,7.106540,-5.214104,6.003223],[1.453931,0.479610,-6.379729,-8.878967,-1.621103,6.480638,-5.564446,6.604196,-6.591411,5.005512,-7.363203],[-9.322753,-1.150977,-7.641136,-0.201424,-8.295210,-2.288735,-4.360775,-5.362883,0.570488,-6.114805,3.719211],[-4.175036,2.338778,-5.246778,4.931906,-8.698372,-2.509125,-5.040834,-0.885251,-8.475702,-8.649679,-6.821130],[-2.593415,-2.223023,9.658360,-1.273988,5.928302,3.186295,2.910657,-3.904763,-3.628404,6.195560,4.844819]],[[3.186258,-1.108450,-1.428260,-0.700749,1.722055,8.847947,6.067893,4.926733,6.944605,-5.685323,8.043606],[-6.629654,-1.259064,-9.846452,-5.112808,4.858942,4.925982,5.095923,4.000112,-8.210619,-2.530357,-0.214136],[-1.237168,-1.980261,-8.851924,-6.327269,-1.364271,1.614575,-2.433737,-4.920629,1.831991,-5.910473,-6.147251],[-4.788557,-1.601708,-9.916563,-8.990903,-6.816241,-9.666716,0.549627,0.646893,-6.111302,-2.258824,-5.086361],[-6.389426,8.626481,1.792895,-9.732709,-3.798968,5.816850,-3.446611,6.049314,-4.068014,2.752682,-1.772104],[1.888647,5.984687,-9.228400,-4.153755,-9.489645,8.235120,-5.059214,0.260880,-2.694725,-4.572820,-4.021045],[-2.881431,3.082881,2.167467,6.080863,1.039080,1.055241,1.796321,8.221498,2.889448,-4.168713,8.279012],[6.790300,2.578852,-9.317004,3.697808,-2.634078,4.682077,-4.947192,7.392656,-5.037739,-1.217964,9.076813]],[[9.698529,8.709606,-0.566792,-9.652801,4.539070,-6.201103,6.984146,-5.368147,-2.204545,-5.355436,-4.887424],[-7.015474,6.235558,0.793942,1.056559,5.630531,7.957219,8.105979,-8.195836,9.062770,7.215294,-6.247825],[2.928953,7.886880,-7.427078,5.752158,-8.519699,-5.206362,-6.905572,5.516132,-4.582300,8.067274,-1.153880],[5.866332,-4.465689,-7.783782,-0.863672,-1.340604,5.099691,2.699315,-4.210385,-0.631262,8.856889,-0.315832],[-4.496092,5.092943,-3.430490,-3.933548,1.747292,3.376889,4.385290,6.640521,-2.330527,0.025217,7.888558],[3.677317,1.765331,-0.142645,-2.808305,-7.959138,-5.542380,3.532504,-2.254553,2.854889,1.410143,1.165953],[-5.377125,7.149867,7.469273,-3.387450,3.663062,-7.608527,-8.157581,7.311947,0.992045,9.942105,3.165169],[-1.278139,1.932148,5.437710,-9.993962,3.376872,1.888812,5.674739,2.206494,1.253991,-4.560867,9.222400]],[[-2.916648,3.814826,-6.256531,-7.646669,-8.392985,-6.240813,-3.843885,-4.112518,-8.808534,-4.350527,-9.558013],[-0.104416,2.133038,9.748192,9.383837,-7.911608,3.298481,7.496893,8.314280,-2.122996,-7.996674,9.279640],[-5.229311,1.837723,0.795070,8.427555,-0.811377,7.564345,2.325314,6.958446,9.101699,0.799227,2.792246],[-6.639601,-7.311513,-9.572014,4.497415,0.133313,-5.130554,4.308104,-1.674706,4.525914,-4.337243,2.528952],[1.021674,3.993625,-4.872166,-4.315147,2.743592,-2.942575,7.512775,4.869961,-2.265332,-8.939324,6.597512],[-2.073667,-5.497608,-6.490376,-3.820379,7.528672,-7.551468,-2.155785,0.793730,9.647205,-1.710377,-5.309595],[-2.972591,-7.073589,-2.374732,1.872071,-9.208925,-8.334007,-0.146238,-0.576843,-2.171265,-1.756780,-6.617591],[8.614959,6.639607,-1.184881,8.196114,7.224483,-3.778116,-3.552211,5.016428,2.452985,-1.545714,-5.397740]],[[-1.228042,2.447767,-7.372763,-2.754083,2.018898,-9.983173,-8.618084,-3.028959,9.403770,5.187074,1.555097],[0.877374,-9.543079,6.150318,-7.558263,2.146413,-6.096595,4.649162,-9.678116,5.352681,7.695267,2.522916],[-3.198360,1.555754,2.239674,-2.278282,7.362351,1.247450,-6.649170,-1.325497,4.496518,2.457154,-8.734460],[-1.392547,-1.955732,-4.473110,-4.096058,3.374344,3.730310,-1.694237,-9.070220,-3.315992,-8.341800,5.139983],[-9.784981,8.027470,9.235032,1.085542,2.138145,-9.412498,2.539765,-5.327202,-2.304676,-7.494621,-2.502319],[2.567288,5.556003,-6.598133,6.981692,-0.588043,6.107791,2.996766,1.916367,6.645376,1.923975,-4.425956],[-9.955830,-8.108096,6.483338,1.917875,4.275181,-2.486143,-7.976226,7.318019,-6.625551,6.301399,3.574985],[-5.974338,2.305358,-3.670398,8.687674,5.009703,9.051917,8.347360,-0.489834,-9.487033,6.275337,6.559101]],[[-4.668302,4.801358,-3.121737,-2.333025,-2.701474,-8.602630,-8.290751,-8.310426,-4.049371,-9.941392,1.198740],[-2.109846,-0.957615,1.884852,4.772649,0.737782,3.168438,-3.364250,4.810160,-5.535704,7.116848,9.198960],[8.163952,8.045252,7.764619,5.738077,7.196637,-1.699496,-7.884297,1.963152,-5.642173,9.006072,-2.949119],[-0.981887,2.166829,3.365146,4.635347,-6.885895,-6.137394,-2.223017,3.358432,-5.600853,0.794854,-3.522770],[-0.585798,6.489072,-7.169694,4.201951,-9.136952,-0.254743,-3.307318,-2.483262,-3.584270,-8.150489,3.702471],[-5.112878,-7.827858,3.123624,-4.115439,1.222942,-3.462249,2.187886,-1.904653,7.699561,-5.622666,-1.904568],[5.825576,3.555812,8.401370,-4.029986,-9.426557,-4.286931,2.602260,6.335301,8.390509,-3.927284,0.603940],[7.639229,-4.368330,3.325408,-2.351327,5.296729,-2.578568,-1.849862,-0.573439,-4.403125,4.131919,4.941165]]], dtype = "float64")#candidate|9568|(13, 8, 11)|const|float64
var_9569 = relay.var("var_9569", dtype = "float64", shape = (13, 8, 11))#candidate|9569|(13, 8, 11)|var|float64
bop_9570 = relay.equal(const_9568.astype('bool'), relay.reshape(var_9569.astype('bool'), relay.shape_of(const_9568))) # shape=(13, 8, 11)
func_531_call = mod.get_global_var('func_531')
func_533_call = mutated_mod.get_global_var('func_533')
call_9579 = relay.TupleGetItem(func_531_call(), 0)
call_9580 = relay.TupleGetItem(func_533_call(), 0)
output = relay.Tuple([bop_9570,call_9579,])
output2 = relay.Tuple([bop_9570,call_9580,])
func_9586 = relay.Function([var_9569,], output)
mod['func_9586'] = func_9586
mod = relay.transform.InferType()(mod)
var_9587 = relay.var("var_9587", dtype = "float64", shape = (13, 8, 11))#candidate|9587|(13, 8, 11)|var|float64
output = func_9586(var_9587)
func_9588 = relay.Function([var_9587], output)
mutated_mod['func_9588'] = func_9588
mutated_mod = relay.transform.InferType()(mutated_mod)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_9609 = relay.TupleGetItem(func_510_call(), 1)
call_9610 = relay.TupleGetItem(func_511_call(), 1)
func_3746_call = mod.get_global_var('func_3746')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_9636 = relay.TupleGetItem(func_3746_call(), 0)
call_9637 = relay.TupleGetItem(func_3748_call(), 0)
uop_9642 = relay.asin(call_9636.astype('float64')) # shape=(13, 13, 2)
uop_9644 = relay.asin(call_9637.astype('float64')) # shape=(13, 13, 2)
func_2952_call = mod.get_global_var('func_2952')
func_2953_call = mutated_mod.get_global_var('func_2953')
call_9645 = relay.TupleGetItem(func_2952_call(), 0)
call_9646 = relay.TupleGetItem(func_2953_call(), 0)
output = relay.Tuple([call_9609,uop_9642,call_9645,])
output2 = relay.Tuple([call_9610,uop_9644,call_9646,])
func_9663 = relay.Function([], output)
mod['func_9663'] = func_9663
mod = relay.transform.InferType()(mod)
mutated_mod['func_9663'] = func_9663
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9663_call = mutated_mod.get_global_var('func_9663')
call_9664 = func_9663_call()
output = call_9664
func_9665 = relay.Function([], output)
mutated_mod['func_9665'] = func_9665
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_9709 = relay.TupleGetItem(func_6002_call(), 0)
call_9710 = relay.TupleGetItem(func_6004_call(), 0)
func_9074_call = mod.get_global_var('func_9074')
func_9076_call = mutated_mod.get_global_var('func_9076')
call_9724 = func_9074_call()
call_9725 = func_9074_call()
output = relay.Tuple([call_9709,call_9724,])
output2 = relay.Tuple([call_9710,call_9725,])
func_9727 = relay.Function([], output)
mod['func_9727'] = func_9727
mod = relay.transform.InferType()(mod)
mutated_mod['func_9727'] = func_9727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9727_call = mutated_mod.get_global_var('func_9727')
call_9728 = func_9727_call()
output = call_9728
func_9729 = relay.Function([], output)
mutated_mod['func_9729'] = func_9729
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6063_call = mod.get_global_var('func_6063')
func_6064_call = mutated_mod.get_global_var('func_6064')
call_9749 = func_6063_call()
call_9750 = func_6063_call()
output = relay.Tuple([call_9749,])
output2 = relay.Tuple([call_9750,])
func_9761 = relay.Function([], output)
mod['func_9761'] = func_9761
mod = relay.transform.InferType()(mod)
output = func_9761()
func_9762 = relay.Function([], output)
mutated_mod['func_9762'] = func_9762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1888_call = mod.get_global_var('func_1888')
func_1890_call = mutated_mod.get_global_var('func_1890')
call_9800 = relay.TupleGetItem(func_1888_call(), 0)
call_9801 = relay.TupleGetItem(func_1890_call(), 0)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_9818 = relay.TupleGetItem(func_820_call(), 0)
call_9819 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_9800,call_9818,])
output2 = relay.Tuple([call_9801,call_9819,])
func_9820 = relay.Function([], output)
mod['func_9820'] = func_9820
mod = relay.transform.InferType()(mod)
output = func_9820()
func_9821 = relay.Function([], output)
mutated_mod['func_9821'] = func_9821
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9761_call = mod.get_global_var('func_9761')
func_9762_call = mutated_mod.get_global_var('func_9762')
call_9836 = relay.TupleGetItem(func_9761_call(), 0)
call_9837 = relay.TupleGetItem(func_9762_call(), 0)
func_6578_call = mod.get_global_var('func_6578')
func_6580_call = mutated_mod.get_global_var('func_6580')
call_9853 = func_6578_call()
call_9854 = func_6578_call()
output = relay.Tuple([call_9836,call_9853,])
output2 = relay.Tuple([call_9837,call_9854,])
func_9856 = relay.Function([], output)
mod['func_9856'] = func_9856
mod = relay.transform.InferType()(mod)
output = func_9856()
func_9857 = relay.Function([], output)
mutated_mod['func_9857'] = func_9857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_9898 = func_2376_call()
call_9899 = func_2376_call()
func_4672_call = mod.get_global_var('func_4672')
func_4673_call = mutated_mod.get_global_var('func_4673')
call_9912 = relay.TupleGetItem(func_4672_call(), 1)
call_9913 = relay.TupleGetItem(func_4673_call(), 1)
func_6700_call = mod.get_global_var('func_6700')
func_6702_call = mutated_mod.get_global_var('func_6702')
var_9915 = relay.var("var_9915", dtype = "float64", shape = (2028,))#candidate|9915|(2028,)|var|float64
call_9914 = func_6700_call(relay.reshape(var_9915.astype('float64'), [13, 13, 12]))
call_9916 = func_6700_call(relay.reshape(var_9915.astype('float64'), [13, 13, 12]))
func_8087_call = mod.get_global_var('func_8087')
func_8088_call = mutated_mod.get_global_var('func_8088')
call_9930 = relay.TupleGetItem(func_8087_call(), 1)
call_9931 = relay.TupleGetItem(func_8088_call(), 1)
output = relay.Tuple([call_9898,call_9912,call_9914,var_9915,call_9930,])
output2 = relay.Tuple([call_9899,call_9913,call_9916,var_9915,call_9931,])
func_9933 = relay.Function([var_9915,], output)
mod['func_9933'] = func_9933
mod = relay.transform.InferType()(mod)
mutated_mod['func_9933'] = func_9933
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9934 = relay.var("var_9934", dtype = "float64", shape = (2028,))#candidate|9934|(2028,)|var|float64
func_9933_call = mutated_mod.get_global_var('func_9933')
call_9935 = func_9933_call(var_9934)
output = call_9935
func_9936 = relay.Function([var_9934], output)
mutated_mod['func_9936'] = func_9936
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1518_call = mod.get_global_var('func_1518')
func_1520_call = mutated_mod.get_global_var('func_1520')
call_9995 = relay.TupleGetItem(func_1518_call(), 1)
call_9996 = relay.TupleGetItem(func_1520_call(), 1)
output = call_9995
output2 = call_9996
func_9997 = relay.Function([], output)
mod['func_9997'] = func_9997
mod = relay.transform.InferType()(mod)
mutated_mod['func_9997'] = func_9997
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9997_call = mutated_mod.get_global_var('func_9997')
call_9998 = func_9997_call()
output = call_9998
func_9999 = relay.Function([], output)
mutated_mod['func_9999'] = func_9999
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9727_call = mod.get_global_var('func_9727')
func_9729_call = mutated_mod.get_global_var('func_9729')
call_10000 = relay.TupleGetItem(func_9727_call(), 1)
call_10001 = relay.TupleGetItem(func_9729_call(), 1)
output = call_10000
output2 = call_10001
func_10017 = relay.Function([], output)
mod['func_10017'] = func_10017
mod = relay.transform.InferType()(mod)
mutated_mod['func_10017'] = func_10017
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10017_call = mutated_mod.get_global_var('func_10017')
call_10018 = func_10017_call()
output = call_10018
func_10019 = relay.Function([], output)
mutated_mod['func_10019'] = func_10019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5330_call = mod.get_global_var('func_5330')
func_5331_call = mutated_mod.get_global_var('func_5331')
call_10044 = func_5330_call()
call_10045 = func_5330_call()
func_8329_call = mod.get_global_var('func_8329')
func_8332_call = mutated_mod.get_global_var('func_8332')
const_10048 = relay.const([-8.393862,-5.187580,-6.816891,-2.967418,3.708688,0.103559,7.964448,-7.691674,6.659807,-8.660767,4.576113,2.233816,-5.983615,7.167856,-4.380734,0.288146,0.347904,9.728684,7.689587,-5.800520,-8.805681,-7.252834,9.245783,0.923372,2.316467,-5.312162,-0.816684,-5.193643,2.080362,-0.401458,-1.396464,-3.195382,-4.796261,6.150024,-6.639818,-8.188100,8.574676,-0.546752,0.854595,7.596345,4.590587,1.741640,4.275686,3.666000,8.806786,1.253204,1.885960,-0.495025,9.277772,0.639261,6.563163,-1.826580,-3.360746,-4.654451,-8.741885,-1.431034,6.931744,1.368995,-2.573953,6.745454,-3.174285,0.885316,-2.297327,6.630975,1.361046,7.406373,-6.418070,-6.716233,-6.045436,-0.079572,-5.583219,4.722525,-0.779090,4.297002,5.339308,3.692181,3.345805,3.199834,-7.911386,3.989937,9.744684,-2.419114,-4.781396,-3.948985,5.781484,7.142102,0.417326,0.064696,7.916013,-5.775110,0.150235,-2.046739,-9.112671,2.804069,7.155510,4.730246,1.231996,-8.125606,-9.836943,7.248266,-1.478688,4.887430,4.605015,3.979786,6.912675,2.568743,4.983723,0.786573,9.743494,-0.838922,3.402034,4.138905,-7.484635,-5.594161,-9.050388,-4.380466,-1.088510,-1.284040,6.851216,-3.509998,-0.564824,0.758888,-9.929580,7.007970,0.955763,-6.810914,9.436283,-2.931389,7.554275,-0.618693,-7.465302,-5.182504,9.955353,-9.351045,6.269079,6.053869,-8.151692,4.606845,-5.802246,-2.832322,1.324043,-5.136804,-4.507133,-3.015086,-1.824397,5.330405,6.271132,7.622524,-1.321572,5.630467,1.988288,2.978734,-5.713603,-0.760679,-0.861842,-6.689079,0.587087,-1.318398,7.563856,6.907653,-1.953521,-9.710712,5.380579,-8.266875,6.008727,0.657814,-1.479780,-5.307456,5.899836,1.618121,2.202963,3.165304,0.595789,-9.379956,-1.405914,-2.628062,-4.491787,8.937458,-6.908336,-9.519746,8.108018,-4.240427,-5.431346,-7.019762,3.339508,8.500535,-1.603323,4.524122,4.974296,-7.203159,-6.485033,-6.672549,-0.988742,-5.519698,5.543740,-7.407567,-5.319746,-3.502988,-1.278043,-3.705139,5.812371,-6.575292,4.108222,7.026633,-6.947343,-0.355908,-3.325012,0.490205,-7.744943,3.272186,-9.140190,8.994490,7.263915,-0.122781,-8.468225,1.335080,-1.678589,3.170456,-2.805865,-5.360284,7.949711,0.548610,1.321580,-6.066893,-1.668434,9.910743,8.228723,3.713174,9.298110,-1.722772,-8.499944,2.324965,-1.170565,-0.825973,7.663820,9.382261,-8.596491,-4.764599,1.058429,8.995720,-4.734050,7.855619,1.442610,-1.625712,-7.057836,8.361001,9.551947,3.509947,3.350298,-8.438288,2.756658,4.298174,-1.037315,2.979508,-4.773559,1.740993,-2.007831,4.414591,3.191009,-5.745278,-7.998669,-5.968840,-5.930626,2.775339,-9.232762,-2.524704,2.851315,3.750334,7.890069,-3.804864,0.133858,-8.002486,-9.905097,-5.715102,-6.490965,7.260926,-9.213407,-0.530995,0.903808,-4.610618,9.108054,7.610750,4.507966,-9.026893,-0.357518,-4.786927,-1.881390,3.468681,-2.653665,-0.123011,-9.001230,-4.718230,9.236116,0.610840,-7.399885,-8.711292,-0.766401,8.171631,-0.201745,-8.045467,-2.337868,0.997052,6.077572,8.827442,-8.829900,-4.658289,5.580590,5.601472,2.534348,2.058094,-7.055781,2.163307,-3.081931,-3.574942,-8.875639,6.097810,-1.039462,9.632215,1.808875,4.130165,-1.644147,-6.651617,-1.654316,1.099350,-6.197479,-0.717541,-0.608393,2.443811,-4.729236,-9.793239,-6.928751,1.297892,-8.802487,-4.530273,5.101515,0.010207,-7.541418,1.184015,2.713472,-4.371073,1.407214,-2.636053,6.905372,-1.201320,-1.147853,-0.784030,-4.968275,8.519235,6.905896,-5.393448,9.918364,-0.840143,2.789468,4.149213,-9.858329,-2.956356,-0.951337,-1.936186,-5.974481,9.533021,5.121979,2.605437,7.308647,-0.643550,2.384108,1.792687,-1.461592,-2.152469,8.846810,-1.906298,1.880406,2.515185,1.331290,0.617558,3.487332,-0.859006,3.729077,-5.014009,-1.769016,2.764129,-9.927753,2.780010,-0.385290,-2.222555,9.562872,-5.860630,-8.758595,-0.611288,6.123167,2.547443,-9.453780,1.848619,-5.602082,-5.518249,-8.562338,-2.086699,-2.392005,8.147686,7.576093,-3.386518,-7.851552,4.429069,-9.515258,-4.820291,-5.227177,-8.339351,-4.316638,-5.080032,-1.135357,0.679222,-9.799661,3.839385,3.431137,9.805721,-5.467012,6.526241,-5.848430,8.780971,-1.097466,-1.401116,-7.368877,8.646523,-4.795905,5.322738,-4.378103,5.324266,-1.017336,8.574110,6.380389,-8.445075,-9.554570,-6.544859,-1.508583,-4.156480,-6.569162,2.097757,2.438952,8.229165,-4.454077,-0.146872,7.098508,5.319964,-5.867266,-9.402858,-6.866921,-0.716590,-5.559034,9.019082,-2.869877,-9.312018,9.227662,5.994257,-2.930609,-0.674764,4.187044,-5.827094,3.364494,-7.511335,-8.446970,6.027480,6.825711,-5.541161,4.905027,5.945720,8.954822,-4.253787,2.236789,3.994640,-9.953561,3.132932,2.738948,-9.801862,1.423958,-5.470802,7.198889,-3.332053,5.636695,3.030440,6.701792,9.019066,-2.756349,5.955431,5.361988,3.506465,-8.266678,-7.119989,-8.640877,-3.576745,7.682296,-4.689790,6.017917,-1.892026,5.401880,5.869103,-3.051800,7.209357,-9.321136,-5.234820,4.988617,9.515428,-1.074076,3.627661,-8.542651,3.993275,3.141087,0.177411,-5.505003,1.656151,4.604297,-7.971180,5.873787,-0.696112,-3.489527,-7.719023,-7.415348,-7.849572,9.823487,-1.781273,2.363882,2.617817,2.985836,3.690619,-5.522543,5.021096,0.753829,9.280084,3.815348,-2.934019,7.944555,5.882375,-2.693900,-6.146391,-3.578127,-4.330864,-4.541576,-0.267588,-2.020523,-2.956764,-6.699395,-0.737805,3.672963,4.796401,7.777606,4.654028,-3.053116,-7.648350,-4.772951,-2.157952,2.510694,-3.038034,-9.045014,7.122325,7.372271,-7.049838,6.575558,6.861574,-9.188926,7.849154,6.499968,-2.107126,-7.216986,-6.176315,-9.538107,4.905535,7.177602,6.330210,-3.230456,-7.525777,-5.992243,6.620743,1.412416,9.798567,4.332733,3.030432,6.021069,-5.073400,6.001387,-1.635435,1.247144,2.342874,8.143739,5.980601,-2.214764,9.739511,-6.671442,-2.531461,-7.494484,7.078142,6.742838,-9.020853,9.197093,-0.782210,8.538298,-3.398377,-1.622506,-4.985931,-7.376307,1.108801,4.026570,-5.874745,0.411690,-6.744988,-4.864530,-9.253343,-2.683378,-4.053701,4.448237,-7.634083,0.557143,-7.336979,7.758561,9.843534,-7.882930,-9.316714,-5.998106,7.442981,4.916103,9.645616,4.724748,8.348309,-4.247219,5.094483,-0.293798,-7.703499,-1.935257,6.205937,0.746718,-2.493504,2.618963,-8.784296,9.059826,-3.253128,1.056125,-1.091516,5.147198,-9.996080,1.740520,3.414386,-4.966557,3.480547,-1.047723,-1.920559,6.936491,3.910569,8.498807,-0.276153,7.121276,6.655633,-0.765207,-9.991480,-8.910402,3.328745,-1.781360,9.370597,9.522096,-9.210830,-8.523680,5.973355,4.298381,-3.236084,-3.339205,0.900927,1.643260,-1.994871,-9.043777,5.766934,-9.367432,-9.941429,-9.533526,5.768033,-6.960330,0.152279,-1.211929,-0.440814,-6.107265,-7.150127,-0.976477,-9.621042,-7.619243,0.787162,8.668969,8.172894,-1.146223,0.543041,-4.871480,-4.087993,-6.346495,8.290124,-6.178152,-0.843404,-8.669275,-2.551457,-8.663682,0.271711,0.771983,6.843713,9.074746,-2.697843,-7.573217,-4.067855,-5.250419,6.524833,7.445077,7.520682,-6.886069,-3.558980,-7.960357,6.799277,5.539587,-5.932064,-4.715003,-2.168870,-0.706019,1.005396,-7.188141,3.136920,-6.230713,9.847590,9.841862,3.575427,-6.691532,6.010812,-6.379573,6.552174,7.934351,6.899007,7.217046,4.348851,-5.535886,-4.845714,6.007980,-0.781773,-9.431605,6.096034,-0.916940,6.439387,-6.505697,-7.441013,-9.707109,-0.358476,6.865348,9.011635,7.058718,-9.209444,5.688188,-0.736401,5.886664,-8.171041,-0.943405,4.578613,-6.516256,7.366627,9.414415,-7.021716,8.086210,5.573464,-1.645817,2.986235,-3.714465,0.632800,-3.247962,-0.935241,-6.486702,8.617735,-6.785398,-2.981203,-5.710563,7.996288,8.853768,7.062438,-1.763911,4.448248,7.962371,6.969937,-2.291008,4.900784,-6.761079,-2.231399,-6.195262,-2.718088,0.217561,7.460633,-4.216364,1.129276,-6.316044,8.248752,-9.392407,2.685185,9.516257,5.957196,-2.002600,1.338195,-6.933393,3.143057,5.377000,0.584518,-7.103903,-0.394965,8.768660,-4.422000,-4.865271,-1.927514,-9.710659,-9.496877,-8.173580,-5.505317,-4.414347,-6.281802,3.920318,7.838456,6.365846,2.533778,-0.295987,-1.910808,-1.509701,9.334031,-5.151704,8.478574,-2.039842,3.152151,5.113606,3.738072,9.048583,-7.398749,8.435613,4.016361,-5.094608,8.156502,5.563162,-3.469603,-9.712548,-8.326697,2.465094,-0.076235,-4.255522,8.391022,9.097396,2.088311,-3.635659,3.962609,-1.265248,-7.015068,-0.482566,7.191457,7.149953,2.015742,1.101076,4.714720,0.338540,-0.988100,1.421840,2.140704,-8.343029,9.837447,-1.501650,5.550746,7.549476,2.074114,2.501858,2.054777,-2.723940,-7.649773,2.027109,-4.020606,5.066316,-3.177525,-8.452507,1.179903,-7.575207,9.393345,-8.648764,5.967679,-4.067196,5.752800,2.340230,2.063362,0.162871,-9.855623,3.300489,6.414707,5.753181,8.976385,8.608391,2.921391,4.685035,-7.325099,6.063157,6.557306,-5.424129,6.582523,-5.669116,8.380907,-1.947825,-2.416975,-6.541276,9.593089,5.405191,-3.211659,2.505649,-3.382174,-1.875004,-2.818758,9.775454,-0.194008,-6.884376,4.362464,-6.607918,-6.124134,-3.574796,-2.769629,-0.894019,7.002660,-4.042826,-7.980384,0.615202,-5.741667,2.007840,9.352303,-5.645268,-8.212534,9.062316,2.269388,-9.476414,-5.263292,-7.240026,-7.751081,-6.215533,-0.764528,6.752265,0.365171,-7.802923,-3.933542,-7.411471,-9.968951,7.846136,-1.797496,-3.404034,-1.669795,1.969466,-6.315160,1.100596,9.716379,-9.649597,-4.412882,-6.259822,-1.250042,1.572054,0.366543,-0.470841,7.986650,-4.112113,-4.237367,8.395705,-2.994222,6.920054,7.379423,9.978513,8.804425,-3.989083,4.531578,5.269156,3.654210,-7.902654,-4.399698,-9.733937,6.517881,9.164668,-1.584974,-4.814185,-7.148037,5.203959,5.882210,-1.981321,-1.757206,-1.030757,2.060685,7.288047,1.869505,2.660002,-1.907958,4.089909,3.296533,2.216716,0.658467,-8.070569,3.526541,1.106188,-5.064091,8.603786,9.201197,-0.203416,1.008485,0.224344,6.595350,1.602200,0.042101,3.809400,0.133750,-3.097494,6.636852,-5.083149,-0.071956,1.337270,1.619165,3.135820,-1.583125,-5.304393,5.342311,-6.815020,-2.724827,-5.789514,-2.642000,-3.879361,-8.955401,5.125758,1.282117,-8.871190,0.017956,-2.107971,6.522667,7.407881,4.912196,2.554515,-3.782097,-3.490828,5.607353,-4.158383,-9.768821,-4.409551,7.092701,-4.305065,3.169735,-2.598113,-1.426152,-4.552980,-7.679513,-9.828418,9.216812,-8.048529,4.229953,-2.530494,9.977314,0.794102,-1.119846,-5.571681,2.031364,-8.682402,1.352114,4.998268,-1.333380,2.561312,-3.868296,-4.290485,-6.391468,7.462187,3.123967,-4.214101,-4.497732,5.890854,9.956379,-0.649961,-4.443934,-7.953833,7.567009,-8.122734,2.978814,-3.736166,9.981749,1.154619,1.642424,5.421960,-6.690169,1.434962,4.742699,0.139943,-6.426517,3.447514,8.153873,-8.847526,-2.255373,-4.778371,0.596001,0.942477,2.431493,-6.783434,3.373773,-6.218153,6.505134,-1.176200,-2.467494,-5.689206,4.598376,1.949804,1.574209,9.360364,-5.823461,7.484805,-8.292527,-0.008022,9.815989,-5.577434,3.912172,-5.990475,-5.973818,7.359337,0.214811,2.959111,-2.256806,9.064202,-0.575990,9.231936,-4.480736,-1.025287,6.869413,-9.727545,8.862646,8.915065,0.799010,-6.415433,-4.461322,-2.487700,0.592295,-1.356820,2.115916,4.234305,-1.634778,-9.648221,9.182108,2.715203,-4.654385,4.748443,-6.209553,-3.963241,-9.912663,6.556092,-7.686193,-3.255922,7.243040,4.020912,-4.696268,-8.482721,0.872605,6.676523,-5.910876,2.476309,3.427345,-0.968396,1.269610,2.286457,8.104693,-8.328104,0.939210,5.934908,9.924560,9.560029,3.493595,-3.543794,-1.873530,5.860745,-1.732863,9.422327,7.296580,2.982411,-5.352317,9.400774,6.388266,-3.245004,-3.952346,5.057896,-6.789537,-0.100619,8.586558,3.796853,-4.994395,-1.877874,7.200950,-6.700654,8.385121,-6.278590,1.957648,-1.838952,1.461812,3.246200,-6.903135,-1.637616,7.611757,2.550812,0.998343,-2.362188,5.777154,5.771066,2.474405,-5.661060,1.736893,-6.500015,-9.063194,-3.175747,0.093009,7.482520,-4.145414,5.551441,-8.727968,-7.406400,9.495279,-9.772341,9.625693,9.816443,8.743936,-3.573709,-1.003449,8.301733,9.063733,3.737396,2.619157,-1.281511,-5.723996,6.979310,-8.992369,-5.078027,9.877452,7.660222,-3.983311,7.732484,-5.313962,8.115799,-2.821188,3.733677,-3.833430,4.526860,7.893418,7.025378,2.051462,1.779551,8.909425,0.896373,-7.904171,9.986006,5.260993,-6.130333,-9.350836,7.199430,6.071456,-0.310478,1.819711,8.650575,-4.548666,-7.186472,-8.736732,5.379788,8.599128,-1.351954,0.392256,1.859649,-5.085379,-1.662912,0.580082,4.237380,-5.317085,-0.165861,9.811442,6.339646,-4.439952,4.036837,8.380477,-9.768119,2.727335,-3.601630,8.504161,-5.360422,1.076888,-4.731245,-1.779831,3.034955,-1.928647,-8.438483,-6.151131,1.349100,1.911726,6.895025,7.088765,0.866492,-7.483282,-0.749282,1.137876,7.627092,4.335199,0.747138,0.937608,5.134155,-6.092190,-3.753597,3.016424,-1.942081,-9.558150,8.717218,8.243927,3.856128,-1.731774,1.731525,-4.586537,-2.737050,1.443309,9.647029,0.278490,-6.240096,-2.631194,-3.537989,-5.459467,-2.334773,-1.730587,-3.975337,-0.859732,5.571759,1.159527,3.046315,8.958243,-2.447514,1.466547,0.244227,-6.373955,1.156316,-0.651938,-1.063736,-4.180573,-2.642699,-0.926541,-3.759020,-0.685633,1.532022,8.280793,1.198215,-3.680727,5.697559,2.858684,-9.322604,-5.807698,-0.220782,7.664760,9.544482,0.182670,-5.515492,-4.557936,-1.415586,-6.026046,5.958253,-2.240533,-7.790554,-3.341446,3.763153,9.527902,9.419738,6.924934,-0.284812,-5.473851,-3.878654,0.705508,9.932079,9.387758,-9.654244,6.107405,3.817405,-1.545795,-3.555909,5.250489,-9.454527,-5.977390,-8.773737,8.108613,-4.228681,-4.551656,3.991447,-6.631634,-0.425245,4.928366,3.328268,-0.958242,-7.112866,3.258721,5.361960,-5.523389,6.599374,2.329025,-4.086519,-6.006053,-8.595773,7.193329,3.469123,-4.063516,-8.114644,-0.377826,-0.958857,-8.972125,-8.927458,3.965586,1.037306,7.942195,-2.777476,-3.242874,-8.766868,-0.792023,-5.106796,-8.522599,2.878971,6.608511,-7.959970,7.792133,-3.083362,-5.020348,1.940689,-4.712636,7.064292,1.494556,-7.785315,0.959071,8.024275,7.099664,0.677840,2.212917,-3.516707,-6.607424,-1.464270,8.828908,-4.956653,6.192765,5.865639,-6.175524,-3.448298,4.888423,2.767408,8.308311,-6.041159,-3.236885,-2.811070,-9.948250,-8.390442,-9.719025,-7.549807,0.373515,9.809016,1.195399,-5.847717,6.242159,6.477367,0.614407,0.180405,1.755220,7.730436,-1.588157,7.735984,-2.872054,7.190417,7.177344,-0.589623,-6.815486,1.538212,2.364934,3.809898,-1.086154,1.113556,-8.135062,-3.521040,-6.817002,2.369498,-0.948489,4.856371,5.876085,6.978051,-2.955988,7.067051,6.348259,-8.034950,8.329279,3.421821,5.967166,4.704195,-7.085212,1.424692,-0.412080,9.858053,-0.260321,5.196741,6.862918,-5.044458,7.953777,7.507940,-6.568029,1.031644,8.893188,-4.704343,3.620391,-6.102054,7.652940,-9.311226,5.599061,-1.212842,-1.246419,2.687201,-3.769961,3.682905,1.160387,-9.722532,0.125884,2.300752,9.147717,5.706040,-5.204658,-4.640530,9.535105,5.833049,-0.155322,-7.722749,6.474501,-5.647505,7.682352,9.547406,-5.927129,8.409797,9.718476,5.985572,-0.633517,3.580164,-7.064481,-3.238524,-4.241178,-9.714305,-8.647136,6.064921,-7.888652,4.083425,-8.535405,3.957466,1.898414,-5.330790,9.416807,3.842581,-4.421036,-8.577467,-9.358307,-9.307626,-5.275214,6.835317,-8.217806,6.560825,-9.629959,-2.828991,8.811911,-0.129682,-0.516581,-6.233365,-5.246420,6.524637,-3.115533,1.351324,2.509119,-2.014247,5.354561,-6.243125,-9.596521,-4.169925,-3.809406,5.350659,-5.551562,-0.147208,-4.364906,2.145019,-3.560229,3.391611,-7.039472,9.831626,6.007525,-3.476992,4.903791,-9.080273,-2.984069,0.285740,0.919978,-6.305670,-2.047248,5.017436,5.505374,3.682485,5.977611,5.975424,3.271996,1.970879,-9.849461,7.735733,-3.433268,4.552439,5.413087,-0.057744,-5.613391,-4.482156,0.497794,2.459836,-8.574550,3.725082,-3.273662,-5.268423,9.304783,-3.305575,0.259939,-2.409953,3.475370,-8.073992,-5.661206,9.115058,0.001018,3.838719,8.918850,-0.402448,2.162287,-1.930474,-5.795246,2.236071,-4.554547,2.819151,-9.647021,-2.163307,8.358192,-6.888570,1.286362,-0.830307,2.761490,1.722880,0.516243,7.230072,9.141154,-2.557921,-7.965363,-7.422445,8.918428,-1.512447,5.706603,7.905506,4.819692,-9.529481,4.368845,8.961571,-0.764512,-9.961695,-3.021170,-9.071843,2.864622,5.325055,-5.429056,-5.415330,7.004820,4.575192,3.874611,-7.518229,-0.587300,8.563492,3.540571,1.308361,-1.435279,9.905027,7.768811,-3.844100,-8.648770,-9.097068,3.593805,-1.482864,4.115019,7.202076,-7.710976,6.874476,-4.488002,4.081151,6.321380,8.572598,-7.644515,6.805198,-9.357493,-3.035975,6.385586,-0.901594,9.656843,-5.053223,-6.341791,-4.923883,0.244735,-1.548944,-1.649603,5.062209,-6.294781,2.955101,-8.679986,-5.597701,6.949161], dtype = "float32")#candidate|10048|(1690,)|const|float32
call_10047 = relay.TupleGetItem(func_8329_call(relay.reshape(const_10048.astype('float32'), [1690,]), relay.reshape(const_10048.astype('float32'), [1690,]), ), 1)
call_10049 = relay.TupleGetItem(func_8332_call(relay.reshape(const_10048.astype('float32'), [1690,]), relay.reshape(const_10048.astype('float32'), [1690,]), ), 1)
output = relay.Tuple([call_10044,call_10047,const_10048,])
output2 = relay.Tuple([call_10045,call_10049,const_10048,])
func_10054 = relay.Function([], output)
mod['func_10054'] = func_10054
mod = relay.transform.InferType()(mod)
mutated_mod['func_10054'] = func_10054
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10054_call = mutated_mod.get_global_var('func_10054')
call_10055 = func_10054_call()
output = call_10055
func_10056 = relay.Function([], output)
mutated_mod['func_10056'] = func_10056
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3858_call = mod.get_global_var('func_3858')
func_3859_call = mutated_mod.get_global_var('func_3859')
call_10150 = func_3858_call()
call_10151 = func_3858_call()
output = relay.Tuple([call_10150,])
output2 = relay.Tuple([call_10151,])
func_10174 = relay.Function([], output)
mod['func_10174'] = func_10174
mod = relay.transform.InferType()(mod)
mutated_mod['func_10174'] = func_10174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10174_call = mutated_mod.get_global_var('func_10174')
call_10175 = func_10174_call()
output = call_10175
func_10176 = relay.Function([], output)
mutated_mod['func_10176'] = func_10176
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2169_call = mod.get_global_var('func_2169')
func_2171_call = mutated_mod.get_global_var('func_2171')
call_10182 = relay.TupleGetItem(func_2169_call(), 0)
call_10183 = relay.TupleGetItem(func_2171_call(), 0)
func_5791_call = mod.get_global_var('func_5791')
func_5793_call = mutated_mod.get_global_var('func_5793')
call_10184 = relay.TupleGetItem(func_5791_call(), 1)
call_10185 = relay.TupleGetItem(func_5793_call(), 1)
func_9997_call = mod.get_global_var('func_9997')
func_9999_call = mutated_mod.get_global_var('func_9999')
call_10191 = func_9997_call()
call_10192 = func_9997_call()
output = relay.Tuple([call_10182,call_10184,call_10191,])
output2 = relay.Tuple([call_10183,call_10185,call_10192,])
func_10205 = relay.Function([], output)
mod['func_10205'] = func_10205
mod = relay.transform.InferType()(mod)
output = func_10205()
func_10206 = relay.Function([], output)
mutated_mod['func_10206'] = func_10206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7443_call = mod.get_global_var('func_7443')
func_7445_call = mutated_mod.get_global_var('func_7445')
call_10210 = relay.TupleGetItem(func_7443_call(), 1)
call_10211 = relay.TupleGetItem(func_7445_call(), 1)
func_2035_call = mod.get_global_var('func_2035')
func_2037_call = mutated_mod.get_global_var('func_2037')
const_10216 = relay.const([[True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True]], dtype = "bool")#candidate|10216|(1, 2535)|const|bool
call_10215 = relay.TupleGetItem(func_2035_call(relay.reshape(const_10216.astype('bool'), [13, 13, 15])), 0)
call_10217 = relay.TupleGetItem(func_2037_call(relay.reshape(const_10216.astype('bool'), [13, 13, 15])), 0)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_10221 = relay.TupleGetItem(func_3472_call(), 0)
call_10222 = relay.TupleGetItem(func_3474_call(), 0)
output = relay.Tuple([call_10210,call_10215,const_10216,call_10221,])
output2 = relay.Tuple([call_10211,call_10217,const_10216,call_10222,])
func_10226 = relay.Function([], output)
mod['func_10226'] = func_10226
mod = relay.transform.InferType()(mod)
mutated_mod['func_10226'] = func_10226
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10226_call = mutated_mod.get_global_var('func_10226')
call_10227 = func_10226_call()
output = call_10227
func_10228 = relay.Function([], output)
mutated_mod['func_10228'] = func_10228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9727_call = mod.get_global_var('func_9727')
func_9729_call = mutated_mod.get_global_var('func_9729')
call_10229 = relay.TupleGetItem(func_9727_call(), 1)
call_10230 = relay.TupleGetItem(func_9729_call(), 1)
func_7716_call = mod.get_global_var('func_7716')
func_7718_call = mutated_mod.get_global_var('func_7718')
call_10237 = func_7716_call()
call_10238 = func_7716_call()
output = relay.Tuple([call_10229,call_10237,])
output2 = relay.Tuple([call_10230,call_10238,])
func_10251 = relay.Function([], output)
mod['func_10251'] = func_10251
mod = relay.transform.InferType()(mod)
mutated_mod['func_10251'] = func_10251
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10251_call = mutated_mod.get_global_var('func_10251')
call_10252 = func_10251_call()
output = call_10252
func_10253 = relay.Function([], output)
mutated_mod['func_10253'] = func_10253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_10285 = relay.TupleGetItem(func_2646_call(), 0)
call_10286 = relay.TupleGetItem(func_2647_call(), 0)
const_10295 = relay.const([[[True,False,True,False,True,False,False,False,False,False,True,True,True,False,False],[True,True,True,True,False,True,False,False,False,False,False,True,False,False,False],[False,True,False,True,False,True,False,False,False,False,False,True,False,True,True],[False,True,True,True,False,True,False,False,False,False,False,False,True,False,False],[True,True,False,False,False,False,True,False,False,True,True,False,False,True,True],[False,True,False,True,False,True,False,False,True,False,False,False,True,True,False],[True,True,True,True,True,False,True,False,False,True,False,True,True,False,False],[True,False,True,True,True,True,False,False,True,False,False,True,False,True,True],[False,True,False,False,False,True,False,False,True,False,True,True,False,True,False],[False,False,False,False,True,False,True,False,False,True,False,False,False,False,False],[True,False,True,True,False,True,False,False,True,False,True,True,True,True,False],[True,True,False,False,True,True,False,True,True,False,False,True,False,False,True],[False,False,False,True,True,False,True,False,True,False,False,False,True,True,True]],[[True,True,False,True,True,False,True,True,True,False,True,True,False,True,True],[True,False,True,True,True,True,False,False,True,True,True,True,True,False,False],[False,False,True,False,True,False,False,False,True,True,True,False,False,True,False],[False,False,False,True,False,True,False,False,False,True,True,True,False,False,True],[True,False,True,False,False,True,True,True,True,False,False,False,True,True,True],[True,True,False,True,False,False,False,True,False,False,False,True,True,True,True],[True,False,True,False,False,True,True,True,False,True,False,True,True,True,False],[True,False,True,True,True,True,True,True,False,True,False,True,False,True,False],[True,False,False,False,True,False,True,False,False,False,True,False,True,True,True],[True,False,True,False,True,False,True,False,True,False,True,True,True,True,True],[True,False,True,True,False,False,True,True,True,True,True,False,True,False,True],[False,True,True,True,True,False,True,True,False,True,True,True,False,False,False],[True,True,False,True,False,False,True,True,False,False,True,True,True,False,False]],[[False,True,True,False,False,True,False,False,False,True,True,True,False,True,True],[True,True,False,True,False,False,False,True,True,False,False,False,True,True,True],[True,True,False,True,True,False,False,False,False,False,True,True,True,True,True],[False,False,False,False,False,False,False,False,True,True,False,True,False,True,False],[True,True,False,True,False,True,True,False,True,False,False,False,True,True,False],[False,True,False,False,True,False,False,True,False,False,False,False,True,False,False],[False,True,True,False,False,True,True,False,True,True,False,True,True,True,False],[True,False,True,False,False,False,False,True,True,True,True,True,True,False,False],[True,False,True,False,False,False,True,False,False,False,True,False,True,False,True],[True,False,True,False,False,False,False,False,True,True,True,False,True,True,False],[True,False,True,False,True,True,False,False,True,False,True,False,False,False,True],[False,False,True,True,False,True,True,True,True,False,False,True,False,True,False],[True,False,False,False,True,True,True,True,False,True,False,True,True,False,True]],[[False,False,True,True,False,False,False,True,True,False,False,True,True,False,True],[True,True,True,True,True,False,True,True,False,True,False,False,False,True,False],[True,False,True,True,True,True,True,False,False,False,False,False,True,True,True],[False,False,False,False,True,False,False,False,True,False,True,True,False,True,False],[True,True,False,False,False,False,True,True,False,True,True,False,False,False,True],[True,True,True,True,True,False,True,True,True,False,False,False,True,False,False],[False,True,True,False,True,True,False,False,False,False,False,True,False,False,True],[True,True,False,False,False,True,True,False,True,False,False,True,False,False,True],[False,False,True,True,False,False,False,True,True,False,True,True,True,False,True],[True,True,False,True,False,False,True,True,False,False,True,True,True,True,True],[False,False,True,True,True,True,False,False,False,True,False,False,False,False,False],[True,True,True,True,False,True,True,True,False,False,True,True,True,False,True],[False,True,True,True,False,False,False,False,False,True,True,True,True,True,True]],[[True,False,False,False,True,False,False,True,False,False,True,True,False,False,False],[True,False,True,False,True,True,False,True,False,True,False,True,False,True,True],[True,False,True,True,True,True,True,True,False,True,True,True,True,True,True],[True,False,True,False,False,False,True,True,True,True,False,False,True,False,True],[False,True,False,True,False,True,False,True,False,False,True,True,True,False,True],[False,True,True,True,True,False,True,False,True,True,False,True,True,True,True],[False,True,False,False,False,False,True,True,True,True,True,False,True,True,False],[False,True,True,True,True,False,True,False,True,False,True,True,True,False,False],[False,True,True,False,True,True,False,True,False,False,False,False,False,True,True],[True,True,False,False,True,True,True,False,False,False,True,True,True,False,False],[True,True,True,False,True,False,True,False,True,False,False,False,False,False,True],[True,True,True,True,False,False,True,True,False,True,True,True,False,False,False],[False,True,True,True,True,False,False,False,False,True,False,False,True,False,True]],[[True,True,False,False,True,False,False,False,True,False,True,False,False,True,False],[False,False,True,True,True,False,True,True,True,False,True,True,False,False,False],[True,True,True,False,True,False,False,True,False,False,False,True,False,False,True],[True,False,True,False,True,False,True,False,False,False,False,True,True,True,True],[True,False,True,True,False,False,True,True,False,False,True,False,True,True,False],[False,False,False,True,True,True,False,False,True,False,False,False,True,True,True],[False,True,True,True,False,False,False,True,True,False,True,False,False,True,True],[False,True,False,False,True,True,True,True,True,False,True,True,False,False,False],[True,False,True,True,False,True,True,False,True,False,False,False,False,False,True],[True,False,True,True,False,False,False,True,True,True,True,False,False,False,False],[True,True,False,False,False,False,False,True,False,True,True,False,True,True,False],[True,True,False,False,False,False,False,True,True,True,False,True,True,True,True],[True,False,False,True,False,True,False,False,False,False,True,False,True,True,True]],[[True,False,False,False,False,True,False,False,False,False,True,False,True,False,True],[False,True,True,False,False,False,True,False,False,False,True,False,False,False,True],[True,True,True,False,True,True,True,False,True,True,False,False,True,True,False],[True,True,True,False,True,True,False,True,False,True,True,True,True,True,True],[False,False,False,True,False,False,False,True,False,True,False,False,True,False,True],[True,True,False,False,True,True,True,False,False,True,True,True,False,False,False],[True,False,True,False,True,True,False,True,True,False,False,True,False,True,True],[True,False,False,True,False,False,False,True,False,True,True,True,False,True,True],[True,True,True,False,True,False,True,True,True,False,True,True,False,True,False],[True,False,False,False,True,False,False,True,True,False,False,False,True,True,False],[False,False,True,True,False,False,True,True,True,False,False,False,True,False,True],[True,True,True,True,True,False,True,True,True,False,True,False,True,False,True],[True,False,True,False,True,True,False,False,False,True,False,False,True,True,False]],[[False,False,False,True,True,True,True,False,True,False,True,False,False,False,True],[True,True,True,False,True,True,True,True,True,False,False,False,False,True,True],[True,True,False,True,False,True,False,True,False,True,True,True,False,False,True],[True,True,False,False,False,True,True,True,False,True,True,False,True,False,True],[False,True,False,False,False,False,False,False,True,False,False,False,True,False,False],[False,True,False,False,True,False,True,True,True,True,False,True,True,True,True],[False,True,False,False,False,False,False,False,False,True,False,False,True,True,False],[False,True,True,False,True,True,False,False,False,True,True,False,False,False,True],[True,False,False,True,False,False,True,False,False,False,True,False,False,False,True],[True,False,False,False,False,True,True,False,True,True,False,False,True,False,False],[False,False,False,True,True,False,True,True,False,False,True,True,False,True,False],[False,False,False,False,True,True,False,False,True,True,False,True,False,True,False],[False,False,False,True,True,True,True,False,False,False,False,True,True,True,True]],[[True,True,True,False,True,False,True,True,True,False,True,True,False,True,False],[False,True,False,False,False,True,True,False,False,False,False,False,True,True,True],[False,True,False,False,True,False,False,False,True,True,False,False,False,False,True],[True,False,True,True,False,True,True,False,True,True,False,True,True,True,True],[True,False,False,True,False,True,True,False,True,True,False,True,True,False,False],[True,True,False,False,True,True,True,False,True,True,True,True,False,False,False],[True,True,False,True,True,False,False,False,True,True,True,True,True,True,True],[True,False,True,True,False,False,False,True,False,True,False,True,False,True,True],[True,False,True,True,False,False,False,False,False,True,False,False,False,True,True],[True,False,True,False,True,True,False,False,False,False,True,True,True,False,False],[True,True,False,False,False,False,False,False,True,False,True,True,False,True,False],[True,True,False,False,True,True,True,False,True,False,False,True,True,False,True],[True,True,False,True,True,False,False,True,True,True,True,False,False,False,False]],[[False,True,True,False,False,False,True,True,False,True,True,True,False,False,True],[True,True,False,True,True,True,True,True,False,False,False,True,True,False,True],[True,False,True,False,False,True,False,True,False,True,False,False,False,False,False],[True,True,False,True,False,True,False,False,False,False,False,False,True,True,False],[True,False,False,False,False,False,True,True,True,True,False,False,True,False,False],[False,True,False,False,False,False,True,False,False,True,False,True,True,True,False],[True,False,True,True,False,True,True,True,False,False,True,False,False,False,False],[True,False,True,True,False,True,True,True,True,False,False,True,True,True,True],[True,False,True,False,True,False,False,False,True,False,True,False,True,True,True],[True,False,True,True,True,False,False,True,True,False,True,False,True,False,True],[False,True,False,False,False,True,False,False,False,True,False,True,False,True,False],[True,True,True,False,False,False,False,False,True,False,False,False,False,False,False],[True,False,False,True,False,False,True,False,False,True,False,False,False,False,False]],[[False,True,True,True,True,True,False,False,True,True,False,False,False,False,False],[False,True,False,False,True,True,False,False,True,False,True,True,True,True,True],[True,True,False,False,True,False,True,True,False,False,False,False,False,False,False],[False,True,True,True,True,False,False,False,False,True,False,True,True,True,False],[False,False,False,True,False,True,True,True,False,True,False,False,True,False,True],[True,True,False,False,False,True,True,False,True,True,True,False,True,False,True],[True,True,False,True,False,False,False,True,False,False,False,False,True,True,False],[False,False,True,False,False,True,True,True,True,True,True,True,True,False,True],[False,True,False,False,True,False,True,True,True,True,False,True,True,True,False],[True,True,False,True,True,True,False,False,False,False,True,True,True,False,True],[False,True,True,True,True,False,True,False,True,True,True,True,False,False,False],[True,False,True,True,True,False,False,True,True,True,True,False,False,False,True],[False,True,False,True,False,True,True,True,False,False,False,True,False,True,False]],[[False,False,False,False,True,True,False,False,False,True,True,False,False,True,False],[True,True,True,True,False,True,False,True,True,False,False,True,False,False,False],[False,False,False,False,False,False,True,True,False,True,False,True,True,False,False],[False,True,False,True,False,False,True,True,False,False,True,False,True,True,False],[False,True,False,False,True,True,False,False,False,False,False,False,True,True,True],[False,True,False,False,True,True,False,False,False,False,False,True,False,True,True],[False,True,False,True,False,False,False,False,False,False,True,False,False,False,False],[True,False,True,False,False,False,True,True,False,True,True,False,False,False,False],[True,False,True,False,True,True,False,True,False,False,True,True,True,False,True],[True,True,False,False,True,False,True,False,True,True,True,True,False,False,True],[False,True,True,True,True,True,True,True,False,True,False,False,False,True,False],[True,False,True,True,False,True,False,True,True,True,True,True,False,True,True],[True,True,False,True,False,False,False,True,True,False,False,True,False,False,False]],[[False,False,False,False,True,True,True,True,False,False,True,True,True,True,False],[False,True,True,True,False,False,True,False,True,False,False,False,False,True,False],[False,True,False,True,True,False,False,False,True,False,True,False,False,False,False],[False,True,True,False,False,True,False,True,True,True,True,True,True,True,False],[False,False,False,False,True,True,False,True,False,False,True,True,False,True,True],[False,False,False,True,False,False,False,False,True,True,True,True,True,True,False],[True,True,False,True,True,True,True,False,False,True,False,False,False,False,True],[True,True,True,False,False,True,False,True,True,False,False,True,True,True,False],[True,True,True,False,False,False,True,True,False,False,False,False,False,False,True],[True,False,False,True,False,False,False,False,True,False,False,False,True,True,True],[True,True,False,False,True,True,False,False,False,True,False,True,True,False,True],[False,False,True,False,True,True,True,True,False,False,True,False,False,False,False],[False,True,True,False,True,False,True,False,False,False,True,True,True,False,True]]], dtype = "bool")#candidate|10295|(13, 13, 15)|const|bool
bop_10296 = relay.logical_and(call_10285.astype('bool'), const_10295.astype('bool')) # shape=(13, 13, 15)
bop_10299 = relay.logical_and(call_10286.astype('bool'), const_10295.astype('bool')) # shape=(13, 13, 15)
output = bop_10296
output2 = bop_10299
func_10301 = relay.Function([], output)
mod['func_10301'] = func_10301
mod = relay.transform.InferType()(mod)
output = func_10301()
func_10302 = relay.Function([], output)
mutated_mod['func_10302'] = func_10302
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10305 = relay.var("var_10305", dtype = "bool", shape = ())#candidate|10305|()|var|bool
var_10306 = relay.var("var_10306", dtype = "bool", shape = (14, 3, 8))#candidate|10306|(14, 3, 8)|var|bool
bop_10307 = relay.logical_or(var_10305.astype('bool'), var_10306.astype('bool')) # shape=(14, 3, 8)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_10314 = relay.TupleGetItem(func_780_call(), 0)
call_10315 = relay.TupleGetItem(func_782_call(), 0)
func_8433_call = mod.get_global_var('func_8433')
func_8436_call = mutated_mod.get_global_var('func_8436')
var_10320 = relay.var("var_10320", dtype = "float64", shape = (80,))#candidate|10320|(80,)|var|float64
call_10319 = relay.TupleGetItem(func_8433_call(relay.reshape(var_10320.astype('float64'), [10, 8, 1])), 0)
call_10321 = relay.TupleGetItem(func_8436_call(relay.reshape(var_10320.astype('float64'), [10, 8, 1])), 0)
func_10174_call = mod.get_global_var('func_10174')
func_10176_call = mutated_mod.get_global_var('func_10176')
call_10323 = relay.TupleGetItem(func_10174_call(), 0)
call_10324 = relay.TupleGetItem(func_10176_call(), 0)
output = relay.Tuple([bop_10307,call_10314,call_10319,var_10320,call_10323,])
output2 = relay.Tuple([bop_10307,call_10315,call_10321,var_10320,call_10324,])
func_10335 = relay.Function([var_10305,var_10306,var_10320,], output)
mod['func_10335'] = func_10335
mod = relay.transform.InferType()(mod)
var_10336 = relay.var("var_10336", dtype = "bool", shape = ())#candidate|10336|()|var|bool
var_10337 = relay.var("var_10337", dtype = "bool", shape = (14, 3, 8))#candidate|10337|(14, 3, 8)|var|bool
var_10338 = relay.var("var_10338", dtype = "float64", shape = (80,))#candidate|10338|(80,)|var|float64
output = func_10335(var_10336,var_10337,var_10338,)
func_10339 = relay.Function([var_10336,var_10337,var_10338,], output)
mutated_mod['func_10339'] = func_10339
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9997_call = mod.get_global_var('func_9997')
func_9999_call = mutated_mod.get_global_var('func_9999')
call_10372 = func_9997_call()
call_10373 = func_9997_call()
func_1798_call = mod.get_global_var('func_1798')
func_1800_call = mutated_mod.get_global_var('func_1800')
call_10392 = relay.TupleGetItem(func_1798_call(), 0)
call_10393 = relay.TupleGetItem(func_1800_call(), 0)
func_3942_call = mod.get_global_var('func_3942')
func_3944_call = mutated_mod.get_global_var('func_3944')
call_10404 = relay.TupleGetItem(func_3942_call(), 0)
call_10405 = relay.TupleGetItem(func_3944_call(), 0)
func_3967_call = mod.get_global_var('func_3967')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_10422 = relay.TupleGetItem(func_3967_call(), 0)
call_10423 = relay.TupleGetItem(func_3969_call(), 0)
func_8768_call = mod.get_global_var('func_8768')
func_8770_call = mutated_mod.get_global_var('func_8770')
const_10425 = relay.const([5.451789,9.900516,-1.296747,3.541681,-4.352542,-8.139468,-8.004048,-1.514250,-5.389800,-8.698057,9.035079,-4.729980,9.215033,-1.746585,-4.397043,5.581858,-7.105354,-4.026924,5.086901,-4.259135,-8.844925,8.081603,-7.013999,-5.737385,-1.237999,8.199905,0.237826,5.459023,-3.811767,-9.559075,6.036586,-4.860938,-0.923533,-6.800081,3.370421,2.732686,-2.939006,-9.403475,-5.430841,0.766971,8.734494,2.212674,-8.889067,8.831884,-3.992785,-0.560147,5.541853,5.510483,5.921540,-0.398590,-2.316730,2.819248,-6.855010,2.813894,-9.673633,7.666640,0.333809,4.567516,3.040198,-8.491676,-1.022102,-7.086746,-7.791568,4.311005,2.292658,-7.729367,6.882708,-6.863165,4.527056,2.070441,3.056995,-6.739788,6.049694,-1.836489,-7.497396,-9.548289,3.852839,1.818763,8.225666,-0.160478,-5.090769,-3.144581,-3.110417,4.929325,0.760676,9.881991,-9.150952,1.789396,4.210149,-6.852989,4.920756,-4.313645,9.693281,-3.649016,-3.684047,-6.350197,9.070858,0.434245,2.349579,3.087228,0.931327,2.710228,-6.180010,7.580750,4.331937,-9.753822,-8.101539,3.600775,-1.898595,-6.972863,-6.998839,0.683623,-2.807347,5.237855,2.153768,-6.166758,-0.825618,-5.960902,-4.634541,-4.273214,-5.591776,-9.825999,-2.567244,-1.419734,8.179941,3.494143,7.802774,0.828068,2.285496,-1.266555,-1.277016,5.638004,-9.109762,6.467991,1.728093,-7.222093,-1.873598,9.512132,1.454391,5.096091,-8.647072,-9.215490,0.360148,8.064291,2.790481,-7.017709,-4.855743,-9.911749,3.843726,-7.986038,8.621178,-4.430961,1.754858,-7.032528,-9.505932,-3.412915,1.534949,-5.669684,-3.222588,8.288245,0.555242,8.946585,-5.517794,9.021352,-6.557327,-5.947812,-5.479218,9.114011,-8.652976,-1.683634,-0.264257,-1.985807,-6.440388,-3.724496,-4.208526,-4.458443,7.666014,-3.635980,7.838374,-4.224380,1.753507,4.592497,1.711057,6.326293,3.768499,-1.182386,-7.686779,1.921777,-6.075381,-7.024036,0.589472,-8.250722,-9.287977,-6.034237,-5.024390,2.973896,-6.934931,-1.760123,-6.196435,2.518993,4.336896,8.820667,-5.940820,-8.380640,-8.394521,-0.449259,1.274069,9.485383,4.061496,5.417611,-9.759093,4.656477,-7.682519,-8.103725,8.671307,-6.550623,-7.834691,8.808852,-3.236145,4.622229,-3.314002,-4.677046,-3.787277,9.328257,-2.150613,-6.443117,-9.824988,2.515560,2.851255,2.763224,3.515517,8.749929,1.276557,8.733218,3.622616,-9.621632,-0.956268,2.087804,-5.593647,-5.215920,-0.162519,8.048539,-0.499333,7.145158,2.491761,-6.380848,-6.104792,-7.864955,-2.627793,6.168569,-6.867107,9.336713,-0.502339,7.552865,-4.624048,2.658689,-0.095362,7.077677,5.076133,-9.900900,5.969711,-8.788197,3.527339,7.952747,-5.969132,8.657756,-9.647049,1.433095,7.504299,-9.472100,-1.103475,-5.057650,-7.090144,6.098494,-0.683347,-2.779505,-2.652231,6.046248,9.454801,-6.109473,1.477632,-7.319740,-4.197622,4.312569,3.499309,7.771616,2.462125,-8.127375,6.150501,-2.770886,-2.008970,9.198284,0.059030,-6.631692,6.477356,-5.726257,-6.266809,0.725315,-4.630643,-6.477206,-9.744586,5.123252,-9.928623,6.631969,6.570280,2.809099,1.734380,-7.352208,-0.479337,7.543159,9.212021,-9.503378,9.248038,2.626213,-8.941049,2.685934,0.231311,7.236795,-8.189909,-1.994231,-9.275526,8.041512,-7.940447,-4.873038,-2.202788,9.718366,4.379496,6.623787,2.608526,-2.801082,7.178694,-2.187407,-6.616751,-8.524598,-6.232306,-4.194998,-1.700685,-0.197297,8.975734,7.550541,6.562613,-6.042802,6.814960,3.752817,-4.234171,-4.498618,6.670395,-8.406873,-4.077488,-9.775477,2.675832,6.344325,3.528201,5.938037,-8.881167,-7.046558,4.723412,-7.393990,9.380247,5.514940,2.027658,5.524023,-6.132686,-7.909856,-7.183187,2.896388,1.255827,9.159126,8.336445,-6.429447,-8.689301,4.145062,6.637552,-0.769646,6.999120,-4.914912,5.546971,0.193671,9.731980,3.651226,-2.748305,-8.387505,5.461281,-2.279348,-4.297190,5.701957,-2.950932,-9.263133,-5.297907,-5.945932,-8.038654,0.273058,-7.831094,7.358868,-2.572273,1.056781,2.932398,7.949422,8.180358,2.664994,-2.536927,-2.570589,2.121866,-1.721684,1.658995,4.207245,7.026718,-4.933082,8.708700,5.629471,-2.840389,5.167424,-8.693767,-2.675387,-0.081330,7.738670,-4.774282,2.060373,-0.167396,-6.948223,-9.745703,5.180914,-2.569191,7.781257,7.907288,6.031761,5.163354,-7.255294,7.672763,-6.120999,-5.452014,-1.172658,3.639174,0.708551,3.525686,-6.170736,0.929625,4.178132,3.432250,-8.464969,-6.682823,-0.549209,-1.578965,6.802050,3.384556,0.284876,-6.481344,8.367686,-3.770053,9.957868,-6.672718,9.796133,-8.091245,2.325120,-9.079548,-9.141713,2.848066,-1.646120,2.517000,-2.977105,0.566263,6.463247,5.572189,-5.069041,0.636484,-6.937062,0.744697,4.948937,-1.829820,9.033615,-9.352560,3.481043,-9.585084,3.731594,-6.647251,-2.818781,-9.444709,7.259200,-9.859106,4.522411,2.141600,0.561823,9.118621,-9.685995,7.777885,-0.577103,-2.352694,-2.030999,-0.274541,-0.209803,0.335304,-9.975354,-1.336336,3.574307,1.162865,-6.435383,-0.688748,8.384178,2.670258,-4.663319,9.187858,-4.836123,-3.114892,-3.003708,6.945864,8.721486,-3.952458,-0.822347,4.116689,0.838065,-1.978365,-5.891212,-2.926056,-4.852619,5.089399,-9.487278,-5.639195,-9.566122,5.462347,4.967144,-9.601364,5.459435,-3.366421,6.496434,-4.683735,1.442143,5.047775,3.358112,2.265467,3.349701,-5.297434,-7.629252,-6.851815,-8.711828,1.003884,-0.879479,-2.831396,-0.425191,0.449363,6.551207,2.515928,-0.781325,-2.741296,-0.317817,-7.946600,-9.116785,2.978233,8.817851,-5.986566,-9.410704,6.377917,7.857619,-8.565306,-8.011817,2.003455,9.959768,-4.792292,0.794173,-5.907959,6.509939,7.376094,2.982472,-8.667132,7.959249,-6.393803,-2.117161,-9.630809,-3.282754,-9.735055,9.364685,-4.455520,-8.002132,-8.306691,6.464987,2.963340,7.866426,-5.136706,3.466330,3.470308,6.155513,-7.503251,8.820167,6.217499,-4.096595,7.503566,-3.258427,-5.881586,-7.813866,-5.820498,7.118079,-0.154878,9.338021,-3.122219,3.925270,8.561572,2.165372,5.547232,-7.894865,-3.398924,-5.431662,-4.034927,3.751728,5.568835,-1.183952,8.307557,7.785541,-5.694885,8.161852,1.063780,5.252722,3.127409,8.055725,7.407530,-6.587046,-6.800863,7.569922,7.769026,0.326548,1.896000,-0.414452,-0.134595,-3.928516,-7.089639,5.984540,0.286482,-3.478069,9.696550,4.032235,-6.291606,2.766348,-6.015952,3.354517,0.275628,-9.216236,-7.369773,-1.405411,-8.517274,-3.345757,-4.936159,-9.551027,-3.065571,-8.405477,-8.512616,-5.614891,8.520921,0.535574,0.361784,6.101672,-8.401093,5.787497,1.415450,1.635531,-7.835702,-9.996311,8.689293,-3.478056,-5.055313,0.056933,-9.889752,9.572523,9.013883,7.927663,8.879714,-6.197502,-6.008947,4.842308,4.224015,8.874225,-2.835712,-7.873084,9.698372,5.393153,0.374142,-4.680682,-2.498846,-3.361731,8.518501,-7.499549,-4.549794,-7.579819,-0.563506,-1.390671,-1.718985,-8.025398,-4.770743,-6.091212,5.895015,0.433434,-4.516225,5.125927,4.759877,6.524690,0.568560,5.029498,-5.169707,9.142730,7.779848,-8.548475,4.300550,-8.993454,7.603195,0.647143,-1.953585,2.888966,8.597397,-6.465382,-0.749679,6.418682,3.286446,-2.742870,-8.348852,6.603354,5.211137,1.230677,-9.238626,-1.560695,-0.478723,-9.481837,-1.282668,5.959103,-5.237994,-4.152956,2.715033,4.989688,5.376868,-7.663959,1.859979,7.872807,3.293262,7.220665,7.890915,5.919845,-6.350491,-7.024225,-3.653585,-8.868601,3.461901,8.629718,-7.665962,-9.481039,-3.979643,8.685678,-8.155549,9.425994,8.023740,1.172531,-6.993577,-6.414210,-8.550337,-9.821750,-0.329882,-2.365075,0.670387,5.138155,-3.004323,0.303934,-0.451040,-7.605810,-3.568207,1.140074,-4.358635,-5.332549,1.675117,2.197621,4.373525,-8.229085,-5.013523,-8.143715,6.236577,3.736283,8.479935,-5.822864,9.972363,-7.162654,-5.982342,2.558910,-3.138783,-1.635427,-9.739174,0.295661,2.574310,-1.141985,-6.778514,0.800899,-8.695617,7.056113,-4.688132,5.869787,-2.794365,4.100303,0.669505,-6.525910,-2.053146,-4.062830,-6.643164,-5.940003,2.624175,-8.302686,1.955035,4.604059,-3.177973,6.051563,6.184260,8.657798,-9.860467,-1.121462,2.310683,8.220096,0.373783,3.655928,-5.285699,5.987371,-5.130453,1.502195,-8.262486,0.433030,-8.328548,0.880980,3.284831,6.332335,5.057945,-8.207334,-3.567817,-2.389565,4.239351,-6.347768,4.943216,0.365471,1.333847,-4.482031,-3.394045,-9.340665,-3.498148,-8.480836,-2.922356,-2.057731,3.133766,5.071460,-5.651219,-9.888924,5.963045,1.666369,-2.464283,-8.474860,-7.104123,8.491462,-1.456021,9.490455,4.515508,-2.974461,8.603479,3.000782,4.058729,2.324443,-2.088114,8.532266,-3.265588,9.040552,-0.759421,-6.688645,-6.355339,9.910836,5.773168,3.107906,-7.084014,5.174525,-5.552004,-9.385207,6.291161,-6.859190,6.043406,6.807544,-0.701573,1.821659,-7.778534,7.586886,2.730637,5.902453,9.080963,-4.006708,-4.592459,-3.068843,-8.971304,8.143191,-3.063254,-7.870487,2.645708,9.354069,-3.020388,-9.939165,-3.617352,6.123531,-4.815010,-9.518092,8.436443,1.116957,-7.324588,0.629728,3.764495,-6.297745,-1.946073,5.773745,-8.111125,6.650961,9.602643,9.728233,-2.094876,-5.133067,4.400056,-6.444916,3.266128,8.555493,8.986230,-5.489314,1.940901,-7.125584,5.825489,0.566117,-8.136672,-0.485036,3.287956,8.574449,-3.949194,-9.155936,9.166462,1.792117,5.082360,-6.053469,1.134835,7.013391,-3.313998,-2.985169,2.190051,2.031356,-8.877196,-1.728780,-8.929367,5.686360,4.821945,-1.400922,7.189080,7.858258,-8.850262,1.583028,-5.131654,-0.466639,1.914920,6.214647,2.491379,-6.500385,-1.854984,2.778116,2.901104,-0.632771,-3.580052,0.431060,-6.852542,-1.534101,-5.761295,-1.129350,-2.811698,1.392537,2.357699,7.738556,-7.184998,-5.051881,-5.685258,7.250557,6.868063,-6.267892,-8.570731,0.025063,-9.501716,-0.218895,7.244943,4.800046,4.041039,0.790266,1.463094,3.190208,0.783201,9.783993,8.784575,2.618008,-2.411869,8.793993,3.499314,6.687709,-9.778315,-9.663438,-2.303302,-5.466599,8.104441,-3.951572,-7.483851,-2.506200,7.531287,7.091320,-0.056868,9.825339,-7.785555,9.194119,7.148220,1.357229,-2.944490,-1.752566,1.019764,9.962573,-3.553592,-4.035972,6.392584,-1.471688,-6.453184,-6.044669,-5.610897,3.150009,-1.072418,-2.674287,6.615057,7.747708,-1.885340,-9.397679,-7.642976,-5.178296,9.015613,5.178407,8.171229,4.951122,7.220851,-4.001656,-3.902436,-7.328955,-6.627523,-0.670686,-8.942457,-6.176188,1.178437,8.254736,-9.171408,0.691479,-2.786326,-0.737808,-6.463022,2.084782,8.711702,-5.242284,5.521116,-2.991498,6.962860,4.955591,7.727238,-1.195529,-5.091905,-1.962923,7.107087,-8.409426,6.930770,7.944743,-5.102675,7.481712,-6.840223,0.732550,3.585107,-8.592277,0.059850,-4.781324,9.602694,8.180149,-4.959886,-0.703084,9.753704,5.931063,1.609221,3.176077,9.296275,-7.128910,-3.093260,2.784312,4.935948,-5.871963,6.346027,8.261864,-4.628424,-6.958842,2.723907,-4.757242,2.229215,9.503577,8.758142,6.417011,2.066763,-5.495363,8.393724,0.014639,1.268512,3.454544,8.036011,8.062561,-9.029323,-7.336401,-0.020422,-8.492618,1.409706,7.381364,-7.434936,5.118050,-2.289203,6.533734,-0.580947,-7.595640,9.810016,-3.421464,7.582027,-2.456427,-8.257237,7.675341,8.042778,-1.429404,3.235035,9.169047,-2.683138,6.954492,5.117574,4.578793,-9.981503,3.370037,5.527022,-8.083699,-8.854482,-0.846840,4.468436,6.891921,-9.242078,2.482618,7.285072,1.954015,-4.911013,-2.338238,-8.314030,5.966027,-0.658365,-3.598183,-4.762044,-6.679191,1.432368,2.900466,-8.005517,3.681971,1.066299,-5.947428,-8.890481,-6.096723,-6.836422,-3.086297,-4.600501,1.481000,-1.319059,2.711393,-8.747572,1.392409,-3.275044,9.583817,-4.143143,3.418758,0.288839,-6.070111,-3.041195,-5.549478,-3.402638,7.238284,-1.698736,9.764601,-9.666159,-7.590132,-7.202136,-4.332631,-6.716447,0.377328,-5.204471,-3.921123,-2.398370,7.705084,-6.887243,1.151613,-6.101990,4.711847,-2.989761,-5.795812,8.712324,1.680236,-6.454956,9.004044,5.868775,6.574936,3.640515,-2.017588,8.336140,-6.982092,3.763435,-6.176302,-0.971855,5.088144,-7.916794,4.307150,-7.627446,8.846504,-6.723961,1.086069,7.501192,-1.789543,5.140681,-7.553392,-4.300436,-9.046814,-0.306361,-1.401726,-7.237571,2.653540,7.019567,0.794545,-0.895489,-9.349043,6.336241,-5.204658,1.749066,9.577005,3.079763,4.382396,1.466261,-1.433046,-2.557840,-3.579464,-0.447927,3.716774,9.002647,5.392993,1.706541,-8.298534,7.973624,8.079363,1.477772,9.908231,-5.473242,0.867587,-7.163457,1.634532,-9.812161,-8.135963,-1.586486,-8.113130,-3.123418,2.565686,2.982737,-9.416182,-8.930695,3.664506,-7.165118,4.503450,0.863926,-4.396517,-9.099844,-4.748225,-7.957408,0.261061,-2.039256,-4.348554,1.489570,-2.959112,3.849455,9.388903,-3.091142,-5.132935,-3.637067,2.369327,-6.898109,7.448019,-4.758720,0.842795,-0.199598,9.840982,-6.503108,5.632143,0.497125,-0.786085,-2.155008,-3.680095,2.901004,-7.187313,-1.816170,9.701167,1.923516,7.105018,3.336138,-5.544910,5.765138,-2.791185,5.651379,8.081910,-7.071575,-1.359847,-6.349367,7.120368,6.287459,4.564398,-3.489215,-0.477608,5.625515,9.830147,-9.086436,0.964699,7.912596,9.195867,6.412787,8.493271,-8.309978,6.830805,-0.942638,-0.102578,-4.326111,-0.455540,7.188411,-0.752150,-5.446809,9.554170,-9.389221,0.224061,-3.991205,-1.120934,3.379274,1.084231,3.296752,-4.920068,-4.149894,2.217767,-0.101822,8.917304,-0.250258,6.279295,3.753362,6.487098,9.840906,1.595955,1.547459,4.275619,7.869690,7.919322,3.275411,-3.907353,-7.125462,-1.527747,3.771943,-1.676202,-9.369736,1.932872,-3.346263,6.787007,6.764437,-3.807968,-8.009393,0.331557,-8.194511,5.166839,9.988804,7.526247,5.394745,-3.243333,8.365237,5.365408,-4.245318,8.299464,3.263103,-3.884569,9.790544,-4.744771,6.388041,0.726088,-5.421326,9.253938,9.125084,1.766494,6.975209,2.190975,6.724591,-8.606002,2.644656,-6.520665,-3.978667,8.462039,1.237073,4.447215,-0.722771,9.083195,6.988562,-3.621475,0.785893,-9.136098,1.856311,-1.249527,-9.022688,1.797227,-5.565700,-4.099075,-2.676819,2.502276,8.819036,-2.248307,7.808889,-5.466253,3.092385,8.007288,7.396661,8.751585,-5.931680,4.236831,-4.472509,-6.334487,-5.863757,1.746969,8.398766,3.476860,5.519577,-6.381599,1.363313,-2.055097,3.032823,8.081468,3.461637,4.443478,-5.479957,-6.442971,4.003812,-9.539342,3.771582,7.907150,-5.635755,-3.797079,-0.447592,-7.293451,5.269307,-3.210499,4.652950,4.397021,-9.520573,-7.179129,1.315522,2.302186,7.776652,3.674379,8.533218,8.078794,0.875112,-2.532942,-6.455851,0.412408,1.118590,-5.039412,1.550589,1.008488,2.735523,8.089955,-6.625651,2.112123,-5.132341,-1.465275,2.827782,9.588984,6.745712,3.642703,-7.187038,-6.641316,-9.710405,-9.017248,-8.154900,-7.790294,2.465594,0.285020,-5.163647,-4.674468,7.329009,6.296304,-6.277251,2.063580,-4.568308,-9.252900,0.648820,-2.087588,9.236277,1.888066,-1.270260,6.074060,8.557007,3.420534,-7.850154,-5.820116,-4.623448,-6.265810,-1.618950,5.311008,-0.165184,-3.166825,-1.135473,-2.961260,0.847294,8.373044,1.814232,-7.056244,0.252286,-4.128958,8.992648,7.107556,-2.280254,-1.659254,7.835659,1.148306,9.152649,8.200859,-9.835729,-5.982674,-9.904523,5.793359,-9.049753,-8.220152,6.696602,2.372055,-7.838618,5.247448,7.784062,5.435797,1.417447,-5.385728,-7.830824,-1.988168,7.763439,8.067903,-4.466661,3.326276,-5.138321,8.065162,3.685650,-7.480138,0.493690,-1.881558,7.270843,-3.975951,5.971903,-4.317240,-7.799780,-5.695349,7.345593,9.239516,6.204457,-5.285551,6.842792,0.198397,6.304675,-4.020526,7.239971,4.065809,-7.383950,2.155829,-8.484916,-1.077007,-5.483904,0.542129,-8.227934,-3.345589,8.978157,8.988693,-0.454328,6.112545,-9.731112,-0.784429,3.232369,-6.212958,4.211721,1.273179,8.938154,9.914416,-4.063385,5.871793,4.466249,-1.197883,0.608826,6.590445,6.652768,1.367472,-8.256499,5.610344,7.603281,-3.129888,-3.732024,-8.021611,6.331843,7.653583,-0.371676,-5.252125,-1.189255,2.867072,-4.273949,1.901613,5.339084,5.223509,2.816893,3.478966,-3.906476,5.732497,1.566004,2.023022,4.886386,3.626110,1.639695,-4.045890,-1.571317,9.135218,-0.943094,-3.905252,3.747398,-8.465861,5.507666,3.962199,6.903692,-4.611542,9.635030,5.076529,-0.616483,-5.072060,-7.118567,-0.195908,-8.290145,4.276328,-7.631980,8.189115,7.170111,-9.532904,1.286976,-7.114047,3.471581,-6.281664,-2.263941,3.709998,-5.332177,4.499614,-1.700652,3.962384,2.324551,-7.647991,1.874938,-2.666698,7.404794,2.993367,-1.410291,3.449651,-3.562914,-2.901588,2.649525,1.771492,-6.064143,-0.480392,-7.149205,7.663112,-1.548846,-4.752083,6.619712,-8.391670,1.543204,-0.965904,0.428666,6.526289,6.204249,9.868098,-3.264656,-2.020575,8.065585,2.486048,-7.632232,3.100272,-3.704601,-0.917600,-7.997989,-1.762282,-9.219940,-2.990854,-2.681870,0.979668,7.815730,-9.921496,-3.517002,-5.143966,2.627938,4.688094], dtype = "float32")#candidate|10425|(1690,)|const|float32
call_10424 = relay.TupleGetItem(func_8768_call(relay.reshape(const_10425.astype('float32'), [1690,])), 0)
call_10426 = relay.TupleGetItem(func_8770_call(relay.reshape(const_10425.astype('float32'), [1690,])), 0)
output = relay.Tuple([call_10372,call_10392,call_10404,call_10422,call_10424,const_10425,])
output2 = relay.Tuple([call_10373,call_10393,call_10405,call_10423,call_10426,const_10425,])
func_10428 = relay.Function([], output)
mod['func_10428'] = func_10428
mod = relay.transform.InferType()(mod)
mutated_mod['func_10428'] = func_10428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10428_call = mutated_mod.get_global_var('func_10428')
call_10429 = func_10428_call()
output = call_10429
func_10430 = relay.Function([], output)
mutated_mod['func_10430'] = func_10430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9856_call = mod.get_global_var('func_9856')
func_9857_call = mutated_mod.get_global_var('func_9857')
call_10462 = relay.TupleGetItem(func_9856_call(), 1)
call_10463 = relay.TupleGetItem(func_9857_call(), 1)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_10490 = relay.TupleGetItem(func_1947_call(), 0)
call_10491 = relay.TupleGetItem(func_1949_call(), 0)
func_8838_call = mod.get_global_var('func_8838')
func_8839_call = mutated_mod.get_global_var('func_8839')
call_10494 = relay.TupleGetItem(func_8838_call(), 0)
call_10495 = relay.TupleGetItem(func_8839_call(), 0)
func_7980_call = mod.get_global_var('func_7980')
func_7982_call = mutated_mod.get_global_var('func_7982')
call_10498 = func_7980_call(relay.reshape(call_10490.astype('bool'), [13, 13, 1]))
call_10499 = func_7980_call(relay.reshape(call_10490.astype('bool'), [13, 13, 1]))
output = relay.Tuple([call_10462,call_10490,call_10494,call_10498,])
output2 = relay.Tuple([call_10463,call_10491,call_10495,call_10499,])
func_10507 = relay.Function([], output)
mod['func_10507'] = func_10507
mod = relay.transform.InferType()(mod)
output = func_10507()
func_10508 = relay.Function([], output)
mutated_mod['func_10508'] = func_10508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_10524 = relay.TupleGetItem(func_5119_call(), 0)
call_10525 = relay.TupleGetItem(func_5120_call(), 0)
output = relay.Tuple([call_10524,])
output2 = relay.Tuple([call_10525,])
func_10530 = relay.Function([], output)
mod['func_10530'] = func_10530
mod = relay.transform.InferType()(mod)
mutated_mod['func_10530'] = func_10530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10530_call = mutated_mod.get_global_var('func_10530')
call_10531 = func_10530_call()
output = call_10531
func_10532 = relay.Function([], output)
mutated_mod['func_10532'] = func_10532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2478_call = mod.get_global_var('func_2478')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_10812 = func_2478_call()
call_10813 = func_2478_call()
output = call_10812
output2 = call_10813
func_10814 = relay.Function([], output)
mod['func_10814'] = func_10814
mod = relay.transform.InferType()(mod)
output = func_10814()
func_10815 = relay.Function([], output)
mutated_mod['func_10815'] = func_10815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10017_call = mod.get_global_var('func_10017')
func_10019_call = mutated_mod.get_global_var('func_10019')
call_10866 = func_10017_call()
call_10867 = func_10017_call()
output = call_10866
output2 = call_10867
func_10870 = relay.Function([], output)
mod['func_10870'] = func_10870
mod = relay.transform.InferType()(mod)
output = func_10870()
func_10871 = relay.Function([], output)
mutated_mod['func_10871'] = func_10871
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4424_call = mod.get_global_var('func_4424')
func_4425_call = mutated_mod.get_global_var('func_4425')
call_10882 = relay.TupleGetItem(func_4424_call(), 1)
call_10883 = relay.TupleGetItem(func_4425_call(), 1)
output = relay.Tuple([call_10882,])
output2 = relay.Tuple([call_10883,])
func_10887 = relay.Function([], output)
mod['func_10887'] = func_10887
mod = relay.transform.InferType()(mod)
output = func_10887()
func_10888 = relay.Function([], output)
mutated_mod['func_10888'] = func_10888
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10894 = relay.var("var_10894", dtype = "bool", shape = (3, 6, 15))#candidate|10894|(3, 6, 15)|var|bool
var_10895 = relay.var("var_10895", dtype = "bool", shape = (3, 6, 15))#candidate|10895|(3, 6, 15)|var|bool
bop_10896 = relay.logical_and(var_10894.astype('bool'), relay.reshape(var_10895.astype('bool'), relay.shape_of(var_10894))) # shape=(3, 6, 15)
func_4672_call = mod.get_global_var('func_4672')
func_4673_call = mutated_mod.get_global_var('func_4673')
call_10907 = relay.TupleGetItem(func_4672_call(), 0)
call_10908 = relay.TupleGetItem(func_4673_call(), 0)
func_6034_call = mod.get_global_var('func_6034')
func_6035_call = mutated_mod.get_global_var('func_6035')
call_10913 = relay.TupleGetItem(func_6034_call(), 1)
call_10914 = relay.TupleGetItem(func_6035_call(), 1)
output = relay.Tuple([bop_10896,call_10907,call_10913,])
output2 = relay.Tuple([bop_10896,call_10908,call_10914,])
func_10915 = relay.Function([var_10894,var_10895,], output)
mod['func_10915'] = func_10915
mod = relay.transform.InferType()(mod)
var_10916 = relay.var("var_10916", dtype = "bool", shape = (3, 6, 15))#candidate|10916|(3, 6, 15)|var|bool
var_10917 = relay.var("var_10917", dtype = "bool", shape = (3, 6, 15))#candidate|10917|(3, 6, 15)|var|bool
output = func_10915(var_10916,var_10917,)
func_10918 = relay.Function([var_10916,var_10917,], output)
mutated_mod['func_10918'] = func_10918
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10938 = relay.var("var_10938", dtype = "int8", shape = ())#candidate|10938|()|var|int8
var_10939 = relay.var("var_10939", dtype = "int8", shape = (4, 10, 1))#candidate|10939|(4, 10, 1)|var|int8
bop_10940 = relay.add(var_10938.astype('int8'), var_10939.astype('int8')) # shape=(4, 10, 1)
output = relay.Tuple([bop_10940,])
output2 = relay.Tuple([bop_10940,])
func_10950 = relay.Function([var_10938,var_10939,], output)
mod['func_10950'] = func_10950
mod = relay.transform.InferType()(mod)
var_10951 = relay.var("var_10951", dtype = "int8", shape = ())#candidate|10951|()|var|int8
var_10952 = relay.var("var_10952", dtype = "int8", shape = (4, 10, 1))#candidate|10952|(4, 10, 1)|var|int8
output = func_10950(var_10951,var_10952,)
func_10953 = relay.Function([var_10951,var_10952,], output)
mutated_mod['func_10953'] = func_10953
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1142_call = mod.get_global_var('func_1142')
func_1143_call = mutated_mod.get_global_var('func_1143')
call_10984 = relay.TupleGetItem(func_1142_call(), 0)
call_10985 = relay.TupleGetItem(func_1143_call(), 0)
var_10986 = relay.var("var_10986", dtype = "float32", shape = (13, 13, 11))#candidate|10986|(13, 13, 11)|var|float32
bop_10987 = relay.not_equal(call_10984.astype('bool'), var_10986.astype('bool')) # shape=(13, 13, 11)
bop_10990 = relay.not_equal(call_10985.astype('bool'), var_10986.astype('bool')) # shape=(13, 13, 11)
output = relay.Tuple([bop_10987,])
output2 = relay.Tuple([bop_10990,])
func_10999 = relay.Function([var_10986,], output)
mod['func_10999'] = func_10999
mod = relay.transform.InferType()(mod)
mutated_mod['func_10999'] = func_10999
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11000 = relay.var("var_11000", dtype = "float32", shape = (13, 13, 11))#candidate|11000|(13, 13, 11)|var|float32
func_10999_call = mutated_mod.get_global_var('func_10999')
call_11001 = func_10999_call(var_11000)
output = call_11001
func_11002 = relay.Function([var_11000], output)
mutated_mod['func_11002'] = func_11002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4528_call = mod.get_global_var('func_4528')
func_4529_call = mutated_mod.get_global_var('func_4529')
call_11032 = relay.TupleGetItem(func_4528_call(), 0)
call_11033 = relay.TupleGetItem(func_4529_call(), 0)
output = relay.Tuple([call_11032,])
output2 = relay.Tuple([call_11033,])
func_11042 = relay.Function([], output)
mod['func_11042'] = func_11042
mod = relay.transform.InferType()(mod)
output = func_11042()
func_11043 = relay.Function([], output)
mutated_mod['func_11043'] = func_11043
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2376_call = mod.get_global_var('func_2376')
func_2378_call = mutated_mod.get_global_var('func_2378')
call_11094 = func_2376_call()
call_11095 = func_2376_call()
output = relay.Tuple([call_11094,])
output2 = relay.Tuple([call_11095,])
func_11099 = relay.Function([], output)
mod['func_11099'] = func_11099
mod = relay.transform.InferType()(mod)
mutated_mod['func_11099'] = func_11099
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11099_call = mutated_mod.get_global_var('func_11099')
call_11100 = func_11099_call()
output = call_11100
func_11101 = relay.Function([], output)
mutated_mod['func_11101'] = func_11101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5486_call = mod.get_global_var('func_5486')
func_5488_call = mutated_mod.get_global_var('func_5488')
call_11120 = relay.TupleGetItem(func_5486_call(), 1)
call_11121 = relay.TupleGetItem(func_5488_call(), 1)
func_4424_call = mod.get_global_var('func_4424')
func_4425_call = mutated_mod.get_global_var('func_4425')
call_11187 = relay.TupleGetItem(func_4424_call(), 2)
call_11188 = relay.TupleGetItem(func_4425_call(), 2)
output = relay.Tuple([call_11120,call_11187,])
output2 = relay.Tuple([call_11121,call_11188,])
func_11190 = relay.Function([], output)
mod['func_11190'] = func_11190
mod = relay.transform.InferType()(mod)
output = func_11190()
func_11191 = relay.Function([], output)
mutated_mod['func_11191'] = func_11191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3746_call = mod.get_global_var('func_3746')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_11219 = relay.TupleGetItem(func_3746_call(), 0)
call_11220 = relay.TupleGetItem(func_3748_call(), 0)
func_6417_call = mod.get_global_var('func_6417')
func_6420_call = mutated_mod.get_global_var('func_6420')
const_11227 = relay.const(1, dtype = "uint8")#candidate|11227|()|const|uint8
var_11228 = relay.var("var_11228", dtype = "uint8", shape = (64,))#candidate|11228|(64,)|var|uint8
call_11226 = relay.TupleGetItem(func_6417_call(relay.reshape(const_11227.astype('uint8'), []), relay.reshape(var_11228.astype('uint8'), [8, 8, 1]), ), 3)
call_11229 = relay.TupleGetItem(func_6420_call(relay.reshape(const_11227.astype('uint8'), []), relay.reshape(var_11228.astype('uint8'), [8, 8, 1]), ), 3)
func_5958_call = mod.get_global_var('func_5958')
func_5962_call = mutated_mod.get_global_var('func_5962')
var_11247 = relay.var("var_11247", dtype = "float64", shape = (162,))#candidate|11247|(162,)|var|float64
call_11246 = relay.TupleGetItem(func_5958_call(relay.reshape(var_11247.astype('float64'), [3, 9, 6]), relay.reshape(var_11247.astype('float64'), [3, 9, 6]), ), 0)
call_11248 = relay.TupleGetItem(func_5962_call(relay.reshape(var_11247.astype('float64'), [3, 9, 6]), relay.reshape(var_11247.astype('float64'), [3, 9, 6]), ), 0)
uop_11251 = relay.erf(var_11247.astype('float64')) # shape=(162,)
output = relay.Tuple([call_11219,call_11226,const_11227,var_11228,call_11246,uop_11251,])
output2 = relay.Tuple([call_11220,call_11229,const_11227,var_11228,call_11248,uop_11251,])
func_11261 = relay.Function([var_11228,var_11247,], output)
mod['func_11261'] = func_11261
mod = relay.transform.InferType()(mod)
mutated_mod['func_11261'] = func_11261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11261_call = mutated_mod.get_global_var('func_11261')
var_11263 = relay.var("var_11263", dtype = "uint8", shape = (64,))#candidate|11263|(64,)|var|uint8
var_11264 = relay.var("var_11264", dtype = "float64", shape = (162,))#candidate|11264|(162,)|var|float64
call_11262 = func_11261_call(var_11263,var_11264,)
output = call_11262
func_11265 = relay.Function([var_11263,var_11264,], output)
mutated_mod['func_11265'] = func_11265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10507_call = mod.get_global_var('func_10507')
func_10508_call = mutated_mod.get_global_var('func_10508')
call_11284 = relay.TupleGetItem(func_10507_call(), 2)
call_11285 = relay.TupleGetItem(func_10508_call(), 2)
func_4878_call = mod.get_global_var('func_4878')
func_4879_call = mutated_mod.get_global_var('func_4879')
call_11291 = relay.TupleGetItem(func_4878_call(), 0)
call_11292 = relay.TupleGetItem(func_4879_call(), 0)
func_11190_call = mod.get_global_var('func_11190')
func_11191_call = mutated_mod.get_global_var('func_11191')
call_11308 = relay.TupleGetItem(func_11190_call(), 0)
call_11309 = relay.TupleGetItem(func_11191_call(), 0)
output = relay.Tuple([call_11284,call_11291,call_11308,])
output2 = relay.Tuple([call_11285,call_11292,call_11309,])
func_11310 = relay.Function([], output)
mod['func_11310'] = func_11310
mod = relay.transform.InferType()(mod)
mutated_mod['func_11310'] = func_11310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11310_call = mutated_mod.get_global_var('func_11310')
call_11311 = func_11310_call()
output = call_11311
func_11312 = relay.Function([], output)
mutated_mod['func_11312'] = func_11312
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9761_call = mod.get_global_var('func_9761')
func_9762_call = mutated_mod.get_global_var('func_9762')
call_11332 = relay.TupleGetItem(func_9761_call(), 0)
call_11333 = relay.TupleGetItem(func_9762_call(), 0)
output = relay.Tuple([call_11332,])
output2 = relay.Tuple([call_11333,])
func_11334 = relay.Function([], output)
mod['func_11334'] = func_11334
mod = relay.transform.InferType()(mod)
output = func_11334()
func_11335 = relay.Function([], output)
mutated_mod['func_11335'] = func_11335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11190_call = mod.get_global_var('func_11190')
func_11191_call = mutated_mod.get_global_var('func_11191')
call_11363 = relay.TupleGetItem(func_11190_call(), 1)
call_11364 = relay.TupleGetItem(func_11191_call(), 1)
var_11365 = relay.var("var_11365", dtype = "float32", shape = (13, 130))#candidate|11365|(13, 130)|var|float32
bop_11366 = relay.bitwise_xor(call_11363.astype('uint8'), relay.reshape(var_11365.astype('uint8'), relay.shape_of(call_11363))) # shape=(13, 130)
bop_11369 = relay.bitwise_xor(call_11364.astype('uint8'), relay.reshape(var_11365.astype('uint8'), relay.shape_of(call_11364))) # shape=(13, 130)
output = bop_11366
output2 = bop_11369
func_11373 = relay.Function([var_11365,], output)
mod['func_11373'] = func_11373
mod = relay.transform.InferType()(mod)
mutated_mod['func_11373'] = func_11373
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11374 = relay.var("var_11374", dtype = "float32", shape = (13, 130))#candidate|11374|(13, 130)|var|float32
func_11373_call = mutated_mod.get_global_var('func_11373')
call_11375 = func_11373_call(var_11374)
output = call_11375
func_11376 = relay.Function([var_11374], output)
mutated_mod['func_11376'] = func_11376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3942_call = mod.get_global_var('func_3942')
func_3944_call = mutated_mod.get_global_var('func_3944')
call_11400 = relay.TupleGetItem(func_3942_call(), 0)
call_11401 = relay.TupleGetItem(func_3944_call(), 0)
func_10887_call = mod.get_global_var('func_10887')
func_10888_call = mutated_mod.get_global_var('func_10888')
call_11424 = relay.TupleGetItem(func_10887_call(), 0)
call_11425 = relay.TupleGetItem(func_10888_call(), 0)
func_6578_call = mod.get_global_var('func_6578')
func_6580_call = mutated_mod.get_global_var('func_6580')
call_11458 = func_6578_call()
call_11459 = func_6578_call()
func_8597_call = mod.get_global_var('func_8597')
func_8598_call = mutated_mod.get_global_var('func_8598')
call_11465 = relay.TupleGetItem(func_8597_call(), 0)
call_11466 = relay.TupleGetItem(func_8598_call(), 0)
func_2363_call = mod.get_global_var('func_2363')
func_2365_call = mutated_mod.get_global_var('func_2365')
call_11470 = relay.TupleGetItem(func_2363_call(relay.reshape(call_11424.astype('float32'), [13, 13, 10])), 1)
call_11471 = relay.TupleGetItem(func_2365_call(relay.reshape(call_11424.astype('float32'), [13, 13, 10])), 1)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_11478 = relay.TupleGetItem(func_3472_call(), 0)
call_11479 = relay.TupleGetItem(func_3474_call(), 0)
func_10226_call = mod.get_global_var('func_10226')
func_10228_call = mutated_mod.get_global_var('func_10228')
call_11483 = relay.TupleGetItem(func_10226_call(), 0)
call_11484 = relay.TupleGetItem(func_10228_call(), 0)
output = relay.Tuple([call_11400,call_11424,call_11458,call_11465,call_11470,call_11478,call_11483,])
output2 = relay.Tuple([call_11401,call_11425,call_11459,call_11466,call_11471,call_11479,call_11484,])
func_11487 = relay.Function([], output)
mod['func_11487'] = func_11487
mod = relay.transform.InferType()(mod)
mutated_mod['func_11487'] = func_11487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11487_call = mutated_mod.get_global_var('func_11487')
call_11488 = func_11487_call()
output = call_11488
func_11489 = relay.Function([], output)
mutated_mod['func_11489'] = func_11489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1587_call = mod.get_global_var('func_1587')
func_1589_call = mutated_mod.get_global_var('func_1589')
call_11535 = relay.TupleGetItem(func_1587_call(), 3)
call_11536 = relay.TupleGetItem(func_1589_call(), 3)
func_10428_call = mod.get_global_var('func_10428')
func_10430_call = mutated_mod.get_global_var('func_10430')
call_11549 = relay.TupleGetItem(func_10428_call(), 1)
call_11550 = relay.TupleGetItem(func_10430_call(), 1)
output = relay.Tuple([call_11535,call_11549,])
output2 = relay.Tuple([call_11536,call_11550,])
func_11558 = relay.Function([], output)
mod['func_11558'] = func_11558
mod = relay.transform.InferType()(mod)
output = func_11558()
func_11559 = relay.Function([], output)
mutated_mod['func_11559'] = func_11559
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_11603 = relay.TupleGetItem(func_1947_call(), 0)
call_11604 = relay.TupleGetItem(func_1949_call(), 0)
output = relay.Tuple([call_11603,])
output2 = relay.Tuple([call_11604,])
func_11632 = relay.Function([], output)
mod['func_11632'] = func_11632
mod = relay.transform.InferType()(mod)
output = func_11632()
func_11633 = relay.Function([], output)
mutated_mod['func_11633'] = func_11633
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11676 = relay.var("var_11676", dtype = "float32", shape = (4, 6, 1))#candidate|11676|(4, 6, 1)|var|float32
uop_11677 = relay.rsqrt(var_11676.astype('float32')) # shape=(4, 6, 1)
func_9177_call = mod.get_global_var('func_9177')
func_9179_call = mutated_mod.get_global_var('func_9179')
call_11688 = relay.TupleGetItem(func_9177_call(), 0)
call_11689 = relay.TupleGetItem(func_9179_call(), 0)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_11690 = relay.TupleGetItem(func_904_call(relay.reshape(call_11688.astype('bool'), [13, 13, 1])), 1)
call_11691 = relay.TupleGetItem(func_906_call(relay.reshape(call_11688.astype('bool'), [13, 13, 1])), 1)
output = relay.Tuple([uop_11677,call_11688,call_11690,])
output2 = relay.Tuple([uop_11677,call_11689,call_11691,])
func_11710 = relay.Function([var_11676,], output)
mod['func_11710'] = func_11710
mod = relay.transform.InferType()(mod)
mutated_mod['func_11710'] = func_11710
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11711 = relay.var("var_11711", dtype = "float32", shape = (4, 6, 1))#candidate|11711|(4, 6, 1)|var|float32
func_11710_call = mutated_mod.get_global_var('func_11710')
call_11712 = func_11710_call(var_11711)
output = call_11712
func_11713 = relay.Function([var_11711], output)
mutated_mod['func_11713'] = func_11713
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8838_call = mod.get_global_var('func_8838')
func_8839_call = mutated_mod.get_global_var('func_8839')
call_11728 = relay.TupleGetItem(func_8838_call(), 0)
call_11729 = relay.TupleGetItem(func_8839_call(), 0)
output = relay.Tuple([call_11728,])
output2 = relay.Tuple([call_11729,])
func_11730 = relay.Function([], output)
mod['func_11730'] = func_11730
mod = relay.transform.InferType()(mod)
mutated_mod['func_11730'] = func_11730
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11730_call = mutated_mod.get_global_var('func_11730')
call_11731 = func_11730_call()
output = call_11731
func_11732 = relay.Function([], output)
mutated_mod['func_11732'] = func_11732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8696_call = mod.get_global_var('func_8696')
func_8698_call = mutated_mod.get_global_var('func_8698')
call_11743 = relay.TupleGetItem(func_8696_call(), 0)
call_11744 = relay.TupleGetItem(func_8698_call(), 0)
func_9586_call = mod.get_global_var('func_9586')
func_9588_call = mutated_mod.get_global_var('func_9588')
var_11774 = relay.var("var_11774", dtype = "float64", shape = (286, 4))#candidate|11774|(286, 4)|var|float64
call_11773 = relay.TupleGetItem(func_9586_call(relay.reshape(var_11774.astype('float64'), [13, 8, 11])), 0)
call_11775 = relay.TupleGetItem(func_9588_call(relay.reshape(var_11774.astype('float64'), [13, 8, 11])), 0)
output = relay.Tuple([call_11743,call_11773,var_11774,])
output2 = relay.Tuple([call_11744,call_11775,var_11774,])
func_11792 = relay.Function([var_11774,], output)
mod['func_11792'] = func_11792
mod = relay.transform.InferType()(mod)
mutated_mod['func_11792'] = func_11792
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11793 = relay.var("var_11793", dtype = "float64", shape = (286, 4))#candidate|11793|(286, 4)|var|float64
func_11792_call = mutated_mod.get_global_var('func_11792')
call_11794 = func_11792_call(var_11793)
output = call_11794
func_11795 = relay.Function([var_11793], output)
mutated_mod['func_11795'] = func_11795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10530_call = mod.get_global_var('func_10530')
func_10532_call = mutated_mod.get_global_var('func_10532')
call_11897 = relay.TupleGetItem(func_10530_call(), 0)
call_11898 = relay.TupleGetItem(func_10532_call(), 0)
func_6417_call = mod.get_global_var('func_6417')
func_6420_call = mutated_mod.get_global_var('func_6420')
var_11943 = relay.var("var_11943", dtype = "uint8", shape = ())#candidate|11943|()|var|uint8
const_11944 = relay.const([7,-10,-7,8,6,9,-10,-5,-8,-10,4,3,-7,2,9,8,-7,4,-3,-6,-6,10,-1,-6,-9,7,-8,-1,9,6,7,5,-4,-10,1,-9,10,-5,-2,1,9,-5,8,-1,-1,4,-5,-2,6,-8,-7,-8,-6,-9,3,-2,-7,9,-2,2,-1,1,-3,-5], dtype = "uint8")#candidate|11944|(64,)|const|uint8
call_11942 = relay.TupleGetItem(func_6417_call(relay.reshape(var_11943.astype('uint8'), []), relay.reshape(const_11944.astype('uint8'), [8, 8, 1]), ), 4)
call_11945 = relay.TupleGetItem(func_6420_call(relay.reshape(var_11943.astype('uint8'), []), relay.reshape(const_11944.astype('uint8'), [8, 8, 1]), ), 4)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_11946 = relay.TupleGetItem(func_1247_call(), 1)
call_11947 = relay.TupleGetItem(func_1248_call(), 1)
bop_11951 = relay.bitwise_and(call_11897.astype('uint32'), const_11944.astype('uint32')) # shape=(13, 13, 64)
bop_11954 = relay.bitwise_and(call_11898.astype('uint32'), const_11944.astype('uint32')) # shape=(13, 13, 64)
output = relay.Tuple([call_11942,var_11943,call_11946,bop_11951,])
output2 = relay.Tuple([call_11945,var_11943,call_11947,bop_11954,])
func_11956 = relay.Function([var_11943,], output)
mod['func_11956'] = func_11956
mod = relay.transform.InferType()(mod)
var_11957 = relay.var("var_11957", dtype = "uint8", shape = ())#candidate|11957|()|var|uint8
output = func_11956(var_11957)
func_11958 = relay.Function([var_11957], output)
mutated_mod['func_11958'] = func_11958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11632_call = mod.get_global_var('func_11632')
func_11633_call = mutated_mod.get_global_var('func_11633')
call_11969 = relay.TupleGetItem(func_11632_call(), 0)
call_11970 = relay.TupleGetItem(func_11633_call(), 0)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_11975 = relay.TupleGetItem(func_6002_call(), 0)
call_11976 = relay.TupleGetItem(func_6004_call(), 0)
func_4432_call = mod.get_global_var('func_4432')
func_4434_call = mutated_mod.get_global_var('func_4434')
call_11980 = relay.TupleGetItem(func_4432_call(), 0)
call_11981 = relay.TupleGetItem(func_4434_call(), 0)
output = relay.Tuple([call_11969,call_11975,call_11980,])
output2 = relay.Tuple([call_11970,call_11976,call_11981,])
func_11985 = relay.Function([], output)
mod['func_11985'] = func_11985
mod = relay.transform.InferType()(mod)
output = func_11985()
func_11986 = relay.Function([], output)
mutated_mod['func_11986'] = func_11986
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3472_call = mod.get_global_var('func_3472')
func_3474_call = mutated_mod.get_global_var('func_3474')
call_12023 = relay.TupleGetItem(func_3472_call(), 1)
call_12024 = relay.TupleGetItem(func_3474_call(), 1)
output = relay.Tuple([call_12023,])
output2 = relay.Tuple([call_12024,])
func_12025 = relay.Function([], output)
mod['func_12025'] = func_12025
mod = relay.transform.InferType()(mod)
mutated_mod['func_12025'] = func_12025
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12025_call = mutated_mod.get_global_var('func_12025')
call_12026 = func_12025_call()
output = call_12026
func_12027 = relay.Function([], output)
mutated_mod['func_12027'] = func_12027
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_12085 = relay.TupleGetItem(func_1037_call(), 0)
call_12086 = relay.TupleGetItem(func_1038_call(), 0)
output = relay.Tuple([call_12085,])
output2 = relay.Tuple([call_12086,])
func_12090 = relay.Function([], output)
mod['func_12090'] = func_12090
mod = relay.transform.InferType()(mod)
output = func_12090()
func_12091 = relay.Function([], output)
mutated_mod['func_12091'] = func_12091
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9539_call = mod.get_global_var('func_9539')
func_9540_call = mutated_mod.get_global_var('func_9540')
call_12196 = func_9539_call()
call_12197 = func_9539_call()
output = call_12196
output2 = call_12197
func_12199 = relay.Function([], output)
mod['func_12199'] = func_12199
mod = relay.transform.InferType()(mod)
mutated_mod['func_12199'] = func_12199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12199_call = mutated_mod.get_global_var('func_12199')
call_12200 = func_12199_call()
output = call_12200
func_12201 = relay.Function([], output)
mutated_mod['func_12201'] = func_12201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12207 = relay.var("var_12207", dtype = "int32", shape = (11, 2, 6))#candidate|12207|(11, 2, 6)|var|int32
var_12208 = relay.var("var_12208", dtype = "int32", shape = (11, 2, 6))#candidate|12208|(11, 2, 6)|var|int32
bop_12209 = relay.less(var_12207.astype('bool'), relay.reshape(var_12208.astype('bool'), relay.shape_of(var_12207))) # shape=(11, 2, 6)
bop_12214 = relay.greater_equal(var_12207.astype('bool'), relay.reshape(bop_12209.astype('bool'), relay.shape_of(var_12207))) # shape=(11, 2, 6)
func_4199_call = mod.get_global_var('func_4199')
func_4201_call = mutated_mod.get_global_var('func_4201')
var_12222 = relay.var("var_12222", dtype = "float32", shape = (7,))#candidate|12222|(7,)|var|float32
call_12221 = relay.TupleGetItem(func_4199_call(relay.reshape(var_12222.astype('float32'), [7,])), 0)
call_12223 = relay.TupleGetItem(func_4201_call(relay.reshape(var_12222.astype('float32'), [7,])), 0)
output = relay.Tuple([bop_12214,call_12221,var_12222,])
output2 = relay.Tuple([bop_12214,call_12223,var_12222,])
func_12230 = relay.Function([var_12207,var_12208,var_12222,], output)
mod['func_12230'] = func_12230
mod = relay.transform.InferType()(mod)
mutated_mod['func_12230'] = func_12230
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12230_call = mutated_mod.get_global_var('func_12230')
var_12232 = relay.var("var_12232", dtype = "int32", shape = (11, 2, 6))#candidate|12232|(11, 2, 6)|var|int32
var_12233 = relay.var("var_12233", dtype = "int32", shape = (11, 2, 6))#candidate|12233|(11, 2, 6)|var|int32
var_12234 = relay.var("var_12234", dtype = "float32", shape = (7,))#candidate|12234|(7,)|var|float32
call_12231 = func_12230_call(var_12232,var_12233,var_12234,)
output = call_12231
func_12235 = relay.Function([var_12232,var_12233,var_12234,], output)
mutated_mod['func_12235'] = func_12235
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mod.get_global_var('func_1759')
func_1761_call = mutated_mod.get_global_var('func_1761')
call_12241 = relay.TupleGetItem(func_1759_call(), 2)
call_12242 = relay.TupleGetItem(func_1761_call(), 2)
func_11710_call = mod.get_global_var('func_11710')
func_11713_call = mutated_mod.get_global_var('func_11713')
var_12246 = relay.var("var_12246", dtype = "float32", shape = (24,))#candidate|12246|(24,)|var|float32
call_12245 = relay.TupleGetItem(func_11710_call(relay.reshape(var_12246.astype('float32'), [4, 6, 1])), 1)
call_12247 = relay.TupleGetItem(func_11713_call(relay.reshape(var_12246.astype('float32'), [4, 6, 1])), 1)
output = relay.Tuple([call_12241,call_12245,var_12246,])
output2 = relay.Tuple([call_12242,call_12247,var_12246,])
func_12263 = relay.Function([var_12246,], output)
mod['func_12263'] = func_12263
mod = relay.transform.InferType()(mod)
var_12264 = relay.var("var_12264", dtype = "float32", shape = (24,))#candidate|12264|(24,)|var|float32
output = func_12263(var_12264)
func_12265 = relay.Function([var_12264], output)
mutated_mod['func_12265'] = func_12265
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12298 = relay.var("var_12298", dtype = "float32", shape = ())#candidate|12298|()|var|float32
var_12299 = relay.var("var_12299", dtype = "float32", shape = (8, 13, 8))#candidate|12299|(8, 13, 8)|var|float32
bop_12300 = relay.power(var_12298.astype('float32'), var_12299.astype('float32')) # shape=(8, 13, 8)
func_8597_call = mod.get_global_var('func_8597')
func_8598_call = mutated_mod.get_global_var('func_8598')
call_12315 = relay.TupleGetItem(func_8597_call(), 1)
call_12316 = relay.TupleGetItem(func_8598_call(), 1)
output = relay.Tuple([bop_12300,call_12315,])
output2 = relay.Tuple([bop_12300,call_12316,])
func_12326 = relay.Function([var_12298,var_12299,], output)
mod['func_12326'] = func_12326
mod = relay.transform.InferType()(mod)
mutated_mod['func_12326'] = func_12326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12326_call = mutated_mod.get_global_var('func_12326')
var_12328 = relay.var("var_12328", dtype = "float32", shape = ())#candidate|12328|()|var|float32
var_12329 = relay.var("var_12329", dtype = "float32", shape = (8, 13, 8))#candidate|12329|(8, 13, 8)|var|float32
call_12327 = func_12326_call(var_12328,var_12329,)
output = call_12327
func_12330 = relay.Function([var_12328,var_12329,], output)
mutated_mod['func_12330'] = func_12330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4432_call = mod.get_global_var('func_4432')
func_4434_call = mutated_mod.get_global_var('func_4434')
call_12335 = relay.TupleGetItem(func_4432_call(), 0)
call_12336 = relay.TupleGetItem(func_4434_call(), 0)
func_2169_call = mod.get_global_var('func_2169')
func_2171_call = mutated_mod.get_global_var('func_2171')
call_12343 = relay.TupleGetItem(func_2169_call(), 0)
call_12344 = relay.TupleGetItem(func_2171_call(), 0)
bop_12353 = relay.right_shift(call_12335.astype('uint32'), relay.reshape(call_12343.astype('uint32'), relay.shape_of(call_12335))) # shape=(13, 13, 1)
bop_12356 = relay.right_shift(call_12336.astype('uint32'), relay.reshape(call_12344.astype('uint32'), relay.shape_of(call_12336))) # shape=(13, 13, 1)
func_904_call = mod.get_global_var('func_904')
func_906_call = mutated_mod.get_global_var('func_906')
call_12357 = relay.TupleGetItem(func_904_call(relay.reshape(call_12335.astype('bool'), [13, 13, 1])), 2)
call_12358 = relay.TupleGetItem(func_906_call(relay.reshape(call_12335.astype('bool'), [13, 13, 1])), 2)
output = relay.Tuple([bop_12353,call_12357,])
output2 = relay.Tuple([bop_12356,call_12358,])
func_12362 = relay.Function([], output)
mod['func_12362'] = func_12362
mod = relay.transform.InferType()(mod)
output = func_12362()
func_12363 = relay.Function([], output)
mutated_mod['func_12363'] = func_12363
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4381_call = mod.get_global_var('func_4381')
func_4383_call = mutated_mod.get_global_var('func_4383')
call_12519 = relay.TupleGetItem(func_4381_call(), 0)
call_12520 = relay.TupleGetItem(func_4383_call(), 0)
output = relay.Tuple([call_12519,])
output2 = relay.Tuple([call_12520,])
func_12535 = relay.Function([], output)
mod['func_12535'] = func_12535
mod = relay.transform.InferType()(mod)
mutated_mod['func_12535'] = func_12535
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12535_call = mutated_mod.get_global_var('func_12535')
call_12536 = func_12535_call()
output = call_12536
func_12537 = relay.Function([], output)
mutated_mod['func_12537'] = func_12537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2985_call = mod.get_global_var('func_2985')
func_2987_call = mutated_mod.get_global_var('func_2987')
call_12581 = relay.TupleGetItem(func_2985_call(), 0)
call_12582 = relay.TupleGetItem(func_2987_call(), 0)
output = relay.Tuple([call_12581,])
output2 = relay.Tuple([call_12582,])
func_12586 = relay.Function([], output)
mod['func_12586'] = func_12586
mod = relay.transform.InferType()(mod)
output = func_12586()
func_12587 = relay.Function([], output)
mutated_mod['func_12587'] = func_12587
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11632_call = mod.get_global_var('func_11632')
func_11633_call = mutated_mod.get_global_var('func_11633')
call_12643 = relay.TupleGetItem(func_11632_call(), 0)
call_12644 = relay.TupleGetItem(func_11633_call(), 0)
output = call_12643
output2 = call_12644
func_12645 = relay.Function([], output)
mod['func_12645'] = func_12645
mod = relay.transform.InferType()(mod)
output = func_12645()
func_12646 = relay.Function([], output)
mutated_mod['func_12646'] = func_12646
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12658 = relay.const([[[-3.886380,-7.739438,6.656291,6.844023,-3.842446,-8.589224,4.835230,9.618579],[-1.658438,3.200371,-1.069436,9.982855,8.946288,3.147562,-7.459088,-1.163702],[-0.367473,2.132448,3.415583,-9.544764,2.054019,7.280760,-5.939194,3.561387],[7.637325,-8.166657,-0.025503,-3.660033,-7.926796,7.813045,-9.571030,5.122503],[6.841880,7.491372,3.971261,-8.741971,-7.039597,-7.961661,-8.500573,2.364330],[-4.225967,4.902452,0.923973,8.246649,-7.000332,7.455889,-1.916959,7.959886],[2.402485,-0.780917,-1.076175,4.243548,6.431657,2.555908,0.811308,6.970125],[-1.641976,-4.212878,-3.703532,5.237533,0.447703,-4.327717,-8.570979,2.317257],[-0.927691,-7.111731,-9.158865,3.696742,1.505969,1.889446,0.724175,9.582727],[-3.863871,5.418956,6.994617,0.732727,9.098979,-5.279080,2.565724,9.023938],[-5.311247,-5.047770,-8.462862,-7.715959,6.394588,-4.718643,-6.864377,-2.438150],[-0.550783,-8.604173,9.536509,-8.719319,1.403884,-5.706782,-6.283117,-4.612150],[8.211069,7.075946,-9.682708,-5.726681,6.868336,-5.490754,-7.387210,-4.421524],[-3.518769,-7.481646,-1.368669,5.576292,7.942719,-5.258091,0.893693,-7.822077],[-8.334081,-0.083019,1.980455,-5.941755,-1.675591,9.474119,4.516198,7.021103]],[[-1.471762,1.826336,-5.916369,-4.973030,-0.390886,1.230239,5.159845,1.591219],[0.172544,-3.381301,-9.972215,8.197811,4.413047,3.335630,3.146209,-0.400364],[-0.088643,-7.309059,-4.170812,-3.030045,-9.514264,0.536676,-7.283890,5.485277],[-7.514177,-1.317134,-1.412833,0.223690,-7.322429,-2.935437,6.328885,3.680206],[6.706452,-8.523188,-1.649218,-0.815193,-4.117453,-1.825195,-1.691376,-8.722288],[8.651175,9.028282,8.200905,2.862350,8.249102,0.241063,1.125208,-3.817801],[-7.096796,-3.120547,-5.862402,1.180279,-7.871477,4.983649,9.192491,-8.912575],[-1.303971,-0.652001,-9.254023,-3.179814,-7.922600,7.783908,-0.586091,-5.093806],[-7.348292,-1.415514,8.819312,-1.263158,1.449226,9.670266,4.877202,-5.004786],[2.665094,1.930924,-5.734721,-3.054457,3.183321,-1.039469,9.664463,1.320122],[-4.094323,-8.502339,2.095044,0.190822,-1.665740,-5.375993,-9.359877,-4.603930],[0.657041,-9.097007,8.388681,-2.984691,-4.443297,-5.279618,2.118024,6.626477],[7.477849,-8.685958,-2.666276,-6.398034,-1.164950,0.151327,6.623939,-9.564824],[4.812753,-1.044877,5.346898,-5.697604,-1.906617,-3.173692,-8.411168,1.462862],[6.676580,-7.673569,2.448538,0.651812,3.355383,5.745959,-6.548461,-7.633413]],[[-6.907242,-9.992393,0.638536,8.778492,4.426446,-8.949278,6.398188,-7.045347],[9.892048,4.385892,2.099929,-3.338983,8.761943,1.369593,6.704143,5.760667],[-1.990941,-2.610100,-2.245527,5.950138,1.355215,4.547143,1.858996,0.926649],[3.645180,-0.122553,7.607638,2.882170,-2.328588,-7.788538,-4.679099,3.707257],[1.770370,3.808783,1.379696,-9.651633,-0.421717,4.280746,5.459304,-7.729964],[9.297841,8.546589,5.617016,9.863348,7.368567,8.360166,-1.261445,-6.574038],[-8.182743,7.527604,5.983835,-9.949027,-1.683917,5.669399,9.087409,-8.855391],[-3.626353,2.123355,-3.642097,5.962709,9.617506,-3.461381,9.534423,8.956296],[-9.925798,4.385465,-2.812737,5.100213,-8.137070,-3.838406,-0.184868,-7.186242],[-0.799373,-4.847138,6.566846,-3.649321,-4.090510,-3.519947,-8.382754,-8.051878],[-6.621973,-7.167310,3.576557,1.636267,-3.123342,5.303259,-8.937641,-5.726450],[-5.206240,-6.544669,-7.949603,-8.204369,0.238520,5.585331,-6.331625,-9.825620],[5.521587,-3.186292,-3.057483,-6.411021,8.816187,2.073513,-5.669964,5.518604],[-9.379607,-7.111294,-5.928351,3.712076,8.283582,4.909781,-7.397021,-6.806393],[-2.139407,5.938019,5.491686,-6.717552,7.281055,-8.846998,5.992768,-4.415823]],[[0.261318,-8.508498,8.755610,8.770658,-9.079672,7.214860,-8.013853,4.184309],[-5.720096,9.333508,-7.550618,-0.354863,3.799089,6.034223,-0.361812,-7.827796],[-7.513296,-3.039911,4.923009,-7.894474,-4.059841,-0.045782,-9.872025,-4.504485],[-4.248443,-0.157901,8.851245,3.685032,1.358335,1.925046,-9.468749,-9.005444],[-0.768979,1.963142,-6.434464,-2.881313,7.833570,-2.621718,-3.586117,-5.118393],[-5.924043,9.565472,6.646217,3.481768,-5.350060,8.157111,-4.482529,2.916836],[-7.012105,-1.761647,2.753374,9.024997,-7.388350,-4.348465,-4.297089,3.551967],[1.920793,-4.989843,4.598331,4.490903,-1.699020,0.537432,-7.598091,-1.781733],[2.699472,-2.176133,9.481649,4.322026,2.327715,-5.810310,-8.706575,-2.859275],[-7.224309,-5.143571,-6.287193,0.977007,-7.592082,-4.951186,-2.315194,7.259131],[7.219794,-4.594145,-2.154341,-6.032781,2.010514,1.730993,0.810705,2.737826],[3.240644,9.362665,3.394870,-5.309017,2.365583,5.257476,7.217928,1.598425],[-2.520637,8.834128,4.673818,-3.237835,-5.081151,-2.776867,1.373239,-8.104115],[-8.302391,0.339253,-6.463475,5.897930,-0.789508,1.041027,-7.420162,-0.268013],[-2.036703,5.742941,-0.945166,-9.196358,6.782812,-6.313397,-7.922546,8.827060]],[[-9.841994,0.004735,4.080347,4.975004,7.877954,4.609378,4.708460,-8.458435],[-6.232386,-2.168992,6.976662,6.294278,8.132395,5.426148,-2.118146,-6.127337],[8.039463,-8.047877,7.976347,-7.276363,-6.543154,-3.790263,-7.758128,-5.559638],[-6.204003,9.557579,7.894307,-1.649603,-2.660663,7.555902,3.053815,9.206827],[9.522756,8.951543,0.475484,5.948072,0.013642,-0.512457,-4.661211,-9.851732],[6.832420,-0.066871,2.774278,7.801188,-7.025505,-3.849572,2.740036,2.627544],[9.943974,2.707686,-2.034957,5.855384,-0.738483,2.767496,-9.787746,6.575087],[5.891468,-2.974506,-6.219564,-2.598817,-0.708326,-4.880937,8.067434,-2.038502],[-6.819530,2.895632,-8.580540,8.123472,-1.968331,1.666850,-0.762395,-0.839401],[-1.059854,-4.610587,3.455491,-4.263355,-6.108381,1.310515,-6.069112,-7.458044],[9.138217,9.795718,-9.954652,-1.202950,-3.663444,9.921611,-4.342156,-8.119386],[9.515554,4.991704,-2.927027,-3.190761,1.331635,-6.274559,-3.236191,-9.386879],[-1.580043,1.254534,-5.383333,-4.381287,-9.510703,-2.790012,2.796188,8.770599],[8.441442,7.020749,-1.631903,-3.406252,7.962835,2.014200,-4.370093,7.755976],[-1.899987,6.193607,-5.694651,5.979018,-1.351808,0.075146,-0.470791,-8.958704]],[[-6.712328,1.690830,1.524018,-8.016903,-9.435199,-7.433572,3.585913,-6.016542],[2.809962,7.316964,1.491995,-8.837325,-6.875589,7.198143,-7.773888,-0.376145],[-4.246525,-4.007259,-0.149560,-4.505573,-6.647514,7.866412,4.452508,3.353033],[5.315718,-5.767549,2.019175,-5.550978,0.775062,0.699196,6.832625,-1.800619],[6.222253,-2.903999,4.664013,8.587131,1.311655,2.300913,-5.642021,3.218684],[1.406696,-5.245342,-0.039779,-6.581070,-6.977624,-0.948843,-3.855178,6.337135],[0.205294,6.167464,8.058393,-5.113877,3.035745,0.153326,1.566160,5.021429],[-6.668532,6.717993,4.648317,-4.024066,7.523967,7.689416,0.982044,-9.587203],[-0.223346,5.954358,-4.573731,2.042730,-6.834201,1.642577,0.279359,-6.806133],[-7.013618,8.083439,-2.588462,9.581541,-4.437408,0.111587,-3.377784,-5.453791],[9.201263,-0.031150,8.630590,8.457548,-8.488851,5.694649,4.946273,2.174458],[-1.832150,8.051796,8.339857,-8.636109,-4.105234,5.386657,3.202377,9.122443],[-7.175697,-9.791953,5.921878,1.617307,-5.886207,-0.344752,-8.431951,7.762899],[-2.998036,2.405442,-6.732165,7.039176,3.624249,6.944585,-0.582128,2.743553],[-4.562696,-2.286180,1.977191,5.390700,9.631506,-3.620376,1.466676,-4.892190]],[[-1.536200,5.902100,1.251035,6.242411,-8.458265,-6.216433,-0.712955,2.631089],[3.658645,-5.347949,6.126226,8.024902,1.836980,-9.582334,9.036833,-3.850896],[3.051659,-6.556080,-0.705717,5.566427,-4.073475,6.015940,-8.271777,3.261076],[9.967511,-0.324090,4.436019,6.273577,0.386288,-0.442139,-8.745602,1.221504],[-9.932478,-0.906305,5.529719,9.924271,5.032110,-7.709049,7.454125,-2.085497],[-6.780389,3.101290,-4.729587,-1.313878,0.708108,-2.149863,-4.520095,8.093272],[-6.250041,1.552948,5.124709,0.191144,-7.493998,-0.015813,-8.660826,-8.763248],[-2.320592,-8.939093,-2.804669,-1.286341,6.261382,0.766613,-9.573571,6.283797],[-5.306843,1.566586,6.994096,3.483144,-3.743387,-0.571430,-2.957759,1.296473],[-6.084992,9.228767,9.406837,-4.976749,-4.413255,-3.954486,-2.847883,8.495460],[-5.549239,5.175697,-2.506439,3.448649,-9.196728,2.277957,-7.717009,5.304381],[-7.750655,9.923852,6.291928,4.041461,2.293064,-9.549573,9.438910,1.306163],[-1.039625,0.459178,8.639371,-7.859302,-8.413719,-1.328225,-4.093480,-7.945109],[-2.913760,-5.884424,0.424025,6.364069,2.660895,8.238361,-0.475993,5.178944],[4.327106,3.115907,0.223467,-7.795773,2.425591,3.818078,6.268745,-4.199943]],[[0.015166,1.495946,-9.559773,-3.713990,-3.197156,-5.993507,-8.302733,-5.016722],[8.478621,-1.226895,6.889206,-4.757309,3.266396,-8.424831,1.017831,-4.235300],[-2.798916,-2.649795,-8.486414,-6.620964,-9.224368,3.211037,-7.665059,-9.708728],[1.088192,9.284276,3.481410,3.390254,6.454473,1.665867,4.117996,1.019425],[4.843401,-7.147721,-7.652538,2.413195,-0.758173,3.836449,-3.015887,-5.048734],[-1.877244,-4.786695,3.301386,-3.052129,6.278280,-5.250794,5.173405,-3.149673],[5.543828,0.160180,-0.831210,-1.780647,9.633703,9.036152,7.785434,-9.999733],[2.373122,2.371513,-4.729559,4.762959,-1.181440,-3.442699,-5.387401,-0.911589],[-8.985331,2.449321,-7.711263,2.901688,-3.953398,2.274601,-1.620053,8.188895],[-1.575726,-0.869289,3.602178,3.923542,1.249426,9.451673,-0.398033,4.669982],[6.426667,0.848803,-4.562738,-2.928765,-7.724416,-8.751712,3.840795,-6.834077],[2.499959,-1.695926,6.355042,-1.988387,-1.174836,-1.156550,6.668284,7.757114],[-0.885712,5.144707,2.167303,4.738394,9.074695,-0.098551,-2.769985,2.146732],[3.407521,-9.474932,9.250761,-9.793316,-0.708193,-3.401298,-7.511402,6.115537],[3.686784,-5.903235,-1.518737,-9.158165,5.068957,-1.717248,7.756043,8.042873]],[[1.005454,3.689592,-4.697593,-9.286122,-3.852916,1.925253,-9.971610,-1.950372],[3.241433,-4.355621,-4.019663,8.237099,0.764300,1.105572,6.998430,-0.697713],[-9.562829,3.788383,3.055823,-8.469349,4.010598,-6.073599,-7.128448,2.651399],[6.701047,3.083133,-3.999853,-0.447244,-6.238863,-1.949556,-0.949517,-5.550547],[5.323658,-1.337674,-6.227754,-4.346718,-2.879327,4.535791,4.916196,-0.629529],[5.653209,4.360197,-2.500215,5.407080,3.117823,0.539839,-5.297917,2.209751],[8.771787,-5.350560,-1.360149,2.167459,-9.917248,4.158022,2.610188,-0.276310],[3.623267,-7.905234,3.658417,-1.064136,-9.078269,5.803685,0.906566,-0.152606],[-7.406296,-2.467472,7.716132,5.830840,5.489515,-5.407232,-0.978460,6.298283],[-0.740801,3.531297,4.104732,-0.762001,3.818760,6.711019,-7.678731,-9.552617],[-4.457151,5.239335,-6.439298,9.810523,4.646159,7.873586,0.791985,2.759691],[-7.219700,2.465411,-6.108403,4.424579,3.808843,3.855481,-4.155150,-5.317915],[-8.675883,8.687569,-7.878974,-1.522649,-8.137210,6.536764,-6.520442,4.114785],[-3.074104,6.365144,-7.059311,-4.990571,0.725478,-3.906309,6.531509,-6.588341],[-5.586593,9.066626,9.977884,3.651816,1.712152,3.466120,9.359243,-3.770639]],[[1.063323,0.695198,0.583779,-5.106346,5.384959,-0.255836,4.507395,-9.607045],[-1.183795,7.142815,-5.347827,7.374876,7.514078,8.040143,8.322542,-8.547109],[9.504453,1.051509,-5.065501,8.927968,-9.776573,-1.522547,2.484139,6.123184],[-2.673602,2.727594,8.888849,-4.542278,8.414796,-7.081603,-4.904128,4.181543],[-0.324097,-6.318181,-6.536239,-6.972280,0.051642,4.993880,7.361320,0.257340],[6.815801,-5.450727,4.330271,6.309057,5.565442,-6.342915,9.256387,9.070917],[-2.220563,-0.168314,-9.282736,4.088073,2.542081,-5.297635,7.336965,9.470295],[-4.031365,-8.787687,-5.041806,-5.454581,8.954092,0.707523,-0.397638,-0.128534],[-2.406615,-4.250421,1.989846,6.134402,-5.080747,1.213876,2.109903,-9.920967],[1.017001,4.161563,-8.903910,8.213421,-6.552524,-5.317357,7.279318,1.694106],[1.358264,-6.872140,9.093791,-6.997067,9.982196,-4.161912,-4.121986,-6.426419],[9.956232,5.250204,7.760173,9.356366,-1.704751,5.618940,-8.661025,2.182542],[-2.256615,-0.156002,8.752147,8.474401,-3.474083,1.980733,-0.025842,-0.523410],[-7.919486,1.698946,-1.851615,7.291698,2.495319,6.054275,-7.483558,4.609678],[-2.932390,-4.409117,-0.213980,9.013366,2.468453,9.618437,-8.752796,1.969021]],[[-3.186468,6.544702,0.595453,8.817787,5.526614,-3.235149,4.001893,-9.418532],[6.113913,-8.164676,-5.884467,7.274966,-3.766460,8.560955,-5.299329,1.146984],[4.135680,-0.171435,-8.478238,6.761433,-1.666282,4.184870,-1.674808,9.106951],[-6.685468,1.363137,3.098978,5.657973,-1.039765,9.946543,9.414009,3.722416],[1.645449,-7.724061,7.814158,3.413590,3.045365,1.059258,-2.981236,-7.280564],[-9.296440,3.834795,-0.070673,-1.243654,3.696495,8.309449,-4.290768,6.283430],[-2.809237,1.920781,-5.838392,0.152002,5.829180,9.014164,-7.790006,7.499090],[6.803698,-4.753726,6.142018,-9.972740,-3.150368,5.363970,-7.868901,-8.034437],[-9.602193,-7.751963,-1.399465,3.148860,8.970612,2.872971,-3.309249,-4.982009],[7.416971,0.557083,6.437446,8.256360,7.927222,5.089575,-2.444278,4.646290],[5.137112,6.129044,1.300562,-0.089868,7.028197,-2.580302,-6.337802,3.601507],[-3.012030,-6.221249,0.908375,9.592715,-4.206801,-7.212766,8.382708,-3.373868],[-3.919636,-7.993768,-9.583707,-9.066786,0.456978,6.617147,4.069497,9.160926],[5.155456,-8.005144,-7.854180,6.986179,-9.595474,4.728090,9.839423,-8.716405],[8.296498,-7.392473,7.057014,6.797931,2.379674,-3.411549,4.066430,-7.513718]]], dtype = "float64")#candidate|12658|(11, 15, 8)|const|float64
uop_12659 = relay.asin(const_12658.astype('float64')) # shape=(11, 15, 8)
output = relay.Tuple([uop_12659,])
output2 = relay.Tuple([uop_12659,])
func_12670 = relay.Function([], output)
mod['func_12670'] = func_12670
mod = relay.transform.InferType()(mod)
output = func_12670()
func_12671 = relay.Function([], output)
mutated_mod['func_12671'] = func_12671
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_12680 = relay.TupleGetItem(func_6002_call(), 1)
call_12681 = relay.TupleGetItem(func_6004_call(), 1)
output = call_12680
output2 = call_12681
func_12715 = relay.Function([], output)
mod['func_12715'] = func_12715
mod = relay.transform.InferType()(mod)
output = func_12715()
func_12716 = relay.Function([], output)
mutated_mod['func_12716'] = func_12716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4610_call = mod.get_global_var('func_4610')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_12731 = relay.TupleGetItem(func_4610_call(), 1)
call_12732 = relay.TupleGetItem(func_4612_call(), 1)
func_5214_call = mod.get_global_var('func_5214')
func_5215_call = mutated_mod.get_global_var('func_5215')
call_12733 = func_5214_call()
call_12734 = func_5214_call()
func_3763_call = mod.get_global_var('func_3763')
func_3764_call = mutated_mod.get_global_var('func_3764')
call_12760 = relay.TupleGetItem(func_3763_call(), 1)
call_12761 = relay.TupleGetItem(func_3764_call(), 1)
func_10887_call = mod.get_global_var('func_10887')
func_10888_call = mutated_mod.get_global_var('func_10888')
call_12762 = relay.TupleGetItem(func_10887_call(), 0)
call_12763 = relay.TupleGetItem(func_10888_call(), 0)
func_10335_call = mod.get_global_var('func_10335')
func_10339_call = mutated_mod.get_global_var('func_10339')
const_12767 = relay.const(False, dtype = "bool")#candidate|12767|()|const|bool
const_12768 = relay.const([True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False], dtype = "bool")#candidate|12768|(336,)|const|bool
const_12769 = relay.const([-7.063629,2.431319,4.848754,9.663891,-2.944173,-1.065540,-1.687650,5.806786,-1.292537,-5.627188,6.583756,4.768239,-0.033093,-3.854920,1.495857,-2.036575,4.593305,2.878972,-8.744153,6.662954,-8.083341,2.614709,-8.146573,2.054079,-5.735969,7.118635,-6.488077,7.230805,3.599711,-9.749286,1.150979,-0.709881,-1.263653,-3.049062,5.414510,5.883390,5.201716,-5.853055,-8.137602,-1.642590,3.671817,-8.353566,-5.601388,4.539912,2.865974,7.025983,-2.371258,-9.138769,8.494933,8.410352,-0.127643,-6.694229,6.584312,0.985869,7.679239,7.271175,-4.674724,-1.388890,5.545709,-9.340679,9.662230,-6.467329,-6.051538,-2.928601,8.980139,-8.477624,-7.248948,6.637335,3.023278,3.934124,-6.546026,-4.144242,-1.049186,5.767119,-8.136093,1.189463,4.298314,5.249110,-2.050425,9.614602], dtype = "float64")#candidate|12769|(80,)|const|float64
call_12766 = relay.TupleGetItem(func_10335_call(relay.reshape(const_12767.astype('bool'), []), relay.reshape(const_12768.astype('bool'), [14, 3, 8]), relay.reshape(const_12769.astype('float64'), [80,]), ), 4)
call_12770 = relay.TupleGetItem(func_10339_call(relay.reshape(const_12767.astype('bool'), []), relay.reshape(const_12768.astype('bool'), [14, 3, 8]), relay.reshape(const_12769.astype('float64'), [80,]), ), 4)
var_12783 = relay.var("var_12783", dtype = "bool", shape = (13, 13, 15))#candidate|12783|(13, 13, 15)|var|bool
bop_12784 = relay.multiply(call_12760.astype('float64'), var_12783.astype('float64')) # shape=(13, 13, 15)
bop_12787 = relay.multiply(call_12761.astype('float64'), var_12783.astype('float64')) # shape=(13, 13, 15)
output = relay.Tuple([call_12731,call_12733,call_12762,call_12766,const_12767,const_12768,const_12769,bop_12784,])
output2 = relay.Tuple([call_12732,call_12734,call_12763,call_12770,const_12767,const_12768,const_12769,bop_12787,])
func_12799 = relay.Function([var_12783,], output)
mod['func_12799'] = func_12799
mod = relay.transform.InferType()(mod)
mutated_mod['func_12799'] = func_12799
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12800 = relay.var("var_12800", dtype = "bool", shape = (13, 13, 15))#candidate|12800|(13, 13, 15)|var|bool
func_12799_call = mutated_mod.get_global_var('func_12799')
call_12801 = func_12799_call(var_12800)
output = call_12801
func_12802 = relay.Function([var_12800], output)
mutated_mod['func_12802'] = func_12802
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mod.get_global_var('func_1759')
func_1761_call = mutated_mod.get_global_var('func_1761')
call_12825 = relay.TupleGetItem(func_1759_call(), 3)
call_12826 = relay.TupleGetItem(func_1761_call(), 3)
output = relay.Tuple([call_12825,])
output2 = relay.Tuple([call_12826,])
func_12838 = relay.Function([], output)
mod['func_12838'] = func_12838
mod = relay.transform.InferType()(mod)
mutated_mod['func_12838'] = func_12838
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12838_call = mutated_mod.get_global_var('func_12838')
call_12839 = func_12838_call()
output = call_12839
func_12840 = relay.Function([], output)
mutated_mod['func_12840'] = func_12840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3208_call = mod.get_global_var('func_3208')
func_3210_call = mutated_mod.get_global_var('func_3210')
call_12872 = func_3208_call()
call_12873 = func_3208_call()
func_10950_call = mod.get_global_var('func_10950')
func_10953_call = mutated_mod.get_global_var('func_10953')
var_12876 = relay.var("var_12876", dtype = "int8", shape = ())#candidate|12876|()|var|int8
const_12877 = relay.const([5,9,-2,-2,7,6,-8,-4,-2,4,7,-2,1,2,-6,-1,3,-8,8,-10,4,2,2,7,-5,7,10,10,9,-3,-1,7,4,-8,9,-7,3,3,9,9], dtype = "int8")#candidate|12877|(40,)|const|int8
call_12875 = relay.TupleGetItem(func_10950_call(relay.reshape(var_12876.astype('int8'), []), relay.reshape(const_12877.astype('int8'), [4, 10, 1]), ), 0)
call_12878 = relay.TupleGetItem(func_10953_call(relay.reshape(var_12876.astype('int8'), []), relay.reshape(const_12877.astype('int8'), [4, 10, 1]), ), 0)
func_7980_call = mod.get_global_var('func_7980')
func_7982_call = mutated_mod.get_global_var('func_7982')
call_12880 = func_7980_call(relay.reshape(call_12872.astype('bool'), [13, 13, 1]))
call_12881 = func_7980_call(relay.reshape(call_12872.astype('bool'), [13, 13, 1]))
func_8503_call = mod.get_global_var('func_8503')
func_8505_call = mutated_mod.get_global_var('func_8505')
call_12884 = relay.TupleGetItem(func_8503_call(), 0)
call_12885 = relay.TupleGetItem(func_8505_call(), 0)
output = relay.Tuple([call_12872,call_12875,var_12876,const_12877,call_12880,call_12884,])
output2 = relay.Tuple([call_12873,call_12878,var_12876,const_12877,call_12881,call_12885,])
func_12895 = relay.Function([var_12876,], output)
mod['func_12895'] = func_12895
mod = relay.transform.InferType()(mod)
var_12896 = relay.var("var_12896", dtype = "int8", shape = ())#candidate|12896|()|var|int8
output = func_12895(var_12896)
func_12897 = relay.Function([var_12896], output)
mutated_mod['func_12897'] = func_12897
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_12936 = relay.TupleGetItem(func_1464_call(), 0)
call_12937 = relay.TupleGetItem(func_1466_call(), 0)
output = call_12936
output2 = call_12937
func_12958 = relay.Function([], output)
mod['func_12958'] = func_12958
mod = relay.transform.InferType()(mod)
mutated_mod['func_12958'] = func_12958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12958_call = mutated_mod.get_global_var('func_12958')
call_12959 = func_12958_call()
output = call_12959
func_12960 = relay.Function([], output)
mutated_mod['func_12960'] = func_12960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4351_call = mod.get_global_var('func_4351')
func_4353_call = mutated_mod.get_global_var('func_4353')
call_12961 = relay.TupleGetItem(func_4351_call(), 0)
call_12962 = relay.TupleGetItem(func_4353_call(), 0)
func_8948_call = mod.get_global_var('func_8948')
func_8949_call = mutated_mod.get_global_var('func_8949')
call_12974 = relay.TupleGetItem(func_8948_call(), 0)
call_12975 = relay.TupleGetItem(func_8949_call(), 0)
output = relay.Tuple([call_12961,call_12974,])
output2 = relay.Tuple([call_12962,call_12975,])
func_13005 = relay.Function([], output)
mod['func_13005'] = func_13005
mod = relay.transform.InferType()(mod)
mutated_mod['func_13005'] = func_13005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13005_call = mutated_mod.get_global_var('func_13005')
call_13006 = func_13005_call()
output = call_13006
func_13007 = relay.Function([], output)
mutated_mod['func_13007'] = func_13007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3011_call = mod.get_global_var('func_3011')
func_3013_call = mutated_mod.get_global_var('func_3013')
call_13016 = func_3011_call()
call_13017 = func_3011_call()
output = relay.Tuple([call_13016,])
output2 = relay.Tuple([call_13017,])
func_13027 = relay.Function([], output)
mod['func_13027'] = func_13027
mod = relay.transform.InferType()(mod)
output = func_13027()
func_13028 = relay.Function([], output)
mutated_mod['func_13028'] = func_13028
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10205_call = mod.get_global_var('func_10205')
func_10206_call = mutated_mod.get_global_var('func_10206')
call_13068 = relay.TupleGetItem(func_10205_call(), 2)
call_13069 = relay.TupleGetItem(func_10206_call(), 2)
func_6524_call = mod.get_global_var('func_6524')
func_6526_call = mutated_mod.get_global_var('func_6526')
call_13074 = relay.TupleGetItem(func_6524_call(), 3)
call_13075 = relay.TupleGetItem(func_6526_call(), 3)
output = relay.Tuple([call_13068,call_13074,])
output2 = relay.Tuple([call_13069,call_13075,])
func_13084 = relay.Function([], output)
mod['func_13084'] = func_13084
mod = relay.transform.InferType()(mod)
mutated_mod['func_13084'] = func_13084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13084_call = mutated_mod.get_global_var('func_13084')
call_13085 = func_13084_call()
output = call_13085
func_13086 = relay.Function([], output)
mutated_mod['func_13086'] = func_13086
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13089 = relay.var("var_13089", dtype = "uint32", shape = ())#candidate|13089|()|var|uint32
var_13090 = relay.var("var_13090", dtype = "uint32", shape = (6, 9, 12))#candidate|13090|(6, 9, 12)|var|uint32
bop_13091 = relay.equal(var_13089.astype('bool'), var_13090.astype('bool')) # shape=(6, 9, 12)
bop_13096 = relay.left_shift(var_13090.astype('int8'), var_13089.astype('int8')) # shape=(6, 9, 12)
output = relay.Tuple([bop_13091,bop_13096,])
output2 = relay.Tuple([bop_13091,bop_13096,])
func_13100 = relay.Function([var_13089,var_13090,], output)
mod['func_13100'] = func_13100
mod = relay.transform.InferType()(mod)
mutated_mod['func_13100'] = func_13100
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13100_call = mutated_mod.get_global_var('func_13100')
var_13102 = relay.var("var_13102", dtype = "uint32", shape = ())#candidate|13102|()|var|uint32
var_13103 = relay.var("var_13103", dtype = "uint32", shape = (6, 9, 12))#candidate|13103|(6, 9, 12)|var|uint32
call_13101 = func_13100_call(var_13102,var_13103,)
output = call_13101
func_13104 = relay.Function([var_13102,var_13103,], output)
mutated_mod['func_13104'] = func_13104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9997_call = mod.get_global_var('func_9997')
func_9999_call = mutated_mod.get_global_var('func_9999')
call_13189 = func_9997_call()
call_13190 = func_9997_call()
func_8696_call = mod.get_global_var('func_8696')
func_8698_call = mutated_mod.get_global_var('func_8698')
call_13193 = relay.TupleGetItem(func_8696_call(), 0)
call_13194 = relay.TupleGetItem(func_8698_call(), 0)
output = relay.Tuple([call_13189,call_13193,])
output2 = relay.Tuple([call_13190,call_13194,])
func_13217 = relay.Function([], output)
mod['func_13217'] = func_13217
mod = relay.transform.InferType()(mod)
mutated_mod['func_13217'] = func_13217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13217_call = mutated_mod.get_global_var('func_13217')
call_13218 = func_13217_call()
output = call_13218
func_13219 = relay.Function([], output)
mutated_mod['func_13219'] = func_13219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6034_call = mod.get_global_var('func_6034')
func_6035_call = mutated_mod.get_global_var('func_6035')
call_13220 = relay.TupleGetItem(func_6034_call(), 0)
call_13221 = relay.TupleGetItem(func_6035_call(), 0)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_13226 = relay.TupleGetItem(func_6002_call(), 0)
call_13227 = relay.TupleGetItem(func_6004_call(), 0)
func_4199_call = mod.get_global_var('func_4199')
func_4201_call = mutated_mod.get_global_var('func_4201')
var_13257 = relay.var("var_13257", dtype = "float32", shape = (7,))#candidate|13257|(7,)|var|float32
call_13256 = relay.TupleGetItem(func_4199_call(relay.reshape(var_13257.astype('float32'), [7,])), 0)
call_13258 = relay.TupleGetItem(func_4201_call(relay.reshape(var_13257.astype('float32'), [7,])), 0)
const_13260 = relay.const([[[True,True,False,False,True,True,False,False,False,False],[False,False,False,False,True,False,True,True,False,False],[False,False,True,False,True,False,False,True,True,True],[True,False,False,True,False,True,False,True,False,False],[True,False,True,True,False,False,False,False,False,False],[False,False,False,True,False,True,True,True,False,False],[False,True,False,True,True,True,False,True,False,False],[False,True,False,True,True,True,True,True,True,True],[True,True,False,True,False,False,False,True,True,False],[True,False,True,True,True,False,False,True,False,False],[False,False,False,False,True,True,True,False,False,False],[False,True,True,False,False,True,False,False,False,False],[False,True,False,True,True,True,False,True,False,False]],[[False,False,False,False,True,True,True,False,True,True],[True,True,False,False,True,False,False,False,False,False],[False,False,False,False,True,True,True,True,False,True],[True,False,False,True,False,True,False,True,True,False],[False,False,True,False,True,True,False,True,True,False],[True,True,False,True,True,False,False,False,True,True],[True,True,True,True,False,False,False,True,True,False],[True,False,False,False,False,True,True,True,False,False],[True,False,True,False,True,False,False,False,False,True],[True,False,False,False,True,True,False,False,False,False],[False,True,False,False,True,False,False,True,True,False],[True,True,False,True,True,False,True,True,False,False],[False,True,False,True,True,True,False,False,True,False]],[[False,True,True,False,False,False,False,False,True,False],[False,True,True,True,False,False,True,True,True,True],[True,True,False,True,False,True,True,False,True,False],[False,True,False,True,True,False,False,False,False,True],[False,False,False,True,True,False,True,False,False,False],[True,True,True,True,True,False,True,False,False,False],[False,True,False,False,False,True,False,False,True,False],[False,True,True,False,False,False,True,True,True,True],[True,False,False,True,False,True,True,True,True,True],[True,False,False,True,False,True,True,True,True,False],[True,True,False,False,False,False,True,True,False,False],[False,True,False,False,False,False,False,True,True,True],[True,True,True,True,False,False,False,True,True,False]],[[False,False,True,False,True,True,False,False,False,False],[False,False,False,False,True,False,True,True,False,False],[False,True,True,False,False,False,False,True,True,True],[True,True,True,False,True,False,False,False,False,False],[False,False,True,False,True,False,True,False,True,True],[False,True,False,False,True,False,False,True,True,True],[False,False,True,False,True,False,False,True,False,True],[True,True,True,False,True,False,False,False,False,True],[True,True,True,True,True,False,False,True,False,True],[False,False,False,True,False,True,False,True,False,False],[False,True,True,True,False,True,False,False,True,False],[False,True,True,True,False,False,True,False,True,True],[False,False,False,False,True,False,True,True,True,True]],[[False,True,False,True,True,False,False,True,True,False],[True,True,True,True,False,True,True,True,False,True],[True,False,True,True,False,False,True,True,False,True],[False,False,False,False,True,True,True,False,False,False],[False,False,True,True,True,True,False,False,False,False],[True,True,False,False,False,False,True,False,True,True],[True,True,True,True,False,False,True,True,False,True],[True,False,True,False,True,False,True,False,True,True],[False,False,True,True,True,True,True,False,True,True],[True,False,False,False,False,False,False,True,True,True],[False,False,True,False,False,True,False,True,True,True],[True,True,False,False,False,True,True,False,True,True],[True,False,True,True,False,True,False,False,False,True]],[[True,True,False,True,True,False,False,True,False,True],[True,True,False,True,True,True,False,False,True,True],[True,False,True,True,True,True,False,True,True,True],[True,True,False,True,False,True,True,False,False,True],[True,True,False,True,False,True,False,False,False,True],[True,True,True,False,False,True,True,True,False,True],[False,True,False,False,False,False,True,False,False,True],[True,True,True,False,False,True,True,True,False,True],[False,True,True,False,False,True,True,True,False,True],[False,False,True,False,False,True,False,True,True,False],[True,True,True,False,True,False,True,False,True,True],[False,True,True,True,True,True,False,False,False,True],[False,True,True,True,True,False,False,False,True,False]],[[False,False,True,False,False,False,False,False,False,True],[True,False,False,False,True,False,True,False,False,False],[True,False,True,False,True,False,False,False,False,False],[False,True,False,True,True,True,True,True,True,True],[False,False,False,False,True,True,False,False,True,True],[False,False,True,True,True,True,False,True,True,False],[True,True,True,False,False,False,True,True,True,False],[False,True,False,False,False,True,False,False,False,True],[True,False,False,True,False,True,False,False,False,True],[False,False,False,False,False,False,False,True,True,False],[True,True,True,True,False,True,True,False,False,True],[True,True,True,True,False,True,False,False,True,True],[True,False,True,True,False,True,True,False,False,False]],[[False,True,False,False,False,False,True,True,False,True],[False,True,True,False,True,True,True,True,False,True],[False,True,True,True,True,True,False,False,True,False],[True,False,True,True,False,False,True,True,True,True],[True,False,False,False,False,True,True,True,True,True],[False,True,True,True,True,False,False,True,False,False],[False,True,False,True,False,False,True,True,True,True],[False,False,True,True,False,True,False,False,False,True],[True,True,True,False,False,False,False,True,True,True],[True,True,False,True,True,True,True,False,False,False],[True,True,True,False,False,True,True,False,True,False],[False,True,True,True,True,True,True,False,False,False],[True,True,False,True,False,True,False,True,True,True]],[[False,True,False,True,True,False,False,True,False,False],[True,False,True,False,True,False,True,False,False,False],[True,True,True,True,True,False,False,True,True,True],[False,True,False,False,False,False,False,True,True,True],[True,False,True,False,False,True,False,True,True,True],[True,False,False,True,True,True,True,True,True,False],[True,True,False,True,False,False,True,False,True,False],[True,False,False,True,False,False,False,True,False,True],[False,True,False,False,False,True,False,True,True,True],[False,False,False,False,True,False,False,True,True,False],[True,False,False,False,True,True,False,True,False,False],[True,False,False,True,False,False,False,False,False,True],[True,False,True,False,False,True,False,False,False,True]],[[False,True,False,True,True,True,False,False,True,False],[False,False,False,False,True,False,True,True,True,True],[True,False,True,False,False,True,True,True,True,True],[False,False,True,False,True,False,False,True,False,True],[True,True,True,True,True,False,True,False,True,False],[True,False,True,False,True,True,True,False,False,True],[False,True,True,True,True,False,True,True,True,False],[False,False,True,True,True,False,True,False,True,True],[True,False,True,False,True,False,True,False,True,False],[True,True,True,False,False,False,False,True,False,True],[True,False,True,False,False,False,True,True,True,False],[False,False,False,False,False,True,False,True,False,True],[True,True,False,False,False,False,True,False,False,True]],[[False,True,True,True,False,True,False,True,True,True],[True,True,True,True,True,True,True,False,False,True],[True,False,False,False,False,False,False,True,True,False],[False,True,False,False,False,False,True,False,True,False],[True,False,False,False,True,True,True,False,True,False],[True,True,False,False,True,False,False,True,False,True],[False,False,False,False,False,True,False,False,True,True],[False,True,True,False,True,False,False,True,True,True],[True,False,False,True,False,True,True,True,True,True],[False,True,False,True,True,False,False,True,False,True],[False,True,False,True,True,False,True,True,True,False],[True,False,True,True,True,True,True,False,False,False],[False,True,True,False,False,False,False,False,True,True]],[[True,True,False,False,False,True,False,True,True,True],[False,False,True,True,True,False,False,False,False,True],[False,False,False,True,False,False,True,True,False,False],[False,True,True,False,True,True,True,True,True,False],[False,True,False,True,False,False,True,False,False,False],[True,True,False,True,False,True,True,False,False,True],[False,False,True,False,False,False,True,True,False,False],[False,False,True,False,False,True,False,True,False,True],[True,True,False,False,True,False,True,False,False,True],[False,True,True,True,True,True,True,False,False,True],[True,False,False,False,True,False,False,True,True,False],[False,True,True,False,True,False,True,False,True,True],[True,True,False,False,False,True,True,True,False,True]],[[True,True,False,True,True,True,True,True,False,False],[True,True,True,True,True,False,True,False,False,False],[False,True,True,False,True,True,False,False,True,False],[False,False,True,False,True,False,True,False,False,True],[False,True,False,False,False,False,False,False,False,True],[False,False,False,False,True,False,True,True,False,False],[True,False,False,False,False,True,False,True,True,False],[True,False,False,True,False,False,True,False,False,False],[True,True,False,False,True,True,False,False,False,False],[True,True,True,True,True,True,True,False,True,False],[False,False,False,False,True,False,True,True,True,True],[True,False,False,True,False,True,True,False,False,True],[True,True,True,False,False,False,True,True,False,False]]], dtype = "bool")#candidate|13260|(13, 13, 10)|const|bool
bop_13261 = relay.add(call_13220.astype('float32'), const_13260.astype('float32')) # shape=(13, 13, 10)
bop_13264 = relay.add(call_13221.astype('float32'), const_13260.astype('float32')) # shape=(13, 13, 10)
output = relay.Tuple([call_13226,call_13256,var_13257,bop_13261,])
output2 = relay.Tuple([call_13227,call_13258,var_13257,bop_13264,])
func_13267 = relay.Function([var_13257,], output)
mod['func_13267'] = func_13267
mod = relay.transform.InferType()(mod)
var_13268 = relay.var("var_13268", dtype = "float32", shape = (7,))#candidate|13268|(7,)|var|float32
output = func_13267(var_13268)
func_13269 = relay.Function([var_13268], output)
mutated_mod['func_13269'] = func_13269
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2169_call = mod.get_global_var('func_2169')
func_2171_call = mutated_mod.get_global_var('func_2171')
call_13286 = relay.TupleGetItem(func_2169_call(), 0)
call_13287 = relay.TupleGetItem(func_2171_call(), 0)
func_468_call = mod.get_global_var('func_468')
func_470_call = mutated_mod.get_global_var('func_470')
call_13291 = relay.TupleGetItem(func_468_call(), 0)
call_13292 = relay.TupleGetItem(func_470_call(), 0)
func_6795_call = mod.get_global_var('func_6795')
func_6796_call = mutated_mod.get_global_var('func_6796')
call_13296 = func_6795_call()
call_13297 = func_6795_call()
output = relay.Tuple([call_13286,call_13291,call_13296,])
output2 = relay.Tuple([call_13287,call_13292,call_13297,])
func_13301 = relay.Function([], output)
mod['func_13301'] = func_13301
mod = relay.transform.InferType()(mod)
output = func_13301()
func_13302 = relay.Function([], output)
mutated_mod['func_13302'] = func_13302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_13378 = relay.TupleGetItem(func_1947_call(), 0)
call_13379 = relay.TupleGetItem(func_1949_call(), 0)
output = call_13378
output2 = call_13379
func_13380 = relay.Function([], output)
mod['func_13380'] = func_13380
mod = relay.transform.InferType()(mod)
mutated_mod['func_13380'] = func_13380
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13380_call = mutated_mod.get_global_var('func_13380')
call_13381 = func_13380_call()
output = call_13381
func_13382 = relay.Function([], output)
mutated_mod['func_13382'] = func_13382
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8696_call = mod.get_global_var('func_8696')
func_8698_call = mutated_mod.get_global_var('func_8698')
call_13424 = relay.TupleGetItem(func_8696_call(), 0)
call_13425 = relay.TupleGetItem(func_8698_call(), 0)
func_10428_call = mod.get_global_var('func_10428')
func_10430_call = mutated_mod.get_global_var('func_10430')
call_13448 = relay.TupleGetItem(func_10428_call(), 1)
call_13449 = relay.TupleGetItem(func_10430_call(), 1)
func_6847_call = mod.get_global_var('func_6847')
func_6849_call = mutated_mod.get_global_var('func_6849')
call_13476 = func_6847_call()
call_13477 = func_6847_call()
output = relay.Tuple([call_13424,call_13448,call_13476,])
output2 = relay.Tuple([call_13425,call_13449,call_13477,])
func_13489 = relay.Function([], output)
mod['func_13489'] = func_13489
mod = relay.transform.InferType()(mod)
output = func_13489()
func_13490 = relay.Function([], output)
mutated_mod['func_13490'] = func_13490
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7457_call = mod.get_global_var('func_7457')
func_7459_call = mutated_mod.get_global_var('func_7459')
call_13499 = func_7457_call()
call_13500 = func_7457_call()
func_2985_call = mod.get_global_var('func_2985')
func_2987_call = mutated_mod.get_global_var('func_2987')
call_13535 = relay.TupleGetItem(func_2985_call(), 1)
call_13536 = relay.TupleGetItem(func_2987_call(), 1)
func_610_call = mod.get_global_var('func_610')
func_611_call = mutated_mod.get_global_var('func_611')
call_13537 = relay.TupleGetItem(func_610_call(), 1)
call_13538 = relay.TupleGetItem(func_611_call(), 1)
output = relay.Tuple([call_13499,call_13535,call_13537,])
output2 = relay.Tuple([call_13500,call_13536,call_13538,])
func_13546 = relay.Function([], output)
mod['func_13546'] = func_13546
mod = relay.transform.InferType()(mod)
mutated_mod['func_13546'] = func_13546
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13546_call = mutated_mod.get_global_var('func_13546')
call_13547 = func_13546_call()
output = call_13547
func_13548 = relay.Function([], output)
mutated_mod['func_13548'] = func_13548
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13588 = relay.var("var_13588", dtype = "uint64", shape = (4, 11, 12))#candidate|13588|(4, 11, 12)|var|uint64
var_13589 = relay.var("var_13589", dtype = "uint64", shape = (4, 11, 12))#candidate|13589|(4, 11, 12)|var|uint64
bop_13590 = relay.equal(var_13588.astype('bool'), relay.reshape(var_13589.astype('bool'), relay.shape_of(var_13588))) # shape=(4, 11, 12)
output = bop_13590
output2 = bop_13590
func_13595 = relay.Function([var_13588,var_13589,], output)
mod['func_13595'] = func_13595
mod = relay.transform.InferType()(mod)
var_13596 = relay.var("var_13596", dtype = "uint64", shape = (4, 11, 12))#candidate|13596|(4, 11, 12)|var|uint64
var_13597 = relay.var("var_13597", dtype = "uint64", shape = (4, 11, 12))#candidate|13597|(4, 11, 12)|var|uint64
output = func_13595(var_13596,var_13597,)
func_13598 = relay.Function([var_13596,var_13597,], output)
mutated_mod['func_13598'] = func_13598
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3430_call = mod.get_global_var('func_3430')
func_3431_call = mutated_mod.get_global_var('func_3431')
call_13674 = func_3430_call()
call_13675 = func_3430_call()
func_10887_call = mod.get_global_var('func_10887')
func_10888_call = mutated_mod.get_global_var('func_10888')
call_13678 = relay.TupleGetItem(func_10887_call(), 0)
call_13679 = relay.TupleGetItem(func_10888_call(), 0)
func_9727_call = mod.get_global_var('func_9727')
func_9729_call = mutated_mod.get_global_var('func_9729')
call_13693 = relay.TupleGetItem(func_9727_call(), 0)
call_13694 = relay.TupleGetItem(func_9729_call(), 0)
uop_13695 = relay.acos(call_13678.astype('float32')) # shape=(13, 13, 10)
uop_13697 = relay.acos(call_13679.astype('float32')) # shape=(13, 13, 10)
output = relay.Tuple([call_13674,call_13693,uop_13695,])
output2 = relay.Tuple([call_13675,call_13694,uop_13697,])
func_13704 = relay.Function([], output)
mod['func_13704'] = func_13704
mod = relay.transform.InferType()(mod)
output = func_13704()
func_13705 = relay.Function([], output)
mutated_mod['func_13705'] = func_13705
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2623_call = mod.get_global_var('func_2623')
func_2625_call = mutated_mod.get_global_var('func_2625')
call_13815 = func_2623_call()
call_13816 = func_2623_call()
output = relay.Tuple([call_13815,])
output2 = relay.Tuple([call_13816,])
func_13823 = relay.Function([], output)
mod['func_13823'] = func_13823
mod = relay.transform.InferType()(mod)
output = func_13823()
func_13824 = relay.Function([], output)
mutated_mod['func_13824'] = func_13824
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3794_call = mod.get_global_var('func_3794')
func_3795_call = mutated_mod.get_global_var('func_3795')
call_13832 = relay.TupleGetItem(func_3794_call(), 0)
call_13833 = relay.TupleGetItem(func_3795_call(), 0)
output = relay.Tuple([call_13832,])
output2 = relay.Tuple([call_13833,])
func_13835 = relay.Function([], output)
mod['func_13835'] = func_13835
mod = relay.transform.InferType()(mod)
mutated_mod['func_13835'] = func_13835
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13835_call = mutated_mod.get_global_var('func_13835')
call_13836 = func_13835_call()
output = call_13836
func_13837 = relay.Function([], output)
mutated_mod['func_13837'] = func_13837
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3525_call = mod.get_global_var('func_3525')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_13860 = relay.TupleGetItem(func_3525_call(), 0)
call_13861 = relay.TupleGetItem(func_3526_call(), 0)
output = call_13860
output2 = call_13861
func_13868 = relay.Function([], output)
mod['func_13868'] = func_13868
mod = relay.transform.InferType()(mod)
mutated_mod['func_13868'] = func_13868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13868_call = mutated_mod.get_global_var('func_13868')
call_13869 = func_13868_call()
output = call_13869
func_13870 = relay.Function([], output)
mutated_mod['func_13870'] = func_13870
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1037_call = mod.get_global_var('func_1037')
func_1038_call = mutated_mod.get_global_var('func_1038')
call_13971 = relay.TupleGetItem(func_1037_call(), 1)
call_13972 = relay.TupleGetItem(func_1038_call(), 1)
output = relay.Tuple([call_13971,])
output2 = relay.Tuple([call_13972,])
func_13980 = relay.Function([], output)
mod['func_13980'] = func_13980
mod = relay.transform.InferType()(mod)
output = func_13980()
func_13981 = relay.Function([], output)
mutated_mod['func_13981'] = func_13981
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13217_call = mod.get_global_var('func_13217')
func_13219_call = mutated_mod.get_global_var('func_13219')
call_13988 = relay.TupleGetItem(func_13217_call(), 0)
call_13989 = relay.TupleGetItem(func_13219_call(), 0)
var_13993 = relay.var("var_13993", dtype = "bool", shape = (13, 13, 1))#candidate|13993|(13, 13, 1)|var|bool
bop_13994 = relay.logical_or(call_13988.astype('bool'), relay.reshape(var_13993.astype('bool'), relay.shape_of(call_13988))) # shape=(13, 13, 1)
bop_13997 = relay.logical_or(call_13989.astype('bool'), relay.reshape(var_13993.astype('bool'), relay.shape_of(call_13989))) # shape=(13, 13, 1)
func_780_call = mod.get_global_var('func_780')
func_782_call = mutated_mod.get_global_var('func_782')
call_14024 = relay.TupleGetItem(func_780_call(), 0)
call_14025 = relay.TupleGetItem(func_782_call(), 0)
output = relay.Tuple([bop_13994,call_14024,])
output2 = relay.Tuple([bop_13997,call_14025,])
func_14035 = relay.Function([var_13993,], output)
mod['func_14035'] = func_14035
mod = relay.transform.InferType()(mod)
var_14036 = relay.var("var_14036", dtype = "bool", shape = (13, 13, 1))#candidate|14036|(13, 13, 1)|var|bool
output = func_14035(var_14036)
func_14037 = relay.Function([var_14036], output)
mutated_mod['func_14037'] = func_14037
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11099_call = mod.get_global_var('func_11099')
func_11101_call = mutated_mod.get_global_var('func_11101')
call_14095 = relay.TupleGetItem(func_11099_call(), 0)
call_14096 = relay.TupleGetItem(func_11101_call(), 0)
output = relay.Tuple([call_14095,])
output2 = relay.Tuple([call_14096,])
func_14097 = relay.Function([], output)
mod['func_14097'] = func_14097
mod = relay.transform.InferType()(mod)
mutated_mod['func_14097'] = func_14097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14097_call = mutated_mod.get_global_var('func_14097')
call_14098 = func_14097_call()
output = call_14098
func_14099 = relay.Function([], output)
mutated_mod['func_14099'] = func_14099
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14126 = relay.var("var_14126", dtype = "float32", shape = (11, 14, 15))#candidate|14126|(11, 14, 15)|var|float32
uop_14127 = relay.acosh(var_14126.astype('float32')) # shape=(11, 14, 15)
output = relay.Tuple([uop_14127,])
output2 = relay.Tuple([uop_14127,])
func_14137 = relay.Function([var_14126,], output)
mod['func_14137'] = func_14137
mod = relay.transform.InferType()(mod)
var_14138 = relay.var("var_14138", dtype = "float32", shape = (11, 14, 15))#candidate|14138|(11, 14, 15)|var|float32
output = func_14137(var_14138)
func_14139 = relay.Function([var_14138], output)
mutated_mod['func_14139'] = func_14139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13005_call = mod.get_global_var('func_13005')
func_13007_call = mutated_mod.get_global_var('func_13007')
call_14156 = relay.TupleGetItem(func_13005_call(), 0)
call_14157 = relay.TupleGetItem(func_13007_call(), 0)
func_6135_call = mod.get_global_var('func_6135')
func_6137_call = mutated_mod.get_global_var('func_6137')
const_14160 = relay.const([[4.706353,9.074510,9.441459,-4.627893,-8.237006,8.950215,2.213247]], dtype = "float32")#candidate|14160|(1, 7)|const|float32
call_14159 = relay.TupleGetItem(func_6135_call(relay.reshape(const_14160.astype('float32'), [7,])), 2)
call_14161 = relay.TupleGetItem(func_6137_call(relay.reshape(const_14160.astype('float32'), [7,])), 2)
func_10054_call = mod.get_global_var('func_10054')
func_10056_call = mutated_mod.get_global_var('func_10056')
call_14171 = relay.TupleGetItem(func_10054_call(), 0)
call_14172 = relay.TupleGetItem(func_10056_call(), 0)
output = relay.Tuple([call_14156,call_14159,const_14160,call_14171,])
output2 = relay.Tuple([call_14157,call_14161,const_14160,call_14172,])
func_14196 = relay.Function([], output)
mod['func_14196'] = func_14196
mod = relay.transform.InferType()(mod)
mutated_mod['func_14196'] = func_14196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14196_call = mutated_mod.get_global_var('func_14196')
call_14197 = func_14196_call()
output = call_14197
func_14198 = relay.Function([], output)
mutated_mod['func_14198'] = func_14198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8696_call = mod.get_global_var('func_8696')
func_8698_call = mutated_mod.get_global_var('func_8698')
call_14201 = relay.TupleGetItem(func_8696_call(), 0)
call_14202 = relay.TupleGetItem(func_8698_call(), 0)
func_8199_call = mod.get_global_var('func_8199')
func_8202_call = mutated_mod.get_global_var('func_8202')
var_14215 = relay.var("var_14215", dtype = "float64", shape = (144,))#candidate|14215|(144,)|var|float64
call_14214 = relay.TupleGetItem(func_8199_call(relay.reshape(var_14215.astype('float64'), [3, 8, 6])), 2)
call_14216 = relay.TupleGetItem(func_8202_call(relay.reshape(var_14215.astype('float64'), [3, 8, 6])), 2)
func_4610_call = mod.get_global_var('func_4610')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_14228 = relay.TupleGetItem(func_4610_call(), 0)
call_14229 = relay.TupleGetItem(func_4612_call(), 0)
func_9291_call = mod.get_global_var('func_9291')
func_9293_call = mutated_mod.get_global_var('func_9293')
call_14230 = relay.TupleGetItem(func_9291_call(), 0)
call_14231 = relay.TupleGetItem(func_9293_call(), 0)
bop_14237 = relay.logical_and(call_14201.astype('bool'), var_14215.astype('bool')) # shape=(13, 13, 144)
bop_14240 = relay.logical_and(call_14202.astype('bool'), var_14215.astype('bool')) # shape=(13, 13, 144)
func_5214_call = mod.get_global_var('func_5214')
func_5215_call = mutated_mod.get_global_var('func_5215')
call_14247 = func_5214_call()
call_14248 = func_5214_call()
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_14254 = relay.TupleGetItem(func_6002_call(), 1)
call_14255 = relay.TupleGetItem(func_6004_call(), 1)
const_14259 = relay.const([[[True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False],[False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True],[False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True],[False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False],[True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True],[True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True],[False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False],[False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True],[True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True],[True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True],[True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True],[False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False],[True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True]],[[True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True],[True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True],[True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True],[False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,False],[False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False],[False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True],[False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False],[True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False],[True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True],[True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False],[True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False],[False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True],[False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False]],[[False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True],[True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True],[False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True],[True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True],[True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True],[True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True],[True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False],[True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True],[True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False],[False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False],[True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False],[False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True],[True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True]],[[False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False],[False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False],[False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False],[True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True],[False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False],[False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False],[True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True],[True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False],[True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False],[True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True],[False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True],[True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False],[True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True]],[[True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False],[False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False],[False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False],[False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False],[True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False],[True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True],[True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False],[False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False],[False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False],[True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False],[False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False],[True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True],[False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True]],[[True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False],[False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True],[False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True],[False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False],[False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False],[False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False],[True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True],[True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False],[False,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True],[False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True],[False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False],[False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True],[False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False]],[[False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True],[False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False],[False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False],[False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,True,True],[True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False],[True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False],[True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False],[False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True],[False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False],[True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True],[True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True],[False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False],[False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False]],[[True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True],[False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False],[False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False],[False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False],[True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False],[False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True],[False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True],[True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False],[False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True],[True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True],[False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True],[True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False],[False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True]],[[False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True],[True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False],[True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False],[True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False],[False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True],[True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True],[True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True],[True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True],[True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True],[True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True],[True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False],[True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False],[True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False]],[[True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False],[True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False],[True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False],[False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True],[False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False],[False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True],[False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True],[True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True],[True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False],[True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True],[True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False],[False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False],[False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False]],[[True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False],[True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True],[False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True],[True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True],[True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False],[False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True],[True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False],[True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False],[True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False],[False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True],[True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True],[False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True],[True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False]],[[True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False],[True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True],[True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True],[False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False],[True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True],[True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True],[False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False],[False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False],[False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False],[False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True],[True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False],[False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True],[True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True]],[[True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False],[False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True],[True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False],[True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True],[False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True],[False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False],[True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True],[True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True],[False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True],[True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True],[False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False],[True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True],[True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False]]], dtype = "bool")#candidate|14259|(13, 13, 144)|const|bool
bop_14260 = relay.multiply(bop_14237.astype('uint8'), relay.reshape(const_14259.astype('uint8'), relay.shape_of(bop_14237))) # shape=(13, 13, 144)
bop_14263 = relay.multiply(bop_14240.astype('uint8'), relay.reshape(const_14259.astype('uint8'), relay.shape_of(bop_14240))) # shape=(13, 13, 144)
output = relay.Tuple([call_14214,call_14228,call_14230,call_14247,call_14254,bop_14260,])
output2 = relay.Tuple([call_14216,call_14229,call_14231,call_14248,call_14255,bop_14263,])
func_14269 = relay.Function([var_14215,], output)
mod['func_14269'] = func_14269
mod = relay.transform.InferType()(mod)
var_14270 = relay.var("var_14270", dtype = "float64", shape = (144,))#candidate|14270|(144,)|var|float64
output = func_14269(var_14270)
func_14271 = relay.Function([var_14270], output)
mutated_mod['func_14271'] = func_14271
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13217_call = mod.get_global_var('func_13217')
func_13219_call = mutated_mod.get_global_var('func_13219')
call_14288 = relay.TupleGetItem(func_13217_call(), 1)
call_14289 = relay.TupleGetItem(func_13219_call(), 1)
func_8051_call = mod.get_global_var('func_8051')
func_8053_call = mutated_mod.get_global_var('func_8053')
call_14305 = relay.TupleGetItem(func_8051_call(), 0)
call_14306 = relay.TupleGetItem(func_8053_call(), 0)
func_9051_call = mod.get_global_var('func_9051')
func_9053_call = mutated_mod.get_global_var('func_9053')
call_14313 = relay.TupleGetItem(func_9051_call(), 0)
call_14314 = relay.TupleGetItem(func_9053_call(), 0)
func_9074_call = mod.get_global_var('func_9074')
func_9076_call = mutated_mod.get_global_var('func_9076')
call_14315 = func_9074_call()
call_14316 = func_9074_call()
func_3073_call = mod.get_global_var('func_3073')
func_3075_call = mutated_mod.get_global_var('func_3075')
call_14327 = relay.TupleGetItem(func_3073_call(), 1)
call_14328 = relay.TupleGetItem(func_3075_call(), 1)
output = relay.Tuple([call_14288,call_14305,call_14313,call_14315,call_14327,])
output2 = relay.Tuple([call_14289,call_14306,call_14314,call_14316,call_14328,])
func_14336 = relay.Function([], output)
mod['func_14336'] = func_14336
mod = relay.transform.InferType()(mod)
output = func_14336()
func_14337 = relay.Function([], output)
mutated_mod['func_14337'] = func_14337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12362_call = mod.get_global_var('func_12362')
func_12363_call = mutated_mod.get_global_var('func_12363')
call_14368 = relay.TupleGetItem(func_12362_call(), 0)
call_14369 = relay.TupleGetItem(func_12363_call(), 0)
output = call_14368
output2 = call_14369
func_14375 = relay.Function([], output)
mod['func_14375'] = func_14375
mod = relay.transform.InferType()(mod)
output = func_14375()
func_14376 = relay.Function([], output)
mutated_mod['func_14376'] = func_14376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3712_call = mod.get_global_var('func_3712')
func_3714_call = mutated_mod.get_global_var('func_3714')
call_14441 = relay.TupleGetItem(func_3712_call(), 1)
call_14442 = relay.TupleGetItem(func_3714_call(), 1)
output = relay.Tuple([call_14441,])
output2 = relay.Tuple([call_14442,])
func_14460 = relay.Function([], output)
mod['func_14460'] = func_14460
mod = relay.transform.InferType()(mod)
output = func_14460()
func_14461 = relay.Function([], output)
mutated_mod['func_14461'] = func_14461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_14470 = func_2110_call()
call_14471 = func_2110_call()
func_14035_call = mod.get_global_var('func_14035')
func_14037_call = mutated_mod.get_global_var('func_14037')
call_14491 = relay.TupleGetItem(func_14035_call(relay.reshape(call_14470.astype('bool'), [13, 13, 1])), 1)
call_14492 = relay.TupleGetItem(func_14037_call(relay.reshape(call_14470.astype('bool'), [13, 13, 1])), 1)
func_13027_call = mod.get_global_var('func_13027')
func_13028_call = mutated_mod.get_global_var('func_13028')
call_14500 = relay.TupleGetItem(func_13027_call(), 0)
call_14501 = relay.TupleGetItem(func_13028_call(), 0)
func_6096_call = mod.get_global_var('func_6096')
func_6097_call = mutated_mod.get_global_var('func_6097')
call_14505 = relay.TupleGetItem(func_6096_call(), 1)
call_14506 = relay.TupleGetItem(func_6097_call(), 1)
func_11373_call = mod.get_global_var('func_11373')
func_11376_call = mutated_mod.get_global_var('func_11376')
var_14513 = relay.var("var_14513", dtype = "float32", shape = (1690,))#candidate|14513|(1690,)|var|float32
call_14512 = func_11373_call(relay.reshape(var_14513.astype('float32'), [13, 130]))
call_14514 = func_11373_call(relay.reshape(var_14513.astype('float32'), [13, 130]))
output = relay.Tuple([call_14470,call_14491,call_14500,call_14505,call_14512,var_14513,])
output2 = relay.Tuple([call_14471,call_14492,call_14501,call_14506,call_14514,var_14513,])
func_14531 = relay.Function([var_14513,], output)
mod['func_14531'] = func_14531
mod = relay.transform.InferType()(mod)
var_14532 = relay.var("var_14532", dtype = "float32", shape = (1690,))#candidate|14532|(1690,)|var|float32
output = func_14531(var_14532)
func_14533 = relay.Function([var_14532], output)
mutated_mod['func_14533'] = func_14533
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14547 = relay.var("var_14547", dtype = "float64", shape = (11, 3, 6))#candidate|14547|(11, 3, 6)|var|float64
const_14548 = relay.const([[[-5.420032,0.734101,-1.979075,-2.785201,3.655696,-2.680044],[-7.259319,7.014580,8.420039,-0.137048,-1.514003,5.063819],[7.489557,2.425597,5.250984,-0.577349,-1.267450,1.755372]],[[-7.842599,-0.849649,6.310163,-7.335704,-8.909141,5.711969],[8.860393,4.957826,2.178403,7.621868,-0.664271,-6.213002],[4.049424,7.994655,3.634989,8.906987,-1.269508,4.979749]],[[-0.561488,3.067801,9.005021,-1.383673,3.069430,-2.312268],[-3.266329,6.056361,-9.638880,-0.648012,9.002615,9.248748],[2.706445,-5.980063,-0.778862,9.294591,3.776376,9.280524]],[[5.351628,5.219747,6.282721,9.220176,-1.929840,-5.705099],[1.844726,-9.383842,-9.895586,4.180679,-6.079767,-1.532725],[3.122807,8.719514,-6.694172,8.778458,-0.452596,-4.092679]],[[-4.559944,-6.511420,1.238572,1.897911,8.010425,1.912651],[9.222196,9.415921,-0.317459,4.172054,-9.242116,-6.422483],[3.359140,-6.816239,3.505514,-1.393457,3.253532,-8.596550]],[[6.395509,1.709761,8.726193,0.784928,7.573469,5.752230],[-5.521858,0.238250,8.368590,3.551785,5.985900,4.672662],[8.168354,-3.295844,-1.147750,0.552234,-5.229038,-0.227359]],[[2.781132,-4.733909,4.337559,-5.481798,-4.271039,-8.064367],[3.666798,5.807427,6.834311,2.274486,-8.704926,1.364204],[-7.634393,-5.932065,7.435852,4.051273,-6.879174,9.748609]],[[1.502831,0.884786,5.659499,3.315717,-8.278568,6.533976],[3.778417,-5.316062,-3.176760,-9.383991,-5.630313,0.874768],[-0.661405,-1.238632,4.068333,-8.287123,7.747099,-3.454298]],[[5.986658,1.660677,-5.789420,8.414861,-9.048640,8.207656],[-9.128739,7.033567,6.370549,-3.889521,1.253590,-5.260180],[0.781185,6.532927,0.084785,9.682262,-4.129223,-5.042749]],[[-5.264069,-9.942947,9.877840,9.687548,-0.967448,-0.145738],[-8.961826,1.663358,9.955686,-9.113284,-5.728215,4.654824],[4.805647,-8.929110,2.669936,4.721937,-8.682245,-1.321392]],[[4.237421,3.288753,7.418359,8.416119,0.737926,8.770345],[2.867348,1.021485,-2.854407,9.439404,8.347674,2.612473],[-2.389590,-5.158977,-5.832818,-7.025367,2.607807,5.746258]]], dtype = "float64")#candidate|14548|(11, 3, 6)|const|float64
bop_14549 = relay.less(var_14547.astype('bool'), relay.reshape(const_14548.astype('bool'), relay.shape_of(var_14547))) # shape=(11, 3, 6)
output = bop_14549
output2 = bop_14549
func_14555 = relay.Function([var_14547,], output)
mod['func_14555'] = func_14555
mod = relay.transform.InferType()(mod)
mutated_mod['func_14555'] = func_14555
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14556 = relay.var("var_14556", dtype = "float64", shape = (11, 3, 6))#candidate|14556|(11, 3, 6)|var|float64
func_14555_call = mutated_mod.get_global_var('func_14555')
call_14557 = func_14555_call(var_14556)
output = call_14557
func_14558 = relay.Function([var_14556], output)
mutated_mod['func_14558'] = func_14558
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2478_call = mod.get_global_var('func_2478')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_14583 = func_2478_call()
call_14584 = func_2478_call()
output = relay.Tuple([call_14583,])
output2 = relay.Tuple([call_14584,])
func_14587 = relay.Function([], output)
mod['func_14587'] = func_14587
mod = relay.transform.InferType()(mod)
output = func_14587()
func_14588 = relay.Function([], output)
mutated_mod['func_14588'] = func_14588
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14587_call = mod.get_global_var('func_14587')
func_14588_call = mutated_mod.get_global_var('func_14588')
call_14614 = relay.TupleGetItem(func_14587_call(), 0)
call_14615 = relay.TupleGetItem(func_14588_call(), 0)
output = call_14614
output2 = call_14615
func_14630 = relay.Function([], output)
mod['func_14630'] = func_14630
mod = relay.transform.InferType()(mod)
output = func_14630()
func_14631 = relay.Function([], output)
mutated_mod['func_14631'] = func_14631
mutated_mod = relay.transform.InferType()(mutated_mod)
const_14712 = relay.const([[[-0.320579,-8.877786,6.475472,-4.806660,7.764263,0.535051,-6.539520,0.651134,-6.120177,-6.384574,8.169085,-6.153945],[7.797515,3.742179,-9.621657,-5.635964,-9.006253,-0.356317,1.485082,1.966169,2.585822,-3.432071,-6.223371,-0.901606],[-7.244899,9.144995,1.417980,3.200072,-6.996347,-2.924101,0.611171,2.770860,4.630950,-4.395417,-6.823561,0.361313],[-0.883048,1.761870,-1.955929,4.851419,7.511854,-1.098505,-5.699677,4.159190,-6.781295,-8.225063,-1.752932,-3.211159],[9.064502,9.603278,-9.399002,8.559485,-3.891789,5.603082,7.053786,1.439118,1.083709,0.157584,-4.003067,-1.953235],[6.930032,-9.851828,-0.158739,4.170563,5.750687,3.385014,-4.972781,9.720141,-0.739882,7.256018,8.524331,-8.758151],[-8.503973,9.185951,-5.507497,-6.244879,-7.021646,6.121070,1.336575,-8.684822,6.882824,-7.407039,-5.845907,0.164567],[-0.732267,-8.752548,8.491152,1.580564,6.932263,-2.499161,-5.903301,1.752976,-0.291862,-8.376253,2.597022,-8.906415],[-7.204674,-2.894347,-9.732939,5.487523,-1.944456,1.955724,-5.661191,-6.334245,8.159701,3.229177,9.848621,-9.058214],[-4.351270,1.560944,2.316881,-0.829796,-8.315059,-7.840854,-7.811098,9.595643,-5.801752,2.023805,4.768030,-3.812157],[-2.139031,4.808617,-4.834872,6.052069,-2.432752,-1.442214,6.975568,1.955129,-9.200764,-8.661655,-1.417046,2.692295],[-3.549804,6.645289,-1.358334,-7.846949,-0.056581,-6.752869,2.900946,2.605674,-3.761887,1.963388,-6.446486,6.650570],[2.459385,-6.873356,-3.680524,-8.776062,-6.219139,-4.070020,0.874884,7.426156,-5.784888,-8.451626,-4.630907,4.765636],[6.158877,-0.340026,-6.143295,-3.120935,2.004823,0.370053,8.366817,7.121462,4.804933,-0.125203,-4.936806,-0.693627],[-8.092063,5.350459,-5.611480,3.402018,4.461668,-0.494977,-9.393676,7.202045,9.249940,4.670363,-1.615801,-9.572725],[-6.589917,-8.625239,-1.266744,-6.771356,2.148069,0.931000,-7.663453,-9.838119,-6.790981,1.811066,7.513634,6.735282]],[[5.993602,4.628119,1.443980,-6.342546,3.748528,-1.218286,2.296936,-6.842924,-9.112621,8.363796,-8.555985,6.332552],[-0.973078,9.488640,3.843934,-0.151252,8.900781,8.293360,3.136987,9.877527,-6.178491,-6.741820,-7.179778,6.222266],[3.444022,1.813059,-0.095020,-8.089902,-9.189217,-8.103123,-7.568152,-7.781463,9.339610,-1.703201,4.001080,1.349576],[-6.972079,-5.463246,-6.002705,0.907409,-7.482901,2.920352,4.902687,2.609932,-1.582870,-3.365565,-8.562965,-2.987475],[-0.605761,-5.480290,-6.421467,9.099963,0.858723,2.416587,8.758078,2.634193,-6.113924,-8.688374,8.986097,3.513869],[-0.401728,-6.437542,-1.794417,-9.725794,-0.677341,3.806573,-3.494678,2.987358,-1.951953,9.724211,2.847176,7.510912],[0.184018,-7.400672,9.478465,-7.010042,9.777812,-8.984357,-9.923120,-4.220850,7.832553,6.502625,-1.502258,3.292324],[-3.872651,4.417349,-9.455081,5.997231,-8.574439,-5.459567,7.342666,9.491794,1.194009,-2.358011,-5.264468,-1.609783],[-2.755468,3.703649,-1.523006,1.982989,3.419427,1.988383,8.514747,-7.627007,-6.449592,8.215872,1.780872,-6.290543],[-6.631202,-2.811592,7.497615,-3.188566,3.312242,-9.903117,0.081101,-8.902772,-9.704367,-1.682226,-8.668611,-1.502027],[0.561309,-2.984559,-2.698022,9.222927,5.732986,-1.573127,8.945518,0.421762,-3.779655,-5.112152,1.107538,7.440910],[-1.016968,-9.787114,-5.001654,6.725265,-6.555861,-2.478238,-8.212066,-0.143369,-2.722037,-9.528559,6.781913,-0.824838],[-6.514140,7.270936,7.986961,5.768873,-9.484794,-6.389945,-7.201410,-9.487380,3.781194,-4.566316,0.528277,3.882203],[2.649739,8.739452,3.320521,-1.534150,-5.765582,-2.736789,-8.838448,-0.949824,3.915410,4.518194,-3.094131,-6.741138],[6.552836,-0.097290,6.066875,-0.759016,7.295659,-8.863787,7.147225,-1.142164,-1.522554,4.442145,7.324155,-8.788254],[-7.544551,-8.427125,8.751960,-8.937488,7.004006,2.195918,-9.232967,4.736862,4.596693,3.628102,1.053308,4.466252]],[[-0.836470,-2.552388,-0.023040,-0.551530,1.229258,8.597286,9.830423,8.513612,-4.995170,-5.871963,-9.333974,4.735951],[5.441365,-7.402110,-0.960091,-7.984037,-7.135312,-0.761501,2.292654,6.342543,-0.496142,-7.193130,-3.770311,-6.755074],[-3.417350,4.992769,3.299395,8.548888,3.115150,3.161835,7.142936,-5.544566,-8.606109,-0.978939,8.099816,-0.899873],[-8.988572,-4.569766,-9.355872,-4.728714,5.988039,6.397979,-2.504693,4.946630,-3.623423,1.967995,-8.123289,1.347052],[9.654920,3.603536,1.075010,-7.312650,-1.478212,-4.080085,0.144092,6.773427,0.318847,5.186389,9.916841,8.901522],[7.517817,7.530780,6.236240,8.322541,-5.530260,9.346465,-1.660811,-6.029495,-3.773047,-5.624939,7.620879,-7.197331],[-9.097932,-7.431738,-5.340487,-3.242945,-0.448548,-0.038809,-2.454977,-2.049243,-0.435229,4.216652,5.197117,2.273660],[-4.165391,-9.032659,3.019728,-5.169299,-9.264035,-4.305055,5.909286,8.621482,-5.434325,6.232792,0.314924,-8.183552],[7.895040,-7.487125,2.352542,2.810035,3.773564,8.006829,-3.523077,5.413613,-6.061191,-6.349633,-3.870302,5.728865],[8.700641,2.959490,4.681935,-0.301867,1.994257,9.954010,-5.135514,4.676164,-3.853558,-6.578592,-1.505244,-9.516781],[5.169331,-2.593971,-4.872731,3.659157,-6.839160,-3.892812,-9.528109,9.779790,6.557534,-2.637990,2.540741,-7.508213],[-4.513445,-8.892270,-9.976578,3.026476,7.191001,9.456090,7.627063,7.352402,4.671218,0.442033,-1.282943,-7.410442],[-5.781638,1.320777,-0.089024,7.884882,4.784937,1.252594,-0.144693,8.453353,1.166770,7.206552,2.766948,-6.615252],[-6.598968,-7.170156,-2.705833,9.395485,7.079895,-7.300284,-6.215739,-6.500227,-2.168436,2.484793,-8.525364,-8.742914],[6.418507,1.984309,1.159385,6.737129,7.597947,-7.071630,-5.529424,-9.120068,7.603165,2.633846,1.209837,9.826447],[-5.108316,-0.490493,4.765095,-7.344456,3.632717,-3.623808,7.658587,-8.448660,8.779961,4.549064,-7.689415,-3.199246]],[[-1.739515,9.111340,7.427517,6.509026,7.459050,6.144733,3.056949,6.540942,5.373728,0.208254,-6.394558,0.358849],[-5.501850,2.401658,4.266451,-5.369426,-6.171333,5.299947,-6.307313,7.008375,-9.719662,2.368720,-3.353100,-2.201138],[-0.762358,-5.456491,-1.710701,-2.059745,-4.308128,6.559423,5.782903,-3.596538,-6.177524,-7.058272,-7.027284,-1.754694],[-0.666764,-8.941836,6.232027,-3.894690,-1.719531,-6.284705,-5.581189,-7.488319,-0.142133,-6.010309,7.606675,9.810147],[-1.061168,5.948511,2.680902,-0.935060,8.638635,-7.012117,4.054807,-3.069558,-6.382931,-1.922803,4.776682,2.197979],[3.254132,-8.530752,-8.687855,-9.135907,0.186807,-6.329947,7.600106,-8.669932,0.807775,2.940184,2.171279,6.853143],[-0.256281,-0.438738,-6.903723,-7.823149,-6.680957,-7.153355,-6.456264,6.889633,-7.761198,1.133975,-2.720894,-6.668780],[-5.027099,4.078570,5.775446,3.111862,-8.312405,-4.011441,-7.878828,-7.478857,4.420988,4.239075,3.578364,1.443619],[-2.160054,-9.861264,-9.917915,0.255396,-7.882815,-1.928601,7.610733,-9.591821,7.511413,-1.517953,4.520014,-5.999761],[5.821197,-5.444827,7.937208,4.091738,-6.642144,-8.173018,-0.711762,-2.289885,-5.922969,9.404898,-4.755184,-1.340214],[-6.712958,7.832707,9.633417,-9.661827,-1.966220,-0.734501,-8.916180,9.359685,6.207628,8.094095,4.285173,-0.715638],[-3.547106,0.595706,5.541530,-9.277968,-7.219384,4.026673,-8.298495,5.826821,5.417251,-4.645119,9.661406,-9.873763],[1.828212,-3.975235,3.269954,7.865744,-0.134232,5.166901,-6.140785,2.990981,5.029895,-2.982257,-9.158231,-7.258548],[0.502805,5.600686,8.390823,6.046023,9.193809,6.018294,6.870990,-9.047189,-1.559330,9.446909,-6.867351,7.348661],[-8.941597,7.149858,2.044819,-6.256247,-9.629621,5.548680,8.587435,-6.387327,0.619446,-5.900876,-0.053530,-2.938283],[-2.032453,9.687604,8.630992,-8.155828,4.453894,-4.410836,-4.424672,4.509477,3.944697,-1.161801,-3.589795,9.146176]],[[-6.333747,-0.107078,5.185282,9.455488,-2.893112,-6.660716,-1.974038,3.471452,-2.640472,-4.073622,-0.743326,9.155224],[4.460773,6.207630,-5.177406,9.293099,-1.692919,-2.872359,-3.101772,3.959746,-1.816688,-3.290110,-2.355904,-9.404520],[-3.729799,1.694427,9.955880,-9.439002,-2.487831,-5.928143,-4.509992,-3.318036,7.418936,-8.223992,-8.217868,-8.999549],[6.091534,4.067615,7.228711,-4.874771,5.103331,-5.155592,-9.299132,7.805804,-7.468832,-2.851936,8.426877,6.295369],[3.763855,-8.800851,3.014610,-1.175495,-0.504788,9.630090,-2.548542,0.911286,7.197044,-3.480257,-0.750368,7.897414],[2.758066,1.053138,-4.672760,4.735654,6.791693,7.360958,-6.857595,0.414380,-2.972759,-6.199753,7.614945,-7.182625],[-0.825286,-5.099058,-6.629667,9.531948,8.123751,-5.152871,-9.507473,8.096836,0.642253,-5.616383,4.114468,-5.966824],[-7.289044,-6.546319,-2.885058,2.893144,2.415031,6.836871,8.754821,8.542995,-3.624240,-2.262768,9.639841,-7.222070],[-0.515003,-0.646768,-6.918873,8.884366,-4.141611,-3.852518,-7.572680,8.818902,-0.290028,7.774794,0.231489,-2.020030],[-5.359576,-3.186448,0.684719,6.704307,-9.293680,6.640394,-0.947576,0.910084,-6.970591,-4.320724,7.377992,-1.393472],[-9.312143,3.254460,-8.002293,4.477670,-6.761225,-6.204406,-8.621543,-4.081574,7.701582,-8.644361,-2.989432,-6.059066],[5.686387,-2.338772,-7.391609,-7.204446,-5.129812,8.428402,-6.406133,-4.893214,-1.973304,-3.267449,-3.973321,5.165834],[-5.096554,5.280436,-6.546441,5.286131,-4.010240,-5.326976,-2.628841,-8.952624,8.626094,7.955140,-3.706698,-7.366826],[-4.365642,-1.929328,2.910833,-9.304546,3.823397,0.879518,-1.709241,2.697600,-3.456147,7.967489,1.492591,7.240464],[2.722945,-1.973611,-7.056512,8.075617,2.844903,0.002876,0.893113,-7.795175,-0.791694,-8.217583,-4.944628,8.834432],[-4.522701,5.819729,-7.043316,-9.012264,4.047406,-7.017793,3.677867,-0.556840,8.647576,-9.159015,3.217223,2.087125]],[[-1.088849,-3.139529,4.438633,7.368939,0.679470,3.422309,3.004184,1.222625,-5.281646,4.589338,7.408148,-4.150527],[3.207581,-4.729310,4.969116,-7.078720,3.840258,-0.217728,2.182140,-0.764726,-2.868308,-2.687079,0.867836,-7.579620],[0.777020,-9.541623,5.828965,4.212786,3.349909,-7.740746,3.245222,-7.023681,1.581346,-1.263087,-1.647577,6.725380],[-7.590988,-9.974424,-4.998683,-7.713404,-0.941137,-5.627349,7.980651,3.799489,6.676145,-8.928662,-8.992892,-5.884777],[8.424834,-2.230366,5.687697,3.919362,-9.577412,-1.420610,-1.210627,-3.942793,6.746235,3.921105,0.501644,0.957956],[-0.081443,5.173261,-0.584250,-5.099652,-1.481986,4.259436,3.271009,-0.311964,-7.574769,-7.126280,9.046410,-3.528199],[8.854013,0.903974,-6.625207,-6.473069,-4.318052,1.358471,3.878589,7.342560,7.749878,0.689666,3.419052,-8.159305],[-8.166840,-2.673304,6.963038,-0.077564,-4.557455,0.973690,-6.655583,8.811634,-8.380415,2.040040,7.672779,7.032825],[7.943388,7.927259,-7.104801,8.818139,-6.829826,-7.220402,-3.559352,-9.004618,4.912937,5.932913,9.321710,-7.501020],[3.971549,2.811409,-0.788406,9.144674,-8.655234,-9.488791,-9.308591,1.968109,-0.225902,0.585075,4.141320,3.653037],[3.017897,-5.905682,-4.957816,-4.785241,5.376800,-2.492835,4.452305,6.578416,-7.248527,-5.543071,4.057674,7.476240],[-0.404960,-7.596415,-0.863212,-4.904645,-5.971982,5.935663,2.091684,2.016682,7.911748,6.559189,6.768320,-9.012953],[-2.455262,7.060749,3.050506,7.322671,2.656228,8.659683,-9.788441,1.208087,-9.111468,6.245159,1.433875,-2.024050],[-7.353790,5.795450,0.320818,8.865091,-5.556723,4.355472,1.517443,6.695030,2.389061,-0.151805,-2.045068,-4.500860],[-8.000924,1.130981,-9.496564,4.406991,2.403555,5.162361,-2.727697,-2.425795,0.221443,-5.262242,8.226378,9.968345],[-5.131994,-8.419105,2.068089,-3.662648,-0.481899,6.120528,9.376177,7.891042,4.759671,1.936920,5.863964,5.010261]],[[-5.278804,7.371042,3.659136,-2.778020,-3.088164,5.288126,4.913537,-5.572468,3.135414,4.329598,-1.096107,5.900174],[3.629708,4.591661,-0.248889,9.550955,1.081569,-7.705860,0.133958,-3.394698,8.430924,9.747131,2.771357,-4.858468],[-5.304990,-1.368111,-1.499304,-2.540428,-1.035313,-0.208691,-7.285435,5.810443,-1.889821,9.854805,-3.001835,-2.311265],[5.679825,5.068733,0.755577,6.757424,7.209967,-1.827889,8.028193,8.610576,-5.870486,-9.151098,7.851688,-8.782705],[-8.393640,2.619348,-4.489645,-5.399358,1.757670,-8.349667,-3.888570,-2.700689,9.826547,1.143258,-3.421166,2.535110],[6.245798,8.043825,0.465928,-1.986171,3.958604,9.745534,1.037098,2.208576,0.183592,4.108059,4.396103,2.736847],[-9.939573,1.958301,2.967706,-7.120279,4.691086,4.045138,5.197689,-0.803321,3.882266,-8.869110,0.218920,4.682195],[-6.394268,-6.005249,2.583711,-9.983475,1.650004,-0.149461,-2.754846,8.359723,-2.056915,5.828497,-4.588519,0.395049],[4.595027,3.578437,7.250236,0.330452,9.904184,-2.935343,9.739119,1.460932,-6.361901,0.658549,-9.696551,-4.558036],[3.431828,-0.197631,5.627843,1.884975,-1.603873,-9.721917,2.377860,3.533598,7.860065,8.295638,-5.801079,2.576564],[-5.688558,-7.757558,0.675611,-8.872730,-9.808847,8.126134,-3.894176,-3.006903,9.486136,-4.841023,-1.520734,5.886491],[3.229193,-6.185565,9.711394,9.981676,-3.875458,-9.651632,-7.894566,-1.507412,-8.451941,7.404561,-1.353403,6.471619],[-8.943960,-5.406556,3.522530,-7.613125,8.333361,-8.937185,9.937469,-4.877166,3.292593,9.866648,1.553121,-8.965554],[6.841867,-2.984235,7.236586,9.246682,-9.710045,-5.096907,-7.980326,-6.967043,7.562002,-1.455238,-4.771311,-9.764420],[-6.345440,-9.895425,1.192685,9.573088,-9.053959,-1.275902,8.400535,2.133110,-2.374738,8.803437,-2.429060,-4.212969],[-6.048670,-2.366758,1.614997,2.614847,4.144393,-8.306458,-9.120517,6.320373,8.856858,6.722984,-3.352585,-5.434258]],[[-9.542174,3.769816,-8.891196,6.063795,-8.926997,1.798467,-0.422880,4.197190,-0.693967,0.541136,9.240748,6.557635],[-0.095586,0.467646,6.280326,9.060335,6.209566,4.062418,-5.273235,6.611158,-6.650478,6.106320,6.186486,-8.619403],[-0.890355,-2.908526,3.128335,-2.695895,-2.985457,-8.757826,-6.423330,-9.233468,-6.885624,7.349982,-0.598772,5.901946],[2.596605,2.726022,-2.345201,0.084957,2.501794,-8.276748,7.998590,1.929485,0.427785,-5.318503,1.466708,8.468763],[-0.728095,9.986914,9.289670,6.937861,0.326605,2.650086,6.153199,-9.752859,4.350528,9.390322,6.336292,-6.080543],[-2.881579,-0.547915,9.618105,4.921532,-5.471908,-2.848422,0.536509,0.809158,1.547478,-2.905674,0.314985,7.278689],[-4.374712,5.229972,5.584818,-2.691641,-5.069567,-9.126360,-8.268608,1.674742,-0.732489,2.725910,-4.979037,-0.112897],[8.150896,-5.880691,2.280351,8.254405,-7.797467,8.431481,2.064447,3.391547,0.506277,0.084264,0.870028,-0.088389],[0.449324,4.279148,-6.959081,8.017552,4.747099,-0.077904,5.442020,-1.424603,4.773605,-0.727716,5.920024,-6.087009],[2.148820,-5.070948,8.060510,-6.415248,-2.683724,-9.514340,8.725405,6.332569,0.714053,4.388845,9.880366,-1.954451],[2.872555,8.249695,-6.394929,2.508590,-2.336040,-4.576772,3.351945,-2.384254,-1.591733,-9.402364,-5.166569,-2.971892],[-1.656892,-2.656313,7.839690,-0.881974,2.921976,4.166857,6.045316,8.535610,2.815803,5.739941,-0.616666,-3.970365],[-3.506638,-6.008195,-3.066828,-4.097588,-9.384981,5.478266,9.249168,4.062934,9.155710,-3.936832,0.605816,-6.090664],[0.890311,8.047941,1.013048,6.645486,6.422608,-7.695700,-6.468666,-3.420255,-2.335643,7.816075,4.189331,-1.676107],[4.116969,9.576871,3.859457,6.034408,-3.907211,-4.298321,6.290133,5.571643,-7.941233,-7.878042,0.725981,4.516526],[-1.510047,4.621898,8.155309,6.511191,8.185978,-9.244673,-0.039805,3.600437,-9.970274,0.289426,7.645048,-0.248706]]], dtype = "float64")#candidate|14712|(8, 16, 12)|const|float64
uop_14713 = relay.rsqrt(const_14712.astype('float64')) # shape=(8, 16, 12)
func_1662_call = mod.get_global_var('func_1662')
func_1663_call = mutated_mod.get_global_var('func_1663')
call_14719 = relay.TupleGetItem(func_1662_call(), 1)
call_14720 = relay.TupleGetItem(func_1663_call(), 1)
output = relay.Tuple([uop_14713,call_14719,])
output2 = relay.Tuple([uop_14713,call_14720,])
func_14726 = relay.Function([], output)
mod['func_14726'] = func_14726
mod = relay.transform.InferType()(mod)
output = func_14726()
func_14727 = relay.Function([], output)
mutated_mod['func_14727'] = func_14727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2985_call = mod.get_global_var('func_2985')
func_2987_call = mutated_mod.get_global_var('func_2987')
call_14736 = relay.TupleGetItem(func_2985_call(), 0)
call_14737 = relay.TupleGetItem(func_2987_call(), 0)
func_3712_call = mod.get_global_var('func_3712')
func_3714_call = mutated_mod.get_global_var('func_3714')
call_14745 = relay.TupleGetItem(func_3712_call(), 0)
call_14746 = relay.TupleGetItem(func_3714_call(), 0)
output = relay.Tuple([call_14736,call_14745,])
output2 = relay.Tuple([call_14737,call_14746,])
func_14748 = relay.Function([], output)
mod['func_14748'] = func_14748
mod = relay.transform.InferType()(mod)
mutated_mod['func_14748'] = func_14748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14748_call = mutated_mod.get_global_var('func_14748')
call_14749 = func_14748_call()
output = call_14749
func_14750 = relay.Function([], output)
mutated_mod['func_14750'] = func_14750
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9663_call = mod.get_global_var('func_9663')
func_9665_call = mutated_mod.get_global_var('func_9665')
call_14822 = relay.TupleGetItem(func_9663_call(), 2)
call_14823 = relay.TupleGetItem(func_9665_call(), 2)
func_1490_call = mod.get_global_var('func_1490')
func_1492_call = mutated_mod.get_global_var('func_1492')
var_14830 = relay.var("var_14830", dtype = "float64", shape = (1690,))#candidate|14830|(1690,)|var|float64
call_14829 = relay.TupleGetItem(func_1490_call(relay.reshape(var_14830.astype('float64'), [13, 13, 10])), 0)
call_14831 = relay.TupleGetItem(func_1492_call(relay.reshape(var_14830.astype('float64'), [13, 13, 10])), 0)
output = relay.Tuple([call_14822,call_14829,var_14830,])
output2 = relay.Tuple([call_14823,call_14831,var_14830,])
func_14834 = relay.Function([var_14830,], output)
mod['func_14834'] = func_14834
mod = relay.transform.InferType()(mod)
var_14835 = relay.var("var_14835", dtype = "float64", shape = (1690,))#candidate|14835|(1690,)|var|float64
output = func_14834(var_14835)
func_14836 = relay.Function([var_14835], output)
mutated_mod['func_14836'] = func_14836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14375_call = mod.get_global_var('func_14375')
func_14376_call = mutated_mod.get_global_var('func_14376')
call_14840 = func_14375_call()
call_14841 = func_14375_call()
output = relay.Tuple([call_14840,])
output2 = relay.Tuple([call_14841,])
func_14857 = relay.Function([], output)
mod['func_14857'] = func_14857
mod = relay.transform.InferType()(mod)
mutated_mod['func_14857'] = func_14857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14857_call = mutated_mod.get_global_var('func_14857')
call_14858 = func_14857_call()
output = call_14858
func_14859 = relay.Function([], output)
mutated_mod['func_14859'] = func_14859
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3103_call = mod.get_global_var('func_3103')
func_3105_call = mutated_mod.get_global_var('func_3105')
call_14880 = relay.TupleGetItem(func_3103_call(), 0)
call_14881 = relay.TupleGetItem(func_3105_call(), 0)
func_7935_call = mod.get_global_var('func_7935')
func_7936_call = mutated_mod.get_global_var('func_7936')
call_14882 = relay.TupleGetItem(func_7935_call(), 0)
call_14883 = relay.TupleGetItem(func_7936_call(), 0)
output = relay.Tuple([call_14880,call_14882,])
output2 = relay.Tuple([call_14881,call_14883,])
func_14884 = relay.Function([], output)
mod['func_14884'] = func_14884
mod = relay.transform.InferType()(mod)
output = func_14884()
func_14885 = relay.Function([], output)
mutated_mod['func_14885'] = func_14885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4879_call = mutated_mod.get_global_var('func_4879')
call_14907 = relay.TupleGetItem(func_4878_call(), 1)
call_14908 = relay.TupleGetItem(func_4879_call(), 1)
func_2646_call = mod.get_global_var('func_2646')
func_2647_call = mutated_mod.get_global_var('func_2647')
call_14909 = relay.TupleGetItem(func_2646_call(), 0)
call_14910 = relay.TupleGetItem(func_2647_call(), 0)
func_1759_call = mod.get_global_var('func_1759')
func_1761_call = mutated_mod.get_global_var('func_1761')
call_14919 = relay.TupleGetItem(func_1759_call(), 4)
call_14920 = relay.TupleGetItem(func_1761_call(), 4)
output = relay.Tuple([call_14907,call_14909,call_14919,])
output2 = relay.Tuple([call_14908,call_14910,call_14920,])
func_14933 = relay.Function([], output)
mod['func_14933'] = func_14933
mod = relay.transform.InferType()(mod)
mutated_mod['func_14933'] = func_14933
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14933_call = mutated_mod.get_global_var('func_14933')
call_14934 = func_14933_call()
output = call_14934
func_14935 = relay.Function([], output)
mutated_mod['func_14935'] = func_14935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5486_call = mod.get_global_var('func_5486')
func_5488_call = mutated_mod.get_global_var('func_5488')
call_14942 = relay.TupleGetItem(func_5486_call(), 2)
call_14943 = relay.TupleGetItem(func_5488_call(), 2)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_14944 = func_2110_call()
call_14945 = func_2110_call()
output = relay.Tuple([call_14942,call_14944,])
output2 = relay.Tuple([call_14943,call_14945,])
func_14952 = relay.Function([], output)
mod['func_14952'] = func_14952
mod = relay.transform.InferType()(mod)
mutated_mod['func_14952'] = func_14952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14952_call = mutated_mod.get_global_var('func_14952')
call_14953 = func_14952_call()
output = call_14953
func_14954 = relay.Function([], output)
mutated_mod['func_14954'] = func_14954
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9539_call = mod.get_global_var('func_9539')
func_9540_call = mutated_mod.get_global_var('func_9540')
call_14984 = func_9539_call()
call_14985 = func_9539_call()
output = call_14984
output2 = call_14985
func_14993 = relay.Function([], output)
mod['func_14993'] = func_14993
mod = relay.transform.InferType()(mod)
mutated_mod['func_14993'] = func_14993
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14993_call = mutated_mod.get_global_var('func_14993')
call_14994 = func_14993_call()
output = call_14994
func_14995 = relay.Function([], output)
mutated_mod['func_14995'] = func_14995
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7935_call = mod.get_global_var('func_7935')
func_7936_call = mutated_mod.get_global_var('func_7936')
call_15011 = relay.TupleGetItem(func_7935_call(), 0)
call_15012 = relay.TupleGetItem(func_7936_call(), 0)
func_7659_call = mod.get_global_var('func_7659')
func_7660_call = mutated_mod.get_global_var('func_7660')
call_15018 = relay.TupleGetItem(func_7659_call(), 0)
call_15019 = relay.TupleGetItem(func_7660_call(), 0)
output = relay.Tuple([call_15011,call_15018,])
output2 = relay.Tuple([call_15012,call_15019,])
func_15023 = relay.Function([], output)
mod['func_15023'] = func_15023
mod = relay.transform.InferType()(mod)
output = func_15023()
func_15024 = relay.Function([], output)
mutated_mod['func_15024'] = func_15024
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14884_call = mod.get_global_var('func_14884')
func_14885_call = mutated_mod.get_global_var('func_14885')
call_15145 = relay.TupleGetItem(func_14884_call(), 1)
call_15146 = relay.TupleGetItem(func_14885_call(), 1)
output = relay.Tuple([call_15145,])
output2 = relay.Tuple([call_15146,])
func_15147 = relay.Function([], output)
mod['func_15147'] = func_15147
mod = relay.transform.InferType()(mod)
mutated_mod['func_15147'] = func_15147
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15147_call = mutated_mod.get_global_var('func_15147')
call_15148 = func_15147_call()
output = call_15148
func_15149 = relay.Function([], output)
mutated_mod['func_15149'] = func_15149
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9074_call = mod.get_global_var('func_9074')
func_9076_call = mutated_mod.get_global_var('func_9076')
call_15150 = func_9074_call()
call_15151 = func_9074_call()
func_1587_call = mod.get_global_var('func_1587')
func_1589_call = mutated_mod.get_global_var('func_1589')
call_15154 = relay.TupleGetItem(func_1587_call(), 3)
call_15155 = relay.TupleGetItem(func_1589_call(), 3)
output = relay.Tuple([call_15150,call_15154,])
output2 = relay.Tuple([call_15151,call_15155,])
func_15159 = relay.Function([], output)
mod['func_15159'] = func_15159
mod = relay.transform.InferType()(mod)
mutated_mod['func_15159'] = func_15159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15159_call = mutated_mod.get_global_var('func_15159')
call_15160 = func_15159_call()
output = call_15160
func_15161 = relay.Function([], output)
mutated_mod['func_15161'] = func_15161
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7040_call = mod.get_global_var('func_7040')
func_7042_call = mutated_mod.get_global_var('func_7042')
call_15164 = relay.TupleGetItem(func_7040_call(), 1)
call_15165 = relay.TupleGetItem(func_7042_call(), 1)
output = call_15164
output2 = call_15165
func_15186 = relay.Function([], output)
mod['func_15186'] = func_15186
mod = relay.transform.InferType()(mod)
output = func_15186()
func_15187 = relay.Function([], output)
mutated_mod['func_15187'] = func_15187
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5839_call = mod.get_global_var('func_5839')
func_5840_call = mutated_mod.get_global_var('func_5840')
call_15188 = relay.TupleGetItem(func_5839_call(), 0)
call_15189 = relay.TupleGetItem(func_5840_call(), 0)
func_11334_call = mod.get_global_var('func_11334')
func_11335_call = mutated_mod.get_global_var('func_11335')
call_15192 = relay.TupleGetItem(func_11334_call(), 0)
call_15193 = relay.TupleGetItem(func_11335_call(), 0)
func_11956_call = mod.get_global_var('func_11956')
func_11958_call = mutated_mod.get_global_var('func_11958')
const_15204 = relay.const(9, dtype = "uint8")#candidate|15204|()|const|uint8
call_15203 = relay.TupleGetItem(func_11956_call(relay.reshape(const_15204.astype('uint8'), [])), 0)
call_15205 = relay.TupleGetItem(func_11958_call(relay.reshape(const_15204.astype('uint8'), [])), 0)
output = relay.Tuple([call_15188,call_15192,call_15203,const_15204,])
output2 = relay.Tuple([call_15189,call_15193,call_15205,const_15204,])
func_15208 = relay.Function([], output)
mod['func_15208'] = func_15208
mod = relay.transform.InferType()(mod)
output = func_15208()
func_15209 = relay.Function([], output)
mutated_mod['func_15209'] = func_15209
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4333_call = mod.get_global_var('func_4333')
func_4334_call = mutated_mod.get_global_var('func_4334')
call_15272 = func_4333_call()
call_15273 = func_4333_call()
func_9074_call = mod.get_global_var('func_9074')
func_9076_call = mutated_mod.get_global_var('func_9076')
call_15274 = func_9074_call()
call_15275 = func_9074_call()
func_7692_call = mod.get_global_var('func_7692')
func_7694_call = mutated_mod.get_global_var('func_7694')
call_15284 = func_7692_call()
call_15285 = func_7692_call()
func_1414_call = mod.get_global_var('func_1414')
func_1415_call = mutated_mod.get_global_var('func_1415')
call_15312 = relay.TupleGetItem(func_1414_call(), 1)
call_15313 = relay.TupleGetItem(func_1415_call(), 1)
output = relay.Tuple([call_15272,call_15274,call_15284,call_15312,])
output2 = relay.Tuple([call_15273,call_15275,call_15285,call_15313,])
func_15314 = relay.Function([], output)
mod['func_15314'] = func_15314
mod = relay.transform.InferType()(mod)
mutated_mod['func_15314'] = func_15314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15314_call = mutated_mod.get_global_var('func_15314')
call_15315 = func_15314_call()
output = call_15315
func_15316 = relay.Function([], output)
mutated_mod['func_15316'] = func_15316
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15351 = relay.var("var_15351", dtype = "float32", shape = (3, 12, 11))#candidate|15351|(3, 12, 11)|var|float32
uop_15352 = relay.log(var_15351.astype('float32')) # shape=(3, 12, 11)
uop_15359 = relay.exp(var_15351.astype('float32')) # shape=(3, 12, 11)
output = relay.Tuple([uop_15352,uop_15359,])
output2 = relay.Tuple([uop_15352,uop_15359,])
func_15362 = relay.Function([var_15351,], output)
mod['func_15362'] = func_15362
mod = relay.transform.InferType()(mod)
mutated_mod['func_15362'] = func_15362
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15363 = relay.var("var_15363", dtype = "float32", shape = (3, 12, 11))#candidate|15363|(3, 12, 11)|var|float32
func_15362_call = mutated_mod.get_global_var('func_15362')
call_15364 = func_15362_call(var_15363)
output = call_15364
func_15365 = relay.Function([var_15363], output)
mutated_mod['func_15365'] = func_15365
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3712_call = mod.get_global_var('func_3712')
func_3714_call = mutated_mod.get_global_var('func_3714')
call_15373 = relay.TupleGetItem(func_3712_call(), 0)
call_15374 = relay.TupleGetItem(func_3714_call(), 0)
output = relay.Tuple([call_15373,])
output2 = relay.Tuple([call_15374,])
func_15391 = relay.Function([], output)
mod['func_15391'] = func_15391
mod = relay.transform.InferType()(mod)
output = func_15391()
func_15392 = relay.Function([], output)
mutated_mod['func_15392'] = func_15392
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10428_call = mod.get_global_var('func_10428')
func_10430_call = mutated_mod.get_global_var('func_10430')
call_15431 = relay.TupleGetItem(func_10428_call(), 4)
call_15432 = relay.TupleGetItem(func_10430_call(), 4)
output = relay.Tuple([call_15431,])
output2 = relay.Tuple([call_15432,])
func_15441 = relay.Function([], output)
mod['func_15441'] = func_15441
mod = relay.transform.InferType()(mod)
mutated_mod['func_15441'] = func_15441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15441_call = mutated_mod.get_global_var('func_15441')
call_15442 = func_15441_call()
output = call_15442
func_15443 = relay.Function([], output)
mutated_mod['func_15443'] = func_15443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15208_call = mod.get_global_var('func_15208')
func_15209_call = mutated_mod.get_global_var('func_15209')
call_15500 = relay.TupleGetItem(func_15208_call(), 2)
call_15501 = relay.TupleGetItem(func_15209_call(), 2)
output = call_15500
output2 = call_15501
func_15503 = relay.Function([], output)
mod['func_15503'] = func_15503
mod = relay.transform.InferType()(mod)
output = func_15503()
func_15504 = relay.Function([], output)
mutated_mod['func_15504'] = func_15504
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1587_call = mod.get_global_var('func_1587')
func_1589_call = mutated_mod.get_global_var('func_1589')
call_15537 = relay.TupleGetItem(func_1587_call(), 2)
call_15538 = relay.TupleGetItem(func_1589_call(), 2)
func_3794_call = mod.get_global_var('func_3794')
func_3795_call = mutated_mod.get_global_var('func_3795')
call_15557 = relay.TupleGetItem(func_3794_call(), 0)
call_15558 = relay.TupleGetItem(func_3795_call(), 0)
output = relay.Tuple([call_15537,call_15557,])
output2 = relay.Tuple([call_15538,call_15558,])
func_15579 = relay.Function([], output)
mod['func_15579'] = func_15579
mod = relay.transform.InferType()(mod)
mutated_mod['func_15579'] = func_15579
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15579_call = mutated_mod.get_global_var('func_15579')
call_15580 = func_15579_call()
output = call_15580
func_15581 = relay.Function([], output)
mutated_mod['func_15581'] = func_15581
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11487_call = mod.get_global_var('func_11487')
func_11489_call = mutated_mod.get_global_var('func_11489')
call_15609 = relay.TupleGetItem(func_11487_call(), 4)
call_15610 = relay.TupleGetItem(func_11489_call(), 4)
func_8356_call = mod.get_global_var('func_8356')
func_8358_call = mutated_mod.get_global_var('func_8358')
call_15617 = relay.TupleGetItem(func_8356_call(), 0)
call_15618 = relay.TupleGetItem(func_8358_call(), 0)
output = relay.Tuple([call_15609,call_15617,])
output2 = relay.Tuple([call_15610,call_15618,])
func_15626 = relay.Function([], output)
mod['func_15626'] = func_15626
mod = relay.transform.InferType()(mod)
output = func_15626()
func_15627 = relay.Function([], output)
mutated_mod['func_15627'] = func_15627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8882_call = mod.get_global_var('func_8882')
func_8884_call = mutated_mod.get_global_var('func_8884')
call_15671 = relay.TupleGetItem(func_8882_call(), 1)
call_15672 = relay.TupleGetItem(func_8884_call(), 1)
output = relay.Tuple([call_15671,])
output2 = relay.Tuple([call_15672,])
func_15691 = relay.Function([], output)
mod['func_15691'] = func_15691
mod = relay.transform.InferType()(mod)
mutated_mod['func_15691'] = func_15691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15691_call = mutated_mod.get_global_var('func_15691')
call_15692 = func_15691_call()
output = call_15692
func_15693 = relay.Function([], output)
mutated_mod['func_15693'] = func_15693
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7498_call = mod.get_global_var('func_7498')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_15794 = func_7498_call()
call_15795 = func_7498_call()
func_13267_call = mod.get_global_var('func_13267')
func_13269_call = mutated_mod.get_global_var('func_13269')
var_15804 = relay.var("var_15804", dtype = "float32", shape = (7,))#candidate|15804|(7,)|var|float32
call_15803 = relay.TupleGetItem(func_13267_call(relay.reshape(var_15804.astype('float32'), [7,])), 2)
call_15805 = relay.TupleGetItem(func_13269_call(relay.reshape(var_15804.astype('float32'), [7,])), 2)
output = relay.Tuple([call_15794,call_15803,var_15804,])
output2 = relay.Tuple([call_15795,call_15805,var_15804,])
func_15812 = relay.Function([var_15804,], output)
mod['func_15812'] = func_15812
mod = relay.transform.InferType()(mod)
mutated_mod['func_15812'] = func_15812
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15813 = relay.var("var_15813", dtype = "float32", shape = (7,))#candidate|15813|(7,)|var|float32
func_15812_call = mutated_mod.get_global_var('func_15812')
call_15814 = func_15812_call(var_15813)
output = call_15814
func_15815 = relay.Function([var_15813], output)
mutated_mod['func_15815'] = func_15815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8503_call = mod.get_global_var('func_8503')
func_8505_call = mutated_mod.get_global_var('func_8505')
call_15819 = relay.TupleGetItem(func_8503_call(), 0)
call_15820 = relay.TupleGetItem(func_8505_call(), 0)
func_15314_call = mod.get_global_var('func_15314')
func_15316_call = mutated_mod.get_global_var('func_15316')
call_15822 = relay.TupleGetItem(func_15314_call(), 2)
call_15823 = relay.TupleGetItem(func_15316_call(), 2)
func_6096_call = mod.get_global_var('func_6096')
func_6097_call = mutated_mod.get_global_var('func_6097')
call_15829 = relay.TupleGetItem(func_6096_call(), 1)
call_15830 = relay.TupleGetItem(func_6097_call(), 1)
output = relay.Tuple([call_15819,call_15822,call_15829,])
output2 = relay.Tuple([call_15820,call_15823,call_15830,])
func_15831 = relay.Function([], output)
mod['func_15831'] = func_15831
mod = relay.transform.InferType()(mod)
output = func_15831()
func_15832 = relay.Function([], output)
mutated_mod['func_15832'] = func_15832
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5119_call = mod.get_global_var('func_5119')
func_5120_call = mutated_mod.get_global_var('func_5120')
call_15862 = relay.TupleGetItem(func_5119_call(), 2)
call_15863 = relay.TupleGetItem(func_5120_call(), 2)
output = relay.Tuple([call_15862,])
output2 = relay.Tuple([call_15863,])
func_15864 = relay.Function([], output)
mod['func_15864'] = func_15864
mod = relay.transform.InferType()(mod)
mutated_mod['func_15864'] = func_15864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15864_call = mutated_mod.get_global_var('func_15864')
call_15865 = func_15864_call()
output = call_15865
func_15866 = relay.Function([], output)
mutated_mod['func_15866'] = func_15866
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15879 = relay.var("var_15879", dtype = "float32", shape = (14, 2, 13))#candidate|15879|(14, 2, 13)|var|float32
uop_15880 = relay.tan(var_15879.astype('float32')) # shape=(14, 2, 13)
func_12586_call = mod.get_global_var('func_12586')
func_12587_call = mutated_mod.get_global_var('func_12587')
call_15882 = relay.TupleGetItem(func_12586_call(), 0)
call_15883 = relay.TupleGetItem(func_12587_call(), 0)
bop_15888 = relay.greater_equal(uop_15880.astype('bool'), relay.reshape(var_15879.astype('bool'), relay.shape_of(uop_15880))) # shape=(14, 2, 13)
func_15503_call = mod.get_global_var('func_15503')
func_15504_call = mutated_mod.get_global_var('func_15504')
call_15907 = func_15503_call()
call_15908 = func_15503_call()
output = relay.Tuple([call_15882,bop_15888,call_15907,])
output2 = relay.Tuple([call_15883,bop_15888,call_15908,])
func_15909 = relay.Function([var_15879,], output)
mod['func_15909'] = func_15909
mod = relay.transform.InferType()(mod)
mutated_mod['func_15909'] = func_15909
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15910 = relay.var("var_15910", dtype = "float32", shape = (14, 2, 13))#candidate|15910|(14, 2, 13)|var|float32
func_15909_call = mutated_mod.get_global_var('func_15909')
call_15911 = func_15909_call(var_15910)
output = call_15911
func_15912 = relay.Function([var_15910], output)
mutated_mod['func_15912'] = func_15912
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8394_call = mod.get_global_var('func_8394')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_15969 = relay.TupleGetItem(func_8394_call(), 0)
call_15970 = relay.TupleGetItem(func_8396_call(), 0)
output = call_15969
output2 = call_15970
func_15987 = relay.Function([], output)
mod['func_15987'] = func_15987
mod = relay.transform.InferType()(mod)
mutated_mod['func_15987'] = func_15987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15987_call = mutated_mod.get_global_var('func_15987')
call_15988 = func_15987_call()
output = call_15988
func_15989 = relay.Function([], output)
mutated_mod['func_15989'] = func_15989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_820_call = mod.get_global_var('func_820')
func_821_call = mutated_mod.get_global_var('func_821')
call_16004 = relay.TupleGetItem(func_820_call(), 0)
call_16005 = relay.TupleGetItem(func_821_call(), 0)
output = relay.Tuple([call_16004,])
output2 = relay.Tuple([call_16005,])
func_16026 = relay.Function([], output)
mod['func_16026'] = func_16026
mod = relay.transform.InferType()(mod)
output = func_16026()
func_16027 = relay.Function([], output)
mutated_mod['func_16027'] = func_16027
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15023_call = mod.get_global_var('func_15023')
func_15024_call = mutated_mod.get_global_var('func_15024')
call_16028 = relay.TupleGetItem(func_15023_call(), 1)
call_16029 = relay.TupleGetItem(func_15024_call(), 1)
output = call_16028
output2 = call_16029
func_16031 = relay.Function([], output)
mod['func_16031'] = func_16031
mod = relay.transform.InferType()(mod)
output = func_16031()
func_16032 = relay.Function([], output)
mutated_mod['func_16032'] = func_16032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5735_call = mod.get_global_var('func_5735')
func_5736_call = mutated_mod.get_global_var('func_5736')
call_16049 = func_5735_call()
call_16050 = func_5735_call()
func_15147_call = mod.get_global_var('func_15147')
func_15149_call = mutated_mod.get_global_var('func_15149')
call_16051 = relay.TupleGetItem(func_15147_call(), 0)
call_16052 = relay.TupleGetItem(func_15149_call(), 0)
func_10251_call = mod.get_global_var('func_10251')
func_10253_call = mutated_mod.get_global_var('func_10253')
call_16062 = relay.TupleGetItem(func_10251_call(), 0)
call_16063 = relay.TupleGetItem(func_10253_call(), 0)
var_16070 = relay.var("var_16070", dtype = "bool", shape = (13, 13, 12))#candidate|16070|(13, 13, 12)|var|bool
bop_16071 = relay.mod(call_16049.astype('float64'), var_16070.astype('float64')) # shape=(13, 13, 12)
bop_16074 = relay.mod(call_16050.astype('float64'), var_16070.astype('float64')) # shape=(13, 13, 12)
func_13980_call = mod.get_global_var('func_13980')
func_13981_call = mutated_mod.get_global_var('func_13981')
call_16078 = relay.TupleGetItem(func_13980_call(), 0)
call_16079 = relay.TupleGetItem(func_13981_call(), 0)
func_7716_call = mod.get_global_var('func_7716')
func_7718_call = mutated_mod.get_global_var('func_7718')
call_16085 = func_7716_call()
call_16086 = func_7716_call()
output = relay.Tuple([call_16051,call_16062,bop_16071,call_16078,call_16085,])
output2 = relay.Tuple([call_16052,call_16063,bop_16074,call_16079,call_16086,])
func_16088 = relay.Function([var_16070,], output)
mod['func_16088'] = func_16088
mod = relay.transform.InferType()(mod)
var_16089 = relay.var("var_16089", dtype = "bool", shape = (13, 13, 12))#candidate|16089|(13, 13, 12)|var|bool
output = func_16088(var_16089)
func_16090 = relay.Function([var_16089], output)
mutated_mod['func_16090'] = func_16090
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5688_call = mod.get_global_var('func_5688')
func_5690_call = mutated_mod.get_global_var('func_5690')
call_16095 = func_5688_call()
call_16096 = func_5688_call()
func_13489_call = mod.get_global_var('func_13489')
func_13490_call = mutated_mod.get_global_var('func_13490')
call_16102 = relay.TupleGetItem(func_13489_call(), 1)
call_16103 = relay.TupleGetItem(func_13490_call(), 1)
output = relay.Tuple([call_16095,call_16102,])
output2 = relay.Tuple([call_16096,call_16103,])
func_16107 = relay.Function([], output)
mod['func_16107'] = func_16107
mod = relay.transform.InferType()(mod)
mutated_mod['func_16107'] = func_16107
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16107_call = mutated_mod.get_global_var('func_16107')
call_16108 = func_16107_call()
output = call_16108
func_16109 = relay.Function([], output)
mutated_mod['func_16109'] = func_16109
mutated_mod = relay.transform.InferType()(mutated_mod)
const_16110 = relay.const([[[9,-7,-6,-6,4,-10],[6,2,-6,-3,1,-6],[8,1,6,-5,9,-9],[2,-3,-3,-3,4,6],[-8,5,-8,-4,-1,-2]],[[-6,-3,-3,-1,-10,-3],[-9,1,4,5,6,-3],[-3,3,-4,10,-3,7],[7,-1,4,9,-2,7],[8,10,-4,-8,-10,2]],[[7,-5,6,8,-10,10],[7,-7,10,7,-10,9],[9,-2,10,6,5,-10],[1,-4,-9,7,2,4],[-10,7,9,-3,-7,1]],[[6,-7,-7,1,6,-1],[8,2,-1,-3,9,-10],[-7,-7,7,-4,-3,5],[-9,-10,-2,4,8,-3],[2,2,3,10,-7,6]],[[6,1,2,-1,-4,8],[3,-7,7,2,3,5],[-7,10,3,-2,-6,8],[8,-9,-4,8,10,-10],[5,-10,-7,-6,9,10]],[[2,1,-2,-5,10,-3],[-2,2,4,9,-6,-8],[2,-7,10,3,7,1],[4,-2,-10,9,-3,2],[-4,9,-9,-3,2,4]],[[-5,-5,10,6,2,8],[-10,-5,-1,4,-9,-7],[1,1,-10,-9,-1,-9],[-2,5,-2,7,-4,-7],[-9,-2,6,-7,9,-2]],[[3,4,-10,5,8,8],[-4,2,-7,-3,-1,-7],[4,6,3,10,1,-2],[-9,-3,-6,8,5,-8],[-10,3,5,10,5,1]],[[-4,-6,7,6,-4,4],[1,9,-4,10,-9,-9],[2,-2,-3,-7,-7,2],[10,1,-8,-3,9,-4],[-3,10,7,6,7,8]],[[-2,9,-9,-3,-10,2],[-1,6,1,4,-6,5],[4,-5,-9,10,-10,-1],[9,-10,8,6,9,1],[4,5,10,3,1,-4]],[[5,-10,-3,5,-4,-3],[-7,4,-3,-7,10,6],[1,-5,-9,3,-3,8],[5,-9,8,-3,-3,2],[-4,10,2,6,-5,-8]],[[-8,-8,-3,8,-10,8],[1,3,-10,7,-6,8],[2,3,-2,4,9,2],[6,9,7,4,-1,-9],[3,-5,-4,9,8,7]],[[-1,2,1,-2,-2,-5],[-2,-8,-7,4,-4,1],[3,-5,-1,2,1,2],[6,1,6,-8,4,-1],[-2,2,-5,5,4,10]]], dtype = "uint64")#candidate|16110|(13, 5, 6)|const|uint64
var_16111 = relay.var("var_16111", dtype = "uint64", shape = (13, 5, 6))#candidate|16111|(13, 5, 6)|var|uint64
bop_16112 = relay.left_shift(const_16110.astype('uint64'), relay.reshape(var_16111.astype('uint64'), relay.shape_of(const_16110))) # shape=(13, 5, 6)
func_14748_call = mod.get_global_var('func_14748')
func_14750_call = mutated_mod.get_global_var('func_14750')
call_16124 = relay.TupleGetItem(func_14748_call(), 0)
call_16125 = relay.TupleGetItem(func_14750_call(), 0)
func_9363_call = mod.get_global_var('func_9363')
func_9364_call = mutated_mod.get_global_var('func_9364')
call_16133 = func_9363_call()
call_16134 = func_9363_call()
output = relay.Tuple([bop_16112,call_16124,call_16133,])
output2 = relay.Tuple([bop_16112,call_16125,call_16134,])
func_16137 = relay.Function([var_16111,], output)
mod['func_16137'] = func_16137
mod = relay.transform.InferType()(mod)
mutated_mod['func_16137'] = func_16137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16138 = relay.var("var_16138", dtype = "uint64", shape = (13, 5, 6))#candidate|16138|(13, 5, 6)|var|uint64
func_16137_call = mutated_mod.get_global_var('func_16137')
call_16139 = func_16137_call(var_16138)
output = call_16139
func_16140 = relay.Function([var_16138], output)
mutated_mod['func_16140'] = func_16140
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12199_call = mod.get_global_var('func_12199')
func_12201_call = mutated_mod.get_global_var('func_12201')
call_16306 = func_12199_call()
call_16307 = func_12199_call()
func_15579_call = mod.get_global_var('func_15579')
func_15581_call = mutated_mod.get_global_var('func_15581')
call_16312 = relay.TupleGetItem(func_15579_call(), 0)
call_16313 = relay.TupleGetItem(func_15581_call(), 0)
func_9074_call = mod.get_global_var('func_9074')
func_9076_call = mutated_mod.get_global_var('func_9076')
call_16318 = func_9074_call()
call_16319 = func_9074_call()
output = relay.Tuple([call_16306,call_16312,call_16318,])
output2 = relay.Tuple([call_16307,call_16313,call_16319,])
func_16325 = relay.Function([], output)
mod['func_16325'] = func_16325
mod = relay.transform.InferType()(mod)
output = func_16325()
func_16326 = relay.Function([], output)
mutated_mod['func_16326'] = func_16326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14933_call = mod.get_global_var('func_14933')
func_14935_call = mutated_mod.get_global_var('func_14935')
call_16347 = relay.TupleGetItem(func_14933_call(), 0)
call_16348 = relay.TupleGetItem(func_14935_call(), 0)
output = relay.Tuple([call_16347,])
output2 = relay.Tuple([call_16348,])
func_16387 = relay.Function([], output)
mod['func_16387'] = func_16387
mod = relay.transform.InferType()(mod)
mutated_mod['func_16387'] = func_16387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16387_call = mutated_mod.get_global_var('func_16387')
call_16388 = func_16387_call()
output = call_16388
func_16389 = relay.Function([], output)
mutated_mod['func_16389'] = func_16389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7692_call = mod.get_global_var('func_7692')
func_7694_call = mutated_mod.get_global_var('func_7694')
call_16407 = func_7692_call()
call_16408 = func_7692_call()
output = call_16407
output2 = call_16408
func_16416 = relay.Function([], output)
mod['func_16416'] = func_16416
mod = relay.transform.InferType()(mod)
mutated_mod['func_16416'] = func_16416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16416_call = mutated_mod.get_global_var('func_16416')
call_16417 = func_16416_call()
output = call_16417
func_16418 = relay.Function([], output)
mutated_mod['func_16418'] = func_16418
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8882_call = mod.get_global_var('func_8882')
func_8884_call = mutated_mod.get_global_var('func_8884')
call_16494 = relay.TupleGetItem(func_8882_call(), 0)
call_16495 = relay.TupleGetItem(func_8884_call(), 0)
output = call_16494
output2 = call_16495
func_16533 = relay.Function([], output)
mod['func_16533'] = func_16533
mod = relay.transform.InferType()(mod)
output = func_16533()
func_16534 = relay.Function([], output)
mutated_mod['func_16534'] = func_16534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4879_call = mutated_mod.get_global_var('func_4879')
call_16535 = relay.TupleGetItem(func_4878_call(), 2)
call_16536 = relay.TupleGetItem(func_4879_call(), 2)
func_16031_call = mod.get_global_var('func_16031')
func_16032_call = mutated_mod.get_global_var('func_16032')
call_16560 = func_16031_call()
call_16561 = func_16031_call()
func_5735_call = mod.get_global_var('func_5735')
func_5736_call = mutated_mod.get_global_var('func_5736')
call_16567 = func_5735_call()
call_16568 = func_5735_call()
func_5735_call = mod.get_global_var('func_5735')
func_5736_call = mutated_mod.get_global_var('func_5736')
call_16569 = func_5735_call()
call_16570 = func_5735_call()
output = relay.Tuple([call_16535,call_16560,call_16567,call_16569,])
output2 = relay.Tuple([call_16536,call_16561,call_16568,call_16570,])
func_16590 = relay.Function([], output)
mod['func_16590'] = func_16590
mod = relay.transform.InferType()(mod)
mutated_mod['func_16590'] = func_16590
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16590_call = mutated_mod.get_global_var('func_16590')
call_16591 = func_16590_call()
output = call_16591
func_16592 = relay.Function([], output)
mutated_mod['func_16592'] = func_16592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1947_call = mod.get_global_var('func_1947')
func_1949_call = mutated_mod.get_global_var('func_1949')
call_16614 = relay.TupleGetItem(func_1947_call(), 0)
call_16615 = relay.TupleGetItem(func_1949_call(), 0)
var_16617 = relay.var("var_16617", dtype = "bool", shape = (13, 13, 7))#candidate|16617|(13, 13, 7)|var|bool
bop_16618 = relay.greater_equal(call_16614.astype('bool'), var_16617.astype('bool')) # shape=(13, 13, 7)
bop_16621 = relay.greater_equal(call_16615.astype('bool'), var_16617.astype('bool')) # shape=(13, 13, 7)
output = bop_16618
output2 = bop_16621
func_16625 = relay.Function([var_16617,], output)
mod['func_16625'] = func_16625
mod = relay.transform.InferType()(mod)
var_16626 = relay.var("var_16626", dtype = "bool", shape = (13, 13, 7))#candidate|16626|(13, 13, 7)|var|bool
output = func_16625(var_16626)
func_16627 = relay.Function([var_16626], output)
mutated_mod['func_16627'] = func_16627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16590_call = mod.get_global_var('func_16590')
func_16592_call = mutated_mod.get_global_var('func_16592')
call_16656 = relay.TupleGetItem(func_16590_call(), 3)
call_16657 = relay.TupleGetItem(func_16592_call(), 3)
func_7040_call = mod.get_global_var('func_7040')
func_7042_call = mutated_mod.get_global_var('func_7042')
call_16666 = relay.TupleGetItem(func_7040_call(), 0)
call_16667 = relay.TupleGetItem(func_7042_call(), 0)
output = relay.Tuple([call_16656,call_16666,])
output2 = relay.Tuple([call_16657,call_16667,])
func_16684 = relay.Function([], output)
mod['func_16684'] = func_16684
mod = relay.transform.InferType()(mod)
mutated_mod['func_16684'] = func_16684
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16684_call = mutated_mod.get_global_var('func_16684')
call_16685 = func_16684_call()
output = call_16685
func_16686 = relay.Function([], output)
mutated_mod['func_16686'] = func_16686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11334_call = mod.get_global_var('func_11334')
func_11335_call = mutated_mod.get_global_var('func_11335')
call_16701 = relay.TupleGetItem(func_11334_call(), 0)
call_16702 = relay.TupleGetItem(func_11335_call(), 0)
output = relay.Tuple([call_16701,])
output2 = relay.Tuple([call_16702,])
func_16710 = relay.Function([], output)
mod['func_16710'] = func_16710
mod = relay.transform.InferType()(mod)
output = func_16710()
func_16711 = relay.Function([], output)
mutated_mod['func_16711'] = func_16711
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8503_call = mod.get_global_var('func_8503')
func_8505_call = mutated_mod.get_global_var('func_8505')
call_16760 = relay.TupleGetItem(func_8503_call(), 0)
call_16761 = relay.TupleGetItem(func_8505_call(), 0)
func_7487_call = mod.get_global_var('func_7487')
func_7489_call = mutated_mod.get_global_var('func_7489')
call_16765 = relay.TupleGetItem(func_7487_call(), 0)
call_16766 = relay.TupleGetItem(func_7489_call(), 0)
func_15831_call = mod.get_global_var('func_15831')
func_15832_call = mutated_mod.get_global_var('func_15832')
call_16771 = relay.TupleGetItem(func_15831_call(), 1)
call_16772 = relay.TupleGetItem(func_15832_call(), 1)
output = relay.Tuple([call_16760,call_16765,call_16771,])
output2 = relay.Tuple([call_16761,call_16766,call_16772,])
func_16778 = relay.Function([], output)
mod['func_16778'] = func_16778
mod = relay.transform.InferType()(mod)
output = func_16778()
func_16779 = relay.Function([], output)
mutated_mod['func_16779'] = func_16779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3942_call = mod.get_global_var('func_3942')
func_3944_call = mutated_mod.get_global_var('func_3944')
call_16865 = relay.TupleGetItem(func_3942_call(), 0)
call_16866 = relay.TupleGetItem(func_3944_call(), 0)
func_2110_call = mod.get_global_var('func_2110')
func_2112_call = mutated_mod.get_global_var('func_2112')
call_16879 = func_2110_call()
call_16880 = func_2110_call()
output = relay.Tuple([call_16865,call_16879,])
output2 = relay.Tuple([call_16866,call_16880,])
func_16882 = relay.Function([], output)
mod['func_16882'] = func_16882
mod = relay.transform.InferType()(mod)
mutated_mod['func_16882'] = func_16882
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16882_call = mutated_mod.get_global_var('func_16882')
call_16883 = func_16882_call()
output = call_16883
func_16884 = relay.Function([], output)
mutated_mod['func_16884'] = func_16884
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12025_call = mod.get_global_var('func_12025')
func_12027_call = mutated_mod.get_global_var('func_12027')
call_16903 = relay.TupleGetItem(func_12025_call(), 0)
call_16904 = relay.TupleGetItem(func_12027_call(), 0)
func_6417_call = mod.get_global_var('func_6417')
func_6420_call = mutated_mod.get_global_var('func_6420')
const_16917 = relay.const(4, dtype = "uint8")#candidate|16917|()|const|uint8
const_16918 = relay.const([7,-1,3,3,8,-1,8,-3,-1,5,-3,-5,6,-4,-5,-3,7,7,7,-5,6,3,-1,8,-9,5,9,1,-2,-10,-2,-9,-7,8,-8,9,8,-9,-8,10,-10,-1,4,6,7,-3,1,7,-10,-1,7,-2,2,3,-8,1,-9,-7,-6,-9,3,3,5,9], dtype = "uint8")#candidate|16918|(64,)|const|uint8
call_16916 = relay.TupleGetItem(func_6417_call(relay.reshape(const_16917.astype('uint8'), []), relay.reshape(const_16918.astype('uint8'), [8, 8, 1]), ), 1)
call_16919 = relay.TupleGetItem(func_6420_call(relay.reshape(const_16917.astype('uint8'), []), relay.reshape(const_16918.astype('uint8'), [8, 8, 1]), ), 1)
output = relay.Tuple([call_16903,call_16916,const_16917,const_16918,])
output2 = relay.Tuple([call_16904,call_16919,const_16917,const_16918,])
func_16920 = relay.Function([], output)
mod['func_16920'] = func_16920
mod = relay.transform.InferType()(mod)
mutated_mod['func_16920'] = func_16920
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16920_call = mutated_mod.get_global_var('func_16920')
call_16921 = func_16920_call()
output = call_16921
func_16922 = relay.Function([], output)
mutated_mod['func_16922'] = func_16922
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15147_call = mod.get_global_var('func_15147')
func_15149_call = mutated_mod.get_global_var('func_15149')
call_16923 = relay.TupleGetItem(func_15147_call(), 0)
call_16924 = relay.TupleGetItem(func_15149_call(), 0)
output = relay.Tuple([call_16923,])
output2 = relay.Tuple([call_16924,])
func_16933 = relay.Function([], output)
mod['func_16933'] = func_16933
mod = relay.transform.InferType()(mod)
mutated_mod['func_16933'] = func_16933
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16933_call = mutated_mod.get_global_var('func_16933')
call_16934 = func_16933_call()
output = call_16934
func_16935 = relay.Function([], output)
mutated_mod['func_16935'] = func_16935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9997_call = mod.get_global_var('func_9997')
func_9999_call = mutated_mod.get_global_var('func_9999')
call_16940 = func_9997_call()
call_16941 = func_9997_call()
func_8087_call = mod.get_global_var('func_8087')
func_8088_call = mutated_mod.get_global_var('func_8088')
call_16942 = relay.TupleGetItem(func_8087_call(), 1)
call_16943 = relay.TupleGetItem(func_8088_call(), 1)
func_9933_call = mod.get_global_var('func_9933')
func_9936_call = mutated_mod.get_global_var('func_9936')
const_16945 = relay.const([0.213449,9.191289,1.813095,-4.659788,-1.017643,-2.534224,-9.776712,-9.118043,-7.794079,5.909178,-1.249318,6.962038,8.949383,7.009103,-9.558527,2.170178,-8.715767,-4.006281,-4.063661,6.239743,6.862797,8.440017,-4.285060,-4.644126,3.698613,1.012473,8.933112,7.363090,3.505051,8.398726,4.593816,5.371881,4.261448,-2.582519,2.226001,-2.052954,4.061164,-2.016179,-4.729388,-1.962012,9.212847,9.220484,-6.790196,5.659928,-3.592144,5.880244,6.665132,2.190538,-0.983128,-4.469720,0.467059,-0.319056,-3.507319,4.986898,-9.483776,-7.867518,1.914896,-6.960311,-3.708700,2.536046,-8.633920,6.467439,-3.470331,0.169474,-2.124567,-3.522393,-9.317958,-7.650464,7.116763,7.223506,4.315622,6.764477,-9.516700,-6.612607,3.518178,4.304155,-1.204549,6.850221,5.089045,-0.259912,-1.861022,-1.045081,5.687320,8.501039,-3.184578,-5.137592,5.796432,-3.723308,8.903377,-3.775718,6.332711,5.561599,-5.554589,-5.922639,4.199490,9.099685,6.710954,-4.418617,-3.903258,6.235811,4.423500,-5.494522,-8.232504,-4.379843,3.772010,-2.489205,-5.586779,8.532632,7.711977,-5.447718,-3.562082,-7.184677,5.456599,-8.259672,4.462307,-2.045131,-2.130577,2.617892,-4.856596,-2.967144,-3.782843,-7.791762,-9.202826,-8.694663,6.403106,-5.496821,-8.503274,2.921986,-3.676446,-1.857163,5.329435,-2.849249,8.318136,-4.269926,9.135964,-8.297470,-5.490149,-8.067901,-7.517520,-1.628420,4.685321,3.720635,0.194755,-5.113339,-7.741359,3.998463,8.863206,3.657337,5.242259,-3.355302,0.573706,4.970506,7.732657,-7.473725,-0.589058,8.476621,-5.358796,7.148501,4.877741,6.747797,-8.828801,-9.247579,-7.762382,3.749729,6.701401,-4.193903,-3.395995,-3.251067,0.378705,2.713977,1.447513,7.108634,9.960155,-4.643362,-5.313309,-2.939269,-2.383583,5.948497,9.711182,2.689892,-1.746002,1.865845,6.178052,1.709108,-4.386020,-0.216939,0.080811,5.680579,-9.588042,-3.933412,9.989704,-9.986367,7.485411,-8.729265,-8.123662,2.421079,6.303705,3.058179,6.033277,3.981059,6.162049,5.575892,-2.456878,1.532190,-9.680684,1.960126,-9.548964,-6.178024,3.919744,-2.339477,-1.080691,0.048009,-1.695553,-9.041196,7.241271,-4.289416,3.089449,4.333981,-2.127007,-3.097375,-5.840380,2.572850,0.359583,-4.472459,-2.950783,-0.174200,0.708201,2.931856,-4.951734,8.154010,5.871769,-2.569655,6.748118,-1.471015,-3.023765,1.727013,2.649552,-5.727751,-1.877826,4.834290,8.752216,6.490450,6.734854,9.687284,-8.292000,8.457533,-6.382979,-0.156007,-9.566051,9.338190,9.081433,6.807427,6.720989,-9.105839,9.720317,8.155166,1.346728,0.044368,3.844184,7.783726,2.776394,8.531178,-1.959784,8.591627,3.114593,-5.962338,6.054518,3.061013,2.189083,-2.683145,2.299186,0.451774,-5.523080,-1.716712,3.113956,1.104330,-2.536507,-3.863968,-6.143308,2.387331,7.947082,5.714917,-1.248238,9.621676,-8.620330,-7.465065,7.402268,-7.069736,-8.333256,7.654018,-7.277451,-5.096554,-6.236390,-3.435236,-4.016077,-0.858266,6.602230,2.489969,-4.687916,6.098348,-5.922741,-4.229011,4.887426,-7.489493,8.965508,-7.119713,-3.936376,3.946071,5.522691,-2.458598,5.857811,2.066778,-4.063374,-6.774328,-0.075038,8.422389,8.422447,-9.825190,-1.938273,-8.401872,6.600980,-2.349938,1.881665,-0.481925,6.593566,6.278425,5.175828,7.104353,0.813840,-9.950777,7.593232,-2.249882,5.906373,6.772440,2.875263,-4.985887,-8.994776,5.290324,-1.042174,5.100454,-6.641840,-3.642357,3.401843,9.736537,-4.087733,-2.080188,2.347769,-5.127318,-6.749757,-4.881625,-1.115343,-7.417101,4.418092,-3.910156,4.779205,9.817416,-4.447698,9.677351,9.034030,-6.845727,-7.578419,2.926770,-1.009359,-9.259168,-1.615364,-4.045999,5.288653,3.395769,-1.185360,-5.873594,9.743971,5.877019,-6.207129,-8.006370,3.349071,5.580065,5.584763,0.458621,-1.970694,-2.274009,1.380167,3.135078,9.821457,6.201940,9.348021,1.784962,-0.392255,-0.918568,7.936101,-3.424926,-8.355928,-4.879151,7.180682,2.140359,-1.875798,-2.224841,-6.341896,-1.085278,-4.249366,-4.106186,-4.715114,2.670974,-0.861419,2.861341,-8.152549,8.772652,6.374198,-8.468197,7.361336,-3.937938,-0.571864,0.791790,2.940153,-1.369662,-9.986944,2.102697,7.213892,7.568301,-2.558509,7.565649,-3.656817,6.816862,0.932795,-2.804842,8.530852,-9.569214,1.130600,4.886249,7.887634,0.681778,-5.548367,-8.148940,0.030943,4.452121,-9.578981,-6.911195,0.522498,-1.323887,3.206765,-3.163401,-1.315452,-9.738896,-6.159441,-0.618422,-5.835304,8.927600,-2.677341,-2.045592,3.603159,0.086866,-1.458844,1.289627,-7.866515,-7.002840,-3.723800,-0.519410,1.611915,5.975191,-7.423398,-6.452731,2.232249,3.341809,4.999984,6.388463,-1.454004,1.582831,-7.687195,-7.169151,-1.333379,-0.481953,8.739420,6.411665,-1.651320,4.025956,-2.673710,9.997133,2.134056,5.628887,-1.363577,-7.077190,-4.117749,5.479940,-5.601715,0.943781,5.909617,6.198966,-6.735176,4.919040,7.952314,-2.449878,-1.070683,6.543811,-3.790958,6.015285,9.772061,8.416724,2.237500,-5.699502,9.760052,-3.887385,-5.540949,1.666655,8.024963,7.209483,0.280009,-4.736428,6.107093,-4.970011,2.563385,-0.965415,1.114016,-5.315902,-7.507175,-0.964228,-6.054733,-6.676892,-6.317355,6.716921,6.914713,6.534208,-0.481196,-3.698305,4.436646,-2.910546,-6.728277,-5.597864,-0.920294,-2.622658,1.490171,-9.513285,-2.659031,-8.021069,5.996851,-6.170273,-3.439382,3.622552,0.248599,-9.804291,-5.802441,4.887409,2.941827,-7.880268,-8.050163,5.089695,3.255329,3.991167,-9.906265,6.001264,-9.594724,-8.799923,5.129990,4.163563,-6.847208,4.991642,-3.769213,7.340816,-5.828828,-0.115173,5.637244,5.626476,7.402103,-3.773429,-4.481978,7.129081,8.384991,-0.967615,-9.330460,1.475687,4.479071,3.641050,-8.728249,-9.763553,7.916069,6.306875,-1.396558,3.780598,-2.242849,7.653694,1.469757,8.285271,0.830542,7.292438,6.001006,-1.114600,-3.409713,3.744062,-9.301295,9.666107,-4.106542,-0.101886,2.561201,-9.226755,7.708821,9.229851,7.108167,6.898612,-8.977360,-6.982802,-9.866325,-5.433174,-9.793760,7.773551,5.972308,-4.918740,5.980693,-2.135225,6.257034,-5.943172,4.290248,2.772831,-5.013699,7.121903,-3.433760,5.871369,-7.262510,2.385559,5.793214,8.777136,7.662873,-7.212159,4.946642,-6.005736,0.817844,8.452204,-5.016809,9.127385,-3.763376,6.744362,-9.415830,3.816068,-8.872285,-8.378140,1.582485,7.184386,0.932349,9.835146,-9.128218,4.432226,5.264865,-1.180688,-2.613073,-2.743611,-9.685512,8.756540,-7.108554,7.808839,2.416625,-6.135912,-0.617791,5.129173,0.783872,-2.992657,-5.038540,-3.458663,-8.641793,9.268756,-7.496889,8.650667,5.196890,-8.239278,1.974810,3.930664,4.653383,1.469895,1.476397,3.534040,-4.634791,-8.980181,-8.141087,-3.558008,-2.022766,9.018975,7.181018,8.060115,4.567407,3.643869,-3.207177,3.152554,-4.702297,9.266055,6.496020,9.656224,-0.151590,5.644687,-4.192861,6.826573,2.941795,9.842765,-5.228943,-4.323889,-3.345188,-0.790695,-6.757514,-1.573501,0.393995,-5.831122,8.052014,-7.369794,7.309251,-9.428862,8.247289,-7.567718,-6.860542,7.382789,9.046935,-2.345359,3.756098,-2.338275,-8.845226,9.465330,-9.100518,-4.041910,5.378822,0.434422,-9.696782,-5.959296,5.536818,6.257225,-0.512876,-9.717745,-5.179184,-8.464903,-3.718276,3.815655,6.612684,-7.241466,-4.846723,7.143060,7.282603,-3.475814,-6.788368,8.883830,-8.999413,4.240673,5.739355,-5.792908,-4.485550,-1.379583,2.057408,4.840652,-5.497860,-0.358085,2.845712,-4.920957,-5.170739,-6.753079,8.461469,-7.130918,-7.739376,-8.617959,-3.084890,3.285198,8.036981,8.078084,2.205253,-6.847278,-4.719141,-8.108311,-6.604167,-9.781040,-3.708650,-1.250089,-5.810329,6.288492,-3.430352,-5.302391,-1.830121,-5.547171,9.778142,-9.302514,-0.305577,-1.203577,4.574837,-1.191936,3.959850,-6.330792,-7.553136,4.252518,2.732989,5.204909,6.443327,-1.690825,-5.638510,9.415448,-0.703153,-8.827249,-6.524240,4.697411,-1.874203,-3.614666,-8.879191,0.456132,8.156319,2.583440,2.133705,-3.665936,2.694246,-5.435528,5.196562,2.266904,4.781461,4.842295,7.379907,8.732671,-9.849951,3.231681,-6.610638,2.164748,-1.177389,-7.366358,-9.776598,-5.016519,-7.353929,2.918082,-3.053350,8.453316,-8.299554,-9.575014,-4.301460,3.520225,9.588814,6.254308,1.839133,5.184319,-3.033842,1.966089,-8.339181,-5.235227,-4.746411,8.145746,-2.449660,-9.207114,5.716642,-3.095006,-2.341956,-5.758064,1.559440,2.447927,0.295115,-8.567535,0.773526,-6.124509,0.565091,-3.780358,-3.279691,-0.552464,-1.699497,8.914696,6.427679,2.881341,-7.449538,7.922745,-9.555249,-0.110698,2.178021,4.447146,0.733375,5.203943,-2.972300,-0.588574,5.333104,2.537455,-8.720749,3.040431,0.367550,7.207374,-4.552535,3.157440,-9.606004,-2.515107,-6.879241,-8.966559,4.553358,-4.182603,9.479991,-3.918700,8.521107,-1.212193,6.511243,-2.490538,7.910802,-5.480633,-2.344758,-2.181046,0.657129,7.842464,-0.832195,4.155116,6.783824,7.047129,5.850269,3.746992,1.393685,-0.378342,8.082651,7.941365,-1.888169,-4.062924,3.672845,8.810861,-3.114374,-3.797336,-2.136332,-8.496792,1.480526,-8.215960,-5.116977,-2.883548,-2.514814,-7.623382,6.274874,-9.008621,2.953534,-7.582211,3.753626,4.289024,-8.694220,-3.910377,-5.175373,-2.738238,-1.374405,-2.669306,-9.340535,-1.913720,8.541097,-9.648655,1.128195,-8.839409,-2.051055,5.765488,3.153852,7.086260,2.079190,-7.510676,-9.831525,0.019564,-1.317550,7.089974,-9.353331,8.680548,-6.642523,-6.593163,-8.509980,-3.864525,-3.873552,-9.504421,4.433852,0.520111,6.103379,-7.805733,2.480013,-9.725743,7.545665,-3.029156,5.560702,2.308132,-7.998422,2.656318,-9.272387,1.446057,-7.350333,-5.050835,4.634158,-7.988216,-2.806265,-5.699541,-3.758995,0.892738,0.948323,-1.799281,8.249779,-8.851141,8.874763,-2.383232,-6.215713,-3.753319,5.638492,-7.688707,6.368766,7.388492,5.347220,2.010367,-7.423311,8.691341,-9.699655,-7.532131,3.104124,6.409295,2.534516,-0.335021,7.509715,-9.033897,-3.009603,3.453142,8.670592,1.769693,5.593920,-3.775110,4.664881,7.170441,6.968523,0.281146,-8.979786,-8.663473,-4.540490,8.484189,8.642984,-2.281742,-5.766567,4.332829,-5.943182,-6.989171,5.847200,3.718853,-7.084229,9.663567,-4.743467,-6.836565,3.219151,-4.299228,-7.951696,-2.788572,9.876800,8.602735,-5.068635,3.822820,2.446053,-9.158201,9.784022,3.224813,-7.176494,1.805393,5.139771,-9.073244,-7.476256,-9.510685,-9.798318,5.983188,0.620958,-9.824973,4.286720,-1.126534,2.938370,-9.772736,-0.607797,8.733883,-1.574379,8.797688,-4.189311,-6.612232,7.067634,5.869625,3.512615,5.266786,2.748916,1.359672,-7.874792,1.746181,-3.534025,-8.078165,7.330904,-9.629548,-2.086265,0.040908,8.541169,-5.931607,-8.522103,-7.733344,-6.201699,-2.024701,6.969141,-4.439462,3.053227,-1.057119,5.458818,-7.635719,-4.363086,-3.152533,1.458542,7.497253,-3.178812,0.825878,-3.761453,-1.194921,3.322263,-5.288777,-2.968490,-2.005816,1.223548,-0.063253,4.378855,4.055829,6.785988,5.937429,-2.434477,0.792556,-4.481472,5.103896,-8.642104,0.188744,1.643986,7.222931,-7.893715,8.034025,-8.307255,6.345729,4.922916,8.667442,-1.003303,1.258906,4.848320,6.479336,5.906961,-4.483742,3.756356,8.648721,-6.608088,-0.852736,8.551021,-3.124270,6.359393,2.959715,-5.207788,1.904720,1.701065,8.809041,5.923980,-3.020934,-7.512297,2.620687,-1.654311,-0.399074,9.978845,-4.154995,-5.315279,-8.835650,-5.284311,-5.468646,-9.933845,9.385730,-8.733137,-9.407772,-2.397718,-7.647588,-3.868816,-9.739765,6.575205,5.561216,5.689399,6.614731,-1.583012,-1.229821,0.924223,9.826202,-3.529051,-2.664034,-0.653435,9.796128,1.312748,6.295951,6.696499,8.459256,-6.512262,6.422656,-6.343007,1.493600,-6.789295,9.989285,9.553883,8.948237,7.950859,-3.418440,-3.386440,-0.751437,-4.833620,0.904209,3.289238,-8.807024,6.338756,-4.330630,-1.775797,-9.046297,3.728393,-8.716995,9.057673,-9.875747,7.475118,-4.459469,-3.864727,-4.673181,-5.103755,-1.223305,-4.588959,0.199706,-2.285868,7.284637,1.634178,8.713903,0.546316,2.258216,2.862128,3.140957,1.550599,1.714330,3.599926,-1.468680,3.743788,9.383760,9.250944,-3.829908,-9.434240,-1.663286,2.207167,-1.735318,7.678410,2.240097,-3.925044,-7.965273,-6.954310,2.669936,1.868524,9.962449,9.382254,-8.964859,6.362480,-9.075586,-9.389410,-2.641550,6.691293,-1.834621,-6.058073,0.969681,-7.579422,-4.490125,0.289863,-0.432980,8.174443,-3.710598,4.286240,0.878949,5.990702,-2.841568,-9.326737,0.743276,-9.617576,5.201701,-2.701480,7.280566,-0.906246,9.315967,7.122610,-5.613939,-4.500015,5.239348,0.013707,-9.653043,8.193291,-1.157234,8.662164,0.478776,3.468374,0.187767,0.332220,-0.365854,-6.690677,-6.342555,-2.236284,7.854516,9.442968,-8.762205,5.115326,3.249135,7.250995,0.166552,4.570080,-5.944213,7.501321,-5.624525,-9.344785,-2.214946,8.097294,6.312830,3.496302,-1.438221,6.074633,1.619500,9.587846,6.074114,-3.098954,-1.993122,9.630976,-0.599802,-3.130758,-6.298858,7.880170,4.854031,1.988856,-3.661783,9.760385,9.464571,8.228356,-2.833052,3.707669,-5.714023,-0.196988,1.785657,5.687151,-6.104775,9.445169,9.698561,7.693373,7.768024,3.328615,3.126394,-4.448042,9.569346,6.007637,-4.020679,-9.973280,-5.946144,3.786786,-3.690119,0.541911,-5.699039,6.966523,0.221547,5.493289,3.968993,0.105301,1.246144,0.231490,1.851361,-6.254584,9.425295,-6.526498,8.303188,-7.403329,2.005495,-4.085180,-9.389602,4.729672,-2.584582,-8.008394,1.029226,-9.238269,6.899300,3.507915,-3.224025,-1.673024,-7.695207,9.486422,5.759219,-3.830881,0.169792,-2.949806,-7.942022,-8.303153,-8.769059,9.148281,-0.672014,7.035992,9.485416,-6.931438,-8.551532,-4.499039,-0.146765,0.919190,7.409847,-7.911854,-8.598829,-7.808001,-5.430662,-1.050654,3.629167,-1.639802,4.241617,9.794362,-3.185883,3.335349,-6.256307,-3.781569,9.003338,-6.410404,0.200672,-5.312809,-0.068590,-8.016304,0.354077,9.367574,-7.802111,-6.511133,0.752439,8.677316,1.326781,9.052409,-7.777859,-9.207922,9.427904,-9.417564,0.126721,-9.149406,5.999871,-1.380847,9.216346,3.625088,1.845538,-9.790170,9.717177,9.914342,-4.102564,-8.934520,-4.496733,-7.859565,-4.576910,-7.225459,1.187721,2.428676,7.169959,0.041468,8.322055,2.154527,-3.121009,-9.026042,3.834428,9.454157,-5.792100,-6.072378,-5.103696,-8.507014,5.302866,8.635053,5.773304,8.614061,-2.727295,-1.120160,1.102011,5.395938,1.281675,3.739750,9.955822,-1.403358,-2.393519,-7.098088,0.960930,5.747817,5.936958,-3.148171,8.488251,0.984833,-3.497235,-1.448162,3.867117,-1.391196,9.701560,3.518119,-4.056188,-5.157422,-5.698426,3.401164,9.950513,-8.259964,5.634676,1.551547,-3.550684,4.716516,-7.882453,-7.523732,1.605830,-1.654824,-7.843798,3.765908,5.394480,-1.116350,-9.745945,-5.823531,-4.526100,-9.478923,3.682968,1.102027,-8.280712,-6.612270,-1.831663,7.789689,9.576773,-2.413446,8.209745,-0.591583,0.178137,9.584219,2.813524,0.413722,-8.519905,0.521519,3.802661,-7.282865,3.527430,0.065511,4.553678,7.099486,-5.499908,9.457925,2.600866,1.893968,-3.608844,-4.771054,-2.258947,8.566081,1.371997,-3.162168,8.383260,8.320738,5.463362,-9.556257,0.758000,-8.666997,7.680624,6.725081,8.714843,3.713475,8.466069,6.635390,7.314712,0.861381,-3.952207,-8.510739,-4.364636,-7.559913,-3.270725,-1.304876,2.423778,5.108975,-7.859868,7.219046,4.172949,9.229303,5.770917,-7.731277,-4.187765,2.616333,0.203441,-5.781812,9.656721,-3.578580,-9.720884,0.731419,3.669131,-6.856292,-5.686752,6.793087,1.214910,-1.121614,-6.681032,8.227871,-2.163414,3.512045,-1.552717,3.651384,-8.092756,0.222426,1.983877,-3.228200,-6.447433,-1.937092,0.694533,-1.747600,7.548455,0.039847,-5.133221,-7.038610,1.765548,-6.723058,5.339534,-9.974455,5.904798,-1.015494,-0.463916,2.548337,-2.595705,9.479237,-5.757377,-8.903199,0.877161,1.035026,-6.635784,-8.732670,5.494877,-7.525537,0.521361,-3.794930,-2.697574,0.097637,-0.474967,1.406515,-7.536575,-8.808612,7.795407,-1.418408,-4.717752,-0.620861,4.499839,-3.079756,1.231735,-9.563154,1.205858,-6.531785,5.809211,6.151723,-7.724998,-6.561003,9.726342,7.736870,1.722276,4.155528,6.688355,2.163106,6.371306,3.736134,-7.084159,7.455998,9.973873,2.178959,7.045762,-9.147247,-6.218403,-4.067115,9.113095,-2.609514,-9.817026,-2.131860,6.150809,-0.958034,7.352658,0.469434,2.870568,-4.671428,-8.099773,-7.193146,-0.003159,-9.890003,4.554231,-5.432886,-9.438321,-8.292561,0.092134,6.215241,-5.868034,3.384682,2.839899,7.614954,0.377607,0.663362,7.294294,1.735636,-5.387497,-9.505383,-3.130797,-1.333754,4.922303,5.664448,5.549247,8.802189,6.823614,-1.559118,-3.452896,6.684039,3.050045,1.729190,-4.637341,-2.935593,-2.466591,9.030927,0.915457,-0.077567,-0.317963,9.252517,-4.574659,8.157408,1.596298,-4.615268,5.783895,5.540500,1.555231,9.585447,2.384432,-9.232665,2.232922,1.436455,-6.743737,7.786628,3.711527,-7.826006,-0.853625,6.522044,9.242507,1.502887,-9.796983,8.972301,4.813916,1.287525,-4.252787,5.401206,9.585879,6.056863,-9.465208,-8.280702,7.304009,5.799632,-0.805957,-6.050327,-7.606994,-0.228499,-5.536379,-3.033301,0.342345,3.394023,-8.152224,5.457032,9.083740,6.153122,0.350151,9.990376,-3.237534,-5.369569,-7.098221,8.811310,-3.315355,2.843041,3.714932,9.320097,8.610020,3.708602,0.825432,-3.906763,8.575738,-7.312268,4.502306,0.943145,-9.613919,0.538543,-5.053011,8.270547,-7.035917,-2.893626,0.266545,-4.541651,-6.999554,-8.167898,-0.887034,-1.903128,-4.485329,6.803276,-5.826626,4.038657,-9.099157,5.109522,3.644772,-5.713112,1.802390,-3.199807,-8.066229,-9.561219,-1.604858,-3.451401,7.054813,-2.457059,5.262933,5.832903,-7.162867,-2.953265,8.528154,-8.921513,-0.401227,7.471734,0.781802,-8.471058,-0.556818,-9.477454,4.672650,-9.506840,7.289953,-1.383663,-9.847619,-9.358304,3.111133,2.165990,5.341087,3.157975,-2.715285,4.413916,-8.678999,9.773860,-4.990321,1.056257,-3.625311,-4.735662,-4.827014,-0.695502,1.017033,-9.090854,3.398138,0.024145,4.903516,4.891831,6.246200,2.815866,-3.232536,8.985974,-9.287214,9.875932,-9.948728,-4.040201,-0.232093,2.845078,9.933315,-3.155817,4.390174,1.581400,7.887275,7.249642,-7.943374,-5.722078,8.819728,1.106324,4.926180,3.875693,2.018138,-7.074975,-2.699013,9.903456,2.031142,4.343320,3.422364,4.868434,4.162097,-0.113631,9.908088,-6.272177,-6.785266,-0.358852,-0.702308,4.537774,7.746981,-9.648154,4.780815,-6.034622,4.174857,2.803901,-9.327927,2.719538,1.918070,1.740753,2.056652,-8.473405,-8.664794,6.372666,-3.821350,-0.300587,-2.067904,9.489791,-4.123289,1.491388,8.703592,-7.121345,9.089833,2.527897,6.675024,-2.931547,6.069501,-2.795720,8.088777,-8.136724,-4.756030,-2.179862,5.172509,-0.094751,8.098490,-3.852114,7.160974,-0.340969,-4.287211,6.471558,3.459263,-0.038898,-1.158949,-0.242522,-5.604016,2.594635,5.921243,-6.234793,-3.287922,-9.354254,-4.601784,-4.930920,8.383598,-3.738083,9.120321,-3.123245,6.537920,3.595151,5.677266,-3.402055,-6.574687,4.137173,3.023806,3.389033,-9.787959,4.455760,-0.035370,-7.400143,-1.048132,3.414816,0.110135,-4.464351,7.940539,-8.005182,8.049880,-6.714388,5.523235,7.041975,9.623357,-9.638053,-4.463654,-2.794297,5.174468,7.896970,-4.519158,7.089612,-5.268757,-8.204181,7.215659,-2.006327,9.770494,2.813958,-4.687906,9.114694,8.681856,-3.201111,8.298680,-4.028667,8.791913,7.656741,-9.833368,4.245947,-0.194602,-7.470318,8.448516,4.668911,-9.032442,0.782941,5.575729,-6.294858,-0.166165,8.980093,-6.152488,-8.749037,5.050045,4.961180,6.240471,-4.001780,-0.909614,5.029525,0.691069,4.290725,5.871517,1.484855,9.096937,3.443318,-1.320953,-2.692008,-3.385683,-4.839995,-2.592950,-1.966108,5.079995,2.671429,1.844212,3.363291,8.336531,-9.907376,0.337592,-4.346734,-4.503046,-6.461605,-8.837759,1.564576,5.627826,-8.268832,0.085332,2.123622,8.333448,-4.646615,-2.805194,8.786974,-6.489735,-2.939993,3.918846,8.134987,9.990096,-5.430328,-7.475749,-2.245928,-4.983634,4.248378,3.123574,-1.826453,5.128727,-7.074531,-1.301119,-8.512811,2.978533,-4.295266,1.680092,-4.584011,7.069816,-1.021511,-8.717409,6.727870,4.302893,-8.051084,-5.403589,7.491117,-8.132927,6.173841,6.746709,1.022247,-2.368091,-5.195188,8.245965], dtype = "float64")#candidate|16945|(2028,)|const|float64
call_16944 = relay.TupleGetItem(func_9933_call(relay.reshape(const_16945.astype('float64'), [2028,])), 0)
call_16946 = relay.TupleGetItem(func_9936_call(relay.reshape(const_16945.astype('float64'), [2028,])), 0)
func_4351_call = mod.get_global_var('func_4351')
func_4353_call = mutated_mod.get_global_var('func_4353')
call_16956 = relay.TupleGetItem(func_4351_call(), 2)
call_16957 = relay.TupleGetItem(func_4353_call(), 2)
output = relay.Tuple([call_16940,call_16942,call_16944,const_16945,call_16956,])
output2 = relay.Tuple([call_16941,call_16943,call_16946,const_16945,call_16957,])
func_16959 = relay.Function([], output)
mod['func_16959'] = func_16959
mod = relay.transform.InferType()(mod)
output = func_16959()
func_16960 = relay.Function([], output)
mutated_mod['func_16960'] = func_16960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13868_call = mod.get_global_var('func_13868')
func_13870_call = mutated_mod.get_global_var('func_13870')
call_16971 = func_13868_call()
call_16972 = func_13868_call()
output = relay.Tuple([call_16971,])
output2 = relay.Tuple([call_16972,])
func_17019 = relay.Function([], output)
mod['func_17019'] = func_17019
mod = relay.transform.InferType()(mod)
output = func_17019()
func_17020 = relay.Function([], output)
mutated_mod['func_17020'] = func_17020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16026_call = mod.get_global_var('func_16026')
func_16027_call = mutated_mod.get_global_var('func_16027')
call_17047 = relay.TupleGetItem(func_16026_call(), 0)
call_17048 = relay.TupleGetItem(func_16027_call(), 0)
func_9820_call = mod.get_global_var('func_9820')
func_9821_call = mutated_mod.get_global_var('func_9821')
call_17064 = relay.TupleGetItem(func_9820_call(), 1)
call_17065 = relay.TupleGetItem(func_9821_call(), 1)
var_17068 = relay.var("var_17068", dtype = "bool", shape = (13, 13, 7))#candidate|17068|(13, 13, 7)|var|bool
bop_17069 = relay.not_equal(call_17047.astype('bool'), var_17068.astype('bool')) # shape=(13, 13, 7)
bop_17072 = relay.not_equal(call_17048.astype('bool'), var_17068.astype('bool')) # shape=(13, 13, 7)
func_1759_call = mod.get_global_var('func_1759')
func_1761_call = mutated_mod.get_global_var('func_1761')
call_17081 = relay.TupleGetItem(func_1759_call(), 3)
call_17082 = relay.TupleGetItem(func_1761_call(), 3)
func_4381_call = mod.get_global_var('func_4381')
func_4383_call = mutated_mod.get_global_var('func_4383')
call_17085 = relay.TupleGetItem(func_4381_call(), 0)
call_17086 = relay.TupleGetItem(func_4383_call(), 0)
func_16920_call = mod.get_global_var('func_16920')
func_16922_call = mutated_mod.get_global_var('func_16922')
call_17098 = relay.TupleGetItem(func_16920_call(), 0)
call_17099 = relay.TupleGetItem(func_16922_call(), 0)
uop_17100 = relay.atan(var_17068.astype('float32')) # shape=(13, 13, 7)
output = relay.Tuple([call_17064,bop_17069,call_17081,call_17085,call_17098,uop_17100,])
output2 = relay.Tuple([call_17065,bop_17072,call_17082,call_17086,call_17099,uop_17100,])
func_17104 = relay.Function([var_17068,], output)
mod['func_17104'] = func_17104
mod = relay.transform.InferType()(mod)
mutated_mod['func_17104'] = func_17104
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17105 = relay.var("var_17105", dtype = "bool", shape = (13, 13, 7))#candidate|17105|(13, 13, 7)|var|bool
func_17104_call = mutated_mod.get_global_var('func_17104')
call_17106 = func_17104_call(var_17105)
output = call_17106
func_17107 = relay.Function([var_17105], output)
mutated_mod['func_17107'] = func_17107
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17151 = relay.var("var_17151", dtype = "float64", shape = (1, 6, 6))#candidate|17151|(1, 6, 6)|var|float64
var_17152 = relay.var("var_17152", dtype = "float64", shape = (10, 6, 6))#candidate|17152|(10, 6, 6)|var|float64
bop_17153 = relay.not_equal(var_17151.astype('bool'), var_17152.astype('bool')) # shape=(10, 6, 6)
uop_17187 = relay.log10(var_17152.astype('float32')) # shape=(10, 6, 6)
func_3967_call = mod.get_global_var('func_3967')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_17194 = relay.TupleGetItem(func_3967_call(), 0)
call_17195 = relay.TupleGetItem(func_3969_call(), 0)
output = relay.Tuple([bop_17153,uop_17187,call_17194,])
output2 = relay.Tuple([bop_17153,uop_17187,call_17195,])
func_17200 = relay.Function([var_17151,var_17152,], output)
mod['func_17200'] = func_17200
mod = relay.transform.InferType()(mod)
var_17201 = relay.var("var_17201", dtype = "float64", shape = (1, 6, 6))#candidate|17201|(1, 6, 6)|var|float64
var_17202 = relay.var("var_17202", dtype = "float64", shape = (10, 6, 6))#candidate|17202|(10, 6, 6)|var|float64
output = func_17200(var_17201,var_17202,)
func_17203 = relay.Function([var_17201,var_17202,], output)
mutated_mod['func_17203'] = func_17203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12535_call = mod.get_global_var('func_12535')
func_12537_call = mutated_mod.get_global_var('func_12537')
call_17227 = relay.TupleGetItem(func_12535_call(), 0)
call_17228 = relay.TupleGetItem(func_12537_call(), 0)
func_12199_call = mod.get_global_var('func_12199')
func_12201_call = mutated_mod.get_global_var('func_12201')
call_17240 = func_12199_call()
call_17241 = func_12199_call()
output = relay.Tuple([call_17227,call_17240,])
output2 = relay.Tuple([call_17228,call_17241,])
func_17243 = relay.Function([], output)
mod['func_17243'] = func_17243
mod = relay.transform.InferType()(mod)
mutated_mod['func_17243'] = func_17243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17243_call = mutated_mod.get_global_var('func_17243')
call_17244 = func_17243_call()
output = call_17244
func_17245 = relay.Function([], output)
mutated_mod['func_17245'] = func_17245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16959_call = mod.get_global_var('func_16959')
func_16960_call = mutated_mod.get_global_var('func_16960')
call_17254 = relay.TupleGetItem(func_16959_call(), 4)
call_17255 = relay.TupleGetItem(func_16960_call(), 4)
uop_17265 = relay.rsqrt(call_17254.astype('float64')) # shape=(13, 13, 10)
uop_17267 = relay.rsqrt(call_17255.astype('float64')) # shape=(13, 13, 10)
output = uop_17265
output2 = uop_17267
func_17270 = relay.Function([], output)
mod['func_17270'] = func_17270
mod = relay.transform.InferType()(mod)
mutated_mod['func_17270'] = func_17270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17270_call = mutated_mod.get_global_var('func_17270')
call_17271 = func_17270_call()
output = call_17271
func_17272 = relay.Function([], output)
mutated_mod['func_17272'] = func_17272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10054_call = mod.get_global_var('func_10054')
func_10056_call = mutated_mod.get_global_var('func_10056')
call_17293 = relay.TupleGetItem(func_10054_call(), 2)
call_17294 = relay.TupleGetItem(func_10056_call(), 2)
output = relay.Tuple([call_17293,])
output2 = relay.Tuple([call_17294,])
func_17295 = relay.Function([], output)
mod['func_17295'] = func_17295
mod = relay.transform.InferType()(mod)
output = func_17295()
func_17296 = relay.Function([], output)
mutated_mod['func_17296'] = func_17296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13835_call = mod.get_global_var('func_13835')
func_13837_call = mutated_mod.get_global_var('func_13837')
call_17297 = relay.TupleGetItem(func_13835_call(), 0)
call_17298 = relay.TupleGetItem(func_13837_call(), 0)
output = relay.Tuple([call_17297,])
output2 = relay.Tuple([call_17298,])
func_17325 = relay.Function([], output)
mod['func_17325'] = func_17325
mod = relay.transform.InferType()(mod)
output = func_17325()
func_17326 = relay.Function([], output)
mutated_mod['func_17326'] = func_17326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_17327 = relay.TupleGetItem(func_1247_call(), 0)
call_17328 = relay.TupleGetItem(func_1248_call(), 0)
output = call_17327
output2 = call_17328
func_17330 = relay.Function([], output)
mod['func_17330'] = func_17330
mod = relay.transform.InferType()(mod)
mutated_mod['func_17330'] = func_17330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17330_call = mutated_mod.get_global_var('func_17330')
call_17331 = func_17330_call()
output = call_17331
func_17332 = relay.Function([], output)
mutated_mod['func_17332'] = func_17332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14884_call = mod.get_global_var('func_14884')
func_14885_call = mutated_mod.get_global_var('func_14885')
call_17333 = relay.TupleGetItem(func_14884_call(), 1)
call_17334 = relay.TupleGetItem(func_14885_call(), 1)
output = relay.Tuple([call_17333,])
output2 = relay.Tuple([call_17334,])
func_17343 = relay.Function([], output)
mod['func_17343'] = func_17343
mod = relay.transform.InferType()(mod)
mutated_mod['func_17343'] = func_17343
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17343_call = mutated_mod.get_global_var('func_17343')
call_17344 = func_17343_call()
output = call_17344
func_17345 = relay.Function([], output)
mutated_mod['func_17345'] = func_17345
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6096_call = mod.get_global_var('func_6096')
func_6097_call = mutated_mod.get_global_var('func_6097')
call_17361 = relay.TupleGetItem(func_6096_call(), 0)
call_17362 = relay.TupleGetItem(func_6097_call(), 0)
output = relay.Tuple([call_17361,])
output2 = relay.Tuple([call_17362,])
func_17368 = relay.Function([], output)
mod['func_17368'] = func_17368
mod = relay.transform.InferType()(mod)
output = func_17368()
func_17369 = relay.Function([], output)
mutated_mod['func_17369'] = func_17369
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16387_call = mod.get_global_var('func_16387')
func_16389_call = mutated_mod.get_global_var('func_16389')
call_17383 = relay.TupleGetItem(func_16387_call(), 0)
call_17384 = relay.TupleGetItem(func_16389_call(), 0)
output = call_17383
output2 = call_17384
func_17388 = relay.Function([], output)
mod['func_17388'] = func_17388
mod = relay.transform.InferType()(mod)
output = func_17388()
func_17389 = relay.Function([], output)
mutated_mod['func_17389'] = func_17389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14726_call = mod.get_global_var('func_14726')
func_14727_call = mutated_mod.get_global_var('func_14727')
call_17393 = relay.TupleGetItem(func_14726_call(), 1)
call_17394 = relay.TupleGetItem(func_14727_call(), 1)
output = call_17393
output2 = call_17394
func_17408 = relay.Function([], output)
mod['func_17408'] = func_17408
mod = relay.transform.InferType()(mod)
output = func_17408()
func_17409 = relay.Function([], output)
mutated_mod['func_17409'] = func_17409
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6034_call = mod.get_global_var('func_6034')
func_6035_call = mutated_mod.get_global_var('func_6035')
call_17467 = relay.TupleGetItem(func_6034_call(), 2)
call_17468 = relay.TupleGetItem(func_6035_call(), 2)
output = call_17467
output2 = call_17468
func_17482 = relay.Function([], output)
mod['func_17482'] = func_17482
mod = relay.transform.InferType()(mod)
mutated_mod['func_17482'] = func_17482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17482_call = mutated_mod.get_global_var('func_17482')
call_17483 = func_17482_call()
output = call_17483
func_17484 = relay.Function([], output)
mutated_mod['func_17484'] = func_17484
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15987_call = mod.get_global_var('func_15987')
func_15989_call = mutated_mod.get_global_var('func_15989')
call_17563 = func_15987_call()
call_17564 = func_15987_call()
output = call_17563
output2 = call_17564
func_17578 = relay.Function([], output)
mod['func_17578'] = func_17578
mod = relay.transform.InferType()(mod)
mutated_mod['func_17578'] = func_17578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17578_call = mutated_mod.get_global_var('func_17578')
call_17579 = func_17578_call()
output = call_17579
func_17580 = relay.Function([], output)
mutated_mod['func_17580'] = func_17580
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9997_call = mod.get_global_var('func_9997')
func_9999_call = mutated_mod.get_global_var('func_9999')
call_17636 = func_9997_call()
call_17637 = func_9997_call()
func_17295_call = mod.get_global_var('func_17295')
func_17296_call = mutated_mod.get_global_var('func_17296')
call_17662 = relay.TupleGetItem(func_17295_call(), 0)
call_17663 = relay.TupleGetItem(func_17296_call(), 0)
func_8503_call = mod.get_global_var('func_8503')
func_8505_call = mutated_mod.get_global_var('func_8505')
call_17671 = relay.TupleGetItem(func_8503_call(), 0)
call_17672 = relay.TupleGetItem(func_8505_call(), 0)
func_2985_call = mod.get_global_var('func_2985')
func_2987_call = mutated_mod.get_global_var('func_2987')
call_17679 = relay.TupleGetItem(func_2985_call(), 1)
call_17680 = relay.TupleGetItem(func_2987_call(), 1)
bop_17684 = relay.bitwise_xor(call_17662.astype('int16'), call_17636.astype('int16')) # shape=(13, 13, 1690)
bop_17687 = relay.bitwise_xor(call_17663.astype('int16'), call_17637.astype('int16')) # shape=(13, 13, 1690)
output = relay.Tuple([call_17671,call_17679,bop_17684,])
output2 = relay.Tuple([call_17672,call_17680,bop_17687,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
