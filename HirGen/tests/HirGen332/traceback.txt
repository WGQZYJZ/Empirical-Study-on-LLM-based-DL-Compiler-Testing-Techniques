==========mod==========
#[version = "0.0.5"]
def @func_3218() -> Tensor[(12, 5, 3), float64] {
  %0 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %0.0
}

def @func_5231() -> (Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
  %1 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %3 = reshape(%2, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %5 = reshape(%4, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %6 = @func_388(%5) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %7 = %1.0;
  %8 = @func_1804(%3) /* ty=Tensor[(5, 10, 8), float32] */;
  %9 = %6.0;
  (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(400), float32] */, %9, meta[relay.Constant][1] /* ty=Tensor[(640), float64] */)
}

def @func_3626(%var_3602: Tensor[(13, 1, 2), float64], %var_3603: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) {
  %10 = cast(%var_3602, dtype="float64") /* ty=Tensor[(13, 1, 2), float64] */;
  %11 = cast(%var_3603, dtype="float64") /* ty=Tensor[(13, 13, 2), float64] */;
  %12 = cast(%var_3603, dtype="float32") /* ty=Tensor[(13, 13, 2), float32] */;
  %13 = floor_mod(%10, %11) /* ty=Tensor[(13, 13, 2), float64] */;
  %14 = exp(%12) /* ty=Tensor[(13, 13, 2), float32] */;
  (%13, %14)
}

def @func_5870() -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), uint64], Tensor[(12, 5, 3), float32]) {
  %15 = @func_4706() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %16 = %15.0;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %18 = reshape(%17, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %19 = @func_2968(%18) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
  %20 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %21 = %19.1;
  %22 = %20.0;
  (%16, %21, %22)
}

def @func_6914(%var_6905: Tensor[(1100), uint32]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) {
  %23 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %24 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %25 = cast(%var_6905, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(693), uint8] */, dtype="uint8") /* ty=Tensor[(693), uint8] */;
  %27 = reshape(%24, newshape=[]) /* ty=uint32 */;
  %28 = reshape(%25, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %29 = reshape(%26, newshape=[7, 99]) /* ty=Tensor[(7, 99), uint8] */;
  %30 = @func_5425(%27, %28, %29) /* ty=(Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) */;
  %31 = cast(%var_6905, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %32 = %23.0;
  %33 = %30.8;
  %34 = tan(%31) /* ty=Tensor[(1100), float64] */;
  (%32, %33, meta[relay.Constant][2] /* ty=uint32 */, meta[relay.Constant][3] /* ty=Tensor[(693), uint8] */, %34)
}

def @func_3560() -> (Tensor[(12, 5, 3), float64],) {
  %35 = @func_3218() /* ty=Tensor[(12, 5, 3), float64] */;
  (%35,)
}

def @func_979(%var_952: Tensor[(7, 11, 8), float32], %var_953: Tensor[(7, 11, 8), float32]) -> (Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
  %36 = cast(%var_953, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %37 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_952, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %41 = reshape(%40, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %42 = @func_388(%41) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %44 = reshape(%43, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %45 = @func_388(%44) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %46 = mod(%38, %39) /* ty=Tensor[(7, 11, 8), float32] */;
  %47 = %42.0;
  %48 = %45.0;
  (%46, %47, meta[relay.Constant][4] /* ty=Tensor[(640), float64] */, %48)
}

def @func_3679(%var_3658: Tensor[(672), uint32], %var_3659: Tensor[(64), float64]) -> (Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) {
  %49 = cast(%var_3658, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %50 = cast(%var_3659, dtype="float64") /* ty=Tensor[(64), float64] */;
  %51 = reshape(%49, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint32] */;
  %52 = reshape(%50, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %53 = @func_2751(%51, %52) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) */;
  %54 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %55 = %54.2;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %57 = sinh(%56) /* ty=Tensor[(40, 12), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %59 = %53.4;
  %60 = asinh(%58) /* ty=Tensor[(40, 12), float32] */;
  (%59, %var_3658, %var_3659, %60)
}

def @func_6769() -> (Tensor[(12, 5, 3), float64],) {
  %61 = @func_5231() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %62 = %61.0;
  (%62,)
}

def @func_5551(%var_5549: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) {
  %63 = cast(%var_5549, dtype="float32") /* ty=Tensor[(616), float32] */;
  %64 = cast(%var_5549, dtype="float32") /* ty=Tensor[(616), float32] */;
  %65 = reshape(%63, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %66 = reshape(%64, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %67 = @func_979(%65, %66) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %68 = @func_4416() /* ty=Tensor[(12, 5, 3), float32] */;
  %69 = %67.3;
  (%68, %69, %var_5549)
}

def @func_6433() -> (Tensor[(64), float64],) {
  %70 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %71 = %70.3;
  (%71,)
}

def @func_1828(%var_1808: Tensor[(10, 14, 10), float64]) -> (Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) {
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %73 = shape_of(%var_1808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_1808, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
  %77 = reshape(%76, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
  %78 = @func_653(%77) /* ty=(Tensor[(1, 8, 2), float32],) */;
  %79 = minimum(%74, %75) /* ty=Tensor[(10, 14, 10), float64] */;
  %80 = %78.0;
  (%79, %80, meta[relay.Constant][6] /* ty=Tensor[(2, 8), float32] */)
}

def @func_6871() -> Tensor[(12, 5, 3), float64] {
  %81 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %81.0
}

def @func_4374() -> (Tensor[(12, 5, 3), float32],) {
  %82 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %83 = %82.0;
  (%83,)
}

def @func_5602(%var_5581: Tensor[(9, 1, 8), float64]) -> (Tensor[(10, 6, 11), uint32], Tensor[(660), uint32], Tensor[(9, ?, 8), uint64]) {
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %85 = reshape(%84, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint32] */;
  %86 = @func_5454(%85) /* ty=(Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) */;
  %87 = cast(%var_5581, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %88 = tan(%87) /* ty=Tensor[(9, 1, 8), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %90 = log(%89) /* ty=Tensor[(9, 1, 8), float32] */;
  %91 = cast(%88, dtype="uint64") /* ty=Tensor[(9, 1, 8), uint64] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="uint64") /* ty=Tensor[(9, 1, 8), uint64] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %95 = %86.0;
  %96 = multiply(%93, %94) /* ty=Tensor[(9, ?, 8), uint64] */;
  (%95, meta[relay.Constant][7] /* ty=Tensor[(660), uint32] */, %96)
}

def @func_3124() -> (Tensor[(12, 5, 3), float64],) {
  %97 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %100 = cosh(%99) /* ty=Tensor[(12, 5, 3), float64] */;
  (%100,)
}

def @func_3302(%var_3278: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
  %101 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %102 = %101.0;
  %103 = cast(%var_3278, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%105, %106) /* ty=Tensor[(12, 5, 3), int8] */
}

def @func_7344(%var_7341: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  %107 = cast(%var_7341, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %108 = atanh(%107) /* ty=Tensor[(9, 10, 10), float32] */;
  (%108,)
}

def @func_653(%var_647: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32],) {
  %109 = cast(%var_647, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %110 = sigmoid(%109) /* ty=Tensor[(1, 8, 2), float32] */;
  (%110,)
}

def @func_2093(%var_2064: Tensor[(14, 5, 15), uint16], %var_2065: Tensor[(14, 5, 15), uint16]) -> (Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) {
  %111 = cast(%var_2065, dtype="bool") /* ty=Tensor[(14, 5, 15), bool] */;
  %112 = shape_of(%var_2064, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_2064, dtype="bool") /* ty=Tensor[(14, 5, 15), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %117 = reshape(%115, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %118 = reshape(%116, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %119 = @func_222(%117, %118) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %120 = %119.1;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(105, 3), uint64] */, dtype="uint64") /* ty=Tensor[(105, 3), uint64] */;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(105, 3), uint64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(105, 3), uint64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %126 = reshape(%122, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), uint64] */;
  %127 = reshape(%123, newshape=[2, 320]) /* ty=Tensor[(2, 320), float64] */;
  %128 = reshape(%124, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float64] */;
  %129 = reshape(%125, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float64] */;
  %130 = @func_1232(%126, %127, %128, %129) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) */;
  %131 = not_equal(%113, %114) /* ty=Tensor[(14, 5, 15), bool] */;
  %132 = log10(%121) /* ty=Tensor[(8, 4, 2), float32] */;
  %133 = %130.6;
  (%131, meta[relay.Constant][8] /* ty=Tensor[(4, 16), float64] */, %132, %133, meta[relay.Constant][9] /* ty=Tensor[(105, 3), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(640), float64] */)
}

def @func_7169(%var_7133: Tensor[(546), float32], %var_7147: Tensor[(64), float64], %var_7162: Tensor[(13, 6, 7), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(900), bool], Tensor[(96), float64], Tensor[(546), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(13, 6, 7), int64]) {
  %134 = cast(meta[relay.Constant][11] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %136 = reshape(%134, newshape=[10, 10, 9]) /* ty=Tensor[(10, 10, 9), bool] */;
  %137 = reshape(%135, newshape=[2, 48]) /* ty=Tensor[(2, 48), float64] */;
  %138 = @func_6102(%136, %137) /* ty=(Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) */;
  %139 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %142 = cast(%var_7147, dtype="float64") /* ty=Tensor[(64), float64] */;
  %143 = reshape(%142, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %144 = @func_5710(%143) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) */;
  %145 = cast(%var_7133, dtype="float32") /* ty=Tensor[(546), float32] */;
  %146 = cast(%var_7133, dtype="float32") /* ty=Tensor[(546), float32] */;
  %147 = reshape(%145, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
  %148 = reshape(%146, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
  %149 = @func_1934(%147, %148) /* ty=(Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) */;
  %150 = %149.1;
  %151 = cast(%var_7162, dtype="int64") /* ty=Tensor[(13, 6, 7), int64] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="int64") /* ty=Tensor[(13, 6, 7), int64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %155 = %138.1;
  %156 = exp(%141) /* ty=Tensor[(12, 5, 3), float64] */;
  %157 = %144.1;
  %158 = logical_xor(%153, %154) /* ty=Tensor[(13, 6, 7), int64] */;
  (%155, meta[relay.Constant][11] /* ty=Tensor[(900), bool] */, meta[relay.Constant][12] /* ty=Tensor[(96), float64] */, %var_7133, %156, %157, %var_7147, %158)
}

def @func_5259() -> (Tensor[(12, 5, 3), float64], Tensor[(8, 12, 5), float32]) {
  %159 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %160 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %161 = %159.0;
  %162 = %160.0;
  (%161, %162)
}

def @func_4213() -> (Tensor[(12, 5, 3), float32],) {
  %163 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %164 = %163.0;
  (%164,)
}

def @func_5017(%var_4972: Tensor[(12, 5, 3), float32], %var_5010: Tensor[(5, 10, 8), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(400), float32], Tensor[(5, 10, 8), float32]) {
  %165 = @func_4213() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %166 = %165.0;
  %167 = cast(%var_4972, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %172 = reshape(%171, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
  %173 = @func_1804(%172) /* ty=Tensor[(5, 10, 8), float32] */;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(5, 10, 8), float64] */;
  %175 = log2(%174) /* ty=Tensor[(5, 10, 8), float64] */;
  %176 = cast(%var_5010, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %180 = logical_and(%169, %170) /* ty=Tensor[(12, 5, 3), bool] */;
  %181 = mod(%178, %179) /* ty=Tensor[(5, 10, 8), float32] */;
  (%180, meta[relay.Constant][13] /* ty=Tensor[(400), float32] */, %181)
}

def @func_4033(%var_4026: Tensor[(5, 3, 1), int32], %var_4027: Tensor[(5, 3, 14), int32]) -> Tensor[(5, 3, 14), int32] {
  %182 = cast(%var_4026, dtype="int32") /* ty=Tensor[(5, 3, 1), int32] */;
  %183 = cast(%var_4027, dtype="int32") /* ty=Tensor[(5, 3, 14), int32] */;
  minimum(%182, %183) /* ty=Tensor[(5, 3, 14), int32] */
}

def @func_5092() -> Tensor[(12, 5, 3), float32] {
  %184 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %184.0
}

def @func_4960(%var_4938: Tensor[(640), float64], %var_4940: Tensor[(8, 16, 5), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
  %185 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %186 = cast(%var_4938, dtype="float64") /* ty=Tensor[(640), float64] */;
  %187 = reshape(%186, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %188 = @func_3150(%187) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %189 = %188.6;
  %190 = cast(%var_4940, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %194 = %185.0;
  %195 = divide(%192, %193) /* ty=Tensor[(8, 16, 5), float64] */;
  (%194, %var_4938, %195)
}

def @func_7469(%var_7465: Tensor[(315), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float64], Tensor[(9, 3, 8), float64], Tensor[(70, 15), uint16], Tensor[(315), float32]) {
  %196 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %197 = @func_5579() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %198 = %196.0;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %200 = cast(meta[relay.Constant][14] /* ty=Tensor[(70, 15), uint16] */, dtype="uint16") /* ty=Tensor[(70, 15), uint16] */;
  %201 = cast(%var_7465, dtype="float32") /* ty=Tensor[(315), float32] */;
  %202 = reshape(%199, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %203 = reshape(%200, newshape=[1050]) /* ty=Tensor[(1050), uint16] */;
  %204 = reshape(%201, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %205 = @func_7097(%202, %203, %204) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) */;
  %206 = %197.0;
  %207 = %205.12;
  (%198, %206, %207, meta[relay.Constant][14] /* ty=Tensor[(70, 15), uint16] */, %var_7465)
}

def @func_1934(%var_1919: Tensor[(13, 6, 7), float32], %var_1920: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) {
  %208 = cast(%var_1920, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %209 = shape_of(%var_1919, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_1919, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %212 = cast(%var_1919, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %213 = mod(%210, %211) /* ty=Tensor[(13, 6, 7), float32] */;
  %214 = sqrt(%212) /* ty=Tensor[(13, 6, 7), float32] */;
  (%213, %214)
}

def @func_4019(%var_3993: Tensor[(4, 16, 14), int16], %var_3994: Tensor[(4, 16, 14), int16], %var_4004: Tensor[(180), float32]) -> (Tensor[(4, 16, 14), bool], Tensor[(12, 5, 3), int64], Tensor[(180), float32]) {
  %215 = cast(%var_3994, dtype="bool") /* ty=Tensor[(4, 16, 14), bool] */;
  %216 = shape_of(%var_3993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_3993, dtype="bool") /* ty=Tensor[(4, 16, 14), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = cast(%var_4004, dtype="float32") /* ty=Tensor[(180), float32] */;
  %220 = reshape(%219, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %221 = @func_2968(%220) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
  %222 = less(%217, %218) /* ty=Tensor[(4, 16, 14), bool] */;
  %223 = %221.0;
  (%222, %223, %var_4004)
}

def @func_3978() -> (Tensor[(12, 5, 3), float64],) {
  %224 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %225 = %224.0;
  (%225,)
}

def @func_5425(%var_5375: uint32, %var_5376: Tensor[(11, 10, 10), uint32], %var_5421: Tensor[(7, 99), uint8]) -> (Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) {
  %226 = cast(%var_5375, dtype="uint32") /* ty=uint32 */;
  %227 = cast(%var_5376, dtype="uint32") /* ty=Tensor[(11, 10, 10), uint32] */;
  %228 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %229 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %230 = cast(%var_5376, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %231 = rsqrt(%230) /* ty=Tensor[(11, 10, 10), float32] */;
  %232 = cast(%var_5376, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = cast(%var_5375, dtype="int64") /* ty=int64 */;
  %237 = cast(%var_5376, dtype="int64") /* ty=Tensor[(11, 10, 10), int64] */;
  %238 = cast(%var_5421, dtype="uint8") /* ty=Tensor[(7, 99), uint8] */;
  %239 = cast(%var_5421, dtype="float64") /* ty=Tensor[(7, 99), float64] */;
  %240 = cast(meta[relay.Constant][15] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %241 = reshape(%238, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), uint8] */;
  %242 = reshape(%239, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), float64] */;
  %243 = reshape(%240, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %244 = @func_1988(%241, %242, %243) /* ty=(Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) */;
  %245 = maximum(%226, %227) /* ty=Tensor[(11, 10, 10), uint32] */;
  %246 = %228.0;
  %247 = %229.5;
  %248 = logical_or(%234, %235) /* ty=Tensor[(11, 10, 10), bool] */;
  %249 = bitwise_or(%236, %237) /* ty=Tensor[(11, 10, 10), int64] */;
  %250 = @func_5092() /* ty=Tensor[(12, 5, 3), float32] */;
  %251 = %244.1;
  (%245, %246, %247, %248, %249, %250, %251, %var_5421, meta[relay.Constant][15] /* ty=Tensor[(640), float64] */)
}

def @func_5454(%var_5445: Tensor[(10, 6, 11), uint32]) -> (Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) {
  %252 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 6, 11), uint32] */, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
  %253 = shape_of(%var_5445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_5445, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %256 = bitwise_or(%254, %255) /* ty=Tensor[(10, 6, 11), uint32] */;
  %257 = @func_5092() /* ty=Tensor[(12, 5, 3), float32] */;
  (%256, %257)
}

def @func_7293() -> Tensor[(12, 5, 3), float64] {
  %258 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %258.0
}

def @func_1125(%var_1114: Tensor[(5, 2, 15), float64]) -> Tensor[(5, 2, 15), float64] {
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %260 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_1114, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%261, %262) /* ty=Tensor[(5, 2, 15), float64] */
}

def @func_4089() -> Tensor[(8, 12, 5), float32] {
  %263 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %263.1
}

def @func_2833() -> (Tensor[(12, 5, 3), float32],) {
  %264 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %265 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(12, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %268 = divide(%266, %267) /* ty=Tensor[(12, 5, 3), float32] */;
  (%268,)
}

def @func_5793(%var_5778: Tensor[(6, 3, 4), bool], %var_5779: Tensor[(6, 3, 4), bool]) -> Tensor[(6, 3, 4), float64] {
  %269 = cast(%var_5779, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
  %270 = shape_of(%var_5778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_5778, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = logical_or(%271, %272) /* ty=Tensor[(6, 3, 4), bool] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
  %275 = shape_of(%var_5779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_5779, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%276, %277) /* ty=Tensor[(6, 3, 4), float64] */
}

def @func_5710(%var_5704: Tensor[(64), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) {
  %278 = @func_5484() /* ty=(Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) */;
  %279 = cast(%var_5704, dtype="float64") /* ty=Tensor[(64), float64] */;
  %280 = cast(%var_5704, dtype="float64") /* ty=Tensor[(64), float64] */;
  %281 = reshape(%279, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %282 = reshape(%280, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %283 = @func_222(%281, %282) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %284 = %278.4;
  %285 = %283.2;
  (%284, %285, %var_5704)
}

def @func_3772() -> (Tensor[(12, 5, 3), float32],) {
  %286 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %287 = %286.0;
  (%287,)
}

def @func_365(%var_341: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) {
  %288 = cast(%var_341, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %289 = cast(meta[relay.Constant][20] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %291 = reshape(%289, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %292 = reshape(%290, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %293 = @func_222(%291, %292) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %294 = %293.1;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
  %296 = acosh(%288) /* ty=Tensor[(8, 12, 5), float32] */;
  %297 = erf(%295) /* ty=Tensor[(8, 4, 2), float32] */;
  (%296, meta[relay.Constant][20] /* ty=Tensor[(64), float64] */, %297)
}

def @func_3150(%var_3147: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
  %298 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %299 = cast(meta[relay.Constant][21] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %301 = reshape(%299, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %302 = reshape(%300, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %303 = @func_2093(%301, %302) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
  %304 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %306 = reshape(%305, newshape=[5, 2, 15]) /* ty=Tensor[(5, 2, 15), float64] */;
  %307 = cast(%var_3147, dtype="float64") /* ty=Tensor[(640), float64] */;
  %308 = reshape(%307, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %309 = @func_388(%308) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %310 = %298.0;
  %311 = %303.3;
  %312 = %304.1;
  %313 = @func_1125(%306) /* ty=Tensor[(5, 2, 15), float64] */;
  %314 = %309.0;
  (%310, %311, meta[relay.Constant][21] /* ty=Tensor[(1050), uint16] */, %312, %313, meta[relay.Constant][22] /* ty=Tensor[(150), float64] */, %314, %var_3147)
}

def @func_4556(%var_4476: Tensor[(13, 13, 3), float64], %var_4482: Tensor[(693), uint8], %var_4483: Tensor[(640), float64], %var_4504: Tensor[(180, 1), float32], %var_4535: Tensor[(2, 108), float64], %var_4548: Tensor[(338), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 3), int64], Tensor[(180, 693), int8], Tensor[(9, 3, 8), float64], Tensor[(2, 108), float64], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 2), float32], Tensor[(13, 2), float64], Tensor[(338), float64]) {
  %315 = cast(%var_4482, dtype="uint8") /* ty=Tensor[(693), uint8] */;
  %316 = cast(%var_4482, dtype="float64") /* ty=Tensor[(693), float64] */;
  %317 = cast(%var_4483, dtype="float64") /* ty=Tensor[(640), float64] */;
  %318 = reshape(%315, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), uint8] */;
  %319 = reshape(%316, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), float64] */;
  %320 = reshape(%317, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %321 = @func_1988(%318, %319, %320) /* ty=(Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) */;
  %322 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %323 = cast(%var_4504, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %324 = reshape(%323, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %325 = cast(%var_4476, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
  %326 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 13, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %329 = floor_mod(%327, %328) /* ty=Tensor[(13, 13, 3), float64] */;
  %330 = cast(%var_4476, dtype="int64") /* ty=Tensor[(13, 13, 3), int64] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int64") /* ty=Tensor[(13, 13, 3), int64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %334 = cast(%var_4504, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %335 = cast(%var_4482, dtype="int8") /* ty=Tensor[(693), int8] */;
  %336 = cast(%var_4535, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
  %337 = reshape(%336, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %338 = @func_2121(%337) /* ty=(Tensor[(9, 3, 8), float64],) */;
  %339 = @func_3302(%324) /* ty=Tensor[(12, 5, 3), int8] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %341 = reshape(%340, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
  %343 = cast(%var_4548, dtype="float64") /* ty=Tensor[(338), float64] */;
  %344 = reshape(%342, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
  %345 = reshape(%343, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float64] */;
  %346 = @func_3626(%344, %345) /* ty=(Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) */;
  %347 = %321.1;
  %348 = %322.0;
  %349 = multiply(%332, %333) /* ty=Tensor[(13, 13, 3), int64] */;
  %350 = multiply(%334, %335) /* ty=Tensor[(180, 693), int8] */;
  %351 = %338.0;
  %352 = @func_3302(%341) /* ty=Tensor[(12, 5, 3), int8] */;
  %353 = %346.1;
  (%347, %var_4483, %348, %339, %349, %350, %351, %var_4535, %352, %353, meta[relay.Constant][24] /* ty=Tensor[(13, 2), float64] */, %var_4548)
}

def @func_3505(%var_3493: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
  %354 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %355 = %354.1;
  %356 = cast(%var_3493, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%358, %359) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_5310() -> (Tensor[(12, 5, 3), bool],) {
  %360 = @func_3978() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %361 = %360.0;
  %362 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 5, 3), float64] */, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = greater(%364, %365) /* ty=Tensor[(12, 5, 3), bool] */;
  (%366,)
}

def @func_1232(%var_1182: Tensor[(3, 15, 7), uint64], %var_1207: Tensor[(2, 320), float64], %var_1209: Tensor[(3, 15, 7), float64], %var_1219: Tensor[(3, 15, 7), float64]) -> (Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) {
  %367 = cast(meta[relay.Constant][26] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %368 = cast(%var_1182, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %369 = cast(meta[relay.Constant][27] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %370 = reshape(%369, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %371 = @func_365(%370) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
  %372 = cast(%var_1207, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
  %373 = reshape(%372, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %374 = @func_388(%373) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %377 = reshape(%376, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %378 = @func_388(%377) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %379 = cast(%var_1182, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %380 = asin(%379) /* ty=Tensor[(3, 15, 7), float64] */;
  %381 = cast(%var_1219, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %385 = cast(%380, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %386 = sinh(%385) /* ty=Tensor[(3, 15, 7), float64] */;
  %387 = cast(%var_1209, dtype="int16") /* ty=Tensor[(3, 15, 7), int16] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="int16") /* ty=Tensor[(3, 15, 7), int16] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %391 = right_shift(%389, %390) /* ty=Tensor[(3, 15, 7), int16] */;
  %392 = cast(%380, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %396 = greater_equal(%367, %368) /* ty=Tensor[(3, 15, 7), bool] */;
  %397 = %371.1;
  %398 = %378.0;
  %399 = power(%383, %384) /* ty=Tensor[(3, 15, 7), float32] */;
  %400 = bitwise_or(%394, %395) /* ty=Tensor[(3, 15, 7), int8] */;
  (%396, %397, meta[relay.Constant][27] /* ty=Tensor[(480), float32] */, %375, %var_1207, %398, %399, %400)
}

def @func_5745(%var_5740: Tensor[(14, 14, 12), uint32]) -> (Tensor[(14, 14, 12), uint32],) {
  %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 14, 12), uint32] */, dtype="uint32") /* ty=Tensor[(14, 14, 12), uint32] */;
  %402 = shape_of(%var_5740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_5740, dtype="uint32") /* ty=Tensor[(14, 14, 12), uint32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %405 = subtract(%403, %404) /* ty=Tensor[(14, 14, 12), uint32] */;
  (%405,)
}

def @func_3730() -> (Tensor[(12, 5, 3), float32],) {
  %406 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %407 = %406.0;
  (%407,)
}

def @func_3401() -> Tensor[(12, 5, 3), float64] {
  %408 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %408.0
}

def @func_3535() -> (Tensor[(8, 12, 5), float32],) {
  %409 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %410 = %409.1;
  (%410,)
}

def @func_4856() -> (Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) {
  %411 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %412 = cast(meta[relay.Constant][29] /* ty=Tensor[(672), uint32] */, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %413 = cast(meta[relay.Constant][30] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %414 = reshape(%412, newshape=[672]) /* ty=Tensor[(672), uint32] */;
  %415 = reshape(%413, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %416 = @func_3679(%414, %415) /* ty=(Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) */;
  %417 = %411.0;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %419 = reshape(%418, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %420 = cast(meta[relay.Constant][30] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %421 = cast(meta[relay.Constant][30] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %422 = reshape(%420, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %423 = reshape(%421, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %424 = @func_222(%422, %423) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %425 = @func_3302(%419) /* ty=Tensor[(12, 5, 3), int8] */;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %427 = reshape(%426, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %428 = @func_4448(%427) /* ty=(Tensor[(12, 5, 3), float64],) */;
  %429 = %416.1;
  %430 = %424.2;
  %431 = %428.0;
  (%417, %429, meta[relay.Constant][29] /* ty=Tensor[(672), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(64), float64] */, %425, %430, %431)
}

def @func_6937() -> (Tensor[(8, 12, 5), float32],) {
  %432 = @func_6264() /* ty=Tensor[(8, 12, 5), float32] */;
  (%432,)
}

def @func_4112() -> (Tensor[(12, 5, 3), float32],) {
  %433 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %434 = %433.0;
  (%434,)
}

def @func_4236(%var_4222: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
  %435 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %436 = %435.0;
  %437 = cast(%var_4222, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%439, %440) /* ty=Tensor[(12, 5, 3), int8] */
}

def @func_7116() -> Tensor[(672), uint32] {
  %441 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %441.1
}

def @func_6303(%var_6290: Tensor[(72, 1), bool]) -> (Tensor[(12, 5, 3), float64], Tensor[(6, 3, 4), float64], Tensor[(72, 1), bool]) {
  %442 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %443 = cast(%var_6290, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %444 = cast(%var_6290, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %445 = reshape(%443, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), bool] */;
  %446 = reshape(%444, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), bool] */;
  %447 = %442.0;
  %448 = @func_5793(%445, %446) /* ty=Tensor[(6, 3, 4), float64] */;
  (%447, %448, %var_6290)
}

def @func_5173(%var_5158: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) {
  %449 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %450 = cast(%var_5158, dtype="float32") /* ty=Tensor[(616), float32] */;
  %451 = cast(%var_5158, dtype="float32") /* ty=Tensor[(616), float32] */;
  %452 = reshape(%450, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %453 = reshape(%451, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %454 = @func_979(%452, %453) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(7, 11, 8), float64] */;
  %457 = %449.0;
  %458 = log2(%456) /* ty=Tensor[(7, 11, 8), float64] */;
  (%457, %var_5158, %458)
}

def @func_3891(%var_3887: Tensor[(10, 16, 13), uint32]) -> Tensor[(10, 16, 13), uint32] {
  %459 = cast(%var_3887, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %460 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%461, %462) /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_5484() -> (Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) {
  %463 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %464 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %465 = reshape(%464, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %466 = @func_3936(%465) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) */;
  %467 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %468 = @func_4374() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %469 = %463.0;
  %470 = %466.0;
  %471 = %467.0;
  %472 = %468.0;
  (%469, %470, meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, %471, %472)
}

def @func_5646(%var_5639: Tensor[(2, 9, 10), float64]) -> (Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) {
  %473 = cast(%var_5639, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %474 = cast(meta[relay.Constant][33] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %475 = reshape(%474, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %476 = @func_5551(%475) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) */;
  %477 = cosh(%473) /* ty=Tensor[(2, 9, 10), float64] */;
  %478 = %476.2;
  (%477, %478, meta[relay.Constant][33] /* ty=Tensor[(616), float32] */)
}

def @func_2751(%var_2716: Tensor[(16, 14, 3), uint32], %var_2723: Tensor[(4, 16), float64]) -> (Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) {
  %479 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 14, 3), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %480 = shape_of(%var_2716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_2716, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = cast(%var_2723, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %484 = reshape(%483, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %485 = @func_1872(%484) /* ty=(Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) */;
  %486 = cast(%var_2716, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %487 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %488 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %489 = reshape(%487, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %490 = reshape(%488, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %491 = @func_2093(%489, %490) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
  %492 = not_equal(%481, %482) /* ty=Tensor[(16, 14, 3), bool] */;
  %493 = %485.4;
  %494 = sin(%486) /* ty=Tensor[(16, 14, 3), float32] */;
  %495 = %491.5;
  (%492, %493, %var_2723, %494, %495, meta[relay.Constant][35] /* ty=Tensor[(1050), uint16] */)
}

def @func_4783(%var_4778: Tensor[(14, 10, 13), int64]) -> Tensor[(14, 10, 13), int64] {
  %496 = cast(%var_4778, dtype="int64") /* ty=Tensor[(14, 10, 13), int64] */;
  %497 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 10, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 13), int64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%498, %499) /* ty=Tensor[(14, 10, 13), int64] */
}

def @func_5364(%var_5351: Tensor[(4, 8, 16), float64]) -> (Tensor[(4, 8, 16), float64], Tensor[(4, 8, 16), float32]) {
  %500 = cast(%var_5351, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
  %501 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 8, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %504 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 8, 16), float64] */, dtype="float32") /* ty=Tensor[(4, 8, 16), float32] */;
  %505 = minimum(%502, %503) /* ty=Tensor[(4, 8, 16), float64] */;
  %506 = exp(%504) /* ty=Tensor[(4, 8, 16), float32] */;
  (%505, %506)
}

def @func_4416() -> Tensor[(12, 5, 3), float32] {
  %507 = @func_4112() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %507.0
}

def @func_6574(%var_6567: Tensor[(14, 2, 1), uint8], %var_6568: Tensor[(14, 2, 12), uint8]) -> Tensor[(14, 2, 12), uint8] {
  %508 = cast(%var_6567, dtype="uint8") /* ty=Tensor[(14, 2, 1), uint8] */;
  %509 = cast(%var_6568, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  right_shift(%508, %509) /* ty=Tensor[(14, 2, 12), uint8] */
}

def @func_388(%var_380: Tensor[(8, 16, 5), float64]) -> (Tensor[(8, 16, 5), float64],) {
  %510 = cast(%var_380, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %511 = log10(%510) /* ty=Tensor[(8, 16, 5), float64] */;
  (%511,)
}

def @main(%var_7477: Tensor[(2, 2, 5), float32], %var_7478: Tensor[(2, 2, 5), float32]) -> (Tensor[(2, 2, 5), float32],) {
  %512 = cast(%var_7478, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %513 = shape_of(%var_7477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_7477, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %516 = power(%514, %515) /* ty=Tensor[(2, 2, 5), float32] */;
  (%516,)
}

def @func_6691(%var_6682: Tensor[(12, 5, 3), bool]) -> Tensor[(12, 5, 3), float32] {
  %517 = @func_5310() /* ty=(Tensor[(12, 5, 3), bool],) */;
  %518 = %517.0;
  %519 = cast(%var_6682, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%521, %522) /* ty=Tensor[(12, 5, 3), float32] */
}

def @func_7437(%var_7426: Tensor[(2, 336), uint32], %var_7427: Tensor[(64), float64]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(2, 336), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), float64]) {
  %523 = @func_6937() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %524 = cast(%var_7426, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %525 = cast(%var_7427, dtype="float64") /* ty=Tensor[(64), float64] */;
  %526 = reshape(%524, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint32] */;
  %527 = reshape(%525, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %528 = @func_2751(%526, %527) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) */;
  %529 = %523.0;
  %530 = %528.1;
  %531 = @func_7293() /* ty=Tensor[(12, 5, 3), float64] */;
  (%529, %530, %var_7426, %var_7427, %531)
}

def @func_7097(%var_6977: Tensor[(12, 5, 3), float64], %var_7001: Tensor[(1050), uint16], %var_7067: Tensor[(3, 15, 7), float32]) -> (Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) {
  %532 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %533 = %532.0;
  %534 = cast(%var_6977, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = cast(meta[relay.Constant][38] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %539 = cast(meta[relay.Constant][39] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %540 = reshape(%538, newshape=[10, 10, 9]) /* ty=Tensor[(10, 10, 9), bool] */;
  %541 = reshape(%539, newshape=[2, 48]) /* ty=Tensor[(2, 48), float64] */;
  %542 = @func_6102(%540, %541) /* ty=(Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) */;
  %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %544 = reshape(%543, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %545 = @func_6464(%544) /* ty=(Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) */;
  %546 = cast(meta[relay.Constant][39] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %547 = reshape(%546, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %548 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %549 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %550 = reshape(%548, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %551 = reshape(%549, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %552 = @func_2093(%550, %551) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
  %553 = %552.3;
  %554 = cast(%var_7067, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %558 = cast(meta[relay.Constant][42] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %559 = reshape(%558, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %560 = @func_6914(%559) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) */;
  %561 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %562 = reshape(%561, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %563 = @func_2121(%562) /* ty=(Tensor[(9, 3, 8), float64],) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %566 = not_equal(%536, %537) /* ty=Tensor[(12, 5, 3), bool] */;
  %567 = %542.0;
  %568 = %545.2;
  %569 = @func_5057(%547) /* ty=Tensor[(4, 6, 4), uint16] */;
  %570 = multiply(%556, %557) /* ty=Tensor[(3, 15, 7), int8] */;
  %571 = %560.2;
  %572 = log(%565) /* ty=Tensor[(9, 3, 8), float64] */;
  (%566, %var_7001, %567, meta[relay.Constant][38] /* ty=Tensor[(900), bool] */, meta[relay.Constant][39] /* ty=Tensor[(96), float64] */, %568, meta[relay.Constant][40] /* ty=Tensor[(480), float32] */, %569, meta[relay.Constant][41] /* ty=Tensor[(216), float64] */, %570, %571, meta[relay.Constant][42] /* ty=Tensor[(1100), uint32] */, %572)
}

def @func_7286() -> Tensor[(12, 5, 3), float64] {
  @func_6871() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_1988(%var_1951: Tensor[(11, 7, 9), uint8], %var_1966: Tensor[(11, 7, 9), float64], %var_1981: Tensor[(640), float64]) -> (Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) {
  %573 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 7, 9), uint8] */, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
  %574 = asin(%573) /* ty=Tensor[(11, 7, 9), float64] */;
  %575 = cast(%var_1966, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(%var_1981, dtype="float64") /* ty=Tensor[(640), float64] */;
  %580 = reshape(%579, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %581 = @func_388(%580) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %582 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 7, 9), uint8] */, dtype="uint8") /* ty=Tensor[(11, 7, 9), uint8] */;
  %583 = shape_of(%var_1951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_1951, dtype="uint8") /* ty=Tensor[(11, 7, 9), uint8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %586 = left_shift(%584, %585) /* ty=Tensor[(11, 7, 9), uint8] */;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
  %588 = shape_of(%var_1966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_1966, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %591 = logical_or(%577, %578) /* ty=Tensor[(11, 7, 9), bool] */;
  %592 = %581.0;
  %593 = floor_mod(%589, %590) /* ty=Tensor[(11, 7, 9), float64] */;
  (%591, %592, %var_1981, %593)
}

def @func_6264() -> Tensor[(8, 12, 5), float32] {
  %594 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %597 = erf(%596) /* ty=Tensor[(8, 12, 5), float64] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  rsqrt(%598) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_4706() -> (Tensor[(12, 5, 3), float64],) {
  %599 = @func_3218() /* ty=Tensor[(12, 5, 3), float64] */;
  (%599,)
}

def @func_6511() -> Tensor[(12, 5, 3), float64] {
  %600 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %600.0
}

def @func_4626(%var_4604: Tensor[(180), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(2, 8), float32], Tensor[(1400), float64], Tensor[(12, 5, 3), uint64], Tensor[(180), float32], Tensor[(8, 12, 5), float32]) {
  %601 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %602 = %601.0;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %604 = sqrt(%603) /* ty=Tensor[(8, 12, 5), float64] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %606 = reshape(%605, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %607 = @func_365(%606) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
  %608 = cast(meta[relay.Constant][44] /* ty=Tensor[(1400), float64] */, dtype="float64") /* ty=Tensor[(1400), float64] */;
  %609 = reshape(%608, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
  %610 = @func_1828(%609) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
  %611 = cast(%var_4604, dtype="float32") /* ty=Tensor[(180), float32] */;
  %612 = reshape(%611, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %613 = @func_2968(%612) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
  %614 = cast(%602, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %615 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%604, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = %607.2;
  %619 = %610.2;
  %620 = %613.1;
  %621 = floor_mod(%616, %617) /* ty=Tensor[(8, 12, 5), float32] */;
  (%618, %619, meta[relay.Constant][44] /* ty=Tensor[(1400), float64] */, %620, %var_4604, %621)
}

def @func_6464(%var_6459: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) {
  %622 = cast(meta[relay.Constant][45] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %623 = reshape(%622, newshape=[32, 2]) /* ty=Tensor[(32, 2), float64] */;
  %624 = @func_4189(%623) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) */;
  %625 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %626 = %625.0;
  %627 = cast(%var_6459, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %631 = %624.3;
  %632 = divide(%629, %630) /* ty=Tensor[(8, 12, 5), float32] */;
  (%631, meta[relay.Constant][45] /* ty=Tensor[(64), float64] */, %632)
}

def @func_7263(%var_7255: Tensor[(700, 2), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), float64], Tensor[(2, 8), float32], Tensor[(700, 2), float64], Tensor[(616), float32]) {
  %633 = @func_5579() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %634 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %635 = cast(%var_7255, dtype="float64") /* ty=Tensor[(700, 2), float64] */;
  %636 = reshape(%635, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
  %637 = @func_1828(%636) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
  %638 = %634.0;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %640 = reshape(%639, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %641 = @func_5646(%640) /* ty=(Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) */;
  %642 = %633.0;
  %643 = %637.2;
  %644 = %641.2;
  (%642, %638, %643, %var_7255, %644)
}

def @func_2968(%var_2952: Tensor[(12, 5, 3), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) {
  %645 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %646 = %645.0;
  %647 = cast(%var_2952, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %651 = cast(%646, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %652 = asinh(%651) /* ty=Tensor[(12, 5, 3), float64] */;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %654 = cos(%653) /* ty=Tensor[(12, 5, 3), float32] */;
  %655 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 5, 3), float32] */, dtype="uint64") /* ty=Tensor[(12, 5, 3), uint64] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="uint64") /* ty=Tensor[(12, 5, 3), uint64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %659 = right_shift(%649, %650) /* ty=Tensor[(12, 5, 3), int64] */;
  %660 = minimum(%657, %658) /* ty=Tensor[(12, 5, 3), uint64] */;
  (%659, %660)
}

def @func_4189(%var_4182: Tensor[(32, 2), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) {
  %661 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %662 = cast(meta[relay.Constant][47] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %663 = reshape(%662, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %664 = @func_3150(%663) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %665 = cast(%var_4182, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %666 = cast(%var_4182, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %667 = reshape(%665, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %668 = reshape(%666, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %669 = @func_222(%667, %668) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %670 = %661.0;
  %671 = %664.4;
  %672 = %669.2;
  (%670, %671, meta[relay.Constant][47] /* ty=Tensor[(640), float64] */, %672, %var_4182)
}

def @func_2121(%var_2118: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64],) {
  %673 = cast(%var_2118, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %674 = sinh(%673) /* ty=Tensor[(9, 3, 8), float64] */;
  (%674,)
}

def @func_4448(%var_4432: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), float64],) {
  %675 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %676 = %675.0;
  %677 = cast(%var_4432, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = less_equal(%679, %680) /* ty=Tensor[(12, 5, 3), bool] */;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %683 = log10(%682) /* ty=Tensor[(12, 5, 3), float64] */;
  (%683,)
}

def @func_3936(%var_3911: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) {
  %684 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %685 = %684.0;
  %686 = cast(%var_3911, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = cast(%685, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %691 = cast(meta[relay.Constant][48] /* ty=Tensor[(216, 1), float64] */, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %692 = reshape(%691, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %693 = @func_2121(%692) /* ty=(Tensor[(9, 3, 8), float64],) */;
  %694 = less(%688, %689) /* ty=Tensor[(12, 5, 3), bool] */;
  %695 = atan(%690) /* ty=Tensor[(12, 5, 3), float32] */;
  %696 = %693.0;
  (%694, %695, %696, meta[relay.Constant][48] /* ty=Tensor[(216, 1), float64] */)
}

def @func_6558(%var_6548: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(616), float32], Tensor[(616), float32]) {
  %697 = @func_4706() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %700 = reshape(%699, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %701 = @func_4448(%700) /* ty=(Tensor[(12, 5, 3), float64],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %704 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%698, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %707 = cast(%var_6548, dtype="float32") /* ty=Tensor[(616), float32] */;
  %708 = reshape(%707, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %709 = @func_5173(%708) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) */;
  %710 = left_shift(%705, %706) /* ty=Tensor[(12, 5, 3), int64] */;
  %711 = %709.1;
  (%710, %711, %var_6548)
}

def @func_3096(%var_3073: Tensor[(616), float32], %var_3079: Tensor[(64), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(80, 8), float64], Tensor[(7, 11, 8), float32], Tensor[(616), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), float64], Tensor[(64), float64], Tensor[(12, 5, 3), bool]) {
  %712 = cast(meta[relay.Constant][49] /* ty=Tensor[(80, 8), float64] */, dtype="float64") /* ty=Tensor[(80, 8), float64] */;
  %713 = reshape(%712, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %714 = @func_388(%713) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %715 = cast(%var_3073, dtype="float32") /* ty=Tensor[(616), float32] */;
  %716 = cast(%var_3073, dtype="float32") /* ty=Tensor[(616), float32] */;
  %717 = reshape(%715, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %718 = reshape(%716, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %719 = @func_979(%717, %718) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %720 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %723 = cast(%var_3079, dtype="float64") /* ty=Tensor[(64), float64] */;
  %724 = cast(%var_3079, dtype="float64") /* ty=Tensor[(64), float64] */;
  %725 = reshape(%723, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %726 = reshape(%724, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %727 = @func_222(%725, %726) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %728 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %731 = tan(%730) /* ty=Tensor[(12, 5, 3), float64] */;
  %732 = cast(%729, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %736 = bitwise_or(%734, %735) /* ty=Tensor[(12, 5, 3), int8] */;
  %737 = cast(%729, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = %714.0;
  %742 = %719.0;
  %743 = sigmoid(%722) /* ty=Tensor[(12, 5, 3), float64] */;
  %744 = %727.1;
  %745 = greater_equal(%739, %740) /* ty=Tensor[(12, 5, 3), bool] */;
  (%741, meta[relay.Constant][49] /* ty=Tensor[(80, 8), float64] */, %742, %var_3073, %743, %744, %var_3079, %745)
}

def @func_6102(%var_6034: Tensor[(10, 10, 9), bool], %var_6096: Tensor[(2, 48), float64]) -> (Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) {
  %746 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 10, 9), bool] */, dtype="bool") /* ty=Tensor[(10, 10, 9), bool] */;
  %747 = shape_of(%var_6034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_6034, dtype="bool") /* ty=Tensor[(10, 10, 9), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = cast(%var_6034, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
  %751 = cos(%750) /* ty=Tensor[(10, 10, 9), float64] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(10, 10, 9), float32] */;
  %753 = cast(%var_6096, dtype="float64") /* ty=Tensor[(2, 48), float64] */;
  %754 = reshape(%753, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %755 = logical_and(%748, %749) /* ty=Tensor[(10, 10, 9), bool] */;
  %756 = tan(%752) /* ty=Tensor[(10, 10, 9), float32] */;
  %757 = @func_5057(%754) /* ty=Tensor[(4, 6, 4), uint16] */;
  (%755, %756, %757, %var_6096)
}

def @func_1872(%var_1864: Tensor[(64), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) {
  %758 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 9, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
  %759 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 700), float64] */, dtype="float64") /* ty=Tensor[(2, 700), float64] */;
  %760 = reshape(%759, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
  %761 = @func_1828(%760) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
  %762 = cast(%var_1864, dtype="float64") /* ty=Tensor[(64), float64] */;
  %763 = cast(%var_1864, dtype="float64") /* ty=Tensor[(64), float64] */;
  %764 = reshape(%762, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %765 = reshape(%763, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %766 = @func_222(%764, %765) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %767 = exp(%758) /* ty=Tensor[(9, 9, 15), float64] */;
  %768 = %761.1;
  %769 = %766.0;
  (%767, %768, meta[relay.Constant][52] /* ty=Tensor[(2, 700), float64] */, %769, %var_1864)
}

def @func_5057(%var_5040: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), uint16] {
  %770 = cast(%var_5040, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %771 = cos(%770) /* ty=Tensor[(4, 6, 4), float64] */;
  %772 = cast(%var_5040, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%774, %775) /* ty=Tensor[(4, 6, 4), uint16] */
}

def @func_222(%var_188: Tensor[(8, 4, 2), float64], %var_189: Tensor[(8, 4, 2), float64]) -> (Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) {
  %776 = cast(%var_189, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %777 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%var_188, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = cast(%var_188, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %781 = cast(%var_189, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %782 = asin(%781) /* ty=Tensor[(8, 4, 2), float64] */;
  %783 = cast(%var_189, dtype="int64") /* ty=Tensor[(8, 4, 2), int64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="int64") /* ty=Tensor[(8, 4, 2), int64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %787 = less(%778, %779) /* ty=Tensor[(8, 4, 2), bool] */;
  %788 = acos(%780) /* ty=Tensor[(8, 4, 2), float64] */;
  %789 = subtract(%785, %786) /* ty=Tensor[(8, 4, 2), int64] */;
  (%787, %788, %789)
}

def @func_7219() -> Tensor[(8, 12, 5), float64] {
  %790 = @func_6937() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %791 = %790.0;
  %792 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%794, %795) /* ty=Tensor[(8, 12, 5), float64] */
}

def @func_1804(%var_1779: Tensor[(5, 10, 8), float32]) -> Tensor[(5, 10, 8), float32] {
  %796 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %797 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(5, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%798, %799) /* ty=Tensor[(5, 10, 8), float32] */
}

def @func_3352() -> (Tensor[(12, 5, 3), float32],) {
  %800 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %801 = %800.0;
  (%801,)
}

def @func_5925(%var_5881: Tensor[(14, 44), float32], %var_5889: Tensor[(26), float64]) -> (Tensor[(672), uint32], Tensor[(12, 5, 3), float32], Tensor[(14, 44), float32], Tensor[(13, 13, 2), float32], Tensor[(26), float64], Tensor[(338), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %802 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %803 = cast(%var_5881, dtype="float32") /* ty=Tensor[(14, 44), float32] */;
  %804 = reshape(%803, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %805 = @func_5551(%804) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) */;
  %806 = cast(%var_5889, dtype="float64") /* ty=Tensor[(26), float64] */;
  %807 = cast(meta[relay.Constant][55] /* ty=Tensor[(338), float64] */, dtype="float64") /* ty=Tensor[(338), float64] */;
  %808 = reshape(%806, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
  %809 = reshape(%807, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float64] */;
  %810 = @func_3626(%808, %809) /* ty=(Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) */;
  %811 = cast(meta[relay.Constant][56] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %812 = reshape(%811, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %813 = %802.1;
  %814 = %805.0;
  %815 = %810.1;
  %816 = @func_3505(%812) /* ty=Tensor[(8, 12, 5), float32] */;
  (%813, %814, %var_5881, %815, %var_5889, meta[relay.Constant][55] /* ty=Tensor[(338), float64] */, %816, meta[relay.Constant][56] /* ty=Tensor[(480), float32] */)
}

def @func_3022() -> (Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) {
  %817 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %818 = cast(meta[relay.Constant][57] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %819 = reshape(%818, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %820 = @func_365(%819) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
  %821 = %817.0;
  %822 = %820.0;
  (%821, %822, meta[relay.Constant][57] /* ty=Tensor[(40, 12), float32] */)
}

def @func_4913(%var_4900: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64]) {
  %823 = @func_4112() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %824 = cast(%var_4900, dtype="float64") /* ty=Tensor[(640), float64] */;
  %825 = reshape(%824, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %826 = @func_3150(%825) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %827 = %823.0;
  %828 = %826.4;
  (%827, %828, %var_4900)
}

def @func_5579() -> (Tensor[(12, 5, 3), float64],) {
  %829 = @func_4644() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %830 = %829.0;
  (%830,)
}

def @func_4644() -> (Tensor[(12, 5, 3), float64],) {
  %831 = @func_3401() /* ty=Tensor[(12, 5, 3), float64] */;
  (%831,)
}

def @func_4053() -> (Tensor[(12, 5, 3), float32],) {
  %832 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %833 = %832.0;
  (%833,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4783(%var_4778: Tensor[(14, 10, 13), int64]) -> Tensor[(14, 10, 13), int64] {
  %0 = cast(%var_4778, dtype="int64") /* ty=Tensor[(14, 10, 13), int64] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(14, 10, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 13), int64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%2, %3) /* ty=Tensor[(14, 10, 13), int64] */
}

def @func_6467(%var_6465: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) {
  @func_6464(%var_6465) /* ty=(Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) */
}

def @func_7101(%var_7098: Tensor[(12, 5, 3), float64], %var_7099: Tensor[(1050), uint16], %var_7100: Tensor[(3, 15, 7), float32]) -> (Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) {
  %45 = fn (%var_6977: Tensor[(12, 5, 3), float64], %var_7001: Tensor[(1050), uint16], %var_7067: Tensor[(3, 15, 7), float32]) -> (Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) {
    %4 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %5 = %4.0;
    %6 = cast(%var_6977, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
    %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %12 = reshape(%10, newshape=[10, 10, 9]) /* ty=Tensor[(10, 10, 9), bool] */;
    %13 = reshape(%11, newshape=[2, 48]) /* ty=Tensor[(2, 48), float64] */;
    %14 = @func_6102(%12, %13) /* ty=(Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) */;
    %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %16 = reshape(%15, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %17 = @func_6464(%16) /* ty=(Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) */;
    %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %19 = reshape(%18, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
    %20 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %21 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %22 = reshape(%20, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
    %23 = reshape(%21, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
    %24 = @func_2093(%22, %23) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
    %25 = %24.3;
    %26 = cast(%var_7067, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %30 = cast(meta[relay.Constant][5] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %31 = reshape(%30, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
    %32 = @func_6914(%31) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) */;
    %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %34 = reshape(%33, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
    %35 = @func_2121(%34) /* ty=(Tensor[(9, 3, 8), float64],) */;
    %36 = %35.0;
    %37 = cast(%36, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
    %38 = not_equal(%8, %9) /* ty=Tensor[(12, 5, 3), bool] */;
    %39 = %14.0;
    %40 = %17.2;
    %41 = @func_5057(%19) /* ty=Tensor[(4, 6, 4), uint16] */;
    %42 = multiply(%28, %29) /* ty=Tensor[(3, 15, 7), int8] */;
    %43 = %32.2;
    %44 = log(%37) /* ty=Tensor[(9, 3, 8), float64] */;
    (%38, %var_7001, %39, meta[relay.Constant][1] /* ty=Tensor[(900), bool] */, meta[relay.Constant][2] /* ty=Tensor[(96), float64] */, %40, meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, %41, meta[relay.Constant][4] /* ty=Tensor[(216), float64] */, %42, %43, meta[relay.Constant][5] /* ty=Tensor[(1100), uint32] */, %44)
  };
  %45(%var_7098, %var_7099, %var_7100) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) */
}

def @func_4915(%var_4914: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64]) {
  %52 = fn (%var_4900: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64]) {
    %46 = @func_4112() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %47 = cast(%var_4900, dtype="float64") /* ty=Tensor[(640), float64] */;
    %48 = reshape(%47, newshape=[640]) /* ty=Tensor[(640), float64] */;
    %49 = @func_3150(%48) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
    %50 = %46.0;
    %51 = %49.4;
    (%50, %51, %var_4900)
  };
  %52(%var_4914) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64]) */
}

def @main(%var_7477: Tensor[(2, 2, 5), float32], %var_7478: Tensor[(2, 2, 5), float32]) -> (Tensor[(2, 2, 5), float32],) {
  %53 = cast(%var_7478, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %54 = shape_of(%var_7477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_7477, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %57 = power(%55, %56) /* ty=Tensor[(2, 2, 5), float32] */;
  (%57,)
}

def @func_5366(%var_5365: Tensor[(4, 8, 16), float64]) -> (Tensor[(4, 8, 16), float64], Tensor[(4, 8, 16), float32]) {
  %65 = fn (%var_5351: Tensor[(4, 8, 16), float64]) -> (Tensor[(4, 8, 16), float64], Tensor[(4, 8, 16), float32]) {
    %58 = cast(%var_5351, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
    %59 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %62 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 16), float64] */, dtype="float32") /* ty=Tensor[(4, 8, 16), float32] */;
    %63 = minimum(%60, %61) /* ty=Tensor[(4, 8, 16), float64] */;
    %64 = exp(%62) /* ty=Tensor[(4, 8, 16), float32] */;
    (%63, %64)
  };
  %65(%var_5365) /* ty=(Tensor[(4, 8, 16), float64], Tensor[(4, 8, 16), float32]) */
}

def @func_7472(%var_7470: Tensor[(315), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float64], Tensor[(9, 3, 8), float64], Tensor[(70, 15), uint16], Tensor[(315), float32]) {
  @func_7469(%var_7470) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float64], Tensor[(9, 3, 8), float64], Tensor[(70, 15), uint16], Tensor[(315), float32]) */
}

def @func_7220() -> Tensor[(8, 12, 5), float64] {
  %72 = fn () -> Tensor[(8, 12, 5), float64] {
    %66 = @func_6937() /* ty=(Tensor[(8, 12, 5), float32],) */;
    %67 = %66.0;
    %68 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(%67, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%70, %71) /* ty=Tensor[(8, 12, 5), float64] */
  };
  %72() /* ty=Tensor[(8, 12, 5), float64] */
}

def @func_6266() -> Tensor[(8, 12, 5), float32] {
  @func_6264() /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_2835() -> (Tensor[(12, 5, 3), float32],) {
  @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_3220() -> Tensor[(12, 5, 3), float64] {
  @func_3218() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_5060(%var_5058: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), uint16] {
  @func_5057(%var_5058) /* ty=Tensor[(4, 6, 4), uint16] */
}

def @func_6872() -> Tensor[(12, 5, 3), float64] {
  %74 = fn () -> Tensor[(12, 5, 3), float64] {
    %73 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %73.0
  };
  %74() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_3100(%var_3098: Tensor[(616), float32], %var_3099: Tensor[(64), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(80, 8), float64], Tensor[(7, 11, 8), float32], Tensor[(616), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), float64], Tensor[(64), float64], Tensor[(12, 5, 3), bool]) {
  @func_3096(%var_3098, %var_3099) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(80, 8), float64], Tensor[(7, 11, 8), float32], Tensor[(616), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), float64], Tensor[(64), float64], Tensor[(12, 5, 3), bool]) */
}

def @func_5604(%var_5603: Tensor[(9, 1, 8), float64]) -> (Tensor[(10, 6, 11), uint32], Tensor[(660), uint32], Tensor[(9, ?, 8), uint64]) {
  %88 = fn (%var_5581: Tensor[(9, 1, 8), float64]) -> (Tensor[(10, 6, 11), uint32], Tensor[(660), uint32], Tensor[(9, ?, 8), uint64]) {
    %75 = cast(meta[relay.Constant][8] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %76 = reshape(%75, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint32] */;
    %77 = @func_5454(%76) /* ty=(Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) */;
    %78 = cast(%var_5581, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    %79 = tan(%78) /* ty=Tensor[(9, 1, 8), float64] */;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %81 = log(%80) /* ty=Tensor[(9, 1, 8), float32] */;
    %82 = cast(%79, dtype="uint64") /* ty=Tensor[(9, 1, 8), uint64] */;
    %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(%81, dtype="uint64") /* ty=Tensor[(9, 1, 8), uint64] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %86 = %77.0;
    %87 = multiply(%84, %85) /* ty=Tensor[(9, ?, 8), uint64] */;
    (%86, meta[relay.Constant][8] /* ty=Tensor[(660), uint32] */, %87)
  };
  %88(%var_5603) /* ty=(Tensor[(10, 6, 11), uint32], Tensor[(660), uint32], Tensor[(9, ?, 8), uint64]) */
}

def @func_3626(%var_3602: Tensor[(13, 1, 2), float64], %var_3603: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) {
  %89 = cast(%var_3602, dtype="float64") /* ty=Tensor[(13, 1, 2), float64] */;
  %90 = cast(%var_3603, dtype="float64") /* ty=Tensor[(13, 13, 2), float64] */;
  %91 = cast(%var_3603, dtype="float32") /* ty=Tensor[(13, 13, 2), float32] */;
  %92 = floor_mod(%89, %90) /* ty=Tensor[(13, 13, 2), float64] */;
  %93 = exp(%91) /* ty=Tensor[(13, 13, 2), float32] */;
  (%92, %93)
}

def @func_5231() -> (Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
  %94 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %95 = cast(meta[relay.Constant][9] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %96 = reshape(%95, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
  %97 = cast(meta[relay.Constant][10] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %98 = reshape(%97, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %99 = @func_388(%98) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %100 = %94.0;
  %101 = @func_1804(%96) /* ty=Tensor[(5, 10, 8), float32] */;
  %102 = %99.0;
  (%100, %101, meta[relay.Constant][9] /* ty=Tensor[(400), float32] */, %102, meta[relay.Constant][10] /* ty=Tensor[(640), float64] */)
}

def @func_6558(%var_6548: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(616), float32], Tensor[(616), float32]) {
  %103 = @func_4706() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %106 = reshape(%105, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %107 = @func_4448(%106) /* ty=(Tensor[(12, 5, 3), float64],) */;
  %108 = %107.0;
  %109 = cast(%108, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %110 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%104, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %113 = cast(%var_6548, dtype="float32") /* ty=Tensor[(616), float32] */;
  %114 = reshape(%113, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %115 = @func_5173(%114) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) */;
  %116 = left_shift(%111, %112) /* ty=Tensor[(12, 5, 3), int64] */;
  %117 = %115.1;
  (%116, %117, %var_6548)
}

def @func_4089() -> Tensor[(8, 12, 5), float32] {
  %118 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %118.1
}

def @func_3023() -> (Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) {
  %125 = fn () -> (Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) {
    %119 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %120 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
    %121 = reshape(%120, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %122 = @func_365(%121) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
    %123 = %119.0;
    %124 = %122.0;
    (%123, %124, meta[relay.Constant][11] /* ty=Tensor[(40, 12), float32] */)
  };
  %125() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */
}

def @func_1806(%var_1805: Tensor[(5, 10, 8), float32]) -> Tensor[(5, 10, 8), float32] {
  %130 = fn (%var_1779: Tensor[(5, 10, 8), float32]) -> Tensor[(5, 10, 8), float32] {
    %126 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
    %127 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(5, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%128, %129) /* ty=Tensor[(5, 10, 8), float32] */
  };
  %130(%var_1805) /* ty=Tensor[(5, 10, 8), float32] */
}

def @func_4036(%var_4034: Tensor[(5, 3, 1), int32], %var_4035: Tensor[(5, 3, 14), int32]) -> Tensor[(5, 3, 14), int32] {
  %133 = fn (%var_4026: Tensor[(5, 3, 1), int32], %var_4027: Tensor[(5, 3, 14), int32]) -> Tensor[(5, 3, 14), int32] {
    %131 = cast(%var_4026, dtype="int32") /* ty=Tensor[(5, 3, 1), int32] */;
    %132 = cast(%var_4027, dtype="int32") /* ty=Tensor[(5, 3, 14), int32] */;
    minimum(%131, %132) /* ty=Tensor[(5, 3, 14), int32] */
  };
  %133(%var_4034, %var_4035) /* ty=Tensor[(5, 3, 14), int32] */
}

def @func_4375() -> (Tensor[(12, 5, 3), float32],) {
  %136 = fn () -> (Tensor[(12, 5, 3), float32],) {
    %134 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %135 = %134.0;
    (%135,)
  };
  %136() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_5551(%var_5549: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) {
  %137 = cast(%var_5549, dtype="float32") /* ty=Tensor[(616), float32] */;
  %138 = cast(%var_5549, dtype="float32") /* ty=Tensor[(616), float32] */;
  %139 = reshape(%137, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %140 = reshape(%138, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %141 = @func_979(%139, %140) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %142 = @func_4416() /* ty=Tensor[(12, 5, 3), float32] */;
  %143 = %141.3;
  (%142, %143, %var_5549)
}

def @func_4450(%var_4449: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), float64],) {
  %153 = fn (%var_4432: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), float64],) {
    %144 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %145 = %144.0;
    %146 = cast(%var_4432, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%145, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %150 = less_equal(%148, %149) /* ty=Tensor[(12, 5, 3), bool] */;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
    %152 = log10(%151) /* ty=Tensor[(12, 5, 3), float64] */;
    (%152,)
  };
  %153(%var_4449) /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_4054() -> (Tensor[(12, 5, 3), float32],) {
  %156 = fn () -> (Tensor[(12, 5, 3), float32],) {
    %154 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %155 = %154.0;
    (%155,)
  };
  %156() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_7295() -> Tensor[(12, 5, 3), float64] {
  @func_7293() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_6694(%var_6692: Tensor[(12, 5, 3), bool]) -> Tensor[(12, 5, 3), float32] {
  @func_6691(%var_6692) /* ty=Tensor[(12, 5, 3), float32] */
}

def @func_7118() -> Tensor[(672), uint32] {
  @func_7116() /* ty=Tensor[(672), uint32] */
}

def @func_7173(%var_7170: Tensor[(546), float32], %var_7171: Tensor[(64), float64], %var_7172: Tensor[(13, 6, 7), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(900), bool], Tensor[(96), float64], Tensor[(546), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(13, 6, 7), int64]) {
  %182 = fn (%var_7133: Tensor[(546), float32], %var_7147: Tensor[(64), float64], %var_7162: Tensor[(13, 6, 7), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(900), bool], Tensor[(96), float64], Tensor[(546), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(13, 6, 7), int64]) {
    %157 = cast(meta[relay.Constant][13] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
    %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %159 = reshape(%157, newshape=[10, 10, 9]) /* ty=Tensor[(10, 10, 9), bool] */;
    %160 = reshape(%158, newshape=[2, 48]) /* ty=Tensor[(2, 48), float64] */;
    %161 = @func_6102(%159, %160) /* ty=(Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) */;
    %162 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %163 = %162.0;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
    %165 = cast(%var_7147, dtype="float64") /* ty=Tensor[(64), float64] */;
    %166 = reshape(%165, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %167 = @func_5710(%166) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) */;
    %168 = cast(%var_7133, dtype="float32") /* ty=Tensor[(546), float32] */;
    %169 = cast(%var_7133, dtype="float32") /* ty=Tensor[(546), float32] */;
    %170 = reshape(%168, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
    %171 = reshape(%169, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
    %172 = @func_1934(%170, %171) /* ty=(Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) */;
    %173 = %172.1;
    %174 = cast(%var_7162, dtype="int64") /* ty=Tensor[(13, 6, 7), int64] */;
    %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%173, dtype="int64") /* ty=Tensor[(13, 6, 7), int64] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %178 = %161.1;
    %179 = exp(%164) /* ty=Tensor[(12, 5, 3), float64] */;
    %180 = %167.1;
    %181 = logical_xor(%176, %177) /* ty=Tensor[(13, 6, 7), int64] */;
    (%178, meta[relay.Constant][13] /* ty=Tensor[(900), bool] */, meta[relay.Constant][14] /* ty=Tensor[(96), float64] */, %var_7133, %179, %180, %var_7147, %181)
  };
  %182(%var_7170, %var_7171, %var_7172) /* ty=(Tensor[(10, 10, 9), float32], Tensor[(900), bool], Tensor[(96), float64], Tensor[(546), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(13, 6, 7), int64]) */
}

def @func_6464(%var_6459: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 4, 2), int64], Tensor[(64), float64], Tensor[(8, 12, 5), float32]) {
  %183 = cast(meta[relay.Constant][15] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %184 = reshape(%183, newshape=[32, 2]) /* ty=Tensor[(32, 2), float64] */;
  %185 = @func_4189(%184) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) */;
  %186 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %187 = %186.0;
  %188 = cast(%var_6459, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %192 = %185.3;
  %193 = divide(%190, %191) /* ty=Tensor[(8, 12, 5), float32] */;
  (%192, meta[relay.Constant][15] /* ty=Tensor[(64), float64] */, %193)
}

def @func_1127(%var_1126: Tensor[(5, 2, 15), float64]) -> Tensor[(5, 2, 15), float64] {
  %198 = fn (%var_1114: Tensor[(5, 2, 15), float64]) -> Tensor[(5, 2, 15), float64] {
    %194 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
    %195 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%var_1114, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%196, %197) /* ty=Tensor[(5, 2, 15), float64] */
  };
  %198(%var_1126) /* ty=Tensor[(5, 2, 15), float64] */
}

def @func_7293() -> Tensor[(12, 5, 3), float64] {
  %199 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %199.0
}

def @func_1874(%var_1873: Tensor[(64), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) {
  %212 = fn (%var_1864: Tensor[(64), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) {
    %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 9, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
    %201 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 700), float64] */, dtype="float64") /* ty=Tensor[(2, 700), float64] */;
    %202 = reshape(%201, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
    %203 = @func_1828(%202) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
    %204 = cast(%var_1864, dtype="float64") /* ty=Tensor[(64), float64] */;
    %205 = cast(%var_1864, dtype="float64") /* ty=Tensor[(64), float64] */;
    %206 = reshape(%204, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %207 = reshape(%205, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %208 = @func_222(%206, %207) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
    %209 = exp(%200) /* ty=Tensor[(9, 9, 15), float64] */;
    %210 = %203.1;
    %211 = %208.0;
    (%209, %210, meta[relay.Constant][18] /* ty=Tensor[(2, 700), float64] */, %211, %var_1864)
  };
  %212(%var_1873) /* ty=(Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) */
}

def @func_3536() -> (Tensor[(8, 12, 5), float32],) {
  %215 = fn () -> (Tensor[(8, 12, 5), float32],) {
    %213 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %214 = %213.1;
    (%214,)
  };
  %215() /* ty=(Tensor[(8, 12, 5), float32],) */
}

def @func_4418() -> Tensor[(12, 5, 3), float32] {
  @func_4416() /* ty=Tensor[(12, 5, 3), float32] */
}

def @func_2751(%var_2716: Tensor[(16, 14, 3), uint32], %var_2723: Tensor[(4, 16), float64]) -> (Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) {
  %216 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 14, 3), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %217 = shape_of(%var_2716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_2716, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(%var_2723, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %221 = reshape(%220, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %222 = @func_1872(%221) /* ty=(Tensor[(9, 9, 15), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 700), float64], Tensor[(8, 4, 2), bool], Tensor[(64), float64]) */;
  %223 = cast(%var_2716, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %224 = cast(meta[relay.Constant][20] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %225 = cast(meta[relay.Constant][20] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %226 = reshape(%224, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %227 = reshape(%225, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
  %228 = @func_2093(%226, %227) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
  %229 = not_equal(%218, %219) /* ty=Tensor[(16, 14, 3), bool] */;
  %230 = %222.4;
  %231 = sin(%223) /* ty=Tensor[(16, 14, 3), float32] */;
  %232 = %228.5;
  (%229, %230, %var_2723, %231, %232, meta[relay.Constant][20] /* ty=Tensor[(1050), uint16] */)
}

def @func_2833() -> (Tensor[(12, 5, 3), float32],) {
  %233 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %234 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(12, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %237 = divide(%235, %236) /* ty=Tensor[(12, 5, 3), float32] */;
  (%237,)
}

def @func_2968(%var_2952: Tensor[(12, 5, 3), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) {
  %238 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %239 = %238.0;
  %240 = cast(%var_2952, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="int64") /* ty=Tensor[(12, 5, 3), int64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %244 = cast(%239, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %245 = asinh(%244) /* ty=Tensor[(12, 5, 3), float64] */;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %247 = cos(%246) /* ty=Tensor[(12, 5, 3), float32] */;
  %248 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 5, 3), float32] */, dtype="uint64") /* ty=Tensor[(12, 5, 3), uint64] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint64") /* ty=Tensor[(12, 5, 3), uint64] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %252 = right_shift(%242, %243) /* ty=Tensor[(12, 5, 3), int64] */;
  %253 = minimum(%250, %251) /* ty=Tensor[(12, 5, 3), uint64] */;
  (%252, %253)
}

def @func_4113() -> (Tensor[(12, 5, 3), float32],) {
  %256 = fn () -> (Tensor[(12, 5, 3), float32],) {
    %254 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %255 = %254.0;
    (%255,)
  };
  %256() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_6769() -> (Tensor[(12, 5, 3), float64],) {
  %257 = @func_5231() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %258 = %257.0;
  (%258,)
}

def @func_6938() -> (Tensor[(8, 12, 5), float32],) {
  %260 = fn () -> (Tensor[(8, 12, 5), float32],) {
    %259 = @func_6264() /* ty=Tensor[(8, 12, 5), float32] */;
    (%259,)
  };
  %260() /* ty=(Tensor[(8, 12, 5), float32],) */
}

def @func_5425(%var_5375: uint32, %var_5376: Tensor[(11, 10, 10), uint32], %var_5421: Tensor[(7, 99), uint8]) -> (Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) {
  %261 = cast(%var_5375, dtype="uint32") /* ty=uint32 */;
  %262 = cast(%var_5376, dtype="uint32") /* ty=Tensor[(11, 10, 10), uint32] */;
  %263 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %264 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %265 = cast(%var_5376, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %266 = rsqrt(%265) /* ty=Tensor[(11, 10, 10), float32] */;
  %267 = cast(%var_5376, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = cast(%var_5375, dtype="int64") /* ty=int64 */;
  %272 = cast(%var_5376, dtype="int64") /* ty=Tensor[(11, 10, 10), int64] */;
  %273 = cast(%var_5421, dtype="uint8") /* ty=Tensor[(7, 99), uint8] */;
  %274 = cast(%var_5421, dtype="float64") /* ty=Tensor[(7, 99), float64] */;
  %275 = cast(meta[relay.Constant][24] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %276 = reshape(%273, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), uint8] */;
  %277 = reshape(%274, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), float64] */;
  %278 = reshape(%275, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %279 = @func_1988(%276, %277, %278) /* ty=(Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) */;
  %280 = maximum(%261, %262) /* ty=Tensor[(11, 10, 10), uint32] */;
  %281 = %263.0;
  %282 = %264.5;
  %283 = logical_or(%269, %270) /* ty=Tensor[(11, 10, 10), bool] */;
  %284 = bitwise_or(%271, %272) /* ty=Tensor[(11, 10, 10), int64] */;
  %285 = @func_5092() /* ty=Tensor[(12, 5, 3), float32] */;
  %286 = %279.1;
  (%280, %281, %282, %283, %284, %285, %286, %var_5421, meta[relay.Constant][24] /* ty=Tensor[(640), float64] */)
}

def @func_4706() -> (Tensor[(12, 5, 3), float64],) {
  %287 = @func_3218() /* ty=Tensor[(12, 5, 3), float64] */;
  (%287,)
}

def @func_3354() -> (Tensor[(12, 5, 3), float32],) {
  @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_3936(%var_3911: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) {
  %288 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %289 = %288.0;
  %290 = cast(%var_3911, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %294 = cast(%289, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %295 = cast(meta[relay.Constant][25] /* ty=Tensor[(216, 1), float64] */, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %296 = reshape(%295, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %297 = @func_2121(%296) /* ty=(Tensor[(9, 3, 8), float64],) */;
  %298 = less(%292, %293) /* ty=Tensor[(12, 5, 3), bool] */;
  %299 = atan(%294) /* ty=Tensor[(12, 5, 3), float32] */;
  %300 = %297.0;
  (%298, %299, %300, meta[relay.Constant][25] /* ty=Tensor[(216, 1), float64] */)
}

def @func_4213() -> (Tensor[(12, 5, 3), float32],) {
  %301 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %302 = %301.0;
  (%302,)
}

def @func_367(%var_366: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) {
  %313 = fn (%var_341: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) {
    %303 = cast(%var_341, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %304 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %305 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %306 = reshape(%304, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %307 = reshape(%305, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %308 = @func_222(%306, %307) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
    %309 = %308.1;
    %310 = cast(%309, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
    %311 = acosh(%303) /* ty=Tensor[(8, 12, 5), float32] */;
    %312 = erf(%310) /* ty=Tensor[(8, 4, 2), float32] */;
    (%311, meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, %312)
  };
  %313(%var_366) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */
}

def @func_4708() -> (Tensor[(12, 5, 3), float64],) {
  @func_4706() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_4645() -> (Tensor[(12, 5, 3), float64],) {
  %315 = fn () -> (Tensor[(12, 5, 3), float64],) {
    %314 = @func_3401() /* ty=Tensor[(12, 5, 3), float64] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_5093() -> Tensor[(12, 5, 3), float32] {
  %317 = fn () -> Tensor[(12, 5, 3), float32] {
    %316 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %316.0
  };
  %317() /* ty=Tensor[(12, 5, 3), float32] */
}

def @func_655(%var_654: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32],) {
  %320 = fn (%var_647: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32],) {
    %318 = cast(%var_647, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %319 = sigmoid(%318) /* ty=Tensor[(1, 8, 2), float32] */;
    (%319,)
  };
  %320(%var_654) /* ty=(Tensor[(1, 8, 2), float32],) */
}

def @func_3939(%var_3937: Tensor[(12, 5, 3), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) {
  @func_3936(%var_3937) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) */
}

def @func_6105(%var_6103: Tensor[(10, 10, 9), bool], %var_6104: Tensor[(2, 48), float64]) -> (Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) {
  %333 = fn (%var_6034: Tensor[(10, 10, 9), bool], %var_6096: Tensor[(2, 48), float64]) -> (Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) {
    %321 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 10, 9), bool] */, dtype="bool") /* ty=Tensor[(10, 10, 9), bool] */;
    %322 = shape_of(%var_6034, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_6034, dtype="bool") /* ty=Tensor[(10, 10, 9), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %325 = cast(%var_6034, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
    %326 = cos(%325) /* ty=Tensor[(10, 10, 9), float64] */;
    %327 = cast(%326, dtype="float32") /* ty=Tensor[(10, 10, 9), float32] */;
    %328 = cast(%var_6096, dtype="float64") /* ty=Tensor[(2, 48), float64] */;
    %329 = reshape(%328, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
    %330 = logical_and(%323, %324) /* ty=Tensor[(10, 10, 9), bool] */;
    %331 = tan(%327) /* ty=Tensor[(10, 10, 9), float32] */;
    %332 = @func_5057(%329) /* ty=Tensor[(4, 6, 4), uint16] */;
    (%330, %331, %332, %var_6096)
  };
  %333(%var_6103, %var_6104) /* ty=(Tensor[(10, 10, 9), bool], Tensor[(10, 10, 9), float32], Tensor[(4, 6, 4), uint16], Tensor[(2, 48), float64]) */
}

def @func_5312() -> (Tensor[(12, 5, 3), bool],) {
  @func_5310() /* ty=(Tensor[(12, 5, 3), bool],) */
}

def @func_4238(%var_4237: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
  %340 = fn (%var_4222: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
    %334 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %335 = %334.0;
    %336 = cast(%var_4222, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
    %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(%335, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_and(%338, %339) /* ty=Tensor[(12, 5, 3), int8] */
  };
  %340(%var_4237) /* ty=Tensor[(12, 5, 3), int8] */
}

def @func_5554(%var_5552: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) {
  @func_5551(%var_5552) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) */
}

def @func_7286() -> Tensor[(12, 5, 3), float64] {
  @func_6871() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_6561(%var_6559: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(616), float32], Tensor[(616), float32]) {
  @func_6558(%var_6559) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(616), float32], Tensor[(616), float32]) */
}

def @func_391(%var_389: Tensor[(8, 16, 5), float64]) -> (Tensor[(8, 16, 5), float64],) {
  @func_388(%var_389) /* ty=(Tensor[(8, 16, 5), float64],) */
}

def @func_7116() -> Tensor[(672), uint32] {
  %341 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %341.1
}

def @func_3773() -> (Tensor[(12, 5, 3), float32],) {
  %344 = fn () -> (Tensor[(12, 5, 3), float32],) {
    %342 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %343 = %342.0;
    (%343,)
  };
  %344() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_5020(%var_5018: Tensor[(12, 5, 3), float32], %var_5019: Tensor[(5, 10, 8), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(400), float32], Tensor[(5, 10, 8), float32]) {
  %362 = fn (%var_4972: Tensor[(12, 5, 3), float32], %var_5010: Tensor[(5, 10, 8), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(400), float32], Tensor[(5, 10, 8), float32]) {
    %345 = @func_4213() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %346 = %345.0;
    %347 = cast(%var_4972, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%346, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %351 = cast(meta[relay.Constant][28] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
    %352 = reshape(%351, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
    %353 = @func_1804(%352) /* ty=Tensor[(5, 10, 8), float32] */;
    %354 = cast(%353, dtype="float64") /* ty=Tensor[(5, 10, 8), float64] */;
    %355 = log2(%354) /* ty=Tensor[(5, 10, 8), float64] */;
    %356 = cast(%var_5010, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
    %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%355, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %360 = logical_and(%349, %350) /* ty=Tensor[(12, 5, 3), bool] */;
    %361 = mod(%358, %359) /* ty=Tensor[(5, 10, 8), float32] */;
    (%360, meta[relay.Constant][28] /* ty=Tensor[(400), float32] */, %361)
  };
  %362(%var_5018, %var_5019) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(400), float32], Tensor[(5, 10, 8), float32]) */
}

def @func_6574(%var_6567: Tensor[(14, 2, 1), uint8], %var_6568: Tensor[(14, 2, 12), uint8]) -> Tensor[(14, 2, 12), uint8] {
  %363 = cast(%var_6567, dtype="uint8") /* ty=Tensor[(14, 2, 1), uint8] */;
  %364 = cast(%var_6568, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  right_shift(%363, %364) /* ty=Tensor[(14, 2, 12), uint8] */
}

def @func_5261() -> (Tensor[(12, 5, 3), float64], Tensor[(8, 12, 5), float32]) {
  @func_5259() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(8, 12, 5), float32]) */
}

def @func_983(%var_981: Tensor[(7, 11, 8), float32], %var_982: Tensor[(7, 11, 8), float32]) -> (Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
  @func_979(%var_981, %var_982) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */
}

def @func_1828(%var_1808: Tensor[(10, 14, 10), float64]) -> (Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) {
  %365 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %366 = shape_of(%var_1808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_1808, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
  %370 = reshape(%369, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
  %371 = @func_653(%370) /* ty=(Tensor[(1, 8, 2), float32],) */;
  %372 = minimum(%367, %368) /* ty=Tensor[(10, 14, 10), float64] */;
  %373 = %371.0;
  (%372, %373, meta[relay.Constant][30] /* ty=Tensor[(2, 8), float32] */)
}

def @func_7288() -> Tensor[(12, 5, 3), float64] {
  @func_7286() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_5870() -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), uint64], Tensor[(12, 5, 3), float32]) {
  %374 = @func_4706() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %377 = reshape(%376, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %378 = @func_2968(%377) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
  %379 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %380 = %378.1;
  %381 = %379.0;
  (%375, %380, %381)
}

def @func_7469(%var_7465: Tensor[(315), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float64], Tensor[(9, 3, 8), float64], Tensor[(70, 15), uint16], Tensor[(315), float32]) {
  %382 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %383 = @func_5579() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %384 = %382.0;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %386 = cast(meta[relay.Constant][31] /* ty=Tensor[(70, 15), uint16] */, dtype="uint16") /* ty=Tensor[(70, 15), uint16] */;
  %387 = cast(%var_7465, dtype="float32") /* ty=Tensor[(315), float32] */;
  %388 = reshape(%385, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
  %389 = reshape(%386, newshape=[1050]) /* ty=Tensor[(1050), uint16] */;
  %390 = reshape(%387, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %391 = @func_7097(%388, %389, %390) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(1050), uint16], Tensor[(10, 10, 9), bool], Tensor[(900), bool], Tensor[(96), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(4, 6, 4), uint16], Tensor[(216), float64], Tensor[(3, 15, 7), int8], uint32, Tensor[(1100), uint32], Tensor[(9, 3, 8), float64]) */;
  %392 = %383.0;
  %393 = %391.12;
  (%384, %392, %393, meta[relay.Constant][31] /* ty=Tensor[(70, 15), uint16] */, %var_7465)
}

def @func_5259() -> (Tensor[(12, 5, 3), float64], Tensor[(8, 12, 5), float32]) {
  %394 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %395 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %396 = %394.0;
  %397 = %395.0;
  (%396, %397)
}

def @func_4024(%var_4021: Tensor[(4, 16, 14), int16], %var_4022: Tensor[(4, 16, 14), int16], %var_4023: Tensor[(180), float32]) -> (Tensor[(4, 16, 14), bool], Tensor[(12, 5, 3), int64], Tensor[(180), float32]) {
  @func_4019(%var_4021, %var_4022, %var_4023) /* ty=(Tensor[(4, 16, 14), bool], Tensor[(12, 5, 3), int64], Tensor[(180), float32]) */
}

def @func_3562() -> (Tensor[(12, 5, 3), float64],) {
  @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_5649(%var_5647: Tensor[(2, 9, 10), float64]) -> (Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) {
  @func_5646(%var_5647) /* ty=(Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) */
}

def @func_1938(%var_1936: Tensor[(13, 6, 7), float32], %var_1937: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) {
  @func_1934(%var_1936, %var_1937) /* ty=(Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) */
}

def @func_5430(%var_5427: uint32, %var_5428: Tensor[(11, 10, 10), uint32], %var_5429: Tensor[(7, 99), uint8]) -> (Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) {
  @func_5425(%var_5427, %var_5428, %var_5429) /* ty=(Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) */
}

def @func_4192(%var_4190: Tensor[(32, 2), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) {
  @func_4189(%var_4190) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) */
}

def @func_2096(%var_2094: Tensor[(14, 5, 15), uint16], %var_2095: Tensor[(14, 5, 15), uint16]) -> (Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) {
  %421 = fn (%var_2064: Tensor[(14, 5, 15), uint16], %var_2065: Tensor[(14, 5, 15), uint16]) -> (Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) {
    %398 = cast(%var_2065, dtype="bool") /* ty=Tensor[(14, 5, 15), bool] */;
    %399 = shape_of(%var_2064, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%var_2064, dtype="bool") /* ty=Tensor[(14, 5, 15), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %402 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
    %403 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
    %404 = reshape(%402, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %405 = reshape(%403, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %406 = @func_222(%404, %405) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
    %407 = %406.1;
    %408 = cast(%407, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
    %409 = cast(meta[relay.Constant][33] /* ty=Tensor[(105, 3), uint64] */, dtype="uint64") /* ty=Tensor[(105, 3), uint64] */;
    %410 = cast(meta[relay.Constant][34] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %411 = cast(meta[relay.Constant][33] /* ty=Tensor[(105, 3), uint64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
    %412 = cast(meta[relay.Constant][33] /* ty=Tensor[(105, 3), uint64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
    %413 = reshape(%409, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), uint64] */;
    %414 = reshape(%410, newshape=[2, 320]) /* ty=Tensor[(2, 320), float64] */;
    %415 = reshape(%411, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float64] */;
    %416 = reshape(%412, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float64] */;
    %417 = @func_1232(%413, %414, %415, %416) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) */;
    %418 = not_equal(%400, %401) /* ty=Tensor[(14, 5, 15), bool] */;
    %419 = log10(%408) /* ty=Tensor[(8, 4, 2), float32] */;
    %420 = %417.6;
    (%418, meta[relay.Constant][32] /* ty=Tensor[(4, 16), float64] */, %419, %420, meta[relay.Constant][33] /* ty=Tensor[(105, 3), uint64] */, meta[relay.Constant][34] /* ty=Tensor[(640), float64] */)
  };
  %421(%var_2094, %var_2095) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */
}

def @func_3507(%var_3506: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
  %428 = fn (%var_3493: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
    %422 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %423 = %422.1;
    %424 = cast(%var_3493, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%426, %427) /* ty=Tensor[(8, 12, 5), float32] */
  };
  %428(%var_3506) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_4019(%var_3993: Tensor[(4, 16, 14), int16], %var_3994: Tensor[(4, 16, 14), int16], %var_4004: Tensor[(180), float32]) -> (Tensor[(4, 16, 14), bool], Tensor[(12, 5, 3), int64], Tensor[(180), float32]) {
  %429 = cast(%var_3994, dtype="bool") /* ty=Tensor[(4, 16, 14), bool] */;
  %430 = shape_of(%var_3993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_3993, dtype="bool") /* ty=Tensor[(4, 16, 14), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(%var_4004, dtype="float32") /* ty=Tensor[(180), float32] */;
  %434 = reshape(%433, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
  %435 = @func_2968(%434) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
  %436 = less(%431, %432) /* ty=Tensor[(4, 16, 14), bool] */;
  %437 = %435.0;
  (%436, %437, %var_4004)
}

def @func_5872() -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), uint64], Tensor[(12, 5, 3), float32]) {
  @func_5870() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), uint64], Tensor[(12, 5, 3), float32]) */
}

def @func_979(%var_952: Tensor[(7, 11, 8), float32], %var_953: Tensor[(7, 11, 8), float32]) -> (Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
  %438 = cast(%var_953, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %439 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%var_952, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %442 = cast(meta[relay.Constant][35] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %443 = reshape(%442, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %444 = @func_388(%443) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %445 = cast(meta[relay.Constant][35] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %446 = reshape(%445, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %447 = @func_388(%446) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %448 = mod(%440, %441) /* ty=Tensor[(7, 11, 8), float32] */;
  %449 = %444.0;
  %450 = %447.0;
  (%448, %449, meta[relay.Constant][35] /* ty=Tensor[(640), float64] */, %450)
}

def @func_5928(%var_5926: Tensor[(14, 44), float32], %var_5927: Tensor[(26), float64]) -> (Tensor[(672), uint32], Tensor[(12, 5, 3), float32], Tensor[(14, 44), float32], Tensor[(13, 13, 2), float32], Tensor[(26), float64], Tensor[(338), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %466 = fn (%var_5881: Tensor[(14, 44), float32], %var_5889: Tensor[(26), float64]) -> (Tensor[(672), uint32], Tensor[(12, 5, 3), float32], Tensor[(14, 44), float32], Tensor[(13, 13, 2), float32], Tensor[(26), float64], Tensor[(338), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
    %451 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
    %452 = cast(%var_5881, dtype="float32") /* ty=Tensor[(14, 44), float32] */;
    %453 = reshape(%452, newshape=[616]) /* ty=Tensor[(616), float32] */;
    %454 = @func_5551(%453) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) */;
    %455 = cast(%var_5889, dtype="float64") /* ty=Tensor[(26), float64] */;
    %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(338), float64] */, dtype="float64") /* ty=Tensor[(338), float64] */;
    %457 = reshape(%455, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
    %458 = reshape(%456, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float64] */;
    %459 = @func_3626(%457, %458) /* ty=(Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) */;
    %460 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %461 = reshape(%460, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %462 = %451.1;
    %463 = %454.0;
    %464 = %459.1;
    %465 = @func_3505(%461) /* ty=Tensor[(8, 12, 5), float32] */;
    (%462, %463, %var_5881, %464, %var_5889, meta[relay.Constant][36] /* ty=Tensor[(338), float64] */, %465, meta[relay.Constant][37] /* ty=Tensor[(480), float32] */)
  };
  %466(%var_5926, %var_5927) /* ty=(Tensor[(672), uint32], Tensor[(12, 5, 3), float32], Tensor[(14, 44), float32], Tensor[(13, 13, 2), float32], Tensor[(26), float64], Tensor[(338), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) */
}

def @func_3096(%var_3073: Tensor[(616), float32], %var_3079: Tensor[(64), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(80, 8), float64], Tensor[(7, 11, 8), float32], Tensor[(616), float32], Tensor[(12, 5, 3), float64], Tensor[(8, 4, 2), float64], Tensor[(64), float64], Tensor[(12, 5, 3), bool]) {
  %467 = cast(meta[relay.Constant][38] /* ty=Tensor[(80, 8), float64] */, dtype="float64") /* ty=Tensor[(80, 8), float64] */;
  %468 = reshape(%467, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %469 = @func_388(%468) /* ty=(Tensor[(8, 16, 5), float64],) */;
  %470 = cast(%var_3073, dtype="float32") /* ty=Tensor[(616), float32] */;
  %471 = cast(%var_3073, dtype="float32") /* ty=Tensor[(616), float32] */;
  %472 = reshape(%470, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %473 = reshape(%471, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %474 = @func_979(%472, %473) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %475 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %478 = cast(%var_3079, dtype="float64") /* ty=Tensor[(64), float64] */;
  %479 = cast(%var_3079, dtype="float64") /* ty=Tensor[(64), float64] */;
  %480 = reshape(%478, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %481 = reshape(%479, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %482 = @func_222(%480, %481) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %483 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %484 = %483.0;
  %485 = cast(%484, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
  %486 = tan(%485) /* ty=Tensor[(12, 5, 3), float64] */;
  %487 = cast(%484, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %491 = bitwise_or(%489, %490) /* ty=Tensor[(12, 5, 3), int8] */;
  %492 = cast(%484, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = %469.0;
  %497 = %474.0;
  %498 = sigmoid(%477) /* ty=Tensor[(12, 5, 3), float64] */;
  %499 = %482.1;
  %500 = greater_equal(%494, %495) /* ty=Tensor[(12, 5, 3), bool] */;
  (%496, meta[relay.Constant][38] /* ty=Tensor[(80, 8), float64] */, %497, %var_3073, %498, %499, %var_3079, %500)
}

def @func_7344(%var_7341: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  %501 = cast(%var_7341, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %502 = atanh(%501) /* ty=Tensor[(9, 10, 10), float32] */;
  (%502,)
}

def @func_7347(%var_7345: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  @func_7344(%var_7345) /* ty=(Tensor[(9, 10, 10), float32],) */
}

def @func_3630(%var_3628: Tensor[(13, 1, 2), float64], %var_3629: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) {
  @func_3626(%var_3628, %var_3629) /* ty=(Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) */
}

def @func_3352() -> (Tensor[(12, 5, 3), float32],) {
  %503 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %504 = %503.0;
  (%504,)
}

def @func_7441(%var_7439: Tensor[(2, 336), uint32], %var_7440: Tensor[(64), float64]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(2, 336), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), float64]) {
  @func_7437(%var_7439, %var_7440) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(2, 336), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), float64]) */
}

def @func_5173(%var_5158: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) {
  %505 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
  %506 = cast(%var_5158, dtype="float32") /* ty=Tensor[(616), float32] */;
  %507 = cast(%var_5158, dtype="float32") /* ty=Tensor[(616), float32] */;
  %508 = reshape(%506, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %509 = reshape(%507, newshape=[7, 11, 8]) /* ty=Tensor[(7, 11, 8), float32] */;
  %510 = @func_979(%508, %509) /* ty=(Tensor[(7, 11, 8), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(7, 11, 8), float64] */;
  %513 = %505.0;
  %514 = log2(%512) /* ty=Tensor[(7, 11, 8), float64] */;
  (%513, %var_5158, %514)
}

def @func_4091() -> Tensor[(8, 12, 5), float32] {
  @func_4089() /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_6691(%var_6682: Tensor[(12, 5, 3), bool]) -> Tensor[(12, 5, 3), float32] {
  %515 = @func_5310() /* ty=(Tensor[(12, 5, 3), bool],) */;
  %516 = %515.0;
  %517 = cast(%var_6682, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%519, %520) /* ty=Tensor[(12, 5, 3), float32] */
}

def @func_5176(%var_5174: Tensor[(616), float32]) -> (Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) {
  @func_5173(%var_5174) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(616), float32], Tensor[(7, 11, 8), float64]) */
}

def @func_2971(%var_2969: Tensor[(12, 5, 3), float32]) -> (Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) {
  @func_2968(%var_2969) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */
}

def @func_6306(%var_6304: Tensor[(72, 1), bool]) -> (Tensor[(12, 5, 3), float64], Tensor[(6, 3, 4), float64], Tensor[(72, 1), bool]) {
  @func_6303(%var_6304) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(6, 3, 4), float64], Tensor[(72, 1), bool]) */
}

def @func_4215() -> (Tensor[(12, 5, 3), float32],) {
  @func_4213() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_3682(%var_3680: Tensor[(672), uint32], %var_3681: Tensor[(64), float64]) -> (Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) {
  %533 = fn (%var_3658: Tensor[(672), uint32], %var_3659: Tensor[(64), float64]) -> (Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) {
    %521 = cast(%var_3658, dtype="uint32") /* ty=Tensor[(672), uint32] */;
    %522 = cast(%var_3659, dtype="float64") /* ty=Tensor[(64), float64] */;
    %523 = reshape(%521, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint32] */;
    %524 = reshape(%522, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
    %525 = @func_2751(%523, %524) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) */;
    %526 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %527 = %526.2;
    %528 = cast(%527, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
    %529 = sinh(%528) /* ty=Tensor[(40, 12), float32] */;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
    %531 = %525.4;
    %532 = asinh(%530) /* ty=Tensor[(40, 12), float32] */;
    (%531, %var_3658, %var_3659, %532)
  };
  %533(%var_3680, %var_3681) /* ty=(Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) */
}

def @func_6264() -> Tensor[(8, 12, 5), float32] {
  %534 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %537 = erf(%536) /* ty=Tensor[(8, 12, 5), float64] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  rsqrt(%538) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_6303(%var_6290: Tensor[(72, 1), bool]) -> (Tensor[(12, 5, 3), float64], Tensor[(6, 3, 4), float64], Tensor[(72, 1), bool]) {
  %539 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %540 = cast(%var_6290, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %541 = cast(%var_6290, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %542 = reshape(%540, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), bool] */;
  %543 = reshape(%541, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), bool] */;
  %544 = %539.0;
  %545 = @func_5793(%542, %543) /* ty=Tensor[(6, 3, 4), float64] */;
  (%544, %545, %var_6290)
}

def @func_226(%var_224: Tensor[(8, 4, 2), float64], %var_225: Tensor[(8, 4, 2), float64]) -> (Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) {
  @func_222(%var_224, %var_225) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */
}

def @func_5747(%var_5746: Tensor[(14, 14, 12), uint32]) -> (Tensor[(14, 14, 12), uint32],) {
  %551 = fn (%var_5740: Tensor[(14, 14, 12), uint32]) -> (Tensor[(14, 14, 12), uint32],) {
    %546 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 14, 12), uint32] */, dtype="uint32") /* ty=Tensor[(14, 14, 12), uint32] */;
    %547 = shape_of(%var_5740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%var_5740, dtype="uint32") /* ty=Tensor[(14, 14, 12), uint32] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %550 = subtract(%548, %549) /* ty=Tensor[(14, 14, 12), uint32] */;
    (%550,)
  };
  %551(%var_5746) /* ty=(Tensor[(14, 14, 12), uint32],) */
}

def @func_1831(%var_1829: Tensor[(10, 14, 10), float64]) -> (Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) {
  @func_1828(%var_1829) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */
}

def @func_4786(%var_4784: Tensor[(14, 10, 13), int64]) -> Tensor[(14, 10, 13), int64] {
  @func_4783(%var_4784) /* ty=Tensor[(14, 10, 13), int64] */
}

def @func_3125() -> (Tensor[(12, 5, 3), float64],) {
  %556 = fn () -> (Tensor[(12, 5, 3), float64],) {
    %552 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %553 = %552.0;
    %554 = cast(%553, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
    %555 = cosh(%554) /* ty=Tensor[(12, 5, 3), float64] */;
    (%555,)
  };
  %556() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_6771() -> (Tensor[(12, 5, 3), float64],) {
  @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_5456(%var_5455: Tensor[(10, 6, 11), uint32]) -> (Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) {
  %563 = fn (%var_5445: Tensor[(10, 6, 11), uint32]) -> (Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) {
    %557 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 6, 11), uint32] */, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
    %558 = shape_of(%var_5445, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%var_5445, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %561 = bitwise_or(%559, %560) /* ty=Tensor[(10, 6, 11), uint32] */;
    %562 = @func_5092() /* ty=Tensor[(12, 5, 3), float32] */;
    (%561, %562)
  };
  %563(%var_5455) /* ty=(Tensor[(10, 6, 11), uint32], Tensor[(12, 5, 3), float32]) */
}

def @func_2755(%var_2753: Tensor[(16, 14, 3), uint32], %var_2754: Tensor[(4, 16), float64]) -> (Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) {
  @func_2751(%var_2753, %var_2754) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) */
}

def @func_4857() -> (Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) {
  %585 = fn () -> (Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) {
    %564 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %565 = cast(meta[relay.Constant][41] /* ty=Tensor[(672), uint32] */, dtype="uint32") /* ty=Tensor[(672), uint32] */;
    %566 = cast(meta[relay.Constant][42] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %567 = reshape(%565, newshape=[672]) /* ty=Tensor[(672), uint32] */;
    %568 = reshape(%566, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %569 = @func_3679(%567, %568) /* ty=(Tensor[(640), float64], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(40, 12), float32]) */;
    %570 = %564.0;
    %571 = cast(%570, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
    %572 = reshape(%571, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
    %573 = cast(meta[relay.Constant][42] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %574 = cast(meta[relay.Constant][42] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %575 = reshape(%573, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %576 = reshape(%574, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %577 = @func_222(%575, %576) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
    %578 = @func_3302(%572) /* ty=Tensor[(12, 5, 3), int8] */;
    %579 = cast(%578, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
    %580 = reshape(%579, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
    %581 = @func_4448(%580) /* ty=(Tensor[(12, 5, 3), float64],) */;
    %582 = %569.1;
    %583 = %577.2;
    %584 = %581.0;
    (%570, %582, meta[relay.Constant][41] /* ty=Tensor[(672), uint32] */, meta[relay.Constant][42] /* ty=Tensor[(64), float64] */, %578, %583, %584)
  };
  %585() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */
}

def @func_4563(%var_4557: Tensor[(13, 13, 3), float64], %var_4558: Tensor[(693), uint8], %var_4559: Tensor[(640), float64], %var_4560: Tensor[(180, 1), float32], %var_4561: Tensor[(2, 108), float64], %var_4562: Tensor[(338), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 3), int64], Tensor[(180, 693), int8], Tensor[(9, 3, 8), float64], Tensor[(2, 108), float64], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 2), float32], Tensor[(13, 2), float64], Tensor[(338), float64]) {
  %625 = fn (%var_4476: Tensor[(13, 13, 3), float64], %var_4482: Tensor[(693), uint8], %var_4483: Tensor[(640), float64], %var_4504: Tensor[(180, 1), float32], %var_4535: Tensor[(2, 108), float64], %var_4548: Tensor[(338), float64]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 3), int64], Tensor[(180, 693), int8], Tensor[(9, 3, 8), float64], Tensor[(2, 108), float64], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 2), float32], Tensor[(13, 2), float64], Tensor[(338), float64]) {
    %586 = cast(%var_4482, dtype="uint8") /* ty=Tensor[(693), uint8] */;
    %587 = cast(%var_4482, dtype="float64") /* ty=Tensor[(693), float64] */;
    %588 = cast(%var_4483, dtype="float64") /* ty=Tensor[(640), float64] */;
    %589 = reshape(%586, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), uint8] */;
    %590 = reshape(%587, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), float64] */;
    %591 = reshape(%588, newshape=[640]) /* ty=Tensor[(640), float64] */;
    %592 = @func_1988(%589, %590, %591) /* ty=(Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) */;
    %593 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
    %594 = cast(%var_4504, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
    %595 = reshape(%594, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
    %596 = cast(%var_4476, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
    %597 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(13, 13, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %598 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
    %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %600 = floor_mod(%598, %599) /* ty=Tensor[(13, 13, 3), float64] */;
    %601 = cast(%var_4476, dtype="int64") /* ty=Tensor[(13, 13, 3), int64] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%600, dtype="int64") /* ty=Tensor[(13, 13, 3), int64] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %605 = cast(%var_4504, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
    %606 = cast(%var_4482, dtype="int8") /* ty=Tensor[(693), int8] */;
    %607 = cast(%var_4535, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
    %608 = reshape(%607, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
    %609 = @func_2121(%608) /* ty=(Tensor[(9, 3, 8), float64],) */;
    %610 = @func_3302(%595) /* ty=Tensor[(12, 5, 3), int8] */;
    %611 = cast(%610, dtype="float32") /* ty=Tensor[(12, 5, 3), float32] */;
    %612 = reshape(%611, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
    %613 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
    %614 = cast(%var_4548, dtype="float64") /* ty=Tensor[(338), float64] */;
    %615 = reshape(%613, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
    %616 = reshape(%614, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float64] */;
    %617 = @func_3626(%615, %616) /* ty=(Tensor[(13, 13, 2), float64], Tensor[(13, 13, 2), float32]) */;
    %618 = %592.1;
    %619 = %593.0;
    %620 = multiply(%603, %604) /* ty=Tensor[(13, 13, 3), int64] */;
    %621 = multiply(%605, %606) /* ty=Tensor[(180, 693), int8] */;
    %622 = %609.0;
    %623 = @func_3302(%612) /* ty=Tensor[(12, 5, 3), int8] */;
    %624 = %617.1;
    (%618, %var_4483, %619, %610, %620, %621, %622, %var_4535, %623, %624, meta[relay.Constant][44] /* ty=Tensor[(13, 2), float64] */, %var_4548)
  };
  %625(%var_4557, %var_4558, %var_4559, %var_4560, %var_4561, %var_4562) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 3), int64], Tensor[(180, 693), int8], Tensor[(9, 3, 8), float64], Tensor[(2, 108), float64], Tensor[(12, 5, 3), int8], Tensor[(13, 13, 2), float32], Tensor[(13, 2), float64], Tensor[(338), float64]) */
}

def @func_5796(%var_5794: Tensor[(6, 3, 4), bool], %var_5795: Tensor[(6, 3, 4), bool]) -> Tensor[(6, 3, 4), float64] {
  %635 = fn (%var_5778: Tensor[(6, 3, 4), bool], %var_5779: Tensor[(6, 3, 4), bool]) -> Tensor[(6, 3, 4), float64] {
    %626 = cast(%var_5779, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
    %627 = shape_of(%var_5778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%var_5778, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %630 = logical_or(%628, %629) /* ty=Tensor[(6, 3, 4), bool] */;
    %631 = cast(%630, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
    %632 = shape_of(%var_5779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_5779, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%633, %634) /* ty=Tensor[(6, 3, 4), float64] */
  };
  %635(%var_5794, %var_5795) /* ty=Tensor[(6, 3, 4), float64] */
}

def @func_5580() -> (Tensor[(12, 5, 3), float64],) {
  %638 = fn () -> (Tensor[(12, 5, 3), float64],) {
    %636 = @func_4644() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %637 = %636.0;
    (%637,)
  };
  %638() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_3731() -> (Tensor[(12, 5, 3), float32],) {
  %641 = fn () -> (Tensor[(12, 5, 3), float32],) {
    %639 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %640 = %639.0;
    (%640,)
  };
  %641() /* ty=(Tensor[(12, 5, 3), float32],) */
}

def @func_3402() -> Tensor[(12, 5, 3), float64] {
  %643 = fn () -> Tensor[(12, 5, 3), float64] {
    %642 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %642.0
  };
  %643() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_4189(%var_4182: Tensor[(32, 2), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(5, 2, 15), float64], Tensor[(640), float64], Tensor[(8, 4, 2), int64], Tensor[(32, 2), float64]) {
  %644 = @func_3730() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %645 = cast(meta[relay.Constant][45] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %646 = reshape(%645, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %647 = @func_3150(%646) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
  %648 = cast(%var_4182, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %649 = cast(%var_4182, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %650 = reshape(%648, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %651 = reshape(%649, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %652 = @func_222(%650, %651) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
  %653 = %644.0;
  %654 = %647.4;
  %655 = %652.2;
  (%653, %654, meta[relay.Constant][45] /* ty=Tensor[(640), float64] */, %655, %var_4182)
}

def @func_1992(%var_1989: Tensor[(11, 7, 9), uint8], %var_1990: Tensor[(11, 7, 9), float64], %var_1991: Tensor[(640), float64]) -> (Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) {
  %677 = fn (%var_1951: Tensor[(11, 7, 9), uint8], %var_1966: Tensor[(11, 7, 9), float64], %var_1981: Tensor[(640), float64]) -> (Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) {
    %656 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 7, 9), uint8] */, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
    %657 = asin(%656) /* ty=Tensor[(11, 7, 9), float64] */;
    %658 = cast(%var_1966, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %662 = cast(%var_1981, dtype="float64") /* ty=Tensor[(640), float64] */;
    %663 = reshape(%662, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
    %664 = @func_388(%663) /* ty=(Tensor[(8, 16, 5), float64],) */;
    %665 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 7, 9), uint8] */, dtype="uint8") /* ty=Tensor[(11, 7, 9), uint8] */;
    %666 = shape_of(%var_1951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%var_1951, dtype="uint8") /* ty=Tensor[(11, 7, 9), uint8] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %669 = left_shift(%667, %668) /* ty=Tensor[(11, 7, 9), uint8] */;
    %670 = cast(%669, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
    %671 = shape_of(%var_1966, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%var_1966, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %674 = logical_or(%660, %661) /* ty=Tensor[(11, 7, 9), bool] */;
    %675 = %664.0;
    %676 = floor_mod(%672, %673) /* ty=Tensor[(11, 7, 9), float64] */;
    (%674, %675, %var_1981, %676)
  };
  %677(%var_1989, %var_1990, %var_1991) /* ty=(Tensor[(11, 7, 9), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(11, 7, 9), float64]) */
}

def @func_6435() -> (Tensor[(64), float64],) {
  @func_6433() /* ty=(Tensor[(64), float64],) */
}

def @func_4416() -> Tensor[(12, 5, 3), float32] {
  %678 = @func_4112() /* ty=(Tensor[(12, 5, 3), float32],) */;
  %678.0
}

def @func_2123(%var_2122: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64],) {
  %681 = fn (%var_2118: Tensor[(9, 3, 8), float64]) -> (Tensor[(9, 3, 8), float64],) {
    %679 = cast(%var_2118, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
    %680 = sinh(%679) /* ty=Tensor[(9, 3, 8), float64] */;
    (%680,)
  };
  %681(%var_2122) /* ty=(Tensor[(9, 3, 8), float64],) */
}

def @func_6578(%var_6576: Tensor[(14, 2, 1), uint8], %var_6577: Tensor[(14, 2, 12), uint8]) -> Tensor[(14, 2, 12), uint8] {
  @func_6574(%var_6576, %var_6577) /* ty=Tensor[(14, 2, 12), uint8] */
}

def @func_3152(%var_3151: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
  %699 = fn (%var_3147: Tensor[(640), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
    %682 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %683 = cast(meta[relay.Constant][47] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %684 = cast(meta[relay.Constant][47] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %685 = reshape(%683, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
    %686 = reshape(%684, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), uint16] */;
    %687 = @func_2093(%685, %686) /* ty=(Tensor[(14, 5, 15), bool], Tensor[(4, 16), float64], Tensor[(8, 4, 2), float32], Tensor[(3, 15, 7), float32], Tensor[(105, 3), uint64], Tensor[(640), float64]) */;
    %688 = @func_3022() /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 12, 5), float32], Tensor[(40, 12), float32]) */;
    %689 = cast(meta[relay.Constant][48] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %690 = reshape(%689, newshape=[5, 2, 15]) /* ty=Tensor[(5, 2, 15), float64] */;
    %691 = cast(%var_3147, dtype="float64") /* ty=Tensor[(640), float64] */;
    %692 = reshape(%691, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
    %693 = @func_388(%692) /* ty=(Tensor[(8, 16, 5), float64],) */;
    %694 = %682.0;
    %695 = %687.3;
    %696 = %688.1;
    %697 = @func_1125(%690) /* ty=Tensor[(5, 2, 15), float64] */;
    %698 = %693.0;
    (%694, %695, meta[relay.Constant][47] /* ty=Tensor[(1050), uint16] */, %696, %697, meta[relay.Constant][48] /* ty=Tensor[(150), float64] */, %698, %var_3147)
  };
  %699(%var_3151) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */
}

def @func_5057(%var_5040: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), uint16] {
  %700 = cast(%var_5040, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %701 = cos(%700) /* ty=Tensor[(4, 6, 4), float64] */;
  %702 = cast(%var_5040, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%704, %705) /* ty=Tensor[(4, 6, 4), uint16] */
}

def @func_5646(%var_5639: Tensor[(2, 9, 10), float64]) -> (Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) {
  %706 = cast(%var_5639, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %707 = cast(meta[relay.Constant][49] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %708 = reshape(%707, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %709 = @func_5551(%708) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(616), float32]) */;
  %710 = cosh(%706) /* ty=Tensor[(2, 9, 10), float64] */;
  %711 = %709.2;
  (%710, %711, meta[relay.Constant][49] /* ty=Tensor[(616), float32] */)
}

def @func_3560() -> (Tensor[(12, 5, 3), float64],) {
  %712 = @func_3218() /* ty=Tensor[(12, 5, 3), float64] */;
  (%712,)
}

def @func_1934(%var_1919: Tensor[(13, 6, 7), float32], %var_1920: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), float32], Tensor[(13, 6, 7), float32]) {
  %713 = cast(%var_1920, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %714 = shape_of(%var_1919, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%var_1919, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = cast(%var_1919, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %718 = mod(%715, %716) /* ty=Tensor[(13, 6, 7), float32] */;
  %719 = sqrt(%717) /* ty=Tensor[(13, 6, 7), float32] */;
  (%718, %719)
}

def @func_3304(%var_3303: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
  %726 = fn (%var_3278: Tensor[(12, 5, 3), float32]) -> Tensor[(12, 5, 3), int8] {
    %720 = @func_2833() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %721 = %720.0;
    %722 = cast(%var_3278, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
    %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%721, dtype="int8") /* ty=Tensor[(12, 5, 3), int8] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    multiply(%724, %725) /* ty=Tensor[(12, 5, 3), int8] */
  };
  %726(%var_3303) /* ty=Tensor[(12, 5, 3), int8] */
}

def @func_4963(%var_4961: Tensor[(640), float64], %var_4962: Tensor[(8, 16, 5), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
  %738 = fn (%var_4938: Tensor[(640), float64], %var_4940: Tensor[(8, 16, 5), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) {
    %727 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %728 = cast(%var_4938, dtype="float64") /* ty=Tensor[(640), float64] */;
    %729 = reshape(%728, newshape=[640]) /* ty=Tensor[(640), float64] */;
    %730 = @func_3150(%729) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(1050), uint16], Tensor[(8, 12, 5), float32], Tensor[(5, 2, 15), float64], Tensor[(150), float64], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */;
    %731 = %730.6;
    %732 = cast(%var_4940, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
    %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%731, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %736 = %727.0;
    %737 = divide(%734, %735) /* ty=Tensor[(8, 16, 5), float64] */;
    (%736, %var_4938, %737)
  };
  %738(%var_4961, %var_4962) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(640), float64], Tensor[(8, 16, 5), float64]) */
}

def @func_3218() -> Tensor[(12, 5, 3), float64] {
  %739 = @func_3124() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %739.0
}

def @func_5310() -> (Tensor[(12, 5, 3), bool],) {
  %740 = @func_3978() /* ty=(Tensor[(12, 5, 3), float64],) */;
  %741 = %740.0;
  %742 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 5, 3), float64] */, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = greater(%744, %745) /* ty=Tensor[(12, 5, 3), bool] */;
  (%746,)
}

def @func_5712(%var_5711: Tensor[(64), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) {
  %755 = fn (%var_5704: Tensor[(64), float64]) -> (Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) {
    %747 = @func_5484() /* ty=(Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) */;
    %748 = cast(%var_5704, dtype="float64") /* ty=Tensor[(64), float64] */;
    %749 = cast(%var_5704, dtype="float64") /* ty=Tensor[(64), float64] */;
    %750 = reshape(%748, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %751 = reshape(%749, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %752 = @func_222(%750, %751) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) */;
    %753 = %747.4;
    %754 = %752.2;
    (%753, %754, %var_5704)
  };
  %755(%var_5711) /* ty=(Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(64), float64]) */
}

def @func_388(%var_380: Tensor[(8, 16, 5), float64]) -> (Tensor[(8, 16, 5), float64],) {
  %756 = cast(%var_380, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %757 = log10(%756) /* ty=Tensor[(8, 16, 5), float64] */;
  (%757,)
}

def @func_6433() -> (Tensor[(64), float64],) {
  %758 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %759 = %758.3;
  (%759,)
}

def @func_6511() -> Tensor[(12, 5, 3), float64] {
  %760 = @func_4856() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(672), uint32], Tensor[(672), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), int8], Tensor[(8, 4, 2), int64], Tensor[(12, 5, 3), float64]) */;
  %760.0
}

def @func_222(%var_188: Tensor[(8, 4, 2), float64], %var_189: Tensor[(8, 4, 2), float64]) -> (Tensor[(8, 4, 2), bool], Tensor[(8, 4, 2), float64], Tensor[(8, 4, 2), int64]) {
  %761 = cast(%var_189, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %762 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_188, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = cast(%var_188, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %766 = cast(%var_189, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %767 = asin(%766) /* ty=Tensor[(8, 4, 2), float64] */;
  %768 = cast(%var_189, dtype="int64") /* ty=Tensor[(8, 4, 2), int64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="int64") /* ty=Tensor[(8, 4, 2), int64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %772 = less(%763, %764) /* ty=Tensor[(8, 4, 2), bool] */;
  %773 = acos(%765) /* ty=Tensor[(8, 4, 2), float64] */;
  %774 = subtract(%770, %771) /* ty=Tensor[(8, 4, 2), int64] */;
  (%772, %773, %774)
}

def @func_1237(%var_1233: Tensor[(3, 15, 7), uint64], %var_1234: Tensor[(2, 320), float64], %var_1235: Tensor[(3, 15, 7), float64], %var_1236: Tensor[(3, 15, 7), float64]) -> (Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) {
  %809 = fn (%var_1182: Tensor[(3, 15, 7), uint64], %var_1207: Tensor[(2, 320), float64], %var_1209: Tensor[(3, 15, 7), float64], %var_1219: Tensor[(3, 15, 7), float64]) -> (Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) {
    %775 = cast(meta[relay.Constant][51] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %776 = cast(%var_1182, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %777 = cast(meta[relay.Constant][52] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %778 = reshape(%777, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %779 = @func_365(%778) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
    %780 = cast(%var_1207, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
    %781 = reshape(%780, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
    %782 = @func_388(%781) /* ty=(Tensor[(8, 16, 5), float64],) */;
    %783 = %782.0;
    %784 = cast(%783, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
    %785 = reshape(%784, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
    %786 = @func_388(%785) /* ty=(Tensor[(8, 16, 5), float64],) */;
    %787 = cast(%var_1182, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %788 = asin(%787) /* ty=Tensor[(3, 15, 7), float64] */;
    %789 = cast(%var_1219, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
    %791 = cast(%788, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %793 = cast(%788, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %794 = sinh(%793) /* ty=Tensor[(3, 15, 7), float64] */;
    %795 = cast(%var_1209, dtype="int16") /* ty=Tensor[(3, 15, 7), int16] */;
    %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%794, dtype="int16") /* ty=Tensor[(3, 15, 7), int16] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %799 = right_shift(%797, %798) /* ty=Tensor[(3, 15, 7), int16] */;
    %800 = cast(%788, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %804 = greater_equal(%775, %776) /* ty=Tensor[(3, 15, 7), bool] */;
    %805 = %779.1;
    %806 = %786.0;
    %807 = power(%791, %792) /* ty=Tensor[(3, 15, 7), float32] */;
    %808 = bitwise_or(%802, %803) /* ty=Tensor[(3, 15, 7), int8] */;
    (%804, %805, meta[relay.Constant][52] /* ty=Tensor[(480), float32] */, %783, %var_1207, %806, %807, %808)
  };
  %809(%var_1233, %var_1234, %var_1235, %var_1236) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(8, 16, 5), float64], Tensor[(2, 320), float64], Tensor[(8, 16, 5), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), int8]) */
}

def @func_5485() -> (Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) {
  %820 = fn () -> (Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) {
    %810 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
    %811 = cast(meta[relay.Constant][53] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %812 = reshape(%811, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float64] */;
    %813 = @func_3936(%812) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(12, 5, 3), float32], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64]) */;
    %814 = @func_3352() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %815 = @func_4374() /* ty=(Tensor[(12, 5, 3), float32],) */;
    %816 = %810.0;
    %817 = %813.0;
    %818 = %814.0;
    %819 = %815.0;
    (%816, %817, meta[relay.Constant][53] /* ty=Tensor[(180), float64] */, %818, %819)
  };
  %820() /* ty=(Tensor[(8, 12, 5), float32], Tensor[(12, 5, 3), bool], Tensor[(180), float64], Tensor[(12, 5, 3), float32], Tensor[(12, 5, 3), float32]) */
}

def @func_4628(%var_4627: Tensor[(180), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(2, 8), float32], Tensor[(1400), float64], Tensor[(12, 5, 3), uint64], Tensor[(180), float32], Tensor[(8, 12, 5), float32]) {
  %842 = fn (%var_4604: Tensor[(180), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(2, 8), float32], Tensor[(1400), float64], Tensor[(12, 5, 3), uint64], Tensor[(180), float32], Tensor[(8, 12, 5), float32]) {
    %821 = @func_3535() /* ty=(Tensor[(8, 12, 5), float32],) */;
    %822 = %821.0;
    %823 = cast(%822, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
    %824 = sqrt(%823) /* ty=Tensor[(8, 12, 5), float64] */;
    %825 = cast(%824, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %826 = reshape(%825, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %827 = @func_365(%826) /* ty=(Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(8, 4, 2), float32]) */;
    %828 = cast(meta[relay.Constant][54] /* ty=Tensor[(1400), float64] */, dtype="float64") /* ty=Tensor[(1400), float64] */;
    %829 = reshape(%828, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
    %830 = @func_1828(%829) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
    %831 = cast(%var_4604, dtype="float32") /* ty=Tensor[(180), float32] */;
    %832 = reshape(%831, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), float32] */;
    %833 = @func_2968(%832) /* ty=(Tensor[(12, 5, 3), int64], Tensor[(12, 5, 3), uint64]) */;
    %834 = cast(%822, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %835 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(%824, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %838 = %827.2;
    %839 = %830.2;
    %840 = %833.1;
    %841 = floor_mod(%836, %837) /* ty=Tensor[(8, 12, 5), float32] */;
    (%838, %839, meta[relay.Constant][54] /* ty=Tensor[(1400), float64] */, %840, %var_4604, %841)
  };
  %842(%var_4627) /* ty=(Tensor[(8, 4, 2), float32], Tensor[(2, 8), float32], Tensor[(1400), float64], Tensor[(12, 5, 3), uint64], Tensor[(180), float32], Tensor[(8, 12, 5), float32]) */
}

def @func_3894(%var_3892: Tensor[(10, 16, 13), uint32]) -> Tensor[(10, 16, 13), uint32] {
  @func_3891(%var_3892) /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_7437(%var_7426: Tensor[(2, 336), uint32], %var_7427: Tensor[(64), float64]) -> (Tensor[(8, 12, 5), float32], Tensor[(64), float64], Tensor[(2, 336), uint32], Tensor[(64), float64], Tensor[(12, 5, 3), float64]) {
  %843 = @func_6937() /* ty=(Tensor[(8, 12, 5), float32],) */;
  %844 = cast(%var_7426, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %845 = cast(%var_7427, dtype="float64") /* ty=Tensor[(64), float64] */;
  %846 = reshape(%844, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint32] */;
  %847 = reshape(%845, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %848 = @func_2751(%846, %847) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(64), float64], Tensor[(4, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(640), float64], Tensor[(1050), uint16]) */;
  %849 = %843.0;
  %850 = %848.1;
  %851 = @func_7293() /* ty=Tensor[(12, 5, 3), float64] */;
  (%849, %850, %var_7426, %var_7427, %851)
}

def @func_6916(%var_6915: Tensor[(1100), uint32]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) {
  %864 = fn (%var_6905: Tensor[(1100), uint32]) -> (Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) {
    %852 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %853 = cast(meta[relay.Constant][55] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %854 = cast(%var_6905, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %855 = cast(meta[relay.Constant][56] /* ty=Tensor[(693), uint8] */, dtype="uint8") /* ty=Tensor[(693), uint8] */;
    %856 = reshape(%853, newshape=[]) /* ty=uint32 */;
    %857 = reshape(%854, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
    %858 = reshape(%855, newshape=[7, 99]) /* ty=Tensor[(7, 99), uint8] */;
    %859 = @func_5425(%856, %857, %858) /* ty=(Tensor[(11, 10, 10), uint32], Tensor[(12, 5, 3), float32], Tensor[(8, 4, 2), int64], Tensor[(11, 10, 10), bool], Tensor[(11, 10, 10), int64], Tensor[(12, 5, 3), float32], Tensor[(8, 16, 5), float64], Tensor[(7, 99), uint8], Tensor[(640), float64]) */;
    %860 = cast(%var_6905, dtype="float64") /* ty=Tensor[(1100), float64] */;
    %861 = %852.0;
    %862 = %859.8;
    %863 = tan(%860) /* ty=Tensor[(1100), float64] */;
    (%861, %862, meta[relay.Constant][55] /* ty=uint32 */, meta[relay.Constant][56] /* ty=Tensor[(693), uint8] */, %863)
  };
  %864(%var_6915) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(640), float64], uint32, Tensor[(693), uint8], Tensor[(1100), float64]) */
}

def @func_6513() -> Tensor[(12, 5, 3), float64] {
  @func_6511() /* ty=Tensor[(12, 5, 3), float64] */
}

def @func_3979() -> (Tensor[(12, 5, 3), float64],) {
  %867 = fn () -> (Tensor[(12, 5, 3), float64],) {
    %865 = @func_3560() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %866 = %865.0;
    (%866,)
  };
  %867() /* ty=(Tensor[(12, 5, 3), float64],) */
}

def @func_7265(%var_7264: Tensor[(700, 2), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), float64], Tensor[(2, 8), float32], Tensor[(700, 2), float64], Tensor[(616), float32]) {
  %880 = fn (%var_7255: Tensor[(700, 2), float64]) -> (Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), float64], Tensor[(2, 8), float32], Tensor[(700, 2), float64], Tensor[(616), float32]) {
    %868 = @func_5579() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %869 = @func_6769() /* ty=(Tensor[(12, 5, 3), float64],) */;
    %870 = cast(%var_7255, dtype="float64") /* ty=Tensor[(700, 2), float64] */;
    %871 = reshape(%870, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float64] */;
    %872 = @func_1828(%871) /* ty=(Tensor[(10, 14, 10), float64], Tensor[(1, 8, 2), float32], Tensor[(2, 8), float32]) */;
    %873 = %869.0;
    %874 = cast(%873, dtype="float64") /* ty=Tensor[(12, 5, 3), float64] */;
    %875 = reshape(%874, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
    %876 = @func_5646(%875) /* ty=(Tensor[(2, 9, 10), float64], Tensor[(616), float32], Tensor[(616), float32]) */;
    %877 = %868.0;
    %878 = %872.2;
    %879 = %876.2;
    (%877, %873, %878, %var_7255, %879)
  };
  %880(%var_7264) /* ty=(Tensor[(12, 5, 3), float64], Tensor[(12, 5, 3), float64], Tensor[(2, 8), float32], Tensor[(700, 2), float64], Tensor[(616), float32]) */
}

def @func_5233() -> (Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) {
  @func_5231() /* ty=(Tensor[(12, 5, 3), float64], Tensor[(5, 10, 8), float32], Tensor[(400), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64]) */
}

def @func_3891(%var_3887: Tensor[(10, 16, 13), uint32]) -> Tensor[(10, 16, 13), uint32] {
  %881 = cast(%var_3887, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %882 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%883, %884) /* ty=Tensor[(10, 16, 13), uint32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen332/build/output.py:2070: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen332/build/output.py", line 2075, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(20) tvmgen_default_fused_reshape_power_kernel0(float* __restrict__ T_power, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = powf(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

