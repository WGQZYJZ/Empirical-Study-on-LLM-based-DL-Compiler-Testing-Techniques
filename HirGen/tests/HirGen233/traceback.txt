==========mod==========
#[version = "0.0.5"]
def @func_749() -> (Tensor[(?, 11, 10), uint16],) {
  %0 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %1 = %0.1;
  (%1,)
}

def @func_1862() -> Tensor[(?, 11, 10), float32] {
  %2 = @func_749() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  sin(%4) /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_4597(%var_4558: Tensor[(14, 11, 10), uint16]) -> Tensor[(14, 11, 10), float64] {
  %5 = @func_3250() /* ty=Tensor[(?, 11, 10), uint16] */;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  %7 = cast(%var_4558, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %8 = power(%6, %7) /* ty=Tensor[(14, 11, 10), float64] */;
  %9 = cast(%5, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %10 = cast(%8, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
  %11 = subtract(%9, %10) /* ty=Tensor[(14, 11, 10), float32] */;
  %12 = cast(%8, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %16 = minimum(%14, %15) /* ty=Tensor[(14, 11, 10), float32] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  asin(%17) /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_2813() -> (Tensor[(2, 9, 10), int16],) {
  %18 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  (%18,)
}

def @func_4842() -> Tensor[(?, 11, 10), float32] {
  %19 = @func_3169() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %19.0
}

def @func_1466(%var_1445: Tensor[(1100), int64]) -> (Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) {
  %20 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %21 = cast(%var_1445, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %22 = reshape(%21, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %23 = @func_645(%22) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %24 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %25 = %20.0;
  %26 = %23.0;
  %27 = %24.0;
  (%25, %26, %var_1445, %27)
}

def @func_3448(%var_3426: Tensor[(6, 220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), uint16]) {
  %28 = cast(%var_3426, dtype="uint16") /* ty=Tensor[(6, 220), uint16] */;
  %29 = reshape(%28, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %30 = @func_1267(%29) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) */;
  %31 = @func_2668() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) */;
  %32 = @func_3293() /* ty=Tensor[(?, 11, 10), float32] */;
  %33 = %30.0;
  %34 = %31.1;
  (%32, %33, %var_3426, %34)
}

def @func_5149() -> Tensor[(2, 1, 10), float64] {
  %35 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %35.0
}

def @func_5562() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) {
  %36 = @func_5098() /* ty=(Tensor[(?, 11, 10), int8],) */;
  %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %38 = reshape(%37, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %39 = @func_2266(%38) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %42 = @func_5376() /* ty=Tensor[(2, 1, 10), float64] */;
  %43 = %36.0;
  %44 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  %45 = erf(%41) /* ty=Tensor[(2, 1, 10), float32] */;
  (%42, %43, %44, meta[relay.Constant][0] /* ty=Tensor[(1320), uint16] */, %45)
}

def @func_5663() -> (Tensor[(9, 7, 2), int16], Tensor[(14, 5, 14), int8], Tensor[(630), float64], Tensor[(9, 7, 2), float32], Tensor[(2, 8, 10), uint8]) {
  %46 = @func_3059() /* ty=(Tensor[(9, 7, 2), float64],) */;
  %47 = %46.0;
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 7, 2), float64] */, dtype="int16") /* ty=Tensor[(9, 7, 2), int16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int16") /* ty=Tensor[(9, 7, 2), int16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %54 = reshape(%52, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float64] */;
  %55 = reshape(%53, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float64] */;
  %56 = @func_3047(%54, %55) /* ty=(Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) */;
  %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 7, 2), float64] */, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %58 = sigmoid(%57) /* ty=Tensor[(9, 7, 2), float32] */;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %60 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %61 = minimum(%50, %51) /* ty=Tensor[(9, 7, 2), int16] */;
  %62 = %56.1;
  %63 = exp(%59) /* ty=Tensor[(9, 7, 2), float32] */;
  %64 = %60.1;
  (%61, %62, meta[relay.Constant][2] /* ty=Tensor[(630), float64] */, %63, %64)
}

def @func_4955() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %65 = @func_4341() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
  %66 = %65.0;
  %67 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  (%66, %67)
}

def @func_4196() -> (Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) {
  %68 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %69 = %68.1;
  %70 = @func_2632() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) */;
  %71 = %70.3;
  %72 = cast(%71, dtype="int8") /* ty=Tensor[(?, 11, 10), int8] */;
  %73 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%69, dtype="int8") /* ty=Tensor[(?, 11, 10), int8] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %76 = cast(%71, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %77 = sqrt(%76) /* ty=Tensor[(?, 11, 10), float32] */;
  %78 = cast(%69, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = add(%74, %75) /* ty=Tensor[(?, 11, 10), int8] */;
  %83 = less(%80, %81) /* ty=Tensor[(?, 11, 10), bool] */;
  (%82, %83)
}

def @func_5290() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
  %84 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %85 = @func_4132() /* ty=Tensor[(2, 1, 10), float64] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %87 = %84.1;
  %88 = rsqrt(%86) /* ty=Tensor[(2, 1, 10), float64] */;
  (%87, %88)
}

def @func_6715() -> (Tensor[(?, 11, 10), float32],) {
  %89 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %90 = %89.0;
  (%90,)
}

def @func_3250() -> Tensor[(?, 11, 10), uint16] {
  %91 = @func_1981() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) */;
  %91.1
}

def @func_1267(%var_1265: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) {
  %92 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %93 = cast(%var_1265, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %94 = cast(%var_1265, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %95 = reshape(%93, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %96 = reshape(%94, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %97 = @func_1018(%95, %96) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %98 = %92.0;
  %99 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %100 = %97.1;
  (%98, %99, %100, %var_1265)
}

def @func_1600() -> (Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) {
  %101 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
  %104 = log2(%103) /* ty=Tensor[(2, ?, 10), float64] */;
  %105 = cast(%102, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = floor_mod(%107, %108) /* ty=Tensor[(2, ?, 10), float64] */;
  %110 = cast(%109, dtype="uint32") /* ty=Tensor[(2, ?, 10), uint32] */;
  %111 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%104, dtype="uint32") /* ty=Tensor[(2, ?, 10), uint32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %114 = cast(%104, dtype="uint8") /* ty=Tensor[(2, ?, 10), uint8] */;
  %115 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 8, 10), float64] */, dtype="uint8") /* ty=Tensor[(2, 8, 10), uint8] */;
  %116 = maximum(%112, %113) /* ty=Tensor[(2, ?, 10), uint32] */;
  %117 = logical_xor(%114, %115) /* ty=Tensor[(2, 8, 10), uint8] */;
  (%116, %117)
}

def @func_2123(%var_2113: Tensor[(14, 5, 14), bool]) -> Tensor[(14, 5, 14), bool] {
  %118 = cast(%var_2113, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
  %119 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%120, %121) /* ty=Tensor[(14, 5, 14), bool] */
}

def @func_2585() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_6275() -> (Tensor[(2, 1, 10), float64],) {
  %122 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
  %123 = %122.0;
  (%123,)
}

def @func_1819(%var_1756: Tensor[(448), float64], %var_1811: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) {
  %124 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %125 = cast(%var_1756, dtype="float64") /* ty=Tensor[(448), float64] */;
  %126 = reshape(%125, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float64] */;
  %127 = @func_330(%126) /* ty=(Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) */;
  %128 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
  %129 = @func_773() /* ty=Tensor[(?, 11, 10), float32] */;
  %130 = cast(%129, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
  %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 11, 10), float32] */, dtype="uint8") /* ty=Tensor[(15, 11, 10), uint8] */;
  %132 = cast(%var_1811, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %133 = cast(%var_1811, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %134 = reshape(%132, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %135 = reshape(%133, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %136 = @func_1018(%134, %135) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %137 = %124.0;
  %138 = %127.1;
  %139 = %128.2;
  %140 = bitwise_or(%130, %131) /* ty=Tensor[(15, 11, 10), uint8] */;
  %141 = %136.3;
  (%137, %138, %var_1756, %139, %140, %141, %var_1811)
}

def @func_5587() -> Tensor[(12, 11, 10), bool] {
  %142 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 11, 10), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  greater_equal(%143, %144) /* ty=Tensor[(12, 11, 10), bool] */
}

def @func_448() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
  %145 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %147 = sinh(%146) /* ty=Tensor[(?, 11, 10), float32] */;
  %148 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%147, %148)
}

def @func_6408(%var_6402: Tensor[(4, 11, 3), float32], %var_6403: Tensor[(4, 11, 3), float32]) -> (Tensor[(4, 11, 3), float32],) {
  %149 = cast(%var_6403, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %150 = shape_of(%var_6402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_6402, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %153 = power(%151, %152) /* ty=Tensor[(4, 11, 3), float32] */;
  (%153,)
}

def @func_815() -> (Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) {
  %154 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %155 = cast(meta[relay.Constant][7] /* ty=Tensor[(1540), uint16] */, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %156 = reshape(%155, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), uint16] */;
  %157 = @func_709(%156) /* ty=(Tensor[(14, 11, 10), uint64],) */;
  %158 = %154.1;
  %159 = %157.0;
  %160 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%158, %159, meta[relay.Constant][7] /* ty=Tensor[(1540), uint16] */, %160)
}

def @func_3901(%var_3885: Tensor[(11, 7, 13), float32], %var_3892: Tensor[(7, 140), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(14, 5, 14), bool], Tensor[(7, 140), bool], Tensor[(2, 1, 10), float64]) {
  %161 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %162 = shape_of(%var_3885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_3885, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = cast(%var_3892, dtype="bool") /* ty=Tensor[(7, 140), bool] */;
  %166 = reshape(%165, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %167 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %168 = floor_divide(%163, %164) /* ty=Tensor[(11, 7, 13), float32] */;
  %169 = @func_2123(%166) /* ty=Tensor[(14, 5, 14), bool] */;
  %170 = %167.1;
  (%168, %169, %var_3892, %170)
}

def @func_2357(%var_2290: uint32) -> (Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) {
  %171 = cast(%var_2290, dtype="uint32") /* ty=uint32 */;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 4, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 4, 5), uint32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 4, 5), uint32] */, dtype="float32") /* ty=Tensor[(7, 4, 5), float32] */;
  %174 = atan(%173) /* ty=Tensor[(7, 4, 5), float32] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(7, 4, 5), float32] */;
  %176 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %177 = bitwise_or(%171, %172) /* ty=Tensor[(7, 4, 5), uint32] */;
  %178 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %179 = cos(%175) /* ty=Tensor[(7, 4, 5), float32] */;
  %180 = %176.0;
  (%177, %178, %179, %180)
}

def @func_1490() -> (Tensor[(?, 11, 10), uint16],) {
  %181 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %182 = %181.0;
  (%182,)
}

def @func_298() -> Tensor[(?, 11, 10), uint16] {
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
  %184 = asinh(%183) /* ty=Tensor[(1, 11, 10), float64] */;
  %185 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 11, 10), float64] */, dtype="uint16") /* ty=Tensor[(1, 11, 10), uint16] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="uint16") /* ty=Tensor[(1, 11, 10), uint16] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%187, %188) /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_1714() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) {
  %189 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %190 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %191 = %189.1;
  %192 = %190.1;
  %193 = @func_1698() /* ty=Tensor[(3, 6), float64] */;
  (%191, %192, %193)
}

def @func_1890() -> (Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) {
  %194 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
  %195 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %196 = %194.2;
  (%195, %196)
}

def @func_3169() -> (Tensor[(?, 11, 10), float32],) {
  %197 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %198 = %197.1;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %200 = cosh(%199) /* ty=Tensor[(?, 11, 10), float32] */;
  (%200,)
}

def @func_1981() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) {
  %201 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %202 = %201.1;
  %203 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%202, %203)
}

def @func_4670(%var_4665: Tensor[(4, 11, 10), uint16]) -> (Tensor[(4, 11, 10), uint8],) {
  %204 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
  %207 = cast(%var_4665, dtype="uint8") /* ty=Tensor[(4, 11, 10), uint8] */;
  %208 = bitwise_xor(%206, %207) /* ty=Tensor[(4, 11, 10), uint8] */;
  (%208,)
}

def @func_4922(%var_4914: Tensor[(12, 11, 10), uint16]) -> (Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) {
  %209 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %210 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %211 = cast(%210, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %212 = cast(%var_4914, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %213 = %209.0;
  %214 = logical_and(%211, %212) /* ty=Tensor[(12, 11, 10), bool] */;
  (%213, %214)
}

def @func_6073() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float32]) {
  %215 = @func_4955() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
  %216 = @func_726() /* ty=Tensor[(2, 1, 10), float64] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %218 = %215.0;
  %219 = sigmoid(%217) /* ty=Tensor[(2, 1, 10), float32] */;
  (%218, %219)
}

def @func_6350(%var_6342: Tensor[(11, 11, 10), float32]) -> Tensor[(11, 11, 10), int32] {
  %220 = @func_2957() /* ty=Tensor[(?, 11, 10), float32] */;
  %221 = cast(%220, dtype="int32") /* ty=Tensor[(?, 11, 10), int32] */;
  %222 = cast(%var_6342, dtype="int32") /* ty=Tensor[(11, 11, 10), int32] */;
  bitwise_or(%221, %222) /* ty=Tensor[(11, 11, 10), int32] */
}

def @func_3734() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), int16]) {
  %223 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %224 = @func_2813() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %225 = %223.0;
  %226 = %224.0;
  (%225, %226)
}

def @func_3047(%var_2994: Tensor[(9, 14, 5), float64], %var_2995: Tensor[(9, 14, 5), float64]) -> (Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) {
  %227 = cast(%var_2995, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %228 = shape_of(%var_2994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%var_2994, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(48, 1), uint32] */, dtype="uint32") /* ty=Tensor[(48, 1), uint32] */;
  %233 = reshape(%231, newshape=[]) /* ty=uint32 */;
  %234 = reshape(%232, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint32] */;
  %235 = @func_2491(%233, %234) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) */;
  %236 = cast(%var_2994, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %237 = %235.2;
  %238 = cast(%237, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
  %239 = reshape(%238, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(48, 1), uint32] */, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %241 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %242 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
  %243 = less(%229, %230) /* ty=Tensor[(9, 14, 5), bool] */;
  %244 = sigmoid(%236) /* ty=Tensor[(9, 14, 5), float32] */;
  %245 = @func_2123(%239) /* ty=Tensor[(14, 5, 14), bool] */;
  %246 = atanh(%240) /* ty=Tensor[(48, 1), float64] */;
  %247 = %241.0;
  %248 = %242.1;
  (%243, %237, meta[relay.Constant][11] /* ty=uint32 */, %244, %245, %246, %247, %248)
}

def @func_5084(%var_5080: Tensor[(3, 3, 4), float64]) -> Tensor[(3, 3, 4), float64] {
  %249 = cast(%var_5080, dtype="float64") /* ty=Tensor[(3, 3, 4), float64] */;
  asin(%249) /* ty=Tensor[(3, 3, 4), float64] */
}

def @func_4341() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %250 = @func_2938() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %251 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %252 = %250.0;
  (%251, %252)
}

def @func_773() -> Tensor[(?, 11, 10), float32] {
  %253 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %253.0
}

def @func_2938() -> (Tensor[(?, 11, 10), float32],) {
  %254 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %255 = %254.0;
  (%255,)
}

def @func_6492() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
  %256 = @func_5290() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) */;
  %257 = %256.0;
  %258 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  (%257, %258)
}

def @func_3131() -> Tensor[(?, 11, 10), uint16] {
  @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_5922(%var_5806: Tensor[(1320), uint16], %var_5840: Tensor[(1100), int64]) -> (Tensor[(2, 8, 10), uint8], Tensor[(11, 3, 13), float32], Tensor[(1320), uint16], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), float32], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float64], Tensor[(1100), float32], Tensor[(?, 11, 10), uint16]) {
  %259 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %260 = cast(%var_5806, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %261 = cast(%var_5806, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %262 = reshape(%260, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %263 = reshape(%261, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %264 = @func_1018(%262, %263) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %265 = %264.4;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %267 = cast(%var_5840, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %268 = reshape(%267, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %269 = @func_645(%268) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %270 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %271 = @func_1890() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) */;
  %272 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %273 = cast(%var_5806, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %274 = cast(%var_5806, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %275 = reshape(%273, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %276 = reshape(%274, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %277 = @func_1018(%275, %276) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %278 = @func_4098() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %279 = cast(%var_5840, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %280 = exp(%279) /* ty=Tensor[(1100), float32] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %282 = asinh(%281) /* ty=Tensor[(1100), float64] */;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %284 = sigmoid(%283) /* ty=Tensor[(1100), float32] */;
  %285 = cast(meta[relay.Constant][13] /* ty=Tensor[(1100), float32] */, dtype="bool") /* ty=Tensor[(1100), bool] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%284, dtype="bool") /* ty=Tensor[(1100), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), bool] */;
  %289 = not_equal(%287, %288) /* ty=Tensor[(1100), bool] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %291 = @func_4896() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %292 = %259.1;
  %293 = @func_4784() /* ty=Tensor[(11, 3, 13), float32] */;
  %294 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  %295 = sinh(%266) /* ty=Tensor[(2, 1, 10), float32] */;
  %296 = %269.0;
  %297 = %270.0;
  %298 = %271.1;
  %299 = %272.1;
  %300 = %277.4;
  %301 = %278.1;
  %302 = log(%290) /* ty=Tensor[(1100), float32] */;
  %303 = %291.0;
  (%292, %293, %var_5806, %294, %295, %296, %297, %298, %299, %300, %301, %302, %303)
}

def @func_6583(%var_6560: Tensor[(11, 15, 11), uint64], %var_6561: Tensor[(11, 15, 11), uint64]) -> (Tensor[(11, 15, 11), bool], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float64]) {
  %304 = cast(%var_6561, dtype="bool") /* ty=Tensor[(11, 15, 11), bool] */;
  %305 = shape_of(%var_6560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_6560, dtype="bool") /* ty=Tensor[(11, 15, 11), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %309 = less_equal(%306, %307) /* ty=Tensor[(11, 15, 11), bool] */;
  %310 = %308.1;
  %311 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  (%309, %310, %311)
}

def @func_3598() -> Tensor[(?, 11, 10), float32] {
  %312 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  acosh(%314) /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_2668() -> (Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) {
  %315 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %316 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %317 = %315.1;
  (%316, %317)
}

def @func_3384(%var_3362: Tensor[(8, 16, 15), float64], %var_3363: Tensor[(8, 16, 15), float64], %var_3382: Tensor[(1320), uint16]) -> (Tensor[(8, 16, 15), float64], Tensor[(2, ?, 10), int64], Tensor[(1100), int64], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
  %318 = cast(%var_3363, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %319 = shape_of(%var_3362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_3362, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(1100), int64] */, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %323 = reshape(%322, newshape=[550, 2]) /* ty=Tensor[(550, 2), int64] */;
  %324 = @func_2447(%323) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) */;
  %325 = cast(%var_3382, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %326 = cast(%var_3382, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %327 = reshape(%325, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %328 = reshape(%326, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %329 = @func_1018(%327, %328) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %330 = divide(%320, %321) /* ty=Tensor[(8, 16, 15), float64] */;
  %331 = %324.1;
  %332 = %329.0;
  (%330, %331, meta[relay.Constant][14] /* ty=Tensor[(1100), int64] */, %332, %var_3382)
}

def @func_5460(%var_5425: Tensor[(5, 13, 2), float64]) -> (Tensor[(5, 13, 2), float64], Tensor[(2, 9, 10), float32]) {
  %333 = cast(%var_5425, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
  %334 = atan(%333) /* ty=Tensor[(5, 13, 2), float64] */;
  %335 = @func_4661() /* ty=Tensor[(2, 9, 10), float32] */;
  (%334, %335)
}

def @func_6684() -> (Tensor[(?, 11, 10), float64], Tensor[(2, 1, 10), float64]) {
  %336 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %337 = @func_6460() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) */;
  %338 = %336.1;
  %339 = %337.0;
  (%338, %339)
}

def @func_2697() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) {
  %340 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %341 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %343 = asinh(%342) /* ty=Tensor[(2, 9, 10), float64] */;
  %344 = cast(%341, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %348 = %340.0;
  %349 = floor_mod(%346, %347) /* ty=Tensor[(2, 9, 10), float64] */;
  (%348, %349)
}

def @func_4231() -> Tensor[(?, 11, 10), int8] {
  %350 = @func_4196() /* ty=(Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) */;
  %350.0
}

def @func_898() -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
  %351 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %352 = %351.1;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %354 = tan(%353) /* ty=Tensor[(2, 1, 10), float64] */;
  %355 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 1, 10), float64] */, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %359 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %361 = logical_xor(%357, %358) /* ty=Tensor[(2, ?, 10), int64] */;
  %362 = cos(%360) /* ty=Tensor[(?, 11, 10), float32] */;
  (%361, %362)
}

def @func_2106(%var_2072: Tensor[(2, 11, 10), uint16], %var_2104: Tensor[(1320), uint16]) -> (Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) {
  %363 = @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %365 = cast(%var_2072, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %366 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %367 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %368 = cast(meta[relay.Constant][16] /* ty=Tensor[(448, 1), float64] */, dtype="float64") /* ty=Tensor[(448, 1), float64] */;
  %369 = cast(%var_2104, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %370 = reshape(%368, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %371 = reshape(%369, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %372 = @func_1819(%370, %371) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) */;
  %373 = floor_divide(%364, %365) /* ty=Tensor[(2, 11, 10), float32] */;
  %374 = %366.0;
  %375 = @func_1698() /* ty=Tensor[(3, 6), float64] */;
  %376 = %367.0;
  %377 = %372.2;
  (%373, %374, %375, %376, %377, meta[relay.Constant][16] /* ty=Tensor[(448, 1), float64] */, %var_2104)
}

def @func_2632() -> (Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) {
  %378 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 220), uint16] */, dtype="uint16") /* ty=Tensor[(6, 220), uint16] */;
  %379 = reshape(%378, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %380 = @func_1267(%379) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) */;
  %381 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %382 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %383 = %380.3;
  %384 = %381.0;
  (%382, %383, meta[relay.Constant][17] /* ty=Tensor[(6, 220), uint16] */, %384)
}

def @func_645(%var_626: Tensor[(10, 10, 11), int64]) -> (Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) {
  %385 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 10, 11), int64] */, dtype="int64") /* ty=Tensor[(1, 10, 11), int64] */;
  %386 = cast(%var_626, dtype="int64") /* ty=Tensor[(10, 10, 11), int64] */;
  %387 = right_shift(%385, %386) /* ty=Tensor[(10, 10, 11), int64] */;
  %388 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%387, %388)
}

def @func_1429() -> Tensor[(2, 9, 10), int16] {
  %389 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %390 = %389.0;
  %391 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %392 = %391.1;
  %393 = cast(%390, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %397 = subtract(%395, %396) /* ty=Tensor[(2, ?, 10), int64] */;
  %398 = cast(%397, dtype="bool") /* ty=Tensor[(2, ?, 10), bool] */;
  %399 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%390, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = not_equal(%400, %401) /* ty=Tensor[(2, ?, 10), bool] */;
  %403 = cast(%402, dtype="int16") /* ty=Tensor[(2, ?, 10), int16] */;
  %404 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 9, 10), bool] */, dtype="int16") /* ty=Tensor[(2, 9, 10), int16] */;
  bitwise_or(%403, %404) /* ty=Tensor[(2, 9, 10), int16] */
}

def @func_6546(%var_6536: Tensor[(9, 8, 8), float64]) -> Tensor[(9, 8, 8), float64] {
  %405 = cast(%var_6536, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  erf(%405) /* ty=Tensor[(9, 8, 8), float64] */
}

def @func_726() -> Tensor[(2, 1, 10), float64] {
  %406 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %406.0
}

def @main(%var_6813: uint32) -> Tensor[(6, 6, 8), uint32] {
  %407 = cast(%var_6813, dtype="uint32") /* ty=uint32 */;
  %408 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 6, 8), uint32] */, dtype="uint32") /* ty=Tensor[(6, 6, 8), uint32] */;
  right_shift(%407, %408) /* ty=Tensor[(6, 6, 8), uint32] */
}

def @func_2957() -> Tensor[(?, 11, 10), float32] {
  @func_773() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_2978() -> (Tensor[(?, 11, 10), float32],) {
  %409 = @func_1862() /* ty=Tensor[(?, 11, 10), float32] */;
  (%409,)
}

def @func_6378() -> Tensor[(2, 1, 10), float64] {
  @func_4287() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_3237() -> (Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) {
  %410 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %411 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %412 = %410.0;
  %413 = %411.0;
  (%412, %413)
}

def @func_2155() -> (Tensor[(2, 9, 10), int16],) {
  %414 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  (%414,)
}

def @func_1698() -> Tensor[(3, 6), float64] {
  %415 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 6), float64] */;
  asin(%415) /* ty=Tensor[(3, 6), float64] */
}

def @func_4132() -> Tensor[(2, 1, 10), float64] {
  %416 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
  %416.0
}

def @func_2780(%var_2740: Tensor[(15, 11, 10), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(15, 11, 10), int16], Tensor[(?, 11, 10), float64]) {
  %417 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %418 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %419 = %418.0;
  %420 = cast(%419, dtype="int16") /* ty=Tensor[(?, 11, 10), int16] */;
  %421 = cast(%var_2740, dtype="int16") /* ty=Tensor[(15, 11, 10), int16] */;
  %422 = %417.1;
  %423 = maximum(%420, %421) /* ty=Tensor[(15, 11, 10), int16] */;
  %424 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%422, %423, %424)
}

def @func_5376() -> Tensor[(2, 1, 10), float64] {
  %425 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %425.0
}

def @func_5687() -> (Tensor[(?, 11, 10), float32],) {
  %426 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
  (%426,)
}

def @func_3276(%var_3266: Tensor[(1, 9, 3), float64]) -> Tensor[(1, 9, 3), float32] {
  %427 = cast(%var_3266, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %428 = erf(%427) /* ty=Tensor[(1, 9, 3), float64] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  asinh(%429) /* ty=Tensor[(1, 9, 3), float32] */
}

def @func_3516() -> (Tensor[(2, 1, 10), float64],) {
  %430 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %431 = %430.0;
  (%431,)
}

def @func_6208(%var_6198: Tensor[(1320), uint16]) -> (Tensor[(11, 3, 13), float32], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
  %432 = cast(%var_6198, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %433 = reshape(%432, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %434 = @func_5955(%433) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) */;
  %435 = @func_4784() /* ty=Tensor[(11, 3, 13), float32] */;
  %436 = %434.0;
  (%435, %436, %var_6198)
}

def @func_1018(%var_946: Tensor[(12, 11, 10), uint16], %var_999: Tensor[(12, 11, 10), uint8]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) {
  %437 = @func_773() /* ty=Tensor[(?, 11, 10), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %439 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %441 = cast(%var_946, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %442 = greater(%440, %441) /* ty=Tensor[(12, 11, 10), bool] */;
  %443 = cast(%var_946, dtype="uint8") /* ty=Tensor[(12, 11, 10), uint8] */;
  %444 = cast(%439, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
  %445 = logical_xor(%443, %444) /* ty=Tensor[(12, 11, 10), uint8] */;
  %446 = cast(%445, dtype="int64") /* ty=Tensor[(12, 11, 10), int64] */;
  %447 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%442, dtype="int64") /* ty=Tensor[(12, 11, 10), int64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %450 = cast(meta[relay.Constant][22] /* ty=Tensor[(1100), int64] */, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %451 = reshape(%450, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %452 = @func_645(%451) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %453 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %454 = cast(%var_999, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %455 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%445, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = erf(%438) /* ty=Tensor[(?, 11, 10), float32] */;
  %459 = bitwise_and(%448, %449) /* ty=Tensor[(12, 11, 10), int64] */;
  %460 = %452.0;
  %461 = %453.1;
  %462 = logical_or(%456, %457) /* ty=Tensor[(12, 11, 10), bool] */;
  %463 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%458, %459, %460, meta[relay.Constant][22] /* ty=Tensor[(1100), int64] */, %461, %462, %463)
}

def @func_2266(%var_2230: Tensor[(1320), uint16]) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %464 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %465 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %466 = cast(%var_2230, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %467 = cast(%var_2230, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %468 = cast(%var_2230, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %469 = reshape(%467, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %470 = reshape(%468, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %471 = @func_1018(%469, %470) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %472 = %471.1;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
  %474 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %475 = %464.0;
  %476 = %465.0;
  %477 = atan(%466) /* ty=Tensor[(1320), float64] */;
  %478 = asin(%473) /* ty=Tensor[(12, 11, 10), float32] */;
  %479 = %474.0;
  %480 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%475, %476, %477, %478, %479, %480)
}

def @func_4784() -> Tensor[(11, 3, 13), float32] {
  %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
  acosh(%481) /* ty=Tensor[(11, 3, 13), float32] */
}

def @func_5098() -> (Tensor[(?, 11, 10), int8],) {
  %482 = @func_4231() /* ty=Tensor[(?, 11, 10), int8] */;
  (%482,)
}

def @func_4287() -> Tensor[(2, 1, 10), float64] {
  @func_4132() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_5722() -> (Tensor[(?, 11, 10), uint16],) {
  %483 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%483,)
}

def @func_6263() -> (Tensor[(2, 9, 10), int16], Tensor[(448), float64], Tensor[(448), float64], Tensor[(1320), uint16], Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %484 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %485 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %486 = cast(meta[relay.Constant][25] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %487 = reshape(%485, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %488 = reshape(%486, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %489 = @func_1819(%487, %488) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) */;
  %490 = @func_4341() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
  %491 = %484.0;
  %492 = %489.2;
  %493 = %490.0;
  %494 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
  (%491, %492, meta[relay.Constant][24] /* ty=Tensor[(448), float64] */, meta[relay.Constant][25] /* ty=Tensor[(1320), uint16] */, %493, %494)
}

def @func_4250(%var_4243: Tensor[(14, 13, 9), float32]) -> Tensor[(14, 13, 9), float32] {
  %495 = cast(%var_4243, dtype="float32") /* ty=Tensor[(14, 13, 9), float32] */;
  exp(%495) /* ty=Tensor[(14, 13, 9), float32] */
}

def @func_1350() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %496 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  %498 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %499 = sigmoid(%497) /* ty=Tensor[(?, 11, 10), float64] */;
  (%498, %499)
}

def @func_4457() -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
  %500 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %501 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %502 = %501.1;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %504 = %500.0;
  %505 = log2(%503) /* ty=Tensor[(?, 11, 10), float32] */;
  (%504, %505)
}

def @func_4757() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
  %506 = @func_3237() /* ty=(Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) */;
  %507 = %506.1;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %509 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %510 = log10(%508) /* ty=Tensor[(?, 11, 10), float32] */;
  %511 = %509.1;
  (%510, %511)
}

def @func_5063() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float32]) {
  %512 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %513 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %514 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %515 = %512.0;
  %516 = %513.0;
  (%514, %515, %516)
}

def @func_5227(%var_5217: Tensor[(220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(2, 9, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(220), uint16], Tensor[(1320), uint16]) {
  %517 = @func_4757() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %518 = %517.1;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %520 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %521 = @func_4661() /* ty=Tensor[(2, 9, 10), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  %523 = cast(%var_5217, dtype="uint16") /* ty=Tensor[(220), uint16] */;
  %524 = cast(meta[relay.Constant][26] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %525 = reshape(%523, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint16] */;
  %526 = reshape(%524, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %527 = @func_2106(%525, %526) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) */;
  %528 = asin(%519) /* ty=Tensor[(?, 11, 10), float32] */;
  %529 = %520.1;
  %530 = sigmoid(%522) /* ty=Tensor[(2, 9, 10), float32] */;
  %531 = %527.3;
  (%528, %529, %530, %531, %var_5217, meta[relay.Constant][26] /* ty=Tensor[(1320), uint16] */)
}

def @func_1739() -> Tensor[(?, 11, 10), uint16] {
  %532 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %532.0
}

def @func_709(%var_698: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), uint64],) {
  %533 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %534 = %533.1;
  %535 = cast(%534, dtype="uint64") /* ty=Tensor[(?, 11, 10), uint64] */;
  %536 = cast(%var_698, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %537 = add(%535, %536) /* ty=Tensor[(14, 11, 10), uint64] */;
  (%537,)
}

def @func_3293() -> Tensor[(?, 11, 10), float32] {
  @func_1862() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_364() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_620() -> (Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) {
  %538 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %539 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %540 = %538.1;
  %541 = %539.0;
  (%540, %541)
}

def @func_2491(%var_2452: uint32, %var_2453: Tensor[(16, 3, 1), uint32]) -> (Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) {
  %542 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %543 = cast(%var_2452, dtype="uint32") /* ty=uint32 */;
  %544 = cast(%var_2453, dtype="uint32") /* ty=Tensor[(16, 3, 1), uint32] */;
  %545 = right_shift(%543, %544) /* ty=Tensor[(16, 3, 1), uint32] */;
  %546 = cast(%var_2453, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(980), bool] */, dtype="bool") /* ty=Tensor[(980), bool] */;
  %551 = reshape(%550, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %552 = @func_2123(%551) /* ty=Tensor[(14, 5, 14), bool] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %554 = log2(%553) /* ty=Tensor[(14, 5, 14), float32] */;
  %555 = cast(meta[relay.Constant][27] /* ty=Tensor[(980), bool] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="int8") /* ty=Tensor[(14, 5, 14), int8] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %559 = %542.0;
  %560 = subtract(%548, %549) /* ty=Tensor[(16, 3, ?), int8] */;
  %561 = bitwise_xor(%557, %558) /* ty=Tensor[(14, 5, 14), int8] */;
  (%559, %560, %561)
}

def @func_330(%var_307: Tensor[(8, 14, 4), float64]) -> (Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) {
  %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
  %563 = shape_of(%var_307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_307, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = cast(%var_307, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
  %567 = rsqrt(%566) /* ty=Tensor[(8, 14, 4), float64] */;
  %568 = cast(%var_307, dtype="int64") /* ty=Tensor[(8, 14, 4), int64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="int64") /* ty=Tensor[(8, 14, 4), int64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %572 = floor_divide(%564, %565) /* ty=Tensor[(8, 14, 4), float64] */;
  %573 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %574 = right_shift(%570, %571) /* ty=Tensor[(8, 14, 4), int64] */;
  (%572, %573, %574)
}

def @func_2391(%var_2384: Tensor[(1540), uint16]) -> Tensor[(1540), int32] {
  %575 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
  %576 = %575.2;
  %577 = cast(%var_2384, dtype="int32") /* ty=Tensor[(1540), int32] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(1), int32] */;
  %579 = cast(%576, dtype="int32") /* ty=Tensor[(1540), int32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?), int32] */;
  logical_xor(%579, %580) /* ty=Tensor[(1540), int32] */
}

def @func_1055() -> (Tensor[(?, 11, 10), float32],) {
  %581 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %582 = %581.1;
  (%582,)
}

def @func_4814(%var_4800: Tensor[(9, 11, 4), float32]) -> (Tensor[(9, 11, 4), float32],) {
  %583 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  %584 = shape_of(%var_4800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_4800, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %587 = divide(%585, %586) /* ty=Tensor[(9, 11, 4), float32] */;
  (%587,)
}

def @func_3059() -> (Tensor[(9, 7, 2), float64],) {
  %588 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
  %589 = log2(%588) /* ty=Tensor[(9, 7, 2), float64] */;
  (%589,)
}

def @func_4661() -> Tensor[(2, 9, 10), float32] {
  %590 = @func_2697() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) */;
  %591 = %590.1;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  log2(%592) /* ty=Tensor[(2, 9, 10), float32] */
}

def @func_4403() -> Tensor[(?, 11, 10), uint16] {
  %593 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %593.0
}

def @func_4059() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) {
  %594 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %595 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %596 = %594.0;
  %597 = %595.1;
  (%596, %597)
}

def @func_4896() -> (Tensor[(?, 11, 10), uint16],) {
  %598 = @func_4403() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%598,)
}

def @func_4476(%var_4470: uint32) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) {
  %599 = cast(%var_4470, dtype="uint32") /* ty=uint32 */;
  %600 = reshape(%599, newshape=[]) /* ty=uint32 */;
  %601 = @func_2357(%600) /* ty=(Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) */;
  %602 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %603 = @func_4132() /* ty=Tensor[(2, 1, 10), float64] */;
  %604 = %601.1;
  %605 = %602.1;
  (%603, %604, %var_4470, %605)
}

def @func_6778(%var_6746: Tensor[(12, 11, 10), bool], %var_6764: Tensor[(12, 11, 10), float32]) -> (Tensor[(12, 11, 10), float32], Tensor[(12, 11, 10), uint16]) {
  %606 = @func_4196() /* ty=(Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) */;
  %607 = %606.1;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %609 = cast(%var_6746, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
  %610 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
  %611 = cast(%610, dtype="uint16") /* ty=Tensor[(?, 11, 10), uint16] */;
  %612 = cast(%var_6764, dtype="uint16") /* ty=Tensor[(12, 11, 10), uint16] */;
  %613 = floor_mod(%608, %609) /* ty=Tensor[(12, 11, 10), float32] */;
  %614 = bitwise_xor(%611, %612) /* ty=Tensor[(12, 11, 10), uint16] */;
  (%613, %614)
}

def @func_4098() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %615 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  %617 = @func_3250() /* ty=Tensor[(?, 11, 10), uint16] */;
  %618 = exp(%616) /* ty=Tensor[(?, 11, 10), float64] */;
  (%617, %618)
}

def @func_2447(%var_2416: Tensor[(550, 2), int64]) -> (Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) {
  %619 = cast(%var_2416, dtype="int64") /* ty=Tensor[(550, 2), int64] */;
  %620 = reshape(%619, newshape=[1100]) /* ty=Tensor[(1100), int64] */;
  %621 = @func_1466(%620) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) */;
  %622 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %623 = %621.3;
  (%622, %623, %var_2416)
}

def @func_5955(%var_5937: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) {
  %624 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %625 = cast(%var_5937, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %626 = reshape(%625, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %627 = @func_4922(%626) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) */;
  %628 = %624.1;
  %629 = %627.1;
  (%628, %629, %var_5937)
}

def @func_6133(%var_6111: Tensor[(3, 3, 9), uint8], %var_6112: Tensor[(3, 3, 9), uint8], %var_6119: uint32) -> (Tensor[(3, 3, 9), bool], Tensor[(2, 1, 10), float64], uint32, Tensor[(?, 11, 10), float32], Tensor[(9, 7, 2), float64]) {
  %630 = cast(%var_6112, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
  %631 = shape_of(%var_6111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_6111, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = cast(%var_6119, dtype="uint32") /* ty=uint32 */;
  %635 = reshape(%634, newshape=[]) /* ty=uint32 */;
  %636 = @func_4476(%635) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) */;
  %637 = @func_3059() /* ty=(Tensor[(9, 7, 2), float64],) */;
  %638 = equal(%632, %633) /* ty=Tensor[(3, 3, 9), bool] */;
  %639 = %636.0;
  %640 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
  %641 = %637.0;
  (%638, %639, %var_6119, %640, %641)
}

def @func_408() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) {
  %642 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %643 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%642, %643)
}

def @func_3531() -> (Tensor[(?, 11, 10), float32],) {
  %644 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %645 = %644.0;
  (%645,)
}

def @func_497() -> (Tensor[(2, 1, 10), float64],) {
  %646 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 1, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %647 = acos(%646) /* ty=Tensor[(2, 1, 10), float64] */;
  (%647,)
}

def @func_661() -> Tensor[(?, 11, 10), float64] {
  %648 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  log(%650) /* ty=Tensor[(?, 11, 10), float64] */
}

def @func_6043() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_6022() -> (Tensor[(2, 1, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(?, 11, 10), float32]) {
  %651 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  %652 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
  %653 = %652.0;
  %654 = cast(%651, dtype="int32") /* ty=Tensor[(2, 9, 10), int32] */;
  %655 = cast(%653, dtype="int32") /* ty=Tensor[(2, 1, 10), int32] */;
  %656 = right_shift(%654, %655) /* ty=Tensor[(2, 9, 10), int32] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  %658 = asin(%657) /* ty=Tensor[(2, 9, 10), float32] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %660 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %661 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %662 = %661.0;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %664 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%660, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %667 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  %668 = atanh(%659) /* ty=Tensor[(2, 9, 10), float64] */;
  %669 = mod(%665, %666) /* ty=Tensor[(?, 11, 10), float32] */;
  (%667, %668, %669)
}

def @func_6460() -> (Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) {
  %670 = @func_6275() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %671 = @func_5562() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) */;
  %672 = %671.4;
  %673 = @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */;
  %674 = cast(%672, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %675 = cast(%673, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %676 = %670.0;
  %677 = mod(%674, %675) /* ty=Tensor[(2, 11, 10), float32] */;
  (%676, %677)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4198() -> (Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) {
  @func_4196() /* ty=(Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) */
}

def @func_1714() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) {
  %0 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %1 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %2 = %0.1;
  %3 = %1.1;
  %4 = @func_1698() /* ty=Tensor[(3, 6), float64] */;
  (%2, %3, %4)
}

def @func_6586(%var_6584: Tensor[(11, 15, 11), uint64], %var_6585: Tensor[(11, 15, 11), uint64]) -> (Tensor[(11, 15, 11), bool], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float64]) {
  %13 = fn (%var_6560: Tensor[(11, 15, 11), uint64], %var_6561: Tensor[(11, 15, 11), uint64]) -> (Tensor[(11, 15, 11), bool], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float64]) {
    %5 = cast(%var_6561, dtype="bool") /* ty=Tensor[(11, 15, 11), bool] */;
    %6 = shape_of(%var_6560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%var_6560, dtype="bool") /* ty=Tensor[(11, 15, 11), bool] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %9 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
    %10 = less_equal(%7, %8) /* ty=Tensor[(11, 15, 11), bool] */;
    %11 = %9.1;
    %12 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
    (%10, %11, %12)
  };
  %13(%var_6584, %var_6585) /* ty=(Tensor[(11, 15, 11), bool], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float64]) */
}

def @func_1490() -> (Tensor[(?, 11, 10), uint16],) {
  %14 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %15 = %14.0;
  (%15,)
}

def @func_900() -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
  @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */
}

def @func_5587() -> Tensor[(12, 11, 10), bool] {
  %16 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %17 = cast(%16, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 11, 10), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  greater_equal(%17, %18) /* ty=Tensor[(12, 11, 10), bool] */
}

def @func_3061() -> (Tensor[(9, 7, 2), float64],) {
  @func_3059() /* ty=(Tensor[(9, 7, 2), float64],) */
}

def @func_6412(%var_6410: Tensor[(4, 11, 3), float32], %var_6411: Tensor[(4, 11, 3), float32]) -> (Tensor[(4, 11, 3), float32],) {
  @func_6408(%var_6410, %var_6411) /* ty=(Tensor[(4, 11, 3), float32],) */
}

def @func_4250(%var_4243: Tensor[(14, 13, 9), float32]) -> Tensor[(14, 13, 9), float32] {
  %19 = cast(%var_4243, dtype="float32") /* ty=Tensor[(14, 13, 9), float32] */;
  exp(%19) /* ty=Tensor[(14, 13, 9), float32] */
}

def @func_1351() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %24 = fn () -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
    %20 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
    %21 = cast(%20, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
    %22 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
    %23 = sigmoid(%21) /* ty=Tensor[(?, 11, 10), float64] */;
    (%22, %23)
  };
  %24() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */
}

def @func_3237() -> (Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) {
  %25 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %26 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %27 = %25.0;
  %28 = %26.0;
  (%27, %28)
}

def @func_4785() -> Tensor[(11, 3, 13), float32] {
  %30 = fn () -> Tensor[(11, 3, 13), float32] {
    %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
    acosh(%29) /* ty=Tensor[(11, 3, 13), float32] */
  };
  %30() /* ty=Tensor[(11, 3, 13), float32] */
}

def @func_6024() -> (Tensor[(2, 1, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(?, 11, 10), float32]) {
  @func_6022() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(?, 11, 10), float32]) */
}

def @func_2110(%var_2108: Tensor[(2, 11, 10), uint16], %var_2109: Tensor[(1320), uint16]) -> (Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) {
  @func_2106(%var_2108, %var_2109) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) */
}

def @func_4404() -> Tensor[(?, 11, 10), uint16] {
  %32 = fn () -> Tensor[(?, 11, 10), uint16] {
    %31 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
    %31.0
  };
  %32() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_3294() -> Tensor[(?, 11, 10), float32] {
  %33 = fn () -> Tensor[(?, 11, 10), float32] {
    @func_1862() /* ty=Tensor[(?, 11, 10), float32] */
  };
  %33() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_4479(%var_4477: uint32) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) {
  @func_4476(%var_4477) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) */
}

def @func_6265() -> (Tensor[(2, 9, 10), int16], Tensor[(448), float64], Tensor[(448), float64], Tensor[(1320), uint16], Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  @func_6263() /* ty=(Tensor[(2, 9, 10), int16], Tensor[(448), float64], Tensor[(448), float64], Tensor[(1320), uint16], Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */
}

def @func_5562() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) {
  %34 = @func_5098() /* ty=(Tensor[(?, 11, 10), int8],) */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %36 = reshape(%35, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %37 = @func_2266(%36) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %40 = @func_5376() /* ty=Tensor[(2, 1, 10), float64] */;
  %41 = %34.0;
  %42 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  %43 = erf(%39) /* ty=Tensor[(2, 1, 10), float32] */;
  (%40, %41, %42, meta[relay.Constant][2] /* ty=Tensor[(1320), uint16] */, %43)
}

def @func_3133() -> Tensor[(?, 11, 10), uint16] {
  @func_3131() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_1469(%var_1467: Tensor[(1100), int64]) -> (Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) {
  @func_1466(%var_1467) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) */
}

def @func_6277() -> (Tensor[(2, 1, 10), float64],) {
  @func_6275() /* ty=(Tensor[(2, 1, 10), float64],) */
}

def @func_3388(%var_3385: Tensor[(8, 16, 15), float64], %var_3386: Tensor[(8, 16, 15), float64], %var_3387: Tensor[(1320), uint16]) -> (Tensor[(8, 16, 15), float64], Tensor[(2, ?, 10), int64], Tensor[(1100), int64], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
  %59 = fn (%var_3362: Tensor[(8, 16, 15), float64], %var_3363: Tensor[(8, 16, 15), float64], %var_3382: Tensor[(1320), uint16]) -> (Tensor[(8, 16, 15), float64], Tensor[(2, ?, 10), int64], Tensor[(1100), int64], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
    %44 = cast(%var_3363, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %45 = shape_of(%var_3362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%var_3362, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(1100), int64] */, dtype="int64") /* ty=Tensor[(1100), int64] */;
    %49 = reshape(%48, newshape=[550, 2]) /* ty=Tensor[(550, 2), int64] */;
    %50 = @func_2447(%49) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) */;
    %51 = cast(%var_3382, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
    %52 = cast(%var_3382, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
    %53 = reshape(%51, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
    %54 = reshape(%52, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
    %55 = @func_1018(%53, %54) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
    %56 = divide(%46, %47) /* ty=Tensor[(8, 16, 15), float64] */;
    %57 = %50.1;
    %58 = %55.0;
    (%56, %57, meta[relay.Constant][3] /* ty=Tensor[(1100), int64] */, %58, %var_3382)
  };
  %59(%var_3385, %var_3386, %var_3387) /* ty=(Tensor[(8, 16, 15), float64], Tensor[(2, ?, 10), int64], Tensor[(1100), int64], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) */
}

def @func_5922(%var_5806: Tensor[(1320), uint16], %var_5840: Tensor[(1100), int64]) -> (Tensor[(2, 8, 10), uint8], Tensor[(11, 3, 13), float32], Tensor[(1320), uint16], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), float32], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float64], Tensor[(1100), float32], Tensor[(?, 11, 10), uint16]) {
  %60 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %61 = cast(%var_5806, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %62 = cast(%var_5806, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %63 = reshape(%61, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %64 = reshape(%62, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %65 = @func_1018(%63, %64) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %66 = %65.4;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %68 = cast(%var_5840, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %69 = reshape(%68, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %70 = @func_645(%69) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %71 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %72 = @func_1890() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) */;
  %73 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %74 = cast(%var_5806, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %75 = cast(%var_5806, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %76 = reshape(%74, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %77 = reshape(%75, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %78 = @func_1018(%76, %77) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %79 = @func_4098() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %80 = cast(%var_5840, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %81 = exp(%80) /* ty=Tensor[(1100), float32] */;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %83 = asinh(%82) /* ty=Tensor[(1100), float64] */;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %85 = sigmoid(%84) /* ty=Tensor[(1100), float32] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(1100), float32] */, dtype="bool") /* ty=Tensor[(1100), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(1), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(1100), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?), bool] */;
  %90 = not_equal(%88, %89) /* ty=Tensor[(1100), bool] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %92 = @func_4896() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %93 = %60.1;
  %94 = @func_4784() /* ty=Tensor[(11, 3, 13), float32] */;
  %95 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  %96 = sinh(%67) /* ty=Tensor[(2, 1, 10), float32] */;
  %97 = %70.0;
  %98 = %71.0;
  %99 = %72.1;
  %100 = %73.1;
  %101 = %78.4;
  %102 = %79.1;
  %103 = log(%91) /* ty=Tensor[(1100), float32] */;
  %104 = %92.0;
  (%93, %94, %var_5806, %95, %96, %97, %98, %99, %100, %101, %102, %103, %104)
}

def @func_3250() -> Tensor[(?, 11, 10), uint16] {
  %105 = @func_1981() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) */;
  %105.1
}

def @func_298() -> Tensor[(?, 11, 10), uint16] {
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
  %107 = asinh(%106) /* ty=Tensor[(1, 11, 10), float64] */;
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 11, 10), float64] */, dtype="uint16") /* ty=Tensor[(1, 11, 10), uint16] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="uint16") /* ty=Tensor[(1, 11, 10), uint16] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%110, %111) /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_3239() -> (Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) {
  @func_3237() /* ty=(Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) */
}

def @func_4059() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) {
  %112 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %113 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %114 = %112.0;
  %115 = %113.1;
  (%114, %115)
}

def @func_645(%var_626: Tensor[(10, 10, 11), int64]) -> (Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) {
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 10, 11), int64] */, dtype="int64") /* ty=Tensor[(1, 10, 11), int64] */;
  %117 = cast(%var_626, dtype="int64") /* ty=Tensor[(10, 10, 11), int64] */;
  %118 = right_shift(%116, %117) /* ty=Tensor[(10, 10, 11), int64] */;
  %119 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%118, %119)
}

def @func_1022(%var_1020: Tensor[(12, 11, 10), uint16], %var_1021: Tensor[(12, 11, 10), uint8]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) {
  @func_1018(%var_1020, %var_1021) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */
}

def @func_5065() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float32]) {
  @func_5063() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float32]) */
}

def @func_2106(%var_2072: Tensor[(2, 11, 10), uint16], %var_2104: Tensor[(1320), uint16]) -> (Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) {
  %120 = @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %122 = cast(%var_2072, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %123 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %124 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(448, 1), float64] */, dtype="float64") /* ty=Tensor[(448, 1), float64] */;
  %126 = cast(%var_2104, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %127 = reshape(%125, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %128 = reshape(%126, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %129 = @func_1819(%127, %128) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) */;
  %130 = floor_divide(%121, %122) /* ty=Tensor[(2, 11, 10), float32] */;
  %131 = %123.0;
  %132 = @func_1698() /* ty=Tensor[(3, 6), float64] */;
  %133 = %124.0;
  %134 = %129.2;
  (%130, %131, %132, %133, %134, meta[relay.Constant][7] /* ty=Tensor[(448, 1), float64] */, %var_2104)
}

def @func_6685() -> (Tensor[(?, 11, 10), float64], Tensor[(2, 1, 10), float64]) {
  %139 = fn () -> (Tensor[(?, 11, 10), float64], Tensor[(2, 1, 10), float64]) {
    %135 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
    %136 = @func_6460() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) */;
    %137 = %135.1;
    %138 = %136.0;
    (%137, %138)
  };
  %139() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(2, 1, 10), float64]) */
}

def @func_817() -> (Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) {
  @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */
}

def @func_661() -> Tensor[(?, 11, 10), float64] {
  %140 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  log(%142) /* ty=Tensor[(?, 11, 10), float64] */
}

def @func_2632() -> (Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) {
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 220), uint16] */, dtype="uint16") /* ty=Tensor[(6, 220), uint16] */;
  %144 = reshape(%143, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %145 = @func_1267(%144) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) */;
  %146 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %147 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %148 = %145.3;
  %149 = %146.0;
  (%147, %148, meta[relay.Constant][8] /* ty=Tensor[(6, 220), uint16] */, %149)
}

def @func_449() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
  %154 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
    %150 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
    %151 = cast(%150, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %152 = sinh(%151) /* ty=Tensor[(?, 11, 10), float32] */;
    %153 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */
}

def @func_2668() -> (Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) {
  %155 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %156 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  %157 = %155.1;
  (%156, %157)
}

def @func_4231() -> Tensor[(?, 11, 10), int8] {
  %158 = @func_4196() /* ty=(Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) */;
  %158.0
}

def @func_620() -> (Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) {
  %159 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %160 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %161 = %159.1;
  %162 = %160.0;
  (%161, %162)
}

def @func_1269(%var_1268: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) {
  %172 = fn (%var_1265: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) {
    %163 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %164 = cast(%var_1265, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
    %165 = cast(%var_1265, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
    %166 = reshape(%164, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
    %167 = reshape(%165, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
    %168 = @func_1018(%166, %167) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
    %169 = %163.0;
    %170 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
    %171 = %168.1;
    (%169, %170, %171, %var_1265)
  };
  %172(%var_1268) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) */
}

def @func_6379() -> Tensor[(2, 1, 10), float64] {
  %173 = fn () -> Tensor[(2, 1, 10), float64] {
    @func_4287() /* ty=Tensor[(2, 1, 10), float64] */
  };
  %173() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_4061() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) {
  @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */
}

def @func_2357(%var_2290: uint32) -> (Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) {
  %174 = cast(%var_2290, dtype="uint32") /* ty=uint32 */;
  %175 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 4, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 4, 5), uint32] */;
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 4, 5), uint32] */, dtype="float32") /* ty=Tensor[(7, 4, 5), float32] */;
  %177 = atan(%176) /* ty=Tensor[(7, 4, 5), float32] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(7, 4, 5), float32] */;
  %179 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %180 = bitwise_or(%174, %175) /* ty=Tensor[(7, 4, 5), uint32] */;
  %181 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %182 = cos(%178) /* ty=Tensor[(7, 4, 5), float32] */;
  %183 = %179.0;
  (%180, %181, %182, %183)
}

def @func_1983() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) {
  @func_1981() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) */
}

def @func_1740() -> Tensor[(?, 11, 10), uint16] {
  %185 = fn () -> Tensor[(?, 11, 10), uint16] {
    %184 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
    %184.0
  };
  %185() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_5378() -> Tensor[(2, 1, 10), float64] {
  @func_5376() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_5955(%var_5937: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) {
  %186 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %187 = cast(%var_5937, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %188 = reshape(%187, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %189 = @func_4922(%188) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) */;
  %190 = %186.1;
  %191 = %189.1;
  (%190, %191, %var_5937)
}

def @func_1430() -> Tensor[(2, 9, 10), int16] {
  %208 = fn () -> Tensor[(2, 9, 10), int16] {
    %192 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
    %193 = %192.0;
    %194 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
    %195 = %194.1;
    %196 = cast(%193, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%195, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %200 = subtract(%198, %199) /* ty=Tensor[(2, ?, 10), int64] */;
    %201 = cast(%200, dtype="bool") /* ty=Tensor[(2, ?, 10), bool] */;
    %202 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%193, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %205 = not_equal(%203, %204) /* ty=Tensor[(2, ?, 10), bool] */;
    %206 = cast(%205, dtype="int16") /* ty=Tensor[(2, ?, 10), int16] */;
    %207 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 9, 10), bool] */, dtype="int16") /* ty=Tensor[(2, 9, 10), int16] */;
    bitwise_or(%206, %207) /* ty=Tensor[(2, 9, 10), int16] */
  };
  %208() /* ty=Tensor[(2, 9, 10), int16] */
}

def @func_5084(%var_5080: Tensor[(3, 3, 4), float64]) -> Tensor[(3, 3, 4), float64] {
  %209 = cast(%var_5080, dtype="float64") /* ty=Tensor[(3, 3, 4), float64] */;
  asin(%209) /* ty=Tensor[(3, 3, 4), float64] */
}

def @func_6352(%var_6351: Tensor[(11, 11, 10), float32]) -> Tensor[(11, 11, 10), int32] {
  %213 = fn (%var_6342: Tensor[(11, 11, 10), float32]) -> Tensor[(11, 11, 10), int32] {
    %210 = @func_2957() /* ty=Tensor[(?, 11, 10), float32] */;
    %211 = cast(%210, dtype="int32") /* ty=Tensor[(?, 11, 10), int32] */;
    %212 = cast(%var_6342, dtype="int32") /* ty=Tensor[(11, 11, 10), int32] */;
    bitwise_or(%211, %212) /* ty=Tensor[(11, 11, 10), int32] */
  };
  %213(%var_6351) /* ty=Tensor[(11, 11, 10), int32] */
}

def @func_4458() -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
  %220 = fn () -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
    %214 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
    %215 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
    %216 = %215.1;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %218 = %214.0;
    %219 = log2(%217) /* ty=Tensor[(?, 11, 10), float32] */;
    (%218, %219)
  };
  %220() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */
}

def @func_5958(%var_5956: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) {
  @func_5955(%var_5956) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) */
}

def @func_4757() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
  %221 = @func_3237() /* ty=(Tensor[(2, 9, 10), int16], Tensor[(?, 11, 10), uint16]) */;
  %222 = %221.1;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %224 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %225 = log10(%223) /* ty=Tensor[(?, 11, 10), float32] */;
  %226 = %224.1;
  (%225, %226)
}

def @func_2393(%var_2392: Tensor[(1540), uint16]) -> Tensor[(1540), int32] {
  %233 = fn (%var_2384: Tensor[(1540), uint16]) -> Tensor[(1540), int32] {
    %227 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
    %228 = %227.2;
    %229 = cast(%var_2384, dtype="int32") /* ty=Tensor[(1540), int32] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(1), int32] */;
    %231 = cast(%228, dtype="int32") /* ty=Tensor[(1540), int32] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), int32] */;
    logical_xor(%231, %232) /* ty=Tensor[(1540), int32] */
  };
  %233(%var_2392) /* ty=Tensor[(1540), int32] */
}

def @func_4956() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %237 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
    %234 = @func_4341() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
    %235 = %234.0;
    %236 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
    (%235, %236)
  };
  %237() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */
}

def @func_6074() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float32]) {
  %243 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float32]) {
    %238 = @func_4955() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
    %239 = @func_726() /* ty=Tensor[(2, 1, 10), float64] */;
    %240 = cast(%239, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
    %241 = %238.0;
    %242 = sigmoid(%240) /* ty=Tensor[(2, 1, 10), float32] */;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float32]) */
}

def @func_3059() -> (Tensor[(9, 7, 2), float64],) {
  %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
  %245 = log2(%244) /* ty=Tensor[(9, 7, 2), float64] */;
  (%245,)
}

def @func_815() -> (Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) {
  %246 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %247 = cast(meta[relay.Constant][12] /* ty=Tensor[(1540), uint16] */, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %248 = reshape(%247, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), uint16] */;
  %249 = @func_709(%248) /* ty=(Tensor[(14, 11, 10), uint64],) */;
  %250 = %246.1;
  %251 = %249.0;
  %252 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%250, %251, meta[relay.Constant][12] /* ty=Tensor[(1540), uint16] */, %252)
}

def @func_5564() -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) {
  @func_5562() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) */
}

def @func_3451(%var_3449: Tensor[(6, 220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), uint16]) {
  @func_3448(%var_3449) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), uint16]) */
}

def @func_3905(%var_3903: Tensor[(11, 7, 13), float32], %var_3904: Tensor[(7, 140), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(14, 5, 14), bool], Tensor[(7, 140), bool], Tensor[(2, 1, 10), float64]) {
  @func_3901(%var_3903, %var_3904) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(14, 5, 14), bool], Tensor[(7, 140), bool], Tensor[(2, 1, 10), float64]) */
}

def @func_5290() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
  %253 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %254 = @func_4132() /* ty=Tensor[(2, 1, 10), float64] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %256 = %253.1;
  %257 = rsqrt(%255) /* ty=Tensor[(2, 1, 10), float64] */;
  (%256, %257)
}

def @func_1700() -> Tensor[(3, 6), float64] {
  @func_1698() /* ty=Tensor[(3, 6), float64] */
}

def @func_3901(%var_3885: Tensor[(11, 7, 13), float32], %var_3892: Tensor[(7, 140), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(14, 5, 14), bool], Tensor[(7, 140), bool], Tensor[(2, 1, 10), float64]) {
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %259 = shape_of(%var_3885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_3885, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %262 = cast(%var_3892, dtype="bool") /* ty=Tensor[(7, 140), bool] */;
  %263 = reshape(%262, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %264 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %265 = floor_divide(%260, %261) /* ty=Tensor[(11, 7, 13), float32] */;
  %266 = @func_2123(%263) /* ty=Tensor[(14, 5, 14), bool] */;
  %267 = %264.1;
  (%265, %266, %var_3892, %267)
}

def @func_6208(%var_6198: Tensor[(1320), uint16]) -> (Tensor[(11, 3, 13), float32], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
  %268 = cast(%var_6198, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %269 = reshape(%268, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %270 = @func_5955(%269) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), bool], Tensor[(1320), uint16]) */;
  %271 = @func_4784() /* ty=Tensor[(11, 3, 13), float32] */;
  %272 = %270.0;
  (%271, %272, %var_6198)
}

def @func_5723() -> (Tensor[(?, 11, 10), uint16],) {
  %274 = fn () -> (Tensor[(?, 11, 10), uint16],) {
    %273 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
    (%273,)
  };
  %274() /* ty=(Tensor[(?, 11, 10), uint16],) */
}

def @func_2634() -> (Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) {
  @func_2632() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) */
}

def @func_5063() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float32]) {
  %275 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %276 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %277 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %278 = %275.0;
  %279 = %276.0;
  (%277, %278, %279)
}

def @func_2447(%var_2416: Tensor[(550, 2), int64]) -> (Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) {
  %280 = cast(%var_2416, dtype="int64") /* ty=Tensor[(550, 2), int64] */;
  %281 = reshape(%280, newshape=[1100]) /* ty=Tensor[(1100), int64] */;
  %282 = @func_1466(%281) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) */;
  %283 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  %284 = %282.3;
  (%283, %284, %var_2416)
}

def @func_3598() -> Tensor[(?, 11, 10), float32] {
  %285 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  acosh(%287) /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_5376() -> Tensor[(2, 1, 10), float64] {
  %288 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %288.0
}

def @func_4662() -> Tensor[(2, 9, 10), float32] {
  %292 = fn () -> Tensor[(2, 9, 10), float32] {
    %289 = @func_2697() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) */;
    %290 = %289.1;
    %291 = cast(%290, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
    log2(%291) /* ty=Tensor[(2, 9, 10), float32] */
  };
  %292() /* ty=Tensor[(2, 9, 10), float32] */
}

def @func_366() -> Tensor[(?, 11, 10), uint16] {
  @func_364() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_6549(%var_6547: Tensor[(9, 8, 8), float64]) -> Tensor[(9, 8, 8), float64] {
  @func_6546(%var_6547) /* ty=Tensor[(9, 8, 8), float64] */
}

def @func_5292() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
  @func_5290() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) */
}

def @func_3170() -> (Tensor[(?, 11, 10), float32],) {
  %297 = fn () -> (Tensor[(?, 11, 10), float32],) {
    %293 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
    %294 = %293.1;
    %295 = cast(%294, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %296 = cosh(%295) /* ty=Tensor[(?, 11, 10), float32] */;
    (%296,)
  };
  %297() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_4098() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %298 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
  %300 = @func_3250() /* ty=Tensor[(?, 11, 10), uint16] */;
  %301 = exp(%299) /* ty=Tensor[(?, 11, 10), float64] */;
  (%300, %301)
}

def @func_3532() -> (Tensor[(?, 11, 10), float32],) {
  %304 = fn () -> (Tensor[(?, 11, 10), float32],) {
    %302 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %303 = %302.0;
    (%303,)
  };
  %304() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_1492() -> (Tensor[(?, 11, 10), uint16],) {
  @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */
}

def @func_2266(%var_2230: Tensor[(1320), uint16]) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  %305 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %306 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %307 = cast(%var_2230, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %308 = cast(%var_2230, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %309 = cast(%var_2230, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %310 = reshape(%308, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
  %311 = reshape(%309, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
  %312 = @func_1018(%310, %311) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
  %313 = %312.1;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
  %315 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
  %316 = %305.0;
  %317 = %306.0;
  %318 = atan(%307) /* ty=Tensor[(1320), float64] */;
  %319 = asin(%314) /* ty=Tensor[(12, 11, 10), float32] */;
  %320 = %315.0;
  %321 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%316, %317, %318, %319, %320, %321)
}

def @func_4673(%var_4671: Tensor[(4, 11, 10), uint16]) -> (Tensor[(4, 11, 10), uint8],) {
  @func_4670(%var_4671) /* ty=(Tensor[(4, 11, 10), uint8],) */
}

def @func_5087(%var_5085: Tensor[(3, 3, 4), float64]) -> Tensor[(3, 3, 4), float64] {
  @func_5084(%var_5085) /* ty=Tensor[(3, 3, 4), float64] */
}

def @func_3047(%var_2994: Tensor[(9, 14, 5), float64], %var_2995: Tensor[(9, 14, 5), float64]) -> (Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) {
  %322 = cast(%var_2995, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %323 = shape_of(%var_2994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_2994, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %327 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 1), uint32] */, dtype="uint32") /* ty=Tensor[(48, 1), uint32] */;
  %328 = reshape(%326, newshape=[]) /* ty=uint32 */;
  %329 = reshape(%327, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint32] */;
  %330 = @func_2491(%328, %329) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) */;
  %331 = cast(%var_2994, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %332 = %330.2;
  %333 = cast(%332, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
  %334 = reshape(%333, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 1), uint32] */, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %336 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %337 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
  %338 = less(%324, %325) /* ty=Tensor[(9, 14, 5), bool] */;
  %339 = sigmoid(%331) /* ty=Tensor[(9, 14, 5), float32] */;
  %340 = @func_2123(%334) /* ty=Tensor[(14, 5, 14), bool] */;
  %341 = atanh(%335) /* ty=Tensor[(48, 1), float64] */;
  %342 = %336.0;
  %343 = %337.1;
  (%338, %332, meta[relay.Constant][14] /* ty=uint32 */, %339, %340, %341, %342, %343)
}

def @func_711(%var_710: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), uint64],) {
  %349 = fn (%var_698: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), uint64],) {
    %344 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
    %345 = %344.1;
    %346 = cast(%345, dtype="uint64") /* ty=Tensor[(?, 11, 10), uint64] */;
    %347 = cast(%var_698, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
    %348 = add(%346, %347) /* ty=Tensor[(14, 11, 10), uint64] */;
    (%348,)
  };
  %349(%var_710) /* ty=(Tensor[(14, 11, 10), uint64],) */
}

def @func_6211(%var_6209: Tensor[(1320), uint16]) -> (Tensor[(11, 3, 13), float32], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) {
  @func_6208(%var_6209) /* ty=(Tensor[(11, 3, 13), float32], Tensor[(?, 11, 10), float32], Tensor[(1320), uint16]) */
}

def @func_6781(%var_6779: Tensor[(12, 11, 10), bool], %var_6780: Tensor[(12, 11, 10), float32]) -> (Tensor[(12, 11, 10), float32], Tensor[(12, 11, 10), uint16]) {
  %359 = fn (%var_6746: Tensor[(12, 11, 10), bool], %var_6764: Tensor[(12, 11, 10), float32]) -> (Tensor[(12, 11, 10), float32], Tensor[(12, 11, 10), uint16]) {
    %350 = @func_4196() /* ty=(Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) */;
    %351 = %350.1;
    %352 = cast(%351, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %353 = cast(%var_6746, dtype="float32") /* ty=Tensor[(12, 11, 10), float32] */;
    %354 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
    %355 = cast(%354, dtype="uint16") /* ty=Tensor[(?, 11, 10), uint16] */;
    %356 = cast(%var_6764, dtype="uint16") /* ty=Tensor[(12, 11, 10), uint16] */;
    %357 = floor_mod(%352, %353) /* ty=Tensor[(12, 11, 10), float32] */;
    %358 = bitwise_xor(%355, %356) /* ty=Tensor[(12, 11, 10), uint16] */;
    (%357, %358)
  };
  %359(%var_6779, %var_6780) /* ty=(Tensor[(12, 11, 10), float32], Tensor[(12, 11, 10), uint16]) */
}

def @func_2587() -> Tensor[(?, 11, 10), uint16] {
  @func_2585() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_3051(%var_3049: Tensor[(9, 14, 5), float64], %var_3050: Tensor[(9, 14, 5), float64]) -> (Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) {
  @func_3047(%var_3049, %var_3050) /* ty=(Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) */
}

def @func_749() -> (Tensor[(?, 11, 10), uint16],) {
  %360 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %361 = %360.1;
  (%361,)
}

def @func_4816(%var_4815: Tensor[(9, 11, 4), float32]) -> (Tensor[(9, 11, 4), float32],) {
  %367 = fn (%var_4800: Tensor[(9, 11, 4), float32]) -> (Tensor[(9, 11, 4), float32],) {
    %362 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
    %363 = shape_of(%var_4800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%var_4800, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %366 = divide(%364, %365) /* ty=Tensor[(9, 11, 4), float32] */;
    (%366,)
  };
  %367(%var_4815) /* ty=(Tensor[(9, 11, 4), float32],) */
}

def @func_408() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) {
  %368 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %369 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%368, %369)
}

def @main(%var_6813: uint32) -> Tensor[(6, 6, 8), uint32] {
  %370 = cast(%var_6813, dtype="uint32") /* ty=uint32 */;
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 6, 8), uint32] */, dtype="uint32") /* ty=Tensor[(6, 6, 8), uint32] */;
  right_shift(%370, %371) /* ty=Tensor[(6, 6, 8), uint32] */
}

def @func_1466(%var_1445: Tensor[(1100), int64]) -> (Tensor[(?, 11, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, ?, 10), int64]) {
  %372 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
  %373 = cast(%var_1445, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %374 = reshape(%373, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %375 = @func_645(%374) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %376 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %377 = %372.0;
  %378 = %375.0;
  %379 = %376.0;
  (%377, %378, %var_1445, %379)
}

def @func_2156() -> (Tensor[(2, 9, 10), int16],) {
  %381 = fn () -> (Tensor[(2, 9, 10), int16],) {
    %380 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
    (%380,)
  };
  %381() /* ty=(Tensor[(2, 9, 10), int16],) */
}

def @func_663() -> Tensor[(?, 11, 10), float64] {
  @func_661() /* ty=Tensor[(?, 11, 10), float64] */
}

def @func_2980() -> (Tensor[(?, 11, 10), float32],) {
  @func_2978() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_4599(%var_4598: Tensor[(14, 11, 10), uint16]) -> Tensor[(14, 11, 10), float64] {
  %395 = fn (%var_4558: Tensor[(14, 11, 10), uint16]) -> Tensor[(14, 11, 10), float64] {
    %382 = @func_3250() /* ty=Tensor[(?, 11, 10), uint16] */;
    %383 = cast(%382, dtype="float64") /* ty=Tensor[(?, 11, 10), float64] */;
    %384 = cast(%var_4558, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
    %385 = power(%383, %384) /* ty=Tensor[(14, 11, 10), float64] */;
    %386 = cast(%382, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %387 = cast(%385, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
    %388 = subtract(%386, %387) /* ty=Tensor[(14, 11, 10), float32] */;
    %389 = cast(%385, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %393 = minimum(%391, %392) /* ty=Tensor[(14, 11, 10), float32] */;
    %394 = cast(%393, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
    asin(%394) /* ty=Tensor[(14, 11, 10), float64] */
  };
  %395(%var_4598) /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_6022() -> (Tensor[(2, 1, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(?, 11, 10), float32]) {
  %396 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  %397 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
  %398 = %397.0;
  %399 = cast(%396, dtype="int32") /* ty=Tensor[(2, 9, 10), int32] */;
  %400 = cast(%398, dtype="int32") /* ty=Tensor[(2, 1, 10), int32] */;
  %401 = right_shift(%399, %400) /* ty=Tensor[(2, 9, 10), int32] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  %403 = asin(%402) /* ty=Tensor[(2, 9, 10), float32] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %405 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
  %406 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %407 = %406.0;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %409 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%405, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %412 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
  %413 = atanh(%404) /* ty=Tensor[(2, 9, 10), float64] */;
  %414 = mod(%410, %411) /* ty=Tensor[(?, 11, 10), float32] */;
  (%412, %413, %414)
}

def @func_648(%var_646: Tensor[(10, 10, 11), int64]) -> (Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) {
  @func_645(%var_646) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */
}

def @func_4288() -> Tensor[(2, 1, 10), float64] {
  %415 = fn () -> Tensor[(2, 1, 10), float64] {
    @func_4132() /* ty=Tensor[(2, 1, 10), float64] */
  };
  %415() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_6716() -> (Tensor[(?, 11, 10), float32],) {
  %418 = fn () -> (Tensor[(?, 11, 10), float32],) {
    %416 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %417 = %416.0;
    (%417,)
  };
  %418() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_4233() -> Tensor[(?, 11, 10), int8] {
  @func_4231() /* ty=Tensor[(?, 11, 10), int8] */
}

def @func_6044() -> Tensor[(?, 11, 10), uint16] {
  %419 = fn () -> Tensor[(?, 11, 10), uint16] {
    @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
  };
  %419() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_4843() -> Tensor[(?, 11, 10), float32] {
  %421 = fn () -> Tensor[(?, 11, 10), float32] {
    %420 = @func_3169() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %420.0
  };
  %421() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_1056() -> (Tensor[(?, 11, 10), float32],) {
  %424 = fn () -> (Tensor[(?, 11, 10), float32],) {
    %422 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
    %423 = %422.1;
    (%423,)
  };
  %424() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_1822(%var_1820: Tensor[(448), float64], %var_1821: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) {
  %443 = fn (%var_1756: Tensor[(448), float64], %var_1811: Tensor[(1320), uint16]) -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) {
    %425 = @func_1490() /* ty=(Tensor[(?, 11, 10), uint16],) */;
    %426 = cast(%var_1756, dtype="float64") /* ty=Tensor[(448), float64] */;
    %427 = reshape(%426, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float64] */;
    %428 = @func_330(%427) /* ty=(Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) */;
    %429 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
    %430 = @func_773() /* ty=Tensor[(?, 11, 10), float32] */;
    %431 = cast(%430, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
    %432 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 11, 10), float32] */, dtype="uint8") /* ty=Tensor[(15, 11, 10), uint8] */;
    %433 = cast(%var_1811, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
    %434 = cast(%var_1811, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
    %435 = reshape(%433, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint16] */;
    %436 = reshape(%434, newshape=[12, 11, 10]) /* ty=Tensor[(12, 11, 10), uint8] */;
    %437 = @func_1018(%435, %436) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) */;
    %438 = %425.0;
    %439 = %428.1;
    %440 = %429.2;
    %441 = bitwise_or(%431, %432) /* ty=Tensor[(15, 11, 10), uint8] */;
    %442 = %437.3;
    (%438, %439, %var_1756, %440, %441, %442, %var_1811)
  };
  %443(%var_1820, %var_1821) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) */
}

def @func_2959() -> Tensor[(?, 11, 10), float32] {
  @func_2957() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_3448(%var_3426: Tensor[(6, 220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), uint16]) {
  %444 = cast(%var_3426, dtype="uint16") /* ty=Tensor[(6, 220), uint16] */;
  %445 = reshape(%444, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %446 = @func_1267(%445) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(12, 11, 10), int64], Tensor[(1320), uint16]) */;
  %447 = @func_2668() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) */;
  %448 = @func_3293() /* ty=Tensor[(?, 11, 10), float32] */;
  %449 = %446.0;
  %450 = %447.1;
  (%448, %449, %var_3426, %450)
}

def @func_4133() -> Tensor[(2, 1, 10), float64] {
  %452 = fn () -> Tensor[(2, 1, 10), float64] {
    %451 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
    %451.0
  };
  %452() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_6263() -> (Tensor[(2, 9, 10), int16], Tensor[(448), float64], Tensor[(448), float64], Tensor[(1320), uint16], Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %453 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %454 = cast(meta[relay.Constant][19] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %455 = cast(meta[relay.Constant][20] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %456 = reshape(%454, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %457 = reshape(%455, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
  %458 = @func_1819(%456, %457) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(1540), uint16], Tensor[(15, 11, 10), uint8], Tensor[(1100), int64], Tensor[(1320), uint16]) */;
  %459 = @func_4341() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */;
  %460 = %453.0;
  %461 = %458.2;
  %462 = %459.0;
  %463 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
  (%460, %461, meta[relay.Constant][19] /* ty=Tensor[(448), float64] */, meta[relay.Constant][20] /* ty=Tensor[(1320), uint16] */, %462, %463)
}

def @func_5150() -> Tensor[(2, 1, 10), float64] {
  %465 = fn () -> Tensor[(2, 1, 10), float64] {
    %464 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
    %464.0
  };
  %465() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_728() -> Tensor[(2, 1, 10), float64] {
  @func_726() /* ty=Tensor[(2, 1, 10), float64] */
}

def @func_2585() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_4253(%var_4251: Tensor[(14, 13, 9), float32]) -> Tensor[(14, 13, 9), float32] {
  @func_4250(%var_4251) /* ty=Tensor[(14, 13, 9), float32] */
}

def @func_4922(%var_4914: Tensor[(12, 11, 10), uint16]) -> (Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) {
  %466 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %467 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %468 = cast(%467, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %469 = cast(%var_4914, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %470 = %466.0;
  %471 = logical_and(%468, %469) /* ty=Tensor[(12, 11, 10), bool] */;
  (%470, %471)
}

def @func_4100() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  @func_4098() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */
}

def @func_726() -> Tensor[(2, 1, 10), float64] {
  %472 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %472.0
}

def @func_6461() -> (Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) {
  %481 = fn () -> (Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) {
    %473 = @func_6275() /* ty=(Tensor[(2, 1, 10), float64],) */;
    %474 = @func_5562() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), int8], Tensor[(2, 9, 10), int16], Tensor[(1320), uint16], Tensor[(2, 1, 10), float32]) */;
    %475 = %474.4;
    %476 = @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */;
    %477 = cast(%475, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
    %478 = cast(%476, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %479 = %473.0;
    %480 = mod(%477, %478) /* ty=Tensor[(2, 11, 10), float32] */;
    (%479, %480)
  };
  %481() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(2, 11, 10), float32]) */
}

def @func_5926(%var_5924: Tensor[(1320), uint16], %var_5925: Tensor[(1100), int64]) -> (Tensor[(2, 8, 10), uint8], Tensor[(11, 3, 13), float32], Tensor[(1320), uint16], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), float32], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float64], Tensor[(1100), float32], Tensor[(?, 11, 10), uint16]) {
  @func_5922(%var_5924, %var_5925) /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(11, 3, 13), float32], Tensor[(1320), uint16], Tensor[(2, 1, 10), float64], Tensor[(2, 1, 10), float32], Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), float32], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float64], Tensor[(1100), float32], Tensor[(?, 11, 10), uint16]) */
}

def @func_4342() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
  %485 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) {
    %482 = @func_2938() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %483 = @func_3598() /* ty=Tensor[(?, 11, 10), float32] */;
    %484 = %482.0;
    (%483, %484)
  };
  %485() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), float32]) */
}

def @func_898() -> (Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) {
  %486 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %487 = %486.1;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %489 = tan(%488) /* ty=Tensor[(2, 1, 10), float64] */;
  %490 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 1, 10), float64] */, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="int64") /* ty=Tensor[(2, 1, 10), int64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %494 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %496 = logical_xor(%492, %493) /* ty=Tensor[(2, ?, 10), int64] */;
  %497 = cos(%495) /* ty=Tensor[(?, 11, 10), float32] */;
  (%496, %497)
}

def @func_4670(%var_4665: Tensor[(4, 11, 10), uint16]) -> (Tensor[(4, 11, 10), uint8],) {
  %498 = @func_1350() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */;
  %499 = %498.0;
  %500 = cast(%499, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
  %501 = cast(%var_4665, dtype="uint8") /* ty=Tensor[(4, 11, 10), uint8] */;
  %502 = bitwise_xor(%500, %501) /* ty=Tensor[(4, 11, 10), uint8] */;
  (%502,)
}

def @func_2815() -> (Tensor[(2, 9, 10), int16],) {
  @func_2813() /* ty=(Tensor[(2, 9, 10), int16],) */
}

def @func_1863() -> Tensor[(?, 11, 10), float32] {
  %506 = fn () -> Tensor[(?, 11, 10), float32] {
    %503 = @func_749() /* ty=(Tensor[(?, 11, 10), uint16],) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    sin(%505) /* ty=Tensor[(?, 11, 10), float32] */
  };
  %506() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_2957() -> Tensor[(?, 11, 10), float32] {
  @func_773() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_498() -> (Tensor[(2, 1, 10), float64],) {
  %509 = fn () -> (Tensor[(2, 1, 10), float64],) {
    %507 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 1, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
    %508 = acos(%507) /* ty=Tensor[(2, 1, 10), float64] */;
    (%508,)
  };
  %509() /* ty=(Tensor[(2, 1, 10), float64],) */
}

def @func_751() -> (Tensor[(?, 11, 10), uint16],) {
  @func_749() /* ty=(Tensor[(?, 11, 10), uint16],) */
}

def @func_4196() -> (Tensor[(?, 11, 10), int8], Tensor[(?, 11, 10), bool]) {
  %510 = @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */;
  %511 = %510.1;
  %512 = @func_2632() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1320), uint16], Tensor[(6, 220), uint16], Tensor[(?, 11, 10), float32]) */;
  %513 = %512.3;
  %514 = cast(%513, dtype="int8") /* ty=Tensor[(?, 11, 10), int8] */;
  %515 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%511, dtype="int8") /* ty=Tensor[(?, 11, 10), int8] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %518 = cast(%513, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %519 = sqrt(%518) /* ty=Tensor[(?, 11, 10), float32] */;
  %520 = cast(%511, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = add(%516, %517) /* ty=Tensor[(?, 11, 10), int8] */;
  %525 = less(%522, %523) /* ty=Tensor[(?, 11, 10), bool] */;
  (%524, %525)
}

def @func_4759() -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) {
  @func_4757() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */
}

def @func_5589() -> Tensor[(12, 11, 10), bool] {
  @func_5587() /* ty=Tensor[(12, 11, 10), bool] */
}

def @func_5100() -> (Tensor[(?, 11, 10), int8],) {
  @func_5098() /* ty=(Tensor[(?, 11, 10), int8],) */
}

def @func_4476(%var_4470: uint32) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) {
  %526 = cast(%var_4470, dtype="uint32") /* ty=uint32 */;
  %527 = reshape(%526, newshape=[]) /* ty=uint32 */;
  %528 = @func_2357(%527) /* ty=(Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) */;
  %529 = @func_4457() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %530 = @func_4132() /* ty=Tensor[(2, 1, 10), float64] */;
  %531 = %528.1;
  %532 = %529.1;
  (%530, %531, %var_4470, %532)
}

def @func_2940() -> (Tensor[(?, 11, 10), float32],) {
  @func_2938() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_4925(%var_4923: Tensor[(12, 11, 10), uint16]) -> (Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) {
  @func_4922(%var_4923) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(12, 11, 10), bool]) */
}

def @func_6137(%var_6134: Tensor[(3, 3, 9), uint8], %var_6135: Tensor[(3, 3, 9), uint8], %var_6136: uint32) -> (Tensor[(3, 3, 9), bool], Tensor[(2, 1, 10), float64], uint32, Tensor[(?, 11, 10), float32], Tensor[(9, 7, 2), float64]) {
  %545 = fn (%var_6111: Tensor[(3, 3, 9), uint8], %var_6112: Tensor[(3, 3, 9), uint8], %var_6119: uint32) -> (Tensor[(3, 3, 9), bool], Tensor[(2, 1, 10), float64], uint32, Tensor[(?, 11, 10), float32], Tensor[(9, 7, 2), float64]) {
    %533 = cast(%var_6112, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
    %534 = shape_of(%var_6111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%var_6111, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %537 = cast(%var_6119, dtype="uint32") /* ty=uint32 */;
    %538 = reshape(%537, newshape=[]) /* ty=uint32 */;
    %539 = @func_4476(%538) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], uint32, Tensor[(?, 11, 10), float32]) */;
    %540 = @func_3059() /* ty=(Tensor[(9, 7, 2), float64],) */;
    %541 = equal(%535, %536) /* ty=Tensor[(3, 3, 9), bool] */;
    %542 = %539.0;
    %543 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
    %544 = %540.0;
    (%541, %542, %var_6119, %543, %544)
  };
  %545(%var_6134, %var_6135, %var_6136) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(2, 1, 10), float64], uint32, Tensor[(?, 11, 10), float32], Tensor[(9, 7, 2), float64]) */
}

def @func_6493() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
  %549 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) {
    %546 = @func_5290() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) */;
    %547 = %546.0;
    %548 = @func_4287() /* ty=Tensor[(2, 1, 10), float64] */;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 1, 10), float64]) */
}

def @func_3516() -> (Tensor[(2, 1, 10), float64],) {
  %550 = @func_497() /* ty=(Tensor[(2, 1, 10), float64],) */;
  %551 = %550.0;
  (%551,)
}

def @func_1891() -> (Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) {
  %555 = fn () -> (Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) {
    %552 = @func_815() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(14, 11, 10), uint64], Tensor[(1540), uint16], Tensor[(?, 11, 10), uint16]) */;
    %553 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
    %554 = %552.2;
    (%553, %554)
  };
  %555() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(1540), uint16]) */
}

def @func_2783(%var_2781: Tensor[(15, 11, 10), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(15, 11, 10), int16], Tensor[(?, 11, 10), float64]) {
  @func_2780(%var_2781) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(15, 11, 10), int16], Tensor[(?, 11, 10), float64]) */
}

def @func_2698() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) {
  %566 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) {
    %556 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %557 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
    %558 = cast(%557, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
    %559 = asinh(%558) /* ty=Tensor[(2, 9, 10), float64] */;
    %560 = cast(%557, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
    %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%559, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %564 = %556.0;
    %565 = floor_mod(%562, %563) /* ty=Tensor[(2, 9, 10), float64] */;
    (%564, %565)
  };
  %566() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), float64]) */
}

def @func_2813() -> (Tensor[(2, 9, 10), int16],) {
  %567 = @func_1429() /* ty=Tensor[(2, 9, 10), int16] */;
  (%567,)
}

def @func_5098() -> (Tensor[(?, 11, 10), int8],) {
  %568 = @func_4231() /* ty=Tensor[(?, 11, 10), int8] */;
  (%568,)
}

def @func_5229(%var_5228: Tensor[(220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(2, 9, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(220), uint16], Tensor[(1320), uint16]) {
  %584 = fn (%var_5217: Tensor[(220), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(2, 9, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(220), uint16], Tensor[(1320), uint16]) {
    %569 = @func_4757() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
    %570 = %569.1;
    %571 = cast(%570, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
    %572 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
    %573 = @func_4661() /* ty=Tensor[(2, 9, 10), float32] */;
    %574 = cast(%573, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
    %575 = cast(%var_5217, dtype="uint16") /* ty=Tensor[(220), uint16] */;
    %576 = cast(meta[relay.Constant][23] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
    %577 = reshape(%575, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint16] */;
    %578 = reshape(%576, newshape=[1320]) /* ty=Tensor[(1320), uint16] */;
    %579 = @func_2106(%577, %578) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(2, 8, 10), uint8], Tensor[(3, 6), float64], Tensor[(?, 11, 10), uint16], Tensor[(448), float64], Tensor[(448, 1), float64], Tensor[(1320), uint16]) */;
    %580 = asin(%571) /* ty=Tensor[(?, 11, 10), float32] */;
    %581 = %572.1;
    %582 = sigmoid(%574) /* ty=Tensor[(2, 9, 10), float32] */;
    %583 = %579.3;
    (%580, %581, %582, %583, %var_5217, meta[relay.Constant][23] /* ty=Tensor[(1320), uint16] */)
  };
  %584(%var_5228) /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(2, 9, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(220), uint16], Tensor[(1320), uint16]) */
}

def @func_3252() -> Tensor[(?, 11, 10), uint16] {
  @func_3250() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_1981() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16]) {
  %585 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
  %586 = %585.1;
  %587 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  (%586, %587)
}

def @func_2125(%var_2124: Tensor[(14, 5, 14), bool]) -> Tensor[(14, 5, 14), bool] {
  %592 = fn (%var_2113: Tensor[(14, 5, 14), bool]) -> Tensor[(14, 5, 14), bool] {
    %588 = cast(%var_2113, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
    %589 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 5, 14), bool] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%590, %591) /* ty=Tensor[(14, 5, 14), bool] */
  };
  %592(%var_2124) /* ty=Tensor[(14, 5, 14), bool] */
}

def @func_3518() -> (Tensor[(2, 1, 10), float64],) {
  @func_3516() /* ty=(Tensor[(2, 1, 10), float64],) */
}

def @func_5462(%var_5461: Tensor[(5, 13, 2), float64]) -> (Tensor[(5, 13, 2), float64], Tensor[(2, 9, 10), float32]) {
  %596 = fn (%var_5425: Tensor[(5, 13, 2), float64]) -> (Tensor[(5, 13, 2), float64], Tensor[(2, 9, 10), float32]) {
    %593 = cast(%var_5425, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
    %594 = atan(%593) /* ty=Tensor[(5, 13, 2), float64] */;
    %595 = @func_4661() /* ty=Tensor[(2, 9, 10), float32] */;
    (%594, %595)
  };
  %596(%var_5461) /* ty=(Tensor[(5, 13, 2), float64], Tensor[(2, 9, 10), float32]) */
}

def @func_3735() -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), int16]) {
  %601 = fn () -> (Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), int16]) {
    %597 = @func_3531() /* ty=(Tensor[(?, 11, 10), float32],) */;
    %598 = @func_2813() /* ty=(Tensor[(2, 9, 10), int16],) */;
    %599 = %597.0;
    %600 = %598.0;
    (%599, %600)
  };
  %601() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(2, 9, 10), int16]) */
}

def @func_5688() -> (Tensor[(?, 11, 10), float32],) {
  %603 = fn () -> (Tensor[(?, 11, 10), float32],) {
    %602 = @func_4842() /* ty=Tensor[(?, 11, 10), float32] */;
    (%602,)
  };
  %603() /* ty=(Tensor[(?, 11, 10), float32],) */
}

def @func_4897() -> (Tensor[(?, 11, 10), uint16],) {
  %605 = fn () -> (Tensor[(?, 11, 10), uint16],) {
    %604 = @func_4403() /* ty=Tensor[(?, 11, 10), uint16] */;
    (%604,)
  };
  %605() /* ty=(Tensor[(?, 11, 10), uint16],) */
}

def @func_774() -> Tensor[(?, 11, 10), float32] {
  %607 = fn () -> Tensor[(?, 11, 10), float32] {
    %606 = @func_448() /* ty=(Tensor[(?, 11, 10), float32], Tensor[(?, 11, 10), uint16]) */;
    %606.0
  };
  %607() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_6275() -> (Tensor[(2, 1, 10), float64],) {
  %608 = @func_4059() /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), float32]) */;
  %609 = %608.0;
  (%609,)
}

def @func_2978() -> (Tensor[(?, 11, 10), float32],) {
  %610 = @func_1862() /* ty=Tensor[(?, 11, 10), float32] */;
  (%610,)
}

def @func_3278(%var_3277: Tensor[(1, 9, 3), float64]) -> Tensor[(1, 9, 3), float32] {
  %614 = fn (%var_3266: Tensor[(1, 9, 3), float64]) -> Tensor[(1, 9, 3), float32] {
    %611 = cast(%var_3266, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
    %612 = erf(%611) /* ty=Tensor[(1, 9, 3), float64] */;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
    asinh(%613) /* ty=Tensor[(1, 9, 3), float32] */
  };
  %614(%var_3277) /* ty=Tensor[(1, 9, 3), float32] */
}

def @func_2450(%var_2448: Tensor[(550, 2), int64]) -> (Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) {
  @func_2447(%var_2448) /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, ?, 10), int64], Tensor[(550, 2), int64]) */
}

def @func_410() -> (Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) {
  @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */
}

def @func_2360(%var_2358: uint32) -> (Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) {
  @func_2357(%var_2358) /* ty=(Tensor[(7, 4, 5), uint32], Tensor[(?, 11, 10), uint16], Tensor[(7, 4, 5), float32], Tensor[(?, 11, 10), float32]) */
}

def @func_2670() -> (Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) {
  @func_2668() /* ty=(Tensor[(?, 11, 10), float64], Tensor[(?, 11, 10), uint16]) */
}

def @func_6408(%var_6402: Tensor[(4, 11, 3), float32], %var_6403: Tensor[(4, 11, 3), float32]) -> (Tensor[(4, 11, 3), float32],) {
  %615 = cast(%var_6403, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %616 = shape_of(%var_6402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_6402, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %619 = power(%617, %618) /* ty=Tensor[(4, 11, 3), float32] */;
  (%619,)
}

def @func_2938() -> (Tensor[(?, 11, 10), float32],) {
  %620 = @func_1055() /* ty=(Tensor[(?, 11, 10), float32],) */;
  %621 = %620.0;
  (%621,)
}

def @func_2495(%var_2493: uint32, %var_2494: Tensor[(16, 3, 1), uint32]) -> (Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) {
  @func_2491(%var_2493, %var_2494) /* ty=(Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) */
}

def @func_300() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_1018(%var_946: Tensor[(12, 11, 10), uint16], %var_999: Tensor[(12, 11, 10), uint8]) -> (Tensor[(?, 11, 10), float32], Tensor[(12, 11, 10), int64], Tensor[(10, 10, 11), int64], Tensor[(1100), int64], Tensor[(2, 1, 10), float64], Tensor[(12, 11, 10), bool], Tensor[(?, 11, 10), float64]) {
  %622 = @func_773() /* ty=Tensor[(?, 11, 10), float32] */;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(?, 11, 10), float32] */;
  %624 = @func_364() /* ty=Tensor[(?, 11, 10), uint16] */;
  %625 = cast(%624, dtype="bool") /* ty=Tensor[(?, 11, 10), bool] */;
  %626 = cast(%var_946, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %627 = greater(%625, %626) /* ty=Tensor[(12, 11, 10), bool] */;
  %628 = cast(%var_946, dtype="uint8") /* ty=Tensor[(12, 11, 10), uint8] */;
  %629 = cast(%624, dtype="uint8") /* ty=Tensor[(?, 11, 10), uint8] */;
  %630 = logical_xor(%628, %629) /* ty=Tensor[(12, 11, 10), uint8] */;
  %631 = cast(%630, dtype="int64") /* ty=Tensor[(12, 11, 10), int64] */;
  %632 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%627, dtype="int64") /* ty=Tensor[(12, 11, 10), int64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %635 = cast(meta[relay.Constant][25] /* ty=Tensor[(1100), int64] */, dtype="int64") /* ty=Tensor[(1100), int64] */;
  %636 = reshape(%635, newshape=[10, 10, 11]) /* ty=Tensor[(10, 10, 11), int64] */;
  %637 = @func_645(%636) /* ty=(Tensor[(10, 10, 11), int64], Tensor[(?, 11, 10), uint16]) */;
  %638 = @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */;
  %639 = cast(%var_999, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %640 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%630, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = erf(%623) /* ty=Tensor[(?, 11, 10), float32] */;
  %644 = bitwise_and(%633, %634) /* ty=Tensor[(12, 11, 10), int64] */;
  %645 = %637.0;
  %646 = %638.1;
  %647 = logical_or(%641, %642) /* ty=Tensor[(12, 11, 10), bool] */;
  %648 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%643, %644, %645, meta[relay.Constant][25] /* ty=Tensor[(1100), int64] */, %646, %647, %648)
}

def @func_1716() -> (Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) {
  @func_1714() /* ty=(Tensor[(2, 8, 10), uint8], Tensor[(?, 11, 10), uint16], Tensor[(3, 6), float64]) */
}

def @func_3131() -> Tensor[(?, 11, 10), uint16] {
  @func_1739() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_2269(%var_2267: Tensor[(1320), uint16]) -> (Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) {
  @func_2266(%var_2267) /* ty=(Tensor[(2, 1, 10), float64], Tensor[(?, 11, 10), uint16], Tensor[(1320), float64], Tensor[(12, 11, 10), float32], Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), float64]) */
}

def @func_364() -> Tensor[(?, 11, 10), uint16] {
  @func_298() /* ty=Tensor[(?, 11, 10), uint16] */
}

def @func_1601() -> (Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) {
  %666 = fn () -> (Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) {
    %649 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
    %650 = %649.0;
    %651 = cast(%650, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
    %652 = log2(%651) /* ty=Tensor[(2, ?, 10), float64] */;
    %653 = cast(%650, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
    %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%652, dtype="float64") /* ty=Tensor[(2, ?, 10), float64] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %657 = floor_mod(%655, %656) /* ty=Tensor[(2, ?, 10), float64] */;
    %658 = cast(%657, dtype="uint32") /* ty=Tensor[(2, ?, 10), uint32] */;
    %659 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%652, dtype="uint32") /* ty=Tensor[(2, ?, 10), uint32] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %662 = cast(%652, dtype="uint8") /* ty=Tensor[(2, ?, 10), uint8] */;
    %663 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 8, 10), float64] */, dtype="uint8") /* ty=Tensor[(2, 8, 10), uint8] */;
    %664 = maximum(%660, %661) /* ty=Tensor[(2, ?, 10), uint32] */;
    %665 = logical_xor(%662, %663) /* ty=Tensor[(2, 8, 10), uint8] */;
    (%664, %665)
  };
  %666() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */
}

def @func_5664() -> (Tensor[(9, 7, 2), int16], Tensor[(14, 5, 14), int8], Tensor[(630), float64], Tensor[(9, 7, 2), float32], Tensor[(2, 8, 10), uint8]) {
  %686 = fn () -> (Tensor[(9, 7, 2), int16], Tensor[(14, 5, 14), int8], Tensor[(630), float64], Tensor[(9, 7, 2), float32], Tensor[(2, 8, 10), uint8]) {
    %667 = @func_3059() /* ty=(Tensor[(9, 7, 2), float64],) */;
    %668 = %667.0;
    %669 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 7, 2), float64] */, dtype="int16") /* ty=Tensor[(9, 7, 2), int16] */;
    %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%668, dtype="int16") /* ty=Tensor[(9, 7, 2), int16] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %673 = cast(meta[relay.Constant][28] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %674 = cast(meta[relay.Constant][28] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %675 = reshape(%673, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float64] */;
    %676 = reshape(%674, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float64] */;
    %677 = @func_3047(%675, %676) /* ty=(Tensor[(9, 14, 5), bool], Tensor[(14, 5, 14), int8], uint32, Tensor[(9, 14, 5), float32], Tensor[(14, 5, 14), bool], Tensor[(48, 1), float64], Tensor[(2, 1, 10), float64], Tensor[(14, 11, 10), uint64]) */;
    %678 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 7, 2), float64] */, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
    %679 = sigmoid(%678) /* ty=Tensor[(9, 7, 2), float32] */;
    %680 = cast(%679, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
    %681 = @func_1600() /* ty=(Tensor[(2, ?, 10), uint32], Tensor[(2, 8, 10), uint8]) */;
    %682 = minimum(%671, %672) /* ty=Tensor[(9, 7, 2), int16] */;
    %683 = %677.1;
    %684 = exp(%680) /* ty=Tensor[(9, 7, 2), float32] */;
    %685 = %681.1;
    (%682, %683, meta[relay.Constant][28] /* ty=Tensor[(630), float64] */, %684, %685)
  };
  %686() /* ty=(Tensor[(9, 7, 2), int16], Tensor[(14, 5, 14), int8], Tensor[(630), float64], Tensor[(9, 7, 2), float32], Tensor[(2, 8, 10), uint8]) */
}

def @func_2491(%var_2452: uint32, %var_2453: Tensor[(16, 3, 1), uint32]) -> (Tensor[(2, 9, 10), int16], Tensor[(16, 3, ?), int8], Tensor[(14, 5, 14), int8]) {
  %687 = @func_2155() /* ty=(Tensor[(2, 9, 10), int16],) */;
  %688 = cast(%var_2452, dtype="uint32") /* ty=uint32 */;
  %689 = cast(%var_2453, dtype="uint32") /* ty=Tensor[(16, 3, 1), uint32] */;
  %690 = right_shift(%688, %689) /* ty=Tensor[(16, 3, 1), uint32] */;
  %691 = cast(%var_2453, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %695 = cast(meta[relay.Constant][29] /* ty=Tensor[(980), bool] */, dtype="bool") /* ty=Tensor[(980), bool] */;
  %696 = reshape(%695, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), bool] */;
  %697 = @func_2123(%696) /* ty=Tensor[(14, 5, 14), bool] */;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %699 = log2(%698) /* ty=Tensor[(14, 5, 14), float32] */;
  %700 = cast(meta[relay.Constant][29] /* ty=Tensor[(980), bool] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="int8") /* ty=Tensor[(14, 5, 14), int8] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %704 = %687.0;
  %705 = subtract(%693, %694) /* ty=Tensor[(16, 3, ?), int8] */;
  %706 = bitwise_xor(%702, %703) /* ty=Tensor[(14, 5, 14), int8] */;
  (%704, %705, %706)
}

def @func_1698() -> Tensor[(3, 6), float64] {
  %707 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 6), float64] */;
  asin(%707) /* ty=Tensor[(3, 6), float64] */
}

def @func_332(%var_331: Tensor[(8, 14, 4), float64]) -> (Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) {
  %721 = fn (%var_307: Tensor[(8, 14, 4), float64]) -> (Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) {
    %708 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
    %709 = shape_of(%var_307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%var_307, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %712 = cast(%var_307, dtype="float64") /* ty=Tensor[(8, 14, 4), float64] */;
    %713 = rsqrt(%712) /* ty=Tensor[(8, 14, 4), float64] */;
    %714 = cast(%var_307, dtype="int64") /* ty=Tensor[(8, 14, 4), int64] */;
    %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%713, dtype="int64") /* ty=Tensor[(8, 14, 4), int64] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %718 = floor_divide(%710, %711) /* ty=Tensor[(8, 14, 4), float64] */;
    %719 = @func_298() /* ty=Tensor[(?, 11, 10), uint16] */;
    %720 = right_shift(%716, %717) /* ty=Tensor[(8, 14, 4), int64] */;
    (%718, %719, %720)
  };
  %721(%var_331) /* ty=(Tensor[(8, 14, 4), float64], Tensor[(?, 11, 10), uint16], Tensor[(8, 14, 4), int64]) */
}

def @func_2780(%var_2740: Tensor[(15, 11, 10), uint16]) -> (Tensor[(?, 11, 10), float32], Tensor[(15, 11, 10), int16], Tensor[(?, 11, 10), float64]) {
  %722 = @func_898() /* ty=(Tensor[(2, ?, 10), int64], Tensor[(?, 11, 10), float32]) */;
  %723 = @func_408() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(?, 11, 10), uint16]) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="int16") /* ty=Tensor[(?, 11, 10), int16] */;
  %726 = cast(%var_2740, dtype="int16") /* ty=Tensor[(15, 11, 10), int16] */;
  %727 = %722.1;
  %728 = maximum(%725, %726) /* ty=Tensor[(15, 11, 10), int16] */;
  %729 = @func_661() /* ty=Tensor[(?, 11, 10), float64] */;
  (%727, %728, %729)
}

def @func_3600() -> Tensor[(?, 11, 10), float32] {
  @func_3598() /* ty=Tensor[(?, 11, 10), float32] */
}

def @func_622() -> (Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) {
  @func_620() /* ty=(Tensor[(?, 11, 10), uint16], Tensor[(2, 1, 10), float64]) */
}

def @func_6546(%var_6536: Tensor[(9, 8, 8), float64]) -> Tensor[(9, 8, 8), float64] {
  %730 = cast(%var_6536, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  erf(%730) /* ty=Tensor[(9, 8, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen233/build/output.py:2410: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen233/build/output.py", line 2415, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(288) tvmgen_default_fused_right_shift_kernel0(uint* __restrict__ T_right_shift, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  T_right_shift[(((int)threadIdx.x))] = (placeholder[(0)] >> placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

