==========mod==========
#[version = "0.0.5"]
def @func_11976() -> (uint32,) {
  %0 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %1 = %0.1;
  (%1,)
}

def @func_6620(%var_6592: Tensor[(336), float64], %var_6595: Tensor[(1456), float64]) -> (uint32, Tensor[(594), int32], Tensor[(336), float64], Tensor[(16, 13, 7), uint64], Tensor[(1456), float64], uint32) {
  %2 = @func_6430() /* ty=(uint32,) */;
  %3 = cast(%var_6592, dtype="float64") /* ty=Tensor[(336), float64] */;
  %4 = reshape(%3, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %5 = @func_5486(%4) /* ty=(uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) */;
  %6 = cast(%var_6595, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %7 = reshape(%6, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), float64] */;
  %8 = @func_4004() /* ty=(uint32,) */;
  %9 = %2.0;
  %10 = %5.4;
  %11 = @func_3288(%7) /* ty=Tensor[(16, 13, 7), uint64] */;
  %12 = %8.0;
  (%9, %10, %var_6592, %11, %var_6595, %12)
}

def @func_4004() -> (uint32,) {
  %13 = @func_3741() /* ty=(uint32,) */;
  %14 = %13.0;
  (%14,)
}

def @func_4503() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %15 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %16 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %17 = %15.0;
  (%16, %17)
}

def @func_8781(%var_8775: Tensor[(2, 1, 7), int8], %var_8776: Tensor[(2, 13, 7), int8]) -> (Tensor[(2, 13, 7), int8],) {
  %18 = cast(%var_8775, dtype="int8") /* ty=Tensor[(2, 1, 7), int8] */;
  %19 = cast(%var_8776, dtype="int8") /* ty=Tensor[(2, 13, 7), int8] */;
  %20 = right_shift(%18, %19) /* ty=Tensor[(2, 13, 7), int8] */;
  (%20,)
}

def @func_11503() -> Tensor[(16, 13, 7), float32] {
  %21 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %21.0
}

def @func_4346() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %22 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %23 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %24 = %22.0;
  %25 = %23.0;
  (%24, %25)
}

def @func_11292(%var_11266: int32, %var_11270: Tensor[(192), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(9, 13, 11), bool], Tensor[(8, 1, 16), bool], int32, Tensor[(1, 128), int32], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], uint32, uint32) {
  %26 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %27 = @func_8116() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %28 = cast(%var_11266, dtype="int32") /* ty=int32 */;
  %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 128), int32] */, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
  %30 = reshape(%28, newshape=[]) /* ty=int32 */;
  %31 = reshape(%29, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
  %32 = @func_2045(%30, %31) /* ty=(Tensor[(8, 1, 16), bool],) */;
  %33 = cast(%var_11270, dtype="float32") /* ty=Tensor[(192), float32] */;
  %34 = cast(%var_11270, dtype="float32") /* ty=Tensor[(192), float32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
  %36 = reshape(%33, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %37 = reshape(%34, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %38 = reshape(%35, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %39 = @func_2229(%36, %37, %38) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %40 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %41 = @func_6268() /* ty=(uint32,) */;
  %42 = %26.0;
  %43 = %27.0;
  %44 = @func_9893() /* ty=Tensor[(9, 13, 11), bool] */;
  %45 = %32.0;
  %46 = %39.0;
  %47 = %40.0;
  %48 = @func_8169() /* ty=Tensor[(16, 13, 7), float64] */;
  %49 = %41.0;
  %50 = @func_5955() /* ty=uint32 */;
  (%42, %43, %44, %45, %var_11266, meta[relay.Constant][0] /* ty=Tensor[(1, 128), int32] */, %46, %var_11270, meta[relay.Constant][1] /* ty=Tensor[(132), int32] */, %47, %48, %49, %50)
}

def @func_3480() -> uint32 {
  %51 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %51.1
}

def @func_6034() -> (Tensor[(9, 13, 11), bool],) {
  %52 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
  (%52,)
}

def @func_9559() -> Tensor[(16, 13, 7), float64] {
  %53 = @func_4761() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %53.0
}

def @func_10024() -> Tensor[(16, 13, 7), float32] {
  @func_4808() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_6390(%var_6383: Tensor[(9, 13, 11), bool]) -> (Tensor[(9, 13, 11), uint64],) {
  %54 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
  %55 = cast(%var_6383, dtype="uint64") /* ty=Tensor[(9, 13, 11), uint64] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="uint64") /* ty=Tensor[(9, 13, 11), uint64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %59 = bitwise_xor(%57, %58) /* ty=Tensor[(9, 13, 11), uint64] */;
  (%59,)
}

def @func_11784() -> Tensor[(16, 13, 7), float64] {
  @func_10310() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_6430() -> (uint32,) {
  %60 = @func_6369() /* ty=(uint32, uint32) */;
  %61 = %60.0;
  (%61,)
}

def @func_1224(%var_1159: Tensor[(13, 7, 3), uint64], %var_1160: Tensor[(13, 7, 3), uint64], %var_1180: Tensor[(20, 2), uint32]) -> (Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) {
  %62 = cast(%var_1160, dtype="uint64") /* ty=Tensor[(13, 7, 3), uint64] */;
  %63 = shape_of(%var_1159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_1159, dtype="uint64") /* ty=Tensor[(13, 7, 3), uint64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %66 = maximum(%64, %65) /* ty=Tensor[(13, 7, 3), uint64] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %68 = shape_of(%var_1159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%var_1159, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %73 = reshape(%71, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %74 = reshape(%72, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %75 = @func_699(%73, %74) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
  %76 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %77 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %78 = cast(%var_1180, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
  %79 = reshape(%77, newshape=[]) /* ty=uint32 */;
  %80 = reshape(%78, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %81 = @func_349(%79, %80) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %82 = %81.1;
  %83 = cast(%82, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %84 = reshape(%76, newshape=[]) /* ty=uint32 */;
  %85 = reshape(%83, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %86 = @func_349(%84, %85) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %87 = cast(%82, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
  %88 = cast(%var_1160, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %89 = acos(%88) /* ty=Tensor[(13, 7, 3), float32] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(13, 7, 3), float64] */;
  %91 = %75.2;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(154), float64] */;
  %93 = erf(%87) /* ty=Tensor[(5, 1, 8), float64] */;
  %94 = cast(%93, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %95 = reshape(%92, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %96 = reshape(%94, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %97 = @func_375(%95, %96) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %98 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %99 = cast(%var_1180, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
  %100 = reshape(%98, newshape=[]) /* ty=uint32 */;
  %101 = reshape(%99, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %102 = @func_349(%100, %101) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %103 = power(%69, %70) /* ty=Tensor[(13, 7, 3), float32] */;
  %104 = %86.1;
  %105 = asinh(%90) /* ty=Tensor[(13, 7, 3), float64] */;
  %106 = %97.2;
  %107 = %102.0;
  (%103, meta[relay.Constant][2] /* ty=uint32 */, %var_1180, %91, meta[relay.Constant][3] /* ty=Tensor[(312), uint32] */, %104, %93, %105, %106, %107)
}

def @func_7571() -> (Tensor[(16, 13, 7), float64],) {
  %108 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %109 = %108.1;
  (%109,)
}

def @func_8116() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %110 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %111 = %110.1;
  %112 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
  (%111, %112)
}

def @func_11331() -> (Tensor[(16, 13, 7), float64],) {
  %113 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %114 = %113.1;
  (%114,)
}

def @func_6149() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) {
  %115 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %116 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %117 = cast(meta[relay.Constant][4] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %119 = reshape(%117, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %120 = reshape(%118, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %121 = @func_699(%119, %120) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
  %122 = %115.1;
  %123 = %116.0;
  %124 = %121.0;
  (%122, %123, %124, meta[relay.Constant][4] /* ty=Tensor[(312), uint32] */)
}

def @func_4971() -> (uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) {
  %125 = @func_3741() /* ty=(uint32,) */;
  %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %129 = reshape(%126, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %130 = reshape(%127, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %131 = reshape(%128, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %132 = @func_1712(%129, %130, %131) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %133 = %125.0;
  %134 = %132.3;
  (%133, %134, meta[relay.Constant][5] /* ty=Tensor[(54), int16] */, meta[relay.Constant][6] /* ty=Tensor[(40), uint32] */)
}

def @func_3911(%var_3868: Tensor[(12, 7, 13), float64], %var_3869: Tensor[(12, 7, 13), float64], %var_3883: Tensor[(12, 7, 13), float64], %var_3906: Tensor[(12, 7, 13), float32]) -> (Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) {
  %135 = cast(%var_3869, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  %136 = shape_of(%var_3868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_3868, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %139 = cast(%var_3883, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %140 = shape_of(%var_3868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_3868, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %143 = cast(%var_3868, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
  %144 = erf(%143) /* ty=Tensor[(12, 7, 13), float32] */;
  %145 = cast(%var_3906, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %149 = power(%137, %138) /* ty=Tensor[(12, 7, 13), float64] */;
  %150 = right_shift(%141, %142) /* ty=Tensor[(12, 7, 13), int8] */;
  %151 = add(%147, %148) /* ty=Tensor[(12, 7, 13), float32] */;
  (%149, %150, %151)
}

def @func_10466() -> (Tensor[(16, 13, 7), float32],) {
  %152 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
  (%152,)
}

def @func_10599() -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32]) {
  %153 = @func_9428() /* ty=(Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) */;
  %154 = @func_10310() /* ty=Tensor[(16, 13, 7), float64] */;
  %155 = %153.0;
  (%154, %155)
}

def @func_10699(%var_10659: Tensor[(54), int16], %var_10660: Tensor[(20, 2), uint32], %var_10664: Tensor[(9, 13, 11), bool]) -> (Tensor[(11, 2, 7), uint16], Tensor[(54), int16], Tensor[(20, 2), uint32], Tensor[(9, 13, 11), int8]) {
  %156 = cast(%var_10659, dtype="int16") /* ty=Tensor[(54), int16] */;
  %157 = cast(%var_10659, dtype="int16") /* ty=Tensor[(54), int16] */;
  %158 = cast(%var_10660, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
  %159 = reshape(%156, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %160 = reshape(%157, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %161 = reshape(%158, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %162 = @func_1712(%159, %160, %161) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %163 = @func_8284() /* ty=Tensor[(9, 13, 11), bool] */;
  %164 = cast(%var_10664, dtype="int8") /* ty=Tensor[(9, 13, 11), int8] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="int8") /* ty=Tensor[(9, 13, 11), int8] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %168 = %162.1;
  %169 = add(%166, %167) /* ty=Tensor[(9, 13, 11), int8] */;
  (%168, %var_10659, %var_10660, %169)
}

def @func_10731() -> (Tensor[(16, 13, 7), float64],) {
  %170 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %171 = %170.0;
  (%171,)
}

def @func_12007() -> (Tensor[(16, 13, 7), float64],) {
  %172 = @func_11031() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64], uint32) */;
  %173 = %172.2;
  (%173,)
}

def @func_375(%var_356: Tensor[(11, 2, 7), float64], %var_369: Tensor[(40), uint32]) -> (Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) {
  %174 = cast(%var_356, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %175 = asin(%174) /* ty=Tensor[(11, 2, 7), float64] */;
  %176 = cast(%var_356, dtype="uint16") /* ty=Tensor[(11, 2, 7), uint16] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="uint16") /* ty=Tensor[(11, 2, 7), uint16] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %180 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %181 = cast(%var_369, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %182 = reshape(%180, newshape=[]) /* ty=uint32 */;
  %183 = reshape(%181, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %184 = @func_349(%182, %183) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %185 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %186 = cast(%var_369, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %187 = reshape(%185, newshape=[]) /* ty=uint32 */;
  %188 = reshape(%186, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %189 = @func_349(%187, %188) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %190 = maximum(%178, %179) /* ty=Tensor[(11, 2, 7), uint16] */;
  %191 = %184.1;
  %192 = %189.0;
  (%190, %191, meta[relay.Constant][7] /* ty=uint32 */, %var_369, %192)
}

def @func_5030(%var_5001: Tensor[(40), uint32]) -> (uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  %193 = cast(%var_5001, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %194 = reshape(%193, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %195 = @func_3377(%194) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) */;
  %196 = @func_4840() /* ty=(uint32,) */;
  %197 = @func_3480() /* ty=uint32 */;
  %198 = %195.2;
  %199 = %196.0;
  (%197, %198, %var_5001, %199)
}

def @func_7416(%var_7366: Tensor[(1, 13, 8), float64], %var_7409: Tensor[(1092), float64]) -> (Tensor[(1, 13, 8), float64], Tensor[(1, 13, 8), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
  %200 = cast(%var_7366, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
  %201 = atanh(%200) /* ty=Tensor[(1, 13, 8), float64] */;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
  %203 = cast(%201, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
  %204 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %205 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %206 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %207 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %208 = cast(%var_7409, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %209 = reshape(%205, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %210 = reshape(%206, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %211 = reshape(%207, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %212 = reshape(%208, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float32] */;
  %213 = @func_3911(%209, %210, %211, %212) /* ty=(Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) */;
  %214 = sqrt(%202) /* ty=Tensor[(1, 13, 8), float64] */;
  %215 = erf(%203) /* ty=Tensor[(1, 13, 8), float64] */;
  %216 = %204.1;
  %217 = %213.0;
  (%214, %215, %216, %217, %var_7409)
}

def @func_9266() -> (uint32,) {
  %218 = @func_5098() /* ty=(uint32, Tensor[(16, 13, 7), float64], uint32) */;
  %219 = %218.0;
  (%219,)
}

def @func_5955() -> uint32 {
  %220 = @func_5913() /* ty=(uint32,) */;
  %220.0
}

def @func_6468() -> Tensor[(9, 13, 11), bool] {
  %221 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %221.0
}

def @func_4840() -> (uint32,) {
  %222 = @func_4121() /* ty=(uint32,) */;
  %223 = %222.0;
  (%223,)
}

def @func_10612() -> uint32 {
  %224 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %224.0
}

def @func_2969(%var_2927: uint32, %var_2928: Tensor[(40), uint32], %var_2933: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) {
  %225 = cast(%var_2927, dtype="uint32") /* ty=uint32 */;
  %226 = cast(%var_2928, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %227 = reshape(%225, newshape=[]) /* ty=uint32 */;
  %228 = reshape(%226, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %229 = @func_349(%227, %228) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %230 = cast(%var_2933, dtype="int16") /* ty=Tensor[(54), int16] */;
  %231 = cast(%var_2933, dtype="int16") /* ty=Tensor[(54), int16] */;
  %232 = cast(%var_2928, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %233 = reshape(%230, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %234 = reshape(%231, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %235 = reshape(%232, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %236 = @func_1712(%233, %234, %235) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %237 = %236.1;
  %238 = cast(%237, dtype="int64") /* ty=Tensor[(11, 2, 7), int64] */;
  %239 = cast(%var_2927, dtype="int64") /* ty=int64 */;
  %240 = bitwise_or(%238, %239) /* ty=Tensor[(11, 2, 7), int64] */;
  %241 = cast(%240, dtype="bool") /* ty=Tensor[(11, 2, 7), bool] */;
  %242 = cast(%var_2927, dtype="bool") /* ty=bool */;
  %243 = cast(%var_2933, dtype="bool") /* ty=Tensor[(54), bool] */;
  %244 = cast(%var_2927, dtype="bool") /* ty=bool */;
  %245 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %246 = %229.0;
  %247 = logical_and(%241, %242) /* ty=Tensor[(11, 2, 7), bool] */;
  %248 = greater_equal(%243, %244) /* ty=Tensor[(54), bool] */;
  (%245, %246, %var_2928, %247, %248)
}

def @func_7940() -> (Tensor[(16, 13, 7), float32], uint32) {
  %249 = @func_4121() /* ty=(uint32,) */;
  %250 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
  %251 = %249.0;
  (%250, %251)
}

def @func_5578() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %252 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
  %255 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
  %256 = exp(%254) /* ty=Tensor[(16, 13, 7), float32] */;
  %257 = %255.1;
  (%256, %257)
}

def @func_4155() -> uint32 {
  %258 = @func_3624() /* ty=(uint32,) */;
  %258.0
}

def @func_6012(%var_6004: Tensor[(594), int32], %var_6005: Tensor[(336), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
  %259 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %262 = cast(%var_6004, dtype="int32") /* ty=Tensor[(594), int32] */;
  %263 = cast(%var_6004, dtype="int32") /* ty=Tensor[(594), int32] */;
  %264 = cast(%var_6005, dtype="float64") /* ty=Tensor[(336), float64] */;
  %265 = reshape(%262, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %266 = reshape(%263, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %267 = reshape(%264, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %268 = @func_1871(%265, %266, %267) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
  %269 = cos(%261) /* ty=Tensor[(16, 13, 7), float64] */;
  %270 = %268.2;
  (%269, %270, %var_6004, %var_6005)
}

def @func_11951() -> (uint32, uint32) {
  %271 = @func_5913() /* ty=(uint32,) */;
  %272 = %271.0;
  %273 = @func_11664() /* ty=uint32 */;
  (%272, %273)
}

def @func_9936(%var_9912: Tensor[(2340), float64]) -> (uint32, Tensor[(132, 8), float32], Tensor[(16, 4), uint32], Tensor[(2340), float64], Tensor[(64), uint32], Tensor[(13, 16, 15), float32], Tensor[(16, 13, 7), float64]) {
  %274 = @func_3741() /* ty=(uint32,) */;
  %275 = cast(%var_9912, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %276 = cast(meta[relay.Constant][8] /* ty=Tensor[(64), uint32] */, dtype="uint32") /* ty=Tensor[(64), uint32] */;
  %277 = reshape(%275, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %278 = reshape(%276, newshape=[16, 4]) /* ty=Tensor[(16, 4), uint32] */;
  %279 = @func_9796(%277, %278) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) */;
  %280 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %281 = %274.0;
  %282 = @func_8679() /* ty=Tensor[(132, 8), float32] */;
  %283 = %279.1;
  %284 = %280.0;
  %285 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
  (%281, %282, %283, %var_9912, meta[relay.Constant][8] /* ty=Tensor[(64), uint32] */, %284, %285)
}

def @func_8169() -> Tensor[(16, 13, 7), float64] {
  @func_5405() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_5192() -> Tensor[(9, 13, 11), bool] {
  %286 = @func_3480() /* ty=uint32 */;
  %287 = cast(%286, dtype="bool") /* ty=bool */;
  %288 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 13, 11), uint32] */, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
  greater(%287, %288) /* ty=Tensor[(9, 13, 11), bool] */
}

def @func_3153() -> (Tensor[(16, 13, 7), float64],) {
  %289 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %290 = %289.0;
  (%290,)
}

def @func_8561() -> (Tensor[(9, 13, 11), bool],) {
  %291 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
  (%291,)
}

def @func_11115() -> (Tensor[(16, 13, 7), float32], Tensor[(11, 12, 8), float64]) {
  %292 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %293 = @func_7545() /* ty=(Tensor[(11, 12, 8), float64], uint32) */;
  %294 = %292.0;
  %295 = %293.0;
  (%294, %295)
}

def @func_6498(%var_6493: Tensor[(48, 4), float32], %var_6494: Tensor[(132), int32]) -> (uint32, Tensor[(24, 8), float32], Tensor[(48, 4), float32], Tensor[(132), int32], Tensor[(40), uint32]) {
  %296 = @func_6176() /* ty=(uint32,) */;
  %297 = cast(%var_6493, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %298 = cast(%var_6494, dtype="int32") /* ty=Tensor[(132), int32] */;
  %299 = %296.0;
  %300 = cast(%299, dtype="uint32") /* ty=uint32 */;
  %301 = cast(meta[relay.Constant][10] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %302 = reshape(%297, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %303 = reshape(%298, newshape=[132]) /* ty=Tensor[(132), int32] */;
  %304 = reshape(%300, newshape=[]) /* ty=uint32 */;
  %305 = reshape(%301, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %306 = @func_4599(%302, %303, %304, %305) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) */;
  %307 = %306.2;
  (%299, %307, %var_6493, %var_6494, meta[relay.Constant][10] /* ty=Tensor[(40), uint32] */)
}

def @func_8349() -> (Tensor[(16, 13, 7), float64],) {
  %308 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %309 = %308.0;
  (%309,)
}

def @func_5744() -> Tensor[(16, 13, 7), float64] {
  %310 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %310.1
}

def @func_8222(%var_8218: Tensor[(11, 12, 1), float32]) -> Tensor[(11, 12, 1), float32] {
  %311 = cast(%var_8218, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  sinh(%311) /* ty=Tensor[(11, 12, 1), float32] */
}

def @func_9382() -> (Tensor[(9, 13, 11), bool],) {
  %312 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  (%312,)
}

def @func_7208(%var_7200: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float32] {
  %313 = cast(%var_7200, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  cos(%313) /* ty=Tensor[(3, 12, 1), float32] */
}

def @func_3413() -> (Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) {
  %314 = cast(meta[relay.Constant][11] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %315 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %316 = reshape(%314, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float32] */;
  %317 = reshape(%315, newshape=[]) /* ty=uint32 */;
  %318 = @func_3264(%316, %317) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) */;
  %319 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %320 = %318.2;
  (%319, %320, meta[relay.Constant][11] /* ty=Tensor[(220), float32] */, meta[relay.Constant][12] /* ty=uint32 */)
}

def @func_5338() -> uint32 {
  %321 = @func_4840() /* ty=(uint32,) */;
  %321.0
}

def @func_11168() -> (Tensor[(9, 13, 11), bool], uint32) {
  %322 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %323 = @func_6430() /* ty=(uint32,) */;
  %324 = %322.0;
  %325 = %323.0;
  (%324, %325)
}

def @func_7155() -> (uint32, uint32, Tensor[(16, 13, 7), float64]) {
  %326 = @func_4840() /* ty=(uint32,) */;
  %327 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %328 = %326.0;
  %329 = @func_5955() /* ty=uint32 */;
  %330 = %327.0;
  (%328, %329, %330)
}

def @func_11411() -> uint32 {
  %331 = @func_6268() /* ty=(uint32,) */;
  %331.0
}

def @func_5323() -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  %332 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %333 = cast(meta[relay.Constant][13] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %334 = reshape(%333, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %335 = @func_5030(%334) /* ty=(uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) */;
  %336 = @func_4121() /* ty=(uint32,) */;
  %337 = %332.1;
  %338 = %335.1;
  %339 = %336.0;
  (%337, %338, meta[relay.Constant][13] /* ty=Tensor[(40), uint32] */, %339)
}

def @func_8771() -> (uint32,) {
  %340 = @func_4840() /* ty=(uint32,) */;
  %341 = %340.0;
  (%341,)
}

def @func_5486(%var_5462: Tensor[(336), float64]) -> (uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
  %342 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %343 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
  %346 = cast(meta[relay.Constant][14] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %347 = cast(meta[relay.Constant][14] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %348 = cast(%var_5462, dtype="float64") /* ty=Tensor[(336), float64] */;
  %349 = reshape(%346, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %350 = reshape(%347, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %351 = reshape(%348, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %352 = @func_1871(%349, %350, %351) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
  %353 = %342.3;
  %354 = sin(%345) /* ty=Tensor[(16, 13, 7), float32] */;
  %355 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
  %356 = %352.2;
  (%353, %354, %355, %356, meta[relay.Constant][14] /* ty=Tensor[(594), int32] */, %var_5462)
}

def @func_11543() -> (uint32,) {
  %357 = @func_5338() /* ty=uint32 */;
  (%357,)
}

def @func_11031() -> (uint32, uint32, Tensor[(16, 13, 7), float64], uint32) {
  %358 = @func_10648() /* ty=(uint32,) */;
  %359 = @func_7287() /* ty=uint32 */;
  %360 = %358.0;
  %361 = @func_8273() /* ty=Tensor[(16, 13, 7), float64] */;
  %362 = @func_5955() /* ty=uint32 */;
  (%359, %360, %361, %362)
}

def @func_9683() -> (Tensor[(16, 13, 7), float64],) {
  %363 = @func_8116() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %364 = %363.1;
  (%364,)
}

def @func_10092() -> uint32 {
  %365 = @func_8771() /* ty=(uint32,) */;
  %365.0
}

def @func_3189() -> (Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) {
  %366 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
  %367 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %368 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %369 = cast(meta[relay.Constant][17] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
  %370 = reshape(%367, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %371 = reshape(%368, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %372 = reshape(%369, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %373 = @func_2229(%370, %371, %372) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %374 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %376 = cast(meta[relay.Constant][17] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
  %377 = reshape(%374, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %378 = reshape(%375, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %379 = reshape(%376, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %380 = @func_2229(%377, %378, %379) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %381 = exp(%366) /* ty=Tensor[(13, 16, 15), float32] */;
  %382 = %373.2;
  %383 = %380.2;
  (%381, %382, meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, meta[relay.Constant][17] /* ty=Tensor[(132), int32] */, %383)
}

def @func_2229(%var_2202: Tensor[(12, 2, 8), float32], %var_2203: Tensor[(12, 2, 8), float32], %var_2217: Tensor[(132, 1), int32]) -> (Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) {
  %384 = cast(%var_2203, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
  %385 = shape_of(%var_2202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_2202, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %388 = cast(%var_2217, dtype="int32") /* ty=Tensor[(132, 1), int32] */;
  %389 = cast(%var_2217, dtype="int32") /* ty=Tensor[(132, 1), int32] */;
  %390 = reshape(%388, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %391 = reshape(%389, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %392 = @func_1815(%390, %391) /* ty=(Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) */;
  %393 = cast(%var_2217, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
  %394 = cast(meta[relay.Constant][18] /* ty=Tensor[(132, 8), int32] */, dtype="float32") /* ty=Tensor[(132, 8), float32] */;
  %395 = subtract(%386, %387) /* ty=Tensor[(12, 2, 8), float32] */;
  %396 = %392.1;
  %397 = power(%393, %394) /* ty=Tensor[(132, 8), float32] */;
  (%395, %396, %397)
}

def @func_5803() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) {
  %398 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
  %399 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
  %400 = %398.1;
  %401 = %399.1;
  %402 = @func_5338() /* ty=uint32 */;
  (%400, %401, %402)
}

def @func_6306(%var_6293: Tensor[(1092), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  %403 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %404 = cast(%var_6293, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %405 = reshape(%404, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %406 = @func_4070(%405) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
  %407 = cast(%var_6293, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %408 = %403.1;
  %409 = %406.2;
  %410 = tan(%407) /* ty=Tensor[(1092), float64] */;
  (%408, %409, %410)
}

def @func_7545() -> (Tensor[(11, 12, 8), float64], uint32) {
  %411 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %412 = @func_7155() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64]) */;
  %413 = erf(%411) /* ty=Tensor[(11, 12, 8), float64] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_10957(%var_10852: Tensor[(9, 8, 13), float32], %var_10864: Tensor[(154), float64], %var_10868: Tensor[(132), float32], %var_10893: Tensor[(9, 8, 13), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), uint32], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(11, 12, 1), float32], Tensor[(132), float32], Tensor[(16, 13, 7), float64], Tensor[(9, 8, 13), int16], Tensor[(9, 8, 13), float64], Tensor[(9, 8, 13), bool], Tensor[(5, 15, 10), uint8], Tensor[(50, 15), uint8], Tensor[(16, 13, 7), float32], Tensor[(11, 4, 3), float32]) {
  %415 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %416 = cast(%var_10864, dtype="float64") /* ty=Tensor[(154), float64] */;
  %417 = cast(meta[relay.Constant][20] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %418 = reshape(%416, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %419 = reshape(%417, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %420 = @func_375(%418, %419) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %421 = cast(%var_10868, dtype="float32") /* ty=Tensor[(132), float32] */;
  %422 = reshape(%421, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), float32] */;
  %423 = @func_10354() /* ty=(Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) */;
  %424 = cast(%var_10852, dtype="float32") /* ty=Tensor[(9, 8, 13), float32] */;
  %425 = sin(%424) /* ty=Tensor[(9, 8, 13), float32] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(9, 8, 13), float32] */;
  %427 = erf(%426) /* ty=Tensor[(9, 8, 13), float32] */;
  %428 = cast(%var_10893, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = greater_equal(%430, %431) /* ty=Tensor[(9, 8, 13), bool] */;
  %433 = cast(%var_10893, dtype="int16") /* ty=Tensor[(9, 8, 13), int16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="int16") /* ty=Tensor[(9, 8, 13), int16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %437 = cast(%425, dtype="float64") /* ty=Tensor[(9, 8, 13), float64] */;
  %438 = cast(%425, dtype="float64") /* ty=Tensor[(9, 8, 13), float64] */;
  %439 = log10(%438) /* ty=Tensor[(9, 8, 13), float64] */;
  %440 = cast(%432, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(meta[relay.Constant][21] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %445 = cast(meta[relay.Constant][21] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %446 = reshape(%444, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), uint8] */;
  %447 = reshape(%445, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), uint8] */;
  %448 = @func_8649(%446, %447) /* ty=(Tensor[(5, 15, 10), uint8],) */;
  %449 = @func_8222(%422) /* ty=Tensor[(11, 12, 1), float32] */;
  %450 = cast(%449, dtype="int32") /* ty=Tensor[(11, 12, 1), int32] */;
  %451 = cast(%var_10868, dtype="int32") /* ty=Tensor[(132), int32] */;
  %452 = reshape(%450, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %453 = reshape(%451, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %454 = @func_1815(%452, %453) /* ty=(Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) */;
  %455 = %415.1;
  %456 = %420.1;
  %457 = %423.1;
  %458 = subtract(%435, %436) /* ty=Tensor[(9, 8, 13), int16] */;
  %459 = asin(%437) /* ty=Tensor[(9, 8, 13), float64] */;
  %460 = less_equal(%442, %443) /* ty=Tensor[(9, 8, 13), bool] */;
  %461 = %448.0;
  %462 = @func_10024() /* ty=Tensor[(16, 13, 7), float32] */;
  %463 = %454.1;
  (%455, %456, %var_10864, meta[relay.Constant][20] /* ty=Tensor[(40), uint32] */, %449, %var_10868, %457, %458, %459, %460, %461, meta[relay.Constant][21] /* ty=Tensor[(50, 15), uint8] */, %462, %463)
}

def @func_1815(%var_1799: Tensor[(11, 4, 3), int32], %var_1800: Tensor[(11, 4, 3), int32]) -> (Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) {
  %464 = cast(%var_1800, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %465 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_1799, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %468 = subtract(%466, %467) /* ty=Tensor[(11, 4, 3), int32] */;
  %469 = cast(%468, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %470 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_1799, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %473 = cast(%var_1800, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %474 = minimum(%471, %472) /* ty=Tensor[(11, 4, 3), int64] */;
  %475 = asin(%473) /* ty=Tensor[(11, 4, 3), float32] */;
  (%474, %475)
}

def @func_7872() -> (Tensor[(16, 13, 7), float64], uint32, uint32) {
  %476 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %477 = @func_6176() /* ty=(uint32,) */;
  %478 = @func_5913() /* ty=(uint32,) */;
  %479 = %476.1;
  %480 = %477.0;
  %481 = %478.0;
  (%479, %480, %481)
}

def @func_9715() -> (Tensor[(16, 13, 7), float64],) {
  %482 = @func_7155() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64]) */;
  %483 = %482.2;
  (%483,)
}

def @func_6846() -> (uint32,) {
  %484 = @func_3741() /* ty=(uint32,) */;
  %485 = %484.0;
  (%485,)
}

def @func_4599(%var_4568: Tensor[(24, 8), float32], %var_4569: Tensor[(132), int32], %var_4573: uint32, %var_4574: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) {
  %486 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %487 = cast(%var_4568, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %488 = cast(%var_4568, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %489 = cast(%var_4569, dtype="int32") /* ty=Tensor[(132), int32] */;
  %490 = reshape(%487, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %491 = reshape(%488, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %492 = reshape(%489, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %493 = @func_2229(%490, %491, %492) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %494 = cast(%var_4573, dtype="uint32") /* ty=uint32 */;
  %495 = cast(%var_4574, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %496 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
  %497 = reshape(%494, newshape=[]) /* ty=uint32 */;
  %498 = reshape(%495, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %499 = reshape(%496, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %500 = @func_2969(%497, %498, %499) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %501 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %502 = %501.4;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(132, 8), float64] */;
  %504 = atan(%503) /* ty=Tensor[(132, 8), float64] */;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(132, 8), bool] */;
  %506 = cast(%var_4573, dtype="bool") /* ty=bool */;
  %507 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %508 = %486.1;
  %509 = %493.0;
  %510 = %500.3;
  %511 = equal(%505, %506) /* ty=Tensor[(132, 8), bool] */;
  %512 = %507.2;
  (%508, %509, %var_4568, %var_4569, %510, %var_4574, meta[relay.Constant][22] /* ty=Tensor[(54), int16] */, %511, %512)
}

def @func_7035() -> (Tensor[(16, 13, 7), float64],) {
  %513 = @func_6684() /* ty=Tensor[(16, 13, 7), float64] */;
  (%513,)
}

def @func_8956() -> uint32 {
  %514 = @func_7872() /* ty=(Tensor[(16, 13, 7), float64], uint32, uint32) */;
  %514.2
}

def @func_1712(%var_1687: Tensor[(3, 2, 9), int16], %var_1688: Tensor[(3, 2, 9), int16], %var_1695: Tensor[(40), uint32]) -> (Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) {
  %515 = cast(%var_1688, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %516 = shape_of(%var_1687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_1687, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(22, 7), float64] */, dtype="float64") /* ty=Tensor[(22, 7), float64] */;
  %520 = cast(%var_1695, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %521 = reshape(%519, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %522 = reshape(%520, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %523 = @func_375(%521, %522) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %524 = equal(%517, %518) /* ty=Tensor[(3, 2, 9), bool] */;
  %525 = %523.0;
  (%524, %525, meta[relay.Constant][23] /* ty=Tensor[(22, 7), float64] */, %var_1695)
}

def @func_4070(%var_4057: Tensor[(1092), float64]) -> (Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) {
  %526 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %527 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %528 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %529 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %530 = cast(%var_4057, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %531 = reshape(%527, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %532 = reshape(%528, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %533 = reshape(%529, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %534 = reshape(%530, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float32] */;
  %535 = @func_3911(%531, %532, %533, %534) /* ty=(Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) */;
  %536 = %526.1;
  %537 = %535.1;
  (%536, %537, %var_4057)
}

def @func_9644() -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
  %538 = @func_5323() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) */;
  %539 = @func_8265() /* ty=(Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) */;
  %540 = %538.1;
  %541 = %539.2;
  (%540, %541)
}

def @func_8265() -> (Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) {
  %542 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %543 = %542.0;
  %544 = @func_7287() /* ty=uint32 */;
  %545 = @func_6684() /* ty=Tensor[(16, 13, 7), float64] */;
  (%543, %544, %545)
}

def @func_10490() -> (Tensor[(9, 13, 11), bool],) {
  %546 = @func_9382() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %547 = %546.0;
  (%547,)
}

def @func_4918() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %548 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %549 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
  %550 = %548.0;
  (%549, %550)
}

def @func_11564() -> (uint32, Tensor[(16, 13, 7), float64]) {
  %551 = @func_4840() /* ty=(uint32,) */;
  %552 = %551.0;
  %553 = @func_8273() /* ty=Tensor[(16, 13, 7), float64] */;
  (%552, %553)
}

def @main(%var_12329: Tensor[(9, 13, 10), float64]) -> (Tensor[(9, 13, 10), float64],) {
  %554 = cast(%var_12329, dtype="float64") /* ty=Tensor[(9, 13, 10), float64] */;
  %555 = acos(%554) /* ty=Tensor[(9, 13, 10), float64] */;
  (%555,)
}

def @func_7851() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) {
  %556 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %557 = @func_6268() /* ty=(uint32,) */;
  %558 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %559 = %556.1;
  %560 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %561 = @func_4155() /* ty=uint32 */;
  %562 = %557.0;
  %563 = @func_5955() /* ty=uint32 */;
  %564 = %558.1;
  (%559, %560, %561, %562, %563, %564)
}

def @func_3971(%var_3951: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) {
  %565 = cast(%var_3951, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %566 = cast(%var_3951, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %567 = sin(%565) /* ty=Tensor[(9, 16, 12), float64] */;
  %568 = atan(%566) /* ty=Tensor[(9, 16, 12), float64] */;
  (%567, %568)
}

def @func_11888() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %569 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %570 = %569.0;
  %571 = @func_9731() /* ty=Tensor[(16, 13, 7), float64] */;
  (%570, %571)
}

def @func_5405() -> Tensor[(16, 13, 7), float64] {
  @func_4408() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_9731() -> Tensor[(16, 13, 7), float64] {
  %572 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %572.0
}

def @func_10354() -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) {
  %573 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %574 = @func_9893() /* ty=Tensor[(9, 13, 11), bool] */;
  %575 = %573.0;
  (%574, %575)
}

def @func_9428() -> (Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) {
  %576 = @func_4971() /* ty=(uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) */;
  %577 = @func_7691() /* ty=(uint32,) */;
  %578 = cast(meta[relay.Constant][24] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %579 = reshape(%578, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %580 = @func_3971(%579) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) */;
  %581 = @func_8034() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %582 = %581.2;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %584 = %576.3;
  %585 = %577.0;
  %586 = %580.0;
  %587 = log10(%583) /* ty=Tensor[(16, 13, 7), float64] */;
  (%584, %585, %586, meta[relay.Constant][24] /* ty=Tensor[(1728), float64] */, %587)
}

def @func_10575(%var_10562: Tensor[(1092), float64]) -> (uint32, Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(16, 13, 7), float32]) {
  %588 = cast(%var_10562, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %589 = reshape(%588, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %590 = @func_6306(%589) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %591 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %592 = @func_4155() /* ty=uint32 */;
  %593 = @func_8169() /* ty=Tensor[(16, 13, 7), float64] */;
  %594 = %590.2;
  %595 = %591.0;
  (%592, %593, %594, %var_10562, %595)
}

def @func_6784(%var_6752: Tensor[(11, 13, 1), int8], %var_6753: Tensor[(11, 13, 9), int8], %var_6763: Tensor[(312), uint32], %var_6777: Tensor[(1456), float64], %var_6778: Tensor[(1, 54), int16], %var_6781: Tensor[(1092), float64]) -> (Tensor[(11, 13, 9), int8], Tensor[(9, 2, 11), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(312), uint32], Tensor[(1456), float64], Tensor[(1, 54), int16], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
  %596 = cast(%var_6752, dtype="int8") /* ty=Tensor[(11, 13, 1), int8] */;
  %597 = cast(%var_6753, dtype="int8") /* ty=Tensor[(11, 13, 9), int8] */;
  %598 = cast(meta[relay.Constant][25] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %599 = cast(%var_6763, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %600 = reshape(%598, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float32] */;
  %601 = reshape(%599, newshape=[312]) /* ty=Tensor[(312), uint32] */;
  %602 = @func_3532(%600, %601) /* ty=(Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) */;
  %603 = cast(%var_6777, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %604 = cast(%var_6763, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %605 = cast(%var_6778, dtype="int16") /* ty=Tensor[(1, 54), int16] */;
  %606 = reshape(%603, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), float64] */;
  %607 = reshape(%604, newshape=[312]) /* ty=Tensor[(312), uint32] */;
  %608 = reshape(%605, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %609 = @func_3715(%606, %607, %608) /* ty=(Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) */;
  %610 = cast(%var_6781, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %611 = reshape(%610, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %612 = @func_4070(%611) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
  %613 = multiply(%596, %597) /* ty=Tensor[(11, 13, 9), int8] */;
  %614 = %602.2;
  %615 = %609.2;
  %616 = %612.0;
  (%613, %614, meta[relay.Constant][25] /* ty=Tensor[(198), float32] */, %var_6763, %615, %var_6777, %var_6778, %616, %var_6781)
}

def @func_3288(%var_3283: Tensor[(16, 13, 7), float64]) -> Tensor[(16, 13, 7), uint64] {
  %617 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %618 = %617.0;
  %619 = cast(%var_3283, dtype="uint64") /* ty=Tensor[(16, 13, 7), uint64] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="uint64") /* ty=Tensor[(16, 13, 7), uint64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%621, %622) /* ty=Tensor[(16, 13, 7), uint64] */
}

def @func_3113() -> (Tensor[(16, 13, 7), float64],) {
  %623 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  (%623,)
}

def @func_1871(%var_1863: Tensor[(11, 6, 9), int32], %var_1864: Tensor[(11, 6, 9), int32], %var_1869: Tensor[(336), float64]) -> (Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) {
  %624 = cast(%var_1864, dtype="int32") /* ty=Tensor[(11, 6, 9), int32] */;
  %625 = shape_of(%var_1863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_1863, dtype="int32") /* ty=Tensor[(11, 6, 9), int32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %628 = cast(%var_1869, dtype="float64") /* ty=Tensor[(336), float64] */;
  %629 = reshape(%628, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float64] */;
  %630 = @func_1667(%629) /* ty=(Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) */;
  %631 = bitwise_and(%626, %627) /* ty=Tensor[(11, 6, 9), int32] */;
  %632 = %630.1;
  (%631, %632, %var_1869)
}

def @func_4121() -> (uint32,) {
  %633 = @func_3480() /* ty=uint32 */;
  (%633,)
}

def @func_7287() -> uint32 {
  %634 = @func_4004() /* ty=(uint32,) */;
  %634.0
}

def @func_11626() -> (Tensor[(16, 13, 7), float64], Tensor[(13, 16, 15), float32]) {
  %635 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %636 = @func_9823() /* ty=Tensor[(16, 13, 7), float64] */;
  %637 = %635.0;
  (%636, %637)
}

def @func_6534(%var_6510: Tensor[(3, 198), int32]) -> (Tensor[(16, 13, 7), float64], Tensor[(11, 6, 9), int32], Tensor[(3, 198), int32], Tensor[(2, 168), float64], Tensor[(9, 13, 11), bool], Tensor[(220), float32]) {
  %638 = cast(%var_6510, dtype="int32") /* ty=Tensor[(3, 198), int32] */;
  %639 = cast(%var_6510, dtype="int32") /* ty=Tensor[(3, 198), int32] */;
  %640 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
  %641 = reshape(%638, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %642 = reshape(%639, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %643 = reshape(%640, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %644 = @func_1871(%641, %642, %643) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
  %645 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %646 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %647 = %646.2;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(220), float32] */;
  %649 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
  %650 = %644.0;
  %651 = %645.0;
  %652 = acos(%648) /* ty=Tensor[(220), float32] */;
  (%649, %650, %var_6510, meta[relay.Constant][26] /* ty=Tensor[(2, 168), float64] */, %651, %652)
}

def @func_3264(%var_3191: Tensor[(4, 5, 11), float32], %var_3210: uint32) -> (Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) {
  %653 = cast(%var_3191, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
  %654 = cosh(%653) /* ty=Tensor[(4, 5, 11), float32] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
  %656 = cast(%var_3210, dtype="uint32") /* ty=uint32 */;
  %657 = cast(meta[relay.Constant][27] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %658 = cast(meta[relay.Constant][28] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
  %659 = reshape(%656, newshape=[]) /* ty=uint32 */;
  %660 = reshape(%657, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %661 = reshape(%658, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %662 = @func_2969(%659, %660, %661) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %663 = cast(meta[relay.Constant][28] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
  %664 = cast(meta[relay.Constant][28] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
  %665 = %662.2;
  %666 = cast(%665, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %667 = reshape(%663, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %668 = reshape(%664, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %669 = reshape(%666, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %670 = @func_1712(%667, %668, %669) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %671 = sigmoid(%655) /* ty=Tensor[(4, 5, 11), float64] */;
  %672 = %670.2;
  (%671, %665, %var_3210, meta[relay.Constant][27] /* ty=Tensor[(40), uint32] */, meta[relay.Constant][28] /* ty=Tensor[(54, 1), int16] */, %672)
}

def @func_10310() -> Tensor[(16, 13, 7), float64] {
  %673 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %673.1
}

def @func_9061() -> uint32 {
  @func_7249() /* ty=uint32 */
}

def @func_8966() -> (uint32,) {
  %674 = @func_6118() /* ty=(uint32, uint32) */;
  %675 = %674.1;
  (%675,)
}

def @func_4408() -> Tensor[(16, 13, 7), float64] {
  %676 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  tan(%677) /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_5098() -> (uint32, Tensor[(16, 13, 7), float64], uint32) {
  %678 = @func_4004() /* ty=(uint32,) */;
  %679 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %680 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %681 = %678.0;
  %682 = %679.1;
  %683 = %680.1;
  (%681, %682, %683)
}

def @func_6248() -> Tensor[(16, 13, 7), float64] {
  %684 = @func_6149() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) */;
  %684.1
}

def @func_4475(%var_4454: Tensor[(13, 7, 8), uint16], %var_4455: Tensor[(13, 7, 8), uint16]) -> Tensor[(13, 7, 8), bool] {
  %685 = cast(%var_4455, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %686 = shape_of(%var_4454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_4454, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = not_equal(%687, %688) /* ty=Tensor[(13, 7, 8), bool] */;
  %690 = cast(%689, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %691 = shape_of(%var_4455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_4455, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%692, %693) /* ty=Tensor[(13, 7, 8), bool] */
}

def @func_11144() -> (Tensor[(16, 13, 7), float64],) {
  %694 = @func_7035() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %695 = %694.0;
  (%695,)
}

def @func_10648() -> (uint32,) {
  %696 = @func_3741() /* ty=(uint32,) */;
  %697 = %696.0;
  (%697,)
}

def @func_4096() -> (Tensor[(16, 13, 7), float64],) {
  %698 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %699 = %698.1;
  (%699,)
}

def @func_8449() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %700 = @func_7571() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %701 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %702 = %700.0;
  %703 = %701.0;
  %704 = @func_5744() /* ty=Tensor[(16, 13, 7), float64] */;
  (%702, %703, %704)
}

def @func_4202() -> (Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) {
  %705 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %706 = %705.0;
  %707 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 13, 7), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = cast(%706, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %712 = logical_and(%709, %710) /* ty=Tensor[(16, 13, 7), bool] */;
  %713 = erf(%711) /* ty=Tensor[(16, 13, 7), float64] */;
  (%712, %713)
}

def @func_12283(%var_12259: Tensor[(9, 13, 8), float64]) -> (Tensor[(9, 13, 8), float32], uint32) {
  %714 = cast(%var_12259, dtype="float64") /* ty=Tensor[(9, 13, 8), float64] */;
  %715 = cosh(%714) /* ty=Tensor[(9, 13, 8), float64] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %717 = @func_7851() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) */;
  %718 = acos(%716) /* ty=Tensor[(9, 13, 8), float32] */;
  %719 = %717.2;
  (%718, %719)
}

def @func_7249() -> uint32 {
  %720 = @func_6118() /* ty=(uint32, uint32) */;
  %720.0
}

def @func_6894() -> (Tensor[(16, 13, 7), float64],) {
  %721 = @func_5866() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) */;
  %722 = %721.1;
  (%722,)
}

def @func_8679() -> Tensor[(132, 8), float32] {
  %723 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %723.1
}

def @func_7658(%var_7654: Tensor[(40, 1), uint32]) -> (uint32, Tensor[(16, 13, 7), float64], uint32, Tensor[(5, 1, 8), uint32], Tensor[(40, 1), uint32]) {
  %724 = @func_7249() /* ty=uint32 */;
  %725 = cast(%724, dtype="uint32") /* ty=uint32 */;
  %726 = cast(%var_7654, dtype="uint32") /* ty=Tensor[(40, 1), uint32] */;
  %727 = reshape(%725, newshape=[]) /* ty=uint32 */;
  %728 = reshape(%726, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %729 = @func_349(%727, %728) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %730 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %731 = @func_7249() /* ty=uint32 */;
  %732 = %729.1;
  (%724, %730, %731, %732, %var_7654)
}

def @func_8484() -> Tensor[(16, 13, 7), float64] {
  %733 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %733.0
}

def @func_11606() -> (Tensor[(16, 13, 7), float64],) {
  %734 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %735 = %734.0;
  (%735,)
}

def @func_5665(%var_5660: Tensor[(2, 7, 3), float64]) -> Tensor[(2, 7, 3), float64] {
  %736 = cast(%var_5660, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  erf(%736) /* ty=Tensor[(2, 7, 3), float64] */
}

def @func_12110() -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
  %737 = @func_9428() /* ty=(Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) */;
  %738 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %739 = %737.0;
  %740 = %738.1;
  (%739, %740)
}

def @func_6961() -> (Tensor[(13, 16, 15), float32],) {
  %741 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %742 = %741.0;
  (%742,)
}

def @func_6956() -> (uint32, Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
  %743 = @func_3624() /* ty=(uint32,) */;
  %744 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %745 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %746 = cast(meta[relay.Constant][31] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
  %747 = reshape(%744, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %748 = reshape(%745, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %749 = reshape(%746, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %750 = @func_2229(%747, %748, %749) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %751 = cast(meta[relay.Constant][32] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %752 = reshape(%751, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %753 = @func_4070(%752) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
  %754 = %743.0;
  %755 = %750.0;
  %756 = %753.0;
  (%754, %755, meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, meta[relay.Constant][31] /* ty=Tensor[(132), int32] */, %756, meta[relay.Constant][32] /* ty=Tensor[(1092), float64] */)
}

def @func_7427() -> (Tensor[(16, 13, 7), float32],) {
  %757 = @func_5880() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %758 = %757.0;
  (%758,)
}

def @func_5633() -> Tensor[(16, 13, 7), float64] {
  %759 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %759.0
}

def @func_6118() -> (uint32, uint32) {
  %760 = @func_5913() /* ty=(uint32,) */;
  %761 = @func_4155() /* ty=uint32 */;
  %762 = %760.0;
  (%761, %762)
}

def @func_3553() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %763 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %764 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %765 = %763.0;
  %766 = %764.0;
  (%765, %766)
}

def @func_10267(%var_10247: Tensor[(273), uint64], %var_10248: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(273), float64]) {
  %767 = cast(%var_10247, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %768 = cast(%var_10247, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %769 = cast(%var_10248, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %770 = reshape(%767, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %771 = reshape(%768, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %772 = reshape(%769, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %773 = @func_1224(%770, %771, %772) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %774 = cast(%var_10247, dtype="float32") /* ty=Tensor[(273), float32] */;
  %775 = erf(%774) /* ty=Tensor[(273), float32] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(273), float64] */;
  %777 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %778 = %773.3;
  %779 = cos(%776) /* ty=Tensor[(273), float64] */;
  (%777, %778, %var_10248, %779)
}

def @func_10129(%var_10121: Tensor[(16, 13, 7), float32]) -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), bool]) {
  %780 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %781 = %780.0;
  %782 = cast(%var_10121, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  %787 = greater_equal(%784, %785) /* ty=Tensor[(16, 13, 7), bool] */;
  (%786, %787)
}

def @func_4380() -> (uint32, Tensor[(16, 13, 7), float64]) {
  %788 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %789 = @func_4155() /* ty=uint32 */;
  %790 = %788.0;
  (%789, %790)
}

def @func_9226() -> uint32 {
  %791 = @func_4004() /* ty=(uint32,) */;
  %791.0
}

def @func_8649(%var_8642: Tensor[(5, 15, 10), uint8], %var_8643: Tensor[(5, 15, 10), uint8]) -> (Tensor[(5, 15, 10), uint8],) {
  %792 = cast(%var_8643, dtype="uint8") /* ty=Tensor[(5, 15, 10), uint8] */;
  %793 = shape_of(%var_8642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_8642, dtype="uint8") /* ty=Tensor[(5, 15, 10), uint8] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %796 = bitwise_or(%794, %795) /* ty=Tensor[(5, 15, 10), uint8] */;
  (%796,)
}

def @func_3942() -> (Tensor[(16, 13, 7), float64],) {
  %797 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %798 = %797.0;
  (%798,)
}

def @func_9893() -> Tensor[(9, 13, 11), bool] {
  %799 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %799.1
}

def @func_10397() -> (Tensor[(16, 13, 7), float64],) {
  %800 = @func_9107() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %801 = %800.0;
  (%801,)
}

def @func_5913() -> (uint32,) {
  %802 = @func_3480() /* ty=uint32 */;
  (%802,)
}

def @func_3075(%var_3006: Tensor[(128), int32], %var_3013: Tensor[(3, 18), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) {
  %803 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %804 = cast(%var_3006, dtype="int32") /* ty=Tensor[(128), int32] */;
  %805 = reshape(%803, newshape=[]) /* ty=int32 */;
  %806 = reshape(%804, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
  %807 = @func_2045(%805, %806) /* ty=(Tensor[(8, 1, 16), bool],) */;
  %808 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %809 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %810 = cast(meta[relay.Constant][33] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %811 = reshape(%808, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %812 = reshape(%809, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %813 = reshape(%810, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %814 = @func_1712(%811, %812, %813) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %815 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %816 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %817 = cast(meta[relay.Constant][33] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %818 = reshape(%815, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %819 = reshape(%816, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %820 = reshape(%817, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %821 = @func_1224(%818, %819, %820) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %822 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %823 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %824 = cast(meta[relay.Constant][33] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %825 = reshape(%822, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %826 = reshape(%823, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %827 = reshape(%824, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %828 = @func_1224(%825, %826, %827) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %829 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint64] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %830 = tan(%829) /* ty=Tensor[(273), float32] */;
  %831 = cast(%830, dtype="float64") /* ty=Tensor[(273), float64] */;
  %832 = sigmoid(%831) /* ty=Tensor[(273), float64] */;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(273), float64] */;
  %834 = cast(10 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %835 = %821.9;
  %836 = cast(%835, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %837 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %838 = reshape(%834, newshape=[]) /* ty=uint32 */;
  %839 = reshape(%836, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %840 = reshape(%837, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %841 = @func_2969(%838, %839, %840) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %842 = cast(meta[relay.Constant][35] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %843 = cast(meta[relay.Constant][35] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %844 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %845 = reshape(%842, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %846 = reshape(%843, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %847 = reshape(%844, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %848 = @func_1871(%845, %846, %847) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
  %849 = cast(10 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %850 = cast(%835, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %851 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %852 = reshape(%849, newshape=[]) /* ty=uint32 */;
  %853 = reshape(%850, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %854 = reshape(%851, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %855 = @func_2969(%852, %853, %854) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %856 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %857 = %807.0;
  %858 = %814.0;
  %859 = %828.7;
  %860 = atan(%833) /* ty=Tensor[(273), float64] */;
  %861 = %841.4;
  %862 = %848.2;
  %863 = %855.3;
  (%856, %857, 10 /* ty=int32 */, %var_3006, %858, %var_3013, meta[relay.Constant][33] /* ty=Tensor[(40), uint32] */, %835, %859, %860, %861, %862, meta[relay.Constant][35] /* ty=Tensor[(594), int32] */, meta[relay.Constant][36] /* ty=Tensor[(4, 84), float64] */, %863)
}

def @func_11664() -> uint32 {
  @func_10092() /* ty=uint32 */
}

def @func_9175() -> (uint32, Tensor[(9, 13, 11), float32]) {
  %864 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %865 = %864.1;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %867 = @func_5338() /* ty=uint32 */;
  %868 = log2(%866) /* ty=Tensor[(9, 13, 11), float32] */;
  (%867, %868)
}

def @func_7691() -> (uint32,) {
  %869 = @func_4004() /* ty=(uint32,) */;
  %870 = %869.0;
  (%870,)
}

def @func_1667(%var_1656: Tensor[(4, 12, 7), float64]) -> (Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) {
  %871 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 7), float64] */;
  %872 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 7), float64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %875 = cast(%var_1656, dtype="int8") /* ty=Tensor[(4, 12, 7), int8] */;
  %876 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int8") /* ty=Tensor[(4, 12, 7), int8] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %879 = floor_divide(%873, %874) /* ty=Tensor[(4, 12, 7), float64] */;
  %880 = minimum(%877, %878) /* ty=Tensor[(4, 12, 7), int8] */;
  (%879, %880)
}

def @func_7069(%var_7051: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(54), bool], Tensor[(128), int32], Tensor[(54), int16]) {
  %881 = cast(meta[relay.Constant][39] /* ty=Tensor[(128), int32] */, dtype="int32") /* ty=Tensor[(128), int32] */;
  %882 = cast(%var_7051, dtype="int16") /* ty=Tensor[(54), int16] */;
  %883 = reshape(%881, newshape=[128]) /* ty=Tensor[(128), int32] */;
  %884 = reshape(%882, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
  %885 = @func_3075(%883, %884) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
  %886 = @func_6248() /* ty=Tensor[(16, 13, 7), float64] */;
  %887 = %885.10;
  (%886, %887, meta[relay.Constant][39] /* ty=Tensor[(128), int32] */, %var_7051)
}

def @func_11187(%var_11181: Tensor[(3, 9, 9), float64], %var_11182: Tensor[(3, 9, 9), float64]) -> Tensor[(3, 9, 9), float64] {
  %888 = cast(%var_11182, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
  %889 = shape_of(%var_11181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%var_11181, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%890, %891) /* ty=Tensor[(3, 9, 9), float64] */
}

def @func_8740() -> (uint32, Tensor[(9, 13, 11), bool]) {
  %892 = @func_7691() /* ty=(uint32,) */;
  %893 = %892.0;
  %894 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  (%893, %894)
}

def @func_6176() -> (uint32,) {
  %895 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %896 = %895.2;
  (%896,)
}

def @func_9107() -> (Tensor[(16, 13, 7), float64],) {
  %897 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %898 = %897.0;
  (%898,)
}

def @func_6453() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %899 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %900 = %899.0;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
  %902 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %903 = atan(%901) /* ty=Tensor[(16, 13, 7), float32] */;
  %904 = %902.1;
  (%903, %904)
}

def @func_11861() -> uint32 {
  %905 = @func_11031() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64], uint32) */;
  %905.1
}

def @func_6684() -> Tensor[(16, 13, 7), float64] {
  %906 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %906.0
}

def @func_8284() -> Tensor[(9, 13, 11), bool] {
  %907 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %907.0
}

def @func_10793() -> (Tensor[(16, 13, 7), float64],) {
  %908 = @func_7035() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %909 = %908.0;
  (%909,)
}

def @func_3377(%var_3364: Tensor[(40), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) {
  %910 = cast(meta[relay.Constant][40] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %911 = cast(%var_3364, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %912 = reshape(%910, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %913 = reshape(%911, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %914 = @func_375(%912, %913) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %915 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %916 = %915.1;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(132, 8), float64] */;
  %918 = %914.4;
  %919 = log10(%917) /* ty=Tensor[(132, 8), float64] */;
  (%918, meta[relay.Constant][40] /* ty=Tensor[(154), float64] */, %var_3364, %919)
}

def @func_9796(%var_9751: Tensor[(12, 13, 15), float64], %var_9789: Tensor[(16, 4), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) {
  %920 = cast(%var_9789, dtype="uint32") /* ty=Tensor[(16, 4), uint32] */;
  %921 = reshape(%920, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), uint32] */;
  %922 = @func_9041(%921) /* ty=(Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) */;
  %923 = cast(%var_9751, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
  %924 = atan(%923) /* ty=Tensor[(12, 13, 15), float64] */;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
  %926 = erf(%925) /* ty=Tensor[(12, 13, 15), float64] */;
  %927 = cast(%926, dtype="int32") /* ty=Tensor[(12, 13, 15), int32] */;
  %928 = shape_of(%var_9751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%var_9751, dtype="int32") /* ty=Tensor[(12, 13, 15), int32] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %931 = bitwise_xor(%929, %930) /* ty=Tensor[(12, 13, 15), int32] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
  %933 = cast(%var_9751, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
  %934 = shape_of(%931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%931, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %937 = %922.1;
  %938 = cos(%932) /* ty=Tensor[(12, 13, 15), float64] */;
  %939 = mod(%935, %936) /* ty=Tensor[(12, 13, 15), float32] */;
  (%937, %var_9789, %938, %939)
}

def @func_4761() -> (Tensor[(16, 13, 7), float64],) {
  %940 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
  (%940,)
}

def @func_5880() -> (Tensor[(16, 13, 7), float32],) {
  %941 = @func_5253() /* ty=Tensor[(16, 13, 7), float32] */;
  (%941,)
}

def @func_7600() -> uint32 {
  %942 = @func_6118() /* ty=(uint32, uint32) */;
  %942.1
}

def @func_2920() -> Tensor[(16, 13, 7), float64] {
  %943 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  sinh(%943) /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_3624() -> (uint32,) {
  %944 = @func_3480() /* ty=uint32 */;
  (%944,)
}

def @func_4444(%var_4427: Tensor[(13, 13, 14), float32]) -> (Tensor[(13, 13, 14), float32], Tensor[(13, 13, 14), float32]) {
  %945 = cast(%var_4427, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %946 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(13, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %949 = cast(%var_4427, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %950 = add(%947, %948) /* ty=Tensor[(13, 13, 14), float32] */;
  %951 = tan(%949) /* ty=Tensor[(13, 13, 14), float32] */;
  (%950, %951)
}

def @func_9041(%var_9016: Tensor[(16, 2, 2), uint32]) -> (Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) {
  %952 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 2, 2), uint32] */, dtype="bool") /* ty=Tensor[(16, 2, 2), bool] */;
  %953 = shape_of(%var_9016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%var_9016, dtype="bool") /* ty=Tensor[(16, 2, 2), bool] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %956 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %957 = greater(%954, %955) /* ty=Tensor[(16, 2, 2), bool] */;
  %958 = %956.0;
  (%957, %958)
}

def @func_5253() -> Tensor[(16, 13, 7), float32] {
  @func_4808() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_3655() -> (Tensor[(16, 13, 7), float64],) {
  %959 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %960 = %959.0;
  (%960,)
}

def @func_11363() -> (Tensor[(16, 13, 7), float64],) {
  %961 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %962 = %961.0;
  (%962,)
}

def @func_3741() -> (uint32,) {
  %963 = @func_3480() /* ty=uint32 */;
  (%963,)
}

def @func_8034() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %964 = @func_5866() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) */;
  %965 = @func_5880() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %966 = %964.1;
  %967 = %965.0;
  %968 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
  (%966, %967, %968)
}

def @func_5866() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) {
  %969 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %970 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %971 = @func_3741() /* ty=(uint32,) */;
  %972 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %973 = %969.1;
  %974 = %970.0;
  %975 = %971.0;
  %976 = %972.1;
  (%973, %974, %975, %976)
}

def @func_349(%var_321: uint32, %var_322: Tensor[(5, 1, 8), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) {
  %977 = cast(%var_321, dtype="bool") /* ty=bool */;
  %978 = cast(%var_322, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
  %979 = cast(%var_321, dtype="uint32") /* ty=uint32 */;
  %980 = cast(%var_322, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %981 = equal(%977, %978) /* ty=Tensor[(5, 1, 8), bool] */;
  %982 = bitwise_or(%979, %980) /* ty=Tensor[(5, 1, 8), uint32] */;
  (%981, %982)
}

def @func_9372(%var_9333: Tensor[(192), float32], %var_9334: Tensor[(132), int32]) -> (Tensor[(9, 13, 11), uint16], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(1728), float64], uint32, Tensor[(9, 16, 12), float32], Tensor[(16, 13, 7), float64]) {
  %983 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  %984 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 13, 11), bool] */, dtype="uint16") /* ty=Tensor[(9, 13, 11), uint16] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %986 = cast(%983, dtype="uint16") /* ty=Tensor[(9, 13, 11), uint16] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %988 = cast(%var_9333, dtype="float32") /* ty=Tensor[(192), float32] */;
  %989 = cast(%var_9333, dtype="float32") /* ty=Tensor[(192), float32] */;
  %990 = cast(%var_9334, dtype="int32") /* ty=Tensor[(132), int32] */;
  %991 = reshape(%988, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %992 = reshape(%989, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %993 = reshape(%990, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %994 = @func_2229(%991, %992, %993) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %995 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %996 = cast(meta[relay.Constant][45] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %997 = reshape(%996, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %998 = @func_3971(%997) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) */;
  %999 = %998.1;
  %1000 = cast(%999, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %1001 = bitwise_and(%986, %987) /* ty=Tensor[(9, 13, 11), uint16] */;
  %1002 = %994.0;
  %1003 = %995.0;
  %1004 = cosh(%1000) /* ty=Tensor[(9, 16, 12), float32] */;
  %1005 = @func_8484() /* ty=Tensor[(16, 13, 7), float64] */;
  (%1001, %1002, %var_9333, %var_9334, meta[relay.Constant][45] /* ty=Tensor[(1728), float64] */, %1003, %1004, %1005)
}

def @func_699(%var_673: Tensor[(12, 2, 13), uint32], %var_674: Tensor[(12, 2, 13), uint32]) -> (Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) {
  %1006 = cast(%var_674, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %1007 = shape_of(%var_673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%var_673, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1010 = less(%1008, %1009) /* ty=Tensor[(12, 2, 13), bool] */;
  %1011 = cast(%1010, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %1012 = cast(meta[relay.Constant][46] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %1013 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 4), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4), uint32] */;
  %1014 = reshape(%1012, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %1015 = reshape(%1013, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %1016 = @func_375(%1014, %1015) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %1017 = log2(%1011) /* ty=Tensor[(12, 2, 13), float32] */;
  %1018 = %1016.4;
  (%1017, %1018, meta[relay.Constant][46] /* ty=Tensor[(154), float64] */, meta[relay.Constant][47] /* ty=Tensor[(10, 4), uint32] */)
}

def @func_2045(%var_2028: int32, %var_2029: Tensor[(8, 1, 16), int32]) -> (Tensor[(8, 1, 16), bool],) {
  %1019 = cast(%var_2028, dtype="bool") /* ty=bool */;
  %1020 = cast(%var_2029, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %1021 = not_equal(%1019, %1020) /* ty=Tensor[(8, 1, 16), bool] */;
  (%1021,)
}

def @func_8273() -> Tensor[(16, 13, 7), float64] {
  %1022 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %1022.1
}

def @func_3715(%var_3663: Tensor[(16, 13, 7), float64], %var_3679: Tensor[(312), uint32], %var_3704: Tensor[(54), int16]) -> (Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) {
  %1023 = cast(meta[relay.Constant][48] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %1024 = cast(%var_3679, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %1025 = reshape(%1023, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float32] */;
  %1026 = reshape(%1024, newshape=[312]) /* ty=Tensor[(312), uint32] */;
  %1027 = @func_3532(%1025, %1026) /* ty=(Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) */;
  %1028 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %1029 = %1028.0;
  %1030 = cast(%1029, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %1031 = acosh(%1030) /* ty=Tensor[(16, 13, 7), float64] */;
  %1032 = cast(%var_3663, dtype="uint16") /* ty=Tensor[(16, 13, 7), uint16] */;
  %1033 = shape_of(%1029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%1029, dtype="uint16") /* ty=Tensor[(16, 13, 7), uint16] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1036 = subtract(%1034, %1035) /* ty=Tensor[(16, 13, 7), uint16] */;
  %1037 = cast(%1036, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %1038 = shape_of(%1031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1039 = cast(%1031, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %1040 = dyn.reshape(%1037, %1038, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1041 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1042 = cast(meta[relay.Constant][49] /* ty=Tensor[(128, 1), int32] */, dtype="int32") /* ty=Tensor[(128, 1), int32] */;
  %1043 = cast(%var_3704, dtype="int16") /* ty=Tensor[(54), int16] */;
  %1044 = reshape(%1042, newshape=[128]) /* ty=Tensor[(128), int32] */;
  %1045 = reshape(%1043, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
  %1046 = @func_3075(%1044, %1045) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
  %1047 = %1027.5;
  %1048 = mod(%1039, %1040) /* ty=Tensor[(16, 13, 7), float64] */;
  %1049 = %1041.0;
  %1050 = %1046.0;
  (%1047, meta[relay.Constant][48] /* ty=Tensor[(198), float32] */, %var_3679, %1048, %1049, %1050, meta[relay.Constant][49] /* ty=Tensor[(128, 1), int32] */, %var_3704)
}

def @func_9823() -> Tensor[(16, 13, 7), float64] {
  %1051 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1051.0
}

def @func_6268() -> (uint32,) {
  %1052 = @func_3480() /* ty=uint32 */;
  (%1052,)
}

def @func_4808() -> Tensor[(16, 13, 7), float32] {
  %1053 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %1054 = %1053.0;
  %1055 = cast(%1054, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
  acos(%1055) /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_6369() -> (uint32, uint32) {
  %1056 = @func_4971() /* ty=(uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) */;
  %1057 = @func_5338() /* ty=uint32 */;
  %1058 = %1056.0;
  (%1057, %1058)
}

def @func_3532(%var_3504: Tensor[(9, 2, 11), float32], %var_3508: Tensor[(312), uint32]) -> (Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) {
  %1059 = cast(%var_3508, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %1060 = cast(%var_3508, dtype="uint32") /* ty=Tensor[(312), uint32] */;
  %1061 = reshape(%1059, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %1062 = reshape(%1060, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
  %1063 = @func_699(%1061, %1062) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
  %1064 = cast(%var_3504, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
  %1065 = atan(%1064) /* ty=Tensor[(9, 2, 11), float32] */;
  %1066 = cast(%1065, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %1067 = acosh(%1066) /* ty=Tensor[(9, 2, 11), float64] */;
  %1068 = cast(%1065, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%1067, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1072 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1073 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1074 = reshape(%1073, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float64] */;
  %1075 = @func_1667(%1074) /* ty=(Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) */;
  %1076 = %1063.2;
  %1077 = mod(%1070, %1071) /* ty=Tensor[(9, 2, 11), float64] */;
  %1078 = %1072.0;
  %1079 = %1075.0;
  (%1076, %var_3508, %1077, %1078, %1079, meta[relay.Constant][50] /* ty=Tensor[(336), float64] */)
}

def @func_12227(%var_12204: Tensor[(54), int16]) -> (uint32, Tensor[(32, 4), int32], Tensor[(54), int16], Tensor[(3, 18), int32], Tensor[(3, 18), float32]) {
  %1080 = cast(meta[relay.Constant][51] /* ty=Tensor[(32, 4), int32] */, dtype="int32") /* ty=Tensor[(32, 4), int32] */;
  %1081 = cast(%var_12204, dtype="int16") /* ty=Tensor[(54), int16] */;
  %1082 = reshape(%1080, newshape=[128]) /* ty=Tensor[(128), int32] */;
  %1083 = reshape(%1081, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
  %1084 = @func_3075(%1082, %1083) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
  %1085 = %1084.5;
  %1086 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 18), int16] */, dtype="int32") /* ty=Tensor[(3, 18), int32] */;
  %1087 = shape_of(%1085, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1088 = cast(%1085, dtype="int32") /* ty=Tensor[(3, 18), int32] */;
  %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1090 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 18), int16] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %1091 = @func_9061() /* ty=uint32 */;
  %1092 = add(%1088, %1089) /* ty=Tensor[(3, 18), int32] */;
  %1093 = sinh(%1090) /* ty=Tensor[(3, 18), float32] */;
  (%1091, meta[relay.Constant][51] /* ty=Tensor[(32, 4), int32] */, %var_12204, %1092, %1093)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2921() -> Tensor[(16, 13, 7), float64] {
  %1 = fn () -> Tensor[(16, 13, 7), float64] {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    sinh(%0) /* ty=Tensor[(16, 13, 7), float64] */
  };
  %1() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_5033(%var_5031: Tensor[(40), uint32]) -> (uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  @func_5030(%var_5031) /* ty=(uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) */
}

def @func_6309(%var_6307: Tensor[(1092), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  @func_6306(%var_6307) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) */
}

def @func_5914() -> (uint32,) {
  %3 = fn () -> (uint32,) {
    %2 = @func_3480() /* ty=uint32 */;
    (%2,)
  };
  %3() /* ty=(uint32,) */
}

def @func_9267() -> (uint32,) {
  %6 = fn () -> (uint32,) {
    %4 = @func_5098() /* ty=(uint32, Tensor[(16, 13, 7), float64], uint32) */;
    %5 = %4.0;
    (%5,)
  };
  %6() /* ty=(uint32,) */
}

def @func_7692() -> (uint32,) {
  %9 = fn () -> (uint32,) {
    %7 = @func_4004() /* ty=(uint32,) */;
    %8 = %7.0;
    (%8,)
  };
  %9() /* ty=(uint32,) */
}

def @func_6369() -> (uint32, uint32) {
  %10 = @func_4971() /* ty=(uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) */;
  %11 = @func_5338() /* ty=uint32 */;
  %12 = %10.0;
  (%11, %12)
}

def @func_12230(%var_12228: Tensor[(54), int16]) -> (uint32, Tensor[(32, 4), int32], Tensor[(54), int16], Tensor[(3, 18), int32], Tensor[(3, 18), float32]) {
  @func_12227(%var_12228) /* ty=(uint32, Tensor[(32, 4), int32], Tensor[(54), int16], Tensor[(3, 18), int32], Tensor[(3, 18), float32]) */
}

def @func_7941() -> (Tensor[(16, 13, 7), float32], uint32) {
  %16 = fn () -> (Tensor[(16, 13, 7), float32], uint32) {
    %13 = @func_4121() /* ty=(uint32,) */;
    %14 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
    %15 = %13.0;
    (%14, %15)
  };
  %16() /* ty=(Tensor[(16, 13, 7), float32], uint32) */
}

def @func_1876(%var_1873: Tensor[(11, 6, 9), int32], %var_1874: Tensor[(11, 6, 9), int32], %var_1875: Tensor[(336), float64]) -> (Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) {
  @func_1871(%var_1873, %var_1874, %var_1875) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */
}

def @func_2233(%var_2230: Tensor[(12, 2, 8), float32], %var_2231: Tensor[(12, 2, 8), float32], %var_2232: Tensor[(132, 1), int32]) -> (Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) {
  %31 = fn (%var_2202: Tensor[(12, 2, 8), float32], %var_2203: Tensor[(12, 2, 8), float32], %var_2217: Tensor[(132, 1), int32]) -> (Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) {
    %17 = cast(%var_2203, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
    %18 = shape_of(%var_2202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%var_2202, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %21 = cast(%var_2217, dtype="int32") /* ty=Tensor[(132, 1), int32] */;
    %22 = cast(%var_2217, dtype="int32") /* ty=Tensor[(132, 1), int32] */;
    %23 = reshape(%21, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
    %24 = reshape(%22, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
    %25 = @func_1815(%23, %24) /* ty=(Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) */;
    %26 = cast(%var_2217, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
    %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(132, 8), int32] */, dtype="float32") /* ty=Tensor[(132, 8), float32] */;
    %28 = subtract(%19, %20) /* ty=Tensor[(12, 2, 8), float32] */;
    %29 = %25.1;
    %30 = power(%26, %27) /* ty=Tensor[(132, 8), float32] */;
    (%28, %29, %30)
  };
  %31(%var_2230, %var_2231, %var_2232) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */
}

def @func_6536(%var_6535: Tensor[(3, 198), int32]) -> (Tensor[(16, 13, 7), float64], Tensor[(11, 6, 9), int32], Tensor[(3, 198), int32], Tensor[(2, 168), float64], Tensor[(9, 13, 11), bool], Tensor[(220), float32]) {
  %47 = fn (%var_6510: Tensor[(3, 198), int32]) -> (Tensor[(16, 13, 7), float64], Tensor[(11, 6, 9), int32], Tensor[(3, 198), int32], Tensor[(2, 168), float64], Tensor[(9, 13, 11), bool], Tensor[(220), float32]) {
    %32 = cast(%var_6510, dtype="int32") /* ty=Tensor[(3, 198), int32] */;
    %33 = cast(%var_6510, dtype="int32") /* ty=Tensor[(3, 198), int32] */;
    %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
    %35 = reshape(%32, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %36 = reshape(%33, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %37 = reshape(%34, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %38 = @func_1871(%35, %36, %37) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
    %39 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
    %40 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
    %41 = %40.2;
    %42 = cast(%41, dtype="float32") /* ty=Tensor[(220), float32] */;
    %43 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
    %44 = %38.0;
    %45 = %39.0;
    %46 = acos(%42) /* ty=Tensor[(220), float32] */;
    (%43, %44, %var_6510, meta[relay.Constant][2] /* ty=Tensor[(2, 168), float64] */, %45, %46)
  };
  %47(%var_6535) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(11, 6, 9), int32], Tensor[(3, 198), int32], Tensor[(2, 168), float64], Tensor[(9, 13, 11), bool], Tensor[(220), float32]) */
}

def @func_5254() -> Tensor[(16, 13, 7), float32] {
  %48 = fn () -> Tensor[(16, 13, 7), float32] {
    @func_4808() /* ty=Tensor[(16, 13, 7), float32] */
  };
  %48() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_7419(%var_7417: Tensor[(1, 13, 8), float64], %var_7418: Tensor[(1092), float64]) -> (Tensor[(1, 13, 8), float64], Tensor[(1, 13, 8), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
  %67 = fn (%var_7366: Tensor[(1, 13, 8), float64], %var_7409: Tensor[(1092), float64]) -> (Tensor[(1, 13, 8), float64], Tensor[(1, 13, 8), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
    %49 = cast(%var_7366, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
    %50 = atanh(%49) /* ty=Tensor[(1, 13, 8), float64] */;
    %51 = cast(%50, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
    %52 = cast(%50, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
    %53 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
    %54 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %55 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %56 = cast(%var_7409, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %57 = cast(%var_7409, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %58 = reshape(%54, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %59 = reshape(%55, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %60 = reshape(%56, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %61 = reshape(%57, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float32] */;
    %62 = @func_3911(%58, %59, %60, %61) /* ty=(Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) */;
    %63 = sqrt(%51) /* ty=Tensor[(1, 13, 8), float64] */;
    %64 = erf(%52) /* ty=Tensor[(1, 13, 8), float64] */;
    %65 = %53.1;
    %66 = %62.0;
    (%63, %64, %65, %66, %var_7409)
  };
  %67(%var_7417, %var_7418) /* ty=(Tensor[(1, 13, 8), float64], Tensor[(1, 13, 8), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */
}

def @func_9175() -> (uint32, Tensor[(9, 13, 11), float32]) {
  %68 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %69 = %68.1;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %71 = @func_5338() /* ty=uint32 */;
  %72 = log2(%70) /* ty=Tensor[(9, 13, 11), float32] */;
  (%71, %72)
}

def @func_7873() -> (Tensor[(16, 13, 7), float64], uint32, uint32) {
  %79 = fn () -> (Tensor[(16, 13, 7), float64], uint32, uint32) {
    %73 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
    %74 = @func_6176() /* ty=(uint32,) */;
    %75 = @func_5913() /* ty=(uint32,) */;
    %76 = %73.1;
    %77 = %74.0;
    %78 = %75.0;
    (%76, %77, %78)
  };
  %79() /* ty=(Tensor[(16, 13, 7), float64], uint32, uint32) */
}

def @func_9428() -> (Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) {
  %80 = @func_4971() /* ty=(uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) */;
  %81 = @func_7691() /* ty=(uint32,) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %83 = reshape(%82, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %84 = @func_3971(%83) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) */;
  %85 = @func_8034() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %86 = %85.2;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %88 = %80.3;
  %89 = %81.0;
  %90 = %84.0;
  %91 = log10(%87) /* ty=Tensor[(16, 13, 7), float64] */;
  (%88, %89, %90, meta[relay.Constant][3] /* ty=Tensor[(1728), float64] */, %91)
}

def @func_4157() -> uint32 {
  @func_4155() /* ty=uint32 */
}

def @func_7155() -> (uint32, uint32, Tensor[(16, 13, 7), float64]) {
  %92 = @func_4840() /* ty=(uint32,) */;
  %93 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %94 = %92.0;
  %95 = @func_5955() /* ty=uint32 */;
  %96 = %93.0;
  (%94, %95, %96)
}

def @func_8284() -> Tensor[(9, 13, 11), bool] {
  %97 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %97.0
}

def @func_6958() -> (uint32, Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
  @func_6956() /* ty=(uint32, Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32], Tensor[(1092), float64]) */
}

def @func_5803() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) {
  %98 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
  %99 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
  %100 = %98.1;
  %101 = %99.1;
  %102 = @func_5338() /* ty=uint32 */;
  (%100, %101, %102)
}

def @func_3291(%var_3289: Tensor[(16, 13, 7), float64]) -> Tensor[(16, 13, 7), uint64] {
  @func_3288(%var_3289) /* ty=Tensor[(16, 13, 7), uint64] */
}

def @func_6620(%var_6592: Tensor[(336), float64], %var_6595: Tensor[(1456), float64]) -> (uint32, Tensor[(594), int32], Tensor[(336), float64], Tensor[(16, 13, 7), uint64], Tensor[(1456), float64], uint32) {
  %103 = @func_6430() /* ty=(uint32,) */;
  %104 = cast(%var_6592, dtype="float64") /* ty=Tensor[(336), float64] */;
  %105 = reshape(%104, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %106 = @func_5486(%105) /* ty=(uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) */;
  %107 = cast(%var_6595, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %108 = reshape(%107, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), float64] */;
  %109 = @func_4004() /* ty=(uint32,) */;
  %110 = %103.0;
  %111 = %106.4;
  %112 = @func_3288(%108) /* ty=Tensor[(16, 13, 7), uint64] */;
  %113 = %109.0;
  (%110, %111, %var_6592, %112, %var_6595, %113)
}

def @func_9895() -> Tensor[(9, 13, 11), bool] {
  @func_9893() /* ty=Tensor[(9, 13, 11), bool] */
}

def @func_10468() -> (Tensor[(16, 13, 7), float32],) {
  @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */
}

def @func_11952() -> (uint32, uint32) {
  %117 = fn () -> (uint32, uint32) {
    %114 = @func_5913() /* ty=(uint32,) */;
    %115 = %114.0;
    %116 = @func_11664() /* ty=uint32 */;
    (%115, %116)
  };
  %117() /* ty=(uint32, uint32) */
}

def @func_7546() -> (Tensor[(11, 12, 8), float64], uint32) {
  %122 = fn () -> (Tensor[(11, 12, 8), float64], uint32) {
    %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
    %119 = @func_7155() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64]) */;
    %120 = erf(%118) /* ty=Tensor[(11, 12, 8), float64] */;
    %121 = %119.0;
    (%120, %121)
  };
  %122() /* ty=(Tensor[(11, 12, 8), float64], uint32) */
}

def @func_8562() -> (Tensor[(9, 13, 11), bool],) {
  %124 = fn () -> (Tensor[(9, 13, 11), bool],) {
    %123 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
    (%123,)
  };
  %124() /* ty=(Tensor[(9, 13, 11), bool],) */
}

def @func_379(%var_377: Tensor[(11, 2, 7), float64], %var_378: Tensor[(40), uint32]) -> (Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) {
  @func_375(%var_377, %var_378) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */
}

def @func_6894() -> (Tensor[(16, 13, 7), float64],) {
  %125 = @func_5866() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) */;
  %126 = %125.1;
  (%126,)
}

def @func_11411() -> uint32 {
  %127 = @func_6268() /* ty=(uint32,) */;
  %127.0
}

def @func_6306(%var_6293: Tensor[(1092), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  %128 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %129 = cast(%var_6293, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %130 = reshape(%129, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %131 = @func_4070(%130) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
  %132 = cast(%var_6293, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %133 = %128.1;
  %134 = %131.2;
  %135 = tan(%132) /* ty=Tensor[(1092), float64] */;
  (%133, %134, %135)
}

def @func_3190() -> (Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) {
  %154 = fn () -> (Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) {
    %136 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
    %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %138 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %139 = cast(meta[relay.Constant][7] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
    %140 = reshape(%137, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %141 = reshape(%138, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %142 = reshape(%139, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
    %143 = @func_2229(%140, %141, %142) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
    %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %145 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
    %147 = reshape(%144, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %148 = reshape(%145, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %149 = reshape(%146, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
    %150 = @func_2229(%147, %148, %149) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
    %151 = exp(%136) /* ty=Tensor[(13, 16, 15), float32] */;
    %152 = %143.2;
    %153 = %150.2;
    (%151, %152, meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, meta[relay.Constant][7] /* ty=Tensor[(132), int32] */, %153)
  };
  %154() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */
}

def @func_11145() -> (Tensor[(16, 13, 7), float64],) {
  %157 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %155 = @func_7035() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %156 = %155.0;
    (%156,)
  };
  %157() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_7661(%var_7659: Tensor[(40, 1), uint32]) -> (uint32, Tensor[(16, 13, 7), float64], uint32, Tensor[(5, 1, 8), uint32], Tensor[(40, 1), uint32]) {
  @func_7658(%var_7659) /* ty=(uint32, Tensor[(16, 13, 7), float64], uint32, Tensor[(5, 1, 8), uint32], Tensor[(40, 1), uint32]) */
}

def @func_9716() -> (Tensor[(16, 13, 7), float64],) {
  %160 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %158 = @func_7155() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64]) */;
    %159 = %158.2;
    (%159,)
  };
  %160() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_5665(%var_5660: Tensor[(2, 7, 3), float64]) -> Tensor[(2, 7, 3), float64] {
  %161 = cast(%var_5660, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  erf(%161) /* ty=Tensor[(2, 7, 3), float64] */
}

def @func_2045(%var_2028: int32, %var_2029: Tensor[(8, 1, 16), int32]) -> (Tensor[(8, 1, 16), bool],) {
  %162 = cast(%var_2028, dtype="bool") /* ty=bool */;
  %163 = cast(%var_2029, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %164 = not_equal(%162, %163) /* ty=Tensor[(8, 1, 16), bool] */;
  (%164,)
}

def @func_10794() -> (Tensor[(16, 13, 7), float64],) {
  %167 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %165 = @func_7035() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %166 = %165.0;
    (%166,)
  };
  %167() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_1228(%var_1225: Tensor[(13, 7, 3), uint64], %var_1226: Tensor[(13, 7, 3), uint64], %var_1227: Tensor[(20, 2), uint32]) -> (Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) {
  %214 = fn (%var_1159: Tensor[(13, 7, 3), uint64], %var_1160: Tensor[(13, 7, 3), uint64], %var_1180: Tensor[(20, 2), uint32]) -> (Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) {
    %168 = cast(%var_1160, dtype="uint64") /* ty=Tensor[(13, 7, 3), uint64] */;
    %169 = shape_of(%var_1159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%var_1159, dtype="uint64") /* ty=Tensor[(13, 7, 3), uint64] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %172 = maximum(%170, %171) /* ty=Tensor[(13, 7, 3), uint64] */;
    %173 = cast(%172, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
    %174 = shape_of(%var_1159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%var_1159, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %179 = reshape(%177, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %180 = reshape(%178, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %181 = @func_699(%179, %180) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
    %182 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %183 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %184 = cast(%var_1180, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
    %185 = reshape(%183, newshape=[]) /* ty=uint32 */;
    %186 = reshape(%184, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
    %187 = @func_349(%185, %186) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
    %188 = %187.1;
    %189 = cast(%188, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
    %190 = reshape(%182, newshape=[]) /* ty=uint32 */;
    %191 = reshape(%189, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
    %192 = @func_349(%190, %191) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
    %193 = cast(%188, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
    %194 = cast(%var_1160, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
    %195 = acos(%194) /* ty=Tensor[(13, 7, 3), float32] */;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(13, 7, 3), float64] */;
    %197 = %181.2;
    %198 = cast(%197, dtype="float64") /* ty=Tensor[(154), float64] */;
    %199 = erf(%193) /* ty=Tensor[(5, 1, 8), float64] */;
    %200 = cast(%199, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
    %201 = reshape(%198, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
    %202 = reshape(%200, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %203 = @func_375(%201, %202) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
    %204 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %205 = cast(%var_1180, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
    %206 = reshape(%204, newshape=[]) /* ty=uint32 */;
    %207 = reshape(%205, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
    %208 = @func_349(%206, %207) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
    %209 = power(%175, %176) /* ty=Tensor[(13, 7, 3), float32] */;
    %210 = %192.1;
    %211 = asinh(%196) /* ty=Tensor[(13, 7, 3), float64] */;
    %212 = %203.2;
    %213 = %208.0;
    (%209, meta[relay.Constant][8] /* ty=uint32 */, %var_1180, %197, meta[relay.Constant][9] /* ty=Tensor[(312), uint32] */, %210, %199, %211, %212, %213)
  };
  %214(%var_1225, %var_1226, %var_1227) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */
}

def @func_6846() -> (uint32,) {
  %215 = @func_3741() /* ty=(uint32,) */;
  %216 = %215.0;
  (%216,)
}

def @func_11978() -> (uint32,) {
  @func_11976() /* ty=(uint32,) */
}

def @func_8118() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  @func_8116() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_11888() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %217 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %218 = %217.0;
  %219 = @func_9731() /* ty=Tensor[(16, 13, 7), float64] */;
  (%218, %219)
}

def @func_4447(%var_4445: Tensor[(13, 13, 14), float32]) -> (Tensor[(13, 13, 14), float32], Tensor[(13, 13, 14), float32]) {
  @func_4444(%var_4445) /* ty=(Tensor[(13, 13, 14), float32], Tensor[(13, 13, 14), float32]) */
}

def @func_3482() -> uint32 {
  @func_3480() /* ty=uint32 */
}

def @func_10398() -> (Tensor[(16, 13, 7), float64],) {
  %222 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %220 = @func_9107() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %221 = %220.0;
    (%221,)
  };
  %222() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_10129(%var_10121: Tensor[(16, 13, 7), float32]) -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), bool]) {
  %223 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %224 = %223.0;
  %225 = cast(%var_10121, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  %230 = greater_equal(%227, %228) /* ty=Tensor[(16, 13, 7), bool] */;
  (%229, %230)
}

def @func_11627() -> (Tensor[(16, 13, 7), float64], Tensor[(13, 16, 15), float32]) {
  %234 = fn () -> (Tensor[(16, 13, 7), float64], Tensor[(13, 16, 15), float32]) {
    %231 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %232 = @func_9823() /* ty=Tensor[(16, 13, 7), float64] */;
    %233 = %231.0;
    (%232, %233)
  };
  %234() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(13, 16, 15), float32]) */
}

def @func_7429() -> (Tensor[(16, 13, 7), float32],) {
  @func_7427() /* ty=(Tensor[(16, 13, 7), float32],) */
}

def @func_7658(%var_7654: Tensor[(40, 1), uint32]) -> (uint32, Tensor[(16, 13, 7), float64], uint32, Tensor[(5, 1, 8), uint32], Tensor[(40, 1), uint32]) {
  %235 = @func_7249() /* ty=uint32 */;
  %236 = cast(%235, dtype="uint32") /* ty=uint32 */;
  %237 = cast(%var_7654, dtype="uint32") /* ty=Tensor[(40, 1), uint32] */;
  %238 = reshape(%236, newshape=[]) /* ty=uint32 */;
  %239 = reshape(%237, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %240 = @func_349(%238, %239) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %241 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %242 = @func_7249() /* ty=uint32 */;
  %243 = %240.1;
  (%235, %241, %242, %243, %var_7654)
}

def @func_10094() -> uint32 {
  @func_10092() /* ty=uint32 */
}

def @func_3480() -> uint32 {
  %244 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %244.1
}

def @func_5405() -> Tensor[(16, 13, 7), float64] {
  @func_4408() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_10731() -> (Tensor[(16, 13, 7), float64],) {
  %245 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %246 = %245.0;
  (%246,)
}

def @func_3379(%var_3378: Tensor[(40), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) {
  %257 = fn (%var_3364: Tensor[(40), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) {
    %247 = cast(meta[relay.Constant][10] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
    %248 = cast(%var_3364, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %249 = reshape(%247, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
    %250 = reshape(%248, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %251 = @func_375(%249, %250) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
    %252 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %253 = %252.1;
    %254 = cast(%253, dtype="float64") /* ty=Tensor[(132, 8), float64] */;
    %255 = %251.4;
    %256 = log10(%254) /* ty=Tensor[(132, 8), float64] */;
    (%255, meta[relay.Constant][10] /* ty=Tensor[(154), float64] */, %var_3364, %256)
  };
  %257(%var_3378) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) */
}

def @func_11116() -> (Tensor[(16, 13, 7), float32], Tensor[(11, 12, 8), float64]) {
  %262 = fn () -> (Tensor[(16, 13, 7), float32], Tensor[(11, 12, 8), float64]) {
    %258 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
    %259 = @func_7545() /* ty=(Tensor[(11, 12, 8), float64], uint32) */;
    %260 = %258.0;
    %261 = %259.0;
    (%260, %261)
  };
  %262() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(11, 12, 8), float64]) */
}

def @func_4762() -> (Tensor[(16, 13, 7), float64],) {
  %264 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %263 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
    (%263,)
  };
  %264() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_7851() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) {
  %265 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %266 = @func_6268() /* ty=(uint32,) */;
  %267 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %268 = %265.1;
  %269 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %270 = @func_4155() /* ty=uint32 */;
  %271 = %266.0;
  %272 = @func_5955() /* ty=uint32 */;
  %273 = %267.1;
  (%268, %269, %270, %271, %272, %273)
}

def @func_4204() -> (Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) {
  @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */
}

def @func_3114() -> (Tensor[(16, 13, 7), float64],) {
  %275 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %274 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
    (%274,)
  };
  %275() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_5488(%var_5487: Tensor[(336), float64]) -> (uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
  %291 = fn (%var_5462: Tensor[(336), float64]) -> (uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
    %276 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
    %277 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %278 = %277.0;
    %279 = cast(%278, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
    %280 = cast(meta[relay.Constant][11] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
    %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
    %282 = cast(%var_5462, dtype="float64") /* ty=Tensor[(336), float64] */;
    %283 = reshape(%280, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %284 = reshape(%281, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %285 = reshape(%282, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %286 = @func_1871(%283, %284, %285) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
    %287 = %276.3;
    %288 = sin(%279) /* ty=Tensor[(16, 13, 7), float32] */;
    %289 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
    %290 = %286.2;
    (%287, %288, %289, %290, meta[relay.Constant][11] /* ty=Tensor[(594), int32] */, %var_5462)
  };
  %291(%var_5487) /* ty=(uint32, Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) */
}

def @func_10649() -> (uint32,) {
  %294 = fn () -> (uint32,) {
    %292 = @func_3741() /* ty=(uint32,) */;
    %293 = %292.0;
    (%293,)
  };
  %294() /* ty=(uint32,) */
}

def @func_8956() -> uint32 {
  %295 = @func_7872() /* ty=(Tensor[(16, 13, 7), float64], uint32, uint32) */;
  %295.2
}

def @func_7211(%var_7209: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float32] {
  @func_7208(%var_7209) /* ty=Tensor[(3, 12, 1), float32] */
}

def @func_3154() -> (Tensor[(16, 13, 7), float64],) {
  %298 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %296 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %297 = %296.0;
    (%297,)
  };
  %298() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_5579() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %305 = fn () -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
    %299 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %300 = %299.0;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
    %302 = @func_4380() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */;
    %303 = exp(%301) /* ty=Tensor[(16, 13, 7), float32] */;
    %304 = %302.1;
    (%303, %304)
  };
  %305() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_8968() -> (uint32,) {
  @func_8966() /* ty=(uint32,) */
}

def @func_11890() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  @func_11888() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_9227() -> uint32 {
  %307 = fn () -> uint32 {
    %306 = @func_4004() /* ty=(uint32,) */;
    %306.0
  };
  %307() /* ty=uint32 */
}

def @func_11564() -> (uint32, Tensor[(16, 13, 7), float64]) {
  %308 = @func_4840() /* ty=(uint32,) */;
  %309 = %308.0;
  %310 = @func_8273() /* ty=Tensor[(16, 13, 7), float64] */;
  (%309, %310)
}

def @func_3535(%var_3533: Tensor[(9, 2, 11), float32], %var_3534: Tensor[(312), uint32]) -> (Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) {
  %332 = fn (%var_3504: Tensor[(9, 2, 11), float32], %var_3508: Tensor[(312), uint32]) -> (Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) {
    %311 = cast(%var_3508, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %312 = cast(%var_3508, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %313 = reshape(%311, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %314 = reshape(%312, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %315 = @func_699(%313, %314) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
    %316 = cast(%var_3504, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
    %317 = atan(%316) /* ty=Tensor[(9, 2, 11), float32] */;
    %318 = cast(%317, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
    %319 = acosh(%318) /* ty=Tensor[(9, 2, 11), float64] */;
    %320 = cast(%317, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %324 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %325 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %326 = reshape(%325, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float64] */;
    %327 = @func_1667(%326) /* ty=(Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) */;
    %328 = %315.2;
    %329 = mod(%322, %323) /* ty=Tensor[(9, 2, 11), float64] */;
    %330 = %324.0;
    %331 = %327.0;
    (%328, %var_3508, %329, %330, %331, meta[relay.Constant][12] /* ty=Tensor[(336), float64] */)
  };
  %332(%var_3533, %var_3534) /* ty=(Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) */
}

def @func_5867() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) {
  %341 = fn () -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) {
    %333 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
    %334 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %335 = @func_3741() /* ty=(uint32,) */;
    %336 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %337 = %333.1;
    %338 = %334.0;
    %339 = %335.0;
    %340 = %336.1;
    (%337, %338, %339, %340)
  };
  %341() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_5339() -> uint32 {
  %343 = fn () -> uint32 {
    %342 = @func_4840() /* ty=(uint32,) */;
    %342.0
  };
  %343() /* ty=uint32 */
}

def @func_8649(%var_8642: Tensor[(5, 15, 10), uint8], %var_8643: Tensor[(5, 15, 10), uint8]) -> (Tensor[(5, 15, 10), uint8],) {
  %344 = cast(%var_8643, dtype="uint8") /* ty=Tensor[(5, 15, 10), uint8] */;
  %345 = shape_of(%var_8642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_8642, dtype="uint8") /* ty=Tensor[(5, 15, 10), uint8] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %348 = bitwise_or(%346, %347) /* ty=Tensor[(5, 15, 10), uint8] */;
  (%348,)
}

def @func_9376(%var_9374: Tensor[(192), float32], %var_9375: Tensor[(132), int32]) -> (Tensor[(9, 13, 11), uint16], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(1728), float64], uint32, Tensor[(9, 16, 12), float32], Tensor[(16, 13, 7), float64]) {
  @func_9372(%var_9374, %var_9375) /* ty=(Tensor[(9, 13, 11), uint16], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(1728), float64], uint32, Tensor[(9, 16, 12), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_10132(%var_10130: Tensor[(16, 13, 7), float32]) -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), bool]) {
  @func_10129(%var_10130) /* ty=(Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), bool]) */
}

def @func_10466() -> (Tensor[(16, 13, 7), float32],) {
  %349 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
  (%349,)
}

def @func_4121() -> (uint32,) {
  %350 = @func_3480() /* ty=uint32 */;
  (%350,)
}

def @func_12286(%var_12284: Tensor[(9, 13, 8), float64]) -> (Tensor[(9, 13, 8), float32], uint32) {
  @func_12283(%var_12284) /* ty=(Tensor[(9, 13, 8), float32], uint32) */
}

def @func_375(%var_356: Tensor[(11, 2, 7), float64], %var_369: Tensor[(40), uint32]) -> (Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) {
  %351 = cast(%var_356, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %352 = asin(%351) /* ty=Tensor[(11, 2, 7), float64] */;
  %353 = cast(%var_356, dtype="uint16") /* ty=Tensor[(11, 2, 7), uint16] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="uint16") /* ty=Tensor[(11, 2, 7), uint16] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %357 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %358 = cast(%var_369, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %359 = reshape(%357, newshape=[]) /* ty=uint32 */;
  %360 = reshape(%358, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %361 = @func_349(%359, %360) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %362 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %363 = cast(%var_369, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %364 = reshape(%362, newshape=[]) /* ty=uint32 */;
  %365 = reshape(%363, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %366 = @func_349(%364, %365) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %367 = maximum(%355, %356) /* ty=Tensor[(11, 2, 7), uint16] */;
  %368 = %361.1;
  %369 = %366.0;
  (%367, %368, meta[relay.Constant][13] /* ty=uint32 */, %var_369, %369)
}

def @func_10612() -> uint32 {
  %370 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %370.0
}

def @func_6176() -> (uint32,) {
  %371 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %372 = %371.2;
  (%372,)
}

def @func_6390(%var_6383: Tensor[(9, 13, 11), bool]) -> (Tensor[(9, 13, 11), uint64],) {
  %373 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
  %374 = cast(%var_6383, dtype="uint64") /* ty=Tensor[(9, 13, 11), uint64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="uint64") /* ty=Tensor[(9, 13, 11), uint64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %378 = bitwise_xor(%376, %377) /* ty=Tensor[(9, 13, 11), uint64] */;
  (%378,)
}

def @func_6178() -> (uint32,) {
  @func_6176() /* ty=(uint32,) */
}

def @func_9936(%var_9912: Tensor[(2340), float64]) -> (uint32, Tensor[(132, 8), float32], Tensor[(16, 4), uint32], Tensor[(2340), float64], Tensor[(64), uint32], Tensor[(13, 16, 15), float32], Tensor[(16, 13, 7), float64]) {
  %379 = @func_3741() /* ty=(uint32,) */;
  %380 = cast(%var_9912, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %381 = cast(meta[relay.Constant][14] /* ty=Tensor[(64), uint32] */, dtype="uint32") /* ty=Tensor[(64), uint32] */;
  %382 = reshape(%380, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %383 = reshape(%381, newshape=[16, 4]) /* ty=Tensor[(16, 4), uint32] */;
  %384 = @func_9796(%382, %383) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) */;
  %385 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
  %386 = %379.0;
  %387 = @func_8679() /* ty=Tensor[(132, 8), float32] */;
  %388 = %384.1;
  %389 = %385.0;
  %390 = @func_4408() /* ty=Tensor[(16, 13, 7), float64] */;
  (%386, %387, %388, %var_9912, meta[relay.Constant][14] /* ty=Tensor[(64), uint32] */, %389, %390)
}

def @func_7250() -> uint32 {
  %392 = fn () -> uint32 {
    %391 = @func_6118() /* ty=(uint32, uint32) */;
    %391.0
  };
  %392() /* ty=uint32 */
}

def @func_6962() -> (Tensor[(13, 16, 15), float32],) {
  %395 = fn () -> (Tensor[(13, 16, 15), float32],) {
    %393 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %394 = %393.0;
    (%394,)
  };
  %395() /* ty=(Tensor[(13, 16, 15), float32],) */
}

def @func_3719(%var_3716: Tensor[(16, 13, 7), float64], %var_3717: Tensor[(312), uint32], %var_3718: Tensor[(54), int16]) -> (Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) {
  %424 = fn (%var_3663: Tensor[(16, 13, 7), float64], %var_3679: Tensor[(312), uint32], %var_3704: Tensor[(54), int16]) -> (Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) {
    %396 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %397 = cast(%var_3679, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %398 = reshape(%396, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float32] */;
    %399 = reshape(%397, newshape=[312]) /* ty=Tensor[(312), uint32] */;
    %400 = @func_3532(%398, %399) /* ty=(Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) */;
    %401 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %402 = %401.0;
    %403 = cast(%402, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    %404 = acosh(%403) /* ty=Tensor[(16, 13, 7), float64] */;
    %405 = cast(%var_3663, dtype="uint16") /* ty=Tensor[(16, 13, 7), uint16] */;
    %406 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%402, dtype="uint16") /* ty=Tensor[(16, 13, 7), uint16] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %409 = subtract(%407, %408) /* ty=Tensor[(16, 13, 7), uint16] */;
    %410 = cast(%409, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    %411 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%404, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %414 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %415 = cast(meta[relay.Constant][16] /* ty=Tensor[(128, 1), int32] */, dtype="int32") /* ty=Tensor[(128, 1), int32] */;
    %416 = cast(%var_3704, dtype="int16") /* ty=Tensor[(54), int16] */;
    %417 = reshape(%415, newshape=[128]) /* ty=Tensor[(128), int32] */;
    %418 = reshape(%416, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
    %419 = @func_3075(%417, %418) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
    %420 = %400.5;
    %421 = mod(%412, %413) /* ty=Tensor[(16, 13, 7), float64] */;
    %422 = %414.0;
    %423 = %419.0;
    (%420, meta[relay.Constant][15] /* ty=Tensor[(198), float32] */, %var_3679, %421, %422, %423, meta[relay.Constant][16] /* ty=Tensor[(128, 1), int32] */, %var_3704)
  };
  %424(%var_3716, %var_3717, %var_3718) /* ty=(Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) */
}

def @func_3079(%var_3077: Tensor[(128), int32], %var_3078: Tensor[(3, 18), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) {
  @func_3075(%var_3077, %var_3078) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */
}

def @func_4005() -> (uint32,) {
  %427 = fn () -> (uint32,) {
    %425 = @func_3741() /* ty=(uint32,) */;
    %426 = %425.0;
    (%426,)
  };
  %427() /* ty=(uint32,) */
}

def @func_7853() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) {
  @func_7851() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_8273() -> Tensor[(16, 13, 7), float64] {
  %428 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %428.1
}

def @func_7288() -> uint32 {
  %430 = fn () -> uint32 {
    %429 = @func_4004() /* ty=(uint32,) */;
    %429.0
  };
  %430() /* ty=uint32 */
}

def @func_10491() -> (Tensor[(9, 13, 11), bool],) {
  %433 = fn () -> (Tensor[(9, 13, 11), bool],) {
    %431 = @func_9382() /* ty=(Tensor[(9, 13, 11), bool],) */;
    %432 = %431.0;
    (%432,)
  };
  %433() /* ty=(Tensor[(9, 13, 11), bool],) */
}

def @func_4504() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %437 = fn () -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
    %434 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %435 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
    %436 = %434.0;
    (%435, %436)
  };
  %437() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_8036() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  @func_8034() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_4809() -> Tensor[(16, 13, 7), float32] {
  %441 = fn () -> Tensor[(16, 13, 7), float32] {
    %438 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %439 = %438.0;
    %440 = cast(%439, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
    acos(%440) /* ty=Tensor[(16, 13, 7), float32] */
  };
  %441() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_3626() -> (uint32,) {
  @func_3624() /* ty=(uint32,) */
}

def @func_3656() -> (Tensor[(16, 13, 7), float64],) {
  %444 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %442 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
    %443 = %442.0;
    (%443,)
  };
  %444() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_5744() -> Tensor[(16, 13, 7), float64] {
  %445 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
  %445.1
}

def @func_3624() -> (uint32,) {
  %446 = @func_3480() /* ty=uint32 */;
  (%446,)
}

def @func_1871(%var_1863: Tensor[(11, 6, 9), int32], %var_1864: Tensor[(11, 6, 9), int32], %var_1869: Tensor[(336), float64]) -> (Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) {
  %447 = cast(%var_1864, dtype="int32") /* ty=Tensor[(11, 6, 9), int32] */;
  %448 = shape_of(%var_1863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_1863, dtype="int32") /* ty=Tensor[(11, 6, 9), int32] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %451 = cast(%var_1869, dtype="float64") /* ty=Tensor[(336), float64] */;
  %452 = reshape(%451, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float64] */;
  %453 = @func_1667(%452) /* ty=(Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) */;
  %454 = bitwise_and(%449, %450) /* ty=Tensor[(11, 6, 9), int32] */;
  %455 = %453.1;
  (%454, %455, %var_1869)
}

def @func_8116() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %456 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %457 = %456.1;
  %458 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
  (%457, %458)
}

def @func_3973(%var_3972: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) {
  %463 = fn (%var_3951: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) {
    %459 = cast(%var_3951, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %460 = cast(%var_3951, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %461 = sin(%459) /* ty=Tensor[(9, 16, 12), float64] */;
    %462 = atan(%460) /* ty=Tensor[(9, 16, 12), float64] */;
    (%461, %462)
  };
  %463(%var_3972) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) */
}

def @func_8286() -> Tensor[(9, 13, 11), bool] {
  @func_8284() /* ty=Tensor[(9, 13, 11), bool] */
}

def @func_6035() -> (Tensor[(9, 13, 11), bool],) {
  %465 = fn () -> (Tensor[(9, 13, 11), bool],) {
    %464 = @func_5192() /* ty=Tensor[(9, 13, 11), bool] */;
    (%464,)
  };
  %465() /* ty=(Tensor[(9, 13, 11), bool],) */
}

def @func_4381() -> (uint32, Tensor[(16, 13, 7), float64]) {
  %469 = fn () -> (uint32, Tensor[(16, 13, 7), float64]) {
    %466 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %467 = @func_4155() /* ty=uint32 */;
    %468 = %466.0;
    (%467, %468)
  };
  %469() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_6469() -> Tensor[(9, 13, 11), bool] {
  %471 = fn () -> Tensor[(9, 13, 11), bool] {
    %470 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
    %470.0
  };
  %471() /* ty=Tensor[(9, 13, 11), bool] */
}

def @func_5323() -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  %472 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %473 = cast(meta[relay.Constant][17] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %474 = reshape(%473, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %475 = @func_5030(%474) /* ty=(uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) */;
  %476 = @func_4121() /* ty=(uint32,) */;
  %477 = %472.1;
  %478 = %475.1;
  %479 = %476.0;
  (%477, %478, meta[relay.Constant][17] /* ty=Tensor[(40), uint32] */, %479)
}

def @func_4478(%var_4476: Tensor[(13, 7, 8), uint16], %var_4477: Tensor[(13, 7, 8), uint16]) -> Tensor[(13, 7, 8), bool] {
  %489 = fn (%var_4454: Tensor[(13, 7, 8), uint16], %var_4455: Tensor[(13, 7, 8), uint16]) -> Tensor[(13, 7, 8), bool] {
    %480 = cast(%var_4455, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %481 = shape_of(%var_4454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_4454, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %484 = not_equal(%482, %483) /* ty=Tensor[(13, 7, 8), bool] */;
    %485 = cast(%484, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %486 = shape_of(%var_4455, dtype="int32") /* ty=Tensor[(3), int32] */;
    %487 = cast(%var_4455, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%487, %488) /* ty=Tensor[(13, 7, 8), bool] */
  };
  %489(%var_4476, %var_4477) /* ty=Tensor[(13, 7, 8), bool] */
}

def @func_3075(%var_3006: Tensor[(128), int32], %var_3013: Tensor[(3, 18), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) {
  %490 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %491 = cast(%var_3006, dtype="int32") /* ty=Tensor[(128), int32] */;
  %492 = reshape(%490, newshape=[]) /* ty=int32 */;
  %493 = reshape(%491, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
  %494 = @func_2045(%492, %493) /* ty=(Tensor[(8, 1, 16), bool],) */;
  %495 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %496 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %497 = cast(meta[relay.Constant][18] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %498 = reshape(%495, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %499 = reshape(%496, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %500 = reshape(%497, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %501 = @func_1712(%498, %499, %500) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %502 = cast(meta[relay.Constant][19] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %503 = cast(meta[relay.Constant][19] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %504 = cast(meta[relay.Constant][18] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %505 = reshape(%502, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %506 = reshape(%503, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %507 = reshape(%504, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %508 = @func_1224(%505, %506, %507) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %509 = cast(meta[relay.Constant][19] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %510 = cast(meta[relay.Constant][19] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %511 = cast(meta[relay.Constant][18] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %512 = reshape(%509, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %513 = reshape(%510, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %514 = reshape(%511, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %515 = @func_1224(%512, %513, %514) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %516 = cast(meta[relay.Constant][19] /* ty=Tensor[(273), uint64] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %517 = tan(%516) /* ty=Tensor[(273), float32] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(273), float64] */;
  %519 = sigmoid(%518) /* ty=Tensor[(273), float64] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(273), float64] */;
  %521 = cast(10 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %522 = %508.9;
  %523 = cast(%522, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %524 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %525 = reshape(%521, newshape=[]) /* ty=uint32 */;
  %526 = reshape(%523, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %527 = reshape(%524, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %528 = @func_2969(%525, %526, %527) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %529 = cast(meta[relay.Constant][20] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %530 = cast(meta[relay.Constant][20] /* ty=Tensor[(594), int32] */, dtype="int32") /* ty=Tensor[(594), int32] */;
  %531 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %532 = reshape(%529, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %533 = reshape(%530, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
  %534 = reshape(%531, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %535 = @func_1871(%532, %533, %534) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
  %536 = cast(10 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %537 = cast(%522, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
  %538 = cast(%var_3013, dtype="int16") /* ty=Tensor[(3, 18), int16] */;
  %539 = reshape(%536, newshape=[]) /* ty=uint32 */;
  %540 = reshape(%537, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %541 = reshape(%538, newshape=[54]) /* ty=Tensor[(54), int16] */;
  %542 = @func_2969(%539, %540, %541) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
  %543 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %544 = %494.0;
  %545 = %501.0;
  %546 = %515.7;
  %547 = atan(%520) /* ty=Tensor[(273), float64] */;
  %548 = %528.4;
  %549 = %535.2;
  %550 = %542.3;
  (%543, %544, 10 /* ty=int32 */, %var_3006, %545, %var_3013, meta[relay.Constant][18] /* ty=Tensor[(40), uint32] */, %522, %546, %547, %548, %549, meta[relay.Constant][20] /* ty=Tensor[(594), int32] */, meta[relay.Constant][21] /* ty=Tensor[(4, 84), float64] */, %550)
}

def @func_5805() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) {
  @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */
}

def @func_8958() -> uint32 {
  @func_8956() /* ty=uint32 */
}

def @func_11606() -> (Tensor[(16, 13, 7), float64],) {
  %551 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %552 = %551.0;
  (%552,)
}

def @func_1815(%var_1799: Tensor[(11, 4, 3), int32], %var_1800: Tensor[(11, 4, 3), int32]) -> (Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) {
  %553 = cast(%var_1800, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %554 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_1799, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %557 = subtract(%555, %556) /* ty=Tensor[(11, 4, 3), int32] */;
  %558 = cast(%557, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %559 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_1799, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %562 = cast(%var_1800, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %563 = minimum(%560, %561) /* ty=Tensor[(11, 4, 3), int64] */;
  %564 = asin(%562) /* ty=Tensor[(11, 4, 3), float32] */;
  (%563, %564)
}

def @func_9372(%var_9333: Tensor[(192), float32], %var_9334: Tensor[(132), int32]) -> (Tensor[(9, 13, 11), uint16], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(1728), float64], uint32, Tensor[(9, 16, 12), float32], Tensor[(16, 13, 7), float64]) {
  %565 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
  %566 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 13, 11), bool] */, dtype="uint16") /* ty=Tensor[(9, 13, 11), uint16] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="uint16") /* ty=Tensor[(9, 13, 11), uint16] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %570 = cast(%var_9333, dtype="float32") /* ty=Tensor[(192), float32] */;
  %571 = cast(%var_9333, dtype="float32") /* ty=Tensor[(192), float32] */;
  %572 = cast(%var_9334, dtype="int32") /* ty=Tensor[(132), int32] */;
  %573 = reshape(%570, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %574 = reshape(%571, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %575 = reshape(%572, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %576 = @func_2229(%573, %574, %575) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %577 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %578 = cast(meta[relay.Constant][23] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %579 = reshape(%578, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %580 = @func_3971(%579) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), float64]) */;
  %581 = %580.1;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %583 = bitwise_and(%568, %569) /* ty=Tensor[(9, 13, 11), uint16] */;
  %584 = %576.0;
  %585 = %577.0;
  %586 = cosh(%582) /* ty=Tensor[(9, 16, 12), float32] */;
  %587 = @func_8484() /* ty=Tensor[(16, 13, 7), float64] */;
  (%583, %584, %var_9333, %var_9334, meta[relay.Constant][23] /* ty=Tensor[(1728), float64] */, %585, %586, %587)
}

def @func_10957(%var_10852: Tensor[(9, 8, 13), float32], %var_10864: Tensor[(154), float64], %var_10868: Tensor[(132), float32], %var_10893: Tensor[(9, 8, 13), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), uint32], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(11, 12, 1), float32], Tensor[(132), float32], Tensor[(16, 13, 7), float64], Tensor[(9, 8, 13), int16], Tensor[(9, 8, 13), float64], Tensor[(9, 8, 13), bool], Tensor[(5, 15, 10), uint8], Tensor[(50, 15), uint8], Tensor[(16, 13, 7), float32], Tensor[(11, 4, 3), float32]) {
  %588 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %589 = cast(%var_10864, dtype="float64") /* ty=Tensor[(154), float64] */;
  %590 = cast(meta[relay.Constant][24] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %591 = reshape(%589, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %592 = reshape(%590, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %593 = @func_375(%591, %592) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %594 = cast(%var_10868, dtype="float32") /* ty=Tensor[(132), float32] */;
  %595 = reshape(%594, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), float32] */;
  %596 = @func_10354() /* ty=(Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) */;
  %597 = cast(%var_10852, dtype="float32") /* ty=Tensor[(9, 8, 13), float32] */;
  %598 = sin(%597) /* ty=Tensor[(9, 8, 13), float32] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(9, 8, 13), float32] */;
  %600 = erf(%599) /* ty=Tensor[(9, 8, 13), float32] */;
  %601 = cast(%var_10893, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = greater_equal(%603, %604) /* ty=Tensor[(9, 8, 13), bool] */;
  %606 = cast(%var_10893, dtype="int16") /* ty=Tensor[(9, 8, 13), int16] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="int16") /* ty=Tensor[(9, 8, 13), int16] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %610 = cast(%598, dtype="float64") /* ty=Tensor[(9, 8, 13), float64] */;
  %611 = cast(%598, dtype="float64") /* ty=Tensor[(9, 8, 13), float64] */;
  %612 = log10(%611) /* ty=Tensor[(9, 8, 13), float64] */;
  %613 = cast(%605, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(meta[relay.Constant][25] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %618 = cast(meta[relay.Constant][25] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %619 = reshape(%617, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), uint8] */;
  %620 = reshape(%618, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), uint8] */;
  %621 = @func_8649(%619, %620) /* ty=(Tensor[(5, 15, 10), uint8],) */;
  %622 = @func_8222(%595) /* ty=Tensor[(11, 12, 1), float32] */;
  %623 = cast(%622, dtype="int32") /* ty=Tensor[(11, 12, 1), int32] */;
  %624 = cast(%var_10868, dtype="int32") /* ty=Tensor[(132), int32] */;
  %625 = reshape(%623, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %626 = reshape(%624, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int32] */;
  %627 = @func_1815(%625, %626) /* ty=(Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) */;
  %628 = %588.1;
  %629 = %593.1;
  %630 = %596.1;
  %631 = subtract(%608, %609) /* ty=Tensor[(9, 8, 13), int16] */;
  %632 = asin(%610) /* ty=Tensor[(9, 8, 13), float64] */;
  %633 = less_equal(%615, %616) /* ty=Tensor[(9, 8, 13), bool] */;
  %634 = %621.0;
  %635 = @func_10024() /* ty=Tensor[(16, 13, 7), float32] */;
  %636 = %627.1;
  (%628, %629, %var_10864, meta[relay.Constant][24] /* ty=Tensor[(40), uint32] */, %622, %var_10868, %630, %631, %632, %633, %634, meta[relay.Constant][25] /* ty=Tensor[(50, 15), uint8] */, %635, %636)
}

def @func_11545() -> (uint32,) {
  @func_11543() /* ty=(uint32,) */
}

def @func_8680() -> Tensor[(132, 8), float32] {
  %638 = fn () -> Tensor[(132, 8), float32] {
    %637 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %637.1
  };
  %638() /* ty=Tensor[(132, 8), float32] */
}

def @func_4409() -> Tensor[(16, 13, 7), float64] {
  %641 = fn () -> Tensor[(16, 13, 7), float64] {
    %639 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    tan(%640) /* ty=Tensor[(16, 13, 7), float64] */
  };
  %641() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_5955() -> uint32 {
  %642 = @func_5913() /* ty=(uint32,) */;
  %642.0
}

def @func_11976() -> (uint32,) {
  %643 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
  %644 = %643.1;
  (%644,)
}

def @func_6270() -> (uint32,) {
  @func_6268() /* ty=(uint32,) */
}

def @func_10024() -> Tensor[(16, 13, 7), float32] {
  @func_4808() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_10963(%var_10959: Tensor[(9, 8, 13), float32], %var_10960: Tensor[(154), float64], %var_10961: Tensor[(132), float32], %var_10962: Tensor[(9, 8, 13), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), uint32], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(11, 12, 1), float32], Tensor[(132), float32], Tensor[(16, 13, 7), float64], Tensor[(9, 8, 13), int16], Tensor[(9, 8, 13), float64], Tensor[(9, 8, 13), bool], Tensor[(5, 15, 10), uint8], Tensor[(50, 15), uint8], Tensor[(16, 13, 7), float32], Tensor[(11, 4, 3), float32]) {
  @func_10957(%var_10959, %var_10960, %var_10961, %var_10962) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), uint32], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(11, 12, 1), float32], Tensor[(132), float32], Tensor[(16, 13, 7), float64], Tensor[(9, 8, 13), int16], Tensor[(9, 8, 13), float64], Tensor[(9, 8, 13), bool], Tensor[(5, 15, 10), uint8], Tensor[(50, 15), uint8], Tensor[(16, 13, 7), float32], Tensor[(11, 4, 3), float32]) */
}

def @func_8275() -> Tensor[(16, 13, 7), float64] {
  @func_8273() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_8034() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %645 = @func_5866() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, Tensor[(16, 13, 7), float64]) */;
  %646 = @func_5880() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %647 = %645.1;
  %648 = %646.0;
  %649 = @func_5405() /* ty=Tensor[(16, 13, 7), float64] */;
  (%647, %648, %649)
}

def @func_6120() -> (uint32, uint32) {
  @func_6118() /* ty=(uint32, uint32) */
}

def @func_10699(%var_10659: Tensor[(54), int16], %var_10660: Tensor[(20, 2), uint32], %var_10664: Tensor[(9, 13, 11), bool]) -> (Tensor[(11, 2, 7), uint16], Tensor[(54), int16], Tensor[(20, 2), uint32], Tensor[(9, 13, 11), int8]) {
  %650 = cast(%var_10659, dtype="int16") /* ty=Tensor[(54), int16] */;
  %651 = cast(%var_10659, dtype="int16") /* ty=Tensor[(54), int16] */;
  %652 = cast(%var_10660, dtype="uint32") /* ty=Tensor[(20, 2), uint32] */;
  %653 = reshape(%650, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %654 = reshape(%651, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %655 = reshape(%652, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %656 = @func_1712(%653, %654, %655) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %657 = @func_8284() /* ty=Tensor[(9, 13, 11), bool] */;
  %658 = cast(%var_10664, dtype="int8") /* ty=Tensor[(9, 13, 11), int8] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="int8") /* ty=Tensor[(9, 13, 11), int8] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %662 = %656.1;
  %663 = add(%660, %661) /* ty=Tensor[(9, 13, 11), int8] */;
  (%662, %var_10659, %var_10660, %663)
}

def @func_5099() -> (uint32, Tensor[(16, 13, 7), float64], uint32) {
  %670 = fn () -> (uint32, Tensor[(16, 13, 7), float64], uint32) {
    %664 = @func_4004() /* ty=(uint32,) */;
    %665 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
    %666 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
    %667 = %664.0;
    %668 = %665.1;
    %669 = %666.1;
    (%667, %668, %669)
  };
  %670() /* ty=(uint32, Tensor[(16, 13, 7), float64], uint32) */
}

def @func_4841() -> (uint32,) {
  %673 = fn () -> (uint32,) {
    %671 = @func_4121() /* ty=(uint32,) */;
    %672 = %671.0;
    (%672,)
  };
  %673() /* ty=(uint32,) */
}

def @func_5193() -> Tensor[(9, 13, 11), bool] {
  %677 = fn () -> Tensor[(9, 13, 11), bool] {
    %674 = @func_3480() /* ty=uint32 */;
    %675 = cast(%674, dtype="bool") /* ty=bool */;
    %676 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 13, 11), uint32] */, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
    greater(%675, %676) /* ty=Tensor[(9, 13, 11), bool] */
  };
  %677() /* ty=Tensor[(9, 13, 11), bool] */
}

def @func_5746() -> Tensor[(16, 13, 7), float64] {
  @func_5744() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_10354() -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) {
  %678 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %679 = @func_9893() /* ty=Tensor[(9, 13, 11), bool] */;
  %680 = %678.0;
  (%679, %680)
}

def @func_9063() -> uint32 {
  @func_9061() /* ty=uint32 */
}

def @func_8266() -> (Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) {
  %685 = fn () -> (Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) {
    %681 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
    %682 = %681.0;
    %683 = @func_7287() /* ty=uint32 */;
    %684 = @func_6684() /* ty=Tensor[(16, 13, 7), float64] */;
    (%682, %683, %684)
  };
  %685() /* ty=(Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_5880() -> (Tensor[(16, 13, 7), float32],) {
  %686 = @func_5253() /* ty=Tensor[(16, 13, 7), float32] */;
  (%686,)
}

def @func_8225(%var_8223: Tensor[(11, 12, 1), float32]) -> Tensor[(11, 12, 1), float32] {
  @func_8222(%var_8223) /* ty=Tensor[(11, 12, 1), float32] */
}

def @func_2049(%var_2047: int32, %var_2048: Tensor[(8, 1, 16), int32]) -> (Tensor[(8, 1, 16), bool],) {
  @func_2045(%var_2047, %var_2048) /* ty=(Tensor[(8, 1, 16), bool],) */
}

def @func_10356() -> (Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) {
  @func_10354() /* ty=(Tensor[(9, 13, 11), bool], Tensor[(16, 13, 7), float64]) */
}

def @func_11505() -> Tensor[(16, 13, 7), float32] {
  @func_11503() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_6431() -> (uint32,) {
  %689 = fn () -> (uint32,) {
    %687 = @func_6369() /* ty=(uint32, uint32) */;
    %688 = %687.0;
    (%688,)
  };
  %689() /* ty=(uint32,) */
}

def @func_11543() -> (uint32,) {
  %690 = @func_5338() /* ty=uint32 */;
  (%690,)
}

def @func_3414() -> (Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) {
  %698 = fn () -> (Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) {
    %691 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %692 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %693 = reshape(%691, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float32] */;
    %694 = reshape(%692, newshape=[]) /* ty=uint32 */;
    %695 = @func_3264(%693, %694) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) */;
    %696 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
    %697 = %695.2;
    (%696, %697, meta[relay.Constant][27] /* ty=Tensor[(220), float32] */, meta[relay.Constant][28] /* ty=uint32 */)
  };
  %698() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */
}

def @func_6624(%var_6622: Tensor[(336), float64], %var_6623: Tensor[(1456), float64]) -> (uint32, Tensor[(594), int32], Tensor[(336), float64], Tensor[(16, 13, 7), uint64], Tensor[(1456), float64], uint32) {
  @func_6620(%var_6622, %var_6623) /* ty=(uint32, Tensor[(594), int32], Tensor[(336), float64], Tensor[(16, 13, 7), uint64], Tensor[(1456), float64], uint32) */
}

def @func_4348() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_2974(%var_2971: uint32, %var_2972: Tensor[(40), uint32], %var_2973: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) {
  @func_2969(%var_2971, %var_2972, %var_2973) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */
}

def @func_9383() -> (Tensor[(9, 13, 11), bool],) {
  %700 = fn () -> (Tensor[(9, 13, 11), bool],) {
    %699 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
    (%699,)
  };
  %700() /* ty=(Tensor[(9, 13, 11), bool],) */
}

def @func_9893() -> Tensor[(9, 13, 11), bool] {
  %701 = @func_8740() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */;
  %701.1
}

def @func_3916(%var_3912: Tensor[(12, 7, 13), float64], %var_3913: Tensor[(12, 7, 13), float64], %var_3914: Tensor[(12, 7, 13), float64], %var_3915: Tensor[(12, 7, 13), float32]) -> (Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) {
  %719 = fn (%var_3868: Tensor[(12, 7, 13), float64], %var_3869: Tensor[(12, 7, 13), float64], %var_3883: Tensor[(12, 7, 13), float64], %var_3906: Tensor[(12, 7, 13), float32]) -> (Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) {
    %702 = cast(%var_3869, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
    %703 = shape_of(%var_3868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_3868, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %706 = cast(%var_3883, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
    %707 = shape_of(%var_3868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%var_3868, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %710 = cast(%var_3868, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
    %711 = erf(%710) /* ty=Tensor[(12, 7, 13), float32] */;
    %712 = cast(%var_3906, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
    %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%711, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %716 = power(%704, %705) /* ty=Tensor[(12, 7, 13), float64] */;
    %717 = right_shift(%708, %709) /* ty=Tensor[(12, 7, 13), int8] */;
    %718 = add(%714, %715) /* ty=Tensor[(12, 7, 13), float32] */;
    (%716, %717, %718)
  };
  %719(%var_3912, %var_3913, %var_3914, %var_3915) /* ty=(Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) */
}

def @func_8350() -> (Tensor[(16, 13, 7), float64],) {
  %722 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %720 = @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %721 = %720.0;
    (%721,)
  };
  %722() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_5957() -> uint32 {
  @func_5955() /* ty=uint32 */
}

def @func_5668(%var_5666: Tensor[(2, 7, 3), float64]) -> Tensor[(2, 7, 3), float64] {
  @func_5665(%var_5666) /* ty=Tensor[(2, 7, 3), float64] */
}

def @func_8449() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %723 = @func_7571() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %724 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %725 = %723.0;
  %726 = %724.0;
  %727 = @func_5744() /* ty=Tensor[(16, 13, 7), float64] */;
  (%725, %726, %727)
}

def @func_7600() -> uint32 {
  %728 = @func_6118() /* ty=(uint32, uint32) */;
  %728.1
}

def @func_9177() -> (uint32, Tensor[(9, 13, 11), float32]) {
  @func_9175() /* ty=(uint32, Tensor[(9, 13, 11), float32]) */
}

def @func_6848() -> (uint32,) {
  @func_6846() /* ty=(uint32,) */
}

def @func_9107() -> (Tensor[(16, 13, 7), float64],) {
  %729 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %730 = %729.0;
  (%730,)
}

def @func_4123() -> (uint32,) {
  @func_4121() /* ty=(uint32,) */
}

def @func_9683() -> (Tensor[(16, 13, 7), float64],) {
  %731 = @func_8116() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %732 = %731.1;
  (%732,)
}

def @func_11190(%var_11188: Tensor[(3, 9, 9), float64], %var_11189: Tensor[(3, 9, 9), float64]) -> Tensor[(3, 9, 9), float64] {
  %737 = fn (%var_11181: Tensor[(3, 9, 9), float64], %var_11182: Tensor[(3, 9, 9), float64]) -> Tensor[(3, 9, 9), float64] {
    %733 = cast(%var_11182, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
    %734 = shape_of(%var_11181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%var_11181, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%735, %736) /* ty=Tensor[(3, 9, 9), float64] */
  };
  %737(%var_11188, %var_11189) /* ty=Tensor[(3, 9, 9), float64] */
}

def @func_9824() -> Tensor[(16, 13, 7), float64] {
  %739 = fn () -> Tensor[(16, 13, 7), float64] {
    %738 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %738.0
  };
  %739() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_9109() -> (Tensor[(16, 13, 7), float64],) {
  @func_9107() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11665() -> uint32 {
  %740 = fn () -> uint32 {
    @func_10092() /* ty=uint32 */
  };
  %740() /* ty=uint32 */
}

def @func_2969(%var_2927: uint32, %var_2928: Tensor[(40), uint32], %var_2933: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) {
  %741 = cast(%var_2927, dtype="uint32") /* ty=uint32 */;
  %742 = cast(%var_2928, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %743 = reshape(%741, newshape=[]) /* ty=uint32 */;
  %744 = reshape(%742, newshape=[5, 1, 8]) /* ty=Tensor[(5, 1, 8), uint32] */;
  %745 = @func_349(%743, %744) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */;
  %746 = cast(%var_2933, dtype="int16") /* ty=Tensor[(54), int16] */;
  %747 = cast(%var_2933, dtype="int16") /* ty=Tensor[(54), int16] */;
  %748 = cast(%var_2928, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %749 = reshape(%746, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %750 = reshape(%747, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
  %751 = reshape(%748, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %752 = @func_1712(%749, %750, %751) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
  %753 = %752.1;
  %754 = cast(%753, dtype="int64") /* ty=Tensor[(11, 2, 7), int64] */;
  %755 = cast(%var_2927, dtype="int64") /* ty=int64 */;
  %756 = bitwise_or(%754, %755) /* ty=Tensor[(11, 2, 7), int64] */;
  %757 = cast(%756, dtype="bool") /* ty=Tensor[(11, 2, 7), bool] */;
  %758 = cast(%var_2927, dtype="bool") /* ty=bool */;
  %759 = cast(%var_2933, dtype="bool") /* ty=Tensor[(54), bool] */;
  %760 = cast(%var_2927, dtype="bool") /* ty=bool */;
  %761 = @func_2920() /* ty=Tensor[(16, 13, 7), float64] */;
  %762 = %745.0;
  %763 = logical_and(%757, %758) /* ty=Tensor[(11, 2, 7), bool] */;
  %764 = greater_equal(%759, %760) /* ty=Tensor[(54), bool] */;
  (%761, %762, %var_2928, %763, %764)
}

def @func_11170() -> (Tensor[(9, 13, 11), bool], uint32) {
  @func_11168() /* ty=(Tensor[(9, 13, 11), bool], uint32) */
}

def @func_11608() -> (Tensor[(16, 13, 7), float64],) {
  @func_11606() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_4072(%var_4071: Tensor[(1092), float64]) -> (Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) {
  %777 = fn (%var_4057: Tensor[(1092), float64]) -> (Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) {
    %765 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %766 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %767 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %768 = cast(%var_4057, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %769 = cast(%var_4057, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %770 = reshape(%766, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %771 = reshape(%767, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %772 = reshape(%768, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %773 = reshape(%769, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float32] */;
    %774 = @func_3911(%770, %771, %772, %773) /* ty=(Tensor[(12, 7, 13), float64], Tensor[(12, 7, 13), int8], Tensor[(12, 7, 13), float32]) */;
    %775 = %765.1;
    %776 = %774.1;
    (%775, %776, %var_4057)
  };
  %777(%var_4071) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */
}

def @func_4155() -> uint32 {
  %778 = @func_3624() /* ty=(uint32,) */;
  %778.0
}

def @func_6118() -> (uint32, uint32) {
  %779 = @func_5913() /* ty=(uint32,) */;
  %780 = @func_4155() /* ty=uint32 */;
  %781 = %779.0;
  (%780, %781)
}

def @func_6268() -> (uint32,) {
  %782 = @func_3480() /* ty=uint32 */;
  (%782,)
}

def @main(%var_12329: Tensor[(9, 13, 10), float64]) -> (Tensor[(9, 13, 10), float64],) {
  %783 = cast(%var_12329, dtype="float64") /* ty=Tensor[(9, 13, 10), float64] */;
  %784 = acos(%783) /* ty=Tensor[(9, 13, 10), float64] */;
  (%784,)
}

def @func_7571() -> (Tensor[(16, 13, 7), float64],) {
  %785 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
  %786 = %785.1;
  (%786,)
}

def @func_11364() -> (Tensor[(16, 13, 7), float64],) {
  %789 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %787 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %788 = %787.0;
    (%788,)
  };
  %789() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11295(%var_11293: int32, %var_11294: Tensor[(192), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(9, 13, 11), bool], Tensor[(8, 1, 16), bool], int32, Tensor[(1, 128), int32], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], uint32, uint32) {
  %815 = fn (%var_11266: int32, %var_11270: Tensor[(192), float32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(9, 13, 11), bool], Tensor[(8, 1, 16), bool], int32, Tensor[(1, 128), int32], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], uint32, uint32) {
    %790 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %791 = @func_8116() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %792 = cast(%var_11266, dtype="int32") /* ty=int32 */;
    %793 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 128), int32] */, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
    %794 = reshape(%792, newshape=[]) /* ty=int32 */;
    %795 = reshape(%793, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
    %796 = @func_2045(%794, %795) /* ty=(Tensor[(8, 1, 16), bool],) */;
    %797 = cast(%var_11270, dtype="float32") /* ty=Tensor[(192), float32] */;
    %798 = cast(%var_11270, dtype="float32") /* ty=Tensor[(192), float32] */;
    %799 = cast(meta[relay.Constant][30] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
    %800 = reshape(%797, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %801 = reshape(%798, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %802 = reshape(%799, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
    %803 = @func_2229(%800, %801, %802) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
    %804 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
    %805 = @func_6268() /* ty=(uint32,) */;
    %806 = %790.0;
    %807 = %791.0;
    %808 = @func_9893() /* ty=Tensor[(9, 13, 11), bool] */;
    %809 = %796.0;
    %810 = %803.0;
    %811 = %804.0;
    %812 = @func_8169() /* ty=Tensor[(16, 13, 7), float64] */;
    %813 = %805.0;
    %814 = @func_5955() /* ty=uint32 */;
    (%806, %807, %808, %809, %var_11266, meta[relay.Constant][29] /* ty=Tensor[(1, 128), int32] */, %810, %var_11270, meta[relay.Constant][30] /* ty=Tensor[(132), int32] */, %811, %812, %813, %814)
  };
  %815(%var_11293, %var_11294) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(9, 13, 11), bool], Tensor[(8, 1, 16), bool], int32, Tensor[(1, 128), int32], Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64], uint32, uint32) */
}

def @func_6454() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %822 = fn () -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
    %816 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %817 = %816.0;
    %818 = cast(%817, dtype="float32") /* ty=Tensor[(16, 13, 7), float32] */;
    %819 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %820 = atan(%818) /* ty=Tensor[(16, 13, 7), float32] */;
    %821 = %819.1;
    (%820, %821)
  };
  %822() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_11503() -> Tensor[(16, 13, 7), float32] {
  %823 = @func_6453() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %823.0
}

def @func_352(%var_350: uint32, %var_351: Tensor[(5, 1, 8), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) {
  %830 = fn (%var_321: uint32, %var_322: Tensor[(5, 1, 8), uint32]) -> (Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) {
    %824 = cast(%var_321, dtype="bool") /* ty=bool */;
    %825 = cast(%var_322, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
    %826 = cast(%var_321, dtype="uint32") /* ty=uint32 */;
    %827 = cast(%var_322, dtype="uint32") /* ty=Tensor[(5, 1, 8), uint32] */;
    %828 = equal(%824, %825) /* ty=Tensor[(5, 1, 8), bool] */;
    %829 = bitwise_or(%826, %827) /* ty=Tensor[(5, 1, 8), uint32] */;
    (%828, %829)
  };
  %830(%var_350, %var_351) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(5, 1, 8), uint32]) */
}

def @func_8966() -> (uint32,) {
  %831 = @func_6118() /* ty=(uint32, uint32) */;
  %832 = %831.1;
  (%832,)
}

def @func_4919() -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
  %836 = fn () -> (Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) {
    %833 = @func_3413() /* ty=(Tensor[(16, 13, 7), float64], uint32, Tensor[(220), float32], uint32) */;
    %834 = @func_4808() /* ty=Tensor[(16, 13, 7), float32] */;
    %835 = %833.0;
    (%834, %835)
  };
  %836() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_9043(%var_9042: Tensor[(16, 2, 2), uint32]) -> (Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) {
  %844 = fn (%var_9016: Tensor[(16, 2, 2), uint32]) -> (Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) {
    %837 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 2, 2), uint32] */, dtype="bool") /* ty=Tensor[(16, 2, 2), bool] */;
    %838 = shape_of(%var_9016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %839 = cast(%var_9016, dtype="bool") /* ty=Tensor[(16, 2, 2), bool] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %841 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %842 = greater(%839, %840) /* ty=Tensor[(16, 2, 2), bool] */;
    %843 = %841.0;
    (%842, %843)
  };
  %844(%var_9042) /* ty=(Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) */
}

def @func_8484() -> Tensor[(16, 13, 7), float64] {
  %845 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %845.0
}

def @func_4444(%var_4427: Tensor[(13, 13, 14), float32]) -> (Tensor[(13, 13, 14), float32], Tensor[(13, 13, 14), float32]) {
  %846 = cast(%var_4427, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %847 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(13, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %850 = cast(%var_4427, dtype="float32") /* ty=Tensor[(13, 13, 14), float32] */;
  %851 = add(%848, %849) /* ty=Tensor[(13, 13, 14), float32] */;
  %852 = tan(%850) /* ty=Tensor[(13, 13, 14), float32] */;
  (%851, %852)
}

def @func_8486() -> Tensor[(16, 13, 7), float64] {
  @func_8484() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_8741() -> (uint32, Tensor[(9, 13, 11), bool]) {
  %856 = fn () -> (uint32, Tensor[(9, 13, 11), bool]) {
    %853 = @func_7691() /* ty=(uint32,) */;
    %854 = %853.0;
    %855 = @func_6468() /* ty=Tensor[(9, 13, 11), bool] */;
    (%854, %855)
  };
  %856() /* ty=(uint32, Tensor[(9, 13, 11), bool]) */
}

def @func_6685() -> Tensor[(16, 13, 7), float64] {
  %858 = fn () -> Tensor[(16, 13, 7), float64] {
    %857 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %857.0
  };
  %858() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_4346() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %859 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %860 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %861 = %859.0;
  %862 = %860.0;
  (%861, %862)
}

def @func_10092() -> uint32 {
  %863 = @func_8771() /* ty=(uint32,) */;
  %863.0
}

def @func_7208(%var_7200: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float32] {
  %864 = cast(%var_7200, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  cos(%864) /* ty=Tensor[(3, 12, 1), float32] */
}

def @func_1717(%var_1714: Tensor[(3, 2, 9), int16], %var_1715: Tensor[(3, 2, 9), int16], %var_1716: Tensor[(40), uint32]) -> (Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) {
  @func_1712(%var_1714, %var_1715, %var_1716) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */
}

def @func_9430() -> (Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) {
  @func_9428() /* ty=(Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_7069(%var_7051: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(54), bool], Tensor[(128), int32], Tensor[(54), int16]) {
  %865 = cast(meta[relay.Constant][33] /* ty=Tensor[(128), int32] */, dtype="int32") /* ty=Tensor[(128), int32] */;
  %866 = cast(%var_7051, dtype="int16") /* ty=Tensor[(54), int16] */;
  %867 = reshape(%865, newshape=[128]) /* ty=Tensor[(128), int32] */;
  %868 = reshape(%866, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
  %869 = @func_3075(%867, %868) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
  %870 = @func_6248() /* ty=Tensor[(16, 13, 7), float64] */;
  %871 = %869.10;
  (%870, %871, meta[relay.Constant][33] /* ty=Tensor[(128), int32] */, %var_7051)
}

def @func_6248() -> Tensor[(16, 13, 7), float64] {
  %872 = @func_6149() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) */;
  %872.1
}

def @func_5030(%var_5001: Tensor[(40), uint32]) -> (uint32, Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  %873 = cast(%var_5001, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %874 = reshape(%873, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %875 = @func_3377(%874) /* ty=(Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(132, 8), float64]) */;
  %876 = @func_4840() /* ty=(uint32,) */;
  %877 = @func_3480() /* ty=uint32 */;
  %878 = %875.2;
  %879 = %876.0;
  (%877, %878, %var_5001, %879)
}

def @func_5325() -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) {
  @func_5323() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) */
}

def @func_7602() -> uint32 {
  @func_7600() /* ty=uint32 */
}

def @func_10271(%var_10269: Tensor[(273), uint64], %var_10270: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(273), float64]) {
  @func_10267(%var_10269, %var_10270) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(273), float64]) */
}

def @func_3288(%var_3283: Tensor[(16, 13, 7), float64]) -> Tensor[(16, 13, 7), uint64] {
  %880 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %881 = %880.0;
  %882 = cast(%var_3283, dtype="uint64") /* ty=Tensor[(16, 13, 7), uint64] */;
  %883 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%881, dtype="uint64") /* ty=Tensor[(16, 13, 7), uint64] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%884, %885) /* ty=Tensor[(16, 13, 7), uint64] */
}

def @func_10026() -> Tensor[(16, 13, 7), float32] {
  @func_10024() /* ty=Tensor[(16, 13, 7), float32] */
}

def @func_10704(%var_10701: Tensor[(54), int16], %var_10702: Tensor[(20, 2), uint32], %var_10703: Tensor[(9, 13, 11), bool]) -> (Tensor[(11, 2, 7), uint16], Tensor[(54), int16], Tensor[(20, 2), uint32], Tensor[(9, 13, 11), int8]) {
  @func_10699(%var_10701, %var_10702, %var_10703) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(54), int16], Tensor[(20, 2), uint32], Tensor[(9, 13, 11), int8]) */
}

def @func_6150() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) {
  %896 = fn () -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) {
    %886 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
    %887 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
    %888 = cast(meta[relay.Constant][34] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %889 = cast(meta[relay.Constant][34] /* ty=Tensor[(312), uint32] */, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %890 = reshape(%888, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %891 = reshape(%889, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), uint32] */;
    %892 = @func_699(%890, %891) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */;
    %893 = %886.1;
    %894 = %887.0;
    %895 = %892.0;
    (%893, %894, %895, meta[relay.Constant][34] /* ty=Tensor[(312), uint32] */)
  };
  %896() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(12, 2, 13), float32], Tensor[(312), uint32]) */
}

def @func_10614() -> uint32 {
  @func_10612() /* ty=uint32 */
}

def @func_8784(%var_8782: Tensor[(2, 1, 7), int8], %var_8783: Tensor[(2, 13, 7), int8]) -> (Tensor[(2, 13, 7), int8],) {
  %900 = fn (%var_8775: Tensor[(2, 1, 7), int8], %var_8776: Tensor[(2, 13, 7), int8]) -> (Tensor[(2, 13, 7), int8],) {
    %897 = cast(%var_8775, dtype="int8") /* ty=Tensor[(2, 1, 7), int8] */;
    %898 = cast(%var_8776, dtype="int8") /* ty=Tensor[(2, 13, 7), int8] */;
    %899 = right_shift(%897, %898) /* ty=Tensor[(2, 13, 7), int8] */;
    (%899,)
  };
  %900(%var_8782, %var_8783) /* ty=(Tensor[(2, 13, 7), int8],) */
}

def @func_9560() -> Tensor[(16, 13, 7), float64] {
  %902 = fn () -> Tensor[(16, 13, 7), float64] {
    %901 = @func_4761() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %901.0
  };
  %902() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_699(%var_673: Tensor[(12, 2, 13), uint32], %var_674: Tensor[(12, 2, 13), uint32]) -> (Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) {
  %903 = cast(%var_674, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %904 = shape_of(%var_673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%var_673, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %907 = less(%905, %906) /* ty=Tensor[(12, 2, 13), bool] */;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %909 = cast(meta[relay.Constant][35] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %910 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 4), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4), uint32] */;
  %911 = reshape(%909, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %912 = reshape(%910, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %913 = @func_375(%911, %912) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %914 = log2(%908) /* ty=Tensor[(12, 2, 13), float32] */;
  %915 = %913.4;
  (%914, %915, meta[relay.Constant][35] /* ty=Tensor[(154), float64] */, meta[relay.Constant][36] /* ty=Tensor[(10, 4), uint32] */)
}

def @func_4972() -> (uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) {
  %926 = fn () -> (uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) {
    %916 = @func_3741() /* ty=(uint32,) */;
    %917 = cast(meta[relay.Constant][37] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
    %918 = cast(meta[relay.Constant][37] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
    %919 = cast(meta[relay.Constant][38] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %920 = reshape(%917, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
    %921 = reshape(%918, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
    %922 = reshape(%919, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %923 = @func_1712(%920, %921, %922) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
    %924 = %916.0;
    %925 = %923.3;
    (%924, %925, meta[relay.Constant][37] /* ty=Tensor[(54), int16] */, meta[relay.Constant][38] /* ty=Tensor[(40), uint32] */)
  };
  %926() /* ty=(uint32, Tensor[(40), uint32], Tensor[(54), int16], Tensor[(40), uint32]) */
}

def @func_12110() -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
  %927 = @func_9428() /* ty=(Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) */;
  %928 = @func_5578() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %929 = %927.0;
  %930 = %928.1;
  (%929, %930)
}

def @func_9685() -> (Tensor[(16, 13, 7), float64],) {
  @func_9683() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11861() -> uint32 {
  %931 = @func_11031() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64], uint32) */;
  %931.1
}

def @func_10310() -> Tensor[(16, 13, 7), float64] {
  %932 = @func_4346() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
  %932.1
}

def @func_6956() -> (uint32, Tensor[(12, 2, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
  %933 = @func_3624() /* ty=(uint32,) */;
  %934 = cast(meta[relay.Constant][39] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %935 = cast(meta[relay.Constant][39] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %936 = cast(meta[relay.Constant][40] /* ty=Tensor[(132), int32] */, dtype="int32") /* ty=Tensor[(132), int32] */;
  %937 = reshape(%934, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %938 = reshape(%935, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
  %939 = reshape(%936, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
  %940 = @func_2229(%937, %938, %939) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
  %941 = cast(meta[relay.Constant][41] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %942 = reshape(%941, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %943 = @func_4070(%942) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
  %944 = %933.0;
  %945 = %940.0;
  %946 = %943.0;
  (%944, %945, meta[relay.Constant][39] /* ty=Tensor[(192), float32] */, meta[relay.Constant][40] /* ty=Tensor[(132), int32] */, %946, meta[relay.Constant][41] /* ty=Tensor[(1092), float64] */)
}

def @func_7573() -> (Tensor[(16, 13, 7), float64],) {
  @func_7571() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11863() -> uint32 {
  @func_11861() /* ty=uint32 */
}

def @func_11566() -> (uint32, Tensor[(16, 13, 7), float64]) {
  @func_11564() /* ty=(uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_7157() -> (uint32, uint32, Tensor[(16, 13, 7), float64]) {
  @func_7155() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64]) */
}

def @func_7036() -> (Tensor[(16, 13, 7), float64],) {
  %948 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %947 = @func_6684() /* ty=Tensor[(16, 13, 7), float64] */;
    (%947,)
  };
  %948() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11331() -> (Tensor[(16, 13, 7), float64],) {
  %949 = @func_4918() /* ty=(Tensor[(16, 13, 7), float32], Tensor[(16, 13, 7), float64]) */;
  %950 = %949.1;
  (%950,)
}

def @func_6015(%var_6013: Tensor[(594), int32], %var_6014: Tensor[(336), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
  %963 = fn (%var_6004: Tensor[(594), int32], %var_6005: Tensor[(336), float64]) -> (Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) {
    %951 = @func_3942() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %952 = %951.0;
    %953 = cast(%952, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
    %954 = cast(%var_6004, dtype="int32") /* ty=Tensor[(594), int32] */;
    %955 = cast(%var_6004, dtype="int32") /* ty=Tensor[(594), int32] */;
    %956 = cast(%var_6005, dtype="float64") /* ty=Tensor[(336), float64] */;
    %957 = reshape(%954, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %958 = reshape(%955, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int32] */;
    %959 = reshape(%956, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %960 = @func_1871(%957, %958, %959) /* ty=(Tensor[(11, 6, 9), int32], Tensor[(4, 12, 7), int8], Tensor[(336), float64]) */;
    %961 = cos(%953) /* ty=Tensor[(16, 13, 7), float64] */;
    %962 = %960.2;
    (%961, %962, %var_6004, %var_6005)
  };
  %963(%var_6013, %var_6014) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(336), float64], Tensor[(594), int32], Tensor[(336), float64]) */
}

def @func_1667(%var_1656: Tensor[(4, 12, 7), float64]) -> (Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) {
  %964 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 7), float64] */;
  %965 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 7), float64] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %968 = cast(%var_1656, dtype="int8") /* ty=Tensor[(4, 12, 7), int8] */;
  %969 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 7), float64] */, dtype="int8") /* ty=Tensor[(4, 12, 7), int8] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %972 = floor_divide(%966, %967) /* ty=Tensor[(4, 12, 7), float64] */;
  %973 = minimum(%970, %971) /* ty=Tensor[(4, 12, 7), int8] */;
  (%972, %973)
}

def @func_8170() -> Tensor[(16, 13, 7), float64] {
  %974 = fn () -> Tensor[(16, 13, 7), float64] {
    @func_5405() /* ty=Tensor[(16, 13, 7), float64] */
  };
  %974() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_6393(%var_6391: Tensor[(9, 13, 11), bool]) -> (Tensor[(9, 13, 11), uint64],) {
  @func_6390(%var_6391) /* ty=(Tensor[(9, 13, 11), uint64],) */
}

def @func_8772() -> (uint32,) {
  %977 = fn () -> (uint32,) {
    %975 = @func_4840() /* ty=(uint32,) */;
    %976 = %975.0;
    (%976,)
  };
  %977() /* ty=(uint32,) */
}

def @func_8451() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  @func_8449() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_11168() -> (Tensor[(9, 13, 11), bool], uint32) {
  %978 = @func_6034() /* ty=(Tensor[(9, 13, 11), bool],) */;
  %979 = @func_6430() /* ty=(uint32,) */;
  %980 = %978.0;
  %981 = %979.0;
  (%980, %981)
}

def @func_6250() -> Tensor[(16, 13, 7), float64] {
  @func_6248() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_9645() -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
  %986 = fn () -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
    %982 = @func_5323() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(40), uint32], Tensor[(40), uint32], uint32) */;
    %983 = @func_8265() /* ty=(Tensor[(16, 13, 7), float32], uint32, Tensor[(16, 13, 7), float64]) */;
    %984 = %982.1;
    %985 = %983.2;
    (%984, %985)
  };
  %986() /* ty=(Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) */
}

def @func_3743() -> (uint32,) {
  @func_3741() /* ty=(uint32,) */
}

def @func_9061() -> uint32 {
  @func_7249() /* ty=uint32 */
}

def @func_10733() -> (Tensor[(16, 13, 7), float64],) {
  @func_10731() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_1712(%var_1687: Tensor[(3, 2, 9), int16], %var_1688: Tensor[(3, 2, 9), int16], %var_1695: Tensor[(40), uint32]) -> (Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) {
  %987 = cast(%var_1688, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %988 = shape_of(%var_1687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %989 = cast(%var_1687, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %991 = cast(meta[relay.Constant][44] /* ty=Tensor[(22, 7), float64] */, dtype="float64") /* ty=Tensor[(22, 7), float64] */;
  %992 = cast(%var_1695, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %993 = reshape(%991, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %994 = reshape(%992, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %995 = @func_375(%993, %994) /* ty=(Tensor[(11, 2, 7), uint16], Tensor[(5, 1, 8), uint32], uint32, Tensor[(40), uint32], Tensor[(5, 1, 8), bool]) */;
  %996 = equal(%989, %990) /* ty=Tensor[(3, 2, 9), bool] */;
  %997 = %995.0;
  (%996, %997, meta[relay.Constant][44] /* ty=Tensor[(22, 7), float64] */, %var_1695)
}

def @func_8222(%var_8218: Tensor[(11, 12, 1), float32]) -> Tensor[(11, 12, 1), float32] {
  %998 = cast(%var_8218, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  sinh(%998) /* ty=Tensor[(11, 12, 1), float32] */
}

def @func_11031() -> (uint32, uint32, Tensor[(16, 13, 7), float64], uint32) {
  %999 = @func_10648() /* ty=(uint32,) */;
  %1000 = @func_7287() /* ty=uint32 */;
  %1001 = %999.0;
  %1002 = @func_8273() /* ty=Tensor[(16, 13, 7), float64] */;
  %1003 = @func_5955() /* ty=uint32 */;
  (%1000, %1001, %1002, %1003)
}

def @func_1819(%var_1817: Tensor[(11, 4, 3), int32], %var_1818: Tensor[(11, 4, 3), int32]) -> (Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) {
  @func_1815(%var_1817, %var_1818) /* ty=(Tensor[(11, 4, 3), int64], Tensor[(11, 4, 3), float32]) */
}

def @func_6791(%var_6785: Tensor[(11, 13, 1), int8], %var_6786: Tensor[(11, 13, 9), int8], %var_6787: Tensor[(312), uint32], %var_6788: Tensor[(1456), float64], %var_6789: Tensor[(1, 54), int16], %var_6790: Tensor[(1092), float64]) -> (Tensor[(11, 13, 9), int8], Tensor[(9, 2, 11), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(312), uint32], Tensor[(1456), float64], Tensor[(1, 54), int16], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
  %1025 = fn (%var_6752: Tensor[(11, 13, 1), int8], %var_6753: Tensor[(11, 13, 9), int8], %var_6763: Tensor[(312), uint32], %var_6777: Tensor[(1456), float64], %var_6778: Tensor[(1, 54), int16], %var_6781: Tensor[(1092), float64]) -> (Tensor[(11, 13, 9), int8], Tensor[(9, 2, 11), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(312), uint32], Tensor[(1456), float64], Tensor[(1, 54), int16], Tensor[(132, 8), float32], Tensor[(1092), float64]) {
    %1004 = cast(%var_6752, dtype="int8") /* ty=Tensor[(11, 13, 1), int8] */;
    %1005 = cast(%var_6753, dtype="int8") /* ty=Tensor[(11, 13, 9), int8] */;
    %1006 = cast(meta[relay.Constant][45] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %1007 = cast(%var_6763, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %1008 = reshape(%1006, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float32] */;
    %1009 = reshape(%1007, newshape=[312]) /* ty=Tensor[(312), uint32] */;
    %1010 = @func_3532(%1008, %1009) /* ty=(Tensor[(154), float64], Tensor[(312), uint32], Tensor[(9, 2, 11), float64], Tensor[(16, 13, 7), float64], Tensor[(4, 12, 7), float64], Tensor[(336), float64]) */;
    %1011 = cast(%var_6777, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %1012 = cast(%var_6763, dtype="uint32") /* ty=Tensor[(312), uint32] */;
    %1013 = cast(%var_6778, dtype="int16") /* ty=Tensor[(1, 54), int16] */;
    %1014 = reshape(%1011, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), float64] */;
    %1015 = reshape(%1012, newshape=[312]) /* ty=Tensor[(312), uint32] */;
    %1016 = reshape(%1013, newshape=[54]) /* ty=Tensor[(54), int16] */;
    %1017 = @func_3715(%1014, %1015, %1016) /* ty=(Tensor[(336), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], Tensor[(128, 1), int32], Tensor[(54), int16]) */;
    %1018 = cast(%var_6781, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %1019 = reshape(%1018, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
    %1020 = @func_4070(%1019) /* ty=(Tensor[(132, 8), float32], Tensor[(12, 7, 13), int8], Tensor[(1092), float64]) */;
    %1021 = multiply(%1004, %1005) /* ty=Tensor[(11, 13, 9), int8] */;
    %1022 = %1010.2;
    %1023 = %1017.2;
    %1024 = %1020.0;
    (%1021, %1022, meta[relay.Constant][45] /* ty=Tensor[(198), float32] */, %var_6763, %1023, %var_6777, %var_6778, %1024, %var_6781)
  };
  %1025(%var_6785, %var_6786, %var_6787, %var_6788, %var_6789, %var_6790) /* ty=(Tensor[(11, 13, 9), int8], Tensor[(9, 2, 11), float64], Tensor[(198), float32], Tensor[(312), uint32], Tensor[(312), uint32], Tensor[(1456), float64], Tensor[(1, 54), int16], Tensor[(132, 8), float32], Tensor[(1092), float64]) */
}

def @func_12008() -> (Tensor[(16, 13, 7), float64],) {
  %1028 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %1026 = @func_11031() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64], uint32) */;
    %1027 = %1026.2;
    (%1027,)
  };
  %1028() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_6371() -> (uint32, uint32) {
  @func_6369() /* ty=(uint32, uint32) */
}

def @func_5634() -> Tensor[(16, 13, 7), float64] {
  %1030 = fn () -> Tensor[(16, 13, 7), float64] {
    %1029 = @func_4503() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %1029.0
  };
  %1030() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_3555() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */
}

def @func_8653(%var_8651: Tensor[(5, 15, 10), uint8], %var_8652: Tensor[(5, 15, 10), uint8]) -> (Tensor[(5, 15, 10), uint8],) {
  @func_8649(%var_8651, %var_8652) /* ty=(Tensor[(5, 15, 10), uint8],) */
}

def @func_3943() -> (Tensor[(16, 13, 7), float64],) {
  %1033 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %1031 = @func_3153() /* ty=(Tensor[(16, 13, 7), float64],) */;
    %1032 = %1031.0;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_6896() -> (Tensor[(16, 13, 7), float64],) {
  @func_6894() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_10267(%var_10247: Tensor[(273), uint64], %var_10248: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(154), float64], Tensor[(40), uint32], Tensor[(273), float64]) {
  %1034 = cast(%var_10247, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %1035 = cast(%var_10247, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %1036 = cast(%var_10248, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %1037 = reshape(%1034, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %1038 = reshape(%1035, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), uint64] */;
  %1039 = reshape(%1036, newshape=[20, 2]) /* ty=Tensor[(20, 2), uint32] */;
  %1040 = @func_1224(%1037, %1038, %1039) /* ty=(Tensor[(13, 7, 3), float32], uint32, Tensor[(20, 2), uint32], Tensor[(154), float64], Tensor[(312), uint32], Tensor[(5, 1, 8), uint32], Tensor[(5, 1, 8), float64], Tensor[(13, 7, 3), float64], uint32, Tensor[(5, 1, 8), bool]) */;
  %1041 = cast(%var_10247, dtype="float32") /* ty=Tensor[(273), float32] */;
  %1042 = erf(%1041) /* ty=Tensor[(273), float32] */;
  %1043 = cast(%1042, dtype="float64") /* ty=Tensor[(273), float64] */;
  %1044 = @func_5633() /* ty=Tensor[(16, 13, 7), float64] */;
  %1045 = %1040.3;
  %1046 = cos(%1043) /* ty=Tensor[(273), float64] */;
  (%1044, %1045, %var_10248, %1046)
}

def @func_4097() -> (Tensor[(16, 13, 7), float64],) {
  %1049 = fn () -> (Tensor[(16, 13, 7), float64],) {
    %1047 = @func_3553() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) */;
    %1048 = %1047.1;
    (%1048,)
  };
  %1049() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_11413() -> uint32 {
  @func_11411() /* ty=uint32 */
}

def @func_11785() -> Tensor[(16, 13, 7), float64] {
  %1050 = fn () -> Tensor[(16, 13, 7), float64] {
    @func_10310() /* ty=Tensor[(16, 13, 7), float64] */
  };
  %1050() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_10600() -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32]) {
  %1054 = fn () -> (Tensor[(16, 13, 7), float64], Tensor[(40), uint32]) {
    %1051 = @func_9428() /* ty=(Tensor[(40), uint32], uint32, Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(16, 13, 7), float64]) */;
    %1052 = @func_10310() /* ty=Tensor[(16, 13, 7), float64] */;
    %1053 = %1051.0;
    (%1052, %1053)
  };
  %1054() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(40), uint32]) */
}

def @func_9939(%var_9937: Tensor[(2340), float64]) -> (uint32, Tensor[(132, 8), float32], Tensor[(16, 4), uint32], Tensor[(2340), float64], Tensor[(64), uint32], Tensor[(13, 16, 15), float32], Tensor[(16, 13, 7), float64]) {
  @func_9936(%var_9937) /* ty=(uint32, Tensor[(132, 8), float32], Tensor[(16, 4), uint32], Tensor[(2340), float64], Tensor[(64), uint32], Tensor[(13, 16, 15), float32], Tensor[(16, 13, 7), float64]) */
}

def @func_1670(%var_1668: Tensor[(4, 12, 7), float64]) -> (Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) {
  @func_1667(%var_1668) /* ty=(Tensor[(4, 12, 7), float64], Tensor[(4, 12, 7), int8]) */
}

def @func_3741() -> (uint32,) {
  %1055 = @func_3480() /* ty=uint32 */;
  (%1055,)
}

def @func_9732() -> Tensor[(16, 13, 7), float64] {
  %1057 = fn () -> Tensor[(16, 13, 7), float64] {
    %1056 = @func_5803() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32) */;
    %1056.0
  };
  %1057() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_12283(%var_12259: Tensor[(9, 13, 8), float64]) -> (Tensor[(9, 13, 8), float32], uint32) {
  %1058 = cast(%var_12259, dtype="float64") /* ty=Tensor[(9, 13, 8), float64] */;
  %1059 = cosh(%1058) /* ty=Tensor[(9, 13, 8), float64] */;
  %1060 = cast(%1059, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %1061 = @func_7851() /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64], uint32, uint32, uint32, Tensor[(16, 13, 7), float64]) */;
  %1062 = acos(%1060) /* ty=Tensor[(9, 13, 8), float32] */;
  %1063 = %1061.2;
  (%1062, %1063)
}

def @func_6501(%var_6499: Tensor[(48, 4), float32], %var_6500: Tensor[(132), int32]) -> (uint32, Tensor[(24, 8), float32], Tensor[(48, 4), float32], Tensor[(132), int32], Tensor[(40), uint32]) {
  %1076 = fn (%var_6493: Tensor[(48, 4), float32], %var_6494: Tensor[(132), int32]) -> (uint32, Tensor[(24, 8), float32], Tensor[(48, 4), float32], Tensor[(132), int32], Tensor[(40), uint32]) {
    %1064 = @func_6176() /* ty=(uint32,) */;
    %1065 = cast(%var_6493, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %1066 = cast(%var_6494, dtype="int32") /* ty=Tensor[(132), int32] */;
    %1067 = %1064.0;
    %1068 = cast(%1067, dtype="uint32") /* ty=uint32 */;
    %1069 = cast(meta[relay.Constant][46] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %1070 = reshape(%1065, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
    %1071 = reshape(%1066, newshape=[132]) /* ty=Tensor[(132), int32] */;
    %1072 = reshape(%1068, newshape=[]) /* ty=uint32 */;
    %1073 = reshape(%1069, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %1074 = @func_4599(%1070, %1071, %1072, %1073) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) */;
    %1075 = %1074.2;
    (%1067, %1075, %var_6493, %var_6494, meta[relay.Constant][46] /* ty=Tensor[(40), uint32] */)
  };
  %1076(%var_6499, %var_6500) /* ty=(uint32, Tensor[(24, 8), float32], Tensor[(48, 4), float32], Tensor[(132), int32], Tensor[(40), uint32]) */
}

def @func_9799(%var_9797: Tensor[(12, 13, 15), float64], %var_9798: Tensor[(16, 4), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) {
  %1097 = fn (%var_9751: Tensor[(12, 13, 15), float64], %var_9789: Tensor[(16, 4), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) {
    %1077 = cast(%var_9789, dtype="uint32") /* ty=Tensor[(16, 4), uint32] */;
    %1078 = reshape(%1077, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), uint32] */;
    %1079 = @func_9041(%1078) /* ty=(Tensor[(16, 2, 2), bool], Tensor[(16, 13, 7), float64]) */;
    %1080 = cast(%var_9751, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
    %1081 = atan(%1080) /* ty=Tensor[(12, 13, 15), float64] */;
    %1082 = cast(%1081, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
    %1083 = erf(%1082) /* ty=Tensor[(12, 13, 15), float64] */;
    %1084 = cast(%1083, dtype="int32") /* ty=Tensor[(12, 13, 15), int32] */;
    %1085 = shape_of(%var_9751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1086 = cast(%var_9751, dtype="int32") /* ty=Tensor[(12, 13, 15), int32] */;
    %1087 = dyn.reshape(%1084, %1085, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1088 = bitwise_xor(%1086, %1087) /* ty=Tensor[(12, 13, 15), int32] */;
    %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
    %1090 = cast(%var_9751, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
    %1091 = shape_of(%1088, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1092 = cast(%1088, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
    %1093 = dyn.reshape(%1090, %1091, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1094 = %1079.1;
    %1095 = cos(%1089) /* ty=Tensor[(12, 13, 15), float64] */;
    %1096 = mod(%1092, %1093) /* ty=Tensor[(12, 13, 15), float32] */;
    (%1094, %var_9789, %1095, %1096)
  };
  %1097(%var_9797, %var_9798) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(16, 4), uint32], Tensor[(12, 13, 15), float64], Tensor[(12, 13, 15), float32]) */
}

def @func_5882() -> (Tensor[(16, 13, 7), float32],) {
  @func_5880() /* ty=(Tensor[(16, 13, 7), float32],) */
}

def @func_3553() -> (Tensor[(16, 13, 7), float64], Tensor[(16, 13, 7), float64]) {
  %1098 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1099 = @func_3113() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1100 = %1098.0;
  %1101 = %1099.0;
  (%1100, %1101)
}

def @func_703(%var_701: Tensor[(12, 2, 13), uint32], %var_702: Tensor[(12, 2, 13), uint32]) -> (Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) {
  @func_699(%var_701, %var_702) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(5, 1, 8), bool], Tensor[(154), float64], Tensor[(10, 4), uint32]) */
}

def @func_10312() -> Tensor[(16, 13, 7), float64] {
  @func_10310() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_10575(%var_10562: Tensor[(1092), float64]) -> (uint32, Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(16, 13, 7), float32]) {
  %1102 = cast(%var_10562, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1103 = reshape(%1102, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1104 = @func_6306(%1103) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %1105 = @func_10466() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %1106 = @func_4155() /* ty=uint32 */;
  %1107 = @func_8169() /* ty=Tensor[(16, 13, 7), float64] */;
  %1108 = %1104.2;
  %1109 = %1105.0;
  (%1106, %1107, %1108, %var_10562, %1109)
}

def @func_12112() -> (Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) {
  @func_12110() /* ty=(Tensor[(40), uint32], Tensor[(16, 13, 7), float64]) */
}

def @func_10578(%var_10576: Tensor[(1092), float64]) -> (uint32, Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(16, 13, 7), float32]) {
  @func_10575(%var_10576) /* ty=(uint32, Tensor[(16, 13, 7), float64], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(16, 13, 7), float32]) */
}

def @func_12227(%var_12204: Tensor[(54), int16]) -> (uint32, Tensor[(32, 4), int32], Tensor[(54), int16], Tensor[(3, 18), int32], Tensor[(3, 18), float32]) {
  %1110 = cast(meta[relay.Constant][47] /* ty=Tensor[(32, 4), int32] */, dtype="int32") /* ty=Tensor[(32, 4), int32] */;
  %1111 = cast(%var_12204, dtype="int16") /* ty=Tensor[(54), int16] */;
  %1112 = reshape(%1110, newshape=[128]) /* ty=Tensor[(128), int32] */;
  %1113 = reshape(%1111, newshape=[3, 18]) /* ty=Tensor[(3, 18), int16] */;
  %1114 = @func_3075(%1112, %1113) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(8, 1, 16), bool], int32, Tensor[(128), int32], Tensor[(3, 2, 9), bool], Tensor[(3, 18), int16], Tensor[(40), uint32], Tensor[(5, 1, 8), bool], Tensor[(13, 7, 3), float64], Tensor[(273), float64], Tensor[(54), bool], Tensor[(336), float64], Tensor[(594), int32], Tensor[(4, 84), float64], Tensor[(11, 2, 7), bool]) */;
  %1115 = %1114.5;
  %1116 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 18), int16] */, dtype="int32") /* ty=Tensor[(3, 18), int32] */;
  %1117 = shape_of(%1115, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1118 = cast(%1115, dtype="int32") /* ty=Tensor[(3, 18), int32] */;
  %1119 = dyn.reshape(%1116, %1117, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1120 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 18), int16] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %1121 = @func_9061() /* ty=uint32 */;
  %1122 = add(%1118, %1119) /* ty=Tensor[(3, 18), int32] */;
  %1123 = sinh(%1120) /* ty=Tensor[(3, 18), float32] */;
  (%1121, meta[relay.Constant][47] /* ty=Tensor[(32, 4), int32] */, %var_12204, %1122, %1123)
}

def @func_11333() -> (Tensor[(16, 13, 7), float64],) {
  @func_11331() /* ty=(Tensor[(16, 13, 7), float64],) */
}

def @func_4604(%var_4600: Tensor[(24, 8), float32], %var_4601: Tensor[(132), int32], %var_4602: uint32, %var_4603: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) {
  %1151 = fn (%var_4568: Tensor[(24, 8), float32], %var_4569: Tensor[(132), int32], %var_4573: uint32, %var_4574: Tensor[(40), uint32]) -> (Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) {
    %1124 = @func_4202() /* ty=(Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) */;
    %1125 = cast(%var_4568, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
    %1126 = cast(%var_4568, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
    %1127 = cast(%var_4569, dtype="int32") /* ty=Tensor[(132), int32] */;
    %1128 = reshape(%1125, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %1129 = reshape(%1126, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float32] */;
    %1130 = reshape(%1127, newshape=[132, 1]) /* ty=Tensor[(132, 1), int32] */;
    %1131 = @func_2229(%1128, %1129, %1130) /* ty=(Tensor[(12, 2, 8), float32], Tensor[(11, 4, 3), float32], Tensor[(132, 8), float32]) */;
    %1132 = cast(%var_4573, dtype="uint32") /* ty=uint32 */;
    %1133 = cast(%var_4574, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %1134 = cast(meta[relay.Constant][49] /* ty=Tensor[(54), int16] */, dtype="int16") /* ty=Tensor[(54), int16] */;
    %1135 = reshape(%1132, newshape=[]) /* ty=uint32 */;
    %1136 = reshape(%1133, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %1137 = reshape(%1134, newshape=[54]) /* ty=Tensor[(54), int16] */;
    %1138 = @func_2969(%1135, %1136, %1137) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
    %1139 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %1140 = %1139.4;
    %1141 = cast(%1140, dtype="float64") /* ty=Tensor[(132, 8), float64] */;
    %1142 = atan(%1141) /* ty=Tensor[(132, 8), float64] */;
    %1143 = cast(%1142, dtype="bool") /* ty=Tensor[(132, 8), bool] */;
    %1144 = cast(%var_4573, dtype="bool") /* ty=bool */;
    %1145 = @func_3189() /* ty=(Tensor[(13, 16, 15), float32], Tensor[(132, 8), float32], Tensor[(192), float32], Tensor[(132), int32], Tensor[(132, 8), float32]) */;
    %1146 = %1124.1;
    %1147 = %1131.0;
    %1148 = %1138.3;
    %1149 = equal(%1143, %1144) /* ty=Tensor[(132, 8), bool] */;
    %1150 = %1145.2;
    (%1146, %1147, %var_4568, %var_4569, %1148, %var_4574, meta[relay.Constant][49] /* ty=Tensor[(54), int16] */, %1149, %1150)
  };
  %1151(%var_4600, %var_4601, %var_4602, %var_4603) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(12, 2, 8), float32], Tensor[(24, 8), float32], Tensor[(132), int32], Tensor[(11, 2, 7), bool], Tensor[(40), uint32], Tensor[(54), int16], Tensor[(132, 8), bool], Tensor[(192), float32]) */
}

def @func_7072(%var_7070: Tensor[(54), int16]) -> (Tensor[(16, 13, 7), float64], Tensor[(54), bool], Tensor[(128), int32], Tensor[(54), int16]) {
  @func_7069(%var_7070) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(54), bool], Tensor[(128), int32], Tensor[(54), int16]) */
}

def @func_4202() -> (Tensor[(16, 13, 7), bool], Tensor[(16, 13, 7), float64]) {
  %1152 = @func_3655() /* ty=(Tensor[(16, 13, 7), float64],) */;
  %1153 = %1152.0;
  %1154 = cast(meta[relay.Constant][50] /* ty=Tensor[(16, 13, 7), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %1155 = shape_of(%1153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1156 = cast(%1153, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %1157 = dyn.reshape(%1154, %1155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1158 = cast(%1153, dtype="float64") /* ty=Tensor[(16, 13, 7), float64] */;
  %1159 = logical_and(%1156, %1157) /* ty=Tensor[(16, 13, 7), bool] */;
  %1160 = erf(%1158) /* ty=Tensor[(16, 13, 7), float64] */;
  (%1159, %1160)
}

def @func_5407() -> Tensor[(16, 13, 7), float64] {
  @func_5405() /* ty=Tensor[(16, 13, 7), float64] */
}

def @func_11033() -> (uint32, uint32, Tensor[(16, 13, 7), float64], uint32) {
  @func_11031() /* ty=(uint32, uint32, Tensor[(16, 13, 7), float64], uint32) */
}

def @func_7427() -> (Tensor[(16, 13, 7), float32],) {
  %1161 = @func_5880() /* ty=(Tensor[(16, 13, 7), float32],) */;
  %1162 = %1161.0;
  (%1162,)
}

def @func_3267(%var_3265: Tensor[(4, 5, 11), float32], %var_3266: uint32) -> (Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) {
  %1183 = fn (%var_3191: Tensor[(4, 5, 11), float32], %var_3210: uint32) -> (Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) {
    %1163 = cast(%var_3191, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
    %1164 = cosh(%1163) /* ty=Tensor[(4, 5, 11), float32] */;
    %1165 = cast(%1164, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
    %1166 = cast(%var_3210, dtype="uint32") /* ty=uint32 */;
    %1167 = cast(meta[relay.Constant][51] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %1168 = cast(meta[relay.Constant][52] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
    %1169 = reshape(%1166, newshape=[]) /* ty=uint32 */;
    %1170 = reshape(%1167, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %1171 = reshape(%1168, newshape=[54]) /* ty=Tensor[(54), int16] */;
    %1172 = @func_2969(%1169, %1170, %1171) /* ty=(Tensor[(16, 13, 7), float64], Tensor[(5, 1, 8), bool], Tensor[(40), uint32], Tensor[(11, 2, 7), bool], Tensor[(54), bool]) */;
    %1173 = cast(meta[relay.Constant][52] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
    %1174 = cast(meta[relay.Constant][52] /* ty=Tensor[(54, 1), int16] */, dtype="int16") /* ty=Tensor[(54, 1), int16] */;
    %1175 = %1172.2;
    %1176 = cast(%1175, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %1177 = reshape(%1173, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
    %1178 = reshape(%1174, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), int16] */;
    %1179 = reshape(%1176, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %1180 = @func_1712(%1177, %1178, %1179) /* ty=(Tensor[(3, 2, 9), bool], Tensor[(11, 2, 7), uint16], Tensor[(22, 7), float64], Tensor[(40), uint32]) */;
    %1181 = sigmoid(%1165) /* ty=Tensor[(4, 5, 11), float64] */;
    %1182 = %1180.2;
    (%1181, %1175, %var_3210, meta[relay.Constant][51] /* ty=Tensor[(40), uint32] */, meta[relay.Constant][52] /* ty=Tensor[(54, 1), int16] */, %1182)
  };
  %1183(%var_3265, %var_3266) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(40), uint32], uint32, Tensor[(40), uint32], Tensor[(54, 1), int16], Tensor[(22, 7), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen527/build/output.py:3591: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen527/build/output.py", line 3596, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_acos_kernel0(double* __restrict__ T_acos, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1170) {
    T_acos[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = acos(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

