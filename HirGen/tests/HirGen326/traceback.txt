==========mod==========
#[version = "0.0.5"]
def @func_4605(%var_4563: Tensor[(320, 2), float64], %var_4587: Tensor[(12, 100), float64], %var_4588: Tensor[(240), float64]) -> (Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(10, 4, 16), float64], Tensor[(320, 2), float64], Tensor[(13, 9, ?), int32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(819), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %1 = reshape(%0, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %2 = @func_93(%1) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %3 = cast(%var_4563, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %4 = reshape(%3, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
  %5 = @func_3533(%4) /* ty=(Tensor[(10, 4, 16), float64],) */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
  %7 = exp(%6) /* ty=Tensor[(13, 9, 1), float32] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(13, 9, 1), float64] */;
  %9 = log2(%8) /* ty=Tensor[(13, 9, 1), float64] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
  %11 = log(%10) /* ty=Tensor[(13, 9, 1), float32] */;
  %12 = cast(%7, dtype="int32") /* ty=Tensor[(13, 9, 1), int32] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="int32") /* ty=Tensor[(13, 9, 1), int32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %16 = cast(%var_4587, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %17 = cast(%var_4588, dtype="float64") /* ty=Tensor[(240), float64] */;
  %18 = reshape(%16, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %19 = reshape(%17, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %20 = @func_2211(%18, %19) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(819), float32] */, dtype="float32") /* ty=Tensor[(819), float32] */;
  %22 = reshape(%21, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float32] */;
  %23 = @func_4410(%22) /* ty=(Tensor[(13, 7, 9), float32],) */;
  %24 = %2.0;
  %25 = %5.0;
  %26 = minimum(%14, %15) /* ty=Tensor[(13, 9, ?), int32] */;
  %27 = %20.0;
  %28 = %23.0;
  (%24, meta[relay.Constant][0] /* ty=Tensor[(1248), bool] */, %25, %var_4563, %26, %27, %var_4587, %var_4588, %28, meta[relay.Constant][2] /* ty=Tensor[(819), float32] */)
}

def @func_7635(%var_7633: Tensor[(384, 8), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) {
  %29 = cast(%var_7633, dtype="float32") /* ty=Tensor[(384, 8), float32] */;
  %30 = reshape(%29, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %31 = @func_6372(%30) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %32 = @func_6746() /* ty=Tensor[(16, 6, 14), float32] */;
  %33 = %31.1;
  (%32, %33, %var_7633)
}

def @func_5304(%var_5281: float32, %var_5282: Tensor[(16, 6, 9), float32], %var_5290: Tensor[(1248), bool]) -> (Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) {
  %34 = cast(%var_5281, dtype="float32") /* ty=float32 */;
  %35 = cast(%var_5282, dtype="float32") /* ty=Tensor[(16, 6, 9), float32] */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(33, 1), float64] */, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
  %37 = cast(%var_5290, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %39 = reshape(%36, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
  %40 = reshape(%37, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %41 = reshape(%38, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %42 = @func_962(%39, %40, %41) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
  %43 = power(%34, %35) /* ty=Tensor[(16, 6, 9), float32] */;
  %44 = %42.4;
  (%43, %44, meta[relay.Constant][3] /* ty=Tensor[(33, 1), float64] */, %var_5290, meta[relay.Constant][4] /* ty=Tensor[(70, 2), float32] */)
}

def @func_7685(%var_7678: Tensor[(12, 13, 11), float32]) -> Tensor[(12, 13, 11), float32] {
  %45 = cast(%var_7678, dtype="float32") /* ty=Tensor[(12, 13, 11), float32] */;
  rsqrt(%45) /* ty=Tensor[(12, 13, 11), float32] */
}

def @func_6612() -> Tensor[(16, 6, 14), bool] {
  %46 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %46.0
}

def @func_1863(%var_1845: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float32] {
  %47 = cast(%var_1845, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  cos(%47) /* ty=Tensor[(9, 5, 6), float32] */
}

def @func_5829(%var_5816: Tensor[(1, 14, 10), float32], %var_5825: float32, %var_5827: Tensor[(1248), bool]) -> (Tensor[(1, 14, 10), float32], Tensor[(140, 1), float32], float32, Tensor[(12, 72), float32], Tensor[(1248), bool]) {
  %48 = cast(%var_5816, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %49 = cast(%var_5825, dtype="float32") /* ty=float32 */;
  %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 72), float32] */, dtype="float32") /* ty=Tensor[(12, 72), float32] */;
  %51 = cast(%var_5827, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %52 = reshape(%49, newshape=[]) /* ty=float32 */;
  %53 = reshape(%50, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %54 = reshape(%51, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %55 = @func_5304(%52, %53, %54) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %56 = log(%48) /* ty=Tensor[(1, 14, 10), float32] */;
  %57 = %55.1;
  (%56, %57, %var_5825, meta[relay.Constant][5] /* ty=Tensor[(12, 72), float32] */, %var_5827)
}

def @func_3533(%var_3523: Tensor[(10, 4, 16), float64]) -> (Tensor[(10, 4, 16), float64],) {
  %58 = cast(%var_3523, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
  %59 = asin(%58) /* ty=Tensor[(10, 4, 16), float64] */;
  (%59,)
}

def @func_8849(%var_8846: Tensor[(11, 12, 2), float32]) -> Tensor[(11, 12, 2), float32] {
  %60 = cast(%var_8846, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
  asinh(%60) /* ty=Tensor[(11, 12, 2), float32] */
}

def @func_8901() -> (Tensor[(16, 6, 14), bool],) {
  %61 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %62 = %61.0;
  (%62,)
}

def @func_8025() -> Tensor[(16, 6, 14), bool] {
  @func_7050() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_8866() -> (Tensor[(16, 6, 14), bool],) {
  %63 = @func_7726() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %64 = %63.0;
  (%64,)
}

def @main() -> Tensor[(16, 6, 14), int16] {
  %65 = @func_7257() /* ty=Tensor[(16, 6, 14), float32] */;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %67 = sigmoid(%66) /* ty=Tensor[(16, 6, 14), float32] */;
  %68 = cast(%65, dtype="int16") /* ty=Tensor[(16, 6, 14), int16] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int16") /* ty=Tensor[(16, 6, 14), int16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%70, %71) /* ty=Tensor[(16, 6, 14), int16] */
}

def @func_8934() -> (Tensor[(16, 6, 14), bool],) {
  %72 = @func_8613() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %73 = %72.0;
  (%73,)
}

def @func_4410(%var_4386: Tensor[(13, 7, 9), float32]) -> (Tensor[(13, 7, 9), float32],) {
  %74 = cast(%var_4386, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %75 = acosh(%74) /* ty=Tensor[(13, 7, 9), float32] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %77 = sin(%76) /* ty=Tensor[(13, 7, 9), float32] */;
  %78 = cast(%77, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %79 = exp(%78) /* ty=Tensor[(13, 7, 9), float32] */;
  (%79,)
}

def @func_6372(%var_6352: Tensor[(3072), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
  %80 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %83 = cast(%var_6352, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %84 = reshape(%83, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %85 = @func_1502(%84) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %86 = atan(%82) /* ty=Tensor[(16, 6, 14), float32] */;
  %87 = %85.0;
  (%86, %87, %var_6352)
}

def @func_2211(%var_2191: Tensor[(15, 10, 8), float64], %var_2196: Tensor[(240), float64]) -> (Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) {
  %88 = cast(-5.32978f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %89 = cast(%var_2196, dtype="float64") /* ty=Tensor[(240), float64] */;
  %90 = reshape(%88, newshape=[]) /* ty=float64 */;
  %91 = reshape(%89, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float64] */;
  %92 = @func_1577(%90, %91) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
  %93 = cast(%var_2191, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %94 = acos(%93) /* ty=Tensor[(15, 10, 8), float64] */;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %96 = %92.2;
  %97 = tan(%95) /* ty=Tensor[(15, 10, 8), float64] */;
  (%96, -5.32978f64 /* ty=float64 */, %var_2196, %97)
}

def @func_896(%var_856: Tensor[(10, 14, 1), float32], %var_890: Tensor[(1755), uint64]) -> (Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) {
  %98 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
  %99 = shape_of(%var_856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_856, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 14, 1), float32] */, dtype="uint16") /* ty=Tensor[(10, 14, 1), uint16] */;
  %103 = shape_of(%var_856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_856, dtype="uint16") /* ty=Tensor[(10, 14, 1), uint16] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %106 = cast(%var_890, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %107 = reshape(%106, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), uint64] */;
  %108 = @func_225(%107) /* ty=(Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %110 = %108.2;
  %111 = cast(%110, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
  %112 = reshape(%109, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %113 = reshape(%111, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %114 = @func_384(%112, %113) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
  %115 = floor_mod(%100, %101) /* ty=Tensor[(10, 14, ?), float32] */;
  %116 = maximum(%104, %105) /* ty=Tensor[(10, 14, ?), uint16] */;
  %117 = %114.0;
  (%115, %116, %110, %var_890, %117, meta[relay.Constant][8] /* ty=Tensor[(48), float32] */)
}

def @func_8280() -> Tensor[(16, 6, 14), float64] {
  %118 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
  sinh(%120) /* ty=Tensor[(16, 6, 14), float64] */
}

def @func_8351() -> (Tensor[(16, 6, 14), bool], Tensor[(16, 5, 16), float64], Tensor[(1280), float64], Tensor[(16, 6, 14), bool]) {
  %121 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(1280), float64] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %123 = reshape(%122, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %124 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %125 = %121.0;
  %126 = @func_5519(%123) /* ty=Tensor[(16, 5, 16), float64] */;
  %127 = %124.0;
  (%125, %126, meta[relay.Constant][9] /* ty=Tensor[(1280), float64] */, %127)
}

def @func_6430() -> (Tensor[(16, 6, 14), bool],) {
  %128 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %129 = %128.0;
  (%129,)
}

def @func_5099(%var_5031: Tensor[(16, 12, 6), int8], %var_5032: Tensor[(16, 12, 6), int8]) -> (Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) {
  %130 = cast(%var_5032, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %131 = shape_of(%var_5031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_5031, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = less_equal(%132, %133) /* ty=Tensor[(16, 12, 6), bool] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %136 = atan(%135) /* ty=Tensor[(16, 12, 6), float64] */;
  %137 = cast(%134, dtype="uint16") /* ty=Tensor[(16, 12, 6), uint16] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="uint16") /* ty=Tensor[(16, 12, 6), uint16] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %141 = cast(%134, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %142 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%136, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %145 = cast(%var_5031, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %147 = reshape(%146, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %148 = @func_1502(%147) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
  %151 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(3072), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(3072), float32] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?), bool] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %155 = reshape(%154, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %156 = @func_1357(%155) /* ty=(Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) */;
  %157 = greater(%152, %153) /* ty=Tensor[(3072), bool] */;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %159 = reshape(%158, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %160 = @func_1502(%159) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %161 = logical_xor(%139, %140) /* ty=Tensor[(16, 12, 6), uint16] */;
  %162 = add(%143, %144) /* ty=Tensor[(16, 12, 6), float64] */;
  %163 = acosh(%145) /* ty=Tensor[(16, 12, 6), float32] */;
  %164 = %156.2;
  %165 = %160.0;
  (%161, %162, %163, %157, %164, meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, %165)
}

def @func_6891(%var_6845: Tensor[(16, 6, 14), bool], %var_6862: Tensor[(630), uint8], %var_6883: Tensor[(270), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(630), uint8], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(270), float32], Tensor[(14, 9, 5), float32]) {
  %166 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %167 = %166.0;
  %168 = cast(%var_6845, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %174 = cast(%var_6883, dtype="float32") /* ty=Tensor[(270), float32] */;
  %175 = reshape(%172, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %176 = reshape(%173, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %177 = reshape(%174, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
  %178 = @func_2392(%175, %176, %177) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
  %179 = cast(%var_6862, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %180 = reshape(%179, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
  %181 = @func_3713(%180) /* ty=Tensor[(14, 9, 5), uint8] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
  %183 = tan(%182) /* ty=Tensor[(14, 9, 5), float64] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
  %185 = divide(%170, %171) /* ty=Tensor[(16, 6, 14), float32] */;
  %186 = %178.0;
  %187 = sinh(%184) /* ty=Tensor[(14, 9, 5), float32] */;
  (%185, %var_6862, %186, meta[relay.Constant][12] /* ty=Tensor[(520), float32] */, %var_6883, %187)
}

def @func_7196(%var_7168: int8) -> (Tensor[(16, 6, 14), bool], Tensor[(1248), bool], int8, Tensor[(30), int8], Tensor[(1248), bool]) {
  %188 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %189 = cast(%var_7168, dtype="int8") /* ty=int8 */;
  %190 = cast(meta[relay.Constant][13] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
  %191 = reshape(%189, newshape=[]) /* ty=int8 */;
  %192 = reshape(%190, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int8] */;
  %193 = @func_707(%191, %192) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) */;
  %194 = cast(%var_7168, dtype="int8") /* ty=int8 */;
  %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
  %196 = reshape(%194, newshape=[]) /* ty=int8 */;
  %197 = reshape(%195, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int8] */;
  %198 = @func_707(%196, %197) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) */;
  %199 = %188.0;
  %200 = %193.3;
  %201 = %198.3;
  (%199, %200, %var_7168, meta[relay.Constant][13] /* ty=Tensor[(30), int8] */, %201)
}

def @func_8760() -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], Tensor[(576), float32], Tensor[(16, 6, 14), bool], Tensor[(1078), bool]) {
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %203 = reshape(%202, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %204 = @func_1357(%203) /* ty=(Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) */;
  %205 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
  %207 = cast(meta[relay.Constant][15] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
  %208 = reshape(%206, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), uint32] */;
  %209 = reshape(%207, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), uint32] */;
  %210 = @func_7797(%208, %209) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %213 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1078), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(1078), uint32] */, dtype="bool") /* ty=Tensor[(1078), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?), bool] */;
  %216 = @func_8046() /* ty=Tensor[(16, 6, 14), bool] */;
  %217 = %204.4;
  %218 = %205.0;
  %219 = greater_equal(%214, %215) /* ty=Tensor[(1078), bool] */;
  (%216, %217, meta[relay.Constant][14] /* ty=Tensor[(576), float32] */, %218, %219)
}

def @func_7313() -> (Tensor[(16, 6, 14), bool],) {
  %220 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
  (%220,)
}

def @func_8613() -> (Tensor[(16, 6, 14), bool],) {
  %221 = @func_8046() /* ty=Tensor[(16, 6, 14), bool] */;
  (%221,)
}

def @func_8822(%var_8805: Tensor[(10, 13, 14), int64]) -> (Tensor[(10, 13, 14), int64], Tensor[(16, 6, 14), float32], Tensor[(3072), float32]) {
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 13, 14), int64] */, dtype="int64") /* ty=Tensor[(10, 13, 14), int64] */;
  %223 = shape_of(%var_8805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_8805, dtype="int64") /* ty=Tensor[(10, 13, 14), int64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %226 = cast(meta[relay.Constant][17] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %227 = reshape(%226, newshape=[384, 8]) /* ty=Tensor[(384, 8), float32] */;
  %228 = @func_7635(%227) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) */;
  %229 = minimum(%224, %225) /* ty=Tensor[(10, 13, 14), int64] */;
  %230 = %228.0;
  (%229, %230, meta[relay.Constant][17] /* ty=Tensor[(3072), float32] */)
}

def @func_3386(%var_3371: Tensor[(16, 4, 11), float64], %var_3372: Tensor[(16, 4, 11), float64], %var_3379: uint16, %var_3381: Tensor[(520), float32], %var_3383: Tensor[(140), float32], %var_3384: Tensor[(3072), float32]) -> (Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) {
  %231 = cast(%var_3372, dtype="float64") /* ty=Tensor[(16, 4, 11), float64] */;
  %232 = shape_of(%var_3371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_3371, dtype="float64") /* ty=Tensor[(16, 4, 11), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = cast(%var_3379, dtype="uint16") /* ty=uint16 */;
  %236 = cast(meta[relay.Constant][18] /* ty=Tensor[(52), uint16] */, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %237 = cast(%var_3381, dtype="float32") /* ty=Tensor[(520), float32] */;
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %239 = cast(%var_3383, dtype="float32") /* ty=Tensor[(140), float32] */;
  %240 = cast(%var_3384, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %241 = reshape(%235, newshape=[]) /* ty=uint16 */;
  %242 = reshape(%236, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
  %243 = reshape(%237, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %244 = reshape(%238, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %245 = reshape(%239, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %246 = reshape(%240, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %247 = @func_2801(%241, %242, %243, %244, %245, %246) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %248 = floor_divide(%233, %234) /* ty=Tensor[(16, 4, 11), float64] */;
  %249 = %247.10;
  (%248, %249, %var_3379, meta[relay.Constant][18] /* ty=Tensor[(52), uint16] */, %var_3381, meta[relay.Constant][19] /* ty=Tensor[(1248), bool] */, %var_3383, %var_3384)
}

def @func_3769(%var_3758: Tensor[(4, 4, 11), float64], %var_3759: Tensor[(4, 4, 11), float64], %var_3766: Tensor[(240), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) {
  %250 = cast(%var_3759, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %251 = shape_of(%var_3758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_3758, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %254 = cast(meta[relay.Constant][20] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %255 = cast(%var_3766, dtype="float64") /* ty=Tensor[(240), float64] */;
  %256 = reshape(%254, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %257 = reshape(%255, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %258 = @func_2211(%256, %257) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
  %259 = mod(%252, %253) /* ty=Tensor[(4, 4, 11), float64] */;
  %260 = %258.3;
  (%259, %260, meta[relay.Constant][20] /* ty=Tensor[(1200), float64] */, %var_3766)
}

def @func_6421(%var_6396: Tensor[(2, 624), bool]) -> (Tensor[(16, 6, 14), float64], Tensor[(144), float32], Tensor[(2, 624), bool], uint16, Tensor[(16, 6, 14), bool]) {
  %261 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
  %264 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %265 = %264.0;
  %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %267 = cast(%var_6396, dtype="bool") /* ty=Tensor[(2, 624), bool] */;
  %268 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %269 = reshape(%266, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
  %270 = reshape(%267, newshape=[4, 312]) /* ty=Tensor[(4, 312), bool] */;
  %271 = reshape(%268, newshape=[]) /* ty=uint16 */;
  %272 = @func_3450(%269, %270, %271) /* ty=(Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) */;
  %273 = %272.4;
  %274 = cast(%265, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %275 = cast(%273, dtype="bool") /* ty=bool */;
  %276 = tan(%263) /* ty=Tensor[(16, 6, 14), float64] */;
  %277 = logical_or(%274, %275) /* ty=Tensor[(16, 6, 14), bool] */;
  (%276, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, %var_6396, meta[relay.Constant][22] /* ty=uint16 */, %277)
}

def @func_7499(%var_7429: Tensor[(1755), uint64], %var_7440: Tensor[(16, 6, 14), bool], %var_7457: Tensor[(1232), float64], %var_7486: Tensor[(33), float64], %var_7488: Tensor[(140), float32]) -> (Tensor[(1152), int8], Tensor[(13, 13, 15), float64], Tensor[(2535), uint32], Tensor[(1755), uint64], Tensor[(16, 6, 14), float32], Tensor[(16, 6, 14), bool], Tensor[(7, 16, 11), float64], Tensor[(1232), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32], Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), int16], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32]) {
  %278 = cast(meta[relay.Constant][24] /* ty=Tensor[(2535), uint32] */, dtype="uint32") /* ty=Tensor[(2535), uint32] */;
  %279 = cast(meta[relay.Constant][24] /* ty=Tensor[(2535), uint32] */, dtype="uint32") /* ty=Tensor[(2535), uint32] */;
  %280 = cast(%var_7429, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %281 = reshape(%278, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), uint32] */;
  %282 = reshape(%279, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), uint32] */;
  %283 = reshape(%280, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
  %284 = @func_4776(%281, %282, %283) /* ty=(Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) */;
  %285 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %286 = %285.0;
  %287 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %289 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%286, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %292 = cast(%var_7440, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %293 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%287, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = cast(%var_7457, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %297 = reshape(%296, newshape=[7, 16, 11]) /* ty=Tensor[(7, 16, 11), float64] */;
  %298 = @func_4146(%297) /* ty=(Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) */;
  %299 = cast(meta[relay.Constant][25] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %300 = reshape(%299, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %301 = @func_1502(%300) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %302 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(1152), int8] */, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %304 = cast(meta[relay.Constant][23] /* ty=Tensor[(1152), int8] */, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %305 = reshape(%303, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %306 = reshape(%304, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %307 = @func_5099(%305, %306) /* ty=(Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) */;
  %308 = %307.0;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %310 = exp(%309) /* ty=Tensor[(16, 12, 6), float64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %312 = atanh(%311) /* ty=Tensor[(16, 12, 6), float32] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %314 = erf(%313) /* ty=Tensor[(16, 12, 6), float32] */;
  %315 = cast(%310, dtype="int16") /* ty=Tensor[(16, 12, 6), int16] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="int16") /* ty=Tensor[(16, 12, 6), int16] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %319 = cast(%var_7486, dtype="float64") /* ty=Tensor[(33), float64] */;
  %320 = cast(meta[relay.Constant][26] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %321 = cast(%var_7488, dtype="float32") /* ty=Tensor[(140), float32] */;
  %322 = reshape(%319, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
  %323 = reshape(%320, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %324 = reshape(%321, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %325 = @func_962(%322, %323, %324) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
  %326 = %284.1;
  %327 = floor_mod(%290, %291) /* ty=Tensor[(16, 6, 14), float32] */;
  %328 = logical_and(%294, %295) /* ty=Tensor[(16, 6, 14), bool] */;
  %329 = %298.2;
  %330 = %301.0;
  %331 = %302.0;
  %332 = right_shift(%317, %318) /* ty=Tensor[(16, 12, 6), int16] */;
  %333 = %325.5;
  (meta[relay.Constant][23] /* ty=Tensor[(1152), int8] */, %326, meta[relay.Constant][24] /* ty=Tensor[(2535), uint32] */, %var_7429, %327, %328, %329, %var_7457, %330, meta[relay.Constant][25] /* ty=Tensor[(3072), float32] */, %331, %332, %333, %var_7486, meta[relay.Constant][26] /* ty=Tensor[(1248), bool] */, %var_7488)
}

def @func_8046() -> Tensor[(16, 6, 14), bool] {
  %334 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %334.0
}

def @func_5387(%var_5363: int16, %var_5364: Tensor[(2, 13, 9), int16]) -> (Tensor[(2, 13, 9), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
  %335 = cast(%var_5363, dtype="bool") /* ty=bool */;
  %336 = cast(%var_5364, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
  %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %338 = reshape(%337, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
  %339 = @func_3533(%338) /* ty=(Tensor[(10, 4, 16), float64],) */;
  %340 = less_equal(%335, %336) /* ty=Tensor[(2, 13, 9), bool] */;
  %341 = %339.0;
  (%340, %341, meta[relay.Constant][27] /* ty=Tensor[(640), float64] */)
}

def @func_5519(%var_5516: Tensor[(16, 5, 16), float64]) -> Tensor[(16, 5, 16), float64] {
  %342 = cast(%var_5516, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  sin(%342) /* ty=Tensor[(16, 5, 16), float64] */
}

def @func_6839() -> (Tensor[(16, 6, 14), bool],) {
  %343 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %344 = %343.0;
  (%344,)
}

def @func_7726() -> (Tensor[(16, 6, 14), bool],) {
  %345 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %346 = %345.0;
  (%346,)
}

def @func_1357(%var_1303: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) {
  %347 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 12, 3), float64] */, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %348 = exp(%347) /* ty=Tensor[(16, 12, 3), float32] */;
  %349 = cast(%var_1303, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = cast(meta[relay.Constant][29] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %354 = reshape(%353, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %355 = @func_93(%354) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %356 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 12, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %357 = sigmoid(%356) /* ty=Tensor[(16, 12, 3), float64] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %359 = atanh(%358) /* ty=Tensor[(16, 12, 3), float64] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %361 = %355.1;
  %362 = cast(%361, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %363 = reshape(%362, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %364 = @func_93(%363) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %365 = cast(%var_1303, dtype="int16") /* ty=Tensor[(16, 12, 3), int16] */;
  %366 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%359, dtype="int16") /* ty=Tensor[(16, 12, 3), int16] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %369 = floor_divide(%351, %352) /* ty=Tensor[(16, 12, 3), float32] */;
  %370 = rsqrt(%360) /* ty=Tensor[(16, 12, 3), float64] */;
  %371 = %364.0;
  %372 = bitwise_xor(%367, %368) /* ty=Tensor[(16, 12, 3), int16] */;
  (%369, %361, meta[relay.Constant][29] /* ty=Tensor[(1248), bool] */, %370, %371, %372)
}

def @func_7022() -> (Tensor[(16, 6, 14), bool],) {
  %373 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
  (%373,)
}

def @func_2888(%var_2863: Tensor[(1, 14, 10), int32], %var_2864: Tensor[(3, 14, 10), int32], %var_2886: Tensor[(4, 312), bool]) -> (Tensor[(3, 14, 10), uint64], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool]) {
  %374 = cast(%var_2863, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %375 = cast(%var_2864, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %376 = greater(%374, %375) /* ty=Tensor[(3, 14, 10), bool] */;
  %377 = cast(%var_2864, dtype="uint64") /* ty=Tensor[(3, 14, 10), uint64] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="uint64") /* ty=Tensor[(3, 14, 10), uint64] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %381 = cast(%var_2886, dtype="bool") /* ty=Tensor[(4, 312), bool] */;
  %382 = reshape(%381, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %383 = @func_93(%382) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %384 = add(%379, %380) /* ty=Tensor[(3, 14, 10), uint64] */;
  %385 = %383.0;
  (%384, %385, %var_2886)
}

def @func_707(%var_664: int8, %var_665: Tensor[(10, 1, 3), int8]) -> (Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) {
  %386 = cast(%var_664, dtype="int8") /* ty=int8 */;
  %387 = cast(%var_665, dtype="int8") /* ty=Tensor[(10, 1, 3), int8] */;
  %388 = add(%386, %387) /* ty=Tensor[(10, 1, 3), int8] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %390 = cast(meta[relay.Constant][30] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %391 = cast(meta[relay.Constant][31] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %392 = reshape(%390, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
  %393 = reshape(%391, newshape=[104, 12]) /* ty=Tensor[(104, 12), bool] */;
  %394 = @func_107(%392, %393) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) */;
  %395 = cast(meta[relay.Constant][31] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %396 = reshape(%395, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %397 = @func_93(%396) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %398 = acos(%389) /* ty=Tensor[(10, 1, 3), float64] */;
  %399 = %394.2;
  %400 = %397.0;
  (%398, %399, meta[relay.Constant][30] /* ty=Tensor[(585), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1248), bool] */, %400)
}

def @func_107(%var_98: Tensor[(15, 3, 13), float64], %var_105: Tensor[(104, 12), bool]) -> (Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) {
  %401 = cast(%var_98, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %402 = cast(%var_105, dtype="bool") /* ty=Tensor[(104, 12), bool] */;
  %403 = reshape(%402, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %404 = @func_93(%403) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %405 = exp(%401) /* ty=Tensor[(15, 3, 13), float64] */;
  %406 = %404.0;
  (%405, %406, %var_105)
}

def @func_7257() -> Tensor[(16, 6, 14), float32] {
  @func_6746() /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_7226(%var_7217: Tensor[(630), uint8]) -> (Tensor[(16, 6, 14), bool], Tensor[(14, 9, 5), uint8], Tensor[(630), uint8]) {
  %407 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %408 = cast(%var_7217, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %409 = reshape(%408, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
  %410 = %407.0;
  %411 = @func_3713(%409) /* ty=Tensor[(14, 9, 5), uint8] */;
  (%410, %411, %var_7217)
}

def @func_1577(%var_1563: float64, %var_1564: Tensor[(2, 12, 10), float64]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
  %412 = cast(%var_1563, dtype="float64") /* ty=float64 */;
  %413 = cast(%var_1564, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %414 = cast(meta[relay.Constant][32] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %415 = reshape(%414, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %416 = @func_93(%415) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %417 = power(%412, %413) /* ty=Tensor[(2, 12, 10), float64] */;
  %418 = %416.1;
  (%417, %418, meta[relay.Constant][32] /* ty=Tensor[(1248), bool] */)
}

def @func_6948(%var_6917: float32, %var_6918: Tensor[(864), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) {
  %419 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %420 = cast(%var_6917, dtype="float32") /* ty=float32 */;
  %421 = cast(%var_6918, dtype="float32") /* ty=Tensor[(864), float32] */;
  %422 = cast(meta[relay.Constant][33] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %423 = reshape(%420, newshape=[]) /* ty=float32 */;
  %424 = reshape(%421, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %425 = reshape(%422, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %426 = @func_5304(%423, %424, %425) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %427 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %428 = %419.0;
  %429 = %426.4;
  %430 = %427.0;
  (%428, %429, %var_6917, %var_6918, meta[relay.Constant][33] /* ty=Tensor[(1248), bool] */, %430)
}

def @func_6328(%var_6316: Tensor[(16, 6, 14), bool]) -> (Tensor[(16, 6, 14), float32],) {
  %431 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %432 = %431.0;
  %433 = cast(%var_6316, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %437 = maximum(%435, %436) /* ty=Tensor[(16, 6, 14), float32] */;
  (%437,)
}

def @func_4146(%var_4100: Tensor[(7, 16, 11), float64]) -> (Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) {
  %438 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 44), float32] */, dtype="float32") /* ty=Tensor[(1, 44), float32] */;
  %439 = reshape(%438, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float32] */;
  %440 = @func_3849(%439) /* ty=(Tensor[(11, 2, 2), float32],) */;
  %441 = cast(%var_4100, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %442 = cos(%441) /* ty=Tensor[(7, 16, 11), float64] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %444 = %440.0;
  %445 = log10(%443) /* ty=Tensor[(7, 16, 11), float64] */;
  (%444, meta[relay.Constant][34] /* ty=Tensor[(1, 44), float32] */, %445)
}

def @func_7050() -> Tensor[(16, 6, 14), bool] {
  %446 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %446.0
}

def @func_6262(%var_6193: Tensor[(26, 2), uint16], %var_6195: Tensor[(1248), bool], %var_6196: Tensor[(140), float32], %var_6211: Tensor[(270), float32], %var_6246: Tensor[(44), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(240), float64], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(9, 5, 6), float32], Tensor[(270), float32], Tensor[(26, 2), uint32], Tensor[(11, 2, 2), float32], Tensor[(44), float32], Tensor[(3072), float32]) {
  %447 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %448 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %449 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
  %450 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %451 = cast(%var_6195, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %452 = cast(%var_6196, dtype="float32") /* ty=Tensor[(140), float32] */;
  %453 = cast(meta[relay.Constant][37] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %454 = reshape(%448, newshape=[]) /* ty=uint16 */;
  %455 = reshape(%449, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
  %456 = reshape(%450, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %457 = reshape(%451, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %458 = reshape(%452, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %459 = reshape(%453, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %460 = @func_2801(%454, %455, %456, %457, %458, %459) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %461 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %462 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %463 = cast(%var_6211, dtype="float32") /* ty=Tensor[(270), float32] */;
  %464 = reshape(%461, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %465 = reshape(%462, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %466 = reshape(%463, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
  %467 = @func_2392(%464, %465, %466) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
  %468 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
  %469 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %470 = add(%468, %469) /* ty=Tensor[(26, 2), uint16] */;
  %471 = cast(%var_6193, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %473 = cast(%470, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %475 = cast(%var_6246, dtype="float32") /* ty=Tensor[(44), float32] */;
  %476 = reshape(%475, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float32] */;
  %477 = @func_3849(%476) /* ty=(Tensor[(11, 2, 2), float32],) */;
  %478 = cast(meta[relay.Constant][37] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %479 = %447.0;
  %480 = %460.11;
  %481 = %467.1;
  %482 = bitwise_and(%473, %474) /* ty=Tensor[(26, 2), uint32] */;
  %483 = %477.0;
  %484 = sqrt(%478) /* ty=Tensor[(3072), float32] */;
  (%479, %480, meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, %var_6195, %var_6196, %481, %var_6211, %482, %483, %var_6246, %484)
}

def @func_7987(%var_7978: Tensor[(1, 14), float32]) -> Tensor[(1, 14), float32] {
  %485 = cast(%var_7978, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
  sinh(%485) /* ty=Tensor[(1, 14), float32] */
}

def @func_6523(%var_6521: Tensor[(96, 12), int8]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) {
  %486 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %487 = cast(%var_6521, dtype="int8") /* ty=Tensor[(96, 12), int8] */;
  %488 = cast(%var_6521, dtype="int8") /* ty=Tensor[(96, 12), int8] */;
  %489 = reshape(%487, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %490 = reshape(%488, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %491 = @func_5099(%489, %490) /* ty=(Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) */;
  %492 = %486.0;
  %493 = %491.1;
  (%492, %493, %var_6521)
}

def @func_7086(%var_7080: Tensor[(1, 704), float64], %var_7081: uint16, %var_7083: Tensor[(5, 28), float32]) -> (Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) {
  %494 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
  %497 = cast(%var_7080, dtype="float64") /* ty=Tensor[(1, 704), float64] */;
  %498 = cast(%var_7080, dtype="float64") /* ty=Tensor[(1, 704), float64] */;
  %499 = cast(%var_7081, dtype="uint16") /* ty=uint16 */;
  %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %501 = cast(%var_7083, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %502 = cast(meta[relay.Constant][39] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %503 = reshape(%497, newshape=[16, 4, 11]) /* ty=Tensor[(16, 4, 11), float64] */;
  %504 = reshape(%498, newshape=[16, 4, 11]) /* ty=Tensor[(16, 4, 11), float64] */;
  %505 = reshape(%499, newshape=[]) /* ty=uint16 */;
  %506 = reshape(%500, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %507 = reshape(%501, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %508 = reshape(%502, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %509 = @func_3386(%503, %504, %505, %506, %507, %508) /* ty=(Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) */;
  %510 = log(%496) /* ty=Tensor[(16, 6, 14), float64] */;
  %511 = %509.1;
  (%510, %511, %var_7080, %var_7081, meta[relay.Constant][38] /* ty=Tensor[(520), float32] */, %var_7083, meta[relay.Constant][39] /* ty=Tensor[(3072), float32] */)
}

def @func_8642() -> Tensor[(16, 6, 14), bool] {
  %512 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %512.0
}

def @func_93(%var_68: Tensor[(13, 12, 8), bool]) -> (Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) {
  %513 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 8), bool] */;
  %514 = cast(%var_68, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %515 = cast(%var_68, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %516 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 8), bool] */;
  %517 = logical_and(%513, %514) /* ty=Tensor[(13, 12, 8), bool] */;
  %518 = equal(%515, %516) /* ty=Tensor[(13, 12, 8), bool] */;
  (%517, %518)
}

def @func_384(%var_362: Tensor[(16, 3, 1), float32], %var_376: Tensor[(1248), bool]) -> (Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
  %519 = cast(%var_362, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
  %520 = log(%519) /* ty=Tensor[(16, 3, 1), float32] */;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(16, 3, 1), float64] */;
  %522 = log10(%521) /* ty=Tensor[(16, 3, 1), float64] */;
  %523 = cast(%522, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
  %524 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%520, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %527 = cast(%var_376, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %528 = reshape(%527, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %529 = @func_93(%528) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %530 = bitwise_or(%525, %526) /* ty=Tensor[(16, 3, ?), int32] */;
  %531 = %529.0;
  (%530, %531, %var_376)
}

def @func_2801(%var_2661: uint16, %var_2662: Tensor[(2, 13, 2), uint16], %var_2680: Tensor[(520), float32], %var_2729: Tensor[(1248), bool], %var_2730: Tensor[(140), float32], %var_2777: Tensor[(3072), float32]) -> (Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
  %532 = cast(%var_2661, dtype="bool") /* ty=bool */;
  %533 = cast(%var_2662, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %534 = cast(%var_2680, dtype="float32") /* ty=Tensor[(520), float32] */;
  %535 = cast(%var_2680, dtype="float32") /* ty=Tensor[(520), float32] */;
  %536 = cast(meta[relay.Constant][41] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %537 = reshape(%534, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %538 = reshape(%535, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
  %539 = reshape(%536, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
  %540 = @func_2392(%537, %538, %539) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
  %541 = cast(meta[relay.Constant][41] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %542 = reshape(%541, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %543 = cast(%var_2680, dtype="float64") /* ty=Tensor[(520), float64] */;
  %544 = cast(meta[relay.Constant][42] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %545 = cast(%var_2729, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %546 = cast(%var_2730, dtype="float32") /* ty=Tensor[(140), float32] */;
  %547 = reshape(%544, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
  %548 = reshape(%545, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %549 = reshape(%546, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %550 = @func_962(%547, %548, %549) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
  %551 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 100), float64] */, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %552 = cast(meta[relay.Constant][44] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %553 = reshape(%551, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %554 = reshape(%552, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %555 = @func_2211(%553, %554) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
  %556 = cast(%var_2777, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %557 = reshape(%556, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %558 = @func_1502(%557) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %559 = greater_equal(%532, %533) /* ty=Tensor[(2, 13, 2), bool] */;
  %560 = %540.2;
  %561 = @func_1863(%542) /* ty=Tensor[(9, 5, 6), float32] */;
  %562 = asin(%543) /* ty=Tensor[(520), float64] */;
  %563 = %550.5;
  %564 = %555.0;
  %565 = %558.0;
  (%559, %560, meta[relay.Constant][41] /* ty=Tensor[(270), float32] */, %561, %562, %563, meta[relay.Constant][42] /* ty=Tensor[(33), float64] */, %var_2729, %var_2730, %564, meta[relay.Constant][43] /* ty=Tensor[(12, 100), float64] */, meta[relay.Constant][44] /* ty=Tensor[(240), float64] */, %565, %var_2777)
}

def @func_8880() -> Tensor[(16, 6, 14), bool] {
  @func_8046() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_6762(%var_6752: uint8, %var_6753: Tensor[(6, 6, 15), uint8]) -> (Tensor[(6, 6, 15), bool],) {
  %566 = cast(%var_6752, dtype="bool") /* ty=bool */;
  %567 = cast(%var_6753, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %568 = less(%566, %567) /* ty=Tensor[(6, 6, 15), bool] */;
  (%568,)
}

def @func_225(%var_213: Tensor[(9, 13, 15), uint64]) -> (Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) {
  %569 = cast(%var_213, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %570 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(9, 13, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 13, 15), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 1248), bool] */, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
  %574 = reshape(%573, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %575 = @func_93(%574) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %576 = not_equal(%571, %572) /* ty=Tensor[(9, 13, 15), bool] */;
  %577 = %575.1;
  (%576, %577, meta[relay.Constant][46] /* ty=Tensor[(1, 1248), bool] */)
}

def @func_6666(%var_6658: Tensor[(8, 15, 2), float64], %var_6659: Tensor[(8, 15, 2), float64]) -> Tensor[(8, 15, 2), bool] {
  %578 = cast(%var_6659, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %579 = shape_of(%var_6658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_6658, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%580, %581) /* ty=Tensor[(8, 15, 2), bool] */
}

def @func_7844() -> (Tensor[(16, 6, 14), bool],) {
  %582 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
  (%582,)
}

def @func_1502(%var_1486: Tensor[(12, 16, 16), float32]) -> (Tensor[(12, 16, 16), float32],) {
  %583 = cast(%var_1486, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %584 = atanh(%583) /* ty=Tensor[(12, 16, 16), float32] */;
  (%584,)
}

def @func_4471(%var_4427: Tensor[(240), float64], %var_4430: Tensor[(273, 3), float32], %var_4437: Tensor[(273, 3), float32]) -> (Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) {
  %585 = cast(-7.71051f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %586 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 12), float64] */, dtype="bool") /* ty=Tensor[(1, 12), bool] */;
  %587 = cast(meta[relay.Constant][48] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %588 = cast(meta[relay.Constant][48] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %589 = cast(%var_4427, dtype="float64") /* ty=Tensor[(240), float64] */;
  %590 = reshape(%587, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %591 = reshape(%588, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %592 = reshape(%589, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %593 = @func_3769(%590, %591, %592) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) */;
  %594 = cast(%var_4430, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %595 = reshape(%594, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float32] */;
  %596 = @func_4410(%595) /* ty=(Tensor[(13, 7, 9), float32],) */;
  %597 = cast(%var_4437, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %598 = shape_of(%var_4430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %599 = cast(%var_4430, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %601 = cast(%var_4430, dtype="float64") /* ty=Tensor[(273, 3), float64] */;
  %602 = cosh(%601) /* ty=Tensor[(273, 3), float64] */;
  %603 = cast(meta[relay.Constant][49] /* ty=Tensor[(273, 3), float64] */, dtype="int8") /* ty=Tensor[(273, 3), int8] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(2), int32] */;
  %605 = cast(%602, dtype="int8") /* ty=Tensor[(273, 3), int8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %607 = right_shift(%605, %606) /* ty=Tensor[(273, 3), int8] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %609 = shape_of(%602, dtype="int32") /* ty=Tensor[(2), int32] */;
  %610 = cast(%602, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %612 = cast(meta[relay.Constant][50] /* ty=Tensor[(273, 3), int8] */, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %613 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
  %614 = cast(%607, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %616 = less_equal(%585, %586) /* ty=Tensor[(1, 12), bool] */;
  %617 = %593.1;
  %618 = %596.0;
  %619 = less_equal(%599, %600) /* ty=Tensor[(273, 3), bool] */;
  %620 = floor_divide(%610, %611) /* ty=Tensor[(273, 3), float32] */;
  %621 = equal(%614, %615) /* ty=Tensor[(273, 3), bool] */;
  (%616, %617, meta[relay.Constant][48] /* ty=Tensor[(176, 1), float64] */, %var_4427, %618, %619, %620, %621)
}

def @func_6733() -> (Tensor[(16, 6, 14), bool],) {
  %622 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
  (%622,)
}

def @func_6746() -> Tensor[(16, 6, 14), float32] {
  %623 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %624 = %623.0;
  %625 = cast(%624, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  sqrt(%625) /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_3450(%var_3415: Tensor[(3, 6, 8), float32], %var_3428: Tensor[(4, 312), bool], %var_3434: uint16) -> (Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) {
  %626 = cast(%var_3415, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %627 = rsqrt(%626) /* ty=Tensor[(3, 6, 8), float32] */;
  %628 = cast(%var_3415, dtype="int32") /* ty=Tensor[(3, 6, 8), int32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="int32") /* ty=Tensor[(3, 6, 8), int32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %632 = cast(%var_3428, dtype="bool") /* ty=Tensor[(4, 312), bool] */;
  %633 = reshape(%632, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %634 = @func_93(%633) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %635 = cast(%var_3434, dtype="uint16") /* ty=uint16 */;
  %636 = cast(meta[relay.Constant][51] /* ty=Tensor[(52), uint16] */, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %637 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 52), float32] */, dtype="float32") /* ty=Tensor[(10, 52), float32] */;
  %638 = %634.0;
  %639 = cast(%638, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %640 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %641 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 128), float32] */, dtype="float32") /* ty=Tensor[(24, 128), float32] */;
  %642 = reshape(%635, newshape=[]) /* ty=uint16 */;
  %643 = reshape(%636, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
  %644 = reshape(%637, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %645 = reshape(%639, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %646 = reshape(%640, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %647 = reshape(%641, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %648 = @func_2801(%642, %643, %644, %645, %646, %647) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %649 = cast(%627, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %650 = logical_xor(%630, %631) /* ty=Tensor[(3, 6, 8), int32] */;
  %651 = %648.3;
  %652 = log2(%649) /* ty=Tensor[(3, 6, 8), float32] */;
  (%650, %638, %var_3428, %651, %var_3434, meta[relay.Constant][51] /* ty=Tensor[(52), uint16] */, meta[relay.Constant][52] /* ty=Tensor[(10, 52), float32] */, meta[relay.Constant][53] /* ty=Tensor[(1, 140), float32] */, meta[relay.Constant][54] /* ty=Tensor[(24, 128), float32] */, %652)
}

def @func_4776(%var_4749: Tensor[(13, 13, 15), uint32], %var_4750: Tensor[(13, 13, 15), uint32], %var_4764: Tensor[(1755), uint64]) -> (Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) {
  %653 = cast(%var_4750, dtype="uint32") /* ty=Tensor[(13, 13, 15), uint32] */;
  %654 = shape_of(%var_4749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_4749, dtype="uint32") /* ty=Tensor[(13, 13, 15), uint32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %657 = cast(%var_4749, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %658 = cast(meta[relay.Constant][55] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %659 = cast(%var_4764, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %660 = reshape(%658, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %661 = reshape(%659, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
  %662 = @func_896(%660, %661) /* ty=(Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) */;
  %663 = right_shift(%655, %656) /* ty=Tensor[(13, 13, 15), uint32] */;
  %664 = cosh(%657) /* ty=Tensor[(13, 13, 15), float64] */;
  %665 = %662.0;
  (%663, %664, %665, meta[relay.Constant][55] /* ty=Tensor[(140), float32] */, %var_4764)
}

def @func_3713(%var_3709: Tensor[(14, 9, 5), uint8]) -> Tensor[(14, 9, 5), uint8] {
  %666 = cast(%var_3709, dtype="uint8") /* ty=Tensor[(14, 9, 5), uint8] */;
  %667 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(14, 9, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 9, 5), uint8] */, dtype="uint8") /* ty=Tensor[(14, 9, 5), uint8] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%668, %669) /* ty=Tensor[(14, 9, 5), uint8] */
}

def @func_7364(%var_7345: Tensor[(630, 1), uint8], %var_7352: Tensor[(1248), bool]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 6, 14), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64], Tensor[(14, 9, 5), uint8], Tensor[(630, 1), uint8], Tensor[(16, 6, 9), float32], float32, Tensor[(216, 4), float32], Tensor[(1248), bool], Tensor[(864), float32]) {
  %670 = @func_7313() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %671 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %672 = cast(meta[relay.Constant][57] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %673 = reshape(%672, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
  %674 = @func_3533(%673) /* ty=(Tensor[(10, 4, 16), float64],) */;
  %675 = cast(%var_7345, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
  %676 = reshape(%675, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
  %677 = cast(-3.02213f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %678 = cast(meta[relay.Constant][58] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %679 = cast(%var_7352, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %680 = reshape(%677, newshape=[]) /* ty=float32 */;
  %681 = reshape(%678, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %682 = reshape(%679, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %683 = @func_5304(%680, %681, %682) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %684 = cast(-3.02213f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %685 = cast(meta[relay.Constant][58] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %686 = reshape(%684, newshape=[]) /* ty=float32 */;
  %687 = reshape(%685, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %688 = @func_6948(%686, %687) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) */;
  %689 = %670.0;
  %690 = %671.0;
  %691 = %674.0;
  %692 = @func_3713(%676) /* ty=Tensor[(14, 9, 5), uint8] */;
  %693 = %683.0;
  %694 = %688.3;
  (%689, %690, %691, meta[relay.Constant][57] /* ty=Tensor[(640), float64] */, %692, %var_7345, %693, -3.02213f /* ty=float32 */, meta[relay.Constant][58] /* ty=Tensor[(216, 4), float32] */, %var_7352, %694)
}

def @func_7797(%var_7737: Tensor[(11, 14, 7), uint32], %var_7738: Tensor[(11, 14, 7), uint32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) {
  %695 = cast(%var_7738, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
  %696 = shape_of(%var_7737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_7737, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %699 = cast(meta[relay.Constant][59] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %700 = reshape(%699, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %701 = @func_93(%700) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %702 = %701.0;
  %703 = cast(meta[relay.Constant][59] /* ty=Tensor[(1248), bool] */, dtype="int64") /* ty=Tensor[(1248), int64] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="int64") /* ty=Tensor[(13, 12, 8), int64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %707 = bitwise_or(%697, %698) /* ty=Tensor[(11, 14, 7), uint32] */;
  %708 = bitwise_and(%705, %706) /* ty=Tensor[(13, 12, 8), int64] */;
  %709 = @func_7257() /* ty=Tensor[(16, 6, 14), float32] */;
  (%707, %708, %709)
}

def @func_3849(%var_3844: Tensor[(11, 2, 2), float32]) -> (Tensor[(11, 2, 2), float32],) {
  %710 = cast(meta[relay.Constant][60] /* ty=Tensor[(11, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 2), float32] */;
  %711 = shape_of(%var_3844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_3844, dtype="float32") /* ty=Tensor[(11, 2, 2), float32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %714 = power(%712, %713) /* ty=Tensor[(11, 2, 2), float32] */;
  (%714,)
}

def @func_4882(%var_4874: Tensor[(10, 6, 7), bool]) -> Tensor[(10, 6, 7), bool] {
  %715 = cast(%var_4874, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
  %716 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(10, 6, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(meta[relay.Constant][61] /* ty=Tensor[(10, 6, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%717, %718) /* ty=Tensor[(10, 6, 7), bool] */
}

def @func_2392(%var_2373: Tensor[(13, 10, 4), float32], %var_2374: Tensor[(13, 10, 4), float32], %var_2386: Tensor[(6, 45), float32]) -> (Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) {
  %719 = cast(%var_2374, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %720 = shape_of(%var_2373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_2373, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = cast(%var_2386, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %724 = reshape(%723, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %725 = not_equal(%721, %722) /* ty=Tensor[(13, 10, 4), bool] */;
  %726 = @func_1863(%724) /* ty=Tensor[(9, 5, 6), float32] */;
  (%725, %726, %var_2386)
}

def @func_962(%var_901: Tensor[(1, 11, 3), float64], %var_906: Tensor[(1248), bool], %var_954: Tensor[(140, 1), float32]) -> (Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) {
  %727 = cast(%var_901, dtype="float64") /* ty=Tensor[(1, 11, 3), float64] */;
  %728 = cast(%var_906, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %729 = reshape(%728, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %730 = @func_93(%729) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %731 = cast(%var_954, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %732 = cast(meta[relay.Constant][62] /* ty=Tensor[(1755), uint64] */, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %733 = reshape(%731, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %734 = reshape(%732, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
  %735 = @func_896(%733, %734) /* ty=(Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) */;
  %736 = asinh(%727) /* ty=Tensor[(1, 11, 3), float64] */;
  %737 = %730.0;
  %738 = %735.3;
  (%736, %737, %var_906, %738, %var_954, meta[relay.Constant][62] /* ty=Tensor[(1755), uint64] */)
}

def @func_8238(%var_8077: Tensor[(9, 5, 12), float32], %var_8102: Tensor[(1248), bool], %var_8147: Tensor[(1, 240), float64], %var_8148: Tensor[(819), float32], %var_8200: Tensor[(288, 4), int8], %var_8210: Tensor[(176, 4), float64]) -> (Tensor[(140, 1), float32], Tensor[(864), float32], Tensor[(1248), bool], Tensor[(1, 12), bool], Tensor[(1, 240), float64], Tensor[(819), int8], Tensor[(13, 12, 8), bool], Tensor[(16, 6, 14), bool], Tensor[(288, 4), int8], Tensor[(9, 5, 12), float64], Tensor[(5, 28), float32], Tensor[(176, 4), float64], Tensor[(13, 7, 9), float32]) {
  %739 = cast(1.83555f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %740 = cast(meta[relay.Constant][63] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %741 = cast(%var_8102, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %742 = reshape(%739, newshape=[]) /* ty=float32 */;
  %743 = reshape(%740, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %744 = reshape(%741, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %745 = @func_5304(%742, %743, %744) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %746 = cast(%var_8147, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %747 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %748 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %749 = reshape(%746, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %750 = reshape(%747, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %751 = reshape(%748, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %752 = @func_4471(%749, %750, %751) /* ty=(Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) */;
  %753 = cast(%var_8148, dtype="int8") /* ty=Tensor[(819), int8] */;
  %754 = cast(1.83555f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %755 = cast(%var_8102, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %756 = reshape(%755, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %757 = @func_93(%756) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %758 = cast(%var_8200, dtype="int8") /* ty=Tensor[(288, 4), int8] */;
  %759 = reshape(%758, newshape=[96, 12]) /* ty=Tensor[(96, 12), int8] */;
  %760 = @func_6523(%759) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) */;
  %761 = cast(%var_8077, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %762 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(9, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(meta[relay.Constant][64] /* ty=Tensor[(9, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %765 = floor_mod(%763, %764) /* ty=Tensor[(9, 5, 12), float32] */;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
  %767 = cast(%var_8210, dtype="float64") /* ty=Tensor[(176, 4), float64] */;
  %768 = cast(1.83555f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %769 = %745.1;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %771 = reshape(%767, newshape=[1, 704]) /* ty=Tensor[(1, 704), float64] */;
  %772 = reshape(%768, newshape=[]) /* ty=uint16 */;
  %773 = reshape(%770, newshape=[5, 28]) /* ty=Tensor[(5, 28), float32] */;
  %774 = @func_7086(%771, %772, %773) /* ty=(Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) */;
  %775 = cast(%var_8147, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %776 = left_shift(%753, %754) /* ty=Tensor[(819), int8] */;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(819), float32] */;
  %778 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %779 = reshape(%775, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %780 = reshape(%777, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %781 = reshape(%778, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %782 = @func_4471(%779, %780, %781) /* ty=(Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) */;
  %783 = %752.0;
  %784 = %757.0;
  %785 = %760.0;
  %786 = acos(%766) /* ty=Tensor[(9, 5, 12), float64] */;
  %787 = %774.5;
  %788 = %782.4;
  (%769, meta[relay.Constant][63] /* ty=Tensor[(864), float32] */, %var_8102, %783, %var_8147, %776, %784, %785, %var_8200, %786, %787, %var_8210, %788)
}

def @func_7898(%var_7865: float64, %var_7866: Tensor[(240), float64]) -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], float64, Tensor[(240), float64], Tensor[(13, 12, 8), bool], Tensor[(1, 44), float32], Tensor[(1232), float64]) {
  %789 = cast(%var_7865, dtype="float64") /* ty=float64 */;
  %790 = cast(%var_7866, dtype="float64") /* ty=Tensor[(240), float64] */;
  %791 = reshape(%789, newshape=[]) /* ty=float64 */;
  %792 = reshape(%790, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float64] */;
  %793 = @func_1577(%791, %792) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
  %794 = %793.1;
  %795 = cast(%794, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %796 = reshape(%795, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %797 = @func_93(%796) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %798 = cast(meta[relay.Constant][65] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %799 = reshape(%798, newshape=[7, 16, 11]) /* ty=Tensor[(7, 16, 11), float64] */;
  %800 = @func_4146(%799) /* ty=(Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) */;
  %801 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
  %802 = %797.1;
  %803 = %800.1;
  (%801, %794, %var_7865, %var_7866, %802, %803, meta[relay.Constant][65] /* ty=Tensor[(1232), float64] */)
}

def @func_6177() -> (Tensor[(16, 6, 14), bool],) {
  %804 = cast(meta[relay.Constant][66] /* ty=Tensor[(16, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %805 = rsqrt(%804) /* ty=Tensor[(16, 6, 14), float32] */;
  %806 = cast(meta[relay.Constant][66] /* ty=Tensor[(16, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %807 = atanh(%806) /* ty=Tensor[(16, 6, 14), float32] */;
  %808 = cast(%807, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %809 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%805, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %812 = less_equal(%810, %811) /* ty=Tensor[(16, 6, 14), bool] */;
  (%812,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6431() -> (Tensor[(16, 6, 14), bool],) {
  %2 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %0 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_6423(%var_6422: Tensor[(2, 624), bool]) -> (Tensor[(16, 6, 14), float64], Tensor[(144), float32], Tensor[(2, 624), bool], uint16, Tensor[(16, 6, 14), bool]) {
  %20 = fn (%var_6396: Tensor[(2, 624), bool]) -> (Tensor[(16, 6, 14), float64], Tensor[(144), float32], Tensor[(2, 624), bool], uint16, Tensor[(16, 6, 14), bool]) {
    %3 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %4 = %3.0;
    %5 = cast(%4, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
    %6 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %7 = %6.0;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %9 = cast(%var_6396, dtype="bool") /* ty=Tensor[(2, 624), bool] */;
    %10 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %11 = reshape(%8, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
    %12 = reshape(%9, newshape=[4, 312]) /* ty=Tensor[(4, 312), bool] */;
    %13 = reshape(%10, newshape=[]) /* ty=uint16 */;
    %14 = @func_3450(%11, %12, %13) /* ty=(Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) */;
    %15 = %14.4;
    %16 = cast(%7, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
    %17 = cast(%15, dtype="bool") /* ty=bool */;
    %18 = tan(%5) /* ty=Tensor[(16, 6, 14), float64] */;
    %19 = logical_or(%16, %17) /* ty=Tensor[(16, 6, 14), bool] */;
    (%18, meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, %var_6396, meta[relay.Constant][1] /* ty=uint16 */, %19)
  };
  %20(%var_6422) /* ty=(Tensor[(16, 6, 14), float64], Tensor[(144), float32], Tensor[(2, 624), bool], uint16, Tensor[(16, 6, 14), bool]) */
}

def @func_6612() -> Tensor[(16, 6, 14), bool] {
  %21 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %21.0
}

def @func_2211(%var_2191: Tensor[(15, 10, 8), float64], %var_2196: Tensor[(240), float64]) -> (Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) {
  %22 = cast(-5.32978f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %23 = cast(%var_2196, dtype="float64") /* ty=Tensor[(240), float64] */;
  %24 = reshape(%22, newshape=[]) /* ty=float64 */;
  %25 = reshape(%23, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float64] */;
  %26 = @func_1577(%24, %25) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
  %27 = cast(%var_2191, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %28 = acos(%27) /* ty=Tensor[(15, 10, 8), float64] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %30 = %26.2;
  %31 = tan(%29) /* ty=Tensor[(15, 10, 8), float64] */;
  (%30, -5.32978f64 /* ty=float64 */, %var_2196, %31)
}

def @func_8238(%var_8077: Tensor[(9, 5, 12), float32], %var_8102: Tensor[(1248), bool], %var_8147: Tensor[(1, 240), float64], %var_8148: Tensor[(819), float32], %var_8200: Tensor[(288, 4), int8], %var_8210: Tensor[(176, 4), float64]) -> (Tensor[(140, 1), float32], Tensor[(864), float32], Tensor[(1248), bool], Tensor[(1, 12), bool], Tensor[(1, 240), float64], Tensor[(819), int8], Tensor[(13, 12, 8), bool], Tensor[(16, 6, 14), bool], Tensor[(288, 4), int8], Tensor[(9, 5, 12), float64], Tensor[(5, 28), float32], Tensor[(176, 4), float64], Tensor[(13, 7, 9), float32]) {
  %32 = cast(1.83555f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %34 = cast(%var_8102, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %35 = reshape(%32, newshape=[]) /* ty=float32 */;
  %36 = reshape(%33, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %37 = reshape(%34, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %38 = @func_5304(%35, %36, %37) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %39 = cast(%var_8147, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %40 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %41 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %42 = reshape(%39, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %43 = reshape(%40, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %44 = reshape(%41, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %45 = @func_4471(%42, %43, %44) /* ty=(Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) */;
  %46 = cast(%var_8148, dtype="int8") /* ty=Tensor[(819), int8] */;
  %47 = cast(1.83555f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %48 = cast(%var_8102, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %49 = reshape(%48, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %50 = @func_93(%49) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %51 = cast(%var_8200, dtype="int8") /* ty=Tensor[(288, 4), int8] */;
  %52 = reshape(%51, newshape=[96, 12]) /* ty=Tensor[(96, 12), int8] */;
  %53 = @func_6523(%52) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) */;
  %54 = cast(%var_8077, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %55 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(9, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = floor_mod(%56, %57) /* ty=Tensor[(9, 5, 12), float32] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
  %60 = cast(%var_8210, dtype="float64") /* ty=Tensor[(176, 4), float64] */;
  %61 = cast(1.83555f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %62 = %38.1;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %64 = reshape(%60, newshape=[1, 704]) /* ty=Tensor[(1, 704), float64] */;
  %65 = reshape(%61, newshape=[]) /* ty=uint16 */;
  %66 = reshape(%63, newshape=[5, 28]) /* ty=Tensor[(5, 28), float32] */;
  %67 = @func_7086(%64, %65, %66) /* ty=(Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) */;
  %68 = cast(%var_8147, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %69 = left_shift(%46, %47) /* ty=Tensor[(819), int8] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(819), float32] */;
  %71 = cast(%var_8148, dtype="float32") /* ty=Tensor[(819), float32] */;
  %72 = reshape(%68, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %73 = reshape(%70, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %74 = reshape(%71, newshape=[273, 3]) /* ty=Tensor[(273, 3), float32] */;
  %75 = @func_4471(%72, %73, %74) /* ty=(Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) */;
  %76 = %45.0;
  %77 = %50.0;
  %78 = %53.0;
  %79 = acos(%59) /* ty=Tensor[(9, 5, 12), float64] */;
  %80 = %67.5;
  %81 = %75.4;
  (%62, meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, %var_8102, %76, %var_8147, %69, %77, %78, %var_8200, %79, %80, %var_8210, %81)
}

def @func_4609(%var_4606: Tensor[(320, 2), float64], %var_4607: Tensor[(12, 100), float64], %var_4608: Tensor[(240), float64]) -> (Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(10, 4, 16), float64], Tensor[(320, 2), float64], Tensor[(13, 9, ?), int32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(819), float32]) {
  %111 = fn (%var_4563: Tensor[(320, 2), float64], %var_4587: Tensor[(12, 100), float64], %var_4588: Tensor[(240), float64]) -> (Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(10, 4, 16), float64], Tensor[(320, 2), float64], Tensor[(13, 9, ?), int32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(819), float32]) {
    %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %83 = reshape(%82, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %84 = @func_93(%83) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %85 = cast(%var_4563, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
    %86 = reshape(%85, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
    %87 = @func_3533(%86) /* ty=(Tensor[(10, 4, 16), float64],) */;
    %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
    %89 = exp(%88) /* ty=Tensor[(13, 9, 1), float32] */;
    %90 = cast(%89, dtype="float64") /* ty=Tensor[(13, 9, 1), float64] */;
    %91 = log2(%90) /* ty=Tensor[(13, 9, 1), float64] */;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
    %93 = log(%92) /* ty=Tensor[(13, 9, 1), float32] */;
    %94 = cast(%89, dtype="int32") /* ty=Tensor[(13, 9, 1), int32] */;
    %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
    %96 = cast(%93, dtype="int32") /* ty=Tensor[(13, 9, 1), int32] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %98 = cast(%var_4587, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
    %99 = cast(%var_4588, dtype="float64") /* ty=Tensor[(240), float64] */;
    %100 = reshape(%98, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
    %101 = reshape(%99, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %102 = @func_2211(%100, %101) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
    %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(819), float32] */, dtype="float32") /* ty=Tensor[(819), float32] */;
    %104 = reshape(%103, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float32] */;
    %105 = @func_4410(%104) /* ty=(Tensor[(13, 7, 9), float32],) */;
    %106 = %84.0;
    %107 = %87.0;
    %108 = minimum(%96, %97) /* ty=Tensor[(13, 9, ?), int32] */;
    %109 = %102.0;
    %110 = %105.0;
    (%106, meta[relay.Constant][4] /* ty=Tensor[(1248), bool] */, %107, %var_4563, %108, %109, %var_4587, %var_4588, %110, meta[relay.Constant][6] /* ty=Tensor[(819), float32] */)
  };
  %111(%var_4606, %var_4607, %var_4608) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(10, 4, 16), float64], Tensor[(320, 2), float64], Tensor[(13, 9, ?), int32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(819), float32]) */
}

def @func_1504(%var_1503: Tensor[(12, 16, 16), float32]) -> (Tensor[(12, 16, 16), float32],) {
  %114 = fn (%var_1486: Tensor[(12, 16, 16), float32]) -> (Tensor[(12, 16, 16), float32],) {
    %112 = cast(%var_1486, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
    %113 = atanh(%112) /* ty=Tensor[(12, 16, 16), float32] */;
    (%113,)
  };
  %114(%var_1503) /* ty=(Tensor[(12, 16, 16), float32],) */
}

def @func_1577(%var_1563: float64, %var_1564: Tensor[(2, 12, 10), float64]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
  %115 = cast(%var_1563, dtype="float64") /* ty=float64 */;
  %116 = cast(%var_1564, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %117 = cast(meta[relay.Constant][7] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %118 = reshape(%117, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %119 = @func_93(%118) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %120 = power(%115, %116) /* ty=Tensor[(2, 12, 10), float64] */;
  %121 = %119.1;
  (%120, %121, meta[relay.Constant][7] /* ty=Tensor[(1248), bool] */)
}

def @func_7898(%var_7865: float64, %var_7866: Tensor[(240), float64]) -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], float64, Tensor[(240), float64], Tensor[(13, 12, 8), bool], Tensor[(1, 44), float32], Tensor[(1232), float64]) {
  %122 = cast(%var_7865, dtype="float64") /* ty=float64 */;
  %123 = cast(%var_7866, dtype="float64") /* ty=Tensor[(240), float64] */;
  %124 = reshape(%122, newshape=[]) /* ty=float64 */;
  %125 = reshape(%123, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float64] */;
  %126 = @func_1577(%124, %125) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
  %127 = %126.1;
  %128 = cast(%127, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %129 = reshape(%128, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %130 = @func_93(%129) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %132 = reshape(%131, newshape=[7, 16, 11]) /* ty=Tensor[(7, 16, 11), float64] */;
  %133 = @func_4146(%132) /* ty=(Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) */;
  %134 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
  %135 = %130.1;
  %136 = %133.1;
  (%134, %127, %var_7865, %var_7866, %135, %136, meta[relay.Constant][8] /* ty=Tensor[(1232), float64] */)
}

def @func_7637(%var_7636: Tensor[(384, 8), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) {
  %142 = fn (%var_7633: Tensor[(384, 8), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) {
    %137 = cast(%var_7633, dtype="float32") /* ty=Tensor[(384, 8), float32] */;
    %138 = reshape(%137, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
    %139 = @func_6372(%138) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
    %140 = @func_6746() /* ty=Tensor[(16, 6, 14), float32] */;
    %141 = %139.1;
    (%140, %141, %var_7633)
  };
  %142(%var_7636) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) */
}

def @func_8761() -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], Tensor[(576), float32], Tensor[(16, 6, 14), bool], Tensor[(1078), bool]) {
  %161 = fn () -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], Tensor[(576), float32], Tensor[(16, 6, 14), bool], Tensor[(1078), bool]) {
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %144 = reshape(%143, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %145 = @func_1357(%144) /* ty=(Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) */;
    %146 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
    %148 = cast(meta[relay.Constant][10] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
    %149 = reshape(%147, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), uint32] */;
    %150 = reshape(%148, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), uint32] */;
    %151 = @func_7797(%149, %150) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) */;
    %152 = %151.0;
    %153 = cast(%152, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %154 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1078), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(1078), uint32] */, dtype="bool") /* ty=Tensor[(1078), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?), bool] */;
    %157 = @func_8046() /* ty=Tensor[(16, 6, 14), bool] */;
    %158 = %145.4;
    %159 = %146.0;
    %160 = greater_equal(%155, %156) /* ty=Tensor[(1078), bool] */;
    (%157, %158, meta[relay.Constant][9] /* ty=Tensor[(576), float32] */, %159, %160)
  };
  %161() /* ty=(Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], Tensor[(576), float32], Tensor[(16, 6, 14), bool], Tensor[(1078), bool]) */
}

def @func_3849(%var_3844: Tensor[(11, 2, 2), float32]) -> (Tensor[(11, 2, 2), float32],) {
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 2), float32] */;
  %163 = shape_of(%var_3844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_3844, dtype="float32") /* ty=Tensor[(11, 2, 2), float32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %166 = power(%164, %165) /* ty=Tensor[(11, 2, 2), float32] */;
  (%166,)
}

def @func_4471(%var_4427: Tensor[(240), float64], %var_4430: Tensor[(273, 3), float32], %var_4437: Tensor[(273, 3), float32]) -> (Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) {
  %167 = cast(-7.71051f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %168 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 12), float64] */, dtype="bool") /* ty=Tensor[(1, 12), bool] */;
  %169 = cast(meta[relay.Constant][13] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %171 = cast(%var_4427, dtype="float64") /* ty=Tensor[(240), float64] */;
  %172 = reshape(%169, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %173 = reshape(%170, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %174 = reshape(%171, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %175 = @func_3769(%172, %173, %174) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) */;
  %176 = cast(%var_4430, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %177 = reshape(%176, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float32] */;
  %178 = @func_4410(%177) /* ty=(Tensor[(13, 7, 9), float32],) */;
  %179 = cast(%var_4437, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %180 = shape_of(%var_4430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %181 = cast(%var_4430, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %183 = cast(%var_4430, dtype="float64") /* ty=Tensor[(273, 3), float64] */;
  %184 = cosh(%183) /* ty=Tensor[(273, 3), float64] */;
  %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(273, 3), float64] */, dtype="int8") /* ty=Tensor[(273, 3), int8] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(2), int32] */;
  %187 = cast(%184, dtype="int8") /* ty=Tensor[(273, 3), int8] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %189 = right_shift(%187, %188) /* ty=Tensor[(273, 3), int8] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %191 = shape_of(%184, dtype="int32") /* ty=Tensor[(2), int32] */;
  %192 = cast(%184, dtype="float32") /* ty=Tensor[(273, 3), float32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %194 = cast(meta[relay.Constant][15] /* ty=Tensor[(273, 3), int8] */, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %195 = shape_of(%189, dtype="int32") /* ty=Tensor[(2), int32] */;
  %196 = cast(%189, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %198 = less_equal(%167, %168) /* ty=Tensor[(1, 12), bool] */;
  %199 = %175.1;
  %200 = %178.0;
  %201 = less_equal(%181, %182) /* ty=Tensor[(273, 3), bool] */;
  %202 = floor_divide(%192, %193) /* ty=Tensor[(273, 3), float32] */;
  %203 = equal(%196, %197) /* ty=Tensor[(273, 3), bool] */;
  (%198, %199, meta[relay.Constant][13] /* ty=Tensor[(176, 1), float64] */, %var_4427, %200, %201, %202, %203)
}

def @func_8046() -> Tensor[(16, 6, 14), bool] {
  %204 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %204.0
}

def @func_7023() -> (Tensor[(16, 6, 14), bool],) {
  %206 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %205 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_6734() -> (Tensor[(16, 6, 14), bool],) {
  %208 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %207 = @func_6612() /* ty=Tensor[(16, 6, 14), bool] */;
    (%207,)
  };
  %208() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_6895(%var_6892: Tensor[(16, 6, 14), bool], %var_6893: Tensor[(630), uint8], %var_6894: Tensor[(270), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(630), uint8], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(270), float32], Tensor[(14, 9, 5), float32]) {
  %231 = fn (%var_6845: Tensor[(16, 6, 14), bool], %var_6862: Tensor[(630), uint8], %var_6883: Tensor[(270), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(630), uint8], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(270), float32], Tensor[(14, 9, 5), float32]) {
    %209 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %210 = %209.0;
    %211 = cast(%var_6845, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
    %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%210, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %215 = cast(meta[relay.Constant][16] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %216 = cast(meta[relay.Constant][16] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %217 = cast(%var_6883, dtype="float32") /* ty=Tensor[(270), float32] */;
    %218 = reshape(%215, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %219 = reshape(%216, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %220 = reshape(%217, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
    %221 = @func_2392(%218, %219, %220) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
    %222 = cast(%var_6862, dtype="uint8") /* ty=Tensor[(630), uint8] */;
    %223 = reshape(%222, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
    %224 = @func_3713(%223) /* ty=Tensor[(14, 9, 5), uint8] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
    %226 = tan(%225) /* ty=Tensor[(14, 9, 5), float64] */;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
    %228 = divide(%213, %214) /* ty=Tensor[(16, 6, 14), float32] */;
    %229 = %221.0;
    %230 = sinh(%227) /* ty=Tensor[(14, 9, 5), float32] */;
    (%228, %var_6862, %229, meta[relay.Constant][16] /* ty=Tensor[(520), float32] */, %var_6883, %230)
  };
  %231(%var_6892, %var_6893, %var_6894) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(630), uint8], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(270), float32], Tensor[(14, 9, 5), float32]) */
}

def @func_387(%var_385: Tensor[(16, 3, 1), float32], %var_386: Tensor[(1248), bool]) -> (Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
  %245 = fn (%var_362: Tensor[(16, 3, 1), float32], %var_376: Tensor[(1248), bool]) -> (Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
    %232 = cast(%var_362, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
    %233 = log(%232) /* ty=Tensor[(16, 3, 1), float32] */;
    %234 = cast(%233, dtype="float64") /* ty=Tensor[(16, 3, 1), float64] */;
    %235 = log10(%234) /* ty=Tensor[(16, 3, 1), float64] */;
    %236 = cast(%235, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
    %237 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%233, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %240 = cast(%var_376, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %241 = reshape(%240, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %242 = @func_93(%241) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %243 = bitwise_or(%238, %239) /* ty=Tensor[(16, 3, ?), int32] */;
    %244 = %242.0;
    (%243, %244, %var_376)
  };
  %245(%var_385, %var_386) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */
}

def @func_7726() -> (Tensor[(16, 6, 14), bool],) {
  %246 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %247 = %246.0;
  (%247,)
}

def @func_7989(%var_7988: Tensor[(1, 14), float32]) -> Tensor[(1, 14), float32] {
  %249 = fn (%var_7978: Tensor[(1, 14), float32]) -> Tensor[(1, 14), float32] {
    %248 = cast(%var_7978, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
    sinh(%248) /* ty=Tensor[(1, 14), float32] */
  };
  %249(%var_7988) /* ty=Tensor[(1, 14), float32] */
}

def @func_5519(%var_5516: Tensor[(16, 5, 16), float64]) -> Tensor[(16, 5, 16), float64] {
  %250 = cast(%var_5516, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  sin(%250) /* ty=Tensor[(16, 5, 16), float64] */
}

def @func_4476(%var_4473: Tensor[(240), float64], %var_4474: Tensor[(273, 3), float32], %var_4475: Tensor[(273, 3), float32]) -> (Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) {
  @func_4471(%var_4473, %var_4474, %var_4475) /* ty=(Tensor[(1, 12), bool], Tensor[(15, 10, 8), float64], Tensor[(176, 1), float64], Tensor[(240), float64], Tensor[(13, 7, 9), float32], Tensor[(273, 3), bool], Tensor[(273, 3), float32], Tensor[(273, 3), bool]) */
}

def @main() -> Tensor[(16, 6, 14), int16] {
  %251 = @func_7257() /* ty=Tensor[(16, 6, 14), float32] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %253 = sigmoid(%252) /* ty=Tensor[(16, 6, 14), float32] */;
  %254 = cast(%251, dtype="int16") /* ty=Tensor[(16, 6, 14), int16] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="int16") /* ty=Tensor[(16, 6, 14), int16] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%256, %257) /* ty=Tensor[(16, 6, 14), int16] */
}

def @func_6525(%var_6524: Tensor[(96, 12), int8]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) {
  %266 = fn (%var_6521: Tensor[(96, 12), int8]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) {
    %258 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %259 = cast(%var_6521, dtype="int8") /* ty=Tensor[(96, 12), int8] */;
    %260 = cast(%var_6521, dtype="int8") /* ty=Tensor[(96, 12), int8] */;
    %261 = reshape(%259, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
    %262 = reshape(%260, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
    %263 = @func_5099(%261, %262) /* ty=(Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) */;
    %264 = %258.0;
    %265 = %263.1;
    (%264, %265, %var_6521)
  };
  %266(%var_6524) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), float64], Tensor[(96, 12), int8]) */
}

def @func_4884(%var_4883: Tensor[(10, 6, 7), bool]) -> Tensor[(10, 6, 7), bool] {
  %271 = fn (%var_4874: Tensor[(10, 6, 7), bool]) -> Tensor[(10, 6, 7), bool] {
    %267 = cast(%var_4874, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
    %268 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 6, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 6, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%269, %270) /* ty=Tensor[(10, 6, 7), bool] */
  };
  %271(%var_4883) /* ty=Tensor[(10, 6, 7), bool] */
}

def @func_3852(%var_3850: Tensor[(11, 2, 2), float32]) -> (Tensor[(11, 2, 2), float32],) {
  @func_3849(%var_3850) /* ty=(Tensor[(11, 2, 2), float32],) */
}

def @func_7090(%var_7087: Tensor[(1, 704), float64], %var_7088: uint16, %var_7089: Tensor[(5, 28), float32]) -> (Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) {
  %290 = fn (%var_7080: Tensor[(1, 704), float64], %var_7081: uint16, %var_7083: Tensor[(5, 28), float32]) -> (Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) {
    %272 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %273 = %272.0;
    %274 = cast(%273, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
    %275 = cast(%var_7080, dtype="float64") /* ty=Tensor[(1, 704), float64] */;
    %276 = cast(%var_7080, dtype="float64") /* ty=Tensor[(1, 704), float64] */;
    %277 = cast(%var_7081, dtype="uint16") /* ty=uint16 */;
    %278 = cast(meta[relay.Constant][18] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %279 = cast(%var_7083, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
    %280 = cast(meta[relay.Constant][19] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %281 = reshape(%275, newshape=[16, 4, 11]) /* ty=Tensor[(16, 4, 11), float64] */;
    %282 = reshape(%276, newshape=[16, 4, 11]) /* ty=Tensor[(16, 4, 11), float64] */;
    %283 = reshape(%277, newshape=[]) /* ty=uint16 */;
    %284 = reshape(%278, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %285 = reshape(%279, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %286 = reshape(%280, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
    %287 = @func_3386(%281, %282, %283, %284, %285, %286) /* ty=(Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) */;
    %288 = log(%274) /* ty=Tensor[(16, 6, 14), float64] */;
    %289 = %287.1;
    (%288, %289, %var_7080, %var_7081, meta[relay.Constant][18] /* ty=Tensor[(520), float32] */, %var_7083, meta[relay.Constant][19] /* ty=Tensor[(3072), float32] */)
  };
  %290(%var_7087, %var_7088, %var_7089) /* ty=(Tensor[(16, 6, 14), float64], Tensor[(12, 100), float64], Tensor[(1, 704), float64], uint16, Tensor[(520), float32], Tensor[(5, 28), float32], Tensor[(3072), float32]) */
}

def @func_707(%var_664: int8, %var_665: Tensor[(10, 1, 3), int8]) -> (Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) {
  %291 = cast(%var_664, dtype="int8") /* ty=int8 */;
  %292 = cast(%var_665, dtype="int8") /* ty=Tensor[(10, 1, 3), int8] */;
  %293 = add(%291, %292) /* ty=Tensor[(10, 1, 3), int8] */;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %296 = cast(meta[relay.Constant][21] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %297 = reshape(%295, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
  %298 = reshape(%296, newshape=[104, 12]) /* ty=Tensor[(104, 12), bool] */;
  %299 = @func_107(%297, %298) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %301 = reshape(%300, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %302 = @func_93(%301) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %303 = acos(%294) /* ty=Tensor[(10, 1, 3), float64] */;
  %304 = %299.2;
  %305 = %302.0;
  (%303, %304, meta[relay.Constant][20] /* ty=Tensor[(585), float64] */, meta[relay.Constant][21] /* ty=Tensor[(1248), bool] */, %305)
}

def @func_5103(%var_5101: Tensor[(16, 12, 6), int8], %var_5102: Tensor[(16, 12, 6), int8]) -> (Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) {
  @func_5099(%var_5101, %var_5102) /* ty=(Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) */
}

def @func_8868() -> (Tensor[(16, 6, 14), bool],) {
  @func_8866() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_7198(%var_7197: int8) -> (Tensor[(16, 6, 14), bool], Tensor[(1248), bool], int8, Tensor[(30), int8], Tensor[(1248), bool]) {
  %320 = fn (%var_7168: int8) -> (Tensor[(16, 6, 14), bool], Tensor[(1248), bool], int8, Tensor[(30), int8], Tensor[(1248), bool]) {
    %306 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %307 = cast(%var_7168, dtype="int8") /* ty=int8 */;
    %308 = cast(meta[relay.Constant][22] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
    %309 = reshape(%307, newshape=[]) /* ty=int8 */;
    %310 = reshape(%308, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int8] */;
    %311 = @func_707(%309, %310) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) */;
    %312 = cast(%var_7168, dtype="int8") /* ty=int8 */;
    %313 = cast(meta[relay.Constant][22] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
    %314 = reshape(%312, newshape=[]) /* ty=int8 */;
    %315 = reshape(%313, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int8] */;
    %316 = @func_707(%314, %315) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) */;
    %317 = %306.0;
    %318 = %311.3;
    %319 = %316.3;
    (%317, %318, %var_7168, meta[relay.Constant][22] /* ty=Tensor[(30), int8] */, %319)
  };
  %320(%var_7197) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(1248), bool], int8, Tensor[(30), int8], Tensor[(1248), bool]) */
}

def @func_5099(%var_5031: Tensor[(16, 12, 6), int8], %var_5032: Tensor[(16, 12, 6), int8]) -> (Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) {
  %321 = cast(%var_5032, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %322 = shape_of(%var_5031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_5031, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = less_equal(%323, %324) /* ty=Tensor[(16, 12, 6), bool] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %327 = atan(%326) /* ty=Tensor[(16, 12, 6), float64] */;
  %328 = cast(%325, dtype="uint16") /* ty=Tensor[(16, 12, 6), uint16] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="uint16") /* ty=Tensor[(16, 12, 6), uint16] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %332 = cast(%325, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %333 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%327, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = cast(%var_5031, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %338 = reshape(%337, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %339 = @func_1502(%338) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %340 = %339.0;
  %341 = cast(%340, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
  %342 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(3072), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %343 = cast(meta[relay.Constant][23] /* ty=Tensor[(3072), float32] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?), bool] */;
  %345 = cast(meta[relay.Constant][24] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %346 = reshape(%345, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %347 = @func_1357(%346) /* ty=(Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) */;
  %348 = greater(%343, %344) /* ty=Tensor[(3072), bool] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %350 = reshape(%349, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %351 = @func_1502(%350) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %352 = logical_xor(%330, %331) /* ty=Tensor[(16, 12, 6), uint16] */;
  %353 = add(%334, %335) /* ty=Tensor[(16, 12, 6), float64] */;
  %354 = acosh(%336) /* ty=Tensor[(16, 12, 6), float32] */;
  %355 = %347.2;
  %356 = %351.0;
  (%352, %353, %354, %348, %355, meta[relay.Constant][24] /* ty=Tensor[(576), float32] */, %356)
}

def @func_7313() -> (Tensor[(16, 6, 14), bool],) {
  %357 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
  (%357,)
}

def @func_8025() -> Tensor[(16, 6, 14), bool] {
  @func_7050() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_1357(%var_1303: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) {
  %358 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 12, 3), float64] */, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %359 = exp(%358) /* ty=Tensor[(16, 12, 3), float32] */;
  %360 = cast(%var_1303, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = cast(meta[relay.Constant][26] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %365 = reshape(%364, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %366 = @func_93(%365) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %367 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 12, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %368 = sigmoid(%367) /* ty=Tensor[(16, 12, 3), float64] */;
  %369 = cast(%368, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %370 = atanh(%369) /* ty=Tensor[(16, 12, 3), float64] */;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %372 = %366.1;
  %373 = cast(%372, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %374 = reshape(%373, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %375 = @func_93(%374) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %376 = cast(%var_1303, dtype="int16") /* ty=Tensor[(16, 12, 3), int16] */;
  %377 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%370, dtype="int16") /* ty=Tensor[(16, 12, 3), int16] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %380 = floor_divide(%362, %363) /* ty=Tensor[(16, 12, 3), float32] */;
  %381 = rsqrt(%371) /* ty=Tensor[(16, 12, 3), float64] */;
  %382 = %375.0;
  %383 = bitwise_xor(%378, %379) /* ty=Tensor[(16, 12, 3), int16] */;
  (%380, %372, meta[relay.Constant][26] /* ty=Tensor[(1248), bool] */, %381, %382, %383)
}

def @func_6331(%var_6329: Tensor[(16, 6, 14), bool]) -> (Tensor[(16, 6, 14), float32],) {
  @func_6328(%var_6329) /* ty=(Tensor[(16, 6, 14), float32],) */
}

def @func_8614() -> (Tensor[(16, 6, 14), bool],) {
  %385 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %384 = @func_8046() /* ty=Tensor[(16, 6, 14), bool] */;
    (%384,)
  };
  %385() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_8027() -> Tensor[(16, 6, 14), bool] {
  @func_8025() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_3716(%var_3714: Tensor[(14, 9, 5), uint8]) -> Tensor[(14, 9, 5), uint8] {
  @func_3713(%var_3714) /* ty=Tensor[(14, 9, 5), uint8] */
}

def @func_6328(%var_6316: Tensor[(16, 6, 14), bool]) -> (Tensor[(16, 6, 14), float32],) {
  %386 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %387 = %386.0;
  %388 = cast(%var_6316, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = maximum(%390, %391) /* ty=Tensor[(16, 6, 14), float32] */;
  (%392,)
}

def @func_8643() -> Tensor[(16, 6, 14), bool] {
  %394 = fn () -> Tensor[(16, 6, 14), bool] {
    %393 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %393.0
  };
  %394() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_2893(%var_2890: Tensor[(1, 14, 10), int32], %var_2891: Tensor[(3, 14, 10), int32], %var_2892: Tensor[(4, 312), bool]) -> (Tensor[(3, 14, 10), uint64], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool]) {
  @func_2888(%var_2890, %var_2891, %var_2892) /* ty=(Tensor[(3, 14, 10), uint64], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool]) */
}

def @func_1360(%var_1358: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) {
  @func_1357(%var_1358) /* ty=(Tensor[(16, 12, 3), float32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(16, 12, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(16, 12, 3), int16]) */
}

def @func_8048() -> Tensor[(16, 6, 14), bool] {
  @func_8046() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_3713(%var_3709: Tensor[(14, 9, 5), uint8]) -> Tensor[(14, 9, 5), uint8] {
  %395 = cast(%var_3709, dtype="uint8") /* ty=Tensor[(14, 9, 5), uint8] */;
  %396 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 9, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 9, 5), uint8] */, dtype="uint8") /* ty=Tensor[(14, 9, 5), uint8] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%397, %398) /* ty=Tensor[(14, 9, 5), uint8] */
}

def @func_6374(%var_6373: Tensor[(3072), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
  %407 = fn (%var_6352: Tensor[(3072), float32]) -> (Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
    %399 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %400 = %399.0;
    %401 = cast(%400, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
    %402 = cast(%var_6352, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %403 = reshape(%402, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
    %404 = @func_1502(%403) /* ty=(Tensor[(12, 16, 16), float32],) */;
    %405 = atan(%401) /* ty=Tensor[(16, 6, 14), float32] */;
    %406 = %404.0;
    (%405, %406, %var_6352)
  };
  %407(%var_6373) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */
}

def @func_8281() -> Tensor[(16, 6, 14), float64] {
  %411 = fn () -> Tensor[(16, 6, 14), float64] {
    %408 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %409 = %408.0;
    %410 = cast(%409, dtype="float64") /* ty=Tensor[(16, 6, 14), float64] */;
    sinh(%410) /* ty=Tensor[(16, 6, 14), float64] */
  };
  %411() /* ty=Tensor[(16, 6, 14), float64] */
}

def @func_6746() -> Tensor[(16, 6, 14), float32] {
  %412 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  sqrt(%414) /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_96(%var_94: Tensor[(13, 12, 8), bool]) -> (Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) {
  @func_93(%var_94) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */
}

def @func_2888(%var_2863: Tensor[(1, 14, 10), int32], %var_2864: Tensor[(3, 14, 10), int32], %var_2886: Tensor[(4, 312), bool]) -> (Tensor[(3, 14, 10), uint64], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool]) {
  %415 = cast(%var_2863, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %416 = cast(%var_2864, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %417 = greater(%415, %416) /* ty=Tensor[(3, 14, 10), bool] */;
  %418 = cast(%var_2864, dtype="uint64") /* ty=Tensor[(3, 14, 10), uint64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="uint64") /* ty=Tensor[(3, 14, 10), uint64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %422 = cast(%var_2886, dtype="bool") /* ty=Tensor[(4, 312), bool] */;
  %423 = reshape(%422, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %424 = @func_93(%423) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %425 = add(%420, %421) /* ty=Tensor[(3, 14, 10), uint64] */;
  %426 = %424.0;
  (%425, %426, %var_2886)
}

def @func_2397(%var_2394: Tensor[(13, 10, 4), float32], %var_2395: Tensor[(13, 10, 4), float32], %var_2396: Tensor[(6, 45), float32]) -> (Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) {
  @func_2392(%var_2394, %var_2395, %var_2396) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */
}

def @func_5522(%var_5520: Tensor[(16, 5, 16), float64]) -> Tensor[(16, 5, 16), float64] {
  @func_5519(%var_5520) /* ty=Tensor[(16, 5, 16), float64] */
}

def @func_4776(%var_4749: Tensor[(13, 13, 15), uint32], %var_4750: Tensor[(13, 13, 15), uint32], %var_4764: Tensor[(1755), uint64]) -> (Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) {
  %427 = cast(%var_4750, dtype="uint32") /* ty=Tensor[(13, 13, 15), uint32] */;
  %428 = shape_of(%var_4749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_4749, dtype="uint32") /* ty=Tensor[(13, 13, 15), uint32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %431 = cast(%var_4749, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %432 = cast(meta[relay.Constant][28] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %433 = cast(%var_4764, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %434 = reshape(%432, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %435 = reshape(%433, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
  %436 = @func_896(%434, %435) /* ty=(Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) */;
  %437 = right_shift(%429, %430) /* ty=Tensor[(13, 13, 15), uint32] */;
  %438 = cosh(%431) /* ty=Tensor[(13, 13, 15), float64] */;
  %439 = %436.0;
  (%437, %438, %439, meta[relay.Constant][28] /* ty=Tensor[(140), float32] */, %var_4764)
}

def @func_7226(%var_7217: Tensor[(630), uint8]) -> (Tensor[(16, 6, 14), bool], Tensor[(14, 9, 5), uint8], Tensor[(630), uint8]) {
  %440 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %441 = cast(%var_7217, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %442 = reshape(%441, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
  %443 = %440.0;
  %444 = @func_3713(%442) /* ty=Tensor[(14, 9, 5), uint8] */;
  (%443, %444, %var_7217)
}

def @func_7800(%var_7798: Tensor[(11, 14, 7), uint32], %var_7799: Tensor[(11, 14, 7), uint32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) {
  %460 = fn (%var_7737: Tensor[(11, 14, 7), uint32], %var_7738: Tensor[(11, 14, 7), uint32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) {
    %445 = cast(%var_7738, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
    %446 = shape_of(%var_7737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%var_7737, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %449 = cast(meta[relay.Constant][29] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %450 = reshape(%449, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %451 = @func_93(%450) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %452 = %451.0;
    %453 = cast(meta[relay.Constant][29] /* ty=Tensor[(1248), bool] */, dtype="int64") /* ty=Tensor[(1248), int64] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(%452, dtype="int64") /* ty=Tensor[(13, 12, 8), int64] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %457 = bitwise_or(%447, %448) /* ty=Tensor[(11, 14, 7), uint32] */;
    %458 = bitwise_and(%455, %456) /* ty=Tensor[(13, 12, 8), int64] */;
    %459 = @func_7257() /* ty=Tensor[(16, 6, 14), float32] */;
    (%457, %458, %459)
  };
  %460(%var_7798, %var_7799) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(13, 12, 8), int64], Tensor[(16, 6, 14), float32]) */
}

def @func_6178() -> (Tensor[(16, 6, 14), bool],) {
  %470 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %461 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
    %462 = rsqrt(%461) /* ty=Tensor[(16, 6, 14), float32] */;
    %463 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
    %464 = atanh(%463) /* ty=Tensor[(16, 6, 14), float32] */;
    %465 = cast(%464, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
    %466 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%462, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %469 = less_equal(%467, %468) /* ty=Tensor[(16, 6, 14), bool] */;
    (%469,)
  };
  %470() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_2392(%var_2373: Tensor[(13, 10, 4), float32], %var_2374: Tensor[(13, 10, 4), float32], %var_2386: Tensor[(6, 45), float32]) -> (Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) {
  %471 = cast(%var_2374, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %472 = shape_of(%var_2373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%var_2373, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = cast(%var_2386, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %476 = reshape(%475, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %477 = not_equal(%473, %474) /* ty=Tensor[(13, 10, 4), bool] */;
  %478 = @func_1863(%476) /* ty=Tensor[(9, 5, 6), float32] */;
  (%477, %478, %var_2386)
}

def @func_3535(%var_3534: Tensor[(10, 4, 16), float64]) -> (Tensor[(10, 4, 16), float64],) {
  %481 = fn (%var_3523: Tensor[(10, 4, 16), float64]) -> (Tensor[(10, 4, 16), float64],) {
    %479 = cast(%var_3523, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
    %480 = asin(%479) /* ty=Tensor[(10, 4, 16), float64] */;
    (%480,)
  };
  %481(%var_3534) /* ty=(Tensor[(10, 4, 16), float64],) */
}

def @func_3450(%var_3415: Tensor[(3, 6, 8), float32], %var_3428: Tensor[(4, 312), bool], %var_3434: uint16) -> (Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) {
  %482 = cast(%var_3415, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %483 = rsqrt(%482) /* ty=Tensor[(3, 6, 8), float32] */;
  %484 = cast(%var_3415, dtype="int32") /* ty=Tensor[(3, 6, 8), int32] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="int32") /* ty=Tensor[(3, 6, 8), int32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %488 = cast(%var_3428, dtype="bool") /* ty=Tensor[(4, 312), bool] */;
  %489 = reshape(%488, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
  %490 = @func_93(%489) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
  %491 = cast(%var_3434, dtype="uint16") /* ty=uint16 */;
  %492 = cast(meta[relay.Constant][31] /* ty=Tensor[(52), uint16] */, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %493 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 52), float32] */, dtype="float32") /* ty=Tensor[(10, 52), float32] */;
  %494 = %490.0;
  %495 = cast(%494, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %496 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %497 = cast(meta[relay.Constant][34] /* ty=Tensor[(24, 128), float32] */, dtype="float32") /* ty=Tensor[(24, 128), float32] */;
  %498 = reshape(%491, newshape=[]) /* ty=uint16 */;
  %499 = reshape(%492, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
  %500 = reshape(%493, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %501 = reshape(%495, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %502 = reshape(%496, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %503 = reshape(%497, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %504 = @func_2801(%498, %499, %500, %501, %502, %503) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %505 = cast(%483, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %506 = logical_xor(%486, %487) /* ty=Tensor[(3, 6, 8), int32] */;
  %507 = %504.3;
  %508 = log2(%505) /* ty=Tensor[(3, 6, 8), float32] */;
  (%506, %494, %var_3428, %507, %var_3434, meta[relay.Constant][31] /* ty=Tensor[(52), uint16] */, meta[relay.Constant][32] /* ty=Tensor[(10, 52), float32] */, meta[relay.Constant][33] /* ty=Tensor[(1, 140), float32] */, meta[relay.Constant][34] /* ty=Tensor[(24, 128), float32] */, %508)
}

def @func_6840() -> (Tensor[(16, 6, 14), bool],) {
  %511 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %509 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_6268(%var_6263: Tensor[(26, 2), uint16], %var_6264: Tensor[(1248), bool], %var_6265: Tensor[(140), float32], %var_6266: Tensor[(270), float32], %var_6267: Tensor[(44), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(240), float64], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(9, 5, 6), float32], Tensor[(270), float32], Tensor[(26, 2), uint32], Tensor[(11, 2, 2), float32], Tensor[(44), float32], Tensor[(3072), float32]) {
  %550 = fn (%var_6193: Tensor[(26, 2), uint16], %var_6195: Tensor[(1248), bool], %var_6196: Tensor[(140), float32], %var_6211: Tensor[(270), float32], %var_6246: Tensor[(44), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(240), float64], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(9, 5, 6), float32], Tensor[(270), float32], Tensor[(26, 2), uint32], Tensor[(11, 2, 2), float32], Tensor[(44), float32], Tensor[(3072), float32]) {
    %512 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %513 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %514 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
    %515 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %516 = cast(%var_6195, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %517 = cast(%var_6196, dtype="float32") /* ty=Tensor[(140), float32] */;
    %518 = cast(meta[relay.Constant][37] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %519 = reshape(%513, newshape=[]) /* ty=uint16 */;
    %520 = reshape(%514, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
    %521 = reshape(%515, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %522 = reshape(%516, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %523 = reshape(%517, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %524 = reshape(%518, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
    %525 = @func_2801(%519, %520, %521, %522, %523, %524) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
    %526 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %527 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %528 = cast(%var_6211, dtype="float32") /* ty=Tensor[(270), float32] */;
    %529 = reshape(%526, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %530 = reshape(%527, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %531 = reshape(%528, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
    %532 = @func_2392(%529, %530, %531) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
    %533 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
    %534 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %535 = add(%533, %534) /* ty=Tensor[(26, 2), uint16] */;
    %536 = cast(%var_6193, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
    %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(2), int32] */;
    %538 = cast(%535, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %540 = cast(%var_6246, dtype="float32") /* ty=Tensor[(44), float32] */;
    %541 = reshape(%540, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float32] */;
    %542 = @func_3849(%541) /* ty=(Tensor[(11, 2, 2), float32],) */;
    %543 = cast(meta[relay.Constant][37] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %544 = %512.0;
    %545 = %525.11;
    %546 = %532.1;
    %547 = bitwise_and(%538, %539) /* ty=Tensor[(26, 2), uint32] */;
    %548 = %542.0;
    %549 = sqrt(%543) /* ty=Tensor[(3072), float32] */;
    (%544, %545, meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, %var_6195, %var_6196, %546, %var_6211, %547, %548, %var_6246, %549)
  };
  %550(%var_6263, %var_6264, %var_6265, %var_6266, %var_6267) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(240), float64], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(9, 5, 6), float32], Tensor[(270), float32], Tensor[(26, 2), uint32], Tensor[(11, 2, 2), float32], Tensor[(44), float32], Tensor[(3072), float32]) */
}

def @func_6670(%var_6668: Tensor[(8, 15, 2), float64], %var_6669: Tensor[(8, 15, 2), float64]) -> Tensor[(8, 15, 2), bool] {
  @func_6666(%var_6668, %var_6669) /* ty=Tensor[(8, 15, 2), bool] */
}

def @func_4410(%var_4386: Tensor[(13, 7, 9), float32]) -> (Tensor[(13, 7, 9), float32],) {
  %551 = cast(%var_4386, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %552 = acosh(%551) /* ty=Tensor[(13, 7, 9), float32] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %554 = sin(%553) /* ty=Tensor[(13, 7, 9), float32] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(13, 7, 9), float32] */;
  %556 = exp(%555) /* ty=Tensor[(13, 7, 9), float32] */;
  (%556,)
}

def @func_7687(%var_7686: Tensor[(12, 13, 11), float32]) -> Tensor[(12, 13, 11), float32] {
  %558 = fn (%var_7678: Tensor[(12, 13, 11), float32]) -> Tensor[(12, 13, 11), float32] {
    %557 = cast(%var_7678, dtype="float32") /* ty=Tensor[(12, 13, 11), float32] */;
    rsqrt(%557) /* ty=Tensor[(12, 13, 11), float32] */
  };
  %558(%var_7686) /* ty=Tensor[(12, 13, 11), float32] */
}

def @func_110(%var_108: Tensor[(15, 3, 13), float64], %var_109: Tensor[(104, 12), bool]) -> (Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) {
  %565 = fn (%var_98: Tensor[(15, 3, 13), float64], %var_105: Tensor[(104, 12), bool]) -> (Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) {
    %559 = cast(%var_98, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %560 = cast(%var_105, dtype="bool") /* ty=Tensor[(104, 12), bool] */;
    %561 = reshape(%560, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %562 = @func_93(%561) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %563 = exp(%559) /* ty=Tensor[(15, 3, 13), float64] */;
    %564 = %562.0;
    (%563, %564, %var_105)
  };
  %565(%var_108, %var_109) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(13, 12, 8), bool], Tensor[(104, 12), bool]) */
}

def @func_899(%var_897: Tensor[(10, 14, 1), float32], %var_898: Tensor[(1755), uint64]) -> (Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) {
  %586 = fn (%var_856: Tensor[(10, 14, 1), float32], %var_890: Tensor[(1755), uint64]) -> (Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) {
    %566 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
    %567 = shape_of(%var_856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %568 = cast(%var_856, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %570 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 1), float32] */, dtype="uint16") /* ty=Tensor[(10, 14, 1), uint16] */;
    %571 = shape_of(%var_856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%var_856, dtype="uint16") /* ty=Tensor[(10, 14, 1), uint16] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %574 = cast(%var_890, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
    %575 = reshape(%574, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), uint64] */;
    %576 = @func_225(%575) /* ty=(Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) */;
    %577 = cast(meta[relay.Constant][40] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %578 = %576.2;
    %579 = cast(%578, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
    %580 = reshape(%577, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %581 = reshape(%579, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %582 = @func_384(%580, %581) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */;
    %583 = floor_mod(%568, %569) /* ty=Tensor[(10, 14, ?), float32] */;
    %584 = maximum(%572, %573) /* ty=Tensor[(10, 14, ?), uint16] */;
    %585 = %582.0;
    (%583, %584, %578, %var_890, %585, meta[relay.Constant][40] /* ty=Tensor[(48), float32] */)
  };
  %586(%var_897, %var_898) /* ty=(Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) */
}

def @func_7902(%var_7900: float64, %var_7901: Tensor[(240), float64]) -> (Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], float64, Tensor[(240), float64], Tensor[(13, 12, 8), bool], Tensor[(1, 44), float32], Tensor[(1232), float64]) {
  @func_7898(%var_7900, %var_7901) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(13, 12, 8), bool], float64, Tensor[(240), float64], Tensor[(13, 12, 8), bool], Tensor[(1, 44), float32], Tensor[(1232), float64]) */
}

def @func_7506(%var_7501: Tensor[(1755), uint64], %var_7502: Tensor[(16, 6, 14), bool], %var_7503: Tensor[(1232), float64], %var_7504: Tensor[(33), float64], %var_7505: Tensor[(140), float32]) -> (Tensor[(1152), int8], Tensor[(13, 13, 15), float64], Tensor[(2535), uint32], Tensor[(1755), uint64], Tensor[(16, 6, 14), float32], Tensor[(16, 6, 14), bool], Tensor[(7, 16, 11), float64], Tensor[(1232), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32], Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), int16], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32]) {
  @func_7499(%var_7501, %var_7502, %var_7503, %var_7504, %var_7505) /* ty=(Tensor[(1152), int8], Tensor[(13, 13, 15), float64], Tensor[(2535), uint32], Tensor[(1755), uint64], Tensor[(16, 6, 14), float32], Tensor[(16, 6, 14), bool], Tensor[(7, 16, 11), float64], Tensor[(1232), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32], Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), int16], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32]) */
}

def @func_8866() -> (Tensor[(16, 6, 14), bool],) {
  %587 = @func_7726() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %588 = %587.0;
  (%588,)
}

def @func_6765(%var_6763: uint8, %var_6764: Tensor[(6, 6, 15), uint8]) -> (Tensor[(6, 6, 15), bool],) {
  %592 = fn (%var_6752: uint8, %var_6753: Tensor[(6, 6, 15), uint8]) -> (Tensor[(6, 6, 15), bool],) {
    %589 = cast(%var_6752, dtype="bool") /* ty=bool */;
    %590 = cast(%var_6753, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
    %591 = less(%589, %590) /* ty=Tensor[(6, 6, 15), bool] */;
    (%591,)
  };
  %592(%var_6763, %var_6764) /* ty=(Tensor[(6, 6, 15), bool],) */
}

def @func_8936() -> (Tensor[(16, 6, 14), bool],) {
  @func_8934() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_8824(%var_8823: Tensor[(10, 13, 14), int64]) -> (Tensor[(10, 13, 14), int64], Tensor[(16, 6, 14), float32], Tensor[(3072), float32]) {
  %602 = fn (%var_8805: Tensor[(10, 13, 14), int64]) -> (Tensor[(10, 13, 14), int64], Tensor[(16, 6, 14), float32], Tensor[(3072), float32]) {
    %593 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 13, 14), int64] */, dtype="int64") /* ty=Tensor[(10, 13, 14), int64] */;
    %594 = shape_of(%var_8805, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%var_8805, dtype="int64") /* ty=Tensor[(10, 13, 14), int64] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %597 = cast(meta[relay.Constant][42] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %598 = reshape(%597, newshape=[384, 8]) /* ty=Tensor[(384, 8), float32] */;
    %599 = @func_7635(%598) /* ty=(Tensor[(16, 6, 14), float32], Tensor[(12, 16, 16), float32], Tensor[(384, 8), float32]) */;
    %600 = minimum(%595, %596) /* ty=Tensor[(10, 13, 14), int64] */;
    %601 = %599.0;
    (%600, %601, meta[relay.Constant][42] /* ty=Tensor[(3072), float32] */)
  };
  %602(%var_8823) /* ty=(Tensor[(10, 13, 14), int64], Tensor[(16, 6, 14), float32], Tensor[(3072), float32]) */
}

def @func_6614() -> Tensor[(16, 6, 14), bool] {
  @func_6612() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_1865(%var_1864: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float32] {
  %604 = fn (%var_1845: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float32] {
    %603 = cast(%var_1845, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
    cos(%603) /* ty=Tensor[(9, 5, 6), float32] */
  };
  %604(%var_1864) /* ty=Tensor[(9, 5, 6), float32] */
}

def @func_93(%var_68: Tensor[(13, 12, 8), bool]) -> (Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) {
  %605 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 8), bool] */;
  %606 = cast(%var_68, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %607 = cast(%var_68, dtype="bool") /* ty=Tensor[(13, 12, 8), bool] */;
  %608 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 8), bool] */;
  %609 = logical_and(%605, %606) /* ty=Tensor[(13, 12, 8), bool] */;
  %610 = equal(%607, %608) /* ty=Tensor[(13, 12, 8), bool] */;
  (%609, %610)
}

def @func_4149(%var_4147: Tensor[(7, 16, 11), float64]) -> (Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) {
  @func_4146(%var_4147) /* ty=(Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) */
}

def @func_2808(%var_2802: uint16, %var_2803: Tensor[(2, 13, 2), uint16], %var_2804: Tensor[(520), float32], %var_2805: Tensor[(1248), bool], %var_2806: Tensor[(140), float32], %var_2807: Tensor[(3072), float32]) -> (Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
  %645 = fn (%var_2661: uint16, %var_2662: Tensor[(2, 13, 2), uint16], %var_2680: Tensor[(520), float32], %var_2729: Tensor[(1248), bool], %var_2730: Tensor[(140), float32], %var_2777: Tensor[(3072), float32]) -> (Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) {
    %611 = cast(%var_2661, dtype="bool") /* ty=bool */;
    %612 = cast(%var_2662, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
    %613 = cast(%var_2680, dtype="float32") /* ty=Tensor[(520), float32] */;
    %614 = cast(%var_2680, dtype="float32") /* ty=Tensor[(520), float32] */;
    %615 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %616 = reshape(%613, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %617 = reshape(%614, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), float32] */;
    %618 = reshape(%615, newshape=[6, 45]) /* ty=Tensor[(6, 45), float32] */;
    %619 = @func_2392(%616, %617, %618) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(9, 5, 6), float32], Tensor[(6, 45), float32]) */;
    %620 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %621 = reshape(%620, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %622 = cast(%var_2680, dtype="float64") /* ty=Tensor[(520), float64] */;
    %623 = cast(meta[relay.Constant][45] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
    %624 = cast(%var_2729, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %625 = cast(%var_2730, dtype="float32") /* ty=Tensor[(140), float32] */;
    %626 = reshape(%623, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
    %627 = reshape(%624, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %628 = reshape(%625, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
    %629 = @func_962(%626, %627, %628) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
    %630 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 100), float64] */, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
    %631 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %632 = reshape(%630, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
    %633 = reshape(%631, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %634 = @func_2211(%632, %633) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
    %635 = cast(%var_2777, dtype="float32") /* ty=Tensor[(3072), float32] */;
    %636 = reshape(%635, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
    %637 = @func_1502(%636) /* ty=(Tensor[(12, 16, 16), float32],) */;
    %638 = greater_equal(%611, %612) /* ty=Tensor[(2, 13, 2), bool] */;
    %639 = %619.2;
    %640 = @func_1863(%621) /* ty=Tensor[(9, 5, 6), float32] */;
    %641 = asin(%622) /* ty=Tensor[(520), float64] */;
    %642 = %629.5;
    %643 = %634.0;
    %644 = %637.0;
    (%638, %639, meta[relay.Constant][44] /* ty=Tensor[(270), float32] */, %640, %641, %642, meta[relay.Constant][45] /* ty=Tensor[(33), float64] */, %var_2729, %var_2730, %643, meta[relay.Constant][46] /* ty=Tensor[(12, 100), float64] */, meta[relay.Constant][47] /* ty=Tensor[(240), float64] */, %644, %var_2777)
  };
  %645(%var_2802, %var_2803, %var_2804, %var_2805, %var_2806, %var_2807) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */
}

def @func_7367(%var_7365: Tensor[(630, 1), uint8], %var_7366: Tensor[(1248), bool]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 6, 14), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64], Tensor[(14, 9, 5), uint8], Tensor[(630, 1), uint8], Tensor[(16, 6, 9), float32], float32, Tensor[(216, 4), float32], Tensor[(1248), bool], Tensor[(864), float32]) {
  %671 = fn (%var_7345: Tensor[(630, 1), uint8], %var_7352: Tensor[(1248), bool]) -> (Tensor[(16, 6, 14), bool], Tensor[(16, 6, 14), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64], Tensor[(14, 9, 5), uint8], Tensor[(630, 1), uint8], Tensor[(16, 6, 9), float32], float32, Tensor[(216, 4), float32], Tensor[(1248), bool], Tensor[(864), float32]) {
    %646 = @func_7313() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %647 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %648 = cast(meta[relay.Constant][48] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %649 = reshape(%648, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
    %650 = @func_3533(%649) /* ty=(Tensor[(10, 4, 16), float64],) */;
    %651 = cast(%var_7345, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
    %652 = reshape(%651, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint8] */;
    %653 = cast(-3.02213f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %654 = cast(meta[relay.Constant][49] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
    %655 = cast(%var_7352, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %656 = reshape(%653, newshape=[]) /* ty=float32 */;
    %657 = reshape(%654, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
    %658 = reshape(%655, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %659 = @func_5304(%656, %657, %658) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
    %660 = cast(-3.02213f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %661 = cast(meta[relay.Constant][49] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
    %662 = reshape(%660, newshape=[]) /* ty=float32 */;
    %663 = reshape(%661, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %664 = @func_6948(%662, %663) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) */;
    %665 = %646.0;
    %666 = %647.0;
    %667 = %650.0;
    %668 = @func_3713(%652) /* ty=Tensor[(14, 9, 5), uint8] */;
    %669 = %659.0;
    %670 = %664.3;
    (%665, %666, %667, meta[relay.Constant][48] /* ty=Tensor[(640), float64] */, %668, %var_7345, %669, -3.02213f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(216, 4), float32] */, %var_7352, %670)
  };
  %671(%var_7365, %var_7366) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(16, 6, 14), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64], Tensor[(14, 9, 5), uint8], Tensor[(630, 1), uint8], Tensor[(16, 6, 9), float32], float32, Tensor[(216, 4), float32], Tensor[(1248), bool], Tensor[(864), float32]) */
}

def @func_6748() -> Tensor[(16, 6, 14), float32] {
  @func_6746() /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_7051() -> Tensor[(16, 6, 14), bool] {
  %673 = fn () -> Tensor[(16, 6, 14), bool] {
    %672 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %672.0
  };
  %673() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_5308(%var_5305: float32, %var_5306: Tensor[(16, 6, 9), float32], %var_5307: Tensor[(1248), bool]) -> (Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) {
  %685 = fn (%var_5281: float32, %var_5282: Tensor[(16, 6, 9), float32], %var_5290: Tensor[(1248), bool]) -> (Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) {
    %674 = cast(%var_5281, dtype="float32") /* ty=float32 */;
    %675 = cast(%var_5282, dtype="float32") /* ty=Tensor[(16, 6, 9), float32] */;
    %676 = cast(meta[relay.Constant][50] /* ty=Tensor[(33, 1), float64] */, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
    %677 = cast(%var_5290, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %678 = cast(meta[relay.Constant][51] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %679 = reshape(%676, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
    %680 = reshape(%677, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %681 = reshape(%678, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
    %682 = @func_962(%679, %680, %681) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
    %683 = power(%674, %675) /* ty=Tensor[(16, 6, 9), float32] */;
    %684 = %682.4;
    (%683, %684, meta[relay.Constant][50] /* ty=Tensor[(33, 1), float64] */, %var_5290, meta[relay.Constant][51] /* ty=Tensor[(70, 2), float32] */)
  };
  %685(%var_5305, %var_5306, %var_5307) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */
}

def @func_1581(%var_1579: float64, %var_1580: Tensor[(2, 12, 10), float64]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) {
  @func_1577(%var_1579, %var_1580) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool]) */
}

def @func_6666(%var_6658: Tensor[(8, 15, 2), float64], %var_6659: Tensor[(8, 15, 2), float64]) -> Tensor[(8, 15, 2), bool] {
  %686 = cast(%var_6659, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %687 = shape_of(%var_6658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_6658, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%688, %689) /* ty=Tensor[(8, 15, 2), bool] */
}

def @func_7259() -> Tensor[(16, 6, 14), float32] {
  @func_7257() /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_7257() -> Tensor[(16, 6, 14), float32] {
  @func_6746() /* ty=Tensor[(16, 6, 14), float32] */
}

def @func_711(%var_709: int8, %var_710: Tensor[(10, 1, 3), int8]) -> (Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) {
  @func_707(%var_709, %var_710) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(104, 12), bool], Tensor[(585), float64], Tensor[(1248), bool], Tensor[(13, 12, 8), bool]) */
}

def @func_8352() -> (Tensor[(16, 6, 14), bool], Tensor[(16, 5, 16), float64], Tensor[(1280), float64], Tensor[(16, 6, 14), bool]) {
  %697 = fn () -> (Tensor[(16, 6, 14), bool], Tensor[(16, 5, 16), float64], Tensor[(1280), float64], Tensor[(16, 6, 14), bool]) {
    %690 = @func_7022() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %691 = cast(meta[relay.Constant][52] /* ty=Tensor[(1280), float64] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
    %692 = reshape(%691, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
    %693 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %694 = %690.0;
    %695 = @func_5519(%692) /* ty=Tensor[(16, 5, 16), float64] */;
    %696 = %693.0;
    (%694, %695, meta[relay.Constant][52] /* ty=Tensor[(1280), float64] */, %696)
  };
  %697() /* ty=(Tensor[(16, 6, 14), bool], Tensor[(16, 5, 16), float64], Tensor[(1280), float64], Tensor[(16, 6, 14), bool]) */
}

def @func_966(%var_963: Tensor[(1, 11, 3), float64], %var_964: Tensor[(1248), bool], %var_965: Tensor[(140, 1), float32]) -> (Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) {
  %710 = fn (%var_901: Tensor[(1, 11, 3), float64], %var_906: Tensor[(1248), bool], %var_954: Tensor[(140, 1), float32]) -> (Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) {
    %698 = cast(%var_901, dtype="float64") /* ty=Tensor[(1, 11, 3), float64] */;
    %699 = cast(%var_906, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %700 = reshape(%699, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %701 = @func_93(%700) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %702 = cast(%var_954, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
    %703 = cast(meta[relay.Constant][53] /* ty=Tensor[(1755), uint64] */, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
    %704 = reshape(%702, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
    %705 = reshape(%703, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
    %706 = @func_896(%704, %705) /* ty=(Tensor[(10, 14, ?), float32], Tensor[(10, 14, ?), uint16], Tensor[(1, 1248), bool], Tensor[(1755), uint64], Tensor[(16, 3, ?), int32], Tensor[(48), float32]) */;
    %707 = asinh(%698) /* ty=Tensor[(1, 11, 3), float64] */;
    %708 = %701.0;
    %709 = %706.3;
    (%707, %708, %var_906, %709, %var_954, meta[relay.Constant][53] /* ty=Tensor[(1755), uint64] */)
  };
  %710(%var_963, %var_964, %var_965) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */
}

def @func_5829(%var_5816: Tensor[(1, 14, 10), float32], %var_5825: float32, %var_5827: Tensor[(1248), bool]) -> (Tensor[(1, 14, 10), float32], Tensor[(140, 1), float32], float32, Tensor[(12, 72), float32], Tensor[(1248), bool]) {
  %711 = cast(%var_5816, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %712 = cast(%var_5825, dtype="float32") /* ty=float32 */;
  %713 = cast(meta[relay.Constant][54] /* ty=Tensor[(12, 72), float32] */, dtype="float32") /* ty=Tensor[(12, 72), float32] */;
  %714 = cast(%var_5827, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %715 = reshape(%712, newshape=[]) /* ty=float32 */;
  %716 = reshape(%713, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
  %717 = reshape(%714, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %718 = @func_5304(%715, %716, %717) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
  %719 = log(%711) /* ty=Tensor[(1, 14, 10), float32] */;
  %720 = %718.1;
  (%719, %720, %var_5825, meta[relay.Constant][54] /* ty=Tensor[(12, 72), float32] */, %var_5827)
}

def @func_5834(%var_5831: Tensor[(1, 14, 10), float32], %var_5832: float32, %var_5833: Tensor[(1248), bool]) -> (Tensor[(1, 14, 10), float32], Tensor[(140, 1), float32], float32, Tensor[(12, 72), float32], Tensor[(1248), bool]) {
  @func_5829(%var_5831, %var_5832, %var_5833) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(140, 1), float32], float32, Tensor[(12, 72), float32], Tensor[(1248), bool]) */
}

def @func_4781(%var_4778: Tensor[(13, 13, 15), uint32], %var_4779: Tensor[(13, 13, 15), uint32], %var_4780: Tensor[(1755), uint64]) -> (Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) {
  @func_4776(%var_4778, %var_4779, %var_4780) /* ty=(Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) */
}

def @func_7845() -> (Tensor[(16, 6, 14), bool],) {
  %722 = fn () -> (Tensor[(16, 6, 14), bool],) {
    %721 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
    (%721,)
  };
  %722() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_8246(%var_8240: Tensor[(9, 5, 12), float32], %var_8241: Tensor[(1248), bool], %var_8242: Tensor[(1, 240), float64], %var_8243: Tensor[(819), float32], %var_8244: Tensor[(288, 4), int8], %var_8245: Tensor[(176, 4), float64]) -> (Tensor[(140, 1), float32], Tensor[(864), float32], Tensor[(1248), bool], Tensor[(1, 12), bool], Tensor[(1, 240), float64], Tensor[(819), int8], Tensor[(13, 12, 8), bool], Tensor[(16, 6, 14), bool], Tensor[(288, 4), int8], Tensor[(9, 5, 12), float64], Tensor[(5, 28), float32], Tensor[(176, 4), float64], Tensor[(13, 7, 9), float32]) {
  @func_8238(%var_8240, %var_8241, %var_8242, %var_8243, %var_8244, %var_8245) /* ty=(Tensor[(140, 1), float32], Tensor[(864), float32], Tensor[(1248), bool], Tensor[(1, 12), bool], Tensor[(1, 240), float64], Tensor[(819), int8], Tensor[(13, 12, 8), bool], Tensor[(16, 6, 14), bool], Tensor[(288, 4), int8], Tensor[(9, 5, 12), float64], Tensor[(5, 28), float32], Tensor[(176, 4), float64], Tensor[(13, 7, 9), float32]) */
}

def @func_3386(%var_3371: Tensor[(16, 4, 11), float64], %var_3372: Tensor[(16, 4, 11), float64], %var_3379: uint16, %var_3381: Tensor[(520), float32], %var_3383: Tensor[(140), float32], %var_3384: Tensor[(3072), float32]) -> (Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) {
  %723 = cast(%var_3372, dtype="float64") /* ty=Tensor[(16, 4, 11), float64] */;
  %724 = shape_of(%var_3371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_3371, dtype="float64") /* ty=Tensor[(16, 4, 11), float64] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %727 = cast(%var_3379, dtype="uint16") /* ty=uint16 */;
  %728 = cast(meta[relay.Constant][55] /* ty=Tensor[(52), uint16] */, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %729 = cast(%var_3381, dtype="float32") /* ty=Tensor[(520), float32] */;
  %730 = cast(meta[relay.Constant][56] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %731 = cast(%var_3383, dtype="float32") /* ty=Tensor[(140), float32] */;
  %732 = cast(%var_3384, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %733 = reshape(%727, newshape=[]) /* ty=uint16 */;
  %734 = reshape(%728, newshape=[2, 13, 2]) /* ty=Tensor[(2, 13, 2), uint16] */;
  %735 = reshape(%729, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %736 = reshape(%730, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %737 = reshape(%731, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %738 = reshape(%732, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %739 = @func_2801(%733, %734, %735, %736, %737, %738) /* ty=(Tensor[(2, 13, 2), bool], Tensor[(6, 45), float32], Tensor[(270), float32], Tensor[(9, 5, 6), float32], Tensor[(520), float64], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(1248), bool], Tensor[(12, 100), float64], Tensor[(240), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32]) */;
  %740 = floor_divide(%725, %726) /* ty=Tensor[(16, 4, 11), float64] */;
  %741 = %739.10;
  (%740, %741, %var_3379, meta[relay.Constant][55] /* ty=Tensor[(52), uint16] */, %var_3381, meta[relay.Constant][56] /* ty=Tensor[(1248), bool] */, %var_3383, %var_3384)
}

def @func_227(%var_226: Tensor[(9, 13, 15), uint64]) -> (Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) {
  %751 = fn (%var_213: Tensor[(9, 13, 15), uint64]) -> (Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) {
    %742 = cast(%var_213, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
    %743 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(9, 13, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 13, 15), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %746 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 1248), bool] */, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
    %747 = reshape(%746, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), bool] */;
    %748 = @func_93(%747) /* ty=(Tensor[(13, 12, 8), bool], Tensor[(13, 12, 8), bool]) */;
    %749 = not_equal(%744, %745) /* ty=Tensor[(9, 13, 15), bool] */;
    %750 = %748.1;
    (%749, %750, meta[relay.Constant][58] /* ty=Tensor[(1, 1248), bool] */)
  };
  %751(%var_226) /* ty=(Tensor[(9, 13, 15), bool], Tensor[(13, 12, 8), bool], Tensor[(1, 1248), bool]) */
}

def @func_4146(%var_4100: Tensor[(7, 16, 11), float64]) -> (Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) {
  %752 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 44), float32] */, dtype="float32") /* ty=Tensor[(1, 44), float32] */;
  %753 = reshape(%752, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float32] */;
  %754 = @func_3849(%753) /* ty=(Tensor[(11, 2, 2), float32],) */;
  %755 = cast(%var_4100, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %756 = cos(%755) /* ty=Tensor[(7, 16, 11), float64] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %758 = %754.0;
  %759 = log10(%757) /* ty=Tensor[(7, 16, 11), float64] */;
  (%758, meta[relay.Constant][59] /* ty=Tensor[(1, 44), float32] */, %759)
}

def @func_6951(%var_6949: float32, %var_6950: Tensor[(864), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) {
  %772 = fn (%var_6917: float32, %var_6918: Tensor[(864), float32]) -> (Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) {
    %760 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %761 = cast(%var_6917, dtype="float32") /* ty=float32 */;
    %762 = cast(%var_6918, dtype="float32") /* ty=Tensor[(864), float32] */;
    %763 = cast(meta[relay.Constant][60] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %764 = reshape(%761, newshape=[]) /* ty=float32 */;
    %765 = reshape(%762, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), float32] */;
    %766 = reshape(%763, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %767 = @func_5304(%764, %765, %766) /* ty=(Tensor[(16, 6, 9), float32], Tensor[(140, 1), float32], Tensor[(33, 1), float64], Tensor[(1248), bool], Tensor[(70, 2), float32]) */;
    %768 = @func_6430() /* ty=(Tensor[(16, 6, 14), bool],) */;
    %769 = %760.0;
    %770 = %767.4;
    %771 = %768.0;
    (%769, %770, %var_6917, %var_6918, meta[relay.Constant][60] /* ty=Tensor[(1248), bool] */, %771)
  };
  %772(%var_6949, %var_6950) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(70, 2), float32], float32, Tensor[(864), float32], Tensor[(1248), bool], Tensor[(16, 6, 14), bool]) */
}

def @func_7499(%var_7429: Tensor[(1755), uint64], %var_7440: Tensor[(16, 6, 14), bool], %var_7457: Tensor[(1232), float64], %var_7486: Tensor[(33), float64], %var_7488: Tensor[(140), float32]) -> (Tensor[(1152), int8], Tensor[(13, 13, 15), float64], Tensor[(2535), uint32], Tensor[(1755), uint64], Tensor[(16, 6, 14), float32], Tensor[(16, 6, 14), bool], Tensor[(7, 16, 11), float64], Tensor[(1232), float64], Tensor[(12, 16, 16), float32], Tensor[(3072), float32], Tensor[(16, 6, 14), bool], Tensor[(16, 12, 6), int16], Tensor[(1755), uint64], Tensor[(33), float64], Tensor[(1248), bool], Tensor[(140), float32]) {
  %773 = cast(meta[relay.Constant][62] /* ty=Tensor[(2535), uint32] */, dtype="uint32") /* ty=Tensor[(2535), uint32] */;
  %774 = cast(meta[relay.Constant][62] /* ty=Tensor[(2535), uint32] */, dtype="uint32") /* ty=Tensor[(2535), uint32] */;
  %775 = cast(%var_7429, dtype="uint64") /* ty=Tensor[(1755), uint64] */;
  %776 = reshape(%773, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), uint32] */;
  %777 = reshape(%774, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), uint32] */;
  %778 = reshape(%775, newshape=[1755]) /* ty=Tensor[(1755), uint64] */;
  %779 = @func_4776(%776, %777, %778) /* ty=(Tensor[(13, 13, 15), uint32], Tensor[(13, 13, 15), float64], Tensor[(10, 14, ?), float32], Tensor[(140), float32], Tensor[(1755), uint64]) */;
  %780 = @func_6177() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %781 = %780.0;
  %782 = @func_7050() /* ty=Tensor[(16, 6, 14), bool] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %784 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%781, dtype="float32") /* ty=Tensor[(16, 6, 14), float32] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %787 = cast(%var_7440, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %788 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%782, dtype="bool") /* ty=Tensor[(16, 6, 14), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %791 = cast(%var_7457, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %792 = reshape(%791, newshape=[7, 16, 11]) /* ty=Tensor[(7, 16, 11), float64] */;
  %793 = @func_4146(%792) /* ty=(Tensor[(11, 2, 2), float32], Tensor[(1, 44), float32], Tensor[(7, 16, 11), float64]) */;
  %794 = cast(meta[relay.Constant][63] /* ty=Tensor[(3072), float32] */, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %795 = reshape(%794, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float32] */;
  %796 = @func_1502(%795) /* ty=(Tensor[(12, 16, 16), float32],) */;
  %797 = @func_6733() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %798 = cast(meta[relay.Constant][61] /* ty=Tensor[(1152), int8] */, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %799 = cast(meta[relay.Constant][61] /* ty=Tensor[(1152), int8] */, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %800 = reshape(%798, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %801 = reshape(%799, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), int8] */;
  %802 = @func_5099(%800, %801) /* ty=(Tensor[(16, 12, 6), uint16], Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float32], Tensor[(3072), bool], Tensor[(1248), bool], Tensor[(576), float32], Tensor[(12, 16, 16), float32]) */;
  %803 = %802.0;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %805 = exp(%804) /* ty=Tensor[(16, 12, 6), float64] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %807 = atanh(%806) /* ty=Tensor[(16, 12, 6), float32] */;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %809 = erf(%808) /* ty=Tensor[(16, 12, 6), float32] */;
  %810 = cast(%805, dtype="int16") /* ty=Tensor[(16, 12, 6), int16] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%809, dtype="int16") /* ty=Tensor[(16, 12, 6), int16] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %814 = cast(%var_7486, dtype="float64") /* ty=Tensor[(33), float64] */;
  %815 = cast(meta[relay.Constant][64] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %816 = cast(%var_7488, dtype="float32") /* ty=Tensor[(140), float32] */;
  %817 = reshape(%814, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), float64] */;
  %818 = reshape(%815, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %819 = reshape(%816, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %820 = @func_962(%817, %818, %819) /* ty=(Tensor[(1, 11, 3), float64], Tensor[(13, 12, 8), bool], Tensor[(1248), bool], Tensor[(1755), uint64], Tensor[(140, 1), float32], Tensor[(1755), uint64]) */;
  %821 = %779.1;
  %822 = floor_mod(%785, %786) /* ty=Tensor[(16, 6, 14), float32] */;
  %823 = logical_and(%789, %790) /* ty=Tensor[(16, 6, 14), bool] */;
  %824 = %793.2;
  %825 = %796.0;
  %826 = %797.0;
  %827 = right_shift(%812, %813) /* ty=Tensor[(16, 12, 6), int16] */;
  %828 = %820.5;
  (meta[relay.Constant][61] /* ty=Tensor[(1152), int8] */, %821, meta[relay.Constant][62] /* ty=Tensor[(2535), uint32] */, %var_7429, %822, %823, %824, %var_7457, %825, meta[relay.Constant][63] /* ty=Tensor[(3072), float32] */, %826, %827, %828, %var_7486, meta[relay.Constant][64] /* ty=Tensor[(1248), bool] */, %var_7488)
}

def @func_3394(%var_3388: Tensor[(16, 4, 11), float64], %var_3389: Tensor[(16, 4, 11), float64], %var_3390: uint16, %var_3391: Tensor[(520), float32], %var_3392: Tensor[(140), float32], %var_3393: Tensor[(3072), float32]) -> (Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) {
  @func_3386(%var_3388, %var_3389, %var_3390, %var_3391, %var_3392, %var_3393) /* ty=(Tensor[(16, 4, 11), float64], Tensor[(12, 100), float64], uint16, Tensor[(52), uint16], Tensor[(520), float32], Tensor[(1248), bool], Tensor[(140), float32], Tensor[(3072), float32]) */
}

def @func_2215(%var_2213: Tensor[(15, 10, 8), float64], %var_2214: Tensor[(240), float64]) -> (Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) {
  @func_2211(%var_2213, %var_2214) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */
}

def @func_3455(%var_3452: Tensor[(3, 6, 8), float32], %var_3453: Tensor[(4, 312), bool], %var_3454: uint16) -> (Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) {
  @func_3450(%var_3452, %var_3453, %var_3454) /* ty=(Tensor[(3, 6, 8), int32], Tensor[(13, 12, 8), bool], Tensor[(4, 312), bool], Tensor[(9, 5, 6), float32], uint16, Tensor[(52), uint16], Tensor[(10, 52), float32], Tensor[(1, 140), float32], Tensor[(24, 128), float32], Tensor[(3, 6, 8), float32]) */
}

def @func_4413(%var_4411: Tensor[(13, 7, 9), float32]) -> (Tensor[(13, 7, 9), float32],) {
  @func_4410(%var_4411) /* ty=(Tensor[(13, 7, 9), float32],) */
}

def @func_7229(%var_7227: Tensor[(630), uint8]) -> (Tensor[(16, 6, 14), bool], Tensor[(14, 9, 5), uint8], Tensor[(630), uint8]) {
  @func_7226(%var_7227) /* ty=(Tensor[(16, 6, 14), bool], Tensor[(14, 9, 5), uint8], Tensor[(630), uint8]) */
}

def @func_5390(%var_5388: int16, %var_5389: Tensor[(2, 13, 9), int16]) -> (Tensor[(2, 13, 9), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
  %836 = fn (%var_5363: int16, %var_5364: Tensor[(2, 13, 9), int16]) -> (Tensor[(2, 13, 9), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
    %829 = cast(%var_5363, dtype="bool") /* ty=bool */;
    %830 = cast(%var_5364, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
    %831 = cast(meta[relay.Constant][65] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %832 = reshape(%831, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
    %833 = @func_3533(%832) /* ty=(Tensor[(10, 4, 16), float64],) */;
    %834 = less_equal(%829, %830) /* ty=Tensor[(2, 13, 9), bool] */;
    %835 = %833.0;
    (%834, %835, meta[relay.Constant][65] /* ty=Tensor[(640), float64] */)
  };
  %836(%var_5388, %var_5389) /* ty=(Tensor[(2, 13, 9), bool], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */
}

def @func_7315() -> (Tensor[(16, 6, 14), bool],) {
  @func_7313() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_8934() -> (Tensor[(16, 6, 14), bool],) {
  %837 = @func_8613() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %838 = %837.0;
  (%838,)
}

def @func_7728() -> (Tensor[(16, 6, 14), bool],) {
  @func_7726() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_3769(%var_3758: Tensor[(4, 4, 11), float64], %var_3759: Tensor[(4, 4, 11), float64], %var_3766: Tensor[(240), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) {
  %839 = cast(%var_3759, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %840 = shape_of(%var_3758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_3758, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %843 = cast(meta[relay.Constant][66] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %844 = cast(%var_3766, dtype="float64") /* ty=Tensor[(240), float64] */;
  %845 = reshape(%843, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %846 = reshape(%844, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %847 = @func_2211(%845, %846) /* ty=(Tensor[(1248), bool], float64, Tensor[(240), float64], Tensor[(15, 10, 8), float64]) */;
  %848 = mod(%841, %842) /* ty=Tensor[(4, 4, 11), float64] */;
  %849 = %847.3;
  (%848, %849, meta[relay.Constant][66] /* ty=Tensor[(1200), float64] */, %var_3766)
}

def @func_8881() -> Tensor[(16, 6, 14), bool] {
  %850 = fn () -> Tensor[(16, 6, 14), bool] {
    @func_8046() /* ty=Tensor[(16, 6, 14), bool] */
  };
  %850() /* ty=Tensor[(16, 6, 14), bool] */
}

def @func_8903() -> (Tensor[(16, 6, 14), bool],) {
  @func_8901() /* ty=(Tensor[(16, 6, 14), bool],) */
}

def @func_8851(%var_8850: Tensor[(11, 12, 2), float32]) -> Tensor[(11, 12, 2), float32] {
  %852 = fn (%var_8846: Tensor[(11, 12, 2), float32]) -> Tensor[(11, 12, 2), float32] {
    %851 = cast(%var_8846, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
    asinh(%851) /* ty=Tensor[(11, 12, 2), float32] */
  };
  %852(%var_8850) /* ty=Tensor[(11, 12, 2), float32] */
}

def @func_8901() -> (Tensor[(16, 6, 14), bool],) {
  %853 = @func_6839() /* ty=(Tensor[(16, 6, 14), bool],) */;
  %854 = %853.0;
  (%854,)
}

def @func_3774(%var_3771: Tensor[(4, 4, 11), float64], %var_3772: Tensor[(4, 4, 11), float64], %var_3773: Tensor[(240), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) {
  @func_3769(%var_3771, %var_3772, %var_3773) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(15, 10, 8), float64], Tensor[(1200), float64], Tensor[(240), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen326/build/output.py", line 1757, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:07:21] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

