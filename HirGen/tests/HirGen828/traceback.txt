==========mod==========
#[version = "0.0.5"]
def @func_10139(%var_10111: Tensor[(10, 1, 8), float64], %var_10112: Tensor[(10, 8, 8), float64]) -> (Tensor[(10, 8, 8), float64], Tensor[(11, 1, 6), float32], Tensor[(10, 1, 8), float32]) {
  %0 = cast(%var_10111, dtype="float64") /* ty=Tensor[(10, 1, 8), float64] */;
  %1 = cast(%var_10112, dtype="float64") /* ty=Tensor[(10, 8, 8), float64] */;
  %2 = cast(%var_10111, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %3 = minimum(%0, %1) /* ty=Tensor[(10, 8, 8), float64] */;
  %4 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %5 = log2(%2) /* ty=Tensor[(10, 1, 8), float32] */;
  (%3, %4, %5)
}

def @func_11846() -> (Tensor[(594), float32],) {
  %6 = @func_7927() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) */;
  %7 = %6.6;
  (%7,)
}

def @func_10596() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) {
  %8 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %10 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %11 = reshape(%9, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %12 = reshape(%10, newshape=[]) /* ty=uint8 */;
  %13 = @func_6049(%11, %12) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) */;
  %14 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %15 = %8.0;
  %16 = %13.4;
  (%14, %15, %16, meta[relay.Constant][0] /* ty=Tensor[(112), float64] */, meta[relay.Constant][1] /* ty=uint8 */)
}

def @func_6376(%var_6363: Tensor[(42), uint8]) -> (Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) {
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %18 = cast(meta[relay.Constant][3] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %19 = cast(%var_6363, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %20 = reshape(%18, newshape=[]) /* ty=uint8 */;
  %21 = reshape(%19, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %22 = @func_3538(%20, %21) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %23 = log(%17) /* ty=Tensor[(11, 9, 2), float32] */;
  %24 = %22.0;
  (%23, %24, meta[relay.Constant][3] /* ty=uint8 */, %var_6363)
}

def @func_8230() -> (Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) {
  %25 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %27 = reshape(%25, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %28 = reshape(%26, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %29 = @func_4198(%27, %28) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %30 = @func_8204() /* ty=(Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %33 = cos(%32) /* ty=Tensor[(16, 15, 4), float32] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %35 = %29.0;
  %36 = asin(%34) /* ty=Tensor[(16, 15, 4), float64] */;
  (%35, meta[relay.Constant][4] /* ty=Tensor[(1008), float64] */, %36)
}

def @func_9194() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %37 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %38 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
  %39 = %37.0;
  (%38, %39)
}

def @func_12160(%var_12139: Tensor[(14, 3), uint8]) -> (Tensor[(3, 1, 14), uint8], Tensor[(14, 3), uint8], Tensor[(11, 4, 6), float64], Tensor[(11, 1, 6), float64]) {
  %40 = cast(%var_12139, dtype="uint8") /* ty=Tensor[(14, 3), uint8] */;
  %41 = reshape(%40, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %42 = @func_6376(%41) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
  %43 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %46 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 4, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 6), float32] */;
  %47 = power(%45, %46) /* ty=Tensor[(11, 4, 6), float32] */;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
  %49 = @func_10365() /* ty=(Tensor[(11, 1, 6), float64],) */;
  %50 = %42.1;
  %51 = rsqrt(%48) /* ty=Tensor[(11, 4, 6), float64] */;
  %52 = %49.0;
  (%50, %var_12139, %51, %52)
}

def @func_7740() -> (Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
  %53 = @func_6925() /* ty=(Tensor[(81), float32],) */;
  %54 = cast(meta[relay.Constant][6] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %55 = cast(meta[relay.Constant][6] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %56 = reshape(%54, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %57 = reshape(%55, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %58 = @func_469(%56, %57) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %59 = %53.0;
  %60 = %58.0;
  (%59, %60, meta[relay.Constant][6] /* ty=Tensor[(420), float64] */)
}

def @func_8139(%var_8088: Tensor[(6, 15, 4), float64], %var_8113: Tensor[(13, 15, 4), float64]) -> (Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) {
  %61 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  %62 = cast(%61, dtype="uint32") /* ty=Tensor[(?, 15, 4), uint32] */;
  %63 = cast(%var_8088, dtype="uint32") /* ty=Tensor[(6, 15, 4), uint32] */;
  %64 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
  %65 = cast(%61, dtype="float32") /* ty=Tensor[(?, 15, 4), float32] */;
  %66 = cast(%var_8113, dtype="float32") /* ty=Tensor[(13, 15, 4), float32] */;
  %67 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %68 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %69 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%61, dtype="float32") /* ty=Tensor[(?, 15, 4), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %72 = minimum(%62, %63) /* ty=Tensor[(6, 15, 4), uint32] */;
  %73 = %64.1;
  %74 = divide(%65, %66) /* ty=Tensor[(13, 15, 4), float32] */;
  %75 = %67.3;
  %76 = floor_divide(%70, %71) /* ty=Tensor[(?, 15, 4), float32] */;
  (%72, %73, %74, %75, %76)
}

def @func_4899() -> (Tensor[(11, 1, 6), float32],) {
  %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %78 = asinh(%77) /* ty=Tensor[(11, 1, 6), float32] */;
  (%78,)
}

def @func_12423() -> Tensor[(11, 1, 6), float32] {
  %79 = @func_11193() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %79.0
}

def @func_9494(%var_9489: Tensor[(960), float32]) -> (Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %80 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 4, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 6), float32] */;
  %81 = cast(%var_9489, dtype="float32") /* ty=Tensor[(960), float32] */;
  %82 = reshape(%81, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %83 = @func_3066(%82) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %84 = asin(%80) /* ty=Tensor[(3, 4, 6), float32] */;
  %85 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  %86 = %83.1;
  (%84, %85, %86, %var_9489)
}

def @func_7767() -> Tensor[(11, 1, 6), float32] {
  @func_6462() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_12987() -> (Tensor[(11, 1, 6), float32],) {
  %87 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %88 = %87.0;
  (%88,)
}

def @func_12960() -> Tensor[(11, 1, 6), float32] {
  @func_5911() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_12248() -> Tensor[(1008), float64] {
  @func_9561() /* ty=Tensor[(1008), float64] */
}

def @func_7093() -> (Tensor[(2, 16, 15), float64], Tensor[(81), float32]) {
  %89 = @func_6925() /* ty=(Tensor[(81), float32],) */;
  %90 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %91 = %89.0;
  (%90, %91)
}

def @func_5295() -> (Tensor[(11, 1, 6), float32],) {
  %92 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %93 = %92.0;
  (%93,)
}

def @func_9113(%var_9070: Tensor[(3, 198), float32], %var_9075: Tensor[(3, 198), float32], %var_9098: Tensor[(42), uint8], %var_9105: Tensor[(1680, 2), float64], %var_9106: Tensor[(315), uint8]) -> (Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) {
  %94 = cast(%var_9070, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
  %95 = reshape(%94, newshape=[594]) /* ty=Tensor[(594), float32] */;
  %96 = @func_7652(%95) /* ty=(Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %97 = cast(%var_9075, dtype="int64") /* ty=Tensor[(3, 198), int64] */;
  %98 = shape_of(%var_9070, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%var_9070, dtype="int64") /* ty=Tensor[(3, 198), int64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %101 = cast(%var_9070, dtype="float64") /* ty=Tensor[(3, 198), float64] */;
  %102 = log2(%101) /* ty=Tensor[(3, 198), float64] */;
  %103 = cast(%var_9075, dtype="bool") /* ty=Tensor[(3, 198), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(2), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(3, 198), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %107 = less(%105, %106) /* ty=Tensor[(3, 198), bool] */;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
  %109 = cast(meta[relay.Constant][10] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %110 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %111 = cast(%var_9098, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %112 = reshape(%109, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
  %113 = reshape(%110, newshape=[]) /* ty=uint8 */;
  %114 = reshape(%111, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %115 = @func_5347(%112, %113, %114) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) */;
  %116 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %117 = cast(meta[relay.Constant][12] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %119 = cast(meta[relay.Constant][13] /* ty=Tensor[(22, 7), float32] */, dtype="float32") /* ty=Tensor[(22, 7), float32] */;
  %120 = cast(%var_9105, dtype="float64") /* ty=Tensor[(1680, 2), float64] */;
  %121 = cast(%var_9106, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %122 = cast(meta[relay.Constant][14] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %123 = reshape(%117, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %124 = reshape(%118, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %125 = reshape(%119, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %126 = reshape(%120, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %127 = reshape(%121, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %128 = reshape(%122, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %129 = @func_6172(%123, %124, %125, %126, %127, %128) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %130 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  %131 = %96.3;
  %132 = minimum(%99, %100) /* ty=Tensor[(3, 198), int64] */;
  %133 = rsqrt(%108) /* ty=Tensor[(3, 198), float32] */;
  %134 = %115.3;
  %135 = %116.0;
  %136 = %129.5;
  (%130, %131, %132, %133, %134, meta[relay.Constant][10] /* ty=Tensor[(112), float64] */, meta[relay.Constant][11] /* ty=uint8 */, %var_9098, %135, %136, meta[relay.Constant][12] /* ty=Tensor[(117), float32] */, meta[relay.Constant][13] /* ty=Tensor[(22, 7), float32] */, %var_9105, %var_9106, meta[relay.Constant][14] /* ty=Tensor[(420), float64] */)
}

def @func_13049(%var_13045: Tensor[(315), uint8], %var_13046: Tensor[(968), float32], %var_13047: Tensor[(420), float64]) -> (Tensor[(1600), int16], Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(420), float64]) {
  %137 = @func_9903() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) */;
  %138 = cast(%var_13045, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %139 = cast(%var_13046, dtype="float32") /* ty=Tensor[(968), float32] */;
  %140 = cast(%var_13047, dtype="float64") /* ty=Tensor[(420), float64] */;
  %141 = reshape(%138, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %142 = reshape(%139, newshape=[968]) /* ty=Tensor[(968), float32] */;
  %143 = reshape(%140, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %144 = @func_5800(%141, %142, %143) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) */;
  %145 = %137.2;
  %146 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
  %147 = %144.1;
  (%145, %146, %147, %var_13045, %var_13046, %var_13047)
}

def @func_8683() -> (Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) {
  %148 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %149 = @func_8631() /* ty=Tensor[(11, 1, 6), float32] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %151 = tan(%150) /* ty=Tensor[(11, 1, 6), float64] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %153 = rsqrt(%152) /* ty=Tensor[(11, 1, 6), float32] */;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %155 = %148.1;
  %156 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
  %157 = asin(%154) /* ty=Tensor[(11, 1, 6), float64] */;
  (%155, %156, %157)
}

def @func_9742() -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %158 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
  %159 = cast(meta[relay.Constant][15] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %160 = reshape(%159, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %161 = @func_9494(%160) /* ty=(Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */;
  %162 = %158.1;
  %163 = %161.2;
  (%162, %163, meta[relay.Constant][15] /* ty=Tensor[(960), float32] */)
}

def @func_5870(%var_5860: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
  %164 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
  %165 = cast(%164, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %166 = cast(%var_5860, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
  greater(%165, %166) /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_5983(%var_5957: float64, %var_5958: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32]) {
  %167 = cast(%var_5957, dtype="float64") /* ty=float64 */;
  %168 = cast(%var_5958, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %169 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %170 = divide(%167, %168) /* ty=Tensor[(8, 15, 6), float64] */;
  %171 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  %172 = %169.0;
  (%170, %171, %172)
}

def @func_7652(%var_7638: Tensor[(594), float32]) -> (Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  %173 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  %174 = cast(%173, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %175 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 4, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 6), bool] */;
  %176 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %177 = cast(%var_7638, dtype="float32") /* ty=Tensor[(594), float32] */;
  %178 = reshape(%177, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %179 = logical_and(%174, %175) /* ty=Tensor[(11, 4, 6), bool] */;
  %180 = %176.2;
  %181 = @func_5870(%178) /* ty=Tensor[(11, 9, 6), bool] */;
  (%179, %180, %181, %var_7638)
}

def @func_5533(%var_5530: Tensor[(240, 4), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) {
  %182 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %183 = cast(%var_5530, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %184 = reshape(%183, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %185 = @func_3066(%184) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %186 = %182.0;
  %187 = %185.1;
  (%186, %187, %var_5530)
}

def @func_1342(%var_1323: Tensor[(8, 11, 11), float32], %var_1340: Tensor[(420), float64]) -> (Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
  %188 = cast(%var_1323, dtype="float32") /* ty=Tensor[(8, 11, 11), float32] */;
  %189 = cast(%var_1340, dtype="float64") /* ty=Tensor[(420), float64] */;
  %190 = cast(%var_1340, dtype="float64") /* ty=Tensor[(420), float64] */;
  %191 = reshape(%189, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %192 = reshape(%190, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %193 = @func_469(%191, %192) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %194 = cos(%188) /* ty=Tensor[(8, 11, 11), float32] */;
  %195 = %193.0;
  (%194, %195, %var_1340)
}

def @func_5800(%var_5745: Tensor[(315), uint8], %var_5752: Tensor[(968), float32], %var_5753: Tensor[(420), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) {
  %196 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %197 = cast(%var_5752, dtype="float32") /* ty=Tensor[(968), float32] */;
  %198 = cast(%var_5753, dtype="float64") /* ty=Tensor[(420), float64] */;
  %199 = reshape(%197, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float32] */;
  %200 = reshape(%198, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %201 = @func_1342(%199, %200) /* ty=(Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %202 = cast(%var_5745, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %203 = cast(%var_5745, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %204 = reshape(%202, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %205 = reshape(%203, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %206 = @func_2086(%204, %205) /* ty=(Tensor[(3, 7, 15), float64],) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %209 = %196.0;
  %210 = %201.1;
  %211 = atanh(%208) /* ty=Tensor[(3, 7, 15), float32] */;
  (%209, %var_5745, %210, %var_5752, %var_5753, %211)
}

def @func_5007(%var_4993: Tensor[(16, 13, 16), int8]) -> Tensor[(16, 13, 16), int8] {
  %212 = cast(%var_4993, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
  %213 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 13, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 13, 16), int8] */, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%214, %215) /* ty=Tensor[(16, 13, 16), int8] */
}

def @func_11158() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool]) {
  %216 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %217 = @func_9742() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */;
  %218 = %216.0;
  %219 = %217.1;
  (%218, %219)
}

def @func_11938(%var_11931: Tensor[(960), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %220 = cast(%var_11931, dtype="float32") /* ty=Tensor[(960), float32] */;
  %221 = reshape(%220, newshape=[240, 4]) /* ty=Tensor[(240, 4), float32] */;
  %222 = @func_5533(%221) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) */;
  %223 = @func_10941() /* ty=Tensor[(2, 16, 15), float64] */;
  %224 = %222.1;
  (%223, %224, %var_11931)
}

def @func_5347(%var_5328: Tensor[(14, 4, 2), float64], %var_5332: uint8, %var_5333: Tensor[(42), uint8]) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) {
  %225 = cast(%var_5332, dtype="uint8") /* ty=uint8 */;
  %226 = cast(%var_5333, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %227 = reshape(%225, newshape=[]) /* ty=uint8 */;
  %228 = reshape(%226, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %229 = @func_3538(%227, %228) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %230 = cast(%var_5332, dtype="uint8") /* ty=uint8 */;
  %231 = cast(%var_5333, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %232 = reshape(%230, newshape=[]) /* ty=uint8 */;
  %233 = reshape(%231, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %234 = @func_3538(%232, %233) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %235 = cast(%var_5328, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
  %236 = rsqrt(%235) /* ty=Tensor[(14, 4, 2), float64] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
  %238 = %229.0;
  %239 = %234.0;
  %240 = sinh(%237) /* ty=Tensor[(14, 4, 2), float64] */;
  (%238, %var_5332, %var_5333, %239, %240)
}

def @func_4680(%var_4637: Tensor[(6, 10, 5), uint16]) -> (Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) {
  %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(6, 10, 5), uint16] */;
  %242 = shape_of(%var_4637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_4637, dtype="uint16") /* ty=Tensor[(6, 10, 5), uint16] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %246 = reshape(%245, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
  %247 = @func_3657(%246) /* ty=(Tensor[(14, 16, 15), float64],) */;
  %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %249 = reshape(%248, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %250 = @func_3066(%249) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %251 = maximum(%243, %244) /* ty=Tensor[(6, 10, 5), uint16] */;
  %252 = %247.0;
  %253 = %250.0;
  (%251, %252, meta[relay.Constant][19] /* ty=Tensor[(3360), float64] */, %253, meta[relay.Constant][20] /* ty=Tensor[(960), float32] */)
}

def @func_2086(%var_2044: Tensor[(3, 7, 15), uint8], %var_2045: Tensor[(3, 7, 15), uint8]) -> (Tensor[(3, 7, 15), float64],) {
  %254 = cast(%var_2045, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %255 = shape_of(%var_2044, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_2044, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %258 = bitwise_or(%256, %257) /* ty=Tensor[(3, 7, 15), uint8] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %260 = sqrt(%259) /* ty=Tensor[(3, 7, 15), float64] */;
  (%260,)
}

def @func_3657(%var_3650: Tensor[(14, 16, 15), float64]) -> (Tensor[(14, 16, 15), float64],) {
  %261 = cast(%var_3650, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
  %262 = sinh(%261) /* ty=Tensor[(14, 16, 15), float64] */;
  (%262,)
}

def @func_12445() -> Tensor[(11, ?, 6), uint16] {
  %263 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %264 = %263.0;
  %265 = @func_11134() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
  %268 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%264, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%269, %270) /* ty=Tensor[(11, ?, 6), uint16] */
}

def @func_12630() -> (Tensor[(11, 1, 6), float32], Tensor[(11, ?, 6), uint16]) {
  %271 = @func_11178() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %272 = %271.0;
  %273 = @func_12445() /* ty=Tensor[(11, ?, 6), uint16] */;
  (%272, %273)
}

def @func_5099(%var_5084: Tensor[(11, 10, 6), float32]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) {
  %274 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %275 = %274.0;
  %276 = cast(%275, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %277 = cast(%var_5084, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %278 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %279 = less(%276, %277) /* ty=Tensor[(11, 10, 6), bool] */;
  %280 = %278.0;
  (%279, %280)
}

def @func_13010() -> (Tensor[(?, 15, 4), float64],) {
  %281 = @func_10053() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %282 = %281.0;
  (%282,)
}

def @func_6286() -> (Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) {
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %284 = reshape(%283, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
  %285 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  %286 = @func_3575(%284) /* ty=Tensor[(9, ?, 9), bool] */;
  (%285, %286, meta[relay.Constant][21] /* ty=Tensor[(81), float32] */)
}

def @func_8052(%var_8006: Tensor[(16, 15, 4), bool], %var_8018: Tensor[(11, 5, 6), float64]) -> (Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) {
  %287 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %288 = %287.2;
  %289 = cast(%var_8006, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
  %294 = %293.1;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %296 = cast(%var_8018, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %297 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %298 = power(%291, %292) /* ty=Tensor[(16, 15, 4), float32] */;
  %299 = subtract(%295, %296) /* ty=Tensor[(11, 5, 6), float64] */;
  %300 = %297.2;
  (%298, %299, %300)
}

def @func_11112() -> Tensor[(11, 1, 6), float32] {
  @func_10763() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7759() -> (Tensor[(16, 15, 4), bool],) {
  %301 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  (%301,)
}

def @func_3066(%var_3057: Tensor[(16, 15, 4), float32]) -> (Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) {
  %302 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %303 = asinh(%302) /* ty=Tensor[(1, 15, 4), float32] */;
  %304 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 15, 4), float32] */, dtype="uint16") /* ty=Tensor[(1, 15, 4), uint16] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="uint16") /* ty=Tensor[(1, 15, 4), uint16] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %308 = cast(%303, dtype="bool") /* ty=Tensor[(1, 15, 4), bool] */;
  %309 = cast(%var_3057, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
  %310 = bitwise_or(%306, %307) /* ty=Tensor[(?, 15, 4), uint16] */;
  %311 = less_equal(%308, %309) /* ty=Tensor[(16, 15, 4), bool] */;
  (%310, %311)
}

def @func_5266(%var_5247: Tensor[(154), float32], %var_5251: Tensor[(3328), int8], %var_5254: Tensor[(300), uint16]) -> (Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) {
  %312 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  %314 = cast(%var_5247, dtype="float32") /* ty=Tensor[(154), float32] */;
  %315 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %316 = reshape(%314, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %317 = reshape(%315, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %318 = @func_1023(%316, %317) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %319 = cast(%var_5251, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %320 = reshape(%319, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %321 = cast(%var_5254, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %322 = reshape(%321, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %323 = @func_4680(%322) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %324 = acos(%313) /* ty=Tensor[(2, 16, 15), float64] */;
  %325 = %318.5;
  %326 = @func_5007(%320) /* ty=Tensor[(16, 13, 16), int8] */;
  %327 = %323.1;
  %328 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  (%324, %325, %var_5247, meta[relay.Constant][23] /* ty=Tensor[(288), int16] */, %326, %var_5251, %327, %var_5254, %328)
}

def @func_11178() -> (Tensor[(11, 1, 6), float32],) {
  %329 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %330 = %329.0;
  (%330,)
}

def @func_10227(%var_10216: Tensor[(1, 16, 4), uint16], %var_10217: Tensor[(1, 16, 4), uint16]) -> (Tensor[(?, 16, 4), uint16], Tensor[(1, 16, 4), float32]) {
  %331 = cast(%var_10217, dtype="uint16") /* ty=Tensor[(1, 16, 4), uint16] */;
  %332 = shape_of(%var_10216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_10216, dtype="uint16") /* ty=Tensor[(1, 16, 4), uint16] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %335 = cast(%var_10216, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %336 = bitwise_or(%333, %334) /* ty=Tensor[(?, 16, 4), uint16] */;
  %337 = asinh(%335) /* ty=Tensor[(1, 16, 4), float32] */;
  (%336, %337)
}

def @func_10978() -> (Tensor[(11, 1, 6), float32],) {
  %338 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
  (%338,)
}

def @func_11481(%var_11476: Tensor[(16, 1, 16), bool], %var_11477: Tensor[(16, 7, 16), bool]) -> Tensor[(16, 7, 16), bool] {
  %339 = cast(%var_11476, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %340 = cast(%var_11477, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  logical_and(%339, %340) /* ty=Tensor[(16, 7, 16), bool] */
}

def @func_6172(%var_6135: Tensor[(3, 3, 13), float32], %var_6136: Tensor[(3, 3, 13), float32], %var_6150: Tensor[(154), float32], %var_6160: Tensor[(3360), float64], %var_6167: Tensor[(315), uint8], %var_6169: Tensor[(210, 2), float64]) -> (Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) {
  %341 = cast(%var_6136, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
  %342 = shape_of(%var_6135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_6135, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %345 = cast(%var_6150, dtype="float32") /* ty=Tensor[(154), float32] */;
  %346 = cast(meta[relay.Constant][24] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %347 = cast(meta[relay.Constant][25] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %348 = reshape(%345, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %349 = reshape(%346, newshape=[3328]) /* ty=Tensor[(3328), int8] */;
  %350 = reshape(%347, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %351 = @func_5266(%348, %349, %350) /* ty=(Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) */;
  %352 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %353 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 198), float32] */, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
  %354 = reshape(%353, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %355 = cast(%var_6160, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %356 = reshape(%355, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
  %357 = @func_3657(%356) /* ty=(Tensor[(14, 16, 15), float64],) */;
  %358 = cast(%var_6167, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %359 = cast(meta[relay.Constant][27] /* ty=Tensor[(968), float32] */, dtype="float32") /* ty=Tensor[(968), float32] */;
  %360 = cast(%var_6169, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %361 = reshape(%358, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %362 = reshape(%359, newshape=[968]) /* ty=Tensor[(968), float32] */;
  %363 = reshape(%360, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %364 = @func_5800(%361, %362, %363) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) */;
  %365 = mod(%343, %344) /* ty=Tensor[(3, 3, 13), float32] */;
  %366 = %351.3;
  %367 = %352.8;
  %368 = @func_5870(%354) /* ty=Tensor[(11, 9, 6), bool] */;
  %369 = %357.0;
  %370 = %364.1;
  (%365, %366, %var_6150, meta[relay.Constant][24] /* ty=Tensor[(3328), int8] */, meta[relay.Constant][25] /* ty=Tensor[(300), uint16] */, %367, %368, meta[relay.Constant][26] /* ty=Tensor[(3, 198), float32] */, %369, %var_6160, %370, %var_6167, meta[relay.Constant][27] /* ty=Tensor[(968), float32] */, %var_6169)
}

def @func_10365() -> (Tensor[(11, 1, 6), float64],) {
  %371 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
  %372 = %371.1;
  (%372,)
}

def @func_10863() -> (uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) {
  %373 = @func_10596() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) */;
  %374 = %373.4;
  %375 = cast(%374, dtype="uint8") /* ty=uint8 */;
  %376 = cast(meta[relay.Constant][28] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %377 = reshape(%375, newshape=[]) /* ty=uint8 */;
  %378 = reshape(%376, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %379 = @func_3538(%377, %378) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %380 = cast(meta[relay.Constant][29] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %381 = reshape(%380, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %382 = @func_4680(%381) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %383 = %379.0;
  %384 = %382.0;
  (%374, %383, meta[relay.Constant][28] /* ty=Tensor[(42), uint8] */, %384, meta[relay.Constant][29] /* ty=Tensor[(300), uint16] */)
}

def @func_10454() -> (Tensor[(11, 1, 6), float32], Tensor[(4, 11, 10), bool], Tensor[(110), bool], Tensor[(11, 1, 6), float64]) {
  %385 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), bool] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %386 = reshape(%385, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), bool] */;
  %387 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %390 = @func_9972() /* ty=Tensor[(11, 1, 6), float32] */;
  %391 = @func_9376(%386) /* ty=Tensor[(4, 11, 10), bool] */;
  %392 = sin(%389) /* ty=Tensor[(11, 1, 6), float64] */;
  (%390, %391, meta[relay.Constant][30] /* ty=Tensor[(110), bool] */, %392)
}

def @func_7927() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) {
  %393 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %394 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
  %395 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 504), float64] */, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 504), float64] */, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %397 = reshape(%395, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %398 = reshape(%396, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %399 = @func_4198(%397, %398) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %400 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %401 = cast(meta[relay.Constant][32] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
  %402 = reshape(%401, newshape=[594]) /* ty=Tensor[(594), float32] */;
  %403 = @func_7652(%402) /* ty=(Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %404 = %393.0;
  %405 = %394.0;
  %406 = %399.0;
  %407 = %400.0;
  %408 = %403.1;
  (%404, %405, %406, meta[relay.Constant][31] /* ty=Tensor[(2, 504), float64] */, %407, %408, meta[relay.Constant][32] /* ty=Tensor[(594), float32] */)
}

def @func_1023(%var_932: Tensor[(11, 2, 7), float32], %var_991: Tensor[(288), int16]) -> (Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) {
  %409 = cast(meta[relay.Constant][33] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %410 = cast(meta[relay.Constant][33] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %411 = reshape(%409, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %412 = reshape(%410, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %413 = @func_469(%411, %412) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %414 = cast(%var_932, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
  %415 = log(%414) /* ty=Tensor[(11, 2, 7), float32] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %417 = cast(%var_991, dtype="int16") /* ty=Tensor[(288), int16] */;
  %418 = cast(meta[relay.Constant][33] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %419 = reshape(%417, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), int16] */;
  %420 = reshape(%418, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %421 = @func_670(%419, %420) /* ty=(Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) */;
  %422 = cast(%415, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
  %423 = sinh(%422) /* ty=Tensor[(11, 2, 7), float32] */;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
  %425 = %421.2;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(420), float64] */;
  %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %428 = reshape(%426, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %429 = reshape(%427, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %430 = @func_469(%428, %429) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %431 = %413.0;
  %432 = sqrt(%416) /* ty=Tensor[(11, 2, 7), float64] */;
  %433 = exp(%424) /* ty=Tensor[(11, 2, 7), float32] */;
  %434 = %430.0;
  (%431, meta[relay.Constant][33] /* ty=Tensor[(70, 6), float64] */, %432, %425, %var_991, %433, %434)
}

def @func_12931() -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), float32], Tensor[(1, 960), bool], Tensor[(330), float64]) {
  %435 = @func_7927() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) */;
  %436 = %435.4;
  %437 = cast(%436, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %438 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 960), bool] */, dtype="bool") /* ty=Tensor[(1, 960), bool] */;
  %439 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %440 = reshape(%438, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), bool] */;
  %441 = reshape(%439, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %442 = @func_8052(%440, %441) /* ty=(Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) */;
  %443 = acos(%437) /* ty=Tensor[(11, 1, 6), float64] */;
  %444 = %442.0;
  (%443, %444, meta[relay.Constant][34] /* ty=Tensor[(1, 960), bool] */, meta[relay.Constant][35] /* ty=Tensor[(330), float64] */)
}

def @func_13030() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %445 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %446 = @func_9194() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
  %447 = %445.0;
  %448 = %446.0;
  (%447, %448)
}

def @func_11464() -> (Tensor[(?, 15, 4), float64],) {
  %449 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  (%449,)
}

def @func_9376(%var_9365: Tensor[(1, 11, 10), bool]) -> Tensor[(4, 11, 10), bool] {
  %450 = cast(%var_9365, dtype="bool") /* ty=Tensor[(1, 11, 10), bool] */;
  %451 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  logical_and(%450, %451) /* ty=Tensor[(4, 11, 10), bool] */
}

def @func_6925() -> (Tensor[(81), float32],) {
  %452 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %453 = %452.2;
  (%453,)
}

def @func_6100() -> (Tensor[(11, 1, 6), float32],) {
  %454 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %455 = %454.0;
  (%455,)
}

def @func_10031() -> Tensor[(11, 1, 6), float32] {
  %456 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %456.0
}

def @func_469(%var_464: Tensor[(4, 7, 15), float64], %var_465: Tensor[(4, 7, 15), float64]) -> (Tensor[(4, 7, 15), float64],) {
  %457 = cast(%var_465, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %458 = shape_of(%var_464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_464, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = floor_divide(%459, %460) /* ty=Tensor[(4, 7, 15), float64] */;
  (%461,)
}

def @func_7331() -> (Tensor[(16, 15, 4), bool],) {
  %462 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %463 = %462.3;
  (%463,)
}

def @func_12877() -> Tensor[(16, 15, 4), float64] {
  %464 = @func_8333() /* ty=(Tensor[(16, 15, 4), float64],) */;
  %464.0
}

def @func_8333() -> (Tensor[(16, 15, 4), float64],) {
  %465 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %468 = sin(%467) /* ty=Tensor[(16, 15, 4), float64] */;
  (%468,)
}

def @func_10172() -> (Tensor[(?, 15, 4), float64],) {
  %469 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %470 = %469.0;
  (%470,)
}

def @func_10941() -> Tensor[(2, 16, 15), float64] {
  %471 = @func_10887() /* ty=(Tensor[(2, 16, 15), float64],) */;
  %471.0
}

def @func_10887() -> (Tensor[(2, 16, 15), float64],) {
  %472 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %473 = %472.0;
  (%473,)
}

def @func_12318(%var_12316: Tensor[(6, 99), float32]) -> (Tensor[(4, 7, 15), float64], Tensor[(11, 9, 6), bool], Tensor[(6, 99), float32]) {
  %474 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %475 = cast(%var_12316, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %476 = reshape(%475, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %477 = %474.1;
  %478 = @func_5870(%476) /* ty=Tensor[(11, 9, 6), bool] */;
  (%477, %478, %var_12316)
}

def @func_7412() -> (Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) {
  %479 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %480 = %479.0;
  %481 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %484 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%480, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(%480, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %488 = cosh(%487) /* ty=Tensor[(11, 1, 6), float32] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %490 = equal(%485, %486) /* ty=Tensor[(11, ?, 6), bool] */;
  %491 = acosh(%489) /* ty=Tensor[(11, 1, 6), float64] */;
  (%490, %491)
}

def @func_8591(%var_8544: Tensor[(780), float64]) -> (Tensor[(11, 1, 6), float64], Tensor[(360), float64], Tensor[(780), float64], Tensor[(11, 1, 6), float32], Tensor[(9, ?, 9), float64]) {
  %492 = cast(meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %493 = cast(%var_8544, dtype="float64") /* ty=Tensor[(780), float64] */;
  %494 = reshape(%492, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), float64] */;
  %495 = reshape(%493, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), float64] */;
  %496 = @func_8139(%494, %495) /* ty=(Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) */;
  %497 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %498 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
  %500 = asin(%499) /* ty=Tensor[(9, ?, 9), float32] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
  %502 = acosh(%501) /* ty=Tensor[(9, ?, 9), float32] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
  %504 = %496.1;
  %505 = %497.0;
  %506 = acos(%503) /* ty=Tensor[(9, ?, 9), float64] */;
  (%504, meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, %var_8544, %505, %506)
}

def @func_6615(%var_6613: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) {
  %507 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %508 = cast(%var_6613, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %509 = reshape(%508, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %510 = @func_4680(%509) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %511 = %507.0;
  %512 = %510.2;
  (%511, %512, %var_6613)
}

def @func_3538(%var_3531: uint8, %var_3532: Tensor[(3, 1, 14), uint8]) -> (Tensor[(3, 1, 14), uint8],) {
  %513 = cast(%var_3531, dtype="uint8") /* ty=uint8 */;
  %514 = cast(%var_3532, dtype="uint8") /* ty=Tensor[(3, 1, 14), uint8] */;
  %515 = multiply(%513, %514) /* ty=Tensor[(3, 1, 14), uint8] */;
  (%515,)
}

def @func_5491(%var_5417: Tensor[(11, 5, 14), float32], %var_5478: Tensor[(154), float32]) -> (Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) {
  %516 = cast(%var_5417, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %517 = asinh(%516) /* ty=Tensor[(11, 5, 14), float32] */;
  %518 = cast(%517, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %519 = shape_of(%var_5417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_5417, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %523 = cast(meta[relay.Constant][38] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %524 = reshape(%523, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float32] */;
  %525 = @func_5099(%524) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) */;
  %526 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 240), float64] */, dtype="float64") /* ty=Tensor[(14, 240), float64] */;
  %527 = reshape(%526, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
  %528 = @func_3657(%527) /* ty=(Tensor[(14, 16, 15), float64],) */;
  %529 = cast(meta[relay.Constant][40] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %530 = reshape(%529, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
  %531 = cast(%var_5478, dtype="float32") /* ty=Tensor[(154), float32] */;
  %532 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 144), int16] */, dtype="int16") /* ty=Tensor[(2, 144), int16] */;
  %533 = reshape(%531, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %534 = reshape(%532, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %535 = @func_1023(%533, %534) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %536 = equal(%520, %521) /* ty=Tensor[(11, 5, 14), bool] */;
  %537 = %522.0;
  %538 = %525.1;
  %539 = %528.0;
  %540 = @func_3575(%530) /* ty=Tensor[(9, ?, 9), bool] */;
  %541 = %535.5;
  (%536, %537, %538, meta[relay.Constant][38] /* ty=Tensor[(660), float32] */, %539, meta[relay.Constant][39] /* ty=Tensor[(14, 240), float64] */, %540, meta[relay.Constant][40] /* ty=Tensor[(81), float32] */, %541, %var_5478, meta[relay.Constant][41] /* ty=Tensor[(2, 144), int16] */)
}

def @func_9561() -> Tensor[(1008), float64] {
  %542 = @func_8230() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) */;
  %542.1
}

def @func_11628() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) {
  %543 = @func_8333() /* ty=(Tensor[(16, 15, 4), float64],) */;
  %544 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
  %545 = %543.0;
  (%544, %545)
}

def @func_10654() -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32]) {
  %546 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %547 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %548 = %546.0;
  %549 = %547.0;
  (%548, %549)
}

def @func_11023(%var_11011: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
  %550 = @func_10763() /* ty=Tensor[(11, 1, 6), float32] */;
  %551 = cast(%550, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %552 = cast(%var_11011, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
  equal(%551, %552) /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_9903() -> (Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) {
  %553 = cast(meta[relay.Constant][42] /* ty=Tensor[(1600), int16] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %554 = reshape(%553, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), int16] */;
  %555 = @func_8904(%554) /* ty=(Tensor[(16, 10, 10), bool], Tensor[(420), float64]) */;
  %556 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  %557 = %555.0;
  (%556, %557, meta[relay.Constant][42] /* ty=Tensor[(1600), int16] */)
}

def @func_9237(%var_9212: Tensor[(117, 1), float32], %var_9213: Tensor[(154, 1), float32], %var_9214: Tensor[(3360), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(154, 1), float32], Tensor[(3360), float64], Tensor[(1, 420), float64], Tensor[(117, 315), int32], Tensor[(770), float32], Tensor[(11, 1, 6), float32]) {
  %558 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %559 = cast(%var_9212, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %560 = cast(%var_9212, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %561 = cast(%var_9213, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
  %562 = cast(%var_9214, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %563 = cast(meta[relay.Constant][43] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %565 = reshape(%559, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %566 = reshape(%560, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %567 = reshape(%561, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %568 = reshape(%562, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %569 = reshape(%563, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %570 = reshape(%564, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %571 = @func_6172(%565, %566, %567, %568, %569, %570) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %572 = cast(meta[relay.Constant][43] /* ty=Tensor[(315), uint8] */, dtype="int32") /* ty=Tensor[(315), int32] */;
  %573 = cast(%var_9212, dtype="int32") /* ty=Tensor[(117, 1), int32] */;
  %574 = cast(%var_9213, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
  %575 = reshape(%574, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %576 = @func_7221(%575) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) */;
  %577 = %558.0;
  %578 = %571.4;
  %579 = bitwise_and(%572, %573) /* ty=Tensor[(117, 315), int32] */;
  %580 = %576.2;
  %581 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  (%577, %578, %var_9213, %var_9214, meta[relay.Constant][44] /* ty=Tensor[(1, 420), float64] */, %579, %580, %581)
}

def @func_11193() -> (Tensor[(11, 1, 6), float32],) {
  %582 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
  (%582,)
}

def @func_12263(%var_12256: Tensor[(4, 13, 5), float32]) -> (Tensor[(4, 13, 5), float32],) {
  %583 = cast(%var_12256, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %584 = asinh(%583) /* ty=Tensor[(4, 13, 5), float32] */;
  (%584,)
}

def @func_7371() -> Tensor[(16, 15, 4), bool] {
  %585 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
  %585.0
}

def @func_11528() -> (Tensor[(81), float32], Tensor[(16, 7, 16), bool], Tensor[(256), bool], Tensor[(1792), bool], Tensor[(11, 1, 6), float32]) {
  %586 = @func_10654() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32]) */;
  %587 = cast(meta[relay.Constant][45] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %588 = cast(meta[relay.Constant][46] /* ty=Tensor[(1792), bool] */, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %589 = reshape(%587, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), bool] */;
  %590 = reshape(%588, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), bool] */;
  %591 = %586.1;
  %592 = @func_11481(%589, %590) /* ty=Tensor[(16, 7, 16), bool] */;
  %593 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
  (%591, %592, meta[relay.Constant][45] /* ty=Tensor[(256), bool] */, meta[relay.Constant][46] /* ty=Tensor[(1792), bool] */, %593)
}

def @func_9972() -> Tensor[(11, 1, 6), float32] {
  %594 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %594.0
}

def @func_12356() -> Tensor[(11, 1, 6), float32] {
  %595 = @func_11568() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) */;
  %595.1
}

def @func_10493() -> (Tensor[(420), float64],) {
  %596 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %597 = %596.2;
  (%597,)
}

def @func_8384() -> (Tensor[(288), int16], Tensor[(81), float32]) {
  %598 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %599 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %600 = %598.3;
  %601 = %599.0;
  (%600, %601)
}

def @func_7019() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %602 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %603 = %602.0;
  %604 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
  (%603, %604)
}

def @func_12544(%var_12513: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) {
  %605 = cast(%var_12513, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %606 = reshape(%605, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %607 = @func_6376(%606) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
  %608 = cast(meta[relay.Constant][47] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %609 = reshape(%608, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %610 = @func_11379(%609) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) */;
  %611 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %612 = %607.0;
  %613 = %610.2;
  (%611, %612, %var_12513, %613, meta[relay.Constant][47] /* ty=Tensor[(450), float32] */)
}

def @func_11434() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), int8], Tensor[(420), float64], Tensor[(11, 1, 6), float32], Tensor[(3, ?, 14), uint32]) {
  %614 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %615 = @func_10053() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(?, 15, 4), float64] */;
  %618 = sigmoid(%617) /* ty=Tensor[(?, 15, 4), float64] */;
  %619 = cast(%616, dtype="int8") /* ty=Tensor[(?, 15, 4), int8] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="int8") /* ty=Tensor[(?, 15, 4), int8] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %623 = @func_10493() /* ty=(Tensor[(420), float64],) */;
  %624 = @func_10654() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32]) */;
  %625 = @func_11073() /* ty=(Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) */;
  %626 = %614.0;
  %627 = left_shift(%621, %622) /* ty=Tensor[(?, 15, 4), int8] */;
  %628 = %623.0;
  %629 = %624.0;
  %630 = %625.0;
  (%626, %627, %628, %629, %630)
}

def @func_9691() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) {
  %631 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %632 = cast(meta[relay.Constant][48] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %633 = cast(meta[relay.Constant][48] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %634 = reshape(%632, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %635 = reshape(%633, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %636 = @func_2086(%634, %635) /* ty=(Tensor[(3, 7, 15), float64],) */;
  %637 = %636.0;
  %638 = cast(meta[relay.Constant][48] /* ty=Tensor[(315), uint8] */, dtype="bool") /* ty=Tensor[(315), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = logical_or(%640, %641) /* ty=Tensor[(3, 7, 15), bool] */;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %644 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %645 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
  %646 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  %647 = %631.0;
  %648 = asinh(%643) /* ty=Tensor[(3, 7, 15), float32] */;
  %649 = %644.0;
  (%645, %646, %647, %648, %649)
}

def @func_12855(%var_12845: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(1008), float64], Tensor[(42), uint8], Tensor[(42), uint8], Tensor[(9, ?, 9), bool]) {
  %650 = cast(%var_12845, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %651 = reshape(%650, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %652 = @func_12544(%651) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) */;
  %653 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %654 = @func_9561() /* ty=Tensor[(1008), float64] */;
  %655 = %652.2;
  %656 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
  (%653, %654, %655, %var_12845, %656)
}

def @func_11781(%var_11769: Tensor[(6, 99), float32], %var_11771: Tensor[(3360), float64]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(22, 7), float32], Tensor[(6, 99), float32], Tensor[(42), uint8], Tensor[(3360), float64]) {
  %657 = @func_9691() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) */;
  %658 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %659 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %660 = reshape(%658, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %661 = reshape(%659, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %662 = @func_469(%660, %661) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %663 = cast(%var_11769, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %664 = cast(%var_11769, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %665 = cast(meta[relay.Constant][50] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %666 = cast(%var_11771, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %667 = %657.3;
  %668 = cast(%667, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %669 = reshape(%663, newshape=[3, 198]) /* ty=Tensor[(3, 198), float32] */;
  %670 = reshape(%664, newshape=[3, 198]) /* ty=Tensor[(3, 198), float32] */;
  %671 = reshape(%665, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %672 = reshape(%666, newshape=[1680, 2]) /* ty=Tensor[(1680, 2), float64] */;
  %673 = reshape(%668, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %674 = @func_9113(%669, %670, %671, %672, %673) /* ty=(Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) */;
  %675 = %662.0;
  %676 = %674.11;
  (%667, %675, meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, %676, %var_11769, meta[relay.Constant][50] /* ty=Tensor[(42), uint8] */, %var_11771)
}

def @func_9036() -> (Tensor[(?, 15, 4), float64],) {
  %677 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %678 = %677.0;
  (%678,)
}

def @func_5285() -> Tensor[(11, 1, 6), float32] {
  %679 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %679.0
}

def @func_10752() -> (Tensor[(11, 1, 6), float32],) {
  %680 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %681 = %680.0;
  (%681,)
}

def @func_10103() -> (Tensor[(81), float32],) {
  %682 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %683 = %682.1;
  (%683,)
}

def @func_9941(%var_9925: Tensor[(112), float64]) -> (Tensor[(?, 15, 4), float64], Tensor[(42), uint8], Tensor[(112), float64], uint8, Tensor[(4, 11, 10), bool], Tensor[(22, 5), bool]) {
  %684 = @func_9036() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %685 = cast(%var_9925, dtype="float64") /* ty=Tensor[(112), float64] */;
  %686 = cast(meta[relay.Constant][51] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %687 = reshape(%685, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %688 = reshape(%686, newshape=[]) /* ty=uint8 */;
  %689 = @func_6049(%687, %688) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) */;
  %690 = cast(meta[relay.Constant][52] /* ty=Tensor[(22, 5), bool] */, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
  %691 = reshape(%690, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), bool] */;
  %692 = %684.0;
  %693 = %689.3;
  %694 = @func_9376(%691) /* ty=Tensor[(4, 11, 10), bool] */;
  (%692, %693, %var_9925, meta[relay.Constant][51] /* ty=uint8 */, %694, meta[relay.Constant][52] /* ty=Tensor[(22, 5), bool] */)
}

def @func_8904(%var_8877: Tensor[(16, 10, 10), int16]) -> (Tensor[(16, 10, 10), bool], Tensor[(420), float64]) {
  %695 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 10, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 10, 10), bool] */;
  %696 = shape_of(%var_8877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_8877, dtype="bool") /* ty=Tensor[(16, 10, 10), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %700 = less(%697, %698) /* ty=Tensor[(16, 10, 10), bool] */;
  %701 = %699.1;
  (%700, %701)
}

def @func_10531(%var_10501: Tensor[(5, 7, 15), float64], %var_10509: Tensor[(154), float32], %var_10510: Tensor[(3360, 1), float64], %var_10511: Tensor[(1, 315), uint8]) -> (Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) {
  %702 = cast(%var_10501, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %703 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %704 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 9), float32] */;
  %705 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 9), float32] */;
  %706 = cast(%var_10509, dtype="float32") /* ty=Tensor[(154), float32] */;
  %707 = cast(%var_10510, dtype="float64") /* ty=Tensor[(3360, 1), float64] */;
  %708 = cast(%var_10511, dtype="uint8") /* ty=Tensor[(1, 315), uint8] */;
  %709 = cast(meta[relay.Constant][55] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %710 = reshape(%704, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %711 = reshape(%705, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %712 = reshape(%706, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %713 = reshape(%707, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %714 = reshape(%708, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %715 = reshape(%709, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %716 = @func_6172(%710, %711, %712, %713, %714, %715) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %717 = cast(%var_10509, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %718 = cast(%var_10510, dtype="uint16") /* ty=Tensor[(3360, 1), uint16] */;
  %719 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %720 = sinh(%702) /* ty=Tensor[(5, 7, 15), float64] */;
  %721 = %703.0;
  %722 = %716.0;
  %723 = minimum(%717, %718) /* ty=Tensor[(3360, 154), uint16] */;
  %724 = %719.2;
  (%720, %721, %722, meta[relay.Constant][54] /* ty=Tensor[(13, 9), float32] */, %var_10511, meta[relay.Constant][55] /* ty=Tensor[(420), float64] */, %723, %724)
}

def @func_3575(%var_3560: Tensor[(9, 1, 9), float32]) -> Tensor[(9, ?, 9), bool] {
  %725 = cast(%var_3560, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
  %726 = atanh(%725) /* ty=Tensor[(9, 1, 9), float32] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
  %728 = tan(%727) /* ty=Tensor[(9, 1, 9), float32] */;
  %729 = cast(%726, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%731, %732) /* ty=Tensor[(9, ?, 9), bool] */
}

def @func_670(%var_575: Tensor[(9, 8, 4), int16], %var_624: Tensor[(4, 7, 15), float64]) -> (Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) {
  %733 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 8, 4), int16] */, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
  %734 = cosh(%733) /* ty=Tensor[(9, 8, 4), float64] */;
  %735 = cast(%var_575, dtype="int16") /* ty=Tensor[(9, 8, 4), int16] */;
  %736 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(9, 8, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 4), int16] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %739 = multiply(%737, %738) /* ty=Tensor[(9, 8, 4), int16] */;
  %740 = cast(%739, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %741 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%734, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %745 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %746 = reshape(%744, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %747 = reshape(%745, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %748 = @func_469(%746, %747) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %749 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %750 = %748.0;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %752 = reshape(%749, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %753 = reshape(%751, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %754 = @func_469(%752, %753) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %755 = cast(%750, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %756 = cast(%750, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %757 = cast(%750, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %758 = reshape(%756, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %759 = reshape(%757, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %760 = @func_469(%758, %759) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %761 = %760.0;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %763 = reshape(%755, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %764 = reshape(%762, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %765 = @func_469(%763, %764) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %766 = cast(%var_624, dtype="bool") /* ty=Tensor[(4, 7, 15), bool] */;
  %767 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%761, dtype="bool") /* ty=Tensor[(4, 7, 15), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = %765.0;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %772 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %773 = reshape(%771, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %774 = reshape(%772, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %775 = @func_469(%773, %774) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %776 = cast(%770, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %777 = cast(%var_624, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %778 = reshape(%776, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %779 = reshape(%777, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %780 = @func_469(%778, %779) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %781 = %754.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %783 = cast(%750, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %784 = reshape(%782, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %785 = reshape(%783, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %786 = @func_469(%784, %785) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %787 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %788 = %780.0;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
  %790 = reshape(%787, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %791 = reshape(%789, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %792 = @func_469(%790, %791) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %793 = equal(%742, %743) /* ty=Tensor[(9, 8, 4), bool] */;
  %794 = less_equal(%768, %769) /* ty=Tensor[(4, 7, 15), bool] */;
  %795 = %775.0;
  %796 = %786.0;
  %797 = %792.0;
  (%793, %750, meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, %781, %770, %794, %795, %788, %796, %797)
}

def @func_12118() -> (Tensor[(1008), float64], Tensor[(16, 15, 4), bool]) {
  %798 = @func_11826() /* ty=(Tensor[(1008), float64],) */;
  %799 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
  %800 = %798.0;
  %801 = %799.0;
  (%800, %801)
}

def @func_12084(%var_12016: Tensor[(6, 15, 15), uint32], %var_12075: Tensor[(154), float32]) -> (Tensor[(6, 15, 15), uint32], Tensor[(81), float32], Tensor[(1, 315), uint8], Tensor[(525), float64], Tensor[(154), float32], Tensor[(3360), float64], Tensor[(315), uint8]) {
  %802 = cast(%var_12016, dtype="uint32") /* ty=Tensor[(6, 15, 15), uint32] */;
  %803 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(6, 15, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 15, 15), uint32] */, dtype="uint32") /* ty=Tensor[(6, 15, 15), uint32] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %806 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %807 = cast(meta[relay.Constant][59] /* ty=Tensor[(525), float64] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %808 = cast(%var_12075, dtype="float32") /* ty=Tensor[(154), float32] */;
  %809 = cast(meta[relay.Constant][60] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %810 = cast(meta[relay.Constant][61] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %811 = reshape(%807, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float64] */;
  %812 = reshape(%808, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %813 = reshape(%809, newshape=[3360, 1]) /* ty=Tensor[(3360, 1), float64] */;
  %814 = reshape(%810, newshape=[1, 315]) /* ty=Tensor[(1, 315), uint8] */;
  %815 = @func_10531(%811, %812, %813, %814) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) */;
  %816 = subtract(%804, %805) /* ty=Tensor[(6, 15, 15), uint32] */;
  %817 = %806.2;
  %818 = %815.4;
  (%816, %817, %818, meta[relay.Constant][59] /* ty=Tensor[(525), float64] */, %var_12075, meta[relay.Constant][60] /* ty=Tensor[(3360), float64] */, meta[relay.Constant][61] /* ty=Tensor[(315), uint8] */)
}

def @func_8936(%var_8917: Tensor[(11, 9, 7), float64]) -> Tensor[(11, 9, 7), float64] {
  %819 = cast(%var_8917, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  asinh(%819) /* ty=Tensor[(11, 9, 7), float64] */
}

def @func_10053() -> (Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  %820 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %821 = cast(meta[relay.Constant][62] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
  %822 = reshape(%821, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %823 = %820.0;
  %824 = @func_5870(%822) /* ty=Tensor[(11, 9, 6), bool] */;
  (%823, %824, meta[relay.Constant][62] /* ty=Tensor[(594), float32] */)
}

def @func_9022() -> Tensor[(11, 1, 6), float32] {
  %825 = @func_8204() /* ty=(Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) */;
  %825.1
}

def @func_4198(%var_4192: Tensor[(16, 7, 9), float64], %var_4193: Tensor[(16, 7, 9), float64]) -> (Tensor[(16, 7, 9), float64],) {
  %826 = cast(%var_4193, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %827 = shape_of(%var_4192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%var_4192, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %830 = maximum(%828, %829) /* ty=Tensor[(16, 7, 9), float64] */;
  (%830,)
}

def @func_12671() -> (Tensor[(81), float32], Tensor[(9, ?, 9), bool]) {
  %831 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %832 = %831.1;
  %833 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
  (%832, %833)
}

def @func_11826() -> (Tensor[(1008), float64],) {
  %834 = @func_9712() /* ty=(Tensor[(1008), float64],) */;
  %835 = %834.0;
  (%835,)
}

def @func_9461(%var_9455: Tensor[(1, 7, 5), uint8], %var_9456: Tensor[(16, 7, 5), uint8]) -> Tensor[(16, 7, 5), uint8] {
  %836 = cast(%var_9455, dtype="uint8") /* ty=Tensor[(1, 7, 5), uint8] */;
  %837 = cast(%var_9456, dtype="uint8") /* ty=Tensor[(16, 7, 5), uint8] */;
  logical_xor(%836, %837) /* ty=Tensor[(16, 7, 5), uint8] */
}

def @func_6354() -> Tensor[(11, 1, 6), float32] {
  @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_8631() -> Tensor[(11, 1, 6), float32] {
  %838 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %838.0
}

def @func_7542() -> (Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) {
  %839 = cast(meta[relay.Constant][63] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %840 = cast(meta[relay.Constant][64] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %841 = reshape(%839, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %842 = reshape(%840, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %843 = @func_1023(%841, %842) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %844 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %845 = %843.3;
  (%844, %845, meta[relay.Constant][63] /* ty=Tensor[(154), float32] */, meta[relay.Constant][64] /* ty=Tensor[(288), int16] */)
}

def @func_8847(%var_8841: Tensor[(330, 2), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 1, 6), float64], Tensor[(154), float32], Tensor[(154), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(11, 9, 6), bool], Tensor[(198, 3), float32], Tensor[(330, 2), float64]) {
  %846 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %847 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %848 = cast(meta[relay.Constant][65] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %849 = reshape(%848, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float32] */;
  %850 = @func_5099(%849) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) */;
  %851 = %850.0;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %853 = @func_8683() /* ty=(Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) */;
  %854 = cast(meta[relay.Constant][66] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %855 = reshape(%854, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %856 = @func_7221(%855) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) */;
  %857 = cast(meta[relay.Constant][67] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %858 = reshape(%857, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %859 = @func_6376(%858) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
  %860 = cast(meta[relay.Constant][68] /* ty=Tensor[(198, 3), float32] */, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
  %861 = reshape(%860, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %862 = cast(%var_8841, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
  %863 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(330, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %864 = cast(meta[relay.Constant][65] /* ty=Tensor[(330, 2), float32] */, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %866 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %867 = %846.0;
  %868 = %847.0;
  %869 = asinh(%852) /* ty=Tensor[(11, 10, 6), float64] */;
  %870 = %853.2;
  %871 = %856.3;
  %872 = %859.0;
  %873 = @func_5870(%861) /* ty=Tensor[(11, 9, 6), bool] */;
  %874 = divide(%864, %865) /* ty=Tensor[(330, 2), float64] */;
  (%866, %867, %868, %869, %870, %871, meta[relay.Constant][66] /* ty=Tensor[(154), float32] */, %872, meta[relay.Constant][67] /* ty=Tensor[(42), uint8] */, %873, meta[relay.Constant][68] /* ty=Tensor[(198, 3), float32] */, %874)
}

def @func_4964() -> Tensor[(2, 16, 15), float64] {
  %875 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  cos(%875) /* ty=Tensor[(2, 16, 15), float64] */
}

def @func_11568() -> (Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) {
  %876 = @func_10978() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %877 = %876.0;
  %878 = cast(%877, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %879 = @func_8683() /* ty=(Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) */;
  %880 = cos(%878) /* ty=Tensor[(11, 1, 6), float64] */;
  %881 = %879.1;
  (%880, %881)
}

def @func_6049(%var_6000: Tensor[(1, 112), float64], %var_6001: uint8) -> (Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) {
  %882 = cast(%var_6000, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
  %883 = cast(%var_6001, dtype="uint8") /* ty=uint8 */;
  %884 = cast(meta[relay.Constant][70] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %885 = reshape(%882, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
  %886 = reshape(%883, newshape=[]) /* ty=uint8 */;
  %887 = reshape(%884, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %888 = @func_5347(%885, %886, %887) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) */;
  %889 = cast(meta[relay.Constant][71] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %890 = cast(meta[relay.Constant][71] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %891 = reshape(%889, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %892 = reshape(%890, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %893 = @func_2086(%891, %892) /* ty=(Tensor[(3, 7, 15), float64],) */;
  %894 = cast(%var_6000, dtype="float32") /* ty=Tensor[(1, 112), float32] */;
  %895 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
  %896 = %888.0;
  %897 = %893.0;
  %898 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  %899 = sin(%894) /* ty=Tensor[(1, 112), float32] */;
  (%895, %896, %var_6001, meta[relay.Constant][70] /* ty=Tensor[(42), uint8] */, %897, meta[relay.Constant][71] /* ty=Tensor[(315), uint8] */, %898, %899)
}

def @func_8204() -> (Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) {
  %900 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  %901 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
  (%900, %901)
}

def @func_6748() -> (Tensor[(11, 1, 6), float32],) {
  %902 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %903 = %902.0;
  (%903,)
}

def @func_9712() -> (Tensor[(1008), float64],) {
  %904 = @func_9561() /* ty=Tensor[(1008), float64] */;
  (%904,)
}

def @func_6462() -> Tensor[(11, 1, 6), float32] {
  %905 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %905.0
}

def @func_12007() -> Tensor[(11, 1, 6), float32] {
  @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_10728(%var_10704: Tensor[(6, 7, 3), float64], %var_10713: uint8) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42, 1), uint8], Tensor[(6, 7, 3), bool]) {
  %906 = cast(%var_10713, dtype="uint8") /* ty=uint8 */;
  %907 = cast(meta[relay.Constant][72] /* ty=Tensor[(42, 1), uint8] */, dtype="uint8") /* ty=Tensor[(42, 1), uint8] */;
  %908 = reshape(%906, newshape=[]) /* ty=uint8 */;
  %909 = reshape(%907, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %910 = @func_3538(%908, %909) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %911 = cast(%var_10704, dtype="float64") /* ty=Tensor[(6, 7, 3), float64] */;
  %912 = asinh(%911) /* ty=Tensor[(6, 7, 3), float64] */;
  %913 = cast(%var_10704, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %917 = %910.0;
  %918 = not_equal(%915, %916) /* ty=Tensor[(6, 7, 3), bool] */;
  (%917, %var_10713, meta[relay.Constant][72] /* ty=Tensor[(42, 1), uint8] */, %918)
}

def @func_8290(%var_8239: Tensor[(5, 9, 10), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(81), float64]) {
  %919 = cast(%var_8239, dtype="float32") /* ty=Tensor[(5, 9, 10), float32] */;
  %920 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %921 = %920.1;
  %922 = cast(%921, dtype="float64") /* ty=Tensor[(81), float64] */;
  %923 = erf(%919) /* ty=Tensor[(5, 9, 10), float32] */;
  %924 = asinh(%922) /* ty=Tensor[(81), float64] */;
  (%923, %924)
}

def @func_5911() -> Tensor[(11, 1, 6), float32] {
  @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_6552() -> (Tensor[(11, 1, 6), float32],) {
  %925 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  (%925,)
}

def @func_5187(%var_5185: Tensor[(3328), int8]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) {
  %926 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %927 = cast(%var_5185, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %928 = reshape(%927, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %929 = %926.0;
  %930 = @func_5007(%928) /* ty=Tensor[(16, 13, 16), int8] */;
  (%929, %930, %var_5185)
}

def @func_8491(%var_8454: Tensor[(12, 1, 13), float64], %var_8474: Tensor[(11, 2, 6), float32], %var_8487: Tensor[(10, 30), uint16]) -> (Tensor[(12, 1, 13), float64], Tensor[(11, 2, 6), uint16], Tensor[(3360), float64], Tensor[(10, 30), uint16]) {
  %931 = cast(%var_8454, dtype="float64") /* ty=Tensor[(12, 1, 13), float64] */;
  %932 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
  %933 = cast(%932, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
  %934 = cast(%var_8474, dtype="uint16") /* ty=Tensor[(11, 2, 6), uint16] */;
  %935 = cast(%var_8487, dtype="uint16") /* ty=Tensor[(10, 30), uint16] */;
  %936 = reshape(%935, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %937 = @func_6656(%936) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) */;
  %938 = erf(%931) /* ty=Tensor[(12, 1, 13), float64] */;
  %939 = bitwise_and(%933, %934) /* ty=Tensor[(11, 2, 6), uint16] */;
  %940 = %937.1;
  (%938, %939, %940, %var_8487)
}

def @func_10763() -> Tensor[(11, 1, 6), float32] {
  %941 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %941.0
}

def @func_5704() -> Tensor[(?, 15, 4), float64] {
  %942 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %942.6
}

def @func_6730() -> (Tensor[(?, 15, 4), float64],) {
  %943 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  (%943,)
}

def @func_11379(%var_11344: Tensor[(450), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) {
  %944 = cast(%var_11344, dtype="float32") /* ty=Tensor[(450), float32] */;
  %945 = reshape(%944, newshape=[5, 9, 10]) /* ty=Tensor[(5, 9, 10), float32] */;
  %946 = @func_8290(%945) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(81), float64]) */;
  %947 = @func_11073() /* ty=(Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="float32") /* ty=Tensor[(3, ?, 14), float32] */;
  %950 = sinh(%949) /* ty=Tensor[(3, ?, 14), float32] */;
  %951 = cast(%948, dtype="bool") /* ty=Tensor[(3, ?, 14), bool] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="bool") /* ty=Tensor[(3, ?, 14), bool] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %955 = cast(%948, dtype="float64") /* ty=Tensor[(3, ?, 14), float64] */;
  %956 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%950, dtype="float64") /* ty=Tensor[(3, ?, 14), float64] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %959 = %946.0;
  %960 = greater(%953, %954) /* ty=Tensor[(3, ?, 14), bool] */;
  %961 = floor_mod(%957, %958) /* ty=Tensor[(3, ?, 14), float64] */;
  (%959, %var_11344, %960, %961)
}

def @func_12785(%var_12778: Tensor[(8, 16, 7), uint8], %var_12779: Tensor[(8, 16, 7), uint8]) -> (Tensor[(8, 16, 7), uint8],) {
  %962 = cast(%var_12779, dtype="uint8") /* ty=Tensor[(8, 16, 7), uint8] */;
  %963 = shape_of(%var_12778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %964 = cast(%var_12778, dtype="uint8") /* ty=Tensor[(8, 16, 7), uint8] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %966 = maximum(%964, %965) /* ty=Tensor[(8, 16, 7), uint8] */;
  (%966,)
}

def @func_7221(%var_7197: Tensor[(154), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) {
  %967 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %968 = cast(meta[relay.Constant][73] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %969 = cast(%var_7197, dtype="float32") /* ty=Tensor[(154), float32] */;
  %970 = reshape(%968, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float32] */;
  %971 = reshape(%969, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %972 = @func_5491(%970, %971) /* ty=(Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) */;
  %973 = %967.0;
  %974 = %972.7;
  (%973, %974, meta[relay.Constant][73] /* ty=Tensor[(770), float32] */, %var_7197)
}

def @func_7045() -> Tensor[(9, ?, 9), bool] {
  %975 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %975.1
}

def @func_10815() -> (Tensor[(16, 7, 9), float64], Tensor[(16, 15, 4), bool]) {
  %976 = @func_8230() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) */;
  %977 = %976.0;
  %978 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  (%977, %978)
}

def @func_5413() -> (Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) {
  %979 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %980 = cast(meta[relay.Constant][74] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %981 = reshape(%980, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %982 = @func_3066(%981) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %983 = cast(meta[relay.Constant][74] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %984 = reshape(%983, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %985 = @func_3066(%984) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %986 = cast(meta[relay.Constant][75] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %987 = cast(meta[relay.Constant][75] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %988 = reshape(%986, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %989 = reshape(%987, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %990 = @func_469(%988, %989) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %991 = cast(meta[relay.Constant][74] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %992 = reshape(%991, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
  %993 = @func_3066(%992) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
  %994 = %993.0;
  %995 = cast(%994, dtype="float64") /* ty=Tensor[(?, 15, 4), float64] */;
  %996 = cast(meta[relay.Constant][76] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %997 = reshape(%996, newshape=[3328]) /* ty=Tensor[(3328), int8] */;
  %998 = @func_5187(%997) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) */;
  %999 = %979.0;
  %1000 = %982.1;
  %1001 = %985.1;
  %1002 = %990.0;
  %1003 = sinh(%995) /* ty=Tensor[(?, 15, 4), float64] */;
  %1004 = %998.2;
  (%999, meta[relay.Constant][74] /* ty=Tensor[(240, 4), float32] */, %1000, %1001, %1002, meta[relay.Constant][75] /* ty=Tensor[(70, 6), float64] */, %1003, %1004, meta[relay.Constant][76] /* ty=Tensor[(3328), int8] */)
}

def @func_11073() -> (Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) {
  %1005 = @func_10863() /* ty=(uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) */;
  %1006 = %1005.1;
  %1007 = cast(meta[relay.Constant][77] /* ty=Tensor[(3, 1, 14), uint8] */, dtype="uint32") /* ty=Tensor[(3, 1, 14), uint32] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="uint32") /* ty=Tensor[(3, 1, 14), uint32] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1011 = cast(meta[relay.Constant][78] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %1012 = reshape(%1011, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %1013 = @func_6656(%1012) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) */;
  %1014 = left_shift(%1009, %1010) /* ty=Tensor[(3, ?, 14), uint32] */;
  %1015 = %1013.0;
  %1016 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  (%1014, %1015, meta[relay.Constant][78] /* ty=Tensor[(300), uint16] */, %1016)
}

def @func_12898() -> (Tensor[(300), uint16],) {
  %1017 = @func_10863() /* ty=(uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) */;
  %1018 = %1017.4;
  (%1018,)
}

def @func_11134() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %1019 = @func_9194() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
  %1020 = @func_10978() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %1021 = %1019.0;
  %1022 = %1020.0;
  (%1021, %1022)
}

def @func_6656(%var_6626: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) {
  %1023 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %1024 = cast(%var_6626, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %1025 = reshape(%1024, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %1026 = @func_6615(%1025) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) */;
  %1027 = cast(meta[relay.Constant][79] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %1028 = cast(meta[relay.Constant][79] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %1029 = reshape(%1027, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %1030 = reshape(%1028, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %1031 = @func_4198(%1029, %1030) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %1032 = %1031.0;
  %1033 = cast(%1032, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %1034 = cast(%1032, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %1035 = reshape(%1033, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %1036 = reshape(%1034, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %1037 = @func_4198(%1035, %1036) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %1038 = %1023.0;
  %1039 = %1026.1;
  %1040 = %1037.0;
  (%1038, %1039, %var_6626, %1032, meta[relay.Constant][79] /* ty=Tensor[(1008), float64] */, %1040)
}

def @func_11221() -> Tensor[(288), int16] {
  %1041 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %1041.3
}

def @main() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 10, 10), bool], Tensor[(1600), float32]) {
  %1042 = @func_11628() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) */;
  %1043 = cast(meta[relay.Constant][80] /* ty=Tensor[(1600), int16] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %1044 = reshape(%1043, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), int16] */;
  %1045 = @func_8904(%1044) /* ty=(Tensor[(16, 10, 10), bool], Tensor[(420), float64]) */;
  %1046 = cast(meta[relay.Constant][80] /* ty=Tensor[(1600), int16] */, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %1047 = %1042.0;
  %1048 = %1045.0;
  %1049 = atanh(%1046) /* ty=Tensor[(1600), float32] */;
  (%1047, %1048, %1049)
}

def @func_13064() -> (Tensor[(1008), float64], Tensor[(11, 1, 6), float32]) {
  %1050 = @func_11826() /* ty=(Tensor[(1008), float64],) */;
  %1051 = %1050.0;
  %1052 = @func_8631() /* ty=Tensor[(11, 1, 6), float32] */;
  (%1051, %1052)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10763() -> Tensor[(11, 1, 6), float32] {
  %0 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %0.0
}

def @func_7331() -> (Tensor[(16, 15, 4), bool],) {
  %1 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %2 = %1.3;
  (%2,)
}

def @func_5983(%var_5957: float64, %var_5958: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32]) {
  %3 = cast(%var_5957, dtype="float64") /* ty=float64 */;
  %4 = cast(%var_5958, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %5 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %6 = divide(%3, %4) /* ty=Tensor[(8, 15, 6), float64] */;
  %7 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  %8 = %5.0;
  (%6, %7, %8)
}

def @func_12356() -> Tensor[(11, 1, 6), float32] {
  %9 = @func_11568() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) */;
  %9.1
}

def @func_7928() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) {
  %26 = fn () -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) {
    %10 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %11 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 504), float64] */, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 504), float64] */, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
    %14 = reshape(%12, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %15 = reshape(%13, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %16 = @func_4198(%14, %15) /* ty=(Tensor[(16, 7, 9), float64],) */;
    %17 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
    %19 = reshape(%18, newshape=[594]) /* ty=Tensor[(594), float32] */;
    %20 = @func_7652(%19) /* ty=(Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
    %21 = %10.0;
    %22 = %11.0;
    %23 = %16.0;
    %24 = %17.0;
    %25 = %20.1;
    (%21, %22, %23, meta[relay.Constant][0] /* ty=Tensor[(2, 504), float64] */, %24, %25, meta[relay.Constant][1] /* ty=Tensor[(594), float32] */)
  };
  %26() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) */
}

def @func_10456() -> (Tensor[(11, 1, 6), float32], Tensor[(4, 11, 10), bool], Tensor[(110), bool], Tensor[(11, 1, 6), float64]) {
  @func_10454() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(4, 11, 10), bool], Tensor[(110), bool], Tensor[(11, 1, 6), float64]) */
}

def @func_5804(%var_5801: Tensor[(315), uint8], %var_5802: Tensor[(968), float32], %var_5803: Tensor[(420), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) {
  %43 = fn (%var_5745: Tensor[(315), uint8], %var_5752: Tensor[(968), float32], %var_5753: Tensor[(420), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) {
    %27 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %28 = cast(%var_5752, dtype="float32") /* ty=Tensor[(968), float32] */;
    %29 = cast(%var_5753, dtype="float64") /* ty=Tensor[(420), float64] */;
    %30 = reshape(%28, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float32] */;
    %31 = reshape(%29, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %32 = @func_1342(%30, %31) /* ty=(Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
    %33 = cast(%var_5745, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %34 = cast(%var_5745, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %35 = reshape(%33, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
    %36 = reshape(%34, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
    %37 = @func_2086(%35, %36) /* ty=(Tensor[(3, 7, 15), float64],) */;
    %38 = %37.0;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
    %40 = %27.0;
    %41 = %32.1;
    %42 = atanh(%39) /* ty=Tensor[(3, 7, 15), float32] */;
    (%40, %var_5745, %41, %var_5752, %var_5753, %42)
  };
  %43(%var_5801, %var_5802, %var_5803) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) */
}

def @func_8052(%var_8006: Tensor[(16, 15, 4), bool], %var_8018: Tensor[(11, 5, 6), float64]) -> (Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) {
  %44 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %45 = %44.2;
  %46 = cast(%var_8006, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
  %51 = %50.1;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %53 = cast(%var_8018, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %54 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
  %55 = power(%48, %49) /* ty=Tensor[(16, 15, 4), float32] */;
  %56 = subtract(%52, %53) /* ty=Tensor[(11, 5, 6), float64] */;
  %57 = %54.2;
  (%55, %56, %57)
}

def @func_11434() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), int8], Tensor[(420), float64], Tensor[(11, 1, 6), float32], Tensor[(3, ?, 14), uint32]) {
  %58 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %59 = @func_10053() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(?, 15, 4), float64] */;
  %62 = sigmoid(%61) /* ty=Tensor[(?, 15, 4), float64] */;
  %63 = cast(%60, dtype="int8") /* ty=Tensor[(?, 15, 4), int8] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="int8") /* ty=Tensor[(?, 15, 4), int8] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %67 = @func_10493() /* ty=(Tensor[(420), float64],) */;
  %68 = @func_10654() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32]) */;
  %69 = @func_11073() /* ty=(Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) */;
  %70 = %58.0;
  %71 = left_shift(%65, %66) /* ty=Tensor[(?, 15, 4), int8] */;
  %72 = %67.0;
  %73 = %68.0;
  %74 = %69.0;
  (%70, %71, %72, %73, %74)
}

def @func_12960() -> Tensor[(11, 1, 6), float32] {
  @func_5911() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_11381(%var_11380: Tensor[(450), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) {
  %93 = fn (%var_11344: Tensor[(450), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) {
    %75 = cast(%var_11344, dtype="float32") /* ty=Tensor[(450), float32] */;
    %76 = reshape(%75, newshape=[5, 9, 10]) /* ty=Tensor[(5, 9, 10), float32] */;
    %77 = @func_8290(%76) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(81), float64]) */;
    %78 = @func_11073() /* ty=(Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) */;
    %79 = %78.0;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(3, ?, 14), float32] */;
    %81 = sinh(%80) /* ty=Tensor[(3, ?, 14), float32] */;
    %82 = cast(%79, dtype="bool") /* ty=Tensor[(3, ?, 14), bool] */;
    %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(%81, dtype="bool") /* ty=Tensor[(3, ?, 14), bool] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %86 = cast(%79, dtype="float64") /* ty=Tensor[(3, ?, 14), float64] */;
    %87 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%81, dtype="float64") /* ty=Tensor[(3, ?, 14), float64] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %90 = %77.0;
    %91 = greater(%84, %85) /* ty=Tensor[(3, ?, 14), bool] */;
    %92 = floor_mod(%88, %89) /* ty=Tensor[(3, ?, 14), float64] */;
    (%90, %var_11344, %91, %92)
  };
  %93(%var_11380) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) */
}

def @func_11465() -> (Tensor[(?, 15, 4), float64],) {
  %95 = fn () -> (Tensor[(?, 15, 4), float64],) {
    %94 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
    (%94,)
  };
  %95() /* ty=(Tensor[(?, 15, 4), float64],) */
}

def @func_7542() -> (Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) {
  %96 = cast(meta[relay.Constant][2] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %98 = reshape(%96, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %99 = reshape(%97, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %100 = @func_1023(%98, %99) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %101 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %102 = %100.3;
  (%101, %102, meta[relay.Constant][2] /* ty=Tensor[(154), float32] */, meta[relay.Constant][3] /* ty=Tensor[(288), int16] */)
}

def @func_5266(%var_5247: Tensor[(154), float32], %var_5251: Tensor[(3328), int8], %var_5254: Tensor[(300), uint16]) -> (Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) {
  %103 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %104 = cast(%103, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  %105 = cast(%var_5247, dtype="float32") /* ty=Tensor[(154), float32] */;
  %106 = cast(meta[relay.Constant][4] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %107 = reshape(%105, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %108 = reshape(%106, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %109 = @func_1023(%107, %108) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %110 = cast(%var_5251, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %111 = reshape(%110, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %112 = cast(%var_5254, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %113 = reshape(%112, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %114 = @func_4680(%113) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %115 = acos(%104) /* ty=Tensor[(2, 16, 15), float64] */;
  %116 = %109.5;
  %117 = @func_5007(%111) /* ty=Tensor[(16, 13, 16), int8] */;
  %118 = %114.1;
  %119 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  (%115, %116, %var_5247, meta[relay.Constant][4] /* ty=Tensor[(288), int16] */, %117, %var_5251, %118, %var_5254, %119)
}

def @func_6732() -> (Tensor[(?, 15, 4), float64],) {
  @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */
}

def @func_7759() -> (Tensor[(16, 15, 4), bool],) {
  %120 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  (%120,)
}

def @func_4966() -> Tensor[(2, 16, 15), float64] {
  @func_4964() /* ty=Tensor[(2, 16, 15), float64] */
}

def @func_12249() -> Tensor[(1008), float64] {
  %121 = fn () -> Tensor[(1008), float64] {
    @func_9561() /* ty=Tensor[(1008), float64] */
  };
  %121() /* ty=Tensor[(1008), float64] */
}

def @func_9120(%var_9115: Tensor[(3, 198), float32], %var_9116: Tensor[(3, 198), float32], %var_9117: Tensor[(42), uint8], %var_9118: Tensor[(1680, 2), float64], %var_9119: Tensor[(315), uint8]) -> (Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) {
  @func_9113(%var_9115, %var_9116, %var_9117, %var_9118, %var_9119) /* ty=(Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) */
}

def @func_6464() -> Tensor[(11, 1, 6), float32] {
  @func_6462() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7093() -> (Tensor[(2, 16, 15), float64], Tensor[(81), float32]) {
  %122 = @func_6925() /* ty=(Tensor[(81), float32],) */;
  %123 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
  %124 = %122.0;
  (%123, %124)
}

def @func_5009(%var_5008: Tensor[(16, 13, 16), int8]) -> Tensor[(16, 13, 16), int8] {
  %129 = fn (%var_4993: Tensor[(16, 13, 16), int8]) -> Tensor[(16, 13, 16), int8] {
    %125 = cast(%var_4993, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
    %126 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(16, 13, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 13, 16), int8] */, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    left_shift(%127, %128) /* ty=Tensor[(16, 13, 16), int8] */
  };
  %129(%var_5008) /* ty=Tensor[(16, 13, 16), int8] */
}

def @func_8205() -> (Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) {
  %132 = fn () -> (Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) {
    %130 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
    %131 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
    (%130, %131)
  };
  %132() /* ty=(Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) */
}

def @func_5987(%var_5985: float64, %var_5986: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32]) {
  @func_5983(%var_5985, %var_5986) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32]) */
}

def @func_6927() -> (Tensor[(81), float32],) {
  @func_6925() /* ty=(Tensor[(81), float32],) */
}

def @func_8496(%var_8493: Tensor[(12, 1, 13), float64], %var_8494: Tensor[(11, 2, 6), float32], %var_8495: Tensor[(10, 30), uint16]) -> (Tensor[(12, 1, 13), float64], Tensor[(11, 2, 6), uint16], Tensor[(3360), float64], Tensor[(10, 30), uint16]) {
  @func_8491(%var_8493, %var_8494, %var_8495) /* ty=(Tensor[(12, 1, 13), float64], Tensor[(11, 2, 6), uint16], Tensor[(3360), float64], Tensor[(10, 30), uint16]) */
}

def @func_9561() -> Tensor[(1008), float64] {
  %133 = @func_8230() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) */;
  %133.1
}

def @func_10227(%var_10216: Tensor[(1, 16, 4), uint16], %var_10217: Tensor[(1, 16, 4), uint16]) -> (Tensor[(?, 16, 4), uint16], Tensor[(1, 16, 4), float32]) {
  %134 = cast(%var_10217, dtype="uint16") /* ty=Tensor[(1, 16, 4), uint16] */;
  %135 = shape_of(%var_10216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_10216, dtype="uint16") /* ty=Tensor[(1, 16, 4), uint16] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %138 = cast(%var_10216, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %139 = bitwise_or(%136, %137) /* ty=Tensor[(?, 16, 4), uint16] */;
  %140 = asinh(%138) /* ty=Tensor[(1, 16, 4), float32] */;
  (%139, %140)
}

def @func_12672() -> (Tensor[(81), float32], Tensor[(9, ?, 9), bool]) {
  %144 = fn () -> (Tensor[(81), float32], Tensor[(9, ?, 9), bool]) {
    %141 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
    %142 = %141.1;
    %143 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
    (%142, %143)
  };
  %144() /* ty=(Tensor[(81), float32], Tensor[(9, ?, 9), bool]) */
}

def @func_11073() -> (Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) {
  %145 = @func_10863() /* ty=(uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) */;
  %146 = %145.1;
  %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 14), uint8] */, dtype="uint32") /* ty=Tensor[(3, 1, 14), uint32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint32") /* ty=Tensor[(3, 1, 14), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = cast(meta[relay.Constant][7] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %152 = reshape(%151, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %153 = @func_6656(%152) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) */;
  %154 = left_shift(%149, %150) /* ty=Tensor[(3, ?, 14), uint32] */;
  %155 = %153.0;
  %156 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  (%154, %155, meta[relay.Constant][7] /* ty=Tensor[(300), uint16] */, %156)
}

def @func_5872(%var_5871: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
  %160 = fn (%var_5860: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
    %157 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
    %158 = cast(%157, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
    %159 = cast(%var_5860, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
    greater(%158, %159) /* ty=Tensor[(11, 9, 6), bool] */
  };
  %160(%var_5871) /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_12546(%var_12545: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) {
  %170 = fn (%var_12513: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) {
    %161 = cast(%var_12513, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %162 = reshape(%161, newshape=[42]) /* ty=Tensor[(42), uint8] */;
    %163 = @func_6376(%162) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %165 = reshape(%164, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %166 = @func_11379(%165) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(450), float32], Tensor[(3, ?, 14), bool], Tensor[(3, ?, 14), float64]) */;
    %167 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
    %168 = %163.0;
    %169 = %166.2;
    (%167, %168, %var_12513, %169, meta[relay.Constant][8] /* ty=Tensor[(450), float32] */)
  };
  %170(%var_12545) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) */
}

def @func_10494() -> (Tensor[(420), float64],) {
  %173 = fn () -> (Tensor[(420), float64],) {
    %171 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
    %172 = %171.2;
    (%172,)
  };
  %173() /* ty=(Tensor[(420), float64],) */
}

def @func_10598() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) {
  @func_10596() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) */
}

def @func_5495(%var_5493: Tensor[(11, 5, 14), float32], %var_5494: Tensor[(154), float32]) -> (Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) {
  @func_5491(%var_5493, %var_5494) /* ty=(Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) */
}

def @func_11221() -> Tensor[(288), int16] {
  %174 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %174.3
}

def @func_11630() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) {
  @func_11628() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) */
}

def @func_7767() -> Tensor[(11, 1, 6), float32] {
  @func_6462() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_4900() -> (Tensor[(11, 1, 6), float32],) {
  %177 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %175 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
    %176 = asinh(%175) /* ty=Tensor[(11, 1, 6), float32] */;
    (%176,)
  };
  %177() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_13032() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  @func_13030() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_5271(%var_5268: Tensor[(154), float32], %var_5269: Tensor[(3328), int8], %var_5270: Tensor[(300), uint16]) -> (Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) {
  @func_5266(%var_5268, %var_5269, %var_5270) /* ty=(Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) */
}

def @func_8491(%var_8454: Tensor[(12, 1, 13), float64], %var_8474: Tensor[(11, 2, 6), float32], %var_8487: Tensor[(10, 30), uint16]) -> (Tensor[(12, 1, 13), float64], Tensor[(11, 2, 6), uint16], Tensor[(3360), float64], Tensor[(10, 30), uint16]) {
  %178 = cast(%var_8454, dtype="float64") /* ty=Tensor[(12, 1, 13), float64] */;
  %179 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
  %180 = cast(%179, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
  %181 = cast(%var_8474, dtype="uint16") /* ty=Tensor[(11, 2, 6), uint16] */;
  %182 = cast(%var_8487, dtype="uint16") /* ty=Tensor[(10, 30), uint16] */;
  %183 = reshape(%182, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %184 = @func_6656(%183) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) */;
  %185 = erf(%178) /* ty=Tensor[(12, 1, 13), float64] */;
  %186 = bitwise_and(%180, %181) /* ty=Tensor[(11, 2, 6), uint16] */;
  %187 = %184.1;
  (%185, %186, %187, %var_8487)
}

def @func_9974() -> Tensor[(11, 1, 6), float32] {
  @func_9972() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_5491(%var_5417: Tensor[(11, 5, 14), float32], %var_5478: Tensor[(154), float32]) -> (Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) {
  %188 = cast(%var_5417, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %189 = asinh(%188) /* ty=Tensor[(11, 5, 14), float32] */;
  %190 = cast(%189, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %191 = shape_of(%var_5417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_5417, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %195 = cast(meta[relay.Constant][10] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %196 = reshape(%195, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float32] */;
  %197 = @func_5099(%196) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) */;
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 240), float64] */, dtype="float64") /* ty=Tensor[(14, 240), float64] */;
  %199 = reshape(%198, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
  %200 = @func_3657(%199) /* ty=(Tensor[(14, 16, 15), float64],) */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %202 = reshape(%201, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
  %203 = cast(%var_5478, dtype="float32") /* ty=Tensor[(154), float32] */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 144), int16] */, dtype="int16") /* ty=Tensor[(2, 144), int16] */;
  %205 = reshape(%203, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %206 = reshape(%204, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %207 = @func_1023(%205, %206) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */;
  %208 = equal(%192, %193) /* ty=Tensor[(11, 5, 14), bool] */;
  %209 = %194.0;
  %210 = %197.1;
  %211 = %200.0;
  %212 = @func_3575(%202) /* ty=Tensor[(9, ?, 9), bool] */;
  %213 = %207.5;
  (%208, %209, %210, meta[relay.Constant][10] /* ty=Tensor[(660), float32] */, %211, meta[relay.Constant][11] /* ty=Tensor[(14, 240), float64] */, %212, meta[relay.Constant][12] /* ty=Tensor[(81), float32] */, %213, %var_5478, meta[relay.Constant][13] /* ty=Tensor[(2, 144), int16] */)
}

def @func_10863() -> (uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) {
  %214 = @func_10596() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) */;
  %215 = %214.4;
  %216 = cast(%215, dtype="uint8") /* ty=uint8 */;
  %217 = cast(meta[relay.Constant][14] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %218 = reshape(%216, newshape=[]) /* ty=uint8 */;
  %219 = reshape(%217, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %220 = @func_3538(%218, %219) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %221 = cast(meta[relay.Constant][15] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %222 = reshape(%221, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %223 = @func_4680(%222) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %224 = %220.0;
  %225 = %223.0;
  (%215, %224, meta[relay.Constant][14] /* ty=Tensor[(42), uint8] */, %225, meta[relay.Constant][15] /* ty=Tensor[(300), uint16] */)
}

def @func_6748() -> (Tensor[(11, 1, 6), float32],) {
  %226 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %227 = %226.0;
  (%227,)
}

def @func_7333() -> (Tensor[(16, 15, 4), bool],) {
  @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */
}

def @func_7655(%var_7653: Tensor[(594), float32]) -> (Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  @func_7652(%var_7653) /* ty=(Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */
}

def @func_9713() -> (Tensor[(1008), float64],) {
  %229 = fn () -> (Tensor[(1008), float64],) {
    %228 = @func_9561() /* ty=Tensor[(1008), float64] */;
    (%228,)
  };
  %229() /* ty=(Tensor[(1008), float64],) */
}

def @func_10366() -> (Tensor[(11, 1, 6), float64],) {
  %232 = fn () -> (Tensor[(11, 1, 6), float64],) {
    %230 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
    %231 = %230.1;
    (%231,)
  };
  %232() /* ty=(Tensor[(11, 1, 6), float64],) */
}

def @func_5187(%var_5185: Tensor[(3328), int8]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) {
  %233 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %234 = cast(%var_5185, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %235 = reshape(%234, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %236 = %233.0;
  %237 = @func_5007(%235) /* ty=Tensor[(16, 13, 16), int8] */;
  (%236, %237, %var_5185)
}

def @func_6179(%var_6173: Tensor[(3, 3, 13), float32], %var_6174: Tensor[(3, 3, 13), float32], %var_6175: Tensor[(154), float32], %var_6176: Tensor[(3360), float64], %var_6177: Tensor[(315), uint8], %var_6178: Tensor[(210, 2), float64]) -> (Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) {
  %268 = fn (%var_6135: Tensor[(3, 3, 13), float32], %var_6136: Tensor[(3, 3, 13), float32], %var_6150: Tensor[(154), float32], %var_6160: Tensor[(3360), float64], %var_6167: Tensor[(315), uint8], %var_6169: Tensor[(210, 2), float64]) -> (Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) {
    %238 = cast(%var_6136, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
    %239 = shape_of(%var_6135, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%var_6135, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %242 = cast(%var_6150, dtype="float32") /* ty=Tensor[(154), float32] */;
    %243 = cast(meta[relay.Constant][16] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
    %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %245 = reshape(%242, newshape=[154]) /* ty=Tensor[(154), float32] */;
    %246 = reshape(%243, newshape=[3328]) /* ty=Tensor[(3328), int8] */;
    %247 = reshape(%244, newshape=[300]) /* ty=Tensor[(300), uint16] */;
    %248 = @func_5266(%245, %246, %247) /* ty=(Tensor[(2, 16, 15), float64], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(288), int16], Tensor[(16, 13, 16), int8], Tensor[(3328), int8], Tensor[(14, 16, 15), float64], Tensor[(300), uint16], Tensor[(2, 16, 15), float64]) */;
    %249 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
    %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 198), float32] */, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
    %251 = reshape(%250, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
    %252 = cast(%var_6160, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %253 = reshape(%252, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
    %254 = @func_3657(%253) /* ty=(Tensor[(14, 16, 15), float64],) */;
    %255 = cast(%var_6167, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(968), float32] */, dtype="float32") /* ty=Tensor[(968), float32] */;
    %257 = cast(%var_6169, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %258 = reshape(%255, newshape=[315]) /* ty=Tensor[(315), uint8] */;
    %259 = reshape(%256, newshape=[968]) /* ty=Tensor[(968), float32] */;
    %260 = reshape(%257, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %261 = @func_5800(%258, %259, %260) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) */;
    %262 = mod(%240, %241) /* ty=Tensor[(3, 3, 13), float32] */;
    %263 = %248.3;
    %264 = %249.8;
    %265 = @func_5870(%251) /* ty=Tensor[(11, 9, 6), bool] */;
    %266 = %254.0;
    %267 = %261.1;
    (%262, %263, %var_6150, meta[relay.Constant][16] /* ty=Tensor[(3328), int8] */, meta[relay.Constant][17] /* ty=Tensor[(300), uint16] */, %264, %265, meta[relay.Constant][18] /* ty=Tensor[(3, 198), float32] */, %266, %var_6160, %267, %var_6167, meta[relay.Constant][19] /* ty=Tensor[(968), float32] */, %var_6169)
  };
  %268(%var_6173, %var_6174, %var_6175, %var_6176, %var_6177, %var_6178) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */
}

def @func_7652(%var_7638: Tensor[(594), float32]) -> (Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  %269 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %271 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 4, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 6), bool] */;
  %272 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %273 = cast(%var_7638, dtype="float32") /* ty=Tensor[(594), float32] */;
  %274 = reshape(%273, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %275 = logical_and(%270, %271) /* ty=Tensor[(11, 4, 6), bool] */;
  %276 = %272.2;
  %277 = @func_5870(%274) /* ty=Tensor[(11, 9, 6), bool] */;
  (%275, %276, %277, %var_7638)
}

def @func_12263(%var_12256: Tensor[(4, 13, 5), float32]) -> (Tensor[(4, 13, 5), float32],) {
  %278 = cast(%var_12256, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %279 = asinh(%278) /* ty=Tensor[(4, 13, 5), float32] */;
  (%279,)
}

def @func_11848() -> (Tensor[(594), float32],) {
  @func_11846() /* ty=(Tensor[(594), float32],) */
}

def @func_10979() -> (Tensor[(11, 1, 6), float32],) {
  %281 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %280 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
    (%280,)
  };
  %281() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_10103() -> (Tensor[(81), float32],) {
  %282 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %283 = %282.1;
  (%283,)
}

def @func_3577(%var_3576: Tensor[(9, 1, 9), float32]) -> Tensor[(9, ?, 9), bool] {
  %292 = fn (%var_3560: Tensor[(9, 1, 9), float32]) -> Tensor[(9, ?, 9), bool] {
    %284 = cast(%var_3560, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
    %285 = atanh(%284) /* ty=Tensor[(9, 1, 9), float32] */;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
    %287 = tan(%286) /* ty=Tensor[(9, 1, 9), float32] */;
    %288 = cast(%285, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%290, %291) /* ty=Tensor[(9, ?, 9), bool] */
  };
  %292(%var_3576) /* ty=Tensor[(9, ?, 9), bool] */
}

def @func_11114() -> Tensor[(11, 1, 6), float32] {
  @func_11112() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7412() -> (Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) {
  %293 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %294 = %293.0;
  %295 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %298 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%294, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = cast(%294, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %302 = cosh(%301) /* ty=Tensor[(11, 1, 6), float32] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %304 = equal(%299, %300) /* ty=Tensor[(11, ?, 6), bool] */;
  %305 = acosh(%303) /* ty=Tensor[(11, 1, 6), float64] */;
  (%304, %305)
}

def @func_8230() -> (Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) {
  %306 = cast(meta[relay.Constant][21] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %307 = cast(meta[relay.Constant][21] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %308 = reshape(%306, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %309 = reshape(%307, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
  %310 = @func_4198(%308, %309) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %311 = @func_8204() /* ty=(Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) */;
  %312 = %311.0;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %314 = cos(%313) /* ty=Tensor[(16, 15, 4), float32] */;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %316 = %310.0;
  %317 = asin(%315) /* ty=Tensor[(16, 15, 4), float64] */;
  (%316, meta[relay.Constant][21] /* ty=Tensor[(1008), float64] */, %317)
}

def @func_10143(%var_10141: Tensor[(10, 1, 8), float64], %var_10142: Tensor[(10, 8, 8), float64]) -> (Tensor[(10, 8, 8), float64], Tensor[(11, 1, 6), float32], Tensor[(10, 1, 8), float32]) {
  @func_10139(%var_10141, %var_10142) /* ty=(Tensor[(10, 8, 8), float64], Tensor[(11, 1, 6), float32], Tensor[(10, 1, 8), float32]) */
}

def @func_11158() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool]) {
  %318 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %319 = @func_9742() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */;
  %320 = %318.0;
  %321 = %319.1;
  (%320, %321)
}

def @func_10055() -> (Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  @func_10053() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */
}

def @func_13053(%var_13050: Tensor[(315), uint8], %var_13051: Tensor[(968), float32], %var_13052: Tensor[(420), float64]) -> (Tensor[(1600), int16], Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(420), float64]) {
  %333 = fn (%var_13045: Tensor[(315), uint8], %var_13046: Tensor[(968), float32], %var_13047: Tensor[(420), float64]) -> (Tensor[(1600), int16], Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(420), float64]) {
    %322 = @func_9903() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) */;
    %323 = cast(%var_13045, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %324 = cast(%var_13046, dtype="float32") /* ty=Tensor[(968), float32] */;
    %325 = cast(%var_13047, dtype="float64") /* ty=Tensor[(420), float64] */;
    %326 = reshape(%323, newshape=[315]) /* ty=Tensor[(315), uint8] */;
    %327 = reshape(%324, newshape=[968]) /* ty=Tensor[(968), float32] */;
    %328 = reshape(%325, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %329 = @func_5800(%326, %327, %328) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(4, 7, 15), float64], Tensor[(968), float32], Tensor[(420), float64], Tensor[(3, 7, 15), float32]) */;
    %330 = %322.2;
    %331 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
    %332 = %329.1;
    (%330, %331, %332, %var_13045, %var_13046, %var_13047)
  };
  %333(%var_13050, %var_13051, %var_13052) /* ty=(Tensor[(1600), int16], Tensor[(11, 1, 6), float32], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(420), float64]) */
}

def @func_7373() -> Tensor[(16, 15, 4), bool] {
  @func_7371() /* ty=Tensor[(16, 15, 4), bool] */
}

def @func_12988() -> (Tensor[(11, 1, 6), float32],) {
  %336 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %334 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %335 = %334.0;
    (%335,)
  };
  %336() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_5297() -> (Tensor[(11, 1, 6), float32],) {
  @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_11846() -> (Tensor[(594), float32],) {
  %337 = @func_7927() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) */;
  %338 = %337.6;
  (%338,)
}

def @func_6462() -> Tensor[(11, 1, 6), float32] {
  %339 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %339.0
}

def @func_8906(%var_8905: Tensor[(16, 10, 10), int16]) -> (Tensor[(16, 10, 10), bool], Tensor[(420), float64]) {
  %347 = fn (%var_8877: Tensor[(16, 10, 10), int16]) -> (Tensor[(16, 10, 10), bool], Tensor[(420), float64]) {
    %340 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 10, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 10, 10), bool] */;
    %341 = shape_of(%var_8877, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%var_8877, dtype="bool") /* ty=Tensor[(16, 10, 10), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
    %345 = less(%342, %343) /* ty=Tensor[(16, 10, 10), bool] */;
    %346 = %344.1;
    (%345, %346)
  };
  %347(%var_8905) /* ty=(Tensor[(16, 10, 10), bool], Tensor[(420), float64]) */
}

def @func_8385() -> (Tensor[(288), int16], Tensor[(81), float32]) {
  %352 = fn () -> (Tensor[(288), int16], Tensor[(81), float32]) {
    %348 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
    %349 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
    %350 = %348.3;
    %351 = %349.0;
    (%350, %351)
  };
  %352() /* ty=(Tensor[(288), int16], Tensor[(81), float32]) */
}

def @func_6552() -> (Tensor[(11, 1, 6), float32],) {
  %353 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
  (%353,)
}

def @func_12009() -> Tensor[(11, 1, 6), float32] {
  @func_12007() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_10732(%var_10730: Tensor[(6, 7, 3), float64], %var_10731: uint8) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42, 1), uint8], Tensor[(6, 7, 3), bool]) {
  @func_10728(%var_10730, %var_10731) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42, 1), uint8], Tensor[(6, 7, 3), bool]) */
}

def @func_5705() -> Tensor[(?, 15, 4), float64] {
  %355 = fn () -> Tensor[(?, 15, 4), float64] {
    %354 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
    %354.6
  };
  %355() /* ty=Tensor[(?, 15, 4), float64] */
}

def @func_8232() -> (Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) {
  @func_8230() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) */
}

def @func_6615(%var_6613: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) {
  %356 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %357 = cast(%var_6613, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %358 = reshape(%357, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), uint16] */;
  %359 = @func_4680(%358) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */;
  %360 = %356.0;
  %361 = %359.2;
  (%360, %361, %var_6613)
}

def @func_10172() -> (Tensor[(?, 15, 4), float64],) {
  %362 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %363 = %362.0;
  (%363,)
}

def @func_3068(%var_3067: Tensor[(16, 15, 4), float32]) -> (Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) {
  %374 = fn (%var_3057: Tensor[(16, 15, 4), float32]) -> (Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) {
    %364 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
    %365 = asinh(%364) /* ty=Tensor[(1, 15, 4), float32] */;
    %366 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 15, 4), float32] */, dtype="uint16") /* ty=Tensor[(1, 15, 4), uint16] */;
    %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %368 = cast(%365, dtype="uint16") /* ty=Tensor[(1, 15, 4), uint16] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %370 = cast(%365, dtype="bool") /* ty=Tensor[(1, 15, 4), bool] */;
    %371 = cast(%var_3057, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
    %372 = bitwise_or(%368, %369) /* ty=Tensor[(?, 15, 4), uint16] */;
    %373 = less_equal(%370, %371) /* ty=Tensor[(16, 15, 4), bool] */;
    (%372, %373)
  };
  %374(%var_3067) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */
}

def @func_11075() -> (Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) {
  @func_11073() /* ty=(Tensor[(3, ?, 14), uint32], Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(11, 1, 6), float32]) */
}

def @func_12424() -> Tensor[(11, 1, 6), float32] {
  %376 = fn () -> Tensor[(11, 1, 6), float32] {
    %375 = @func_11193() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %375.0
  };
  %376() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_11135() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %381 = fn () -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
    %377 = @func_9194() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
    %378 = @func_10978() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %379 = %377.0;
    %380 = %378.0;
    (%379, %380)
  };
  %381() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_6355() -> Tensor[(11, 1, 6), float32] {
  %382 = fn () -> Tensor[(11, 1, 6), float32] {
    @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
  };
  %382() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7741() -> (Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
  %391 = fn () -> (Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
    %383 = @func_6925() /* ty=(Tensor[(81), float32],) */;
    %384 = cast(meta[relay.Constant][24] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %385 = cast(meta[relay.Constant][24] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %386 = reshape(%384, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %387 = reshape(%385, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %388 = @func_469(%386, %387) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %389 = %383.0;
    %390 = %388.0;
    (%389, %390, meta[relay.Constant][24] /* ty=Tensor[(420), float64] */)
  };
  %391() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */
}

def @func_6730() -> (Tensor[(?, 15, 4), float64],) {
  %392 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
  (%392,)
}

def @func_673(%var_671: Tensor[(9, 8, 4), int16], %var_672: Tensor[(4, 7, 15), float64]) -> (Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) {
  %458 = fn (%var_575: Tensor[(9, 8, 4), int16], %var_624: Tensor[(4, 7, 15), float64]) -> (Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) {
    %393 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 4), int16] */, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
    %394 = cosh(%393) /* ty=Tensor[(9, 8, 4), float64] */;
    %395 = cast(%var_575, dtype="int16") /* ty=Tensor[(9, 8, 4), int16] */;
    %396 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 4), int16] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %399 = multiply(%397, %398) /* ty=Tensor[(9, 8, 4), int16] */;
    %400 = cast(%399, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
    %401 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%394, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %404 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %405 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %406 = reshape(%404, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %407 = reshape(%405, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %408 = @func_469(%406, %407) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %410 = %408.0;
    %411 = cast(%410, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %412 = reshape(%409, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %413 = reshape(%411, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %414 = @func_469(%412, %413) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %415 = cast(%410, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %416 = cast(%410, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %417 = cast(%410, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %418 = reshape(%416, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %419 = reshape(%417, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %420 = @func_469(%418, %419) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %421 = %420.0;
    %422 = cast(%421, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %423 = reshape(%415, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %424 = reshape(%422, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %425 = @func_469(%423, %424) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %426 = cast(%var_624, dtype="bool") /* ty=Tensor[(4, 7, 15), bool] */;
    %427 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%421, dtype="bool") /* ty=Tensor[(4, 7, 15), bool] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %430 = %425.0;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %433 = reshape(%431, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %434 = reshape(%432, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %435 = @func_469(%433, %434) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %436 = cast(%430, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %437 = cast(%var_624, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %438 = reshape(%436, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %439 = reshape(%437, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %440 = @func_469(%438, %439) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %441 = %414.0;
    %442 = cast(%441, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %443 = cast(%410, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %444 = reshape(%442, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %445 = reshape(%443, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %446 = @func_469(%444, %445) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %447 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %448 = %440.0;
    %449 = cast(%448, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %450 = reshape(%447, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %451 = reshape(%449, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %452 = @func_469(%450, %451) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %453 = equal(%402, %403) /* ty=Tensor[(9, 8, 4), bool] */;
    %454 = less_equal(%428, %429) /* ty=Tensor[(4, 7, 15), bool] */;
    %455 = %435.0;
    %456 = %446.0;
    %457 = %452.0;
    (%453, %410, meta[relay.Constant][26] /* ty=Tensor[(420), float64] */, %441, %430, %454, %455, %448, %456, %457)
  };
  %458(%var_671, %var_672) /* ty=(Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) */
}

def @func_1026(%var_1024: Tensor[(11, 2, 7), float32], %var_1025: Tensor[(288), int16]) -> (Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) {
  %485 = fn (%var_932: Tensor[(11, 2, 7), float32], %var_991: Tensor[(288), int16]) -> (Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) {
    %459 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %460 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %461 = reshape(%459, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %462 = reshape(%460, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %463 = @func_469(%461, %462) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %464 = cast(%var_932, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
    %465 = log(%464) /* ty=Tensor[(11, 2, 7), float32] */;
    %466 = cast(%465, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
    %467 = cast(%var_991, dtype="int16") /* ty=Tensor[(288), int16] */;
    %468 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %469 = reshape(%467, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), int16] */;
    %470 = reshape(%468, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %471 = @func_670(%469, %470) /* ty=(Tensor[(9, 8, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), bool], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64], Tensor[(4, 7, 15), float64]) */;
    %472 = cast(%465, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
    %473 = sinh(%472) /* ty=Tensor[(11, 2, 7), float32] */;
    %474 = cast(%473, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
    %475 = %471.2;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(420), float64] */;
    %477 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %478 = reshape(%476, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %479 = reshape(%477, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %480 = @func_469(%478, %479) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %481 = %463.0;
    %482 = sqrt(%466) /* ty=Tensor[(11, 2, 7), float64] */;
    %483 = exp(%474) /* ty=Tensor[(11, 2, 7), float32] */;
    %484 = %480.0;
    (%481, meta[relay.Constant][27] /* ty=Tensor[(70, 6), float64] */, %482, %475, %var_991, %483, %484)
  };
  %485(%var_1024, %var_1025) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(11, 2, 7), float64], Tensor[(420), float64], Tensor[(288), int16], Tensor[(11, 2, 7), float32], Tensor[(4, 7, 15), float64]) */
}

def @func_6101() -> (Tensor[(11, 1, 6), float32],) {
  %488 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %486 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %487 = %486.0;
    (%487,)
  };
  %488() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_11223() -> Tensor[(288), int16] {
  @func_11221() /* ty=Tensor[(288), int16] */
}

def @func_10889() -> (Tensor[(2, 16, 15), float64],) {
  @func_10887() /* ty=(Tensor[(2, 16, 15), float64],) */
}

def @func_12879() -> Tensor[(16, 15, 4), float64] {
  @func_12877() /* ty=Tensor[(16, 15, 4), float64] */
}

def @func_4202(%var_4200: Tensor[(16, 7, 9), float64], %var_4201: Tensor[(16, 7, 9), float64]) -> (Tensor[(16, 7, 9), float64],) {
  @func_4198(%var_4200, %var_4201) /* ty=(Tensor[(16, 7, 9), float64],) */
}

def @func_6658(%var_6657: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) {
  %507 = fn (%var_6626: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) {
    %489 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %490 = cast(%var_6626, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %491 = reshape(%490, newshape=[300]) /* ty=Tensor[(300), uint16] */;
    %492 = @func_6615(%491) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) */;
    %493 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %494 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %495 = reshape(%493, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %496 = reshape(%494, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %497 = @func_4198(%495, %496) /* ty=(Tensor[(16, 7, 9), float64],) */;
    %498 = %497.0;
    %499 = cast(%498, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
    %500 = cast(%498, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
    %501 = reshape(%499, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %502 = reshape(%500, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float64] */;
    %503 = @func_4198(%501, %502) /* ty=(Tensor[(16, 7, 9), float64],) */;
    %504 = %489.0;
    %505 = %492.1;
    %506 = %503.0;
    (%504, %505, %var_6626, %498, meta[relay.Constant][28] /* ty=Tensor[(1008), float64] */, %506)
  };
  %507(%var_6657) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16], Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 7, 9), float64]) */
}

def @func_13011() -> (Tensor[(?, 15, 4), float64],) {
  %510 = fn () -> (Tensor[(?, 15, 4), float64],) {
    %508 = @func_10053() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
    %509 = %508.0;
    (%509,)
  };
  %510() /* ty=(Tensor[(?, 15, 4), float64],) */
}

def @func_9691() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) {
  %511 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %512 = cast(meta[relay.Constant][29] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %514 = reshape(%512, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %515 = reshape(%513, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
  %516 = @func_2086(%514, %515) /* ty=(Tensor[(3, 7, 15), float64],) */;
  %517 = %516.0;
  %518 = cast(meta[relay.Constant][29] /* ty=Tensor[(315), uint8] */, dtype="bool") /* ty=Tensor[(315), bool] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = logical_or(%520, %521) /* ty=Tensor[(3, 7, 15), bool] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %524 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %525 = @func_6354() /* ty=Tensor[(11, 1, 6), float32] */;
  %526 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  %527 = %511.0;
  %528 = asinh(%523) /* ty=Tensor[(3, 7, 15), float32] */;
  %529 = %524.0;
  (%525, %526, %527, %528, %529)
}

def @func_472(%var_470: Tensor[(4, 7, 15), float64], %var_471: Tensor[(4, 7, 15), float64]) -> (Tensor[(4, 7, 15), float64],) {
  %535 = fn (%var_464: Tensor[(4, 7, 15), float64], %var_465: Tensor[(4, 7, 15), float64]) -> (Tensor[(4, 7, 15), float64],) {
    %530 = cast(%var_465, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %531 = shape_of(%var_464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%var_464, dtype="float64") /* ty=Tensor[(4, 7, 15), float64] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %534 = floor_divide(%532, %533) /* ty=Tensor[(4, 7, 15), float64] */;
    (%534,)
  };
  %535(%var_470, %var_471) /* ty=(Tensor[(4, 7, 15), float64],) */
}

def @func_6287() -> (Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) {
  %540 = fn () -> (Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) {
    %536 = cast(meta[relay.Constant][30] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
    %537 = reshape(%536, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
    %538 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
    %539 = @func_3575(%537) /* ty=Tensor[(9, ?, 9), bool] */;
    (%538, %539, meta[relay.Constant][30] /* ty=Tensor[(81), float32] */)
  };
  %540() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */
}

def @func_10231(%var_10229: Tensor[(1, 16, 4), uint16], %var_10230: Tensor[(1, 16, 4), uint16]) -> (Tensor[(?, 16, 4), uint16], Tensor[(1, 16, 4), float32]) {
  @func_10227(%var_10229, %var_10230) /* ty=(Tensor[(?, 16, 4), uint16], Tensor[(1, 16, 4), float32]) */
}

def @func_5351(%var_5348: Tensor[(14, 4, 2), float64], %var_5349: uint8, %var_5350: Tensor[(42), uint8]) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) {
  %557 = fn (%var_5328: Tensor[(14, 4, 2), float64], %var_5332: uint8, %var_5333: Tensor[(42), uint8]) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) {
    %541 = cast(%var_5332, dtype="uint8") /* ty=uint8 */;
    %542 = cast(%var_5333, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %543 = reshape(%541, newshape=[]) /* ty=uint8 */;
    %544 = reshape(%542, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
    %545 = @func_3538(%543, %544) /* ty=(Tensor[(3, 1, 14), uint8],) */;
    %546 = cast(%var_5332, dtype="uint8") /* ty=uint8 */;
    %547 = cast(%var_5333, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %548 = reshape(%546, newshape=[]) /* ty=uint8 */;
    %549 = reshape(%547, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
    %550 = @func_3538(%548, %549) /* ty=(Tensor[(3, 1, 14), uint8],) */;
    %551 = cast(%var_5328, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
    %552 = rsqrt(%551) /* ty=Tensor[(14, 4, 2), float64] */;
    %553 = cast(%552, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
    %554 = %545.0;
    %555 = %550.0;
    %556 = sinh(%553) /* ty=Tensor[(14, 4, 2), float64] */;
    (%554, %var_5332, %var_5333, %555, %556)
  };
  %557(%var_5348, %var_5349, %var_5350) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) */
}

def @func_9194() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %558 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %559 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
  %560 = %558.0;
  (%559, %560)
}

def @func_10865() -> (uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) {
  @func_10863() /* ty=(uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) */
}

def @func_12630() -> (Tensor[(11, 1, 6), float32], Tensor[(11, ?, 6), uint16]) {
  %561 = @func_11178() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %562 = %561.0;
  %563 = @func_12445() /* ty=Tensor[(11, ?, 6), uint16] */;
  (%562, %563)
}

def @func_11179() -> (Tensor[(11, 1, 6), float32],) {
  %566 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %564 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %565 = %564.0;
    (%565,)
  };
  %566() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_12789(%var_12787: Tensor[(8, 16, 7), uint8], %var_12788: Tensor[(8, 16, 7), uint8]) -> (Tensor[(8, 16, 7), uint8],) {
  @func_12785(%var_12787, %var_12788) /* ty=(Tensor[(8, 16, 7), uint8],) */
}

def @func_12858(%var_12856: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(1008), float64], Tensor[(42), uint8], Tensor[(42), uint8], Tensor[(9, ?, 9), bool]) {
  @func_12855(%var_12856) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(1008), float64], Tensor[(42), uint8], Tensor[(42), uint8], Tensor[(9, ?, 9), bool]) */
}

def @func_11529() -> (Tensor[(81), float32], Tensor[(16, 7, 16), bool], Tensor[(256), bool], Tensor[(1792), bool], Tensor[(11, 1, 6), float32]) {
  %575 = fn () -> (Tensor[(81), float32], Tensor[(16, 7, 16), bool], Tensor[(256), bool], Tensor[(1792), bool], Tensor[(11, 1, 6), float32]) {
    %567 = @func_10654() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32]) */;
    %568 = cast(meta[relay.Constant][31] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
    %569 = cast(meta[relay.Constant][32] /* ty=Tensor[(1792), bool] */, dtype="bool") /* ty=Tensor[(1792), bool] */;
    %570 = reshape(%568, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), bool] */;
    %571 = reshape(%569, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), bool] */;
    %572 = %567.1;
    %573 = @func_11481(%570, %571) /* ty=Tensor[(16, 7, 16), bool] */;
    %574 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
    (%572, %573, meta[relay.Constant][31] /* ty=Tensor[(256), bool] */, meta[relay.Constant][32] /* ty=Tensor[(1792), bool] */, %574)
  };
  %575() /* ty=(Tensor[(81), float32], Tensor[(16, 7, 16), bool], Tensor[(256), bool], Tensor[(1792), bool], Tensor[(11, 1, 6), float32]) */
}

def @func_9461(%var_9455: Tensor[(1, 7, 5), uint8], %var_9456: Tensor[(16, 7, 5), uint8]) -> Tensor[(16, 7, 5), uint8] {
  %576 = cast(%var_9455, dtype="uint8") /* ty=Tensor[(1, 7, 5), uint8] */;
  %577 = cast(%var_9456, dtype="uint8") /* ty=Tensor[(16, 7, 5), uint8] */;
  logical_xor(%576, %577) /* ty=Tensor[(16, 7, 5), uint8] */
}

def @func_12358() -> Tensor[(11, 1, 6), float32] {
  @func_12356() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7095() -> (Tensor[(2, 16, 15), float64], Tensor[(81), float32]) {
  @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */
}

def @func_11784(%var_11782: Tensor[(6, 99), float32], %var_11783: Tensor[(3360), float64]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(22, 7), float32], Tensor[(6, 99), float32], Tensor[(42), uint8], Tensor[(3360), float64]) {
  %598 = fn (%var_11769: Tensor[(6, 99), float32], %var_11771: Tensor[(3360), float64]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(22, 7), float32], Tensor[(6, 99), float32], Tensor[(42), uint8], Tensor[(3360), float64]) {
    %578 = @func_9691() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) */;
    %579 = cast(meta[relay.Constant][33] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %580 = cast(meta[relay.Constant][33] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %581 = reshape(%579, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %582 = reshape(%580, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %583 = @func_469(%581, %582) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %584 = cast(%var_11769, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
    %585 = cast(%var_11769, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
    %586 = cast(meta[relay.Constant][34] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %587 = cast(%var_11771, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %588 = %578.3;
    %589 = cast(%588, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
    %590 = reshape(%584, newshape=[3, 198]) /* ty=Tensor[(3, 198), float32] */;
    %591 = reshape(%585, newshape=[3, 198]) /* ty=Tensor[(3, 198), float32] */;
    %592 = reshape(%586, newshape=[42]) /* ty=Tensor[(42), uint8] */;
    %593 = reshape(%587, newshape=[1680, 2]) /* ty=Tensor[(1680, 2), float64] */;
    %594 = reshape(%589, newshape=[315]) /* ty=Tensor[(315), uint8] */;
    %595 = @func_9113(%590, %591, %592, %593, %594) /* ty=(Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) */;
    %596 = %583.0;
    %597 = %595.11;
    (%588, %596, meta[relay.Constant][33] /* ty=Tensor[(420), float64] */, %597, %var_11769, meta[relay.Constant][34] /* ty=Tensor[(42), uint8] */, %var_11771)
  };
  %598(%var_11782, %var_11783) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64], Tensor[(22, 7), float32], Tensor[(6, 99), float32], Tensor[(42), uint8], Tensor[(3360), float64]) */
}

def @func_4964() -> Tensor[(2, 16, 15), float64] {
  %599 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  cos(%599) /* ty=Tensor[(2, 16, 15), float64] */
}

def @func_13030() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %600 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %601 = @func_9194() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
  %602 = %600.0;
  %603 = %601.0;
  (%602, %603)
}

def @main() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 10, 10), bool], Tensor[(1600), float32]) {
  %604 = @func_11630() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) */;
  %605 = cast(meta[relay.Constant][36] /* ty=Tensor[(1600), int16] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %606 = reshape(%605, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), int16] */;
  %607 = @func_8906(%606) /* ty=(Tensor[(16, 10, 10), bool], Tensor[(420), float64]) */;
  %608 = cast(meta[relay.Constant][36] /* ty=Tensor[(1600), int16] */, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %609 = %604.0;
  %610 = %607.0;
  %611 = atanh(%608) /* ty=Tensor[(1600), float32] */;
  (%609, %610, %611)
}

def @func_12855(%var_12845: Tensor[(42), uint8]) -> (Tensor[(11, 1, 6), float32], Tensor[(1008), float64], Tensor[(42), uint8], Tensor[(42), uint8], Tensor[(9, ?, 9), bool]) {
  %612 = cast(%var_12845, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %613 = reshape(%612, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %614 = @func_12544(%613) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(3, ?, 14), bool], Tensor[(450), float32]) */;
  %615 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %616 = @func_9561() /* ty=Tensor[(1008), float64] */;
  %617 = %614.2;
  %618 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
  (%615, %616, %617, %var_12845, %618)
}

def @func_10139(%var_10111: Tensor[(10, 1, 8), float64], %var_10112: Tensor[(10, 8, 8), float64]) -> (Tensor[(10, 8, 8), float64], Tensor[(11, 1, 6), float32], Tensor[(10, 1, 8), float32]) {
  %619 = cast(%var_10111, dtype="float64") /* ty=Tensor[(10, 1, 8), float64] */;
  %620 = cast(%var_10112, dtype="float64") /* ty=Tensor[(10, 8, 8), float64] */;
  %621 = cast(%var_10111, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %622 = minimum(%619, %620) /* ty=Tensor[(10, 8, 8), float64] */;
  %623 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %624 = log2(%621) /* ty=Tensor[(10, 1, 8), float32] */;
  (%622, %623, %624)
}

def @func_8938(%var_8937: Tensor[(11, 9, 7), float64]) -> Tensor[(11, 9, 7), float64] {
  %626 = fn (%var_8917: Tensor[(11, 9, 7), float64]) -> Tensor[(11, 9, 7), float64] {
    %625 = cast(%var_8917, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
    asinh(%625) /* ty=Tensor[(11, 9, 7), float64] */
  };
  %626(%var_8937) /* ty=Tensor[(11, 9, 7), float64] */
}

def @func_9904() -> (Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) {
  %632 = fn () -> (Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) {
    %627 = cast(meta[relay.Constant][37] /* ty=Tensor[(1600), int16] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
    %628 = reshape(%627, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), int16] */;
    %629 = @func_8904(%628) /* ty=(Tensor[(16, 10, 10), bool], Tensor[(420), float64]) */;
    %630 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
    %631 = %629.0;
    (%630, %631, meta[relay.Constant][37] /* ty=Tensor[(1600), int16] */)
  };
  %632() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(16, 10, 10), bool], Tensor[(1600), int16]) */
}

def @func_12007() -> Tensor[(11, 1, 6), float32] {
  @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_12785(%var_12778: Tensor[(8, 16, 7), uint8], %var_12779: Tensor[(8, 16, 7), uint8]) -> (Tensor[(8, 16, 7), uint8],) {
  %633 = cast(%var_12779, dtype="uint8") /* ty=Tensor[(8, 16, 7), uint8] */;
  %634 = shape_of(%var_12778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_12778, dtype="uint8") /* ty=Tensor[(8, 16, 7), uint8] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %637 = maximum(%635, %636) /* ty=Tensor[(8, 16, 7), uint8] */;
  (%637,)
}

def @func_3538(%var_3531: uint8, %var_3532: Tensor[(3, 1, 14), uint8]) -> (Tensor[(3, 1, 14), uint8],) {
  %638 = cast(%var_3531, dtype="uint8") /* ty=uint8 */;
  %639 = cast(%var_3532, dtype="uint8") /* ty=Tensor[(3, 1, 14), uint8] */;
  %640 = multiply(%638, %639) /* ty=Tensor[(3, 1, 14), uint8] */;
  (%640,)
}

def @func_8142(%var_8140: Tensor[(6, 15, 4), float64], %var_8141: Tensor[(13, 15, 4), float64]) -> (Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) {
  %657 = fn (%var_8088: Tensor[(6, 15, 4), float64], %var_8113: Tensor[(13, 15, 4), float64]) -> (Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) {
    %641 = @func_5704() /* ty=Tensor[(?, 15, 4), float64] */;
    %642 = cast(%641, dtype="uint32") /* ty=Tensor[(?, 15, 4), uint32] */;
    %643 = cast(%var_8088, dtype="uint32") /* ty=Tensor[(6, 15, 4), uint32] */;
    %644 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
    %645 = cast(%641, dtype="float32") /* ty=Tensor[(?, 15, 4), float32] */;
    %646 = cast(%var_8113, dtype="float32") /* ty=Tensor[(13, 15, 4), float32] */;
    %647 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
    %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
    %649 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%641, dtype="float32") /* ty=Tensor[(?, 15, 4), float32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %652 = minimum(%642, %643) /* ty=Tensor[(6, 15, 4), uint32] */;
    %653 = %644.1;
    %654 = divide(%645, %646) /* ty=Tensor[(13, 15, 4), float32] */;
    %655 = %647.3;
    %656 = floor_divide(%650, %651) /* ty=Tensor[(?, 15, 4), float32] */;
    (%652, %653, %654, %655, %656)
  };
  %657(%var_8140, %var_8141) /* ty=(Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) */
}

def @func_5414() -> (Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) {
  %684 = fn () -> (Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) {
    %658 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %659 = cast(meta[relay.Constant][39] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %660 = reshape(%659, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %661 = @func_3066(%660) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %662 = cast(meta[relay.Constant][39] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %663 = reshape(%662, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %664 = @func_3066(%663) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %665 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %666 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %667 = reshape(%665, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %668 = reshape(%666, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
    %669 = @func_469(%667, %668) /* ty=(Tensor[(4, 7, 15), float64],) */;
    %670 = cast(meta[relay.Constant][39] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %671 = reshape(%670, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %672 = @func_3066(%671) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %673 = %672.0;
    %674 = cast(%673, dtype="float64") /* ty=Tensor[(?, 15, 4), float64] */;
    %675 = cast(meta[relay.Constant][41] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
    %676 = reshape(%675, newshape=[3328]) /* ty=Tensor[(3328), int8] */;
    %677 = @func_5187(%676) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) */;
    %678 = %658.0;
    %679 = %661.1;
    %680 = %664.1;
    %681 = %669.0;
    %682 = sinh(%674) /* ty=Tensor[(?, 15, 4), float64] */;
    %683 = %677.2;
    (%678, meta[relay.Constant][39] /* ty=Tensor[(240, 4), float32] */, %679, %680, %681, meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, %682, %683, meta[relay.Constant][41] /* ty=Tensor[(3328), int8] */)
  };
  %684() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */
}

def @func_10531(%var_10501: Tensor[(5, 7, 15), float64], %var_10509: Tensor[(154), float32], %var_10510: Tensor[(3360, 1), float64], %var_10511: Tensor[(1, 315), uint8]) -> (Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) {
  %685 = cast(%var_10501, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %686 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %687 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 9), float32] */;
  %688 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 9), float32] */;
  %689 = cast(%var_10509, dtype="float32") /* ty=Tensor[(154), float32] */;
  %690 = cast(%var_10510, dtype="float64") /* ty=Tensor[(3360, 1), float64] */;
  %691 = cast(%var_10511, dtype="uint8") /* ty=Tensor[(1, 315), uint8] */;
  %692 = cast(meta[relay.Constant][43] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %693 = reshape(%687, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %694 = reshape(%688, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %695 = reshape(%689, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %696 = reshape(%690, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %697 = reshape(%691, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %698 = reshape(%692, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %699 = @func_6172(%693, %694, %695, %696, %697, %698) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %700 = cast(%var_10509, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %701 = cast(%var_10510, dtype="uint16") /* ty=Tensor[(3360, 1), uint16] */;
  %702 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %703 = sinh(%685) /* ty=Tensor[(5, 7, 15), float64] */;
  %704 = %686.0;
  %705 = %699.0;
  %706 = minimum(%700, %701) /* ty=Tensor[(3360, 154), uint16] */;
  %707 = %702.2;
  (%703, %704, %705, meta[relay.Constant][42] /* ty=Tensor[(13, 9), float32] */, %var_10511, meta[relay.Constant][43] /* ty=Tensor[(420), float64] */, %706, %707)
}

def @func_12162(%var_12161: Tensor[(14, 3), uint8]) -> (Tensor[(3, 1, 14), uint8], Tensor[(14, 3), uint8], Tensor[(11, 4, 6), float64], Tensor[(11, 1, 6), float64]) {
  %721 = fn (%var_12139: Tensor[(14, 3), uint8]) -> (Tensor[(3, 1, 14), uint8], Tensor[(14, 3), uint8], Tensor[(11, 4, 6), float64], Tensor[(11, 1, 6), float64]) {
    %708 = cast(%var_12139, dtype="uint8") /* ty=Tensor[(14, 3), uint8] */;
    %709 = reshape(%708, newshape=[42]) /* ty=Tensor[(42), uint8] */;
    %710 = @func_6376(%709) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
    %711 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %712 = %711.0;
    %713 = cast(%712, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
    %714 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 4, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 6), float32] */;
    %715 = power(%713, %714) /* ty=Tensor[(11, 4, 6), float32] */;
    %716 = cast(%715, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
    %717 = @func_10365() /* ty=(Tensor[(11, 1, 6), float64],) */;
    %718 = %710.1;
    %719 = rsqrt(%716) /* ty=Tensor[(11, 4, 6), float64] */;
    %720 = %717.0;
    (%718, %var_12139, %719, %720)
  };
  %721(%var_12161) /* ty=(Tensor[(3, 1, 14), uint8], Tensor[(14, 3), uint8], Tensor[(11, 4, 6), float64], Tensor[(11, 1, 6), float64]) */
}

def @func_12899() -> (Tensor[(300), uint16],) {
  %724 = fn () -> (Tensor[(300), uint16],) {
    %722 = @func_10863() /* ty=(uint8, Tensor[(3, 1, 14), uint8], Tensor[(42), uint8], Tensor[(6, 10, 5), uint16], Tensor[(300), uint16]) */;
    %723 = %722.4;
    (%723,)
  };
  %724() /* ty=(Tensor[(300), uint16],) */
}

def @func_10887() -> (Tensor[(2, 16, 15), float64],) {
  %725 = @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */;
  %726 = %725.0;
  (%726,)
}

def @func_12119() -> (Tensor[(1008), float64], Tensor[(16, 15, 4), bool]) {
  %731 = fn () -> (Tensor[(1008), float64], Tensor[(16, 15, 4), bool]) {
    %727 = @func_11826() /* ty=(Tensor[(1008), float64],) */;
    %728 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
    %729 = %727.0;
    %730 = %728.0;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(1008), float64], Tensor[(16, 15, 4), bool]) */
}

def @func_5295() -> (Tensor[(11, 1, 6), float32],) {
  %732 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %733 = %732.0;
  (%733,)
}

def @func_12318(%var_12316: Tensor[(6, 99), float32]) -> (Tensor[(4, 7, 15), float64], Tensor[(11, 9, 6), bool], Tensor[(6, 99), float32]) {
  %734 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
  %735 = cast(%var_12316, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %736 = reshape(%735, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %737 = %734.1;
  %738 = @func_5870(%736) /* ty=Tensor[(11, 9, 6), bool] */;
  (%737, %738, %var_12316)
}

def @func_5535(%var_5534: Tensor[(240, 4), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) {
  %745 = fn (%var_5530: Tensor[(240, 4), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) {
    %739 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %740 = cast(%var_5530, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %741 = reshape(%740, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %742 = @func_3066(%741) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %743 = %739.0;
    %744 = %742.1;
    (%743, %744, %var_5530)
  };
  %745(%var_5534) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) */
}

def @func_10753() -> (Tensor[(11, 1, 6), float32],) {
  %748 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %746 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %747 = %746.0;
    (%747,)
  };
  %748() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_8632() -> Tensor[(11, 1, 6), float32] {
  %750 = fn () -> Tensor[(11, 1, 6), float32] {
    %749 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %749.0
  };
  %750() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_3660(%var_3658: Tensor[(14, 16, 15), float64]) -> (Tensor[(14, 16, 15), float64],) {
  @func_3657(%var_3658) /* ty=(Tensor[(14, 16, 15), float64],) */
}

def @func_10596() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), float64], Tensor[(3, 7, 15), float64], Tensor[(112), float64], uint8) {
  %751 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %752 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %753 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %754 = reshape(%752, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %755 = reshape(%753, newshape=[]) /* ty=uint8 */;
  %756 = @func_6049(%754, %755) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) */;
  %757 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  %758 = %751.0;
  %759 = %756.4;
  (%757, %758, %759, meta[relay.Constant][45] /* ty=Tensor[(112), float64] */, meta[relay.Constant][46] /* ty=uint8 */)
}

def @func_10817() -> (Tensor[(16, 7, 9), float64], Tensor[(16, 15, 4), bool]) {
  @func_10815() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(16, 15, 4), bool]) */
}

def @func_6554() -> (Tensor[(11, 1, 6), float32],) {
  @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_9242(%var_9239: Tensor[(117, 1), float32], %var_9240: Tensor[(154, 1), float32], %var_9241: Tensor[(3360), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(154, 1), float32], Tensor[(3360), float64], Tensor[(1, 420), float64], Tensor[(117, 315), int32], Tensor[(770), float32], Tensor[(11, 1, 6), float32]) {
  @func_9237(%var_9239, %var_9240, %var_9241) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(154, 1), float32], Tensor[(3360), float64], Tensor[(1, 420), float64], Tensor[(117, 315), int32], Tensor[(770), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_10454() -> (Tensor[(11, 1, 6), float32], Tensor[(4, 11, 10), bool], Tensor[(110), bool], Tensor[(11, 1, 6), float64]) {
  %760 = cast(meta[relay.Constant][47] /* ty=Tensor[(110), bool] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %761 = reshape(%760, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), bool] */;
  %762 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %765 = @func_9972() /* ty=Tensor[(11, 1, 6), float32] */;
  %766 = @func_9376(%761) /* ty=Tensor[(4, 11, 10), bool] */;
  %767 = sin(%764) /* ty=Tensor[(11, 1, 6), float64] */;
  (%765, %766, meta[relay.Constant][47] /* ty=Tensor[(110), bool] */, %767)
}

def @func_10105() -> (Tensor[(81), float32],) {
  @func_10103() /* ty=(Tensor[(81), float32],) */
}

def @func_9196() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  @func_9194() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_10053() -> (Tensor[(?, 15, 4), float64], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) {
  %768 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
  %769 = cast(meta[relay.Constant][48] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
  %770 = reshape(%769, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
  %771 = %768.0;
  %772 = @func_5870(%770) /* ty=Tensor[(11, 9, 6), bool] */;
  (%771, %772, meta[relay.Constant][48] /* ty=Tensor[(594), float32] */)
}

def @func_5912() -> Tensor[(11, 1, 6), float32] {
  %773 = fn () -> Tensor[(11, 1, 6), float32] {
    @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
  };
  %773() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_5285() -> Tensor[(11, 1, 6), float32] {
  %774 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %774.0
}

def @func_7019() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  %775 = @func_6100() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %776 = %775.0;
  %777 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
  (%776, %777)
}

def @func_7761() -> (Tensor[(16, 15, 4), bool],) {
  @func_7759() /* ty=(Tensor[(16, 15, 4), bool],) */
}

def @func_9743() -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %784 = fn () -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
    %778 = @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */;
    %779 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %780 = reshape(%779, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %781 = @func_9494(%780) /* ty=(Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */;
    %782 = %778.1;
    %783 = %781.2;
    (%782, %783, meta[relay.Constant][49] /* ty=Tensor[(960), float32] */)
  };
  %784() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */
}

def @func_3542(%var_3540: uint8, %var_3541: Tensor[(3, 1, 14), uint8]) -> (Tensor[(3, 1, 14), uint8],) {
  @func_3538(%var_3540, %var_3541) /* ty=(Tensor[(3, 1, 14), uint8],) */
}

def @func_9943(%var_9942: Tensor[(112), float64]) -> (Tensor[(?, 15, 4), float64], Tensor[(42), uint8], Tensor[(112), float64], uint8, Tensor[(4, 11, 10), bool], Tensor[(22, 5), bool]) {
  %796 = fn (%var_9925: Tensor[(112), float64]) -> (Tensor[(?, 15, 4), float64], Tensor[(42), uint8], Tensor[(112), float64], uint8, Tensor[(4, 11, 10), bool], Tensor[(22, 5), bool]) {
    %785 = @func_9036() /* ty=(Tensor[(?, 15, 4), float64],) */;
    %786 = cast(%var_9925, dtype="float64") /* ty=Tensor[(112), float64] */;
    %787 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %788 = reshape(%786, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
    %789 = reshape(%787, newshape=[]) /* ty=uint8 */;
    %790 = @func_6049(%788, %789) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) */;
    %791 = cast(meta[relay.Constant][51] /* ty=Tensor[(22, 5), bool] */, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
    %792 = reshape(%791, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), bool] */;
    %793 = %785.0;
    %794 = %790.3;
    %795 = @func_9376(%792) /* ty=Tensor[(4, 11, 10), bool] */;
    (%793, %794, %var_9925, meta[relay.Constant][50] /* ty=uint8 */, %795, meta[relay.Constant][51] /* ty=Tensor[(22, 5), bool] */)
  };
  %796(%var_9942) /* ty=(Tensor[(?, 15, 4), float64], Tensor[(42), uint8], Tensor[(112), float64], uint8, Tensor[(4, 11, 10), bool], Tensor[(22, 5), bool]) */
}

def @func_9023() -> Tensor[(11, 1, 6), float32] {
  %798 = fn () -> Tensor[(11, 1, 6), float32] {
    %797 = @func_8204() /* ty=(Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32]) */;
    %797.1
  };
  %798() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_9693() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) {
  @func_9691() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(11, 1, 6), float32], Tensor[(3, 7, 15), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_10174() -> (Tensor[(?, 15, 4), float64],) {
  @func_10172() /* ty=(Tensor[(?, 15, 4), float64],) */
}

def @func_10765() -> Tensor[(11, 1, 6), float32] {
  @func_10763() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7046() -> Tensor[(9, ?, 9), bool] {
  %800 = fn () -> Tensor[(9, ?, 9), bool] {
    %799 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
    %799.1
  };
  %800() /* ty=Tensor[(9, ?, 9), bool] */
}

def @func_12321(%var_12319: Tensor[(6, 99), float32]) -> (Tensor[(4, 7, 15), float64], Tensor[(11, 9, 6), bool], Tensor[(6, 99), float32]) {
  @func_12318(%var_12319) /* ty=(Tensor[(4, 7, 15), float64], Tensor[(11, 9, 6), bool], Tensor[(6, 99), float32]) */
}

def @func_11112() -> Tensor[(11, 1, 6), float32] {
  @func_10763() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_12932() -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), float32], Tensor[(1, 960), bool], Tensor[(330), float64]) {
  %811 = fn () -> (Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), float32], Tensor[(1, 960), bool], Tensor[(330), float64]) {
    %801 = @func_7927() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), float64], Tensor[(11, 1, 6), float32], Tensor[(154), float32], Tensor[(594), float32]) */;
    %802 = %801.4;
    %803 = cast(%802, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
    %804 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 960), bool] */, dtype="bool") /* ty=Tensor[(1, 960), bool] */;
    %805 = cast(meta[relay.Constant][53] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %806 = reshape(%804, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), bool] */;
    %807 = reshape(%805, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
    %808 = @func_8052(%806, %807) /* ty=(Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) */;
    %809 = acos(%803) /* ty=Tensor[(11, 1, 6), float64] */;
    %810 = %808.0;
    (%809, %810, meta[relay.Constant][52] /* ty=Tensor[(1, 960), bool] */, meta[relay.Constant][53] /* ty=Tensor[(330), float64] */)
  };
  %811() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(16, 15, 4), float32], Tensor[(1, 960), bool], Tensor[(330), float64]) */
}

def @func_6376(%var_6363: Tensor[(42), uint8]) -> (Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) {
  %812 = cast(meta[relay.Constant][54] /* ty=Tensor[(11, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %813 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %814 = cast(%var_6363, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %815 = reshape(%813, newshape=[]) /* ty=uint8 */;
  %816 = reshape(%814, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %817 = @func_3538(%815, %816) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %818 = log(%812) /* ty=Tensor[(11, 9, 2), float32] */;
  %819 = %817.0;
  (%818, %819, meta[relay.Constant][55] /* ty=uint8 */, %var_6363)
}

def @func_6750() -> (Tensor[(11, 1, 6), float32],) {
  @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_7414() -> (Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) {
  @func_7412() /* ty=(Tensor[(11, ?, 6), bool], Tensor[(11, 1, 6), float64]) */
}

def @func_7544() -> (Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) {
  @func_7542() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(420), float64], Tensor[(154), float32], Tensor[(288), int16]) */
}

def @func_5190(%var_5188: Tensor[(3328), int8]) -> (Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) {
  @func_5187(%var_5188) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 13, 16), int8], Tensor[(3328), int8]) */
}

def @func_9972() -> Tensor[(11, 1, 6), float32] {
  %820 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %820.0
}

def @func_5287() -> Tensor[(11, 1, 6), float32] {
  @func_5285() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_7021() -> (Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) {
  @func_7019() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */
}

def @func_6379(%var_6377: Tensor[(42), uint8]) -> (Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) {
  @func_6376(%var_6377) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */
}

def @func_11827() -> (Tensor[(1008), float64],) {
  %823 = fn () -> (Tensor[(1008), float64],) {
    %821 = @func_9712() /* ty=(Tensor[(1008), float64],) */;
    %822 = %821.0;
    (%822,)
  };
  %823() /* ty=(Tensor[(1008), float64],) */
}

def @func_9037() -> (Tensor[(?, 15, 4), float64],) {
  %826 = fn () -> (Tensor[(?, 15, 4), float64],) {
    %824 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
    %825 = %824.0;
    (%825,)
  };
  %826() /* ty=(Tensor[(?, 15, 4), float64],) */
}

def @func_11570() -> (Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) {
  @func_11568() /* ty=(Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) */
}

def @func_9237(%var_9212: Tensor[(117, 1), float32], %var_9213: Tensor[(154, 1), float32], %var_9214: Tensor[(3360), float64]) -> (Tensor[(11, 1, 6), float32], Tensor[(300), uint16], Tensor[(154, 1), float32], Tensor[(3360), float64], Tensor[(1, 420), float64], Tensor[(117, 315), int32], Tensor[(770), float32], Tensor[(11, 1, 6), float32]) {
  %827 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %828 = cast(%var_9212, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %829 = cast(%var_9212, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %830 = cast(%var_9213, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
  %831 = cast(%var_9214, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %832 = cast(meta[relay.Constant][56] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %833 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %834 = reshape(%828, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %835 = reshape(%829, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %836 = reshape(%830, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %837 = reshape(%831, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %838 = reshape(%832, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %839 = reshape(%833, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %840 = @func_6172(%834, %835, %836, %837, %838, %839) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %841 = cast(meta[relay.Constant][56] /* ty=Tensor[(315), uint8] */, dtype="int32") /* ty=Tensor[(315), int32] */;
  %842 = cast(%var_9212, dtype="int32") /* ty=Tensor[(117, 1), int32] */;
  %843 = cast(%var_9213, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
  %844 = reshape(%843, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %845 = @func_7221(%844) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) */;
  %846 = %827.0;
  %847 = %840.4;
  %848 = bitwise_and(%841, %842) /* ty=Tensor[(117, 315), int32] */;
  %849 = %845.2;
  %850 = @func_9022() /* ty=Tensor[(11, 1, 6), float32] */;
  (%846, %847, %var_9213, %var_9214, meta[relay.Constant][57] /* ty=Tensor[(1, 420), float64] */, %848, %849, %850)
}

def @func_13065() -> (Tensor[(1008), float64], Tensor[(11, 1, 6), float32]) {
  %854 = fn () -> (Tensor[(1008), float64], Tensor[(11, 1, 6), float32]) {
    %851 = @func_11826() /* ty=(Tensor[(1008), float64],) */;
    %852 = %851.0;
    %853 = @func_8631() /* ty=Tensor[(11, 1, 6), float32] */;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(1008), float64], Tensor[(11, 1, 6), float32]) */
}

def @func_12962() -> Tensor[(11, 1, 6), float32] {
  @func_12960() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_11025(%var_11024: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
  %858 = fn (%var_11011: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), bool] {
    %855 = @func_10763() /* ty=Tensor[(11, 1, 6), float32] */;
    %856 = cast(%855, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
    %857 = cast(%var_11011, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
    equal(%856, %857) /* ty=Tensor[(11, 9, 6), bool] */
  };
  %858(%var_11024) /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_9465(%var_9463: Tensor[(1, 7, 5), uint8], %var_9464: Tensor[(16, 7, 5), uint8]) -> Tensor[(16, 7, 5), uint8] {
  @func_9461(%var_9463, %var_9464) /* ty=Tensor[(16, 7, 5), uint8] */
}

def @func_4682(%var_4681: Tensor[(6, 10, 5), uint16]) -> (Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) {
  %872 = fn (%var_4637: Tensor[(6, 10, 5), uint16]) -> (Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) {
    %859 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(6, 10, 5), uint16] */;
    %860 = shape_of(%var_4637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %861 = cast(%var_4637, dtype="uint16") /* ty=Tensor[(6, 10, 5), uint16] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %863 = cast(meta[relay.Constant][59] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %864 = reshape(%863, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float64] */;
    %865 = @func_3657(%864) /* ty=(Tensor[(14, 16, 15), float64],) */;
    %866 = cast(meta[relay.Constant][60] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %867 = reshape(%866, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %868 = @func_3066(%867) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %869 = maximum(%861, %862) /* ty=Tensor[(6, 10, 5), uint16] */;
    %870 = %865.0;
    %871 = %868.0;
    (%869, %870, meta[relay.Constant][59] /* ty=Tensor[(3360), float64] */, %871, meta[relay.Constant][60] /* ty=Tensor[(960), float32] */)
  };
  %872(%var_4681) /* ty=(Tensor[(6, 10, 5), uint16], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(?, 15, 4), uint16], Tensor[(960), float32]) */
}

def @func_11484(%var_11482: Tensor[(16, 1, 16), bool], %var_11483: Tensor[(16, 7, 16), bool]) -> Tensor[(16, 7, 16), bool] {
  %875 = fn (%var_11476: Tensor[(16, 1, 16), bool], %var_11477: Tensor[(16, 7, 16), bool]) -> Tensor[(16, 7, 16), bool] {
    %873 = cast(%var_11476, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
    %874 = cast(%var_11477, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
    logical_and(%873, %874) /* ty=Tensor[(16, 7, 16), bool] */
  };
  %875(%var_11482, %var_11483) /* ty=Tensor[(16, 7, 16), bool] */
}

def @func_7769() -> Tensor[(11, 1, 6), float32] {
  @func_7767() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_9496(%var_9495: Tensor[(960), float32]) -> (Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %883 = fn (%var_9489: Tensor[(960), float32]) -> (Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
    %876 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 4, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 6), float32] */;
    %877 = cast(%var_9489, dtype="float32") /* ty=Tensor[(960), float32] */;
    %878 = reshape(%877, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float32] */;
    %879 = @func_3066(%878) /* ty=(Tensor[(?, 15, 4), uint16], Tensor[(16, 15, 4), bool]) */;
    %880 = asin(%876) /* ty=Tensor[(3, 4, 6), float32] */;
    %881 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
    %882 = %879.1;
    (%880, %881, %882, %var_9489)
  };
  %883(%var_9495) /* ty=(Tensor[(3, 4, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */
}

def @func_6618(%var_6616: Tensor[(300), uint16]) -> (Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) {
  @func_6615(%var_6616) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3360), float64], Tensor[(300), uint16]) */
}

def @func_10655() -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32]) {
  %888 = fn () -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32]) {
    %884 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %885 = @func_7740() /* ty=(Tensor[(81), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */;
    %886 = %884.0;
    %887 = %885.0;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32]) */
}

def @func_9563() -> Tensor[(1008), float64] {
  @func_9561() /* ty=Tensor[(1008), float64] */
}

def @func_10942() -> Tensor[(2, 16, 15), float64] {
  %890 = fn () -> Tensor[(2, 16, 15), float64] {
    %889 = @func_10887() /* ty=(Tensor[(2, 16, 15), float64],) */;
    %889.0
  };
  %890() /* ty=Tensor[(2, 16, 15), float64] */
}

def @func_1346(%var_1344: Tensor[(8, 11, 11), float32], %var_1345: Tensor[(420), float64]) -> (Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
  @func_1342(%var_1344, %var_1345) /* ty=(Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) */
}

def @func_11194() -> (Tensor[(11, 1, 6), float32],) {
  %892 = fn () -> (Tensor[(11, 1, 6), float32],) {
    %891 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
    (%891,)
  };
  %892() /* ty=(Tensor[(11, 1, 6), float32],) */
}

def @func_12632() -> (Tensor[(11, 1, 6), float32], Tensor[(11, ?, 6), uint16]) {
  @func_12630() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, ?, 6), uint16]) */
}

def @func_10537(%var_10533: Tensor[(5, 7, 15), float64], %var_10534: Tensor[(154), float32], %var_10535: Tensor[(3360, 1), float64], %var_10536: Tensor[(1, 315), uint8]) -> (Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) {
  @func_10531(%var_10533, %var_10534, %var_10535, %var_10536) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) */
}

def @func_12877() -> Tensor[(16, 15, 4), float64] {
  %893 = @func_8333() /* ty=(Tensor[(16, 15, 4), float64],) */;
  %893.0
}

def @func_9113(%var_9070: Tensor[(3, 198), float32], %var_9075: Tensor[(3, 198), float32], %var_9098: Tensor[(42), uint8], %var_9105: Tensor[(1680, 2), float64], %var_9106: Tensor[(315), uint8]) -> (Tensor[(16, 15, 4), bool], Tensor[(594), float32], Tensor[(3, 198), int64], Tensor[(3, 198), float32], Tensor[(3, 1, 14), uint8], Tensor[(112), float64], uint8, Tensor[(42), uint8], Tensor[(2, 16, 15), float64], Tensor[(3328), int8], Tensor[(117), float32], Tensor[(22, 7), float32], Tensor[(1680, 2), float64], Tensor[(315), uint8], Tensor[(420), float64]) {
  %894 = cast(%var_9070, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
  %895 = reshape(%894, newshape=[594]) /* ty=Tensor[(594), float32] */;
  %896 = @func_7652(%895) /* ty=(Tensor[(11, 4, 6), bool], Tensor[(154), float32], Tensor[(11, 9, 6), bool], Tensor[(594), float32]) */;
  %897 = cast(%var_9075, dtype="int64") /* ty=Tensor[(3, 198), int64] */;
  %898 = shape_of(%var_9070, dtype="int32") /* ty=Tensor[(2), int32] */;
  %899 = cast(%var_9070, dtype="int64") /* ty=Tensor[(3, 198), int64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %901 = cast(%var_9070, dtype="float64") /* ty=Tensor[(3, 198), float64] */;
  %902 = log2(%901) /* ty=Tensor[(3, 198), float64] */;
  %903 = cast(%var_9075, dtype="bool") /* ty=Tensor[(3, 198), bool] */;
  %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(2), int32] */;
  %905 = cast(%902, dtype="bool") /* ty=Tensor[(3, 198), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %907 = less(%905, %906) /* ty=Tensor[(3, 198), bool] */;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(3, 198), float32] */;
  %909 = cast(meta[relay.Constant][62] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %910 = cast(meta[relay.Constant][63] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %911 = cast(%var_9098, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %912 = reshape(%909, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
  %913 = reshape(%910, newshape=[]) /* ty=uint8 */;
  %914 = reshape(%911, newshape=[42]) /* ty=Tensor[(42), uint8] */;
  %915 = @func_5347(%912, %913, %914) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) */;
  %916 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
  %917 = cast(meta[relay.Constant][64] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %918 = cast(meta[relay.Constant][64] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %919 = cast(meta[relay.Constant][65] /* ty=Tensor[(22, 7), float32] */, dtype="float32") /* ty=Tensor[(22, 7), float32] */;
  %920 = cast(%var_9105, dtype="float64") /* ty=Tensor[(1680, 2), float64] */;
  %921 = cast(%var_9106, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %922 = cast(meta[relay.Constant][66] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %923 = reshape(%917, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %924 = reshape(%918, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %925 = reshape(%919, newshape=[154]) /* ty=Tensor[(154), float32] */;
  %926 = reshape(%920, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %927 = reshape(%921, newshape=[315]) /* ty=Tensor[(315), uint8] */;
  %928 = reshape(%922, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %929 = @func_6172(%923, %924, %925, %926, %927, %928) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(288), int16], Tensor[(154), float32], Tensor[(3328), int8], Tensor[(300), uint16], Tensor[(3328), int8], Tensor[(11, 9, 6), bool], Tensor[(3, 198), float32], Tensor[(14, 16, 15), float64], Tensor[(3360), float64], Tensor[(315), uint8], Tensor[(315), uint8], Tensor[(968), float32], Tensor[(210, 2), float64]) */;
  %930 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  %931 = %896.3;
  %932 = minimum(%899, %900) /* ty=Tensor[(3, 198), int64] */;
  %933 = rsqrt(%908) /* ty=Tensor[(3, 198), float32] */;
  %934 = %915.3;
  %935 = %916.0;
  %936 = %929.5;
  (%930, %931, %932, %933, %934, meta[relay.Constant][62] /* ty=Tensor[(112), float64] */, meta[relay.Constant][63] /* ty=uint8 */, %var_9098, %935, %936, meta[relay.Constant][64] /* ty=Tensor[(117), float32] */, meta[relay.Constant][65] /* ty=Tensor[(22, 7), float32] */, %var_9105, %var_9106, meta[relay.Constant][66] /* ty=Tensor[(420), float64] */)
}

def @func_7223(%var_7222: Tensor[(154), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) {
  %945 = fn (%var_7197: Tensor[(154), float32]) -> (Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) {
    %937 = @func_6552() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %938 = cast(meta[relay.Constant][67] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
    %939 = cast(%var_7197, dtype="float32") /* ty=Tensor[(154), float32] */;
    %940 = reshape(%938, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float32] */;
    %941 = reshape(%939, newshape=[154]) /* ty=Tensor[(154), float32] */;
    %942 = @func_5491(%940, %941) /* ty=(Tensor[(11, 5, 14), bool], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32], Tensor[(660), float32], Tensor[(14, 16, 15), float64], Tensor[(14, 240), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32], Tensor[(11, 2, 7), float32], Tensor[(154), float32], Tensor[(2, 144), int16]) */;
    %943 = %937.0;
    %944 = %942.7;
    (%943, %944, meta[relay.Constant][67] /* ty=Tensor[(770), float32] */, %var_7197)
  };
  %945(%var_7222) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) */
}

def @func_11568() -> (Tensor[(11, 1, 6), float64], Tensor[(11, 1, 6), float32]) {
  %946 = @func_10978() /* ty=(Tensor[(11, 1, 6), float32],) */;
  %947 = %946.0;
  %948 = cast(%947, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %949 = @func_8683() /* ty=(Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) */;
  %950 = cos(%948) /* ty=Tensor[(11, 1, 6), float64] */;
  %951 = %949.1;
  (%950, %951)
}

def @func_8684() -> (Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) {
  %962 = fn () -> (Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) {
    %952 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
    %953 = @func_8631() /* ty=Tensor[(11, 1, 6), float32] */;
    %954 = cast(%953, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
    %955 = tan(%954) /* ty=Tensor[(11, 1, 6), float64] */;
    %956 = cast(%955, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
    %957 = rsqrt(%956) /* ty=Tensor[(11, 1, 6), float32] */;
    %958 = cast(%957, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
    %959 = %952.1;
    %960 = @func_7767() /* ty=Tensor[(11, 1, 6), float32] */;
    %961 = asin(%958) /* ty=Tensor[(11, 1, 6), float64] */;
    (%959, %960, %961)
  };
  %962() /* ty=(Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) */
}

def @func_8334() -> (Tensor[(16, 15, 4), float64],) {
  %967 = fn () -> (Tensor[(16, 15, 4), float64],) {
    %963 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
    %964 = %963.0;
    %965 = cast(%964, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
    %966 = sin(%965) /* ty=Tensor[(16, 15, 4), float64] */;
    (%966,)
  };
  %967() /* ty=(Tensor[(16, 15, 4), float64],) */
}

def @func_10815() -> (Tensor[(16, 7, 9), float64], Tensor[(16, 15, 4), bool]) {
  %968 = @func_8230() /* ty=(Tensor[(16, 7, 9), float64], Tensor[(1008), float64], Tensor[(16, 15, 4), float64]) */;
  %969 = %968.0;
  %970 = @func_7371() /* ty=Tensor[(16, 15, 4), bool] */;
  (%969, %970)
}

def @func_12087(%var_12085: Tensor[(6, 15, 15), uint32], %var_12086: Tensor[(154), float32]) -> (Tensor[(6, 15, 15), uint32], Tensor[(81), float32], Tensor[(1, 315), uint8], Tensor[(525), float64], Tensor[(154), float32], Tensor[(3360), float64], Tensor[(315), uint8]) {
  %988 = fn (%var_12016: Tensor[(6, 15, 15), uint32], %var_12075: Tensor[(154), float32]) -> (Tensor[(6, 15, 15), uint32], Tensor[(81), float32], Tensor[(1, 315), uint8], Tensor[(525), float64], Tensor[(154), float32], Tensor[(3360), float64], Tensor[(315), uint8]) {
    %971 = cast(%var_12016, dtype="uint32") /* ty=Tensor[(6, 15, 15), uint32] */;
    %972 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(6, 15, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %973 = cast(meta[relay.Constant][68] /* ty=Tensor[(6, 15, 15), uint32] */, dtype="uint32") /* ty=Tensor[(6, 15, 15), uint32] */;
    %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %975 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
    %976 = cast(meta[relay.Constant][69] /* ty=Tensor[(525), float64] */, dtype="float64") /* ty=Tensor[(525), float64] */;
    %977 = cast(%var_12075, dtype="float32") /* ty=Tensor[(154), float32] */;
    %978 = cast(meta[relay.Constant][70] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %979 = cast(meta[relay.Constant][71] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %980 = reshape(%976, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float64] */;
    %981 = reshape(%977, newshape=[154]) /* ty=Tensor[(154), float32] */;
    %982 = reshape(%978, newshape=[3360, 1]) /* ty=Tensor[(3360, 1), float64] */;
    %983 = reshape(%979, newshape=[1, 315]) /* ty=Tensor[(1, 315), uint8] */;
    %984 = @func_10531(%980, %981, %982, %983) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(11, 1, 6), float32], Tensor[(3, 3, 13), float32], Tensor[(13, 9), float32], Tensor[(1, 315), uint8], Tensor[(420), float64], Tensor[(3360, 154), uint16], Tensor[(81), float32]) */;
    %985 = subtract(%973, %974) /* ty=Tensor[(6, 15, 15), uint32] */;
    %986 = %975.2;
    %987 = %984.4;
    (%985, %986, %987, meta[relay.Constant][69] /* ty=Tensor[(525), float64] */, %var_12075, meta[relay.Constant][70] /* ty=Tensor[(3360), float64] */, meta[relay.Constant][71] /* ty=Tensor[(315), uint8] */)
  };
  %988(%var_12085, %var_12086) /* ty=(Tensor[(6, 15, 15), uint32], Tensor[(81), float32], Tensor[(1, 315), uint8], Tensor[(525), float64], Tensor[(154), float32], Tensor[(3360), float64], Tensor[(315), uint8]) */
}

def @func_8056(%var_8054: Tensor[(16, 15, 4), bool], %var_8055: Tensor[(11, 5, 6), float64]) -> (Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) {
  @func_8052(%var_8054, %var_8055) /* ty=(Tensor[(16, 15, 4), float32], Tensor[(11, 5, 6), float64], Tensor[(16, 15, 4), bool]) */
}

def @func_11436() -> (Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), int8], Tensor[(420), float64], Tensor[(11, 1, 6), float32], Tensor[(3, ?, 14), uint32]) {
  @func_11434() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(?, 15, 4), int8], Tensor[(420), float64], Tensor[(11, 1, 6), float32], Tensor[(3, ?, 14), uint32]) */
}

def @func_10032() -> Tensor[(11, 1, 6), float32] {
  %990 = fn () -> Tensor[(11, 1, 6), float32] {
    %989 = @func_5413() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(240, 4), float32], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 4), bool], Tensor[(4, 7, 15), float64], Tensor[(70, 6), float64], Tensor[(?, 15, 4), float64], Tensor[(3328), int8], Tensor[(3328), int8]) */;
    %989.0
  };
  %990() /* ty=Tensor[(11, 1, 6), float32] */
}

def @func_3657(%var_3650: Tensor[(14, 16, 15), float64]) -> (Tensor[(14, 16, 15), float64],) {
  %991 = cast(%var_3650, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
  %992 = sinh(%991) /* ty=Tensor[(14, 16, 15), float64] */;
  (%992,)
}

def @func_8292(%var_8291: Tensor[(5, 9, 10), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(81), float64]) {
  %999 = fn (%var_8239: Tensor[(5, 9, 10), float32]) -> (Tensor[(5, 9, 10), float32], Tensor[(81), float64]) {
    %993 = cast(%var_8239, dtype="float32") /* ty=Tensor[(5, 9, 10), float32] */;
    %994 = @func_7093() /* ty=(Tensor[(2, 16, 15), float64], Tensor[(81), float32]) */;
    %995 = %994.1;
    %996 = cast(%995, dtype="float64") /* ty=Tensor[(81), float64] */;
    %997 = erf(%993) /* ty=Tensor[(5, 9, 10), float32] */;
    %998 = asinh(%996) /* ty=Tensor[(81), float64] */;
    (%997, %998)
  };
  %999(%var_8291) /* ty=(Tensor[(5, 9, 10), float32], Tensor[(81), float64]) */
}

def @func_12446() -> Tensor[(11, ?, 6), uint16] {
  %1008 = fn () -> Tensor[(11, ?, 6), uint16] {
    %1000 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %1001 = %1000.0;
    %1002 = @func_11134() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float32]) */;
    %1003 = %1002.0;
    %1004 = cast(%1003, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
    %1005 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1006 = cast(%1001, dtype="uint16") /* ty=Tensor[(11, 1, 6), uint16] */;
    %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    left_shift(%1006, %1007) /* ty=Tensor[(11, ?, 6), uint16] */
  };
  %1008() /* ty=Tensor[(11, ?, 6), uint16] */
}

def @func_1342(%var_1323: Tensor[(8, 11, 11), float32], %var_1340: Tensor[(420), float64]) -> (Tensor[(8, 11, 11), float32], Tensor[(4, 7, 15), float64], Tensor[(420), float64]) {
  %1009 = cast(%var_1323, dtype="float32") /* ty=Tensor[(8, 11, 11), float32] */;
  %1010 = cast(%var_1340, dtype="float64") /* ty=Tensor[(420), float64] */;
  %1011 = cast(%var_1340, dtype="float64") /* ty=Tensor[(420), float64] */;
  %1012 = reshape(%1010, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %1013 = reshape(%1011, newshape=[4, 7, 15]) /* ty=Tensor[(4, 7, 15), float64] */;
  %1014 = @func_469(%1012, %1013) /* ty=(Tensor[(4, 7, 15), float64],) */;
  %1015 = cos(%1009) /* ty=Tensor[(8, 11, 11), float32] */;
  %1016 = %1014.0;
  (%1015, %1016, %var_1340)
}

def @func_6052(%var_6050: Tensor[(1, 112), float64], %var_6051: uint8) -> (Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) {
  %1035 = fn (%var_6000: Tensor[(1, 112), float64], %var_6001: uint8) -> (Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) {
    %1017 = cast(%var_6000, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
    %1018 = cast(%var_6001, dtype="uint8") /* ty=uint8 */;
    %1019 = cast(meta[relay.Constant][72] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %1020 = reshape(%1017, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
    %1021 = reshape(%1018, newshape=[]) /* ty=uint8 */;
    %1022 = reshape(%1019, newshape=[42]) /* ty=Tensor[(42), uint8] */;
    %1023 = @func_5347(%1020, %1021, %1022) /* ty=(Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 1, 14), uint8], Tensor[(14, 4, 2), float64]) */;
    %1024 = cast(meta[relay.Constant][73] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %1025 = cast(meta[relay.Constant][73] /* ty=Tensor[(315), uint8] */, dtype="uint8") /* ty=Tensor[(315), uint8] */;
    %1026 = reshape(%1024, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
    %1027 = reshape(%1025, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), uint8] */;
    %1028 = @func_2086(%1026, %1027) /* ty=(Tensor[(3, 7, 15), float64],) */;
    %1029 = cast(%var_6000, dtype="float32") /* ty=Tensor[(1, 112), float32] */;
    %1030 = @func_5285() /* ty=Tensor[(11, 1, 6), float32] */;
    %1031 = %1023.0;
    %1032 = %1028.0;
    %1033 = @func_5911() /* ty=Tensor[(11, 1, 6), float32] */;
    %1034 = sin(%1029) /* ty=Tensor[(1, 112), float32] */;
    (%1030, %1031, %var_6001, meta[relay.Constant][72] /* ty=Tensor[(42), uint8] */, %1032, meta[relay.Constant][73] /* ty=Tensor[(315), uint8] */, %1033, %1034)
  };
  %1035(%var_6050, %var_6051) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8], Tensor[(3, 7, 15), float64], Tensor[(315), uint8], Tensor[(11, 1, 6), float32], Tensor[(1, 112), float32]) */
}

def @func_5101(%var_5100: Tensor[(11, 10, 6), float32]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) {
  %1043 = fn (%var_5084: Tensor[(11, 10, 6), float32]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) {
    %1036 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %1037 = %1036.0;
    %1038 = cast(%1037, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
    %1039 = cast(%var_5084, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
    %1040 = @func_4899() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %1041 = less(%1038, %1039) /* ty=Tensor[(11, 10, 6), bool] */;
    %1042 = %1040.0;
    (%1041, %1042)
  };
  %1043(%var_5100) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) */
}

def @func_12266(%var_12264: Tensor[(4, 13, 5), float32]) -> (Tensor[(4, 13, 5), float32],) {
  @func_12263(%var_12264) /* ty=(Tensor[(4, 13, 5), float32],) */
}

def @func_6925() -> (Tensor[(81), float32],) {
  %1044 = @func_6286() /* ty=(Tensor[(?, 15, 4), float64], Tensor[(9, ?, 9), bool], Tensor[(81), float32]) */;
  %1045 = %1044.2;
  (%1045,)
}

def @func_2089(%var_2087: Tensor[(3, 7, 15), uint8], %var_2088: Tensor[(3, 7, 15), uint8]) -> (Tensor[(3, 7, 15), float64],) {
  %1053 = fn (%var_2044: Tensor[(3, 7, 15), uint8], %var_2045: Tensor[(3, 7, 15), uint8]) -> (Tensor[(3, 7, 15), float64],) {
    %1046 = cast(%var_2045, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
    %1047 = shape_of(%var_2044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1048 = cast(%var_2044, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
    %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1050 = bitwise_or(%1048, %1049) /* ty=Tensor[(3, 7, 15), uint8] */;
    %1051 = cast(%1050, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
    %1052 = sqrt(%1051) /* ty=Tensor[(3, 7, 15), float64] */;
    (%1052,)
  };
  %1053(%var_2087, %var_2088) /* ty=(Tensor[(3, 7, 15), float64],) */
}

def @func_11628() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), float64]) {
  %1054 = @func_8333() /* ty=(Tensor[(16, 15, 4), float64],) */;
  %1055 = @func_6462() /* ty=Tensor[(11, 1, 6), float32] */;
  %1056 = %1054.0;
  (%1055, %1056)
}

def @func_11940(%var_11939: Tensor[(960), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
  %1062 = fn (%var_11931: Tensor[(960), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) {
    %1057 = cast(%var_11931, dtype="float32") /* ty=Tensor[(960), float32] */;
    %1058 = reshape(%1057, newshape=[240, 4]) /* ty=Tensor[(240, 4), float32] */;
    %1059 = @func_5533(%1058) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool], Tensor[(240, 4), float32]) */;
    %1060 = @func_10941() /* ty=Tensor[(2, 16, 15), float64] */;
    %1061 = %1059.1;
    (%1060, %1061, %var_11931)
  };
  %1062(%var_11939) /* ty=(Tensor[(2, 16, 15), float64], Tensor[(16, 15, 4), bool], Tensor[(960), float32]) */
}

def @func_9378(%var_9377: Tensor[(1, 11, 10), bool]) -> Tensor[(4, 11, 10), bool] {
  %1065 = fn (%var_9365: Tensor[(1, 11, 10), bool]) -> Tensor[(4, 11, 10), bool] {
    %1063 = cast(%var_9365, dtype="bool") /* ty=Tensor[(1, 11, 10), bool] */;
    %1064 = cast(meta[relay.Constant][74] /* ty=Tensor[(4, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
    logical_and(%1063, %1064) /* ty=Tensor[(4, 11, 10), bool] */
  };
  %1065(%var_9377) /* ty=Tensor[(4, 11, 10), bool] */
}

def @func_8593(%var_8592: Tensor[(780), float64]) -> (Tensor[(11, 1, 6), float64], Tensor[(360), float64], Tensor[(780), float64], Tensor[(11, 1, 6), float32], Tensor[(9, ?, 9), float64]) {
  %1081 = fn (%var_8544: Tensor[(780), float64]) -> (Tensor[(11, 1, 6), float64], Tensor[(360), float64], Tensor[(780), float64], Tensor[(11, 1, 6), float32], Tensor[(9, ?, 9), float64]) {
    %1066 = cast(meta[relay.Constant][75] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %1067 = cast(%var_8544, dtype="float64") /* ty=Tensor[(780), float64] */;
    %1068 = reshape(%1066, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), float64] */;
    %1069 = reshape(%1067, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), float64] */;
    %1070 = @func_8139(%1068, %1069) /* ty=(Tensor[(6, 15, 4), uint32], Tensor[(11, 1, 6), float64], Tensor[(13, 15, 4), float32], Tensor[(288), int16], Tensor[(?, 15, 4), float32]) */;
    %1071 = @func_5295() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %1072 = @func_7045() /* ty=Tensor[(9, ?, 9), bool] */;
    %1073 = cast(%1072, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
    %1074 = asin(%1073) /* ty=Tensor[(9, ?, 9), float32] */;
    %1075 = cast(%1074, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
    %1076 = acosh(%1075) /* ty=Tensor[(9, ?, 9), float32] */;
    %1077 = cast(%1076, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
    %1078 = %1070.1;
    %1079 = %1071.0;
    %1080 = acos(%1077) /* ty=Tensor[(9, ?, 9), float64] */;
    (%1078, meta[relay.Constant][75] /* ty=Tensor[(360), float64] */, %var_8544, %1079, %1080)
  };
  %1081(%var_8592) /* ty=(Tensor[(11, 1, 6), float64], Tensor[(360), float64], Tensor[(780), float64], Tensor[(11, 1, 6), float32], Tensor[(9, ?, 9), float64]) */
}

def @func_7371() -> Tensor[(16, 15, 4), bool] {
  %1082 = @func_7331() /* ty=(Tensor[(16, 15, 4), bool],) */;
  %1082.0
}

def @func_8849(%var_8848: Tensor[(330, 2), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 1, 6), float64], Tensor[(154), float32], Tensor[(154), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(11, 9, 6), bool], Tensor[(198, 3), float32], Tensor[(330, 2), float64]) {
  %1112 = fn (%var_8841: Tensor[(330, 2), float32]) -> (Tensor[(2, 16, 15), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 1, 6), float64], Tensor[(154), float32], Tensor[(154), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(11, 9, 6), bool], Tensor[(198, 3), float32], Tensor[(330, 2), float64]) {
    %1083 = @func_6730() /* ty=(Tensor[(?, 15, 4), float64],) */;
    %1084 = @func_6748() /* ty=(Tensor[(11, 1, 6), float32],) */;
    %1085 = cast(meta[relay.Constant][76] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
    %1086 = reshape(%1085, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float32] */;
    %1087 = @func_5099(%1086) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 1, 6), float32]) */;
    %1088 = %1087.0;
    %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    %1090 = @func_8683() /* ty=(Tensor[(240, 4), float32], Tensor[(11, 1, 6), float32], Tensor[(11, 1, 6), float64]) */;
    %1091 = cast(meta[relay.Constant][77] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
    %1092 = reshape(%1091, newshape=[154]) /* ty=Tensor[(154), float32] */;
    %1093 = @func_7221(%1092) /* ty=(Tensor[(11, 1, 6), float32], Tensor[(81), float32], Tensor[(770), float32], Tensor[(154), float32]) */;
    %1094 = cast(meta[relay.Constant][78] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %1095 = reshape(%1094, newshape=[42]) /* ty=Tensor[(42), uint8] */;
    %1096 = @func_6376(%1095) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(3, 1, 14), uint8], uint8, Tensor[(42), uint8]) */;
    %1097 = cast(meta[relay.Constant][79] /* ty=Tensor[(198, 3), float32] */, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
    %1098 = reshape(%1097, newshape=[11, 9, 6]) /* ty=Tensor[(11, 9, 6), float32] */;
    %1099 = cast(%var_8841, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
    %1100 = shape_of(meta[relay.Constant][76] /* ty=Tensor[(330, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1101 = cast(meta[relay.Constant][76] /* ty=Tensor[(330, 2), float32] */, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
    %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1103 = @func_4964() /* ty=Tensor[(2, 16, 15), float64] */;
    %1104 = %1083.0;
    %1105 = %1084.0;
    %1106 = asinh(%1089) /* ty=Tensor[(11, 10, 6), float64] */;
    %1107 = %1090.2;
    %1108 = %1093.3;
    %1109 = %1096.0;
    %1110 = @func_5870(%1098) /* ty=Tensor[(11, 9, 6), bool] */;
    %1111 = divide(%1101, %1102) /* ty=Tensor[(330, 2), float64] */;
    (%1103, %1104, %1105, %1106, %1107, %1108, meta[relay.Constant][77] /* ty=Tensor[(154), float32] */, %1109, meta[relay.Constant][78] /* ty=Tensor[(42), uint8] */, %1110, meta[relay.Constant][79] /* ty=Tensor[(198, 3), float32] */, %1111)
  };
  %1112(%var_8848) /* ty=(Tensor[(2, 16, 15), float64], Tensor[(?, 15, 4), float64], Tensor[(11, 1, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 1, 6), float64], Tensor[(154), float32], Tensor[(154), float32], Tensor[(11, 9, 2), float32], Tensor[(42), uint8], Tensor[(11, 9, 6), bool], Tensor[(198, 3), float32], Tensor[(330, 2), float64]) */
}

def @func_11160() -> (Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool]) {
  @func_11158() /* ty=(Tensor[(11, 1, 6), float32], Tensor[(16, 15, 4), bool]) */
}

def @func_4198(%var_4192: Tensor[(16, 7, 9), float64], %var_4193: Tensor[(16, 7, 9), float64]) -> (Tensor[(16, 7, 9), float64],) {
  %1113 = cast(%var_4193, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %1114 = shape_of(%var_4192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(%var_4192, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1117 = maximum(%1115, %1116) /* ty=Tensor[(16, 7, 9), float64] */;
  (%1117,)
}

def @func_10728(%var_10704: Tensor[(6, 7, 3), float64], %var_10713: uint8) -> (Tensor[(3, 1, 14), uint8], uint8, Tensor[(42, 1), uint8], Tensor[(6, 7, 3), bool]) {
  %1118 = cast(%var_10713, dtype="uint8") /* ty=uint8 */;
  %1119 = cast(meta[relay.Constant][80] /* ty=Tensor[(42, 1), uint8] */, dtype="uint8") /* ty=Tensor[(42, 1), uint8] */;
  %1120 = reshape(%1118, newshape=[]) /* ty=uint8 */;
  %1121 = reshape(%1119, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint8] */;
  %1122 = @func_3538(%1120, %1121) /* ty=(Tensor[(3, 1, 14), uint8],) */;
  %1123 = cast(%var_10704, dtype="float64") /* ty=Tensor[(6, 7, 3), float64] */;
  %1124 = asinh(%1123) /* ty=Tensor[(6, 7, 3), float64] */;
  %1125 = cast(%var_10704, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %1126 = shape_of(%1124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1127 = cast(%1124, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %1128 = dyn.reshape(%1125, %1126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1129 = %1122.0;
  %1130 = not_equal(%1127, %1128) /* ty=Tensor[(6, 7, 3), bool] */;
  (%1129, %var_10713, meta[relay.Constant][80] /* ty=Tensor[(42, 1), uint8] */, %1130)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen828/build/output.py", line 3101, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:22:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

