==========mod==========
#[version = "0.0.5"]
def @func_8429(%var_8418: Tensor[(1680), float64]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(1680), float64], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  %0 = cast(%var_8418, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %1 = cast(%var_8418, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %2 = reshape(%0, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %3 = reshape(%1, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %4 = @func_6142(%2, %3) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(378), bool] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %6 = reshape(%5, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), bool] */;
  %7 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %8 = %4.0;
  %9 = @func_5739(%6) /* ty=Tensor[(14, 9, 3), bool] */;
  (%7, %8, %var_8418, %9, meta[relay.Constant][0] /* ty=Tensor[(378), bool] */)
}

def @func_5750() -> (Tensor[(12, 9, 5), bool],) {
  %10 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %11 = %10.0;
  (%11,)
}

def @func_4545(%var_4514: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) {
  %12 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
  %13 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %16 = reshape(%14, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %17 = reshape(%15, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %18 = @func_1298(%16, %17) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %19 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %22 = cast(%var_4514, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %24 = reshape(%20, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %25 = reshape(%21, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %26 = reshape(%22, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %27 = reshape(%23, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %28 = @func_190(%24, %25, %26, %27) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
  %30 = reshape(%29, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %31 = %13.0;
  %32 = cast(%31, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %33 = cast(%31, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %34 = reshape(%32, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %35 = reshape(%33, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %36 = @func_371(%34, %35) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
  %39 = reshape(%37, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %40 = reshape(%38, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %41 = @func_3749(%39, %40) /* ty=(Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) */;
  %42 = %41.1;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 15), int16] */, dtype="int64") /* ty=Tensor[(7, 15), int64] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="int64") /* ty=Tensor[(3, 5, 7), int64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %47 = %12.0;
  %48 = %18.0;
  %49 = %19.0;
  %50 = %28.0;
  %51 = @func_541(%30) /* ty=Tensor[(3, 5, 7), int16] */;
  %52 = %36.1;
  %53 = maximum(%45, %46) /* ty=Tensor[(3, 5, 7), int64] */;
  %54 = @func_3419() /* ty=Tensor[(120), uint8] */;
  (%47, %31, %48, meta[relay.Constant][1] /* ty=Tensor[(3, 18), float32] */, %49, %50, meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float64] */, %var_4514, %51, %52, %53, %54)
}

def @func_2581(%var_2545: Tensor[(105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) {
  %55 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %56 = cast(%var_2545, dtype="int16") /* ty=Tensor[(105), int16] */;
  %57 = reshape(%56, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %58 = @func_2524(%57) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %59 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %60 = %55.0;
  %61 = %58.0;
  %62 = %59.0;
  (%60, %61, %var_2545, %62)
}

def @func_5739(%var_5735: Tensor[(14, 9, 3), bool]) -> Tensor[(14, 9, 3), bool] {
  %63 = cast(%var_5735, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %64 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 9, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 9, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%65, %66) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_371(%var_357: Tensor[(4, 3, 10), uint8], %var_358: Tensor[(4, 3, 10), uint8]) -> (Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) {
  %67 = cast(%var_358, dtype="uint8") /* ty=Tensor[(4, 3, 10), uint8] */;
  %68 = shape_of(%var_357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%var_357, dtype="uint8") /* ty=Tensor[(4, 3, 10), uint8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %71 = cast(%var_357, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %72 = left_shift(%69, %70) /* ty=Tensor[(4, 3, 10), uint8] */;
  %73 = atanh(%71) /* ty=Tensor[(4, 3, 10), float32] */;
  (%72, %73)
}

def @func_5117() -> Tensor[(12, 9, 5), bool] {
  %74 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %74.0
}

def @func_5080() -> (Tensor[(12, 9, 5), bool],) {
  %75 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %76 = %75.0;
  (%76,)
}

def @func_6885() -> (Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
  %77 = @func_4806() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) */;
  %78 = @func_6389() /* ty=(Tensor[(120), uint8],) */;
  %79 = %77.2;
  %80 = %78.0;
  %81 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
  (%79, %80, %81)
}

def @func_5308() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint16]) {
  %82 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %85 = reshape(%84, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %86 = @func_1445(%85) /* ty=(Tensor[(12, 9, 5), uint16],) */;
  %87 = %86.0;
  (%83, %87)
}

def @func_896() -> Tensor[(12, 9, 5), bool] {
  %88 = cast(2.91221f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 9, 5), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  less_equal(%88, %89) /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_6142(%var_6096: Tensor[(84, 20), float64], %var_6109: Tensor[(84, 20), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) {
  %90 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %91 = cast(%var_6109, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %92 = shape_of(%var_6096, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%var_6096, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %95 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %96 = cast(%var_6096, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %97 = cast(%var_6096, dtype="uint64") /* ty=Tensor[(84, 20), uint64] */;
  %98 = cast(%var_6096, dtype="uint64") /* ty=Tensor[(84, 20), uint64] */;
  %99 = reshape(%96, newshape=[2, 840]) /* ty=Tensor[(2, 840), float64] */;
  %100 = reshape(%97, newshape=[2, 840]) /* ty=Tensor[(2, 840), uint64] */;
  %101 = reshape(%98, newshape=[2, 840]) /* ty=Tensor[(2, 840), uint64] */;
  %102 = @func_2010(%99, %100, %101) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) */;
  %103 = %102.10;
  %104 = cast(%103, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %105 = @func_5446() /* ty=Tensor[(12, 9, 5), bool] */;
  %106 = %90.0;
  %107 = divide(%93, %94) /* ty=Tensor[(84, 20), float64] */;
  %108 = %95.0;
  %109 = atan(%104) /* ty=Tensor[(2, 840), float64] */;
  (%105, %106, %107, %108, %109)
}

def @func_3445() -> (Tensor[(12, 9, 5), bool],) {
  %110 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %111 = %110.0;
  (%111,)
}

def @func_2032() -> (Tensor[(12, 9, 5), bool],) {
  %112 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %113 = %112.0;
  (%113,)
}

def @func_4385() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) {
  %114 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %115 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %117 = reshape(%116, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %118 = @func_3918(%117) /* ty=(Tensor[(12, 9, 5), uint8],) */;
  %119 = %114.0;
  %120 = %115.1;
  %121 = %118.0;
  (%119, %120, %121, meta[relay.Constant][6] /* ty=Tensor[(540), float64] */)
}

def @func_3334() -> (Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) {
  %122 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %123 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %124 = %122.0;
  (%123, %124)
}

def @func_2705() -> (Tensor[(9, 2, 6), float64],) {
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
  %126 = log2(%125) /* ty=Tensor[(9, 2, 6), float64] */;
  (%126,)
}

def @func_5937() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  %127 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %128 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(378), bool] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %130 = reshape(%129, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), bool] */;
  %131 = %127.0;
  %132 = %128.0;
  %133 = @func_5739(%130) /* ty=Tensor[(14, 9, 3), bool] */;
  (%131, %132, %133, meta[relay.Constant][8] /* ty=Tensor[(378), bool] */)
}

def @func_7793() -> Tensor[(12, 9, 5), bool] {
  %134 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
  %134.2
}

def @func_2453(%var_2440: Tensor[(2, 12, 10), float32], %var_2443: Tensor[(2, 12, 10), float32]) -> (Tensor[(2, 12, 10), uint16],) {
  %135 = cast(%var_2440, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
  %136 = acos(%135) /* ty=Tensor[(2, 12, 10), float32] */;
  %137 = cast(%var_2443, dtype="uint16") /* ty=Tensor[(2, 12, 10), uint16] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="uint16") /* ty=Tensor[(2, 12, 10), uint16] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %141 = minimum(%139, %140) /* ty=Tensor[(2, 12, 10), uint16] */;
  (%141,)
}

def @func_1147(%var_1138: Tensor[(14, 1, 7), bool]) -> Tensor[(14, 7, 7), bool] {
  %142 = cast(%var_1138, dtype="bool") /* ty=Tensor[(14, 1, 7), bool] */;
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 7), bool] */;
  logical_or(%142, %143) /* ty=Tensor[(14, 7, 7), bool] */
}

def @func_7038() -> (Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(105), int16]) {
  %144 = cast(meta[relay.Constant][10] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %145 = reshape(%144, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %146 = @func_2524(%145) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %147 = @func_3419() /* ty=Tensor[(120), uint8] */;
  %148 = %146.1;
  (%147, %148, meta[relay.Constant][10] /* ty=Tensor[(105), int16] */)
}

def @func_4806() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) {
  %149 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %152 = reshape(%150, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %153 = reshape(%151, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %154 = @func_2891(%152, %153) /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) */;
  %155 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %156 = %149.0;
  %157 = %154.1;
  %158 = @func_4060() /* ty=Tensor[(9, 2, 6), float64] */;
  %159 = %155.1;
  (%156, %157, meta[relay.Constant][11] /* ty=Tensor[(1092), float64] */, %158, %159)
}

def @func_6389() -> (Tensor[(120), uint8],) {
  %160 = @func_4288() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) */;
  %161 = %160.1;
  (%161,)
}

def @func_2010(%var_1973: Tensor[(2, 840), float64], %var_2001: Tensor[(2, 840), uint64], %var_2006: Tensor[(2, 840), uint64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) {
  %162 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %163 = %162.0;
  %164 = cast(%163, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %165 = reshape(%164, newshape=[120]) /* ty=Tensor[(120), uint8] */;
  %166 = @func_1134(%165) /* ty=(Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) */;
  %167 = cast(meta[relay.Constant][12] /* ty=Tensor[(98), bool] */, dtype="bool") /* ty=Tensor[(98), bool] */;
  %168 = reshape(%167, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %169 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %171 = reshape(%170, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %172 = @func_1598(%171) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %173 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %174 = reshape(%173, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %175 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 840), float64] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %176 = sqrt(%175) /* ty=Tensor[(2, 840), float32] */;
  %177 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 840), float32] */, dtype="uint64") /* ty=Tensor[(2, 840), uint64] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %179 = cast(%176, dtype="uint64") /* ty=Tensor[(2, 840), uint64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %181 = left_shift(%179, %180) /* ty=Tensor[(2, 840), uint64] */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 840), float64] */, dtype="uint32") /* ty=Tensor[(2, 840), uint32] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(%181, dtype="uint32") /* ty=Tensor[(2, 840), uint32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %186 = cast(%176, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %187 = log2(%186) /* ty=Tensor[(2, 840), float64] */;
  %188 = cast(%var_1973, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %192 = cast(%181, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %193 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%187, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %196 = cast(%181, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %197 = cast(%var_2001, dtype="int16") /* ty=Tensor[(2, 840), int16] */;
  %198 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %199 = cast(%181, dtype="int16") /* ty=Tensor[(2, 840), int16] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %201 = cast(%var_2006, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %202 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %203 = cast(%181, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %205 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %206 = %166.4;
  %207 = @func_1147(%168) /* ty=Tensor[(14, 7, 7), bool] */;
  %208 = %169.0;
  %209 = %172.0;
  %210 = @func_541(%174) /* ty=Tensor[(3, 5, 7), int16] */;
  %211 = add(%184, %185) /* ty=Tensor[(2, 840), uint32] */;
  %212 = logical_or(%190, %191) /* ty=Tensor[(2, 840), bool] */;
  %213 = floor_divide(%194, %195) /* ty=Tensor[(2, 840), float32] */;
  %214 = exp(%196) /* ty=Tensor[(2, 840), float64] */;
  %215 = minimum(%199, %200) /* ty=Tensor[(2, 840), int16] */;
  %216 = equal(%203, %204) /* ty=Tensor[(2, 840), bool] */;
  (%205, %163, %206, %207, meta[relay.Constant][12] /* ty=Tensor[(98), bool] */, %208, %209, %210, meta[relay.Constant][14] /* ty=Tensor[(105), int16] */, %211, %212, %213, %214, %215, %216)
}

def @func_1342() -> (Tensor[(120), uint8],) {
  %217 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %218 = %217.2;
  (%218,)
}

def @func_7221(%var_7200: Tensor[(2, 14, 6), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), int8], Tensor[(12, 9, 5), bool]) {
  %219 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
  %220 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %221 = cast(%var_7200, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %225 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %226 = %219.1;
  %227 = left_shift(%223, %224) /* ty=Tensor[(2, 14, 6), int8] */;
  %228 = %225.0;
  (%226, %227, %228)
}

def @func_958(%var_948: int16) -> Tensor[(16, 12, 8), int16] {
  %229 = cast(%var_948, dtype="int16") /* ty=int16 */;
  %230 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 12, 8), int16] */, dtype="int16") /* ty=Tensor[(16, 12, 8), int16] */;
  minimum(%229, %230) /* ty=Tensor[(16, 12, 8), int16] */
}

def @func_3673(%var_3669: Tensor[(14, 9, 9), int32]) -> (Tensor[(14, 9, 9), int32],) {
  %231 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %232 = cast(%var_3669, dtype="int32") /* ty=Tensor[(14, 9, 9), int32] */;
  %233 = multiply(%231, %232) /* ty=Tensor[(14, 9, 9), int32] */;
  (%233,)
}

def @func_141(%var_120: Tensor[(16, 9, 15), float64]) -> Tensor[(16, 9, 15), float64] {
  %234 = cast(%var_120, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %235 = log10(%234) /* ty=Tensor[(16, 9, 15), float64] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  sinh(%236) /* ty=Tensor[(16, 9, 15), float64] */
}

def @func_3918(%var_3907: Tensor[(12, 9, 5), float64]) -> (Tensor[(12, 9, 5), uint8],) {
  %237 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %238 = %237.0;
  %239 = cast(%var_3907, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %243 = bitwise_or(%241, %242) /* ty=Tensor[(12, 9, 5), uint8] */;
  (%243,)
}

def @func_2690(%var_2684: Tensor[(2160), float64]) -> (Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(16, 9, 15), float64], Tensor[(2160), float64]) {
  %244 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %245 = %244.0;
  %246 = cast(%245, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %247 = cast(%245, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %248 = reshape(%246, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %249 = reshape(%247, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %250 = @func_371(%248, %249) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %251 = cast(%var_2684, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %252 = reshape(%251, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %253 = %250.0;
  %254 = @func_141(%252) /* ty=Tensor[(16, 9, 15), float64] */;
  (%245, %253, %254, %var_2684)
}

def @func_8381(%var_8357: Tensor[(3, 2, 5), float64], %var_8358: Tensor[(3, 2, 5), float64]) -> (Tensor[(3, 2, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %255 = cast(%var_8358, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %256 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_8357, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %259 = mod(%257, %258) /* ty=Tensor[(3, 2, 5), float64] */;
  %260 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
  %261 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
  (%259, %260, %261)
}

def @func_7258() -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(54), float32]) {
  %262 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %264 = cast(%262, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %265 = reshape(%264, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %266 = @func_1825(%265) /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) */;
  %267 = log10(%263) /* ty=Tensor[(12, 9, 5), float64] */;
  %268 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %269 = %266.6;
  (%267, %268, %269)
}

def @func_4174(%var_4116: Tensor[(1092), float64], %var_4122: Tensor[(420), float64], %var_4152: Tensor[(98), bool], %var_4160: Tensor[(9, 3, 7), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) {
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %271 = reshape(%270, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %272 = @func_932(%271) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) */;
  %273 = cast(%var_4116, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %274 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(1092), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %275 = cast(meta[relay.Constant][17] /* ty=Tensor[(1092), float64] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?), bool] */;
  %277 = cast(%var_4122, dtype="float64") /* ty=Tensor[(420), float64] */;
  %278 = reshape(%277, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %279 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %280 = reshape(%279, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %281 = @func_1598(%280) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %282 = cast(meta[relay.Constant][19] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %283 = cast(%var_4152, dtype="bool") /* ty=Tensor[(98), bool] */;
  %284 = reshape(%282, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %285 = reshape(%283, newshape=[98]) /* ty=Tensor[(98), bool] */;
  %286 = @func_3662(%284, %285) /* ty=(Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) */;
  %287 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %288 = acos(%287) /* ty=Tensor[(9, 3, 7), float64] */;
  %289 = cast(%var_4160, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %293 = %272.0;
  %294 = not_equal(%275, %276) /* ty=Tensor[(1092), bool] */;
  %295 = @func_721(%278) /* ty=Tensor[(15, 4, 7), float64] */;
  %296 = %281.0;
  %297 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %298 = %286.4;
  %299 = bitwise_or(%291, %292) /* ty=Tensor[(9, 3, 7), int8] */;
  %300 = @func_4019() /* ty=Tensor[(12, 9, 5), bool] */;
  (%293, %294, %295, %var_4122, %296, meta[relay.Constant][18] /* ty=Tensor[(12, 140), float64] */, %297, %298, meta[relay.Constant][19] /* ty=Tensor[(30), float32] */, %var_4152, %299, %300)
}

def @func_2067() -> (Tensor[(12, 9, 5), float64],) {
  %301 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %304 = sigmoid(%303) /* ty=Tensor[(12, 9, 5), float64] */;
  (%304,)
}

def @func_5773() -> Tensor[(120), uint8] {
  %305 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %305.0
}

def @func_2180() -> (Tensor[(120), uint8],) {
  %306 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %307 = %306.0;
  (%307,)
}

def @func_6023() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %308 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %309 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %310 = %308.0;
  %311 = %309.0;
  (%310, %311)
}

def @main(%var_8481: Tensor[(3, 14, 1), float32]) -> (Tensor[(3, 14, 1), float32],) {
  %312 = cast(%var_8481, dtype="float32") /* ty=Tensor[(3, 14, 1), float32] */;
  %313 = sqrt(%312) /* ty=Tensor[(3, 14, 1), float32] */;
  (%313,)
}

def @func_721(%var_706: Tensor[(15, 4, 7), float64]) -> Tensor[(15, 4, 7), float64] {
  %314 = cast(%var_706, dtype="float64") /* ty=Tensor[(15, 4, 7), float64] */;
  cos(%314) /* ty=Tensor[(15, 4, 7), float64] */
}

def @func_7653() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8]) {
  %315 = @func_6935() /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) */;
  %316 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
  %317 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
  %318 = %315.1;
  %319 = %316.0;
  %320 = %317.3;
  (%318, %319, %320)
}

def @func_1134(%var_1094: Tensor[(120), uint8]) -> (Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) {
  %321 = cast(%var_1094, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %322 = cast(%var_1094, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %323 = reshape(%321, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %324 = reshape(%322, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %325 = @func_371(%323, %324) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %326 = %325.1;
  %327 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(4, 3, 10), bool] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="bool") /* ty=Tensor[(4, 3, 10), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %332 = reshape(%331, newshape=[]) /* ty=int16 */;
  %333 = @func_958(%332) /* ty=Tensor[(16, 12, 8), int16] */;
  %334 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 12, 8), int16] */, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %338 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %339 = greater(%329, %330) /* ty=Tensor[(4, 3, 10), bool] */;
  %340 = divide(%336, %337) /* ty=Tensor[(16, 12, 8), float32] */;
  (%338, meta[relay.Constant][21] /* ty=int16 */, %var_1094, %339, %340)
}

def @func_2227() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  %341 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %342 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %343 = %341.2;
  %344 = %342.0;
  (%343, %344)
}

def @func_5488() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %345 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %346 = @func_3541() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
  %347 = %345.0;
  %348 = %346.1;
  (%347, %348)
}

def @func_2261() -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) {
  %349 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 14, 1), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 1), bool] */;
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 14, 6), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 14, 1), bool] */, dtype="float32") /* ty=Tensor[(2, 14, 1), float32] */;
  %352 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %353 = logical_or(%349, %350) /* ty=Tensor[(2, 14, 6), bool] */;
  %354 = atan(%351) /* ty=Tensor[(2, 14, 1), float32] */;
  %355 = %352.2;
  (%353, %354, %355)
}

def @func_2273() -> (Tensor[(12, 9, 5), bool],) {
  %356 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %357 = %356.0;
  (%357,)
}

def @func_5623() -> Tensor[(120), uint8] {
  %358 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %358.0
}

def @func_8192() -> (Tensor[(12, 9, 5), bool],) {
  %359 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %360 = %359.0;
  (%360,)
}

def @func_7140(%var_7127: Tensor[(5, 14, 5), int32]) -> (Tensor[(5, 14, 5), int32], Tensor[(5, 14, 5), float32]) {
  %361 = cast(%var_7127, dtype="int32") /* ty=Tensor[(5, 14, 5), int32] */;
  %362 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(5, 14, 5), int32] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %365 = cast(%var_7127, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %366 = bitwise_xor(%363, %364) /* ty=Tensor[(5, 14, 5), int32] */;
  %367 = tan(%365) /* ty=Tensor[(5, 14, 5), float32] */;
  (%366, %367)
}

def @func_3971() -> (Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) {
  %368 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
  %369 = %368.0;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %371 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %372 = log10(%370) /* ty=Tensor[(2, 14, 6), float32] */;
  %373 = %371.1;
  (%372, %373)
}

def @func_8091(%var_8037: Tensor[(12, 9, 5), bool], %var_8060: Tensor[(420), float64], %var_8070: Tensor[(98), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(3, 5, 7), int16], Tensor[(2160), float64], Tensor[(120), uint8], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(420), float64], Tensor[(14, 78), float64], Tensor[(98), bool], Tensor[(1, 189), float64]) {
  %374 = @func_7809() /* ty=Tensor[(12, 9, 5), bool] */;
  %375 = cast(%var_8037, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = cast(meta[relay.Constant][27] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %380 = reshape(%379, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %381 = @func_4545(%380) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) */;
  %382 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %383 = cast(%var_8060, dtype="float64") /* ty=Tensor[(420), float64] */;
  %384 = reshape(%383, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %385 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %386 = @func_721(%384) /* ty=Tensor[(15, 4, 7), float64] */;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(15, 4, 7), float64] */;
  %388 = cast(%var_8070, dtype="bool") /* ty=Tensor[(98), bool] */;
  %389 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 189), float64] */, dtype="float64") /* ty=Tensor[(1, 189), float64] */;
  %390 = reshape(%385, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %391 = reshape(%387, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %392 = reshape(%388, newshape=[98]) /* ty=Tensor[(98), bool] */;
  %393 = reshape(%389, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float64] */;
  %394 = @func_4174(%390, %391, %392, %393) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) */;
  %395 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 189), float64] */, dtype="float32") /* ty=Tensor[(1, 189), float32] */;
  %396 = sqrt(%395) /* ty=Tensor[(1, 189), float32] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(1, 189), float64] */;
  %398 = greater(%377, %378) /* ty=Tensor[(12, 9, 5), bool] */;
  %399 = %381.8;
  %400 = %382.0;
  %401 = %394.3;
  %402 = sigmoid(%397) /* ty=Tensor[(1, 189), float64] */;
  (%398, %399, meta[relay.Constant][27] /* ty=Tensor[(2160), float64] */, %400, %386, %var_8060, %401, meta[relay.Constant][28] /* ty=Tensor[(14, 78), float64] */, %var_8070, %402)
}

def @func_4615() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) {
  %403 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
  %404 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %405 = reshape(%404, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
  %406 = @func_3290(%405) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) */;
  %407 = @func_4385() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) */;
  %408 = @func_4060() /* ty=Tensor[(9, 2, 6), float64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
  %410 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
  %411 = %403.1;
  %412 = %406.0;
  %413 = %407.1;
  %414 = exp(%409) /* ty=Tensor[(9, 2, 6), float64] */;
  %415 = %410.1;
  (%411, %412, meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, %413, %414, %415)
}

def @func_6656(%var_6632: Tensor[(21, 5), int16], %var_6650: Tensor[(1680), float64]) -> (Tensor[(120), uint8], Tensor[(3, 5, 7), int16], Tensor[(21, 5), int16], Tensor[(120), uint8], Tensor[(1680), float64]) {
  %416 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %417 = cast(%var_6632, dtype="int16") /* ty=Tensor[(21, 5), int16] */;
  %418 = reshape(%417, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %419 = cast(%var_6650, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %420 = cast(%var_6650, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %421 = reshape(%419, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %422 = reshape(%420, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %423 = @func_6142(%421, %422) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) */;
  %424 = %416.0;
  %425 = @func_541(%418) /* ty=Tensor[(3, 5, 7), int16] */;
  %426 = %423.1;
  (%424, %425, %var_6632, %426, %var_6650)
}

def @func_2524(%var_2508: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) {
  %427 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %428 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %429 = reshape(%427, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %430 = reshape(%428, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %431 = @func_1298(%429, %430) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %432 = cast(%var_2508, dtype="int16") /* ty=Tensor[(1, 105), int16] */;
  %433 = reshape(%432, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %434 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %435 = %431.0;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %437 = reshape(%434, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %438 = reshape(%436, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %439 = @func_1298(%437, %438) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %440 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %441 = %440.0;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %443 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %444 = @func_541(%433) /* ty=Tensor[(3, 5, 7), int16] */;
  %445 = %439.0;
  %446 = log2(%442) /* ty=Tensor[(12, 9, 5), float32] */;
  (%443, %435, meta[relay.Constant][31] /* ty=Tensor[(54), float32] */, %444, %var_2508, %445, %446)
}

def @func_5537(%var_5490: Tensor[(8, 14, 5), float32], %var_5521: Tensor[(8, 14, 5), float64]) -> (Tensor[(8, 14, 5), float32], Tensor[(240), float32], Tensor[(8, 14, 5), float64], Tensor[(12, 9, 5), bool]) {
  %447 = cast(%var_5490, dtype="float32") /* ty=Tensor[(8, 14, 5), float32] */;
  %448 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
  %449 = cast(%var_5490, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %450 = log(%449) /* ty=Tensor[(8, 14, 5), float64] */;
  %451 = cast(%var_5521, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %455 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %456 = sqrt(%447) /* ty=Tensor[(8, 14, 5), float32] */;
  %457 = %448.4;
  %458 = mod(%453, %454) /* ty=Tensor[(8, 14, 5), float64] */;
  %459 = %455.1;
  (%456, %457, %458, %459)
}

def @func_6785() -> Tensor[(12, 9, 5), bool] {
  @func_3479() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_2130() -> Tensor[(12, 9, 5), float64] {
  %460 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %460.0
}

def @func_4952(%var_4926: Tensor[(108), float64]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) {
  %461 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %463 = acos(%462) /* ty=Tensor[(12, 9, 5), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %465 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
  %466 = cast(meta[relay.Constant][32] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
  %467 = reshape(%466, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %468 = @func_4679(%467) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
  %469 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %470 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 14), bool] */, dtype="bool") /* ty=Tensor[(7, 14), bool] */;
  %471 = reshape(%470, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %472 = cast(meta[relay.Constant][32] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
  %473 = reshape(%472, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %474 = @func_4679(%473) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
  %475 = @func_3209() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %478 = reshape(%477, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %479 = @func_1825(%478) /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) */;
  %480 = cast(%var_4926, dtype="float64") /* ty=Tensor[(108), float64] */;
  %481 = reshape(%480, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float64] */;
  %482 = @func_4447(%481) /* ty=(Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) */;
  %483 = asinh(%464) /* ty=Tensor[(12, 9, 5), float32] */;
  %484 = %465.5;
  %485 = %468.1;
  %486 = %469.0;
  %487 = @func_1147(%471) /* ty=Tensor[(14, 7, 7), bool] */;
  %488 = %474.2;
  %489 = %479.0;
  %490 = %482.0;
  (%483, %484, %485, meta[relay.Constant][32] /* ty=Tensor[(168, 1), float64] */, %486, %487, meta[relay.Constant][33] /* ty=Tensor[(7, 14), bool] */, %488, %476, %489, %490, %var_4926)
}

def @func_2345(%var_2328: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) {
  %491 = cast(%var_2328, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %492 = cast(%var_2328, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
  %493 = cosh(%491) /* ty=Tensor[(15, 3, 7), float32] */;
  %494 = asin(%492) /* ty=Tensor[(15, 3, 7), float64] */;
  (%493, %494)
}

def @func_2960() -> (Tensor[(120), uint8],) {
  %495 = @func_2725() /* ty=Tensor[(120), uint8] */;
  (%495,)
}

def @func_4288() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) {
  %496 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %497 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %498 = reshape(%496, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %499 = reshape(%497, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %500 = @func_3749(%498, %499) /* ty=(Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) */;
  %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %502 = reshape(%501, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %503 = @func_1536(%502) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %504 = @func_2725() /* ty=Tensor[(120), uint8] */;
  %505 = %500.3;
  %506 = %503.0;
  (%504, %505, meta[relay.Constant][34] /* ty=Tensor[(105), int16] */, %506, meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */)
}

def @func_7959(%var_7947: Tensor[(1, 1092), float64]) -> (Tensor[(105), int16], Tensor[(360, 6), float64], Tensor[(1, 1092), float64]) {
  %507 = @func_4288() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) */;
  %508 = cast(%var_7947, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %509 = reshape(%508, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %510 = @func_1536(%509) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %511 = %507.2;
  %512 = %510.2;
  (%511, %512, %var_7947)
}

def @func_4060() -> Tensor[(9, 2, 6), float64] {
  %513 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %513.0
}

def @func_2891(%var_2842: Tensor[(14, 78), float64], %var_2869: Tensor[(14, 78), float64]) -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) {
  %514 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %515 = cast(%var_2842, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %516 = reshape(%515, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %517 = @func_1536(%516) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %520 = cast(%518, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %521 = reshape(%519, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %522 = reshape(%520, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %523 = @func_371(%521, %522) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %524 = cast(%var_2869, dtype="int8") /* ty=Tensor[(14, 78), int8] */;
  %525 = shape_of(%var_2842, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%var_2842, dtype="int8") /* ty=Tensor[(14, 78), int8] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %529 = shape_of(%var_2869, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(%var_2869, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %532 = %514.0;
  %533 = %523.0;
  %534 = minimum(%526, %527) /* ty=Tensor[(14, 78), int8] */;
  %535 = power(%530, %531) /* ty=Tensor[(14, 78), float64] */;
  (%532, %518, %533, %534, %535)
}

def @func_4250() -> (Tensor[(12, 9, 5), float64],) {
  %536 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %539 = sinh(%538) /* ty=Tensor[(12, 9, 5), float64] */;
  (%539,)
}

def @func_6999() -> (Tensor[(12, 9, 5), bool],) {
  %540 = @func_3209() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %541 = %540.0;
  (%541,)
}

def @func_7809() -> Tensor[(12, 9, 5), bool] {
  %542 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %542.0
}

def @func_5002() -> (Tensor[(120), uint8],) {
  %543 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %544 = %543.0;
  (%544,)
}

def @func_5730() -> (Tensor[(12, 9, 5), bool],) {
  %545 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %546 = %545.0;
  (%546,)
}

def @func_2286() -> (Tensor[(12, 9, 5), bool],) {
  %547 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %548 = %547.1;
  (%548,)
}

def @func_4735(%var_4725: int16) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 12, 8), int16], int16) {
  %549 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %550 = cast(%var_4725, dtype="int16") /* ty=int16 */;
  %551 = reshape(%550, newshape=[]) /* ty=int16 */;
  %552 = %549.0;
  %553 = @func_958(%551) /* ty=Tensor[(16, 12, 8), int16] */;
  (%552, %553, %var_4725)
}

def @func_8216() -> (Tensor[(120), uint8],) {
  %554 = @func_3777() /* ty=(Tensor[(120), uint8],) */;
  %555 = %554.0;
  (%555,)
}

def @func_6598() -> (Tensor[(12, 9, 5), bool],) {
  %556 = @func_4019() /* ty=Tensor[(12, 9, 5), bool] */;
  (%556,)
}

def @func_7016() -> (Tensor[(120), uint8],) {
  %557 = @func_5002() /* ty=(Tensor[(120), uint8],) */;
  %558 = %557.0;
  (%558,)
}

def @func_5688(%var_5680: Tensor[(13, 11, 3), uint8]) -> (Tensor[(13, 11, 3), uint8],) {
  %559 = cast(meta[relay.Constant][37] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %560 = cast(%var_5680, dtype="uint8") /* ty=Tensor[(13, 11, 3), uint8] */;
  %561 = bitwise_and(%559, %560) /* ty=Tensor[(13, 11, 3), uint8] */;
  (%561,)
}

def @func_1298(%var_1286: Tensor[(3, 9, 2), float32], %var_1287: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
  %562 = cast(%var_1287, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %563 = shape_of(%var_1286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_1286, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %566 = add(%564, %565) /* ty=Tensor[(3, 9, 2), float32] */;
  (%566,)
}

def @func_7390() -> (Tensor[(2, 14, 6), float64],) {
  %567 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %570 = log(%569) /* ty=Tensor[(2, 14, 6), float64] */;
  (%570,)
}

def @func_1736(%var_1703: Tensor[(9, 14, 1), int8], %var_1704: Tensor[(9, 14, 5), int8], %var_1711: Tensor[(54), float32], %var_1717: Tensor[(9, 14, 5), int8]) -> (Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) {
  %571 = cast(%var_1703, dtype="int8") /* ty=Tensor[(9, 14, 1), int8] */;
  %572 = cast(%var_1704, dtype="int8") /* ty=Tensor[(9, 14, 5), int8] */;
  %573 = cast(%var_1717, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %574 = shape_of(%var_1704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_1704, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = cast(%var_1711, dtype="float32") /* ty=Tensor[(54), float32] */;
  %578 = reshape(%577, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %579 = @func_1678(%578) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
  %580 = cast(%var_1711, dtype="float32") /* ty=Tensor[(54), float32] */;
  %581 = reshape(%580, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %582 = @func_1678(%581) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
  %583 = %582.2;
  %584 = cast(%var_1711, dtype="int8") /* ty=Tensor[(54), int8] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="int8") /* ty=Tensor[(3, 9, 2), int8] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %588 = multiply(%571, %572) /* ty=Tensor[(9, 14, 5), int8] */;
  %589 = not_equal(%575, %576) /* ty=Tensor[(9, 14, 5), bool] */;
  %590 = %579.1;
  %591 = bitwise_or(%586, %587) /* ty=Tensor[(3, 9, 2), int8] */;
  (%588, %589, %590, %591)
}

def @func_6745(%var_6731: Tensor[(9, 2, 6), float64]) -> (Tensor[(9, 2, 6), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  %592 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
  %593 = %592.4;
  %594 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(9, 2, 6), uint8] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%593, dtype="uint8") /* ty=Tensor[(9, 2, 6), uint8] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %598 = @func_4250() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %599 = multiply(%596, %597) /* ty=Tensor[(9, 2, 6), uint8] */;
  %600 = @func_5355() /* ty=Tensor[(120), uint8] */;
  %601 = %598.0;
  (%599, %600, %601)
}

def @func_3541() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
  %602 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
  %603 = @func_2725() /* ty=Tensor[(120), uint8] */;
  %604 = %602.1;
  (%603, %604)
}

def @func_5593(%var_5547: Tensor[(11, 12, 8), uint64], %var_5575: Tensor[(168), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(168), float64], Tensor[(168), float64], Tensor[(12, 9, 5), float64]) {
  %605 = cast(%var_5547, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %606 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 12, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 12, 8), uint64] */, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = cast(%var_5575, dtype="float64") /* ty=Tensor[(168), float64] */;
  %610 = reshape(%609, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %611 = @func_4679(%610) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
  %612 = @func_3971() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) */;
  %613 = %612.1;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %615 = greater_equal(%607, %608) /* ty=Tensor[(11, 12, 8), bool] */;
  %616 = %611.2;
  %617 = atanh(%614) /* ty=Tensor[(12, 9, 5), float64] */;
  (%615, %616, %var_5575, %617)
}

def @func_3749(%var_3684: Tensor[(105), int16], %var_3703: Tensor[(3, 5, 7), int16]) -> (Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) {
  %618 = cast(%var_3684, dtype="int16") /* ty=Tensor[(105), int16] */;
  %619 = reshape(%618, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %620 = @func_2524(%619) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %621 = %620.3;
  %622 = cast(%var_3703, dtype="float32") /* ty=Tensor[(3, 5, 7), float32] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="float32") /* ty=Tensor[(3, 5, 7), float32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %626 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %629 = cos(%628) /* ty=Tensor[(12, 9, 5), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %631 = sin(%630) /* ty=Tensor[(12, 9, 5), float64] */;
  %632 = cast(%631, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %633 = reshape(%632, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %634 = @func_1445(%633) /* ty=(Tensor[(12, 9, 5), uint16],) */;
  %635 = divide(%624, %625) /* ty=Tensor[(3, 5, 7), float32] */;
  %636 = @func_3419() /* ty=Tensor[(120), uint8] */;
  %637 = %634.0;
  (%var_3684, %635, %631, %636, %637)
}

def @func_6935() -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) {
  %638 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %639 = cast(meta[relay.Constant][39] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %640 = reshape(%639, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %641 = @func_5047(%640) /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) */;
  %642 = %638.0;
  %643 = %641.0;
  (%642, %643, meta[relay.Constant][39] /* ty=Tensor[(540), bool] */)
}

def @func_6318() -> (Tensor[(120), uint8],) {
  %644 = @func_3419() /* ty=Tensor[(120), uint8] */;
  (%644,)
}

def @func_6182(%var_6156: Tensor[(7, 10, 11), bool], %var_6157: Tensor[(7, 10, 11), bool], %var_6167: Tensor[(7, 10, 11), bool], %var_6172: Tensor[(420), float64]) -> (Tensor[(7, 10, 11), bool], Tensor[(7, 10, 11), uint32], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(12, 9, 5), bool], Tensor[(2160), float64]) {
  %645 = cast(%var_6157, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %646 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_6156, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %649 = cast(%var_6167, dtype="uint32") /* ty=Tensor[(7, 10, 11), uint32] */;
  %650 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_6156, dtype="uint32") /* ty=Tensor[(7, 10, 11), uint32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %653 = cast(%var_6172, dtype="float64") /* ty=Tensor[(420), float64] */;
  %654 = reshape(%653, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %655 = cast(meta[relay.Constant][40] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %656 = reshape(%655, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %657 = @func_5819(%656) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) */;
  %658 = logical_and(%647, %648) /* ty=Tensor[(7, 10, 11), bool] */;
  %659 = minimum(%651, %652) /* ty=Tensor[(7, 10, 11), uint32] */;
  %660 = @func_721(%654) /* ty=Tensor[(15, 4, 7), float64] */;
  %661 = %657.0;
  (%658, %659, %660, %var_6172, %661, meta[relay.Constant][40] /* ty=Tensor[(2160), float64] */)
}

def @func_190(%var_153: Tensor[(7, 12, 13), float64], %var_161: Tensor[(7, 12, 13), float64], %var_168: Tensor[(2160), float64], %var_186: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) {
  %662 = cast(%var_153, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
  %663 = cosh(%662) /* ty=Tensor[(7, 12, 13), float64] */;
  %664 = cast(%var_161, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = cast(%var_168, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %669 = reshape(%668, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %670 = @func_141(%669) /* ty=Tensor[(16, 9, 15), float64] */;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %672 = reshape(%671, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %673 = @func_141(%672) /* ty=Tensor[(16, 9, 15), float64] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %675 = reshape(%674, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %676 = cast(%var_186, dtype="int64") /* ty=Tensor[(7, 12, 13), int64] */;
  %677 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%663, dtype="int64") /* ty=Tensor[(7, 12, 13), int64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %680 = greater_equal(%666, %667) /* ty=Tensor[(7, 12, 13), bool] */;
  %681 = @func_141(%675) /* ty=Tensor[(16, 9, 15), float64] */;
  %682 = multiply(%678, %679) /* ty=Tensor[(7, 12, 13), int64] */;
  (%680, %670, %var_168, %673, %681, %682)
}

def @func_3662(%var_3575: Tensor[(15, 1, 2), float32], %var_3609: Tensor[(98), bool]) -> (Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) {
  %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %684 = reshape(%683, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
  %685 = @func_2345(%684) /* ty=(Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) */;
  %686 = %685.1;
  %687 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, dtype="int32") /* ty=Tensor[(315), int32] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="int32") /* ty=Tensor[(15, 3, 7), int32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %691 = cast(%var_3609, dtype="bool") /* ty=Tensor[(98), bool] */;
  %692 = reshape(%691, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %693 = cast(%var_3575, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %694 = acosh(%693) /* ty=Tensor[(15, 1, 2), float32] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %696 = sqrt(%695) /* ty=Tensor[(15, 1, 2), float32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = cast(%696, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %702 = asinh(%701) /* ty=Tensor[(15, 1, 2), float64] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %704 = bitwise_xor(%689, %690) /* ty=Tensor[(15, 3, 7), int32] */;
  %705 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
  %706 = @func_1147(%692) /* ty=Tensor[(14, 7, 7), bool] */;
  %707 = greater(%699, %700) /* ty=Tensor[(15, ?, 2), bool] */;
  %708 = rsqrt(%703) /* ty=Tensor[(15, 1, 2), float32] */;
  (%704, %705, %706, %var_3609, %707, %708)
}

def @func_5984(%var_5958: Tensor[(6, 10, 10), float32], %var_5959: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), float32], Tensor[(120), uint8], Tensor[(108), float64]) {
  %709 = cast(%var_5959, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %710 = shape_of(%var_5958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_5958, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %713 = minimum(%711, %712) /* ty=Tensor[(6, 10, 10), float32] */;
  %714 = cast(%var_5958, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %718 = cast(meta[relay.Constant][42] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %719 = reshape(%718, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float64] */;
  %720 = @func_4447(%719) /* ty=(Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) */;
  %721 = power(%716, %717) /* ty=Tensor[(6, 10, 10), float32] */;
  %722 = %720.0;
  (%721, %722, meta[relay.Constant][42] /* ty=Tensor[(108), float64] */)
}

def @func_3777() -> (Tensor[(120), uint8],) {
  %723 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %724 = %723.0;
  (%724,)
}

def @func_5637(%var_5632: Tensor[(4, 10, 4), float64]) -> Tensor[(4, 10, 4), float64] {
  %725 = cast(%var_5632, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
  asin(%725) /* ty=Tensor[(4, 10, 4), float64] */
}

def @func_2833() -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) {
  %726 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %727 = %726.0;
  %728 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 9, 5), bool] */, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %732 = left_shift(%730, %731) /* ty=Tensor[(12, 9, 5), uint8] */;
  %733 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  (%732, %733)
}

def @func_6342() -> Tensor[(120), uint8] {
  %734 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %734.0
}

def @func_5850() -> (Tensor[(12, 9, 5), bool],) {
  %735 = @func_5173() /* ty=Tensor[(12, 9, 5), bool] */;
  (%735,)
}

def @func_1536(%var_1530: Tensor[(1092), float64]) -> (Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) {
  %736 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %737 = cast(meta[relay.Constant][44] /* ty=Tensor[(360, 6), float64] */, dtype="float64") /* ty=Tensor[(360, 6), float64] */;
  %738 = reshape(%737, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %739 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %740 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %741 = @func_141(%738) /* ty=Tensor[(16, 9, 15), float64] */;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %743 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %744 = reshape(%739, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %745 = reshape(%740, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %746 = reshape(%742, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %747 = reshape(%743, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %748 = @func_190(%744, %745, %746, %747) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
  %749 = %736.2;
  %750 = %748.2;
  (%749, %741, meta[relay.Constant][44] /* ty=Tensor[(360, 6), float64] */, %750, %var_1530)
}

def @func_3036(%var_2987: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), float64]) {
  %751 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %752 = cast(%var_2987, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %756 = cast(%var_2987, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %757 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%751, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %760 = floor_mod(%754, %755) /* ty=Tensor[(12, 9, 5), float32] */;
  %761 = power(%758, %759) /* ty=Tensor[(12, 9, 5), float64] */;
  (%760, %761)
}

def @func_4679(%var_4675: Tensor[(168), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) {
  %762 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %763 = cast(%var_4675, dtype="float64") /* ty=Tensor[(168), float64] */;
  %764 = reshape(%763, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
  %765 = @func_3290(%764) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) */;
  %766 = %762.2;
  %767 = %765.2;
  (%766, %767, %var_4675)
}

def @func_1041() -> (Tensor[(12, 9, 5), bool],) {
  %768 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  (%768,)
}

def @func_3479() -> Tensor[(12, 9, 5), bool] {
  %769 = @func_2273() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %769.0
}

def @func_5273() -> Tensor[(120), uint8] {
  @func_3419() /* ty=Tensor[(120), uint8] */
}

def @func_5047(%var_5036: Tensor[(540), bool]) -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) {
  %770 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %771 = cast(%var_5036, dtype="bool") /* ty=Tensor[(540), bool] */;
  %772 = reshape(%771, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %773 = @func_1445(%772) /* ty=(Tensor[(12, 9, 5), uint16],) */;
  %774 = %770.0;
  %775 = %773.0;
  (%774, %775, %var_5036)
}

def @func_5819(%var_5786: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) {
  %776 = cast(%var_5786, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %777 = reshape(%776, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %778 = @func_141(%777) /* ty=Tensor[(16, 9, 15), float64] */;
  %779 = cast(%778, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %780 = reshape(%779, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %781 = @func_4545(%780) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) */;
  %782 = cast(%var_5786, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %783 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
  %784 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
  %785 = %781.2;
  %786 = rsqrt(%782) /* ty=Tensor[(2160), float32] */;
  %787 = %783.1;
  (%784, %778, %785, %786, %787)
}

def @func_1678(%var_1661: Tensor[(54, 1), float32]) -> (Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) {
  %788 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %789 = cast(%var_1661, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %790 = cast(%var_1661, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %791 = reshape(%789, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %792 = reshape(%790, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %793 = @func_1298(%791, %792) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %794 = %793.0;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %796 = %788.1;
  %797 = atan(%795) /* ty=Tensor[(3, 9, 2), float32] */;
  (%796, %var_1661, %797)
}

def @func_8337(%var_8318: Tensor[(7, 14), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(120), uint8]) {
  %798 = @func_2273() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %799 = cast(%var_8318, dtype="bool") /* ty=Tensor[(7, 14), bool] */;
  %800 = reshape(%799, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %801 = %798.0;
  %802 = @func_1147(%800) /* ty=Tensor[(14, 7, 7), bool] */;
  %803 = @func_5773() /* ty=Tensor[(120), uint8] */;
  (%801, %802, %var_8318, %803)
}

def @func_1598(%var_1574: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
  %804 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %805 = shape_of(%var_1574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_1574, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %808 = multiply(%806, %807) /* ty=Tensor[(7, 15, 16), float64] */;
  (%808,)
}

def @func_7006() -> Tensor[(4, 10, 13), float32] {
  %809 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 13), float32] */;
  sinh(%809) /* ty=Tensor[(4, 10, 13), float32] */
}

def @func_8277() -> Tensor[(12, 9, 5), bool] {
  %810 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
  %810.2
}

def @func_1201() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
  %811 = cast(meta[relay.Constant][47] /* ty=Tensor[(120), uint8] */, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %812 = reshape(%811, newshape=[120]) /* ty=Tensor[(120), uint8] */;
  %813 = @func_1134(%812) /* ty=(Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) */;
  %814 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %815 = %813.0;
  (%814, %815, meta[relay.Constant][47] /* ty=Tensor[(120), uint8] */)
}

def @func_1494() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %816 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %817 = %816.0;
  %818 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  (%817, %818)
}

def @func_541(%var_526: Tensor[(3, 5, 7), int16]) -> Tensor[(3, 5, 7), int16] {
  %819 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 5, 7), int16] */, dtype="int16") /* ty=Tensor[(3, 5, 7), int16] */;
  %820 = shape_of(%var_526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_526, dtype="int16") /* ty=Tensor[(3, 5, 7), int16] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%821, %822) /* ty=Tensor[(3, 5, 7), int16] */
}

def @func_7603() -> (Tensor[(12, 9, 5), bool],) {
  %823 = @func_5730() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %824 = %823.0;
  (%824,)
}

def @func_1445(%var_1423: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint16],) {
  %825 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %826 = cast(%var_1423, dtype="uint16") /* ty=Tensor[(12, 9, 5), uint16] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="uint16") /* ty=Tensor[(12, 9, 5), uint16] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %830 = multiply(%828, %829) /* ty=Tensor[(12, 9, 5), uint16] */;
  (%830,)
}

def @func_2813() -> Tensor[(2, 14, 6), float64] {
  %831 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
  %832 = %831.0;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  sinh(%833) /* ty=Tensor[(2, 14, 6), float64] */
}

def @func_1825(%var_1770: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) {
  %834 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %835 = %834.0;
  %836 = cast(%var_1770, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %840 = cast(%var_1770, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %841 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%835, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %844 = cast(meta[relay.Constant][49] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %845 = reshape(%844, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %846 = @func_1598(%845) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %847 = cast(meta[relay.Constant][50] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %848 = reshape(%847, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %849 = @func_1678(%848) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
  %850 = %849.1;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %852 = cast(%850, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %853 = reshape(%851, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %854 = reshape(%852, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %855 = @func_1298(%853, %854) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %856 = maximum(%838, %839) /* ty=Tensor[(12, 9, 5), uint8] */;
  %857 = not_equal(%842, %843) /* ty=Tensor[(12, 9, 5), bool] */;
  %858 = %846.0;
  %859 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %860 = %855.0;
  (%856, %857, %858, meta[relay.Constant][49] /* ty=Tensor[(1680), float64] */, %859, %850, meta[relay.Constant][50] /* ty=Tensor[(54), float32] */, %860)
}

def @func_4019() -> Tensor[(12, 9, 5), bool] {
  %861 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %861.0
}

def @func_5355() -> Tensor[(120), uint8] {
  %862 = @func_3777() /* ty=(Tensor[(120), uint8],) */;
  %862.0
}

def @func_4447(%var_4422: Tensor[(9, 2, 6), float64]) -> (Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) {
  %863 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %864 = %863.0;
  %865 = cast(%var_4422, dtype="uint64") /* ty=Tensor[(9, 2, 6), uint64] */;
  %866 = shape_of(%864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%864, dtype="uint64") /* ty=Tensor[(9, 2, 6), uint64] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %869 = @func_3419() /* ty=Tensor[(120), uint8] */;
  %870 = bitwise_xor(%867, %868) /* ty=Tensor[(9, 2, 6), uint64] */;
  (%869, %870)
}

def @func_2725() -> Tensor[(120), uint8] {
  %871 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %871.0
}

def @func_7536(%var_7496: Tensor[(1092), float64], %var_7504: Tensor[(3, 36), float64], %var_7528: Tensor[(105, 1), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 78), int8], Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(3, 36), float64], Tensor[(105), int16], Tensor[(105, 1), int16]) {
  %872 = cast(%var_7496, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %873 = cast(%var_7496, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %874 = reshape(%872, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %875 = reshape(%873, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %876 = @func_2891(%874, %875) /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) */;
  %877 = cast(%var_7504, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %878 = reshape(%877, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %879 = @func_4952(%878) /* ty=(Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) */;
  %880 = cast(%var_7528, dtype="int16") /* ty=Tensor[(105, 1), int16] */;
  %881 = reshape(%880, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %882 = @func_2581(%881) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %883 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %884 = %876.3;
  %885 = %879.4;
  %886 = %882.2;
  (%883, %884, %var_7496, %885, %var_7504, %886, %var_7528)
}

def @func_932(%var_918: Tensor[(14, 78), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) {
  %887 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %888 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %889 = cast(meta[relay.Constant][51] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %890 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %891 = reshape(%887, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %892 = reshape(%888, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %893 = reshape(%889, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %894 = reshape(%890, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %895 = @func_190(%891, %892, %893, %894) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
  %896 = %895.3;
  %897 = cast(meta[relay.Constant][51] /* ty=Tensor[(2160), float64] */, dtype="uint16") /* ty=Tensor[(2160), uint16] */;
  %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%896, dtype="uint16") /* ty=Tensor[(16, 9, 15), uint16] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %901 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %902 = logical_xor(%899, %900) /* ty=Tensor[(16, 9, 15), uint16] */;
  (%901, %var_918, %902)
}

def @func_3419() -> Tensor[(120), uint8] {
  %903 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %903.0
}

def @func_7690() -> Tensor[(1092), float64] {
  %904 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
  %904.0
}

def @func_5446() -> Tensor[(12, 9, 5), bool] {
  %905 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %905.0
}

def @func_4220() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) {
  %906 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %907 = cast(meta[relay.Constant][52] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %908 = reshape(%907, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %909 = @func_2581(%908) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %910 = cast(meta[relay.Constant][53] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %911 = cast(meta[relay.Constant][53] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %912 = reshape(%910, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float32] */;
  %913 = reshape(%911, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float32] */;
  %914 = @func_2453(%912, %913) /* ty=(Tensor[(2, 12, 10), uint16],) */;
  %915 = %906.0;
  %916 = %909.1;
  %917 = %914.0;
  (%915, %916, meta[relay.Constant][52] /* ty=Tensor[(105), int16] */, %917, meta[relay.Constant][53] /* ty=Tensor[(240), float32] */)
}

def @func_7109() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
  %918 = @func_5173() /* ty=Tensor[(12, 9, 5), bool] */;
  %919 = @func_5446() /* ty=Tensor[(12, 9, 5), bool] */;
  %920 = @func_5273() /* ty=Tensor[(120), uint8] */;
  (%918, %919, %920)
}

def @func_6251(%var_6226: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float32], Tensor[(1, 105), int16], Tensor[(120), uint8]) {
  %921 = @func_5488() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %922 = cast(%var_6226, dtype="int16") /* ty=Tensor[(1, 105), int16] */;
  %923 = reshape(%922, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %924 = @func_2524(%923) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %925 = @func_5002() /* ty=(Tensor[(120), uint8],) */;
  %926 = %921.0;
  %927 = %924.6;
  %928 = %925.0;
  (%926, %927, %var_6226, %928)
}

def @func_3290(%var_3256: Tensor[(2, 14, 6), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) {
  %929 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %930 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %931 = cast(%var_3256, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %935 = bitwise_or(%933, %934) /* ty=Tensor[(2, 14, 6), int8] */;
  %936 = cast(%930, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%935, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %940 = cast(%var_3256, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %941 = %929.0;
  %942 = multiply(%938, %939) /* ty=Tensor[(2, 14, 6), int32] */;
  %943 = cosh(%940) /* ty=Tensor[(2, 14, 6), float64] */;
  (%941, %942, %943)
}

def @func_3147() -> (Tensor[(120), uint8],) {
  %944 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %945 = %944.0;
  (%945,)
}

def @func_5173() -> Tensor[(12, 9, 5), bool] {
  %946 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %946.0
}

def @func_3209() -> (Tensor[(12, 9, 5), bool],) {
  %947 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %948 = %947.0;
  (%948,)
}

def @func_6471(%var_6401: Tensor[(10, 1, 2), bool], %var_6402: Tensor[(10, 1, 2), bool], %var_6429: Tensor[(21, 5), int16], %var_6436: Tensor[(1, 126), int8], %var_6438: Tensor[(54), float32]) -> (Tensor[(10, ?, 2), bool], Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), float64], Tensor[(21, 5), int16], Tensor[(9, 14, 5), bool], Tensor[(1, 126), int8], Tensor[(70, 9), int8], Tensor[(54), float32]) {
  %949 = cast(%var_6402, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %950 = shape_of(%var_6401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_6401, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %953 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %954 = cast(%var_6429, dtype="int16") /* ty=Tensor[(21, 5), int16] */;
  %955 = reshape(%954, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %956 = @func_2581(%955) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %957 = cast(%var_6436, dtype="int8") /* ty=Tensor[(1, 126), int8] */;
  %958 = cast(meta[relay.Constant][54] /* ty=Tensor[(70, 9), int8] */, dtype="int8") /* ty=Tensor[(70, 9), int8] */;
  %959 = cast(%var_6438, dtype="float32") /* ty=Tensor[(54), float32] */;
  %960 = cast(meta[relay.Constant][54] /* ty=Tensor[(70, 9), int8] */, dtype="int8") /* ty=Tensor[(70, 9), int8] */;
  %961 = reshape(%957, newshape=[9, 14, 1]) /* ty=Tensor[(9, 14, 1), int8] */;
  %962 = reshape(%958, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), int8] */;
  %963 = reshape(%959, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %964 = reshape(%960, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), int8] */;
  %965 = @func_1736(%961, %962, %963, %964) /* ty=(Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) */;
  %966 = logical_and(%951, %952) /* ty=Tensor[(10, ?, 2), bool] */;
  %967 = %953.0;
  %968 = %956.1;
  %969 = %965.1;
  (%966, %967, %968, %var_6429, %969, %var_6436, meta[relay.Constant][54] /* ty=Tensor[(70, 9), int8] */, %var_6438)
}

def @func_4323() -> Tensor[(12, 9, 5), bool] {
  @func_896() /* ty=Tensor[(12, 9, 5), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2010(%var_1973: Tensor[(2, 840), float64], %var_2001: Tensor[(2, 840), uint64], %var_2006: Tensor[(2, 840), uint64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) {
  %0 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %3 = reshape(%2, newshape=[120]) /* ty=Tensor[(120), uint8] */;
  %4 = @func_1134(%3) /* ty=(Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(98), bool] */, dtype="bool") /* ty=Tensor[(98), bool] */;
  %6 = reshape(%5, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %7 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %9 = reshape(%8, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %10 = @func_1598(%9) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %12 = reshape(%11, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 840), float64] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %14 = sqrt(%13) /* ty=Tensor[(2, 840), float32] */;
  %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 840), float32] */, dtype="uint64") /* ty=Tensor[(2, 840), uint64] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(%14, dtype="uint64") /* ty=Tensor[(2, 840), uint64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %19 = left_shift(%17, %18) /* ty=Tensor[(2, 840), uint64] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 840), float64] */, dtype="uint32") /* ty=Tensor[(2, 840), uint32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(2), int32] */;
  %22 = cast(%19, dtype="uint32") /* ty=Tensor[(2, 840), uint32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %24 = cast(%14, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %25 = log2(%24) /* ty=Tensor[(2, 840), float64] */;
  %26 = cast(%var_1973, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(2), int32] */;
  %28 = cast(%25, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %30 = cast(%19, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %31 = shape_of(%25, dtype="int32") /* ty=Tensor[(2), int32] */;
  %32 = cast(%25, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %34 = cast(%19, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %35 = cast(%var_2001, dtype="int16") /* ty=Tensor[(2, 840), int16] */;
  %36 = shape_of(%19, dtype="int32") /* ty=Tensor[(2), int32] */;
  %37 = cast(%19, dtype="int16") /* ty=Tensor[(2, 840), int16] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %39 = cast(%var_2006, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %40 = shape_of(%19, dtype="int32") /* ty=Tensor[(2), int32] */;
  %41 = cast(%19, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %43 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %44 = %4.4;
  %45 = @func_1147(%6) /* ty=Tensor[(14, 7, 7), bool] */;
  %46 = %7.0;
  %47 = %10.0;
  %48 = @func_541(%12) /* ty=Tensor[(3, 5, 7), int16] */;
  %49 = add(%22, %23) /* ty=Tensor[(2, 840), uint32] */;
  %50 = logical_or(%28, %29) /* ty=Tensor[(2, 840), bool] */;
  %51 = floor_divide(%32, %33) /* ty=Tensor[(2, 840), float32] */;
  %52 = exp(%34) /* ty=Tensor[(2, 840), float64] */;
  %53 = minimum(%37, %38) /* ty=Tensor[(2, 840), int16] */;
  %54 = equal(%41, %42) /* ty=Tensor[(2, 840), bool] */;
  (%43, %1, %44, %45, meta[relay.Constant][0] /* ty=Tensor[(98), bool] */, %46, %47, %48, meta[relay.Constant][2] /* ty=Tensor[(105), int16] */, %49, %50, %51, %52, %53, %54)
}

def @func_7001() -> (Tensor[(12, 9, 5), bool],) {
  @func_6999() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_3666(%var_3664: Tensor[(15, 1, 2), float32], %var_3665: Tensor[(98), bool]) -> (Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) {
  @func_3662(%var_3664, %var_3665) /* ty=(Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) */
}

def @func_2814() -> Tensor[(2, 14, 6), float64] {
  %58 = fn () -> Tensor[(2, 14, 6), float64] {
    %55 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
    %56 = %55.0;
    %57 = cast(%56, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
    sinh(%57) /* ty=Tensor[(2, 14, 6), float64] */
  };
  %58() /* ty=Tensor[(2, 14, 6), float64] */
}

def @func_3149() -> (Tensor[(120), uint8],) {
  @func_3147() /* ty=(Tensor[(120), uint8],) */
}

def @func_960(%var_959: int16) -> Tensor[(16, 12, 8), int16] {
  %61 = fn (%var_948: int16) -> Tensor[(16, 12, 8), int16] {
    %59 = cast(%var_948, dtype="int16") /* ty=int16 */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 8), int16] */, dtype="int16") /* ty=Tensor[(16, 12, 8), int16] */;
    minimum(%59, %60) /* ty=Tensor[(16, 12, 8), int16] */
  };
  %61(%var_959) /* ty=Tensor[(16, 12, 8), int16] */
}

def @func_6146(%var_6144: Tensor[(84, 20), float64], %var_6145: Tensor[(84, 20), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) {
  @func_6142(%var_6144, %var_6145) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) */
}

def @func_1342() -> (Tensor[(120), uint8],) {
  %62 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %63 = %62.2;
  (%63,)
}

def @func_7016() -> (Tensor[(120), uint8],) {
  %64 = @func_5002() /* ty=(Tensor[(120), uint8],) */;
  %65 = %64.0;
  (%65,)
}

def @func_6785() -> Tensor[(12, 9, 5), bool] {
  @func_3479() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_5447() -> Tensor[(12, 9, 5), bool] {
  %67 = fn () -> Tensor[(12, 9, 5), bool] {
    %66 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %66.0
  };
  %67() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_4019() -> Tensor[(12, 9, 5), bool] {
  %68 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %68.0
}

def @func_541(%var_526: Tensor[(3, 5, 7), int16]) -> Tensor[(3, 5, 7), int16] {
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 5, 7), int16] */, dtype="int16") /* ty=Tensor[(3, 5, 7), int16] */;
  %70 = shape_of(%var_526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_526, dtype="int16") /* ty=Tensor[(3, 5, 7), int16] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%71, %72) /* ty=Tensor[(3, 5, 7), int16] */
}

def @func_6935() -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) {
  %73 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %75 = reshape(%74, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %76 = @func_5047(%75) /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) */;
  %77 = %73.0;
  %78 = %76.0;
  (%77, %78, meta[relay.Constant][6] /* ty=Tensor[(540), bool] */)
}

def @func_4220() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) {
  %79 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %81 = reshape(%80, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %82 = @func_2581(%81) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %85 = reshape(%83, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float32] */;
  %86 = reshape(%84, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), float32] */;
  %87 = @func_2453(%85, %86) /* ty=(Tensor[(2, 12, 10), uint16],) */;
  %88 = %79.0;
  %89 = %82.1;
  %90 = %87.0;
  (%88, %89, meta[relay.Constant][7] /* ty=Tensor[(105), int16] */, %90, meta[relay.Constant][8] /* ty=Tensor[(240), float32] */)
}

def @func_4681(%var_4680: Tensor[(168), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) {
  %97 = fn (%var_4675: Tensor[(168), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) {
    %91 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
    %92 = cast(%var_4675, dtype="float64") /* ty=Tensor[(168), float64] */;
    %93 = reshape(%92, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
    %94 = @func_3290(%93) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) */;
    %95 = %91.2;
    %96 = %94.2;
    (%95, %96, %var_4675)
  };
  %97(%var_4680) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */
}

def @func_2690(%var_2684: Tensor[(2160), float64]) -> (Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(16, 9, 15), float64], Tensor[(2160), float64]) {
  %98 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %101 = cast(%99, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %102 = reshape(%100, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %103 = reshape(%101, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %104 = @func_371(%102, %103) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %105 = cast(%var_2684, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %106 = reshape(%105, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %107 = %104.0;
  %108 = @func_141(%106) /* ty=Tensor[(16, 9, 15), float64] */;
  (%99, %107, %108, %var_2684)
}

def @func_5047(%var_5036: Tensor[(540), bool]) -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) {
  %109 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %110 = cast(%var_5036, dtype="bool") /* ty=Tensor[(540), bool] */;
  %111 = reshape(%110, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %112 = @func_1445(%111) /* ty=(Tensor[(12, 9, 5), uint16],) */;
  %113 = %109.0;
  %114 = %112.0;
  (%113, %114, %var_5036)
}

def @func_5489() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %119 = fn () -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
    %115 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %116 = @func_3541() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
    %117 = %115.0;
    %118 = %116.1;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */
}

def @func_5355() -> Tensor[(120), uint8] {
  %120 = @func_3777() /* ty=(Tensor[(120), uint8],) */;
  %120.0
}

def @func_5691(%var_5689: Tensor[(13, 11, 3), uint8]) -> (Tensor[(13, 11, 3), uint8],) {
  @func_5688(%var_5689) /* ty=(Tensor[(13, 11, 3), uint8],) */
}

def @func_7140(%var_7127: Tensor[(5, 14, 5), int32]) -> (Tensor[(5, 14, 5), int32], Tensor[(5, 14, 5), float32]) {
  %121 = cast(%var_7127, dtype="int32") /* ty=Tensor[(5, 14, 5), int32] */;
  %122 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(5, 14, 5), int32] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %125 = cast(%var_7127, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %126 = bitwise_xor(%123, %124) /* ty=Tensor[(5, 14, 5), int32] */;
  %127 = tan(%125) /* ty=Tensor[(5, 14, 5), float32] */;
  (%126, %127)
}

def @func_6885() -> (Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
  %128 = @func_4806() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) */;
  %129 = @func_6389() /* ty=(Tensor[(120), uint8],) */;
  %130 = %128.2;
  %131 = %129.0;
  %132 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
  (%130, %131, %132)
}

def @func_8432(%var_8430: Tensor[(1680), float64]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(1680), float64], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  @func_8429(%var_8430) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(1680), float64], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) */
}

def @func_1741(%var_1737: Tensor[(9, 14, 1), int8], %var_1738: Tensor[(9, 14, 5), int8], %var_1739: Tensor[(54), float32], %var_1740: Tensor[(9, 14, 5), int8]) -> (Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) {
  %154 = fn (%var_1703: Tensor[(9, 14, 1), int8], %var_1704: Tensor[(9, 14, 5), int8], %var_1711: Tensor[(54), float32], %var_1717: Tensor[(9, 14, 5), int8]) -> (Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) {
    %133 = cast(%var_1703, dtype="int8") /* ty=Tensor[(9, 14, 1), int8] */;
    %134 = cast(%var_1704, dtype="int8") /* ty=Tensor[(9, 14, 5), int8] */;
    %135 = cast(%var_1717, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
    %136 = shape_of(%var_1704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%var_1704, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %139 = cast(%var_1711, dtype="float32") /* ty=Tensor[(54), float32] */;
    %140 = reshape(%139, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
    %141 = @func_1678(%140) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
    %142 = cast(%var_1711, dtype="float32") /* ty=Tensor[(54), float32] */;
    %143 = reshape(%142, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
    %144 = @func_1678(%143) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
    %145 = %144.2;
    %146 = cast(%var_1711, dtype="int8") /* ty=Tensor[(54), int8] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%145, dtype="int8") /* ty=Tensor[(3, 9, 2), int8] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %150 = multiply(%133, %134) /* ty=Tensor[(9, 14, 5), int8] */;
    %151 = not_equal(%137, %138) /* ty=Tensor[(9, 14, 5), bool] */;
    %152 = %141.1;
    %153 = bitwise_or(%148, %149) /* ty=Tensor[(3, 9, 2), int8] */;
    (%150, %151, %152, %153)
  };
  %154(%var_1737, %var_1738, %var_1739, %var_1740) /* ty=(Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) */
}

def @func_6748(%var_6746: Tensor[(9, 2, 6), float64]) -> (Tensor[(9, 2, 6), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  @func_6745(%var_6746) /* ty=(Tensor[(9, 2, 6), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */
}

def @func_2961() -> (Tensor[(120), uint8],) {
  %156 = fn () -> (Tensor[(120), uint8],) {
    %155 = @func_2725() /* ty=Tensor[(120), uint8] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(120), uint8],) */
}

def @func_2287() -> (Tensor[(12, 9, 5), bool],) {
  %159 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %157 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
    %158 = %157.1;
    (%158,)
  };
  %159() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_5174() -> Tensor[(12, 9, 5), bool] {
  %161 = fn () -> Tensor[(12, 9, 5), bool] {
    %160 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %160.0
  };
  %161() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_5739(%var_5735: Tensor[(14, 9, 3), bool]) -> Tensor[(14, 9, 3), bool] {
  %162 = cast(%var_5735, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %163 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(14, 9, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 9, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%164, %165) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_3290(%var_3256: Tensor[(2, 14, 6), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) {
  %166 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %167 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %168 = cast(%var_3256, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %172 = bitwise_or(%170, %171) /* ty=Tensor[(2, 14, 6), int8] */;
  %173 = cast(%167, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %177 = cast(%var_3256, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %178 = %166.0;
  %179 = multiply(%175, %176) /* ty=Tensor[(2, 14, 6), int32] */;
  %180 = cosh(%177) /* ty=Tensor[(2, 14, 6), float64] */;
  (%178, %179, %180)
}

def @func_6599() -> (Tensor[(12, 9, 5), bool],) {
  %182 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %181 = @func_4019() /* ty=Tensor[(12, 9, 5), bool] */;
    (%181,)
  };
  %182() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_5939() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  @func_5937() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) */
}

def @func_8091(%var_8037: Tensor[(12, 9, 5), bool], %var_8060: Tensor[(420), float64], %var_8070: Tensor[(98), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(3, 5, 7), int16], Tensor[(2160), float64], Tensor[(120), uint8], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(420), float64], Tensor[(14, 78), float64], Tensor[(98), bool], Tensor[(1, 189), float64]) {
  %183 = @func_7809() /* ty=Tensor[(12, 9, 5), bool] */;
  %184 = cast(%var_8037, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(meta[relay.Constant][11] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %189 = reshape(%188, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %190 = @func_4545(%189) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) */;
  %191 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %192 = cast(%var_8060, dtype="float64") /* ty=Tensor[(420), float64] */;
  %193 = reshape(%192, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %194 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %195 = @func_721(%193) /* ty=Tensor[(15, 4, 7), float64] */;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(15, 4, 7), float64] */;
  %197 = cast(%var_8070, dtype="bool") /* ty=Tensor[(98), bool] */;
  %198 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 189), float64] */, dtype="float64") /* ty=Tensor[(1, 189), float64] */;
  %199 = reshape(%194, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %200 = reshape(%196, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %201 = reshape(%197, newshape=[98]) /* ty=Tensor[(98), bool] */;
  %202 = reshape(%198, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float64] */;
  %203 = @func_4174(%199, %200, %201, %202) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 189), float64] */, dtype="float32") /* ty=Tensor[(1, 189), float32] */;
  %205 = sqrt(%204) /* ty=Tensor[(1, 189), float32] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(1, 189), float64] */;
  %207 = greater(%186, %187) /* ty=Tensor[(12, 9, 5), bool] */;
  %208 = %190.8;
  %209 = %191.0;
  %210 = %203.3;
  %211 = sigmoid(%206) /* ty=Tensor[(1, 189), float64] */;
  (%207, %208, meta[relay.Constant][11] /* ty=Tensor[(2160), float64] */, %209, %195, %var_8060, %210, meta[relay.Constant][12] /* ty=Tensor[(14, 78), float64] */, %var_8070, %211)
}

def @func_1448(%var_1446: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint16],) {
  @func_1445(%var_1446) /* ty=(Tensor[(12, 9, 5), uint16],) */
}

def @func_5623() -> Tensor[(120), uint8] {
  %212 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %212.0
}

def @func_2262() -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) {
  %220 = fn () -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) {
    %213 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 14, 1), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 1), bool] */;
    %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 14, 6), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
    %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 14, 1), bool] */, dtype="float32") /* ty=Tensor[(2, 14, 1), float32] */;
    %216 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
    %217 = logical_or(%213, %214) /* ty=Tensor[(2, 14, 6), bool] */;
    %218 = atan(%215) /* ty=Tensor[(2, 14, 1), float32] */;
    %219 = %216.2;
    (%217, %218, %219)
  };
  %220() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */
}

def @func_2527(%var_2525: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) {
  @func_2524(%var_2525) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */
}

def @func_3778() -> (Tensor[(120), uint8],) {
  %223 = fn () -> (Tensor[(120), uint8],) {
    %221 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
    %222 = %221.0;
    (%222,)
  };
  %223() /* ty=(Tensor[(120), uint8],) */
}

def @func_7655() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8]) {
  @func_7653() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8]) */
}

def @func_6659(%var_6657: Tensor[(21, 5), int16], %var_6658: Tensor[(1680), float64]) -> (Tensor[(120), uint8], Tensor[(3, 5, 7), int16], Tensor[(21, 5), int16], Tensor[(120), uint8], Tensor[(1680), float64]) {
  %235 = fn (%var_6632: Tensor[(21, 5), int16], %var_6650: Tensor[(1680), float64]) -> (Tensor[(120), uint8], Tensor[(3, 5, 7), int16], Tensor[(21, 5), int16], Tensor[(120), uint8], Tensor[(1680), float64]) {
    %224 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
    %225 = cast(%var_6632, dtype="int16") /* ty=Tensor[(21, 5), int16] */;
    %226 = reshape(%225, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
    %227 = cast(%var_6650, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %228 = cast(%var_6650, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %229 = reshape(%227, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
    %230 = reshape(%228, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
    %231 = @func_6142(%229, %230) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) */;
    %232 = %224.0;
    %233 = @func_541(%226) /* ty=Tensor[(3, 5, 7), int16] */;
    %234 = %231.1;
    (%232, %233, %var_6632, %234, %var_6650)
  };
  %235(%var_6657, %var_6658) /* ty=(Tensor[(120), uint8], Tensor[(3, 5, 7), int16], Tensor[(21, 5), int16], Tensor[(120), uint8], Tensor[(1680), float64]) */
}

def @func_6182(%var_6156: Tensor[(7, 10, 11), bool], %var_6157: Tensor[(7, 10, 11), bool], %var_6167: Tensor[(7, 10, 11), bool], %var_6172: Tensor[(420), float64]) -> (Tensor[(7, 10, 11), bool], Tensor[(7, 10, 11), uint32], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(12, 9, 5), bool], Tensor[(2160), float64]) {
  %236 = cast(%var_6157, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %237 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_6156, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = cast(%var_6167, dtype="uint32") /* ty=Tensor[(7, 10, 11), uint32] */;
  %241 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_6156, dtype="uint32") /* ty=Tensor[(7, 10, 11), uint32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %244 = cast(%var_6172, dtype="float64") /* ty=Tensor[(420), float64] */;
  %245 = reshape(%244, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %247 = reshape(%246, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %248 = @func_5819(%247) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) */;
  %249 = logical_and(%238, %239) /* ty=Tensor[(7, 10, 11), bool] */;
  %250 = minimum(%242, %243) /* ty=Tensor[(7, 10, 11), uint32] */;
  %251 = @func_721(%245) /* ty=Tensor[(15, 4, 7), float64] */;
  %252 = %248.0;
  (%249, %250, %251, %var_6172, %252, meta[relay.Constant][16] /* ty=Tensor[(2160), float64] */)
}

def @func_5731() -> (Tensor[(12, 9, 5), bool],) {
  %255 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %253 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %254 = %253.0;
    (%254,)
  };
  %255() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_8337(%var_8318: Tensor[(7, 14), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(120), uint8]) {
  %256 = @func_2273() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %257 = cast(%var_8318, dtype="bool") /* ty=Tensor[(7, 14), bool] */;
  %258 = reshape(%257, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %259 = %256.0;
  %260 = @func_1147(%258) /* ty=Tensor[(14, 7, 7), bool] */;
  %261 = @func_5773() /* ty=Tensor[(120), uint8] */;
  (%259, %260, %var_8318, %261)
}

def @func_6254(%var_6252: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float32], Tensor[(1, 105), int16], Tensor[(120), uint8]) {
  @func_6251(%var_6252) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float32], Tensor[(1, 105), int16], Tensor[(120), uint8]) */
}

def @func_4616() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) {
  %275 = fn () -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) {
    %262 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
    %263 = cast(meta[relay.Constant][17] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %264 = reshape(%263, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
    %265 = @func_3290(%264) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) */;
    %266 = @func_4385() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) */;
    %267 = @func_4060() /* ty=Tensor[(9, 2, 6), float64] */;
    %268 = cast(%267, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
    %269 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
    %270 = %262.1;
    %271 = %265.0;
    %272 = %266.1;
    %273 = exp(%268) /* ty=Tensor[(9, 2, 6), float64] */;
    %274 = %269.1;
    (%270, %271, meta[relay.Constant][17] /* ty=Tensor[(168), float64] */, %272, %273, %274)
  };
  %275() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */
}

def @func_4180(%var_4176: Tensor[(1092), float64], %var_4177: Tensor[(420), float64], %var_4178: Tensor[(98), bool], %var_4179: Tensor[(9, 3, 7), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) {
  @func_4174(%var_4176, %var_4177, %var_4178, %var_4179) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) */
}

def @func_1828(%var_1826: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) {
  @func_1825(%var_1826) /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) */
}

def @func_6999() -> (Tensor[(12, 9, 5), bool],) {
  %276 = @func_3209() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %277 = %276.0;
  (%277,)
}

def @func_1678(%var_1661: Tensor[(54, 1), float32]) -> (Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) {
  %278 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %279 = cast(%var_1661, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %280 = cast(%var_1661, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %281 = reshape(%279, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %282 = reshape(%280, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %283 = @func_1298(%281, %282) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %286 = %278.1;
  %287 = atan(%285) /* ty=Tensor[(3, 9, 2), float32] */;
  (%286, %var_1661, %287)
}

def @func_5537(%var_5490: Tensor[(8, 14, 5), float32], %var_5521: Tensor[(8, 14, 5), float64]) -> (Tensor[(8, 14, 5), float32], Tensor[(240), float32], Tensor[(8, 14, 5), float64], Tensor[(12, 9, 5), bool]) {
  %288 = cast(%var_5490, dtype="float32") /* ty=Tensor[(8, 14, 5), float32] */;
  %289 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
  %290 = cast(%var_5490, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %291 = log(%290) /* ty=Tensor[(8, 14, 5), float64] */;
  %292 = cast(%var_5521, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %297 = sqrt(%288) /* ty=Tensor[(8, 14, 5), float32] */;
  %298 = %289.4;
  %299 = mod(%294, %295) /* ty=Tensor[(8, 14, 5), float64] */;
  %300 = %296.1;
  (%297, %298, %299, %300)
}

def @func_4954(%var_4953: Tensor[(108), float64]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) {
  %331 = fn (%var_4926: Tensor[(108), float64]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) {
    %301 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
    %302 = cast(%301, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
    %303 = acos(%302) /* ty=Tensor[(12, 9, 5), float64] */;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
    %305 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
    %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
    %307 = reshape(%306, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %308 = @func_4679(%307) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
    %309 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
    %310 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 14), bool] */, dtype="bool") /* ty=Tensor[(7, 14), bool] */;
    %311 = reshape(%310, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
    %312 = cast(meta[relay.Constant][18] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
    %313 = reshape(%312, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %314 = @func_4679(%313) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
    %315 = @func_3209() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %316 = %315.0;
    %317 = cast(%316, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
    %318 = reshape(%317, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
    %319 = @func_1825(%318) /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) */;
    %320 = cast(%var_4926, dtype="float64") /* ty=Tensor[(108), float64] */;
    %321 = reshape(%320, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float64] */;
    %322 = @func_4447(%321) /* ty=(Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) */;
    %323 = asinh(%304) /* ty=Tensor[(12, 9, 5), float32] */;
    %324 = %305.5;
    %325 = %308.1;
    %326 = %309.0;
    %327 = @func_1147(%311) /* ty=Tensor[(14, 7, 7), bool] */;
    %328 = %314.2;
    %329 = %319.0;
    %330 = %322.0;
    (%323, %324, %325, meta[relay.Constant][18] /* ty=Tensor[(168, 1), float64] */, %326, %327, meta[relay.Constant][19] /* ty=Tensor[(7, 14), bool] */, %328, %316, %329, %330, %var_4926)
  };
  %331(%var_4953) /* ty=(Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) */
}

def @func_4386() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) {
  %340 = fn () -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) {
    %332 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
    %333 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
    %334 = cast(meta[relay.Constant][20] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %335 = reshape(%334, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
    %336 = @func_3918(%335) /* ty=(Tensor[(12, 9, 5), uint8],) */;
    %337 = %332.0;
    %338 = %333.1;
    %339 = %336.0;
    (%337, %338, %339, meta[relay.Constant][20] /* ty=Tensor[(540), float64] */)
  };
  %340() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(540), float64]) */
}

def @func_5274() -> Tensor[(120), uint8] {
  %341 = fn () -> Tensor[(120), uint8] {
    @func_3419() /* ty=Tensor[(120), uint8] */
  };
  %341() /* ty=Tensor[(120), uint8] */
}

def @func_375(%var_373: Tensor[(4, 3, 10), uint8], %var_374: Tensor[(4, 3, 10), uint8]) -> (Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) {
  @func_371(%var_373, %var_374) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */
}

def @func_7039() -> (Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(105), int16]) {
  %347 = fn () -> (Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(105), int16]) {
    %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
    %343 = reshape(%342, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
    %344 = @func_2524(%343) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
    %345 = @func_3419() /* ty=Tensor[(120), uint8] */;
    %346 = %344.1;
    (%345, %346, meta[relay.Constant][21] /* ty=Tensor[(105), int16] */)
  };
  %347() /* ty=(Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(105), int16]) */
}

def @func_721(%var_706: Tensor[(15, 4, 7), float64]) -> Tensor[(15, 4, 7), float64] {
  %348 = cast(%var_706, dtype="float64") /* ty=Tensor[(15, 4, 7), float64] */;
  cos(%348) /* ty=Tensor[(15, 4, 7), float64] */
}

def @func_6318() -> (Tensor[(120), uint8],) {
  %349 = @func_3419() /* ty=Tensor[(120), uint8] */;
  (%349,)
}

def @func_5002() -> (Tensor[(120), uint8],) {
  %350 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %351 = %350.0;
  (%351,)
}

def @func_5688(%var_5680: Tensor[(13, 11, 3), uint8]) -> (Tensor[(13, 11, 3), uint8],) {
  %352 = cast(meta[relay.Constant][22] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %353 = cast(%var_5680, dtype="uint8") /* ty=Tensor[(13, 11, 3), uint8] */;
  %354 = bitwise_and(%352, %353) /* ty=Tensor[(13, 11, 3), uint8] */;
  (%354,)
}

def @func_8193() -> (Tensor[(12, 9, 5), bool],) {
  %357 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %355 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %356 = %355.0;
    (%356,)
  };
  %357() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_5309() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint16]) {
  %364 = fn () -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint16]) {
    %358 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %359 = %358.0;
    %360 = cast(%359, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
    %361 = reshape(%360, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
    %362 = @func_1445(%361) /* ty=(Tensor[(12, 9, 5), uint16],) */;
    %363 = %362.0;
    (%359, %363)
  };
  %364() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint16]) */
}

def @func_7691() -> Tensor[(1092), float64] {
  %366 = fn () -> Tensor[(1092), float64] {
    %365 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
    %365.0
  };
  %366() /* ty=Tensor[(1092), float64] */
}

def @func_2132() -> Tensor[(12, 9, 5), float64] {
  @func_2130() /* ty=Tensor[(12, 9, 5), float64] */
}

def @func_2725() -> Tensor[(120), uint8] {
  %367 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %367.0
}

def @func_4738(%var_4736: int16) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 12, 8), int16], int16) {
  @func_4735(%var_4736) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(16, 12, 8), int16], int16) */
}

def @func_5821(%var_5820: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) {
  %380 = fn (%var_5786: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) {
    %368 = cast(%var_5786, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %369 = reshape(%368, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
    %370 = @func_141(%369) /* ty=Tensor[(16, 9, 15), float64] */;
    %371 = cast(%370, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %372 = reshape(%371, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %373 = @func_4545(%372) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) */;
    %374 = cast(%var_5786, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %375 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
    %376 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
    %377 = %373.2;
    %378 = rsqrt(%374) /* ty=Tensor[(2160), float32] */;
    %379 = %375.1;
    (%376, %370, %377, %378, %379)
  };
  %380(%var_5820) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(16, 9, 15), float64], Tensor[(3, 9, 2), float32], Tensor[(2160), float32], Tensor[(12, 9, 5), float64]) */
}

def @func_5750() -> (Tensor[(12, 9, 5), bool],) {
  %381 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %382 = %381.0;
  (%382,)
}

def @func_3480() -> Tensor[(12, 9, 5), bool] {
  %384 = fn () -> Tensor[(12, 9, 5), bool] {
    %383 = @func_2273() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %383.0
  };
  %384() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_7810() -> Tensor[(12, 9, 5), bool] {
  %386 = fn () -> Tensor[(12, 9, 5), bool] {
    %385 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %385.0
  };
  %386() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_5752() -> (Tensor[(12, 9, 5), bool],) {
  @func_5750() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_5937() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  %387 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
  %388 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %389 = cast(meta[relay.Constant][23] /* ty=Tensor[(378), bool] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %390 = reshape(%389, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), bool] */;
  %391 = %387.0;
  %392 = %388.0;
  %393 = @func_5739(%390) /* ty=Tensor[(14, 9, 3), bool] */;
  (%391, %392, %393, meta[relay.Constant][23] /* ty=Tensor[(378), bool] */)
}

def @func_935(%var_933: Tensor[(14, 78), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) {
  @func_932(%var_933) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) */
}

def @func_3753(%var_3751: Tensor[(105), int16], %var_3752: Tensor[(3, 5, 7), int16]) -> (Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) {
  @func_3749(%var_3751, %var_3752) /* ty=(Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) */
}

def @func_8429(%var_8418: Tensor[(1680), float64]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(1680), float64], Tensor[(14, 9, 3), bool], Tensor[(378), bool]) {
  %394 = cast(%var_8418, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %395 = cast(%var_8418, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %396 = reshape(%394, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %397 = reshape(%395, newshape=[84, 20]) /* ty=Tensor[(84, 20), float64] */;
  %398 = @func_6142(%396, %397) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) */;
  %399 = cast(meta[relay.Constant][24] /* ty=Tensor[(378), bool] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %400 = reshape(%399, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), bool] */;
  %401 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %402 = %398.0;
  %403 = @func_5739(%400) /* ty=Tensor[(14, 9, 3), bool] */;
  (%401, %402, %var_8418, %403, meta[relay.Constant][24] /* ty=Tensor[(378), bool] */)
}

def @func_4806() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) {
  %404 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %406 = cast(meta[relay.Constant][25] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %407 = reshape(%405, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %408 = reshape(%406, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %409 = @func_2891(%407, %408) /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) */;
  %410 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %411 = %404.0;
  %412 = %409.1;
  %413 = @func_4060() /* ty=Tensor[(9, 2, 6), float64] */;
  %414 = %410.1;
  (%411, %412, meta[relay.Constant][25] /* ty=Tensor[(1092), float64] */, %413, %414)
}

def @func_4174(%var_4116: Tensor[(1092), float64], %var_4122: Tensor[(420), float64], %var_4152: Tensor[(98), bool], %var_4160: Tensor[(9, 3, 7), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(1092), bool], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(7, 15, 16), float64], Tensor[(12, 140), float64], Tensor[(2, 14, 6), float64], Tensor[(15, ?, 2), bool], Tensor[(30), float32], Tensor[(98), bool], Tensor[(9, 3, 7), int8], Tensor[(12, 9, 5), bool]) {
  %415 = cast(meta[relay.Constant][26] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %416 = reshape(%415, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %417 = @func_932(%416) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) */;
  %418 = cast(%var_4116, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %419 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1092), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %420 = cast(meta[relay.Constant][26] /* ty=Tensor[(1092), float64] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?), bool] */;
  %422 = cast(%var_4122, dtype="float64") /* ty=Tensor[(420), float64] */;
  %423 = reshape(%422, newshape=[15, 4, 7]) /* ty=Tensor[(15, 4, 7), float64] */;
  %424 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %425 = reshape(%424, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %426 = @func_1598(%425) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %427 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %428 = cast(%var_4152, dtype="bool") /* ty=Tensor[(98), bool] */;
  %429 = reshape(%427, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %430 = reshape(%428, newshape=[98]) /* ty=Tensor[(98), bool] */;
  %431 = @func_3662(%429, %430) /* ty=(Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) */;
  %432 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %433 = acos(%432) /* ty=Tensor[(9, 3, 7), float64] */;
  %434 = cast(%var_4160, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %438 = %417.0;
  %439 = not_equal(%420, %421) /* ty=Tensor[(1092), bool] */;
  %440 = @func_721(%423) /* ty=Tensor[(15, 4, 7), float64] */;
  %441 = %426.0;
  %442 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %443 = %431.4;
  %444 = bitwise_or(%436, %437) /* ty=Tensor[(9, 3, 7), int8] */;
  %445 = @func_4019() /* ty=Tensor[(12, 9, 5), bool] */;
  (%438, %439, %440, %var_4122, %441, meta[relay.Constant][27] /* ty=Tensor[(12, 140), float64] */, %442, %443, meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, %var_4152, %444, %445)
}

def @func_2033() -> (Tensor[(12, 9, 5), bool],) {
  %448 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %446 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
    %447 = %446.0;
    (%447,)
  };
  %448() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_6937() -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) {
  @func_6935() /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) */
}

def @func_8340(%var_8338: Tensor[(7, 14), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(120), uint8]) {
  @func_8337(%var_8338) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(120), uint8]) */
}

def @func_5541(%var_5539: Tensor[(8, 14, 5), float32], %var_5540: Tensor[(8, 14, 5), float64]) -> (Tensor[(8, 14, 5), float32], Tensor[(240), float32], Tensor[(8, 14, 5), float64], Tensor[(12, 9, 5), bool]) {
  @func_5537(%var_5539, %var_5540) /* ty=(Tensor[(8, 14, 5), float32], Tensor[(240), float32], Tensor[(8, 14, 5), float64], Tensor[(12, 9, 5), bool]) */
}

def @func_7223(%var_7222: Tensor[(2, 14, 6), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), int8], Tensor[(12, 9, 5), bool]) {
  %459 = fn (%var_7200: Tensor[(2, 14, 6), float64]) -> (Tensor[(120), uint8], Tensor[(2, 14, 6), int8], Tensor[(12, 9, 5), bool]) {
    %449 = @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */;
    %450 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
    %451 = cast(%var_7200, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
    %453 = cast(%450, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %455 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %456 = %449.1;
    %457 = left_shift(%453, %454) /* ty=Tensor[(2, 14, 6), int8] */;
    %458 = %455.0;
    (%456, %457, %458)
  };
  %459(%var_7222) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), int8], Tensor[(12, 9, 5), bool]) */
}

def @func_6787() -> Tensor[(12, 9, 5), bool] {
  @func_6785() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_3293(%var_3291: Tensor[(2, 14, 6), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) {
  @func_3290(%var_3291) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), int32], Tensor[(2, 14, 6), float64]) */
}

def @func_7018() -> (Tensor[(120), uint8],) {
  @func_7016() /* ty=(Tensor[(120), uint8],) */
}

def @func_2895(%var_2893: Tensor[(14, 78), float64], %var_2894: Tensor[(14, 78), float64]) -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) {
  @func_2891(%var_2893, %var_2894) /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) */
}

def @func_2456(%var_2454: Tensor[(2, 12, 10), float32], %var_2455: Tensor[(2, 12, 10), float32]) -> (Tensor[(2, 12, 10), uint16],) {
  %467 = fn (%var_2440: Tensor[(2, 12, 10), float32], %var_2443: Tensor[(2, 12, 10), float32]) -> (Tensor[(2, 12, 10), uint16],) {
    %460 = cast(%var_2440, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
    %461 = acos(%460) /* ty=Tensor[(2, 12, 10), float32] */;
    %462 = cast(%var_2443, dtype="uint16") /* ty=Tensor[(2, 12, 10), uint16] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%461, dtype="uint16") /* ty=Tensor[(2, 12, 10), uint16] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %466 = minimum(%464, %465) /* ty=Tensor[(2, 12, 10), uint16] */;
    (%466,)
  };
  %467(%var_2454, %var_2455) /* ty=(Tensor[(2, 12, 10), uint16],) */
}

def @func_7793() -> Tensor[(12, 9, 5), bool] {
  %468 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
  %468.2
}

def @func_2693(%var_2691: Tensor[(2160), float64]) -> (Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(16, 9, 15), float64], Tensor[(2160), float64]) {
  @func_2690(%var_2691) /* ty=(Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(16, 9, 15), float64], Tensor[(2160), float64]) */
}

def @func_2835() -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) {
  @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */
}

def @func_2584(%var_2582: Tensor[(105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) {
  @func_2581(%var_2582) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */
}

def @func_2706() -> (Tensor[(9, 2, 6), float64],) {
  %471 = fn () -> (Tensor[(9, 2, 6), float64],) {
    %469 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
    %470 = log2(%469) /* ty=Tensor[(9, 2, 6), float64] */;
    (%470,)
  };
  %471() /* ty=(Tensor[(9, 2, 6), float64],) */
}

def @func_6320() -> (Tensor[(120), uint8],) {
  @func_6318() /* ty=(Tensor[(120), uint8],) */
}

def @func_7007() -> Tensor[(4, 10, 13), float32] {
  %473 = fn () -> Tensor[(4, 10, 13), float32] {
    %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 13), float32] */;
    sinh(%472) /* ty=Tensor[(4, 10, 13), float32] */
  };
  %473() /* ty=Tensor[(4, 10, 13), float32] */
}

def @func_2347(%var_2346: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) {
  %478 = fn (%var_2328: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) {
    %474 = cast(%var_2328, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %475 = cast(%var_2328, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
    %476 = cosh(%474) /* ty=Tensor[(15, 3, 7), float32] */;
    %477 = asin(%475) /* ty=Tensor[(15, 3, 7), float64] */;
    (%476, %477)
  };
  %478(%var_2346) /* ty=(Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) */
}

def @func_6343() -> Tensor[(120), uint8] {
  %480 = fn () -> Tensor[(120), uint8] {
    %479 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
    %479.0
  };
  %480() /* ty=Tensor[(120), uint8] */
}

def @func_3336() -> (Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) {
  @func_3334() /* ty=(Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) */
}

def @func_143(%var_142: Tensor[(16, 9, 15), float64]) -> Tensor[(16, 9, 15), float64] {
  %484 = fn (%var_120: Tensor[(16, 9, 15), float64]) -> Tensor[(16, 9, 15), float64] {
    %481 = cast(%var_120, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %482 = log10(%481) /* ty=Tensor[(16, 9, 15), float64] */;
    %483 = cast(%482, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    sinh(%483) /* ty=Tensor[(16, 9, 15), float64] */
  };
  %484(%var_142) /* ty=Tensor[(16, 9, 15), float64] */
}

def @func_7653() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8]) {
  %485 = @func_6935() /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(540), bool]) */;
  %486 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
  %487 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
  %488 = %485.1;
  %489 = %486.0;
  %490 = %487.3;
  (%488, %489, %490)
}

def @func_7391() -> (Tensor[(2, 14, 6), float64],) {
  %495 = fn () -> (Tensor[(2, 14, 6), float64],) {
    %491 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
    %494 = log(%493) /* ty=Tensor[(2, 14, 6), float64] */;
    (%494,)
  };
  %495() /* ty=(Tensor[(2, 14, 6), float64],) */
}

def @func_3421() -> Tensor[(120), uint8] {
  @func_3419() /* ty=Tensor[(120), uint8] */
}

def @main(%var_8481: Tensor[(3, 14, 1), float32]) -> (Tensor[(3, 14, 1), float32],) {
  %496 = cast(%var_8481, dtype="float32") /* ty=Tensor[(3, 14, 1), float32] */;
  %497 = sqrt(%496) /* ty=Tensor[(3, 14, 1), float32] */;
  (%497,)
}

def @func_1301(%var_1299: Tensor[(3, 9, 2), float32], %var_1300: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
  %503 = fn (%var_1286: Tensor[(3, 9, 2), float32], %var_1287: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
    %498 = cast(%var_1287, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
    %499 = shape_of(%var_1286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%var_1286, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %502 = add(%500, %501) /* ty=Tensor[(3, 9, 2), float32] */;
    (%502,)
  };
  %503(%var_1299, %var_1300) /* ty=(Tensor[(3, 9, 2), float32],) */
}

def @func_4251() -> (Tensor[(12, 9, 5), float64],) {
  %508 = fn () -> (Tensor[(12, 9, 5), float64],) {
    %504 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %505 = %504.0;
    %506 = cast(%505, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
    %507 = sinh(%506) /* ty=Tensor[(12, 9, 5), float64] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(12, 9, 5), float64],) */
}

def @func_4325() -> Tensor[(12, 9, 5), bool] {
  @func_4323() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_2581(%var_2545: Tensor[(105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) {
  %509 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %510 = cast(%var_2545, dtype="int16") /* ty=Tensor[(105), int16] */;
  %511 = reshape(%510, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %512 = @func_2524(%511) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %513 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %514 = %509.0;
  %515 = %512.0;
  %516 = %513.0;
  (%514, %515, %var_2545, %516)
}

def @func_3147() -> (Tensor[(120), uint8],) {
  %517 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
  %518 = %517.0;
  (%518,)
}

def @func_7962(%var_7960: Tensor[(1, 1092), float64]) -> (Tensor[(105), int16], Tensor[(360, 6), float64], Tensor[(1, 1092), float64]) {
  @func_7959(%var_7960) /* ty=(Tensor[(105), int16], Tensor[(360, 6), float64], Tensor[(1, 1092), float64]) */
}

def @func_6251(%var_6226: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float32], Tensor[(1, 105), int16], Tensor[(120), uint8]) {
  %519 = @func_5488() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %520 = cast(%var_6226, dtype="int16") /* ty=Tensor[(1, 105), int16] */;
  %521 = reshape(%520, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %522 = @func_2524(%521) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %523 = @func_5002() /* ty=(Tensor[(120), uint8],) */;
  %524 = %519.0;
  %525 = %522.6;
  %526 = %523.0;
  (%524, %525, %var_6226, %526)
}

def @func_3447() -> (Tensor[(12, 9, 5), bool],) {
  @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_3918(%var_3907: Tensor[(12, 9, 5), float64]) -> (Tensor[(12, 9, 5), uint8],) {
  %527 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %528 = %527.0;
  %529 = cast(%var_3907, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %533 = bitwise_or(%531, %532) /* ty=Tensor[(12, 9, 5), uint8] */;
  (%533,)
}

def @func_4288() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) {
  %534 = cast(meta[relay.Constant][32] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %535 = cast(meta[relay.Constant][32] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %536 = reshape(%534, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %537 = reshape(%535, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %538 = @func_3749(%536, %537) /* ty=(Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) */;
  %539 = cast(meta[relay.Constant][33] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %540 = reshape(%539, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %541 = @func_1536(%540) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %542 = @func_2725() /* ty=Tensor[(120), uint8] */;
  %543 = %538.3;
  %544 = %541.0;
  (%542, %543, meta[relay.Constant][32] /* ty=Tensor[(105), int16] */, %544, meta[relay.Constant][33] /* ty=Tensor[(1092), float64] */)
}

def @func_3036(%var_2987: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), float64]) {
  %545 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %546 = cast(%var_2987, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %550 = cast(%var_2987, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %551 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%545, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = floor_mod(%548, %549) /* ty=Tensor[(12, 9, 5), float32] */;
  %555 = power(%552, %553) /* ty=Tensor[(12, 9, 5), float64] */;
  (%554, %555)
}

def @func_3973() -> (Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) {
  @func_3971() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) */
}

def @func_1600(%var_1599: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
  %561 = fn (%var_1574: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
    %556 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
    %557 = shape_of(%var_1574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%var_1574, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %560 = multiply(%558, %559) /* ty=Tensor[(7, 15, 16), float64] */;
    (%560,)
  };
  %561(%var_1599) /* ty=(Tensor[(7, 15, 16), float64],) */
}

def @func_4547(%var_4546: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) {
  %605 = fn (%var_4514: Tensor[(2160), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) {
    %562 = @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */;
    %563 = @func_2960() /* ty=(Tensor[(120), uint8],) */;
    %564 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
    %565 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
    %566 = reshape(%564, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
    %567 = reshape(%565, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
    %568 = @func_1298(%566, %567) /* ty=(Tensor[(3, 9, 2), float32],) */;
    %569 = @func_3445() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %570 = cast(meta[relay.Constant][36] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
    %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
    %572 = cast(%var_4514, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %573 = cast(meta[relay.Constant][36] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
    %574 = reshape(%570, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
    %575 = reshape(%571, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
    %576 = reshape(%572, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %577 = reshape(%573, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
    %578 = @func_190(%574, %575, %576, %577) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
    %579 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
    %580 = reshape(%579, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
    %581 = %563.0;
    %582 = cast(%581, dtype="uint8") /* ty=Tensor[(120), uint8] */;
    %583 = cast(%581, dtype="uint8") /* ty=Tensor[(120), uint8] */;
    %584 = reshape(%582, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
    %585 = reshape(%583, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
    %586 = @func_371(%584, %585) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
    %587 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
    %588 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15), int16] */;
    %589 = reshape(%587, newshape=[105]) /* ty=Tensor[(105), int16] */;
    %590 = reshape(%588, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
    %591 = @func_3749(%589, %590) /* ty=(Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) */;
    %592 = %591.1;
    %593 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15), int16] */, dtype="int64") /* ty=Tensor[(7, 15), int64] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="int64") /* ty=Tensor[(3, 5, 7), int64] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %597 = %562.0;
    %598 = %568.0;
    %599 = %569.0;
    %600 = %578.0;
    %601 = @func_541(%580) /* ty=Tensor[(3, 5, 7), int16] */;
    %602 = %586.1;
    %603 = maximum(%595, %596) /* ty=Tensor[(3, 5, 7), int64] */;
    %604 = @func_3419() /* ty=Tensor[(120), uint8] */;
    (%597, %581, %598, meta[relay.Constant][35] /* ty=Tensor[(3, 18), float32] */, %599, %600, meta[relay.Constant][36] /* ty=Tensor[(1092, 1), float64] */, %var_4514, %601, %602, %603, %604)
  };
  %605(%var_4546) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(3, 9, 2), float32], Tensor[(3, 18), float32], Tensor[(12, 9, 5), bool], Tensor[(7, 12, 13), bool], Tensor[(1092, 1), float64], Tensor[(2160), float64], Tensor[(3, 5, 7), int16], Tensor[(4, 3, 10), float32], Tensor[(3, 5, 7), int64], Tensor[(120), uint8]) */
}

def @func_1136(%var_1135: Tensor[(120), uint8]) -> (Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) {
  %626 = fn (%var_1094: Tensor[(120), uint8]) -> (Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) {
    %606 = cast(%var_1094, dtype="uint8") /* ty=Tensor[(120), uint8] */;
    %607 = cast(%var_1094, dtype="uint8") /* ty=Tensor[(120), uint8] */;
    %608 = reshape(%606, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
    %609 = reshape(%607, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
    %610 = @func_371(%608, %609) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
    %611 = %610.1;
    %612 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(4, 3, 10), bool] */;
    %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%611, dtype="bool") /* ty=Tensor[(4, 3, 10), bool] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %616 = cast(meta[relay.Constant][38] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %617 = reshape(%616, newshape=[]) /* ty=int16 */;
    %618 = @func_958(%617) /* ty=Tensor[(16, 12, 8), int16] */;
    %619 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 12, 8), int16] */, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %623 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
    %624 = greater(%614, %615) /* ty=Tensor[(4, 3, 10), bool] */;
    %625 = divide(%621, %622) /* ty=Tensor[(16, 12, 8), float32] */;
    (%623, meta[relay.Constant][38] /* ty=int16 */, %var_1094, %624, %625)
  };
  %626(%var_1135) /* ty=(Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) */
}

def @func_3662(%var_3575: Tensor[(15, 1, 2), float32], %var_3609: Tensor[(98), bool]) -> (Tensor[(15, 3, 7), int32], Tensor[(12, 9, 5), bool], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(15, ?, 2), bool], Tensor[(15, 1, 2), float32]) {
  %627 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %628 = reshape(%627, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
  %629 = @func_2345(%628) /* ty=(Tensor[(15, 3, 7), float32], Tensor[(15, 3, 7), float64]) */;
  %630 = %629.1;
  %631 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, dtype="int32") /* ty=Tensor[(315), int32] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="int32") /* ty=Tensor[(15, 3, 7), int32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %635 = cast(%var_3609, dtype="bool") /* ty=Tensor[(98), bool] */;
  %636 = reshape(%635, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), bool] */;
  %637 = cast(%var_3575, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %638 = acosh(%637) /* ty=Tensor[(15, 1, 2), float32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %640 = sqrt(%639) /* ty=Tensor[(15, 1, 2), float32] */;
  %641 = cast(%638, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = cast(%640, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %646 = asinh(%645) /* ty=Tensor[(15, 1, 2), float64] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %648 = bitwise_xor(%633, %634) /* ty=Tensor[(15, 3, 7), int32] */;
  %649 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
  %650 = @func_1147(%636) /* ty=Tensor[(14, 7, 7), bool] */;
  %651 = greater(%643, %644) /* ty=Tensor[(15, ?, 2), bool] */;
  %652 = rsqrt(%647) /* ty=Tensor[(15, 1, 2), float32] */;
  (%648, %649, %650, %var_3609, %651, %652)
}

def @func_7603() -> (Tensor[(12, 9, 5), bool],) {
  %653 = @func_5730() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %654 = %653.0;
  (%654,)
}

def @func_7143(%var_7141: Tensor[(5, 14, 5), int32]) -> (Tensor[(5, 14, 5), int32], Tensor[(5, 14, 5), float32]) {
  @func_7140(%var_7141) /* ty=(Tensor[(5, 14, 5), int32], Tensor[(5, 14, 5), float32]) */
}

def @func_2067() -> (Tensor[(12, 9, 5), float64],) {
  %655 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %658 = sigmoid(%657) /* ty=Tensor[(12, 9, 5), float64] */;
  (%658,)
}

def @func_5774() -> Tensor[(120), uint8] {
  %660 = fn () -> Tensor[(120), uint8] {
    %659 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
    %659.0
  };
  %660() /* ty=Tensor[(120), uint8] */
}

def @func_1539(%var_1537: Tensor[(1092), float64]) -> (Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) {
  @func_1536(%var_1537) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */
}

def @func_2273() -> (Tensor[(12, 9, 5), bool],) {
  %661 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %662 = %661.0;
  (%662,)
}

def @func_2181() -> (Tensor[(120), uint8],) {
  %665 = fn () -> (Tensor[(120), uint8],) {
    %663 = @func_1342() /* ty=(Tensor[(120), uint8],) */;
    %664 = %663.0;
    (%664,)
  };
  %665() /* ty=(Tensor[(120), uint8],) */
}

def @func_4323() -> Tensor[(12, 9, 5), bool] {
  @func_896() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_1203() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
  @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */
}

def @func_371(%var_357: Tensor[(4, 3, 10), uint8], %var_358: Tensor[(4, 3, 10), uint8]) -> (Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) {
  %666 = cast(%var_358, dtype="uint8") /* ty=Tensor[(4, 3, 10), uint8] */;
  %667 = shape_of(%var_357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_357, dtype="uint8") /* ty=Tensor[(4, 3, 10), uint8] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %670 = cast(%var_357, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %671 = left_shift(%668, %669) /* ty=Tensor[(4, 3, 10), uint8] */;
  %672 = atanh(%670) /* ty=Tensor[(4, 3, 10), float32] */;
  (%671, %672)
}

def @func_7110() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
  %676 = fn () -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
    %673 = @func_5173() /* ty=Tensor[(12, 9, 5), bool] */;
    %674 = @func_5446() /* ty=Tensor[(12, 9, 5), bool] */;
    %675 = @func_5273() /* ty=Tensor[(120), uint8] */;
    (%673, %674, %675)
  };
  %676() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */
}

def @func_4290() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) {
  @func_4288() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) */
}

def @func_5081() -> (Tensor[(12, 9, 5), bool],) {
  %679 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %677 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %678 = %677.0;
    (%678,)
  };
  %679() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_4222() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) {
  @func_4220() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(2, 12, 10), uint16], Tensor[(240), float32]) */
}

def @func_1494() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %680 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %681 = %680.0;
  %682 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  (%681, %682)
}

def @func_8278() -> Tensor[(12, 9, 5), bool] {
  %684 = fn () -> Tensor[(12, 9, 5), bool] {
    %683 = @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */;
    %683.2
  };
  %684() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_2524(%var_2508: Tensor[(1, 105), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) {
  %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %686 = cast(meta[relay.Constant][42] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %687 = reshape(%685, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %688 = reshape(%686, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %689 = @func_1298(%687, %688) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %690 = cast(%var_2508, dtype="int16") /* ty=Tensor[(1, 105), int16] */;
  %691 = reshape(%690, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), int16] */;
  %692 = cast(meta[relay.Constant][42] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %693 = %689.0;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %695 = reshape(%692, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %696 = reshape(%694, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %697 = @func_1298(%695, %696) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %698 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %701 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %702 = @func_541(%691) /* ty=Tensor[(3, 5, 7), int16] */;
  %703 = %697.0;
  %704 = log2(%700) /* ty=Tensor[(12, 9, 5), float32] */;
  (%701, %693, meta[relay.Constant][42] /* ty=Tensor[(54), float32] */, %702, %var_2508, %703, %704)
}

def @func_1445(%var_1423: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint16],) {
  %705 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %706 = cast(%var_1423, dtype="uint16") /* ty=Tensor[(12, 9, 5), uint16] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="uint16") /* ty=Tensor[(12, 9, 5), uint16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %710 = multiply(%708, %709) /* ty=Tensor[(12, 9, 5), uint16] */;
  (%710,)
}

def @func_2015(%var_2012: Tensor[(2, 840), float64], %var_2013: Tensor[(2, 840), uint64], %var_2014: Tensor[(2, 840), uint64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) {
  @func_2010(%var_2012, %var_2013, %var_2014) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) */
}

def @func_1344() -> (Tensor[(120), uint8],) {
  @func_1342() /* ty=(Tensor[(120), uint8],) */
}

def @func_3211() -> (Tensor[(12, 9, 5), bool],) {
  @func_3209() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_6188(%var_6184: Tensor[(7, 10, 11), bool], %var_6185: Tensor[(7, 10, 11), bool], %var_6186: Tensor[(7, 10, 11), bool], %var_6187: Tensor[(420), float64]) -> (Tensor[(7, 10, 11), bool], Tensor[(7, 10, 11), uint32], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(12, 9, 5), bool], Tensor[(2160), float64]) {
  @func_6182(%var_6184, %var_6185, %var_6186, %var_6187) /* ty=(Tensor[(7, 10, 11), bool], Tensor[(7, 10, 11), uint32], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(12, 9, 5), bool], Tensor[(2160), float64]) */
}

def @func_7795() -> Tensor[(12, 9, 5), bool] {
  @func_7793() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_8217() -> (Tensor[(120), uint8],) {
  %713 = fn () -> (Tensor[(120), uint8],) {
    %711 = @func_3777() /* ty=(Tensor[(120), uint8],) */;
    %712 = %711.0;
    (%712,)
  };
  %713() /* ty=(Tensor[(120), uint8],) */
}

def @func_195(%var_191: Tensor[(7, 12, 13), float64], %var_192: Tensor[(7, 12, 13), float64], %var_193: Tensor[(2160), float64], %var_194: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) {
  %735 = fn (%var_153: Tensor[(7, 12, 13), float64], %var_161: Tensor[(7, 12, 13), float64], %var_168: Tensor[(2160), float64], %var_186: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) {
    %714 = cast(%var_153, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
    %715 = cosh(%714) /* ty=Tensor[(7, 12, 13), float64] */;
    %716 = cast(%var_161, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %720 = cast(%var_168, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %721 = reshape(%720, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
    %722 = @func_141(%721) /* ty=Tensor[(16, 9, 15), float64] */;
    %723 = cast(%722, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %724 = reshape(%723, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
    %725 = @func_141(%724) /* ty=Tensor[(16, 9, 15), float64] */;
    %726 = cast(%725, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %727 = reshape(%726, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
    %728 = cast(%var_186, dtype="int64") /* ty=Tensor[(7, 12, 13), int64] */;
    %729 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%715, dtype="int64") /* ty=Tensor[(7, 12, 13), int64] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %732 = greater_equal(%718, %719) /* ty=Tensor[(7, 12, 13), bool] */;
    %733 = @func_141(%727) /* ty=Tensor[(16, 9, 15), float64] */;
    %734 = multiply(%730, %731) /* ty=Tensor[(7, 12, 13), int64] */;
    (%732, %722, %var_168, %725, %733, %734)
  };
  %735(%var_191, %var_192, %var_193, %var_194) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */
}

def @func_1496() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */
}

def @func_897() -> Tensor[(12, 9, 5), bool] {
  %738 = fn () -> Tensor[(12, 9, 5), bool] {
    %736 = cast(2.91221f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %737 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 9, 5), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
    less_equal(%736, %737) /* ty=Tensor[(12, 9, 5), bool] */
  };
  %738() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_3334() -> (Tensor[(2, 14, 6), float64], Tensor[(120), uint8]) {
  %739 = @func_2180() /* ty=(Tensor[(120), uint8],) */;
  %740 = @func_2813() /* ty=Tensor[(2, 14, 6), float64] */;
  %741 = %739.0;
  (%740, %741)
}

def @func_3749(%var_3684: Tensor[(105), int16], %var_3703: Tensor[(3, 5, 7), int16]) -> (Tensor[(105), int16], Tensor[(3, 5, 7), float32], Tensor[(12, 9, 5), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), uint16]) {
  %742 = cast(%var_3684, dtype="int16") /* ty=Tensor[(105), int16] */;
  %743 = reshape(%742, newshape=[1, 105]) /* ty=Tensor[(1, 105), int16] */;
  %744 = @func_2524(%743) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(3, 9, 2), float32], Tensor[(54), float32], Tensor[(3, 5, 7), int16], Tensor[(1, 105), int16], Tensor[(3, 9, 2), float32], Tensor[(12, 9, 5), float32]) */;
  %745 = %744.3;
  %746 = cast(%var_3703, dtype="float32") /* ty=Tensor[(3, 5, 7), float32] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="float32") /* ty=Tensor[(3, 5, 7), float32] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %750 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %753 = cos(%752) /* ty=Tensor[(12, 9, 5), float64] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %755 = sin(%754) /* ty=Tensor[(12, 9, 5), float64] */;
  %756 = cast(%755, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %757 = reshape(%756, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
  %758 = @func_1445(%757) /* ty=(Tensor[(12, 9, 5), uint16],) */;
  %759 = divide(%748, %749) /* ty=Tensor[(3, 5, 7), float32] */;
  %760 = @func_3419() /* ty=Tensor[(120), uint8] */;
  %761 = %758.0;
  (%var_3684, %759, %755, %760, %761)
}

def @func_2833() -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) {
  %762 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %763 = %762.0;
  %764 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 9, 5), bool] */, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %768 = left_shift(%766, %767) /* ty=Tensor[(12, 9, 5), uint8] */;
  %769 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  (%768, %769)
}

def @func_6142(%var_6096: Tensor[(84, 20), float64], %var_6109: Tensor[(84, 20), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(84, 20), float64], Tensor[(120), uint8], Tensor[(2, 840), float64]) {
  %770 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %771 = cast(%var_6109, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %772 = shape_of(%var_6096, dtype="int32") /* ty=Tensor[(2), int32] */;
  %773 = cast(%var_6096, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %775 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %776 = cast(%var_6096, dtype="float64") /* ty=Tensor[(84, 20), float64] */;
  %777 = cast(%var_6096, dtype="uint64") /* ty=Tensor[(84, 20), uint64] */;
  %778 = cast(%var_6096, dtype="uint64") /* ty=Tensor[(84, 20), uint64] */;
  %779 = reshape(%776, newshape=[2, 840]) /* ty=Tensor[(2, 840), float64] */;
  %780 = reshape(%777, newshape=[2, 840]) /* ty=Tensor[(2, 840), uint64] */;
  %781 = reshape(%778, newshape=[2, 840]) /* ty=Tensor[(2, 840), uint64] */;
  %782 = @func_2010(%779, %780, %781) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(120), uint8], Tensor[(16, 12, 8), float32], Tensor[(14, 7, 7), bool], Tensor[(98), bool], Tensor[(120), uint8], Tensor[(7, 15, 16), float64], Tensor[(3, 5, 7), int16], Tensor[(105), int16], Tensor[(2, 840), uint32], Tensor[(2, 840), bool], Tensor[(2, 840), float32], Tensor[(2, 840), float64], Tensor[(2, 840), int16], Tensor[(2, 840), bool]) */;
  %783 = %782.10;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %785 = @func_5446() /* ty=Tensor[(12, 9, 5), bool] */;
  %786 = %770.0;
  %787 = divide(%773, %774) /* ty=Tensor[(84, 20), float64] */;
  %788 = %775.0;
  %789 = atan(%784) /* ty=Tensor[(2, 840), float64] */;
  (%785, %786, %787, %788, %789)
}

def @func_2229() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */
}

def @func_3971() -> (Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) {
  %790 = @func_2261() /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 1), float32], Tensor[(120), uint8]) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %793 = @func_2227() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) */;
  %794 = log10(%792) /* ty=Tensor[(2, 14, 6), float32] */;
  %795 = %793.1;
  (%794, %795)
}

def @func_1681(%var_1679: Tensor[(54, 1), float32]) -> (Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) {
  @func_1678(%var_1679) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */
}

def @func_4021() -> Tensor[(12, 9, 5), bool] {
  @func_4019() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_4449(%var_4448: Tensor[(9, 2, 6), float64]) -> (Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) {
  %804 = fn (%var_4422: Tensor[(9, 2, 6), float64]) -> (Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) {
    %796 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
    %797 = %796.0;
    %798 = cast(%var_4422, dtype="uint64") /* ty=Tensor[(9, 2, 6), uint64] */;
    %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%797, dtype="uint64") /* ty=Tensor[(9, 2, 6), uint64] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %802 = @func_3419() /* ty=Tensor[(120), uint8] */;
    %803 = bitwise_xor(%800, %801) /* ty=Tensor[(9, 2, 6), uint64] */;
    (%802, %803)
  };
  %804(%var_4448) /* ty=(Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) */
}

def @func_6471(%var_6401: Tensor[(10, 1, 2), bool], %var_6402: Tensor[(10, 1, 2), bool], %var_6429: Tensor[(21, 5), int16], %var_6436: Tensor[(1, 126), int8], %var_6438: Tensor[(54), float32]) -> (Tensor[(10, ?, 2), bool], Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), float64], Tensor[(21, 5), int16], Tensor[(9, 14, 5), bool], Tensor[(1, 126), int8], Tensor[(70, 9), int8], Tensor[(54), float32]) {
  %805 = cast(%var_6402, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %806 = shape_of(%var_6401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_6401, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %809 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %810 = cast(%var_6429, dtype="int16") /* ty=Tensor[(21, 5), int16] */;
  %811 = reshape(%810, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %812 = @func_2581(%811) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %813 = cast(%var_6436, dtype="int8") /* ty=Tensor[(1, 126), int8] */;
  %814 = cast(meta[relay.Constant][45] /* ty=Tensor[(70, 9), int8] */, dtype="int8") /* ty=Tensor[(70, 9), int8] */;
  %815 = cast(%var_6438, dtype="float32") /* ty=Tensor[(54), float32] */;
  %816 = cast(meta[relay.Constant][45] /* ty=Tensor[(70, 9), int8] */, dtype="int8") /* ty=Tensor[(70, 9), int8] */;
  %817 = reshape(%813, newshape=[9, 14, 1]) /* ty=Tensor[(9, 14, 1), int8] */;
  %818 = reshape(%814, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), int8] */;
  %819 = reshape(%815, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %820 = reshape(%816, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), int8] */;
  %821 = @func_1736(%817, %818, %819, %820) /* ty=(Tensor[(9, 14, 5), int8], Tensor[(9, 14, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), int8]) */;
  %822 = logical_and(%807, %808) /* ty=Tensor[(10, ?, 2), bool] */;
  %823 = %809.0;
  %824 = %812.1;
  %825 = %821.1;
  (%822, %823, %824, %var_6429, %825, %var_6436, meta[relay.Constant][45] /* ty=Tensor[(70, 9), int8] */, %var_6438)
}

def @func_2727() -> Tensor[(120), uint8] {
  @func_2725() /* ty=Tensor[(120), uint8] */
}

def @func_3419() -> Tensor[(120), uint8] {
  %826 = @func_3147() /* ty=(Tensor[(120), uint8],) */;
  %826.0
}

def @func_5596(%var_5594: Tensor[(11, 12, 8), uint64], %var_5595: Tensor[(168), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(168), float64], Tensor[(168), float64], Tensor[(12, 9, 5), float64]) {
  %840 = fn (%var_5547: Tensor[(11, 12, 8), uint64], %var_5575: Tensor[(168), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(168), float64], Tensor[(168), float64], Tensor[(12, 9, 5), float64]) {
    %827 = cast(%var_5547, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
    %828 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(11, 12, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %829 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 12, 8), uint64] */, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %831 = cast(%var_5575, dtype="float64") /* ty=Tensor[(168), float64] */;
    %832 = reshape(%831, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %833 = @func_4679(%832) /* ty=(Tensor[(120), uint8], Tensor[(2, 14, 6), float64], Tensor[(168), float64]) */;
    %834 = @func_3971() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(12, 9, 5), float64]) */;
    %835 = %834.1;
    %836 = cast(%835, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
    %837 = greater_equal(%829, %830) /* ty=Tensor[(11, 12, 8), bool] */;
    %838 = %833.2;
    %839 = atanh(%836) /* ty=Tensor[(12, 9, 5), float64] */;
    (%837, %838, %var_5575, %839)
  };
  %840(%var_5594, %var_5595) /* ty=(Tensor[(11, 12, 8), bool], Tensor[(168), float64], Tensor[(168), float64], Tensor[(12, 9, 5), float64]) */
}

def @func_4061() -> Tensor[(9, 2, 6), float64] {
  %842 = fn () -> Tensor[(9, 2, 6), float64] {
    %841 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
    %841.0
  };
  %842() /* ty=Tensor[(9, 2, 6), float64] */
}

def @func_6390() -> (Tensor[(120), uint8],) {
  %845 = fn () -> (Tensor[(120), uint8],) {
    %843 = @func_4288() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) */;
    %844 = %843.1;
    (%844,)
  };
  %845() /* ty=(Tensor[(120), uint8],) */
}

def @func_3039(%var_3037: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), float64]) {
  @func_3036(%var_3037) /* ty=(Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), float64]) */
}

def @func_7541(%var_7538: Tensor[(1092), float64], %var_7539: Tensor[(3, 36), float64], %var_7540: Tensor[(105, 1), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 78), int8], Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(3, 36), float64], Tensor[(105), int16], Tensor[(105, 1), int16]) {
  @func_7536(%var_7538, %var_7539, %var_7540) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(14, 78), int8], Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(3, 36), float64], Tensor[(105), int16], Tensor[(105, 1), int16]) */
}

def @func_5357() -> Tensor[(120), uint8] {
  @func_5355() /* ty=Tensor[(120), uint8] */
}

def @func_724(%var_722: Tensor[(15, 4, 7), float64]) -> Tensor[(15, 4, 7), float64] {
  @func_721(%var_722) /* ty=Tensor[(15, 4, 7), float64] */
}

def @func_4808() -> (Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) {
  @func_4806() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(1092), float64], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), float64]) */
}

def @func_1825(%var_1770: Tensor[(12, 9, 5), bool]) -> (Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) {
  %846 = @func_1494() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */;
  %847 = %846.0;
  %848 = cast(%var_1770, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="uint8") /* ty=Tensor[(12, 9, 5), uint8] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %852 = cast(%var_1770, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %853 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%847, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %856 = cast(meta[relay.Constant][47] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %857 = reshape(%856, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %858 = @func_1598(%857) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %859 = cast(meta[relay.Constant][48] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %860 = reshape(%859, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %861 = @func_1678(%860) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(3, 9, 2), float32]) */;
  %862 = %861.1;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %864 = cast(%862, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %865 = reshape(%863, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %866 = reshape(%864, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %867 = @func_1298(%865, %866) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %868 = maximum(%850, %851) /* ty=Tensor[(12, 9, 5), uint8] */;
  %869 = not_equal(%854, %855) /* ty=Tensor[(12, 9, 5), bool] */;
  %870 = %858.0;
  %871 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %872 = %867.0;
  (%868, %869, %870, meta[relay.Constant][47] /* ty=Tensor[(1680), float64] */, %871, %862, meta[relay.Constant][48] /* ty=Tensor[(54), float32] */, %872)
}

def @func_6887() -> (Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
  @func_6885() /* ty=(Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */
}

def @func_2227() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  %873 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %874 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %875 = %873.2;
  %876 = %874.0;
  (%875, %876)
}

def @func_5004() -> (Tensor[(120), uint8],) {
  @func_5002() /* ty=(Tensor[(120), uint8],) */
}

def @func_6478(%var_6473: Tensor[(10, 1, 2), bool], %var_6474: Tensor[(10, 1, 2), bool], %var_6475: Tensor[(21, 5), int16], %var_6476: Tensor[(1, 126), int8], %var_6477: Tensor[(54), float32]) -> (Tensor[(10, ?, 2), bool], Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), float64], Tensor[(21, 5), int16], Tensor[(9, 14, 5), bool], Tensor[(1, 126), int8], Tensor[(70, 9), int8], Tensor[(54), float32]) {
  @func_6471(%var_6473, %var_6474, %var_6475, %var_6476, %var_6477) /* ty=(Tensor[(10, ?, 2), bool], Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), float64], Tensor[(21, 5), int16], Tensor[(9, 14, 5), bool], Tensor[(1, 126), int8], Tensor[(70, 9), int8], Tensor[(54), float32]) */
}

def @func_7536(%var_7496: Tensor[(1092), float64], %var_7504: Tensor[(3, 36), float64], %var_7528: Tensor[(105, 1), int16]) -> (Tensor[(12, 9, 5), float64], Tensor[(14, 78), int8], Tensor[(1092), float64], Tensor[(120), uint8], Tensor[(3, 36), float64], Tensor[(105), int16], Tensor[(105, 1), int16]) {
  %877 = cast(%var_7496, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %878 = cast(%var_7496, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %879 = reshape(%877, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %880 = reshape(%878, newshape=[14, 78]) /* ty=Tensor[(14, 78), float64] */;
  %881 = @func_2891(%879, %880) /* ty=(Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) */;
  %882 = cast(%var_7504, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %883 = reshape(%882, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %884 = @func_4952(%883) /* ty=(Tensor[(12, 9, 5), float32], Tensor[(12, 9, 5), bool], Tensor[(2, 14, 6), float64], Tensor[(168, 1), float64], Tensor[(120), uint8], Tensor[(14, 7, 7), bool], Tensor[(7, 14), bool], Tensor[(168), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), uint8], Tensor[(120), uint8], Tensor[(108), float64]) */;
  %885 = cast(%var_7528, dtype="int16") /* ty=Tensor[(105, 1), int16] */;
  %886 = reshape(%885, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %887 = @func_2581(%886) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), float64], Tensor[(105), int16], Tensor[(120), uint8]) */;
  %888 = @func_2130() /* ty=Tensor[(12, 9, 5), float64] */;
  %889 = %881.3;
  %890 = %884.4;
  %891 = %887.2;
  (%888, %889, %var_7496, %890, %var_7504, %891, %var_7528)
}

def @func_2891(%var_2842: Tensor[(14, 78), float64], %var_2869: Tensor[(14, 78), float64]) -> (Tensor[(9, 2, 6), float64], Tensor[(120), uint8], Tensor[(4, 3, 10), uint8], Tensor[(14, 78), int8], Tensor[(14, 78), float64]) {
  %892 = @func_2705() /* ty=(Tensor[(9, 2, 6), float64],) */;
  %893 = cast(%var_2842, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %894 = reshape(%893, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %895 = @func_1536(%894) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %896 = %895.0;
  %897 = cast(%896, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %898 = cast(%896, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %899 = reshape(%897, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %900 = reshape(%898, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), uint8] */;
  %901 = @func_371(%899, %900) /* ty=(Tensor[(4, 3, 10), uint8], Tensor[(4, 3, 10), float32]) */;
  %902 = cast(%var_2869, dtype="int8") /* ty=Tensor[(14, 78), int8] */;
  %903 = shape_of(%var_2842, dtype="int32") /* ty=Tensor[(2), int32] */;
  %904 = cast(%var_2842, dtype="int8") /* ty=Tensor[(14, 78), int8] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %906 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %907 = shape_of(%var_2869, dtype="int32") /* ty=Tensor[(2), int32] */;
  %908 = cast(%var_2869, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %910 = %892.0;
  %911 = %901.0;
  %912 = minimum(%904, %905) /* ty=Tensor[(14, 78), int8] */;
  %913 = power(%908, %909) /* ty=Tensor[(14, 78), float64] */;
  (%910, %896, %911, %912, %913)
}

def @func_5050(%var_5048: Tensor[(540), bool]) -> (Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) {
  @func_5047(%var_5048) /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), uint16], Tensor[(540), bool]) */
}

def @func_1201() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) {
  %914 = cast(meta[relay.Constant][50] /* ty=Tensor[(120), uint8] */, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %915 = reshape(%914, newshape=[120]) /* ty=Tensor[(120), uint8] */;
  %916 = @func_1134(%915) /* ty=(Tensor[(12, 9, 5), bool], int16, Tensor[(120), uint8], Tensor[(4, 3, 10), bool], Tensor[(16, 12, 8), float32]) */;
  %917 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %918 = %916.0;
  (%917, %918, meta[relay.Constant][50] /* ty=Tensor[(120), uint8] */)
}

def @func_5639(%var_5638: Tensor[(4, 10, 4), float64]) -> Tensor[(4, 10, 4), float64] {
  %920 = fn (%var_5632: Tensor[(4, 10, 4), float64]) -> Tensor[(4, 10, 4), float64] {
    %919 = cast(%var_5632, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
    asin(%919) /* ty=Tensor[(4, 10, 4), float64] */
  };
  %920(%var_5638) /* ty=Tensor[(4, 10, 4), float64] */
}

def @func_2069() -> (Tensor[(12, 9, 5), float64],) {
  @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */
}

def @func_4735(%var_4725: int16) -> (Tensor[(12, 9, 5), bool], Tensor[(16, 12, 8), int16], int16) {
  %921 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %922 = cast(%var_4725, dtype="int16") /* ty=int16 */;
  %923 = reshape(%922, newshape=[]) /* ty=int16 */;
  %924 = %921.0;
  %925 = @func_958(%923) /* ty=Tensor[(16, 12, 8), int16] */;
  (%924, %925, %var_4725)
}

def @func_5119() -> Tensor[(12, 9, 5), bool] {
  @func_5117() /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_5742(%var_5740: Tensor[(14, 9, 3), bool]) -> Tensor[(14, 9, 3), bool] {
  @func_5739(%var_5740) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_932(%var_918: Tensor[(14, 78), float64]) -> (Tensor[(12, 9, 5), bool], Tensor[(14, 78), float64], Tensor[(16, 9, 15), uint16]) {
  %926 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %927 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %928 = cast(meta[relay.Constant][51] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %929 = cast(%var_918, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %930 = reshape(%926, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %931 = reshape(%927, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %932 = reshape(%928, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %933 = reshape(%929, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %934 = @func_190(%930, %931, %932, %933) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
  %935 = %934.3;
  %936 = cast(meta[relay.Constant][51] /* ty=Tensor[(2160), float64] */, dtype="uint16") /* ty=Tensor[(2160), uint16] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%935, dtype="uint16") /* ty=Tensor[(16, 9, 15), uint16] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %940 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
  %941 = logical_xor(%938, %939) /* ty=Tensor[(16, 9, 15), uint16] */;
  (%940, %var_918, %941)
}

def @func_3921(%var_3919: Tensor[(12, 9, 5), float64]) -> (Tensor[(12, 9, 5), uint8],) {
  @func_3918(%var_3919) /* ty=(Tensor[(12, 9, 5), uint8],) */
}

def @func_5117() -> Tensor[(12, 9, 5), bool] {
  %942 = @func_2286() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %942.0
}

def @func_6745(%var_6731: Tensor[(9, 2, 6), float64]) -> (Tensor[(9, 2, 6), uint8], Tensor[(120), uint8], Tensor[(12, 9, 5), float64]) {
  %943 = @func_4615() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool], Tensor[(168), float64], Tensor[(120), uint8], Tensor[(9, 2, 6), float64], Tensor[(12, 9, 5), bool]) */;
  %944 = %943.4;
  %945 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(9, 2, 6), uint8] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="uint8") /* ty=Tensor[(9, 2, 6), uint8] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %949 = @func_4250() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %950 = multiply(%947, %948) /* ty=Tensor[(9, 2, 6), uint8] */;
  %951 = @func_5355() /* ty=Tensor[(120), uint8] */;
  %952 = %949.0;
  (%950, %951, %952)
}

def @func_8096(%var_8093: Tensor[(12, 9, 5), bool], %var_8094: Tensor[(420), float64], %var_8095: Tensor[(98), bool]) -> (Tensor[(12, 9, 5), bool], Tensor[(3, 5, 7), int16], Tensor[(2160), float64], Tensor[(120), uint8], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(420), float64], Tensor[(14, 78), float64], Tensor[(98), bool], Tensor[(1, 189), float64]) {
  @func_8091(%var_8093, %var_8094, %var_8095) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(3, 5, 7), int16], Tensor[(2160), float64], Tensor[(120), uint8], Tensor[(15, 4, 7), float64], Tensor[(420), float64], Tensor[(420), float64], Tensor[(14, 78), float64], Tensor[(98), bool], Tensor[(1, 189), float64]) */
}

def @func_3209() -> (Tensor[(12, 9, 5), bool],) {
  %953 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %954 = %953.0;
  (%954,)
}

def @func_2130() -> Tensor[(12, 9, 5), float64] {
  %955 = @func_2067() /* ty=(Tensor[(12, 9, 5), float64],) */;
  %955.0
}

def @func_544(%var_542: Tensor[(3, 5, 7), int16]) -> Tensor[(3, 5, 7), int16] {
  @func_541(%var_542) /* ty=Tensor[(3, 5, 7), int16] */
}

def @func_7259() -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(54), float32]) {
  %964 = fn () -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(54), float32]) {
    %956 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
    %957 = cast(%956, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
    %958 = cast(%956, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
    %959 = reshape(%958, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), bool] */;
    %960 = @func_1825(%959) /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool], Tensor[(7, 15, 16), float64], Tensor[(1680), float64], Tensor[(12, 9, 5), bool], Tensor[(54, 1), float32], Tensor[(54), float32], Tensor[(3, 9, 2), float32]) */;
    %961 = log10(%957) /* ty=Tensor[(12, 9, 5), float64] */;
    %962 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
    %963 = %960.6;
    (%961, %962, %963)
  };
  %964() /* ty=(Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(54), float32]) */
}

def @func_1536(%var_1530: Tensor[(1092), float64]) -> (Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) {
  %965 = @func_1201() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool], Tensor[(120), uint8]) */;
  %966 = cast(meta[relay.Constant][52] /* ty=Tensor[(360, 6), float64] */, dtype="float64") /* ty=Tensor[(360, 6), float64] */;
  %967 = reshape(%966, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %968 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %969 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %970 = @func_141(%967) /* ty=Tensor[(16, 9, 15), float64] */;
  %971 = cast(%970, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %972 = cast(%var_1530, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %973 = reshape(%968, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %974 = reshape(%969, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %975 = reshape(%971, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %976 = reshape(%972, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %977 = @func_190(%973, %974, %975, %976) /* ty=(Tensor[(7, 12, 13), bool], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64], Tensor[(7, 12, 13), int64]) */;
  %978 = %965.2;
  %979 = %977.2;
  (%978, %970, meta[relay.Constant][52] /* ty=Tensor[(360, 6), float64] */, %979, %var_1530)
}

def @func_3675(%var_3674: Tensor[(14, 9, 9), int32]) -> (Tensor[(14, 9, 9), int32],) {
  %983 = fn (%var_3669: Tensor[(14, 9, 9), int32]) -> (Tensor[(14, 9, 9), int32],) {
    %980 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %981 = cast(%var_3669, dtype="int32") /* ty=Tensor[(14, 9, 9), int32] */;
    %982 = multiply(%980, %981) /* ty=Tensor[(14, 9, 9), int32] */;
    (%982,)
  };
  %983(%var_3674) /* ty=(Tensor[(14, 9, 9), int32],) */
}

def @func_1149(%var_1148: Tensor[(14, 1, 7), bool]) -> Tensor[(14, 7, 7), bool] {
  %986 = fn (%var_1138: Tensor[(14, 1, 7), bool]) -> Tensor[(14, 7, 7), bool] {
    %984 = cast(%var_1138, dtype="bool") /* ty=Tensor[(14, 1, 7), bool] */;
    %985 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 7), bool] */;
    logical_or(%984, %985) /* ty=Tensor[(14, 7, 7), bool] */
  };
  %986(%var_1148) /* ty=Tensor[(14, 7, 7), bool] */
}

def @func_7605() -> (Tensor[(12, 9, 5), bool],) {
  @func_7603() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_7959(%var_7947: Tensor[(1, 1092), float64]) -> (Tensor[(105), int16], Tensor[(360, 6), float64], Tensor[(1, 1092), float64]) {
  %987 = @func_4288() /* ty=(Tensor[(120), uint8], Tensor[(120), uint8], Tensor[(105), int16], Tensor[(120), uint8], Tensor[(1092), float64]) */;
  %988 = cast(%var_7947, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %989 = reshape(%988, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %990 = @func_1536(%989) /* ty=(Tensor[(120), uint8], Tensor[(16, 9, 15), float64], Tensor[(360, 6), float64], Tensor[(2160), float64], Tensor[(1092), float64]) */;
  %991 = %987.2;
  %992 = %990.2;
  (%991, %992, %var_7947)
}

def @func_5987(%var_5985: Tensor[(6, 10, 10), float32], %var_5986: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), float32], Tensor[(120), uint8], Tensor[(108), float64]) {
  %1007 = fn (%var_5958: Tensor[(6, 10, 10), float32], %var_5959: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), float32], Tensor[(120), uint8], Tensor[(108), float64]) {
    %993 = cast(%var_5959, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
    %994 = shape_of(%var_5958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %995 = cast(%var_5958, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
    %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %997 = minimum(%995, %996) /* ty=Tensor[(6, 10, 10), float32] */;
    %998 = cast(%var_5958, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
    %999 = shape_of(%997, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1000 = cast(%997, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
    %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1002 = cast(meta[relay.Constant][54] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %1003 = reshape(%1002, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float64] */;
    %1004 = @func_4447(%1003) /* ty=(Tensor[(120), uint8], Tensor[(9, 2, 6), uint64]) */;
    %1005 = power(%1000, %1001) /* ty=Tensor[(6, 10, 10), float32] */;
    %1006 = %1004.0;
    (%1005, %1006, meta[relay.Constant][54] /* ty=Tensor[(108), float64] */)
  };
  %1007(%var_5985, %var_5986) /* ty=(Tensor[(6, 10, 10), float32], Tensor[(120), uint8], Tensor[(108), float64]) */
}

def @func_6024() -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %1012 = fn () -> (Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
    %1008 = @func_5080() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %1009 = @func_2032() /* ty=(Tensor[(12, 9, 5), bool],) */;
    %1010 = %1008.0;
    %1011 = %1009.0;
    (%1010, %1011)
  };
  %1012() /* ty=(Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */
}

def @func_3542() -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
  %1016 = fn () -> (Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) {
    %1013 = @func_2833() /* ty=(Tensor[(12, 9, 5), uint8], Tensor[(12, 9, 5), bool]) */;
    %1014 = @func_2725() /* ty=Tensor[(120), uint8] */;
    %1015 = %1013.1;
    (%1014, %1015)
  };
  %1016() /* ty=(Tensor[(120), uint8], Tensor[(12, 9, 5), bool]) */
}

def @func_5625() -> Tensor[(120), uint8] {
  @func_5623() /* ty=Tensor[(120), uint8] */
}

def @func_2275() -> (Tensor[(12, 9, 5), bool],) {
  @func_2273() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_3445() -> (Tensor[(12, 9, 5), bool],) {
  %1017 = @func_1041() /* ty=(Tensor[(12, 9, 5), bool],) */;
  %1018 = %1017.0;
  (%1018,)
}

def @func_5851() -> (Tensor[(12, 9, 5), bool],) {
  %1020 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %1019 = @func_5173() /* ty=Tensor[(12, 9, 5), bool] */;
    (%1019,)
  };
  %1020() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_1042() -> (Tensor[(12, 9, 5), bool],) {
  %1022 = fn () -> (Tensor[(12, 9, 5), bool],) {
    %1021 = @func_896() /* ty=Tensor[(12, 9, 5), bool] */;
    (%1021,)
  };
  %1022() /* ty=(Tensor[(12, 9, 5), bool],) */
}

def @func_8384(%var_8382: Tensor[(3, 2, 5), float64], %var_8383: Tensor[(3, 2, 5), float64]) -> (Tensor[(3, 2, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
  %1030 = fn (%var_8357: Tensor[(3, 2, 5), float64], %var_8358: Tensor[(3, 2, 5), float64]) -> (Tensor[(3, 2, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) {
    %1023 = cast(%var_8358, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
    %1024 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1025 = cast(%var_8357, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
    %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1027 = mod(%1025, %1026) /* ty=Tensor[(3, 2, 5), float64] */;
    %1028 = @func_3479() /* ty=Tensor[(12, 9, 5), bool] */;
    %1029 = @func_4323() /* ty=Tensor[(12, 9, 5), bool] */;
    (%1027, %1028, %1029)
  };
  %1030(%var_8382, %var_8383) /* ty=(Tensor[(3, 2, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(12, 9, 5), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen308/build/output.py:2816: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen308/build/output.py", line 2821, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(42) tvmgen_default_fused_sqrt_kernel0(float* __restrict__ T_sqrt, float* __restrict__ placeholder) {
  T_sqrt[(((int)threadIdx.x))] = sqrtf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

