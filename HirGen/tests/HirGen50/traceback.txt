==========mod==========
#[version = "0.0.5"]
def @func_2004(%var_1996: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), float64] {
  %0 = cast(%var_1996, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  asinh(%0) /* ty=Tensor[(6, 2, 14), float64] */
}

def @func_4219() -> Tensor[(5, 8, 5), bool] {
  %1 = @func_2594() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %1.0
}

def @func_5719(%var_5684: Tensor[(60, 10), float64]) -> (Tensor[(60, 10), float64], Tensor[(280, 4), uint64], Tensor[(60, 10), float32]) {
  %2 = @func_2697() /* ty=(Tensor[(60, 10), float64],) */;
  %3 = %2.0;
  %4 = cast(%var_5684, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %6 = cast(%3, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %8 = cast(%3, dtype="bool") /* ty=Tensor[(60, 10), bool] */;
  %9 = reshape(%8, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %10 = @func_989(%9) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %11 = cast(%3, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %12 = sinh(%11) /* ty=Tensor[(60, 10), float64] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %14 = power(%6, %7) /* ty=Tensor[(60, 10), float64] */;
  %15 = %10.1;
  %16 = atan(%13) /* ty=Tensor[(60, 10), float32] */;
  (%14, %15, %16)
}

def @func_2568(%var_2540: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), float64], Tensor[(600), float32]) {
  %17 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %18 = %17.0;
  %19 = cast(%var_2540, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %23 = @func_2155() /* ty=Tensor[(600), bool] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(600), bool] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %26 = cast(%23, dtype="float32") /* ty=Tensor[(600), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?), float32] */;
  %28 = floor_divide(%21, %22) /* ty=Tensor[(7, 12, 3), float64] */;
  %29 = power(%26, %27) /* ty=Tensor[(600), float32] */;
  (%28, %29)
}

def @func_2830() -> (Tensor[(7, 12, 3), float32],) {
  %30 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%30,)
}

def @func_3937(%var_3920: Tensor[(594), uint16]) -> (Tensor[(594), float32], Tensor[(7, 12, 3), float32]) {
  %31 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
  %32 = %31.2;
  %33 = cast(%var_3920, dtype="float32") /* ty=Tensor[(594), float32] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(1), int32] */;
  %35 = cast(%32, dtype="float32") /* ty=Tensor[(594), float32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?), float32] */;
  %37 = add(%35, %36) /* ty=Tensor[(594), float32] */;
  %38 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  (%37, %38)
}

def @func_2416() -> Tensor[(7, 12, 3), float32] {
  @func_1761() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_263(%var_261: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) {
  %39 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %40 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %43 = sin(%42) /* ty=Tensor[(5, 8, 5), float32] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %45 = cast(%var_261, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %46 = reshape(%45, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
  %47 = @func_22(%46) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %48 = %39.0;
  %49 = log2(%44) /* ty=Tensor[(5, 8, 5), float64] */;
  %50 = %47.0;
  (%48, %49, %50, %var_261)
}

def @func_3842() -> (Tensor[(600), float32],) {
  %51 = @func_2781() /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) */;
  %52 = %51.0;
  (%52,)
}

def @func_1968() -> (Tensor[(7, 12, 3), float32],) {
  %53 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %54 = %53.0;
  (%54,)
}

def @func_307() -> (Tensor[(5, 8, 5), bool],) {
  %55 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  (%55,)
}

def @func_2697() -> (Tensor[(60, 10), float64],) {
  %56 = @func_1546() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) */;
  %57 = %56.2;
  (%57,)
}

def @func_1601() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) {
  %58 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %59 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %60 = %58.0;
  %61 = %59.1;
  (%60, %61)
}

def @func_1546() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) {
  %62 = cast(meta[relay.Constant][1] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %63 = reshape(%62, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %64 = @func_1149(%63) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
  %65 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %66 = %64.2;
  (%65, %66, meta[relay.Constant][1] /* ty=Tensor[(60, 10), float64] */)
}

def @func_5893() -> Tensor[(7, 12, 3), float32] {
  %67 = @func_3567() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %67.0
}

def @func_5989() -> (Tensor[(7, 12, 3), int32],) {
  %68 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %73 = logical_xor(%71, %72) /* ty=Tensor[(7, 12, 3), int32] */;
  (%73,)
}

def @func_4459() -> (Tensor[(7, 12, 3), float32], Tensor[(600), float32]) {
  %74 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %75 = @func_2781() /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) */;
  %76 = %74.0;
  %77 = %75.0;
  (%76, %77)
}

def @func_724(%var_700: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) {
  %78 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %81 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %82 = cast(%var_700, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %83 = reshape(%82, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
  %84 = @func_22(%83) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %85 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %87 = asinh(%86) /* ty=Tensor[(5, 8, 5), float64] */;
  %88 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %90 = reshape(%89, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %91 = @func_438(%90) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
  %92 = %91.1;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %94 = cosh(%93) /* ty=Tensor[(5, 8, 5), float32] */;
  %95 = cast(%94, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %96 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%87, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(594), uint16] */, dtype="bool") /* ty=Tensor[(594), bool] */;
  %100 = shape_of(%var_700, dtype="int32") /* ty=Tensor[(1), int32] */;
  %101 = cast(%var_700, dtype="bool") /* ty=Tensor[(594), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?), bool] */;
  %103 = atanh(%80) /* ty=Tensor[(5, 8, 5), float64] */;
  %104 = %81.1;
  %105 = %84.0;
  %106 = equal(%97, %98) /* ty=Tensor[(5, 8, 5), bool] */;
  %107 = less(%101, %102) /* ty=Tensor[(594), bool] */;
  (%103, %88, %104, %105, %106, %107)
}

def @func_4536(%var_4514: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), int32], Tensor[(7, 12, 3), float32]) {
  %108 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  %109 = cast(%var_4514, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %113 = @func_3774() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) */;
  %114 = add(%111, %112) /* ty=Tensor[(7, 12, 3), int32] */;
  %115 = %113.0;
  (%114, %115)
}

def @func_892() -> (Tensor[(7, 12, 3), float32],) {
  %116 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %117 = %116.0;
  (%117,)
}

def @func_1945(%var_1922: Tensor[(2, 1, 1), float32]) -> (Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
  %118 = cast(%var_1922, dtype="float32") /* ty=Tensor[(2, 1, 1), float32] */;
  %119 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %120 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %121 = acos(%118) /* ty=Tensor[(2, 1, 1), float32] */;
  %122 = %119.0;
  %123 = %120.0;
  (%121, %122, %123)
}

def @func_5860() -> (Tensor[(6, 3, ?), bool],) {
  %124 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
  %125 = sigmoid(%124) /* ty=Tensor[(6, 3, 1), float32] */;
  %126 = cast(%125, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
  %127 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 3, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 3, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = logical_or(%128, %129) /* ty=Tensor[(6, 3, ?), bool] */;
  (%130,)
}

def @func_4028(%var_3949: Tensor[(600, 1), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) {
  %131 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
  %132 = cast(%var_3949, dtype="bool") /* ty=Tensor[(600, 1), bool] */;
  %133 = reshape(%132, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %134 = @func_989(%133) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %135 = @func_2416() /* ty=Tensor[(7, 12, 3), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %137 = reshape(%136, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float32] */;
  %138 = @func_2568(%137) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(600), float32]) */;
  %139 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
  %140 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %141 = @func_2830() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %142 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 70), uint64] */, dtype="uint64") /* ty=Tensor[(1, 70), uint64] */;
  %143 = %134.1;
  %144 = cast(%143, dtype="uint64") /* ty=Tensor[(280, 4), uint64] */;
  %145 = reshape(%142, newshape=[70]) /* ty=Tensor[(70), uint64] */;
  %146 = reshape(%144, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %147 = @func_1368(%145, %146) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %148 = %147.3;
  %149 = cast(%148, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %150 = cast(%var_3949, dtype="bool") /* ty=Tensor[(600, 1), bool] */;
  %151 = %131.2;
  %152 = %138.1;
  %153 = %139.2;
  %154 = %140.0;
  %155 = %141.0;
  %156 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  %157 = greater(%149, %150) /* ty=Tensor[(600, 1120), bool] */;
  (%151, %143, %135, %152, %153, %154, meta[relay.Constant][5] /* ty=Tensor[(1, 70), uint64] */, %155, %156, %157)
}

def @func_1090(%var_1064: Tensor[(5, 8, 5), bool], %var_1071: Tensor[(600), float64], %var_1084: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) {
  %158 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %159 = %158.0;
  %160 = cast(%var_1064, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = cast(%var_1071, dtype="float64") /* ty=Tensor[(600), float64] */;
  %165 = reshape(%164, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %166 = @func_166(%165) /* ty=(Tensor[(5, 12, 10), float64],) */;
  %167 = cast(%var_1084, dtype="float64") /* ty=Tensor[(160), float64] */;
  %168 = cast(%var_1084, dtype="float64") /* ty=Tensor[(160), float64] */;
  %169 = reshape(%167, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), float64] */;
  %170 = reshape(%168, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), float64] */;
  %171 = @func_905(%169, %170) /* ty=(Tensor[(4, 8, 5), float64],) */;
  %172 = less_equal(%162, %163) /* ty=Tensor[(5, 8, 5), bool] */;
  %173 = %166.0;
  %174 = %171.0;
  (%172, %173, %var_1071, %174, %var_1084)
}

def @func_5419() -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(4, 60), bool]) {
  %175 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 60), bool] */, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 60), bool] */, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %178 = reshape(%176, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %179 = reshape(%177, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %180 = @func_3056(%178, %179) /* ty=(Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) */;
  %181 = %175.0;
  %182 = @func_3659() /* ty=Tensor[(7, 12, 3), float32] */;
  %183 = %180.0;
  (%181, %182, %183, meta[relay.Constant][6] /* ty=Tensor[(4, 60), bool] */)
}

def @func_2594() -> (Tensor[(5, 8, 5), bool],) {
  %184 = @func_764() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) */;
  %185 = %184.1;
  (%185,)
}

def @func_5643() -> (Tensor[(7, 12, 3), float64], Tensor[(9, 11, 6), int16]) {
  %186 = @func_1468() /* ty=Tensor[(9, 11, 6), float32] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %188 = atan(%187) /* ty=Tensor[(9, 11, 6), float32] */;
  %189 = cast(%186, dtype="int16") /* ty=Tensor[(9, 11, 6), int16] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="int16") /* ty=Tensor[(9, 11, 6), int16] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %193 = @func_3308() /* ty=Tensor[(7, 12, 3), float64] */;
  %194 = bitwise_and(%191, %192) /* ty=Tensor[(9, 11, 6), int16] */;
  (%193, %194)
}

def @func_301() -> Tensor[(5, 8, 5), bool] {
  %195 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %196 = %195.0;
  %197 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %200 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%196, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%201, %202) /* ty=Tensor[(5, 8, 5), bool] */
}

def @func_3462(%var_3444: Tensor[(594), uint16]) -> (Tensor[(600), float32], Tensor[(5, 8, 5), float32], Tensor[(594), uint16], Tensor[(5, 8, 5), float32]) {
  %203 = @func_3277() /* ty=Tensor[(600), bool] */;
  %204 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), bool] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(1), int32] */;
  %206 = cast(%203, dtype="float32") /* ty=Tensor[(600), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?), float32] */;
  %208 = cast(%var_3444, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %209 = reshape(%208, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %210 = @func_724(%209) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) */;
  %211 = floor_mod(%206, %207) /* ty=Tensor[(600), float32] */;
  %212 = %210.1;
  %213 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  (%211, %212, %var_3444, %213)
}

def @func_90() -> Tensor[(5, 8, 5), float64] {
  %214 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %214.0
}

def @func_4688(%var_4665: Tensor[(5, 8, 5), bool]) -> Tensor[(5, 8, 5), uint64] {
  %215 = @func_3774() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) */;
  %216 = %215.1;
  %217 = cast(%var_4665, dtype="uint64") /* ty=Tensor[(5, 8, 5), uint64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="uint64") /* ty=Tensor[(5, 8, 5), uint64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%219, %220) /* ty=Tensor[(5, 8, 5), uint64] */
}

def @func_438(%var_433: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) {
  %221 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %223 = cast(%var_433, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %224 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%221, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = cos(%222) /* ty=Tensor[(5, 8, 5), float64] */;
  %228 = less(%225, %226) /* ty=Tensor[(5, 8, 5), bool] */;
  (%227, %228)
}

def @func_4966() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool], Tensor[(7, 12, 3), float32], Tensor[(2160), bool], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint8], Tensor[(200), float32], Tensor[(7, 12, 3), float32]) {
  %229 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %230 = %229.0;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %232 = @func_2225() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %234 = reshape(%233, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), bool] */;
  %235 = @func_3086(%234) /* ty=(Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
  %236 = cast(meta[relay.Constant][9] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %238 = reshape(%236, newshape=[70]) /* ty=Tensor[(70), uint64] */;
  %239 = reshape(%237, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %240 = @func_1368(%238, %239) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %241 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %242 = cast(meta[relay.Constant][11] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %243 = reshape(%242, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %244 = @func_804(%243) /* ty=(Tensor[(5, 8, 5), uint8],) */;
  %245 = cast(meta[relay.Constant][8] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %246 = reshape(%245, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), bool] */;
  %247 = @func_3086(%246) /* ty=(Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
  %248 = sin(%231) /* ty=Tensor[(7, 12, 3), float32] */;
  %249 = %232.1;
  %250 = %235.1;
  %251 = %240.1;
  %252 = %241.0;
  %253 = %244.0;
  %254 = %247.1;
  (%248, %249, %250, meta[relay.Constant][8] /* ty=Tensor[(2160), bool] */, %251, meta[relay.Constant][9] /* ty=Tensor[(70), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(1120), uint64] */, %252, %253, meta[relay.Constant][11] /* ty=Tensor[(200), float32] */, %254)
}

def @func_1761() -> Tensor[(7, 12, 3), float32] {
  @func_1713() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_2510() -> (Tensor[(5, 8, 5), bool],) {
  %255 = @func_764() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) */;
  %256 = %255.1;
  (%256,)
}

def @func_22(%var_3: Tensor[(9, 11, 6), uint16]) -> (Tensor[(9, 11, 6), float32],) {
  %257 = cast(%var_3, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
  %258 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %261 = right_shift(%259, %260) /* ty=Tensor[(9, 11, 6), uint16] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %263 = tan(%262) /* ty=Tensor[(9, 11, 6), float32] */;
  (%263,)
}

def @func_4177(%var_4161: Tensor[(14, 10, 9), bool]) -> Tensor[(14, 10, 9), bool] {
  %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 10, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 10, 9), bool] */;
  %265 = cast(%var_4161, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
  logical_or(%264, %265) /* ty=Tensor[(14, 10, 9), bool] */
}

def @func_5146() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) {
  %266 = cast(meta[relay.Constant][14] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %267 = reshape(%266, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %268 = @func_4092(%267) /* ty=(Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) */;
  %269 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  %270 = %268.0;
  %271 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  (%269, %270, meta[relay.Constant][14] /* ty=Tensor[(2), float32] */, %271)
}

def @func_2781() -> (Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) {
  %272 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
  %273 = %272.1;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(600), float32] */;
  %275 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %277 = tan(%276) /* ty=Tensor[(5, 8, 5), float32] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %279 = @func_1913() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %280 = cos(%274) /* ty=Tensor[(600), float32] */;
  %281 = acosh(%278) /* ty=Tensor[(5, 8, 5), float64] */;
  %282 = %279.0;
  (%280, %281, %282)
}

def @func_1746(%var_1717: Tensor[(5, 8, 5), float32], %var_1725: Tensor[(60, 10), float64], %var_1726: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64], Tensor[(160), float64]) {
  %283 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %284 = cast(%var_1717, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = logical_or(%286, %287) /* ty=Tensor[(5, 8, 5), bool] */;
  %289 = cast(%288, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %290 = cast(%var_1725, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %291 = cast(%var_1726, dtype="float64") /* ty=Tensor[(160), float64] */;
  %292 = reshape(%289, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), bool] */;
  %293 = reshape(%290, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %294 = reshape(%291, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %295 = @func_1090(%292, %293, %294) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) */;
  %296 = %295.1;
  (%288, %296, %var_1725, %var_1726)
}

def @func_3774() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) {
  %297 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %298 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %299 = %297.0;
  %300 = %298.0;
  (%299, %300)
}

def @func_4847() -> Tensor[(7, 12, 3), float32] {
  %301 = @func_3567() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %301.0
}

def @func_140() -> Tensor[(7, 12, 3), float32] {
  %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  sigmoid(%302) /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_5752(%var_5746: Tensor[(600), float32]) -> (Tensor[(2), float32], Tensor[(600), bool]) {
  %303 = @func_5146() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) */;
  %304 = @func_4459() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), float32]) */;
  %305 = %304.1;
  %306 = cast(%var_5746, dtype="bool") /* ty=Tensor[(600), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(1), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(600), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?), bool] */;
  %310 = %303.2;
  %311 = greater_equal(%308, %309) /* ty=Tensor[(600), bool] */;
  (%310, %311)
}

def @func_5564() -> Tensor[(7, 12, 3), float32] {
  %312 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %312.0
}

def @func_4342(%var_4312: Tensor[(5, 8, 5), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), int32], Tensor[(5, 8, 5), uint32], Tensor[(5, 8, 5), float32]) {
  %313 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %314 = %313.0;
  %315 = cast(%var_4312, dtype="int32") /* ty=Tensor[(5, 8, 5), int32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="int32") /* ty=Tensor[(5, 8, 5), int32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 8, 5), bool] */, dtype="uint32") /* ty=Tensor[(5, 8, 5), uint32] */;
  %320 = shape_of(%var_4312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_4312, dtype="uint32") /* ty=Tensor[(5, 8, 5), uint32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %323 = cast(%var_4312, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %324 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %325 = multiply(%317, %318) /* ty=Tensor[(5, 8, 5), int32] */;
  %326 = logical_xor(%321, %322) /* ty=Tensor[(5, 8, 5), uint32] */;
  %327 = log10(%323) /* ty=Tensor[(5, 8, 5), float32] */;
  (%324, %325, %326, %327)
}

def @func_3659() -> Tensor[(7, 12, 3), float32] {
  %328 = @func_2830() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %328.0
}

def @func_1859() -> (Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) {
  %329 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %331 = cast(meta[relay.Constant][17] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %332 = reshape(%330, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float32] */;
  %333 = reshape(%331, newshape=[600]) /* ty=Tensor[(600), bool] */;
  %334 = @func_1256(%332, %333) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) */;
  %335 = cast(%329, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %336 = %334.3;
  %337 = rsqrt(%335) /* ty=Tensor[(7, 12, 3), float32] */;
  (%336, meta[relay.Constant][17] /* ty=Tensor[(600), bool] */, %337)
}

def @func_1495(%var_1486: Tensor[(15, 8, 11), float64]) -> Tensor[(15, 8, 11), bool] {
  %338 = cast(%var_1486, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %339 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(15, 8, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 8, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%340, %341) /* ty=Tensor[(15, 8, 11), bool] */
}

def @func_1281() -> (Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) {
  %342 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
  %343 = cast(meta[relay.Constant][19] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %344 = reshape(%343, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
  %345 = @func_22(%344) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
  %348 = reshape(%347, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
  %349 = @func_22(%348) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %350 = %342.0;
  %351 = %349.0;
  (%350, %346, meta[relay.Constant][19] /* ty=Tensor[(594), uint16] */, %351)
}

def @func_3086(%var_3073: Tensor[(16, 9, 15), bool]) -> (Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
  %352 = cast(%var_3073, dtype="bool") /* ty=Tensor[(16, 9, 15), bool] */;
  %353 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(16, 9, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 9, 15), bool] */, dtype="bool") /* ty=Tensor[(16, 9, 15), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %357 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %358 = logical_or(%354, %355) /* ty=Tensor[(16, 9, 15), bool] */;
  %359 = %356.0;
  %360 = %357.0;
  (%358, %359, %360)
}

def @func_2656() -> (Tensor[(1050), float64], Tensor[(9, 11, 6), float32]) {
  %361 = @func_2629() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) */;
  %362 = %361.3;
  %363 = @func_1468() /* ty=Tensor[(9, 11, 6), float32] */;
  (%362, %363)
}

def @func_5179(%var_5173: Tensor[(200), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint64], Tensor[(200), bool]) {
  %364 = cast(%var_5173, dtype="bool") /* ty=Tensor[(200), bool] */;
  %365 = reshape(%364, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), bool] */;
  %366 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  %367 = @func_4688(%365) /* ty=Tensor[(5, 8, 5), uint64] */;
  (%366, %367, %var_5173)
}

def @main(%var_6013: Tensor[(13, 4, 7), float64]) -> (Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64]) {
  %368 = cast(%var_6013, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %369 = cast(%var_6013, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %370 = erf(%368) /* ty=Tensor[(13, 4, 7), float64] */;
  %371 = sigmoid(%369) /* ty=Tensor[(13, 4, 7), float64] */;
  (%370, %371)
}

def @func_2155() -> Tensor[(600), bool] {
  %372 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
  %372.1
}

def @func_858(%var_854: Tensor[(1120), uint64]) -> (Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
  %373 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 7), float32] */;
  %374 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 7), float32] */;
  %375 = cast(meta[relay.Constant][22] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %376 = reshape(%375, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %377 = @func_263(%376) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) */;
  %378 = cast(meta[relay.Constant][23] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %379 = cast(%var_854, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %380 = reshape(%378, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), uint64] */;
  %381 = reshape(%379, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), uint64] */;
  %382 = @func_188(%380, %381) /* ty=(Tensor[(7, 16, 10), uint64],) */;
  %383 = cosh(%373) /* ty=Tensor[(16, 11, 7), float32] */;
  %384 = atan(%374) /* ty=Tensor[(16, 11, 7), float32] */;
  %385 = %377.2;
  %386 = %382.0;
  (%383, %384, %385, meta[relay.Constant][22] /* ty=Tensor[(594), uint16] */, %386, meta[relay.Constant][23] /* ty=Tensor[(70), uint64] */, %var_854)
}

def @func_804(%var_799: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), uint8],) {
  %387 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %388 = cast(%var_799, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %392 = bitwise_or(%390, %391) /* ty=Tensor[(5, 8, 5), uint8] */;
  (%392,)
}

def @func_1368(%var_1359: Tensor[(70), uint64], %var_1360: Tensor[(1120), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
  %393 = cast(%var_1359, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %394 = cast(%var_1360, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %395 = reshape(%393, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), uint64] */;
  %396 = reshape(%394, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), uint64] */;
  %397 = @func_188(%395, %396) /* ty=(Tensor[(7, 16, 10), uint64],) */;
  %398 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %399 = %397.0;
  (%398, %399, %var_1359, %var_1360)
}

def @func_4838() -> (Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) {
  %400 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 120), bool] */, dtype="bool") /* ty=Tensor[(2, 120), bool] */;
  %401 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 120), bool] */, dtype="bool") /* ty=Tensor[(2, 120), bool] */;
  %402 = reshape(%400, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %403 = reshape(%401, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %404 = @func_3056(%402, %403) /* ty=(Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) */;
  %405 = @func_2416() /* ty=Tensor[(7, 12, 3), float32] */;
  %406 = %404.0;
  (%405, %406, meta[relay.Constant][24] /* ty=Tensor[(2, 120), bool] */)
}

def @func_3277() -> Tensor[(600), bool] {
  @func_2155() /* ty=Tensor[(600), bool] */
}

def @func_3118() -> (Tensor[(5, 8, 5), float64],) {
  %407 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %408 = %407.0;
  (%408,)
}

def @func_3011(%var_2964: Tensor[(5, 210), float64], %var_2982: Tensor[(660, 2), float64], %var_3003: Tensor[(7, 12, 3), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) {
  %409 = @func_2510() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %410 = cast(%var_2964, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
  %411 = cast(%var_2964, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
  %412 = reshape(%410, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %413 = reshape(%411, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %414 = @func_1888(%412, %413) /* ty=(Tensor[(7, 15, 10), float64],) */;
  %415 = cast(%var_2982, dtype="float64") /* ty=Tensor[(660, 2), float64] */;
  %416 = reshape(%415, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %417 = @func_2354(%416) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) */;
  %418 = @func_2805() /* ty=(Tensor[(7, 12, 3), float64],) */;
  %419 = %418.0;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %421 = sqrt(%420) /* ty=Tensor[(7, 12, 3), float64] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %423 = cos(%422) /* ty=Tensor[(7, 12, 3), float64] */;
  %424 = cast(%421, dtype="int64") /* ty=Tensor[(7, 12, 3), int64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int64") /* ty=Tensor[(7, 12, 3), int64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %428 = bitwise_and(%426, %427) /* ty=Tensor[(7, 12, 3), int64] */;
  %429 = cast(%423, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(%var_3003, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %434 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%421, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %437 = %409.0;
  %438 = %414.0;
  %439 = %417.4;
  %440 = greater_equal(%431, %432) /* ty=Tensor[(7, 12, 3), bool] */;
  %441 = mod(%435, %436) /* ty=Tensor[(7, 12, 3), float32] */;
  (%437, %438, %var_2964, %439, %var_2982, %440, %441)
}

def @func_317() -> (Tensor[(7, 12, 3), float32],) {
  %442 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%442,)
}

def @func_1713() -> Tensor[(7, 12, 3), float32] {
  %443 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
  %443.1
}

def @func_188(%var_173: Tensor[(7, 1, 10), uint64], %var_174: Tensor[(7, 16, 10), uint64]) -> (Tensor[(7, 16, 10), uint64],) {
  %444 = cast(%var_173, dtype="uint64") /* ty=Tensor[(7, 1, 10), uint64] */;
  %445 = cast(%var_174, dtype="uint64") /* ty=Tensor[(7, 16, 10), uint64] */;
  %446 = multiply(%444, %445) /* ty=Tensor[(7, 16, 10), uint64] */;
  (%446,)
}

def @func_2393(%var_2369: Tensor[(600), bool]) -> (Tensor[(600), int64],) {
  %447 = @func_2313() /* ty=(Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) */;
  %448 = %447.1;
  %449 = cast(%var_2369, dtype="int64") /* ty=Tensor[(600), int64] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(1), int32] */;
  %451 = cast(%448, dtype="int64") /* ty=Tensor[(600), int64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?), int64] */;
  %453 = bitwise_and(%451, %452) /* ty=Tensor[(600), int64] */;
  (%453,)
}

def @func_2313() -> (Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) {
  %454 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %455 = %454.0;
  %456 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 12, 3), float32] */, dtype="uint64") /* ty=Tensor[(7, 12, 3), uint64] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="uint64") /* ty=Tensor[(7, 12, 3), uint64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %460 = bitwise_xor(%458, %459) /* ty=Tensor[(7, 12, 3), uint64] */;
  %461 = @func_2155() /* ty=Tensor[(600), bool] */;
  (%460, %461)
}

def @func_1913() -> (Tensor[(7, 12, 3), float32],) {
  %462 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%462,)
}

def @func_2717() -> Tensor[(7, 12, 3), float32] {
  @func_1713() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_2805() -> (Tensor[(7, 12, 3), float64],) {
  %463 = @func_2506() /* ty=Tensor[(7, 12, 3), float32] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %465 = acos(%464) /* ty=Tensor[(7, 12, 3), float64] */;
  (%465,)
}

def @func_1468() -> Tensor[(9, 11, 6), float32] {
  %466 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
  %466.3
}

def @func_2116(%var_2083: Tensor[(70), uint64]) -> (Tensor[(7, 12, 3), float64], Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %467 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %469 = cast(%var_2083, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %470 = cast(meta[relay.Constant][26] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %471 = reshape(%469, newshape=[70]) /* ty=Tensor[(70), uint64] */;
  %472 = reshape(%470, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %473 = @func_1368(%471, %472) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %474 = cast(meta[relay.Constant][27] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %475 = reshape(%474, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %476 = @func_1149(%475) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
  %477 = atanh(%468) /* ty=Tensor[(7, 12, 3), float64] */;
  %478 = %473.0;
  %479 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %480 = %476.2;
  (%477, %478, %var_2083, meta[relay.Constant][26] /* ty=Tensor[(1120), uint64] */, %479, %480, meta[relay.Constant][27] /* ty=Tensor[(600), float64] */)
}

def @func_1888(%var_1879: Tensor[(7, 15, 10), float64], %var_1880: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64],) {
  %481 = cast(%var_1880, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %482 = shape_of(%var_1879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%var_1879, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %485 = subtract(%483, %484) /* ty=Tensor[(7, 15, 10), float64] */;
  (%485,)
}

def @func_1585() -> (Tensor[(7, 12, 3), float32],) {
  %486 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %487 = %486.0;
  (%487,)
}

def @func_120() -> Tensor[(5, 8, 5), float32] {
  %488 = @func_90() /* ty=Tensor[(5, 8, 5), float64] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  sigmoid(%489) /* ty=Tensor[(5, 8, 5), float32] */
}

def @func_3336() -> Tensor[(5, 12, 10), float32] {
  %490 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %491 = %490.1;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  asin(%492) /* ty=Tensor[(5, 12, 10), float32] */
}

def @func_2506() -> Tensor[(7, 12, 3), float32] {
  %493 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %493.0
}

def @func_544() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  %494 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %496 = reshape(%495, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %497 = @func_438(%496) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
  %498 = %497.0;
  %499 = cast(%494, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %504 = reshape(%503, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %505 = @func_166(%504) /* ty=(Tensor[(5, 12, 10), float64],) */;
  %506 = %505.0;
  %507 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), float64] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = greater(%501, %502) /* ty=Tensor[(5, 8, 5), bool] */;
  %512 = less(%509, %510) /* ty=Tensor[(5, 12, 10), bool] */;
  (%511, %512)
}

def @func_3393() -> Tensor[(7, 12, 3), float32] {
  %513 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %513.0
}

def @func_3629(%var_3601: Tensor[(6, 14, 3), int16], %var_3602: Tensor[(6, 14, 3), int16], %var_3610: Tensor[(6, 14, 3), int16]) -> (Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), int8]) {
  %514 = cast(%var_3602, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %515 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_3601, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = cast(%var_3610, dtype="int8") /* ty=Tensor[(6, 14, 3), int8] */;
  %519 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_3601, dtype="int8") /* ty=Tensor[(6, 14, 3), int8] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %522 = equal(%516, %517) /* ty=Tensor[(6, 14, 3), bool] */;
  %523 = bitwise_xor(%520, %521) /* ty=Tensor[(6, 14, 3), int8] */;
  (%522, %523)
}

def @func_5296(%var_5267: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), bool],) {
  %524 = @func_1913() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %525 = %524.0;
  %526 = cast(%var_5267, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = less(%528, %529) /* ty=Tensor[(7, 12, 3), bool] */;
  (%530,)
}

def @func_1299(%var_1292: Tensor[(9, 10, 13), float32]) -> (Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 10, 13), int32]) {
  %531 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %532 = reshape(%531, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %533 = @func_989(%532) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %534 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %535 = log(%534) /* ty=Tensor[(9, 10, 13), float32] */;
  %536 = cast(%var_1292, dtype="int32") /* ty=Tensor[(9, 10, 13), int32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="int32") /* ty=Tensor[(9, 10, 13), int32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %540 = %533.1;
  %541 = minimum(%538, %539) /* ty=Tensor[(9, 10, 13), int32] */;
  (%540, meta[relay.Constant][29] /* ty=Tensor[(600), bool] */, %541)
}

def @func_166(%var_162: Tensor[(5, 12, 10), float64]) -> (Tensor[(5, 12, 10), float64],) {
  %542 = cast(%var_162, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %543 = cos(%542) /* ty=Tensor[(5, 12, 10), float64] */;
  (%543,)
}

def @func_3226(%var_3157: Tensor[(16, 7, 12), float32], %var_3186: Tensor[(70), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120, 1), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), float64], Tensor[(60, 10), float64], Tensor[(16, 7, 12), float32]) {
  %544 = cast(%var_3186, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(1120, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1120, 1), uint64] */;
  %546 = reshape(%544, newshape=[70]) /* ty=Tensor[(70), uint64] */;
  %547 = reshape(%545, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %548 = @func_1368(%546, %547) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %551 = reshape(%550, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %552 = @func_438(%551) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
  %553 = @func_2697() /* ty=(Tensor[(60, 10), float64],) */;
  %554 = cast(%var_3157, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %555 = asinh(%554) /* ty=Tensor[(16, 7, 12), float32] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %557 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  %558 = %552.0;
  %559 = %553.0;
  %560 = tan(%556) /* ty=Tensor[(16, 7, 12), float32] */;
  (%549, %var_3186, meta[relay.Constant][31] /* ty=Tensor[(1120, 1), uint64] */, %557, %558, %559, %560)
}

def @func_3308() -> Tensor[(7, 12, 3), float64] {
  %561 = @func_2805() /* ty=(Tensor[(7, 12, 3), float64],) */;
  %561.0
}

def @func_3729() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) {
  %562 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %563 = %562.1;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %565 = sqrt(%564) /* ty=Tensor[(5, 12, 10), float64] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %567 = asinh(%566) /* ty=Tensor[(5, 12, 10), float64] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %569 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
  %570 = acos(%568) /* ty=Tensor[(5, 12, 10), float64] */;
  %571 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  (%569, %570, %571)
}

def @func_1633(%var_1630: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %572 = cast(%var_1630, dtype="float64") /* ty=Tensor[(600), float64] */;
  %573 = reshape(%572, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %574 = @func_1149(%573) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
  %575 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %576 = %574.2;
  (%575, %576, %var_1630)
}

def @func_3056(%var_3045: Tensor[(3, 16, 5), bool], %var_3046: Tensor[(3, 16, 5), bool]) -> (Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) {
  %577 = cast(%var_3046, dtype="bool") /* ty=Tensor[(3, 16, 5), bool] */;
  %578 = shape_of(%var_3045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_3045, dtype="bool") /* ty=Tensor[(3, 16, 5), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = @func_2594() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %582 = logical_or(%579, %580) /* ty=Tensor[(3, 16, 5), bool] */;
  %583 = %581.0;
  (%582, %583)
}

def @func_5311(%var_5307: Tensor[(4, 16, 16), bool]) -> Tensor[(4, 16, 16), bool] {
  %584 = cast(%var_5307, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %585 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(4, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%586, %587) /* ty=Tensor[(4, 16, 16), bool] */
}

def @func_989(%var_955: Tensor[(5, 12, 10), bool]) -> (Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) {
  %588 = cast(meta[relay.Constant][33] /* ty=Tensor[(280, 4), uint64] */, dtype="uint64") /* ty=Tensor[(280, 4), uint64] */;
  %589 = reshape(%588, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %590 = @func_858(%589) /* ty=(Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %591 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %592 = %591.1;
  %593 = cast(%var_955, dtype="uint16") /* ty=Tensor[(5, 12, 10), uint16] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="uint16") /* ty=Tensor[(5, 12, 10), uint16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %597 = subtract(%595, %596) /* ty=Tensor[(5, 12, 10), uint16] */;
  %598 = cast(%592, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %602 = greater_equal(%600, %601) /* ty=Tensor[(5, 12, 10), bool] */;
  %603 = cast(%597, dtype="int16") /* ty=Tensor[(5, 12, 10), int16] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="int16") /* ty=Tensor[(5, 12, 10), int16] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %607 = %590.6;
  %608 = add(%605, %606) /* ty=Tensor[(5, 12, 10), int16] */;
  (%607, meta[relay.Constant][33] /* ty=Tensor[(280, 4), uint64] */, %608)
}

def @func_4780(%var_4759: Tensor[(9, 6, 12), uint8], %var_4760: Tensor[(9, 6, 12), uint8]) -> (Tensor[(9, 6, 12), uint8], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 6, 12), float64]) {
  %609 = cast(%var_4760, dtype="uint8") /* ty=Tensor[(9, 6, 12), uint8] */;
  %610 = shape_of(%var_4759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_4759, dtype="uint8") /* ty=Tensor[(9, 6, 12), uint8] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %613 = cast(meta[relay.Constant][34] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %614 = reshape(%613, newshape=[600, 1]) /* ty=Tensor[(600, 1), bool] */;
  %615 = @func_4028(%614) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) */;
  %616 = cast(%var_4760, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %617 = bitwise_or(%611, %612) /* ty=Tensor[(9, 6, 12), uint8] */;
  %618 = %615.1;
  %619 = sinh(%616) /* ty=Tensor[(9, 6, 12), float64] */;
  (%617, %618, meta[relay.Constant][34] /* ty=Tensor[(600), bool] */, %619)
}

def @func_5078(%var_5059: Tensor[(12, 10, 7), uint16]) -> (Tensor[(12, 10, 7), bool], Tensor[(3, 16, 5), bool]) {
  %620 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %621 = rsqrt(%620) /* ty=Tensor[(12, 10, 7), float32] */;
  %622 = cast(%621, dtype="uint16") /* ty=Tensor[(12, 10, 7), uint16] */;
  %623 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 7), float32] */, dtype="uint16") /* ty=Tensor[(12, 10, 7), uint16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %626 = maximum(%624, %625) /* ty=Tensor[(12, 10, 7), uint16] */;
  %627 = cast(%var_5059, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = @func_4838() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) */;
  %632 = logical_and(%629, %630) /* ty=Tensor[(12, 10, 7), bool] */;
  %633 = %631.1;
  (%632, %633)
}

def @func_3567() -> (Tensor[(7, 12, 3), float32],) {
  %634 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  (%634,)
}

def @func_5522(%var_5478: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), bool], Tensor[(200), bool], Tensor[(5, 12, 10), float32], Tensor[(5, 12, 10), float64]) {
  %635 = @func_3336() /* ty=Tensor[(5, 12, 10), float32] */;
  %636 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 12, 10), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = cast(meta[relay.Constant][37] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %641 = reshape(%640, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %642 = @func_804(%641) /* ty=(Tensor[(5, 8, 5), uint8],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %645 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(200), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(meta[relay.Constant][37] /* ty=Tensor[(200), float32] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), bool] */;
  %648 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %649 = shape_of(%var_5478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_5478, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %652 = cast(%var_5478, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %653 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%635, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = equal(%654, %655) /* ty=Tensor[(5, 12, 10), bool] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %658 = logical_and(%638, %639) /* ty=Tensor[(5, 12, 10), bool] */;
  %659 = less(%646, %647) /* ty=Tensor[(200), bool] */;
  %660 = multiply(%650, %651) /* ty=Tensor[(5, 12, 10), float32] */;
  %661 = atan(%657) /* ty=Tensor[(5, 12, 10), float64] */;
  (%658, %659, %660, %661)
}

def @func_4092(%var_4088: Tensor[(2), float32]) -> (Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) {
  %662 = @func_3729() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) */;
  %663 = %662.1;
  %664 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %668 = cast(%var_4088, dtype="float32") /* ty=Tensor[(2), float32] */;
  %669 = reshape(%668, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float32] */;
  %670 = @func_1945(%669) /* ty=(Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
  %671 = power(%666, %667) /* ty=Tensor[(5, 12, 10), float64] */;
  %672 = %670.2;
  (%671, %672, %var_4088)
}

def @func_592() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) {
  %673 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %674 = %673.0;
  %675 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%674, %675)
}

def @func_2354(%var_2342: Tensor[(1320), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) {
  %676 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %677 = cast(%var_2342, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %678 = reshape(%677, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %679 = %676.0;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %681 = reshape(%680, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %682 = @func_804(%681) /* ty=(Tensor[(5, 8, 5), uint8],) */;
  %683 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %684 = @func_1495(%678) /* ty=Tensor[(15, 8, 11), bool] */;
  %685 = %682.0;
  %686 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
  (%683, %679, %684, %var_2342, %685, %686)
}

def @func_47() -> (Tensor[(5, 8, 5), float64],) {
  %687 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %688 = exp(%687) /* ty=Tensor[(5, 8, 5), float64] */;
  (%688,)
}

def @func_2629() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) {
  %689 = cast(meta[relay.Constant][40] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %690 = cast(meta[relay.Constant][40] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %691 = reshape(%689, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %692 = reshape(%690, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %693 = @func_1888(%691, %692) /* ty=(Tensor[(7, 15, 10), float64],) */;
  %694 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %695 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  %696 = %693.0;
  (%694, %695, %696, meta[relay.Constant][40] /* ty=Tensor[(1050), float64] */)
}

def @func_764() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) {
  %697 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
  %698 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %699 = %698.1;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %701 = erf(%700) /* ty=Tensor[(5, 12, 10), float64] */;
  %702 = cast(%699, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %706 = %697.0;
  %707 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %708 = floor_mod(%704, %705) /* ty=Tensor[(5, 12, 10), float64] */;
  (%706, %707, %708)
}

def @func_905(%var_895: Tensor[(4, 8, 5), float64], %var_896: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64],) {
  %709 = cast(%var_896, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %710 = shape_of(%var_895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_895, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %713 = mod(%711, %712) /* ty=Tensor[(4, 8, 5), float64] */;
  (%713,)
}

def @func_3553(%var_3517: Tensor[(600), bool], %var_3540: Tensor[(1320), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), uint64], Tensor[(5, 12, 10), int16], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), bool], Tensor[(1050), float64], Tensor[(1320), float64]) {
  %714 = @func_2313() /* ty=(Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) */;
  %715 = cast(%var_3517, dtype="bool") /* ty=Tensor[(600), bool] */;
  %716 = reshape(%715, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %717 = @func_989(%716) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %718 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %719 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
  %720 = cast(meta[relay.Constant][41] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %721 = cast(%var_3540, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %722 = %718.0;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %724 = reshape(%720, newshape=[5, 210]) /* ty=Tensor[(5, 210), float64] */;
  %725 = reshape(%721, newshape=[660, 2]) /* ty=Tensor[(660, 2), float64] */;
  %726 = reshape(%723, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
  %727 = @func_3011(%724, %725, %726) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) */;
  %728 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  %729 = %714.0;
  %730 = %717.2;
  %731 = %719.1;
  %732 = %727.5;
  (%728, %729, %730, %var_3517, %722, %731, %732, meta[relay.Constant][41] /* ty=Tensor[(1050), float64] */, %var_3540)
}

def @func_1256(%var_1231: Tensor[(7, 12, 3), float32], %var_1243: Tensor[(600), bool]) -> (Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) {
  %733 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %734 = %733.0;
  %735 = cast(%var_1231, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %739 = cast(%var_1243, dtype="bool") /* ty=Tensor[(600), bool] */;
  %740 = reshape(%739, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %741 = @func_989(%740) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %742 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
  %743 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %744 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %745 = %744.0;
  %746 = cast(%745, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %747 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%743, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = power(%737, %738) /* ty=Tensor[(7, 12, 3), float64] */;
  %751 = %741.1;
  %752 = %742.1;
  %753 = logical_or(%748, %749) /* ty=Tensor[(7, 12, 3), bool] */;
  (%750, %751, %var_1243, %752, %753)
}

def @func_2225() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  %754 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %755 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %756 = %754.0;
  %757 = %755.1;
  (%756, %757)
}

def @func_3899() -> (Tensor[(7, 12, 3), float32],) {
  %758 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%758,)
}

def @func_3795() -> (Tensor[(7, 12, 3), float32],) {
  %759 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  (%759,)
}

def @func_1149(%var_1140: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %760 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %761 = %760.0;
  %762 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = logical_and(%764, %765) /* ty=Tensor[(7, 12, 3), bool] */;
  %767 = cast(%766, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %768 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %771 = divide(%769, %770) /* ty=Tensor[(7, 12, 3), float32] */;
  %772 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 3), float32] */, dtype="uint8") /* ty=Tensor[(7, 12, 3), uint8] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="uint8") /* ty=Tensor[(7, 12, 3), uint8] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %776 = cast(%var_1140, dtype="float64") /* ty=Tensor[(600), float64] */;
  %777 = reshape(%776, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %778 = @func_166(%777) /* ty=(Tensor[(5, 12, 10), float64],) */;
  %779 = maximum(%774, %775) /* ty=Tensor[(7, 12, 3), uint8] */;
  %780 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %781 = %778.0;
  (%779, %780, %781, %var_1140)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_25(%var_23: Tensor[(9, 11, 6), uint16]) -> (Tensor[(9, 11, 6), float32],) {
  @func_22(%var_23) /* ty=(Tensor[(9, 11, 6), float32],) */
}

def @func_4838() -> (Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 120), bool] */, dtype="bool") /* ty=Tensor[(2, 120), bool] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 120), bool] */, dtype="bool") /* ty=Tensor[(2, 120), bool] */;
  %2 = reshape(%0, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %3 = reshape(%1, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %4 = @func_3056(%2, %3) /* ty=(Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) */;
  %5 = @func_2416() /* ty=Tensor[(7, 12, 3), float32] */;
  %6 = %4.0;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(2, 120), bool] */)
}

def @func_5645() -> (Tensor[(7, 12, 3), float64], Tensor[(9, 11, 6), int16]) {
  @func_5643() /* ty=(Tensor[(7, 12, 3), float64], Tensor[(9, 11, 6), int16]) */
}

def @func_992(%var_990: Tensor[(5, 12, 10), bool]) -> (Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) {
  @func_989(%var_990) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */
}

def @func_2393(%var_2369: Tensor[(600), bool]) -> (Tensor[(600), int64],) {
  %7 = @func_2313() /* ty=(Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) */;
  %8 = %7.1;
  %9 = cast(%var_2369, dtype="int64") /* ty=Tensor[(600), int64] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = cast(%8, dtype="int64") /* ty=Tensor[(600), int64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), int64] */;
  %13 = bitwise_and(%11, %12) /* ty=Tensor[(600), int64] */;
  (%13,)
}

def @func_3729() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) {
  %14 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %15 = %14.1;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %17 = sqrt(%16) /* ty=Tensor[(5, 12, 10), float64] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %19 = asinh(%18) /* ty=Tensor[(5, 12, 10), float64] */;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %21 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
  %22 = acos(%20) /* ty=Tensor[(5, 12, 10), float64] */;
  %23 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  (%21, %22, %23)
}

def @func_5421() -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(4, 60), bool]) {
  @func_5419() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(4, 60), bool]) */
}

def @func_3278() -> Tensor[(600), bool] {
  %24 = fn () -> Tensor[(600), bool] {
    @func_2155() /* ty=Tensor[(600), bool] */
  };
  %24() /* ty=Tensor[(600), bool] */
}

def @func_1860() -> (Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) {
  %34 = fn () -> (Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) {
    %25 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
    %26 = cast(%25, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %28 = reshape(%26, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float32] */;
    %29 = reshape(%27, newshape=[600]) /* ty=Tensor[(600), bool] */;
    %30 = @func_1256(%28, %29) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) */;
    %31 = cast(%25, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %32 = %30.3;
    %33 = rsqrt(%31) /* ty=Tensor[(7, 12, 3), float32] */;
    (%32, meta[relay.Constant][1] /* ty=Tensor[(600), bool] */, %33)
  };
  %34() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */
}

def @func_2357(%var_2355: Tensor[(1320), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) {
  @func_2354(%var_2355) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) */
}

def @func_5419() -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(4, 60), bool]) {
  %35 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 60), bool] */, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 60), bool] */, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %38 = reshape(%36, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %39 = reshape(%37, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), bool] */;
  %40 = @func_3056(%38, %39) /* ty=(Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) */;
  %41 = %35.0;
  %42 = @func_3659() /* ty=Tensor[(7, 12, 3), float32] */;
  %43 = %40.0;
  (%41, %42, %43, meta[relay.Constant][2] /* ty=Tensor[(4, 60), bool] */)
}

def @func_5990() -> (Tensor[(7, 12, 3), int32],) {
  %50 = fn () -> (Tensor[(7, 12, 3), int32],) {
    %44 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
    %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
    %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%44, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %49 = logical_xor(%47, %48) /* ty=Tensor[(7, 12, 3), int32] */;
    (%49,)
  };
  %50() /* ty=(Tensor[(7, 12, 3), int32],) */
}

def @func_5298(%var_5297: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), bool],) {
  %58 = fn (%var_5267: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), bool],) {
    %51 = @func_1913() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %52 = %51.0;
    %53 = cast(%var_5267, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%52, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %57 = less(%55, %56) /* ty=Tensor[(7, 12, 3), bool] */;
    (%57,)
  };
  %58(%var_5297) /* ty=(Tensor[(7, 12, 3), bool],) */
}

def @func_594() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) {
  @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */
}

def @func_4220() -> Tensor[(5, 8, 5), bool] {
  %60 = fn () -> Tensor[(5, 8, 5), bool] {
    %59 = @func_2594() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %59.0
  };
  %60() /* ty=Tensor[(5, 8, 5), bool] */
}

def @func_3567() -> (Tensor[(7, 12, 3), float32],) {
  %61 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  (%61,)
}

def @func_4179(%var_4178: Tensor[(14, 10, 9), bool]) -> Tensor[(14, 10, 9), bool] {
  %64 = fn (%var_4161: Tensor[(14, 10, 9), bool]) -> Tensor[(14, 10, 9), bool] {
    %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 10, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 10, 9), bool] */;
    %63 = cast(%var_4161, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
    logical_or(%62, %63) /* ty=Tensor[(14, 10, 9), bool] */
  };
  %64(%var_4178) /* ty=Tensor[(14, 10, 9), bool] */
}

def @func_5722(%var_5720: Tensor[(60, 10), float64]) -> (Tensor[(60, 10), float64], Tensor[(280, 4), uint64], Tensor[(60, 10), float32]) {
  @func_5719(%var_5720) /* ty=(Tensor[(60, 10), float64], Tensor[(280, 4), uint64], Tensor[(60, 10), float32]) */
}

def @func_1914() -> (Tensor[(7, 12, 3), float32],) {
  %66 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %65 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    (%65,)
  };
  %66() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_2157() -> Tensor[(600), bool] {
  @func_2155() /* ty=Tensor[(600), bool] */
}

def @func_5755(%var_5753: Tensor[(600), float32]) -> (Tensor[(2), float32], Tensor[(600), bool]) {
  @func_5752(%var_5753) /* ty=(Tensor[(2), float32], Tensor[(600), bool]) */
}

def @main(%var_6013: Tensor[(13, 4, 7), float64]) -> (Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64]) {
  %67 = cast(%var_6013, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %68 = cast(%var_6013, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %69 = erf(%67) /* ty=Tensor[(13, 4, 7), float64] */;
  %70 = sigmoid(%68) /* ty=Tensor[(13, 4, 7), float64] */;
  (%69, %70)
}

def @func_764() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) {
  %71 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
  %72 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %73 = %72.1;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %75 = erf(%74) /* ty=Tensor[(5, 12, 10), float64] */;
  %76 = cast(%73, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %80 = %71.0;
  %81 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %82 = floor_mod(%78, %79) /* ty=Tensor[(5, 12, 10), float64] */;
  (%80, %81, %82)
}

def @func_2656() -> (Tensor[(1050), float64], Tensor[(9, 11, 6), float32]) {
  %83 = @func_2629() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) */;
  %84 = %83.3;
  %85 = @func_1468() /* ty=Tensor[(9, 11, 6), float32] */;
  (%84, %85)
}

def @func_5643() -> (Tensor[(7, 12, 3), float64], Tensor[(9, 11, 6), int16]) {
  %86 = @func_1468() /* ty=Tensor[(9, 11, 6), float32] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %88 = atan(%87) /* ty=Tensor[(9, 11, 6), float32] */;
  %89 = cast(%86, dtype="int16") /* ty=Tensor[(9, 11, 6), int16] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="int16") /* ty=Tensor[(9, 11, 6), int16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %93 = @func_3308() /* ty=Tensor[(7, 12, 3), float64] */;
  %94 = bitwise_and(%91, %92) /* ty=Tensor[(9, 11, 6), int16] */;
  (%93, %94)
}

def @func_1750(%var_1747: Tensor[(5, 8, 5), float32], %var_1748: Tensor[(60, 10), float64], %var_1749: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64], Tensor[(160), float64]) {
  %109 = fn (%var_1717: Tensor[(5, 8, 5), float32], %var_1725: Tensor[(60, 10), float64], %var_1726: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64], Tensor[(160), float64]) {
    %95 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
    %96 = cast(%var_1717, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %100 = logical_or(%98, %99) /* ty=Tensor[(5, 8, 5), bool] */;
    %101 = cast(%100, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %102 = cast(%var_1725, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
    %103 = cast(%var_1726, dtype="float64") /* ty=Tensor[(160), float64] */;
    %104 = reshape(%101, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), bool] */;
    %105 = reshape(%102, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %106 = reshape(%103, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %107 = @func_1090(%104, %105, %106) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) */;
    %108 = %107.1;
    (%100, %108, %var_1725, %var_1726)
  };
  %109(%var_1747, %var_1748, %var_1749) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64], Tensor[(160), float64]) */
}

def @func_5078(%var_5059: Tensor[(12, 10, 7), uint16]) -> (Tensor[(12, 10, 7), bool], Tensor[(3, 16, 5), bool]) {
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %111 = rsqrt(%110) /* ty=Tensor[(12, 10, 7), float32] */;
  %112 = cast(%111, dtype="uint16") /* ty=Tensor[(12, 10, 7), uint16] */;
  %113 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 7), float32] */, dtype="uint16") /* ty=Tensor[(12, 10, 7), uint16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %116 = maximum(%114, %115) /* ty=Tensor[(12, 10, 7), uint16] */;
  %117 = cast(%var_5059, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = @func_4838() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) */;
  %122 = logical_and(%119, %120) /* ty=Tensor[(12, 10, 7), bool] */;
  %123 = %121.1;
  (%122, %123)
}

def @func_308() -> (Tensor[(5, 8, 5), bool],) {
  %125 = fn () -> (Tensor[(5, 8, 5), bool],) {
    %124 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
    (%124,)
  };
  %125() /* ty=(Tensor[(5, 8, 5), bool],) */
}

def @func_5314(%var_5312: Tensor[(4, 16, 16), bool]) -> Tensor[(4, 16, 16), bool] {
  @func_5311(%var_5312) /* ty=Tensor[(4, 16, 16), bool] */
}

def @func_3844() -> (Tensor[(600), float32],) {
  @func_3842() /* ty=(Tensor[(600), float32],) */
}

def @func_1495(%var_1486: Tensor[(15, 8, 11), float64]) -> Tensor[(15, 8, 11), bool] {
  %126 = cast(%var_1486, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %127 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 8, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 8, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%128, %129) /* ty=Tensor[(15, 8, 11), bool] */
}

def @func_2658() -> (Tensor[(1050), float64], Tensor[(9, 11, 6), float32]) {
  @func_2656() /* ty=(Tensor[(1050), float64], Tensor[(9, 11, 6), float32]) */
}

def @func_592() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) {
  %130 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %131 = %130.0;
  %132 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  (%131, %132)
}

def @func_3015(%var_3012: Tensor[(5, 210), float64], %var_3013: Tensor[(660, 2), float64], %var_3014: Tensor[(7, 12, 3), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) {
  %166 = fn (%var_2964: Tensor[(5, 210), float64], %var_2982: Tensor[(660, 2), float64], %var_3003: Tensor[(7, 12, 3), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) {
    %133 = @func_2510() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %134 = cast(%var_2964, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
    %135 = cast(%var_2964, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
    %136 = reshape(%134, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %137 = reshape(%135, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %138 = @func_1888(%136, %137) /* ty=(Tensor[(7, 15, 10), float64],) */;
    %139 = cast(%var_2982, dtype="float64") /* ty=Tensor[(660, 2), float64] */;
    %140 = reshape(%139, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %141 = @func_2354(%140) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) */;
    %142 = @func_2805() /* ty=(Tensor[(7, 12, 3), float64],) */;
    %143 = %142.0;
    %144 = cast(%143, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %145 = sqrt(%144) /* ty=Tensor[(7, 12, 3), float64] */;
    %146 = cast(%145, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %147 = cos(%146) /* ty=Tensor[(7, 12, 3), float64] */;
    %148 = cast(%145, dtype="int64") /* ty=Tensor[(7, 12, 3), int64] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%147, dtype="int64") /* ty=Tensor[(7, 12, 3), int64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %152 = bitwise_and(%150, %151) /* ty=Tensor[(7, 12, 3), int64] */;
    %153 = cast(%147, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%152, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %157 = cast(%var_3003, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %158 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%145, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %161 = %133.0;
    %162 = %138.0;
    %163 = %141.4;
    %164 = greater_equal(%155, %156) /* ty=Tensor[(7, 12, 3), bool] */;
    %165 = mod(%159, %160) /* ty=Tensor[(7, 12, 3), float32] */;
    (%161, %162, %var_2964, %163, %var_2982, %164, %165)
  };
  %166(%var_3012, %var_3013, %var_3014) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) */
}

def @func_49() -> (Tensor[(5, 8, 5), float64],) {
  @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */
}

def @func_1259(%var_1257: Tensor[(7, 12, 3), float32], %var_1258: Tensor[(600), bool]) -> (Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) {
  %188 = fn (%var_1231: Tensor[(7, 12, 3), float32], %var_1243: Tensor[(600), bool]) -> (Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) {
    %167 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %168 = %167.0;
    %169 = cast(%var_1231, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%168, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %173 = cast(%var_1243, dtype="bool") /* ty=Tensor[(600), bool] */;
    %174 = reshape(%173, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
    %175 = @func_989(%174) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
    %176 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
    %177 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    %178 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %179 = %178.0;
    %180 = cast(%179, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %181 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
    %182 = cast(%177, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %184 = power(%171, %172) /* ty=Tensor[(7, 12, 3), float64] */;
    %185 = %175.1;
    %186 = %176.1;
    %187 = logical_or(%182, %183) /* ty=Tensor[(7, 12, 3), bool] */;
    (%184, %185, %var_1243, %186, %187)
  };
  %188(%var_1257, %var_1258) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), bool]) */
}

def @func_4092(%var_4088: Tensor[(2), float32]) -> (Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) {
  %189 = @func_3729() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) */;
  %190 = %189.1;
  %191 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = cast(%var_4088, dtype="float32") /* ty=Tensor[(2), float32] */;
  %196 = reshape(%195, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float32] */;
  %197 = @func_1945(%196) /* ty=(Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
  %198 = power(%193, %194) /* ty=Tensor[(5, 12, 10), float64] */;
  %199 = %197.2;
  (%198, %199, %var_4088)
}

def @func_3634(%var_3631: Tensor[(6, 14, 3), int16], %var_3632: Tensor[(6, 14, 3), int16], %var_3633: Tensor[(6, 14, 3), int16]) -> (Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), int8]) {
  @func_3629(%var_3631, %var_3632, %var_3633) /* ty=(Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), int8]) */
}

def @func_5182(%var_5180: Tensor[(200), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint64], Tensor[(200), bool]) {
  @func_5179(%var_5180) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint64], Tensor[(200), bool]) */
}

def @func_2595() -> (Tensor[(5, 8, 5), bool],) {
  %202 = fn () -> (Tensor[(5, 8, 5), bool],) {
    %200 = @func_764() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) */;
    %201 = %200.1;
    (%201,)
  };
  %202() /* ty=(Tensor[(5, 8, 5), bool],) */
}

def @func_3731() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) {
  @func_3729() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32]) */
}

def @func_2698() -> (Tensor[(60, 10), float64],) {
  %205 = fn () -> (Tensor[(60, 10), float64],) {
    %203 = @func_1546() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) */;
    %204 = %203.2;
    (%204,)
  };
  %205() /* ty=(Tensor[(60, 10), float64],) */
}

def @func_5895() -> Tensor[(7, 12, 3), float32] {
  @func_5893() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_265(%var_264: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) {
  %218 = fn (%var_261: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) {
    %206 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
    %207 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
    %208 = %207.0;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %210 = sin(%209) /* ty=Tensor[(5, 8, 5), float32] */;
    %211 = cast(%210, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
    %212 = cast(%var_261, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %213 = reshape(%212, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
    %214 = @func_22(%213) /* ty=(Tensor[(9, 11, 6), float32],) */;
    %215 = %206.0;
    %216 = log2(%211) /* ty=Tensor[(5, 8, 5), float64] */;
    %217 = %214.0;
    (%215, %216, %217, %var_261)
  };
  %218(%var_264) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) */
}

def @func_3842() -> (Tensor[(600), float32],) {
  %219 = @func_2781() /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) */;
  %220 = %219.0;
  (%220,)
}

def @func_766() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) {
  @func_764() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) */
}

def @func_5893() -> Tensor[(7, 12, 3), float32] {
  %221 = @func_3567() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %221.0
}

def @func_989(%var_955: Tensor[(5, 12, 10), bool]) -> (Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) {
  %222 = cast(meta[relay.Constant][8] /* ty=Tensor[(280, 4), uint64] */, dtype="uint64") /* ty=Tensor[(280, 4), uint64] */;
  %223 = reshape(%222, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %224 = @func_858(%223) /* ty=(Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %225 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %226 = %225.1;
  %227 = cast(%var_955, dtype="uint16") /* ty=Tensor[(5, 12, 10), uint16] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint16") /* ty=Tensor[(5, 12, 10), uint16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %231 = subtract(%229, %230) /* ty=Tensor[(5, 12, 10), uint16] */;
  %232 = cast(%226, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = greater_equal(%234, %235) /* ty=Tensor[(5, 12, 10), bool] */;
  %237 = cast(%231, dtype="int16") /* ty=Tensor[(5, 12, 10), int16] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="int16") /* ty=Tensor[(5, 12, 10), int16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %241 = %224.6;
  %242 = add(%239, %240) /* ty=Tensor[(5, 12, 10), int16] */;
  (%241, meta[relay.Constant][8] /* ty=Tensor[(280, 4), uint64] */, %242)
}

def @func_4840() -> (Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) {
  @func_4838() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(3, 16, 5), bool], Tensor[(2, 120), bool]) */
}

def @func_3394() -> Tensor[(7, 12, 3), float32] {
  %244 = fn () -> Tensor[(7, 12, 3), float32] {
    %243 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %243.0
  };
  %244() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_1547() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) {
  %250 = fn () -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) {
    %245 = cast(meta[relay.Constant][9] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
    %246 = reshape(%245, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %247 = @func_1149(%246) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
    %248 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    %249 = %247.2;
    (%248, %249, meta[relay.Constant][9] /* ty=Tensor[(60, 10), float64] */)
  };
  %250() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(60, 10), float64]) */
}

def @func_1094(%var_1091: Tensor[(5, 8, 5), bool], %var_1092: Tensor[(600), float64], %var_1093: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) {
  %268 = fn (%var_1064: Tensor[(5, 8, 5), bool], %var_1071: Tensor[(600), float64], %var_1084: Tensor[(160), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) {
    %251 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %252 = %251.0;
    %253 = cast(%var_1064, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%252, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = cast(%var_1071, dtype="float64") /* ty=Tensor[(600), float64] */;
    %258 = reshape(%257, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
    %259 = @func_166(%258) /* ty=(Tensor[(5, 12, 10), float64],) */;
    %260 = cast(%var_1084, dtype="float64") /* ty=Tensor[(160), float64] */;
    %261 = cast(%var_1084, dtype="float64") /* ty=Tensor[(160), float64] */;
    %262 = reshape(%260, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), float64] */;
    %263 = reshape(%261, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), float64] */;
    %264 = @func_905(%262, %263) /* ty=(Tensor[(4, 8, 5), float64],) */;
    %265 = less_equal(%255, %256) /* ty=Tensor[(5, 8, 5), bool] */;
    %266 = %259.0;
    %267 = %264.0;
    (%265, %266, %var_1071, %267, %var_1084)
  };
  %268(%var_1091, %var_1092, %var_1093) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64], Tensor[(4, 8, 5), float64], Tensor[(160), float64]) */
}

def @func_5311(%var_5307: Tensor[(4, 16, 16), bool]) -> Tensor[(4, 16, 16), bool] {
  %269 = cast(%var_5307, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %270 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%271, %272) /* ty=Tensor[(4, 16, 16), bool] */
}

def @func_1282() -> (Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) {
  %283 = fn () -> (Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) {
    %273 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
    %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %275 = reshape(%274, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
    %276 = @func_22(%275) /* ty=(Tensor[(9, 11, 6), float32],) */;
    %277 = %276.0;
    %278 = cast(%277, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
    %279 = reshape(%278, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
    %280 = @func_22(%279) /* ty=(Tensor[(9, 11, 6), float32],) */;
    %281 = %273.0;
    %282 = %280.0;
    (%281, %277, meta[relay.Constant][11] /* ty=Tensor[(594), uint16] */, %282)
  };
  %283() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */
}

def @func_1302(%var_1300: Tensor[(9, 10, 13), float32]) -> (Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 10, 13), int32]) {
  @func_1299(%var_1300) /* ty=(Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 10, 13), int32]) */
}

def @func_2831() -> (Tensor[(7, 12, 3), float32],) {
  %285 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %284 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_2571(%var_2569: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), float64], Tensor[(600), float32]) {
  @func_2568(%var_2569) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(600), float32]) */
}

def @func_22(%var_3: Tensor[(9, 11, 6), uint16]) -> (Tensor[(9, 11, 6), float32],) {
  %286 = cast(%var_3, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
  %287 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(9, 11, 6), uint16] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %290 = right_shift(%288, %289) /* ty=Tensor[(9, 11, 6), uint16] */;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %292 = tan(%291) /* ty=Tensor[(9, 11, 6), float32] */;
  (%292,)
}

def @func_4461() -> (Tensor[(7, 12, 3), float32], Tensor[(600), float32]) {
  @func_4459() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), float32]) */
}

def @func_302() -> Tensor[(5, 8, 5), bool] {
  %301 = fn () -> Tensor[(5, 8, 5), bool] {
    %293 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
    %294 = %293.0;
    %295 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
    %296 = %295.0;
    %297 = cast(%296, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %298 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%294, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%299, %300) /* ty=Tensor[(5, 8, 5), bool] */
  };
  %301() /* ty=Tensor[(5, 8, 5), bool] */
}

def @func_1299(%var_1292: Tensor[(9, 10, 13), float32]) -> (Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 10, 13), int32]) {
  %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %303 = reshape(%302, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %304 = @func_989(%303) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %305 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %306 = log(%305) /* ty=Tensor[(9, 10, 13), float32] */;
  %307 = cast(%var_1292, dtype="int32") /* ty=Tensor[(9, 10, 13), int32] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="int32") /* ty=Tensor[(9, 10, 13), int32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %311 = %304.1;
  %312 = minimum(%309, %310) /* ty=Tensor[(9, 10, 13), int32] */;
  (%311, meta[relay.Constant][13] /* ty=Tensor[(600), bool] */, %312)
}

def @func_5179(%var_5173: Tensor[(200), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint64], Tensor[(200), bool]) {
  %313 = cast(%var_5173, dtype="bool") /* ty=Tensor[(200), bool] */;
  %314 = reshape(%313, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), bool] */;
  %315 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
  %316 = @func_4688(%314) /* ty=Tensor[(5, 8, 5), uint64] */;
  (%315, %316, %var_5173)
}

def @func_438(%var_433: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) {
  %317 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %319 = cast(%var_433, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %320 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%317, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cos(%318) /* ty=Tensor[(5, 8, 5), float64] */;
  %324 = less(%321, %322) /* ty=Tensor[(5, 8, 5), bool] */;
  (%323, %324)
}

def @func_3937(%var_3920: Tensor[(594), uint16]) -> (Tensor[(594), float32], Tensor[(7, 12, 3), float32]) {
  %325 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
  %326 = %325.2;
  %327 = cast(%var_3920, dtype="float32") /* ty=Tensor[(594), float32] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(1), int32] */;
  %329 = cast(%326, dtype="float32") /* ty=Tensor[(594), float32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?), float32] */;
  %331 = add(%329, %330) /* ty=Tensor[(594), float32] */;
  %332 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  (%331, %332)
}

def @func_1498(%var_1496: Tensor[(15, 8, 11), float64]) -> Tensor[(15, 8, 11), bool] {
  @func_1495(%var_1496) /* ty=Tensor[(15, 8, 11), bool] */
}

def @func_1714() -> Tensor[(7, 12, 3), float32] {
  %334 = fn () -> Tensor[(7, 12, 3), float32] {
    %333 = @func_592() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32]) */;
    %333.1
  };
  %334() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_2807() -> (Tensor[(7, 12, 3), float64],) {
  @func_2805() /* ty=(Tensor[(7, 12, 3), float64],) */
}

def @func_1947(%var_1946: Tensor[(2, 1, 1), float32]) -> (Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
  %341 = fn (%var_1922: Tensor[(2, 1, 1), float32]) -> (Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
    %335 = cast(%var_1922, dtype="float32") /* ty=Tensor[(2, 1, 1), float32] */;
    %336 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %337 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %338 = acos(%335) /* ty=Tensor[(2, 1, 1), float32] */;
    %339 = %336.0;
    %340 = %337.0;
    (%338, %339, %340)
  };
  %341(%var_1946) /* ty=(Tensor[(2, 1, 1), float32], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */
}

def @func_2004(%var_1996: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), float64] {
  %342 = cast(%var_1996, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  asinh(%342) /* ty=Tensor[(6, 2, 14), float64] */
}

def @func_2116(%var_2083: Tensor[(70), uint64]) -> (Tensor[(7, 12, 3), float64], Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %343 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %345 = cast(%var_2083, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %346 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %347 = reshape(%345, newshape=[70]) /* ty=Tensor[(70), uint64] */;
  %348 = reshape(%346, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %349 = @func_1368(%347, %348) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
  %350 = cast(meta[relay.Constant][16] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %351 = reshape(%350, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %352 = @func_1149(%351) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
  %353 = atanh(%344) /* ty=Tensor[(7, 12, 3), float64] */;
  %354 = %349.0;
  %355 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %356 = %352.2;
  (%353, %354, %var_2083, meta[relay.Constant][15] /* ty=Tensor[(1120), uint64] */, %355, %356, meta[relay.Constant][16] /* ty=Tensor[(600), float64] */)
}

def @func_2007(%var_2005: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), float64] {
  @func_2004(%var_2005) /* ty=Tensor[(6, 2, 14), float64] */
}

def @func_122() -> Tensor[(5, 8, 5), float32] {
  @func_120() /* ty=Tensor[(5, 8, 5), float32] */
}

def @func_894() -> (Tensor[(7, 12, 3), float32],) {
  @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_5146() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) {
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %358 = reshape(%357, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %359 = @func_4092(%358) /* ty=(Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) */;
  %360 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  %361 = %359.0;
  %362 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
  (%360, %361, meta[relay.Constant][17] /* ty=Tensor[(2), float32] */, %362)
}

def @func_1368(%var_1359: Tensor[(70), uint64], %var_1360: Tensor[(1120), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
  %363 = cast(%var_1359, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %364 = cast(%var_1360, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %365 = reshape(%363, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), uint64] */;
  %366 = reshape(%364, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), uint64] */;
  %367 = @func_188(%365, %366) /* ty=(Tensor[(7, 16, 10), uint64],) */;
  %368 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %369 = %367.0;
  (%368, %369, %var_1359, %var_1360)
}

def @func_2418() -> Tensor[(7, 12, 3), float32] {
  @func_2416() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_3796() -> (Tensor[(7, 12, 3), float32],) {
  %371 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %370 = @func_2717() /* ty=Tensor[(7, 12, 3), float32] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_3556(%var_3554: Tensor[(600), bool], %var_3555: Tensor[(1320), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), uint64], Tensor[(5, 12, 10), int16], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), bool], Tensor[(1050), float64], Tensor[(1320), float64]) {
  %391 = fn (%var_3517: Tensor[(600), bool], %var_3540: Tensor[(1320), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), uint64], Tensor[(5, 12, 10), int16], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), bool], Tensor[(1050), float64], Tensor[(1320), float64]) {
    %372 = @func_2313() /* ty=(Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) */;
    %373 = cast(%var_3517, dtype="bool") /* ty=Tensor[(600), bool] */;
    %374 = reshape(%373, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
    %375 = @func_989(%374) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
    %376 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %377 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
    %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
    %379 = cast(%var_3540, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %380 = %376.0;
    %381 = cast(%380, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %382 = reshape(%378, newshape=[5, 210]) /* ty=Tensor[(5, 210), float64] */;
    %383 = reshape(%379, newshape=[660, 2]) /* ty=Tensor[(660, 2), float64] */;
    %384 = reshape(%381, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
    %385 = @func_3011(%382, %383, %384) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 15, 10), float64], Tensor[(5, 210), float64], Tensor[(5, 8, 5), uint8], Tensor[(660, 2), float64], Tensor[(7, 12, 3), bool], Tensor[(7, 12, 3), float32]) */;
    %386 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
    %387 = %372.0;
    %388 = %375.2;
    %389 = %377.1;
    %390 = %385.5;
    (%386, %387, %388, %var_3517, %380, %389, %390, meta[relay.Constant][18] /* ty=Tensor[(1050), float64] */, %var_3540)
  };
  %391(%var_3554, %var_3555) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), uint64], Tensor[(5, 12, 10), int16], Tensor[(600), bool], Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), bool], Tensor[(1050), float64], Tensor[(1320), float64]) */
}

def @func_4967() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool], Tensor[(7, 12, 3), float32], Tensor[(2160), bool], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint8], Tensor[(200), float32], Tensor[(7, 12, 3), float32]) {
  %418 = fn () -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool], Tensor[(7, 12, 3), float32], Tensor[(2160), bool], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint8], Tensor[(200), float32], Tensor[(7, 12, 3), float32]) {
    %392 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
    %393 = %392.0;
    %394 = cast(%393, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %395 = @func_2225() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
    %396 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
    %397 = reshape(%396, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), bool] */;
    %398 = @func_3086(%397) /* ty=(Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
    %399 = cast(meta[relay.Constant][20] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %400 = cast(meta[relay.Constant][21] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %401 = reshape(%399, newshape=[70]) /* ty=Tensor[(70), uint64] */;
    %402 = reshape(%400, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %403 = @func_1368(%401, %402) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
    %404 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %405 = cast(meta[relay.Constant][22] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
    %406 = reshape(%405, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
    %407 = @func_804(%406) /* ty=(Tensor[(5, 8, 5), uint8],) */;
    %408 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
    %409 = reshape(%408, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), bool] */;
    %410 = @func_3086(%409) /* ty=(Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */;
    %411 = sin(%394) /* ty=Tensor[(7, 12, 3), float32] */;
    %412 = %395.1;
    %413 = %398.1;
    %414 = %403.1;
    %415 = %404.0;
    %416 = %407.0;
    %417 = %410.1;
    (%411, %412, %413, meta[relay.Constant][19] /* ty=Tensor[(2160), bool] */, %414, meta[relay.Constant][20] /* ty=Tensor[(70), uint64] */, meta[relay.Constant][21] /* ty=Tensor[(1120), uint64] */, %415, %416, meta[relay.Constant][22] /* ty=Tensor[(200), float32] */, %417)
  };
  %418() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool], Tensor[(7, 12, 3), float32], Tensor[(2160), bool], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), uint8], Tensor[(200), float32], Tensor[(7, 12, 3), float32]) */
}

def @func_1372(%var_1370: Tensor[(70), uint64], %var_1371: Tensor[(1120), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
  @func_1368(%var_1370, %var_1371) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */
}

def @func_3900() -> (Tensor[(7, 12, 3), float32],) {
  %420 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %419 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    (%419,)
  };
  %420() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_2782() -> (Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) {
  %432 = fn () -> (Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) {
    %421 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
    %422 = %421.1;
    %423 = cast(%422, dtype="float32") /* ty=Tensor[(600), float32] */;
    %424 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
    %425 = cast(%424, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %426 = tan(%425) /* ty=Tensor[(5, 8, 5), float32] */;
    %427 = cast(%426, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
    %428 = @func_1913() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %429 = cos(%423) /* ty=Tensor[(600), float32] */;
    %430 = acosh(%427) /* ty=Tensor[(5, 8, 5), float64] */;
    %431 = %428.0;
    (%429, %430, %431)
  };
  %432() /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) */
}

def @func_3309() -> Tensor[(7, 12, 3), float64] {
  %434 = fn () -> Tensor[(7, 12, 3), float64] {
    %433 = @func_2805() /* ty=(Tensor[(7, 12, 3), float64],) */;
    %433.0
  };
  %434() /* ty=Tensor[(7, 12, 3), float64] */
}

def @func_4783(%var_4781: Tensor[(9, 6, 12), uint8], %var_4782: Tensor[(9, 6, 12), uint8]) -> (Tensor[(9, 6, 12), uint8], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 6, 12), float64]) {
  %446 = fn (%var_4759: Tensor[(9, 6, 12), uint8], %var_4760: Tensor[(9, 6, 12), uint8]) -> (Tensor[(9, 6, 12), uint8], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 6, 12), float64]) {
    %435 = cast(%var_4760, dtype="uint8") /* ty=Tensor[(9, 6, 12), uint8] */;
    %436 = shape_of(%var_4759, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%var_4759, dtype="uint8") /* ty=Tensor[(9, 6, 12), uint8] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %440 = reshape(%439, newshape=[600, 1]) /* ty=Tensor[(600, 1), bool] */;
    %441 = @func_4028(%440) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) */;
    %442 = cast(%var_4760, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
    %443 = bitwise_or(%437, %438) /* ty=Tensor[(9, 6, 12), uint8] */;
    %444 = %441.1;
    %445 = sinh(%442) /* ty=Tensor[(9, 6, 12), float64] */;
    (%443, %444, meta[relay.Constant][23] /* ty=Tensor[(600), bool] */, %445)
  };
  %446(%var_4781, %var_4782) /* ty=(Tensor[(9, 6, 12), uint8], Tensor[(280, 4), uint64], Tensor[(600), bool], Tensor[(9, 6, 12), float64]) */
}

def @func_1761() -> Tensor[(7, 12, 3), float32] {
  @func_1713() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_5752(%var_5746: Tensor[(600), float32]) -> (Tensor[(2), float32], Tensor[(600), bool]) {
  %447 = @func_5146() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) */;
  %448 = @func_4459() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), float32]) */;
  %449 = %448.1;
  %450 = cast(%var_5746, dtype="bool") /* ty=Tensor[(600), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(1), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(600), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?), bool] */;
  %454 = %447.2;
  %455 = greater_equal(%452, %453) /* ty=Tensor[(600), bool] */;
  (%454, %455)
}

def @func_5861() -> (Tensor[(6, 3, ?), bool],) {
  %463 = fn () -> (Tensor[(6, 3, ?), bool],) {
    %456 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
    %457 = sigmoid(%456) /* ty=Tensor[(6, 3, 1), float32] */;
    %458 = cast(%457, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
    %459 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 3, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 3, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %462 = logical_or(%460, %461) /* ty=Tensor[(6, 3, ?), bool] */;
    (%462,)
  };
  %463() /* ty=(Tensor[(6, 3, ?), bool],) */
}

def @func_120() -> Tensor[(5, 8, 5), float32] {
  %464 = @func_90() /* ty=Tensor[(5, 8, 5), float64] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  sigmoid(%465) /* ty=Tensor[(5, 8, 5), float32] */
}

def @func_860(%var_859: Tensor[(1120), uint64]) -> (Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
  %480 = fn (%var_854: Tensor[(1120), uint64]) -> (Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) {
    %466 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 7), float32] */;
    %467 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 7), float32] */;
    %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %469 = reshape(%468, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %470 = @func_263(%469) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float64], Tensor[(9, 11, 6), float32], Tensor[(594), uint16]) */;
    %471 = cast(meta[relay.Constant][27] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %472 = cast(%var_854, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %473 = reshape(%471, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), uint64] */;
    %474 = reshape(%472, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), uint64] */;
    %475 = @func_188(%473, %474) /* ty=(Tensor[(7, 16, 10), uint64],) */;
    %476 = cosh(%466) /* ty=Tensor[(16, 11, 7), float32] */;
    %477 = atan(%467) /* ty=Tensor[(16, 11, 7), float32] */;
    %478 = %470.2;
    %479 = %475.0;
    (%476, %477, %478, meta[relay.Constant][26] /* ty=Tensor[(594), uint16] */, %479, meta[relay.Constant][27] /* ty=Tensor[(70), uint64] */, %var_854)
  };
  %480(%var_859) /* ty=(Tensor[(16, 11, 7), float32], Tensor[(16, 11, 7), float32], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */
}

def @func_1891(%var_1889: Tensor[(7, 15, 10), float64], %var_1890: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64],) {
  %486 = fn (%var_1879: Tensor[(7, 15, 10), float64], %var_1880: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64],) {
    %481 = cast(%var_1880, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %482 = shape_of(%var_1879, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%var_1879, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %485 = subtract(%483, %484) /* ty=Tensor[(7, 15, 10), float64] */;
    (%485,)
  };
  %486(%var_1889, %var_1890) /* ty=(Tensor[(7, 15, 10), float64],) */
}

def @func_4848() -> Tensor[(7, 12, 3), float32] {
  %488 = fn () -> Tensor[(7, 12, 3), float32] {
    %487 = @func_3567() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %487.0
  };
  %488() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_544() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  %489 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %491 = reshape(%490, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %492 = @func_438(%491) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
  %493 = %492.0;
  %494 = cast(%489, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %499 = reshape(%498, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %500 = @func_166(%499) /* ty=(Tensor[(5, 12, 10), float64],) */;
  %501 = %500.0;
  %502 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), float64] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = greater(%496, %497) /* ty=Tensor[(5, 8, 5), bool] */;
  %507 = less(%504, %505) /* ty=Tensor[(5, 12, 10), bool] */;
  (%506, %507)
}

def @func_3337() -> Tensor[(5, 12, 10), float32] {
  %511 = fn () -> Tensor[(5, 12, 10), float32] {
    %508 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
    %509 = %508.1;
    %510 = cast(%509, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
    asin(%510) /* ty=Tensor[(5, 12, 10), float32] */
  };
  %511() /* ty=Tensor[(5, 12, 10), float32] */
}

def @func_2718() -> Tensor[(7, 12, 3), float32] {
  %512 = fn () -> Tensor[(7, 12, 3), float32] {
    @func_1713() /* ty=Tensor[(7, 12, 3), float32] */
  };
  %512() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_5081(%var_5079: Tensor[(12, 10, 7), uint16]) -> (Tensor[(12, 10, 7), bool], Tensor[(3, 16, 5), bool]) {
  @func_5078(%var_5079) /* ty=(Tensor[(12, 10, 7), bool], Tensor[(3, 16, 5), bool]) */
}

def @func_3088(%var_3087: Tensor[(16, 9, 15), bool]) -> (Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
  %522 = fn (%var_3073: Tensor[(16, 9, 15), bool]) -> (Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) {
    %513 = cast(%var_3073, dtype="bool") /* ty=Tensor[(16, 9, 15), bool] */;
    %514 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(16, 9, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 9, 15), bool] */, dtype="bool") /* ty=Tensor[(16, 9, 15), bool] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %517 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
    %518 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %519 = logical_or(%515, %516) /* ty=Tensor[(16, 9, 15), bool] */;
    %520 = %517.0;
    %521 = %518.0;
    (%519, %520, %521)
  };
  %522(%var_3087) /* ty=(Tensor[(16, 9, 15), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32]) */
}

def @func_1601() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) {
  %523 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %524 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %525 = %523.0;
  %526 = %524.1;
  (%525, %526)
}

def @func_4030(%var_4029: Tensor[(600, 1), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) {
  %554 = fn (%var_3949: Tensor[(600, 1), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) {
    %527 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
    %528 = cast(%var_3949, dtype="bool") /* ty=Tensor[(600, 1), bool] */;
    %529 = reshape(%528, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
    %530 = @func_989(%529) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
    %531 = @func_2416() /* ty=Tensor[(7, 12, 3), float32] */;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %533 = reshape(%532, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float32] */;
    %534 = @func_2568(%533) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(600), float32]) */;
    %535 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
    %536 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %537 = @func_2830() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %538 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 70), uint64] */, dtype="uint64") /* ty=Tensor[(1, 70), uint64] */;
    %539 = %530.1;
    %540 = cast(%539, dtype="uint64") /* ty=Tensor[(280, 4), uint64] */;
    %541 = reshape(%538, newshape=[70]) /* ty=Tensor[(70), uint64] */;
    %542 = reshape(%540, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %543 = @func_1368(%541, %542) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
    %544 = %543.3;
    %545 = cast(%544, dtype="bool") /* ty=Tensor[(1120), bool] */;
    %546 = cast(%var_3949, dtype="bool") /* ty=Tensor[(600, 1), bool] */;
    %547 = %527.2;
    %548 = %534.1;
    %549 = %535.2;
    %550 = %536.0;
    %551 = %537.0;
    %552 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
    %553 = greater(%545, %546) /* ty=Tensor[(600, 1120), bool] */;
    (%547, %539, %531, %548, %549, %550, meta[relay.Constant][30] /* ty=Tensor[(1, 70), uint64] */, %551, %552, %553)
  };
  %554(%var_4029) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(280, 4), uint64], Tensor[(7, 12, 3), float32], Tensor[(600), float32], Tensor[(594), uint16], Tensor[(7, 12, 3), float32], Tensor[(1, 70), uint64], Tensor[(7, 12, 3), float32], Tensor[(7, 12, 3), float32], Tensor[(600, 1120), bool]) */
}

def @func_4344(%var_4343: Tensor[(5, 8, 5), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), int32], Tensor[(5, 8, 5), uint32], Tensor[(5, 8, 5), float32]) {
  %570 = fn (%var_4312: Tensor[(5, 8, 5), bool]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), int32], Tensor[(5, 8, 5), uint32], Tensor[(5, 8, 5), float32]) {
    %555 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %556 = %555.0;
    %557 = cast(%var_4312, dtype="int32") /* ty=Tensor[(5, 8, 5), int32] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%556, dtype="int32") /* ty=Tensor[(5, 8, 5), int32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %561 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 8, 5), bool] */, dtype="uint32") /* ty=Tensor[(5, 8, 5), uint32] */;
    %562 = shape_of(%var_4312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_4312, dtype="uint32") /* ty=Tensor[(5, 8, 5), uint32] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %565 = cast(%var_4312, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %566 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    %567 = multiply(%559, %560) /* ty=Tensor[(5, 8, 5), int32] */;
    %568 = logical_xor(%563, %564) /* ty=Tensor[(5, 8, 5), uint32] */;
    %569 = log10(%565) /* ty=Tensor[(5, 8, 5), float32] */;
    (%566, %567, %568, %569)
  };
  %570(%var_4343) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), int32], Tensor[(5, 8, 5), uint32], Tensor[(5, 8, 5), float32]) */
}

def @func_191(%var_189: Tensor[(7, 1, 10), uint64], %var_190: Tensor[(7, 16, 10), uint64]) -> (Tensor[(7, 16, 10), uint64],) {
  %574 = fn (%var_173: Tensor[(7, 1, 10), uint64], %var_174: Tensor[(7, 16, 10), uint64]) -> (Tensor[(7, 16, 10), uint64],) {
    %571 = cast(%var_173, dtype="uint64") /* ty=Tensor[(7, 1, 10), uint64] */;
    %572 = cast(%var_174, dtype="uint64") /* ty=Tensor[(7, 16, 10), uint64] */;
    %573 = multiply(%571, %572) /* ty=Tensor[(7, 16, 10), uint64] */;
    (%573,)
  };
  %574(%var_189, %var_190) /* ty=(Tensor[(7, 16, 10), uint64],) */
}

def @func_3660() -> Tensor[(7, 12, 3), float32] {
  %576 = fn () -> Tensor[(7, 12, 3), float32] {
    %575 = @func_2830() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %575.0
  };
  %576() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_1470() -> Tensor[(9, 11, 6), float32] {
  @func_1468() /* ty=Tensor[(9, 11, 6), float32] */
}

def @func_4459() -> (Tensor[(7, 12, 3), float32], Tensor[(600), float32]) {
  %577 = @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */;
  %578 = @func_2781() /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float64], Tensor[(7, 12, 3), float32]) */;
  %579 = %577.0;
  %580 = %578.0;
  (%579, %580)
}

def @func_1969() -> (Tensor[(7, 12, 3), float32],) {
  %583 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %581 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %582 = %581.0;
    (%582,)
  };
  %583() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_3059(%var_3057: Tensor[(3, 16, 5), bool], %var_3058: Tensor[(3, 16, 5), bool]) -> (Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) {
  %591 = fn (%var_3045: Tensor[(3, 16, 5), bool], %var_3046: Tensor[(3, 16, 5), bool]) -> (Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) {
    %584 = cast(%var_3046, dtype="bool") /* ty=Tensor[(3, 16, 5), bool] */;
    %585 = shape_of(%var_3045, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%var_3045, dtype="bool") /* ty=Tensor[(3, 16, 5), bool] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %588 = @func_2594() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %589 = logical_or(%586, %587) /* ty=Tensor[(3, 16, 5), bool] */;
    %590 = %588.0;
    (%589, %590)
  };
  %591(%var_3057, %var_3058) /* ty=(Tensor[(3, 16, 5), bool], Tensor[(5, 8, 5), bool]) */
}

def @func_4538(%var_4537: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), int32], Tensor[(7, 12, 3), float32]) {
  %600 = fn (%var_4514: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), int32], Tensor[(7, 12, 3), float32]) {
    %592 = @func_3393() /* ty=Tensor[(7, 12, 3), float32] */;
    %593 = cast(%var_4514, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="int32") /* ty=Tensor[(7, 12, 3), int32] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %597 = @func_3774() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) */;
    %598 = add(%595, %596) /* ty=Tensor[(7, 12, 3), int32] */;
    %599 = %597.0;
    (%598, %599)
  };
  %600(%var_4537) /* ty=(Tensor[(7, 12, 3), int32], Tensor[(7, 12, 3), float32]) */
}

def @func_908(%var_906: Tensor[(4, 8, 5), float64], %var_907: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64],) {
  %606 = fn (%var_895: Tensor[(4, 8, 5), float64], %var_896: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64],) {
    %601 = cast(%var_896, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %602 = shape_of(%var_895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%var_895, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %605 = mod(%603, %604) /* ty=Tensor[(4, 8, 5), float64] */;
    (%605,)
  };
  %606(%var_906, %var_907) /* ty=(Tensor[(4, 8, 5), float64],) */
}

def @func_441(%var_439: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) {
  @func_438(%var_439) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */
}

def @func_5148() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) {
  @func_5146() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(2), float32], Tensor[(7, 12, 3), float32]) */
}

def @func_807(%var_805: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), uint8],) {
  @func_804(%var_805) /* ty=(Tensor[(5, 8, 5), uint8],) */
}

def @func_3229(%var_3227: Tensor[(16, 7, 12), float32], %var_3228: Tensor[(70), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120, 1), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), float64], Tensor[(60, 10), float64], Tensor[(16, 7, 12), float32]) {
  %624 = fn (%var_3157: Tensor[(16, 7, 12), float32], %var_3186: Tensor[(70), uint64]) -> (Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120, 1), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), float64], Tensor[(60, 10), float64], Tensor[(16, 7, 12), float32]) {
    %607 = cast(%var_3186, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %608 = cast(meta[relay.Constant][32] /* ty=Tensor[(1120, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1120, 1), uint64] */;
    %609 = reshape(%607, newshape=[70]) /* ty=Tensor[(70), uint64] */;
    %610 = reshape(%608, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %611 = @func_1368(%609, %610) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(7, 16, 10), uint64], Tensor[(70), uint64], Tensor[(1120), uint64]) */;
    %612 = %611.0;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %614 = reshape(%613, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
    %615 = @func_438(%614) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
    %616 = @func_2697() /* ty=(Tensor[(60, 10), float64],) */;
    %617 = cast(%var_3157, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %618 = asinh(%617) /* ty=Tensor[(16, 7, 12), float32] */;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %620 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
    %621 = %615.0;
    %622 = %616.0;
    %623 = tan(%619) /* ty=Tensor[(16, 7, 12), float32] */;
    (%612, %var_3186, meta[relay.Constant][32] /* ty=Tensor[(1120, 1), uint64] */, %620, %621, %622, %623)
  };
  %624(%var_3227, %var_3228) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120, 1), uint64], Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), float64], Tensor[(60, 10), float64], Tensor[(16, 7, 12), float32]) */
}

def @func_168(%var_167: Tensor[(5, 12, 10), float64]) -> (Tensor[(5, 12, 10), float64],) {
  %627 = fn (%var_162: Tensor[(5, 12, 10), float64]) -> (Tensor[(5, 12, 10), float64],) {
    %625 = cast(%var_162, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
    %626 = cos(%625) /* ty=Tensor[(5, 12, 10), float64] */;
    (%626,)
  };
  %627(%var_167) /* ty=(Tensor[(5, 12, 10), float64],) */
}

def @func_1763() -> Tensor[(7, 12, 3), float32] {
  @func_1761() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_90() -> Tensor[(5, 8, 5), float64] {
  %628 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %628.0
}

def @func_2629() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) {
  %629 = cast(meta[relay.Constant][33] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %630 = cast(meta[relay.Constant][33] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %631 = reshape(%629, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %632 = reshape(%630, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %633 = @func_1888(%631, %632) /* ty=(Tensor[(7, 15, 10), float64],) */;
  %634 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %635 = @func_1713() /* ty=Tensor[(7, 12, 3), float32] */;
  %636 = %633.0;
  (%634, %635, %636, meta[relay.Constant][33] /* ty=Tensor[(1050), float64] */)
}

def @func_2314() -> (Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) {
  %645 = fn () -> (Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) {
    %637 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %638 = %637.0;
    %639 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 12, 3), float32] */, dtype="uint64") /* ty=Tensor[(7, 12, 3), uint64] */;
    %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%638, dtype="uint64") /* ty=Tensor[(7, 12, 3), uint64] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %643 = bitwise_xor(%641, %642) /* ty=Tensor[(7, 12, 3), uint64] */;
    %644 = @func_2155() /* ty=Tensor[(600), bool] */;
    (%643, %644)
  };
  %645() /* ty=(Tensor[(7, 12, 3), uint64], Tensor[(600), bool]) */
}

def @func_47() -> (Tensor[(5, 8, 5), float64],) {
  %646 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %647 = exp(%646) /* ty=Tensor[(5, 8, 5), float64] */;
  (%647,)
}

def @func_892() -> (Tensor[(7, 12, 3), float32],) {
  %648 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %649 = %648.0;
  (%649,)
}

def @func_92() -> Tensor[(5, 8, 5), float64] {
  @func_90() /* ty=Tensor[(5, 8, 5), float64] */
}

def @func_1603() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) {
  @func_1601() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), bool]) */
}

def @func_2227() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  @func_2225() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */
}

def @func_141() -> Tensor[(7, 12, 3), float32] {
  %651 = fn () -> Tensor[(7, 12, 3), float32] {
    %650 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    sigmoid(%650) /* ty=Tensor[(7, 12, 3), float32] */
  };
  %651() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_3775() -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) {
  %656 = fn () -> (Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) {
    %652 = @func_1585() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %653 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %654 = %652.0;
    %655 = %653.0;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) */
}

def @func_3629(%var_3601: Tensor[(6, 14, 3), int16], %var_3602: Tensor[(6, 14, 3), int16], %var_3610: Tensor[(6, 14, 3), int16]) -> (Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), int8]) {
  %657 = cast(%var_3602, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %658 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_3601, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = cast(%var_3610, dtype="int8") /* ty=Tensor[(6, 14, 3), int8] */;
  %662 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_3601, dtype="int8") /* ty=Tensor[(6, 14, 3), int8] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %665 = equal(%659, %660) /* ty=Tensor[(6, 14, 3), bool] */;
  %666 = bitwise_xor(%663, %664) /* ty=Tensor[(6, 14, 3), int8] */;
  (%665, %666)
}

def @func_3569() -> (Tensor[(7, 12, 3), float32],) {
  @func_3567() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_3940(%var_3938: Tensor[(594), uint16]) -> (Tensor[(594), float32], Tensor[(7, 12, 3), float32]) {
  @func_3937(%var_3938) /* ty=(Tensor[(594), float32], Tensor[(7, 12, 3), float32]) */
}

def @func_546() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */
}

def @func_2155() -> Tensor[(600), bool] {
  %667 = @func_1859() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(600), bool], Tensor[(7, 12, 3), float32]) */;
  %667.1
}

def @func_804(%var_799: Tensor[(5, 8, 5), float32]) -> (Tensor[(5, 8, 5), uint8],) {
  %668 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
  %669 = cast(%var_799, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %673 = bitwise_or(%671, %672) /* ty=Tensor[(5, 8, 5), uint8] */;
  (%673,)
}

def @func_5565() -> Tensor[(7, 12, 3), float32] {
  %675 = fn () -> Tensor[(7, 12, 3), float32] {
    %674 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %674.0
  };
  %675() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_2631() -> (Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) {
  @func_2629() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(7, 12, 3), float32], Tensor[(7, 15, 10), float64], Tensor[(1050), float64]) */
}

def @func_1151(%var_1150: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %698 = fn (%var_1140: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
    %676 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %677 = %676.0;
    %678 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(%677, dtype="bool") /* ty=Tensor[(7, 12, 3), bool] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %682 = logical_and(%680, %681) /* ty=Tensor[(7, 12, 3), bool] */;
    %683 = cast(%682, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %684 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %687 = divide(%685, %686) /* ty=Tensor[(7, 12, 3), float32] */;
    %688 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 12, 3), float32] */, dtype="uint8") /* ty=Tensor[(7, 12, 3), uint8] */;
    %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %690 = cast(%687, dtype="uint8") /* ty=Tensor[(7, 12, 3), uint8] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %692 = cast(%var_1140, dtype="float64") /* ty=Tensor[(600), float64] */;
    %693 = reshape(%692, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
    %694 = @func_166(%693) /* ty=(Tensor[(5, 12, 10), float64],) */;
    %695 = maximum(%690, %691) /* ty=Tensor[(7, 12, 3), uint8] */;
    %696 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    %697 = %694.0;
    (%695, %696, %697, %var_1140)
  };
  %698(%var_1150) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */
}

def @func_2507() -> Tensor[(7, 12, 3), float32] {
  %700 = fn () -> Tensor[(7, 12, 3), float32] {
    %699 = @func_892() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %699.0
  };
  %700() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_2416() -> Tensor[(7, 12, 3), float32] {
  @func_1761() /* ty=Tensor[(7, 12, 3), float32] */
}

def @func_5719(%var_5684: Tensor[(60, 10), float64]) -> (Tensor[(60, 10), float64], Tensor[(280, 4), uint64], Tensor[(60, 10), float32]) {
  %701 = @func_2697() /* ty=(Tensor[(60, 10), float64],) */;
  %702 = %701.0;
  %703 = cast(%var_5684, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(2), int32] */;
  %705 = cast(%702, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %707 = cast(%702, dtype="bool") /* ty=Tensor[(60, 10), bool] */;
  %708 = reshape(%707, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), bool] */;
  %709 = @func_989(%708) /* ty=(Tensor[(1120), uint64], Tensor[(280, 4), uint64], Tensor[(5, 12, 10), int16]) */;
  %710 = cast(%702, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %711 = sinh(%710) /* ty=Tensor[(60, 10), float64] */;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %713 = power(%705, %706) /* ty=Tensor[(60, 10), float64] */;
  %714 = %709.1;
  %715 = atan(%712) /* ty=Tensor[(60, 10), float32] */;
  (%713, %714, %715)
}

def @func_5524(%var_5523: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), bool], Tensor[(200), bool], Tensor[(5, 12, 10), float32], Tensor[(5, 12, 10), float64]) {
  %743 = fn (%var_5478: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), bool], Tensor[(200), bool], Tensor[(5, 12, 10), float32], Tensor[(5, 12, 10), float64]) {
    %716 = @func_3336() /* ty=Tensor[(5, 12, 10), float32] */;
    %717 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 12, 10), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%716, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %721 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
    %722 = reshape(%721, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
    %723 = @func_804(%722) /* ty=(Tensor[(5, 8, 5), uint8],) */;
    %724 = %723.0;
    %725 = cast(%724, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %726 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(200), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %727 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), float32] */, dtype="bool") /* ty=Tensor[(200), bool] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?), bool] */;
    %729 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
    %730 = shape_of(%var_5478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%var_5478, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %733 = cast(%var_5478, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %734 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%716, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %737 = equal(%735, %736) /* ty=Tensor[(5, 12, 10), bool] */;
    %738 = cast(%737, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
    %739 = logical_and(%719, %720) /* ty=Tensor[(5, 12, 10), bool] */;
    %740 = less(%727, %728) /* ty=Tensor[(200), bool] */;
    %741 = multiply(%731, %732) /* ty=Tensor[(5, 12, 10), float32] */;
    %742 = atan(%738) /* ty=Tensor[(5, 12, 10), float64] */;
    (%739, %740, %741, %742)
  };
  %743(%var_5523) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(200), bool], Tensor[(5, 12, 10), float32], Tensor[(5, 12, 10), float64]) */
}

def @func_726(%var_725: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) {
  %774 = fn (%var_700: Tensor[(594), uint16]) -> (Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) {
    %744 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
    %745 = %744.0;
    %746 = cast(%745, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
    %747 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
    %748 = cast(%var_700, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %749 = reshape(%748, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), uint16] */;
    %750 = @func_22(%749) /* ty=(Tensor[(9, 11, 6), float32],) */;
    %751 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
    %752 = cast(%751, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
    %753 = asinh(%752) /* ty=Tensor[(5, 8, 5), float64] */;
    %754 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
    %755 = cast(%754, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %756 = reshape(%755, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
    %757 = @func_438(%756) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), bool]) */;
    %758 = %757.1;
    %759 = cast(%758, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %760 = cosh(%759) /* ty=Tensor[(5, 8, 5), float32] */;
    %761 = cast(%760, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %762 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%753, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %765 = cast(meta[relay.Constant][40] /* ty=Tensor[(594), uint16] */, dtype="bool") /* ty=Tensor[(594), bool] */;
    %766 = shape_of(%var_700, dtype="int32") /* ty=Tensor[(1), int32] */;
    %767 = cast(%var_700, dtype="bool") /* ty=Tensor[(594), bool] */;
    %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), bool] */;
    %769 = atanh(%746) /* ty=Tensor[(5, 8, 5), float64] */;
    %770 = %747.1;
    %771 = %750.0;
    %772 = equal(%763, %764) /* ty=Tensor[(5, 8, 5), bool] */;
    %773 = less(%767, %768) /* ty=Tensor[(594), bool] */;
    (%769, %754, %770, %771, %772, %773)
  };
  %774(%var_725) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) */
}

def @func_2119(%var_2117: Tensor[(70), uint64]) -> (Tensor[(7, 12, 3), float64], Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  @func_2116(%var_2117) /* ty=(Tensor[(7, 12, 3), float64], Tensor[(5, 8, 5), float32], Tensor[(70), uint64], Tensor[(1120), uint64], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */
}

def @func_318() -> (Tensor[(7, 12, 3), float32],) {
  %776 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %775 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
    (%775,)
  };
  %776() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_2511() -> (Tensor[(5, 8, 5), bool],) {
  %779 = fn () -> (Tensor[(5, 8, 5), bool],) {
    %777 = @func_764() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), float64]) */;
    %778 = %777.1;
    (%778,)
  };
  %779() /* ty=(Tensor[(5, 8, 5), bool],) */
}

def @func_3118() -> (Tensor[(5, 8, 5), float64],) {
  %780 = @func_47() /* ty=(Tensor[(5, 8, 5), float64],) */;
  %781 = %780.0;
  (%781,)
}

def @func_4095(%var_4093: Tensor[(2), float32]) -> (Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) {
  @func_4092(%var_4093) /* ty=(Tensor[(5, 12, 10), float64], Tensor[(7, 12, 3), float32], Tensor[(2), float32]) */
}

def @func_1468() -> Tensor[(9, 11, 6), float32] {
  %782 = @func_1281() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(9, 11, 6), float32], Tensor[(594), uint16], Tensor[(9, 11, 6), float32]) */;
  %782.3
}

def @func_1633(%var_1630: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  %783 = cast(%var_1630, dtype="float64") /* ty=Tensor[(600), float64] */;
  %784 = reshape(%783, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %785 = @func_1149(%784) /* ty=(Tensor[(7, 12, 3), uint8], Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */;
  %786 = @func_140() /* ty=Tensor[(7, 12, 3), float32] */;
  %787 = %785.2;
  (%786, %787, %var_1630)
}

def @func_2396(%var_2394: Tensor[(600), bool]) -> (Tensor[(600), int64],) {
  @func_2393(%var_2394) /* ty=(Tensor[(600), int64],) */
}

def @func_1586() -> (Tensor[(7, 12, 3), float32],) {
  %790 = fn () -> (Tensor[(7, 12, 3), float32],) {
    %788 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
    %789 = %788.0;
    (%789,)
  };
  %790() /* ty=(Tensor[(7, 12, 3), float32],) */
}

def @func_4690(%var_4689: Tensor[(5, 8, 5), bool]) -> Tensor[(5, 8, 5), uint64] {
  %797 = fn (%var_4665: Tensor[(5, 8, 5), bool]) -> Tensor[(5, 8, 5), uint64] {
    %791 = @func_3774() /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 8, 5), bool]) */;
    %792 = %791.1;
    %793 = cast(%var_4665, dtype="uint64") /* ty=Tensor[(5, 8, 5), uint64] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %795 = cast(%792, dtype="uint64") /* ty=Tensor[(5, 8, 5), uint64] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%795, %796) /* ty=Tensor[(5, 8, 5), uint64] */
  };
  %797(%var_4689) /* ty=Tensor[(5, 8, 5), uint64] */
}

def @func_2225() -> (Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) {
  %798 = @func_307() /* ty=(Tensor[(5, 8, 5), bool],) */;
  %799 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %800 = %798.0;
  %801 = %799.1;
  (%800, %801)
}

def @func_2568(%var_2540: Tensor[(7, 12, 3), float32]) -> (Tensor[(7, 12, 3), float64], Tensor[(600), float32]) {
  %802 = @func_317() /* ty=(Tensor[(7, 12, 3), float32],) */;
  %803 = %802.0;
  %804 = cast(%var_2540, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %808 = @func_2155() /* ty=Tensor[(600), bool] */;
  %809 = cast(meta[relay.Constant][41] /* ty=Tensor[(600), bool] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(1), int32] */;
  %811 = cast(%808, dtype="float32") /* ty=Tensor[(600), float32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?), float32] */;
  %813 = floor_divide(%806, %807) /* ty=Tensor[(7, 12, 3), float64] */;
  %814 = power(%811, %812) /* ty=Tensor[(600), float32] */;
  (%813, %814)
}

def @func_3120() -> (Tensor[(5, 8, 5), float64],) {
  @func_3118() /* ty=(Tensor[(5, 8, 5), float64],) */
}

def @func_2354(%var_2342: Tensor[(1320), float64]) -> (Tensor[(5, 8, 5), bool], Tensor[(5, 8, 5), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(5, 8, 5), uint8], Tensor[(7, 12, 3), float32]) {
  %815 = @func_544() /* ty=(Tensor[(5, 8, 5), bool], Tensor[(5, 12, 10), bool]) */;
  %816 = cast(%var_2342, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %817 = reshape(%816, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %818 = %815.0;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %820 = reshape(%819, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), float32] */;
  %821 = @func_804(%820) /* ty=(Tensor[(5, 8, 5), uint8],) */;
  %822 = @func_301() /* ty=Tensor[(5, 8, 5), bool] */;
  %823 = @func_1495(%817) /* ty=Tensor[(15, 8, 11), bool] */;
  %824 = %821.0;
  %825 = @func_1761() /* ty=Tensor[(7, 12, 3), float32] */;
  (%822, %818, %823, %var_2342, %824, %825)
}

def @func_2805() -> (Tensor[(7, 12, 3), float64],) {
  %826 = @func_2506() /* ty=Tensor[(7, 12, 3), float32] */;
  %827 = cast(%826, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %828 = acos(%827) /* ty=Tensor[(7, 12, 3), float64] */;
  (%828,)
}

def @func_3464(%var_3463: Tensor[(594), uint16]) -> (Tensor[(600), float32], Tensor[(5, 8, 5), float32], Tensor[(594), uint16], Tensor[(5, 8, 5), float32]) {
  %840 = fn (%var_3444: Tensor[(594), uint16]) -> (Tensor[(600), float32], Tensor[(5, 8, 5), float32], Tensor[(594), uint16], Tensor[(5, 8, 5), float32]) {
    %829 = @func_3277() /* ty=Tensor[(600), bool] */;
    %830 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), bool] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(1), int32] */;
    %832 = cast(%829, dtype="float32") /* ty=Tensor[(600), float32] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?), float32] */;
    %834 = cast(%var_3444, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %835 = reshape(%834, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %836 = @func_724(%835) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(5, 8, 5), float32], Tensor[(5, 12, 10), bool], Tensor[(9, 11, 6), float32], Tensor[(5, 8, 5), bool], Tensor[(594), bool]) */;
    %837 = floor_mod(%832, %833) /* ty=Tensor[(600), float32] */;
    %838 = %836.1;
    %839 = @func_120() /* ty=Tensor[(5, 8, 5), float32] */;
    (%837, %838, %var_3444, %839)
  };
  %840(%var_3463) /* ty=(Tensor[(600), float32], Tensor[(5, 8, 5), float32], Tensor[(594), uint16], Tensor[(5, 8, 5), float32]) */
}

def @func_1636(%var_1634: Tensor[(600), float64]) -> (Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) {
  @func_1633(%var_1634) /* ty=(Tensor[(7, 12, 3), float32], Tensor[(5, 12, 10), float64], Tensor[(600), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen50/build/output.py:2244: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen50/build/output.py", line 2249, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(364) tvmgen_default_fused_erf_kernel0(double* __restrict__ T_erf, double* __restrict__ placeholder) {
  T_erf[(((int)threadIdx.x))] = erf(placeholder[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(364) tvmgen_default_fused_sigmoid_kernel0(double* __restrict__ T_sigmoid, double* __restrict__ placeholder) {
  T_sigmoid[(((int)threadIdx.x))] = (1.000000e+00 / (1.000000e+00 + exp((0.000000e+00 - placeholder[(((int)threadIdx.x))]))));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

