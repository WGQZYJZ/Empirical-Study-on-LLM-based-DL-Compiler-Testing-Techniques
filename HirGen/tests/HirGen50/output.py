import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_2 = relay.const([[[-2,-6,7,-2,6,4],[1,8,6,-8,2,-5],[-3,4,10,3,2,-3],[-5,-5,6,1,-3,-7],[-2,5,10,-1,-4,-5],[10,-4,-9,-3,-1,7],[8,-7,6,1,8,6],[-6,2,-3,-4,-7,7],[-5,-2,1,-8,-9,1],[10,5,-5,-7,-7,3],[-10,-3,5,-4,-2,-9]],[[-8,-1,5,-2,1,-4],[-10,9,1,-7,7,7],[2,2,-10,5,1,4],[-8,-10,6,5,-4,3],[-6,-6,2,7,-5,-8],[-4,-2,10,9,-4,7],[3,-6,-6,-2,-1,7],[2,-9,-5,-3,-1,1],[2,-1,1,6,10,10],[-3,10,3,-7,-3,5],[3,-6,4,8,-1,2]],[[-7,-5,10,-2,-10,-7],[10,-9,2,1,-1,-4],[6,2,-10,-9,-3,-3],[2,8,-8,6,-10,-2],[-8,-10,2,3,-5,-3],[-9,4,-7,-7,-4,2],[9,-1,2,1,-6,8],[-6,-6,-7,-8,3,10],[-10,-8,1,8,7,-9],[3,-8,5,-9,-6,2],[3,-10,5,-6,-9,1]],[[6,10,-7,4,-10,-10],[-10,-6,1,-2,9,3],[-3,10,7,2,9,9],[-10,7,-9,7,-6,-8],[10,-5,1,4,9,6],[5,9,9,-3,3,10],[-7,-1,-7,-1,-8,-9],[-4,-3,-9,9,8,-8],[-8,-3,-1,4,10,-2],[-6,-8,-9,3,10,-6],[-8,2,5,-10,-3,5]],[[-8,3,-6,-6,9,-7],[1,-2,10,9,-5,2],[1,2,-9,-7,5,4],[8,-4,-4,-5,-2,7],[9,10,6,-5,-5,2],[-5,10,10,3,-6,5],[7,6,-9,1,-8,1],[2,1,-4,-3,2,10],[9,-10,-10,4,4,-7],[4,10,-1,-4,-8,2],[9,-4,-9,3,-8,3]],[[-9,-5,9,-6,2,-3],[-9,-5,5,3,-5,3],[1,-1,2,-7,1,3],[-6,4,-7,2,-5,6],[-6,-4,-4,-4,4,4],[-1,6,-4,3,2,-1],[-4,6,10,1,-9,-7],[-1,-9,-6,2,5,9],[-9,-3,-2,9,-5,-5],[-8,-1,9,-1,-6,-7],[3,-2,-7,10,-5,-8]],[[-5,-3,3,5,6,8],[1,8,-2,-4,4,3],[-8,9,4,-2,-4,1],[-5,-9,-2,8,8,3],[-1,-5,2,8,3,-5],[7,-7,-2,-10,-5,-10],[10,10,-4,-8,-1,-1],[4,-5,9,3,-9,8],[-9,10,9,-10,-8,7],[-5,-8,-9,-9,10,-10],[-6,-6,-3,6,-5,5]],[[6,1,6,-5,-2,-5],[-4,5,-2,7,-8,-5],[-9,3,9,8,-1,-9],[-6,8,-1,-10,-9,3],[2,1,4,10,-7,7],[-1,1,-3,-1,-7,6],[1,-5,5,-4,-7,-4],[1,4,7,3,-6,9],[7,8,-8,3,2,-10],[5,3,-10,-1,-3,8],[6,-7,8,-4,6,2]],[[-6,-3,-5,7,-8,-10],[-7,9,7,9,1,-8],[2,7,-3,1,-3,10],[-9,8,7,-8,-10,-4],[6,-10,9,-7,9,-10],[2,2,8,-3,-10,6],[10,4,3,-7,-3,-6],[-7,5,7,-6,7,-6],[1,3,2,-9,-5,2],[-2,7,-8,-8,-5,8],[-6,-3,-6,9,-10,-9]]], dtype = "uint16")#candidate|2|(9, 11, 6)|const|uint16
var_3 = relay.var("var_3", dtype = "uint16", shape = (9, 11, 6))#candidate|3|(9, 11, 6)|var|uint16
bop_4 = relay.right_shift(const_2.astype('uint16'), relay.reshape(var_3.astype('uint16'), relay.shape_of(const_2))) # shape=(9, 11, 6)
uop_17 = relay.tan(bop_4.astype('float32')) # shape=(9, 11, 6)
output = relay.Tuple([uop_17,])
output2 = relay.Tuple([uop_17,])
func_22 = relay.Function([var_3,], output)
mod['func_22'] = func_22
mod = relay.transform.InferType()(mod)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
var_23 = relay.var("var_23", dtype = "uint16", shape = (9, 11, 6))#candidate|23|(9, 11, 6)|var|uint16
func_22_call = mutated_mod.get_global_var('func_22')
call_24 = func_22_call(var_23)
output = call_24
func_25 = relay.Function([var_23], output)
mutated_mod['func_25'] = func_25
mutated_mod = relay.transform.InferType()(mutated_mod)
const_42 = relay.const([[[6.828708,-7.932706,3.712365,-0.130355,-4.983618],[7.333843,7.195550,-2.417356,-6.968947,-1.794980],[5.568788,3.719045,-7.720078,9.784129,2.583042],[1.360172,7.671502,-3.874821,9.435072,7.781578],[-2.239249,8.410489,8.881031,-9.811578,0.998283],[1.086515,2.022809,9.316671,-0.436926,-0.275330],[0.861189,-5.888015,5.871141,7.091132,1.852461],[-8.067132,6.968677,-5.983031,1.862011,7.116437]],[[2.781153,-7.123789,4.603218,4.554690,-7.427528],[0.729045,4.827011,0.600610,-0.110088,6.309309],[6.583604,8.081933,-9.034412,6.054127,-5.492198],[-2.549949,9.706457,0.150691,5.224147,-1.903058],[-4.896563,6.672068,-2.589751,-7.402297,-1.470008],[-3.107594,-8.942286,-7.647272,0.757670,-1.728714],[-8.190749,-2.979232,7.760487,-6.407605,-6.496479],[3.291870,-0.264158,-8.199158,0.107765,5.491468]],[[-9.958530,8.108724,-8.270918,1.496863,-6.706454],[2.196084,8.505468,-1.435158,9.455812,8.576456],[-7.488752,-3.080670,3.243626,3.749915,-2.040900],[-2.529755,-1.786646,1.222278,-5.905370,0.556019],[-4.787262,8.430591,-2.793570,6.911846,0.295106],[7.140672,4.259269,-5.626001,-3.664466,0.015247],[6.382508,7.363319,3.867481,-9.640521,-6.574433],[-5.314227,-2.477691,-4.214363,-4.781030,2.392825]],[[-6.632199,4.556028,-4.953174,-5.442959,7.610317],[9.398215,-9.978019,-8.822965,3.644735,9.012725],[-3.021461,1.795655,5.150296,2.848983,8.355436],[8.647678,2.579589,0.138231,7.456456,-8.422767],[0.432808,9.643982,9.667126,7.116206,-0.422545],[-9.268615,5.559549,0.346533,6.682060,-3.421833],[0.441440,-9.856814,-3.615951,3.973812,9.999490],[-6.719225,6.972487,-2.289876,4.779245,-3.539166]],[[-0.718703,0.182258,-9.895109,0.723937,9.588126],[-5.789206,2.773498,-1.678416,-8.235703,7.437086],[4.521764,-9.797968,9.612900,7.345128,-7.858608],[-7.667919,-4.247804,-8.342739,3.632188,-0.982716],[3.233478,2.123565,0.870633,-6.830926,3.738214],[-0.639749,7.506031,-5.135842,5.437558,-6.755327],[9.796210,2.856062,-8.927379,-0.066473,5.032516],[-0.003974,1.224967,5.073227,9.940459,-2.701372]]], dtype = "float64")#candidate|42|(5, 8, 5)|const|float64
uop_43 = relay.exp(const_42.astype('float64')) # shape=(5, 8, 5)
output = relay.Tuple([uop_43,])
output2 = relay.Tuple([uop_43,])
func_47 = relay.Function([], output)
mod['func_47'] = func_47
mod = relay.transform.InferType()(mod)
mutated_mod['func_47'] = func_47
mutated_mod = relay.transform.InferType()(mutated_mod)
func_47_call = mutated_mod.get_global_var('func_47')
call_48 = func_47_call()
output = call_48
func_49 = relay.Function([], output)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_81 = relay.TupleGetItem(func_47_call(), 0)
call_82 = relay.TupleGetItem(func_49_call(), 0)
output = call_81
output2 = call_82
func_90 = relay.Function([], output)
mod['func_90'] = func_90
mod = relay.transform.InferType()(mod)
mutated_mod['func_90'] = func_90
mutated_mod = relay.transform.InferType()(mutated_mod)
func_90_call = mutated_mod.get_global_var('func_90')
call_91 = func_90_call()
output = call_91
func_92 = relay.Function([], output)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
func_90_call = mod.get_global_var('func_90')
func_92_call = mutated_mod.get_global_var('func_92')
call_111 = func_90_call()
call_112 = func_90_call()
uop_114 = relay.sigmoid(call_111.astype('float32')) # shape=(5, 8, 5)
uop_116 = relay.sigmoid(call_112.astype('float32')) # shape=(5, 8, 5)
output = uop_114
output2 = uop_116
func_120 = relay.Function([], output)
mod['func_120'] = func_120
mod = relay.transform.InferType()(mod)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mutated_mod.get_global_var('func_120')
call_121 = func_120_call()
output = call_121
func_122 = relay.Function([], output)
mutated_mod['func_122'] = func_122
mutated_mod = relay.transform.InferType()(mutated_mod)
const_137 = relay.const([[[-3.359307,-4.691678,-8.995864],[5.854093,-5.664657,4.936346],[7.389580,5.608668,7.658120],[-8.396590,2.049493,2.692381],[-6.848415,-0.441458,9.377508],[-4.910118,-1.959641,4.962000],[0.235507,6.339911,-0.177403],[3.626803,-5.732890,-3.672653],[1.995128,0.343560,-9.574190],[-3.967720,1.925149,-8.207372],[-2.876516,-5.058739,8.365738],[-8.202849,-9.292252,-2.605421]],[[-9.662871,-6.110752,-5.805660],[-1.561063,2.508783,-2.193794],[-4.755404,-8.258403,-9.398222],[-0.807126,-1.461316,6.013887],[7.012213,-8.428054,-7.950547],[-9.446687,-6.669441,1.964858],[7.149342,-3.560901,2.767630],[-1.798253,7.276443,6.622199],[6.650360,5.660736,-8.905210],[1.065260,-1.434127,-2.186756],[-5.486079,4.688082,0.559947],[-1.229548,6.971912,-2.489325]],[[0.716274,-9.402434,0.491428],[-7.519971,-9.927342,-5.390901],[2.565617,-6.428069,3.043038],[-3.412871,7.550835,-7.400461],[-6.248941,8.020823,-6.679443],[-3.901353,5.185442,-0.780164],[8.931055,4.808645,-6.781868],[-7.661157,-9.615989,6.300113],[8.735925,9.183544,-6.956736],[-9.669988,-2.391437,-9.993237],[6.468322,7.653604,3.592512],[8.369833,-4.985052,-0.679283]],[[7.748075,-9.688647,0.566115],[6.641434,7.787847,7.177920],[1.236051,-3.502333,-8.666143],[-3.198891,-7.770714,-7.655243],[1.972855,-7.122043,-3.808130],[7.234937,8.895858,5.841796],[2.960776,-3.602456,-8.943055],[-9.021382,9.578271,8.192017],[7.514779,6.459698,5.110390],[-9.686044,4.916641,9.997071],[0.617236,6.185090,-0.717051],[-8.507568,-4.434106,8.808681]],[[-3.031314,-6.478514,-7.511390],[8.398623,1.963123,4.028246],[-0.371461,7.425909,-6.168507],[-9.264233,0.498712,9.561943],[-4.252074,-8.300479,-2.520337],[8.253824,4.081645,-0.338738],[-2.366794,-5.028571,-9.199331],[-7.762201,6.914134,-2.346902],[-6.812049,1.644268,0.421605],[-3.882946,-8.310125,-5.958050],[-7.862103,-7.545392,5.438590],[2.476243,-1.956924,6.736581]],[[-8.298402,-1.800643,9.724732],[2.733330,5.719256,-3.021892],[2.454069,-0.996188,0.150011],[-9.293663,0.711421,5.648145],[4.920908,-1.860737,-6.394339],[-8.023596,0.781880,-3.262133],[-0.782118,3.964935,7.556121],[-5.123523,-9.017261,-5.703965],[9.030728,9.188681,4.266621],[8.053004,0.693285,0.417187],[1.139685,-9.050588,-4.871197],[3.615990,2.421628,-7.781316]],[[-7.223308,8.495831,8.366174],[-8.106731,4.626337,5.299547],[7.380052,0.156850,-2.980732],[-8.749113,5.692200,2.698075],[-5.600395,-9.682904,1.680051],[-4.009073,7.759088,-7.835096],[9.885914,8.160225,-8.117024],[-9.236894,0.889814,-1.507631],[-2.697739,2.270599,-8.731382],[1.727473,2.680111,-0.681636],[-7.788194,5.376155,-6.039292],[-1.220711,-8.761793,-7.729825]]], dtype = "float32")#candidate|137|(7, 12, 3)|const|float32
uop_138 = relay.sigmoid(const_137.astype('float32')) # shape=(7, 12, 3)
output = uop_138
output2 = uop_138
func_140 = relay.Function([], output)
mod['func_140'] = func_140
mod = relay.transform.InferType()(mod)
output = func_140()
func_141 = relay.Function([], output)
mutated_mod['func_141'] = func_141
mutated_mod = relay.transform.InferType()(mutated_mod)
var_162 = relay.var("var_162", dtype = "float64", shape = (5, 12, 10))#candidate|162|(5, 12, 10)|var|float64
uop_163 = relay.cos(var_162.astype('float64')) # shape=(5, 12, 10)
output = relay.Tuple([uop_163,])
output2 = relay.Tuple([uop_163,])
func_166 = relay.Function([var_162,], output)
mod['func_166'] = func_166
mod = relay.transform.InferType()(mod)
var_167 = relay.var("var_167", dtype = "float64", shape = (5, 12, 10))#candidate|167|(5, 12, 10)|var|float64
output = func_166(var_167)
func_168 = relay.Function([var_167], output)
mutated_mod['func_168'] = func_168
mutated_mod = relay.transform.InferType()(mutated_mod)
var_173 = relay.var("var_173", dtype = "uint64", shape = (7, 1, 10))#candidate|173|(7, 1, 10)|var|uint64
var_174 = relay.var("var_174", dtype = "uint64", shape = (7, 16, 10))#candidate|174|(7, 16, 10)|var|uint64
bop_175 = relay.multiply(var_173.astype('uint64'), var_174.astype('uint64')) # shape=(7, 16, 10)
output = relay.Tuple([bop_175,])
output2 = relay.Tuple([bop_175,])
func_188 = relay.Function([var_173,var_174,], output)
mod['func_188'] = func_188
mod = relay.transform.InferType()(mod)
var_189 = relay.var("var_189", dtype = "uint64", shape = (7, 1, 10))#candidate|189|(7, 1, 10)|var|uint64
var_190 = relay.var("var_190", dtype = "uint64", shape = (7, 16, 10))#candidate|190|(7, 16, 10)|var|uint64
output = func_188(var_189,var_190,)
func_191 = relay.Function([var_189,var_190,], output)
mutated_mod['func_191'] = func_191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_204 = relay.TupleGetItem(func_47_call(), 0)
call_205 = relay.TupleGetItem(func_49_call(), 0)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_232 = relay.TupleGetItem(func_47_call(), 0)
call_233 = relay.TupleGetItem(func_49_call(), 0)
uop_251 = relay.sin(call_232.astype('float32')) # shape=(5, 8, 5)
uop_253 = relay.sin(call_233.astype('float32')) # shape=(5, 8, 5)
uop_257 = relay.log2(uop_251.astype('float64')) # shape=(5, 8, 5)
uop_259 = relay.log2(uop_253.astype('float64')) # shape=(5, 8, 5)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
var_261 = relay.var("var_261", dtype = "uint16", shape = (594,))#candidate|261|(594,)|var|uint16
call_260 = relay.TupleGetItem(func_22_call(relay.reshape(var_261.astype('uint16'), [9, 11, 6])), 0)
call_262 = relay.TupleGetItem(func_25_call(relay.reshape(var_261.astype('uint16'), [9, 11, 6])), 0)
output = relay.Tuple([call_204,uop_257,call_260,var_261,])
output2 = relay.Tuple([call_205,uop_259,call_262,var_261,])
func_263 = relay.Function([var_261,], output)
mod['func_263'] = func_263
mod = relay.transform.InferType()(mod)
var_264 = relay.var("var_264", dtype = "uint16", shape = (594,))#candidate|264|(594,)|var|uint16
output = func_263(var_264)
func_265 = relay.Function([var_264], output)
mutated_mod['func_265'] = func_265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_275 = relay.TupleGetItem(func_47_call(), 0)
call_276 = relay.TupleGetItem(func_49_call(), 0)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_280 = relay.TupleGetItem(func_47_call(), 0)
call_281 = relay.TupleGetItem(func_49_call(), 0)
bop_293 = relay.greater_equal(call_275.astype('bool'), relay.reshape(call_280.astype('bool'), relay.shape_of(call_275))) # shape=(5, 8, 5)
bop_296 = relay.greater_equal(call_276.astype('bool'), relay.reshape(call_281.astype('bool'), relay.shape_of(call_276))) # shape=(5, 8, 5)
output = bop_293
output2 = bop_296
func_301 = relay.Function([], output)
mod['func_301'] = func_301
mod = relay.transform.InferType()(mod)
output = func_301()
func_302 = relay.Function([], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_305 = func_301_call()
call_306 = func_301_call()
output = relay.Tuple([call_305,])
output2 = relay.Tuple([call_306,])
func_307 = relay.Function([], output)
mod['func_307'] = func_307
mod = relay.transform.InferType()(mod)
output = func_307()
func_308 = relay.Function([], output)
mutated_mod['func_308'] = func_308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_315 = func_140_call()
call_316 = func_140_call()
output = relay.Tuple([call_315,])
output2 = relay.Tuple([call_316,])
func_317 = relay.Function([], output)
mod['func_317'] = func_317
mod = relay.transform.InferType()(mod)
output = func_317()
func_318 = relay.Function([], output)
mutated_mod['func_318'] = func_318
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_399 = func_120_call()
call_400 = func_120_call()
uop_413 = relay.cos(call_399.astype('float64')) # shape=(5, 8, 5)
uop_415 = relay.cos(call_400.astype('float64')) # shape=(5, 8, 5)
var_433 = relay.var("var_433", dtype = "float32", shape = (5, 8, 5))#candidate|433|(5, 8, 5)|var|float32
bop_434 = relay.less(call_399.astype('bool'), relay.reshape(var_433.astype('bool'), relay.shape_of(call_399))) # shape=(5, 8, 5)
bop_437 = relay.less(call_400.astype('bool'), relay.reshape(var_433.astype('bool'), relay.shape_of(call_400))) # shape=(5, 8, 5)
output = relay.Tuple([uop_413,bop_434,])
output2 = relay.Tuple([uop_415,bop_437,])
func_438 = relay.Function([var_433,], output)
mod['func_438'] = func_438
mod = relay.transform.InferType()(mod)
mutated_mod['func_438'] = func_438
mutated_mod = relay.transform.InferType()(mutated_mod)
var_439 = relay.var("var_439", dtype = "float32", shape = (5, 8, 5))#candidate|439|(5, 8, 5)|var|float32
func_438_call = mutated_mod.get_global_var('func_438')
call_440 = func_438_call(var_439)
output = call_440
func_441 = relay.Function([var_439], output)
mutated_mod['func_441'] = func_441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_516 = func_301_call()
call_517 = func_301_call()
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
call_519 = relay.TupleGetItem(func_438_call(relay.reshape(call_516.astype('float32'), [5, 8, 5])), 0)
call_520 = relay.TupleGetItem(func_441_call(relay.reshape(call_516.astype('float32'), [5, 8, 5])), 0)
bop_521 = relay.greater(call_519.astype('bool'), relay.reshape(call_516.astype('bool'), relay.shape_of(call_519))) # shape=(5, 8, 5)
bop_524 = relay.greater(call_520.astype('bool'), relay.reshape(call_517.astype('bool'), relay.shape_of(call_520))) # shape=(5, 8, 5)
func_166_call = mod.get_global_var('func_166')
func_168_call = mutated_mod.get_global_var('func_168')
const_526 = relay.const([-4.807698,3.870917,0.313236,2.365281,-0.933401,3.803831,4.688580,-4.162778,8.662574,-9.653384,-8.903491,-9.917838,-1.986507,9.026178,0.569384,-4.768905,7.787559,-4.759734,-3.402096,-2.923770,0.876065,-2.566076,9.381621,4.653231,-2.605829,8.169057,-9.478479,-8.341768,2.521055,3.807748,2.529144,-4.535747,6.992828,-0.046365,-9.572623,3.949391,-6.982990,-5.436214,-1.387034,-0.379365,-4.511726,7.502750,1.077259,4.853157,0.690623,-2.205664,-9.229581,3.086958,5.481753,5.804311,-1.945634,8.718133,8.018787,-2.894672,4.624562,-9.206971,3.288929,-6.950660,2.213680,9.581287,-1.960985,-4.478571,-2.546456,3.703173,9.404365,5.930101,4.449652,-8.800604,8.960050,-7.490262,-3.155470,-8.096221,-0.491803,-4.923065,-9.393433,-0.239069,5.429897,-9.232641,6.513697,5.448227,-2.297290,-8.002101,6.777733,-2.125480,-0.901318,8.941186,-3.959527,-6.856105,5.323388,-1.699335,-1.136447,-6.027555,1.915639,3.469759,-1.450846,0.717143,7.929954,-9.380449,2.429722,3.933648,5.681005,-5.804088,-6.101068,-2.784751,6.533070,-2.181278,-5.716069,-6.412685,7.199583,-6.366274,-6.689095,-1.333977,4.588953,5.712211,-6.218250,-6.265163,0.454543,9.805402,9.418723,3.651417,-7.819533,-0.644236,9.774785,3.760966,-0.034378,-3.931518,4.369410,5.146226,-8.362328,7.748790,5.672153,-4.786004,-1.905042,2.345533,-8.336220,8.003638,-3.704146,0.843312,-5.243656,-7.047604,-8.887979,8.044849,8.783941,-4.880378,9.161699,-9.070075,-6.074247,-0.842492,-8.239605,-3.659523,-7.797714,-5.082487,-8.627031,-5.447063,-8.780851,0.347118,-1.595783,-9.215855,1.649074,9.145890,8.359508,-4.139827,-4.646219,-2.511924,-2.733512,0.526305,-0.109577,4.798559,6.981865,5.654639,-9.637160,-5.310631,-1.746976,-2.460798,-9.670446,-1.037995,-7.281500,4.609812,7.460017,6.265123,-4.849726,8.155258,-5.164947,5.971210,-2.687419,6.201101,-3.297945,2.301902,7.344418,-7.832875,3.712865,7.393969,2.078145,6.711611,-9.626736,-5.465868,8.636676,-7.527928,-4.609121,-3.033712,-9.077901,3.352324,2.128702,4.488170,4.311940,-5.207606,9.646061,-1.039389,-6.888333,2.906607,-0.970687,-5.056002,0.848370,-1.865424,-1.175146,5.127556,-8.105903,5.779951,2.774525,-2.868134,8.925919,-5.044350,-3.704495,5.974019,-5.633943,-4.615407,1.427484,-5.125980,8.537611,-9.033445,3.723374,-6.182701,4.111933,-5.457074,1.314806,5.712762,1.505289,1.609016,-8.140235,1.097359,7.470085,7.298729,-4.222878,-8.979952,-4.956535,4.914373,-3.519038,-2.282812,-0.470601,-1.910423,5.832941,-8.036904,7.097038,2.140176,-4.830860,-7.491921,-8.219381,-0.745474,-4.256017,-5.511921,-4.140383,-9.639878,3.956344,-9.532406,0.736179,3.425876,-9.441423,-5.170763,2.862780,9.252912,-1.304876,-5.719771,6.452947,4.124044,0.545478,5.116376,5.665746,-7.864398,-9.296760,-7.814381,1.416830,-3.671208,8.199810,-0.523271,-6.430943,1.953823,1.403713,6.341146,-3.107919,-1.364469,-8.544997,2.216176,-5.224783,2.168198,-1.039816,-7.649513,9.376046,4.319371,4.053333,-7.681593,5.496226,-4.390876,1.381059,-9.023358,-6.027940,0.229948,-6.040455,8.103844,-7.488712,8.441033,-0.536071,-5.677409,-8.034508,2.042344,6.438683,-7.237351,5.556705,-9.251362,-7.980597,-1.833874,1.209973,-9.607504,2.758006,-9.158883,-4.114458,-1.290034,-9.225490,-5.843684,7.375449,-4.730416,6.563599,7.920217,-6.203713,7.229277,-3.521385,6.158960,6.492861,1.356964,5.181932,-2.942523,8.049552,4.598678,-2.065650,7.220709,1.714830,-1.581378,-3.719060,5.763655,2.531304,2.221261,-0.009514,-3.589467,-7.259679,-2.783261,9.844577,5.729247,-2.655226,-0.367527,4.313806,-7.528779,-5.441622,1.396439,-9.854438,9.909867,-5.097853,-1.608182,1.627174,-5.741108,-0.953414,-9.945968,-4.841728,0.254068,-5.445422,3.599173,4.141256,-1.800673,-9.187233,-9.063628,-6.932860,1.843466,-8.956079,3.176225,-7.933680,-8.283434,6.736661,-3.987587,-3.230895,-4.176465,-5.234909,-4.114592,0.919483,1.048384,9.950254,-2.268154,5.611722,-1.570104,4.324631,0.784801,6.659373,9.679695,-2.165696,-8.008825,0.166096,4.764770,-5.069379,6.766514,-8.499328,-8.858834,-7.809544,6.444360,-9.179458,4.100017,-7.174696,8.418435,-9.938141,-6.418148,-9.797945,-2.648030,3.080587,4.982989,7.344269,2.128746,9.604110,3.626836,-5.670643,7.784084,-8.259295,1.917058,-9.674296,8.748059,7.569136,0.568593,-0.486043,5.675657,-5.087357,-6.237092,2.418885,2.188368,3.850990,-5.541183,-4.802129,-3.566876,-4.396904,1.916321,-4.835546,-6.918019,-2.375650,3.815623,0.185751,-7.475518,-4.877305,4.352662,-3.887565,-2.235913,-8.787182,2.266582,7.204398,9.060223,4.519994,-9.170178,0.334061,4.591184,-0.957414,0.994412,7.644378,5.600839,-1.463780,0.213781,-3.700156,-1.162899,-3.221935,2.684359,6.328284,-7.851581,6.094694,-9.707867,4.807839,-9.069637,-4.332875,9.569373,1.479165,4.530419,5.899473,-1.584748,8.169968,-9.902555,-0.005464,2.094264,0.883403,5.955101,-4.677145,3.828528,2.170888,0.585745,6.709247,-5.687283,-2.715130,-3.105360,-1.341846,0.914117,5.974474,-6.124408,7.061024,5.424474,0.219013,3.146868,-2.685247,1.506399,-8.225230,-1.190708,3.874337,-2.914317,-5.572572,9.058267,0.887687,-1.010162,8.958239,-7.243497,-4.726150,8.043226,-1.383026,5.737778,7.309519,6.031123,-9.968866,-8.253896,-7.128625,0.522096,9.466270,8.274539,6.204807,-5.775566,-4.372520,3.615528,-2.339868,-6.496261,5.078012,-6.703814,-4.463165,-5.892500,4.144179,-6.048880,9.740223,-4.580539,6.255810,4.759350,-6.144205,0.024599,-9.317465,2.424488,9.749735,-9.696886,-3.868946,4.453911,-9.473967,0.091126,-1.095768,1.190825,5.561875,0.663634,3.532832,3.866243,-6.502172,1.425989,1.904308,5.879534,-1.909573,5.755501,-7.631731,-3.774307,-8.580480,-5.783966,7.527245,-9.585431,-4.220669,5.586305,-8.594742,9.989372,4.440543,3.916633,4.814393,3.641524,-8.911742,-7.732401,-1.198697,6.810341,-7.347721,9.171460,5.194796,-8.392778,6.737430,-0.336908,-6.812712,-2.791691,-3.373142,-4.309265,9.387196,3.893839,-9.574193,-3.566723], dtype = "float64")#candidate|526|(600,)|const|float64
call_525 = relay.TupleGetItem(func_166_call(relay.reshape(const_526.astype('float64'), [5, 12, 10])), 0)
call_527 = relay.TupleGetItem(func_168_call(relay.reshape(const_526.astype('float64'), [5, 12, 10])), 0)
bop_536 = relay.less(call_525.astype('bool'), relay.reshape(const_526.astype('bool'), relay.shape_of(call_525))) # shape=(5, 12, 10)
bop_539 = relay.less(call_527.astype('bool'), relay.reshape(const_526.astype('bool'), relay.shape_of(call_527))) # shape=(5, 12, 10)
output = relay.Tuple([bop_521,bop_536,])
output2 = relay.Tuple([bop_524,bop_539,])
func_544 = relay.Function([], output)
mod['func_544'] = func_544
mod = relay.transform.InferType()(mod)
mutated_mod['func_544'] = func_544
mutated_mod = relay.transform.InferType()(mutated_mod)
func_544_call = mutated_mod.get_global_var('func_544')
call_545 = func_544_call()
output = call_545
func_546 = relay.Function([], output)
mutated_mod['func_546'] = func_546
mutated_mod = relay.transform.InferType()(mutated_mod)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_558 = relay.TupleGetItem(func_544_call(), 0)
call_559 = relay.TupleGetItem(func_546_call(), 0)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_590 = func_140_call()
call_591 = func_140_call()
output = relay.Tuple([call_558,call_590,])
output2 = relay.Tuple([call_559,call_591,])
func_592 = relay.Function([], output)
mod['func_592'] = func_592
mod = relay.transform.InferType()(mod)
mutated_mod['func_592'] = func_592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_592_call = mutated_mod.get_global_var('func_592')
call_593 = func_592_call()
output = call_593
func_594 = relay.Function([], output)
mutated_mod['func_594'] = func_594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mod.get_global_var('func_307')
func_308_call = mutated_mod.get_global_var('func_308')
call_609 = relay.TupleGetItem(func_307_call(), 0)
call_610 = relay.TupleGetItem(func_308_call(), 0)
uop_635 = relay.atanh(call_609.astype('float64')) # shape=(5, 8, 5)
uop_637 = relay.atanh(call_610.astype('float64')) # shape=(5, 8, 5)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_645 = func_120_call()
call_646 = func_120_call()
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_661 = func_120_call()
call_662 = func_120_call()
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
call_676 = relay.TupleGetItem(func_438_call(relay.reshape(call_645.astype('float32'), [5, 8, 5])), 1)
call_677 = relay.TupleGetItem(func_441_call(relay.reshape(call_645.astype('float32'), [5, 8, 5])), 1)
uop_684 = relay.cosh(call_676.astype('float32')) # shape=(5, 8, 5)
uop_686 = relay.cosh(call_677.astype('float32')) # shape=(5, 8, 5)
uop_691 = relay.asinh(call_661.astype('float64')) # shape=(5, 8, 5)
uop_693 = relay.asinh(call_662.astype('float64')) # shape=(5, 8, 5)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_695 = relay.TupleGetItem(func_544_call(), 1)
call_696 = relay.TupleGetItem(func_546_call(), 1)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
var_700 = relay.var("var_700", dtype = "uint16", shape = (594,))#candidate|700|(594,)|var|uint16
call_699 = relay.TupleGetItem(func_22_call(relay.reshape(var_700.astype('uint16'), [9, 11, 6])), 0)
call_701 = relay.TupleGetItem(func_25_call(relay.reshape(var_700.astype('uint16'), [9, 11, 6])), 0)
bop_710 = relay.equal(uop_691.astype('bool'), relay.reshape(uop_684.astype('bool'), relay.shape_of(uop_691))) # shape=(5, 8, 5)
bop_713 = relay.equal(uop_693.astype('bool'), relay.reshape(uop_686.astype('bool'), relay.shape_of(uop_693))) # shape=(5, 8, 5)
const_716 = relay.const([3,2,10,-1,-3,6,-2,8,-2,3,-8,-7,6,-9,-4,-10,1,-6,-9,7,6,3,2,3,-4,7,3,-8,-4,1,-2,-6,-6,5,9,-9,-5,-4,4,10,-8,-9,-3,-9,-3,-4,5,9,2,7,6,-8,-8,6,4,9,5,2,-4,2,3,-4,5,10,-9,-1,-4,-4,3,-6,7,8,3,9,-3,7,-8,6,8,1,6,-2,2,5,-9,-4,-8,10,4,-1,2,-7,-2,-2,-1,-10,6,5,10,-5,3,-7,4,2,-9,-9,2,-1,-8,-7,-7,-4,-8,3,1,9,9,-4,-7,5,1,7,9,-10,-1,6,3,-3,10,-9,7,-6,-7,-3,9,10,-1,5,-7,7,-1,7,2,3,9,-3,-3,5,1,4,-6,-2,-3,9,2,-9,-10,7,8,3,5,6,-9,7,8,10,6,-1,8,1,5,-3,6,-6,-1,4,9,3,10,5,-9,-2,-8,-6,-2,-6,-4,-3,-2,-7,-9,8,-10,3,-1,9,-7,7,-5,-4,9,-5,3,-5,4,8,2,1,-9,3,-7,1,3,-1,-10,-7,-5,2,-8,-2,9,-8,-6,-5,7,6,-10,10,-5,-4,-4,-6,1,8,6,-4,10,8,-4,2,10,-5,-6,-6,4,8,10,10,3,-3,-7,-6,2,2,8,5,-1,10,3,-10,7,8,3,1,3,-7,-4,7,8,9,-3,-3,5,4,9,-7,-2,-6,-3,1,2,8,2,9,5,3,4,-6,9,-9,4,7,-10,-2,-9,-1,-2,6,-4,-1,2,-9,-10,-5,5,-7,1,6,6,-6,-1,-5,-4,5,5,7,2,6,-10,-10,7,5,-3,1,7,6,2,10,-4,6,-5,-9,-2,6,9,9,5,-6,-5,10,4,-1,-7,4,10,-3,6,1,-8,-10,-4,5,-2,-10,7,2,-5,-8,6,6,-6,2,-10,8,9,-8,-8,4,3,-9,-1,-4,4,1,-5,-7,-5,-1,-1,4,8,4,-5,5,2,10,5,-2,-5,-10,-9,1,7,8,2,9,-5,5,-3,8,6,-1,-2,-9,-5,9,-7,5,-4,-1,6,-8,5,1,-6,3,8,3,4,-9,3,2,-8,-4,-1,-9,-7,8,-10,9,-7,-8,-6,-5,4,-1,1,9,-10,4,-7,10,9,5,-8,-5,-7,-10,-3,3,-10,-8,-8,4,9,-1,8,2,1,7,10,-6,5,9,-2,9,7,-5,-4,4,7,-2,9,4,-9,-1,3,7,-3,7,-9,9,4,2,5,9,-1,6,-5,2,-1,5,10,3,-2,-1,7,-8,4,-6,4,-8,8,-7,-6,7,1,3,-7,9,7,2,-7,-4,10,7,-7,1,1,-10,-6,-4,10,10,-4,-9,-6,4,9,4,9,-3,6,-4,1,-4,1,-4,7,-2,-5,-1,-2,-6,-4,2,4,10,1,-9,-7,9,-2,1,-9,10,4,6,-8,-6,-5,-4,4,-10,-7,9,-1,4,-1,5,-7,-7,8,-6,-8,-7,-1,-3,-6,-1,-10,-8,9,6,-4,4,-6,4,-4,10,-3,8,-7,-8], dtype = "uint16")#candidate|716|(594,)|const|uint16
bop_717 = relay.less(var_700.astype('bool'), relay.reshape(const_716.astype('bool'), relay.shape_of(var_700))) # shape=(594,)
output = relay.Tuple([uop_635,call_645,call_695,call_699,bop_710,bop_717,])
output2 = relay.Tuple([uop_637,call_646,call_696,call_701,bop_713,bop_717,])
func_724 = relay.Function([var_700,], output)
mod['func_724'] = func_724
mod = relay.transform.InferType()(mod)
var_725 = relay.var("var_725", dtype = "uint16", shape = (594,))#candidate|725|(594,)|var|uint16
output = func_724(var_725)
func_726 = relay.Function([var_725], output)
mutated_mod['func_726'] = func_726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_739 = relay.TupleGetItem(func_544_call(), 1)
call_740 = relay.TupleGetItem(func_546_call(), 1)
func_592_call = mod.get_global_var('func_592')
func_594_call = mutated_mod.get_global_var('func_594')
call_743 = relay.TupleGetItem(func_592_call(), 0)
call_744 = relay.TupleGetItem(func_594_call(), 0)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_750 = func_301_call()
call_751 = func_301_call()
uop_756 = relay.erf(call_739.astype('float64')) # shape=(5, 12, 10)
uop_758 = relay.erf(call_740.astype('float64')) # shape=(5, 12, 10)
bop_759 = relay.floor_mod(uop_756.astype('float64'), relay.reshape(call_739.astype('float64'), relay.shape_of(uop_756))) # shape=(5, 12, 10)
bop_762 = relay.floor_mod(uop_758.astype('float64'), relay.reshape(call_740.astype('float64'), relay.shape_of(uop_758))) # shape=(5, 12, 10)
output = relay.Tuple([call_743,call_750,bop_759,])
output2 = relay.Tuple([call_744,call_751,bop_762,])
func_764 = relay.Function([], output)
mod['func_764'] = func_764
mod = relay.transform.InferType()(mod)
mutated_mod['func_764'] = func_764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_764_call = mutated_mod.get_global_var('func_764')
call_765 = func_764_call()
output = call_765
func_766 = relay.Function([], output)
mutated_mod['func_766'] = func_766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_788 = func_120_call()
call_789 = func_120_call()
var_799 = relay.var("var_799", dtype = "float32", shape = (5, 8, 5))#candidate|799|(5, 8, 5)|var|float32
bop_800 = relay.bitwise_or(call_788.astype('uint8'), relay.reshape(var_799.astype('uint8'), relay.shape_of(call_788))) # shape=(5, 8, 5)
bop_803 = relay.bitwise_or(call_789.astype('uint8'), relay.reshape(var_799.astype('uint8'), relay.shape_of(call_789))) # shape=(5, 8, 5)
output = relay.Tuple([bop_800,])
output2 = relay.Tuple([bop_803,])
func_804 = relay.Function([var_799,], output)
mod['func_804'] = func_804
mod = relay.transform.InferType()(mod)
mutated_mod['func_804'] = func_804
mutated_mod = relay.transform.InferType()(mutated_mod)
var_805 = relay.var("var_805", dtype = "float32", shape = (5, 8, 5))#candidate|805|(5, 8, 5)|var|float32
func_804_call = mutated_mod.get_global_var('func_804')
call_806 = func_804_call(var_805)
output = call_806
func_807 = relay.Function([var_805], output)
mutated_mod['func_807'] = func_807
mutated_mod = relay.transform.InferType()(mutated_mod)
const_835 = relay.const([[[-8.127038,8.282200,2.799014,3.350926,-7.583707,4.193084,-2.215824],[2.073701,9.647471,1.248994,-2.167792,-3.755735,2.906491,-3.836800],[8.768621,-7.717691,4.592540,2.575115,6.790930,-4.074506,-8.525940],[8.328897,0.325868,-4.862430,-7.359175,4.701297,7.709830,9.382428],[5.662261,5.212853,3.486298,-2.080908,0.371284,7.098229,-2.132040],[9.773456,5.898216,1.268681,1.378822,-7.680824,7.219259,-6.416680],[2.714974,-8.140216,2.575239,2.136657,8.938904,-9.914662,-4.531026],[-3.024718,6.092649,1.709575,-8.705483,7.478243,-4.708633,4.813472],[0.715145,6.601183,-2.734414,0.597956,1.548684,-3.534705,-4.775957],[-3.751660,0.844168,0.837901,-4.957872,4.621941,-5.872654,-1.519366],[-5.939165,-7.423560,3.375522,-8.758692,3.380675,-4.579271,6.835010]],[[-7.510017,1.257689,-9.189268,3.318884,4.891765,-9.655836,-1.013610],[3.043705,-3.476725,3.483939,-1.344122,-8.628772,-7.520920,-6.936571],[-7.088408,8.757088,-9.578165,3.784265,6.890879,-9.189246,-7.502129],[-6.065167,8.549676,4.563007,1.331052,2.728800,-4.006459,5.932526],[7.766451,4.738706,0.329953,-5.012635,4.770460,-7.440257,-6.176460],[0.107611,0.242199,-8.356006,3.438904,-0.984702,-6.581443,-9.674826],[8.316997,2.678050,-8.683099,4.943724,8.569224,3.602545,6.879021],[-1.072148,-5.301814,6.056366,0.571927,7.049264,2.564705,5.463706],[2.863939,-7.335307,4.055348,8.176358,-2.257832,8.872180,5.894001],[-4.767916,-0.232078,-5.516852,-0.838831,4.616960,4.613150,5.615197],[-3.805761,-9.174642,-2.484946,9.906095,-0.092331,3.463889,6.214298]],[[1.773188,9.759434,7.920269,-2.013597,0.861517,4.587891,-2.835554],[3.832416,-9.514062,-4.053987,4.238805,7.691316,1.165196,0.500159],[3.973018,4.914580,3.886803,-1.905989,9.844181,6.338843,-6.877421],[4.958383,6.015931,-7.700113,-0.106673,2.325370,5.609292,-1.138986],[-1.937295,-0.520249,-7.650743,-7.783083,-5.830079,3.331046,5.834618],[-5.684909,1.388819,-5.359338,-3.585334,-3.861400,-6.507602,-3.237206],[7.953494,-5.789571,6.178783,0.574914,-8.245416,0.700768,-6.487735],[-7.663890,1.526967,6.070337,-5.769086,-8.383951,-2.103263,-2.783902],[-6.487343,4.979946,6.753491,4.153242,-4.172845,1.627984,1.505828],[2.206775,8.748462,9.505425,3.970626,9.834321,2.742828,-8.791715],[7.448669,-1.856359,-2.487436,9.236533,7.125467,-0.153961,3.584254]],[[-8.397703,-4.226924,-4.357714,-5.061987,0.552735,2.058612,0.114522],[-9.645338,-9.885683,-7.777430,0.074609,-5.748323,5.529632,6.409424],[1.020102,8.114075,8.702307,-9.538284,5.929172,-2.801114,-0.477820],[7.299615,-1.601267,4.121583,9.478120,5.622262,-3.088600,1.922286],[0.943656,5.844681,8.940727,-8.591200,6.313587,5.878185,5.217963],[0.406341,2.877106,-5.491610,-0.890138,-0.247816,5.339818,-1.348155],[-3.986162,0.387717,-0.353880,-5.487766,3.775785,2.949523,9.047651],[7.973226,-3.529127,-5.785681,-2.322609,9.799625,2.840731,-2.956593],[0.817996,-2.854425,9.692095,9.956539,9.712980,8.531415,-0.480892],[1.145033,0.877306,2.443104,8.030451,5.478251,-2.879085,-7.599965],[8.838102,-9.323516,6.044891,-6.500863,2.304489,-1.597666,4.812428]],[[1.946586,-7.828115,-0.635409,-6.714597,2.953159,3.278272,0.527027],[1.876996,2.467889,-6.351268,9.506963,4.135139,-5.086686,5.374216],[8.420367,6.447500,9.050379,5.643426,3.087475,4.912794,1.580580],[-4.646044,-1.270959,-8.807847,-4.356638,7.681643,-7.193664,8.070016],[7.730427,6.834229,6.074105,-0.277610,8.149403,-2.852090,9.427244],[5.560818,6.719038,7.488358,-7.016599,6.704387,-3.089413,-7.564545],[0.374442,-6.712968,4.921594,3.810841,-7.031363,4.227229,8.856987],[-3.052655,7.617076,5.710109,6.884508,-8.905275,-8.758034,-9.904554],[-5.622301,6.438226,-3.829720,0.988992,-5.010995,1.160108,-2.106015],[-7.759876,-6.206481,-0.901244,-7.565528,-3.549300,-5.886964,6.202491],[6.938764,0.024420,3.019973,6.506297,-8.798047,8.687396,-8.858503]],[[9.713297,5.512397,-4.883634,5.512097,3.625027,3.241306,6.278886],[-7.331954,-6.741260,2.525869,8.793810,9.672609,-7.415034,9.207998],[-2.012601,-7.534450,-3.519863,8.041921,-4.278473,5.564186,-7.730328],[5.602014,-2.845009,0.705648,4.408681,1.140626,0.879650,-9.365194],[-2.772821,0.783463,9.408975,7.624441,0.547831,-6.754099,6.984347],[5.250934,-8.272166,4.187444,-0.484340,-8.631364,0.654677,-8.966991],[-7.003586,9.886685,7.397715,5.114634,-8.773070,-0.013962,9.383201],[6.561890,7.010001,-3.339930,-8.971459,-4.225620,-8.091290,-6.586807],[-4.500756,-1.473342,4.881877,-1.865534,-1.749604,8.696740,-3.865754],[-6.349551,2.148350,-0.368524,-8.137681,-1.082536,-4.211756,9.708215],[1.171719,5.873551,7.870759,-1.422043,1.286077,5.875782,-7.854722]],[[-5.203538,-3.895188,-4.123830,0.613401,-8.273131,-5.508083,-3.015018],[-7.365366,8.222230,5.955082,4.088130,4.378833,-1.218001,-4.173999],[-3.825144,-1.418656,3.406700,-6.403113,-1.911729,-4.636612,4.142566],[-8.175934,-9.237794,-3.415635,-7.282952,-1.026438,-0.154605,-0.929006],[-8.570592,-5.682462,7.483396,0.319782,7.117852,9.887424,0.258352],[7.977332,-5.067637,-2.390277,-9.532015,-4.519456,9.110412,-1.290938],[-8.214612,-6.658526,-8.659868,-7.217913,5.750019,-3.173793,9.514443],[6.260142,-6.122961,8.404996,-9.433853,6.330300,-8.168035,3.672931],[-0.141263,2.623954,-9.356867,5.301053,-2.180110,0.072266,3.243778],[2.290488,2.371388,-2.785787,8.200839,-2.462268,4.802519,-3.676306],[5.766877,2.984016,6.792695,1.833512,-0.925847,-1.348551,-1.865730]],[[9.506315,-0.771570,-0.408966,5.342545,6.253296,-2.600961,-1.483355],[0.128463,-2.589595,-3.314234,-2.257471,-1.479516,-4.064710,-8.819800],[-2.083784,-0.432553,-4.265747,-1.091153,-1.146147,0.546640,-1.096384],[3.004551,-7.384075,7.519260,1.856900,-8.433500,9.178012,2.646446],[-5.599711,9.475634,-7.759122,-6.577657,-5.160322,9.847412,-3.756698],[-2.169126,4.789923,0.831443,-4.746870,-2.731825,-1.068548,1.894014],[1.775278,2.283743,-5.778338,-6.029792,-4.419710,5.962477,1.685004],[1.689239,-3.149350,-3.915552,5.024016,4.855063,-2.678421,-5.505711],[-0.526144,5.061818,-0.992216,8.189094,5.326006,-9.079435,-9.058053],[-9.018762,-8.963351,3.341498,3.742526,-0.087634,8.559898,-6.425787],[8.751455,5.527146,-5.719863,-5.626155,3.454940,5.442127,5.858665]],[[2.284627,2.773783,-1.851023,3.652504,-5.000282,6.581585,-2.931013],[-2.249803,8.648464,6.757285,-8.973729,1.477649,-2.427261,-4.724670],[2.073261,2.862422,-8.870260,-2.965903,2.281247,-6.802705,-0.772196],[-0.454957,0.092527,4.604981,2.299674,8.864300,-4.457920,-1.212054],[2.834591,-1.356465,-0.410981,4.778760,-0.541781,4.433881,-3.849672],[-4.283617,-3.935514,5.750143,7.022383,-6.665154,3.727820,-2.265333],[-2.859717,-1.044704,-7.316121,-3.087947,7.523070,7.808199,2.971349],[8.080350,-0.468311,-5.743258,-3.479833,-1.952432,-1.079222,-4.561704],[-9.085378,4.671777,2.440143,7.648004,-0.251482,1.720601,9.540513],[9.998946,4.334329,-9.165835,-3.250221,-4.644174,-0.130751,4.475803],[8.385042,-4.100561,-7.364353,-6.351364,-7.547447,6.377598,5.292125]],[[-4.675376,1.077107,8.803176,-1.197464,3.713248,-4.165373,5.788590],[-9.355806,2.945211,8.310397,-7.865825,1.794399,9.700456,-1.443689],[-0.836949,8.175122,-1.028950,7.774585,-1.123041,-9.345888,-3.504442],[0.306731,8.799347,-7.739919,-5.866760,6.723501,-8.141657,2.930240],[-8.375728,-2.471383,-2.266935,3.032637,5.223593,-2.184205,-8.694745],[9.527008,-8.096284,-7.445052,-4.017519,-7.857571,-2.079775,5.931373],[5.723488,8.321370,-1.889190,-8.444990,8.007896,-7.209879,-4.261865],[-7.506822,1.975954,-0.657325,7.263458,0.490046,3.886026,-8.901199],[1.680380,-6.792096,-7.322141,-7.570378,-8.973796,3.996663,-5.697771],[-6.871791,2.697253,3.157085,-1.254674,-5.205285,4.944054,0.438568],[3.183526,-7.196819,-8.876045,7.044511,-0.990252,8.080788,2.623156]],[[7.292928,-8.207642,-3.400574,-5.982840,-0.813079,2.803434,-7.813955],[5.925442,-4.476905,8.897181,2.387961,6.529483,8.070947,0.484550],[-0.777868,6.379944,-1.391307,0.937305,2.662421,3.733440,-7.792596],[-3.614355,4.953209,8.363892,7.800741,-4.595549,-2.871173,8.138046],[-0.945087,-0.586728,1.326445,-5.992906,-7.260110,3.275175,2.848828],[6.546625,6.252355,7.132529,9.026289,-9.202391,0.243028,-3.295054],[0.755531,4.360275,-0.221007,-2.026567,-9.952998,5.763039,7.782028],[-8.284741,9.416613,-3.822173,-9.770997,6.048989,-1.163041,-5.104135],[1.550826,9.477649,-4.403476,-1.720520,8.114199,3.827680,7.409700],[-2.296961,5.725300,8.182543,-6.246426,1.894823,0.505327,2.420706],[4.302643,-6.924630,-0.118191,8.169814,-8.062275,4.156196,-8.966162]],[[8.474278,3.743085,-8.529116,2.361816,-1.675997,-4.271071,-9.787352],[-7.220547,1.147968,3.513574,-4.961166,-9.768824,-0.994009,8.576618],[-6.275216,-5.782348,9.634015,4.203812,-0.196330,-9.576927,-8.690728],[6.111947,-1.845382,-0.545986,8.177096,9.244725,2.646179,8.104000],[1.604293,6.758447,-9.116574,6.406649,-6.749635,-8.423486,3.215052],[6.552980,5.102959,-6.035043,-3.883207,1.042541,-1.260650,-4.341848],[-9.696431,-5.133289,-7.090386,4.397058,5.781884,2.820407,3.758336],[0.935635,-8.408729,2.647652,7.140895,1.280374,-7.925219,2.998151],[-6.042103,9.266654,3.157122,-0.836236,5.393264,-2.251695,-3.293054],[-8.367255,3.220087,0.235370,-8.930764,1.227222,-6.017529,-1.003402],[-9.087477,-1.384550,4.857716,0.140387,4.736636,-2.695414,-1.812166]],[[7.110089,-0.891723,-5.889378,5.770297,4.658217,-7.205331,6.394195],[-3.134608,-8.312070,4.760954,4.542726,-9.152882,8.033669,-6.737661],[-6.394427,4.555036,4.949565,-2.832747,6.474376,1.611825,1.052079],[-1.643427,1.260533,-2.396941,7.537337,-0.073169,-3.015124,1.597687],[-8.013306,-9.392840,-1.519837,-4.601572,6.753239,-2.666723,3.850161],[-8.668700,8.090293,2.570350,6.839284,-6.869766,-3.989919,2.775966],[5.477349,-7.272172,-5.070465,8.872801,-5.582772,-1.929135,-5.443941],[7.165754,2.704774,-0.605145,-2.690485,5.943947,-4.689759,-8.524108],[-7.113160,3.681974,-4.344909,3.498898,-0.662395,-3.847452,-1.461581],[4.243265,4.507725,-9.598398,-0.326033,9.860126,5.000282,-4.312126],[9.123865,-1.837452,-5.659785,8.223231,9.016107,9.361326,3.919066]],[[6.025496,-5.404173,-4.155699,6.460596,-4.352427,-0.236466,-3.147727],[-3.694312,1.415769,5.553107,8.344593,3.940117,-3.312047,0.435860],[4.311692,6.001023,7.280471,2.317315,7.483474,-8.737217,-8.773247],[-5.053275,-9.761054,8.227952,-0.130231,9.102540,-2.894451,-7.464172],[-9.820535,-5.760086,5.070712,-2.635071,1.741178,-8.512151,-8.175597],[0.617886,5.795108,8.871700,-3.574790,2.432090,8.045099,0.271003],[-4.417944,-0.930231,6.158094,-8.014939,4.425636,0.524120,-4.090580],[4.155396,7.981039,7.369275,-8.203245,-7.237674,0.055862,8.523889],[4.699168,-2.171399,9.019521,-7.083417,8.026398,0.117350,8.435377],[6.679631,-1.003930,-3.187875,5.467888,2.192397,-2.748988,3.019503],[2.200159,-5.986050,6.851227,-7.677594,5.037263,1.377990,5.292910]],[[1.530423,-4.435242,-9.041215,-3.030123,-6.958435,-7.559533,1.902929],[1.426638,-2.325177,-9.049145,4.821230,2.669690,-6.152185,-7.435447],[5.620020,-6.753680,-4.114977,-2.161613,8.796628,4.505352,-7.725252],[7.811562,-0.509277,-0.882129,-6.560968,7.960786,-1.014336,9.433962],[-7.427675,0.601239,-9.370049,-2.110263,-3.330402,6.079264,0.575177],[9.355623,3.339560,-8.451416,9.486610,-3.798092,6.391900,-5.210506],[5.167205,-8.770451,3.999835,3.226629,0.076051,5.488783,-1.997673],[9.552245,5.442761,-4.789100,-0.080615,0.036966,6.446555,6.389549],[7.439504,2.690925,4.496915,-0.325402,3.822410,-6.864045,-7.265536],[-5.556505,1.182310,-9.892348,-6.594717,4.602957,6.542206,-5.255781],[-8.625344,6.236437,0.573046,-1.553896,-5.037896,-1.731854,6.051380]],[[-9.143032,-6.514364,-9.278657,1.203751,-7.560304,4.569351,-1.306799],[-1.873786,-9.739492,-7.903249,8.828641,-9.355852,-6.216802,-6.714405],[-6.417585,-5.258993,0.339980,6.529526,-8.784848,9.965201,-0.515695],[-1.155206,5.630986,1.622367,8.729709,-5.131512,-7.709748,5.525753],[4.877569,2.208058,0.062222,1.414605,-7.180082,-1.687138,6.792974],[6.546131,7.942723,-1.771498,6.511227,-0.030508,6.517378,1.961279],[7.834545,-3.172831,-5.779219,-3.504345,0.073835,6.580200,-4.704964],[-2.273018,2.502399,9.497041,8.820584,3.807181,9.881205,-2.759609],[-6.356842,-7.973746,-1.410334,8.406490,-6.634083,-9.455906,8.179829],[5.497547,6.347331,5.663099,-2.430803,4.759018,-8.886337,-6.094100],[-0.066098,-9.054777,-1.869810,-1.788694,1.170171,5.304873,0.691320]]], dtype = "float32")#candidate|835|(16, 11, 7)|const|float32
uop_836 = relay.cosh(const_835.astype('float32')) # shape=(16, 11, 7)
uop_838 = relay.atan(const_835.astype('float32')) # shape=(16, 11, 7)
func_263_call = mod.get_global_var('func_263')
func_265_call = mutated_mod.get_global_var('func_265')
const_847 = relay.const([7,-10,8,9,2,10,3,-10,7,2,3,-5,-7,-4,-5,4,8,8,-5,2,3,5,-9,2,8,7,8,-6,5,3,-2,-3,2,6,10,-3,1,9,-4,5,-5,-3,6,-7,1,2,6,4,5,-5,2,-8,-7,-1,5,5,2,-4,-1,-1,2,6,7,8,-3,-6,3,6,-10,5,4,-9,9,-5,8,-3,-9,10,10,-7,3,8,9,9,10,9,3,-2,-3,5,5,2,8,8,-2,-2,10,4,-3,-3,7,9,-9,-4,-8,-4,8,4,9,-5,9,-7,-9,-10,-6,-7,4,2,-5,-6,5,5,-5,1,-3,5,6,-2,-5,-9,-7,3,-2,-5,-1,-1,10,-2,-5,6,-7,-1,-3,10,-5,-10,-7,6,-7,-8,1,-5,-5,3,-7,-9,10,-1,-3,2,2,-4,4,-10,-8,-7,6,-9,10,3,3,-6,-4,-9,-10,6,-4,2,-10,-8,9,-9,-9,9,2,-9,-6,1,1,-6,10,2,-4,-1,7,3,7,2,-10,-7,3,-1,-10,10,2,-2,-9,8,9,8,-1,1,-4,-3,-5,9,8,-8,2,-10,3,-7,-6,-8,4,-8,-8,2,3,-6,-8,8,-5,-4,4,1,6,10,3,-7,-5,-2,6,-6,-9,-7,9,3,-2,3,1,-3,-2,-10,-4,-1,-2,3,9,6,2,-7,1,-7,8,-10,5,-7,10,-1,-4,1,-7,3,4,6,-5,8,-2,8,6,9,3,8,3,8,-4,-3,-5,-9,-6,-6,-7,-6,1,8,-3,-9,-3,2,8,3,-10,5,3,-4,-10,-9,-7,3,-8,-7,8,-9,-3,-4,10,-5,4,-6,5,-5,2,-9,8,7,4,6,10,-10,-8,-5,4,9,-9,4,-4,-8,-2,5,10,-5,-8,4,-8,-2,-3,-5,9,4,8,2,8,10,9,-9,9,-1,4,-4,2,-7,5,1,-5,-1,-4,6,-5,9,2,-10,1,-6,9,-7,6,-7,7,4,-4,6,-10,-9,9,-8,7,9,-3,2,7,-4,-7,-5,-8,8,-5,-1,5,1,-9,4,-1,3,10,-4,7,9,1,-8,-4,-3,1,6,-4,-9,-10,-7,7,-2,7,1,6,-8,7,-5,4,-2,4,10,-8,8,-3,-8,-7,5,-8,8,10,2,5,8,7,-4,-1,6,-5,-5,3,1,4,4,4,-8,1,4,9,-5,6,-7,6,-4,10,-1,5,-3,-10,2,2,-10,10,-8,8,5,-5,-10,-6,3,-6,-10,-8,9,-1,-2,1,-5,8,9,-9,1,-7,-4,-3,-8,3,9,3,1,-9,9,7,-2,-9,2,-7,9,-1,-6,2,-3,-4,-8,2,-10,-2,-2,5,5,-7,2,-9,-8,8,5,8,6,-2,-8,4,5,9,9,3,9,-1,6,6,8,-7,-3,-1,-8,1,-7,-6,-5,10,-2,-5,3,-4,6,2,-3,7,6,2,2,2,2,-2,4,10,4,-8,3,-3,-3,3,4,1,1,-3,-9,-4,2,8,7,3,3,-8,5,-3,6,4,7,7,-9,3,-5,8,3,5,-4], dtype = "uint16")#candidate|847|(594,)|const|uint16
call_846 = relay.TupleGetItem(func_263_call(relay.reshape(const_847.astype('uint16'), [594,])), 2)
call_848 = relay.TupleGetItem(func_265_call(relay.reshape(const_847.astype('uint16'), [594,])), 2)
func_188_call = mod.get_global_var('func_188')
func_191_call = mutated_mod.get_global_var('func_191')
const_853 = relay.const([10,3,3,-10,10,-1,8,4,9,6,-7,-3,9,7,7,1,7,-3,-2,1,-8,2,8,-9,5,-9,4,-7,8,-7,4,-2,-4,9,-9,7,-3,-3,-4,-1,8,3,10,7,4,2,-3,-8,1,-4,-10,-8,-9,-5,3,-2,-4,7,5,-1,-7,8,7,-7,-5,-1,-4,-7,9,-8], dtype = "uint64")#candidate|853|(70,)|const|uint64
var_854 = relay.var("var_854", dtype = "uint64", shape = (1120,))#candidate|854|(1120,)|var|uint64
call_852 = relay.TupleGetItem(func_188_call(relay.reshape(const_853.astype('uint64'), [7, 1, 10]), relay.reshape(var_854.astype('uint64'), [7, 16, 10]), ), 0)
call_855 = relay.TupleGetItem(func_191_call(relay.reshape(const_853.astype('uint64'), [7, 1, 10]), relay.reshape(var_854.astype('uint64'), [7, 16, 10]), ), 0)
output = relay.Tuple([uop_836,uop_838,call_846,const_847,call_852,const_853,var_854,])
output2 = relay.Tuple([uop_836,uop_838,call_848,const_847,call_855,const_853,var_854,])
func_858 = relay.Function([var_854,], output)
mod['func_858'] = func_858
mod = relay.transform.InferType()(mod)
var_859 = relay.var("var_859", dtype = "uint64", shape = (1120,))#candidate|859|(1120,)|var|uint64
output = func_858(var_859)
func_860 = relay.Function([var_859], output)
mutated_mod['func_860'] = func_860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_317_call = mod.get_global_var('func_317')
func_318_call = mutated_mod.get_global_var('func_318')
call_888 = relay.TupleGetItem(func_317_call(), 0)
call_889 = relay.TupleGetItem(func_318_call(), 0)
output = relay.Tuple([call_888,])
output2 = relay.Tuple([call_889,])
func_892 = relay.Function([], output)
mod['func_892'] = func_892
mod = relay.transform.InferType()(mod)
mutated_mod['func_892'] = func_892
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mutated_mod.get_global_var('func_892')
call_893 = func_892_call()
output = call_893
func_894 = relay.Function([], output)
mutated_mod['func_894'] = func_894
mutated_mod = relay.transform.InferType()(mutated_mod)
var_895 = relay.var("var_895", dtype = "float64", shape = (4, 8, 5))#candidate|895|(4, 8, 5)|var|float64
var_896 = relay.var("var_896", dtype = "float64", shape = (4, 8, 5))#candidate|896|(4, 8, 5)|var|float64
bop_897 = relay.mod(var_895.astype('float64'), relay.reshape(var_896.astype('float64'), relay.shape_of(var_895))) # shape=(4, 8, 5)
output = relay.Tuple([bop_897,])
output2 = relay.Tuple([bop_897,])
func_905 = relay.Function([var_895,var_896,], output)
mod['func_905'] = func_905
mod = relay.transform.InferType()(mod)
var_906 = relay.var("var_906", dtype = "float64", shape = (4, 8, 5))#candidate|906|(4, 8, 5)|var|float64
var_907 = relay.var("var_907", dtype = "float64", shape = (4, 8, 5))#candidate|907|(4, 8, 5)|var|float64
output = func_905(var_906,var_907,)
func_908 = relay.Function([var_906,var_907,], output)
mutated_mod['func_908'] = func_908
mutated_mod = relay.transform.InferType()(mutated_mod)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_936 = relay.TupleGetItem(func_544_call(), 1)
call_937 = relay.TupleGetItem(func_546_call(), 1)
var_955 = relay.var("var_955", dtype = "bool", shape = (5, 12, 10))#candidate|955|(5, 12, 10)|var|bool
bop_956 = relay.subtract(call_936.astype('uint16'), relay.reshape(var_955.astype('uint16'), relay.shape_of(call_936))) # shape=(5, 12, 10)
bop_959 = relay.subtract(call_937.astype('uint16'), relay.reshape(var_955.astype('uint16'), relay.shape_of(call_937))) # shape=(5, 12, 10)
func_858_call = mod.get_global_var('func_858')
func_860_call = mutated_mod.get_global_var('func_860')
const_964 = relay.const([[2,8,9,-2],[10,-5,-6,-9],[-9,-7,-8,-9],[-1,4,10,5],[-7,6,4,-5],[1,-1,2,-5],[2,-4,-2,7],[-9,3,2,3],[-10,-5,6,9],[7,-4,2,2],[5,6,8,5],[4,-9,4,6],[-3,-8,-1,8],[-9,-1,-4,-6],[-10,8,-6,7],[1,-8,8,-10],[-7,9,7,5],[2,10,-10,6],[-9,-10,-7,4],[-3,-2,-6,-1],[3,10,9,-8],[3,6,-4,-3],[-7,7,10,-2],[6,1,8,-5],[-3,-1,-2,1],[6,-9,10,-5],[-7,-10,6,7],[6,3,1,5],[5,-6,6,4],[-5,-4,9,1],[-2,10,-3,-9],[6,-4,-4,-2],[-6,7,6,-2],[6,-7,5,-10],[8,-6,-8,3],[9,-2,-6,-1],[3,-4,1,9],[2,-2,-5,-6],[2,-6,-7,6],[-6,-10,-5,5],[-8,6,-5,-7],[-2,-7,-1,9],[-5,6,4,7],[-2,-2,-7,-4],[8,-6,-6,3],[6,-6,3,2],[2,7,10,4],[2,-9,-5,-7],[5,-7,8,3],[-9,1,-6,-9],[1,-2,1,-4],[-6,-5,-6,-5],[6,3,3,10],[-5,-6,-5,7],[1,8,-9,-7],[5,-7,4,1],[-5,6,10,-10],[6,-6,-10,-7],[-4,3,7,-10],[1,3,-7,-7],[-1,-10,10,8],[7,9,6,-8],[-2,6,8,4],[-1,-9,5,3],[-1,-7,-5,9],[8,1,3,-4],[10,-8,4,-10],[-1,5,6,-2],[-1,8,-3,-1],[-4,-4,-2,3],[8,2,3,9],[10,-10,10,-3],[-10,-8,-7,-5],[-1,-7,-9,7],[-4,-3,1,-3],[-4,9,-4,6],[3,-8,-2,1],[-5,-10,-3,-4],[-8,-3,9,-1],[-8,8,3,7],[-7,-8,9,-6],[-10,-1,-5,-9],[1,1,-10,2],[3,2,-3,3],[6,-3,-1,-1],[7,-3,4,5],[-3,-5,1,1],[-5,-1,3,-8],[-3,4,-10,-4],[-5,-9,-8,4],[3,4,-5,9],[9,-8,-3,-9],[-9,-2,-8,-6],[-3,1,1,3],[-7,9,6,-5],[7,-7,-2,-1],[-1,-10,9,-3],[-2,6,-4,-7],[-9,-4,-2,10],[-2,4,-7,-5],[-7,-9,-4,3],[-9,-9,-9,3],[-1,-3,-5,6],[3,-1,2,1],[4,8,-2,-4],[-9,3,7,5],[2,5,-4,5],[9,-8,-6,2],[6,-8,10,-3],[-4,8,2,-3],[5,2,-7,5],[-4,10,-9,-10],[4,-7,-3,-5],[7,-10,9,5],[-1,1,3,5],[10,-7,-8,8],[-8,-8,5,8],[9,3,3,-9],[-5,4,8,-7],[-5,-9,-3,8],[-10,-2,10,-1],[10,-6,-3,7],[7,10,-1,6],[-3,-10,10,10],[4,8,-2,2],[4,2,5,7],[-1,9,-4,-7],[-10,3,-4,-1],[-5,-2,-8,6],[4,-9,-9,3],[3,-1,7,-4],[-4,-6,-10,-7],[-5,-1,-5,5],[8,10,-2,9],[-5,2,8,-8],[5,-9,10,-1],[4,8,-10,1],[-8,-7,-8,-4],[7,-6,4,-5],[9,-5,1,3],[-9,-7,3,8],[2,2,4,-4],[3,-5,-3,7],[6,10,1,5],[4,10,-3,-1],[-6,7,-10,-2],[-1,2,-7,6],[5,5,9,6],[5,1,6,4],[-4,3,-4,-6],[2,-8,9,4],[-10,-7,-8,-2],[-9,-2,-4,7],[9,-1,5,-5],[7,5,9,-9],[-8,-8,1,1],[3,-7,10,-7],[3,2,-7,-4],[2,2,9,-2],[2,-7,-2,-5],[4,3,5,4],[8,-6,5,-1],[7,8,-7,-5],[2,3,10,8],[9,9,9,-4],[9,4,-9,-1],[-8,-4,-1,5],[-1,-7,6,7],[7,1,-9,-5],[-4,2,-3,10],[4,-6,3,10],[10,6,-3,3],[-9,5,9,8],[-8,7,-5,-3],[-10,-6,2,8],[-5,6,-9,7],[-3,-8,6,-10],[-6,8,-5,-2],[1,10,8,-3],[-2,1,10,-9],[-4,-9,-5,-5],[-5,4,-5,5],[-6,7,-2,-7],[1,-6,-7,8],[-6,-2,-4,-3],[1,9,6,1],[-6,6,-1,2],[2,-5,-7,-2],[9,-1,2,-4],[-1,-10,4,9],[-10,-9,9,-2],[-1,1,1,-8],[-9,5,-5,8],[-1,-5,8,6],[10,-6,9,9],[9,8,5,-10],[7,8,4,7],[2,2,-5,-7],[-6,-3,5,4],[4,-3,8,-5],[-9,-6,-9,-2],[-7,3,5,-9],[7,7,-4,3],[5,-8,1,7],[-6,-5,-9,6],[-1,10,-10,-6],[-10,6,-6,-3],[7,3,5,-8],[-4,-6,1,-9],[-2,10,-9,-7],[-1,-3,4,-5],[9,10,7,-7],[-4,6,-6,10],[5,7,6,2],[-7,-4,3,3],[-7,-6,-1,-7],[-7,-10,7,8],[-10,5,9,5],[2,-6,-9,7],[-1,8,7,9],[-8,4,1,-7],[-6,-10,4,10],[5,1,6,7],[2,-1,3,-2],[1,6,1,-6],[10,4,1,9],[10,7,-1,-5],[-2,-3,-8,-7],[4,-2,1,-2],[4,-4,-7,-9],[7,7,2,1],[10,-2,9,-7],[5,8,9,-6],[3,8,-4,-1],[4,-9,9,4],[-3,8,-6,-5],[-6,6,2,-10],[3,-6,-4,-10],[-4,7,-8,-5],[-9,-5,9,7],[-4,3,-6,-10],[1,-8,3,-3],[6,2,-3,4],[-9,-7,10,6],[-9,-7,-1,4],[3,5,9,-2],[-10,-8,3,-4],[-3,-3,-5,7],[7,8,1,10],[-5,7,-4,8],[7,-6,-2,-5],[3,9,8,-3],[8,-2,3,-10],[-6,-2,-9,-6],[-8,9,5,6],[3,-6,-9,-5],[-10,5,-9,-2],[5,-7,4,-1],[6,-2,-3,8],[2,-6,-3,-10],[-9,6,4,-5],[2,3,5,-8],[-5,3,1,-3],[-7,5,-1,-5],[-2,8,-1,-2],[5,8,-1,-5],[1,4,1,-4],[-8,10,-4,2],[8,-1,-5,1],[-10,3,9,8],[4,-1,-9,5],[4,1,-4,5],[4,-10,-8,-10],[2,-10,1,-3],[7,-2,-9,-8],[-6,-2,-1,-2],[-2,6,5,-8],[1,-10,-3,-7],[-6,-1,-6,7],[-7,2,-3,-2]], dtype = "uint64")#candidate|964|(280, 4)|const|uint64
call_963 = relay.TupleGetItem(func_858_call(relay.reshape(const_964.astype('uint64'), [1120,])), 6)
call_965 = relay.TupleGetItem(func_860_call(relay.reshape(const_964.astype('uint64'), [1120,])), 6)
bop_969 = relay.greater_equal(bop_956.astype('bool'), relay.reshape(call_936.astype('bool'), relay.shape_of(bop_956))) # shape=(5, 12, 10)
bop_972 = relay.greater_equal(bop_959.astype('bool'), relay.reshape(call_937.astype('bool'), relay.shape_of(bop_959))) # shape=(5, 12, 10)
bop_976 = relay.add(bop_969.astype('int16'), relay.reshape(bop_956.astype('int16'), relay.shape_of(bop_969))) # shape=(5, 12, 10)
bop_979 = relay.add(bop_972.astype('int16'), relay.reshape(bop_959.astype('int16'), relay.shape_of(bop_972))) # shape=(5, 12, 10)
output = relay.Tuple([call_963,const_964,bop_976,])
output2 = relay.Tuple([call_965,const_964,bop_979,])
func_989 = relay.Function([var_955,], output)
mod['func_989'] = func_989
mod = relay.transform.InferType()(mod)
mutated_mod['func_989'] = func_989
mutated_mod = relay.transform.InferType()(mutated_mod)
var_990 = relay.var("var_990", dtype = "bool", shape = (5, 12, 10))#candidate|990|(5, 12, 10)|var|bool
func_989_call = mutated_mod.get_global_var('func_989')
call_991 = func_989_call(var_990)
output = call_991
func_992 = relay.Function([var_990], output)
mutated_mod['func_992'] = func_992
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mod.get_global_var('func_307')
func_308_call = mutated_mod.get_global_var('func_308')
call_1056 = relay.TupleGetItem(func_307_call(), 0)
call_1057 = relay.TupleGetItem(func_308_call(), 0)
var_1064 = relay.var("var_1064", dtype = "bool", shape = (5, 8, 5))#candidate|1064|(5, 8, 5)|var|bool
bop_1065 = relay.less_equal(call_1056.astype('bool'), relay.reshape(var_1064.astype('bool'), relay.shape_of(call_1056))) # shape=(5, 8, 5)
bop_1068 = relay.less_equal(call_1057.astype('bool'), relay.reshape(var_1064.astype('bool'), relay.shape_of(call_1057))) # shape=(5, 8, 5)
func_166_call = mod.get_global_var('func_166')
func_168_call = mutated_mod.get_global_var('func_168')
var_1071 = relay.var("var_1071", dtype = "float64", shape = (600,))#candidate|1071|(600,)|var|float64
call_1070 = relay.TupleGetItem(func_166_call(relay.reshape(var_1071.astype('float64'), [5, 12, 10])), 0)
call_1072 = relay.TupleGetItem(func_168_call(relay.reshape(var_1071.astype('float64'), [5, 12, 10])), 0)
func_905_call = mod.get_global_var('func_905')
func_908_call = mutated_mod.get_global_var('func_908')
var_1084 = relay.var("var_1084", dtype = "float64", shape = (160,))#candidate|1084|(160,)|var|float64
call_1083 = relay.TupleGetItem(func_905_call(relay.reshape(var_1084.astype('float64'), [4, 8, 5]), relay.reshape(var_1084.astype('float64'), [4, 8, 5]), ), 0)
call_1085 = relay.TupleGetItem(func_908_call(relay.reshape(var_1084.astype('float64'), [4, 8, 5]), relay.reshape(var_1084.astype('float64'), [4, 8, 5]), ), 0)
output = relay.Tuple([bop_1065,call_1070,var_1071,call_1083,var_1084,])
output2 = relay.Tuple([bop_1068,call_1072,var_1071,call_1085,var_1084,])
func_1090 = relay.Function([var_1064,var_1071,var_1084,], output)
mod['func_1090'] = func_1090
mod = relay.transform.InferType()(mod)
var_1091 = relay.var("var_1091", dtype = "bool", shape = (5, 8, 5))#candidate|1091|(5, 8, 5)|var|bool
var_1092 = relay.var("var_1092", dtype = "float64", shape = (600,))#candidate|1092|(600,)|var|float64
var_1093 = relay.var("var_1093", dtype = "float64", shape = (160,))#candidate|1093|(160,)|var|float64
output = func_1090(var_1091,var_1092,var_1093,)
func_1094 = relay.Function([var_1091,var_1092,var_1093,], output)
mutated_mod['func_1094'] = func_1094
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_1106 = relay.TupleGetItem(func_892_call(), 0)
call_1107 = relay.TupleGetItem(func_894_call(), 0)
const_1114 = relay.const([[[9.620959,7.173154,-4.800663],[-4.098312,0.685494,6.659940],[-5.611568,3.767471,-5.486511],[-7.134103,-4.730397,3.385439],[-2.458995,-5.570328,-7.053101],[-0.882599,7.910116,-9.744083],[-6.606532,8.600220,-9.889618],[-7.433405,-6.476087,-8.277552],[-4.182514,0.687058,7.914144],[0.259451,9.582929,-6.636079],[-9.428258,0.591952,0.813577],[6.991363,-8.414621,1.186995]],[[3.294083,1.885958,3.205513],[-1.534747,2.067425,2.381728],[-9.400476,-2.553643,-9.751547],[-7.896494,2.885656,-1.139524],[8.003367,-9.961754,1.974610],[-4.814217,3.659071,-6.926244],[-6.829782,-1.889908,-1.720318],[-8.768920,5.399124,-0.548400],[-3.933494,-1.183831,-8.309909],[-3.317154,-4.273271,6.409172],[-6.939643,-8.455545,-5.375876],[9.613098,7.648326,-7.926176]],[[0.446376,3.669071,2.840754],[-9.651958,-8.236829,1.318389],[0.383697,-4.451022,6.986703],[7.721243,6.837623,0.319700],[-1.379624,-9.068596,4.809012],[7.884480,-4.481385,7.408616],[-5.537016,6.193032,-2.029426],[1.380280,-3.790762,4.619743],[-4.367044,2.473537,-0.780385],[4.082026,4.388792,-8.788250],[-1.829404,2.456633,-6.765985],[-3.442540,-2.449767,2.020461]],[[-0.125413,5.507685,-9.135905],[-9.538990,4.720623,3.995418],[8.922449,8.396615,-0.457308],[5.372397,1.015057,9.935752],[1.264415,3.165492,8.796111],[-0.169945,4.626581,-9.725556],[-5.141197,-2.595558,7.475055],[2.175189,-5.076176,5.502562],[-1.046040,7.220826,-9.914860],[-7.479442,-8.792997,5.056481],[-4.706509,-8.872800,6.846794],[-8.153965,4.124099,-6.374473]],[[-8.805127,3.639471,-9.535515],[1.927018,7.109624,-2.918468],[-2.762645,1.625464,-4.853933],[-1.102338,-4.581573,6.099330],[-6.622821,9.746426,-3.109554],[-6.898735,0.724279,-6.322711],[-0.869829,3.490538,-6.619634],[9.650118,-6.548283,-0.751067],[-9.586794,7.087782,4.093175],[-1.248153,-9.107578,6.573447],[9.543430,1.281334,-3.503326],[-1.691499,-6.741198,-3.699085]],[[-5.193239,1.890325,8.145949],[1.112559,-3.862969,-9.926682],[6.281020,4.333638,7.945441],[6.643471,-0.580050,2.620435],[-8.536969,-2.630996,1.809669],[9.317304,-1.481338,-8.772094],[-9.748809,7.140166,5.506364],[-4.239382,6.891119,-5.929145],[8.025156,2.730278,8.320743],[-5.409696,3.840344,-0.580213],[5.629897,-4.485242,-9.959291],[2.709909,-8.602074,1.079351]],[[1.630131,1.524922,-6.209518],[5.876473,9.627064,9.258321],[9.867181,-5.411285,-3.336111],[-3.969785,-2.915656,-6.739152],[0.068567,-1.727544,-7.969387],[8.447615,1.893942,-9.954087],[3.718150,4.017456,4.358197],[0.730327,-3.459195,9.434847],[-0.905541,9.015804,-3.467975],[0.226168,7.827065,8.273929],[6.175343,9.875765,3.811571],[-6.117230,6.883051,6.732166]]], dtype = "float32")#candidate|1114|(7, 12, 3)|const|float32
bop_1115 = relay.logical_and(call_1106.astype('bool'), relay.reshape(const_1114.astype('bool'), relay.shape_of(call_1106))) # shape=(7, 12, 3)
bop_1118 = relay.logical_and(call_1107.astype('bool'), relay.reshape(const_1114.astype('bool'), relay.shape_of(call_1107))) # shape=(7, 12, 3)
bop_1123 = relay.divide(const_1114.astype('float32'), relay.reshape(bop_1115.astype('float32'), relay.shape_of(const_1114))) # shape=(7, 12, 3)
bop_1126 = relay.divide(const_1114.astype('float32'), relay.reshape(bop_1118.astype('float32'), relay.shape_of(const_1114))) # shape=(7, 12, 3)
bop_1127 = relay.maximum(bop_1123.astype('uint8'), relay.reshape(const_1114.astype('uint8'), relay.shape_of(bop_1123))) # shape=(7, 12, 3)
bop_1130 = relay.maximum(bop_1126.astype('uint8'), relay.reshape(const_1114.astype('uint8'), relay.shape_of(bop_1126))) # shape=(7, 12, 3)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_1137 = func_140_call()
call_1138 = func_140_call()
func_166_call = mod.get_global_var('func_166')
func_168_call = mutated_mod.get_global_var('func_168')
var_1140 = relay.var("var_1140", dtype = "float64", shape = (600,))#candidate|1140|(600,)|var|float64
call_1139 = relay.TupleGetItem(func_166_call(relay.reshape(var_1140.astype('float64'), [5, 12, 10])), 0)
call_1141 = relay.TupleGetItem(func_168_call(relay.reshape(var_1140.astype('float64'), [5, 12, 10])), 0)
output = relay.Tuple([bop_1127,call_1137,call_1139,var_1140,])
output2 = relay.Tuple([bop_1130,call_1138,call_1141,var_1140,])
func_1149 = relay.Function([var_1140,], output)
mod['func_1149'] = func_1149
mod = relay.transform.InferType()(mod)
var_1150 = relay.var("var_1150", dtype = "float64", shape = (600,))#candidate|1150|(600,)|var|float64
output = func_1149(var_1150)
func_1151 = relay.Function([var_1150], output)
mutated_mod['func_1151'] = func_1151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_1199 = relay.TupleGetItem(func_892_call(), 0)
call_1200 = relay.TupleGetItem(func_894_call(), 0)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_1211 = func_140_call()
call_1212 = func_140_call()
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_1215 = relay.TupleGetItem(func_892_call(), 0)
call_1216 = relay.TupleGetItem(func_894_call(), 0)
var_1231 = relay.var("var_1231", dtype = "float32", shape = (7, 12, 3))#candidate|1231|(7, 12, 3)|var|float32
bop_1232 = relay.power(call_1215.astype('float64'), relay.reshape(var_1231.astype('float64'), relay.shape_of(call_1215))) # shape=(7, 12, 3)
bop_1235 = relay.power(call_1216.astype('float64'), relay.reshape(var_1231.astype('float64'), relay.shape_of(call_1216))) # shape=(7, 12, 3)
func_989_call = mod.get_global_var('func_989')
func_992_call = mutated_mod.get_global_var('func_992')
var_1243 = relay.var("var_1243", dtype = "bool", shape = (600,))#candidate|1243|(600,)|var|bool
call_1242 = relay.TupleGetItem(func_989_call(relay.reshape(var_1243.astype('bool'), [5, 12, 10])), 1)
call_1244 = relay.TupleGetItem(func_992_call(relay.reshape(var_1243.astype('bool'), [5, 12, 10])), 1)
func_592_call = mod.get_global_var('func_592')
func_594_call = mutated_mod.get_global_var('func_594')
call_1246 = relay.TupleGetItem(func_592_call(), 1)
call_1247 = relay.TupleGetItem(func_594_call(), 1)
bop_1248 = relay.logical_or(call_1211.astype('bool'), relay.reshape(call_1199.astype('bool'), relay.shape_of(call_1211))) # shape=(7, 12, 3)
bop_1251 = relay.logical_or(call_1212.astype('bool'), relay.reshape(call_1200.astype('bool'), relay.shape_of(call_1212))) # shape=(7, 12, 3)
output = relay.Tuple([bop_1232,call_1242,var_1243,call_1246,bop_1248,])
output2 = relay.Tuple([bop_1235,call_1244,var_1243,call_1247,bop_1251,])
func_1256 = relay.Function([var_1231,var_1243,], output)
mod['func_1256'] = func_1256
mod = relay.transform.InferType()(mod)
var_1257 = relay.var("var_1257", dtype = "float32", shape = (7, 12, 3))#candidate|1257|(7, 12, 3)|var|float32
var_1258 = relay.var("var_1258", dtype = "bool", shape = (600,))#candidate|1258|(600,)|var|bool
output = func_1256(var_1257,var_1258,)
func_1259 = relay.Function([var_1257,var_1258,], output)
mutated_mod['func_1259'] = func_1259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_592_call = mod.get_global_var('func_592')
func_594_call = mutated_mod.get_global_var('func_594')
call_1266 = relay.TupleGetItem(func_592_call(), 0)
call_1267 = relay.TupleGetItem(func_594_call(), 0)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
const_1269 = relay.const([-2,8,6,10,-5,-1,-4,5,-9,-3,-5,-2,-7,9,1,-5,-3,-1,-10,8,-9,-10,-8,-1,9,-9,-6,-1,9,-5,5,3,4,-10,2,-10,9,-4,-7,3,8,-10,-2,-9,10,1,-5,5,8,-4,5,3,-5,8,-1,10,2,6,-1,-5,1,8,2,-5,-3,3,4,10,1,3,-9,-5,-5,5,6,-8,-7,4,4,-10,-10,-2,6,-6,-10,-3,4,-1,9,-4,7,-3,-10,6,6,-8,-8,1,-2,5,5,-2,5,7,-3,-8,-3,-7,-8,5,-8,2,-5,1,9,-1,5,-5,-1,4,-3,4,-5,-9,3,-9,-8,8,6,-3,7,-3,-9,5,-1,4,3,-10,-1,1,4,5,-3,-7,4,5,-4,-6,-7,3,-9,-3,-6,-1,1,-1,4,-9,10,-7,4,6,2,-2,-2,-8,3,3,6,4,-6,4,-10,-8,-7,-7,-10,-10,6,3,9,8,5,-1,3,-8,-10,-8,3,3,2,-2,2,7,6,-5,-3,8,4,9,-7,-8,-1,-9,6,-6,-3,-3,2,4,-9,-4,-6,2,-4,-9,10,-7,-8,7,10,2,-10,10,-4,10,7,-8,8,3,5,-10,1,-7,-6,1,-6,9,8,9,-8,-7,-5,-8,-9,5,-2,8,-4,4,-9,-4,-10,2,6,1,-2,-9,-7,2,-7,-9,-3,4,-4,-5,-5,-10,4,4,5,4,-8,-8,9,9,8,4,-5,-7,9,3,-1,-1,-7,6,2,3,2,-3,3,6,-1,1,1,6,1,5,2,-8,-3,-3,4,-5,7,-1,1,2,-10,-8,2,-2,-3,5,-5,4,-7,2,-3,10,-4,-10,8,9,-4,10,10,7,3,9,-4,5,-2,-3,-4,4,-3,5,6,-1,10,6,-7,5,4,-7,9,-2,-9,-7,-7,10,-5,5,-8,2,10,-10,-1,-7,9,7,-8,-10,-1,9,-7,-2,-4,6,3,-2,5,10,-6,-5,4,2,9,8,-8,10,4,8,8,1,-1,2,4,-6,-2,-3,10,-8,-9,1,-1,-3,-2,4,4,-1,8,-2,7,1,8,-8,3,-9,2,10,-10,10,-3,-4,-2,3,-8,10,-5,-7,-7,1,-10,-2,8,-8,4,-2,4,5,1,-4,5,6,-9,2,9,7,2,4,1,10,-9,6,10,-7,-1,2,9,7,3,3,3,-3,-9,-8,-6,8,3,-9,5,-6,1,6,3,7,3,8,-1,-4,8,1,-10,-1,4,8,10,-8,9,10,-7,10,8,-9,-10,7,3,-4,-10,-8,7,-4,7,7,-7,-1,-3,-8,10,-9,-8,-8,6,-4,9,1,-7,2,-10,-1,7,3,3,-2,-9,-3,7,10,3,2,-7,7,-9,-7,7,5,-9,3,-2,-5,6,-9,-7,-10,4,-2,6,-4,-8,1,-8,1,-7,-1,1,-1,4,-2,3,-3,4,8,7,-5,1,-2,4,-10,8,-1,7,-8,6,-4,-1,-5,-4,-7,3,6,9,6,-9,-6,8,-8,3,-10,5,7,-10,-3,5,5,-1,3,9,3,6,7,-7,2], dtype = "uint16")#candidate|1269|(594,)|const|uint16
call_1268 = relay.TupleGetItem(func_22_call(relay.reshape(const_1269.astype('uint16'), [9, 11, 6])), 0)
call_1270 = relay.TupleGetItem(func_25_call(relay.reshape(const_1269.astype('uint16'), [9, 11, 6])), 0)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
call_1271 = relay.TupleGetItem(func_22_call(relay.reshape(call_1268.astype('uint16'), [9, 11, 6])), 0)
call_1272 = relay.TupleGetItem(func_25_call(relay.reshape(call_1268.astype('uint16'), [9, 11, 6])), 0)
output = relay.Tuple([call_1266,call_1268,const_1269,call_1271,])
output2 = relay.Tuple([call_1267,call_1270,const_1269,call_1272,])
func_1281 = relay.Function([], output)
mod['func_1281'] = func_1281
mod = relay.transform.InferType()(mod)
output = func_1281()
func_1282 = relay.Function([], output)
mutated_mod['func_1282'] = func_1282
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1285 = relay.const([[[-2.842071,2.961836,5.874889,6.445173,0.797602,-8.717423,-0.431488,7.869325,-5.242385,-4.914467,0.086577,9.170195,-4.668247],[-2.758472,9.031845,2.566899,2.020669,2.706470,-4.994470,-7.676159,-4.811547,-0.778800,7.032909,7.446402,-8.932301,5.482858],[4.684114,-8.503876,-4.560590,7.891910,-0.852651,-0.793006,-2.693585,-8.379017,-9.673139,-4.634224,4.850512,9.835281,-2.426296],[5.556304,4.456141,5.556842,7.083650,-9.863763,-1.588176,-1.584443,-6.641128,-0.778961,-5.150490,7.328146,-0.786669,2.104901],[-3.461016,-5.075117,-1.968162,0.280538,-7.195546,-4.149195,-3.168121,-2.239904,-4.101228,8.590401,6.687201,1.280073,-9.036753],[-8.388157,3.102372,3.674294,0.760480,-8.047381,7.991039,0.418391,-2.033375,5.720761,-5.016582,-4.175426,-9.087956,6.671877],[8.647670,7.110097,7.495832,-7.699079,-1.245390,7.578704,-5.038667,4.565061,3.683192,8.428949,-2.688306,0.859225,-3.219330],[2.917087,8.760673,-4.377158,-4.822159,1.269563,-2.770492,-4.474371,5.577938,-9.535519,2.557498,5.272347,-7.344539,2.116018],[1.524797,3.977651,-8.423897,5.554491,5.423266,-1.418128,9.466309,1.796500,-9.435317,-2.857997,3.199060,3.170209,-9.770078],[-4.580953,5.562494,5.507547,-4.894716,0.563309,-0.404625,-3.119665,-3.592794,5.558372,-8.317706,0.948763,-6.586707,-2.331250]],[[-3.944015,-9.721960,-8.728318,5.838950,-9.850278,5.367768,3.667657,1.689540,2.944981,2.833157,8.379731,5.528600,-5.925843],[-2.464099,6.011016,-4.594509,-2.026103,-2.677546,7.498997,-3.170746,9.515469,-1.447753,-5.711059,-3.559984,-1.869517,-3.253384],[-7.779386,9.741486,-5.265570,2.119891,4.761660,-8.827479,-7.991341,-7.615503,-1.369517,-9.380901,-6.664262,8.211698,-9.773258],[-4.509302,3.169379,-8.990162,2.451965,-6.634858,5.806056,8.536619,-2.914510,-6.802373,-1.905495,-0.420007,-6.197955,-3.719375],[-8.369379,2.795906,8.450592,4.677745,-8.620420,-2.210317,0.640767,-2.854789,-7.434907,0.331627,1.340443,-7.014363,2.517390],[-4.196327,5.239492,-7.070924,-8.832139,-3.364343,-7.744875,8.694953,-0.483890,-1.389036,-5.490380,-4.610201,-7.519729,8.257929],[-5.106144,9.400299,8.040759,4.062078,8.756890,-1.532198,4.333168,2.162492,-1.834431,6.261059,1.065052,-7.542448,-3.290651],[-4.449451,0.271803,-3.747493,2.447879,6.524454,7.074393,1.079098,-6.741688,9.785837,0.815147,2.582733,7.930347,-9.893303],[-8.115810,-4.457689,3.600554,3.484068,5.176727,-0.496183,-6.432999,9.546722,-7.902079,-6.491329,-4.583069,7.693828,-8.928575],[0.747752,9.876958,-3.939242,-1.529293,-4.030240,-0.053577,-3.637617,1.009851,-9.222622,-0.743860,9.277259,5.737032,-6.870090]],[[1.457268,4.358718,-7.825485,5.255492,-7.514418,-3.031080,4.676034,-8.142790,-7.097244,4.550431,-9.938535,2.225604,2.474058],[8.183617,-3.924973,-6.331495,4.959565,-7.689639,-1.004216,8.335120,1.954972,5.659814,-4.484704,-0.887596,9.661619,-8.095382],[-2.754861,-9.058173,5.572402,-2.967584,4.371969,1.671694,-1.234391,3.424178,-7.733694,1.390230,-9.801837,-5.696316,-0.027588],[7.935156,-2.873377,7.539884,-5.186601,-4.626150,-5.725235,5.711666,9.717128,-4.986160,-2.804196,-7.428340,3.236923,5.531834],[-0.567794,-2.329538,-5.988323,-1.539448,-5.253586,8.813299,-5.809281,-7.452214,-8.435027,-7.935209,-5.070975,1.751045,-6.985129],[4.771035,2.876177,6.894751,-0.018605,5.302805,-7.714696,0.686121,7.631097,6.087797,-9.625223,-4.601620,3.414642,-7.818673],[-8.239883,0.459653,7.772663,-5.655748,1.795700,4.397813,5.287121,-1.357477,-5.077733,-7.762215,5.016441,1.938020,7.086489],[-3.479926,6.070152,4.773782,8.477492,-1.613356,7.753832,3.555570,7.983098,5.271064,7.374524,-2.378894,0.151861,-6.316832],[-1.173390,4.869586,1.617121,-2.699199,-1.160184,-1.901920,-1.060777,5.795340,1.708856,-3.976449,8.817654,-2.383557,-7.255033],[-8.011217,0.227017,-9.596104,5.374136,-4.622999,0.436391,9.700787,-4.036933,7.944662,-3.166672,-1.897037,-9.889748,-8.735544]],[[-1.557559,-8.545400,6.277305,4.814713,6.216471,-3.874966,7.692982,-8.606818,-8.433439,-7.777800,5.806676,4.060027,-5.007036],[-2.395602,2.436566,-0.413950,3.287209,-9.406373,-8.001185,2.867795,5.798154,-1.736393,-2.391120,6.341765,-2.060377,6.274378],[-0.173416,3.329529,4.158243,7.401878,8.230772,-3.316824,-7.454315,2.654264,-1.784714,9.605315,9.727574,-8.958617,-7.980416],[-6.446314,-8.183735,-8.639900,-2.342437,7.854687,7.141266,-2.383147,5.187249,5.827157,4.226907,-1.300312,-2.533556,9.132400],[7.680912,6.685341,-0.492307,-3.877397,-5.309312,1.192529,-6.395832,-2.732224,7.920955,-3.127948,2.971116,-2.574192,2.111980],[9.560687,-2.155626,9.829123,-9.234547,2.988215,-6.529464,7.584975,3.651678,8.472954,-9.863321,4.857473,1.332220,-7.268810],[-2.227512,1.862831,6.263642,3.147002,-6.289329,1.653048,1.584009,0.959470,-9.234807,-5.545909,8.720937,5.514119,2.578585],[8.332519,2.113620,-7.615353,-2.275838,1.942507,-6.432398,-4.438850,4.681042,7.046981,-3.474343,-6.721813,-2.277496,-8.808970],[-5.884483,9.711066,0.756659,-3.197555,-2.409373,-9.601056,6.186540,-4.732734,-5.022129,-2.753252,-4.931400,-7.183396,-9.063837],[7.499014,-2.149858,-0.483580,4.995644,-4.139450,-8.694124,9.024065,6.776820,4.980685,2.099399,-0.143236,-8.422365,1.623920]],[[0.931434,-8.467289,-2.234102,-9.753995,0.670873,-2.313910,-4.200761,2.540781,9.167639,9.170435,-2.833265,0.786783,-7.260222],[0.819065,-6.198663,4.203764,2.458482,1.790130,8.060692,-6.276444,-5.083460,1.758082,4.723577,6.808303,-9.040900,-4.879744],[-7.204367,-1.205539,7.942685,6.387639,5.716247,1.561155,-1.107866,-2.176381,-1.672196,5.937723,0.472401,6.617935,0.172615],[-9.690773,2.375850,1.756194,-6.321262,-7.475407,0.645172,-9.060834,-1.521468,6.301357,-5.493454,-9.878902,-2.342077,-0.561181],[6.003008,8.850049,-4.612762,-5.877851,-7.146557,8.317894,1.926913,-5.295793,-4.415264,0.503235,7.041572,3.827277,0.456025],[-7.360915,5.466460,6.067110,8.142836,-3.367375,-2.337760,3.485700,-8.696852,-3.595511,6.295637,-5.042203,9.724484,-0.423473],[3.239940,-3.356823,-4.779472,-3.942114,4.820671,-3.440740,-2.121446,9.586751,6.965043,3.658536,4.970655,9.773986,9.631375],[-7.399015,-3.140071,2.105602,5.994569,-6.632681,-8.830227,8.353499,-7.068000,-6.168082,-5.645545,-3.048065,6.084226,3.777791],[5.807829,5.914920,5.703738,0.611655,-0.414929,1.371927,-9.989242,9.680036,-3.123950,9.064092,-6.123809,-9.147056,0.456681],[-4.995409,-2.505790,8.055197,6.154791,-9.846090,0.581089,-5.065873,-2.472340,2.255812,4.995760,-5.647794,3.123403,-2.618774]],[[5.554703,7.424591,4.611182,8.114095,7.962713,4.543068,1.976252,5.454063,4.466273,1.424540,5.498748,3.340315,3.990687],[8.761217,8.545101,8.622424,-3.480999,3.693051,-6.852864,2.270831,9.432284,-5.965709,8.696631,3.558214,1.190807,-3.989526],[0.751171,7.339647,8.197846,-5.344624,4.946909,-3.763786,-3.794692,5.526845,-2.804880,-6.636206,-4.675896,6.734274,2.981569],[-9.632211,4.477314,4.589425,-6.920652,6.990809,0.553821,-9.882840,7.326375,-6.655025,-4.297536,0.277307,1.284447,0.089056],[-6.930194,7.212637,7.513630,1.713636,-2.070435,-7.539305,8.368198,7.693873,0.374545,1.042675,-3.628209,-5.043702,-1.306807],[7.829083,4.207094,0.860278,8.299134,7.795476,-7.546030,0.743905,-2.313115,-0.107180,-6.822967,-1.434074,3.122961,-6.854378],[-1.060979,4.833861,-6.542936,-0.375924,0.372941,-5.752126,-6.852943,6.781730,-7.555243,7.832340,-9.690015,-7.232219,0.673340],[-1.779130,6.899898,-7.973107,6.521345,-4.138313,7.928106,-7.165994,-1.532624,9.492232,-6.448618,9.013201,-8.155276,4.134948],[-6.295618,6.498022,6.101722,8.166276,-1.108466,-1.090509,6.150910,-3.885940,1.940069,4.063053,6.062180,-5.989639,3.375324],[-7.424392,-2.159825,4.381053,1.791410,8.202738,-9.809347,5.317271,-7.427847,4.311523,-3.458503,-4.017562,-0.070584,0.508395]],[[5.563809,4.431301,-4.552232,-4.263739,-8.130581,3.631947,-8.563357,-2.120073,1.874597,2.246969,8.892885,4.552902,-8.950935],[8.189514,5.339770,-1.605312,-0.733647,-5.881822,2.075332,4.749707,-4.164362,-2.680909,9.843349,1.475414,-2.801542,6.896566],[7.096269,-9.515749,-0.823771,-7.392189,-6.969760,-5.310422,1.311167,6.081496,2.308878,-8.592068,-6.429858,-8.923778,8.904502],[-1.276389,7.150167,9.811873,0.811039,-2.180086,7.501556,4.693781,-0.973421,-4.452035,-1.597426,-9.693003,-6.858404,8.496000],[5.992194,9.815930,-8.119233,5.133544,2.335313,-5.961556,-2.994801,-2.100896,-7.326111,9.038610,-5.414613,-0.836813,-4.876315],[-0.918989,1.240651,4.884150,-8.418867,8.287795,-7.389271,-1.185520,7.582036,-3.121492,1.832967,4.635907,4.318509,-9.122833],[-1.957513,-5.880376,-9.325852,7.163957,0.751036,-6.681822,3.395973,-0.044243,-2.159383,6.736544,1.725038,3.448119,0.738101],[-3.484177,-5.956086,-7.883125,8.323588,8.793531,9.834734,0.295072,0.340315,-0.678364,8.754902,-1.061018,0.030175,2.114100],[-1.324817,-2.558921,0.999447,-1.671386,7.037406,-1.462388,3.029888,-4.160572,1.102525,5.578934,-4.860824,2.760099,-1.758007],[2.754668,-2.527096,1.184307,-5.193304,-5.843973,-3.542360,1.376563,9.768517,7.306672,4.205198,9.296349,9.647031,6.847394]],[[4.346273,-2.492427,-5.174162,6.620188,-9.377426,5.640491,-0.059073,4.566645,-5.479271,3.019099,-7.420725,5.086900,-2.201876],[-1.982888,4.665909,4.300886,2.011962,5.723278,-1.248174,-7.751882,0.240778,1.532906,4.910048,-1.519038,7.133360,4.210603],[-4.481121,4.725553,6.416145,0.556598,7.727901,2.226966,-7.787625,-3.361876,-6.661839,1.570778,1.011870,6.465860,1.415633],[-6.520659,1.463303,1.384736,-7.010048,2.086429,-8.705370,8.063969,6.100562,-8.979344,1.633022,-4.134611,3.377615,6.435889],[-8.057976,3.273393,-2.776921,-0.414488,6.568642,-7.960845,-1.912071,-5.645066,-0.574807,-2.618394,-4.458543,7.928904,-6.029085],[1.876525,6.934133,-1.814087,-3.156227,-3.732049,0.003908,-1.213889,-9.967966,3.726722,-4.995374,5.287424,5.136159,7.101983],[2.064735,0.025975,-5.328514,1.092405,4.041400,-6.843176,-8.017190,-3.003370,0.211438,-6.199701,7.567738,0.628156,9.661861],[-1.996692,-5.133396,1.335145,-4.836652,9.633143,2.745347,7.255069,-0.898251,-1.692290,-3.867518,9.270876,-9.888717,8.948745],[3.215511,6.379726,7.982840,7.027137,2.093848,0.312412,8.175921,1.882031,-6.621162,8.207664,-5.350066,9.885109,-5.326372],[-3.402566,-4.401661,4.292560,-7.377220,7.081231,-5.065705,-2.880796,9.650079,-7.236525,-5.026645,0.609396,-4.961702,-5.401105]],[[7.056286,1.267614,-0.889699,-9.256696,0.915415,-9.590103,-9.344706,9.849015,-6.819006,2.713052,-7.873369,-6.073513,4.522377],[7.839204,-3.346424,-4.901257,7.450774,3.656878,9.141219,-1.278322,8.387451,8.780750,-6.243349,3.814921,-6.048488,-9.539425],[-3.903648,5.297879,4.287967,6.644983,-9.546545,5.936394,8.138938,7.711341,-0.962997,2.795756,-2.374505,1.453957,8.873853],[8.299559,8.690215,-0.193085,-2.551508,5.036829,-2.524136,8.694392,-9.137738,-5.092409,-1.029297,9.884471,-2.358782,-3.232648],[6.770877,9.923272,-0.105955,-2.419163,8.445901,5.855532,-8.088549,8.731016,5.838785,-4.936387,7.411782,7.073616,-3.955916],[-0.327311,8.461737,-1.309970,-4.365589,-5.870602,-9.293686,6.849490,4.978754,-2.793186,8.585977,2.819019,-2.596255,1.678822],[-9.673704,9.676438,1.497100,5.416405,5.452688,7.540991,-3.315992,-2.978873,-0.661327,-6.145672,1.783629,9.637581,-6.278340],[6.690095,-8.189786,-9.430271,-6.754607,-1.989000,8.280731,-1.771338,4.528633,-1.313183,7.967435,-8.977412,-2.625453,-8.297610],[1.517547,6.594009,-7.432317,7.449063,0.821171,9.699519,1.907932,4.805299,-9.057366,1.889564,2.796024,8.656561,2.548452],[-9.410483,-7.686489,0.444076,-6.348758,3.496140,4.298973,-3.261381,-4.161074,-6.933326,0.510872,-8.511357,-3.991254,1.366215]]], dtype = "float32")#candidate|1285|(9, 10, 13)|const|float32
uop_1286 = relay.log(const_1285.astype('float32')) # shape=(9, 10, 13)
func_989_call = mod.get_global_var('func_989')
func_992_call = mutated_mod.get_global_var('func_992')
const_1289 = relay.const([False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True], dtype = "bool")#candidate|1289|(600,)|const|bool
call_1288 = relay.TupleGetItem(func_989_call(relay.reshape(const_1289.astype('bool'), [5, 12, 10])), 1)
call_1290 = relay.TupleGetItem(func_992_call(relay.reshape(const_1289.astype('bool'), [5, 12, 10])), 1)
var_1292 = relay.var("var_1292", dtype = "float32", shape = (9, 10, 13))#candidate|1292|(9, 10, 13)|var|float32
bop_1293 = relay.minimum(uop_1286.astype('int32'), relay.reshape(var_1292.astype('int32'), relay.shape_of(uop_1286))) # shape=(9, 10, 13)
output = relay.Tuple([call_1288,const_1289,bop_1293,])
output2 = relay.Tuple([call_1290,const_1289,bop_1293,])
func_1299 = relay.Function([var_1292,], output)
mod['func_1299'] = func_1299
mod = relay.transform.InferType()(mod)
mutated_mod['func_1299'] = func_1299
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1300 = relay.var("var_1300", dtype = "float32", shape = (9, 10, 13))#candidate|1300|(9, 10, 13)|var|float32
func_1299_call = mutated_mod.get_global_var('func_1299')
call_1301 = func_1299_call(var_1300)
output = call_1301
func_1302 = relay.Function([var_1300], output)
mutated_mod['func_1302'] = func_1302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_1356 = func_120_call()
call_1357 = func_120_call()
func_188_call = mod.get_global_var('func_188')
func_191_call = mutated_mod.get_global_var('func_191')
var_1359 = relay.var("var_1359", dtype = "uint64", shape = (70,))#candidate|1359|(70,)|var|uint64
var_1360 = relay.var("var_1360", dtype = "uint64", shape = (1120,))#candidate|1360|(1120,)|var|uint64
call_1358 = relay.TupleGetItem(func_188_call(relay.reshape(var_1359.astype('uint64'), [7, 1, 10]), relay.reshape(var_1360.astype('uint64'), [7, 16, 10]), ), 0)
call_1361 = relay.TupleGetItem(func_191_call(relay.reshape(var_1359.astype('uint64'), [7, 1, 10]), relay.reshape(var_1360.astype('uint64'), [7, 16, 10]), ), 0)
output = relay.Tuple([call_1356,call_1358,var_1359,var_1360,])
output2 = relay.Tuple([call_1357,call_1361,var_1359,var_1360,])
func_1368 = relay.Function([var_1359,var_1360,], output)
mod['func_1368'] = func_1368
mod = relay.transform.InferType()(mod)
mutated_mod['func_1368'] = func_1368
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1368_call = mutated_mod.get_global_var('func_1368')
var_1370 = relay.var("var_1370", dtype = "uint64", shape = (70,))#candidate|1370|(70,)|var|uint64
var_1371 = relay.var("var_1371", dtype = "uint64", shape = (1120,))#candidate|1371|(1120,)|var|uint64
call_1369 = func_1368_call(var_1370,var_1371,)
output = call_1369
func_1372 = relay.Function([var_1370,var_1371,], output)
mutated_mod['func_1372'] = func_1372
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1281_call = mod.get_global_var('func_1281')
func_1282_call = mutated_mod.get_global_var('func_1282')
call_1463 = relay.TupleGetItem(func_1281_call(), 3)
call_1464 = relay.TupleGetItem(func_1282_call(), 3)
output = call_1463
output2 = call_1464
func_1468 = relay.Function([], output)
mod['func_1468'] = func_1468
mod = relay.transform.InferType()(mod)
mutated_mod['func_1468'] = func_1468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1468_call = mutated_mod.get_global_var('func_1468')
call_1469 = func_1468_call()
output = call_1469
func_1470 = relay.Function([], output)
mutated_mod['func_1470'] = func_1470
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1485 = relay.const([[[-9.152875,3.340495,-8.944843,8.317390,-7.760625,-4.567295,3.500483,-0.038414,0.523646,3.298520,3.823169],[-7.697331,-0.897998,4.223522,-5.321028,2.193794,0.508267,3.992225,7.751241,-8.526404,-6.289395,8.916259],[6.179475,6.012566,7.074007,-6.045122,-1.631663,2.572808,7.872496,-0.535829,-6.425319,-4.580331,-0.907719],[0.063136,0.328809,5.134371,-8.180332,8.644526,-7.568153,-9.868435,3.472320,-8.915320,3.417485,4.821758],[-7.542470,-0.347213,1.328020,7.343501,-4.212607,-7.960488,-2.812953,-0.244192,-9.177627,7.224793,-2.135603],[6.994334,-1.852580,4.427740,3.322231,-8.829409,-1.312570,-4.841900,5.109102,6.806234,-3.103955,6.771038],[4.218816,6.449357,-4.498123,5.882395,-5.923530,-6.822835,-8.690554,9.152073,-4.105505,-5.065843,-1.807710],[6.735071,-2.945596,-3.784357,-5.922234,6.405146,4.093858,4.930893,1.687544,-6.572229,1.985128,-5.508574]],[[-3.263062,-9.023935,3.667859,2.486681,2.280773,-7.868907,9.045930,1.275148,-0.089641,8.979829,8.136955],[0.595375,9.817220,8.395544,2.740920,7.939651,4.776157,-0.588378,-8.910241,-2.820045,-0.963627,6.526105],[7.278459,5.914658,9.462520,3.536839,-9.566158,-4.217975,-7.276829,-7.630536,4.421428,1.899122,3.826746],[-9.065434,6.347372,-0.673300,4.151611,4.591608,-0.133536,-8.337537,-5.667156,-6.006505,6.879816,-6.764529],[-3.381833,6.350430,-8.936392,-0.831983,-7.883982,2.097045,-2.579744,-8.020282,7.999223,-8.137666,-2.256212],[-5.783065,6.090302,6.304068,1.207905,-1.310252,5.067758,8.131303,2.473608,2.625197,-9.387902,2.362702],[-7.336958,-0.616296,-1.798002,3.836404,-0.253178,1.311852,9.152247,-4.150620,-2.648362,-9.138856,-1.056663],[-2.145757,-4.765609,2.871556,-2.523209,2.241464,-3.964755,5.569789,-3.286888,-1.794209,-3.048654,-6.025937]],[[-3.332322,-8.597813,-2.875526,-0.753153,-3.371979,-6.047986,5.627711,-7.987267,-2.716522,-9.979793,7.122243],[8.613465,3.877482,-0.300684,4.165931,5.216346,2.705431,3.967591,-5.497095,-6.338566,-1.567018,1.823891],[2.330086,2.707640,1.049263,-0.695731,2.823615,0.549023,0.747253,-4.057816,-0.715640,9.442995,2.253438],[8.142889,-6.140647,4.783755,-1.370680,-9.294771,-3.075094,-6.503141,-5.260442,-6.576823,-8.328938,-5.112748],[-3.071596,2.201182,-8.863760,-6.524298,0.179423,7.963709,-3.390292,-7.981218,-6.278259,-3.453332,-7.072405],[-0.842831,6.989314,5.607790,-4.899231,-1.241053,-7.625713,-6.424306,-6.495410,2.724891,-0.412187,5.069969],[2.769315,-5.533801,1.397082,-4.112414,1.288075,-5.523015,4.620339,-1.087314,3.606094,-4.775805,-4.477336],[-6.812894,-5.495347,-1.238576,-4.545082,8.601941,8.820192,6.171671,-0.197688,3.747820,4.499772,-4.507363]],[[5.429562,-5.039405,9.141190,-7.100706,4.146365,-6.978003,-0.778897,3.767540,5.008201,-7.595642,-2.593445],[9.840822,0.629349,-0.271677,-1.732993,-3.724818,8.621972,-1.363555,2.126439,2.381277,0.095353,-6.108211],[-0.903275,-9.886343,-3.577291,5.976542,8.175388,3.743994,5.221572,5.823006,0.103372,3.440254,-3.928126],[3.142928,-0.114243,1.181042,4.713261,-0.436922,7.247388,3.852319,2.245803,-4.441225,1.025444,-3.574169],[2.440038,-1.027057,9.399547,7.675782,7.856433,0.055283,9.799573,7.928908,1.631213,6.134504,-6.921295],[-6.770514,8.041444,-6.458737,1.836558,8.503943,-3.840141,9.408753,8.825427,-4.543371,8.071257,-8.951476],[-9.736011,2.213969,3.651229,-3.609548,7.930308,-8.712382,7.330846,0.427310,6.184887,4.788812,-8.979991],[3.331980,0.932393,-7.688739,6.940483,-2.780629,-0.227667,5.366505,-1.456987,-3.932467,1.709671,-1.388186]],[[0.265577,7.767189,-3.417402,2.032295,5.598507,-0.724661,-4.552761,7.776731,8.365621,2.750538,-0.022890],[-3.476705,-4.078378,-9.872062,8.728125,-1.908260,0.119528,4.637624,-0.408353,-9.201935,7.124720,-6.130988],[-6.093481,0.104089,8.309672,0.746798,-5.800664,-0.489654,-0.237042,-8.604481,7.331308,0.350774,-8.470447],[-4.150436,4.821151,-3.292561,4.380462,-9.185994,-8.011751,-3.761033,-0.840249,5.460952,2.111457,0.520111],[4.945015,1.103240,-9.492919,1.072859,7.818744,8.188157,-9.692868,6.884379,-6.204864,8.190735,5.010144],[3.293216,-4.132858,-8.944115,-4.368246,2.415275,3.264455,7.499655,7.640228,-2.925085,-0.320969,7.028422],[0.306502,9.683745,-2.031615,7.478281,-8.701852,5.118167,5.789623,-9.747443,3.045007,8.954021,-4.578372],[-2.982328,8.735959,-3.322346,-0.514200,4.912529,-5.558991,-5.462563,7.121811,-6.054436,-6.074612,-1.598421]],[[-0.803003,0.463955,8.778372,-1.061585,0.147477,5.359277,-7.292576,1.745901,-3.697131,-4.251849,0.282261],[4.898186,-2.274163,-9.809237,-7.033407,0.611140,3.842021,-3.290026,7.243070,-1.311921,-9.998652,-6.498010],[8.322751,1.213796,-9.958307,-6.987854,-7.157299,-9.915054,5.601969,9.590520,-2.251327,-8.800501,-9.548375],[-0.756054,-4.815100,-2.991288,-9.016229,4.051329,-3.509771,6.747031,-9.531090,-2.062000,-1.405814,-7.110381],[1.276688,4.627562,-3.630201,2.792102,-1.419422,-1.778725,-5.863139,2.778102,2.467028,-6.100025,-9.232069],[-0.643850,1.900289,6.615532,-9.406474,-2.729747,-8.468855,0.446757,5.651334,9.623137,-2.012582,-6.964362],[-8.433651,3.954822,-1.541323,-7.420327,-8.892565,-4.460191,2.704942,3.899275,4.782101,-0.773506,6.627771],[-8.685952,-7.299969,-6.611201,0.025583,-3.520533,2.975372,-4.829804,0.634704,-0.503399,0.131799,-4.441955]],[[-0.233998,-9.122672,8.785561,5.711796,-9.823897,6.338153,7.982734,0.402489,1.678234,3.088511,-2.039071],[-1.444265,-5.408528,5.061747,0.802077,-0.764571,1.838208,8.695871,0.619357,6.782576,-9.678490,2.984622],[-5.844280,8.453160,-4.818782,-7.168338,-8.555651,-1.486721,2.662414,-4.137555,1.975174,0.693336,-7.313106],[8.203438,0.274587,5.129546,-8.357150,-1.366208,-8.274467,-8.009700,-6.061689,4.956059,2.732759,7.206159],[1.888706,-7.820283,-3.226457,4.877342,-7.681006,6.296702,2.699030,-8.392683,7.890780,-6.363053,-5.362862],[-6.061815,-1.215083,2.161616,2.132751,-2.359983,-9.142603,-7.152641,-4.598023,0.884444,-5.141238,1.207112],[-4.523245,3.747799,-2.052731,0.302084,-2.413664,4.030600,3.248929,6.159708,6.295848,4.481967,-3.809311],[-6.419436,7.826271,8.343828,-8.072169,9.157861,-9.962091,-4.532144,-5.574960,9.392190,4.727147,0.410508]],[[9.072604,-7.362471,5.037901,6.102697,1.327087,-5.647629,4.427737,-3.338415,-9.440070,-2.529342,8.281736],[7.167916,-3.378841,-2.998110,9.259927,-7.375793,-3.367000,5.475468,-2.912314,9.791305,5.006414,-9.188245],[-2.205658,-8.826437,-6.963301,3.740366,-2.973985,-0.352947,-9.713083,-1.883113,-0.404417,-6.281312,3.627052],[-9.595271,-2.322910,5.993969,-7.785187,9.671024,8.776971,1.951293,-5.811009,8.848414,-7.629681,-3.530316],[-2.171247,-3.555654,1.558009,-8.607326,7.654117,1.634567,-2.979584,6.864860,-1.321271,4.625733,-9.430164],[-3.615929,-8.134383,1.027876,5.326042,3.264197,5.955760,-6.339808,-7.269436,4.270005,-4.589325,-8.524732],[-6.592171,0.494803,-9.005936,-6.011492,7.705852,0.527828,-0.047282,-1.380252,-9.684236,6.383736,-2.964269],[5.942426,-0.560341,-9.011715,4.665184,-0.663534,-2.414681,-2.513195,-3.505977,6.993972,6.641797,9.927397]],[[-3.598817,8.346397,6.699430,-9.725348,7.010427,8.661419,-7.950183,-4.782110,-6.273861,9.410960,-4.394277],[1.901510,-1.457887,-8.872933,9.353109,4.569114,-7.215081,9.733373,-7.573289,3.341122,1.231387,4.235315],[-0.153066,0.309542,-0.074695,8.884660,-1.908860,-9.932558,2.123018,8.765954,-6.412302,-6.066233,7.142772],[9.853166,9.912195,1.245806,0.122012,2.983600,-9.310314,-2.180741,9.943943,4.718378,-4.243345,2.822939],[6.227023,-9.029755,3.594797,-1.319809,-2.534515,-8.043255,-4.837638,-4.669934,0.539282,4.918039,-7.661516],[-9.067235,7.320699,-4.574504,4.127686,0.056378,-4.938263,9.371416,6.750548,-8.041720,3.322857,8.766859],[3.910472,4.675176,4.936478,-4.537710,-3.112492,-2.664922,6.530134,6.153367,-6.095561,2.499533,-0.822962],[-5.685059,-9.891582,-9.654255,-0.997267,2.103628,1.762874,-8.805079,8.035406,2.718101,4.521551,9.971257]],[[-4.287726,-6.889790,0.778096,3.198145,-9.639043,9.088050,-1.853378,-4.556167,-1.265648,-5.226596,-3.331603],[-5.343637,-2.200523,6.651101,0.380584,-3.964681,9.177031,-3.413427,-7.587319,-3.984338,-0.232369,7.902175],[6.550109,1.458152,0.357493,-8.314135,-0.350875,3.404427,-1.343319,-7.635701,2.990775,8.929998,2.644845],[8.286166,9.889402,-3.726409,-9.546780,-8.443091,7.906917,4.724571,-9.282794,-1.821442,-0.503632,3.682164],[-0.744932,0.212840,-5.964654,-3.990042,-9.088952,1.999675,-5.160511,3.281803,7.659531,-0.835233,2.536622],[5.581104,6.443384,-7.998091,2.462978,-4.544730,-9.181523,1.804797,-6.134580,-3.695217,3.036956,-7.841278],[-9.794951,-0.154436,-3.783848,-8.370920,-3.923368,1.629709,-3.214451,-6.746750,3.386259,2.647947,-3.432191],[-5.372820,4.222436,6.775895,-3.530875,-2.599035,-2.210135,-6.785712,2.995533,-5.826033,-5.600337,-2.131866]],[[-7.395539,-3.403820,8.155077,0.678876,-5.784792,3.413409,-9.669304,-7.282397,-8.563204,0.389242,-3.351776],[4.213835,2.631737,6.094532,8.700322,-1.927303,-6.966910,5.420058,-0.887379,0.297381,-8.405267,-8.378255],[-3.917759,7.085308,5.573504,7.796223,-1.778785,-3.122549,-8.727544,5.742426,0.294495,4.388367,-4.222377],[6.954766,0.441687,8.174402,9.102724,6.501326,8.430508,1.862333,8.544785,-1.039566,4.337154,1.004498],[-4.475338,-6.592702,-7.474280,-6.234706,-6.965296,-4.764031,-8.543454,-6.595770,6.325964,9.805143,-1.925839],[-7.415126,6.171114,-8.713702,7.551770,1.296802,-2.019416,2.349551,2.076676,-2.401393,3.263334,-5.100105],[-1.000329,-2.040693,-5.370415,-3.191894,-0.215480,-2.316127,1.681291,-4.758588,5.264891,6.219501,0.936321],[-7.138348,-5.759337,3.303909,7.762724,8.076386,-5.031655,-3.049671,-7.614469,7.738012,9.832913,-9.387415]],[[-3.799205,1.714281,-4.259699,-0.133047,2.476925,6.816650,2.989389,3.099768,-2.821929,-3.452557,-3.755939],[3.822643,-7.815923,3.355959,-5.261098,-9.377920,5.354302,-8.605098,-8.464658,4.822989,-9.184282,7.920457],[4.716186,-5.877583,-7.619358,-5.197829,3.380171,2.025701,3.210117,9.210617,-7.211660,-9.089835,8.386435],[-7.997110,2.564528,8.716727,-0.359677,0.335609,-5.908212,0.973885,5.667815,9.447076,3.052027,-5.315934],[-0.044574,-8.200685,3.494034,-2.314055,-2.580911,8.173756,-4.711519,8.688093,2.111394,1.435664,-8.921408],[-8.796532,-0.013120,2.463947,-5.100283,-0.534438,0.823893,-9.561930,-4.282350,-7.954644,0.604849,-2.144171],[-3.241223,-9.400766,1.581485,4.788370,-5.196447,2.585686,-7.351019,-2.947648,-8.734138,9.447486,7.687399],[-0.224560,-9.114322,-8.989362,-1.398046,4.009754,-5.474263,3.078840,9.381771,-1.451820,-6.620366,5.920708]],[[-2.551607,-3.498278,-4.849218,-5.008414,2.799649,5.393106,2.529299,7.717173,2.330363,4.471477,-4.879399],[5.662981,2.385708,5.781176,3.496843,-1.938632,-9.474306,-1.036008,-6.097212,-7.546545,3.519728,8.976049],[-3.271205,0.501032,-4.274244,6.563987,4.904566,-7.770597,-8.126717,-8.773303,-3.883153,8.272777,7.882981],[-0.041421,8.173258,2.376490,-2.686421,6.939844,8.199566,-4.194016,1.524632,-1.494013,-2.088333,-7.536995],[-3.610146,-6.358928,8.027458,3.744406,3.727458,1.345849,1.796605,-2.368830,7.217982,-9.176588,-9.068990],[-6.442772,-6.948483,-4.969079,-6.168912,-2.972699,4.159970,9.075978,-7.943371,-1.883843,-7.709224,-5.240447],[-8.716003,-6.640392,6.244986,0.997320,4.526956,0.783078,-9.163913,5.123866,-1.421036,-6.649780,-8.884549],[1.325474,-0.547325,9.515214,4.250015,-2.345726,-5.398333,1.362479,5.631574,7.092047,0.708060,4.632566]],[[-8.875381,-3.948107,-1.533772,-0.349055,-7.574791,5.719854,1.636211,-0.691526,9.040350,7.349019,0.472424],[6.784691,3.798036,4.451120,5.507798,-8.325547,0.317640,1.473767,3.164839,7.901192,7.989227,9.734132],[3.198050,2.865480,-4.423659,-0.787213,2.526377,0.373173,-8.693339,4.580665,4.802713,9.727934,-9.014244],[-0.126672,-1.124182,-3.708548,-7.651406,5.168723,0.900237,-0.378903,8.971106,4.428166,-0.739186,1.439894],[3.818160,7.601673,-3.832250,-6.737163,9.794773,4.641454,-9.978916,4.420370,4.263062,-3.875984,6.942808],[-7.021118,9.707980,1.476196,-0.071984,-5.285041,-2.115483,-7.163673,-8.994631,5.028066,2.273590,1.102791],[-0.285586,9.010167,5.494582,-5.740667,-5.914330,6.348979,-8.916887,-4.814107,7.020712,3.347932,-2.237172],[1.444543,-6.070174,-9.604556,9.597940,9.664337,-8.684605,7.335495,-0.240906,-7.753327,-0.717198,-1.425648]],[[-4.013455,-1.577669,2.149525,3.914494,2.275246,-8.404582,-6.435908,-5.186754,-8.649921,0.203360,-3.121071],[6.292469,3.780592,3.120225,6.801823,-7.028781,-1.119381,-6.809356,-6.708267,1.495647,-5.915293,6.918111],[-2.906385,-2.543855,9.966556,9.080168,-5.968639,-0.181651,-3.368205,7.777269,4.351781,-8.551052,-2.995942],[5.802880,-2.799654,4.552110,-9.583953,8.830335,-9.709675,-6.221743,-2.108736,9.193936,-4.570348,-5.604488],[2.221168,-1.132137,7.421714,2.986316,3.401705,1.039198,7.013734,-6.270778,4.110800,0.249374,6.530426],[-5.388245,2.342946,-4.402363,4.487598,3.492970,2.379637,-2.678664,-9.745830,-4.693651,-7.489698,4.494160],[-8.513012,-7.788870,-3.343511,7.884005,5.382631,3.499369,4.980998,-7.391594,-9.917756,-7.815584,3.305782],[-7.502127,-1.975978,-9.814666,-3.855016,-6.624459,1.143677,3.778494,-4.054621,-3.957752,-5.364092,5.443750]]], dtype = "float64")#candidate|1485|(15, 8, 11)|const|float64
var_1486 = relay.var("var_1486", dtype = "float64", shape = (15, 8, 11))#candidate|1486|(15, 8, 11)|var|float64
bop_1487 = relay.greater_equal(const_1485.astype('bool'), relay.reshape(var_1486.astype('bool'), relay.shape_of(const_1485))) # shape=(15, 8, 11)
output = bop_1487
output2 = bop_1487
func_1495 = relay.Function([var_1486,], output)
mod['func_1495'] = func_1495
mod = relay.transform.InferType()(mod)
mutated_mod['func_1495'] = func_1495
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1496 = relay.var("var_1496", dtype = "float64", shape = (15, 8, 11))#candidate|1496|(15, 8, 11)|var|float64
func_1495_call = mutated_mod.get_global_var('func_1495')
call_1497 = func_1495_call(var_1496)
output = call_1497
func_1498 = relay.Function([var_1496], output)
mutated_mod['func_1498'] = func_1498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_1527 = func_140_call()
call_1528 = func_140_call()
func_1149_call = mod.get_global_var('func_1149')
func_1151_call = mutated_mod.get_global_var('func_1151')
const_1540 = relay.const([[-8.702521,-1.985108,-9.792597,2.635435,-5.594294,2.626283,-0.727067,6.264827,1.709055,3.092972],[6.764698,-0.176025,-3.206790,-8.207657,6.884035,0.701720,2.496897,-6.657395,6.016843,-3.287456],[-4.005286,5.752729,-0.009485,-9.130418,7.994555,6.724832,-2.987365,6.377305,-9.347958,5.014372],[9.332249,4.249389,-3.274660,3.190289,5.355429,-4.822224,8.447566,-9.903425,-5.195296,7.028700],[-1.003210,0.030361,-1.497946,-7.736924,-4.864792,7.241395,-8.018592,-3.698851,-0.193797,-0.513751],[-2.095003,3.988838,9.725863,1.349453,3.293184,5.511098,0.728813,-0.051748,2.427716,-9.713870],[-9.350772,5.776689,-3.370314,1.294363,6.224925,-3.735290,-8.342877,-9.069510,-7.462508,-4.104425],[-9.478696,8.113683,-8.928563,-6.363160,-5.046285,9.029789,-7.297680,-8.403372,1.930000,4.694771],[8.378956,-7.222662,-0.937294,1.394843,-1.592444,-1.958465,6.180983,-6.686155,0.222284,6.811084],[-1.047780,-9.937903,-5.757046,1.171535,-4.573772,-1.660732,2.260778,-3.959772,7.289762,-8.100952],[3.855597,4.298820,-5.643995,-6.864633,-3.633294,-8.911155,-7.063376,3.659017,0.206120,-8.512963],[4.459052,5.479379,3.523744,-9.682770,-6.407018,-1.042144,5.687098,-9.901536,-9.032999,2.598020],[7.875947,2.838859,-0.031007,-6.309566,7.793303,-3.703591,7.850993,9.430194,2.008380,-3.644049],[-7.202531,0.167756,-9.716921,-5.792610,-2.237396,4.032057,9.308715,4.483529,6.489440,1.391969],[0.275169,1.714879,4.817418,5.587941,8.389187,-2.636841,4.390918,5.489322,-4.116851,-5.287500],[-8.263644,-1.914848,-3.017065,8.789658,8.540774,-7.237424,-0.449974,4.051524,5.347530,-7.893415],[-9.674342,-8.825873,-5.774927,5.583068,9.090958,7.464646,5.458601,5.751899,-5.561596,7.297021],[8.579193,-8.063643,-8.278426,-5.237594,-2.278049,-3.146410,9.821439,-5.990101,-5.583719,-4.679192],[5.283340,3.331539,4.051591,-4.215116,-0.981366,8.978130,-4.317970,7.615653,-0.568641,-1.472378],[2.130499,6.355393,4.209938,-3.655522,-1.872241,-7.135113,5.054762,-1.283864,-6.594870,-2.970969],[9.350251,6.670699,8.915920,-0.234944,-5.580885,-3.804295,1.083636,-0.294542,-0.099416,-4.866429],[-6.708932,-2.682833,6.248128,-6.369501,-3.240329,-4.836974,8.156216,5.354099,-5.590050,-1.925645],[-1.961719,-1.769032,-6.642755,-6.853141,-2.639079,5.847830,8.267227,-2.796708,6.603991,8.438331],[1.528132,4.780593,8.704586,5.701749,-5.269342,-9.687613,-7.867019,-3.435385,4.078408,6.266165],[3.228434,-3.778855,1.941962,5.162940,-1.893628,-6.865670,-2.878666,-1.018473,-7.188576,-8.987511],[4.417377,6.637357,1.252057,-9.664710,-0.917452,-2.394965,9.650770,7.960860,3.959210,7.147770],[7.619247,2.727945,6.448812,9.099779,5.903165,-5.401955,-5.079052,1.922005,1.329358,-1.019585],[0.083406,1.624602,-3.571048,8.667638,-7.111342,9.406897,-5.600260,8.344484,-8.126625,2.749246],[-5.408414,-8.912534,4.964564,2.033882,5.151515,8.167443,-8.981719,6.708931,0.147852,2.015421],[7.261972,0.835880,0.934932,7.977919,9.248394,-6.801519,-5.162852,-0.759939,-9.765835,-5.163933],[4.345904,-1.520840,7.509495,-2.202900,6.246536,-5.372962,-9.122802,-1.906958,-5.862174,0.776535],[5.804003,-1.343369,-8.771233,9.040649,-3.204147,2.556405,0.007858,8.886294,5.677404,2.474984],[8.032791,-2.527635,1.085823,-3.001405,-1.837378,9.855645,1.995346,-3.566057,-5.346461,-6.988176],[8.896703,6.626266,2.094557,5.684044,-5.172305,7.411495,-7.919198,-4.538576,5.898067,-2.179717],[-8.371457,7.066342,6.279511,-8.441050,3.535977,-1.282113,-9.319533,-4.038557,-6.243685,-3.921472],[-7.936243,0.382949,7.077709,2.561902,-9.361562,4.264023,9.124086,-2.513861,-3.470026,8.524626],[2.907762,-6.918749,7.320887,8.925931,7.320115,-5.713817,-6.782903,-9.388436,4.678341,-3.380597],[9.253664,5.269249,-9.782773,9.219675,-3.525976,-4.828587,-3.364137,7.428732,5.423684,-0.624497],[-6.229341,1.136202,-8.536623,4.181460,4.521697,1.245496,0.272649,5.497198,-0.809955,-5.806189],[5.119692,-3.771991,8.136371,6.455787,-7.306246,6.861303,8.688096,4.369555,1.177352,0.484293],[-5.127415,0.483508,3.763311,2.360500,-9.027478,-3.025846,1.499297,7.211113,-1.443273,7.458224],[-6.507504,-4.404599,8.054632,4.548670,-1.413931,5.278787,0.803559,-6.816579,-8.267460,-8.597060],[8.660783,-7.534849,3.802048,9.237426,6.135309,3.039224,-4.675253,4.910876,7.220560,-1.363105],[9.306619,3.684358,-9.072096,-0.563572,3.742047,0.140958,7.459874,1.540478,-4.067451,0.913231],[-7.247367,6.503717,-9.614080,-5.979018,-7.276387,3.207207,1.951553,-1.902942,-7.984846,-7.636443],[-0.924718,-0.086922,5.603281,-9.346818,-6.738221,0.883183,-3.993781,3.232574,8.936375,4.888915],[-7.050082,-2.644033,7.653244,-3.239469,4.256829,2.624825,-0.455529,8.008363,-1.576134,9.484698],[7.524950,4.110696,-0.940053,-3.277739,-8.556863,6.584158,-4.178001,-8.453027,-4.309339,6.193779],[6.986576,7.178704,-3.310030,-4.321035,2.268431,-8.802979,-6.113815,-3.792238,-6.685272,8.021398],[-0.098637,-3.168301,-2.304132,-1.532130,7.919911,-6.811836,0.166246,-5.643322,-2.951995,-7.592263],[7.059718,7.149301,-1.886776,-4.839918,-5.483093,5.282489,-7.447044,-0.523721,6.003471,2.888598],[-3.814915,4.854900,-4.505214,-5.448755,-5.258901,-9.813633,5.170657,-1.002021,1.024770,-8.245906],[-8.408767,2.988081,9.880565,8.835233,-7.616026,3.768572,-5.074495,-8.552593,8.871548,0.544769],[7.865438,1.934127,1.017861,-9.648783,-9.752970,1.673012,4.119031,3.605680,-1.533670,3.580762],[4.804010,5.105611,5.199268,-1.155236,-7.642331,6.762123,1.415099,-5.227207,-4.256501,-5.731420],[-7.836037,8.867460,-4.075064,-1.809484,2.987657,2.353929,4.597357,-3.799306,1.663748,8.837008],[-2.998132,8.228538,4.296482,4.653513,4.392627,-6.567890,1.631673,2.313387,-2.750954,-7.743260],[8.874931,-1.953229,-9.678604,1.649147,-5.135926,-1.102894,2.918675,-3.095047,5.613578,-6.543798],[6.667246,-9.167144,-2.868346,-9.043749,-2.551725,-7.857454,6.684026,-0.542690,7.645176,8.430273],[-8.960201,0.941346,4.101681,-4.945693,0.393799,1.447197,9.115170,3.627348,2.975987,-3.238647]], dtype = "float64")#candidate|1540|(60, 10)|const|float64
call_1539 = relay.TupleGetItem(func_1149_call(relay.reshape(const_1540.astype('float64'), [600,])), 2)
call_1541 = relay.TupleGetItem(func_1151_call(relay.reshape(const_1540.astype('float64'), [600,])), 2)
output = relay.Tuple([call_1527,call_1539,const_1540,])
output2 = relay.Tuple([call_1528,call_1541,const_1540,])
func_1546 = relay.Function([], output)
mod['func_1546'] = func_1546
mod = relay.transform.InferType()(mod)
output = func_1546()
func_1547 = relay.Function([], output)
mutated_mod['func_1547'] = func_1547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_317_call = mod.get_global_var('func_317')
func_318_call = mutated_mod.get_global_var('func_318')
call_1571 = relay.TupleGetItem(func_317_call(), 0)
call_1572 = relay.TupleGetItem(func_318_call(), 0)
output = relay.Tuple([call_1571,])
output2 = relay.Tuple([call_1572,])
func_1585 = relay.Function([], output)
mod['func_1585'] = func_1585
mod = relay.transform.InferType()(mod)
output = func_1585()
func_1586 = relay.Function([], output)
mutated_mod['func_1586'] = func_1586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_1595 = relay.TupleGetItem(func_1585_call(), 0)
call_1596 = relay.TupleGetItem(func_1586_call(), 0)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_1597 = relay.TupleGetItem(func_544_call(), 1)
call_1598 = relay.TupleGetItem(func_546_call(), 1)
output = relay.Tuple([call_1595,call_1597,])
output2 = relay.Tuple([call_1596,call_1598,])
func_1601 = relay.Function([], output)
mod['func_1601'] = func_1601
mod = relay.transform.InferType()(mod)
mutated_mod['func_1601'] = func_1601
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1601_call = mutated_mod.get_global_var('func_1601')
call_1602 = func_1601_call()
output = call_1602
func_1603 = relay.Function([], output)
mutated_mod['func_1603'] = func_1603
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_1626 = func_140_call()
call_1627 = func_140_call()
func_1149_call = mod.get_global_var('func_1149')
func_1151_call = mutated_mod.get_global_var('func_1151')
var_1630 = relay.var("var_1630", dtype = "float64", shape = (600,))#candidate|1630|(600,)|var|float64
call_1629 = relay.TupleGetItem(func_1149_call(relay.reshape(var_1630.astype('float64'), [600,])), 2)
call_1631 = relay.TupleGetItem(func_1151_call(relay.reshape(var_1630.astype('float64'), [600,])), 2)
output = relay.Tuple([call_1626,call_1629,var_1630,])
output2 = relay.Tuple([call_1627,call_1631,var_1630,])
func_1633 = relay.Function([var_1630,], output)
mod['func_1633'] = func_1633
mod = relay.transform.InferType()(mod)
mutated_mod['func_1633'] = func_1633
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1634 = relay.var("var_1634", dtype = "float64", shape = (600,))#candidate|1634|(600,)|var|float64
func_1633_call = mutated_mod.get_global_var('func_1633')
call_1635 = func_1633_call(var_1634)
output = call_1635
func_1636 = relay.Function([var_1634], output)
mutated_mod['func_1636'] = func_1636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_592_call = mod.get_global_var('func_592')
func_594_call = mutated_mod.get_global_var('func_594')
call_1711 = relay.TupleGetItem(func_592_call(), 1)
call_1712 = relay.TupleGetItem(func_594_call(), 1)
output = call_1711
output2 = call_1712
func_1713 = relay.Function([], output)
mod['func_1713'] = func_1713
mod = relay.transform.InferType()(mod)
output = func_1713()
func_1714 = relay.Function([], output)
mutated_mod['func_1714'] = func_1714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_1715 = func_120_call()
call_1716 = func_120_call()
var_1717 = relay.var("var_1717", dtype = "float32", shape = (5, 8, 5))#candidate|1717|(5, 8, 5)|var|float32
bop_1718 = relay.logical_or(call_1715.astype('bool'), relay.reshape(var_1717.astype('bool'), relay.shape_of(call_1715))) # shape=(5, 8, 5)
bop_1721 = relay.logical_or(call_1716.astype('bool'), relay.reshape(var_1717.astype('bool'), relay.shape_of(call_1716))) # shape=(5, 8, 5)
func_1090_call = mod.get_global_var('func_1090')
func_1094_call = mutated_mod.get_global_var('func_1094')
var_1725 = relay.var("var_1725", dtype = "float64", shape = (60, 10))#candidate|1725|(60, 10)|var|float64
var_1726 = relay.var("var_1726", dtype = "float64", shape = (160,))#candidate|1726|(160,)|var|float64
call_1724 = relay.TupleGetItem(func_1090_call(relay.reshape(bop_1718.astype('bool'), [5, 8, 5]), relay.reshape(var_1725.astype('float64'), [600,]), relay.reshape(var_1726.astype('float64'), [160,]), ), 1)
call_1727 = relay.TupleGetItem(func_1094_call(relay.reshape(bop_1718.astype('bool'), [5, 8, 5]), relay.reshape(var_1725.astype('float64'), [600,]), relay.reshape(var_1726.astype('float64'), [160,]), ), 1)
output = relay.Tuple([bop_1718,call_1724,var_1725,var_1726,])
output2 = relay.Tuple([bop_1721,call_1727,var_1725,var_1726,])
func_1746 = relay.Function([var_1717,var_1725,var_1726,], output)
mod['func_1746'] = func_1746
mod = relay.transform.InferType()(mod)
var_1747 = relay.var("var_1747", dtype = "float32", shape = (5, 8, 5))#candidate|1747|(5, 8, 5)|var|float32
var_1748 = relay.var("var_1748", dtype = "float64", shape = (60, 10))#candidate|1748|(60, 10)|var|float64
var_1749 = relay.var("var_1749", dtype = "float64", shape = (160,))#candidate|1749|(160,)|var|float64
output = func_1746(var_1747,var_1748,var_1749,)
func_1750 = relay.Function([var_1747,var_1748,var_1749,], output)
mutated_mod['func_1750'] = func_1750
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_1759 = func_1713_call()
call_1760 = func_1713_call()
output = call_1759
output2 = call_1760
func_1761 = relay.Function([], output)
mod['func_1761'] = func_1761
mod = relay.transform.InferType()(mod)
mutated_mod['func_1761'] = func_1761
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1761_call = mutated_mod.get_global_var('func_1761')
call_1762 = func_1761_call()
output = call_1762
func_1763 = relay.Function([], output)
mutated_mod['func_1763'] = func_1763
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_1792 = func_1713_call()
call_1793 = func_1713_call()
func_1256_call = mod.get_global_var('func_1256')
func_1259_call = mutated_mod.get_global_var('func_1259')
const_1830 = relay.const([True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True], dtype = "bool")#candidate|1830|(600,)|const|bool
call_1829 = relay.TupleGetItem(func_1256_call(relay.reshape(call_1792.astype('float32'), [7, 12, 3]), relay.reshape(const_1830.astype('bool'), [600,]), ), 3)
call_1831 = relay.TupleGetItem(func_1259_call(relay.reshape(call_1792.astype('float32'), [7, 12, 3]), relay.reshape(const_1830.astype('bool'), [600,]), ), 3)
uop_1855 = relay.rsqrt(call_1792.astype('float32')) # shape=(7, 12, 3)
uop_1857 = relay.rsqrt(call_1793.astype('float32')) # shape=(7, 12, 3)
output = relay.Tuple([call_1829,const_1830,uop_1855,])
output2 = relay.Tuple([call_1831,const_1830,uop_1857,])
func_1859 = relay.Function([], output)
mod['func_1859'] = func_1859
mod = relay.transform.InferType()(mod)
output = func_1859()
func_1860 = relay.Function([], output)
mutated_mod['func_1860'] = func_1860
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1879 = relay.var("var_1879", dtype = "float64", shape = (7, 15, 10))#candidate|1879|(7, 15, 10)|var|float64
var_1880 = relay.var("var_1880", dtype = "float64", shape = (7, 15, 10))#candidate|1880|(7, 15, 10)|var|float64
bop_1881 = relay.subtract(var_1879.astype('float64'), relay.reshape(var_1880.astype('float64'), relay.shape_of(var_1879))) # shape=(7, 15, 10)
output = relay.Tuple([bop_1881,])
output2 = relay.Tuple([bop_1881,])
func_1888 = relay.Function([var_1879,var_1880,], output)
mod['func_1888'] = func_1888
mod = relay.transform.InferType()(mod)
var_1889 = relay.var("var_1889", dtype = "float64", shape = (7, 15, 10))#candidate|1889|(7, 15, 10)|var|float64
var_1890 = relay.var("var_1890", dtype = "float64", shape = (7, 15, 10))#candidate|1890|(7, 15, 10)|var|float64
output = func_1888(var_1889,var_1890,)
func_1891 = relay.Function([var_1889,var_1890,], output)
mutated_mod['func_1891'] = func_1891
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_1909 = func_140_call()
call_1910 = func_140_call()
output = relay.Tuple([call_1909,])
output2 = relay.Tuple([call_1910,])
func_1913 = relay.Function([], output)
mod['func_1913'] = func_1913
mod = relay.transform.InferType()(mod)
output = func_1913()
func_1914 = relay.Function([], output)
mutated_mod['func_1914'] = func_1914
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1922 = relay.var("var_1922", dtype = "float32", shape = (2, 1, 1))#candidate|1922|(2, 1, 1)|var|float32
uop_1923 = relay.acos(var_1922.astype('float32')) # shape=(2, 1, 1)
func_317_call = mod.get_global_var('func_317')
func_318_call = mutated_mod.get_global_var('func_318')
call_1928 = relay.TupleGetItem(func_317_call(), 0)
call_1929 = relay.TupleGetItem(func_318_call(), 0)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_1941 = relay.TupleGetItem(func_1585_call(), 0)
call_1942 = relay.TupleGetItem(func_1586_call(), 0)
output = relay.Tuple([uop_1923,call_1928,call_1941,])
output2 = relay.Tuple([uop_1923,call_1929,call_1942,])
func_1945 = relay.Function([var_1922,], output)
mod['func_1945'] = func_1945
mod = relay.transform.InferType()(mod)
var_1946 = relay.var("var_1946", dtype = "float32", shape = (2, 1, 1))#candidate|1946|(2, 1, 1)|var|float32
output = func_1945(var_1946)
func_1947 = relay.Function([var_1946], output)
mutated_mod['func_1947'] = func_1947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_1964 = relay.TupleGetItem(func_892_call(), 0)
call_1965 = relay.TupleGetItem(func_894_call(), 0)
output = relay.Tuple([call_1964,])
output2 = relay.Tuple([call_1965,])
func_1968 = relay.Function([], output)
mod['func_1968'] = func_1968
mod = relay.transform.InferType()(mod)
output = func_1968()
func_1969 = relay.Function([], output)
mutated_mod['func_1969'] = func_1969
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1996 = relay.var("var_1996", dtype = "float64", shape = (6, 2, 14))#candidate|1996|(6, 2, 14)|var|float64
uop_1997 = relay.asinh(var_1996.astype('float64')) # shape=(6, 2, 14)
output = uop_1997
output2 = uop_1997
func_2004 = relay.Function([var_1996,], output)
mod['func_2004'] = func_2004
mod = relay.transform.InferType()(mod)
mutated_mod['func_2004'] = func_2004
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2005 = relay.var("var_2005", dtype = "float64", shape = (6, 2, 14))#candidate|2005|(6, 2, 14)|var|float64
func_2004_call = mutated_mod.get_global_var('func_2004')
call_2006 = func_2004_call(var_2005)
output = call_2006
func_2007 = relay.Function([var_2005], output)
mutated_mod['func_2007'] = func_2007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_2058 = func_140_call()
call_2059 = func_140_call()
uop_2062 = relay.atanh(call_2058.astype('float64')) # shape=(7, 12, 3)
uop_2064 = relay.atanh(call_2059.astype('float64')) # shape=(7, 12, 3)
func_1368_call = mod.get_global_var('func_1368')
func_1372_call = mutated_mod.get_global_var('func_1372')
var_2083 = relay.var("var_2083", dtype = "uint64", shape = (70,))#candidate|2083|(70,)|var|uint64
const_2084 = relay.const([7,-10,-1,-6,-6,4,5,3,-2,-2,10,-7,4,8,-4,-10,6,8,5,-8,7,9,3,-4,10,-1,2,5,-8,9,-5,-4,8,-8,8,-4,-2,-6,8,10,-8,10,-1,-5,9,2,2,7,-8,3,-5,-2,3,-1,-10,10,-4,-7,9,-5,-7,-4,-2,6,-10,-7,-9,1,7,-2,-5,-6,-7,5,6,-4,-6,1,-3,-10,-8,-7,8,-9,-2,-5,-5,7,3,-8,9,-1,2,4,8,10,5,-3,7,-9,2,9,4,-9,-5,3,9,-10,-3,-8,-10,-9,8,-9,3,-6,-3,-2,9,3,8,-10,9,10,4,-7,8,3,-5,1,-2,2,-1,2,6,6,1,-1,-5,6,-10,-8,-6,-4,-3,8,-1,-1,-5,-6,8,2,-7,-2,5,4,1,-4,2,10,3,1,10,-10,-4,-7,6,2,4,8,5,3,-3,-5,-4,-2,-4,-3,-4,-1,-7,1,-8,9,-8,-1,8,-9,10,-7,8,1,2,-6,5,3,6,5,6,5,-10,8,-10,-8,10,5,5,-10,10,-3,3,-8,9,-2,9,8,-4,7,3,6,-3,3,-9,-4,9,5,-3,-1,-6,7,2,5,2,-2,9,10,9,9,6,-6,-3,7,5,8,2,-9,1,-10,5,-9,10,-6,3,-6,9,2,-4,-7,8,2,-9,6,-4,2,-10,6,10,-8,7,2,7,-7,-6,10,10,-5,3,-10,10,8,4,-10,8,-9,-2,-1,6,10,4,5,-5,2,4,7,-3,3,-1,-4,-3,-1,4,5,-2,2,-6,10,9,-9,6,-6,1,8,4,-10,-5,-3,-5,-10,3,4,3,1,8,5,-8,-4,-4,-10,6,-7,-10,-1,9,3,7,1,1,-2,-4,4,-9,10,5,-4,-9,-2,-1,6,-6,2,-6,3,-5,-10,-1,-2,5,6,1,2,10,10,9,-3,-5,-10,6,-10,-8,1,-5,10,2,-3,-5,-4,9,6,10,-4,-4,7,10,2,-8,-5,-3,-6,-2,-1,-3,2,1,-9,9,7,10,3,1,-5,-6,3,-7,8,9,-6,4,-2,6,-5,5,-8,6,-2,-7,-8,-9,-4,-2,-8,2,3,2,1,7,4,-10,8,2,-4,10,1,5,-8,10,9,-9,-9,8,-10,-8,10,5,-5,-1,-7,3,8,7,-6,-1,-8,7,-3,7,-3,-6,-6,-2,-9,2,-4,5,-2,10,-9,10,1,-5,6,6,1,-2,-4,-8,9,-10,-4,5,-9,-3,-5,-8,-2,-1,-8,-6,10,6,6,8,5,-6,-4,6,-7,-4,1,7,6,2,4,1,-9,7,-2,-1,-2,7,-10,-9,-3,9,4,9,-3,-4,-2,10,-3,-7,3,-1,4,3,4,-3,7,-10,8,-3,-2,-8,1,6,-9,6,-10,7,8,10,-3,8,2,1,9,1,-8,-6,10,-10,4,1,6,9,-9,5,-1,10,-10,5,4,9,-6,-2,8,5,9,-7,3,6,-5,4,3,-1,-6,10,-2,-3,-5,-5,6,-4,-6,-9,-7,1,-7,7,-10,10,-5,-5,9,-7,10,7,2,10,-2,-6,-5,10,3,-9,-4,-8,-7,-7,-8,3,4,5,-1,5,3,2,-8,7,8,6,-5,2,-5,10,-1,3,-5,5,-3,-9,10,4,4,3,9,5,-4,-8,5,-4,3,6,-6,-3,-9,-5,4,1,5,1,5,-10,4,-8,7,9,-9,-9,-6,-4,-5,-8,-2,-8,-4,1,-6,6,8,-10,8,-7,4,4,6,-7,-8,-3,-3,-7,1,-4,-10,8,-6,5,8,1,-5,4,-4,6,5,2,10,4,-9,8,-3,-7,5,-3,1,-6,10,2,2,-5,5,6,-7,5,-3,5,-9,2,-4,6,-10,4,4,-1,-1,-3,4,-4,-2,-8,3,-10,8,6,-9,-7,-7,-9,8,9,-6,8,4,2,-10,-2,6,7,5,5,-8,-3,7,9,-3,5,-1,-1,4,4,4,8,7,5,1,-8,-4,7,4,-7,2,-6,4,1,-1,-3,-10,-6,-8,-1,-10,-9,9,-6,-10,9,4,9,3,5,3,-8,10,-2,-4,9,-1,10,4,4,-10,10,-8,-1,8,-4,5,4,9,-6,-8,-7,-7,10,5,-7,-6,-7,5,5,4,-4,5,-6,5,-7,9,3,-3,9,-6,-2,-5,-5,7,-6,3,-3,10,-3,1,10,-4,-8,-6,6,3,-4,-5,1,-1,6,-8,2,-8,5,-5,-1,-7,-7,-6,-7,-10,-1,2,-8,8,-8,-5,-4,-7,2,3,-4,-2,7,5,9,7,-10,-2,3,-4,-8,-3,-2,3,-6,-7,9,3,-9,2,-4,10,7,2,-3,2,9,-6,-10,5,7,6,5,-4,10,4,4,-5,5,-4,8,-2,3,-8,-10,9,-8,3,-6,8,4,7,-6,-2,4,1,-2,-8,4,-8,-8,-2,-1,8,4,5,-7,-8,7,-4,-6,2,2,2,4,10,4,8,7,-5,3,-10,4,-3,-8,3,-4,1,-5,-1,1,-2,-3,2,-10,2,-9,-6,-8,4,-8,9,2,-9,3,7,-1,-8,-1,4,-9,5,-7,-1,-9,-5,3,-8,-4,-3,7,10,9,2,-8,1,5,5,6,10,-2,2,-9,-4,1,9,-7,6,4,-4,-8,-10,-1,-6,-3,-4,-9,2,-1,10,-4,-10,5,5,-5,4,5,8,-10,-5,-9,10,7,6,8,10,5,3,5,3,-10,-5,2,-5,8,-7,-10,6,9,-5,-10,-3,2,-8,5,-7,8,-1,7,-7,5,1,1,3,1,-10,-1,-7,8,-2,-7,-9,-2,7,8,4,8,-9,5,10,7,1,5,-5,-5,8,-5,-7,9,8,-8,1,2,-4,1,6,-5,8,-5,3,-9,2,-9,-2,-2,6,-5,-5,-6,-5,-4,4,8,-9,4,-2,2,6], dtype = "uint64")#candidate|2084|(1120,)|const|uint64
call_2082 = relay.TupleGetItem(func_1368_call(relay.reshape(var_2083.astype('uint64'), [70,]), relay.reshape(const_2084.astype('uint64'), [1120,]), ), 0)
call_2085 = relay.TupleGetItem(func_1372_call(relay.reshape(var_2083.astype('uint64'), [70,]), relay.reshape(const_2084.astype('uint64'), [1120,]), ), 0)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_2092 = func_301_call()
call_2093 = func_301_call()
func_1149_call = mod.get_global_var('func_1149')
func_1151_call = mutated_mod.get_global_var('func_1151')
const_2099 = relay.const([-4.240111,-1.784409,-6.515564,-6.177236,8.570829,2.310415,1.890160,8.033979,3.364856,4.402596,-9.671830,8.986566,6.873183,6.165594,4.777642,1.846144,-0.285780,-9.184987,4.180551,0.554812,7.397417,-3.536102,0.367236,8.155330,-9.474231,-0.943940,-6.562351,-7.738117,-0.658137,-2.200817,-7.977616,6.594599,8.282482,8.893710,-4.498537,7.440376,4.186937,8.158334,-4.622910,-2.442398,1.348746,7.836952,-0.336428,-6.021823,1.711270,-9.777061,-7.456795,-8.891186,4.945285,-9.789231,8.391346,9.199223,9.731875,9.107200,-6.225334,-8.285081,-7.397866,2.174997,0.962119,8.285304,-6.744386,6.872385,7.804242,5.761278,4.317408,-7.598951,7.100318,-9.190300,-6.628917,-9.399934,8.544069,3.478667,-8.603360,-5.028656,-1.077531,8.219552,-7.591626,4.439128,-3.056437,-9.223139,-5.117887,-5.445433,5.585843,5.832511,-2.701024,-3.227905,-5.797210,6.403853,-6.527668,5.222829,2.938344,0.801930,2.054072,7.754285,9.803969,7.662655,7.876927,-1.907295,-9.083699,-9.571147,9.393784,-2.932960,-1.798643,6.385416,-8.245166,8.952084,3.370762,7.608602,6.827473,-8.165003,-6.036706,4.686941,-3.643510,-0.508893,8.403752,9.583503,0.702296,-4.536535,-0.126806,-4.687735,-0.546701,-4.926400,9.670857,-5.670191,5.028119,6.513694,4.758736,1.911243,-3.969411,-3.154738,-8.598133,5.827032,-5.163295,-9.237456,1.164759,5.549328,-8.309282,9.843937,1.054592,0.462093,-5.169716,-1.672365,3.933442,7.095023,-7.345699,7.080669,-5.743499,-3.910067,-3.374069,9.926820,-4.857438,-5.893959,-4.347135,-1.877985,6.100355,-2.594861,-0.546385,4.130401,-3.398652,-4.029229,2.165338,-1.856700,-0.381337,-3.342577,0.084026,-2.259610,-4.439146,-8.648593,-7.553903,-0.537677,-4.212539,0.903077,3.021247,-6.220660,-5.386138,-6.221502,-5.537469,4.612230,-4.593072,-5.276136,3.234903,6.567168,9.648477,-2.912125,-7.967802,7.624164,-0.378409,4.819178,-7.480671,7.804205,-6.186686,-4.253905,-4.311631,9.430431,6.893876,-0.595322,-4.653074,-3.006977,-7.448933,4.627137,9.640753,0.226437,-4.073656,3.817242,1.496674,8.756039,8.647644,-0.882816,9.724697,-7.318015,7.046965,9.211427,-1.655249,4.736179,-9.542422,7.998868,-1.534889,9.012366,0.519580,5.637775,-4.097905,8.026847,-6.917345,4.127109,0.950917,-8.295361,7.602196,4.762012,8.521136,-7.273435,8.772801,2.448536,-0.433533,-7.382405,2.381476,-7.010074,-6.987659,8.283749,-1.130996,-2.735016,-7.144087,-4.149814,-9.838043,9.173462,4.614012,-0.449654,6.623799,-9.630436,-2.826119,-5.576471,-7.263464,2.061712,-2.605139,3.910864,-0.269461,-3.555684,-9.515094,-9.736565,-5.292504,-5.706017,3.112435,7.063643,-5.432075,-0.643982,-4.360305,-7.913678,-9.376119,-1.549262,8.310403,4.670505,0.906689,-2.148637,-5.311422,8.727532,1.081947,-2.409665,-6.321975,4.775103,1.309176,4.742763,-3.029487,-9.593743,-3.414716,6.222007,-5.830839,0.158685,9.219593,4.344020,-4.361522,-8.391815,-4.609375,-9.988273,-9.767246,3.661248,4.844990,-4.889377,5.910706,-3.703731,2.993114,4.296240,-9.107218,3.253978,-6.226152,-3.264785,2.702070,-3.307604,2.958151,-7.642044,1.575450,-2.996437,6.530367,-4.564768,4.453185,-1.920773,2.419823,3.416524,-2.943411,8.080257,0.203803,7.353689,-0.011023,1.935119,-7.404310,-9.080056,3.220441,-3.857976,6.562712,8.839057,-3.932132,9.882024,5.337829,5.906043,2.313771,7.877944,-3.482377,-8.970126,-4.513523,4.358367,4.881811,-9.334407,-9.572278,8.127009,-3.452909,-2.366202,-5.766590,-5.760066,-8.512743,7.717796,-1.451961,6.703513,0.652738,2.086455,0.194037,-7.202130,-6.155225,2.717553,-7.162004,-4.721749,-5.917408,8.102763,-6.373908,-5.390008,6.440453,7.106785,-4.633397,1.602379,-2.552437,-1.694013,5.008324,-9.118081,2.845752,-5.760937,2.298638,-6.651725,8.892514,-2.189572,0.722388,6.015248,6.694743,-4.732954,1.325212,1.106324,9.739921,7.092809,7.283809,-0.420611,9.333385,-0.953283,-1.682112,-2.074421,-5.906132,0.332649,-1.073708,-0.907982,1.425744,3.731426,-1.280022,-2.341695,-9.809079,-2.117748,-1.911210,7.722543,4.815319,-2.473910,-5.088890,-4.551469,6.413113,4.032239,-7.486822,8.297719,-0.759560,-6.866975,-3.072594,-4.846663,-7.966612,-2.935256,-4.703176,-3.895850,3.648982,8.469743,-8.168594,-1.452076,9.751973,7.500953,2.576290,-6.314492,2.123840,8.891430,2.409846,9.410961,-2.448929,-3.183148,8.240355,8.725991,2.115543,-3.194109,-8.750502,-0.234062,-3.838206,3.830913,-2.392577,-9.486245,-1.987831,4.126390,6.625902,2.407944,-7.455909,-3.798565,-0.455181,-7.943934,-6.139300,9.274027,6.258317,3.079832,9.175201,-6.758198,-4.621492,-8.336850,-2.013704,-8.610693,-5.197467,9.845931,-7.207999,-9.210054,3.553979,-3.833984,6.326571,-7.822895,4.975653,4.557357,-9.450539,0.351685,-4.635567,8.918581,6.433818,-1.520215,7.841910,3.438470,-9.029846,8.871816,-9.717323,2.810444,9.675802,3.002150,3.699334,-6.671472,-3.841598,-3.441647,4.052719,0.373304,-1.360204,-5.505002,7.385531,2.150256,9.007359,-0.357947,-6.443023,8.243493,5.961886,0.647934,0.318700,4.719905,6.144745,-8.093636,9.273441,7.393918,-4.009260,-6.177471,7.723403,4.485914,-0.800151,6.085625,0.845342,-3.908278,6.292456,-3.676182,7.142940,-2.061682,1.995829,4.581980,-5.623923,-8.612046,-6.562212,-2.608622,-3.714858,-9.951453,0.581293,-9.784608,5.970187,-3.558012,-4.581450,5.486315,-3.369362,-8.836399,6.093691,-5.241535,-7.623820,-3.634706,1.875348,5.497785,-3.679318,-3.950712,5.312303,-5.443387,-4.926313,6.808131,0.498174,-3.802402,-6.457966,-2.776081,1.918191,1.244487,1.382700,-0.594146,-9.043121,4.007494,-1.350268,7.601994,-2.364466,-9.512362,-4.362571,9.005347,-7.772237,3.563340,-7.768485,-7.594430,-5.816266,5.926569,8.638300,5.464225,7.348410,-2.535603,-5.632743,9.056131,-0.786647,9.676190,9.215787,-5.410713,1.181606,-0.490554,7.387569,2.908929,-6.949317,-6.623061,-5.085822,-0.111097,-7.152984,3.608956,-9.967824,1.077891,-2.209997,5.455796,1.524858,-8.886780,8.116286,-0.479244,2.832771,-7.172143,-4.600428,-0.368502], dtype = "float64")#candidate|2099|(600,)|const|float64
call_2098 = relay.TupleGetItem(func_1149_call(relay.reshape(const_2099.astype('float64'), [600,])), 2)
call_2100 = relay.TupleGetItem(func_1151_call(relay.reshape(const_2099.astype('float64'), [600,])), 2)
output = relay.Tuple([uop_2062,call_2082,var_2083,const_2084,call_2092,call_2098,const_2099,])
output2 = relay.Tuple([uop_2064,call_2085,var_2083,const_2084,call_2093,call_2100,const_2099,])
func_2116 = relay.Function([var_2083,], output)
mod['func_2116'] = func_2116
mod = relay.transform.InferType()(mod)
mutated_mod['func_2116'] = func_2116
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2117 = relay.var("var_2117", dtype = "uint64", shape = (70,))#candidate|2117|(70,)|var|uint64
func_2116_call = mutated_mod.get_global_var('func_2116')
call_2118 = func_2116_call(var_2117)
output = call_2118
func_2119 = relay.Function([var_2117], output)
mutated_mod['func_2119'] = func_2119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1859_call = mod.get_global_var('func_1859')
func_1860_call = mutated_mod.get_global_var('func_1860')
call_2153 = relay.TupleGetItem(func_1859_call(), 1)
call_2154 = relay.TupleGetItem(func_1860_call(), 1)
output = call_2153
output2 = call_2154
func_2155 = relay.Function([], output)
mod['func_2155'] = func_2155
mod = relay.transform.InferType()(mod)
mutated_mod['func_2155'] = func_2155
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2155_call = mutated_mod.get_global_var('func_2155')
call_2156 = func_2155_call()
output = call_2156
func_2157 = relay.Function([], output)
mutated_mod['func_2157'] = func_2157
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mod.get_global_var('func_307')
func_308_call = mutated_mod.get_global_var('func_308')
call_2216 = relay.TupleGetItem(func_307_call(), 0)
call_2217 = relay.TupleGetItem(func_308_call(), 0)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_2223 = relay.TupleGetItem(func_544_call(), 1)
call_2224 = relay.TupleGetItem(func_546_call(), 1)
output = relay.Tuple([call_2216,call_2223,])
output2 = relay.Tuple([call_2217,call_2224,])
func_2225 = relay.Function([], output)
mod['func_2225'] = func_2225
mod = relay.transform.InferType()(mod)
mutated_mod['func_2225'] = func_2225
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2225_call = mutated_mod.get_global_var('func_2225')
call_2226 = func_2225_call()
output = call_2226
func_2227 = relay.Function([], output)
mutated_mod['func_2227'] = func_2227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_2273 = relay.TupleGetItem(func_892_call(), 0)
call_2274 = relay.TupleGetItem(func_894_call(), 0)
const_2302 = relay.const([[[1.653941,-0.649539,8.844532],[-3.022474,-8.014405,1.086511],[4.748161,8.048313,5.347456],[6.663925,-8.155597,-5.600872],[-9.394442,-3.373815,-3.491716],[4.472739,-0.608179,9.533393],[-5.872094,5.162621,-2.778956],[-9.200001,-8.257725,-1.994563],[7.398893,3.561116,5.035812],[-4.186580,1.625896,-2.779708],[-2.604166,3.732958,9.125018],[-7.158403,9.414723,9.369691]],[[-3.050336,7.514527,5.674825],[0.395139,1.274186,-2.381629],[-2.670752,3.614274,9.071873],[5.677070,4.468272,-0.766160],[-2.286868,-3.405921,-8.313898],[6.513840,9.352012,4.703979],[-8.017814,1.769017,-9.799987],[-2.863798,-6.350531,-9.119598],[1.890426,6.791114,-3.774512],[-5.330067,4.482051,-0.462276],[-5.718109,-3.663409,5.163772],[-5.109688,-5.399103,4.247381]],[[0.522102,-8.052152,1.446518],[6.103218,-8.138402,3.915256],[-6.608887,2.902422,7.419700],[1.036864,-9.599999,9.015684],[-8.453666,8.712580,-3.915262],[2.163084,4.891374,8.545890],[-6.589492,9.690679,-9.487692],[2.182896,-6.858882,-8.669441],[9.633550,9.703526,7.865247],[8.879307,-7.149634,5.759742],[7.218880,-9.194382,-6.664542],[-4.369334,-4.308727,0.898743]],[[-1.489207,5.569518,-1.495579],[-2.639021,-6.137470,9.093550],[9.780028,6.873555,0.101909],[-9.524367,0.630081,3.627705],[-1.301846,-9.561811,-3.800519],[3.980453,-2.459192,4.451668],[-2.486921,-3.395894,-6.501765],[4.266061,-6.403512,5.506832],[7.316235,5.902259,5.376206],[-5.295001,-8.771391,-5.647332],[-1.240251,6.680796,2.506069],[7.749579,8.994059,-9.838117]],[[7.812146,5.142546,-2.315977],[-0.214331,-2.206093,-4.902016],[-0.550099,6.577274,2.450984],[0.935406,-1.094231,-7.602100],[-4.534750,7.545911,-3.962825],[8.455356,1.323850,6.089944],[8.007966,5.597940,3.854236],[0.087671,-4.687024,-2.222493],[3.738810,-9.429195,3.983095],[9.515637,-5.138452,0.782258],[-2.514343,3.287442,9.569679],[2.683129,-6.847881,-8.648146]],[[-8.926080,5.766755,-3.671231],[-9.462492,-8.407129,0.523954],[4.413021,9.014644,-0.785564],[-7.055153,1.779135,-0.442207],[0.162104,1.692670,7.020023],[1.003301,-1.534803,-1.534157],[6.706619,-6.604968,6.831663],[1.577687,-6.851500,0.259535],[0.775144,3.172048,9.107913],[4.943802,8.374752,-5.073013],[-0.261466,-0.269575,-3.784680],[8.253330,5.199871,9.666932]],[[-7.408721,0.941606,0.951430],[0.937218,0.578619,5.795524],[-3.318288,9.593321,-9.356777],[-1.268777,5.674650,8.406823],[-7.701613,2.734541,-5.501690],[-4.449994,2.720658,1.841906],[-4.191148,5.031258,1.510859],[-6.273422,8.121532,8.147931],[1.488265,-4.922183,-0.045836],[7.324491,4.004652,-9.009769],[4.198974,-4.261057,-4.627693],[-0.929848,-3.761620,-9.797436]]], dtype = "float32")#candidate|2302|(7, 12, 3)|const|float32
bop_2303 = relay.bitwise_xor(call_2273.astype('uint64'), relay.reshape(const_2302.astype('uint64'), relay.shape_of(call_2273))) # shape=(7, 12, 3)
bop_2306 = relay.bitwise_xor(call_2274.astype('uint64'), relay.reshape(const_2302.astype('uint64'), relay.shape_of(call_2274))) # shape=(7, 12, 3)
func_2155_call = mod.get_global_var('func_2155')
func_2157_call = mutated_mod.get_global_var('func_2157')
call_2309 = func_2155_call()
call_2310 = func_2155_call()
output = relay.Tuple([bop_2303,call_2309,])
output2 = relay.Tuple([bop_2306,call_2310,])
func_2313 = relay.Function([], output)
mod['func_2313'] = func_2313
mod = relay.transform.InferType()(mod)
output = func_2313()
func_2314 = relay.Function([], output)
mutated_mod['func_2314'] = func_2314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_2328 = func_301_call()
call_2329 = func_301_call()
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_2339 = relay.TupleGetItem(func_544_call(), 0)
call_2340 = relay.TupleGetItem(func_546_call(), 0)
func_1495_call = mod.get_global_var('func_1495')
func_1498_call = mutated_mod.get_global_var('func_1498')
var_2342 = relay.var("var_2342", dtype = "float64", shape = (1320,))#candidate|2342|(1320,)|var|float64
call_2341 = func_1495_call(relay.reshape(var_2342.astype('float64'), [15, 8, 11]))
call_2343 = func_1495_call(relay.reshape(var_2342.astype('float64'), [15, 8, 11]))
func_804_call = mod.get_global_var('func_804')
func_807_call = mutated_mod.get_global_var('func_807')
call_2345 = relay.TupleGetItem(func_804_call(relay.reshape(call_2339.astype('float32'), [5, 8, 5])), 0)
call_2346 = relay.TupleGetItem(func_807_call(relay.reshape(call_2339.astype('float32'), [5, 8, 5])), 0)
func_1761_call = mod.get_global_var('func_1761')
func_1763_call = mutated_mod.get_global_var('func_1763')
call_2347 = func_1761_call()
call_2348 = func_1761_call()
output = relay.Tuple([call_2328,call_2339,call_2341,var_2342,call_2345,call_2347,])
output2 = relay.Tuple([call_2329,call_2340,call_2343,var_2342,call_2346,call_2348,])
func_2354 = relay.Function([var_2342,], output)
mod['func_2354'] = func_2354
mod = relay.transform.InferType()(mod)
mutated_mod['func_2354'] = func_2354
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2355 = relay.var("var_2355", dtype = "float64", shape = (1320,))#candidate|2355|(1320,)|var|float64
func_2354_call = mutated_mod.get_global_var('func_2354')
call_2356 = func_2354_call(var_2355)
output = call_2356
func_2357 = relay.Function([var_2355], output)
mutated_mod['func_2357'] = func_2357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2313_call = mod.get_global_var('func_2313')
func_2314_call = mutated_mod.get_global_var('func_2314')
call_2367 = relay.TupleGetItem(func_2313_call(), 1)
call_2368 = relay.TupleGetItem(func_2314_call(), 1)
var_2369 = relay.var("var_2369", dtype = "bool", shape = (600,))#candidate|2369|(600,)|var|bool
bop_2370 = relay.bitwise_and(call_2367.astype('int64'), relay.reshape(var_2369.astype('int64'), relay.shape_of(call_2367))) # shape=(600,)
bop_2373 = relay.bitwise_and(call_2368.astype('int64'), relay.reshape(var_2369.astype('int64'), relay.shape_of(call_2368))) # shape=(600,)
output = relay.Tuple([bop_2370,])
output2 = relay.Tuple([bop_2373,])
func_2393 = relay.Function([var_2369,], output)
mod['func_2393'] = func_2393
mod = relay.transform.InferType()(mod)
mutated_mod['func_2393'] = func_2393
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2394 = relay.var("var_2394", dtype = "bool", shape = (600,))#candidate|2394|(600,)|var|bool
func_2393_call = mutated_mod.get_global_var('func_2393')
call_2395 = func_2393_call(var_2394)
output = call_2395
func_2396 = relay.Function([var_2394], output)
mutated_mod['func_2396'] = func_2396
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1761_call = mod.get_global_var('func_1761')
func_1763_call = mutated_mod.get_global_var('func_1763')
call_2400 = func_1761_call()
call_2401 = func_1761_call()
output = call_2400
output2 = call_2401
func_2416 = relay.Function([], output)
mod['func_2416'] = func_2416
mod = relay.transform.InferType()(mod)
mutated_mod['func_2416'] = func_2416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2416_call = mutated_mod.get_global_var('func_2416')
call_2417 = func_2416_call()
output = call_2417
func_2418 = relay.Function([], output)
mutated_mod['func_2418'] = func_2418
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_2486 = relay.TupleGetItem(func_892_call(), 0)
call_2487 = relay.TupleGetItem(func_894_call(), 0)
output = call_2486
output2 = call_2487
func_2506 = relay.Function([], output)
mod['func_2506'] = func_2506
mod = relay.transform.InferType()(mod)
output = func_2506()
func_2507 = relay.Function([], output)
mutated_mod['func_2507'] = func_2507
mutated_mod = relay.transform.InferType()(mutated_mod)
func_764_call = mod.get_global_var('func_764')
func_766_call = mutated_mod.get_global_var('func_766')
call_2508 = relay.TupleGetItem(func_764_call(), 1)
call_2509 = relay.TupleGetItem(func_766_call(), 1)
output = relay.Tuple([call_2508,])
output2 = relay.Tuple([call_2509,])
func_2510 = relay.Function([], output)
mod['func_2510'] = func_2510
mod = relay.transform.InferType()(mod)
output = func_2510()
func_2511 = relay.Function([], output)
mutated_mod['func_2511'] = func_2511
mutated_mod = relay.transform.InferType()(mutated_mod)
func_317_call = mod.get_global_var('func_317')
func_318_call = mutated_mod.get_global_var('func_318')
call_2528 = relay.TupleGetItem(func_317_call(), 0)
call_2529 = relay.TupleGetItem(func_318_call(), 0)
var_2540 = relay.var("var_2540", dtype = "float32", shape = (7, 12, 3))#candidate|2540|(7, 12, 3)|var|float32
bop_2541 = relay.floor_divide(call_2528.astype('float64'), relay.reshape(var_2540.astype('float64'), relay.shape_of(call_2528))) # shape=(7, 12, 3)
bop_2544 = relay.floor_divide(call_2529.astype('float64'), relay.reshape(var_2540.astype('float64'), relay.shape_of(call_2529))) # shape=(7, 12, 3)
func_2155_call = mod.get_global_var('func_2155')
func_2157_call = mutated_mod.get_global_var('func_2157')
call_2555 = func_2155_call()
call_2556 = func_2155_call()
const_2561 = relay.const([False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True], dtype = "bool")#candidate|2561|(600,)|const|bool
bop_2562 = relay.power(call_2555.astype('float32'), relay.reshape(const_2561.astype('float32'), relay.shape_of(call_2555))) # shape=(600,)
bop_2565 = relay.power(call_2556.astype('float32'), relay.reshape(const_2561.astype('float32'), relay.shape_of(call_2556))) # shape=(600,)
output = relay.Tuple([bop_2541,bop_2562,])
output2 = relay.Tuple([bop_2544,bop_2565,])
func_2568 = relay.Function([var_2540,], output)
mod['func_2568'] = func_2568
mod = relay.transform.InferType()(mod)
mutated_mod['func_2568'] = func_2568
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2569 = relay.var("var_2569", dtype = "float32", shape = (7, 12, 3))#candidate|2569|(7, 12, 3)|var|float32
func_2568_call = mutated_mod.get_global_var('func_2568')
call_2570 = func_2568_call(var_2569)
output = call_2570
func_2571 = relay.Function([var_2569], output)
mutated_mod['func_2571'] = func_2571
mutated_mod = relay.transform.InferType()(mutated_mod)
func_764_call = mod.get_global_var('func_764')
func_766_call = mutated_mod.get_global_var('func_766')
call_2592 = relay.TupleGetItem(func_764_call(), 1)
call_2593 = relay.TupleGetItem(func_766_call(), 1)
output = relay.Tuple([call_2592,])
output2 = relay.Tuple([call_2593,])
func_2594 = relay.Function([], output)
mod['func_2594'] = func_2594
mod = relay.transform.InferType()(mod)
output = func_2594()
func_2595 = relay.Function([], output)
mutated_mod['func_2595'] = func_2595
mutated_mod = relay.transform.InferType()(mutated_mod)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_2607 = func_301_call()
call_2608 = func_301_call()
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_2617 = func_1713_call()
call_2618 = func_1713_call()
func_1888_call = mod.get_global_var('func_1888')
func_1891_call = mutated_mod.get_global_var('func_1891')
const_2627 = relay.const([-9.378902,-4.818039,8.328643,-7.221732,7.672283,-6.923246,-8.358082,-8.521154,2.219518,-1.033249,-3.896221,5.748462,-5.343165,8.108546,9.565615,-0.101902,-4.837151,-4.879900,1.986345,3.500796,-2.937904,7.637427,3.421666,5.069983,4.848219,-6.516640,3.239172,8.775228,-0.196360,4.978951,-3.074331,8.338458,-3.594744,9.802456,-6.732565,-1.029452,-8.414691,7.567675,3.488733,-2.169007,-0.853236,-2.860511,0.779233,-6.182838,8.009963,9.569432,9.502838,-4.585030,9.634469,0.989535,8.984105,-8.350187,-2.047717,5.817739,-4.552434,-0.924145,-2.550230,6.686348,-5.115554,-1.276055,0.484271,-0.519361,-1.774401,7.008553,-8.962204,-4.707802,-3.492724,0.495250,-4.908588,9.140030,1.468827,-3.623213,-9.492150,9.874488,5.089686,-8.126943,5.300933,0.593786,-4.014615,8.946589,4.446790,-8.189925,6.116867,-7.598519,-0.661472,-5.568184,-5.318762,4.962154,-3.409988,1.126008,-2.478361,3.021512,-4.528457,-9.920856,1.172801,5.770138,5.556542,-5.846070,-6.266562,-6.226579,-8.332054,-2.750842,8.122679,-2.328009,-8.872287,3.989100,9.776393,-3.687608,8.743901,-4.369075,0.723785,-5.600780,3.576758,3.183472,0.902924,-2.767380,-4.061174,-4.225039,8.560603,-8.719056,2.992514,-1.398031,-8.301874,-8.234178,5.003965,-4.229543,7.625754,4.504236,3.019119,-2.665589,8.391543,3.807007,1.135066,5.696961,-3.261497,-7.551516,-2.544295,-2.597784,1.015019,-1.674690,-6.936483,4.597641,8.498668,-8.383288,2.886465,-2.729138,-6.322028,7.263158,2.719765,-4.854534,-6.826414,4.450054,9.610379,3.031701,2.149644,-3.882070,-8.739650,4.565275,-5.615638,-3.665618,-9.278274,-6.546762,-4.054173,-7.147447,1.360105,7.468034,6.929719,-1.166656,6.759608,7.541940,7.806241,-1.931851,-0.784524,-7.488230,0.713615,-9.020921,4.866099,-7.789535,-3.171048,9.149612,9.635054,0.387963,-6.344975,-5.788490,3.160255,-7.673768,1.918390,-9.715578,-2.731908,-0.701788,-8.971297,0.860534,-0.186957,3.775543,-7.309166,-3.353249,-5.487868,-2.347740,3.228689,-1.076308,-0.567577,1.801007,8.076201,6.675197,-2.421644,5.357215,0.137863,-6.932802,4.788287,-0.951447,6.748798,4.546617,0.698211,-9.093113,-6.626077,6.056038,8.341038,-2.595182,7.401249,-5.930103,-6.279041,-3.365079,-0.465622,2.331955,-0.170323,1.947154,-3.117946,6.509385,-3.355355,-7.000748,-8.851494,2.667228,-8.853104,-4.541650,-4.458910,-3.382339,8.050881,-3.045684,2.212341,3.628665,9.752568,0.709583,6.839253,1.244839,-2.397579,5.430555,-7.599600,-5.969550,-5.527792,-0.813055,9.254430,8.542757,5.029802,-9.886327,7.911022,-1.121951,-8.151884,-8.392203,0.890178,3.765491,9.396347,-2.048758,-4.162678,9.639089,-7.057416,7.300743,-4.053005,-5.841719,-2.543204,-4.207707,-2.258773,-7.705701,1.661370,-1.587337,3.043957,-0.155352,-2.850037,-3.670695,-3.160366,-4.159013,0.824846,-7.264333,-2.502098,7.475572,-7.526169,2.681754,-8.057006,3.946178,-6.039832,-4.032405,-1.833037,1.580677,-3.433333,2.155904,3.805806,2.156481,2.394429,-3.698559,-7.037630,-3.187870,1.497416,5.511258,4.349643,2.397308,-1.008469,6.896721,0.902527,-4.882271,-5.569648,-2.453585,1.765441,-8.293116,7.530390,-5.010697,-8.988947,-6.050158,-7.599189,-1.941215,6.099752,-8.570873,9.046060,-2.762243,-7.859995,-9.516693,-3.555306,-8.289839,-2.391759,-2.069357,2.339615,4.705909,7.829107,1.621941,7.769710,2.709597,-6.613381,5.652529,-9.165877,-0.873022,-9.178339,8.601317,1.050769,-1.364668,3.930191,0.687072,7.196196,-4.153485,3.628823,0.507402,3.825606,2.304807,-2.557108,-4.005585,-9.761079,0.636846,5.561846,2.749731,-4.178305,3.824440,-7.145784,-1.355154,8.073056,-7.124586,-3.345267,-3.303733,-0.204744,4.345361,-0.340513,0.448388,-5.862967,4.391675,-7.277115,-0.582132,-4.651337,-0.083999,5.608514,-3.741169,2.507787,6.550185,-5.619270,-7.187293,2.991835,0.578703,4.558611,-4.424229,6.540797,1.500304,-8.595083,-3.847942,4.563208,4.658732,2.746694,-8.890656,-9.679522,3.249902,0.077341,0.727267,2.307684,-7.478045,-5.767434,2.415700,-7.240745,0.390259,-2.452682,1.463082,-4.649476,-7.272675,-4.148380,-4.235193,-2.030815,-1.584144,7.300465,-4.633911,-2.736979,9.676048,3.600379,2.538961,-3.464606,-1.054869,-5.176980,-6.340167,-2.490568,2.874346,3.981970,8.637691,7.366714,9.659462,-5.688825,4.093566,-6.193002,7.059544,3.059975,1.935690,8.282330,1.427236,2.597420,-1.422541,-9.070790,8.131536,5.308953,-5.100257,-6.488801,-7.551272,6.353008,1.106906,-5.646980,-5.626165,8.403123,9.767296,5.629140,6.199253,4.472113,9.342941,6.517206,7.895517,1.071670,5.482784,-4.705809,-3.349680,1.512862,7.403101,-8.592178,-7.060379,-7.300154,-2.400632,-8.671570,-5.367938,9.820949,9.693857,-6.667888,-4.068090,-5.202682,1.387673,9.281108,6.234049,-6.443233,-7.726108,-1.047901,-2.976771,8.223016,-2.398312,-4.578548,4.130716,-5.099622,-7.664782,6.498219,2.818315,-7.339305,-3.552751,-5.246065,5.271863,6.755332,-4.610115,-6.067317,-2.598710,7.539839,7.040901,0.903730,-3.051395,5.993681,2.376549,7.292740,4.454575,6.601701,9.229952,2.446670,-5.121589,-7.833237,-6.228585,-9.887850,-8.251114,7.370257,8.763743,-8.865082,7.343630,2.715784,6.834412,6.379460,-5.947136,-2.111897,-8.707378,-7.485272,-6.762021,8.688962,5.985296,1.231905,-6.038766,2.974918,-1.423115,2.071531,-1.956018,-0.374786,3.002763,-0.834367,-4.025818,3.753177,-3.723607,-8.695830,-8.373378,0.599424,5.407385,-0.150070,2.968465,9.336237,6.532966,4.030494,7.958752,1.624939,2.509499,6.215581,3.185256,0.884267,-5.714486,-5.745865,3.988826,8.836117,2.499126,-5.329409,7.932768,-4.506730,-6.849138,-9.121743,3.696144,-0.426551,7.728152,-0.813068,-1.245984,-6.317888,3.298977,-6.209349,-3.303198,8.158836,3.936685,6.070746,-2.598389,8.894412,6.434534,-6.943301,-5.765713,-0.529448,-5.727941,-5.729872,-6.805833,-8.961535,7.204255,-1.655974,-4.948045,6.670647,-3.972811,-4.591056,-5.787791,0.158136,-4.034335,-2.521020,9.415472,-9.448133,-9.708203,-7.158504,-6.604316,-4.388939,3.952928,3.714063,2.124218,6.797348,0.754022,-2.365345,-4.764668,-2.757387,9.765271,2.405324,8.273031,5.021033,-5.009684,-2.435224,-5.125732,-0.234518,3.574617,1.858091,9.104407,-1.543822,-0.784491,-0.064014,6.167648,0.093574,-3.960904,2.025997,7.717320,8.514137,-4.813210,-7.712394,-2.982638,3.929064,-4.256909,-6.127889,6.039682,5.404611,7.406707,-5.532795,-1.746545,-7.719948,-8.463923,-8.699231,-9.082765,9.706186,2.607017,8.119696,2.604721,1.917119,6.526753,0.999204,4.603159,-7.059290,-1.518736,8.029268,0.393260,5.994595,1.489470,4.684378,3.243665,-4.564860,-4.160601,5.122827,-1.867184,0.789910,-2.664043,6.464515,7.454176,0.637441,-0.068732,-5.667598,-9.036763,-8.996452,5.195471,7.561319,-2.214280,9.406397,0.953059,-7.616859,-5.086180,4.866267,-3.552267,-1.487005,-8.633166,-8.726165,-5.770524,-9.908372,-0.957528,-6.504362,-7.553961,7.679440,7.712002,0.833167,7.326306,5.947877,-9.429010,-6.456338,6.889929,-0.957655,-8.216010,-7.089128,-1.186325,7.630045,1.780752,-5.936620,9.934407,5.539446,9.686695,6.880535,-5.988226,-7.536906,0.932705,-3.495608,9.467132,4.449889,6.053634,-1.183126,-0.878442,-2.897701,5.368375,-6.472386,-9.662085,3.747835,-3.980421,-4.339244,7.408031,1.112121,-8.782491,5.871331,5.003373,2.792205,0.183974,-2.080200,-5.727287,4.662500,5.598180,-2.309319,0.398315,3.767704,0.541010,1.596477,-5.918532,0.512667,-0.411890,-9.495955,0.416457,-0.832304,2.662406,1.762188,1.875329,0.376104,-5.315518,3.850662,-4.881931,6.682493,-0.364484,-3.394770,-1.653949,5.121847,8.490080,-1.394472,-1.987378,7.432085,4.947212,6.441974,6.855144,1.965814,-1.001884,-9.016814,-9.932992,-3.017305,-4.402146,1.151961,4.891765,3.863325,2.871847,8.479712,-8.766402,3.322730,0.182886,-6.583437,-2.793518,-5.803116,-9.837930,7.436954,7.075069,-6.445399,-5.625711,-1.703466,-5.375667,-6.009250,7.840026,9.159258,-5.765687,7.823251,6.283109,7.170835,2.724478,9.677062,-1.284367,-0.652035,-2.085157,9.144503,6.404458,-7.830179,0.243513,7.537483,3.637855,-6.141494,5.645890,0.375842,7.443128,-0.822777,3.942969,8.729885,-5.895729,4.970215,-9.212932,-7.401953,-1.990446,2.120418,5.500532,-1.165400,-8.863887,4.110406,-1.260458,-5.879129,0.986450,-2.704893,-2.604944,-6.382218,-7.172945,-8.747925,-2.946796,-5.641100,1.848345,-6.408450,-8.213148,3.054707,4.303114,-3.180590,-1.666825,0.756335,-1.887782,-0.345099,9.724258,7.862076,-5.914535,-3.868801,-4.974124,6.717337,1.012338,2.590620,-9.902334,-2.462747,2.429435,6.411199,8.919480,7.432004,-6.748514,8.659140,-0.779454,2.357836,-0.541870,1.084116,-7.314033,-5.225013,-9.711694,9.149766,3.306403,-9.003948,0.100757,-0.360496,-2.616447,-2.439424,9.879752,9.384788,-7.645586,-9.391158,-5.574206,-3.049928,-7.893602,-1.727512,-3.683297,0.329228,3.339236,-3.702737,1.757210,-1.744386,-2.077929,-4.544981,-4.619422,5.719950,6.392906,0.507839,3.279121,-4.449977,-4.452727,-3.923375,9.530172,-0.670113,3.338325,3.320344,7.469197,-4.008633,-4.064287,9.869035,-6.024104,9.989265,-1.674055,-6.936033,-0.702347,6.051500,5.513417,0.229953,1.512429,-4.173931,-1.330092,3.618859,6.522670,7.529899,9.192804,-5.934655,5.579448,7.720029,-4.664398,8.330788,-9.006431,4.762468,-5.915070,-7.070962,3.304003,-2.099390,-2.542022,5.659999,-0.510162,2.688324,-4.722356,6.157264,-6.952359,3.505670,-6.952746,2.288869,-2.706642,6.575694,-2.237993,-3.696913,-0.577692,5.183923,5.537379,-6.588396,-9.013992,9.323219,1.255683,-8.629961,0.872960,-3.109852,7.868764,-2.111855,-5.761269,-5.535982,-7.515677,-6.319005,-2.988691,0.758825,5.542140,9.003092,-8.155919,-6.798276,6.520392,2.483476,-2.726647,9.395375,0.975454,1.880458,3.492734,-9.671029,0.473152,-0.439141,7.878088,2.007154,7.965345,-2.933327,5.202524,6.761062,9.952611,0.132196,-6.879715,6.239574,-0.268693,8.471843,5.750419,4.933503,4.198266,-7.572088,-2.124655,6.553456,-3.055099,4.249166,-2.435255,-2.044782,8.621733,4.996889,-2.069818,2.631568,-7.576151,-1.505049,3.637257,-7.385830,2.858291,2.826920,-8.904876,4.230810,-2.026521,-9.814727,6.151422,-4.559116,-5.849255,-9.928609,1.174638,9.166147,1.414649,3.055826,-3.553123,6.742247,-4.010422,3.960816,1.786058,4.186099,6.452528,-0.246672,-5.217536,7.637969,-1.534479,-4.733309,5.499598,8.456648,1.980893,0.254702,-6.708013,-4.707958,1.592370,0.761696,-3.885425,-8.562350,-5.579687,6.214831,-3.950263,2.819396,-3.352906,-2.445883,-2.431113], dtype = "float64")#candidate|2627|(1050,)|const|float64
call_2626 = relay.TupleGetItem(func_1888_call(relay.reshape(const_2627.astype('float64'), [7, 15, 10]), relay.reshape(const_2627.astype('float64'), [7, 15, 10]), ), 0)
call_2628 = relay.TupleGetItem(func_1891_call(relay.reshape(const_2627.astype('float64'), [7, 15, 10]), relay.reshape(const_2627.astype('float64'), [7, 15, 10]), ), 0)
output = relay.Tuple([call_2607,call_2617,call_2626,const_2627,])
output2 = relay.Tuple([call_2608,call_2618,call_2628,const_2627,])
func_2629 = relay.Function([], output)
mod['func_2629'] = func_2629
mod = relay.transform.InferType()(mod)
mutated_mod['func_2629'] = func_2629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2629_call = mutated_mod.get_global_var('func_2629')
call_2630 = func_2629_call()
output = call_2630
func_2631 = relay.Function([], output)
mutated_mod['func_2631'] = func_2631
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2629_call = mod.get_global_var('func_2629')
func_2631_call = mutated_mod.get_global_var('func_2631')
call_2651 = relay.TupleGetItem(func_2629_call(), 3)
call_2652 = relay.TupleGetItem(func_2631_call(), 3)
func_1468_call = mod.get_global_var('func_1468')
func_1470_call = mutated_mod.get_global_var('func_1470')
call_2653 = func_1468_call()
call_2654 = func_1468_call()
output = relay.Tuple([call_2651,call_2653,])
output2 = relay.Tuple([call_2652,call_2654,])
func_2656 = relay.Function([], output)
mod['func_2656'] = func_2656
mod = relay.transform.InferType()(mod)
mutated_mod['func_2656'] = func_2656
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2656_call = mutated_mod.get_global_var('func_2656')
call_2657 = func_2656_call()
output = call_2657
func_2658 = relay.Function([], output)
mutated_mod['func_2658'] = func_2658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1546_call = mod.get_global_var('func_1546')
func_1547_call = mutated_mod.get_global_var('func_1547')
call_2688 = relay.TupleGetItem(func_1546_call(), 2)
call_2689 = relay.TupleGetItem(func_1547_call(), 2)
output = relay.Tuple([call_2688,])
output2 = relay.Tuple([call_2689,])
func_2697 = relay.Function([], output)
mod['func_2697'] = func_2697
mod = relay.transform.InferType()(mod)
output = func_2697()
func_2698 = relay.Function([], output)
mutated_mod['func_2698'] = func_2698
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_2699 = func_1713_call()
call_2700 = func_1713_call()
output = call_2699
output2 = call_2700
func_2717 = relay.Function([], output)
mod['func_2717'] = func_2717
mod = relay.transform.InferType()(mod)
output = func_2717()
func_2718 = relay.Function([], output)
mutated_mod['func_2718'] = func_2718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_301_call = mod.get_global_var('func_301')
func_302_call = mutated_mod.get_global_var('func_302')
call_2738 = func_301_call()
call_2739 = func_301_call()
uop_2743 = relay.tan(call_2738.astype('float32')) # shape=(5, 8, 5)
uop_2745 = relay.tan(call_2739.astype('float32')) # shape=(5, 8, 5)
func_1859_call = mod.get_global_var('func_1859')
func_1860_call = mutated_mod.get_global_var('func_1860')
call_2748 = relay.TupleGetItem(func_1859_call(), 1)
call_2749 = relay.TupleGetItem(func_1860_call(), 1)
uop_2765 = relay.cos(call_2748.astype('float32')) # shape=(600,)
uop_2767 = relay.cos(call_2749.astype('float32')) # shape=(600,)
uop_2770 = relay.acosh(uop_2743.astype('float64')) # shape=(5, 8, 5)
uop_2772 = relay.acosh(uop_2745.astype('float64')) # shape=(5, 8, 5)
func_1913_call = mod.get_global_var('func_1913')
func_1914_call = mutated_mod.get_global_var('func_1914')
call_2776 = relay.TupleGetItem(func_1913_call(), 0)
call_2777 = relay.TupleGetItem(func_1914_call(), 0)
output = relay.Tuple([uop_2765,uop_2770,call_2776,])
output2 = relay.Tuple([uop_2767,uop_2772,call_2777,])
func_2781 = relay.Function([], output)
mod['func_2781'] = func_2781
mod = relay.transform.InferType()(mod)
output = func_2781()
func_2782 = relay.Function([], output)
mutated_mod['func_2782'] = func_2782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2506_call = mod.get_global_var('func_2506')
func_2507_call = mutated_mod.get_global_var('func_2507')
call_2789 = func_2506_call()
call_2790 = func_2506_call()
uop_2797 = relay.acos(call_2789.astype('float64')) # shape=(7, 12, 3)
uop_2799 = relay.acos(call_2790.astype('float64')) # shape=(7, 12, 3)
output = relay.Tuple([uop_2797,])
output2 = relay.Tuple([uop_2799,])
func_2805 = relay.Function([], output)
mod['func_2805'] = func_2805
mod = relay.transform.InferType()(mod)
mutated_mod['func_2805'] = func_2805
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2805_call = mutated_mod.get_global_var('func_2805')
call_2806 = func_2805_call()
output = call_2806
func_2807 = relay.Function([], output)
mutated_mod['func_2807'] = func_2807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_2820 = func_140_call()
call_2821 = func_140_call()
output = relay.Tuple([call_2820,])
output2 = relay.Tuple([call_2821,])
func_2830 = relay.Function([], output)
mod['func_2830'] = func_2830
mod = relay.transform.InferType()(mod)
output = func_2830()
func_2831 = relay.Function([], output)
mutated_mod['func_2831'] = func_2831
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2805_call = mod.get_global_var('func_2805')
func_2807_call = mutated_mod.get_global_var('func_2807')
call_2927 = relay.TupleGetItem(func_2805_call(), 0)
call_2928 = relay.TupleGetItem(func_2807_call(), 0)
uop_2939 = relay.sqrt(call_2927.astype('float64')) # shape=(7, 12, 3)
uop_2941 = relay.sqrt(call_2928.astype('float64')) # shape=(7, 12, 3)
uop_2949 = relay.cos(uop_2939.astype('float64')) # shape=(7, 12, 3)
uop_2951 = relay.cos(uop_2941.astype('float64')) # shape=(7, 12, 3)
func_2510_call = mod.get_global_var('func_2510')
func_2511_call = mutated_mod.get_global_var('func_2511')
call_2953 = relay.TupleGetItem(func_2510_call(), 0)
call_2954 = relay.TupleGetItem(func_2511_call(), 0)
func_1888_call = mod.get_global_var('func_1888')
func_1891_call = mutated_mod.get_global_var('func_1891')
var_2964 = relay.var("var_2964", dtype = "float64", shape = (5, 210))#candidate|2964|(5, 210)|var|float64
call_2963 = relay.TupleGetItem(func_1888_call(relay.reshape(var_2964.astype('float64'), [7, 15, 10]), relay.reshape(var_2964.astype('float64'), [7, 15, 10]), ), 0)
call_2965 = relay.TupleGetItem(func_1891_call(relay.reshape(var_2964.astype('float64'), [7, 15, 10]), relay.reshape(var_2964.astype('float64'), [7, 15, 10]), ), 0)
bop_2976 = relay.bitwise_and(uop_2949.astype('int64'), relay.reshape(uop_2939.astype('int64'), relay.shape_of(uop_2949))) # shape=(7, 12, 3)
bop_2979 = relay.bitwise_and(uop_2951.astype('int64'), relay.reshape(uop_2941.astype('int64'), relay.shape_of(uop_2951))) # shape=(7, 12, 3)
func_2354_call = mod.get_global_var('func_2354')
func_2357_call = mutated_mod.get_global_var('func_2357')
var_2982 = relay.var("var_2982", dtype = "float64", shape = (660, 2))#candidate|2982|(660, 2)|var|float64
call_2981 = relay.TupleGetItem(func_2354_call(relay.reshape(var_2982.astype('float64'), [1320,])), 4)
call_2983 = relay.TupleGetItem(func_2357_call(relay.reshape(var_2982.astype('float64'), [1320,])), 4)
bop_2988 = relay.greater_equal(bop_2976.astype('bool'), relay.reshape(uop_2949.astype('bool'), relay.shape_of(bop_2976))) # shape=(7, 12, 3)
bop_2991 = relay.greater_equal(bop_2979.astype('bool'), relay.reshape(uop_2951.astype('bool'), relay.shape_of(bop_2979))) # shape=(7, 12, 3)
var_3003 = relay.var("var_3003", dtype = "float64", shape = (7, 12, 3))#candidate|3003|(7, 12, 3)|var|float64
bop_3004 = relay.mod(uop_2939.astype('float32'), relay.reshape(var_3003.astype('float32'), relay.shape_of(uop_2939))) # shape=(7, 12, 3)
bop_3007 = relay.mod(uop_2941.astype('float32'), relay.reshape(var_3003.astype('float32'), relay.shape_of(uop_2941))) # shape=(7, 12, 3)
output = relay.Tuple([call_2953,call_2963,var_2964,call_2981,var_2982,bop_2988,bop_3004,])
output2 = relay.Tuple([call_2954,call_2965,var_2964,call_2983,var_2982,bop_2991,bop_3007,])
func_3011 = relay.Function([var_2964,var_2982,var_3003,], output)
mod['func_3011'] = func_3011
mod = relay.transform.InferType()(mod)
var_3012 = relay.var("var_3012", dtype = "float64", shape = (5, 210))#candidate|3012|(5, 210)|var|float64
var_3013 = relay.var("var_3013", dtype = "float64", shape = (660, 2))#candidate|3013|(660, 2)|var|float64
var_3014 = relay.var("var_3014", dtype = "float64", shape = (7, 12, 3))#candidate|3014|(7, 12, 3)|var|float64
output = func_3011(var_3012,var_3013,var_3014,)
func_3015 = relay.Function([var_3012,var_3013,var_3014,], output)
mutated_mod['func_3015'] = func_3015
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3045 = relay.var("var_3045", dtype = "bool", shape = (3, 16, 5))#candidate|3045|(3, 16, 5)|var|bool
var_3046 = relay.var("var_3046", dtype = "bool", shape = (3, 16, 5))#candidate|3046|(3, 16, 5)|var|bool
bop_3047 = relay.logical_or(var_3045.astype('bool'), relay.reshape(var_3046.astype('bool'), relay.shape_of(var_3045))) # shape=(3, 16, 5)
func_2594_call = mod.get_global_var('func_2594')
func_2595_call = mutated_mod.get_global_var('func_2595')
call_3052 = relay.TupleGetItem(func_2594_call(), 0)
call_3053 = relay.TupleGetItem(func_2595_call(), 0)
output = relay.Tuple([bop_3047,call_3052,])
output2 = relay.Tuple([bop_3047,call_3053,])
func_3056 = relay.Function([var_3045,var_3046,], output)
mod['func_3056'] = func_3056
mod = relay.transform.InferType()(mod)
var_3057 = relay.var("var_3057", dtype = "bool", shape = (3, 16, 5))#candidate|3057|(3, 16, 5)|var|bool
var_3058 = relay.var("var_3058", dtype = "bool", shape = (3, 16, 5))#candidate|3058|(3, 16, 5)|var|bool
output = func_3056(var_3057,var_3058,)
func_3059 = relay.Function([var_3057,var_3058,], output)
mutated_mod['func_3059'] = func_3059
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3072 = relay.const([[[False,True,False,False,False,True,True,True,False,False,True,False,False,True,True],[False,True,False,False,False,False,False,False,True,False,True,False,True,True,False],[False,False,False,False,False,False,True,True,True,True,True,False,False,False,False],[True,False,True,False,False,True,False,False,True,False,False,False,False,True,True],[True,True,True,True,True,True,True,True,True,False,False,False,True,False,False],[True,False,False,False,False,False,True,False,False,False,False,False,False,True,False],[True,False,True,True,True,True,False,False,False,True,False,False,False,True,True],[False,False,True,True,False,True,True,True,True,False,True,False,False,True,True],[False,True,True,False,False,False,True,False,False,True,False,False,True,False,False]],[[False,False,False,True,True,True,False,True,False,False,True,False,False,True,True],[True,False,False,False,False,False,False,True,True,False,False,True,False,True,True],[False,False,True,True,True,True,False,False,False,False,False,True,False,False,False],[False,True,False,False,True,False,True,True,True,False,True,True,True,True,True],[False,False,True,True,True,False,False,True,False,False,True,False,True,False,False],[False,False,True,False,False,False,True,True,True,False,True,False,False,False,False],[True,False,False,False,False,True,False,False,False,True,True,True,True,False,True],[False,False,True,True,True,False,False,False,True,True,False,True,False,False,True],[False,True,False,False,True,False,True,False,False,True,True,True,False,False,False]],[[False,False,False,True,False,True,True,False,True,True,True,False,False,True,False],[True,True,False,True,True,True,True,False,True,False,True,False,True,False,True],[True,False,True,False,True,True,True,True,True,True,False,True,True,False,False],[True,True,False,True,True,True,True,False,False,False,False,True,True,False,True],[False,True,True,True,True,True,True,True,False,False,False,False,True,True,False],[False,False,True,False,False,False,True,True,True,True,True,True,True,False,True],[False,False,True,False,False,False,True,True,True,True,True,True,True,True,False],[True,True,True,False,True,True,True,False,False,False,False,True,True,True,False],[True,True,False,False,True,False,False,False,True,False,True,True,True,False,False]],[[False,True,True,True,False,False,False,True,False,False,True,False,True,False,True],[True,True,True,False,True,False,False,False,True,False,False,False,True,True,True],[True,True,False,False,False,False,False,False,True,False,False,False,True,False,True],[False,True,False,True,True,False,False,False,False,True,False,False,True,True,True],[False,False,True,True,False,True,True,False,False,True,False,False,True,True,False],[False,False,False,True,True,True,True,True,True,True,False,True,True,False,False],[False,False,False,True,True,False,True,True,False,True,False,True,True,True,False],[False,False,False,False,True,False,True,False,True,True,True,False,False,False,False],[True,False,False,True,False,False,False,True,True,False,False,True,True,True,False]],[[False,True,False,False,True,True,False,True,True,False,False,False,False,False,False],[False,True,True,False,True,True,False,True,False,True,True,False,False,True,True],[True,True,True,True,True,False,True,False,True,False,False,True,True,False,False],[True,False,True,False,False,False,True,True,True,True,False,True,True,True,False],[True,False,True,False,True,False,False,False,False,False,True,False,True,False,False],[True,True,False,True,False,True,True,True,False,True,True,False,False,False,True],[False,True,True,True,True,True,True,False,True,False,False,False,False,True,False],[True,True,False,True,False,False,False,True,True,False,False,False,True,False,True],[False,False,False,False,True,False,True,True,False,False,True,False,True,True,True]],[[True,False,False,True,False,False,True,False,False,True,True,False,True,False,True],[False,False,True,True,False,True,True,True,False,True,False,True,True,True,False],[False,False,True,True,False,True,True,True,True,True,False,False,False,False,False],[True,False,True,False,True,True,True,False,True,True,True,True,False,False,False],[True,True,False,False,False,False,True,True,False,False,True,False,True,True,False],[True,False,True,False,False,False,False,False,True,True,True,False,False,False,True],[False,True,False,False,True,False,True,False,True,True,False,False,True,True,True],[False,True,True,True,True,False,True,True,False,False,False,True,True,False,True],[False,False,False,False,True,True,False,False,True,True,True,False,False,False,True]],[[True,False,False,True,True,False,True,True,True,True,True,False,False,False,False],[False,False,True,False,False,False,False,False,False,True,False,True,True,False,True],[True,True,False,True,False,True,True,True,False,True,False,False,True,True,False],[True,True,True,False,True,True,False,True,False,False,True,False,True,False,False],[True,True,True,True,True,False,False,False,True,True,True,False,True,False,True],[True,False,False,False,False,True,False,True,True,False,True,False,False,True,False],[False,False,False,True,True,True,True,True,True,True,False,True,True,True,True],[False,True,True,False,True,False,True,True,True,False,True,False,False,True,True],[True,True,True,True,True,False,False,False,False,True,True,False,False,False,False]],[[False,False,True,True,False,False,True,False,False,False,False,True,True,True,True],[False,False,False,False,True,True,False,True,False,False,False,True,True,True,False],[True,True,False,False,False,True,False,False,True,False,False,True,False,True,False],[True,False,False,True,False,True,True,False,False,True,True,True,False,False,False],[False,True,True,True,True,True,False,True,True,True,False,False,False,False,True],[True,True,True,True,False,True,True,True,False,True,False,True,False,True,True],[False,True,False,True,False,True,True,False,False,False,True,False,False,False,False],[False,True,True,True,False,False,True,True,True,True,True,False,False,True,True],[True,False,False,True,True,True,False,False,True,False,True,True,True,True,True]],[[True,True,False,True,True,False,True,False,False,False,True,True,False,True,False],[True,False,False,False,True,False,True,True,False,False,True,True,True,False,True],[False,False,False,False,True,True,True,False,True,True,False,False,False,True,True],[False,False,True,True,False,False,True,True,True,True,False,True,True,True,True],[False,False,True,False,False,False,False,True,False,True,False,True,False,False,False],[True,True,False,True,False,True,True,True,False,True,False,False,False,True,False],[True,True,False,True,False,False,True,False,False,False,True,False,True,True,True],[True,True,False,True,False,False,False,True,True,True,False,True,True,False,True],[True,False,False,True,True,False,False,False,False,False,False,False,False,True,True]],[[True,False,False,True,False,False,True,False,False,False,True,False,False,True,True],[True,False,True,True,False,False,False,False,False,False,False,True,False,False,False],[False,False,True,False,True,True,True,True,True,True,True,True,True,True,False],[False,False,False,True,False,False,True,False,False,False,False,False,True,True,True],[True,True,True,False,True,False,True,False,True,True,True,True,False,True,False],[False,True,True,False,True,True,True,False,True,True,False,True,False,True,False],[True,True,True,False,True,True,False,True,True,False,False,True,True,False,False],[True,False,True,False,False,False,True,True,True,False,True,True,False,True,True],[False,False,False,False,False,True,True,False,False,False,False,False,True,True,False]],[[True,True,False,True,True,True,True,True,False,False,True,True,False,True,False],[True,False,False,True,False,False,False,True,True,True,True,True,True,True,True],[False,False,False,False,True,True,True,True,False,False,True,False,True,True,True],[False,False,True,False,True,True,True,False,False,False,True,False,True,False,True],[False,False,True,False,True,True,False,False,False,False,False,True,False,False,True],[False,False,True,True,False,True,True,True,True,True,True,False,True,True,False],[False,True,True,False,False,False,True,False,False,True,False,True,False,True,True],[True,True,True,True,False,True,False,True,True,True,True,False,True,False,True],[True,True,True,False,True,True,False,False,True,True,True,True,False,True,False]],[[True,True,True,False,False,False,True,False,True,False,True,False,True,False,True],[False,True,False,True,False,True,False,False,True,True,True,False,True,True,True],[True,False,False,True,False,False,True,False,False,False,False,True,True,True,True],[False,False,True,False,True,True,True,False,True,False,True,True,False,False,False],[True,False,True,False,True,True,False,False,True,True,False,False,False,True,True],[False,True,True,True,True,True,False,False,True,True,False,False,False,False,True],[True,False,True,False,False,False,True,False,False,True,True,False,True,False,False],[False,False,True,False,True,True,True,True,True,False,False,False,False,True,False],[True,False,False,False,False,False,False,True,True,False,False,False,True,True,False]],[[True,False,False,False,False,True,True,True,False,True,True,True,True,True,False],[True,True,False,False,True,False,False,False,True,True,False,False,False,True,True],[False,False,True,True,True,True,False,False,False,True,True,True,False,False,True],[False,False,False,False,False,True,False,False,True,True,False,False,True,False,True],[True,False,False,False,True,True,False,False,True,False,True,True,False,True,True],[True,True,True,True,True,True,False,True,False,False,False,False,False,False,False],[True,True,False,True,True,False,False,True,False,False,False,True,True,False,False],[False,True,True,False,False,False,True,False,True,True,False,True,True,False,True],[True,False,False,False,True,False,False,False,True,False,False,True,True,True,True]],[[True,True,False,False,True,False,False,True,True,True,False,True,False,False,False],[False,True,False,False,True,True,False,True,True,False,True,True,True,False,False],[True,True,False,True,True,True,False,True,False,True,False,True,False,True,True],[False,True,False,False,True,False,False,False,True,True,False,True,True,True,True],[True,False,True,True,False,False,True,False,False,True,True,False,False,True,True],[True,False,False,False,False,False,False,False,False,True,False,False,False,True,True],[False,False,False,True,False,False,True,True,False,True,False,True,False,True,False],[True,False,False,False,False,True,False,False,True,False,False,True,False,False,False],[True,False,True,True,True,True,True,True,False,True,False,False,False,False,True]],[[True,False,False,True,False,False,False,False,True,False,False,True,True,False,True],[False,True,False,True,True,True,False,False,False,False,False,True,False,False,True],[False,True,True,False,True,True,False,True,True,True,True,True,False,True,True],[False,True,True,False,False,False,True,False,False,False,False,False,True,False,True],[False,False,False,False,False,True,True,True,True,True,False,False,False,True,True],[False,True,False,True,True,False,True,False,False,True,False,False,False,True,True],[True,False,True,True,False,False,True,True,True,False,False,True,False,True,False],[False,True,True,False,False,False,True,True,True,True,False,True,False,False,True],[True,True,True,False,True,True,False,False,False,True,False,True,True,False,False]],[[True,False,True,True,True,True,True,False,False,False,True,False,False,True,True],[True,False,False,False,True,True,True,True,True,True,True,True,False,False,False],[False,True,False,True,False,True,False,False,True,False,False,True,True,False,False],[False,True,True,False,True,False,False,False,True,True,False,False,True,False,False],[True,True,False,True,False,False,True,True,False,False,True,True,True,False,True],[False,False,True,True,True,False,True,True,True,False,False,True,True,True,True],[True,False,False,True,False,True,False,True,False,False,True,True,True,True,False],[True,True,False,False,False,True,False,True,False,True,True,True,False,False,False],[False,False,True,False,True,True,True,True,False,True,False,True,True,True,False]]], dtype = "bool")#candidate|3072|(16, 9, 15)|const|bool
var_3073 = relay.var("var_3073", dtype = "bool", shape = (16, 9, 15))#candidate|3073|(16, 9, 15)|var|bool
bop_3074 = relay.logical_or(const_3072.astype('bool'), relay.reshape(var_3073.astype('bool'), relay.shape_of(const_3072))) # shape=(16, 9, 15)
func_1601_call = mod.get_global_var('func_1601')
func_1603_call = mutated_mod.get_global_var('func_1603')
call_3082 = relay.TupleGetItem(func_1601_call(), 0)
call_3083 = relay.TupleGetItem(func_1603_call(), 0)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_3084 = relay.TupleGetItem(func_1585_call(), 0)
call_3085 = relay.TupleGetItem(func_1586_call(), 0)
output = relay.Tuple([bop_3074,call_3082,call_3084,])
output2 = relay.Tuple([bop_3074,call_3083,call_3085,])
func_3086 = relay.Function([var_3073,], output)
mod['func_3086'] = func_3086
mod = relay.transform.InferType()(mod)
var_3087 = relay.var("var_3087", dtype = "bool", shape = (16, 9, 15))#candidate|3087|(16, 9, 15)|var|bool
output = func_3086(var_3087)
func_3088 = relay.Function([var_3087], output)
mutated_mod['func_3088'] = func_3088
mutated_mod = relay.transform.InferType()(mutated_mod)
func_47_call = mod.get_global_var('func_47')
func_49_call = mutated_mod.get_global_var('func_49')
call_3099 = relay.TupleGetItem(func_47_call(), 0)
call_3100 = relay.TupleGetItem(func_49_call(), 0)
output = relay.Tuple([call_3099,])
output2 = relay.Tuple([call_3100,])
func_3118 = relay.Function([], output)
mod['func_3118'] = func_3118
mod = relay.transform.InferType()(mod)
mutated_mod['func_3118'] = func_3118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3118_call = mutated_mod.get_global_var('func_3118')
call_3119 = func_3118_call()
output = call_3119
func_3120 = relay.Function([], output)
mutated_mod['func_3120'] = func_3120
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3157 = relay.var("var_3157", dtype = "float32", shape = (16, 7, 12))#candidate|3157|(16, 7, 12)|var|float32
uop_3158 = relay.asinh(var_3157.astype('float32')) # shape=(16, 7, 12)
func_1368_call = mod.get_global_var('func_1368')
func_1372_call = mutated_mod.get_global_var('func_1372')
var_3186 = relay.var("var_3186", dtype = "uint64", shape = (70,))#candidate|3186|(70,)|var|uint64
const_3187 = relay.const([[-7],[-1],[-7],[-6],[-7],[3],[-1],[-8],[-3],[1],[-5],[-3],[-8],[-3],[-2],[-9],[-7],[2],[3],[10],[-8],[5],[3],[2],[-2],[-9],[-6],[1],[1],[-10],[9],[1],[-10],[-4],[5],[-2],[7],[4],[-5],[-6],[-3],[-3],[-9],[5],[-10],[-2],[4],[7],[-8],[-8],[-4],[-6],[10],[-1],[-8],[1],[1],[-10],[-2],[-10],[-10],[1],[6],[10],[8],[-7],[-8],[3],[2],[-4],[-2],[2],[1],[-6],[9],[-3],[-10],[4],[2],[-2],[-2],[3],[1],[-10],[4],[3],[-1],[9],[-9],[4],[3],[-6],[4],[9],[-4],[8],[-9],[7],[-1],[-2],[3],[8],[2],[-7],[-4],[-8],[2],[10],[-6],[4],[1],[5],[5],[9],[-1],[10],[8],[-9],[9],[1],[8],[-2],[5],[-6],[2],[-10],[-4],[-4],[-9],[6],[6],[5],[5],[-2],[1],[-10],[5],[9],[4],[5],[-7],[-1],[-2],[-3],[-10],[2],[-6],[9],[2],[-8],[7],[1],[-9],[-5],[6],[-1],[5],[-6],[-8],[9],[-10],[3],[-1],[-9],[-4],[-5],[6],[4],[-4],[8],[-9],[3],[-2],[-2],[-7],[-10],[3],[5],[6],[6],[-1],[-2],[4],[-2],[-8],[-8],[-1],[2],[9],[-6],[4],[-7],[1],[-2],[4],[-6],[6],[-3],[7],[1],[-8],[-2],[-10],[-6],[8],[-9],[-10],[-1],[6],[6],[1],[6],[4],[-10],[-7],[-6],[-9],[-3],[5],[-8],[-3],[-7],[-1],[2],[4],[-7],[3],[-4],[5],[8],[4],[6],[-6],[-2],[10],[6],[-7],[4],[3],[-7],[-5],[-2],[10],[-5],[-10],[6],[9],[-7],[10],[-6],[9],[4],[4],[6],[-4],[-6],[7],[-7],[-6],[3],[-3],[9],[-10],[-7],[-6],[-3],[-6],[1],[-2],[9],[9],[-5],[3],[-5],[-2],[6],[7],[9],[4],[10],[-2],[6],[-7],[-8],[-3],[-7],[2],[1],[3],[4],[-6],[3],[8],[3],[-10],[1],[-5],[10],[4],[-2],[-2],[-3],[10],[10],[10],[9],[6],[9],[5],[-5],[6],[-7],[-5],[-2],[-4],[7],[-5],[10],[4],[9],[8],[10],[-1],[8],[-3],[-1],[1],[10],[4],[4],[-8],[3],[1],[9],[5],[-9],[-7],[7],[-10],[-1],[9],[3],[-9],[-5],[-5],[-10],[2],[-8],[-7],[10],[6],[-5],[10],[10],[8],[-4],[3],[-1],[10],[-5],[7],[-10],[9],[3],[7],[-7],[3],[-8],[7],[-5],[-9],[-4],[-6],[-3],[10],[-1],[-3],[7],[-1],[5],[-4],[-4],[8],[1],[10],[-10],[5],[-9],[8],[-7],[-10],[-7],[-1],[5],[7],[-3],[4],[-9],[9],[-8],[6],[-6],[-2],[3],[-9],[-10],[1],[3],[4],[-8],[-8],[1],[8],[8],[1],[-6],[4],[1],[-9],[7],[5],[6],[-7],[-9],[-7],[-3],[8],[10],[-5],[3],[2],[7],[1],[3],[-2],[-7],[-2],[-4],[4],[-9],[10],[7],[-7],[4],[-5],[9],[6],[5],[-4],[7],[-3],[-3],[-1],[-1],[10],[-7],[3],[10],[3],[1],[1],[-5],[-6],[4],[1],[7],[8],[-6],[-7],[-4],[-10],[-9],[7],[2],[-5],[7],[-4],[5],[-5],[1],[-2],[9],[-10],[-9],[-5],[-6],[-5],[7],[-8],[1],[-5],[-1],[3],[1],[5],[-5],[2],[-7],[10],[-1],[-10],[-9],[6],[7],[8],[-7],[-8],[-1],[4],[-10],[-4],[6],[-10],[8],[10],[6],[-8],[2],[-2],[6],[-9],[-2],[1],[2],[5],[-4],[9],[-5],[-4],[9],[-6],[-3],[10],[8],[6],[-4],[9],[4],[1],[-5],[7],[5],[9],[3],[7],[-7],[-6],[7],[8],[10],[9],[1],[-1],[-8],[-10],[-9],[2],[3],[8],[-7],[9],[-7],[-6],[3],[-8],[-8],[-10],[-5],[-3],[-3],[5],[9],[8],[9],[7],[10],[-9],[3],[3],[-7],[-10],[10],[-3],[10],[7],[8],[5],[-9],[7],[-8],[3],[-10],[-7],[6],[-10],[1],[-10],[-9],[5],[1],[-3],[3],[-6],[1],[-10],[8],[9],[6],[3],[-5],[6],[3],[6],[-1],[3],[4],[2],[-6],[-2],[2],[7],[5],[-1],[3],[-2],[-9],[4],[-4],[-5],[-3],[10],[-6],[5],[-1],[-10],[10],[6],[-5],[-6],[-3],[5],[-9],[-5],[1],[-10],[10],[-2],[-4],[-10],[-5],[-9],[-8],[-10],[-4],[-1],[7],[8],[-5],[8],[2],[-10],[2],[1],[-10],[-1],[3],[-8],[5],[-6],[-4],[-5],[-3],[8],[-7],[-5],[8],[3],[1],[4],[-9],[4],[4],[-5],[-2],[9],[7],[9],[-10],[-1],[-5],[6],[-6],[-1],[-5],[6],[-1],[5],[6],[6],[2],[6],[-3],[1],[-3],[-10],[1],[-10],[-5],[1],[8],[-5],[10],[4],[-10],[2],[8],[-3],[-4],[-4],[-7],[3],[-10],[-4],[-6],[8],[-2],[2],[-3],[-6],[7],[-6],[7],[-7],[4],[-7],[-8],[10],[7],[-7],[-8],[-6],[-8],[-2],[7],[7],[-9],[10],[-2],[6],[10],[8],[6],[-8],[-3],[6],[9],[-4],[4],[-9],[6],[-4],[9],[-1],[-3],[-9],[-2],[3],[-7],[3],[-3],[3],[-4],[-9],[3],[-9],[2],[-5],[1],[3],[7],[-9],[1],[9],[2],[-9],[-4],[8],[-7],[6],[5],[-2],[1],[9],[7],[6],[-4],[-3],[8],[2],[-7],[-4],[1],[-8],[-9],[2],[-10],[-10],[-4],[-4],[10],[5],[6],[6],[3],[3],[-7],[10],[9],[8],[-2],[3],[-5],[-6],[-3],[-1],[10],[-5],[-5],[10],[9],[7],[-10],[-5],[7],[-8],[-6],[-5],[-5],[1],[9],[9],[8],[-8],[4],[-1],[1],[10],[5],[2],[-3],[-2],[-3],[-1],[6],[-6],[-3],[-8],[8],[-6],[-4],[-9],[2],[-6],[-7],[10],[-1],[8],[-9],[-2],[-8],[-2],[3],[4],[4],[6],[-6],[2],[-4],[-7],[-7],[10],[9],[-1],[4],[3],[-2],[-7],[-5],[-6],[2],[8],[9],[-5],[8],[-4],[1],[2],[2],[8],[9],[-2],[-10],[-5],[9],[-5],[-5],[6],[-3],[-7],[-5],[8],[6],[5],[5],[8],[7],[-4],[6],[-2],[-3],[5],[-2],[-4],[-3],[5],[-3],[-3],[-5],[9],[-2],[-6],[6],[7],[-1],[6],[-8],[4],[3],[4],[-8],[-6],[-4],[-1],[9],[-10],[8],[1],[-8],[-3],[-7],[-3],[-1],[4],[4],[4],[7],[-2],[-10],[1],[-5],[-10],[9],[-5],[10],[-5],[9],[4],[6],[8],[6],[-3],[-1],[-3],[10],[-10],[-6],[-7],[4],[1],[-10],[-2],[8],[-2],[6],[4],[1],[4],[-2],[5],[-2],[6],[7],[-3],[5],[-4],[-10],[-7],[2],[3],[-9],[-9],[-6],[-2],[-1],[-2],[-6],[-3],[4],[-4],[7],[6],[-6],[-8],[-10],[6],[9],[2],[8],[6],[3],[-4],[-8],[1],[-2],[9],[-5],[-1],[-7],[9],[1],[9],[-1],[-7],[-4],[-2],[-1],[-7],[-5],[1],[3],[9],[4],[-1],[8],[-10],[-5],[10],[1],[9],[-10],[-4],[7],[-10],[-10],[-10],[-10],[3],[8],[6],[-3],[-6],[7],[-6],[-1],[4],[6],[-4],[9],[-7],[-4],[2],[-7],[-1],[8],[-2],[6],[-7],[2],[-3],[-8],[6],[-7],[7],[4],[-5],[-3],[4],[1],[-5],[-3],[-9],[-3],[-3],[-2],[9],[5],[4],[-4],[8],[-4],[-6],[-9],[7],[6],[-8],[-6],[-9],[3],[-5],[-10],[5],[-8],[5],[-9],[-1],[5],[2],[-10],[3],[-10]], dtype = "uint64")#candidate|3187|(1120, 1)|const|uint64
call_3185 = relay.TupleGetItem(func_1368_call(relay.reshape(var_3186.astype('uint64'), [70,]), relay.reshape(const_3187.astype('uint64'), [1120,]), ), 0)
call_3188 = relay.TupleGetItem(func_1372_call(relay.reshape(var_3186.astype('uint64'), [70,]), relay.reshape(const_3187.astype('uint64'), [1120,]), ), 0)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_3205 = func_1713_call()
call_3206 = func_1713_call()
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
call_3207 = relay.TupleGetItem(func_438_call(relay.reshape(call_3185.astype('float32'), [5, 8, 5])), 0)
call_3208 = relay.TupleGetItem(func_441_call(relay.reshape(call_3185.astype('float32'), [5, 8, 5])), 0)
func_2697_call = mod.get_global_var('func_2697')
func_2698_call = mutated_mod.get_global_var('func_2698')
call_3214 = relay.TupleGetItem(func_2697_call(), 0)
call_3215 = relay.TupleGetItem(func_2698_call(), 0)
uop_3216 = relay.tan(uop_3158.astype('float32')) # shape=(16, 7, 12)
output = relay.Tuple([call_3185,var_3186,const_3187,call_3205,call_3207,call_3214,uop_3216,])
output2 = relay.Tuple([call_3188,var_3186,const_3187,call_3206,call_3208,call_3215,uop_3216,])
func_3226 = relay.Function([var_3157,var_3186,], output)
mod['func_3226'] = func_3226
mod = relay.transform.InferType()(mod)
var_3227 = relay.var("var_3227", dtype = "float32", shape = (16, 7, 12))#candidate|3227|(16, 7, 12)|var|float32
var_3228 = relay.var("var_3228", dtype = "uint64", shape = (70,))#candidate|3228|(70,)|var|uint64
output = func_3226(var_3227,var_3228,)
func_3229 = relay.Function([var_3227,var_3228,], output)
mutated_mod['func_3229'] = func_3229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2155_call = mod.get_global_var('func_2155')
func_2157_call = mutated_mod.get_global_var('func_2157')
call_3262 = func_2155_call()
call_3263 = func_2155_call()
output = call_3262
output2 = call_3263
func_3277 = relay.Function([], output)
mod['func_3277'] = func_3277
mod = relay.transform.InferType()(mod)
output = func_3277()
func_3278 = relay.Function([], output)
mutated_mod['func_3278'] = func_3278
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2805_call = mod.get_global_var('func_2805')
func_2807_call = mutated_mod.get_global_var('func_2807')
call_3305 = relay.TupleGetItem(func_2805_call(), 0)
call_3306 = relay.TupleGetItem(func_2807_call(), 0)
output = call_3305
output2 = call_3306
func_3308 = relay.Function([], output)
mod['func_3308'] = func_3308
mod = relay.transform.InferType()(mod)
output = func_3308()
func_3309 = relay.Function([], output)
mutated_mod['func_3309'] = func_3309
mutated_mod = relay.transform.InferType()(mutated_mod)
func_544_call = mod.get_global_var('func_544')
func_546_call = mutated_mod.get_global_var('func_546')
call_3326 = relay.TupleGetItem(func_544_call(), 1)
call_3327 = relay.TupleGetItem(func_546_call(), 1)
uop_3332 = relay.asin(call_3326.astype('float32')) # shape=(5, 12, 10)
uop_3334 = relay.asin(call_3327.astype('float32')) # shape=(5, 12, 10)
output = uop_3332
output2 = uop_3334
func_3336 = relay.Function([], output)
mod['func_3336'] = func_3336
mod = relay.transform.InferType()(mod)
output = func_3336()
func_3337 = relay.Function([], output)
mutated_mod['func_3337'] = func_3337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_317_call = mod.get_global_var('func_317')
func_318_call = mutated_mod.get_global_var('func_318')
call_3363 = relay.TupleGetItem(func_317_call(), 0)
call_3364 = relay.TupleGetItem(func_318_call(), 0)
output = call_3363
output2 = call_3364
func_3393 = relay.Function([], output)
mod['func_3393'] = func_3393
mod = relay.transform.InferType()(mod)
output = func_3393()
func_3394 = relay.Function([], output)
mutated_mod['func_3394'] = func_3394
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3277_call = mod.get_global_var('func_3277')
func_3278_call = mutated_mod.get_global_var('func_3278')
call_3434 = func_3277_call()
call_3435 = func_3277_call()
const_3436 = relay.const([True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False], dtype = "bool")#candidate|3436|(600,)|const|bool
bop_3437 = relay.floor_mod(call_3434.astype('float32'), relay.reshape(const_3436.astype('float32'), relay.shape_of(call_3434))) # shape=(600,)
bop_3440 = relay.floor_mod(call_3435.astype('float32'), relay.reshape(const_3436.astype('float32'), relay.shape_of(call_3435))) # shape=(600,)
func_724_call = mod.get_global_var('func_724')
func_726_call = mutated_mod.get_global_var('func_726')
var_3444 = relay.var("var_3444", dtype = "uint16", shape = (594,))#candidate|3444|(594,)|var|uint16
call_3443 = relay.TupleGetItem(func_724_call(relay.reshape(var_3444.astype('uint16'), [594,])), 1)
call_3445 = relay.TupleGetItem(func_726_call(relay.reshape(var_3444.astype('uint16'), [594,])), 1)
func_120_call = mod.get_global_var('func_120')
func_122_call = mutated_mod.get_global_var('func_122')
call_3458 = func_120_call()
call_3459 = func_120_call()
output = relay.Tuple([bop_3437,call_3443,var_3444,call_3458,])
output2 = relay.Tuple([bop_3440,call_3445,var_3444,call_3459,])
func_3462 = relay.Function([var_3444,], output)
mod['func_3462'] = func_3462
mod = relay.transform.InferType()(mod)
var_3463 = relay.var("var_3463", dtype = "uint16", shape = (594,))#candidate|3463|(594,)|var|uint16
output = func_3462(var_3463)
func_3464 = relay.Function([var_3463], output)
mutated_mod['func_3464'] = func_3464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3393_call = mod.get_global_var('func_3393')
func_3394_call = mutated_mod.get_global_var('func_3394')
call_3497 = func_3393_call()
call_3498 = func_3393_call()
func_2313_call = mod.get_global_var('func_2313')
func_2314_call = mutated_mod.get_global_var('func_2314')
call_3499 = relay.TupleGetItem(func_2313_call(), 0)
call_3500 = relay.TupleGetItem(func_2314_call(), 0)
func_989_call = mod.get_global_var('func_989')
func_992_call = mutated_mod.get_global_var('func_992')
var_3517 = relay.var("var_3517", dtype = "bool", shape = (600,))#candidate|3517|(600,)|var|bool
call_3516 = relay.TupleGetItem(func_989_call(relay.reshape(var_3517.astype('bool'), [5, 12, 10])), 2)
call_3518 = relay.TupleGetItem(func_992_call(relay.reshape(var_3517.astype('bool'), [5, 12, 10])), 2)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_3532 = relay.TupleGetItem(func_1585_call(), 0)
call_3533 = relay.TupleGetItem(func_1586_call(), 0)
func_1859_call = mod.get_global_var('func_1859')
func_1860_call = mutated_mod.get_global_var('func_1860')
call_3534 = relay.TupleGetItem(func_1859_call(), 1)
call_3535 = relay.TupleGetItem(func_1860_call(), 1)
func_3011_call = mod.get_global_var('func_3011')
func_3015_call = mutated_mod.get_global_var('func_3015')
const_3539 = relay.const([5.716989,-1.977824,2.142916,-8.718107,-7.992724,0.060039,-5.212862,5.643269,-1.352129,-0.604552,-9.097812,-2.391412,-0.095417,-0.603661,1.733602,-7.339512,7.413957,-6.048627,-8.584797,2.405907,5.385334,-3.384411,-1.142421,-6.998215,-0.388945,3.938580,-9.096188,-2.484502,3.677461,0.577257,-7.263311,9.273362,-5.265022,-9.990335,-1.704701,3.460441,-1.174183,5.626123,5.203454,8.427692,-8.647989,-9.666122,-2.138386,-3.457313,-3.036055,6.579361,2.788950,-0.430093,-2.951101,-5.764189,5.477438,-5.994031,7.368375,-0.175252,-7.194292,-5.868678,-3.862007,7.197467,-0.852867,-7.396798,6.556170,1.637299,-6.790316,-7.259848,8.167895,7.694787,-9.423517,-2.695261,-8.484159,1.726351,6.612080,7.613043,-7.216164,-0.994052,-7.532921,5.940224,-9.671626,-3.194207,0.485875,-0.404280,2.554643,4.624027,2.608600,4.876995,-6.556953,-2.034067,4.541996,-1.979092,3.657778,-2.252505,2.294687,8.859437,-0.212067,7.889615,0.767850,-1.232264,3.759707,-2.765128,-1.540467,-6.031816,-7.845035,-4.883601,8.160119,-8.862426,2.432148,-6.196250,-6.897802,8.346956,-1.444082,-3.474294,-3.783604,-6.701059,-1.948557,-2.828162,3.839743,-5.167094,-2.030812,6.125865,7.108440,-9.813597,-5.579856,3.129772,-2.013037,9.046125,7.851855,-2.696533,4.364563,-1.901012,-1.907575,-9.528297,9.756389,2.926642,0.917678,0.715598,-4.925732,0.026914,0.521494,-9.519572,2.433555,-2.064182,1.072665,-9.106044,9.944853,6.712831,-6.612250,2.665527,-6.585948,1.056416,9.992249,-2.660035,-4.727239,-4.695915,-4.763677,2.615465,4.703677,8.780211,7.119603,1.715439,-1.843616,-8.082590,-6.016993,-2.865736,-1.580885,-1.810766,7.871395,-9.512471,-8.933041,2.065237,7.380866,7.412516,-2.776763,1.900100,-8.112530,-0.316041,5.374189,6.927685,8.447172,-2.889041,7.872985,8.190292,3.523815,-3.421176,1.884934,5.148912,9.558106,7.794499,2.703638,0.709826,7.614647,-6.755692,-1.127375,-9.180540,5.422968,8.061708,8.145440,3.969447,-7.164218,-4.587399,2.476009,-6.762559,-8.254134,-5.006530,7.956093,-9.201711,-3.883647,7.255496,-8.526314,-4.427978,5.382708,0.724055,-0.249193,5.898386,-2.726372,-9.635820,1.020246,-8.299925,-5.649972,0.537689,-9.651304,-8.533146,-3.167853,2.876230,7.496946,3.719494,-6.654758,9.902057,6.945619,8.372607,8.765229,-0.028841,0.097385,-2.891186,7.599950,7.993605,3.400463,-6.276314,3.643151,1.373095,0.332741,6.738009,1.593694,1.511784,-0.651389,-6.818515,-1.870439,-4.245952,-8.254334,-4.047613,2.433195,1.449196,1.392535,-7.036510,-1.440889,-7.735182,-8.753200,9.948148,-0.527418,8.509235,7.808784,-0.157666,-7.358693,4.759229,-9.045351,-2.990831,1.554125,-6.091779,-6.320522,-4.824826,-7.812666,-5.841728,-0.411065,-9.353200,-7.783355,3.816026,-6.073142,-5.961116,6.613600,8.554579,4.923562,1.018567,0.590650,3.975195,-9.719621,-5.360958,-2.607481,-0.477008,-9.946647,-9.496996,-7.550939,5.704527,8.362800,2.485677,4.977570,-9.903349,-8.988559,-5.683524,-9.694628,1.676733,3.643330,0.894349,9.680569,-5.192538,9.107208,-9.941989,9.141955,-0.683275,5.395555,9.878335,-6.323124,2.597843,4.504897,-2.960697,-2.214217,-9.616690,-5.519562,9.899873,6.253731,4.523941,-5.926180,-5.507784,4.249212,0.151472,-0.518852,-4.893012,-5.489148,-4.449133,5.688890,2.381276,-5.170398,2.395042,-6.997022,-7.196801,-3.270963,-8.467643,-6.390951,-1.227588,0.438442,-8.332867,-1.575278,-6.535432,0.785346,-8.915913,6.005006,-1.982038,-3.002979,-5.287661,-9.417141,-9.457553,3.772229,-1.455903,-6.536082,4.022109,-1.149802,4.218282,-6.576658,1.785252,-4.094018,-4.869862,-9.257517,-6.314474,-4.104184,3.982136,8.354951,-4.540111,-8.718015,-3.513392,1.881969,-6.515300,-5.954154,6.093069,5.759885,-3.168842,-1.132686,9.010413,7.486770,5.835356,0.056262,-6.271717,9.223305,3.248702,9.138502,-9.497395,0.927767,-4.429548,-8.230915,7.559371,0.757217,-8.169613,-4.675037,-7.937184,7.999092,-8.642742,-4.901078,2.449226,9.045231,2.965646,9.857199,6.462176,-1.827135,-3.299162,5.780140,-8.915207,8.473058,7.572013,-1.291881,7.298119,3.314756,-2.871394,-0.317481,0.903942,-6.538013,0.297299,-8.561076,4.408198,-4.022223,-6.686104,2.710389,-5.055282,9.588813,-1.468148,6.576661,2.090285,3.088783,-9.360145,6.228498,9.197541,-9.775674,7.636359,-4.297504,9.221130,-5.911414,-1.693129,-6.073690,-8.882373,-8.613895,-1.915754,-6.531507,4.681932,1.561577,-0.188587,1.642749,3.476760,-2.241187,6.468137,8.068606,0.414470,-0.230282,5.096984,6.446138,-4.445084,-2.065258,8.013461,-6.401789,8.455626,0.291886,-8.681675,0.458613,-1.706137,2.549767,-9.730476,7.357492,-6.881418,-0.183275,-7.468024,-8.208836,9.286194,0.925806,0.876815,5.691181,-0.757361,-4.045316,-1.920589,-1.726679,3.376044,-0.793805,-8.485234,-6.265663,3.461203,-5.120545,-9.055457,-8.027112,3.673757,-3.113086,7.411472,2.560515,-6.509019,-4.544275,-9.981336,-6.297033,-9.637150,8.389354,-3.896541,-5.108870,-2.685386,7.624506,1.708374,4.043939,-6.332860,9.766066,4.586566,1.467579,9.097684,-7.715626,-4.085862,2.682925,8.253026,0.373640,-6.421233,2.751028,-4.435587,0.656819,-4.356941,-9.026895,1.611292,-7.536092,9.978429,-9.789380,-3.053818,-6.793114,4.992030,1.271786,-7.983396,-9.749838,-9.020217,-1.168425,6.893333,-5.899834,-8.317849,-2.081774,6.899475,-1.275941,-0.376162,8.436590,-5.358231,4.343727,5.485947,-8.973503,7.786593,0.109364,5.856587,-8.478925,3.374600,-5.799018,9.980816,3.244484,-1.802809,7.876634,4.943729,5.811992,-1.889513,8.703367,9.585019,-9.390767,0.148409,1.664420,7.272253,6.808853,-7.195297,-2.248310,-0.696581,-0.412982,5.109303,4.567511,-7.642006,-8.249160,0.936012,4.484350,-4.889482,2.906499,8.074052,-2.514763,-3.674426,5.595957,8.958049,-7.290457,-9.077766,-2.760915,0.489555,-1.111517,-2.733819,-2.672063,-7.935785,8.399690,3.469414,-0.892257,4.712252,2.779294,-8.971905,-3.269203,-3.915837,1.820633,-5.570802,9.858726,6.033629,3.951917,-2.437436,0.731110,6.966572,6.206374,8.011455,8.495378,-6.870506,-1.195615,-5.139818,7.829835,-0.495108,3.351969,-4.624645,-1.952309,-3.544776,-8.128664,8.600617,5.988083,-0.372475,-4.013517,4.467435,-0.068409,-7.087981,-5.091014,6.366840,-7.099988,7.462195,-4.039981,-4.365243,3.682274,9.052601,4.594465,-8.747078,8.571318,-2.866360,-8.292205,-5.211386,7.153342,-2.879875,5.543395,5.457537,1.848178,3.311744,3.474738,-8.181104,-2.169045,-7.472216,-1.949620,-4.750656,3.344826,7.903876,-3.863995,-3.302834,4.755635,-8.870363,-1.098643,-1.145062,-5.732285,-4.962494,6.998877,-0.790691,-5.766728,4.054379,0.296672,-3.192871,-2.660695,4.502011,1.705301,5.175217,-8.169269,7.752650,9.047433,-4.162264,8.859236,9.941134,4.932242,-7.878311,-1.262764,-1.368342,-1.573483,-1.126146,2.994315,5.522538,5.123676,8.338626,-1.617185,3.681353,-0.890735,9.046155,-4.864157,-5.574798,3.735403,2.372819,-6.333173,9.963356,-2.987705,-0.791697,0.040571,9.003481,-7.372271,-1.002121,2.498053,-0.381617,8.990017,-9.480582,0.289377,2.815669,3.341463,-0.309923,3.961516,-8.387038,-4.105969,5.048965,0.546004,-5.213654,1.615647,-6.798927,-7.576595,-1.594082,9.783953,4.519321,0.699599,5.855895,1.938795,-3.477602,6.557101,2.872795,7.344967,-5.078764,8.293065,-3.195794,0.839846,2.339415,-3.466253,-2.029020,-2.740001,-9.190480,-7.610194,7.774477,1.061857,-8.202927,-4.694336,-4.590263,-2.948309,-4.753398,-0.776967,-0.076243,-6.086967,2.169574,2.972345,-7.661875,-6.392766,6.193372,-6.594704,-7.184141,7.094420,-3.214642,-9.869645,3.864943,3.289961,-4.894983,3.525672,-0.584595,0.070252,-6.745236,5.494857,-1.753577,0.756628,-0.567229,-4.315792,7.737809,-1.249802,-3.517698,2.385009,2.019737,9.510311,-4.520086,1.063396,-8.434315,-0.706133,0.151227,2.765072,4.164634,-2.161506,-0.415178,5.037164,-1.471798,-3.733321,-6.391146,-9.147576,-2.458150,-4.892576,-1.723569,8.710245,-1.598137,1.657551,2.475782,6.165228,4.637906,7.075738,2.275498,-6.956832,-2.819321,-9.769762,-2.223710,-5.670349,-6.666187,7.700980,-5.542186,-5.986154,-0.096751,3.727898,-6.622423,7.261838,-1.930421,-6.772687,6.783736,1.702020,5.626423,-4.414654,-0.981308,-7.946504,4.026521,-6.533650,3.670604,-8.105978,-2.393876,6.498951,3.207607,8.884618,6.110530,2.749348,-7.161704,-2.601424,-0.457963,0.668576,-7.289665,5.435943,9.378504,6.371050,-9.630902,-4.805301,4.559274,-7.134284,-3.555356,-6.999041,5.232796,-2.265789,-6.434092,4.415335,-4.034618,-2.930633,-3.931316,-8.038679,3.223939,-3.462075,-1.189475,-8.238505,5.988615,-0.994613,-4.541535,9.520704,-4.370113,8.255466,2.210701,6.329179,2.657619,-4.708114,9.339522,8.695622,-7.983876,3.122332,6.023035,1.607171,-5.925157,-1.780250,-6.338258,-2.090491,-3.257196,-9.058812,-5.159885,9.680289,8.785047,5.606381,-8.843593,7.320485,1.144294,9.803044,-2.049644,3.131981,-2.754535,-0.480117,4.746097,8.220965,-2.024230,0.219831,2.520692,6.411428,-6.399947,-9.643434,9.992545,-4.526175,-9.541169,8.349080,-3.964833,5.517504,6.150519,3.773499,-1.879693,-3.366462,-9.718600,7.285111,-4.322044,-6.081707,5.912983,7.975639,-6.826823,6.861441,-4.624991,-8.137529,2.823118,7.875371,9.148246,-2.735534,-9.041847,-1.044345,-6.448438,-3.959000,-6.078501,-4.488881,7.730740,6.689827,6.719103,-4.833046,8.710130,-8.619054,-7.515694,0.386070,-4.335037,6.688878,-7.839571,-5.385375,5.774838,1.417764,5.460358,-7.077894,-8.983227,4.983215,-8.408216,4.652003,-8.365213,7.500529,0.862277,-7.927162,-5.014104,-6.895827,9.527673,2.920850,-4.162281,3.557071,-1.798756,-8.783407,5.428364,-8.896308,-7.331304,4.279249,7.086750,5.389970,-0.041353,6.825212,-8.500750,0.183448,-1.475974,-5.134228,-9.147973,-0.691048,9.549085,8.396713,-3.925350,3.508101,6.035043,6.916438,7.944256,8.942381,-4.538230,-8.790595,6.292388,8.067821,-5.960316,-6.392385,7.944790,-3.524255,9.386417,3.338134,7.302914,-2.246272,5.367121,-8.678623,3.861985,-9.483567,-4.878684,-8.309047,5.789278,9.182847,9.457982,-5.068975,-0.253268,-9.568460,-2.834013,-7.813823,-7.278530,-1.789602,-6.475294,-1.200208,-4.200089,-1.472917,2.035105,-3.260114,-4.277909,-8.060539,1.463820,-4.973870,2.240870,-7.891908,-0.459106,-2.401854,1.063961,-5.813279,5.174386,4.416231,-8.896034,-3.449581,-1.788469,-4.738705,-7.711227,7.701880,3.046731,2.927373,-1.451099,-6.407812,-2.085373,9.519426,6.655752,-3.116511,-8.135439,-3.438909,9.730511,-1.988626,-6.140583,-7.651175,3.047439,-5.561729,5.493090,-2.047497,2.376218], dtype = "float64")#candidate|3539|(1050,)|const|float64
var_3540 = relay.var("var_3540", dtype = "float64", shape = (1320,))#candidate|3540|(1320,)|var|float64
call_3538 = relay.TupleGetItem(func_3011_call(relay.reshape(const_3539.astype('float64'), [5, 210]), relay.reshape(var_3540.astype('float64'), [660, 2]), relay.reshape(call_3532.astype('float64'), [7, 12, 3]), ), 5)
call_3541 = relay.TupleGetItem(func_3015_call(relay.reshape(const_3539.astype('float64'), [5, 210]), relay.reshape(var_3540.astype('float64'), [660, 2]), relay.reshape(call_3532.astype('float64'), [7, 12, 3]), ), 5)
output = relay.Tuple([call_3497,call_3499,call_3516,var_3517,call_3532,call_3534,call_3538,const_3539,var_3540,])
output2 = relay.Tuple([call_3498,call_3500,call_3518,var_3517,call_3533,call_3535,call_3541,const_3539,var_3540,])
func_3553 = relay.Function([var_3517,var_3540,], output)
mod['func_3553'] = func_3553
mod = relay.transform.InferType()(mod)
var_3554 = relay.var("var_3554", dtype = "bool", shape = (600,))#candidate|3554|(600,)|var|bool
var_3555 = relay.var("var_3555", dtype = "float64", shape = (1320,))#candidate|3555|(1320,)|var|float64
output = func_3553(var_3554,var_3555,)
func_3556 = relay.Function([var_3554,var_3555,], output)
mutated_mod['func_3556'] = func_3556
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_3565 = func_1713_call()
call_3566 = func_1713_call()
output = relay.Tuple([call_3565,])
output2 = relay.Tuple([call_3566,])
func_3567 = relay.Function([], output)
mod['func_3567'] = func_3567
mod = relay.transform.InferType()(mod)
mutated_mod['func_3567'] = func_3567
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3567_call = mutated_mod.get_global_var('func_3567')
call_3568 = func_3567_call()
output = call_3568
func_3569 = relay.Function([], output)
mutated_mod['func_3569'] = func_3569
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3601 = relay.var("var_3601", dtype = "int16", shape = (6, 14, 3))#candidate|3601|(6, 14, 3)|var|int16
var_3602 = relay.var("var_3602", dtype = "int16", shape = (6, 14, 3))#candidate|3602|(6, 14, 3)|var|int16
bop_3603 = relay.equal(var_3601.astype('bool'), relay.reshape(var_3602.astype('bool'), relay.shape_of(var_3601))) # shape=(6, 14, 3)
var_3610 = relay.var("var_3610", dtype = "int16", shape = (6, 14, 3))#candidate|3610|(6, 14, 3)|var|int16
bop_3611 = relay.bitwise_xor(var_3601.astype('int8'), relay.reshape(var_3610.astype('int8'), relay.shape_of(var_3601))) # shape=(6, 14, 3)
output = relay.Tuple([bop_3603,bop_3611,])
output2 = relay.Tuple([bop_3603,bop_3611,])
func_3629 = relay.Function([var_3601,var_3602,var_3610,], output)
mod['func_3629'] = func_3629
mod = relay.transform.InferType()(mod)
mutated_mod['func_3629'] = func_3629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3629_call = mutated_mod.get_global_var('func_3629')
var_3631 = relay.var("var_3631", dtype = "int16", shape = (6, 14, 3))#candidate|3631|(6, 14, 3)|var|int16
var_3632 = relay.var("var_3632", dtype = "int16", shape = (6, 14, 3))#candidate|3632|(6, 14, 3)|var|int16
var_3633 = relay.var("var_3633", dtype = "int16", shape = (6, 14, 3))#candidate|3633|(6, 14, 3)|var|int16
call_3630 = func_3629_call(var_3631,var_3632,var_3633,)
output = call_3630
func_3634 = relay.Function([var_3631,var_3632,var_3633,], output)
mutated_mod['func_3634'] = func_3634
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2830_call = mod.get_global_var('func_2830')
func_2831_call = mutated_mod.get_global_var('func_2831')
call_3657 = relay.TupleGetItem(func_2830_call(), 0)
call_3658 = relay.TupleGetItem(func_2831_call(), 0)
output = call_3657
output2 = call_3658
func_3659 = relay.Function([], output)
mod['func_3659'] = func_3659
mod = relay.transform.InferType()(mod)
output = func_3659()
func_3660 = relay.Function([], output)
mutated_mod['func_3660'] = func_3660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1601_call = mod.get_global_var('func_1601')
func_1603_call = mutated_mod.get_global_var('func_1603')
call_3687 = relay.TupleGetItem(func_1601_call(), 1)
call_3688 = relay.TupleGetItem(func_1603_call(), 1)
uop_3689 = relay.sqrt(call_3687.astype('float64')) # shape=(5, 12, 10)
uop_3691 = relay.sqrt(call_3688.astype('float64')) # shape=(5, 12, 10)
uop_3697 = relay.asinh(uop_3689.astype('float64')) # shape=(5, 12, 10)
uop_3699 = relay.asinh(uop_3691.astype('float64')) # shape=(5, 12, 10)
func_1761_call = mod.get_global_var('func_1761')
func_1763_call = mutated_mod.get_global_var('func_1763')
call_3706 = func_1761_call()
call_3707 = func_1761_call()
uop_3714 = relay.acos(uop_3697.astype('float64')) # shape=(5, 12, 10)
uop_3716 = relay.acos(uop_3699.astype('float64')) # shape=(5, 12, 10)
func_3393_call = mod.get_global_var('func_3393')
func_3394_call = mutated_mod.get_global_var('func_3394')
call_3718 = func_3393_call()
call_3719 = func_3393_call()
output = relay.Tuple([call_3706,uop_3714,call_3718,])
output2 = relay.Tuple([call_3707,uop_3716,call_3719,])
func_3729 = relay.Function([], output)
mod['func_3729'] = func_3729
mod = relay.transform.InferType()(mod)
mutated_mod['func_3729'] = func_3729
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3729_call = mutated_mod.get_global_var('func_3729')
call_3730 = func_3729_call()
output = call_3730
func_3731 = relay.Function([], output)
mutated_mod['func_3731'] = func_3731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_3761 = relay.TupleGetItem(func_1585_call(), 0)
call_3762 = relay.TupleGetItem(func_1586_call(), 0)
func_307_call = mod.get_global_var('func_307')
func_308_call = mutated_mod.get_global_var('func_308')
call_3765 = relay.TupleGetItem(func_307_call(), 0)
call_3766 = relay.TupleGetItem(func_308_call(), 0)
output = relay.Tuple([call_3761,call_3765,])
output2 = relay.Tuple([call_3762,call_3766,])
func_3774 = relay.Function([], output)
mod['func_3774'] = func_3774
mod = relay.transform.InferType()(mod)
output = func_3774()
func_3775 = relay.Function([], output)
mutated_mod['func_3775'] = func_3775
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3779 = func_2717_call()
call_3780 = func_2717_call()
output = relay.Tuple([call_3779,])
output2 = relay.Tuple([call_3780,])
func_3795 = relay.Function([], output)
mod['func_3795'] = func_3795
mod = relay.transform.InferType()(mod)
output = func_3795()
func_3796 = relay.Function([], output)
mutated_mod['func_3796'] = func_3796
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2781_call = mod.get_global_var('func_2781')
func_2782_call = mutated_mod.get_global_var('func_2782')
call_3837 = relay.TupleGetItem(func_2781_call(), 0)
call_3838 = relay.TupleGetItem(func_2782_call(), 0)
output = relay.Tuple([call_3837,])
output2 = relay.Tuple([call_3838,])
func_3842 = relay.Function([], output)
mod['func_3842'] = func_3842
mod = relay.transform.InferType()(mod)
mutated_mod['func_3842'] = func_3842
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3842_call = mutated_mod.get_global_var('func_3842')
call_3843 = func_3842_call()
output = call_3843
func_3844 = relay.Function([], output)
mutated_mod['func_3844'] = func_3844
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_3894 = func_140_call()
call_3895 = func_140_call()
output = relay.Tuple([call_3894,])
output2 = relay.Tuple([call_3895,])
func_3899 = relay.Function([], output)
mod['func_3899'] = func_3899
mod = relay.transform.InferType()(mod)
output = func_3899()
func_3900 = relay.Function([], output)
mutated_mod['func_3900'] = func_3900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1281_call = mod.get_global_var('func_1281')
func_1282_call = mutated_mod.get_global_var('func_1282')
call_3913 = relay.TupleGetItem(func_1281_call(), 2)
call_3914 = relay.TupleGetItem(func_1282_call(), 2)
var_3920 = relay.var("var_3920", dtype = "uint16", shape = (594,))#candidate|3920|(594,)|var|uint16
bop_3921 = relay.add(call_3913.astype('float32'), relay.reshape(var_3920.astype('float32'), relay.shape_of(call_3913))) # shape=(594,)
bop_3924 = relay.add(call_3914.astype('float32'), relay.reshape(var_3920.astype('float32'), relay.shape_of(call_3914))) # shape=(594,)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3935 = func_2717_call()
call_3936 = func_2717_call()
output = relay.Tuple([bop_3921,call_3935,])
output2 = relay.Tuple([bop_3924,call_3936,])
func_3937 = relay.Function([var_3920,], output)
mod['func_3937'] = func_3937
mod = relay.transform.InferType()(mod)
mutated_mod['func_3937'] = func_3937
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3938 = relay.var("var_3938", dtype = "uint16", shape = (594,))#candidate|3938|(594,)|var|uint16
func_3937_call = mutated_mod.get_global_var('func_3937')
call_3939 = func_3937_call(var_3938)
output = call_3939
func_3940 = relay.Function([var_3938], output)
mutated_mod['func_3940'] = func_3940
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1859_call = mod.get_global_var('func_1859')
func_1860_call = mutated_mod.get_global_var('func_1860')
call_3942 = relay.TupleGetItem(func_1859_call(), 2)
call_3943 = relay.TupleGetItem(func_1860_call(), 2)
func_989_call = mod.get_global_var('func_989')
func_992_call = mutated_mod.get_global_var('func_992')
var_3949 = relay.var("var_3949", dtype = "bool", shape = (600, 1))#candidate|3949|(600, 1)|var|bool
call_3948 = relay.TupleGetItem(func_989_call(relay.reshape(var_3949.astype('bool'), [5, 12, 10])), 1)
call_3950 = relay.TupleGetItem(func_992_call(relay.reshape(var_3949.astype('bool'), [5, 12, 10])), 1)
func_2416_call = mod.get_global_var('func_2416')
func_2418_call = mutated_mod.get_global_var('func_2418')
call_3957 = func_2416_call()
call_3958 = func_2416_call()
func_2568_call = mod.get_global_var('func_2568')
func_2571_call = mutated_mod.get_global_var('func_2571')
call_3968 = relay.TupleGetItem(func_2568_call(relay.reshape(call_3957.astype('float32'), [7, 12, 3])), 1)
call_3969 = relay.TupleGetItem(func_2571_call(relay.reshape(call_3957.astype('float32'), [7, 12, 3])), 1)
func_1281_call = mod.get_global_var('func_1281')
func_1282_call = mutated_mod.get_global_var('func_1282')
call_3977 = relay.TupleGetItem(func_1281_call(), 2)
call_3978 = relay.TupleGetItem(func_1282_call(), 2)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_3982 = relay.TupleGetItem(func_892_call(), 0)
call_3983 = relay.TupleGetItem(func_894_call(), 0)
func_1368_call = mod.get_global_var('func_1368')
func_1372_call = mutated_mod.get_global_var('func_1372')
const_3991 = relay.const([[5,-2,-4,-4,-6,-8,3,-9,10,1,-6,4,8,-1,-1,-4,-3,-1,-1,-2,10,-5,9,-9,-7,-6,-7,9,4,-8,7,3,-8,6,9,-4,7,4,-5,-7,-5,-7,5,-10,6,-6,-7,2,1,-5,-10,-1,-10,3,10,-8,-4,7,-1,-8,4,9,-1,7,2,4,2,-9,2,6]], dtype = "uint64")#candidate|3991|(1, 70)|const|uint64
call_3990 = relay.TupleGetItem(func_1368_call(relay.reshape(const_3991.astype('uint64'), [70,]), relay.reshape(call_3948.astype('uint64'), [1120,]), ), 3)
call_3992 = relay.TupleGetItem(func_1372_call(relay.reshape(const_3991.astype('uint64'), [70,]), relay.reshape(call_3948.astype('uint64'), [1120,]), ), 3)
func_2830_call = mod.get_global_var('func_2830')
func_2831_call = mutated_mod.get_global_var('func_2831')
call_3997 = relay.TupleGetItem(func_2830_call(), 0)
call_3998 = relay.TupleGetItem(func_2831_call(), 0)
func_1713_call = mod.get_global_var('func_1713')
func_1714_call = mutated_mod.get_global_var('func_1714')
call_4008 = func_1713_call()
call_4009 = func_1713_call()
bop_4018 = relay.greater(call_3990.astype('bool'), var_3949.astype('bool')) # shape=(600, 1120)
bop_4021 = relay.greater(call_3992.astype('bool'), var_3949.astype('bool')) # shape=(600, 1120)
output = relay.Tuple([call_3942,call_3948,call_3957,call_3968,call_3977,call_3982,const_3991,call_3997,call_4008,bop_4018,])
output2 = relay.Tuple([call_3943,call_3950,call_3958,call_3969,call_3978,call_3983,const_3991,call_3998,call_4009,bop_4021,])
func_4028 = relay.Function([var_3949,], output)
mod['func_4028'] = func_4028
mod = relay.transform.InferType()(mod)
var_4029 = relay.var("var_4029", dtype = "bool", shape = (600, 1))#candidate|4029|(600, 1)|var|bool
output = func_4028(var_4029)
func_4030 = relay.Function([var_4029], output)
mutated_mod['func_4030'] = func_4030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3729_call = mod.get_global_var('func_3729')
func_3731_call = mutated_mod.get_global_var('func_3731')
call_4058 = relay.TupleGetItem(func_3729_call(), 1)
call_4059 = relay.TupleGetItem(func_3731_call(), 1)
const_4082 = relay.const([[[2.861492,-3.257449,-1.476380,7.289677,-4.788693,8.658818,1.186664,8.589405,-7.828506,-9.368954],[0.613737,-6.158528,4.683403,9.441181,-0.768061,-0.377540,-9.926475,4.427831,1.997872,-9.264574],[-2.103141,4.025760,-7.926952,-0.728689,-8.922776,0.685677,-5.300050,-6.987943,1.154860,-6.098748],[-5.422758,4.747187,-3.155826,-1.708194,-5.053329,5.779368,-7.169963,-9.468438,5.310829,5.117970],[-8.957505,0.908920,-4.997773,-9.764117,8.526429,-0.928831,5.793776,-4.698796,-4.318549,5.319416],[2.443687,6.499515,8.380246,9.680831,-8.450342,9.858236,7.884799,-3.838662,-1.639171,2.178492],[5.758282,8.094744,-7.232023,-4.653062,-8.692386,9.066838,-0.499180,3.794124,-8.012957,-9.220555],[3.538490,1.232576,-5.812864,0.662155,-8.470400,2.063479,-9.850405,2.497930,-6.450027,3.029831],[0.782169,2.154499,7.597904,-5.205394,7.528665,1.824488,-1.862124,6.339221,-9.209844,0.679179],[-7.034640,-5.641581,1.907441,7.479460,-2.999489,5.979170,3.992001,6.199665,1.762116,-3.451308],[8.338970,-1.377887,5.208186,-3.249040,-5.260778,-2.338870,-1.033836,3.146520,-8.541724,-7.451243],[5.940810,7.496997,-0.899041,8.335626,-7.230688,-2.204852,0.794179,7.024100,-1.139544,-3.289319]],[[0.366641,5.593672,-1.410445,7.787688,5.269637,5.886469,0.416733,4.308487,6.509592,-2.351978],[9.821904,7.748812,4.505659,4.935676,2.862769,-8.755959,-0.483000,-7.334567,-7.226534,-0.952508],[7.887425,-0.070423,-9.622868,-6.804578,-0.549273,0.736558,4.982844,6.778054,2.025290,0.625967],[-3.372811,8.890728,8.842031,5.643505,6.963350,-2.873494,7.546805,-8.347216,-0.681830,-4.745627],[6.851085,-5.739224,-9.983662,8.652614,-4.257270,-1.905853,-8.691713,-3.360267,-8.094925,2.774218],[4.748425,-6.653481,-8.593339,-7.516031,-7.586126,3.795679,-2.376513,-8.700260,5.323433,-8.976797],[-2.105370,7.424795,-9.630374,6.914379,5.815858,-3.021300,-3.443138,-3.594694,1.419905,5.373833],[3.815345,6.934129,2.327304,-5.790336,6.876007,-1.590117,-6.222480,-6.792550,1.271509,6.392771],[-1.316765,0.758125,-3.561027,2.235023,-7.633504,3.667436,-1.404726,7.018369,8.500746,-1.727355],[-2.563127,-8.226104,-9.016664,9.071608,-1.875593,7.690724,3.240092,0.343330,-1.970923,3.703945],[-0.030032,-7.684817,-3.572397,-4.101640,6.613814,-2.148862,2.733601,-8.130067,-1.983547,-6.052690],[-5.538578,6.835027,-5.056163,-8.335244,-3.229959,-8.644899,-2.867729,0.344147,-7.802626,-2.675059]],[[-0.314616,-5.283184,-5.361321,-5.161621,-7.020663,2.396272,-1.756449,-1.113406,-6.838819,2.024149],[7.605814,6.720677,-3.564306,-9.388962,-4.464509,-4.164404,7.552509,-1.753674,-1.033394,-7.422698],[4.082922,2.063923,3.589799,0.447509,-6.273199,-8.113690,-6.114434,-1.327369,-3.165179,9.523534],[7.228857,6.818437,-6.584295,-2.604521,-7.574027,-8.048274,4.930704,2.357551,0.066926,-6.306501],[5.524519,6.994535,-4.317999,-1.334019,-2.721807,8.797047,-5.678441,4.400064,-4.856115,3.816690],[-1.185600,3.489800,1.428082,-1.071998,2.200333,6.398486,0.716547,-6.751583,-7.862091,-5.808429],[-0.400060,-7.148455,6.745618,-5.033896,-9.623884,-8.526175,4.654021,-2.107837,1.707719,9.718622],[2.370211,1.909583,-3.075962,-6.685862,3.383578,8.397822,-0.149961,-6.868024,7.210406,7.603419],[-5.332346,3.998891,1.008533,-8.638507,-1.642714,5.776817,-5.734254,7.155488,-4.769419,8.070566],[-2.871499,-6.159209,7.054416,-3.525748,5.405621,-8.825200,-2.031582,4.156993,9.302554,-9.612284],[4.297191,9.514116,-6.613131,-6.901009,-1.247995,-9.054249,5.310272,6.005475,2.622663,2.720131],[8.634921,-2.244923,3.395861,-4.626357,-6.664554,5.960088,-0.713785,3.223708,2.356882,-3.708211]],[[-6.885625,-9.356045,2.856900,-5.402156,-9.703859,5.438977,6.328747,7.333409,6.433121,7.042084],[-2.143320,2.729223,3.679716,9.748897,0.762184,-8.728491,6.252831,4.562092,-8.494425,0.927149],[5.012606,-7.116627,8.458276,-5.840397,1.237028,-9.739373,-7.256885,4.586375,-6.763208,-7.930810],[-7.527608,9.763223,4.582797,-4.640548,-4.678486,-2.519774,-1.689536,-5.392127,-5.870720,-2.868073],[-4.679182,1.955227,-9.713370,-5.280568,-4.263097,-3.120479,9.697330,-7.642130,-4.483800,-3.133302],[-6.112819,8.879891,-6.207706,-9.297474,-4.902207,-1.423709,0.466741,1.193738,-1.943864,6.563413],[-9.252932,8.157081,9.381967,-4.860546,-6.384348,7.334757,-8.244284,4.084518,-7.999784,5.544344],[-0.666173,-5.553796,-0.301807,-6.202099,6.444105,9.538045,9.464234,-6.698374,-9.875707,7.831809],[1.385725,9.292540,9.807995,-3.162985,5.702840,-3.452793,-6.967997,6.804023,-3.034838,5.117006],[0.159630,4.180327,-7.281396,-9.474625,-1.155200,8.208638,-5.221701,2.646552,-3.910638,4.656511],[-7.000970,2.647500,-6.824386,1.119432,-1.471343,8.984068,9.782001,7.963515,-4.300513,-0.890186],[0.737422,-6.895094,-3.817387,3.321273,-9.336049,-7.595222,-0.312543,1.363199,9.388661,9.018828]],[[3.157575,4.049119,0.254668,-9.494133,-5.819215,-8.596441,6.297917,6.766580,0.020734,-1.386671],[-9.007951,-2.896387,-7.293801,0.490941,-0.813133,-3.935033,1.411170,-7.657890,-8.582383,-5.384409],[1.010647,-4.297512,-6.959424,-7.851352,-4.125456,1.025548,-9.058393,7.218394,6.748558,-9.482577],[7.105457,8.116658,-0.762065,0.050603,4.819131,-9.829874,-1.878891,1.714590,-8.651567,-9.317617],[-8.701223,8.654517,0.673242,0.599549,-4.089252,-4.376313,-1.706089,-1.561370,1.889074,0.420343],[-7.325777,7.586711,-4.375174,7.224379,8.751333,7.673169,2.312240,-2.375974,2.289533,7.811881],[6.615899,4.111354,8.291770,-8.998649,8.226839,8.001357,2.779465,2.341171,0.286306,2.457792],[-2.082225,-7.605158,6.210962,1.531240,5.598593,-3.291523,-7.125443,-6.113062,-1.339811,2.225564],[0.039001,6.033716,8.400674,-9.998043,5.024981,7.482824,7.957568,7.726002,-4.431745,7.437948],[7.589373,-4.959168,-4.984420,5.846661,-6.631972,-6.406967,-1.016824,-7.663751,-4.950721,-2.864345],[-1.555768,-4.077331,-0.670946,8.886668,-1.287858,-4.315998,-0.587165,1.450731,6.546818,9.935044],[8.919325,0.104818,2.322009,-9.937178,6.953571,0.191004,-6.903904,6.680045,9.451982,-2.251432]]], dtype = "float64")#candidate|4082|(5, 12, 10)|const|float64
bop_4083 = relay.power(call_4058.astype('float64'), relay.reshape(const_4082.astype('float64'), relay.shape_of(call_4058))) # shape=(5, 12, 10)
bop_4086 = relay.power(call_4059.astype('float64'), relay.reshape(const_4082.astype('float64'), relay.shape_of(call_4059))) # shape=(5, 12, 10)
func_1945_call = mod.get_global_var('func_1945')
func_1947_call = mutated_mod.get_global_var('func_1947')
var_4088 = relay.var("var_4088", dtype = "float32", shape = (2,))#candidate|4088|(2,)|var|float32
call_4087 = relay.TupleGetItem(func_1945_call(relay.reshape(var_4088.astype('float32'), [2, 1, 1])), 2)
call_4089 = relay.TupleGetItem(func_1947_call(relay.reshape(var_4088.astype('float32'), [2, 1, 1])), 2)
output = relay.Tuple([bop_4083,call_4087,var_4088,])
output2 = relay.Tuple([bop_4086,call_4089,var_4088,])
func_4092 = relay.Function([var_4088,], output)
mod['func_4092'] = func_4092
mod = relay.transform.InferType()(mod)
mutated_mod['func_4092'] = func_4092
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4093 = relay.var("var_4093", dtype = "float32", shape = (2,))#candidate|4093|(2,)|var|float32
func_4092_call = mutated_mod.get_global_var('func_4092')
call_4094 = func_4092_call(var_4093)
output = call_4094
func_4095 = relay.Function([var_4093], output)
mutated_mod['func_4095'] = func_4095
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4160 = relay.const([[[True,True,False,False,True,False,True,True,True],[False,True,False,False,True,False,False,False,True],[False,False,True,False,False,False,True,True,True],[False,True,True,False,False,False,True,True,True],[True,False,True,False,False,False,True,False,False],[True,False,False,False,True,False,False,True,False],[False,False,True,False,False,False,True,True,True],[False,False,False,True,True,False,False,True,True],[True,False,True,True,True,False,True,False,True],[True,False,False,True,False,False,False,False,True]]], dtype = "bool")#candidate|4160|(1, 10, 9)|const|bool
var_4161 = relay.var("var_4161", dtype = "bool", shape = (14, 10, 9))#candidate|4161|(14, 10, 9)|var|bool
bop_4162 = relay.logical_or(const_4160.astype('bool'), var_4161.astype('bool')) # shape=(14, 10, 9)
output = bop_4162
output2 = bop_4162
func_4177 = relay.Function([var_4161,], output)
mod['func_4177'] = func_4177
mod = relay.transform.InferType()(mod)
var_4178 = relay.var("var_4178", dtype = "bool", shape = (14, 10, 9))#candidate|4178|(14, 10, 9)|var|bool
output = func_4177(var_4178)
func_4179 = relay.Function([var_4178], output)
mutated_mod['func_4179'] = func_4179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2594_call = mod.get_global_var('func_2594')
func_2595_call = mutated_mod.get_global_var('func_2595')
call_4184 = relay.TupleGetItem(func_2594_call(), 0)
call_4185 = relay.TupleGetItem(func_2595_call(), 0)
output = call_4184
output2 = call_4185
func_4219 = relay.Function([], output)
mod['func_4219'] = func_4219
mod = relay.transform.InferType()(mod)
output = func_4219()
func_4220 = relay.Function([], output)
mutated_mod['func_4220'] = func_4220
mutated_mod = relay.transform.InferType()(mutated_mod)
func_140_call = mod.get_global_var('func_140')
func_141_call = mutated_mod.get_global_var('func_141')
call_4287 = func_140_call()
call_4288 = func_140_call()
func_307_call = mod.get_global_var('func_307')
func_308_call = mutated_mod.get_global_var('func_308')
call_4290 = relay.TupleGetItem(func_307_call(), 0)
call_4291 = relay.TupleGetItem(func_308_call(), 0)
var_4312 = relay.var("var_4312", dtype = "bool", shape = (5, 8, 5))#candidate|4312|(5, 8, 5)|var|bool
bop_4313 = relay.multiply(call_4290.astype('int32'), relay.reshape(var_4312.astype('int32'), relay.shape_of(call_4290))) # shape=(5, 8, 5)
bop_4316 = relay.multiply(call_4291.astype('int32'), relay.reshape(var_4312.astype('int32'), relay.shape_of(call_4291))) # shape=(5, 8, 5)
const_4319 = relay.const([[[False,True,False,True,True],[True,True,False,True,True],[True,False,False,False,False],[True,False,True,True,True],[False,True,True,True,False],[True,True,False,True,True],[False,False,False,False,True],[True,False,True,True,True]],[[False,True,False,False,True],[False,True,True,False,False],[False,False,True,True,False],[False,True,True,False,False],[False,False,False,False,False],[False,True,False,True,True],[False,True,False,False,True],[True,False,False,True,False]],[[False,True,True,False,True],[True,False,False,False,False],[False,False,False,True,False],[False,True,True,True,False],[False,True,True,False,True],[False,False,True,False,True],[False,False,False,True,False],[True,False,False,True,False]],[[False,False,False,False,True],[False,True,False,True,False],[False,False,True,True,False],[False,True,False,True,True],[True,True,True,False,False],[False,True,False,False,True],[False,True,True,False,True],[False,False,False,False,False]],[[False,False,False,True,True],[False,True,False,True,True],[True,False,False,False,False],[True,False,False,True,True],[True,False,False,False,False],[True,False,True,False,False],[True,False,False,True,False],[True,True,True,True,False]]], dtype = "bool")#candidate|4319|(5, 8, 5)|const|bool
bop_4320 = relay.logical_xor(var_4312.astype('uint32'), relay.reshape(const_4319.astype('uint32'), relay.shape_of(var_4312))) # shape=(5, 8, 5)
uop_4333 = relay.log10(var_4312.astype('float32')) # shape=(5, 8, 5)
output = relay.Tuple([call_4287,bop_4313,bop_4320,uop_4333,])
output2 = relay.Tuple([call_4288,bop_4316,bop_4320,uop_4333,])
func_4342 = relay.Function([var_4312,], output)
mod['func_4342'] = func_4342
mod = relay.transform.InferType()(mod)
var_4343 = relay.var("var_4343", dtype = "bool", shape = (5, 8, 5))#candidate|4343|(5, 8, 5)|var|bool
output = func_4342(var_4343)
func_4344 = relay.Function([var_4343], output)
mutated_mod['func_4344'] = func_4344
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1601_call = mod.get_global_var('func_1601')
func_1603_call = mutated_mod.get_global_var('func_1603')
call_4392 = relay.TupleGetItem(func_1601_call(), 0)
call_4393 = relay.TupleGetItem(func_1603_call(), 0)
func_2781_call = mod.get_global_var('func_2781')
func_2782_call = mutated_mod.get_global_var('func_2782')
call_4441 = relay.TupleGetItem(func_2781_call(), 0)
call_4442 = relay.TupleGetItem(func_2782_call(), 0)
output = relay.Tuple([call_4392,call_4441,])
output2 = relay.Tuple([call_4393,call_4442,])
func_4459 = relay.Function([], output)
mod['func_4459'] = func_4459
mod = relay.transform.InferType()(mod)
mutated_mod['func_4459'] = func_4459
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4459_call = mutated_mod.get_global_var('func_4459')
call_4460 = func_4459_call()
output = call_4460
func_4461 = relay.Function([], output)
mutated_mod['func_4461'] = func_4461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3393_call = mod.get_global_var('func_3393')
func_3394_call = mutated_mod.get_global_var('func_3394')
call_4474 = func_3393_call()
call_4475 = func_3393_call()
var_4514 = relay.var("var_4514", dtype = "float32", shape = (7, 12, 3))#candidate|4514|(7, 12, 3)|var|float32
bop_4515 = relay.add(call_4474.astype('int32'), relay.reshape(var_4514.astype('int32'), relay.shape_of(call_4474))) # shape=(7, 12, 3)
bop_4518 = relay.add(call_4475.astype('int32'), relay.reshape(var_4514.astype('int32'), relay.shape_of(call_4475))) # shape=(7, 12, 3)
func_3774_call = mod.get_global_var('func_3774')
func_3775_call = mutated_mod.get_global_var('func_3775')
call_4533 = relay.TupleGetItem(func_3774_call(), 0)
call_4534 = relay.TupleGetItem(func_3775_call(), 0)
output = relay.Tuple([bop_4515,call_4533,])
output2 = relay.Tuple([bop_4518,call_4534,])
func_4536 = relay.Function([var_4514,], output)
mod['func_4536'] = func_4536
mod = relay.transform.InferType()(mod)
var_4537 = relay.var("var_4537", dtype = "float32", shape = (7, 12, 3))#candidate|4537|(7, 12, 3)|var|float32
output = func_4536(var_4537)
func_4538 = relay.Function([var_4537], output)
mutated_mod['func_4538'] = func_4538
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3774_call = mod.get_global_var('func_3774')
func_3775_call = mutated_mod.get_global_var('func_3775')
call_4658 = relay.TupleGetItem(func_3774_call(), 1)
call_4659 = relay.TupleGetItem(func_3775_call(), 1)
var_4665 = relay.var("var_4665", dtype = "bool", shape = (5, 8, 5))#candidate|4665|(5, 8, 5)|var|bool
bop_4666 = relay.add(call_4658.astype('uint64'), relay.reshape(var_4665.astype('uint64'), relay.shape_of(call_4658))) # shape=(5, 8, 5)
bop_4669 = relay.add(call_4659.astype('uint64'), relay.reshape(var_4665.astype('uint64'), relay.shape_of(call_4659))) # shape=(5, 8, 5)
output = bop_4666
output2 = bop_4669
func_4688 = relay.Function([var_4665,], output)
mod['func_4688'] = func_4688
mod = relay.transform.InferType()(mod)
var_4689 = relay.var("var_4689", dtype = "bool", shape = (5, 8, 5))#candidate|4689|(5, 8, 5)|var|bool
output = func_4688(var_4689)
func_4690 = relay.Function([var_4689], output)
mutated_mod['func_4690'] = func_4690
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4759 = relay.var("var_4759", dtype = "uint8", shape = (9, 6, 12))#candidate|4759|(9, 6, 12)|var|uint8
var_4760 = relay.var("var_4760", dtype = "uint8", shape = (9, 6, 12))#candidate|4760|(9, 6, 12)|var|uint8
bop_4761 = relay.bitwise_or(var_4759.astype('uint8'), relay.reshape(var_4760.astype('uint8'), relay.shape_of(var_4759))) # shape=(9, 6, 12)
func_4028_call = mod.get_global_var('func_4028')
func_4030_call = mutated_mod.get_global_var('func_4030')
const_4766 = relay.const([True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False], dtype = "bool")#candidate|4766|(600,)|const|bool
call_4765 = relay.TupleGetItem(func_4028_call(relay.reshape(const_4766.astype('bool'), [600, 1])), 1)
call_4767 = relay.TupleGetItem(func_4030_call(relay.reshape(const_4766.astype('bool'), [600, 1])), 1)
uop_4770 = relay.sinh(var_4760.astype('float64')) # shape=(9, 6, 12)
output = relay.Tuple([bop_4761,call_4765,const_4766,uop_4770,])
output2 = relay.Tuple([bop_4761,call_4767,const_4766,uop_4770,])
func_4780 = relay.Function([var_4759,var_4760,], output)
mod['func_4780'] = func_4780
mod = relay.transform.InferType()(mod)
var_4781 = relay.var("var_4781", dtype = "uint8", shape = (9, 6, 12))#candidate|4781|(9, 6, 12)|var|uint8
var_4782 = relay.var("var_4782", dtype = "uint8", shape = (9, 6, 12))#candidate|4782|(9, 6, 12)|var|uint8
output = func_4780(var_4781,var_4782,)
func_4783 = relay.Function([var_4781,var_4782,], output)
mutated_mod['func_4783'] = func_4783
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2416_call = mod.get_global_var('func_2416')
func_2418_call = mutated_mod.get_global_var('func_2418')
call_4810 = func_2416_call()
call_4811 = func_2416_call()
func_3056_call = mod.get_global_var('func_3056')
func_3059_call = mutated_mod.get_global_var('func_3059')
const_4836 = relay.const([[True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False],[False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True]], dtype = "bool")#candidate|4836|(2, 120)|const|bool
call_4835 = relay.TupleGetItem(func_3056_call(relay.reshape(const_4836.astype('bool'), [3, 16, 5]), relay.reshape(const_4836.astype('bool'), [3, 16, 5]), ), 0)
call_4837 = relay.TupleGetItem(func_3059_call(relay.reshape(const_4836.astype('bool'), [3, 16, 5]), relay.reshape(const_4836.astype('bool'), [3, 16, 5]), ), 0)
output = relay.Tuple([call_4810,call_4835,const_4836,])
output2 = relay.Tuple([call_4811,call_4837,const_4836,])
func_4838 = relay.Function([], output)
mod['func_4838'] = func_4838
mod = relay.transform.InferType()(mod)
mutated_mod['func_4838'] = func_4838
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4838_call = mutated_mod.get_global_var('func_4838')
call_4839 = func_4838_call()
output = call_4839
func_4840 = relay.Function([], output)
mutated_mod['func_4840'] = func_4840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3567_call = mod.get_global_var('func_3567')
func_3569_call = mutated_mod.get_global_var('func_3569')
call_4845 = relay.TupleGetItem(func_3567_call(), 0)
call_4846 = relay.TupleGetItem(func_3569_call(), 0)
output = call_4845
output2 = call_4846
func_4847 = relay.Function([], output)
mod['func_4847'] = func_4847
mod = relay.transform.InferType()(mod)
output = func_4847()
func_4848 = relay.Function([], output)
mutated_mod['func_4848'] = func_4848
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1601_call = mod.get_global_var('func_1601')
func_1603_call = mutated_mod.get_global_var('func_1603')
call_4892 = relay.TupleGetItem(func_1601_call(), 0)
call_4893 = relay.TupleGetItem(func_1603_call(), 0)
uop_4910 = relay.sin(call_4892.astype('float32')) # shape=(7, 12, 3)
uop_4912 = relay.sin(call_4893.astype('float32')) # shape=(7, 12, 3)
func_2225_call = mod.get_global_var('func_2225')
func_2227_call = mutated_mod.get_global_var('func_2227')
call_4913 = relay.TupleGetItem(func_2225_call(), 1)
call_4914 = relay.TupleGetItem(func_2227_call(), 1)
func_3086_call = mod.get_global_var('func_3086')
func_3088_call = mutated_mod.get_global_var('func_3088')
const_4936 = relay.const([False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False], dtype = "bool")#candidate|4936|(2160,)|const|bool
call_4935 = relay.TupleGetItem(func_3086_call(relay.reshape(const_4936.astype('bool'), [16, 9, 15])), 1)
call_4937 = relay.TupleGetItem(func_3088_call(relay.reshape(const_4936.astype('bool'), [16, 9, 15])), 1)
func_1368_call = mod.get_global_var('func_1368')
func_1372_call = mutated_mod.get_global_var('func_1372')
const_4939 = relay.const([-4,-7,-3,-8,10,10,7,7,-4,9,5,-7,5,5,-3,-1,5,9,-6,4,2,-5,2,5,8,7,9,4,-2,-1,1,3,3,-5,-10,6,-3,-10,-3,-10,-8,6,2,5,-9,8,-2,8,-2,4,-10,-1,1,9,-6,-7,-7,-6,-5,5,-9,5,-4,7,-4,6,-1,-10,-8,-6], dtype = "uint64")#candidate|4939|(70,)|const|uint64
const_4940 = relay.const([3,-8,-4,-1,-8,-2,4,-8,9,-9,-9,-4,3,-7,8,-2,9,-1,-4,4,5,-8,1,9,9,7,-8,-4,-2,-10,6,-3,-3,-2,9,2,1,2,-6,-3,8,-3,-10,-9,-10,3,10,-5,-10,-3,-2,-4,5,-6,-6,-7,1,-3,7,-1,1,-4,-2,8,-3,-3,-6,-9,-3,-3,6,-5,10,-7,-2,-3,-4,7,-4,-8,-6,4,-7,6,-2,9,8,4,-4,4,-1,10,-4,1,-2,6,1,-3,-7,-8,-7,-6,3,-5,-10,2,8,7,8,1,-9,1,9,8,-4,-4,5,8,-9,-2,5,-2,-7,4,-7,7,-2,-5,4,-6,10,-9,-9,3,-1,-6,-1,9,7,3,-10,9,-1,-4,8,5,-1,4,-5,-7,2,-5,2,-8,1,5,2,-5,8,1,-3,-5,3,6,6,4,-9,-10,-5,1,10,7,-10,8,-6,-4,-3,3,10,-4,3,6,-9,4,-5,-9,-1,-10,9,-6,4,3,-3,-5,-8,-1,1,4,6,-5,2,-7,-10,-1,2,3,-9,5,-5,-7,3,3,-9,-5,4,3,4,9,6,3,7,-6,-2,-10,-3,-9,9,4,10,1,9,-2,-6,7,10,10,5,6,6,4,7,10,7,3,3,-3,-10,5,5,5,-1,-5,-8,-4,10,-6,3,-2,9,-10,-9,-3,8,-4,2,-10,-2,-7,-9,7,-9,6,-10,-4,6,-9,7,-6,2,1,9,4,8,4,-2,-7,-7,-5,-5,-3,-5,10,6,10,-5,-3,2,-6,1,-8,-4,-6,-1,-5,3,7,-4,-1,-2,10,10,4,1,2,1,-4,6,5,2,4,-9,3,-10,6,3,-3,-9,5,-6,-1,9,-3,7,2,9,-5,1,-4,2,4,5,-8,-2,-4,2,-9,-3,5,2,9,5,2,6,6,-5,3,6,2,-8,10,4,-8,6,6,3,1,-1,-4,8,-5,10,3,-3,8,1,-9,9,-1,3,3,3,1,-9,-1,7,-10,-7,-7,-7,-10,-4,5,-8,-10,-2,-4,9,8,-4,-6,8,2,-10,4,5,-6,-4,-4,-7,-5,9,3,7,-7,2,-4,9,4,2,-7,-3,-5,5,-1,-4,-1,-6,-3,6,3,-3,-8,2,2,-1,10,3,1,7,-2,8,5,8,8,8,-3,10,-3,-5,-4,-5,8,-4,-8,1,-1,3,-5,-6,6,4,-4,1,7,-4,2,-7,-9,-9,1,7,1,10,3,-10,-9,-8,-1,2,-7,-8,6,-9,-6,2,-10,-1,-10,-8,-6,-4,3,10,3,9,-8,8,4,-7,-6,10,-7,-7,-2,2,3,7,-7,9,10,-9,9,-10,-5,-5,-7,4,-6,3,-6,-9,10,-5,4,-7,6,-3,-3,7,-2,-6,-7,-5,1,-2,2,6,-9,8,-6,8,-1,8,5,-2,8,-8,-8,8,10,6,3,-1,-2,-6,4,-4,-6,-8,8,10,10,2,10,9,4,-9,7,9,-10,2,10,8,-8,7,-8,5,4,8,-9,-1,2,2,-1,-1,-8,5,-8,-4,-3,6,5,-9,-9,2,-4,3,-2,-7,5,-5,2,-1,-5,9,-3,9,-6,-8,9,-3,10,9,10,-8,-6,8,-5,8,-1,9,-2,3,-1,3,8,1,3,-3,-9,-7,-3,1,-3,9,-6,9,9,5,10,9,3,7,3,-8,10,5,2,3,-5,-9,-3,10,-10,-3,3,10,4,-2,9,7,-5,5,10,-3,2,-7,-10,-10,-4,-3,-7,-2,4,7,-4,-3,1,-6,-5,6,-1,-4,-2,3,7,4,1,-4,2,8,-10,-4,-10,9,-9,3,-10,1,1,-1,-2,-2,-10,7,2,5,6,-10,-2,-4,-6,1,3,-1,7,-5,-6,9,-5,-6,-2,6,4,6,5,-7,6,8,-9,8,-10,5,7,-1,-2,9,2,4,1,10,-2,8,6,-1,-8,2,-9,-3,-1,-1,3,-7,-5,-1,-4,4,-9,-8,-10,-9,-8,-6,6,-5,6,-1,6,-4,-2,-7,5,4,4,8,-1,-2,-5,-5,-10,1,-8,4,10,-5,2,-9,-5,-2,7,3,-6,6,-3,-4,5,8,-8,7,2,-2,-6,-3,6,-8,-5,10,7,-3,-10,3,4,9,4,2,8,2,5,-4,9,3,-4,5,2,2,-5,-7,6,1,-10,8,6,-3,-3,3,1,-8,-2,8,1,6,-5,-6,-9,-3,-9,8,-10,10,9,9,-1,7,-4,-5,-3,2,4,-10,-5,1,-5,1,9,3,5,8,-3,-7,-7,1,-5,-1,8,-1,6,9,10,-9,1,1,-5,2,-3,4,-5,-2,-7,9,-6,-8,-2,-4,-9,5,6,-8,4,-1,-2,9,-2,-8,-5,4,-9,2,1,8,-10,10,9,-8,-9,-2,-6,6,1,6,-3,7,-5,3,-6,6,4,-9,5,9,-6,2,-1,9,4,-10,-8,-9,8,10,5,-10,-3,3,6,-1,5,6,4,10,3,-7,8,3,-1,2,1,4,-10,-2,-1,1,-8,1,-2,-2,-2,-5,8,-10,1,5,-3,5,-10,-2,-2,8,-9,2,2,6,4,6,-9,10,-8,1,-6,7,-3,-8,3,5,-4,3,2,2,1,7,-4,-10,-2,8,-7,-5,-5,7,6,9,-8,8,2,-5,7,2,7,-8,3,8,-10,-2,3,-2,-1,2,5,-1,-9,-1,8,-2,7,5,-5,-2,7,1,-5,-10,-5,-8,-2,7,-7,10,2,-2,1,3,-2,2,-10,9,5,2,4,10,8,1,-6,1,-4,-8,-10,-2,5,2,-4,-1,-4,9,-2,6,-4,7,8,7,3,-7,-6,7,-1,-9,2,4,-2,6,1,5,-8,5,-4,-8,-8,10,-5,7,8,3,-5,-7,-1,2,4,-7,-2,8,5,-3,-4,8,1,-7,3,-10,10,-5,10,-1,5], dtype = "uint64")#candidate|4940|(1120,)|const|uint64
call_4938 = relay.TupleGetItem(func_1368_call(relay.reshape(const_4939.astype('uint64'), [70,]), relay.reshape(const_4940.astype('uint64'), [1120,]), ), 1)
call_4941 = relay.TupleGetItem(func_1372_call(relay.reshape(const_4939.astype('uint64'), [70,]), relay.reshape(const_4940.astype('uint64'), [1120,]), ), 1)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_4949 = relay.TupleGetItem(func_892_call(), 0)
call_4950 = relay.TupleGetItem(func_894_call(), 0)
func_804_call = mod.get_global_var('func_804')
func_807_call = mutated_mod.get_global_var('func_807')
const_4953 = relay.const([-2.618393,-0.606353,3.759515,9.808919,-0.601038,6.519738,-5.423622,3.470466,2.869553,-0.619702,-3.575223,8.923701,3.144561,1.830528,8.711709,-8.630316,-0.840596,8.323033,-7.795792,9.862044,1.389815,-9.938295,7.611042,3.080223,1.665385,-4.795923,6.057902,-7.543033,-3.935044,7.747053,-6.726063,9.998516,-5.186685,-0.142602,6.568378,3.123049,4.748730,7.023780,-8.662242,7.745710,-9.339565,9.151045,-8.786817,-6.576945,8.783211,-2.006443,6.013733,6.377948,-3.483745,-9.575123,5.122031,-5.740643,0.308827,3.627874,-2.531557,-5.657324,-3.875225,-3.986460,1.605833,1.165691,-0.029677,-7.614576,6.030721,-8.764319,3.919506,-0.456508,-8.217907,6.470097,-0.214127,3.562893,-6.004048,4.391307,8.953088,4.636670,-6.083975,-0.831226,-2.732700,-4.901644,-3.956297,7.597481,-8.194713,-2.791897,6.444313,-0.029925,-6.577120,-1.726390,5.377773,2.918297,-0.410802,5.710009,-7.857114,7.844551,-7.208376,-6.327169,-8.683239,3.141150,6.334107,-9.902463,5.849725,-8.500112,-4.932732,-4.896696,-1.468338,5.213060,-5.359003,4.163458,-1.477413,5.993679,6.216091,2.868804,-0.941489,-7.391746,-1.558097,-7.443757,3.697815,6.039335,8.895573,-2.029995,0.828302,-8.997715,-6.791695,-8.659594,0.014380,-0.940857,-2.011050,-8.237960,-9.575206,-6.573711,6.409802,-3.049925,-7.632624,2.193913,-9.251337,4.831902,9.626109,0.393891,-2.228149,-8.582131,-2.844648,-5.078721,-9.935472,0.880656,8.606834,2.440348,-6.588748,8.814617,2.165217,-4.707339,-4.285620,1.616698,-2.942561,-5.275565,1.709374,-6.258597,3.689181,-0.700856,5.427854,-2.524756,3.674005,-8.081158,3.057487,-1.881243,-4.665679,-3.126146,7.257028,-8.158368,5.291711,-4.869579,4.635523,-0.840772,5.330397,-6.526020,-4.050055,5.101458,-4.697434,2.551590,3.377190,-6.761588,-9.161941,7.322898,-9.722642,9.138552,-1.888392,-7.661128,-9.297222,-9.139176,1.183593,9.360449,2.209864,-1.014678,-3.588144,1.845129,4.899389,6.162240,4.157412,1.694292,-4.155025,6.037629,-8.492352,-9.638309], dtype = "float32")#candidate|4953|(200,)|const|float32
call_4952 = relay.TupleGetItem(func_804_call(relay.reshape(const_4953.astype('float32'), [5, 8, 5])), 0)
call_4954 = relay.TupleGetItem(func_807_call(relay.reshape(const_4953.astype('float32'), [5, 8, 5])), 0)
func_3086_call = mod.get_global_var('func_3086')
func_3088_call = mutated_mod.get_global_var('func_3088')
call_4955 = relay.TupleGetItem(func_3086_call(relay.reshape(const_4936.astype('bool'), [16, 9, 15])), 1)
call_4956 = relay.TupleGetItem(func_3088_call(relay.reshape(const_4936.astype('bool'), [16, 9, 15])), 1)
output = relay.Tuple([uop_4910,call_4913,call_4935,const_4936,call_4938,const_4939,const_4940,call_4949,call_4952,const_4953,call_4955,])
output2 = relay.Tuple([uop_4912,call_4914,call_4937,const_4936,call_4941,const_4939,const_4940,call_4950,call_4954,const_4953,call_4956,])
func_4966 = relay.Function([], output)
mod['func_4966'] = func_4966
mod = relay.transform.InferType()(mod)
output = func_4966()
func_4967 = relay.Function([], output)
mutated_mod['func_4967'] = func_4967
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5038 = relay.const([[[-0.500223,9.329048,-1.668980,0.419286,-4.605956,4.282558,7.528000],[-5.566264,-9.371638,9.633762,-9.857797,8.751834,-0.044433,8.557887],[-4.237347,-6.199699,7.930074,0.519580,9.339342,-6.968487,-8.429830],[-9.191730,6.205992,-1.391229,-1.347151,-5.535276,8.915361,3.584424],[-4.727283,3.104557,-7.077234,1.573006,-0.215858,4.954132,5.076373],[8.896815,6.587859,8.198885,3.901508,-5.377466,3.238776,-3.218150],[6.348698,4.444495,8.812884,-9.470518,-8.950712,9.628810,-9.381996],[7.100423,-1.832211,-6.012637,-1.211259,1.766607,5.450383,1.672953],[-7.006475,-9.603716,5.741608,4.259217,-0.771886,-1.146019,-5.757179],[7.724493,-2.281948,-8.642909,-1.831606,9.834867,3.227471,-0.336641]],[[-9.463369,2.243428,6.612702,-5.453329,9.017955,3.655501,-3.247768],[8.778905,-0.475760,3.760663,6.133923,7.366300,-7.611203,-8.298773],[8.524737,3.184250,-9.667589,4.928520,-9.788876,-1.534103,1.702610],[6.470070,-0.968772,-2.447890,-3.098443,9.852707,-7.322867,2.473481],[4.041454,-1.362870,-3.349261,9.764578,-6.628837,-7.014930,-1.711720],[7.025225,3.391057,4.354266,0.480302,-8.168537,-4.989801,7.866644],[-4.091568,7.604918,-6.917553,1.658939,0.632999,6.063295,4.466814],[-2.410118,-7.608655,3.618386,0.163694,7.660969,4.466967,-8.841446],[-2.577397,-4.722147,-5.056299,-7.358441,9.765835,5.486573,-1.248708],[-4.731062,-8.285826,-5.157463,-2.422908,-1.533564,-5.994668,-4.213766]],[[7.165997,9.204391,-3.911935,0.140715,-9.367659,5.346278,0.153863],[-8.546223,3.409943,5.563625,-6.779407,2.106088,9.200554,-4.018431],[5.239103,2.410959,8.934681,-3.915594,-4.842432,-9.054446,-2.334478],[-2.529283,-2.495621,0.741108,-7.189358,2.209776,-3.138314,5.168484],[9.020471,-0.727965,0.489193,3.088886,-8.819068,-8.491896,9.583182],[4.298994,0.072630,9.986294,3.328141,6.062261,4.305252,-6.614909],[7.155327,-5.349491,6.503489,-1.099997,-8.396602,1.490361,8.697727],[-4.015614,-4.466085,-7.399458,4.612587,1.309049,4.642995,-4.081491],[7.453357,-8.660168,7.543911,2.658500,5.493688,8.034896,-2.658448],[3.727766,-6.084807,-4.622894,9.350543,-5.660061,9.261872,6.457041]],[[4.934125,1.564068,-8.288310,2.711913,-9.284051,-3.364652,-6.312942],[-8.663563,-1.880003,5.678687,8.702157,4.232659,-6.214680,5.819363],[3.291653,-2.879173,3.105132,-5.437114,-0.873406,6.283964,-2.641182],[-8.825593,6.681125,8.550911,-9.949228,-0.263966,8.629605,0.618305],[-5.350272,2.148881,7.555552,-6.276965,4.467317,2.206403,-9.490810],[6.055160,-8.930634,-3.103851,-2.077718,-8.458562,-0.561235,-2.234187],[-1.290416,9.130323,-9.525971,9.421200,9.595165,-2.776315,-4.610677],[-5.927427,-2.327228,5.314448,3.272567,-2.878377,-8.982242,1.941668],[-6.919308,-6.433559,7.007361,0.404358,-8.150088,7.492590,-9.146024],[-3.870235,7.656812,4.986273,-4.711379,0.719196,-2.813880,0.098860]],[[-2.797811,4.394098,-3.090286,1.019433,-5.398458,-5.405275,7.175103],[-0.200632,1.823382,-8.797877,1.861615,0.222263,7.632562,5.163474],[-1.543223,-2.065605,6.984219,3.429741,8.041140,7.536932,8.264782],[-4.307635,-8.857316,-8.731069,7.178838,-4.570270,4.214792,2.423415],[-8.135372,-4.623834,9.905689,5.605768,6.361699,4.702921,-5.567124],[-1.309702,-4.476657,-0.412967,9.424274,-7.245276,-8.124131,1.891091],[-5.934891,-8.552895,2.994395,-4.239547,6.386413,-1.951333,-5.029248],[2.493701,-1.431580,7.223662,-7.944457,7.636889,-6.304229,-7.034989],[0.186775,-7.570727,-4.610227,-3.895508,-0.092476,8.898990,0.931450],[-2.808866,2.189429,-3.480430,3.400566,-2.549492,3.095107,4.317765]],[[5.554059,-8.489805,0.140311,3.001981,8.014597,3.456688,-3.263636],[4.905586,-3.390852,9.178652,6.921141,-6.439411,4.698871,-3.293293],[-6.325285,2.688664,-6.530397,-8.071579,-0.752166,9.596002,-8.259106],[6.587385,9.240773,-4.957474,-5.923953,8.316515,2.385653,-1.155008],[-5.184705,7.752137,-4.976362,8.821610,2.521606,-3.535649,9.903343],[5.923276,1.171072,-0.467451,-0.925488,-4.519094,-7.188494,-1.512341],[5.900765,3.693074,-3.943099,3.462743,8.246688,4.326705,-0.306205],[-4.572485,3.755019,4.135060,7.791209,-9.153989,-3.923559,-2.560492],[-3.290228,-3.711125,-1.308302,-1.955201,7.643282,2.492652,-7.546538],[1.638072,1.936978,-8.403503,1.053580,1.261007,8.279040,-7.096662]],[[-7.425125,-5.329115,-5.437438,0.566084,-4.907969,3.765523,0.839604],[-4.284894,3.742114,-2.555511,-0.061530,6.550759,3.379765,-9.417697],[-4.435048,-0.657125,7.793181,-9.767552,-3.118125,-2.950246,3.539719],[-5.752431,2.405610,-0.936681,-1.868184,2.876046,1.554538,-1.651495],[8.681086,7.737148,-2.050845,-8.995190,-6.525230,8.260731,-3.846163],[-3.922322,7.760246,-6.291090,9.042986,5.282925,-8.293799,-9.862176],[0.515002,-7.049299,4.639242,1.691712,3.227117,-3.480192,-9.455686],[-7.450901,6.973721,-8.870171,8.100363,0.541077,2.002202,-1.390027],[2.294963,4.626208,-3.661658,0.777705,7.858276,3.876592,4.056623],[-7.549181,8.124315,-1.750638,3.594440,1.499349,-8.569785,-8.736905]],[[6.767521,6.531764,5.236377,3.246402,-6.147221,-1.983208,3.605559],[-1.109799,6.745894,-4.883945,-4.798399,4.529148,2.257980,-0.903402],[-1.987117,0.824648,-7.929468,-5.791163,8.578939,8.165337,7.868365],[4.312051,7.208166,3.598373,8.603112,6.280816,-0.999670,9.256102],[6.860191,7.920517,-1.189141,1.096104,7.971982,1.628997,9.680615],[-3.946194,-0.452526,-6.433103,-1.613881,-4.321863,2.457618,4.324078],[-1.272015,-6.366472,-4.102416,4.773444,-6.656832,1.664196,9.182046],[8.364176,2.228856,0.798828,6.873627,3.010302,2.860769,9.597768],[1.444218,-2.047866,-8.023335,9.689981,1.219313,2.294794,9.549807],[7.517931,0.723956,-7.197322,6.046880,-4.108412,2.693818,-2.432794]],[[9.026561,9.898003,-9.647562,5.269853,-8.672671,7.223062,5.783235],[-7.525092,-3.732834,0.803477,-1.004032,-4.127629,6.612046,-0.118552],[2.293464,0.390118,7.441257,6.879553,7.548603,-3.301065,-2.037811],[6.363296,-6.776459,-8.341906,1.159314,5.689385,0.700730,1.922721],[-7.643065,0.759064,-2.774088,7.111992,-1.649188,8.631161,3.516433],[7.607816,-2.806472,2.617017,-7.049531,2.328949,-1.606176,7.568187],[-8.818819,-2.291698,8.216189,-0.896185,6.617195,4.996574,3.585928],[8.122720,-5.163632,-9.424414,7.287501,0.531086,9.982555,6.888635],[0.927404,-2.512050,-5.221506,6.869644,-3.792820,2.962493,2.046783],[6.877981,-9.920616,2.842444,-9.684397,2.854029,6.689366,7.468403]],[[3.170566,-3.449530,-1.094782,-0.049513,-6.726751,-9.615075,-5.869469],[-4.895608,-1.860075,-5.480961,-3.583223,1.558502,7.885538,-7.124701],[1.097227,9.315076,-5.925124,-9.464089,-8.551575,5.459654,-1.991300],[-5.190632,-6.558440,-7.577992,-4.402510,0.977032,-5.766654,7.125392],[5.770153,-3.769255,-5.548478,3.067530,-6.785022,7.439205,-6.395535],[9.675708,-4.737029,0.580990,-0.306464,7.589928,-1.549406,2.598332],[8.202715,-1.396052,-8.737094,3.749683,9.210297,4.409802,-6.227476],[-4.564229,-5.150500,6.071451,1.974508,0.251673,-9.600752,2.088119],[4.349638,3.676323,6.332534,5.424292,0.586229,-1.925299,8.042323],[-1.577925,-2.300428,-4.181823,-1.115030,7.226710,3.299416,4.519047]],[[7.887608,-2.541708,7.656915,0.014318,-2.725616,-4.020394,-4.817534],[-7.072080,-9.556490,8.448882,8.453071,6.502386,-2.412221,-4.305258],[3.967243,0.171554,-9.819969,7.233245,-5.330390,-1.890352,9.676264],[-9.366105,-5.703079,0.549812,6.161135,1.363370,7.720829,-9.524779],[-0.399895,2.750682,-5.737135,-2.517872,-3.256303,-0.789742,6.034923],[2.093418,7.910706,-4.822976,-3.954429,-7.917749,-8.545238,6.344894],[2.049758,0.239838,-6.376446,8.019507,-8.208331,2.331684,-7.360798],[1.201613,-8.884853,-7.666105,-0.215238,9.322553,1.237867,-3.815670],[-0.673585,3.033817,8.062129,3.890548,6.160047,-0.245704,-1.364510],[-8.106495,6.319105,-7.674577,6.941084,6.663428,0.079508,-2.882276]],[[-0.364973,3.643521,-1.898800,-9.122264,5.990932,6.629703,3.611648],[-3.947670,9.773071,-9.925927,-2.662648,1.744763,5.405604,2.542341],[5.454659,6.721577,-7.361180,-1.917501,9.489089,-8.634441,-4.243935],[2.537105,6.462841,-3.099149,4.407080,1.597029,5.877054,5.933767],[8.159972,-7.309836,-5.286512,8.577350,-2.823724,-4.557992,-9.154572],[-5.437641,-1.049917,-0.366890,-3.681745,9.094724,6.085058,0.532287],[8.291713,-9.652574,-4.711807,4.850415,-2.888457,5.977233,5.624669],[0.923019,2.068306,-4.111553,7.032612,1.716942,9.673703,6.551707],[-1.947461,-1.040418,6.704983,-8.946864,1.581095,0.432117,-8.123124],[-4.521787,-3.625942,-2.614908,0.772657,5.317048,4.132513,-1.977140]]], dtype = "float32")#candidate|5038|(12, 10, 7)|const|float32
uop_5039 = relay.rsqrt(const_5038.astype('float32')) # shape=(12, 10, 7)
bop_5051 = relay.maximum(const_5038.astype('uint16'), relay.reshape(uop_5039.astype('uint16'), relay.shape_of(const_5038))) # shape=(12, 10, 7)
var_5059 = relay.var("var_5059", dtype = "uint16", shape = (12, 10, 7))#candidate|5059|(12, 10, 7)|var|uint16
bop_5060 = relay.logical_and(bop_5051.astype('bool'), relay.reshape(var_5059.astype('bool'), relay.shape_of(bop_5051))) # shape=(12, 10, 7)
func_4838_call = mod.get_global_var('func_4838')
func_4840_call = mutated_mod.get_global_var('func_4840')
call_5074 = relay.TupleGetItem(func_4838_call(), 1)
call_5075 = relay.TupleGetItem(func_4840_call(), 1)
output = relay.Tuple([bop_5060,call_5074,])
output2 = relay.Tuple([bop_5060,call_5075,])
func_5078 = relay.Function([var_5059,], output)
mod['func_5078'] = func_5078
mod = relay.transform.InferType()(mod)
mutated_mod['func_5078'] = func_5078
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5079 = relay.var("var_5079", dtype = "uint16", shape = (12, 10, 7))#candidate|5079|(12, 10, 7)|var|uint16
func_5078_call = mutated_mod.get_global_var('func_5078')
call_5080 = func_5078_call(var_5079)
output = call_5080
func_5081 = relay.Function([var_5079], output)
mutated_mod['func_5081'] = func_5081
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_5120 = func_2717_call()
call_5121 = func_2717_call()
func_4092_call = mod.get_global_var('func_4092')
func_4095_call = mutated_mod.get_global_var('func_4095')
const_5123 = relay.const([8.860859,3.979181], dtype = "float32")#candidate|5123|(2,)|const|float32
call_5122 = relay.TupleGetItem(func_4092_call(relay.reshape(const_5123.astype('float32'), [2,])), 0)
call_5124 = relay.TupleGetItem(func_4095_call(relay.reshape(const_5123.astype('float32'), [2,])), 0)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_5130 = func_2717_call()
call_5131 = func_2717_call()
output = relay.Tuple([call_5120,call_5122,const_5123,call_5130,])
output2 = relay.Tuple([call_5121,call_5124,const_5123,call_5131,])
func_5146 = relay.Function([], output)
mod['func_5146'] = func_5146
mod = relay.transform.InferType()(mod)
mutated_mod['func_5146'] = func_5146
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5146_call = mutated_mod.get_global_var('func_5146')
call_5147 = func_5146_call()
output = call_5147
func_5148 = relay.Function([], output)
mutated_mod['func_5148'] = func_5148
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3393_call = mod.get_global_var('func_3393')
func_3394_call = mutated_mod.get_global_var('func_3394')
call_5166 = func_3393_call()
call_5167 = func_3393_call()
func_4688_call = mod.get_global_var('func_4688')
func_4690_call = mutated_mod.get_global_var('func_4690')
var_5173 = relay.var("var_5173", dtype = "bool", shape = (200,))#candidate|5173|(200,)|var|bool
call_5172 = func_4688_call(relay.reshape(var_5173.astype('bool'), [5, 8, 5]))
call_5174 = func_4688_call(relay.reshape(var_5173.astype('bool'), [5, 8, 5]))
output = relay.Tuple([call_5166,call_5172,var_5173,])
output2 = relay.Tuple([call_5167,call_5174,var_5173,])
func_5179 = relay.Function([var_5173,], output)
mod['func_5179'] = func_5179
mod = relay.transform.InferType()(mod)
mutated_mod['func_5179'] = func_5179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5180 = relay.var("var_5180", dtype = "bool", shape = (200,))#candidate|5180|(200,)|var|bool
func_5179_call = mutated_mod.get_global_var('func_5179')
call_5181 = func_5179_call(var_5180)
output = call_5181
func_5182 = relay.Function([var_5180], output)
mutated_mod['func_5182'] = func_5182
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1913_call = mod.get_global_var('func_1913')
func_1914_call = mutated_mod.get_global_var('func_1914')
call_5262 = relay.TupleGetItem(func_1913_call(), 0)
call_5263 = relay.TupleGetItem(func_1914_call(), 0)
var_5267 = relay.var("var_5267", dtype = "float32", shape = (7, 12, 3))#candidate|5267|(7, 12, 3)|var|float32
bop_5268 = relay.less(call_5262.astype('bool'), relay.reshape(var_5267.astype('bool'), relay.shape_of(call_5262))) # shape=(7, 12, 3)
bop_5271 = relay.less(call_5263.astype('bool'), relay.reshape(var_5267.astype('bool'), relay.shape_of(call_5263))) # shape=(7, 12, 3)
output = relay.Tuple([bop_5268,])
output2 = relay.Tuple([bop_5271,])
func_5296 = relay.Function([var_5267,], output)
mod['func_5296'] = func_5296
mod = relay.transform.InferType()(mod)
var_5297 = relay.var("var_5297", dtype = "float32", shape = (7, 12, 3))#candidate|5297|(7, 12, 3)|var|float32
output = func_5296(var_5297)
func_5298 = relay.Function([var_5297], output)
mutated_mod['func_5298'] = func_5298
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5306 = relay.const([[[False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False],[False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False],[False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False],[True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True],[True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False],[True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False],[True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True],[True,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False],[False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True],[True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False],[False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True],[True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False],[True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False],[True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True],[False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False],[True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False]],[[True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False],[False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False],[True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True],[True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True],[True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False],[False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False],[True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True],[True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True],[False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False],[True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False],[False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False],[True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False],[True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False],[False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False],[True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True],[False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True]],[[False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False],[True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False],[True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True],[False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True],[True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False],[True,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False],[False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True],[True,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True],[True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False],[True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True],[False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False],[False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False],[True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True],[True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True],[False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False],[False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False]],[[True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True],[False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False],[True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False],[True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False],[True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False],[False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True],[True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True],[False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False],[False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False],[True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True],[False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False],[True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False],[True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False],[True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False],[False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True],[False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True]]], dtype = "bool")#candidate|5306|(4, 16, 16)|const|bool
var_5307 = relay.var("var_5307", dtype = "bool", shape = (4, 16, 16))#candidate|5307|(4, 16, 16)|var|bool
bop_5308 = relay.logical_and(const_5306.astype('bool'), relay.reshape(var_5307.astype('bool'), relay.shape_of(const_5306))) # shape=(4, 16, 16)
output = bop_5308
output2 = bop_5308
func_5311 = relay.Function([var_5307,], output)
mod['func_5311'] = func_5311
mod = relay.transform.InferType()(mod)
mutated_mod['func_5311'] = func_5311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5312 = relay.var("var_5312", dtype = "bool", shape = (4, 16, 16))#candidate|5312|(4, 16, 16)|var|bool
func_5311_call = mutated_mod.get_global_var('func_5311')
call_5313 = func_5311_call(var_5312)
output = call_5313
func_5314 = relay.Function([var_5312], output)
mutated_mod['func_5314'] = func_5314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_5357 = relay.TupleGetItem(func_892_call(), 0)
call_5358 = relay.TupleGetItem(func_894_call(), 0)
func_3659_call = mod.get_global_var('func_3659')
func_3660_call = mutated_mod.get_global_var('func_3660')
call_5390 = func_3659_call()
call_5391 = func_3659_call()
func_3056_call = mod.get_global_var('func_3056')
func_3059_call = mutated_mod.get_global_var('func_3059')
const_5406 = relay.const([[False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False],[False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False],[True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False],[False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True]], dtype = "bool")#candidate|5406|(4, 60)|const|bool
call_5405 = relay.TupleGetItem(func_3056_call(relay.reshape(const_5406.astype('bool'), [3, 16, 5]), relay.reshape(const_5406.astype('bool'), [3, 16, 5]), ), 0)
call_5407 = relay.TupleGetItem(func_3059_call(relay.reshape(const_5406.astype('bool'), [3, 16, 5]), relay.reshape(const_5406.astype('bool'), [3, 16, 5]), ), 0)
output = relay.Tuple([call_5357,call_5390,call_5405,const_5406,])
output2 = relay.Tuple([call_5358,call_5391,call_5407,const_5406,])
func_5419 = relay.Function([], output)
mod['func_5419'] = func_5419
mod = relay.transform.InferType()(mod)
mutated_mod['func_5419'] = func_5419
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5419_call = mutated_mod.get_global_var('func_5419')
call_5420 = func_5419_call()
output = call_5420
func_5421 = relay.Function([], output)
mutated_mod['func_5421'] = func_5421
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3336_call = mod.get_global_var('func_3336')
func_3337_call = mutated_mod.get_global_var('func_3337')
call_5447 = func_3336_call()
call_5448 = func_3336_call()
const_5464 = relay.const([[[2.621431,3.671811,-7.279338,5.996928,8.649878,-5.607672,-1.084188,2.333376,-0.628715,9.342716],[7.727711,2.014382,9.053891,4.468292,1.595560,6.822128,4.305881,9.997004,4.222844,-5.550878],[1.894290,8.466325,-8.315671,-3.434445,-4.981790,3.923305,-3.652636,-2.746124,3.066166,-2.510707],[-0.757999,7.057927,-5.929307,-2.499685,3.546713,-3.494543,3.507307,8.657068,-6.648453,-7.936440],[5.709436,0.757110,-3.606711,6.394421,7.604817,-1.642473,9.621037,7.608222,-4.021702,5.752194],[8.931573,-6.541663,-4.636370,-5.853646,-2.861519,1.883252,-5.584294,3.673787,9.157556,-6.099386],[-3.141926,-4.218136,4.008933,6.941395,9.826502,2.220900,9.865572,0.362047,8.288939,-8.148668],[-0.339923,-9.825045,-3.669206,8.990433,-9.444170,-6.985447,-0.665904,8.707621,5.311008,0.913944],[9.161232,6.008310,1.037035,-3.672949,-2.944238,-9.328026,2.777242,1.809631,-6.901743,5.823811],[3.598152,1.572720,-5.130557,6.990382,7.944498,5.286874,0.042583,6.575612,2.797569,-6.950003],[7.111967,1.754601,7.999475,-5.937947,1.660950,-6.190621,-0.729598,5.583473,-9.427403,-3.397181],[0.136463,1.859791,-9.773480,0.088164,-7.564616,4.121500,-6.815924,-6.334158,3.048871,4.455603]],[[-9.938516,4.090110,9.439781,-4.845470,3.053536,-7.763918,-9.053038,-7.705619,-3.476042,-8.415997],[3.421608,-0.813097,-0.769058,8.583579,-7.401164,4.964959,-7.821260,7.823190,4.005143,-1.249744],[-4.585464,4.689627,-8.639235,4.131771,-9.021628,9.672359,6.713131,5.840408,7.219967,6.462422],[-8.983885,-4.491112,-9.548909,-2.831765,0.229344,-0.151526,5.222777,-3.741548,8.049567,1.738540],[-4.427336,4.714767,-9.930859,3.016149,5.248540,6.266843,3.218955,9.971459,3.139883,7.668267],[-1.919112,-5.814762,-8.853832,9.753679,-0.054163,3.620578,2.649236,-0.479850,4.519913,6.252973],[1.797523,-1.383320,7.863855,-8.673944,-5.994568,0.500128,2.498286,-6.090206,0.924576,-3.204638],[-7.201857,-1.571075,-7.479800,-6.170588,-1.675648,1.164642,-2.129233,6.967533,1.481046,7.120778],[8.815130,-1.960893,-0.517472,-8.147835,-2.412372,-0.227469,-7.307571,-2.555415,7.168460,4.506700],[7.163418,9.875151,-3.542588,7.416631,-9.175878,6.870703,4.478546,4.749666,7.038761,4.750195],[-1.404518,-7.562814,-2.432702,9.772905,9.941680,-5.063485,9.902431,2.957130,-9.310500,8.140004],[7.420204,-0.084018,-9.458460,-3.741516,-6.370441,8.316854,8.256997,8.861879,9.097155,-4.841604]],[[6.745907,6.663253,-8.613998,6.385870,5.788984,-2.089109,0.643863,5.224049,-1.335153,0.304742],[-1.489647,3.848106,4.016680,4.896040,3.048292,5.174343,-5.857513,-7.166003,7.581944,2.291560],[-5.534185,4.214234,8.378839,-0.111286,5.612164,-8.776536,-0.270754,6.697271,-0.638564,-9.642840],[-3.540392,6.981116,-6.824202,-4.459501,7.531564,-0.231353,5.340782,4.171515,9.583193,-9.052551],[-2.911475,-1.515729,-2.685161,-5.850066,-4.488704,-5.416701,-7.267133,-9.956767,8.393207,1.010379],[-3.461342,9.399113,4.038098,-5.254379,-1.467343,2.278333,0.942714,1.534013,-9.637991,7.252199],[7.061511,6.076635,0.923769,-8.305675,-0.743528,9.473945,-5.966981,-5.538623,1.522560,-9.607451],[8.325423,-6.489655,4.616243,-8.715677,2.988223,-9.805604,-6.406977,4.070250,1.967379,-6.693589],[6.783395,2.532063,-3.005036,9.634793,-4.410336,5.828259,-0.464596,3.498884,-8.402361,7.822961],[5.008699,-6.028216,8.180763,6.394350,3.933053,5.087130,8.820852,-7.365308,-8.651924,4.183610],[8.776193,0.316065,6.325675,3.169667,-9.369985,9.173141,9.464129,5.190949,0.247241,4.989920],[4.774905,1.032476,3.454499,-6.712745,-1.427482,5.921636,8.444502,2.950663,3.322834,-8.937635]],[[3.987753,4.376526,9.603456,7.862677,8.564379,3.678600,5.041534,6.845829,3.732483,2.997242],[7.808630,5.473829,7.531114,4.326242,-1.457036,-8.273411,-8.882622,-1.046830,7.778021,-4.887202],[-7.958488,4.341906,3.124040,8.909700,-7.131888,-1.893454,5.557687,-8.772927,-9.310359,9.741879],[4.318042,-8.552297,0.700299,3.907506,-6.498951,8.508207,-8.777636,5.550848,2.598568,-8.266743],[1.949775,5.423943,-2.555016,6.193647,-2.292674,8.572198,-3.427062,1.395203,-8.916155,-5.289071],[-6.167729,-6.458627,-8.373072,-8.878133,-5.677225,-2.471189,9.108579,-8.733951,8.181329,-2.222258],[-9.924261,-3.993497,7.753157,-7.861110,-4.330931,4.569424,-7.004059,0.828043,6.168449,-8.204670],[-4.249592,5.982611,-9.452951,-7.707735,4.204778,7.915969,-9.426447,-2.583472,8.211258,-3.854676],[-1.770520,0.372945,4.940687,3.626333,-6.426424,-7.894980,-8.068048,3.113751,2.196144,6.668920],[-1.705640,-0.199966,-7.640350,8.480424,4.289288,3.543400,1.225740,-1.530019,-2.023036,7.597073],[8.920190,6.705186,4.769429,-0.172893,-2.234222,5.879367,2.332037,-9.326226,-6.535723,8.828691],[8.643690,9.974554,0.381214,0.610620,-8.448892,1.092901,-6.498756,8.029388,1.939776,-1.248989]],[[1.177543,-4.162031,7.915185,-2.778038,-2.713532,2.237791,0.422094,-1.185669,-5.267754,-6.227781],[-3.707384,-8.985995,-4.869659,-7.735700,6.345922,-9.404205,-4.617381,9.359278,0.610104,-9.222547],[-5.247370,8.870561,-9.522956,-3.954935,3.944617,9.228289,-2.798002,-4.587806,-1.624019,-6.009891],[3.741718,-3.909303,-3.752532,2.132519,-8.521541,4.147805,3.676743,-2.949698,3.203102,-0.155133],[0.121551,-1.642431,9.021434,-4.084937,-6.273306,0.762687,3.317644,6.968060,-1.316525,0.347292],[-6.981099,3.681444,3.842333,-3.587999,-0.733952,0.755934,-5.987987,-9.160214,-9.406181,7.435359],[6.108716,-4.556489,0.513948,-2.582200,-7.816139,-3.703118,6.331795,-7.129272,3.928294,3.697164],[5.912077,8.337126,-8.080354,8.465388,-8.147713,9.239893,-9.453587,2.732490,-0.755821,3.671624],[1.492043,1.685010,8.474717,-7.703205,-0.842027,-1.598192,-4.206277,-8.638549,6.995714,-1.624431],[-2.926951,-0.571653,2.153833,-3.449297,9.303456,6.389592,7.812970,2.051220,-2.016097,6.827535],[7.165913,8.579341,8.908993,0.546350,5.250128,1.749984,9.553269,-3.525625,7.575615,-6.707589],[-6.895901,1.924751,3.233725,-7.216288,-1.522141,-1.975625,-5.596511,-5.227466,5.174314,-4.652141]]], dtype = "float32")#candidate|5464|(5, 12, 10)|const|float32
bop_5465 = relay.logical_and(call_5447.astype('bool'), relay.reshape(const_5464.astype('bool'), relay.shape_of(call_5447))) # shape=(5, 12, 10)
bop_5468 = relay.logical_and(call_5448.astype('bool'), relay.reshape(const_5464.astype('bool'), relay.shape_of(call_5448))) # shape=(5, 12, 10)
var_5478 = relay.var("var_5478", dtype = "float32", shape = (5, 12, 10))#candidate|5478|(5, 12, 10)|var|float32
bop_5479 = relay.equal(call_5447.astype('bool'), relay.reshape(var_5478.astype('bool'), relay.shape_of(call_5447))) # shape=(5, 12, 10)
bop_5482 = relay.equal(call_5448.astype('bool'), relay.reshape(var_5478.astype('bool'), relay.shape_of(call_5448))) # shape=(5, 12, 10)
func_804_call = mod.get_global_var('func_804')
func_807_call = mutated_mod.get_global_var('func_807')
const_5485 = relay.const([-3.172851,2.000437,-7.737642,1.337794,0.458963,1.668557,-0.218113,-4.976822,-2.107968,6.877303,-3.299309,-8.940511,-5.680205,1.526361,7.942598,9.939059,9.082855,-7.261668,1.355807,-0.874024,9.751278,-2.805748,1.313920,-2.259416,-5.617896,-5.707667,-2.357647,-8.591996,-2.885526,9.061446,4.055000,7.670458,3.059728,6.623467,4.276854,0.388362,3.167457,-6.866391,4.179716,-9.616222,-3.341701,-0.200055,-1.097630,3.283822,8.143314,-0.450478,-7.795264,5.938437,7.364248,-6.473737,6.068066,6.187780,7.116232,5.709620,-2.426185,-7.268696,-3.623259,6.665652,4.808502,8.643886,2.586991,4.866124,-0.220954,-0.209209,1.628174,-9.244383,-8.936676,-0.896492,-3.626931,-3.572257,9.980753,9.549819,-7.387979,-3.379268,-4.534657,-7.859310,9.358050,2.098968,-2.872149,1.081672,-4.699937,-5.192582,1.926293,-2.958785,-6.137545,-2.242825,4.566021,-1.283650,2.327771,8.823983,-9.355547,3.044528,6.851423,3.561258,-3.628168,-2.429931,4.389075,-4.567041,4.997810,-0.050432,0.720686,9.577242,-2.165934,-5.116709,5.902777,4.986186,1.281613,2.250423,5.583869,6.842318,-8.147171,-3.910929,-4.921218,-4.974052,1.787856,-5.771689,-3.282931,5.375380,4.477618,-7.888214,4.760836,-5.881087,-7.946265,-3.730914,5.972350,-7.173513,7.020893,0.610686,6.943116,3.688281,-8.849062,0.635034,9.998896,2.670803,0.525380,5.767489,-1.344487,6.560727,-3.912506,-1.823228,0.562601,1.646999,-8.903495,3.859151,-6.481949,-2.592828,-6.415680,1.487709,3.117504,-7.938145,-2.946833,0.253725,8.291263,-4.979181,-2.952330,2.616203,7.646210,-6.846685,0.257922,5.675928,-7.444090,-5.482616,7.552838,3.921320,8.212285,3.249039,3.151822,-3.025824,-3.563941,-4.206091,5.079445,-6.227655,-3.662184,-6.971042,-1.895632,-9.489412,-4.549441,4.116588,-8.231402,-7.751370,-7.536767,-2.906629,-1.371360,3.202025,1.216163,-1.584832,4.208500,0.987097,8.926269,-0.792886,3.724080,6.284484,4.036442,8.583550,8.740973,8.239709,-0.119473,9.557100,-1.982643,4.970405], dtype = "float32")#candidate|5485|(200,)|const|float32
call_5484 = relay.TupleGetItem(func_804_call(relay.reshape(const_5485.astype('float32'), [5, 8, 5])), 0)
call_5486 = relay.TupleGetItem(func_807_call(relay.reshape(const_5485.astype('float32'), [5, 8, 5])), 0)
bop_5487 = relay.less(const_5485.astype('bool'), relay.reshape(call_5484.astype('bool'), relay.shape_of(const_5485))) # shape=(200,)
bop_5490 = relay.less(const_5485.astype('bool'), relay.reshape(call_5486.astype('bool'), relay.shape_of(const_5485))) # shape=(200,)
bop_5491 = relay.multiply(var_5478.astype('float32'), relay.reshape(const_5464.astype('float32'), relay.shape_of(var_5478))) # shape=(5, 12, 10)
uop_5513 = relay.atan(bop_5479.astype('float64')) # shape=(5, 12, 10)
uop_5515 = relay.atan(bop_5482.astype('float64')) # shape=(5, 12, 10)
output = relay.Tuple([bop_5465,bop_5487,bop_5491,uop_5513,])
output2 = relay.Tuple([bop_5468,bop_5490,bop_5491,uop_5515,])
func_5522 = relay.Function([var_5478,], output)
mod['func_5522'] = func_5522
mod = relay.transform.InferType()(mod)
var_5523 = relay.var("var_5523", dtype = "float32", shape = (5, 12, 10))#candidate|5523|(5, 12, 10)|var|float32
output = func_5522(var_5523)
func_5524 = relay.Function([var_5523], output)
mutated_mod['func_5524'] = func_5524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_892_call = mod.get_global_var('func_892')
func_894_call = mutated_mod.get_global_var('func_894')
call_5551 = relay.TupleGetItem(func_892_call(), 0)
call_5552 = relay.TupleGetItem(func_894_call(), 0)
output = call_5551
output2 = call_5552
func_5564 = relay.Function([], output)
mod['func_5564'] = func_5564
mod = relay.transform.InferType()(mod)
output = func_5564()
func_5565 = relay.Function([], output)
mutated_mod['func_5565'] = func_5565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1468_call = mod.get_global_var('func_1468')
func_1470_call = mutated_mod.get_global_var('func_1470')
call_5618 = func_1468_call()
call_5619 = func_1468_call()
uop_5620 = relay.atan(call_5618.astype('float32')) # shape=(9, 11, 6)
uop_5622 = relay.atan(call_5619.astype('float32')) # shape=(9, 11, 6)
func_3308_call = mod.get_global_var('func_3308')
func_3309_call = mutated_mod.get_global_var('func_3309')
call_5632 = func_3308_call()
call_5633 = func_3308_call()
bop_5639 = relay.bitwise_and(uop_5620.astype('int16'), relay.reshape(call_5618.astype('int16'), relay.shape_of(uop_5620))) # shape=(9, 11, 6)
bop_5642 = relay.bitwise_and(uop_5622.astype('int16'), relay.reshape(call_5619.astype('int16'), relay.shape_of(uop_5622))) # shape=(9, 11, 6)
output = relay.Tuple([call_5632,bop_5639,])
output2 = relay.Tuple([call_5633,bop_5642,])
func_5643 = relay.Function([], output)
mod['func_5643'] = func_5643
mod = relay.transform.InferType()(mod)
mutated_mod['func_5643'] = func_5643
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5643_call = mutated_mod.get_global_var('func_5643')
call_5644 = func_5643_call()
output = call_5644
func_5645 = relay.Function([], output)
mutated_mod['func_5645'] = func_5645
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2697_call = mod.get_global_var('func_2697')
func_2698_call = mutated_mod.get_global_var('func_2698')
call_5673 = relay.TupleGetItem(func_2697_call(), 0)
call_5674 = relay.TupleGetItem(func_2698_call(), 0)
var_5684 = relay.var("var_5684", dtype = "float64", shape = (60, 10))#candidate|5684|(60, 10)|var|float64
bop_5685 = relay.power(call_5673.astype('float64'), relay.reshape(var_5684.astype('float64'), relay.shape_of(call_5673))) # shape=(60, 10)
bop_5688 = relay.power(call_5674.astype('float64'), relay.reshape(var_5684.astype('float64'), relay.shape_of(call_5674))) # shape=(60, 10)
uop_5702 = relay.sinh(call_5673.astype('float64')) # shape=(60, 10)
uop_5704 = relay.sinh(call_5674.astype('float64')) # shape=(60, 10)
func_989_call = mod.get_global_var('func_989')
func_992_call = mutated_mod.get_global_var('func_992')
call_5706 = relay.TupleGetItem(func_989_call(relay.reshape(call_5673.astype('bool'), [5, 12, 10])), 1)
call_5707 = relay.TupleGetItem(func_992_call(relay.reshape(call_5673.astype('bool'), [5, 12, 10])), 1)
uop_5710 = relay.atan(uop_5702.astype('float32')) # shape=(60, 10)
uop_5712 = relay.atan(uop_5704.astype('float32')) # shape=(60, 10)
output = relay.Tuple([bop_5685,call_5706,uop_5710,])
output2 = relay.Tuple([bop_5688,call_5707,uop_5712,])
func_5719 = relay.Function([var_5684,], output)
mod['func_5719'] = func_5719
mod = relay.transform.InferType()(mod)
mutated_mod['func_5719'] = func_5719
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5720 = relay.var("var_5720", dtype = "float64", shape = (60, 10))#candidate|5720|(60, 10)|var|float64
func_5719_call = mutated_mod.get_global_var('func_5719')
call_5721 = func_5719_call(var_5720)
output = call_5721
func_5722 = relay.Function([var_5720], output)
mutated_mod['func_5722'] = func_5722
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4459_call = mod.get_global_var('func_4459')
func_4461_call = mutated_mod.get_global_var('func_4461')
call_5724 = relay.TupleGetItem(func_4459_call(), 1)
call_5725 = relay.TupleGetItem(func_4461_call(), 1)
func_5146_call = mod.get_global_var('func_5146')
func_5148_call = mutated_mod.get_global_var('func_5148')
call_5729 = relay.TupleGetItem(func_5146_call(), 2)
call_5730 = relay.TupleGetItem(func_5148_call(), 2)
var_5746 = relay.var("var_5746", dtype = "float32", shape = (600,))#candidate|5746|(600,)|var|float32
bop_5747 = relay.greater_equal(call_5724.astype('bool'), relay.reshape(var_5746.astype('bool'), relay.shape_of(call_5724))) # shape=(600,)
bop_5750 = relay.greater_equal(call_5725.astype('bool'), relay.reshape(var_5746.astype('bool'), relay.shape_of(call_5725))) # shape=(600,)
output = relay.Tuple([call_5729,bop_5747,])
output2 = relay.Tuple([call_5730,bop_5750,])
func_5752 = relay.Function([var_5746,], output)
mod['func_5752'] = func_5752
mod = relay.transform.InferType()(mod)
mutated_mod['func_5752'] = func_5752
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5753 = relay.var("var_5753", dtype = "float32", shape = (600,))#candidate|5753|(600,)|var|float32
func_5752_call = mutated_mod.get_global_var('func_5752')
call_5754 = func_5752_call(var_5753)
output = call_5754
func_5755 = relay.Function([var_5753], output)
mutated_mod['func_5755'] = func_5755
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5854 = relay.const([[[7.832170],[8.789494],[3.499284]],[[-4.982487],[4.161250],[-8.248834]],[[6.920943],[5.073757],[-4.750924]],[[1.720899],[-2.369338],[-4.927791]],[[5.146064],[0.265333],[-8.532957]],[[-9.502090],[1.683679],[7.237229]]], dtype = "float32")#candidate|5854|(6, 3, 1)|const|float32
uop_5855 = relay.sigmoid(const_5854.astype('float32')) # shape=(6, 3, 1)
bop_5857 = relay.logical_or(const_5854.astype('bool'), relay.reshape(uop_5855.astype('bool'), relay.shape_of(const_5854))) # shape=(6, 3, 1)
output = relay.Tuple([bop_5857,])
output2 = relay.Tuple([bop_5857,])
func_5860 = relay.Function([], output)
mod['func_5860'] = func_5860
mod = relay.transform.InferType()(mod)
output = func_5860()
func_5861 = relay.Function([], output)
mutated_mod['func_5861'] = func_5861
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3567_call = mod.get_global_var('func_3567')
func_3569_call = mutated_mod.get_global_var('func_3569')
call_5875 = relay.TupleGetItem(func_3567_call(), 0)
call_5876 = relay.TupleGetItem(func_3569_call(), 0)
output = call_5875
output2 = call_5876
func_5893 = relay.Function([], output)
mod['func_5893'] = func_5893
mod = relay.transform.InferType()(mod)
mutated_mod['func_5893'] = func_5893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5893_call = mutated_mod.get_global_var('func_5893')
call_5894 = func_5893_call()
output = call_5894
func_5895 = relay.Function([], output)
mutated_mod['func_5895'] = func_5895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1761_call = mod.get_global_var('func_1761')
func_1763_call = mutated_mod.get_global_var('func_1763')
call_5970 = func_1761_call()
call_5971 = func_1761_call()
const_5974 = relay.const([[[8.011307,1.602371,0.307023],[4.962011,-8.991808,2.330497],[-2.298750,8.204394,-9.733976],[-2.053972,6.510541,-8.553813],[3.311194,4.875542,-6.962028],[-9.735489,-1.169630,4.426840],[2.845115,7.978796,4.208327],[5.875964,-4.424898,-6.037769],[7.371844,0.696094,-6.742652],[7.443799,0.654011,7.144129],[9.830679,6.741114,-9.698915],[6.257322,8.782927,6.277927]],[[3.374453,4.091956,-6.706735],[2.517921,-4.874500,-6.998208],[-2.755367,-1.595430,9.531832],[2.931594,4.780846,-8.618614],[1.396685,-5.331021,-9.315000],[5.986011,-4.600084,6.441495],[-2.963028,-1.729946,-9.084469],[9.732729,8.445967,-6.815746],[7.066778,3.208283,-6.802888],[-4.859119,-5.092433,-8.995649],[8.822243,-7.813309,-7.648223],[-3.757824,-2.151022,-7.580869]],[[7.479828,6.129820,8.646741],[6.683162,1.163025,-3.113053],[-9.001208,3.023006,5.403555],[8.252596,0.538006,-8.199326],[-1.153727,-1.276681,-3.828086],[4.597568,-6.047984,-8.285663],[-2.354779,8.489044,-1.818964],[6.432108,-5.955562,3.015350],[-5.045509,-3.118897,8.371440],[-2.584050,3.182500,-0.595897],[6.540113,-1.811822,4.491464],[4.741248,-0.554466,5.674949]],[[-1.383338,-2.761197,-6.102996],[-9.280685,-7.470129,-2.027724],[-7.052231,5.147175,-2.505923],[3.722197,0.527573,9.147703],[-2.580719,-0.686082,1.696910],[8.835987,-8.798512,4.073169],[-0.611509,-5.760304,-8.693625],[-9.598653,8.253276,2.375926],[9.132612,4.743584,-3.309967],[6.505187,4.942814,6.043633],[-2.922117,5.408313,-0.938935],[0.949291,-1.788853,-0.542552]],[[-1.908692,7.861661,-7.170574],[4.524769,2.840233,3.222015],[-1.993922,-1.617543,-8.199667],[-5.443551,6.980728,-0.691720],[-5.532799,-6.380235,0.008100],[-9.146862,8.637808,1.201049],[-1.448150,5.311025,2.854131],[4.224430,-6.752007,3.939029],[9.352323,1.453680,3.550084],[5.884970,9.608043,9.284102],[-9.853489,-7.917342,6.621011],[2.466069,8.797385,-3.470604]],[[9.030973,-8.678126,0.691644],[3.546953,9.292535,1.079100],[-7.770141,6.039396,-9.156430],[-3.030636,-8.952878,-2.825630],[-7.783146,5.102791,0.045076],[-1.427566,8.981062,-1.855310],[-3.590005,0.776697,-9.051352],[1.454412,4.816199,-9.697606],[6.770870,-3.121885,6.358047],[3.137402,9.666155,7.804288],[-0.966802,1.701025,-2.430682],[5.973906,8.977855,0.631688]],[[2.339265,-6.117664,2.938964],[3.128522,3.922292,-4.193851],[-2.848623,-2.155289,-6.769323],[-8.499491,1.685434,-4.526276],[8.931884,2.653855,-9.994257],[-6.567684,4.080356,6.870711],[2.880710,7.443165,-0.072946],[-5.791334,6.017416,-1.062759],[-3.792650,0.246468,3.035549],[-7.445727,6.080582,3.819490],[-1.646895,6.901092,1.731070],[-8.435317,2.685819,9.768270]]], dtype = "float32")#candidate|5974|(7, 12, 3)|const|float32
bop_5975 = relay.logical_xor(call_5970.astype('int32'), relay.reshape(const_5974.astype('int32'), relay.shape_of(call_5970))) # shape=(7, 12, 3)
bop_5978 = relay.logical_xor(call_5971.astype('int32'), relay.reshape(const_5974.astype('int32'), relay.shape_of(call_5971))) # shape=(7, 12, 3)
output = relay.Tuple([bop_5975,])
output2 = relay.Tuple([bop_5978,])
func_5989 = relay.Function([], output)
mod['func_5989'] = func_5989
mod = relay.transform.InferType()(mod)
output = func_5989()
func_5990 = relay.Function([], output)
mutated_mod['func_5990'] = func_5990
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6013 = relay.var("var_6013", dtype = "float64", shape = (13, 4, 7))#candidate|6013|(13, 4, 7)|var|float64
uop_6014 = relay.erf(var_6013.astype('float64')) # shape=(13, 4, 7)
uop_6031 = relay.sigmoid(var_6013.astype('float64')) # shape=(13, 4, 7)
output = relay.Tuple([uop_6014,uop_6031,])
output2 = relay.Tuple([uop_6014,uop_6031,])
F = relay.Function([var_6013,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_6013,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
