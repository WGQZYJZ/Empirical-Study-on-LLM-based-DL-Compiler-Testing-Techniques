==========mod==========
#[version = "0.0.5"]
def @func_5017() -> Tensor[(3, 5, 15), float32] {
  @func_2716() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_500(%var_493: Tensor[(9, 3, 12), uint16], %var_494: Tensor[(9, 3, 12), uint16]) -> Tensor[(9, 3, 12), uint16] {
  %0 = cast(%var_494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %1 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_493, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%2, %3) /* ty=Tensor[(9, 3, 12), uint16] */
}

def @func_1672(%var_1658: Tensor[(84), float32]) -> (Tensor[(324), uint16], Tensor[(14, 2, 3), float32], Tensor[(84), float32], Tensor[(3, 5, 15), float32]) {
  %4 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %5 = cast(%var_1658, dtype="float32") /* ty=Tensor[(84), float32] */;
  %6 = reshape(%5, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
  %7 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %8 = %4.2;
  %9 = @func_1231(%6) /* ty=Tensor[(14, 2, 3), float32] */;
  %10 = %7.3;
  (%8, %9, %var_1658, %10)
}

def @func_4636(%var_4629: Tensor[(3, 5, 15), float32]) -> (Tensor[(3, 5, 15), bool],) {
  %11 = @func_1171() /* ty=Tensor[(3, 5, 15), float32] */;
  %12 = cast(%var_4629, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = less(%14, %15) /* ty=Tensor[(3, 5, 15), bool] */;
  (%16,)
}

def @func_3084(%var_3059: Tensor[(1980), float32], %var_3066: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 11, 12), int64], Tensor[(3, 5, 15), float64], Tensor[(150), float64], Tensor[(1980), float64]) {
  %17 = cast(%var_3059, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %18 = cast(%var_3059, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %19 = reshape(%17, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %20 = reshape(%18, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %21 = cast(%var_3066, dtype="float64") /* ty=Tensor[(150), float64] */;
  %22 = cast(%var_3066, dtype="float64") /* ty=Tensor[(150), float64] */;
  %23 = reshape(%21, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %24 = reshape(%22, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %25 = @func_2341(%23, %24) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) */;
  %26 = cast(%var_3059, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %27 = asinh(%26) /* ty=Tensor[(1980), float64] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %29 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %30 = @func_1055(%19, %20) /* ty=Tensor[(15, 11, 12), int64] */;
  %31 = %25.3;
  %32 = log10(%28) /* ty=Tensor[(1980), float64] */;
  (%29, %30, %31, %var_3066, %32)
}

def @func_3582() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) {
  %33 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %34 = @func_2377() /* ty=(Tensor[(9, 3, 12), uint16],) */;
  %35 = %33.0;
  %36 = %34.0;
  (%35, %36)
}

def @func_425() -> Tensor[(3, 5, 15), float64] {
  %37 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  acosh(%38) /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_378() -> (Tensor[(3, 5, 15), float64],) {
  %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %40 = cosh(%39) /* ty=Tensor[(3, 5, 15), float64] */;
  (%40,)
}

def @func_1498(%var_1427: Tensor[(10, 16, 11), float32], %var_1462: Tensor[(32), float64], %var_1463: Tensor[(112), int64]) -> (Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) {
  %41 = cast(%var_1427, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %42 = atanh(%41) /* ty=Tensor[(10, 16, 11), float32] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 16, 11), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = not_equal(%45, %46) /* ty=Tensor[(10, 16, 11), bool] */;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %49 = cast(%var_1462, dtype="float64") /* ty=Tensor[(32), float64] */;
  %50 = cast(%var_1463, dtype="int64") /* ty=Tensor[(112), int64] */;
  %51 = reshape(%49, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %52 = reshape(%50, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
  %53 = @func_1022(%51, %52) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
  %54 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %56 = reshape(%55, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %57 = @func_1413(%56) /* ty=(Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) */;
  %58 = asinh(%48) /* ty=Tensor[(10, 16, 11), float32] */;
  %59 = %53.1;
  %60 = %57.0;
  (%58, %54, %59, %var_1462, %var_1463, %60)
}

def @func_2181() -> Tensor[(3, 5, 15), float64] {
  %61 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %61.1
}

def @func_5132(%var_5031: Tensor[(11, 5, 3), float32], %var_5090: Tensor[(11, 5, 3), bool]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(9, 3, 12), bool], Tensor[(112), int64], Tensor[(392), float32], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), bool], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), float64]) {
  %62 = @func_2776() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) */;
  %63 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %64 = %62.3;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %66 = %63.1;
  %67 = cast(%66, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %68 = cast(%66, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %69 = cast(%66, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %70 = reshape(%65, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %71 = reshape(%67, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %72 = reshape(%68, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %73 = reshape(%69, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %74 = @func_1111(%70, %71, %72, %73) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
  %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %76 = cast(%66, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %77 = reshape(%75, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %78 = reshape(%76, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %79 = @func_4924(%77, %78) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) */;
  %80 = cast(%var_5031, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
  %81 = sinh(%80) /* ty=Tensor[(11, 5, 3), float32] */;
  %82 = cast(%var_5031, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = greater(%84, %85) /* ty=Tensor[(11, 5, 3), bool] */;
  %87 = cast(%var_5090, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = cast(%86, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %92 = atanh(%91) /* ty=Tensor[(11, 5, 3), float64] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %94 = %74.2;
  %95 = %79.4;
  %96 = @func_2181() /* ty=Tensor[(3, 5, 15), float64] */;
  %97 = not_equal(%89, %90) /* ty=Tensor[(11, 5, 3), bool] */;
  %98 = @func_4352() /* ty=Tensor[(3, 5, 15), float64] */;
  %99 = acosh(%93) /* ty=Tensor[(11, 5, 3), float64] */;
  (%64, %66, %94, %95, meta[relay.Constant][2] /* ty=Tensor[(392), float32] */, %96, %97, %98, %99)
}

def @func_4924(%var_4878: Tensor[(392), float32], %var_4894: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) {
  %100 = @func_1709() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %101 = cast(meta[relay.Constant][3] /* ty=Tensor[(2025, 1), float32] */, dtype="float32") /* ty=Tensor[(2025, 1), float32] */;
  %102 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %104 = reshape(%101, newshape=[15, 9, 15]) /* ty=Tensor[(15, 9, 15), float32] */;
  %105 = reshape(%102, newshape=[]) /* ty=int64 */;
  %106 = reshape(%103, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %107 = @func_243(%104, %105, %106) /* ty=(Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) */;
  %108 = cast(%var_4878, dtype="float32") /* ty=Tensor[(392), float32] */;
  %109 = cast(%var_4878, dtype="float32") /* ty=Tensor[(392), float32] */;
  %110 = cast(meta[relay.Constant][4] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %112 = reshape(%108, newshape=[14, 4, 7]) /* ty=Tensor[(14, 4, 7), float32] */;
  %113 = reshape(%109, newshape=[14, 4, 7]) /* ty=Tensor[(14, 4, 7), float32] */;
  %114 = reshape(%110, newshape=[28, 4]) /* ty=Tensor[(28, 4), int64] */;
  %115 = reshape(%111, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %116 = @func_4231(%112, %113, %114, %115) /* ty=(Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) */;
  %117 = @func_4749() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) */;
  %118 = cast(%var_4894, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %119 = reshape(%118, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %120 = @func_2584(%119) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) */;
  %121 = %120.0;
  %122 = @func_2181() /* ty=Tensor[(3, 5, 15), float64] */;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %124 = reshape(%123, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float32] */;
  %125 = @func_4636(%124) /* ty=(Tensor[(3, 5, 15), bool],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %128 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%121, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = %100.0;
  %132 = %107.2;
  %133 = %116.1;
  %134 = %117.0;
  %135 = equal(%129, %130) /* ty=Tensor[(3, 5, 15), bool] */;
  %136 = @func_3859() /* ty=Tensor[(3, 5, 15), bool] */;
  (%131, %132, meta[relay.Constant][3] /* ty=Tensor[(2025, 1), float32] */, -2 /* ty=int64 */, meta[relay.Constant][4] /* ty=Tensor[(112), int64] */, %133, %var_4878, meta[relay.Constant][5] /* ty=Tensor[(336), float32] */, %var_4894, %122, %134, %135, %136)
}

def @func_2076() -> (Tensor[(3, 5, 15), float32],) {
  %137 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %140 = sigmoid(%139) /* ty=Tensor[(3, 5, 15), float64] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %142 = sqrt(%141) /* ty=Tensor[(3, 5, 15), float32] */;
  (%142,)
}

def @func_1752() -> (Tensor[(3, 5, 15), float64],) {
  %143 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %144 = %143.0;
  (%144,)
}

def @func_1210(%var_1179: Tensor[(14, 6, 13), float64], %var_1180: Tensor[(14, 6, 13), float64]) -> (Tensor[(14, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 6, 13), float64]) {
  %145 = cast(%var_1180, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
  %146 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_1179, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 6, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %150 = shape_of(%var_1180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_1180, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
  %154 = floor_divide(%147, %148) /* ty=Tensor[(14, 6, 13), float64] */;
  %155 = less(%151, %152) /* ty=Tensor[(14, 6, 13), bool] */;
  %156 = erf(%153) /* ty=Tensor[(14, 6, 13), float64] */;
  (%154, %155, %156)
}

def @func_674() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %157 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %158 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %159 = %157.1;
  (%158, %159)
}

def @func_3660(%var_3650: Tensor[(8, 5, 11), int32], %var_3656: Tensor[(324), uint16], %var_3658: Tensor[(300, 2), int16]) -> (Tensor[(8, 5, 11), int32], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(300, 2), int16]) {
  %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 5, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 5, 11), int32] */;
  %161 = shape_of(%var_3650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_3650, dtype="int32") /* ty=Tensor[(8, 5, 11), int32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %164 = cast(%var_3656, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %165 = cast(meta[relay.Constant][8] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %166 = cast(%var_3658, dtype="int16") /* ty=Tensor[(300, 2), int16] */;
  %167 = reshape(%164, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %168 = reshape(%165, newshape=[]) /* ty=int16 */;
  %169 = reshape(%166, newshape=[600]) /* ty=Tensor[(600), int16] */;
  %170 = @func_1609(%167, %168, %169) /* ty=(Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) */;
  %171 = right_shift(%162, %163) /* ty=Tensor[(8, 5, 11), int32] */;
  %172 = %170.2;
  (%171, %172, %var_3656, meta[relay.Constant][8] /* ty=int16 */, %var_3658)
}

def @func_1832() -> Tensor[(3, 5, 15), float64] {
  %173 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %173.1
}

def @func_3020() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %174 = @func_2716() /* ty=Tensor[(3, 5, 15), float32] */;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %176 = erf(%175) /* ty=Tensor[(3, 5, 15), float64] */;
  %177 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  (%176, %177)
}

def @func_691() -> (Tensor[(3, 5, 15), float32],) {
  %178 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %179 = %178.0;
  (%179,)
}

def @func_1529() -> Tensor[(3, 5, 15), float64] {
  %180 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %180.0
}

def @func_2663() -> Tensor[(3, 5, 15), float64] {
  @func_425() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_1366(%var_1359: Tensor[(32), float64], %var_1360: Tensor[(112), int64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) {
  %181 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %184 = cos(%183) /* ty=Tensor[(3, 5, 15), float32] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %186 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %187 = cast(%var_1359, dtype="float64") /* ty=Tensor[(32), float64] */;
  %188 = cast(%var_1360, dtype="int64") /* ty=Tensor[(112), int64] */;
  %189 = reshape(%187, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %190 = reshape(%188, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
  %191 = @func_1022(%189, %190) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
  %192 = @func_1171() /* ty=Tensor[(3, 5, 15), float32] */;
  %193 = asinh(%185) /* ty=Tensor[(3, 5, 15), float64] */;
  %194 = %186.1;
  %195 = %191.0;
  (%192, %193, %194, %195, %var_1359, %var_1360)
}

def @func_3907(%var_3900: Tensor[(6, 10, 2), uint16]) -> (Tensor[(6, 10, 2), bool],) {
  %196 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 10, 2), uint16] */, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
  %197 = shape_of(%var_3900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_3900, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = equal(%198, %199) /* ty=Tensor[(6, 10, 2), bool] */;
  (%200,)
}

def @func_446() -> Tensor[(3, 5, 15), float64] {
  %201 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %201.0
}

def @func_4712() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %202 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
  %203 = @func_2998() /* ty=Tensor[(3, 5, 15), float32] */;
  %204 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  %205 = %202.0;
  (%203, %204, %205)
}

def @func_1709() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  %206 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %208 = reshape(%207, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %209 = @func_1413(%208) /* ty=(Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) */;
  %210 = cast(%206, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %211 = reshape(%210, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %212 = @func_480(%211) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %213 = %209.1;
  %214 = %212.1;
  (%206, %213, %214)
}

def @func_2921() -> (Tensor[(3, 5, 15), float32],) {
  %215 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %216 = %215.0;
  (%216,)
}

def @func_2998() -> Tensor[(3, 5, 15), float32] {
  %217 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %217.0
}

def @func_1413(%var_1404: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) {
  %218 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %219 = %218.2;
  %220 = cast(%var_1404, dtype="uint16") /* ty=Tensor[(3, 5, 15), uint16] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="uint16") /* ty=Tensor[(3, 5, 15), uint16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %224 = maximum(%222, %223) /* ty=Tensor[(3, 5, 15), uint16] */;
  %225 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  (%224, %225)
}

def @func_2341(%var_2274: Tensor[(150), float64], %var_2334: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) {
  %226 = cast(%var_2274, dtype="float64") /* ty=Tensor[(150), float64] */;
  %227 = reshape(%226, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %228 = @func_742(%227) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) */;
  %229 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %230 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %231 = cast(%var_2334, dtype="int32") /* ty=Tensor[(150), int32] */;
  %232 = shape_of(%var_2274, dtype="int32") /* ty=Tensor[(1), int32] */;
  %233 = cast(%var_2274, dtype="int32") /* ty=Tensor[(150), int32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?), int32] */;
  %235 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %236 = %228.1;
  %237 = %229.0;
  %238 = %230.0;
  %239 = add(%233, %234) /* ty=Tensor[(150), int32] */;
  (%235, %236, %237, %238, %239)
}

def @func_4089(%var_4081: Tensor[(10, 10, 10), float64]) -> Tensor[(10, 10, 10), float64] {
  %240 = cast(%var_4081, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
  %241 = exp(%240) /* ty=Tensor[(10, 10, 10), float64] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
  %243 = shape_of(%var_4081, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%var_4081, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%244, %245) /* ty=Tensor[(10, 10, 10), float64] */
}

def @func_5166() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64]) {
  %246 = @func_2697() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %247 = %246.1;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %249 = atan(%248) /* ty=Tensor[(3, 5, 15), float32] */;
  %250 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  (%249, %250)
}

def @func_2697() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %251 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %254 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %255 = atanh(%253) /* ty=Tensor[(3, 5, 15), float64] */;
  %256 = @func_2663() /* ty=Tensor[(3, 5, 15), float64] */;
  %257 = %254.1;
  %258 = @func_1832() /* ty=Tensor[(3, 5, 15), float64] */;
  (%255, %256, %257, %258)
}

def @func_2377() -> (Tensor[(9, 3, 12), uint16],) {
  %259 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %260 = %259.1;
  (%260,)
}

def @func_43(%var_29: int64, %var_30: Tensor[(1, 7, 16), int64]) -> (Tensor[(1, 7, 16), bool],) {
  %261 = cast(%var_29, dtype="bool") /* ty=bool */;
  %262 = cast(%var_30, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
  %263 = less(%261, %262) /* ty=Tensor[(1, 7, 16), bool] */;
  (%263,)
}

def @func_4039(%var_3982: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(32), float64], Tensor[(4, 440), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(9, 3, 12), uint16]) {
  %264 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %265 = reshape(%264, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %266 = @func_981(%265) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
  %267 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 440), float32] */, dtype="float32") /* ty=Tensor[(4, 440), float32] */;
  %268 = cast(meta[relay.Constant][11] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %269 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %270 = reshape(%267, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %271 = reshape(%268, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %272 = reshape(%269, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %273 = @func_1498(%270, %271, %272) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) */;
  %274 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %275 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %276 = reshape(%274, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %277 = reshape(%275, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %278 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %279 = %266.2;
  %280 = %273.3;
  %281 = @func_500(%276, %277) /* ty=Tensor[(9, 3, 12), uint16] */;
  (%278, %279, %var_3982, %280, meta[relay.Constant][10] /* ty=Tensor[(4, 440), float32] */, meta[relay.Constant][11] /* ty=Tensor[(32), float64] */, meta[relay.Constant][12] /* ty=Tensor[(112), int64] */, %281)
}

def @func_4523(%var_4517: Tensor[(10, 15, 2), int32]) -> (Tensor[(10, 15, 2), bool],) {
  %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %283 = shape_of(%var_4517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_4517, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = equal(%284, %285) /* ty=Tensor[(10, 15, 2), bool] */;
  (%286,)
}

def @func_3230(%var_3184: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) {
  %287 = @func_1529() /* ty=Tensor[(3, 5, 15), float64] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %289 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %290 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %291 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %292 = reshape(%288, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %293 = reshape(%289, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %294 = reshape(%290, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %295 = reshape(%291, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %296 = @func_1111(%292, %293, %294, %295) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
  %297 = cast(%var_3184, dtype="float32") /* ty=Tensor[(324), float32] */;
  %298 = asin(%297) /* ty=Tensor[(324), float32] */;
  %299 = cast(%var_3184, dtype="bool") /* ty=Tensor[(324), bool] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(%298, dtype="bool") /* ty=Tensor[(324), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), bool] */;
  %303 = %296.0;
  %304 = greater(%301, %302) /* ty=Tensor[(324), bool] */;
  (%287, %303, %304)
}

def @func_3822(%var_3809: Tensor[(9, 3, 12), float64]) -> (Tensor[(9, 3, 12), float32], Tensor[(9, 3, 12), float64], Tensor[(9, 3, 12), float32]) {
  %305 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
  %306 = %305.1;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %308 = sinh(%307) /* ty=Tensor[(9, 3, 12), float64] */;
  %309 = cast(%308, dtype="uint32") /* ty=Tensor[(9, 3, 12), uint32] */;
  %310 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%306, dtype="uint32") /* ty=Tensor[(9, 3, 12), uint32] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %313 = logical_xor(%311, %312) /* ty=Tensor[(9, 3, 12), uint32] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
  %315 = cos(%314) /* ty=Tensor[(9, 3, 12), float32] */;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %317 = atan(%316) /* ty=Tensor[(9, 3, 12), float64] */;
  %318 = cast(%315, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = cast(%308, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %323 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%315, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = cast(%var_3809, dtype="int32") /* ty=Tensor[(9, 3, 12), int32] */;
  %327 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%317, dtype="int32") /* ty=Tensor[(9, 3, 12), int32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %330 = minimum(%328, %329) /* ty=Tensor[(9, 3, 12), int32] */;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
  %332 = mod(%320, %321) /* ty=Tensor[(9, 3, 12), float32] */;
  %333 = power(%324, %325) /* ty=Tensor[(9, 3, 12), float64] */;
  %334 = acosh(%331) /* ty=Tensor[(9, 3, 12), float32] */;
  (%332, %333, %334)
}

def @func_820(%var_777: int16, %var_778: Tensor[(10, 10, 6), int16]) -> (Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) {
  %335 = cast(%var_777, dtype="int16") /* ty=int16 */;
  %336 = cast(%var_778, dtype="int16") /* ty=Tensor[(10, 10, 6), int16] */;
  %337 = cast(meta[relay.Constant][14] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %338 = cast(meta[relay.Constant][14] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %339 = reshape(%337, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %340 = reshape(%338, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %341 = cast(meta[relay.Constant][14] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %342 = @func_500(%339, %340) /* ty=Tensor[(9, 3, 12), uint16] */;
  %343 = cast(%342, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %344 = reshape(%341, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %345 = reshape(%343, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %346 = bitwise_and(%335, %336) /* ty=Tensor[(10, 10, 6), int16] */;
  %347 = @func_500(%344, %345) /* ty=Tensor[(9, 3, 12), uint16] */;
  (%346, %342, meta[relay.Constant][14] /* ty=Tensor[(324), uint16] */, %347)
}

def @func_2776() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) {
  %348 = @func_1529() /* ty=Tensor[(3, 5, 15), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %350 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %351 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %353 = reshape(%349, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %354 = reshape(%350, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %355 = reshape(%351, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %356 = reshape(%352, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %357 = @func_1111(%353, %354, %355, %356) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
  %358 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %359 = cast(meta[relay.Constant][16] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %360 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %361 = reshape(%359, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %362 = reshape(%360, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %363 = @func_1366(%361, %362) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) */;
  %364 = %357.1;
  %365 = %358.1;
  %366 = %363.5;
  (%348, %364, meta[relay.Constant][15] /* ty=Tensor[(324), uint16] */, %365, %366, meta[relay.Constant][16] /* ty=Tensor[(32), float64] */, meta[relay.Constant][17] /* ty=Tensor[(112), int64] */)
}

def @func_1022(%var_985: Tensor[(8, 4, 1), float64], %var_1017: Tensor[(4, 28), int64]) -> (Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) {
  %367 = cast(%var_985, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %368 = tan(%367) /* ty=Tensor[(8, 4, 1), float64] */;
  %369 = cast(%var_985, dtype="uint16") /* ty=Tensor[(8, 4, 1), uint16] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="uint16") /* ty=Tensor[(8, 4, 1), uint16] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %373 = minimum(%371, %372) /* ty=Tensor[(8, 4, ?), uint16] */;
  %374 = cast(%var_985, dtype="int32") /* ty=Tensor[(8, 4, 1), int32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="int32") /* ty=Tensor[(8, 4, ?), int32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %378 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %379 = cast(%var_985, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %380 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%373, dtype="float32") /* ty=Tensor[(8, 4, ?), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %383 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %384 = cast(%var_1017, dtype="int64") /* ty=Tensor[(4, 28), int64] */;
  %385 = reshape(%383, newshape=[]) /* ty=int64 */;
  %386 = reshape(%384, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), int64] */;
  %387 = @func_43(%385, %386) /* ty=(Tensor[(1, 7, 16), bool],) */;
  %388 = bitwise_xor(%376, %377) /* ty=Tensor[(8, 4, ?), int32] */;
  %389 = %378.0;
  %390 = power(%381, %382) /* ty=Tensor[(8, 4, ?), float32] */;
  %391 = %387.0;
  (%388, %389, %390, %391, -6 /* ty=int64 */, %var_1017)
}

def @func_4967() -> Tensor[(3, 5, 15), float32] {
  @func_2998() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_1111(%var_1086: Tensor[(3, 5, 15), float64], %var_1097: Tensor[(9, 36), uint16], %var_1099: Tensor[(9, 36), uint16], %var_1105: Tensor[(9, 3, 12), uint16]) -> (Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) {
  %392 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %393 = %392.0;
  %394 = cast(%var_1086, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %398 = cast(%var_1099, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %399 = shape_of(%var_1097, dtype="int32") /* ty=Tensor[(2), int32] */;
  %400 = cast(%var_1097, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %402 = cast(%var_1097, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %403 = cast(%var_1097, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %404 = reshape(%402, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %405 = reshape(%403, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %406 = @func_500(%404, %405) /* ty=Tensor[(9, 3, 12), uint16] */;
  %407 = cast(%var_1105, dtype="bool") /* ty=Tensor[(9, 3, 12), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(9, 3, 12), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = bitwise_or(%396, %397) /* ty=Tensor[(3, 5, 15), int64] */;
  %412 = mod(%400, %401) /* ty=Tensor[(9, 36), float32] */;
  %413 = less_equal(%409, %410) /* ty=Tensor[(9, 3, 12), bool] */;
  (%411, %412, %413)
}

def @func_3486(%var_3450: Tensor[(14, 8, 1), float32], %var_3451: Tensor[(14, 8, 3), float32]) -> (Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) {
  %414 = cast(%var_3450, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %415 = cast(%var_3451, dtype="float32") /* ty=Tensor[(14, 8, 3), float32] */;
  %416 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %417 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %419 = reshape(%418, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %420 = @func_981(%419) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
  %421 = cast(%var_3450, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
  %422 = asinh(%421) /* ty=Tensor[(14, 8, 1), float64] */;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %424 = cast(%422, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %425 = log2(%424) /* ty=Tensor[(14, 8, 1), float32] */;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
  %427 = power(%414, %415) /* ty=Tensor[(14, 8, 3), float32] */;
  %428 = %416.0;
  %429 = %417.0;
  %430 = %420.0;
  %431 = erf(%423) /* ty=Tensor[(14, 8, 1), float32] */;
  %432 = exp(%426) /* ty=Tensor[(14, 8, 1), float64] */;
  (%427, %428, %429, %430, meta[relay.Constant][18] /* ty=Tensor[(324), uint16] */, %431, %432)
}

def @func_3322() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
  %433 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %434 = @func_2921() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %435 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 36), uint16] */, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %436 = reshape(%435, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %437 = @func_3230(%436) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) */;
  %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 36), uint16] */, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %439 = sin(%438) /* ty=Tensor[(9, 36), float32] */;
  %440 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 36), uint16] */, dtype="int64") /* ty=Tensor[(9, 36), int64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(2), int32] */;
  %442 = cast(%439, dtype="int64") /* ty=Tensor[(9, 36), int64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %444 = %433.0;
  %445 = %434.0;
  %446 = %437.0;
  %447 = bitwise_xor(%442, %443) /* ty=Tensor[(9, 36), int64] */;
  (%444, %445, %446, %447)
}

def @func_1729() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %448 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %449 = %448.1;
  %450 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  (%449, %450)
}

def @func_3629() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %451 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %452 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %453 = %451.1;
  %454 = %452.1;
  (%453, %454)
}

def @func_890() -> (Tensor[(3, 5, 15), float64],) {
  %455 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %456 = %455.0;
  (%456,)
}

def @func_1609(%var_1551: Tensor[(324), uint16], %var_1573: int16, %var_1574: Tensor[(600), int16]) -> (Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) {
  %457 = cast(%var_1551, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %458 = reshape(%457, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %459 = @func_981(%458) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
  %460 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %461 = %460.3;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %463 = acos(%462) /* ty=Tensor[(3, 5, 15), float32] */;
  %464 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="int16") /* ty=Tensor[(3, 5, 15), int16] */;
  %467 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%463, dtype="int16") /* ty=Tensor[(3, 5, 15), int16] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %470 = cast(%var_1573, dtype="int16") /* ty=int16 */;
  %471 = cast(%var_1574, dtype="int16") /* ty=Tensor[(600), int16] */;
  %472 = reshape(%470, newshape=[]) /* ty=int16 */;
  %473 = reshape(%471, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), int16] */;
  %474 = @func_820(%472, %473) /* ty=(Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) */;
  %475 = %459.2;
  %476 = add(%468, %469) /* ty=Tensor[(3, 5, 15), int16] */;
  %477 = %474.2;
  (%475, %var_1551, %476, %477, %var_1573, %var_1574)
}

def @func_5308(%var_5295: Tensor[(6, 5, 14), uint8]) -> Tensor[(6, 5, 14), uint8] {
  %478 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %479 = shape_of(%var_5295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_5295, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%480, %481) /* ty=Tensor[(6, 5, 14), uint8] */
}

def @main(%var_5316: Tensor[(16, 14, 9), float64]) -> Tensor[(16, 14, 9), bool] {
  %482 = cast(%var_5316, dtype="float64") /* ty=Tensor[(16, 14, 9), float64] */;
  %483 = tan(%482) /* ty=Tensor[(16, 14, 9), float64] */;
  %484 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%486, %487) /* ty=Tensor[(16, 14, 9), bool] */
}

def @func_3136() -> (Tensor[(3, 5, 15), float64],) {
  %488 = @func_1709() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %489 = %488.0;
  (%489,)
}

def @func_3968() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
  %490 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %491 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %492 = %490.0;
  %493 = %491.0;
  (%492, %493)
}

def @func_4231(%var_4202: Tensor[(14, 4, 7), float32], %var_4203: Tensor[(14, 4, 7), float32], %var_4224: Tensor[(28, 4), int64], %var_4227: Tensor[(336), float32]) -> (Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) {
  %494 = cast(%var_4203, dtype="float32") /* ty=Tensor[(14, 4, 7), float32] */;
  %495 = shape_of(%var_4202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_4202, dtype="float32") /* ty=Tensor[(14, 4, 7), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %498 = divide(%496, %497) /* ty=Tensor[(14, 4, 7), float32] */;
  %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 4, 7), float32] */, dtype="bool") /* ty=Tensor[(14, 4, 7), bool] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="bool") /* ty=Tensor[(14, 4, 7), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = cast(meta[relay.Constant][23] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %504 = cast(%var_4224, dtype="int64") /* ty=Tensor[(28, 4), int64] */;
  %505 = reshape(%503, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %506 = reshape(%504, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %507 = @func_1366(%505, %506) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) */;
  %508 = cast(%var_4224, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %509 = cast(%var_4227, dtype="float32") /* ty=Tensor[(336), float32] */;
  %510 = reshape(%508, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
  %511 = reshape(%509, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), float32] */;
  %512 = @func_3486(%510, %511) /* ty=(Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) */;
  %513 = equal(%501, %502) /* ty=Tensor[(14, 4, 7), bool] */;
  %514 = %507.1;
  %515 = %512.3;
  (%513, %514, meta[relay.Constant][23] /* ty=Tensor[(32), float64] */, %var_4224, %515, %var_4227)
}

def @func_981(%var_969: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) {
  %516 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %517 = %516.0;
  %518 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
  %521 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%517, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %524 = cast(%var_969, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %525 = cast(%var_969, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %526 = reshape(%524, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %527 = reshape(%525, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %528 = left_shift(%522, %523) /* ty=Tensor[(3, 5, 15), uint32] */;
  %529 = @func_500(%526, %527) /* ty=Tensor[(9, 3, 12), uint16] */;
  (%528, %529, %var_969)
}

def @func_2634(%var_2613: Tensor[(1, 16, 9), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) {
  %530 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %531 = cast(%var_2613, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
  %532 = log(%531) /* ty=Tensor[(1, 16, 9), float64] */;
  %533 = cast(%var_2613, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %537 = %530.0;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %539 = reshape(%538, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %540 = @func_480(%539) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %541 = bitwise_and(%535, %536) /* ty=Tensor[(?, 16, 9), uint64] */;
  %542 = %540.0;
  (%537, %541, %542)
}

def @func_4749() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
  %543 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %544 = %543.1;
  %545 = @func_2998() /* ty=Tensor[(3, 5, 15), float32] */;
  (%544, %545)
}

def @func_2462(%var_2448: Tensor[(9, 3, 12), uint16], %var_2454: Tensor[(32), float64], %var_2455: Tensor[(112), int64]) -> (Tensor[(9, 3, 12), float64], Tensor[(4, 28), int64], Tensor[(32), float64], Tensor[(112), int64]) {
  %546 = @func_2377() /* ty=(Tensor[(9, 3, 12), uint16],) */;
  %547 = %546.0;
  %548 = cast(%var_2448, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %552 = cast(%var_2454, dtype="float64") /* ty=Tensor[(32), float64] */;
  %553 = cast(%var_2455, dtype="int64") /* ty=Tensor[(112), int64] */;
  %554 = reshape(%552, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %555 = reshape(%553, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
  %556 = @func_1022(%554, %555) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
  %557 = floor_mod(%550, %551) /* ty=Tensor[(9, 3, 12), float64] */;
  %558 = %556.5;
  (%557, %558, %var_2454, %var_2455)
}

def @func_2022() -> (Tensor[(3, 5, 15), float64],) {
  %559 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %560 = %559.0;
  (%560,)
}

def @func_4595() -> Tensor[(3, 5, 15), float64] {
  @func_1832() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_1816(%var_1800: int16) -> (Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) {
  %561 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
  %562 = erf(%561) /* ty=Tensor[(2, 5, 16), float64] */;
  %563 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 5, 16), float64] */, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %567 = cast(%var_1800, dtype="int16") /* ty=int16 */;
  %568 = cast(meta[relay.Constant][25] /* ty=Tensor[(600), int16] */, dtype="int16") /* ty=Tensor[(600), int16] */;
  %569 = reshape(%567, newshape=[]) /* ty=int16 */;
  %570 = reshape(%568, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), int16] */;
  %571 = @func_820(%569, %570) /* ty=(Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) */;
  %572 = divide(%565, %566) /* ty=Tensor[(2, 5, 16), float32] */;
  %573 = %571.1;
  %574 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  (%572, %573, %var_1800, meta[relay.Constant][25] /* ty=Tensor[(600), int16] */, %574)
}

def @func_4988(%var_4970: float32, %var_4971: Tensor[(6, 6, 10), float32]) -> (Tensor[(6, 6, 10), float32],) {
  %575 = cast(%var_4970, dtype="float32") /* ty=float32 */;
  %576 = cast(%var_4971, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %577 = maximum(%575, %576) /* ty=Tensor[(6, 6, 10), float32] */;
  (%577,)
}

def @func_3859() -> Tensor[(3, 5, 15), bool] {
  %578 = @func_3020() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %579 = %578.1;
  %580 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 5, 15), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%582, %583) /* ty=Tensor[(3, 5, 15), bool] */
}

def @func_243(%var_221: Tensor[(15, 9, 15), float32], %var_225: int64, %var_226: Tensor[(112), int64]) -> (Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) {
  %584 = cast(%var_225, dtype="int64") /* ty=int64 */;
  %585 = cast(%var_226, dtype="int64") /* ty=Tensor[(112), int64] */;
  %586 = reshape(%584, newshape=[]) /* ty=int64 */;
  %587 = reshape(%585, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), int64] */;
  %588 = @func_43(%586, %587) /* ty=(Tensor[(1, 7, 16), bool],) */;
  %589 = cast(%var_221, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %590 = asinh(%589) /* ty=Tensor[(15, 9, 15), float32] */;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %592 = cast(%var_225, dtype="float32") /* ty=float32 */;
  %593 = %588.0;
  %594 = divide(%591, %592) /* ty=Tensor[(15, 9, 15), float32] */;
  (%593, %var_226, %594)
}

def @func_5278() -> Tensor[(3, 5, 15), float64] {
  %595 = @func_3629() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %595.1
}

def @func_404() -> Tensor[(3, 5, 15), float64] {
  %596 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %596.0
}

def @func_2584(%var_2557: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) {
  %597 = cast(%var_2557, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %598 = cast(%var_2557, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %599 = reshape(%597, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %600 = reshape(%598, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %601 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %602 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %603 = @func_500(%599, %600) /* ty=Tensor[(9, 3, 12), uint16] */;
  %604 = %601.0;
  (%602, %603, %var_2557, %604)
}

def @func_4352() -> Tensor[(3, 5, 15), float64] {
  %605 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %605.0
}

def @func_1912() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %606 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %607 = @func_1832() /* ty=Tensor[(3, 5, 15), float64] */;
  (%606, %607)
}

def @func_4108() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %608 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %609 = @func_3629() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %610 = %608.0;
  %611 = %609.1;
  (%610, %611)
}

def @func_3593() -> (Tensor[(3, 5, 15), float64],) {
  %612 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %613 = %612.0;
  (%613,)
}

def @func_2873(%var_2832: Tensor[(24, 6), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(15, 12, ?), int8], Tensor[(3, 5, 15), float32], Tensor[(24, 6), float64], Tensor[(32), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 11, 7), bool], Tensor[(693), float64], Tensor[(15, 12, ?), uint8]) {
  %614 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %615 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %616 = sinh(%615) /* ty=Tensor[(15, 12, 1), float64] */;
  %617 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 12, 1), float64] */, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %621 = cast(%var_2832, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
  %622 = reshape(%621, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float64] */;
  %623 = @func_2634(%622) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) */;
  %624 = @func_2776() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) */;
  %625 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %626 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %627 = cast(meta[relay.Constant][28] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %628 = reshape(%627, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), float64] */;
  %629 = @func_2165(%628) /* ty=(Tensor[(9, 11, 7), bool],) */;
  %630 = cast(%616, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %631 = log2(%630) /* ty=Tensor[(15, 12, 1), float64] */;
  %632 = cast(%616, dtype="uint8") /* ty=Tensor[(15, 12, 1), uint8] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint8") /* ty=Tensor[(15, 12, 1), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %636 = %614.0;
  %637 = left_shift(%619, %620) /* ty=Tensor[(15, 12, ?), int8] */;
  %638 = %623.2;
  %639 = %624.5;
  %640 = %625.0;
  %641 = %626.0;
  %642 = %629.0;
  %643 = subtract(%634, %635) /* ty=Tensor[(15, 12, ?), uint8] */;
  (%636, %637, %638, %var_2832, %639, %640, %641, %642, meta[relay.Constant][28] /* ty=Tensor[(693), float64] */, %643)
}

def @func_2887(%var_2883: Tensor[(14, 8, 13), float64]) -> (Tensor[(14, 8, 13), float64],) {
  %644 = cast(%var_2883, dtype="float64") /* ty=Tensor[(14, 8, 13), float64] */;
  %645 = rsqrt(%644) /* ty=Tensor[(14, 8, 13), float64] */;
  (%645,)
}

def @func_1171() -> Tensor[(3, 5, 15), float32] {
  %646 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %646.0
}

def @func_4390() -> Tensor[(3, 5, 15), float64] {
  %647 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %647.0
}

def @func_611() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) {
  %648 = cast(meta[relay.Constant][29] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %649 = cast(meta[relay.Constant][29] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %650 = reshape(%648, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %651 = reshape(%649, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %652 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %653 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %654 = @func_500(%650, %651) /* ty=Tensor[(9, 3, 12), uint16] */;
  %655 = %652.0;
  (%653, %654, meta[relay.Constant][29] /* ty=Tensor[(324), uint16] */, %655)
}

def @func_3381(%var_3325: Tensor[(9, 2, 1), float64], %var_3356: Tensor[(9, 2, 9), float64]) -> (Tensor[(9, 3, 12), uint16], int16, Tensor[(9, 2, ?), bool], Tensor[(9, 2, 9), bool], Tensor[(3, 5, 15), float64]) {
  %656 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %657 = reshape(%656, newshape=[]) /* ty=int16 */;
  %658 = @func_1816(%657) /* ty=(Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) */;
  %659 = cast(%var_3325, dtype="float64") /* ty=Tensor[(9, 2, 1), float64] */;
  %660 = log10(%659) /* ty=Tensor[(9, 2, 1), float64] */;
  %661 = cast(%var_3325, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = cast(%660, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %666 = cast(%var_3356, dtype="bool") /* ty=Tensor[(9, 2, 9), bool] */;
  %667 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %668 = %658.1;
  %669 = greater(%663, %664) /* ty=Tensor[(9, 2, ?), bool] */;
  %670 = logical_and(%665, %666) /* ty=Tensor[(9, 2, 9), bool] */;
  %671 = %667.0;
  (%668, meta[relay.Constant][30] /* ty=int16 */, %669, %670, %671)
}

def @func_4543() -> (Tensor[(3, 5, 15), float32],) {
  %672 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %673 = %672.0;
  (%673,)
}

def @func_2263(%var_2237: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), uint32], Tensor[(3, 5, 15), float64]) {
  %674 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %675 = %674.1;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %677 = reshape(%676, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %678 = @func_480(%677) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %679 = cast(%var_2237, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
  %680 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%675, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %683 = cast(%var_2237, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %684 = %678.1;
  %685 = bitwise_xor(%681, %682) /* ty=Tensor[(3, 5, 15), uint32] */;
  %686 = sin(%683) /* ty=Tensor[(3, 5, 15), float64] */;
  (%684, %685, %686)
}

def @func_480(%var_452: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) {
  %687 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  %688 = cast(%var_452, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = not_equal(%690, %691) /* ty=Tensor[(3, 5, 15), bool] */;
  %693 = cast(%var_452, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %697 = cast(%692, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %698 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%687, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = floor_divide(%695, %696) /* ty=Tensor[(3, 5, 15), float32] */;
  %702 = greater(%699, %700) /* ty=Tensor[(3, 5, 15), bool] */;
  (%701, %702)
}

def @func_4812() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
  %703 = @func_4108() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %704 = @func_3322() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) */;
  %705 = %703.1;
  %706 = %704.3;
  (%705, %706)
}

def @func_1231(%var_1225: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float32] {
  %707 = cast(%var_1225, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %708 = asinh(%707) /* ty=Tensor[(14, 2, 3), float32] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  tan(%709) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_742(%var_732: Tensor[(2, 15, 5), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) {
  %710 = cast(%var_732, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %711 = cast(%var_732, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %712 = atan(%710) /* ty=Tensor[(2, 15, 5), float64] */;
  %713 = sin(%711) /* ty=Tensor[(2, 15, 5), float64] */;
  (%712, %713)
}

def @func_4460() -> (Tensor[(3, 5, 15), float64],) {
  %714 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
  %715 = %714.0;
  (%715,)
}

def @func_580() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  %716 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %718 = reshape(%717, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %719 = @func_480(%718) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %720 = cast(%716, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %721 = rsqrt(%720) /* ty=Tensor[(3, 5, 15), float64] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %723 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%716, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %726 = floor_mod(%724, %725) /* ty=Tensor[(3, 5, 15), float64] */;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %728 = reshape(%727, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %729 = @func_480(%728) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %732 = reshape(%731, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %733 = @func_480(%732) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %734 = cast(%716, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %735 = %719.0;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %737 = reshape(%736, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %738 = @func_480(%737) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %739 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %740 = %733.1;
  %741 = log10(%734) /* ty=Tensor[(3, 5, 15), float64] */;
  %742 = %738.1;
  (%735, %726, %739, %730, %740, %741, %742)
}

def @func_1055(%var_1043: Tensor[(15, 11, 12), float32], %var_1046: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), int64] {
  %743 = cast(%var_1043, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %744 = sqrt(%743) /* ty=Tensor[(15, 11, 12), float32] */;
  %745 = cast(%var_1046, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%744, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%747, %748) /* ty=Tensor[(15, 11, 12), int64] */
}

def @func_830() -> (Tensor[(3, 5, 15), float64],) {
  %749 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_2165(%var_2149: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), bool],) {
  %751 = cast(%var_2149, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %752 = atanh(%751) /* ty=Tensor[(9, 11, 7), float64] */;
  %753 = cast(%var_2149, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %757 = bitwise_xor(%755, %756) /* ty=Tensor[(9, 11, 7), int16] */;
  %758 = cast(%752, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = greater(%760, %761) /* ty=Tensor[(9, 11, 7), bool] */;
  (%762,)
}

def @func_2530() -> (Tensor[(3, 5, 15), float64],) {
  %763 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %764 = %763.0;
  (%764,)
}

def @func_2716() -> Tensor[(3, 5, 15), float32] {
  %765 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %765.0
}

def @func_5197() -> Tensor[(3, 5, 15), float64] {
  %766 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %766.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2265(%var_2264: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), uint32], Tensor[(3, 5, 15), float64]) {
  %13 = fn (%var_2237: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), uint32], Tensor[(3, 5, 15), float64]) {
    %0 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %1 = %0.1;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %3 = reshape(%2, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
    %4 = @func_480(%3) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
    %5 = cast(%var_2237, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
    %6 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%1, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %9 = cast(%var_2237, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %10 = %4.1;
    %11 = bitwise_xor(%7, %8) /* ty=Tensor[(3, 5, 15), uint32] */;
    %12 = sin(%9) /* ty=Tensor[(3, 5, 15), float64] */;
    (%10, %11, %12)
  };
  %13(%var_2264) /* ty=(Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), uint32], Tensor[(3, 5, 15), float64]) */
}

def @func_4714() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_4712() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_2778() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) {
  @func_2776() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) */
}

def @func_2716() -> Tensor[(3, 5, 15), float32] {
  %14 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %14.0
}

def @func_4525(%var_4524: Tensor[(10, 15, 2), int32]) -> (Tensor[(10, 15, 2), bool],) {
  %20 = fn (%var_4517: Tensor[(10, 15, 2), int32]) -> (Tensor[(10, 15, 2), bool],) {
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
    %16 = shape_of(%var_4517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%var_4517, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %19 = equal(%17, %18) /* ty=Tensor[(10, 15, 2), bool] */;
    (%19,)
  };
  %20(%var_4524) /* ty=(Tensor[(10, 15, 2), bool],) */
}

def @func_4110() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_4108() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_3324() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
  @func_3322() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) */
}

def @func_1912() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %21 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %22 = @func_1832() /* ty=Tensor[(3, 5, 15), float64] */;
  (%21, %22)
}

def @func_1674(%var_1673: Tensor[(84), float32]) -> (Tensor[(324), uint16], Tensor[(14, 2, 3), float32], Tensor[(84), float32], Tensor[(3, 5, 15), float32]) {
  %30 = fn (%var_1658: Tensor[(84), float32]) -> (Tensor[(324), uint16], Tensor[(14, 2, 3), float32], Tensor[(84), float32], Tensor[(3, 5, 15), float32]) {
    %23 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
    %24 = cast(%var_1658, dtype="float32") /* ty=Tensor[(84), float32] */;
    %25 = reshape(%24, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
    %26 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
    %27 = %23.2;
    %28 = @func_1231(%25) /* ty=Tensor[(14, 2, 3), float32] */;
    %29 = %26.3;
    (%27, %28, %var_1658, %29)
  };
  %30(%var_1673) /* ty=(Tensor[(324), uint16], Tensor[(14, 2, 3), float32], Tensor[(84), float32], Tensor[(3, 5, 15), float32]) */
}

def @func_1709() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  %31 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %33 = reshape(%32, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %34 = @func_1413(%33) /* ty=(Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) */;
  %35 = cast(%31, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %36 = reshape(%35, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %37 = @func_480(%36) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %38 = %34.1;
  %39 = %37.1;
  (%31, %38, %39)
}

def @func_2876(%var_2874: Tensor[(24, 6), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(15, 12, ?), int8], Tensor[(3, 5, 15), float32], Tensor[(24, 6), float64], Tensor[(32), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 11, 7), bool], Tensor[(693), float64], Tensor[(15, 12, ?), uint8]) {
  @func_2873(%var_2874) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(15, 12, ?), int8], Tensor[(3, 5, 15), float32], Tensor[(24, 6), float64], Tensor[(32), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 11, 7), bool], Tensor[(693), float64], Tensor[(15, 12, ?), uint8]) */
}

def @func_3859() -> Tensor[(3, 5, 15), bool] {
  %40 = @func_3020() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %41 = %40.1;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 5, 15), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%44, %45) /* ty=Tensor[(3, 5, 15), bool] */
}

def @func_1498(%var_1427: Tensor[(10, 16, 11), float32], %var_1462: Tensor[(32), float64], %var_1463: Tensor[(112), int64]) -> (Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) {
  %46 = cast(%var_1427, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %47 = atanh(%46) /* ty=Tensor[(10, 16, 11), float32] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 16, 11), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = not_equal(%50, %51) /* ty=Tensor[(10, 16, 11), bool] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %54 = cast(%var_1462, dtype="float64") /* ty=Tensor[(32), float64] */;
  %55 = cast(%var_1463, dtype="int64") /* ty=Tensor[(112), int64] */;
  %56 = reshape(%54, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %57 = reshape(%55, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
  %58 = @func_1022(%56, %57) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
  %59 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %61 = reshape(%60, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %62 = @func_1413(%61) /* ty=(Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) */;
  %63 = asinh(%53) /* ty=Tensor[(10, 16, 11), float32] */;
  %64 = %58.1;
  %65 = %62.0;
  (%63, %59, %64, %var_1462, %var_1463, %65)
}

def @func_504(%var_502: Tensor[(9, 3, 12), uint16], %var_503: Tensor[(9, 3, 12), uint16]) -> Tensor[(9, 3, 12), uint16] {
  @func_500(%var_502, %var_503) /* ty=Tensor[(9, 3, 12), uint16] */
}

def @func_983(%var_982: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) {
  %80 = fn (%var_969: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) {
    %66 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
    %67 = %66.0;
    %68 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %69 = %68.0;
    %70 = cast(%69, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
    %71 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%67, dtype="uint32") /* ty=Tensor[(3, 5, 15), uint32] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %74 = cast(%var_969, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %75 = cast(%var_969, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %76 = reshape(%74, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %77 = reshape(%75, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %78 = left_shift(%72, %73) /* ty=Tensor[(3, 5, 15), uint32] */;
    %79 = @func_500(%76, %77) /* ty=Tensor[(9, 3, 12), uint16] */;
    (%78, %79, %var_969)
  };
  %80(%var_982) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */
}

def @func_2379() -> (Tensor[(9, 3, 12), uint16],) {
  @func_2377() /* ty=(Tensor[(9, 3, 12), uint16],) */
}

def @func_4751() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
  @func_4749() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) */
}

def @func_2531() -> (Tensor[(3, 5, 15), float64],) {
  %83 = fn () -> (Tensor[(3, 5, 15), float64],) {
    %81 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %82 = %81.0;
    (%82,)
  };
  %83() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_5197() -> Tensor[(3, 5, 15), float64] {
  %84 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %84.0
}

def @func_1234(%var_1232: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float32] {
  @func_1231(%var_1232) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_3969() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
  %89 = fn () -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
    %85 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %86 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
    %87 = %85.0;
    %88 = %86.0;
    (%87, %88)
  };
  %89() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) */
}

def @func_1614(%var_1611: Tensor[(324), uint16], %var_1612: int16, %var_1613: Tensor[(600), int16]) -> (Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) {
  @func_1609(%var_1611, %var_1612, %var_1613) /* ty=(Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) */
}

def @func_1172() -> Tensor[(3, 5, 15), float32] {
  %91 = fn () -> Tensor[(3, 5, 15), float32] {
    %90 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
    %90.0
  };
  %91() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_4638(%var_4637: Tensor[(3, 5, 15), float32]) -> (Tensor[(3, 5, 15), bool],) {
  %98 = fn (%var_4629: Tensor[(3, 5, 15), float32]) -> (Tensor[(3, 5, 15), bool],) {
    %92 = @func_1171() /* ty=Tensor[(3, 5, 15), float32] */;
    %93 = cast(%var_4629, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%92, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %97 = less(%95, %96) /* ty=Tensor[(3, 5, 15), bool] */;
    (%97,)
  };
  %98(%var_4637) /* ty=(Tensor[(3, 5, 15), bool],) */
}

def @func_1711() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  @func_1709() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */
}

def @func_613() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) {
  @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */
}

def @func_675() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %102 = fn () -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
    %99 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
    %100 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
    %101 = %99.1;
    (%100, %101)
  };
  %102() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_1058(%var_1056: Tensor[(15, 11, 12), float32], %var_1057: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), int64] {
  %109 = fn (%var_1043: Tensor[(15, 11, 12), float32], %var_1046: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), int64] {
    %103 = cast(%var_1043, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
    %104 = sqrt(%103) /* ty=Tensor[(15, 11, 12), float32] */;
    %105 = cast(%var_1046, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
    %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%104, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    left_shift(%107, %108) /* ty=Tensor[(15, 11, 12), int64] */
  };
  %109(%var_1056, %var_1057) /* ty=Tensor[(15, 11, 12), int64] */
}

def @func_1914() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_448() -> Tensor[(3, 5, 15), float64] {
  @func_446() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_4353() -> Tensor[(3, 5, 15), float64] {
  %111 = fn () -> Tensor[(3, 5, 15), float64] {
    %110 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %110.0
  };
  %111() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_5311(%var_5309: Tensor[(6, 5, 14), uint8]) -> Tensor[(6, 5, 14), uint8] {
  @func_5308(%var_5309) /* ty=Tensor[(6, 5, 14), uint8] */
}

def @func_3824(%var_3823: Tensor[(9, 3, 12), float64]) -> (Tensor[(9, 3, 12), float32], Tensor[(9, 3, 12), float64], Tensor[(9, 3, 12), float32]) {
  %142 = fn (%var_3809: Tensor[(9, 3, 12), float64]) -> (Tensor[(9, 3, 12), float32], Tensor[(9, 3, 12), float64], Tensor[(9, 3, 12), float32]) {
    %112 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
    %113 = %112.1;
    %114 = cast(%113, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %115 = sinh(%114) /* ty=Tensor[(9, 3, 12), float64] */;
    %116 = cast(%115, dtype="uint32") /* ty=Tensor[(9, 3, 12), uint32] */;
    %117 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%113, dtype="uint32") /* ty=Tensor[(9, 3, 12), uint32] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %120 = logical_xor(%118, %119) /* ty=Tensor[(9, 3, 12), uint32] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
    %122 = cos(%121) /* ty=Tensor[(9, 3, 12), float32] */;
    %123 = cast(%122, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %124 = atan(%123) /* ty=Tensor[(9, 3, 12), float64] */;
    %125 = cast(%122, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
    %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%124, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %129 = cast(%115, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %130 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%122, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %133 = cast(%var_3809, dtype="int32") /* ty=Tensor[(9, 3, 12), int32] */;
    %134 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%124, dtype="int32") /* ty=Tensor[(9, 3, 12), int32] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %137 = minimum(%135, %136) /* ty=Tensor[(9, 3, 12), int32] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
    %139 = mod(%127, %128) /* ty=Tensor[(9, 3, 12), float32] */;
    %140 = power(%131, %132) /* ty=Tensor[(9, 3, 12), float64] */;
    %141 = acosh(%138) /* ty=Tensor[(9, 3, 12), float32] */;
    (%139, %140, %141)
  };
  %142(%var_3823) /* ty=(Tensor[(9, 3, 12), float32], Tensor[(9, 3, 12), float64], Tensor[(9, 3, 12), float32]) */
}

def @func_4391() -> Tensor[(3, 5, 15), float64] {
  %144 = fn () -> Tensor[(3, 5, 15), float64] {
    %143 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %143.0
  };
  %144() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_2923() -> (Tensor[(3, 5, 15), float32],) {
  @func_2921() /* ty=(Tensor[(3, 5, 15), float32],) */
}

def @func_4969() -> Tensor[(3, 5, 15), float32] {
  @func_4967() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_3322() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
  %145 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %146 = @func_2921() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %147 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 36), uint16] */, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %148 = reshape(%147, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %149 = @func_3230(%148) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) */;
  %150 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 36), uint16] */, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %151 = sin(%150) /* ty=Tensor[(9, 36), float32] */;
  %152 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 36), uint16] */, dtype="int64") /* ty=Tensor[(9, 36), int64] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(2), int32] */;
  %154 = cast(%151, dtype="int64") /* ty=Tensor[(9, 36), int64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %156 = %145.0;
  %157 = %146.0;
  %158 = %149.0;
  %159 = bitwise_xor(%154, %155) /* ty=Tensor[(9, 36), int64] */;
  (%156, %157, %158, %159)
}

def @func_832() -> (Tensor[(3, 5, 15), float64],) {
  @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_4813() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
  %164 = fn () -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) {
    %160 = @func_4108() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %161 = @func_3322() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) */;
    %162 = %160.1;
    %163 = %161.3;
    (%162, %163)
  };
  %164() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), int64]) */
}

def @func_2078() -> (Tensor[(3, 5, 15), float32],) {
  @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */
}

def @func_2341(%var_2274: Tensor[(150), float64], %var_2334: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) {
  %165 = cast(%var_2274, dtype="float64") /* ty=Tensor[(150), float64] */;
  %166 = reshape(%165, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %167 = @func_742(%166) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) */;
  %168 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %169 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %170 = cast(%var_2334, dtype="int32") /* ty=Tensor[(150), int32] */;
  %171 = shape_of(%var_2274, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%var_2274, dtype="int32") /* ty=Tensor[(150), int32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), int32] */;
  %174 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %175 = %167.1;
  %176 = %168.0;
  %177 = %169.0;
  %178 = add(%172, %173) /* ty=Tensor[(150), int32] */;
  (%174, %175, %176, %177, %178)
}

def @func_1213(%var_1211: Tensor[(14, 6, 13), float64], %var_1212: Tensor[(14, 6, 13), float64]) -> (Tensor[(14, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 6, 13), float64]) {
  %191 = fn (%var_1179: Tensor[(14, 6, 13), float64], %var_1180: Tensor[(14, 6, 13), float64]) -> (Tensor[(14, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 6, 13), float64]) {
    %179 = cast(%var_1180, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
    %180 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%var_1179, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %183 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 6, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
    %184 = shape_of(%var_1180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%var_1180, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %187 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
    %188 = floor_divide(%181, %182) /* ty=Tensor[(14, 6, 13), float64] */;
    %189 = less(%185, %186) /* ty=Tensor[(14, 6, 13), bool] */;
    %190 = erf(%187) /* ty=Tensor[(14, 6, 13), float64] */;
    (%188, %189, %190)
  };
  %191(%var_1211, %var_1212) /* ty=(Tensor[(14, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 6, 13), float64]) */
}

def @func_243(%var_221: Tensor[(15, 9, 15), float32], %var_225: int64, %var_226: Tensor[(112), int64]) -> (Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) {
  %192 = cast(%var_225, dtype="int64") /* ty=int64 */;
  %193 = cast(%var_226, dtype="int64") /* ty=Tensor[(112), int64] */;
  %194 = reshape(%192, newshape=[]) /* ty=int64 */;
  %195 = reshape(%193, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), int64] */;
  %196 = @func_43(%194, %195) /* ty=(Tensor[(1, 7, 16), bool],) */;
  %197 = cast(%var_221, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %198 = asinh(%197) /* ty=Tensor[(15, 9, 15), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %200 = cast(%var_225, dtype="float32") /* ty=float32 */;
  %201 = %196.0;
  %202 = divide(%199, %200) /* ty=Tensor[(15, 9, 15), float32] */;
  (%201, %var_226, %202)
}

def @func_3631() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_3629() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_830() -> (Tensor[(3, 5, 15), float64],) {
  %203 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %204 = %203.0;
  (%204,)
}

def @func_500(%var_493: Tensor[(9, 3, 12), uint16], %var_494: Tensor[(9, 3, 12), uint16]) -> Tensor[(9, 3, 12), uint16] {
  %205 = cast(%var_494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %206 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_493, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%207, %208) /* ty=Tensor[(9, 3, 12), uint16] */
}

def @func_2873(%var_2832: Tensor[(24, 6), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(15, 12, ?), int8], Tensor[(3, 5, 15), float32], Tensor[(24, 6), float64], Tensor[(32), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(9, 11, 7), bool], Tensor[(693), float64], Tensor[(15, 12, ?), uint8]) {
  %209 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %210 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %211 = sinh(%210) /* ty=Tensor[(15, 12, 1), float64] */;
  %212 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 12, 1), float64] */, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %216 = cast(%var_2832, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
  %217 = reshape(%216, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float64] */;
  %218 = @func_2634(%217) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) */;
  %219 = @func_2776() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) */;
  %220 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %221 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %222 = cast(meta[relay.Constant][6] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %223 = reshape(%222, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), float64] */;
  %224 = @func_2165(%223) /* ty=(Tensor[(9, 11, 7), bool],) */;
  %225 = cast(%211, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %226 = log2(%225) /* ty=Tensor[(15, 12, 1), float64] */;
  %227 = cast(%211, dtype="uint8") /* ty=Tensor[(15, 12, 1), uint8] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint8") /* ty=Tensor[(15, 12, 1), uint8] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %231 = %209.0;
  %232 = left_shift(%214, %215) /* ty=Tensor[(15, 12, ?), int8] */;
  %233 = %218.2;
  %234 = %219.5;
  %235 = %220.0;
  %236 = %221.0;
  %237 = %224.0;
  %238 = subtract(%229, %230) /* ty=Tensor[(15, 12, ?), uint8] */;
  (%231, %232, %233, %var_2832, %234, %235, %236, %237, meta[relay.Constant][6] /* ty=Tensor[(693), float64] */, %238)
}

def @func_3000() -> Tensor[(3, 5, 15), float32] {
  @func_2998() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_3909(%var_3908: Tensor[(6, 10, 2), uint16]) -> (Tensor[(6, 10, 2), bool],) {
  %244 = fn (%var_3900: Tensor[(6, 10, 2), uint16]) -> (Tensor[(6, 10, 2), bool],) {
    %239 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 2), uint16] */, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
    %240 = shape_of(%var_3900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%var_3900, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %243 = equal(%241, %242) /* ty=Tensor[(6, 10, 2), bool] */;
    (%243,)
  };
  %244(%var_3908) /* ty=(Tensor[(6, 10, 2), bool],) */
}

def @func_2183() -> Tensor[(3, 5, 15), float64] {
  @func_2181() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_4924(%var_4878: Tensor[(392), float32], %var_4894: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) {
  %245 = @func_1709() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %246 = cast(meta[relay.Constant][8] /* ty=Tensor[(2025, 1), float32] */, dtype="float32") /* ty=Tensor[(2025, 1), float32] */;
  %247 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %249 = reshape(%246, newshape=[15, 9, 15]) /* ty=Tensor[(15, 9, 15), float32] */;
  %250 = reshape(%247, newshape=[]) /* ty=int64 */;
  %251 = reshape(%248, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %252 = @func_243(%249, %250, %251) /* ty=(Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) */;
  %253 = cast(%var_4878, dtype="float32") /* ty=Tensor[(392), float32] */;
  %254 = cast(%var_4878, dtype="float32") /* ty=Tensor[(392), float32] */;
  %255 = cast(meta[relay.Constant][9] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %256 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %257 = reshape(%253, newshape=[14, 4, 7]) /* ty=Tensor[(14, 4, 7), float32] */;
  %258 = reshape(%254, newshape=[14, 4, 7]) /* ty=Tensor[(14, 4, 7), float32] */;
  %259 = reshape(%255, newshape=[28, 4]) /* ty=Tensor[(28, 4), int64] */;
  %260 = reshape(%256, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %261 = @func_4231(%257, %258, %259, %260) /* ty=(Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) */;
  %262 = @func_4749() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) */;
  %263 = cast(%var_4894, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %264 = reshape(%263, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %265 = @func_2584(%264) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) */;
  %266 = %265.0;
  %267 = @func_2181() /* ty=Tensor[(3, 5, 15), float64] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %269 = reshape(%268, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float32] */;
  %270 = @func_4636(%269) /* ty=(Tensor[(3, 5, 15), bool],) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %273 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%266, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = %245.0;
  %277 = %252.2;
  %278 = %261.1;
  %279 = %262.0;
  %280 = equal(%274, %275) /* ty=Tensor[(3, 5, 15), bool] */;
  %281 = @func_3859() /* ty=Tensor[(3, 5, 15), bool] */;
  (%276, %277, meta[relay.Constant][8] /* ty=Tensor[(2025, 1), float32] */, -2 /* ty=int64 */, meta[relay.Constant][9] /* ty=Tensor[(112), int64] */, %278, %var_4878, meta[relay.Constant][10] /* ty=Tensor[(336), float32] */, %var_4894, %267, %279, %280, %281)
}

def @func_3489(%var_3487: Tensor[(14, 8, 1), float32], %var_3488: Tensor[(14, 8, 3), float32]) -> (Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) {
  %301 = fn (%var_3450: Tensor[(14, 8, 1), float32], %var_3451: Tensor[(14, 8, 3), float32]) -> (Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) {
    %282 = cast(%var_3450, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
    %283 = cast(%var_3451, dtype="float32") /* ty=Tensor[(14, 8, 3), float32] */;
    %284 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %285 = @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %286 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %287 = reshape(%286, newshape=[324]) /* ty=Tensor[(324), uint16] */;
    %288 = @func_981(%287) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
    %289 = cast(%var_3450, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
    %290 = asinh(%289) /* ty=Tensor[(14, 8, 1), float64] */;
    %291 = cast(%290, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
    %292 = cast(%290, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
    %293 = log2(%292) /* ty=Tensor[(14, 8, 1), float32] */;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
    %295 = power(%282, %283) /* ty=Tensor[(14, 8, 3), float32] */;
    %296 = %284.0;
    %297 = %285.0;
    %298 = %288.0;
    %299 = erf(%291) /* ty=Tensor[(14, 8, 1), float32] */;
    %300 = exp(%294) /* ty=Tensor[(14, 8, 1), float64] */;
    (%295, %296, %297, %298, meta[relay.Constant][11] /* ty=Tensor[(324), uint16] */, %299, %300)
  };
  %301(%var_3487, %var_3488) /* ty=(Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) */
}

def @func_4545() -> (Tensor[(3, 5, 15), float32],) {
  @func_4543() /* ty=(Tensor[(3, 5, 15), float32],) */
}

def @func_4543() -> (Tensor[(3, 5, 15), float32],) {
  %302 = @func_2076() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %303 = %302.0;
  (%303,)
}

def @func_1818(%var_1817: int16) -> (Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) {
  %318 = fn (%var_1800: int16) -> (Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) {
    %304 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
    %305 = erf(%304) /* ty=Tensor[(2, 5, 16), float64] */;
    %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 16), float64] */, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
    %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%305, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %310 = cast(%var_1800, dtype="int16") /* ty=int16 */;
    %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(600), int16] */, dtype="int16") /* ty=Tensor[(600), int16] */;
    %312 = reshape(%310, newshape=[]) /* ty=int16 */;
    %313 = reshape(%311, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), int16] */;
    %314 = @func_820(%312, %313) /* ty=(Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) */;
    %315 = divide(%308, %309) /* ty=Tensor[(2, 5, 16), float32] */;
    %316 = %314.1;
    %317 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
    (%315, %316, %var_1800, meta[relay.Constant][13] /* ty=Tensor[(600), int16] */, %317)
  };
  %318(%var_1817) /* ty=(Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) */
}

def @func_4041(%var_4040: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(32), float64], Tensor[(4, 440), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(9, 3, 12), uint16]) {
  %337 = fn (%var_3982: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(32), float64], Tensor[(4, 440), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(9, 3, 12), uint16]) {
    %319 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %320 = reshape(%319, newshape=[324]) /* ty=Tensor[(324), uint16] */;
    %321 = @func_981(%320) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
    %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 440), float32] */, dtype="float32") /* ty=Tensor[(4, 440), float32] */;
    %323 = cast(meta[relay.Constant][15] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %324 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
    %325 = reshape(%322, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
    %326 = reshape(%323, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %327 = reshape(%324, newshape=[112]) /* ty=Tensor[(112), int64] */;
    %328 = @func_1498(%325, %326, %327) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) */;
    %329 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %330 = cast(%var_3982, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %331 = reshape(%329, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %332 = reshape(%330, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %333 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
    %334 = %321.2;
    %335 = %328.3;
    %336 = @func_500(%331, %332) /* ty=Tensor[(9, 3, 12), uint16] */;
    (%333, %334, %var_3982, %335, meta[relay.Constant][14] /* ty=Tensor[(4, 440), float32] */, meta[relay.Constant][15] /* ty=Tensor[(32), float64] */, meta[relay.Constant][16] /* ty=Tensor[(112), int64] */, %336)
  };
  %337(%var_4040) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(32), float64], Tensor[(4, 440), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(9, 3, 12), uint16]) */
}

def @func_3595() -> (Tensor[(3, 5, 15), float64],) {
  @func_3593() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_2665() -> Tensor[(3, 5, 15), float64] {
  @func_2663() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_1413(%var_1404: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) {
  %338 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %339 = %338.2;
  %340 = cast(%var_1404, dtype="uint16") /* ty=Tensor[(3, 5, 15), uint16] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="uint16") /* ty=Tensor[(3, 5, 15), uint16] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %344 = maximum(%342, %343) /* ty=Tensor[(3, 5, 15), uint16] */;
  %345 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  (%344, %345)
}

def @func_2718() -> Tensor[(3, 5, 15), float32] {
  @func_2716() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_380() -> (Tensor[(3, 5, 15), float64],) {
  @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_4991(%var_4989: float32, %var_4990: Tensor[(6, 6, 10), float32]) -> (Tensor[(6, 6, 10), float32],) {
  %349 = fn (%var_4970: float32, %var_4971: Tensor[(6, 6, 10), float32]) -> (Tensor[(6, 6, 10), float32],) {
    %346 = cast(%var_4970, dtype="float32") /* ty=float32 */;
    %347 = cast(%var_4971, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
    %348 = maximum(%346, %347) /* ty=Tensor[(6, 6, 10), float32] */;
    (%348,)
  };
  %349(%var_4989, %var_4990) /* ty=(Tensor[(6, 6, 10), float32],) */
}

def @func_1231(%var_1225: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float32] {
  %350 = cast(%var_1225, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %351 = asinh(%350) /* ty=Tensor[(14, 2, 3), float32] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  tan(%352) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_1369(%var_1367: Tensor[(32), float64], %var_1368: Tensor[(112), int64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) {
  %368 = fn (%var_1359: Tensor[(32), float64], %var_1360: Tensor[(112), int64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) {
    %353 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
    %354 = %353.0;
    %355 = cast(%354, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
    %356 = cos(%355) /* ty=Tensor[(3, 5, 15), float32] */;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %358 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %359 = cast(%var_1359, dtype="float64") /* ty=Tensor[(32), float64] */;
    %360 = cast(%var_1360, dtype="int64") /* ty=Tensor[(112), int64] */;
    %361 = reshape(%359, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
    %362 = reshape(%360, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
    %363 = @func_1022(%361, %362) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
    %364 = @func_1171() /* ty=Tensor[(3, 5, 15), float32] */;
    %365 = asinh(%357) /* ty=Tensor[(3, 5, 15), float64] */;
    %366 = %358.1;
    %367 = %363.0;
    (%364, %365, %366, %367, %var_1359, %var_1360)
  };
  %368(%var_1367, %var_1368) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) */
}

def @func_3138() -> (Tensor[(3, 5, 15), float64],) {
  @func_3136() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_582() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */
}

def @func_1729() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %369 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %370 = %369.1;
  %371 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  (%370, %371)
}

def @func_5017() -> Tensor[(3, 5, 15), float32] {
  @func_2716() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_404() -> Tensor[(3, 5, 15), float64] {
  %372 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %372.0
}

def @func_692() -> (Tensor[(3, 5, 15), float32],) {
  %375 = fn () -> (Tensor[(3, 5, 15), float32],) {
    %373 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
    %374 = %373.0;
    (%374,)
  };
  %375() /* ty=(Tensor[(3, 5, 15), float32],) */
}

def @func_446() -> Tensor[(3, 5, 15), float64] {
  %376 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %376.0
}

def @func_2076() -> (Tensor[(3, 5, 15), float32],) {
  %377 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %380 = sigmoid(%379) /* ty=Tensor[(3, 5, 15), float64] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %382 = sqrt(%381) /* ty=Tensor[(3, 5, 15), float32] */;
  (%382,)
}

def @func_406() -> Tensor[(3, 5, 15), float64] {
  @func_404() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_1111(%var_1086: Tensor[(3, 5, 15), float64], %var_1097: Tensor[(9, 36), uint16], %var_1099: Tensor[(9, 36), uint16], %var_1105: Tensor[(9, 3, 12), uint16]) -> (Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) {
  %383 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %384 = %383.0;
  %385 = cast(%var_1086, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %389 = cast(%var_1099, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %390 = shape_of(%var_1097, dtype="int32") /* ty=Tensor[(2), int32] */;
  %391 = cast(%var_1097, dtype="float32") /* ty=Tensor[(9, 36), float32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %393 = cast(%var_1097, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %394 = cast(%var_1097, dtype="uint16") /* ty=Tensor[(9, 36), uint16] */;
  %395 = reshape(%393, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %396 = reshape(%394, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %397 = @func_500(%395, %396) /* ty=Tensor[(9, 3, 12), uint16] */;
  %398 = cast(%var_1105, dtype="bool") /* ty=Tensor[(9, 3, 12), bool] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="bool") /* ty=Tensor[(9, 3, 12), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = bitwise_or(%387, %388) /* ty=Tensor[(3, 5, 15), int64] */;
  %403 = mod(%391, %392) /* ty=Tensor[(9, 36), float32] */;
  %404 = less_equal(%400, %401) /* ty=Tensor[(9, 3, 12), bool] */;
  (%402, %403, %404)
}

def @func_4597() -> Tensor[(3, 5, 15), float64] {
  @func_4595() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_1609(%var_1551: Tensor[(324), uint16], %var_1573: int16, %var_1574: Tensor[(600), int16]) -> (Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) {
  %405 = cast(%var_1551, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %406 = reshape(%405, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %407 = @func_981(%406) /* ty=(Tensor[(3, 5, 15), uint32], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16]) */;
  %408 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %409 = %408.3;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
  %411 = acos(%410) /* ty=Tensor[(3, 5, 15), float32] */;
  %412 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="int16") /* ty=Tensor[(3, 5, 15), int16] */;
  %415 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%411, dtype="int16") /* ty=Tensor[(3, 5, 15), int16] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %418 = cast(%var_1573, dtype="int16") /* ty=int16 */;
  %419 = cast(%var_1574, dtype="int16") /* ty=Tensor[(600), int16] */;
  %420 = reshape(%418, newshape=[]) /* ty=int16 */;
  %421 = reshape(%419, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), int16] */;
  %422 = @func_820(%420, %421) /* ty=(Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) */;
  %423 = %407.2;
  %424 = add(%416, %417) /* ty=Tensor[(3, 5, 15), int16] */;
  %425 = %422.2;
  (%423, %var_1551, %424, %425, %var_1573, %var_1574)
}

def @func_1833() -> Tensor[(3, 5, 15), float64] {
  %427 = fn () -> Tensor[(3, 5, 15), float64] {
    %426 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %426.1
  };
  %427() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_5167() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64]) {
  %433 = fn () -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64]) {
    %428 = @func_2697() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %429 = %428.1;
    %430 = cast(%429, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
    %431 = atan(%430) /* ty=Tensor[(3, 5, 15), float32] */;
    %432 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64]) */
}

def @func_2466(%var_2463: Tensor[(9, 3, 12), uint16], %var_2464: Tensor[(32), float64], %var_2465: Tensor[(112), int64]) -> (Tensor[(9, 3, 12), float64], Tensor[(4, 28), int64], Tensor[(32), float64], Tensor[(112), int64]) {
  %447 = fn (%var_2448: Tensor[(9, 3, 12), uint16], %var_2454: Tensor[(32), float64], %var_2455: Tensor[(112), int64]) -> (Tensor[(9, 3, 12), float64], Tensor[(4, 28), int64], Tensor[(32), float64], Tensor[(112), int64]) {
    %434 = @func_2377() /* ty=(Tensor[(9, 3, 12), uint16],) */;
    %435 = %434.0;
    %436 = cast(%var_2448, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%435, dtype="float64") /* ty=Tensor[(9, 3, 12), float64] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %440 = cast(%var_2454, dtype="float64") /* ty=Tensor[(32), float64] */;
    %441 = cast(%var_2455, dtype="int64") /* ty=Tensor[(112), int64] */;
    %442 = reshape(%440, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
    %443 = reshape(%441, newshape=[4, 28]) /* ty=Tensor[(4, 28), int64] */;
    %444 = @func_1022(%442, %443) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */;
    %445 = floor_mod(%438, %439) /* ty=Tensor[(9, 3, 12), float64] */;
    %446 = %444.5;
    (%445, %446, %var_2454, %var_2455)
  };
  %447(%var_2463, %var_2464, %var_2465) /* ty=(Tensor[(9, 3, 12), float64], Tensor[(4, 28), int64], Tensor[(32), float64], Tensor[(112), int64]) */
}

def @func_5199() -> Tensor[(3, 5, 15), float64] {
  @func_5197() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_2377() -> (Tensor[(9, 3, 12), uint16],) {
  %448 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
  %449 = %448.1;
  (%449,)
}

def @func_3022() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_3020() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_2698() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %458 = fn () -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
    %450 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %451 = %450.0;
    %452 = cast(%451, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %453 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %454 = atanh(%452) /* ty=Tensor[(3, 5, 15), float64] */;
    %455 = @func_2663() /* ty=Tensor[(3, 5, 15), float64] */;
    %456 = %453.1;
    %457 = @func_1832() /* ty=Tensor[(3, 5, 15), float64] */;
    (%454, %455, %456, %457)
  };
  %458() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_1117(%var_1113: Tensor[(3, 5, 15), float64], %var_1114: Tensor[(9, 36), uint16], %var_1115: Tensor[(9, 36), uint16], %var_1116: Tensor[(9, 3, 12), uint16]) -> (Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) {
  @func_1111(%var_1113, %var_1114, %var_1115, %var_1116) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */
}

def @func_4595() -> Tensor[(3, 5, 15), float64] {
  @func_1832() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_744(%var_743: Tensor[(2, 15, 5), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) {
  %463 = fn (%var_732: Tensor[(2, 15, 5), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) {
    %459 = cast(%var_732, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
    %460 = cast(%var_732, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
    %461 = atan(%459) /* ty=Tensor[(2, 15, 5), float64] */;
    %462 = sin(%460) /* ty=Tensor[(2, 15, 5), float64] */;
    (%461, %462)
  };
  %463(%var_743) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(2, 15, 5), float64]) */
}

def @func_2023() -> (Tensor[(3, 5, 15), float64],) {
  %466 = fn () -> (Tensor[(3, 5, 15), float64],) {
    %464 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_2636(%var_2635: Tensor[(1, 16, 9), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) {
  %480 = fn (%var_2613: Tensor[(1, 16, 9), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) {
    %467 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %468 = cast(%var_2613, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
    %469 = log(%468) /* ty=Tensor[(1, 16, 9), float64] */;
    %470 = cast(%var_2613, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %474 = %467.0;
    %475 = cast(%474, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %476 = reshape(%475, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
    %477 = @func_480(%476) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
    %478 = bitwise_and(%472, %473) /* ty=Tensor[(?, 16, 9), uint64] */;
    %479 = %477.0;
    (%474, %478, %479)
  };
  %480(%var_2635) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(?, 16, 9), uint64], Tensor[(3, 5, 15), float32]) */
}

def @func_5019() -> Tensor[(3, 5, 15), float32] {
  @func_5017() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_3593() -> (Tensor[(3, 5, 15), float64],) {
  %481 = @func_2022() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %482 = %481.0;
  (%482,)
}

def @func_891() -> (Tensor[(3, 5, 15), float64],) {
  %485 = fn () -> (Tensor[(3, 5, 15), float64],) {
    %483 = @func_674() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %484 = %483.0;
    (%484,)
  };
  %485() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_1026(%var_1024: Tensor[(8, 4, 1), float64], %var_1025: Tensor[(4, 28), int64]) -> (Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) {
  @func_1022(%var_1024, %var_1025) /* ty=(Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) */
}

def @func_46(%var_44: int64, %var_45: Tensor[(1, 7, 16), int64]) -> (Tensor[(1, 7, 16), bool],) {
  %489 = fn (%var_29: int64, %var_30: Tensor[(1, 7, 16), int64]) -> (Tensor[(1, 7, 16), bool],) {
    %486 = cast(%var_29, dtype="bool") /* ty=bool */;
    %487 = cast(%var_30, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
    %488 = less(%486, %487) /* ty=Tensor[(1, 7, 16), bool] */;
    (%488,)
  };
  %489(%var_44, %var_45) /* ty=(Tensor[(1, 7, 16), bool],) */
}

def @func_5135(%var_5133: Tensor[(11, 5, 3), float32], %var_5134: Tensor[(11, 5, 3), bool]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(9, 3, 12), bool], Tensor[(112), int64], Tensor[(392), float32], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), bool], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), float64]) {
  %528 = fn (%var_5031: Tensor[(11, 5, 3), float32], %var_5090: Tensor[(11, 5, 3), bool]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(9, 3, 12), bool], Tensor[(112), int64], Tensor[(392), float32], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), bool], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), float64]) {
    %490 = @func_2776() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) */;
    %491 = @func_611() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) */;
    %492 = %490.3;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %494 = %491.1;
    %495 = cast(%494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
    %496 = cast(%494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
    %497 = cast(%494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
    %498 = reshape(%493, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
    %499 = reshape(%495, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
    %500 = reshape(%496, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
    %501 = reshape(%497, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %502 = @func_1111(%498, %499, %500, %501) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
    %503 = cast(meta[relay.Constant][17] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %504 = cast(%494, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
    %505 = reshape(%503, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %506 = reshape(%504, newshape=[324]) /* ty=Tensor[(324), uint16] */;
    %507 = @func_4924(%505, %506) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) */;
    %508 = cast(%var_5031, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
    %509 = sinh(%508) /* ty=Tensor[(11, 5, 3), float32] */;
    %510 = cast(%var_5031, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%509, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %514 = greater(%512, %513) /* ty=Tensor[(11, 5, 3), bool] */;
    %515 = cast(%var_5090, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(%514, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %519 = cast(%514, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
    %520 = atanh(%519) /* ty=Tensor[(11, 5, 3), float64] */;
    %521 = cast(%520, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
    %522 = %502.2;
    %523 = %507.4;
    %524 = @func_2181() /* ty=Tensor[(3, 5, 15), float64] */;
    %525 = not_equal(%517, %518) /* ty=Tensor[(11, 5, 3), bool] */;
    %526 = @func_4352() /* ty=Tensor[(3, 5, 15), float64] */;
    %527 = acosh(%521) /* ty=Tensor[(11, 5, 3), float64] */;
    (%492, %494, %522, %523, meta[relay.Constant][17] /* ty=Tensor[(392), float32] */, %524, %525, %526, %527)
  };
  %528(%var_5133, %var_5134) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(9, 3, 12), bool], Tensor[(112), int64], Tensor[(392), float32], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), bool], Tensor[(3, 5, 15), float64], Tensor[(11, 5, 3), float64]) */
}

def @func_5308(%var_5295: Tensor[(6, 5, 14), uint8]) -> Tensor[(6, 5, 14), uint8] {
  %529 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %530 = shape_of(%var_5295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_5295, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%531, %532) /* ty=Tensor[(6, 5, 14), uint8] */
}

def @main(%var_5316: Tensor[(16, 14, 9), float64]) -> Tensor[(16, 14, 9), bool] {
  %533 = cast(%var_5316, dtype="float64") /* ty=Tensor[(16, 14, 9), float64] */;
  %534 = tan(%533) /* ty=Tensor[(16, 14, 9), float64] */;
  %535 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%537, %538) /* ty=Tensor[(16, 14, 9), bool] */
}

def @func_580() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) {
  %539 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %541 = reshape(%540, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %542 = @func_480(%541) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %543 = cast(%539, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %544 = rsqrt(%543) /* ty=Tensor[(3, 5, 15), float64] */;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %546 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%539, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %549 = floor_mod(%547, %548) /* ty=Tensor[(3, 5, 15), float64] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %551 = reshape(%550, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %552 = @func_480(%551) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %555 = reshape(%554, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %556 = @func_480(%555) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %557 = cast(%539, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %558 = %542.0;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %560 = reshape(%559, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %561 = @func_480(%560) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */;
  %562 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
  %563 = %556.1;
  %564 = log10(%557) /* ty=Tensor[(3, 5, 15), float64] */;
  %565 = %561.1;
  (%558, %549, %562, %553, %563, %564, %565)
}

def @func_2889(%var_2888: Tensor[(14, 8, 13), float64]) -> (Tensor[(14, 8, 13), float64],) {
  %568 = fn (%var_2883: Tensor[(14, 8, 13), float64]) -> (Tensor[(14, 8, 13), float64],) {
    %566 = cast(%var_2883, dtype="float64") /* ty=Tensor[(14, 8, 13), float64] */;
    %567 = rsqrt(%566) /* ty=Tensor[(14, 8, 13), float64] */;
    (%567,)
  };
  %568(%var_2888) /* ty=(Tensor[(14, 8, 13), float64],) */
}

def @func_4928(%var_4926: Tensor[(392), float32], %var_4927: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) {
  @func_4924(%var_4926, %var_4927) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(15, 9, 15), float32], Tensor[(2025, 1), float32], int64, Tensor[(112), int64], Tensor[(3, 5, 15), float64], Tensor[(392), float32], Tensor[(336), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), bool]) */
}

def @func_1503(%var_1500: Tensor[(10, 16, 11), float32], %var_1501: Tensor[(32), float64], %var_1502: Tensor[(112), int64]) -> (Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) {
  @func_1498(%var_1500, %var_1501, %var_1502) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(32), float64], Tensor[(112), int64], Tensor[(3, 5, 15), uint16]) */
}

def @func_3861() -> Tensor[(3, 5, 15), bool] {
  @func_3859() /* ty=Tensor[(3, 5, 15), bool] */
}

def @func_3629() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %569 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %570 = @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %571 = %569.1;
  %572 = %570.1;
  (%571, %572)
}

def @func_1416(%var_1414: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) {
  @func_1413(%var_1414) /* ty=(Tensor[(3, 5, 15), uint16], Tensor[(3, 5, 15), float64]) */
}

def @func_2181() -> Tensor[(3, 5, 15), float64] {
  %573 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %573.1
}

def @func_2921() -> (Tensor[(3, 5, 15), float32],) {
  %574 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %575 = %574.0;
  (%575,)
}

def @func_1022(%var_985: Tensor[(8, 4, 1), float64], %var_1017: Tensor[(4, 28), int64]) -> (Tensor[(8, 4, ?), int32], Tensor[(3, 5, 15), float32], Tensor[(8, 4, ?), float32], Tensor[(1, 7, 16), bool], int64, Tensor[(4, 28), int64]) {
  %576 = cast(%var_985, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %577 = tan(%576) /* ty=Tensor[(8, 4, 1), float64] */;
  %578 = cast(%var_985, dtype="uint16") /* ty=Tensor[(8, 4, 1), uint16] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(8, 4, 1), uint16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %582 = minimum(%580, %581) /* ty=Tensor[(8, 4, ?), uint16] */;
  %583 = cast(%var_985, dtype="int32") /* ty=Tensor[(8, 4, 1), int32] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="int32") /* ty=Tensor[(8, 4, ?), int32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %587 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %588 = cast(%var_985, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %589 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%582, dtype="float32") /* ty=Tensor[(8, 4, ?), float32] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %592 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %593 = cast(%var_1017, dtype="int64") /* ty=Tensor[(4, 28), int64] */;
  %594 = reshape(%592, newshape=[]) /* ty=int64 */;
  %595 = reshape(%593, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), int64] */;
  %596 = @func_43(%594, %595) /* ty=(Tensor[(1, 7, 16), bool],) */;
  %597 = bitwise_xor(%585, %586) /* ty=Tensor[(8, 4, ?), int32] */;
  %598 = %587.0;
  %599 = power(%590, %591) /* ty=Tensor[(8, 4, ?), float32] */;
  %600 = %596.0;
  (%597, %598, %599, %600, -6 /* ty=int64 */, %var_1017)
}

def @func_3385(%var_3383: Tensor[(9, 2, 1), float64], %var_3384: Tensor[(9, 2, 9), float64]) -> (Tensor[(9, 3, 12), uint16], int16, Tensor[(9, 2, ?), bool], Tensor[(9, 2, 9), bool], Tensor[(3, 5, 15), float64]) {
  @func_3381(%var_3383, %var_3384) /* ty=(Tensor[(9, 3, 12), uint16], int16, Tensor[(9, 2, ?), bool], Tensor[(9, 2, 9), bool], Tensor[(3, 5, 15), float64]) */
}

def @func_3381(%var_3325: Tensor[(9, 2, 1), float64], %var_3356: Tensor[(9, 2, 9), float64]) -> (Tensor[(9, 3, 12), uint16], int16, Tensor[(9, 2, ?), bool], Tensor[(9, 2, 9), bool], Tensor[(3, 5, 15), float64]) {
  %601 = cast(meta[relay.Constant][20] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %602 = reshape(%601, newshape=[]) /* ty=int16 */;
  %603 = @func_1816(%602) /* ty=(Tensor[(2, 5, 16), float32], Tensor[(9, 3, 12), uint16], int16, Tensor[(600), int16], Tensor[(3, 5, 15), float64]) */;
  %604 = cast(%var_3325, dtype="float64") /* ty=Tensor[(9, 2, 1), float64] */;
  %605 = log10(%604) /* ty=Tensor[(9, 2, 1), float64] */;
  %606 = cast(%var_3325, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = cast(%605, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %611 = cast(%var_3356, dtype="bool") /* ty=Tensor[(9, 2, 9), bool] */;
  %612 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %613 = %603.1;
  %614 = greater(%608, %609) /* ty=Tensor[(9, 2, ?), bool] */;
  %615 = logical_and(%610, %611) /* ty=Tensor[(9, 2, 9), bool] */;
  %616 = %612.0;
  (%613, meta[relay.Constant][20] /* ty=int16 */, %614, %615, %616)
}

def @func_3020() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %617 = @func_2716() /* ty=Tensor[(3, 5, 15), float32] */;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %619 = erf(%618) /* ty=Tensor[(3, 5, 15), float64] */;
  %620 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  (%619, %620)
}

def @func_3136() -> (Tensor[(3, 5, 15), float64],) {
  %621 = @func_1709() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %622 = %621.0;
  (%622,)
}

def @func_1731() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  @func_1729() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */
}

def @func_3087(%var_3085: Tensor[(1980), float32], %var_3086: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 11, 12), int64], Tensor[(3, 5, 15), float64], Tensor[(150), float64], Tensor[(1980), float64]) {
  %639 = fn (%var_3059: Tensor[(1980), float32], %var_3066: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(15, 11, 12), int64], Tensor[(3, 5, 15), float64], Tensor[(150), float64], Tensor[(1980), float64]) {
    %623 = cast(%var_3059, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %624 = cast(%var_3059, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %625 = reshape(%623, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
    %626 = reshape(%624, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
    %627 = cast(%var_3066, dtype="float64") /* ty=Tensor[(150), float64] */;
    %628 = cast(%var_3066, dtype="float64") /* ty=Tensor[(150), float64] */;
    %629 = reshape(%627, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %630 = reshape(%628, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %631 = @func_2341(%629, %630) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) */;
    %632 = cast(%var_3059, dtype="float64") /* ty=Tensor[(1980), float64] */;
    %633 = asinh(%632) /* ty=Tensor[(1980), float64] */;
    %634 = cast(%633, dtype="float64") /* ty=Tensor[(1980), float64] */;
    %635 = @func_425() /* ty=Tensor[(3, 5, 15), float64] */;
    %636 = @func_1055(%625, %626) /* ty=Tensor[(15, 11, 12), int64] */;
    %637 = %631.3;
    %638 = log10(%634) /* ty=Tensor[(1980), float64] */;
    (%635, %636, %637, %var_3066, %638)
  };
  %639(%var_3085, %var_3086) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(15, 11, 12), int64], Tensor[(3, 5, 15), float64], Tensor[(150), float64], Tensor[(1980), float64]) */
}

def @func_378() -> (Tensor[(3, 5, 15), float64],) {
  %640 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %641 = cosh(%640) /* ty=Tensor[(3, 5, 15), float64] */;
  (%641,)
}

def @func_823(%var_821: int16, %var_822: Tensor[(10, 10, 6), int16]) -> (Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) {
  %655 = fn (%var_777: int16, %var_778: Tensor[(10, 10, 6), int16]) -> (Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) {
    %642 = cast(%var_777, dtype="int16") /* ty=int16 */;
    %643 = cast(%var_778, dtype="int16") /* ty=Tensor[(10, 10, 6), int16] */;
    %644 = cast(meta[relay.Constant][22] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %645 = cast(meta[relay.Constant][22] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %646 = reshape(%644, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %647 = reshape(%645, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %648 = cast(meta[relay.Constant][22] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %649 = @func_500(%646, %647) /* ty=Tensor[(9, 3, 12), uint16] */;
    %650 = cast(%649, dtype="uint16") /* ty=Tensor[(9, 3, 12), uint16] */;
    %651 = reshape(%648, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %652 = reshape(%650, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %653 = bitwise_and(%642, %643) /* ty=Tensor[(10, 10, 6), int16] */;
    %654 = @func_500(%651, %652) /* ty=Tensor[(9, 3, 12), uint16] */;
    (%653, %649, meta[relay.Constant][22] /* ty=Tensor[(324), uint16] */, %654)
  };
  %655(%var_821, %var_822) /* ty=(Tensor[(10, 10, 6), int16], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(9, 3, 12), uint16]) */
}

def @func_3232(%var_3231: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) {
  %674 = fn (%var_3184: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) {
    %656 = @func_1529() /* ty=Tensor[(3, 5, 15), float64] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    %658 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %659 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %660 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %661 = reshape(%657, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
    %662 = reshape(%658, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
    %663 = reshape(%659, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
    %664 = reshape(%660, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %665 = @func_1111(%661, %662, %663, %664) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
    %666 = cast(%var_3184, dtype="float32") /* ty=Tensor[(324), float32] */;
    %667 = asin(%666) /* ty=Tensor[(324), float32] */;
    %668 = cast(%var_3184, dtype="bool") /* ty=Tensor[(324), bool] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(1), int32] */;
    %670 = cast(%667, dtype="bool") /* ty=Tensor[(324), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), bool] */;
    %672 = %665.0;
    %673 = greater(%670, %671) /* ty=Tensor[(324), bool] */;
    (%656, %672, %673)
  };
  %674(%var_3231) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), int64], Tensor[(324), bool]) */
}

def @func_2663() -> Tensor[(3, 5, 15), float64] {
  @func_425() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_3665(%var_3662: Tensor[(8, 5, 11), int32], %var_3663: Tensor[(324), uint16], %var_3664: Tensor[(300, 2), int16]) -> (Tensor[(8, 5, 11), int32], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(300, 2), int16]) {
  @func_3660(%var_3662, %var_3663, %var_3664) /* ty=(Tensor[(8, 5, 11), int32], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(300, 2), int16]) */
}

def @func_482(%var_481: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) {
  %691 = fn (%var_452: Tensor[(3, 5, 15), float64]) -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) {
    %675 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
    %676 = cast(%var_452, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %680 = not_equal(%678, %679) /* ty=Tensor[(3, 5, 15), bool] */;
    %681 = cast(%var_452, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
    %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%680, dtype="float32") /* ty=Tensor[(3, 5, 15), float32] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %685 = cast(%680, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %686 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%675, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %689 = floor_divide(%683, %684) /* ty=Tensor[(3, 5, 15), float32] */;
    %690 = greater(%687, %688) /* ty=Tensor[(3, 5, 15), bool] */;
    (%689, %690)
  };
  %691(%var_481) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool]) */
}

def @func_3660(%var_3650: Tensor[(8, 5, 11), int32], %var_3656: Tensor[(324), uint16], %var_3658: Tensor[(300, 2), int16]) -> (Tensor[(8, 5, 11), int32], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(300, 2), int16]) {
  %692 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 5, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 5, 11), int32] */;
  %693 = shape_of(%var_3650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_3650, dtype="int32") /* ty=Tensor[(8, 5, 11), int32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %696 = cast(%var_3656, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %697 = cast(meta[relay.Constant][24] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %698 = cast(%var_3658, dtype="int16") /* ty=Tensor[(300, 2), int16] */;
  %699 = reshape(%696, newshape=[324]) /* ty=Tensor[(324), uint16] */;
  %700 = reshape(%697, newshape=[]) /* ty=int16 */;
  %701 = reshape(%698, newshape=[600]) /* ty=Tensor[(600), int16] */;
  %702 = @func_1609(%699, %700, %701) /* ty=(Tensor[(324), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), int16], Tensor[(324), uint16], int16, Tensor[(600), int16]) */;
  %703 = right_shift(%694, %695) /* ty=Tensor[(8, 5, 11), int32] */;
  %704 = %702.2;
  (%703, %704, %var_3656, meta[relay.Constant][24] /* ty=int16 */, %var_3658)
}

def @func_4108() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %705 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %706 = @func_3629() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %707 = %705.0;
  %708 = %706.1;
  (%707, %708)
}

def @func_2345(%var_2343: Tensor[(150), float64], %var_2344: Tensor[(150), float64]) -> (Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) {
  @func_2341(%var_2343, %var_2344) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(2, 15, 5), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(150), int32]) */
}

def @func_4749() -> (Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32]) {
  %709 = @func_580() /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), bool], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), bool]) */;
  %710 = %709.1;
  %711 = @func_2998() /* ty=Tensor[(3, 5, 15), float32] */;
  (%710, %711)
}

def @func_426() -> Tensor[(3, 5, 15), float64] {
  %714 = fn () -> Tensor[(3, 5, 15), float64] {
    %712 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
    %713 = cast(%712, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
    acosh(%713) /* ty=Tensor[(3, 5, 15), float64] */
  };
  %714() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_2998() -> Tensor[(3, 5, 15), float32] {
  %715 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
  %715.0
}

def @func_4712() -> (Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) {
  %716 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
  %717 = @func_2998() /* ty=Tensor[(3, 5, 15), float32] */;
  %718 = @func_404() /* ty=Tensor[(3, 5, 15), float64] */;
  %719 = %716.0;
  (%717, %718, %719)
}

def @func_248(%var_245: Tensor[(15, 9, 15), float32], %var_246: int64, %var_247: Tensor[(112), int64]) -> (Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) {
  @func_243(%var_245, %var_246, %var_247) /* ty=(Tensor[(1, 7, 16), bool], Tensor[(112), int64], Tensor[(15, 9, 15), float32]) */
}

def @func_1530() -> Tensor[(3, 5, 15), float64] {
  %721 = fn () -> Tensor[(3, 5, 15), float64] {
    %720 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %720.0
  };
  %721() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_4236(%var_4232: Tensor[(14, 4, 7), float32], %var_4233: Tensor[(14, 4, 7), float32], %var_4234: Tensor[(28, 4), int64], %var_4235: Tensor[(336), float32]) -> (Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) {
  %744 = fn (%var_4202: Tensor[(14, 4, 7), float32], %var_4203: Tensor[(14, 4, 7), float32], %var_4224: Tensor[(28, 4), int64], %var_4227: Tensor[(336), float32]) -> (Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) {
    %722 = cast(%var_4203, dtype="float32") /* ty=Tensor[(14, 4, 7), float32] */;
    %723 = shape_of(%var_4202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%var_4202, dtype="float32") /* ty=Tensor[(14, 4, 7), float32] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %726 = divide(%724, %725) /* ty=Tensor[(14, 4, 7), float32] */;
    %727 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 4, 7), float32] */, dtype="bool") /* ty=Tensor[(14, 4, 7), bool] */;
    %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%726, dtype="bool") /* ty=Tensor[(14, 4, 7), bool] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %731 = cast(meta[relay.Constant][26] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %732 = cast(%var_4224, dtype="int64") /* ty=Tensor[(28, 4), int64] */;
    %733 = reshape(%731, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %734 = reshape(%732, newshape=[112]) /* ty=Tensor[(112), int64] */;
    %735 = @func_1366(%733, %734) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) */;
    %736 = cast(%var_4224, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
    %737 = cast(%var_4227, dtype="float32") /* ty=Tensor[(336), float32] */;
    %738 = reshape(%736, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
    %739 = reshape(%737, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), float32] */;
    %740 = @func_3486(%738, %739) /* ty=(Tensor[(14, 8, 3), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), uint32], Tensor[(324), uint16], Tensor[(14, 8, 1), float32], Tensor[(14, 8, 1), float64]) */;
    %741 = equal(%729, %730) /* ty=Tensor[(14, 4, 7), bool] */;
    %742 = %735.1;
    %743 = %740.3;
    (%741, %742, meta[relay.Constant][26] /* ty=Tensor[(32), float64] */, %var_4224, %743, %var_4227)
  };
  %744(%var_4232, %var_4233, %var_4234, %var_4235) /* ty=(Tensor[(14, 4, 7), bool], Tensor[(3, 5, 15), float64], Tensor[(32), float64], Tensor[(28, 4), int64], Tensor[(3, 5, 15), uint32], Tensor[(336), float32]) */
}

def @func_5279() -> Tensor[(3, 5, 15), float64] {
  %746 = fn () -> Tensor[(3, 5, 15), float64] {
    %745 = @func_3629() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
    %745.1
  };
  %746() /* ty=Tensor[(3, 5, 15), float64] */
}

def @func_2776() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 36), float32], Tensor[(324), uint16], Tensor[(3, 5, 15), float64], Tensor[(112), int64], Tensor[(32), float64], Tensor[(112), int64]) {
  %747 = @func_1529() /* ty=Tensor[(3, 5, 15), float64] */;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(3, 5, 15), float64] */;
  %749 = cast(meta[relay.Constant][27] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %750 = cast(meta[relay.Constant][27] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %751 = cast(meta[relay.Constant][27] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %752 = reshape(%748, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), float64] */;
  %753 = reshape(%749, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %754 = reshape(%750, newshape=[9, 36]) /* ty=Tensor[(9, 36), uint16] */;
  %755 = reshape(%751, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %756 = @func_1111(%752, %753, %754, %755) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(9, 36), float32], Tensor[(9, 3, 12), bool]) */;
  %757 = @func_1912() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64]) */;
  %758 = cast(meta[relay.Constant][28] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %759 = cast(meta[relay.Constant][29] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %760 = reshape(%758, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %761 = reshape(%759, newshape=[112]) /* ty=Tensor[(112), int64] */;
  %762 = @func_1366(%760, %761) /* ty=(Tensor[(3, 5, 15), float32], Tensor[(3, 5, 15), float64], Tensor[(3, 5, 15), float64], Tensor[(8, 4, ?), int32], Tensor[(32), float64], Tensor[(112), int64]) */;
  %763 = %756.1;
  %764 = %757.1;
  %765 = %762.5;
  (%747, %763, meta[relay.Constant][27] /* ty=Tensor[(324), uint16] */, %764, %765, meta[relay.Constant][28] /* ty=Tensor[(32), float64] */, meta[relay.Constant][29] /* ty=Tensor[(112), int64] */)
}

def @func_611() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float64]) {
  %766 = cast(meta[relay.Constant][30] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %767 = cast(meta[relay.Constant][30] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %768 = reshape(%766, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %769 = reshape(%767, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
  %770 = @func_378() /* ty=(Tensor[(3, 5, 15), float64],) */;
  %771 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
  %772 = @func_500(%768, %769) /* ty=Tensor[(9, 3, 12), uint16] */;
  %773 = %770.0;
  (%771, %772, meta[relay.Constant][30] /* ty=Tensor[(324), uint16] */, %773)
}

def @func_4967() -> Tensor[(3, 5, 15), float32] {
  @func_2998() /* ty=Tensor[(3, 5, 15), float32] */
}

def @func_4091(%var_4090: Tensor[(10, 10, 10), float64]) -> Tensor[(10, 10, 10), float64] {
  %780 = fn (%var_4081: Tensor[(10, 10, 10), float64]) -> Tensor[(10, 10, 10), float64] {
    %774 = cast(%var_4081, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
    %775 = exp(%774) /* ty=Tensor[(10, 10, 10), float64] */;
    %776 = cast(%775, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
    %777 = shape_of(%var_4081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%var_4081, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%778, %779) /* ty=Tensor[(10, 10, 10), float64] */
  };
  %780(%var_4090) /* ty=Tensor[(10, 10, 10), float64] */
}

def @func_3583() -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) {
  %785 = fn () -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) {
    %781 = @func_1752() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %782 = @func_2377() /* ty=(Tensor[(9, 3, 12), uint16],) */;
    %783 = %781.0;
    %784 = %782.0;
    (%783, %784)
  };
  %785() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */
}

def @func_2165(%var_2149: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), bool],) {
  %786 = cast(%var_2149, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %787 = atanh(%786) /* ty=Tensor[(9, 11, 7), float64] */;
  %788 = cast(%var_2149, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %792 = bitwise_xor(%790, %791) /* ty=Tensor[(9, 11, 7), int16] */;
  %793 = cast(%787, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = greater(%795, %796) /* ty=Tensor[(9, 11, 7), bool] */;
  (%797,)
}

def @func_4461() -> (Tensor[(3, 5, 15), float64],) {
  %800 = fn () -> (Tensor[(3, 5, 15), float64],) {
    %798 = @func_3582() /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16]) */;
    %799 = %798.0;
    (%799,)
  };
  %800() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_2168(%var_2166: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), bool],) {
  @func_2165(%var_2166) /* ty=(Tensor[(9, 11, 7), bool],) */
}

def @func_1753() -> (Tensor[(3, 5, 15), float64],) {
  %803 = fn () -> (Tensor[(3, 5, 15), float64],) {
    %801 = @func_830() /* ty=(Tensor[(3, 5, 15), float64],) */;
    %802 = %801.0;
    (%802,)
  };
  %803() /* ty=(Tensor[(3, 5, 15), float64],) */
}

def @func_2586(%var_2585: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) {
  %812 = fn (%var_2557: Tensor[(324), uint16]) -> (Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) {
    %804 = cast(%var_2557, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %805 = cast(%var_2557, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %806 = reshape(%804, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %807 = reshape(%805, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint16] */;
    %808 = @func_691() /* ty=(Tensor[(3, 5, 15), float32],) */;
    %809 = @func_446() /* ty=Tensor[(3, 5, 15), float64] */;
    %810 = @func_500(%806, %807) /* ty=Tensor[(9, 3, 12), uint16] */;
    %811 = %808.0;
    (%809, %810, %var_2557, %811)
  };
  %812(%var_2585) /* ty=(Tensor[(3, 5, 15), float64], Tensor[(9, 3, 12), uint16], Tensor[(324), uint16], Tensor[(3, 5, 15), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen143/build/output.py:1985: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen143/build/output.py", line 1990, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_tan_cast_not_equal_kernel0(signed char* __restrict__ T_not_equal, double* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2016) {
    T_not_equal[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = ((signed char)(((bool)tan(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])) != ((bool)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

