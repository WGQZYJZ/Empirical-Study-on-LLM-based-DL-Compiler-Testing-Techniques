==========mod==========
#[version = "0.0.5"]
def @func_1941(%var_1913: Tensor[(1092), bool]) -> (Tensor[(700), int64], Tensor[(1120), uint8], Tensor[(1, 108), float32], Tensor[(1092), bool], Tensor[(2, 6, 9), float64]) {
  %0 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(700), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %4 = cast(%var_1913, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %5 = reshape(%2, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %6 = reshape(%3, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %7 = reshape(%4, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
  %8 = @func_1473(%5, %6, %7) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
  %9 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %10 = %8.2;
  %11 = %9.0;
  (%1, %10, meta[relay.Constant][0] /* ty=Tensor[(1, 108), float32] */, %var_1913, %11)
}

def @func_2066() -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) {
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %13 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %17 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %20 = greater_equal(%14, %15) /* ty=Tensor[(14, 7, 14), bool] */;
  %21 = equal(%18, %19) /* ty=Tensor[(14, 7, 14), bool] */;
  (%20, %21)
}

def @func_5627() -> (Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  %22 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %23 = @func_2925() /* ty=Tensor[(700), float32] */;
  %24 = %22.0;
  (%23, %24)
}

def @func_5913() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %25 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %26 = %25.0;
  %27 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
  (%26, %27)
}

def @func_4784(%var_4748: Tensor[(5, 3), float64]) -> (Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) {
  %28 = cast(%var_4748, dtype="float64") /* ty=Tensor[(5, 3), float64] */;
  %29 = @func_2435() /* ty=(Tensor[(2, 6, 9), float32],) */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %31 = reshape(%30, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float64] */;
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 78), int64] */, dtype="int64") /* ty=Tensor[(8, 78), int64] */;
  %33 = reshape(%32, newshape=[624]) /* ty=Tensor[(624), int64] */;
  %34 = @func_3939(%33) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) */;
  %35 = cast(meta[relay.Constant][5] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %36 = reshape(%35, newshape=[6, 11]) /* ty=Tensor[(6, 11), float32] */;
  %37 = sin(%28) /* ty=Tensor[(5, 3), float64] */;
  %38 = %29.0;
  %39 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  %40 = @func_2340(%31) /* ty=Tensor[(15, 16, 4), float64] */;
  %41 = %34.3;
  %42 = @func_1741(%36) /* ty=Tensor[(6, 11), float32] */;
  (%37, %38, %39, %40, meta[relay.Constant][3] /* ty=Tensor[(960), float64] */, %41, meta[relay.Constant][4] /* ty=Tensor[(8, 78), int64] */, %42, meta[relay.Constant][5] /* ty=Tensor[(66), float32] */)
}

def @func_5353(%var_5301: uint8, %var_5302: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
  %43 = cast(%var_5301, dtype="uint8") /* ty=uint8 */;
  %44 = cast(%var_5302, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %45 = reshape(%43, newshape=[]) /* ty=uint8 */;
  %46 = reshape(%44, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %47 = @func_387(%45, %46) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %48 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %49 = %47.0;
  (%48, %49, %var_5301, %var_5302)
}

def @func_4442(%var_4424: Tensor[(1, 6, 3), int16], %var_4425: Tensor[(13, 6, 3), int16]) -> (Tensor[(13, 6, 3), int16], Tensor[(1, 6, 3), float64]) {
  %50 = cast(%var_4424, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %51 = cast(%var_4425, dtype="int16") /* ty=Tensor[(13, 6, 3), int16] */;
  %52 = cast(%var_4424, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %53 = bitwise_xor(%50, %51) /* ty=Tensor[(13, 6, 3), int16] */;
  %54 = exp(%52) /* ty=Tensor[(1, 6, 3), float64] */;
  (%53, %54)
}

def @func_2825() -> Tensor[(14, 7, 14), bool] {
  %55 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %55.0
}

def @func_5378() -> (Tensor[(2, 6, 9), float64],) {
  %56 = @func_4228() /* ty=Tensor[(2, 6, 9), float64] */;
  (%56,)
}

def @func_2874(%var_2872: Tensor[(560, 2), uint8]) -> (Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) {
  %57 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %58 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %59 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %60 = cast(%var_2872, dtype="uint8") /* ty=Tensor[(560, 2), uint8] */;
  %61 = reshape(%58, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %62 = reshape(%59, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %63 = reshape(%60, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %64 = @func_571(%61, %62, %63) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %65 = %57.0;
  %66 = %64.3;
  (%65, %66, meta[relay.Constant][6] /* ty=Tensor[(108), float64] */, %var_2872)
}

def @func_2607() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %67 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %68 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
  (%67, %68)
}

def @func_108(%var_62: uint8, %var_63: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) {
  %69 = cast(%var_62, dtype="uint8") /* ty=uint8 */;
  %70 = cast(%var_63, dtype="uint8") /* ty=Tensor[(10, 8, 14), uint8] */;
  %71 = logical_xor(%69, %70) /* ty=Tensor[(10, 8, 14), uint8] */;
  %72 = cast(%71, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %73 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_63, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = cast(%71, dtype="float32") /* ty=Tensor[(10, 8, 14), float32] */;
  %77 = not_equal(%74, %75) /* ty=Tensor[(10, 8, 14), bool] */;
  %78 = cosh(%76) /* ty=Tensor[(10, 8, 14), float32] */;
  (%77, %78)
}

def @func_4714() -> (Tensor[(2, 6, 9), float64],) {
  %79 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%79,)
}

def @func_900() -> (Tensor[(2, 6, 9), float64],) {
  %80 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%80,)
}

def @func_2163(%var_2156: Tensor[(2, 6, 9), float64]) -> (Tensor[(2, 6, 9), int16],) {
  %81 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %82 = %81.0;
  %83 = cast(%var_2156, dtype="int16") /* ty=Tensor[(2, 6, 9), int16] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="int16") /* ty=Tensor[(2, 6, 9), int16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %87 = bitwise_or(%85, %86) /* ty=Tensor[(2, 6, 9), int16] */;
  (%87,)
}

def @func_4295(%var_4288: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) {
  %88 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %89 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %90 = %88.0;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %92 = cast(%var_4288, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %93 = reshape(%91, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %94 = reshape(%92, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %95 = @func_487(%93, %94) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %96 = %89.0;
  %97 = %95.2;
  (%90, %96, %97, %var_4288)
}

def @func_1690() -> (Tensor[(2, 6, 9), float64],) {
  %98 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %99 = %98.0;
  (%99,)
}

def @func_5520() -> (Tensor[(2, 6, 9), float64],) {
  %100 = @func_5378() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %101 = %100.0;
  (%101,)
}

def @func_1180(%var_1124: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), float32], Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  %102 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %104 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %105 = reshape(%103, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %106 = reshape(%104, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %107 = @func_487(%105, %106) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %108 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %109 = reshape(%108, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %110 = @func_1062(%109) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %111 = %110.1;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %113 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %114 = reshape(%112, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %115 = reshape(%113, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %116 = @func_487(%114, %115) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %117 = cast(%111, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %118 = reshape(%117, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %119 = @func_213(%118) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %120 = cast(%102, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %121 = reshape(%120, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %122 = @func_213(%121) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %123 = %107.0;
  %124 = %116.2;
  %125 = %119.0;
  %126 = %122.1;
  (%102, %123, %var_1124, %111, %124, %125, %126)
}

def @func_387(%var_371: uint8, %var_372: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
  %127 = cast(%var_371, dtype="uint8") /* ty=uint8 */;
  %128 = cast(%var_372, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %129 = reshape(%127, newshape=[]) /* ty=uint8 */;
  %130 = reshape(%128, newshape=[10, 8, 14]) /* ty=Tensor[(10, 8, 14), uint8] */;
  %131 = @func_108(%129, %130) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) */;
  %132 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %133 = %131.0;
  %134 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%132, %133, %var_371, %var_372, %134)
}

def @func_3080() -> (Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) {
  %135 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %136 = %135.0;
  %137 = @func_2925() /* ty=Tensor[(700), float32] */;
  %138 = cast(%137, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %139 = shape_of(%136, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(%136, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %142 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %143 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 7, 14), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %148 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
  %149 = multiply(%140, %141) /* ty=Tensor[(700), uint64] */;
  %150 = %142.0;
  %151 = power(%146, %147) /* ty=Tensor[(14, 7, 14), float32] */;
  (%148, %149, %150, %151)
}

def @func_5511() -> (Tensor[(2, 6, 9), uint64], Tensor[(960), float64], Tensor[(15), float64]) {
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %153 = reshape(%152, newshape=[15]) /* ty=Tensor[(15), float64] */;
  %154 = @func_5202(%153) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) */;
  %155 = @func_4055() /* ty=Tensor[(2, 6, 9), uint64] */;
  %156 = %154.1;
  (%155, %156, meta[relay.Constant][8] /* ty=Tensor[(15), float64] */)
}

def @func_3981() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) {
  %157 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %158 = @func_3675() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */;
  %159 = %158.1;
  %160 = @func_3539() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %163 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%159, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = %157.0;
  %167 = less_equal(%164, %165) /* ty=Tensor[(2, 6, 9), bool] */;
  (%166, %167)
}

def @func_1672(%var_1663: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) {
  %168 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %169 = cast(meta[relay.Constant][9] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %170 = reshape(%169, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float64] */;
  %171 = %168.0;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %173 = cast(%171, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %174 = cast(%var_1663, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %175 = reshape(%172, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %176 = reshape(%173, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %177 = reshape(%174, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %178 = @func_571(%175, %176, %177) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %179 = @func_1077(%170) /* ty=Tensor[(7, 10, 10), float64] */;
  %180 = %178.4;
  (%171, %179, meta[relay.Constant][9] /* ty=Tensor[(700), float64] */, %180, %var_1663)
}

def @func_4521() -> (Tensor[(2, 6, 9), float32],) {
  %181 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %184 = sigmoid(%183) /* ty=Tensor[(2, 6, 9), float32] */;
  (%184,)
}

def @func_2435() -> (Tensor[(2, 6, 9), float32],) {
  %185 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %187 = erf(%186) /* ty=Tensor[(2, 6, 9), float32] */;
  (%187,)
}

def @func_1062(%var_1057: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
  %188 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %191 = cos(%190) /* ty=Tensor[(2, 6, 9), float64] */;
  %192 = cast(%189, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %196 = cast(meta[relay.Constant][10] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %197 = cast(%var_1057, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %198 = reshape(%196, newshape=[]) /* ty=uint8 */;
  %199 = reshape(%197, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %200 = @func_387(%198, %199) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %201 = mod(%194, %195) /* ty=Tensor[(2, 6, 9), float32] */;
  %202 = %200.0;
  (%201, %202, meta[relay.Constant][10] /* ty=uint8 */, %var_1057)
}

def @func_3621(%var_3601: Tensor[(11, 13, 8), float64], %var_3608: Tensor[(1120), uint8]) -> (Tensor[(11, 13, 8), float64], Tensor[(117), float32], Tensor[(39, 3), float32], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %203 = cast(%var_3601, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
  %204 = cast(meta[relay.Constant][11] /* ty=Tensor[(39, 3), float32] */, dtype="float32") /* ty=Tensor[(39, 3), float32] */;
  %205 = cast(%var_3608, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %206 = reshape(%204, newshape=[117]) /* ty=Tensor[(117), float32] */;
  %207 = reshape(%205, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %208 = @func_1386(%206, %207) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
  %209 = cast(%var_3608, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %210 = reshape(%209, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %211 = @func_2293(%210) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */;
  %212 = log(%203) /* ty=Tensor[(11, 13, 8), float64] */;
  %213 = %208.3;
  %214 = %211.5;
  (%212, %213, meta[relay.Constant][11] /* ty=Tensor[(39, 3), float32] */, %var_3608, %214)
}

def @func_3939(%var_3924: Tensor[(624), int64]) -> (Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) {
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 4, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %216 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(11, 4, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 4, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
  %220 = cast(%var_3924, dtype="int64") /* ty=Tensor[(624), int64] */;
  %221 = reshape(%220, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %222 = @func_2250(%221) /* ty=(Tensor[(13, 12, 4), int64],) */;
  %223 = not_equal(%217, %218) /* ty=Tensor[(11, 4, 10), bool] */;
  %224 = %219.0;
  %225 = %222.0;
  (%223, %224, %225, %var_3924)
}

def @func_2340(%var_2335: Tensor[(15, 16, 4), float64]) -> Tensor[(15, 16, 4), float64] {
  %226 = cast(%var_2335, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  tan(%226) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_2293(%var_2274: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %227 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
  %229 = reshape(%228, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %230 = cast(%var_2274, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %231 = reshape(%230, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %232 = @func_1062(%231) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %233 = %227.0;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %235 = reshape(%234, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %236 = @func_213(%235) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %237 = @func_1564(%229) /* ty=Tensor[(7, 11, 9), float32] */;
  %238 = %232.3;
  %239 = %236.0;
  (%233, %237, meta[relay.Constant][14] /* ty=Tensor[(693), float32] */, %238, %var_2274, %239)
}

def @func_2311() -> (Tensor[(700), int64],) {
  %240 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %241 = %240.1;
  (%241,)
}

def @func_5044() -> (Tensor[(2, 6, 9), float64],) {
  %242 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
  (%242,)
}

def @func_2545() -> Tensor[(2, 6, 9), float64] {
  %243 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %243.0
}

def @func_644(%var_639: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %244 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = less(%247, %248) /* ty=Tensor[(2, 6, 9), bool] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %251 = cast(%var_639, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %252 = reshape(%250, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %253 = reshape(%251, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %254 = @func_487(%252, %253) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %256 = reshape(%255, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %257 = @func_213(%256) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %258 = %254.0;
  %259 = %257.0;
  (%249, %258, %var_639, %259)
}

def @func_3475(%var_3464: int64, %var_3465: Tensor[(12, 14, 1), int64]) -> (Tensor[(12, 14, 1), bool],) {
  %260 = cast(%var_3464, dtype="bool") /* ty=bool */;
  %261 = cast(%var_3465, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %262 = less(%260, %261) /* ty=Tensor[(12, 14, 1), bool] */;
  (%262,)
}

def @func_1526(%var_1507: uint32) -> Tensor[(10, 1, 7), uint32] {
  %263 = cast(%var_1507, dtype="uint32") /* ty=uint32 */;
  %264 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 1, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 1, 7), uint32] */;
  left_shift(%263, %264) /* ty=Tensor[(10, 1, 7), uint32] */
}

def @func_3726(%var_3684: Tensor[(14, 7, 14), bool]) -> (Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) {
  %265 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %266 = %265.1;
  %267 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(14, 7, 14), uint64] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="uint64") /* ty=Tensor[(14, 7, 14), uint64] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %271 = cast(%var_3684, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %272 = left_shift(%269, %270) /* ty=Tensor[(14, 7, 14), uint64] */;
  %273 = sin(%271) /* ty=Tensor[(14, 7, 14), float64] */;
  (%272, %273)
}

def @func_2025(%var_1972: Tensor[(15, 15, 12), float32], %var_2019: uint32) -> (Tensor[(15, 15, 12), float64], Tensor[(350, 2), float32], Tensor[(108), float32], Tensor[(1, 1092), bool], Tensor[(2, 6, 9), float64], Tensor[(15, 15, 12), float64], Tensor[(10, 1, 7), uint32], uint32, Tensor[(700), int64]) {
  %274 = cast(%var_1972, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %275 = cast(meta[relay.Constant][17] /* ty=Tensor[(350, 2), float32] */, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
  %276 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %277 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1092), bool] */, dtype="bool") /* ty=Tensor[(1, 1092), bool] */;
  %278 = reshape(%275, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %279 = reshape(%276, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %280 = reshape(%277, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
  %281 = @func_1473(%278, %279, %280) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
  %282 = %281.3;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %284 = cast(%var_1972, dtype="float32") /* ty=Tensor[(15, 15, 12), float32] */;
  %285 = atan(%284) /* ty=Tensor[(15, 15, 12), float32] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %287 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_1972, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %290 = cast(%var_2019, dtype="uint32") /* ty=uint32 */;
  %291 = reshape(%290, newshape=[]) /* ty=uint32 */;
  %292 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %293 = asinh(%274) /* ty=Tensor[(15, 15, 12), float64] */;
  %294 = asinh(%283) /* ty=Tensor[(2, 6, 9), float64] */;
  %295 = mod(%288, %289) /* ty=Tensor[(15, 15, 12), float64] */;
  %296 = @func_1526(%291) /* ty=Tensor[(10, 1, 7), uint32] */;
  %297 = %292.1;
  (%293, meta[relay.Constant][17] /* ty=Tensor[(350, 2), float32] */, meta[relay.Constant][18] /* ty=Tensor[(108), float32] */, meta[relay.Constant][19] /* ty=Tensor[(1, 1092), bool] */, %294, %295, %296, %var_2019, %297)
}

def @func_2212() -> (Tensor[(14, 7, 14), bool],) {
  %298 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %299 = %298.1;
  (%299,)
}

def @func_4529() -> (Tensor[(2, 6, 9), float64],) {
  %300 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%300,)
}

def @func_1801(%var_1786: Tensor[(11, 4, 3), float32]) -> (Tensor[(11, 4, 3), float32],) {
  %301 = cast(%var_1786, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %302 = log2(%301) /* ty=Tensor[(11, 4, 3), float32] */;
  (%302,)
}

def @func_3111() -> (Tensor[(700), int64], Tensor[(14, 7, 14), float64]) {
  %303 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %304 = @func_2212() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %307 = %303.1;
  %308 = log(%306) /* ty=Tensor[(14, 7, 14), float64] */;
  (%307, %308)
}

def @func_912(%var_903: Tensor[(13, 14, 6), bool]) -> (Tensor[(13, 14, 6), bool],) {
  %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 14, 6), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
  %310 = shape_of(%var_903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_903, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = logical_and(%311, %312) /* ty=Tensor[(13, 14, 6), bool] */;
  (%313,)
}

def @func_1258() -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64]) {
  %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %315 = reshape(%314, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float64] */;
  %316 = @func_1077(%315) /* ty=Tensor[(7, 10, 10), float64] */;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  %318 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(700), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %319 = cast(meta[relay.Constant][21] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?), float64] */;
  %321 = minimum(%319, %320) /* ty=Tensor[(700), float64] */;
  %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(700), float64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(1), int32] */;
  %324 = cast(%321, dtype="int64") /* ty=Tensor[(700), int64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?), int64] */;
  %326 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %327 = add(%324, %325) /* ty=Tensor[(700), int64] */;
  (%326, %327)
}

def @func_213(%var_187: Tensor[(6, 3, 6), bool]) -> (Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  %328 = cast(%var_187, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %329 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = logical_and(%330, %331) /* ty=Tensor[(6, 3, 6), bool] */;
  %333 = cast(%332, dtype="uint64") /* ty=Tensor[(6, 3, 6), uint64] */;
  %334 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="uint64") /* ty=Tensor[(6, 3, 6), uint64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %337 = cast(%var_187, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %338 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %341 = bitwise_and(%335, %336) /* ty=Tensor[(6, 3, 6), uint64] */;
  %342 = floor_mod(%339, %340) /* ty=Tensor[(6, 3, 6), float64] */;
  (%341, %342)
}

def @func_2946() -> Tensor[(2, 6, 9), float64] {
  %343 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %343.0
}

def @func_3171() -> (Tensor[(2, 6, 9), float64],) {
  %344 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%344,)
}

def @func_1386(%var_1362: Tensor[(117), float32], %var_1364: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) {
  %345 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %346 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %347 = cast(%var_1362, dtype="float32") /* ty=Tensor[(117), float32] */;
  %348 = cast(%var_1362, dtype="float32") /* ty=Tensor[(117), float32] */;
  %349 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %350 = cast(%var_1364, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %351 = reshape(%347, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %352 = reshape(%348, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %353 = reshape(%349, newshape=[]) /* ty=uint8 */;
  %354 = reshape(%350, newshape=[560, 2]) /* ty=Tensor[(560, 2), uint8] */;
  %355 = @func_747(%351, %352, %353, %354) /* ty=(Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) */;
  %356 = cast(%var_1364, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %357 = %345.0;
  %358 = %346.0;
  %359 = %355.3;
  %360 = cosh(%356) /* ty=Tensor[(1120), float32] */;
  (%357, %358, %359, %var_1362, meta[relay.Constant][23] /* ty=uint8 */, %360)
}

def @func_4593(%var_4570: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
  %361 = @func_3809() /* ty=(Tensor[(700), int64], Tensor[(2, 6, 9), float64]) */;
  %362 = %361.1;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %364 = cast(%362, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %365 = cast(%var_4570, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %366 = reshape(%363, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %367 = reshape(%364, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %368 = reshape(%365, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %369 = @func_571(%366, %367, %368) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %370 = %369.0;
  %371 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  (%362, %370, %var_4570, %371)
}

def @func_3398() -> (Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  %372 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
  %373 = @func_2925() /* ty=Tensor[(700), float32] */;
  %374 = @func_3354() /* ty=Tensor[(2, 6, 9), float64] */;
  (%372, %373, %374)
}

def @main(%var_6095: Tensor[(1, 11, 7), float64]) -> (Tensor[(14, 7, 14), bool], Tensor[(1, 11, 7), float64]) {
  %375 = @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
  %376 = cast(%var_6095, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %377 = sqrt(%376) /* ty=Tensor[(1, 11, 7), float64] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %379 = %375.0;
  %380 = atan(%378) /* ty=Tensor[(1, 11, 7), float64] */;
  (%379, %380)
}

def @func_4055() -> Tensor[(2, 6, 9), uint64] {
  %381 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %382 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
  %385 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%381, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%386, %387) /* ty=Tensor[(2, 6, 9), uint64] */
}

def @func_3230(%var_3195: Tensor[(117), float32], %var_3196: Tensor[(1120), uint8]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(117), float32], Tensor[(1120), uint8]) {
  %388 = cast(%var_3195, dtype="float32") /* ty=Tensor[(117), float32] */;
  %389 = cast(%var_3196, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %390 = reshape(%388, newshape=[117]) /* ty=Tensor[(117), float32] */;
  %391 = reshape(%389, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %392 = @func_1386(%390, %391) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
  %393 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %394 = %392.0;
  (%393, %394, %var_3195, %var_3196)
}

def @func_3354() -> Tensor[(2, 6, 9), float64] {
  %395 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %395.0
}

def @func_5419() -> (Tensor[(2, 6, 9), float64],) {
  %396 = @func_3566() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %397 = %396.0;
  (%397,)
}

def @func_5955() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
  %398 = @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
  %399 = %398.0;
  %400 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%399, %400)
}

def @func_5795(%var_5737: Tensor[(5, 15, 15), uint64], %var_5738: Tensor[(5, 15, 15), uint64], %var_5750: Tensor[(700), float32], %var_5751: Tensor[(3, 36), float32]) -> (Tensor[(5, 15, 15), uint64], Tensor[(700), uint64], Tensor[(700), float32], Tensor[(3, 36), float32], Tensor[(7, 156), bool], Tensor[(2, 6, 9), float64]) {
  %401 = cast(%var_5738, dtype="uint64") /* ty=Tensor[(5, 15, 15), uint64] */;
  %402 = shape_of(%var_5737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_5737, dtype="uint64") /* ty=Tensor[(5, 15, 15), uint64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %405 = cast(%var_5750, dtype="float32") /* ty=Tensor[(700), float32] */;
  %406 = cast(%var_5751, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %407 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 156), bool] */, dtype="bool") /* ty=Tensor[(7, 156), bool] */;
  %408 = reshape(%405, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %409 = reshape(%406, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %410 = reshape(%407, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
  %411 = @func_1473(%408, %409, %410) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
  %412 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %413 = bitwise_and(%403, %404) /* ty=Tensor[(5, 15, 15), uint64] */;
  %414 = %411.4;
  %415 = %412.0;
  (%413, %414, %var_5750, %var_5751, meta[relay.Constant][24] /* ty=Tensor[(7, 156), bool] */, %415)
}

def @func_5218() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %416 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %417 = @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
  %418 = %416.1;
  %419 = %417.1;
  (%418, %419)
}

def @func_4208(%var_4168: Tensor[(2, 6, 9), float64], %var_4178: Tensor[(8, 140), uint8], %var_4196: Tensor[(1092), bool]) -> (Tensor[(2, 6, 9), bool], Tensor[(108), float64], Tensor[(8, 140), uint16], Tensor[(10, 8, 14), float32], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
  %420 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
  %421 = cast(%var_4168, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 140), uint8] */, dtype="uint8") /* ty=Tensor[(8, 140), uint8] */;
  %426 = reshape(%425, newshape=[560, 2]) /* ty=Tensor[(560, 2), uint8] */;
  %427 = @func_2874(%426) /* ty=(Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) */;
  %428 = cast(%var_4178, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
  %429 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(8, 140), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 140), uint8] */, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %432 = cast(%420, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %433 = cast(%var_4178, dtype="uint8") /* ty=Tensor[(8, 140), uint8] */;
  %434 = reshape(%432, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %435 = reshape(%433, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %436 = @func_487(%434, %435) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %437 = cast(%var_4196, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %438 = reshape(%437, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
  %439 = @func_912(%438) /* ty=(Tensor[(13, 14, 6), bool],) */;
  %440 = equal(%423, %424) /* ty=Tensor[(2, 6, 9), bool] */;
  %441 = %427.2;
  %442 = bitwise_or(%430, %431) /* ty=Tensor[(8, 140), uint16] */;
  %443 = %436.2;
  %444 = %439.0;
  (%440, %441, %442, %443, %444, %var_4196)
}

def @func_4228() -> Tensor[(2, 6, 9), float64] {
  %445 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %445.0
}

def @func_3041() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
  %446 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %447 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %448 = %446.0;
  %449 = %447.0;
  (%448, %449)
}

def @func_5202(%var_5193: Tensor[(15), float64]) -> (Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) {
  %450 = cast(%var_5193, dtype="float64") /* ty=Tensor[(15), float64] */;
  %451 = reshape(%450, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
  %452 = @func_4784(%451) /* ty=(Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) */;
  %453 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %454 = %452.4;
  (%453, %454, %var_5193)
}

def @func_1205(%var_1186: Tensor[(11, 15, 13), uint32]) -> Tensor[(11, 15, 13), uint32] {
  %455 = cast(%var_1186, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %456 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(11, 15, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 15, 13), uint32] */, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%457, %458) /* ty=Tensor[(11, 15, 13), uint32] */
}

def @func_3566() -> (Tensor[(2, 6, 9), float64],) {
  %459 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%459,)
}

def @func_2135() -> (Tensor[(14, 7, 14), bool],) {
  %460 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %461 = %460.0;
  (%461,)
}

def @func_4671() -> (Tensor[(2, 6, 9), float32],) {
  %462 = @func_4521() /* ty=(Tensor[(2, 6, 9), float32],) */;
  %463 = %462.0;
  (%463,)
}

def @func_2935(%var_2931: Tensor[(5, 6, 1), int32]) -> (Tensor[(5, 6, ?), int32],) {
  %464 = cast(%var_2931, dtype="int32") /* ty=Tensor[(5, 6, 1), int32] */;
  %465 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(5, 6, 1), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 6, 1), int32] */, dtype="int32") /* ty=Tensor[(5, 6, 1), int32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %468 = add(%466, %467) /* ty=Tensor[(5, 6, ?), int32] */;
  (%468,)
}

def @func_3539() -> (Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) {
  %469 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %470 = @func_3354() /* ty=Tensor[(2, 6, 9), float64] */;
  %471 = %469.1;
  (%470, %471)
}

def @func_2925() -> Tensor[(700), float32] {
  %472 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(700), float32] */;
  cos(%474) /* ty=Tensor[(700), float32] */
}

def @func_6075() -> Tensor[(2, 6, 9), float64] {
  @func_1963() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_1564(%var_1561: Tensor[(7, 11, 9), float32]) -> Tensor[(7, 11, 9), float32] {
  %475 = cast(%var_1561, dtype="float32") /* ty=Tensor[(7, 11, 9), float32] */;
  exp(%475) /* ty=Tensor[(7, 11, 9), float32] */
}

def @func_4314() -> (Tensor[(14, 7, 14), bool], Tensor[(700), int64]) {
  %476 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %477 = @func_3111() /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float64]) */;
  %478 = %476.0;
  %479 = %477.0;
  (%478, %479)
}

def @func_3013() -> Tensor[(14, 7, 14), bool] {
  %480 = @func_2212() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %480.0
}

def @func_571(%var_514: Tensor[(2, 6, 9), float64], %var_540: Tensor[(2, 6, 9), float64], %var_562: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) {
  %481 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %482 = cast(%var_514, dtype="uint16") /* ty=Tensor[(2, 6, 9), uint16] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="uint16") /* ty=Tensor[(2, 6, 9), uint16] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %486 = logical_xor(%484, %485) /* ty=Tensor[(2, 6, 9), uint16] */;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %488 = shape_of(%var_514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_514, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = cast(%var_540, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %492 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%481, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %495 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %496 = cast(%var_562, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %497 = reshape(%495, newshape=[]) /* ty=uint8 */;
  %498 = reshape(%496, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %499 = @func_387(%497, %498) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %500 = greater_equal(%489, %490) /* ty=Tensor[(2, 6, 9), bool] */;
  %501 = floor_mod(%493, %494) /* ty=Tensor[(2, 6, 9), float64] */;
  %502 = %499.1;
  (%500, %501, %502, meta[relay.Constant][28] /* ty=uint8 */, %var_562)
}

def @func_4378() -> Tensor[(2, 6, 9), float64] {
  %503 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
  %503.0
}

def @func_2250(%var_2243: Tensor[(13, 12, 4), int64]) -> (Tensor[(13, 12, 4), int64],) {
  %504 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 12, 4), int64] */, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %505 = shape_of(%var_2243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%var_2243, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %508 = subtract(%506, %507) /* ty=Tensor[(13, 12, 4), int64] */;
  (%508,)
}

def @func_2386(%var_2363: Tensor[(700), int64]) -> (Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) {
  %509 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %510 = %509.1;
  %511 = cast(%var_2363, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%510, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %515 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 560), uint8] */, dtype="uint8") /* ty=Tensor[(2, 560), uint8] */;
  %516 = reshape(%515, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %517 = @func_1062(%516) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %518 = cast(meta[relay.Constant][31] /* ty=Tensor[(1092), bool] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %519 = reshape(%518, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
  %520 = @func_912(%519) /* ty=(Tensor[(13, 14, 6), bool],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(13, 14, 6), float32] */;
  %523 = bitwise_or(%513, %514) /* ty=Tensor[(700), uint8] */;
  %524 = %517.1;
  %525 = atan(%522) /* ty=Tensor[(13, 14, 6), float32] */;
  (%523, %524, meta[relay.Constant][30] /* ty=Tensor[(2, 560), uint8] */, meta[relay.Constant][31] /* ty=Tensor[(1092), bool] */, %525)
}

def @func_3675() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %526 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %529 = sinh(%528) /* ty=Tensor[(2, 6, 9), float64] */;
  %530 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%529, %530)
}

def @func_4847(%var_4830: Tensor[(117), float32], %var_4831: Tensor[(1120), uint8]) -> (Tensor[(700), int64], Tensor[(14, 7, 14), float32], Tensor[(700), int64], Tensor[(700), int64], Tensor[(2, 6, 9), float32], Tensor[(1120), float32], Tensor[(117), float32], Tensor[(1120), uint8], Tensor[(1120), uint8]) {
  %531 = @func_4314() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(700), int64]) */;
  %532 = @func_3080() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) */;
  %533 = @func_3111() /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float64]) */;
  %534 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %535 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %538 = cast(%var_4830, dtype="float32") /* ty=Tensor[(117), float32] */;
  %539 = cast(%var_4831, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %540 = reshape(%538, newshape=[117]) /* ty=Tensor[(117), float32] */;
  %541 = reshape(%539, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %542 = @func_1386(%540, %541) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
  %543 = %542.5;
  %544 = cast(%543, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %545 = reshape(%544, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %546 = @func_4593(%545) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %547 = %531.1;
  %548 = %532.3;
  %549 = %533.0;
  %550 = %534.1;
  %551 = exp(%537) /* ty=Tensor[(2, 6, 9), float32] */;
  %552 = %546.2;
  (%547, %548, %549, %550, %551, %543, %var_4830, %var_4831, %552)
}

def @func_5113(%var_5098: Tensor[(14, 3, 7), float32], %var_5106: Tensor[(2, 560), uint8]) -> (Tensor[(14, 3, 7), float32], Tensor[(700), float64], Tensor[(2, 560), uint8], Tensor[(2, 6, 9), float64]) {
  %553 = cast(%var_5098, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %554 = cast(%var_5106, dtype="uint8") /* ty=Tensor[(2, 560), uint8] */;
  %555 = reshape(%554, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %556 = @func_1672(%555) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) */;
  %557 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %558 = tan(%553) /* ty=Tensor[(14, 3, 7), float32] */;
  %559 = %556.2;
  %560 = %557.1;
  (%558, %559, %var_5106, %560)
}

def @func_747(%var_697: Tensor[(13, 3, 3), float32], %var_698: Tensor[(13, 3, 3), float32], %var_708: uint8, %var_709: Tensor[(560, 2), uint8]) -> (Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) {
  %561 = cast(%var_698, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %562 = shape_of(%var_697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_697, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %565 = cast(%var_708, dtype="uint8") /* ty=uint8 */;
  %566 = cast(%var_709, dtype="uint8") /* ty=Tensor[(560, 2), uint8] */;
  %567 = reshape(%565, newshape=[]) /* ty=uint8 */;
  %568 = reshape(%566, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %569 = @func_387(%567, %568) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %570 = %569.3;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %572 = log(%571) /* ty=Tensor[(1120), float32] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %574 = sinh(%573) /* ty=Tensor[(1120), float64] */;
  %575 = cast(%572, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(1), int32] */;
  %577 = cast(%574, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?), int16] */;
  %579 = divide(%563, %564) /* ty=Tensor[(13, 3, 3), float32] */;
  %580 = right_shift(%577, %578) /* ty=Tensor[(1120), int16] */;
  (%579, %var_708, %var_709, %580)
}

def @func_6001() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %581 = @func_5218() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */;
  %582 = %581.1;
  %583 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%582, %583)
}

def @func_361() -> Tensor[(2, 6, 9), float64] {
  %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 6, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  log2(%584) /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_487(%var_428: Tensor[(2, 6, 9), float32], %var_484: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) {
  %585 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %587 = asin(%586) /* ty=Tensor[(2, 6, 9), float32] */;
  %588 = cast(%585, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %592 = cast(%var_428, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
  %593 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%587, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %596 = add(%594, %595) /* ty=Tensor[(2, 6, 9), uint8] */;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %598 = cosh(%597) /* ty=Tensor[(2, 6, 9), float64] */;
  %599 = cast(%596, dtype="int8") /* ty=Tensor[(2, 6, 9), int8] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="int8") /* ty=Tensor[(2, 6, 9), int8] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %603 = bitwise_and(%601, %602) /* ty=Tensor[(2, 6, 9), int8] */;
  %604 = cast(%603, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %605 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%598, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = not_equal(%606, %607) /* ty=Tensor[(2, 6, 9), bool] */;
  %609 = cast(%603, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %614 = cast(%var_484, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %615 = reshape(%613, newshape=[]) /* ty=uint8 */;
  %616 = reshape(%614, newshape=[10, 8, 14]) /* ty=Tensor[(10, 8, 14), uint8] */;
  %617 = @func_108(%615, %616) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) */;
  %618 = right_shift(%590, %591) /* ty=Tensor[(2, 6, 9), uint8] */;
  %619 = logical_and(%611, %612) /* ty=Tensor[(2, 6, 9), bool] */;
  %620 = %617.1;
  (%618, %619, %620, meta[relay.Constant][33] /* ty=uint8 */, %var_484)
}

def @func_3809() -> (Tensor[(700), int64], Tensor[(2, 6, 9), float64]) {
  %621 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %622 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %623 = %621.1;
  %624 = %622.1;
  (%623, %624)
}

def @func_1473(%var_1436: Tensor[(700), float32], %var_1442: Tensor[(108), float32], %var_1471: Tensor[(1092), bool]) -> (uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
  %625 = cast(%var_1442, dtype="float32") /* ty=Tensor[(108), float32] */;
  %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %627 = reshape(%625, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %628 = reshape(%626, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %629 = @func_487(%627, %628) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %630 = cast(meta[relay.Constant][34] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %631 = reshape(%630, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %632 = @func_1062(%631) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %633 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %634 = %633.1;
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(700), int64] */, dtype="bool") /* ty=Tensor[(700), bool] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(1), int32] */;
  %637 = cast(%634, dtype="bool") /* ty=Tensor[(700), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), bool] */;
  %639 = greater(%637, %638) /* ty=Tensor[(700), bool] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(700), float32] */;
  %641 = exp(%640) /* ty=Tensor[(700), float32] */;
  %642 = cast(%var_1436, dtype="bool") /* ty=Tensor[(700), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(700), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), bool] */;
  %646 = logical_or(%644, %645) /* ty=Tensor[(700), bool] */;
  %647 = cast(%639, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(%646, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %651 = cast(%var_1471, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %652 = reshape(%651, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
  %653 = @func_912(%652) /* ty=(Tensor[(13, 14, 6), bool],) */;
  %654 = %629.3;
  %655 = %632.0;
  %656 = right_shift(%649, %650) /* ty=Tensor[(700), uint64] */;
  %657 = %653.0;
  (%654, %var_1442, meta[relay.Constant][34] /* ty=Tensor[(1120), uint8] */, %655, %656, %657, %var_1471)
}

def @func_5409() -> (Tensor[(14, 7, 14), bool], Tensor[(7, 11, 9), float32], Tensor[(1, 693), float32]) {
  %658 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %659 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 693), float32] */, dtype="float32") /* ty=Tensor[(1, 693), float32] */;
  %660 = reshape(%659, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %661 = %658.0;
  %662 = @func_1564(%660) /* ty=Tensor[(7, 11, 9), float32] */;
  (%661, %662, meta[relay.Constant][36] /* ty=Tensor[(1, 693), float32] */)
}

def @func_1963() -> Tensor[(2, 6, 9), float64] {
  %663 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %663.0
}

def @func_6052() -> (Tensor[(2, 6, 9), float64],) {
  %664 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %665 = %664.0;
  (%665,)
}

def @func_1077(%var_1066: Tensor[(7, 10, 10), float64]) -> Tensor[(7, 10, 10), float64] {
  %666 = cast(%var_1066, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  cos(%666) /* ty=Tensor[(7, 10, 10), float64] */
}

def @func_2781(%var_2650: Tensor[(1120), uint8], %var_2690: Tensor[(700), int64], %var_2716: Tensor[(624, 1), int64], %var_2735: Tensor[(5, 4, 8), float32]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(4, 280), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624, 1), int64], Tensor[(5, 4, 8), float32], Tensor[(5, 4, 8), bool], Tensor[(700), int64], Tensor[(5, 4, 8), float64], Tensor[(5, 4, 8), float32]) {
  %667 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %668 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %669 = reshape(%668, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %670 = @func_644(%669) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */;
  %671 = @func_2435() /* ty=(Tensor[(2, 6, 9), float32],) */;
  %672 = %671.0;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %674 = cast(%672, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %675 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %676 = reshape(%673, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %677 = reshape(%674, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %678 = reshape(%675, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %679 = @func_571(%676, %677, %678) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %680 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %681 = reshape(%680, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %682 = @func_1672(%681) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) */;
  %683 = cast(%var_2690, dtype="int64") /* ty=Tensor[(700), int64] */;
  %684 = reshape(%683, newshape=[700]) /* ty=Tensor[(700), int64] */;
  %685 = @func_2386(%684) /* ty=(Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) */;
  %686 = cast(%var_2716, dtype="int64") /* ty=Tensor[(624, 1), int64] */;
  %687 = reshape(%686, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %688 = @func_2250(%687) /* ty=(Tensor[(13, 12, 4), int64],) */;
  %689 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %690 = log10(%689) /* ty=Tensor[(5, 4, 8), float64] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %692 = acos(%691) /* ty=Tensor[(5, 4, 8), float32] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %694 = exp(%693) /* ty=Tensor[(5, 4, 8), float64] */;
  %695 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %696 = asinh(%695) /* ty=Tensor[(5, 4, 8), float64] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %698 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%694, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = equal(%699, %700) /* ty=Tensor[(5, 4, 8), bool] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %703 = cast(%var_2735, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %704 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%692, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %708 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %709 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = not_equal(%710, %711) /* ty=Tensor[(5, 4, 8), bool] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %714 = rsqrt(%713) /* ty=Tensor[(5, 4, 8), float64] */;
  %715 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="uint16") /* ty=Tensor[(5, 4, 8), uint16] */;
  %716 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%690, dtype="uint16") /* ty=Tensor[(5, 4, 8), uint16] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %719 = multiply(%717, %718) /* ty=Tensor[(5, 4, 8), uint16] */;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %721 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%714, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %724 = cast(%690, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %725 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%694, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = logical_and(%726, %727) /* ty=Tensor[(5, 4, 8), bool] */;
  %729 = cast(%714, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %733 = %667.1;
  %734 = %670.0;
  %735 = %679.4;
  %736 = %682.3;
  %737 = %685.1;
  %738 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %739 = %688.0;
  %740 = sinh(%702) /* ty=Tensor[(5, 4, 8), float32] */;
  %741 = logical_or(%705, %706) /* ty=Tensor[(5, 4, 8), bool] */;
  %742 = %707.0;
  %743 = divide(%722, %723) /* ty=Tensor[(5, 4, 8), float64] */;
  %744 = floor_divide(%731, %732) /* ty=Tensor[(5, 4, 8), float32] */;
  (%733, %734, %var_2650, %672, %735, %736, %737, %var_2690, %738, %739, %var_2716, %740, %741, %742, %743, %744)
}

def @func_875() -> (Tensor[(2, 6, 9), float64],) {
  %745 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %747 = atan(%746) /* ty=Tensor[(2, 6, 9), float64] */;
  (%747,)
}

def @func_1741(%var_1725: Tensor[(6, 11), float32]) -> Tensor[(6, 11), float32] {
  %748 = cast(%var_1725, dtype="float32") /* ty=Tensor[(6, 11), float32] */;
  rsqrt(%748) /* ty=Tensor[(6, 11), float32] */
}

def @func_4948(%var_4892: Tensor[(700), int64], %var_4912: Tensor[(132), float32], %var_4933: Tensor[(3, 36), float64]) -> (Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(700), float64], Tensor[(2, 6, 9), bool], Tensor[(14, 7, 14), bool], Tensor[(11, 4, 3), int32], Tensor[(11, 4, 3), float32], Tensor[(3, 36), bool]) {
  %749 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %750 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %751 = cast(meta[relay.Constant][40] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %752 = reshape(%749, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %753 = reshape(%750, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %754 = reshape(%751, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %755 = @func_571(%752, %753, %754) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %756 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %757 = %756.0;
  %758 = cast(%var_4892, dtype="float64") /* ty=Tensor[(700), float64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(1), int32] */;
  %760 = cast(%757, dtype="float64") /* ty=Tensor[(700), float64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?), float64] */;
  %762 = @func_3981() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) */;
  %763 = cast(%var_4912, dtype="float32") /* ty=Tensor[(132), float32] */;
  %764 = reshape(%763, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), float32] */;
  %765 = @func_1801(%764) /* ty=(Tensor[(11, 4, 3), float32],) */;
  %766 = %765.0;
  %767 = cast(%var_4912, dtype="int32") /* ty=Tensor[(132), int32] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %771 = cast(%766, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %772 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %773 = atan(%772) /* ty=Tensor[(3, 36), float64] */;
  %774 = cast(%var_4933, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %776 = cast(%773, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %778 = divide(%776, %777) /* ty=Tensor[(3, 36), float32] */;
  %779 = cast(%778, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %780 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %781 = cast(%773, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %783 = %755.0;
  %784 = floor_divide(%760, %761) /* ty=Tensor[(700), float64] */;
  %785 = %762.1;
  %786 = @func_3013() /* ty=Tensor[(14, 7, 14), bool] */;
  %787 = bitwise_or(%769, %770) /* ty=Tensor[(11, 4, 3), int32] */;
  %788 = sqrt(%771) /* ty=Tensor[(11, 4, 3), float32] */;
  %789 = greater(%781, %782) /* ty=Tensor[(3, 36), bool] */;
  (%783, meta[relay.Constant][40] /* ty=Tensor[(1120), uint8] */, %784, %785, %786, %787, %788, %789)
}

def @func_4115(%var_4104: Tensor[(700), float32]) -> (Tensor[(700), float64],) {
  %790 = @func_2925() /* ty=Tensor[(700), float32] */;
  %791 = cast(%var_4104, dtype="float32") /* ty=Tensor[(700), float32] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(1), int32] */;
  %793 = cast(%790, dtype="float32") /* ty=Tensor[(700), float32] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?), float32] */;
  %795 = mod(%793, %794) /* ty=Tensor[(700), float32] */;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(700), float64] */;
  %797 = tan(%796) /* ty=Tensor[(700), float64] */;
  (%797,)
}

def @func_4648() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) {
  %798 = cast(meta[relay.Constant][41] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %799 = reshape(%798, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %800 = @func_4295(%799) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) */;
  %801 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %802 = %800.0;
  (%801, %802, meta[relay.Constant][41] /* ty=Tensor[(1120), uint8] */)
}

def @func_3459(%var_3428: Tensor[(6, 1, 10), float64]) -> (Tensor[(6, 1, 10), float32], Tensor[(7, 11, 9), float32], Tensor[(231, 3), float64]) {
  %803 = cast(%var_3428, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
  %804 = log10(%803) /* ty=Tensor[(6, 1, 10), float64] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(6, 1, 10), float32] */;
  %806 = cast(meta[relay.Constant][42] /* ty=Tensor[(231, 3), float32] */, dtype="float32") /* ty=Tensor[(231, 3), float32] */;
  %807 = reshape(%806, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %808 = cast(meta[relay.Constant][42] /* ty=Tensor[(231, 3), float32] */, dtype="float64") /* ty=Tensor[(231, 3), float64] */;
  %809 = acos(%805) /* ty=Tensor[(6, 1, 10), float32] */;
  %810 = @func_1564(%807) /* ty=Tensor[(7, 11, 9), float32] */;
  %811 = rsqrt(%808) /* ty=Tensor[(231, 3), float64] */;
  (%809, %810, %811)
}

def @func_3875() -> (Tensor[(14, 7, 14), bool], Tensor[(6, 11), float32], Tensor[(22, 3), float32], Tensor[(700), float32]) {
  %812 = cast(meta[relay.Constant][43] /* ty=Tensor[(22, 3), float32] */, dtype="float32") /* ty=Tensor[(22, 3), float32] */;
  %813 = reshape(%812, newshape=[6, 11]) /* ty=Tensor[(6, 11), float32] */;
  %814 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
  %815 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %816 = @func_1741(%813) /* ty=Tensor[(6, 11), float32] */;
  %817 = %814.1;
  (%815, %816, meta[relay.Constant][43] /* ty=Tensor[(22, 3), float32] */, %817)
}

def @func_5584(%var_5561: Tensor[(1372), bool]) -> (Tensor[(15, 5, 16), uint8], Tensor[(14, 7, 14), float64], Tensor[(1372), bool], Tensor[(2, 6, 9), float64]) {
  %818 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 16), uint8] */;
  %819 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 16), uint8] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %822 = cast(%var_5561, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %823 = reshape(%822, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), bool] */;
  %824 = @func_3726(%823) /* ty=(Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) */;
  %825 = subtract(%820, %821) /* ty=Tensor[(15, 5, 16), uint8] */;
  %826 = %824.1;
  %827 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%825, %826, %var_5561, %827)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_362() -> Tensor[(2, 6, 9), float64] {
  %1 = fn () -> Tensor[(2, 6, 9), float64] {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 6, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    log2(%0) /* ty=Tensor[(2, 6, 9), float64] */
  };
  %1() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_2066() -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) {
  %2 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %3 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %7 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = greater_equal(%4, %5) /* ty=Tensor[(14, 7, 14), bool] */;
  %11 = equal(%8, %9) /* ty=Tensor[(14, 7, 14), bool] */;
  (%10, %11)
}

def @func_2343(%var_2341: Tensor[(15, 16, 4), float64]) -> Tensor[(15, 16, 4), float64] {
  @func_2340(%var_2341) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_900() -> (Tensor[(2, 6, 9), float64],) {
  %12 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%12,)
}

def @func_1965() -> Tensor[(2, 6, 9), float64] {
  @func_1963() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_2068() -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) {
  @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */
}

def @func_4851(%var_4849: Tensor[(117), float32], %var_4850: Tensor[(1120), uint8]) -> (Tensor[(700), int64], Tensor[(14, 7, 14), float32], Tensor[(700), int64], Tensor[(700), int64], Tensor[(2, 6, 9), float32], Tensor[(1120), float32], Tensor[(117), float32], Tensor[(1120), uint8], Tensor[(1120), uint8]) {
  @func_4847(%var_4849, %var_4850) /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float32], Tensor[(700), int64], Tensor[(700), int64], Tensor[(2, 6, 9), float32], Tensor[(1120), float32], Tensor[(117), float32], Tensor[(1120), uint8], Tensor[(1120), uint8]) */
}

def @func_4316() -> (Tensor[(14, 7, 14), bool], Tensor[(700), int64]) {
  @func_4314() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(700), int64]) */
}

def @func_5411() -> (Tensor[(14, 7, 14), bool], Tensor[(7, 11, 9), float32], Tensor[(1, 693), float32]) {
  @func_5409() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(7, 11, 9), float32], Tensor[(1, 693), float32]) */
}

def @func_1473(%var_1436: Tensor[(700), float32], %var_1442: Tensor[(108), float32], %var_1471: Tensor[(1092), bool]) -> (uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
  %13 = cast(%var_1442, dtype="float32") /* ty=Tensor[(108), float32] */;
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %15 = reshape(%13, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %16 = reshape(%14, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %17 = @func_487(%15, %16) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %19 = reshape(%18, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %20 = @func_1062(%19) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %21 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %22 = %21.1;
  %23 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), int64] */, dtype="bool") /* ty=Tensor[(700), bool] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(1), int32] */;
  %25 = cast(%22, dtype="bool") /* ty=Tensor[(700), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?), bool] */;
  %27 = greater(%25, %26) /* ty=Tensor[(700), bool] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(700), float32] */;
  %29 = exp(%28) /* ty=Tensor[(700), float32] */;
  %30 = cast(%var_1436, dtype="bool") /* ty=Tensor[(700), bool] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(1), int32] */;
  %32 = cast(%29, dtype="bool") /* ty=Tensor[(700), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?), bool] */;
  %34 = logical_or(%32, %33) /* ty=Tensor[(700), bool] */;
  %35 = cast(%27, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %37 = cast(%34, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %39 = cast(%var_1471, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %40 = reshape(%39, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
  %41 = @func_912(%40) /* ty=(Tensor[(13, 14, 6), bool],) */;
  %42 = %17.3;
  %43 = %20.0;
  %44 = right_shift(%37, %38) /* ty=Tensor[(700), uint64] */;
  %45 = %41.0;
  (%42, %var_1442, meta[relay.Constant][3] /* ty=Tensor[(1120), uint8] */, %43, %44, %45, %var_1471)
}

def @func_4298(%var_4296: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) {
  @func_4295(%var_4296) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) */
}

def @func_6003() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  @func_6001() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */
}

def @func_2163(%var_2156: Tensor[(2, 6, 9), float64]) -> (Tensor[(2, 6, 9), int16],) {
  %46 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %47 = %46.0;
  %48 = cast(%var_2156, dtype="int16") /* ty=Tensor[(2, 6, 9), int16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int16") /* ty=Tensor[(2, 6, 9), int16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %52 = bitwise_or(%50, %51) /* ty=Tensor[(2, 6, 9), int16] */;
  (%52,)
}

def @func_3983() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) {
  @func_3981() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) */
}

def @func_2609() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  @func_2607() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */
}

def @func_2435() -> (Tensor[(2, 6, 9), float32],) {
  %53 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %55 = erf(%54) /* ty=Tensor[(2, 6, 9), float32] */;
  (%55,)
}

def @func_902() -> (Tensor[(2, 6, 9), float64],) {
  @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_2927() -> Tensor[(700), float32] {
  @func_2925() /* ty=Tensor[(700), float32] */
}

def @func_3080() -> (Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) {
  %56 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %57 = %56.0;
  %58 = @func_2925() /* ty=Tensor[(700), float32] */;
  %59 = cast(%58, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %60 = shape_of(%57, dtype="int32") /* ty=Tensor[(1), int32] */;
  %61 = cast(%57, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %63 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %64 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 7, 14), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %69 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
  %70 = multiply(%61, %62) /* ty=Tensor[(700), uint64] */;
  %71 = %63.0;
  %72 = power(%67, %68) /* ty=Tensor[(14, 7, 14), float32] */;
  (%69, %70, %71, %72)
}

def @func_3043() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
  @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */
}

def @func_1386(%var_1362: Tensor[(117), float32], %var_1364: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) {
  %73 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %74 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %75 = cast(%var_1362, dtype="float32") /* ty=Tensor[(117), float32] */;
  %76 = cast(%var_1362, dtype="float32") /* ty=Tensor[(117), float32] */;
  %77 = cast(meta[relay.Constant][6] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %78 = cast(%var_1364, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %79 = reshape(%75, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %80 = reshape(%76, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %81 = reshape(%77, newshape=[]) /* ty=uint8 */;
  %82 = reshape(%78, newshape=[560, 2]) /* ty=Tensor[(560, 2), uint8] */;
  %83 = @func_747(%79, %80, %81, %82) /* ty=(Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) */;
  %84 = cast(%var_1364, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %85 = %73.0;
  %86 = %74.0;
  %87 = %83.3;
  %88 = cosh(%84) /* ty=Tensor[(1120), float32] */;
  (%85, %86, %87, %var_1362, meta[relay.Constant][6] /* ty=uint8 */, %88)
}

def @func_4595(%var_4594: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
  %100 = fn (%var_4570: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
    %89 = @func_3809() /* ty=(Tensor[(700), int64], Tensor[(2, 6, 9), float64]) */;
    %90 = %89.1;
    %91 = cast(%90, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %92 = cast(%90, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %93 = cast(%var_4570, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %94 = reshape(%91, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %95 = reshape(%92, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %96 = reshape(%93, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
    %97 = @func_571(%94, %95, %96) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
    %98 = %97.0;
    %99 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
    (%90, %98, %var_4570, %99)
  };
  %100(%var_4594) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */
}

def @func_1941(%var_1913: Tensor[(1092), bool]) -> (Tensor[(700), int64], Tensor[(1120), uint8], Tensor[(1, 108), float32], Tensor[(1092), bool], Tensor[(2, 6, 9), float64]) {
  %101 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %102 = %101.1;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(700), float32] */;
  %104 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %105 = cast(%var_1913, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %106 = reshape(%103, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %107 = reshape(%104, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %108 = reshape(%105, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
  %109 = @func_1473(%106, %107, %108) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
  %110 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %111 = %109.2;
  %112 = %110.0;
  (%102, %111, meta[relay.Constant][7] /* ty=Tensor[(1, 108), float32] */, %var_1913, %112)
}

def @func_5420() -> (Tensor[(2, 6, 9), float64],) {
  %115 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %113 = @func_3566() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %114 = %113.0;
    (%114,)
  };
  %115() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_4445(%var_4443: Tensor[(1, 6, 3), int16], %var_4444: Tensor[(13, 6, 3), int16]) -> (Tensor[(13, 6, 3), int16], Tensor[(1, 6, 3), float64]) {
  %121 = fn (%var_4424: Tensor[(1, 6, 3), int16], %var_4425: Tensor[(13, 6, 3), int16]) -> (Tensor[(13, 6, 3), int16], Tensor[(1, 6, 3), float64]) {
    %116 = cast(%var_4424, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
    %117 = cast(%var_4425, dtype="int16") /* ty=Tensor[(13, 6, 3), int16] */;
    %118 = cast(%var_4424, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
    %119 = bitwise_xor(%116, %117) /* ty=Tensor[(13, 6, 3), int16] */;
    %120 = exp(%118) /* ty=Tensor[(1, 6, 3), float64] */;
    (%119, %120)
  };
  %121(%var_4443, %var_4444) /* ty=(Tensor[(13, 6, 3), int16], Tensor[(1, 6, 3), float64]) */
}

def @func_3355() -> Tensor[(2, 6, 9), float64] {
  %123 = fn () -> Tensor[(2, 6, 9), float64] {
    %122 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %122.0
  };
  %123() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_5409() -> (Tensor[(14, 7, 14), bool], Tensor[(7, 11, 9), float32], Tensor[(1, 693), float32]) {
  %124 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 693), float32] */, dtype="float32") /* ty=Tensor[(1, 693), float32] */;
  %126 = reshape(%125, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %127 = %124.0;
  %128 = @func_1564(%126) /* ty=Tensor[(7, 11, 9), float32] */;
  (%127, %128, meta[relay.Constant][8] /* ty=Tensor[(1, 693), float32] */)
}

def @func_5956() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
  %132 = fn () -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
    %129 = @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
    %130 = %129.0;
    %131 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
    (%130, %131)
  };
  %132() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */
}

def @func_2312() -> (Tensor[(700), int64],) {
  %135 = fn () -> (Tensor[(700), int64],) {
    %133 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
    %134 = %133.1;
    (%134,)
  };
  %135() /* ty=(Tensor[(700), int64],) */
}

def @func_4295(%var_4288: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) {
  %136 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %137 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %138 = %136.0;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %140 = cast(%var_4288, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %141 = reshape(%139, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %142 = reshape(%140, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %143 = @func_487(%141, %142) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %144 = %137.0;
  %145 = %143.2;
  (%138, %144, %145, %var_4288)
}

def @func_1180(%var_1124: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), float32], Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  %146 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %148 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %149 = reshape(%147, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %150 = reshape(%148, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %151 = @func_487(%149, %150) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %152 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %153 = reshape(%152, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %154 = @func_1062(%153) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
  %155 = %154.1;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %157 = cast(%var_1124, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %158 = reshape(%156, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %159 = reshape(%157, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %160 = @func_487(%158, %159) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
  %161 = cast(%155, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %162 = reshape(%161, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %163 = @func_213(%162) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %164 = cast(%146, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %165 = reshape(%164, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
  %166 = @func_213(%165) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
  %167 = %151.0;
  %168 = %160.2;
  %169 = %163.0;
  %170 = %166.1;
  (%146, %167, %var_1124, %155, %168, %169, %170)
}

def @func_2025(%var_1972: Tensor[(15, 15, 12), float32], %var_2019: uint32) -> (Tensor[(15, 15, 12), float64], Tensor[(350, 2), float32], Tensor[(108), float32], Tensor[(1, 1092), bool], Tensor[(2, 6, 9), float64], Tensor[(15, 15, 12), float64], Tensor[(10, 1, 7), uint32], uint32, Tensor[(700), int64]) {
  %171 = cast(%var_1972, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(350, 2), float32] */, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1092), bool] */, dtype="bool") /* ty=Tensor[(1, 1092), bool] */;
  %175 = reshape(%172, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %176 = reshape(%173, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %177 = reshape(%174, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
  %178 = @func_1473(%175, %176, %177) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
  %179 = %178.3;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %181 = cast(%var_1972, dtype="float32") /* ty=Tensor[(15, 15, 12), float32] */;
  %182 = atan(%181) /* ty=Tensor[(15, 15, 12), float32] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %184 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_1972, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = cast(%var_2019, dtype="uint32") /* ty=uint32 */;
  %188 = reshape(%187, newshape=[]) /* ty=uint32 */;
  %189 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %190 = asinh(%171) /* ty=Tensor[(15, 15, 12), float64] */;
  %191 = asinh(%180) /* ty=Tensor[(2, 6, 9), float64] */;
  %192 = mod(%185, %186) /* ty=Tensor[(15, 15, 12), float64] */;
  %193 = @func_1526(%188) /* ty=Tensor[(10, 1, 7), uint32] */;
  %194 = %189.1;
  (%190, meta[relay.Constant][9] /* ty=Tensor[(350, 2), float32] */, meta[relay.Constant][10] /* ty=Tensor[(108), float32] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1092), bool] */, %191, %192, %193, %var_2019, %194)
}

def @func_2437() -> (Tensor[(2, 6, 9), float32],) {
  @func_2435() /* ty=(Tensor[(2, 6, 9), float32],) */
}

def @func_4650() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) {
  @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */
}

def @func_4784(%var_4748: Tensor[(5, 3), float64]) -> (Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) {
  %195 = cast(%var_4748, dtype="float64") /* ty=Tensor[(5, 3), float64] */;
  %196 = @func_2435() /* ty=(Tensor[(2, 6, 9), float32],) */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %198 = reshape(%197, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float64] */;
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 78), int64] */, dtype="int64") /* ty=Tensor[(8, 78), int64] */;
  %200 = reshape(%199, newshape=[624]) /* ty=Tensor[(624), int64] */;
  %201 = @func_3939(%200) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) */;
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %203 = reshape(%202, newshape=[6, 11]) /* ty=Tensor[(6, 11), float32] */;
  %204 = sin(%195) /* ty=Tensor[(5, 3), float64] */;
  %205 = %196.0;
  %206 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  %207 = @func_2340(%198) /* ty=Tensor[(15, 16, 4), float64] */;
  %208 = %201.3;
  %209 = @func_1741(%203) /* ty=Tensor[(6, 11), float32] */;
  (%204, %205, %206, %207, meta[relay.Constant][12] /* ty=Tensor[(960), float64] */, %208, meta[relay.Constant][13] /* ty=Tensor[(8, 78), int64] */, %209, meta[relay.Constant][14] /* ty=Tensor[(66), float32] */)
}

def @func_3015() -> Tensor[(14, 7, 14), bool] {
  @func_3013() /* ty=Tensor[(14, 7, 14), bool] */
}

def @func_1741(%var_1725: Tensor[(6, 11), float32]) -> Tensor[(6, 11), float32] {
  %210 = cast(%var_1725, dtype="float32") /* ty=Tensor[(6, 11), float32] */;
  rsqrt(%210) /* ty=Tensor[(6, 11), float32] */
}

def @func_390(%var_388: uint8, %var_389: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
  %219 = fn (%var_371: uint8, %var_372: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) {
    %211 = cast(%var_371, dtype="uint8") /* ty=uint8 */;
    %212 = cast(%var_372, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %213 = reshape(%211, newshape=[]) /* ty=uint8 */;
    %214 = reshape(%212, newshape=[10, 8, 14]) /* ty=Tensor[(10, 8, 14), uint8] */;
    %215 = @func_108(%213, %214) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) */;
    %216 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    %217 = %215.0;
    %218 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    (%216, %217, %var_371, %var_372, %218)
  };
  %219(%var_388, %var_389) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */
}

def @func_2947() -> Tensor[(2, 6, 9), float64] {
  %221 = fn () -> Tensor[(2, 6, 9), float64] {
    %220 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %220.0
  };
  %221() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_4522() -> (Tensor[(2, 6, 9), float32],) {
  %226 = fn () -> (Tensor[(2, 6, 9), float32],) {
    %222 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %223 = %222.0;
    %224 = cast(%223, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %225 = sigmoid(%224) /* ty=Tensor[(2, 6, 9), float32] */;
    (%225,)
  };
  %226() /* ty=(Tensor[(2, 6, 9), float32],) */
}

def @func_3876() -> (Tensor[(14, 7, 14), bool], Tensor[(6, 11), float32], Tensor[(22, 3), float32], Tensor[(700), float32]) {
  %233 = fn () -> (Tensor[(14, 7, 14), bool], Tensor[(6, 11), float32], Tensor[(22, 3), float32], Tensor[(700), float32]) {
    %227 = cast(meta[relay.Constant][15] /* ty=Tensor[(22, 3), float32] */, dtype="float32") /* ty=Tensor[(22, 3), float32] */;
    %228 = reshape(%227, newshape=[6, 11]) /* ty=Tensor[(6, 11), float32] */;
    %229 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
    %230 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
    %231 = @func_1741(%228) /* ty=Tensor[(6, 11), float32] */;
    %232 = %229.1;
    (%230, %231, meta[relay.Constant][15] /* ty=Tensor[(22, 3), float32] */, %232)
  };
  %233() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(6, 11), float32], Tensor[(22, 3), float32], Tensor[(700), float32]) */
}

def @func_5913() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %234 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %235 = %234.0;
  %236 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
  (%235, %236)
}

def @func_3082() -> (Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) {
  @func_3080() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) */
}

def @func_5587(%var_5585: Tensor[(1372), bool]) -> (Tensor[(15, 5, 16), uint8], Tensor[(14, 7, 14), float64], Tensor[(1372), bool], Tensor[(2, 6, 9), float64]) {
  @func_5584(%var_5585) /* ty=(Tensor[(15, 5, 16), uint8], Tensor[(14, 7, 14), float64], Tensor[(1372), bool], Tensor[(2, 6, 9), float64]) */
}

def @func_747(%var_697: Tensor[(13, 3, 3), float32], %var_698: Tensor[(13, 3, 3), float32], %var_708: uint8, %var_709: Tensor[(560, 2), uint8]) -> (Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) {
  %237 = cast(%var_698, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %238 = shape_of(%var_697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_697, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %241 = cast(%var_708, dtype="uint8") /* ty=uint8 */;
  %242 = cast(%var_709, dtype="uint8") /* ty=Tensor[(560, 2), uint8] */;
  %243 = reshape(%241, newshape=[]) /* ty=uint8 */;
  %244 = reshape(%242, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %245 = @func_387(%243, %244) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %246 = %245.3;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %248 = log(%247) /* ty=Tensor[(1120), float32] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %250 = sinh(%249) /* ty=Tensor[(1120), float64] */;
  %251 = cast(%248, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(1), int32] */;
  %253 = cast(%250, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), int16] */;
  %255 = divide(%239, %240) /* ty=Tensor[(13, 3, 3), float32] */;
  %256 = right_shift(%253, %254) /* ty=Tensor[(1120), int16] */;
  (%255, %var_708, %var_709, %256)
}

def @main(%var_6095: Tensor[(1, 11, 7), float64]) -> (Tensor[(14, 7, 14), bool], Tensor[(1, 11, 7), float64]) {
  %257 = @func_4650() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
  %258 = cast(%var_6095, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %259 = sqrt(%258) /* ty=Tensor[(1, 11, 7), float64] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %261 = %257.0;
  %262 = atan(%260) /* ty=Tensor[(1, 11, 7), float64] */;
  (%261, %262)
}

def @func_2827() -> Tensor[(14, 7, 14), bool] {
  @func_2825() /* ty=Tensor[(14, 7, 14), bool] */
}

def @func_3400() -> (Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */
}

def @func_2029(%var_2027: Tensor[(15, 15, 12), float32], %var_2028: uint32) -> (Tensor[(15, 15, 12), float64], Tensor[(350, 2), float32], Tensor[(108), float32], Tensor[(1, 1092), bool], Tensor[(2, 6, 9), float64], Tensor[(15, 15, 12), float64], Tensor[(10, 1, 7), uint32], uint32, Tensor[(700), int64]) {
  @func_2025(%var_2027, %var_2028) /* ty=(Tensor[(15, 15, 12), float64], Tensor[(350, 2), float32], Tensor[(108), float32], Tensor[(1, 1092), bool], Tensor[(2, 6, 9), float64], Tensor[(15, 15, 12), float64], Tensor[(10, 1, 7), uint32], uint32, Tensor[(700), int64]) */
}

def @func_753(%var_749: Tensor[(13, 3, 3), float32], %var_750: Tensor[(13, 3, 3), float32], %var_751: uint8, %var_752: Tensor[(560, 2), uint8]) -> (Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) {
  @func_747(%var_749, %var_750, %var_751, %var_752) /* ty=(Tensor[(13, 3, 3), float32], uint8, Tensor[(560, 2), uint8], Tensor[(1120), int16]) */
}

def @func_3810() -> (Tensor[(700), int64], Tensor[(2, 6, 9), float64]) {
  %267 = fn () -> (Tensor[(700), int64], Tensor[(2, 6, 9), float64]) {
    %263 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
    %264 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
    %265 = %263.1;
    %266 = %264.1;
    (%265, %266)
  };
  %267() /* ty=(Tensor[(700), int64], Tensor[(2, 6, 9), float64]) */
}

def @func_2938(%var_2936: Tensor[(5, 6, 1), int32]) -> (Tensor[(5, 6, ?), int32],) {
  @func_2935(%var_2936) /* ty=(Tensor[(5, 6, ?), int32],) */
}

def @func_1963() -> Tensor[(2, 6, 9), float64] {
  %268 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %268.0
}

def @func_5511() -> (Tensor[(2, 6, 9), uint64], Tensor[(960), float64], Tensor[(15), float64]) {
  %269 = cast(meta[relay.Constant][16] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %270 = reshape(%269, newshape=[15]) /* ty=Tensor[(15), float64] */;
  %271 = @func_5202(%270) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) */;
  %272 = @func_4055() /* ty=Tensor[(2, 6, 9), uint64] */;
  %273 = %271.1;
  (%272, %273, meta[relay.Constant][16] /* ty=Tensor[(15), float64] */)
}

def @func_4672() -> (Tensor[(2, 6, 9), float32],) {
  %276 = fn () -> (Tensor[(2, 6, 9), float32],) {
    %274 = @func_4521() /* ty=(Tensor[(2, 6, 9), float32],) */;
    %275 = %274.0;
    (%275,)
  };
  %276() /* ty=(Tensor[(2, 6, 9), float32],) */
}

def @func_5800(%var_5796: Tensor[(5, 15, 15), uint64], %var_5797: Tensor[(5, 15, 15), uint64], %var_5798: Tensor[(700), float32], %var_5799: Tensor[(3, 36), float32]) -> (Tensor[(5, 15, 15), uint64], Tensor[(700), uint64], Tensor[(700), float32], Tensor[(3, 36), float32], Tensor[(7, 156), bool], Tensor[(2, 6, 9), float64]) {
  %292 = fn (%var_5737: Tensor[(5, 15, 15), uint64], %var_5738: Tensor[(5, 15, 15), uint64], %var_5750: Tensor[(700), float32], %var_5751: Tensor[(3, 36), float32]) -> (Tensor[(5, 15, 15), uint64], Tensor[(700), uint64], Tensor[(700), float32], Tensor[(3, 36), float32], Tensor[(7, 156), bool], Tensor[(2, 6, 9), float64]) {
    %277 = cast(%var_5738, dtype="uint64") /* ty=Tensor[(5, 15, 15), uint64] */;
    %278 = shape_of(%var_5737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%var_5737, dtype="uint64") /* ty=Tensor[(5, 15, 15), uint64] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %281 = cast(%var_5750, dtype="float32") /* ty=Tensor[(700), float32] */;
    %282 = cast(%var_5751, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
    %283 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 156), bool] */, dtype="bool") /* ty=Tensor[(7, 156), bool] */;
    %284 = reshape(%281, newshape=[700]) /* ty=Tensor[(700), float32] */;
    %285 = reshape(%282, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %286 = reshape(%283, newshape=[1092]) /* ty=Tensor[(1092), bool] */;
    %287 = @func_1473(%284, %285, %286) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */;
    %288 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %289 = bitwise_and(%279, %280) /* ty=Tensor[(5, 15, 15), uint64] */;
    %290 = %287.4;
    %291 = %288.0;
    (%289, %290, %var_5750, %var_5751, meta[relay.Constant][17] /* ty=Tensor[(7, 156), bool] */, %291)
  };
  %292(%var_5796, %var_5797, %var_5798, %var_5799) /* ty=(Tensor[(5, 15, 15), uint64], Tensor[(700), uint64], Tensor[(700), float32], Tensor[(3, 36), float32], Tensor[(7, 156), bool], Tensor[(2, 6, 9), float64]) */
}

def @func_1183(%var_1181: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), float32], Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  @func_1180(%var_1181) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), float32], Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */
}

def @func_490(%var_488: Tensor[(2, 6, 9), float32], %var_489: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) {
  %329 = fn (%var_428: Tensor[(2, 6, 9), float32], %var_484: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) {
    %293 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    %294 = cast(%293, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %295 = asin(%294) /* ty=Tensor[(2, 6, 9), float32] */;
    %296 = cast(%293, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%295, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %300 = cast(%var_428, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
    %301 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%295, dtype="uint8") /* ty=Tensor[(2, 6, 9), uint8] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %304 = add(%302, %303) /* ty=Tensor[(2, 6, 9), uint8] */;
    %305 = cast(%304, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %306 = cosh(%305) /* ty=Tensor[(2, 6, 9), float64] */;
    %307 = cast(%304, dtype="int8") /* ty=Tensor[(2, 6, 9), int8] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="int8") /* ty=Tensor[(2, 6, 9), int8] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %311 = bitwise_and(%309, %310) /* ty=Tensor[(2, 6, 9), int8] */;
    %312 = cast(%311, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %313 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%306, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %316 = not_equal(%314, %315) /* ty=Tensor[(2, 6, 9), bool] */;
    %317 = cast(%311, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%316, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %321 = cast(meta[relay.Constant][18] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %322 = cast(%var_484, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %323 = reshape(%321, newshape=[]) /* ty=uint8 */;
    %324 = reshape(%322, newshape=[10, 8, 14]) /* ty=Tensor[(10, 8, 14), uint8] */;
    %325 = @func_108(%323, %324) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) */;
    %326 = right_shift(%298, %299) /* ty=Tensor[(2, 6, 9), uint8] */;
    %327 = logical_and(%319, %320) /* ty=Tensor[(2, 6, 9), bool] */;
    %328 = %325.1;
    (%326, %327, %328, meta[relay.Constant][18] /* ty=uint8 */, %var_484)
  };
  %329(%var_488, %var_489) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */
}

def @func_1390(%var_1388: Tensor[(117), float32], %var_1389: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) {
  @func_1386(%var_1388, %var_1389) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */
}

def @func_2935(%var_2931: Tensor[(5, 6, 1), int32]) -> (Tensor[(5, 6, ?), int32],) {
  %330 = cast(%var_2931, dtype="int32") /* ty=Tensor[(5, 6, 1), int32] */;
  %331 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 1), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 1), int32] */, dtype="int32") /* ty=Tensor[(5, 6, 1), int32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %334 = add(%332, %333) /* ty=Tensor[(5, 6, ?), int32] */;
  (%334,)
}

def @func_1529(%var_1527: uint32) -> Tensor[(10, 1, 7), uint32] {
  @func_1526(%var_1527) /* ty=Tensor[(10, 1, 7), uint32] */
}

def @func_3729(%var_3727: Tensor[(14, 7, 14), bool]) -> (Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) {
  @func_3726(%var_3727) /* ty=(Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) */
}

def @func_3981() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) {
  %335 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %336 = @func_3675() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */;
  %337 = %336.1;
  %338 = @func_3539() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) */;
  %339 = %338.0;
  %340 = cast(%339, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %341 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%337, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %344 = %335.0;
  %345 = less_equal(%342, %343) /* ty=Tensor[(2, 6, 9), bool] */;
  (%344, %345)
}

def @func_3172() -> (Tensor[(2, 6, 9), float64],) {
  %347 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %346 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    (%346,)
  };
  %347() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_3462(%var_3460: Tensor[(6, 1, 10), float64]) -> (Tensor[(6, 1, 10), float32], Tensor[(7, 11, 9), float32], Tensor[(231, 3), float64]) {
  @func_3459(%var_3460) /* ty=(Tensor[(6, 1, 10), float32], Tensor[(7, 11, 9), float32], Tensor[(231, 3), float64]) */
}

def @func_5378() -> (Tensor[(2, 6, 9), float64],) {
  %348 = @func_4228() /* ty=Tensor[(2, 6, 9), float64] */;
  (%348,)
}

def @func_5045() -> (Tensor[(2, 6, 9), float64],) {
  %350 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %349 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
    (%349,)
  };
  %350() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_5915() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  @func_5913() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */
}

def @func_2781(%var_2650: Tensor[(1120), uint8], %var_2690: Tensor[(700), int64], %var_2716: Tensor[(624, 1), int64], %var_2735: Tensor[(5, 4, 8), float32]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(4, 280), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624, 1), int64], Tensor[(5, 4, 8), float32], Tensor[(5, 4, 8), bool], Tensor[(700), int64], Tensor[(5, 4, 8), float64], Tensor[(5, 4, 8), float32]) {
  %351 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %352 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %353 = reshape(%352, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %354 = @func_644(%353) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */;
  %355 = @func_2435() /* ty=(Tensor[(2, 6, 9), float32],) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %358 = cast(%356, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %359 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %360 = reshape(%357, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %361 = reshape(%358, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %362 = reshape(%359, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %363 = @func_571(%360, %361, %362) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %364 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %365 = reshape(%364, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %366 = @func_1672(%365) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) */;
  %367 = cast(%var_2690, dtype="int64") /* ty=Tensor[(700), int64] */;
  %368 = reshape(%367, newshape=[700]) /* ty=Tensor[(700), int64] */;
  %369 = @func_2386(%368) /* ty=(Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) */;
  %370 = cast(%var_2716, dtype="int64") /* ty=Tensor[(624, 1), int64] */;
  %371 = reshape(%370, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %372 = @func_2250(%371) /* ty=(Tensor[(13, 12, 4), int64],) */;
  %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %374 = log10(%373) /* ty=Tensor[(5, 4, 8), float64] */;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %376 = acos(%375) /* ty=Tensor[(5, 4, 8), float32] */;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %378 = exp(%377) /* ty=Tensor[(5, 4, 8), float64] */;
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %380 = asinh(%379) /* ty=Tensor[(5, 4, 8), float64] */;
  %381 = cast(%380, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %382 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%378, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = equal(%383, %384) /* ty=Tensor[(5, 4, 8), bool] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %387 = cast(%var_2735, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %388 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%376, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %392 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %393 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = not_equal(%394, %395) /* ty=Tensor[(5, 4, 8), bool] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %398 = rsqrt(%397) /* ty=Tensor[(5, 4, 8), float64] */;
  %399 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 4, 8), uint64] */, dtype="uint16") /* ty=Tensor[(5, 4, 8), uint16] */;
  %400 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%374, dtype="uint16") /* ty=Tensor[(5, 4, 8), uint16] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %403 = multiply(%401, %402) /* ty=Tensor[(5, 4, 8), uint16] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %405 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%398, dtype="float64") /* ty=Tensor[(5, 4, 8), float64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %408 = cast(%374, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %409 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%378, dtype="bool") /* ty=Tensor[(5, 4, 8), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %412 = logical_and(%410, %411) /* ty=Tensor[(5, 4, 8), bool] */;
  %413 = cast(%398, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float32") /* ty=Tensor[(5, 4, 8), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = %351.1;
  %418 = %354.0;
  %419 = %363.4;
  %420 = %366.3;
  %421 = %369.1;
  %422 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %423 = %372.0;
  %424 = sinh(%386) /* ty=Tensor[(5, 4, 8), float32] */;
  %425 = logical_or(%389, %390) /* ty=Tensor[(5, 4, 8), bool] */;
  %426 = %391.0;
  %427 = divide(%406, %407) /* ty=Tensor[(5, 4, 8), float64] */;
  %428 = floor_divide(%415, %416) /* ty=Tensor[(5, 4, 8), float32] */;
  (%417, %418, %var_2650, %356, %419, %420, %421, %var_2690, %422, %423, %var_2716, %424, %425, %426, %427, %428)
}

def @func_2607() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %429 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
  %430 = @func_2545() /* ty=Tensor[(2, 6, 9), float64] */;
  (%429, %430)
}

def @func_1566(%var_1565: Tensor[(7, 11, 9), float32]) -> Tensor[(7, 11, 9), float32] {
  %432 = fn (%var_1561: Tensor[(7, 11, 9), float32]) -> Tensor[(7, 11, 9), float32] {
    %431 = cast(%var_1561, dtype="float32") /* ty=Tensor[(7, 11, 9), float32] */;
    exp(%431) /* ty=Tensor[(7, 11, 9), float32] */
  };
  %432(%var_1565) /* ty=Tensor[(7, 11, 9), float32] */
}

def @func_213(%var_187: Tensor[(6, 3, 6), bool]) -> (Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  %433 = cast(%var_187, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %434 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = logical_and(%435, %436) /* ty=Tensor[(6, 3, 6), bool] */;
  %438 = cast(%437, dtype="uint64") /* ty=Tensor[(6, 3, 6), uint64] */;
  %439 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="uint64") /* ty=Tensor[(6, 3, 6), uint64] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %442 = cast(%var_187, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %443 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 3, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %446 = bitwise_and(%440, %441) /* ty=Tensor[(6, 3, 6), uint64] */;
  %447 = floor_mod(%444, %445) /* ty=Tensor[(6, 3, 6), float64] */;
  (%446, %447)
}

def @func_4212(%var_4209: Tensor[(2, 6, 9), float64], %var_4210: Tensor[(8, 140), uint8], %var_4211: Tensor[(1092), bool]) -> (Tensor[(2, 6, 9), bool], Tensor[(108), float64], Tensor[(8, 140), uint16], Tensor[(10, 8, 14), float32], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
  %473 = fn (%var_4168: Tensor[(2, 6, 9), float64], %var_4178: Tensor[(8, 140), uint8], %var_4196: Tensor[(1092), bool]) -> (Tensor[(2, 6, 9), bool], Tensor[(108), float64], Tensor[(8, 140), uint16], Tensor[(10, 8, 14), float32], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
    %448 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
    %449 = cast(%var_4168, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%448, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %453 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 140), uint8] */, dtype="uint8") /* ty=Tensor[(8, 140), uint8] */;
    %454 = reshape(%453, newshape=[560, 2]) /* ty=Tensor[(560, 2), uint8] */;
    %455 = @func_2874(%454) /* ty=(Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) */;
    %456 = cast(%var_4178, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
    %457 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 140), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 140), uint8] */, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %460 = cast(%448, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %461 = cast(%var_4178, dtype="uint8") /* ty=Tensor[(8, 140), uint8] */;
    %462 = reshape(%460, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
    %463 = reshape(%461, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %464 = @func_487(%462, %463) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
    %465 = cast(%var_4196, dtype="bool") /* ty=Tensor[(1092), bool] */;
    %466 = reshape(%465, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
    %467 = @func_912(%466) /* ty=(Tensor[(13, 14, 6), bool],) */;
    %468 = equal(%451, %452) /* ty=Tensor[(2, 6, 9), bool] */;
    %469 = %455.2;
    %470 = bitwise_or(%458, %459) /* ty=Tensor[(8, 140), uint16] */;
    %471 = %464.2;
    %472 = %467.0;
    (%468, %469, %470, %471, %472, %var_4196)
  };
  %473(%var_4209, %var_4210, %var_4211) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(108), float64], Tensor[(8, 140), uint16], Tensor[(10, 8, 14), float32], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */
}

def @func_1692() -> (Tensor[(2, 6, 9), float64],) {
  @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_4787(%var_4785: Tensor[(5, 3), float64]) -> (Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) {
  @func_4784(%var_4785) /* ty=(Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) */
}

def @func_4056() -> Tensor[(2, 6, 9), uint64] {
  %481 = fn () -> Tensor[(2, 6, 9), uint64] {
    %474 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
    %475 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %476 = %475.0;
    %477 = cast(%476, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
    %478 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%474, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%479, %480) /* ty=Tensor[(2, 6, 9), uint64] */
  };
  %481() /* ty=Tensor[(2, 6, 9), uint64] */
}

def @func_5204(%var_5203: Tensor[(15), float64]) -> (Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) {
  %487 = fn (%var_5193: Tensor[(15), float64]) -> (Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) {
    %482 = cast(%var_5193, dtype="float64") /* ty=Tensor[(15), float64] */;
    %483 = reshape(%482, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
    %484 = @func_4784(%483) /* ty=(Tensor[(5, 3), float64], Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], Tensor[(15, 16, 4), float64], Tensor[(960), float64], Tensor[(624), int64], Tensor[(8, 78), int64], Tensor[(6, 11), float32], Tensor[(66), float32]) */;
    %485 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
    %486 = %484.4;
    (%485, %486, %var_5193)
  };
  %487(%var_5203) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(960), float64], Tensor[(15), float64]) */
}

def @func_2340(%var_2335: Tensor[(15, 16, 4), float64]) -> Tensor[(15, 16, 4), float64] {
  %488 = cast(%var_2335, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  tan(%488) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_4530() -> (Tensor[(2, 6, 9), float64],) {
  %490 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %489 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
    (%489,)
  };
  %490() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_6001() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %491 = @func_5218() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */;
  %492 = %491.1;
  %493 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%492, %493)
}

def @func_3013() -> Tensor[(14, 7, 14), bool] {
  %494 = @func_2212() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %494.0
}

def @func_1801(%var_1786: Tensor[(11, 4, 3), float32]) -> (Tensor[(11, 4, 3), float32],) {
  %495 = cast(%var_1786, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %496 = log2(%495) /* ty=Tensor[(11, 4, 3), float32] */;
  (%496,)
}

def @func_3624(%var_3622: Tensor[(11, 13, 8), float64], %var_3623: Tensor[(1120), uint8]) -> (Tensor[(11, 13, 8), float64], Tensor[(117), float32], Tensor[(39, 3), float32], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %509 = fn (%var_3601: Tensor[(11, 13, 8), float64], %var_3608: Tensor[(1120), uint8]) -> (Tensor[(11, 13, 8), float64], Tensor[(117), float32], Tensor[(39, 3), float32], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
    %497 = cast(%var_3601, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
    %498 = cast(meta[relay.Constant][24] /* ty=Tensor[(39, 3), float32] */, dtype="float32") /* ty=Tensor[(39, 3), float32] */;
    %499 = cast(%var_3608, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %500 = reshape(%498, newshape=[117]) /* ty=Tensor[(117), float32] */;
    %501 = reshape(%499, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %502 = @func_1386(%500, %501) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
    %503 = cast(%var_3608, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %504 = reshape(%503, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %505 = @func_2293(%504) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */;
    %506 = log(%497) /* ty=Tensor[(11, 13, 8), float64] */;
    %507 = %502.3;
    %508 = %505.5;
    (%506, %507, meta[relay.Constant][24] /* ty=Tensor[(39, 3), float32] */, %var_3608, %508)
  };
  %509(%var_3622, %var_3623) /* ty=(Tensor[(11, 13, 8), float64], Tensor[(117), float32], Tensor[(39, 3), float32], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */
}

def @func_5117(%var_5115: Tensor[(14, 3, 7), float32], %var_5116: Tensor[(2, 560), uint8]) -> (Tensor[(14, 3, 7), float32], Tensor[(700), float64], Tensor[(2, 560), uint8], Tensor[(2, 6, 9), float64]) {
  @func_5113(%var_5115, %var_5116) /* ty=(Tensor[(14, 3, 7), float32], Tensor[(700), float64], Tensor[(2, 560), uint8], Tensor[(2, 6, 9), float64]) */
}

def @func_3541() -> (Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) {
  @func_3539() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) */
}

def @func_877() -> (Tensor[(2, 6, 9), float64],) {
  @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_3233(%var_3231: Tensor[(117), float32], %var_3232: Tensor[(1120), uint8]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(117), float32], Tensor[(1120), uint8]) {
  %517 = fn (%var_3195: Tensor[(117), float32], %var_3196: Tensor[(1120), uint8]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(117), float32], Tensor[(1120), uint8]) {
    %510 = cast(%var_3195, dtype="float32") /* ty=Tensor[(117), float32] */;
    %511 = cast(%var_3196, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %512 = reshape(%510, newshape=[117]) /* ty=Tensor[(117), float32] */;
    %513 = reshape(%511, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %514 = @func_1386(%512, %513) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
    %515 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
    %516 = %514.0;
    (%515, %516, %var_3195, %var_3196)
  };
  %517(%var_3231, %var_3232) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(117), float32], Tensor[(1120), uint8]) */
}

def @func_2787(%var_2783: Tensor[(1120), uint8], %var_2784: Tensor[(700), int64], %var_2785: Tensor[(624, 1), int64], %var_2786: Tensor[(5, 4, 8), float32]) -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(4, 280), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624, 1), int64], Tensor[(5, 4, 8), float32], Tensor[(5, 4, 8), bool], Tensor[(700), int64], Tensor[(5, 4, 8), float64], Tensor[(5, 4, 8), float32]) {
  @func_2781(%var_2783, %var_2784, %var_2785, %var_2786) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(4, 280), uint8], Tensor[(4, 280), uint8], Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624, 1), int64], Tensor[(5, 4, 8), float32], Tensor[(5, 4, 8), bool], Tensor[(700), int64], Tensor[(5, 4, 8), float64], Tensor[(5, 4, 8), float32]) */
}

def @func_5513() -> (Tensor[(2, 6, 9), uint64], Tensor[(960), float64], Tensor[(15), float64]) {
  @func_5511() /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(960), float64], Tensor[(15), float64]) */
}

def @func_2876(%var_2875: Tensor[(560, 2), uint8]) -> (Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) {
  %528 = fn (%var_2872: Tensor[(560, 2), uint8]) -> (Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) {
    %518 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
    %519 = cast(meta[relay.Constant][25] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %520 = cast(meta[relay.Constant][25] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %521 = cast(%var_2872, dtype="uint8") /* ty=Tensor[(560, 2), uint8] */;
    %522 = reshape(%519, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %523 = reshape(%520, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %524 = reshape(%521, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
    %525 = @func_571(%522, %523, %524) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
    %526 = %518.0;
    %527 = %525.3;
    (%526, %527, meta[relay.Constant][25] /* ty=Tensor[(108), float64] */, %var_2872)
  };
  %528(%var_2875) /* ty=(Tensor[(14, 7, 14), bool], uint8, Tensor[(108), float64], Tensor[(560, 2), uint8]) */
}

def @func_2388(%var_2387: Tensor[(700), int64]) -> (Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) {
  %546 = fn (%var_2363: Tensor[(700), int64]) -> (Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) {
    %529 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
    %530 = %529.1;
    %531 = cast(%var_2363, dtype="uint8") /* ty=Tensor[(700), uint8] */;
    %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(1), int32] */;
    %533 = cast(%530, dtype="uint8") /* ty=Tensor[(700), uint8] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %535 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint8] */, dtype="uint8") /* ty=Tensor[(2, 560), uint8] */;
    %536 = reshape(%535, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %537 = @func_1062(%536) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
    %538 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092), bool] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
    %539 = reshape(%538, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), bool] */;
    %540 = @func_912(%539) /* ty=(Tensor[(13, 14, 6), bool],) */;
    %541 = %540.0;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(13, 14, 6), float32] */;
    %543 = bitwise_or(%533, %534) /* ty=Tensor[(700), uint8] */;
    %544 = %537.1;
    %545 = atan(%542) /* ty=Tensor[(13, 14, 6), float32] */;
    (%543, %544, meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(1092), bool] */, %545)
  };
  %546(%var_2387) /* ty=(Tensor[(700), uint8], Tensor[(2, 6, 9), float64], Tensor[(2, 560), uint8], Tensor[(1092), bool], Tensor[(13, 14, 6), float32]) */
}

def @func_5380() -> (Tensor[(2, 6, 9), float64],) {
  @func_5378() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_216(%var_214: Tensor[(6, 3, 6), bool]) -> (Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) {
  @func_213(%var_214) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */
}

def @func_1690() -> (Tensor[(2, 6, 9), float64],) {
  %547 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %548 = %547.0;
  (%548,)
}

def @func_3459(%var_3428: Tensor[(6, 1, 10), float64]) -> (Tensor[(6, 1, 10), float32], Tensor[(7, 11, 9), float32], Tensor[(231, 3), float64]) {
  %549 = cast(%var_3428, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
  %550 = log10(%549) /* ty=Tensor[(6, 1, 10), float64] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(6, 1, 10), float32] */;
  %552 = cast(meta[relay.Constant][28] /* ty=Tensor[(231, 3), float32] */, dtype="float32") /* ty=Tensor[(231, 3), float32] */;
  %553 = reshape(%552, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %554 = cast(meta[relay.Constant][28] /* ty=Tensor[(231, 3), float32] */, dtype="float64") /* ty=Tensor[(231, 3), float64] */;
  %555 = acos(%551) /* ty=Tensor[(6, 1, 10), float32] */;
  %556 = @func_1564(%553) /* ty=Tensor[(7, 11, 9), float32] */;
  %557 = rsqrt(%554) /* ty=Tensor[(231, 3), float64] */;
  (%555, %556, %557)
}

def @func_3479(%var_3477: int64, %var_3478: Tensor[(12, 14, 1), int64]) -> (Tensor[(12, 14, 1), bool],) {
  @func_3475(%var_3477, %var_3478) /* ty=(Tensor[(12, 14, 1), bool],) */
}

def @func_2136() -> (Tensor[(14, 7, 14), bool],) {
  %560 = fn () -> (Tensor[(14, 7, 14), bool],) {
    %558 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(14, 7, 14), bool],) */
}

def @func_1478(%var_1475: Tensor[(700), float32], %var_1476: Tensor[(108), float32], %var_1477: Tensor[(1092), bool]) -> (uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) {
  @func_1473(%var_1475, %var_1476, %var_1477) /* ty=(uint8, Tensor[(108), float32], Tensor[(1120), uint8], Tensor[(2, 6, 9), float32], Tensor[(700), uint64], Tensor[(13, 14, 6), bool], Tensor[(1092), bool]) */
}

def @func_3539() -> (Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), bool]) {
  %561 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %562 = @func_3354() /* ty=Tensor[(2, 6, 9), float64] */;
  %563 = %561.1;
  (%562, %563)
}

def @func_1080(%var_1078: Tensor[(7, 10, 10), float64]) -> Tensor[(7, 10, 10), float64] {
  @func_1077(%var_1078) /* ty=Tensor[(7, 10, 10), float64] */
}

def @func_3676() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %569 = fn () -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
    %564 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
    %565 = %564.0;
    %566 = cast(%565, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %567 = sinh(%566) /* ty=Tensor[(2, 6, 9), float64] */;
    %568 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    (%567, %568)
  };
  %569() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */
}

def @func_2925() -> Tensor[(700), float32] {
  %570 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(700), float32] */;
  cos(%572) /* ty=Tensor[(700), float32] */
}

def @func_2546() -> Tensor[(2, 6, 9), float64] {
  %574 = fn () -> Tensor[(2, 6, 9), float64] {
    %573 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %573.0
  };
  %574() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_4953(%var_4950: Tensor[(700), int64], %var_4951: Tensor[(132), float32], %var_4952: Tensor[(3, 36), float64]) -> (Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(700), float64], Tensor[(2, 6, 9), bool], Tensor[(14, 7, 14), bool], Tensor[(11, 4, 3), int32], Tensor[(11, 4, 3), float32], Tensor[(3, 36), bool]) {
  @func_4948(%var_4950, %var_4951, %var_4952) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(700), float64], Tensor[(2, 6, 9), bool], Tensor[(14, 7, 14), bool], Tensor[(11, 4, 3), int32], Tensor[(11, 4, 3), float32], Tensor[(3, 36), bool]) */
}

def @func_5629() -> (Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  @func_5627() /* ty=(Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */
}

def @func_5113(%var_5098: Tensor[(14, 3, 7), float32], %var_5106: Tensor[(2, 560), uint8]) -> (Tensor[(14, 3, 7), float32], Tensor[(700), float64], Tensor[(2, 560), uint8], Tensor[(2, 6, 9), float64]) {
  %575 = cast(%var_5098, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %576 = cast(%var_5106, dtype="uint8") /* ty=Tensor[(2, 560), uint8] */;
  %577 = reshape(%576, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %578 = @func_1672(%577) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) */;
  %579 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %580 = tan(%575) /* ty=Tensor[(14, 3, 7), float32] */;
  %581 = %578.2;
  %582 = %579.1;
  (%580, %581, %var_5106, %582)
}

def @func_875() -> (Tensor[(2, 6, 9), float64],) {
  %583 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %585 = atan(%584) /* ty=Tensor[(2, 6, 9), float64] */;
  (%585,)
}

def @func_4714() -> (Tensor[(2, 6, 9), float64],) {
  %586 = @func_4378() /* ty=Tensor[(2, 6, 9), float64] */;
  (%586,)
}

def @func_6053() -> (Tensor[(2, 6, 9), float64],) {
  %589 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %587 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %588 = %587.0;
    (%588,)
  };
  %589() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_646(%var_645: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %606 = fn (%var_639: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
    %590 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    %591 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(%590, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %595 = less(%593, %594) /* ty=Tensor[(2, 6, 9), bool] */;
    %596 = cast(%595, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %597 = cast(%var_639, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %598 = reshape(%596, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
    %599 = reshape(%597, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %600 = @func_487(%598, %599) /* ty=(Tensor[(2, 6, 9), uint8], Tensor[(2, 6, 9), bool], Tensor[(10, 8, 14), float32], uint8, Tensor[(1120), uint8]) */;
    %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %602 = reshape(%601, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
    %603 = @func_213(%602) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
    %604 = %600.0;
    %605 = %603.0;
    (%595, %604, %var_639, %605)
  };
  %606(%var_645) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */
}

def @func_1064(%var_1063: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
  %622 = fn (%var_1057: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
    %607 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %608 = %607.0;
    %609 = cast(%608, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %610 = cos(%609) /* ty=Tensor[(2, 6, 9), float64] */;
    %611 = cast(%608, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%610, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %615 = cast(meta[relay.Constant][30] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %616 = cast(%var_1057, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %617 = reshape(%615, newshape=[]) /* ty=uint8 */;
    %618 = reshape(%616, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %619 = @func_387(%617, %618) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
    %620 = mod(%613, %614) /* ty=Tensor[(2, 6, 9), float32] */;
    %621 = %619.0;
    (%620, %621, meta[relay.Constant][30] /* ty=uint8 */, %var_1057)
  };
  %622(%var_1063) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */
}

def @func_6076() -> Tensor[(2, 6, 9), float64] {
  %623 = fn () -> Tensor[(2, 6, 9), float64] {
    @func_1963() /* ty=Tensor[(2, 6, 9), float64] */
  };
  %623() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_1526(%var_1507: uint32) -> Tensor[(10, 1, 7), uint32] {
  %624 = cast(%var_1507, dtype="uint32") /* ty=uint32 */;
  %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 1, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 1, 7), uint32] */;
  left_shift(%624, %625) /* ty=Tensor[(10, 1, 7), uint32] */
}

def @func_3567() -> (Tensor[(2, 6, 9), float64],) {
  %627 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %626 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    (%626,)
  };
  %627() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_2295(%var_2294: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
  %641 = fn (%var_2274: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) {
    %628 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %629 = cast(meta[relay.Constant][32] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
    %630 = reshape(%629, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
    %631 = cast(%var_2274, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %632 = reshape(%631, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %633 = @func_1062(%632) /* ty=(Tensor[(2, 6, 9), float32], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */;
    %634 = %628.0;
    %635 = cast(%634, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
    %636 = reshape(%635, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), bool] */;
    %637 = @func_213(%636) /* ty=(Tensor[(6, 3, 6), uint64], Tensor[(6, 3, 6), float64]) */;
    %638 = @func_1564(%630) /* ty=Tensor[(7, 11, 9), float32] */;
    %639 = %633.3;
    %640 = %637.0;
    (%634, %638, meta[relay.Constant][32] /* ty=Tensor[(693), float32] */, %639, %var_2274, %640)
  };
  %641(%var_2294) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 11, 9), float32], Tensor[(693), float32], Tensor[(1120), uint8], Tensor[(1120), uint8], Tensor[(6, 3, 6), uint64]) */
}

def @func_2213() -> (Tensor[(14, 7, 14), bool],) {
  %644 = fn () -> (Tensor[(14, 7, 14), bool],) {
    %642 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
    %643 = %642.1;
    (%643,)
  };
  %644() /* ty=(Tensor[(14, 7, 14), bool],) */
}

def @func_576(%var_573: Tensor[(2, 6, 9), float64], %var_574: Tensor[(2, 6, 9), float64], %var_575: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) {
  @func_571(%var_573, %var_574, %var_575) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */
}

def @func_4229() -> Tensor[(2, 6, 9), float64] {
  %646 = fn () -> Tensor[(2, 6, 9), float64] {
    %645 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %645.0
  };
  %646() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_5356(%var_5354: uint8, %var_5355: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
  %654 = fn (%var_5301: uint8, %var_5302: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) {
    %647 = cast(%var_5301, dtype="uint8") /* ty=uint8 */;
    %648 = cast(%var_5302, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %649 = reshape(%647, newshape=[]) /* ty=uint8 */;
    %650 = reshape(%648, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
    %651 = @func_387(%649, %650) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
    %652 = @func_1963() /* ty=Tensor[(2, 6, 9), float64] */;
    %653 = %651.0;
    (%652, %653, %var_5301, %var_5302)
  };
  %654(%var_5354, %var_5355) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], uint8, Tensor[(1120), uint8]) */
}

def @func_5521() -> (Tensor[(2, 6, 9), float64],) {
  %657 = fn () -> (Tensor[(2, 6, 9), float64],) {
    %655 = @func_5378() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %656 = %655.0;
    (%656,)
  };
  %657() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_571(%var_514: Tensor[(2, 6, 9), float64], %var_540: Tensor[(2, 6, 9), float64], %var_562: Tensor[(4, 280), uint8]) -> (Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) {
  %658 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  %659 = cast(%var_514, dtype="uint16") /* ty=Tensor[(2, 6, 9), uint16] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="uint16") /* ty=Tensor[(2, 6, 9), uint16] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %663 = logical_xor(%661, %662) /* ty=Tensor[(2, 6, 9), uint16] */;
  %664 = cast(%663, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %665 = shape_of(%var_514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_514, dtype="bool") /* ty=Tensor[(2, 6, 9), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = cast(%var_540, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %669 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%658, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %672 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %673 = cast(%var_562, dtype="uint8") /* ty=Tensor[(4, 280), uint8] */;
  %674 = reshape(%672, newshape=[]) /* ty=uint8 */;
  %675 = reshape(%673, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %676 = @func_387(%674, %675) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %677 = greater_equal(%666, %667) /* ty=Tensor[(2, 6, 9), bool] */;
  %678 = floor_mod(%670, %671) /* ty=Tensor[(2, 6, 9), float64] */;
  %679 = %676.1;
  (%677, %678, %679, meta[relay.Constant][33] /* ty=uint8 */, %var_562)
}

def @func_2252(%var_2251: Tensor[(13, 12, 4), int64]) -> (Tensor[(13, 12, 4), int64],) {
  %685 = fn (%var_2243: Tensor[(13, 12, 4), int64]) -> (Tensor[(13, 12, 4), int64],) {
    %680 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 12, 4), int64] */, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
    %681 = shape_of(%var_2243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%var_2243, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %684 = subtract(%682, %683) /* ty=Tensor[(13, 12, 4), int64] */;
    (%684,)
  };
  %685(%var_2251) /* ty=(Tensor[(13, 12, 4), int64],) */
}

def @func_4648() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) {
  %686 = cast(meta[relay.Constant][35] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %687 = reshape(%686, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %688 = @func_4295(%687) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64], Tensor[(10, 8, 14), float32], Tensor[(1120), uint8]) */;
  %689 = @func_2825() /* ty=Tensor[(14, 7, 14), bool] */;
  %690 = %688.0;
  (%689, %690, meta[relay.Constant][35] /* ty=Tensor[(1120), uint8] */)
}

def @func_4117(%var_4116: Tensor[(700), float32]) -> (Tensor[(700), float64],) {
  %699 = fn (%var_4104: Tensor[(700), float32]) -> (Tensor[(700), float64],) {
    %691 = @func_2925() /* ty=Tensor[(700), float32] */;
    %692 = cast(%var_4104, dtype="float32") /* ty=Tensor[(700), float32] */;
    %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(1), int32] */;
    %694 = cast(%691, dtype="float32") /* ty=Tensor[(700), float32] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), float32] */;
    %696 = mod(%694, %695) /* ty=Tensor[(700), float32] */;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(700), float64] */;
    %698 = tan(%697) /* ty=Tensor[(700), float64] */;
    (%698,)
  };
  %699(%var_4116) /* ty=(Tensor[(700), float64],) */
}

def @func_1804(%var_1802: Tensor[(11, 4, 3), float32]) -> (Tensor[(11, 4, 3), float32],) {
  @func_1801(%var_1802) /* ty=(Tensor[(11, 4, 3), float32],) */
}

def @func_4380() -> Tensor[(2, 6, 9), float64] {
  @func_4378() /* ty=Tensor[(2, 6, 9), float64] */
}

def @func_4314() -> (Tensor[(14, 7, 14), bool], Tensor[(700), int64]) {
  %700 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
  %701 = @func_3111() /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float64]) */;
  %702 = %700.0;
  %703 = %701.0;
  (%702, %703)
}

def @func_1077(%var_1066: Tensor[(7, 10, 10), float64]) -> Tensor[(7, 10, 10), float64] {
  %704 = cast(%var_1066, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  cos(%704) /* ty=Tensor[(7, 10, 10), float64] */
}

def @func_4948(%var_4892: Tensor[(700), int64], %var_4912: Tensor[(132), float32], %var_4933: Tensor[(3, 36), float64]) -> (Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(700), float64], Tensor[(2, 6, 9), bool], Tensor[(14, 7, 14), bool], Tensor[(11, 4, 3), int32], Tensor[(11, 4, 3), float32], Tensor[(3, 36), bool]) {
  %705 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %706 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %708 = reshape(%705, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %709 = reshape(%706, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
  %710 = reshape(%707, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
  %711 = @func_571(%708, %709, %710) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
  %712 = @func_2311() /* ty=(Tensor[(700), int64],) */;
  %713 = %712.0;
  %714 = cast(%var_4892, dtype="float64") /* ty=Tensor[(700), float64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(1), int32] */;
  %716 = cast(%713, dtype="float64") /* ty=Tensor[(700), float64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?), float64] */;
  %718 = @func_3981() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), bool]) */;
  %719 = cast(%var_4912, dtype="float32") /* ty=Tensor[(132), float32] */;
  %720 = reshape(%719, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), float32] */;
  %721 = @func_1801(%720) /* ty=(Tensor[(11, 4, 3), float32],) */;
  %722 = %721.0;
  %723 = cast(%var_4912, dtype="int32") /* ty=Tensor[(132), int32] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="int32") /* ty=Tensor[(11, 4, 3), int32] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %727 = cast(%722, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %728 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %729 = atan(%728) /* ty=Tensor[(3, 36), float64] */;
  %730 = cast(%var_4933, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
  %732 = cast(%729, dtype="float32") /* ty=Tensor[(3, 36), float32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %734 = divide(%732, %733) /* ty=Tensor[(3, 36), float32] */;
  %735 = cast(%734, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %736 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
  %737 = cast(%729, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %739 = %711.0;
  %740 = floor_divide(%716, %717) /* ty=Tensor[(700), float64] */;
  %741 = %718.1;
  %742 = @func_3013() /* ty=Tensor[(14, 7, 14), bool] */;
  %743 = bitwise_or(%725, %726) /* ty=Tensor[(11, 4, 3), int32] */;
  %744 = sqrt(%727) /* ty=Tensor[(11, 4, 3), float32] */;
  %745 = greater(%737, %738) /* ty=Tensor[(3, 36), bool] */;
  (%739, meta[relay.Constant][37] /* ty=Tensor[(1120), uint8] */, %740, %741, %742, %743, %744, %745)
}

def @func_4847(%var_4830: Tensor[(117), float32], %var_4831: Tensor[(1120), uint8]) -> (Tensor[(700), int64], Tensor[(14, 7, 14), float32], Tensor[(700), int64], Tensor[(700), int64], Tensor[(2, 6, 9), float32], Tensor[(1120), float32], Tensor[(117), float32], Tensor[(1120), uint8], Tensor[(1120), uint8]) {
  %746 = @func_4314() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(700), int64]) */;
  %747 = @func_3080() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), uint64], Tensor[(2, 6, 9), float64], Tensor[(14, 7, 14), float32]) */;
  %748 = @func_3111() /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float64]) */;
  %749 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
  %750 = @func_900() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %753 = cast(%var_4830, dtype="float32") /* ty=Tensor[(117), float32] */;
  %754 = cast(%var_4831, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %755 = reshape(%753, newshape=[117]) /* ty=Tensor[(117), float32] */;
  %756 = reshape(%754, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %757 = @func_1386(%755, %756) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64], Tensor[(1120), int16], Tensor[(117), float32], uint8, Tensor[(1120), float32]) */;
  %758 = %757.5;
  %759 = cast(%758, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %760 = reshape(%759, newshape=[1120]) /* ty=Tensor[(1120), uint8] */;
  %761 = @func_4593(%760) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), bool], Tensor[(1120), uint8], Tensor[(2, 6, 9), float64]) */;
  %762 = %746.1;
  %763 = %747.3;
  %764 = %748.0;
  %765 = %749.1;
  %766 = exp(%752) /* ty=Tensor[(2, 6, 9), float32] */;
  %767 = %761.2;
  (%762, %763, %764, %765, %766, %758, %var_4830, %var_4831, %767)
}

def @func_4716() -> (Tensor[(2, 6, 9), float64],) {
  @func_4714() /* ty=(Tensor[(2, 6, 9), float64],) */
}

def @func_3398() -> (Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  %768 = @func_2946() /* ty=Tensor[(2, 6, 9), float64] */;
  %769 = @func_2925() /* ty=Tensor[(700), float32] */;
  %770 = @func_3354() /* ty=Tensor[(2, 6, 9), float64] */;
  (%768, %769, %770)
}

def @func_2825() -> Tensor[(14, 7, 14), bool] {
  %771 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %771.0
}

def @func_3112() -> (Tensor[(700), int64], Tensor[(14, 7, 14), float64]) {
  %778 = fn () -> (Tensor[(700), int64], Tensor[(14, 7, 14), float64]) {
    %772 = @func_1258() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */;
    %773 = @func_2212() /* ty=(Tensor[(14, 7, 14), bool],) */;
    %774 = %773.0;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
    %776 = %772.1;
    %777 = log(%775) /* ty=Tensor[(14, 7, 14), float64] */;
    (%776, %777)
  };
  %778() /* ty=(Tensor[(700), int64], Tensor[(14, 7, 14), float64]) */
}

def @func_5627() -> (Tensor[(700), float32], Tensor[(2, 6, 9), float64]) {
  %779 = @func_3171() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %780 = @func_2925() /* ty=Tensor[(700), float32] */;
  %781 = %779.0;
  (%780, %781)
}

def @func_1674(%var_1673: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) {
  %795 = fn (%var_1663: Tensor[(1120), uint8]) -> (Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) {
    %782 = @func_875() /* ty=(Tensor[(2, 6, 9), float64],) */;
    %783 = cast(meta[relay.Constant][38] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %784 = reshape(%783, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float64] */;
    %785 = %782.0;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %787 = cast(%785, dtype="float64") /* ty=Tensor[(2, 6, 9), float64] */;
    %788 = cast(%var_1663, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
    %789 = reshape(%786, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %790 = reshape(%787, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float64] */;
    %791 = reshape(%788, newshape=[4, 280]) /* ty=Tensor[(4, 280), uint8] */;
    %792 = @func_571(%789, %790, %791) /* ty=(Tensor[(2, 6, 9), bool], Tensor[(2, 6, 9), float64], Tensor[(10, 8, 14), bool], uint8, Tensor[(4, 280), uint8]) */;
    %793 = @func_1077(%784) /* ty=Tensor[(7, 10, 10), float64] */;
    %794 = %792.4;
    (%785, %793, meta[relay.Constant][38] /* ty=Tensor[(700), float64] */, %794, %var_1663)
  };
  %795(%var_1673) /* ty=(Tensor[(2, 6, 9), float64], Tensor[(7, 10, 10), float64], Tensor[(700), float64], Tensor[(4, 280), uint8], Tensor[(1120), uint8]) */
}

def @func_2166(%var_2164: Tensor[(2, 6, 9), float64]) -> (Tensor[(2, 6, 9), int16],) {
  @func_2163(%var_2164) /* ty=(Tensor[(2, 6, 9), int16],) */
}

def @func_5219() -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
  %800 = fn () -> (Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) {
    %796 = @func_3041() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) */;
    %797 = @func_4648() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64], Tensor[(1120), uint8]) */;
    %798 = %796.1;
    %799 = %797.1;
    (%798, %799)
  };
  %800() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(2, 6, 9), float64]) */
}

def @func_914(%var_913: Tensor[(13, 14, 6), bool]) -> (Tensor[(13, 14, 6), bool],) {
  %806 = fn (%var_903: Tensor[(13, 14, 6), bool]) -> (Tensor[(13, 14, 6), bool],) {
    %801 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 14, 6), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
    %802 = shape_of(%var_903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%var_903, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %805 = logical_and(%803, %804) /* ty=Tensor[(13, 14, 6), bool] */;
    (%805,)
  };
  %806(%var_913) /* ty=(Tensor[(13, 14, 6), bool],) */
}

def @func_1208(%var_1206: Tensor[(11, 15, 13), uint32]) -> Tensor[(11, 15, 13), uint32] {
  @func_1205(%var_1206) /* ty=Tensor[(11, 15, 13), uint32] */
}

def @func_3941(%var_3940: Tensor[(624), int64]) -> (Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) {
  %818 = fn (%var_3924: Tensor[(624), int64]) -> (Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) {
    %807 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 4, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
    %808 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(11, 4, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 4, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %811 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
    %812 = cast(%var_3924, dtype="int64") /* ty=Tensor[(624), int64] */;
    %813 = reshape(%812, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
    %814 = @func_2250(%813) /* ty=(Tensor[(13, 12, 4), int64],) */;
    %815 = not_equal(%809, %810) /* ty=Tensor[(11, 4, 10), bool] */;
    %816 = %811.0;
    %817 = %814.0;
    (%815, %816, %817, %var_3924)
  };
  %818(%var_3940) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(2, 6, 9), float64], Tensor[(13, 12, 4), int64], Tensor[(624), int64]) */
}

def @func_4378() -> Tensor[(2, 6, 9), float64] {
  %819 = @func_3398() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), float32], Tensor[(2, 6, 9), float64]) */;
  %819.0
}

def @func_1744(%var_1742: Tensor[(6, 11), float32]) -> Tensor[(6, 11), float32] {
  @func_1741(%var_1742) /* ty=Tensor[(6, 11), float32] */
}

def @func_1944(%var_1942: Tensor[(1092), bool]) -> (Tensor[(700), int64], Tensor[(1120), uint8], Tensor[(1, 108), float32], Tensor[(1092), bool], Tensor[(2, 6, 9), float64]) {
  @func_1941(%var_1942) /* ty=(Tensor[(700), int64], Tensor[(1120), uint8], Tensor[(1, 108), float32], Tensor[(1092), bool], Tensor[(2, 6, 9), float64]) */
}

def @func_1259() -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64]) {
  %834 = fn () -> (Tensor[(2, 6, 9), float64], Tensor[(700), int64]) {
    %820 = cast(meta[relay.Constant][42] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %821 = reshape(%820, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float64] */;
    %822 = @func_1077(%821) /* ty=Tensor[(7, 10, 10), float64] */;
    %823 = cast(%822, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
    %824 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(700), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %825 = cast(meta[relay.Constant][42] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), float64] */;
    %827 = minimum(%825, %826) /* ty=Tensor[(700), float64] */;
    %828 = cast(meta[relay.Constant][42] /* ty=Tensor[(700), float64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
    %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(1), int32] */;
    %830 = cast(%827, dtype="int64") /* ty=Tensor[(700), int64] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), int64] */;
    %832 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
    %833 = add(%830, %831) /* ty=Tensor[(700), int64] */;
    (%832, %833)
  };
  %834() /* ty=(Tensor[(2, 6, 9), float64], Tensor[(700), int64]) */
}

def @func_3726(%var_3684: Tensor[(14, 7, 14), bool]) -> (Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) {
  %835 = @func_2066() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), bool]) */;
  %836 = %835.1;
  %837 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(14, 7, 14), uint64] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="uint64") /* ty=Tensor[(14, 7, 14), uint64] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %841 = cast(%var_3684, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %842 = left_shift(%839, %840) /* ty=Tensor[(14, 7, 14), uint64] */;
  %843 = sin(%841) /* ty=Tensor[(14, 7, 14), float64] */;
  (%842, %843)
}

def @func_5584(%var_5561: Tensor[(1372), bool]) -> (Tensor[(15, 5, 16), uint8], Tensor[(14, 7, 14), float64], Tensor[(1372), bool], Tensor[(2, 6, 9), float64]) {
  %844 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 16), uint8] */;
  %845 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 5, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 16), uint8] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %848 = cast(%var_5561, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %849 = reshape(%848, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), bool] */;
  %850 = @func_3726(%849) /* ty=(Tensor[(14, 7, 14), uint64], Tensor[(14, 7, 14), float64]) */;
  %851 = subtract(%846, %847) /* ty=Tensor[(15, 5, 16), uint8] */;
  %852 = %850.1;
  %853 = @func_361() /* ty=Tensor[(2, 6, 9), float64] */;
  (%851, %852, %var_5561, %853)
}

def @func_3475(%var_3464: int64, %var_3465: Tensor[(12, 14, 1), int64]) -> (Tensor[(12, 14, 1), bool],) {
  %854 = cast(%var_3464, dtype="bool") /* ty=bool */;
  %855 = cast(%var_3465, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %856 = less(%854, %855) /* ty=Tensor[(12, 14, 1), bool] */;
  (%856,)
}

def @func_111(%var_109: uint8, %var_110: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) {
  %867 = fn (%var_62: uint8, %var_63: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) {
    %857 = cast(%var_62, dtype="uint8") /* ty=uint8 */;
    %858 = cast(%var_63, dtype="uint8") /* ty=Tensor[(10, 8, 14), uint8] */;
    %859 = logical_xor(%857, %858) /* ty=Tensor[(10, 8, 14), uint8] */;
    %860 = cast(%859, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
    %861 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%var_63, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %864 = cast(%859, dtype="float32") /* ty=Tensor[(10, 8, 14), float32] */;
    %865 = not_equal(%862, %863) /* ty=Tensor[(10, 8, 14), bool] */;
    %866 = cosh(%864) /* ty=Tensor[(10, 8, 14), float32] */;
    (%865, %866)
  };
  %867(%var_109, %var_110) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(10, 8, 14), float32]) */
}

def @func_3041() -> (Tensor[(14, 7, 14), bool], Tensor[(2, 6, 9), float64]) {
  %868 = @func_2135() /* ty=(Tensor[(14, 7, 14), bool],) */;
  %869 = @func_1690() /* ty=(Tensor[(2, 6, 9), float64],) */;
  %870 = %868.0;
  %871 = %869.0;
  (%870, %871)
}

def @func_1205(%var_1186: Tensor[(11, 15, 13), uint32]) -> Tensor[(11, 15, 13), uint32] {
  %872 = cast(%var_1186, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %873 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(11, 15, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 15, 13), uint32] */, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%874, %875) /* ty=Tensor[(11, 15, 13), uint32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen27/build/output.py", line 2170, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

