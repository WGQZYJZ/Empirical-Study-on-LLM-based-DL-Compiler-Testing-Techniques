==========mod==========
#[version = "0.0.5"]
def @func_1905(%var_1900: Tensor[(4, 16, 5), int8]) -> (Tensor[(4, 16, 5), int8],) {
  %0 = cast(%var_1900, dtype="int8") /* ty=Tensor[(4, 16, 5), int8] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 16, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 16, 5), int8] */, dtype="int8") /* ty=Tensor[(4, 16, 5), int8] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %4 = add(%2, %3) /* ty=Tensor[(4, 16, 5), int8] */;
  (%4,)
}

def @func_5400(%var_5392: Tensor[(16, 4, 12), int64], %var_5393: Tensor[(16, 4, 12), int64]) -> Tensor[(16, 4, 12), int64] {
  %5 = cast(%var_5393, dtype="int64") /* ty=Tensor[(16, 4, 12), int64] */;
  %6 = shape_of(%var_5392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_5392, dtype="int64") /* ty=Tensor[(16, 4, 12), int64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%7, %8) /* ty=Tensor[(16, 4, 12), int64] */
}

def @func_1224(%var_1187: Tensor[(10, 14, 12), uint32], %var_1188: Tensor[(10, 14, 12), uint32]) -> (Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
  %9 = cast(%var_1188, dtype="uint32") /* ty=Tensor[(10, 14, 12), uint32] */;
  %10 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1187, dtype="uint32") /* ty=Tensor[(10, 14, 12), uint32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %13 = @func_433() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %14 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %15 = subtract(%11, %12) /* ty=Tensor[(10, 14, 12), uint32] */;
  %16 = %13.0;
  %17 = %14.1;
  %18 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
  (%15, %16, %17, %18)
}

def @func_10287(%var_10259: Tensor[(15, 9, 2), uint64]) -> (Tensor[(15, 9, 2), bool], Tensor[(16, 14, 12), bool]) {
  %19 = cast(%var_10259, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %20 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(15, 9, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 9, 2), uint64] */, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = not_equal(%21, %22) /* ty=Tensor[(15, 9, 2), bool] */;
  %24 = @func_8469() /* ty=Tensor[(16, 14, 12), bool] */;
  (%23, %24)
}

def @func_2628() -> (Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) {
  %25 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %26 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %27 = %25.3;
  %28 = %26.0;
  (%27, %28)
}

def @func_573(%var_555: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) {
  %29 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %30 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %31 = %30.0;
  %32 = cast(%var_555, dtype="int16") /* ty=Tensor[(16, 14, 12), int16] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="int16") /* ty=Tensor[(16, 14, 12), int16] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %36 = %29.1;
  %37 = multiply(%34, %35) /* ty=Tensor[(16, 14, 12), int16] */;
  (%36, %37)
}

def @func_2139() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) {
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(40, 12), uint64] */, dtype="uint64") /* ty=Tensor[(40, 12), uint64] */;
  %39 = reshape(%38, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %40 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  %41 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
  %42 = @func_1433(%39) /* ty=Tensor[(10, 4, 12), uint64] */;
  (%40, %41, %42, meta[relay.Constant][2] /* ty=Tensor[(40, 12), uint64] */)
}

def @func_1018(%var_999: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) {
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %44 = shape_of(%var_999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_999, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), uint16] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %48 = reshape(%47, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
  %49 = @func_883(%48) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) */;
  %50 = power(%45, %46) /* ty=Tensor[(4, 12, 2), float64] */;
  %51 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
  %52 = %49.2;
  (%50, %51, %52, meta[relay.Constant][4] /* ty=Tensor[(1080), uint16] */)
}

def @func_1395(%var_1382: uint16, %var_1383: Tensor[(6, 1, 16), uint16]) -> Tensor[(6, 1, 16), uint16] {
  %53 = cast(%var_1382, dtype="uint16") /* ty=uint16 */;
  %54 = cast(%var_1383, dtype="uint16") /* ty=Tensor[(6, 1, 16), uint16] */;
  bitwise_and(%53, %54) /* ty=Tensor[(6, 1, 16), uint16] */
}

def @func_5993(%var_5978: Tensor[(1134), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) {
  %55 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %56 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
  %57 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %58 = @func_5287() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) */;
  %59 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %61 = reshape(%60, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %62 = @func_2226(%61) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %63 = cast(-9.00953f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %64 = cast(%var_5978, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %65 = reshape(%63, newshape=[]) /* ty=float64 */;
  %66 = reshape(%64, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), float64] */;
  %67 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %68 = %55.0;
  %69 = %56.1;
  %70 = %57.0;
  %71 = %58.0;
  %72 = @func_2493() /* ty=Tensor[(16, 14, 12), bool] */;
  %73 = %59.0;
  %74 = %62.0;
  %75 = @func_2652(%65, %66) /* ty=Tensor[(14, 9, 9), float64] */;
  %76 = %67.3;
  (%68, %69, %70, %71, %72, %73, %74, meta[relay.Constant][5] /* ty=Tensor[(630), uint16] */, %75, -9.00953f64 /* ty=float64 */, %var_5978, %76)
}

def @func_2949(%var_2946: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %77 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %78 = cast(%var_2946, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %79 = reshape(%78, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %80 = %77.3;
  %81 = @func_1433(%79) /* ty=Tensor[(10, 4, 12), uint64] */;
  (%80, %81, %var_2946)
}

def @func_8274() -> (Tensor[(16, 14, 12), uint32],) {
  %82 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %83 = %82.1;
  (%83,)
}

def @func_10218() -> Tensor[(16, 14, 12), bool] {
  %84 = @func_9903() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %84.0
}

def @func_1299(%var_1284: float64) -> Tensor[(8, 7, 7), float32] {
  %85 = cast(%var_1284, dtype="float64") /* ty=float64 */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 7), float64] */;
  %87 = floor_mod(%85, %86) /* ty=Tensor[(8, 7, 7), float64] */;
  %88 = cast(%var_1284, dtype="float32") /* ty=float32 */;
  %89 = cast(%87, dtype="float32") /* ty=Tensor[(8, 7, 7), float32] */;
  power(%88, %89) /* ty=Tensor[(8, 7, 7), float32] */
}

def @func_7122(%var_7112: Tensor[(16, 14, 12), bool]) -> (Tensor[(16, 14, 12), bool],) {
  %90 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %91 = %90.0;
  %92 = cast(%var_7112, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = not_equal(%94, %95) /* ty=Tensor[(16, 14, 12), bool] */;
  (%96,)
}

def @func_4230() -> Tensor[(16, 14, 12), bool] {
  %97 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %97.0
}

def @func_7755() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
  %98 = @func_3573() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %99 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %100 = @func_6924() /* ty=(Tensor[(16, 14, 12), int64],) */;
  %101 = %98.1;
  %102 = %99.0;
  %103 = %100.0;
  (%101, %102, %103)
}

def @func_7542() -> Tensor[(16, 14, 12), bool] {
  %104 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %104.0
}

def @func_968() -> Tensor[(16, 14, 12), bool] {
  %105 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %105.0
}

def @func_3525() -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) {
  %106 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %107 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %108 = @func_1877() /* ty=Tensor[(16, 14, 12), bool] */;
  %109 = %106.1;
  %110 = %107.1;
  (%108, %109, %110)
}

def @func_2020() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) {
  %111 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %112 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 216), uint16] */, dtype="uint16") /* ty=Tensor[(3, 216), uint16] */;
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 216), uint16] */, dtype="uint16") /* ty=Tensor[(3, 216), uint16] */;
  %115 = reshape(%113, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %116 = reshape(%114, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %117 = %111.0;
  %118 = %112.0;
  %119 = @func_1411(%115, %116) /* ty=Tensor[(9, 6, 12), uint16] */;
  (%117, %118, %119, meta[relay.Constant][7] /* ty=Tensor[(3, 216), uint16] */)
}

def @func_7218(%var_7188: Tensor[(13, 1, 6), bool]) -> (Tensor[(13, 1, 6), bool],) {
  %120 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %121 = cast(%var_7188, dtype="bool") /* ty=Tensor[(13, 1, 6), bool] */;
  %122 = logical_and(%120, %121) /* ty=Tensor[(13, 1, 6), bool] */;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(13, 1, 6), bool] */;
  %124 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %125 = greater_equal(%123, %124) /* ty=Tensor[(13, 1, 6), bool] */;
  (%125,)
}

def @func_729() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %126 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %129 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %130 = sin(%128) /* ty=Tensor[(16, 14, 12), float64] */;
  %131 = %129.0;
  (%130, %131)
}

def @func_9843() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %132 = @func_6664() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
  %133 = @func_6865() /* ty=Tensor[(16, 14, 12), uint32] */;
  %134 = %132.2;
  (%133, %134)
}

def @func_9757() -> Tensor[(16, 14, 12), bool] {
  @func_8469() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10336(%var_10301: Tensor[(13, 6, 7), float64], %var_10313: Tensor[(882), float32], %var_10319: Tensor[(13, 6, 7), float64]) -> (Tensor[(16, 14, 12), float64], Tensor[(14, 9, 7), float64], Tensor[(882), float32], Tensor[(13, 6, 7), bool], Tensor[(8, 7, 7), bool]) {
  %135 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %136 = cast(%var_10313, dtype="float32") /* ty=Tensor[(882), float32] */;
  %137 = reshape(%136, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), float32] */;
  %138 = @func_10195(%137) /* ty=(Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) */;
  %139 = cast(%var_10301, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %140 = asin(%139) /* ty=Tensor[(13, 6, 7), float64] */;
  %141 = cast(%var_10319, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = @func_6480() /* ty=Tensor[(8, 7, 7), float32] */;
  %146 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %147 = %146.2;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(8, 7, 7), bool] */;
  %149 = cast(%147, dtype="bool") /* ty=bool */;
  %150 = %135.1;
  %151 = %138.1;
  %152 = less_equal(%143, %144) /* ty=Tensor[(13, 6, 7), bool] */;
  %153 = greater_equal(%148, %149) /* ty=Tensor[(8, 7, 7), bool] */;
  (%150, %151, %var_10313, %152, %153)
}

def @func_1586() -> Tensor[(16, 14, 12), bool] {
  @func_414() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_4055(%var_4051: Tensor[(3, 8, 16), float64]) -> (Tensor[(3, 8, 16), float64],) {
  %154 = cast(%var_4051, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %155 = cos(%154) /* ty=Tensor[(3, 8, 16), float64] */;
  (%155,)
}

def @func_8063() -> (Tensor[(16, 14, 12), float64],) {
  %156 = @func_3291() /* ty=Tensor[(16, 14, 12), float64] */;
  (%156,)
}

def @func_5748(%var_5690: bool, %var_5691: Tensor[(7, 12, 9), bool]) -> (Tensor[(7, 12, 9), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %157 = cast(%var_5691, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
  %158 = cast(%var_5690, dtype="int32") /* ty=int32 */;
  %159 = subtract(%157, %158) /* ty=Tensor[(7, 12, 9), int32] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %161 = log2(%160) /* ty=Tensor[(7, 12, 9), float64] */;
  %162 = cast(%var_5690, dtype="bool") /* ty=bool */;
  %163 = cast(%var_5691, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %164 = logical_and(%162, %163) /* ty=Tensor[(7, 12, 9), bool] */;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  %166 = sigmoid(%165) /* ty=Tensor[(7, 12, 9), float32] */;
  %167 = cast(%166, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %168 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%161, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %172 = greater(%169, %170) /* ty=Tensor[(7, 12, 9), bool] */;
  %173 = %171.0;
  %174 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  (%172, %173, %174)
}

def @func_764() -> Tensor[(16, 14, 12), float64] {
  %175 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  cosh(%177) /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_7281(%var_7270: Tensor[(9, 11, 12), int32]) -> (Tensor[(9, 11, 12), int32], Tensor[(9, 11, 12), float32]) {
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %179 = shape_of(%var_7270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_7270, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %182 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 11, 12), int32] */, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
  %183 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 12), int32] */, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %186 = left_shift(%180, %181) /* ty=Tensor[(9, 11, 12), int32] */;
  %187 = mod(%184, %185) /* ty=Tensor[(9, 11, 12), float32] */;
  (%186, %187)
}

def @func_2922() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %188 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %189 = @func_2493() /* ty=Tensor[(16, 14, 12), bool] */;
  %190 = %188.0;
  (%189, %190)
}

def @func_8054() -> (Tensor[(16, 14, 12), bool],) {
  %191 = @func_5467() /* ty=Tensor[(16, 14, 12), bool] */;
  (%191,)
}

def @func_6304() -> (Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) {
  %192 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
  %193 = %192.1;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(10, 9, 7), float32] */;
  %195 = log10(%194) /* ty=Tensor[(10, 9, 7), float32] */;
  %196 = cast(%193, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %200 = @func_3145() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %201 = maximum(%198, %199) /* ty=Tensor[(10, 9, 7), int16] */;
  %202 = %200.0;
  (%201, %202)
}

def @func_2101() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %203 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %204 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %205 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  %206 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
  %207 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  %208 = %203.0;
  %209 = %204.0;
  (%205, %206, %207, %208, %209)
}

def @func_4177(%var_4159: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), int64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %210 = cast(%var_4159, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
  %211 = asinh(%210) /* ty=Tensor[(8, 10, 15), float32] */;
  %212 = cast(%211, dtype="int64") /* ty=Tensor[(8, 10, 15), int64] */;
  %213 = shape_of(%var_4159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_4159, dtype="int64") /* ty=Tensor[(8, 10, 15), int64] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %216 = @func_3062() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %217 = bitwise_or(%214, %215) /* ty=Tensor[(8, 10, 15), int64] */;
  %218 = %216.0;
  %219 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  (%217, %218, %219)
}

def @func_5837(%var_5833: Tensor[(9, 14, 11), int64]) -> (Tensor[(9, 14, 11), int64],) {
  %220 = cast(%var_5833, dtype="int64") /* ty=Tensor[(9, 14, 11), int64] */;
  %221 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(9, 14, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(9, 14, 11), int64] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %224 = right_shift(%222, %223) /* ty=Tensor[(9, 14, 11), int64] */;
  (%224,)
}

def @func_3145() -> (Tensor[(16, 14, 12), bool],) {
  %225 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %226 = %225.0;
  (%226,)
}

def @func_6664() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %227 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %228 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %229 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %230 = %227.0;
  %231 = %228.1;
  %232 = %229.1;
  (%230, %231, %232)
}

def @func_7081() -> Tensor[(16, 14, 12), bool] {
  @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_317() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %234 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 14, 12), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %238 = rsqrt(%237) /* ty=Tensor[(16, 14, 12), float64] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %240 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 14, 12), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %243 = less(%235, %236) /* ty=Tensor[(16, 14, 12), bool] */;
  %244 = divide(%241, %242) /* ty=Tensor[(16, 14, 12), float64] */;
  (%243, %244)
}

def @func_8580(%var_8510: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(8, 5, 9), bool], Tensor[(16, 14, 12), bool]) {
  %245 = cast(%var_8510, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %246 = log(%245) /* ty=Tensor[(8, 5, 9), float64] */;
  %247 = cast(%var_8510, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %251 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %252 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %253 = cast(%var_8510, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %254 = acosh(%253) /* ty=Tensor[(8, 5, 9), float32] */;
  %255 = cast(%246, dtype="bool") /* ty=Tensor[(8, 5, 9), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(8, 5, 9), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = left_shift(%249, %250) /* ty=Tensor[(8, 5, 9), uint8] */;
  %260 = %251.0;
  %261 = %252.0;
  %262 = not_equal(%257, %258) /* ty=Tensor[(8, 5, 9), bool] */;
  %263 = @func_4377() /* ty=Tensor[(16, 14, 12), bool] */;
  (%259, %260, %261, %262, %263)
}

def @func_3599() -> (Tensor[(16, 14, 12), bool],) {
  %264 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %265 = %264.0;
  (%265,)
}

def @func_8413(%var_8400: Tensor[(4, 80), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), bool], Tensor[(78), bool], Tensor[(4, 16, 5), int8], Tensor[(4, 80), int8]) {
  %266 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
  %267 = @func_6664() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
  %268 = @func_2840() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */;
  %269 = @func_3599() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(78), bool] */, dtype="bool") /* ty=Tensor[(78), bool] */;
  %271 = reshape(%270, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), bool] */;
  %272 = @func_7218(%271) /* ty=(Tensor[(13, 1, 6), bool],) */;
  %273 = cast(%var_8400, dtype="int8") /* ty=Tensor[(4, 80), int8] */;
  %274 = reshape(%273, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
  %275 = @func_1905(%274) /* ty=(Tensor[(4, 16, 5), int8],) */;
  %276 = %266.0;
  %277 = %267.0;
  %278 = @func_6556() /* ty=Tensor[(16, 14, 12), bool] */;
  %279 = %268.0;
  %280 = %269.0;
  %281 = %272.0;
  %282 = %275.0;
  (%276, %277, %278, %279, %280, %281, meta[relay.Constant][13] /* ty=Tensor[(78), bool] */, %282, %var_8400)
}

def @func_9918() -> (Tensor[(16, 14, 12), bool],) {
  %283 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %284 = %283.1;
  (%284,)
}

def @func_4340(%var_4332: Tensor[(14, 4, 6), int16], %var_4333: Tensor[(14, 4, 6), int16]) -> Tensor[(14, 4, 6), int16] {
  %285 = cast(%var_4333, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %286 = shape_of(%var_4332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_4332, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%287, %288) /* ty=Tensor[(14, 4, 6), int16] */
}

def @func_6255() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %289 = @func_5554() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %290 = %289.0;
  %291 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %294 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%290, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %297 = floor_divide(%295, %296) /* ty=Tensor[(16, 14, 12), float64] */;
  %298 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
  (%297, %298)
}

def @func_2840() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
  %299 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %300 = cast(%299, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %301 = reshape(%300, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
  %302 = @func_1558(%301) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
  %303 = %302.0;
  (%299, %303)
}

def @func_7448() -> (Tensor[(16, 14, 12), bool],) {
  %304 = @func_4951() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %305 = %304.0;
  (%305,)
}

def @func_4156() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) {
  %306 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %307 = cast(meta[relay.Constant][14] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %308 = reshape(%307, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float64] */;
  %309 = @func_4055(%308) /* ty=(Tensor[(3, 8, 16), float64],) */;
  %310 = %306.0;
  %311 = @func_3291() /* ty=Tensor[(16, 14, 12), float64] */;
  %312 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %313 = %309.0;
  (%310, %311, %312, %313, meta[relay.Constant][14] /* ty=Tensor[(384), float64] */)
}

def @func_9478(%var_9465: Tensor[(320), int8]) -> (Tensor[(384), float64], Tensor[(4, 16, 5), int8], Tensor[(320), int8], Tensor[(16, 14, 12), bool]) {
  %314 = @func_4156() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) */;
  %315 = cast(%var_9465, dtype="int8") /* ty=Tensor[(320), int8] */;
  %316 = reshape(%315, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
  %317 = @func_1905(%316) /* ty=(Tensor[(4, 16, 5), int8],) */;
  %318 = %314.4;
  %319 = %317.0;
  %320 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  (%318, %319, %var_9465, %320)
}

def @func_7899() -> (Tensor[(16, 14, 12), uint32],) {
  %321 = @func_3062() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %322 = %321.0;
  (%322,)
}

def @func_10026() -> (Tensor[(16, 14, 12), bool],) {
  %323 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %324 = %323.0;
  (%324,)
}

def @func_6741() -> (Tensor[(9, 6, 12), uint16],) {
  %325 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %326 = %325.2;
  (%326,)
}

def @func_5070() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) {
  %327 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %328 = %327.1;
  %329 = cast(%328, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %330 = reshape(%329, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
  %331 = @func_1558(%330) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
  %332 = cast(%328, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %333 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %334 = %331.3;
  %335 = log(%332) /* ty=Tensor[(16, 14, 12), float32] */;
  %336 = %333.0;
  (%334, %335, %336)
}

def @func_6041() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
  %337 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %338 = %337.1;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %340 = reshape(%339, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %341 = @func_1104(%340) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %342 = %341.0;
  (%338, %342)
}

def @func_9968() -> (Tensor[(16, 14, 12), float64],) {
  %343 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %344 = %343.0;
  (%344,)
}

def @func_9214(%var_9198: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(480), uint64], Tensor[(480), uint64], Tensor[(14, 4, 6), int16], Tensor[(4, 84), float32]) {
  %345 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %346 = cast(%var_9198, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %347 = reshape(%346, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %348 = @func_7177(%347) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) */;
  %349 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 84), int16] */, dtype="int16") /* ty=Tensor[(4, 84), int16] */;
  %350 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 84), int16] */, dtype="int16") /* ty=Tensor[(4, 84), int16] */;
  %351 = reshape(%349, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), int16] */;
  %352 = reshape(%350, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), int16] */;
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 84), int16] */, dtype="float32") /* ty=Tensor[(4, 84), float32] */;
  %354 = %345.0;
  %355 = %348.2;
  %356 = @func_4340(%351, %352) /* ty=Tensor[(14, 4, 6), int16] */;
  %357 = asin(%353) /* ty=Tensor[(4, 84), float32] */;
  (%354, %355, %var_9198, %356, %357)
}

def @func_8089() -> (Tensor[(16, 14, 12), bool],) {
  %358 = @func_6205() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %359 = %358.0;
  (%359,)
}

def @func_10229() -> Tensor[(16, 14, 12), bool] {
  %360 = @func_8216() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %360.0
}

def @func_1784(%var_1779: Tensor[(16, 14, 12), float64]) -> (Tensor[(96), float64], Tensor[(96), float64], Tensor[(16, 14, 12), uint64]) {
  %361 = cast(meta[relay.Constant][16] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %362 = reshape(%361, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %363 = @func_1464(%362) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) */;
  %364 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %365 = %364.3;
  %366 = cast(%var_1779, dtype="uint64") /* ty=Tensor[(16, 14, 12), uint64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="uint64") /* ty=Tensor[(16, 14, 12), uint64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %370 = %363.4;
  %371 = subtract(%368, %369) /* ty=Tensor[(16, 14, 12), uint64] */;
  (%370, meta[relay.Constant][16] /* ty=Tensor[(96), float64] */, %371)
}

def @func_4807(%var_4780: Tensor[(384), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(630), uint16], Tensor[(3, 8, 16), float64], Tensor[(384), float64], Tensor[(16, 14, 12), bool], Tensor[(10, 8, 2), float32], Tensor[(160), float32], Tensor[(648), float32]) {
  %372 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %373 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %374 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %375 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %376 = cast(meta[relay.Constant][17] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %377 = reshape(%376, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %378 = @func_2226(%377) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %379 = cast(%var_4780, dtype="float64") /* ty=Tensor[(384), float64] */;
  %380 = reshape(%379, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float64] */;
  %381 = @func_4055(%380) /* ty=(Tensor[(3, 8, 16), float64],) */;
  %382 = cast(meta[relay.Constant][18] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %383 = reshape(%382, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %384 = @func_3660(%383) /* ty=(Tensor[(10, 8, 2), float32],) */;
  %385 = cast(meta[relay.Constant][19] /* ty=Tensor[(648), uint16] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %386 = log10(%385) /* ty=Tensor[(648), float32] */;
  %387 = cast(meta[relay.Constant][19] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
  %388 = cast(meta[relay.Constant][19] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
  %389 = reshape(%387, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %390 = reshape(%388, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %391 = @func_1411(%389, %390) /* ty=Tensor[(9, 6, 12), uint16] */;
  %392 = cast(%391, dtype="uint32") /* ty=Tensor[(9, 6, 12), uint32] */;
  %393 = shape_of(%386, dtype="int32") /* ty=Tensor[(1), int32] */;
  %394 = cast(%386, dtype="uint32") /* ty=Tensor[(648), uint32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %396 = bitwise_and(%394, %395) /* ty=Tensor[(648), uint32] */;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(648), float32] */;
  %398 = %372.1;
  %399 = %373.0;
  %400 = %374.0;
  %401 = %375.0;
  %402 = %378.1;
  %403 = %381.0;
  %404 = @func_414() /* ty=Tensor[(16, 14, 12), bool] */;
  %405 = %384.0;
  %406 = erf(%397) /* ty=Tensor[(648), float32] */;
  (%398, %399, %400, %401, %402, meta[relay.Constant][17] /* ty=Tensor[(630), uint16] */, %403, %var_4780, %404, %405, meta[relay.Constant][18] /* ty=Tensor[(160), float32] */, %406)
}

def @func_2652(%var_2638: float64, %var_2639: Tensor[(14, 9, 9), float64]) -> Tensor[(14, 9, 9), float64] {
  %407 = cast(%var_2638, dtype="float64") /* ty=float64 */;
  %408 = cast(%var_2639, dtype="float64") /* ty=Tensor[(14, 9, 9), float64] */;
  maximum(%407, %408) /* ty=Tensor[(14, 9, 9), float64] */
}

def @func_5287() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) {
  %409 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %410 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
  %411 = %410.1;
  %412 = cast(%411, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %413 = reshape(%412, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
  %414 = @func_1558(%413) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
  %415 = %409.1;
  %416 = %414.0;
  (%415, %411, %416)
}

def @func_3965() -> Tensor[(16, 14, 12), bool] {
  @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3040() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %417 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %418 = cast(meta[relay.Constant][20] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %419 = reshape(%418, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %420 = @func_2949(%419) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %421 = %417.0;
  %422 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  %423 = %420.1;
  (%421, %422, %423, meta[relay.Constant][20] /* ty=Tensor[(480), uint64] */)
}

def @func_7342(%var_7302: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %424 = cast(%var_7302, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %425 = reshape(%424, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %426 = @func_5319(%425) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %427 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %428 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %429 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
  %430 = %426.1;
  %431 = %427.0;
  %432 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
  %433 = %428.0;
  (%429, %430, %var_7302, %431, %432, %433)
}

def @func_4024() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %434 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %435 = @func_2628() /* ty=(Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) */;
  %436 = %434.0;
  %437 = %435.1;
  (%436, %437)
}

def @func_8687() -> (Tensor[(630), uint16],) {
  %438 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
  %439 = %438.2;
  (%439,)
}

def @func_8736() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 4, 12), int64], Tensor[(768), int64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16]) {
  %440 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(768), int64] */, dtype="int64") /* ty=Tensor[(768), int64] */;
  %442 = cast(meta[relay.Constant][21] /* ty=Tensor[(768), int64] */, dtype="int64") /* ty=Tensor[(768), int64] */;
  %443 = reshape(%441, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), int64] */;
  %444 = reshape(%442, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), int64] */;
  %445 = @func_6304() /* ty=(Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) */;
  %446 = @func_6741() /* ty=(Tensor[(9, 6, 12), uint16],) */;
  %447 = %440.0;
  %448 = @func_5400(%443, %444) /* ty=Tensor[(16, 4, 12), int64] */;
  %449 = %445.1;
  %450 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  %451 = %446.0;
  (%447, %448, meta[relay.Constant][21] /* ty=Tensor[(768), int64] */, %449, %450, %451)
}

def @func_4423() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %452 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %453 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  %454 = %452.0;
  (%453, %454)
}

def @func_9683() -> Tensor[(16, 14, 12), bool] {
  %455 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %455.0
}

def @func_7933() -> Tensor[(16, 14, 12), float64] {
  %456 = @func_6255() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
  %456.0
}

def @func_6924() -> (Tensor[(16, 14, 12), int64],) {
  %457 = @func_2840() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */;
  %458 = %457.1;
  (%458,)
}

def @func_8002(%var_7975: Tensor[(78), bool], %var_7982: Tensor[(1760), uint16]) -> (Tensor[(1080), uint16], Tensor[(78), bool], Tensor[(16, 11, 10), uint16], Tensor[(1760), uint16], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), float32]) {
  %459 = @func_7630() /* ty=(Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %460 = cast(%var_7982, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %461 = cast(%var_7982, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %462 = reshape(%460, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %463 = reshape(%461, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %464 = @func_6205() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %465 = cast(%var_7975, dtype="bool") /* ty=Tensor[(78), bool] */;
  %466 = reshape(%465, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), bool] */;
  %467 = @func_7218(%466) /* ty=(Tensor[(13, 1, 6), bool],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
  %470 = log10(%469) /* ty=Tensor[(13, 1, 6), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(13, 1, 6), float32] */;
  %472 = %459.1;
  %473 = @func_1173(%462, %463) /* ty=Tensor[(16, 11, 10), uint16] */;
  %474 = %464.0;
  %475 = cosh(%471) /* ty=Tensor[(13, 1, 6), float32] */;
  (%472, %var_7975, %473, %var_7982, %474, %475)
}

def @func_8638() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %476 = @func_3769() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %477 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %478 = @func_7081() /* ty=Tensor[(16, 14, 12), bool] */;
  %479 = %476.0;
  %480 = %477.0;
  (%478, %479, %480)
}

def @func_1464(%var_1461: Tensor[(96), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) {
  %481 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %484 = reshape(%483, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %485 = @func_1104(%484) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %486 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %487 = cast(%var_1461, dtype="float64") /* ty=Tensor[(96), float64] */;
  %488 = reshape(%487, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %489 = @func_1018(%488) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) */;
  %490 = %485.1;
  %491 = %486.0;
  %492 = %489.2;
  (%482, %490, %491, %492, %var_1461)
}

def @func_9349() -> Tensor[(16, 14, 12), uint32] {
  %493 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
  %493.3
}

def @func_5676() -> (Tensor[(16, 14, 12), uint32],) {
  %494 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %495 = %494.0;
  (%495,)
}

def @func_665() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) {
  %496 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %497 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %498 = @func_433() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %499 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %502 = sqrt(%501) /* ty=Tensor[(16, 14, 12), float32] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %504 = %496.0;
  %505 = %497.0;
  %506 = %498.0;
  %507 = atan(%503) /* ty=Tensor[(16, 14, 12), float64] */;
  (%504, %505, %506, %507)
}

def @func_1558(%var_1540: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) {
  %508 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %509 = %508.0;
  %510 = cast(%var_1540, dtype="int64") /* ty=Tensor[(16, 14, 12), int64] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="int64") /* ty=Tensor[(16, 14, 12), int64] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
  %515 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
  %516 = reshape(%514, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %517 = reshape(%515, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
  %518 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %519 = bitwise_xor(%512, %513) /* ty=Tensor[(16, 14, 12), int64] */;
  %520 = @func_1411(%516, %517) /* ty=Tensor[(9, 6, 12), uint16] */;
  %521 = %518.0;
  (%519, %520, meta[relay.Constant][22] /* ty=Tensor[(648), uint16] */, %521)
}

def @func_1411(%var_1403: Tensor[(9, 6, 12), uint16], %var_1404: Tensor[(9, 6, 12), uint16]) -> Tensor[(9, 6, 12), uint16] {
  %522 = cast(%var_1404, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %523 = shape_of(%var_1403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_1403, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%524, %525) /* ty=Tensor[(9, 6, 12), uint16] */
}

def @func_3660(%var_3642: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float32],) {
  %526 = cast(%var_3642, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %527 = log10(%526) /* ty=Tensor[(10, 8, 2), float32] */;
  (%527,)
}

def @func_2226(%var_2213: Tensor[(10, 9, 7), uint16]) -> (Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) {
  %528 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(10, 9, 7), uint16] */;
  %529 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(10, 9, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 9, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 9, 7), uint16] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %532 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %533 = minimum(%530, %531) /* ty=Tensor[(10, 9, 7), uint16] */;
  %534 = %532.0;
  (%533, %534)
}

def @func_2873() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %535 = @func_2101() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %536 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %537 = %535.0;
  %538 = %536.1;
  (%537, %538)
}

def @func_3062() -> (Tensor[(16, 14, 12), uint32],) {
  %539 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %540 = %539.1;
  (%540,)
}

def @func_8044() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %541 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %542 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
  %543 = %541.0;
  (%542, %543)
}

def @func_4972(%var_4953: Tensor[(10, 7, 8), float64]) -> (Tensor[(10, 7, 8), float64], Tensor[(16, 14, 12), float64]) {
  %544 = cast(%var_4953, dtype="float64") /* ty=Tensor[(10, 7, 8), float64] */;
  %545 = @func_4156() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) */;
  %546 = sinh(%544) /* ty=Tensor[(10, 7, 8), float64] */;
  %547 = %545.1;
  (%546, %547)
}

def @func_5319(%var_5313: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %548 = @func_4951() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %549 = cast(%var_5313, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %550 = reshape(%549, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %551 = %548.0;
  %552 = @func_1433(%550) /* ty=Tensor[(10, 4, 12), uint64] */;
  (%551, %552, %var_5313)
}

def @func_4657(%var_4635: Tensor[(13, 8, 1), float32], %var_4654: Tensor[(5, 126), uint16]) -> (Tensor[(13, 8, 1), float32], Tensor[(1, 630), uint16], Tensor[(5, 126), uint16]) {
  %553 = cast(%var_4635, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
  %554 = cosh(%553) /* ty=Tensor[(13, 8, 1), float32] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
  %556 = cast(%var_4654, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %557 = reshape(%556, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %558 = @func_2536(%557) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
  %559 = asinh(%555) /* ty=Tensor[(13, 8, 1), float32] */;
  %560 = %558.2;
  (%559, %560, %var_4654)
}

def @func_5338() -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) {
  %561 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %562 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %563 = %561.0;
  %564 = %562.0;
  (%563, %564)
}

def @func_7383() -> (Tensor[(16, 14, 12), float32],) {
  %565 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %566 = %565.0;
  (%566,)
}

def @func_9111(%var_9079: Tensor[(630), uint16]) -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(630), uint16], Tensor[(1, 630), float32]) {
  %567 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
  %568 = @func_8886() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %569 = cast(%var_9079, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %570 = reshape(%569, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %571 = @func_2536(%570) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
  %572 = %571.2;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(1, 630), float64] */;
  %574 = sigmoid(%573) /* ty=Tensor[(1, 630), float64] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(1, 630), float32] */;
  %576 = %567.1;
  %577 = %568.1;
  %578 = sqrt(%575) /* ty=Tensor[(1, 630), float32] */;
  (%576, %577, %var_9079, %578)
}

def @func_3838() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %579 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %580 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %581 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %582 = %579.0;
  %583 = %580.0;
  (%581, %582, %583)
}

def @func_9412(%var_9407: Tensor[(2, 4, 1), int16]) -> Tensor[(2, 4, 10), bool] {
  %584 = cast(%var_9407, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %585 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
  less(%584, %585) /* ty=Tensor[(2, 4, 10), bool] */
}

def @func_711(%var_685: Tensor[(9, 15, 8), uint16]) -> (Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) {
  %586 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(9, 15, 8), uint16] */;
  %587 = shape_of(%var_685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_685, dtype="uint16") /* ty=Tensor[(9, 15, 8), uint16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %590 = maximum(%588, %589) /* ty=Tensor[(9, 15, 8), uint16] */;
  %591 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 15, 8), uint16] */, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %595 = cast(meta[relay.Constant][26] /* ty=Tensor[(2688), uint32] */, dtype="uint32") /* ty=Tensor[(2688), uint32] */;
  %596 = reshape(%595, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
  %597 = @func_573(%596) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) */;
  %598 = floor_divide(%593, %594) /* ty=Tensor[(9, 15, 8), float64] */;
  %599 = %597.0;
  (%598, %599, meta[relay.Constant][26] /* ty=Tensor[(2688), uint32] */)
}

def @func_2295() -> (Tensor[(16, 14, 12), bool],) {
  %600 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  (%600,)
}

def @func_4377() -> Tensor[(16, 14, 12), bool] {
  %601 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %601.0
}

def @func_7719() -> (Tensor[(16, 14, 12), float64], Tensor[(480), bool]) {
  %602 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
  %603 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
  %604 = %602.2;
  (%603, %604)
}

def @func_6556() -> Tensor[(16, 14, 12), bool] {
  @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10195(%var_10185: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) {
  %605 = cast(-3.86428f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %606 = cast(%var_10185, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %607 = cast(%var_10185, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
  %608 = subtract(%605, %606) /* ty=Tensor[(14, 9, 7), float32] */;
  %609 = acosh(%607) /* ty=Tensor[(14, 9, 7), float64] */;
  (%608, %609)
}

def @func_5011(%var_4983: Tensor[(9, 6, 13), float64], %var_5000: Tensor[(10, 63), uint16]) -> (Tensor[(9, 6, 13), int32], Tensor[(16, 14, 12), uint32], Tensor[(10, 63), uint16]) {
  %610 = cast(%var_4983, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %611 = cosh(%610) /* ty=Tensor[(9, 6, 13), float64] */;
  %612 = cast(%var_4983, dtype="int32") /* ty=Tensor[(9, 6, 13), int32] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="int32") /* ty=Tensor[(9, 6, 13), int32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %616 = cast(%var_5000, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %617 = reshape(%616, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %618 = @func_2226(%617) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %619 = minimum(%614, %615) /* ty=Tensor[(9, 6, 13), int32] */;
  %620 = %618.1;
  (%619, %620, %var_5000)
}

def @func_7844() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
  %621 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %622 = @func_5676() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %623 = @func_7775() /* ty=Tensor[(16, 14, 12), bool] */;
  %624 = %621.0;
  %625 = %622.0;
  (%623, %624, %625)
}

def @func_6957() -> Tensor[(16, 14, 12), float64] {
  %626 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %626.1
}

def @func_10182() -> Tensor[(16, 14, 12), bool] {
  %627 = @func_9385() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %627.0
}

def @func_5176() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %628 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %629 = %628.0;
  %630 = @func_414() /* ty=Tensor[(16, 14, 12), bool] */;
  (%629, %630)
}

def @func_3883() -> (Tensor[(16, 14, 12), uint32],) {
  %631 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %632 = %631.1;
  (%632,)
}

def @func_6120() -> (Tensor[(16, 14, 12), float64],) {
  %633 = @func_3525() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) */;
  %634 = %633.2;
  (%634,)
}

def @func_4528(%var_4502: Tensor[(1760), uint16], %var_4524: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) {
  %635 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %636 = cast(%var_4502, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %637 = cast(%var_4502, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %638 = reshape(%636, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %639 = reshape(%637, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %640 = @func_1173(%638, %639) /* ty=Tensor[(16, 11, 10), uint16] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %642 = sin(%641) /* ty=Tensor[(16, 11, 10), float64] */;
  %643 = cast(%640, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %647 = cast(%var_4524, dtype="int8") /* ty=Tensor[(1760), int8] */;
  %648 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(%var_4502, dtype="int8") /* ty=Tensor[(1760), int8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), int8] */;
  %651 = %635.1;
  %652 = floor_mod(%645, %646) /* ty=Tensor[(16, 11, 10), float64] */;
  %653 = bitwise_or(%649, %650) /* ty=Tensor[(1760), int8] */;
  (%651, %652, %653)
}

def @func_4543() -> (Tensor[(16, 14, 12), bool],) {
  %654 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %655 = %654.0;
  (%655,)
}

def @func_323() -> (Tensor[(16, 14, 12), bool],) {
  %656 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %657 = %656.0;
  (%657,)
}

def @func_4629(%var_4601: Tensor[(10, 3, 6), bool], %var_4602: Tensor[(10, 3, 6), bool], %var_4616: Tensor[(1760), uint16]) -> (Tensor[(10, 3, 6), bool], Tensor[(16, 14, 12), uint32], Tensor[(1760), uint16], Tensor[(16, 11, 10), float32]) {
  %658 = cast(%var_4602, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %659 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_4601, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %663 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %664 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %665 = reshape(%663, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %666 = reshape(%664, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %667 = @func_1173(%665, %666) /* ty=Tensor[(16, 11, 10), uint16] */;
  %668 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %669 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %670 = reshape(%668, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %671 = reshape(%669, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %672 = @func_1173(%670, %671) /* ty=Tensor[(16, 11, 10), uint16] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %674 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%667, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %677 = logical_or(%660, %661) /* ty=Tensor[(10, 3, 6), bool] */;
  %678 = %662.0;
  %679 = power(%675, %676) /* ty=Tensor[(16, 11, 10), float32] */;
  (%677, %678, %var_4616, %679)
}

def @func_1502() -> Tensor[(16, 14, 12), bool] {
  @func_968() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_6699() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
  %680 = @func_5338() /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) */;
  %681 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %682 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %683 = %680.1;
  %684 = %681.0;
  %685 = %682.1;
  (%683, %684, %685)
}

def @func_8449() -> Tensor[(16, 14, 12), bool] {
  %686 = @func_2873() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %686.0
}

def @func_1433(%var_1428: Tensor[(10, 4, 12), uint64]) -> Tensor[(10, 4, 12), uint64] {
  %687 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 4, 12), uint64] */, dtype="uint64") /* ty=Tensor[(10, 4, 12), uint64] */;
  %688 = shape_of(%var_1428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_1428, dtype="uint64") /* ty=Tensor[(10, 4, 12), uint64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%689, %690) /* ty=Tensor[(10, 4, 12), uint64] */
}

def @func_9287() -> Tensor[(16, 14, 12), bool] {
  @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_5653() -> (Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) {
  %691 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %692 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %693 = %692.3;
  %694 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), uint64] */, dtype="int64") /* ty=Tensor[(480), int64] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(1), int32] */;
  %696 = cast(%693, dtype="int64") /* ty=Tensor[(480), int64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?), int64] */;
  %698 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), uint64] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %699 = shape_of(%693, dtype="int32") /* ty=Tensor[(1), int32] */;
  %700 = cast(%693, dtype="bool") /* ty=Tensor[(480), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?), bool] */;
  %702 = %691.0;
  %703 = multiply(%696, %697) /* ty=Tensor[(480), int64] */;
  %704 = less(%700, %701) /* ty=Tensor[(480), bool] */;
  (%702, %703, %704)
}

def @func_5467() -> Tensor[(16, 14, 12), bool] {
  @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_8505() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
  %705 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %706 = @func_6591() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %707 = %705.0;
  %708 = %706.0;
  (%707, %708)
}

def @func_8216() -> (Tensor[(16, 14, 12), bool],) {
  %709 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %710 = %709.0;
  (%710,)
}

def @func_4207() -> (Tensor[(16, 14, 12), float32],) {
  %711 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %712 = %711.2;
  (%712,)
}

def @func_4084(%var_4063: Tensor[(9, 5, 2), float64]) -> Tensor[(9, 5, 2), float64] {
  %713 = cast(%var_4063, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
  asinh(%713) /* ty=Tensor[(9, 5, 2), float64] */
}

def @func_3291() -> Tensor[(16, 14, 12), float64] {
  %714 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
  %714.1
}

def @func_3769() -> (Tensor[(16, 14, 12), bool],) {
  %715 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  (%715,)
}

def @func_3573() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %716 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %717 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %718 = %716.0;
  %719 = %717.0;
  (%718, %719)
}

def @func_1173(%var_1166: Tensor[(16, 11, 10), uint16], %var_1167: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), uint16] {
  %720 = cast(%var_1167, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %721 = shape_of(%var_1166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_1166, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%722, %723) /* ty=Tensor[(16, 11, 10), uint16] */
}

def @func_3749() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
  %724 = @func_3573() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %725 = %724.1;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %727 = reshape(%726, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %728 = @func_1104(%727) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %729 = %728.0;
  (%725, %729)
}

def @func_9772() -> Tensor[(16, 14, 12), float32] {
  %730 = @func_5338() /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) */;
  %730.0
}

def @func_9982() -> (Tensor[(16, 14, 12), uint32],) {
  %731 = @func_7899() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %732 = %731.0;
  (%732,)
}

def @func_7775() -> Tensor[(16, 14, 12), bool] {
  %733 = @func_3145() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %733.0
}

def @func_1925() -> (Tensor[(16, 14, 12), bool],) {
  %734 = @func_1502() /* ty=Tensor[(16, 14, 12), bool] */;
  (%734,)
}

def @func_3190() -> Tensor[(3, 216), float64] {
  %735 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %736 = %735.3;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  cosh(%737) /* ty=Tensor[(3, 216), float64] */
}

def @func_4291() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) {
  %738 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %739 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %740 = %738.0;
  %741 = %739.0;
  (%740, %741)
}

def @func_602() -> (Tensor[(16, 14, 12), uint32],) {
  %742 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %743 = %742.0;
  (%743,)
}

def @func_9385() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %744 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %745 = @func_5206() /* ty=Tensor[(16, 14, 12), bool] */;
  %746 = %744.0;
  (%745, %746)
}

def @func_4129() -> Tensor[(16, 14, 12), bool] {
  @func_2493() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_8814(%var_8757: float64, %var_8758: Tensor[(2, 1, 3), float64]) -> (Tensor[(2, ?, 3), float32], Tensor[(16, 14, 12), float64], Tensor[(2, 1, 3), float32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %747 = cast(%var_8757, dtype="float64") /* ty=float64 */;
  %748 = cast(%var_8758, dtype="float64") /* ty=Tensor[(2, 1, 3), float64] */;
  %749 = floor_mod(%747, %748) /* ty=Tensor[(2, 1, 3), float64] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %751 = shape_of(%var_8758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%var_8758, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %754 = cast(%749, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %755 = mod(%752, %753) /* ty=Tensor[(2, ?, 3), float32] */;
  %756 = @func_7933() /* ty=Tensor[(16, 14, 12), float64] */;
  %757 = sqrt(%754) /* ty=Tensor[(2, 1, 3), float32] */;
  %758 = @func_7775() /* ty=Tensor[(16, 14, 12), bool] */;
  %759 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
  (%755, %756, %757, %758, %759)
}

def @func_7535() -> (Tensor[(40, 12), uint64], Tensor[(16, 14, 12), bool]) {
  %760 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
  %761 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %762 = %760.3;
  %763 = %761.0;
  (%762, %763)
}

def @func_433() -> (Tensor[(16, 14, 12), float32],) {
  %764 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %765 = %764.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %767 = log10(%766) /* ty=Tensor[(16, 14, 12), float32] */;
  (%767,)
}

def @func_2252() -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) {
  %768 = @func_2101() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %769 = cast(-5.09053f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %770 = reshape(%769, newshape=[]) /* ty=float64 */;
  %771 = %768.0;
  %772 = @func_1299(%770) /* ty=Tensor[(8, 7, 7), float32] */;
  (%771, %772, -5.09053f64 /* ty=float64 */)
}

def @func_1826() -> (Tensor[(16, 14, 12), float64],) {
  %773 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
  (%773,)
}

def @func_10395(%var_10387: Tensor[(320, 1), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(4, 16, 5), int8], Tensor[(320, 1), int8]) {
  %774 = @func_3769() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %775 = cast(%var_10387, dtype="int8") /* ty=Tensor[(320, 1), int8] */;
  %776 = reshape(%775, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
  %777 = @func_1905(%776) /* ty=(Tensor[(4, 16, 5), int8],) */;
  %778 = %774.0;
  %779 = %777.0;
  (%778, %779, %var_10387)
}

def @func_494() -> (Tensor[(16, 14, 12), uint32],) {
  %780 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %781 = %780.0;
  %782 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %785 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%781, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %788 = add(%786, %787) /* ty=Tensor[(16, 14, 12), uint32] */;
  (%788,)
}

def @func_9903() -> (Tensor[(16, 14, 12), bool],) {
  %789 = @func_7448() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %790 = %789.0;
  (%790,)
}

def @func_2493() -> Tensor[(16, 14, 12), bool] {
  %791 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %791.0
}

def @func_3694() -> Tensor[(16, 14, 12), bool] {
  @func_1586() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_5206() -> Tensor[(16, 14, 12), bool] {
  @func_1877() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_9426() -> Tensor[(8, 7, 7), float32] {
  @func_6480() /* ty=Tensor[(8, 7, 7), float32] */
}

def @func_7630() -> (Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %792 = cast(meta[relay.Constant][29] /* ty=Tensor[(1080), uint16] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %793 = reshape(%792, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
  %794 = @func_883(%793) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) */;
  %795 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %796 = @func_5287() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) */;
  %797 = @func_4599() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %798 = @func_6480() /* ty=Tensor[(8, 7, 7), float32] */;
  %799 = %794.1;
  %800 = %795.3;
  %801 = %796.0;
  %802 = %797.0;
  (%798, %799, meta[relay.Constant][29] /* ty=Tensor[(1080), uint16] */, %800, %801, %802)
}

def @func_4599() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %803 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %804 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %805 = %803.1;
  %806 = %804.2;
  (%805, %806)
}

def @func_2673() -> (Tensor[(16, 14, 12), bool],) {
  %807 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %808 = %807.0;
  (%808,)
}

def @func_10439(%var_10414: Tensor[(14, 10, 1), float64], %var_10426: Tensor[(14, 10, 13), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(14, 10, 13), int16]) {
  %809 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %810 = cast(%var_10414, dtype="float64") /* ty=Tensor[(14, 10, 1), float64] */;
  %811 = cosh(%810) /* ty=Tensor[(14, 10, 1), float64] */;
  %812 = cast(%811, dtype="int16") /* ty=Tensor[(14, 10, 1), int16] */;
  %813 = cast(%var_10426, dtype="int16") /* ty=Tensor[(14, 10, 13), int16] */;
  %814 = %809.0;
  %815 = subtract(%812, %813) /* ty=Tensor[(14, 10, 13), int16] */;
  (%814, %815)
}

def @func_6480() -> Tensor[(8, 7, 7), float32] {
  %816 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %816.1
}

def @func_8469() -> Tensor[(16, 14, 12), bool] {
  %817 = @func_4291() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) */;
  %817.0
}

def @func_1104(%var_1067: Tensor[(16, 14, 12), float32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %818 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %819 = %818.2;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %821 = cast(%var_1067, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %822 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%819, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %825 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %826 = asin(%820) /* ty=Tensor[(16, 14, 12), float64] */;
  %827 = logical_xor(%823, %824) /* ty=Tensor[(16, 14, 12), uint32] */;
  %828 = %825.0;
  (%826, %827, %828)
}

def @func_3919() -> (Tensor[(16, 14, 12), bool],) {
  %829 = @func_2617() /* ty=Tensor[(16, 14, 12), bool] */;
  (%829,)
}

def @func_414() -> Tensor[(16, 14, 12), bool] {
  %830 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %830.0
}

def @func_883(%var_863: Tensor[(1080), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) {
  %831 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %832 = cast(%var_863, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %833 = reshape(%832, newshape=[9, 15, 8]) /* ty=Tensor[(9, 15, 8), uint16] */;
  %834 = @func_711(%833) /* ty=(Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) */;
  %835 = %834.2;
  %836 = cast(%835, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %837 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %838 = %831.1;
  %839 = sigmoid(%836) /* ty=Tensor[(2688), float64] */;
  %840 = %837.1;
  (%838, %var_863, %839, %840)
}

def @func_1877() -> Tensor[(16, 14, 12), bool] {
  @func_1586() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_1628() -> (Tensor[(16, 14, 12), bool],) {
  %841 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %842 = %841.0;
  (%842,)
}

def @func_5785(%var_5759: Tensor[(1, 6, 3), float64], %var_5760: Tensor[(2, 6, 3), float64]) -> (Tensor[(2, 6, 3), float64], Tensor[(2, 6, 3), bool], Tensor[(16, 14, 12), uint32]) {
  %843 = cast(%var_5759, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %844 = cast(%var_5760, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
  %845 = cast(%var_5760, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %846 = cast(%var_5759, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %847 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %848 = divide(%843, %844) /* ty=Tensor[(2, 6, 3), float64] */;
  %849 = less_equal(%845, %846) /* ty=Tensor[(2, 6, 3), bool] */;
  %850 = %847.1;
  (%848, %849, %850)
}

def @func_6205() -> (Tensor[(16, 14, 12), bool],) {
  %851 = @func_1877() /* ty=Tensor[(16, 14, 12), bool] */;
  (%851,)
}

def @func_2051() -> Tensor[(16, 14, 12), bool] {
  %852 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %852.0
}

def @func_1510() -> (Tensor[(16, 14, 12), bool],) {
  %853 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %854 = %853.0;
  (%854,)
}

def @func_817() -> (Tensor[(16, 14, 12), bool],) {
  %855 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %856 = %855.0;
  (%856,)
}

def @func_6819() -> (Tensor[(480), bool], Tensor[(16, 14, 12), float64]) {
  %857 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
  %858 = @func_6591() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %859 = %857.2;
  %860 = %858.0;
  (%859, %860)
}

def @func_7854() -> (Tensor[(16, 14, 12), float64],) {
  %861 = @func_6041() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) */;
  %862 = %861.0;
  (%862,)
}

def @func_4951() -> (Tensor[(16, 14, 12), bool],) {
  %863 = @func_1502() /* ty=Tensor[(16, 14, 12), bool] */;
  (%863,)
}

def @func_6354() -> Tensor[(16, 14, 12), uint32] {
  %864 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %864.1
}

def @func_6426() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %865 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %866 = @func_4543() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %867 = @func_6304() /* ty=(Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) */;
  %868 = %865.0;
  %869 = %866.0;
  %870 = %867.1;
  (%868, %869, %870)
}

def @func_7461() -> Tensor[(16, 14, 12), float32] {
  %871 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %871.0
}

def @func_6179() -> (Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) {
  %872 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %873 = cast(meta[relay.Constant][30] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %874 = reshape(%873, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %875 = @func_2536(%874) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
  %876 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %877 = %872.0;
  %878 = %875.1;
  %879 = %876.0;
  (%877, %878, meta[relay.Constant][30] /* ty=Tensor[(630), uint16] */, %879)
}

def @func_6731() -> Tensor[(3, 216), float64] {
  @func_3190() /* ty=Tensor[(3, 216), float64] */
}

def @func_9021(%var_9001: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(1760), uint16], Tensor[(16, 14, 12), uint32], Tensor[(3, 216), float64]) {
  %880 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %881 = cast(%var_9001, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %882 = cast(%var_9001, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %883 = reshape(%881, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
  %884 = reshape(%882, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
  %885 = @func_4528(%883, %884) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) */;
  %886 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %887 = @func_3190() /* ty=Tensor[(3, 216), float64] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %889 = rsqrt(%888) /* ty=Tensor[(3, 216), float64] */;
  %890 = cast(%889, dtype="float32") /* ty=Tensor[(3, 216), float32] */;
  %891 = sinh(%890) /* ty=Tensor[(3, 216), float32] */;
  %892 = cast(%887, dtype="uint8") /* ty=Tensor[(3, 216), uint8] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(2), int32] */;
  %894 = cast(%891, dtype="uint8") /* ty=Tensor[(3, 216), uint8] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %896 = minimum(%894, %895) /* ty=Tensor[(3, 216), uint8] */;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %898 = shape_of(%889, dtype="int32") /* ty=Tensor[(2), int32] */;
  %899 = cast(%889, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %901 = %880.0;
  %902 = @func_7542() /* ty=Tensor[(16, 14, 12), bool] */;
  %903 = %885.0;
  %904 = %886.1;
  %905 = add(%899, %900) /* ty=Tensor[(3, 216), float64] */;
  (%901, %902, %903, %var_9001, %904, %905)
}

def @func_8886() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %906 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %907 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %908 = @func_8054() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %909 = %906.0;
  %910 = %907.0;
  %911 = %908.0;
  (%909, %910, %911)
}

def @func_6865() -> Tensor[(16, 14, 12), uint32] {
  %912 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
  %912.0
}

def @func_6591() -> (Tensor[(16, 14, 12), float64],) {
  %913 = @func_6120() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %914 = %913.0;
  (%914,)
}

def @func_8179(%var_8128: Tensor[(8, 2, 10), float64], %var_8137: Tensor[(8, 2, 10), float64], %var_8170: Tensor[(1134), float64]) -> (Tensor[(8, 2, 10), int32], Tensor[(8, 2, 10), float32], Tensor[(14, 9, 9), float64], Tensor[(1134), float64]) {
  %915 = cast(%var_8128, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %916 = cos(%915) /* ty=Tensor[(8, 2, 10), float64] */;
  %917 = cast(%var_8137, dtype="int32") /* ty=Tensor[(8, 2, 10), int32] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="int32") /* ty=Tensor[(8, 2, 10), int32] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %921 = cast(%916, dtype="float32") /* ty=Tensor[(8, 2, 10), float32] */;
  %922 = cast(%var_8170, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %923 = reshape(%922, newshape=[1134]) /* ty=Tensor[(1134), float64] */;
  %924 = @func_5993(%923) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) */;
  %925 = bitwise_or(%919, %920) /* ty=Tensor[(8, 2, 10), int32] */;
  %926 = log2(%921) /* ty=Tensor[(8, 2, 10), float32] */;
  %927 = %924.8;
  (%925, %926, %927, %var_8170)
}

def @main() -> (Tensor[(15, 5, 1), float64],) {
  %928 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %929 = sin(%928) /* ty=Tensor[(15, 5, 1), float64] */;
  (%929,)
}

def @func_9885() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %930 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %931 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  %932 = %930.0;
  (%931, %932)
}

def @func_9636() -> Tensor[(16, 14, 12), bool] {
  @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10143(%var_10129: Tensor[(8, 60), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), int64], Tensor[(8, 60), float32]) {
  %933 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %934 = cast(%var_10129, dtype="uint64") /* ty=Tensor[(8, 60), uint64] */;
  %935 = reshape(%934, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %936 = @func_2949(%935) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %937 = %936.1;
  %938 = cast(%var_10129, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %939 = shape_of(%937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(%937, dtype="int64") /* ty=Tensor[(10, 4, 12), int64] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %942 = cast(%var_10129, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %943 = %933.0;
  %944 = bitwise_and(%940, %941) /* ty=Tensor[(10, 4, 12), int64] */;
  %945 = atan(%942) /* ty=Tensor[(8, 60), float32] */;
  (%943, %944, %945)
}

def @func_9700() -> (Tensor[(9, 10, 5), float32], Tensor[(16, 14, 12), uint32]) {
  %946 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  %947 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %948 = cosh(%946) /* ty=Tensor[(9, 10, 5), float32] */;
  %949 = %947.0;
  (%948, %949)
}

def @func_7177(%var_7167: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) {
  %950 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %951 = cast(%var_7167, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %952 = reshape(%951, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %953 = %950.0;
  %954 = @func_1433(%952) /* ty=Tensor[(10, 4, 12), uint64] */;
  %955 = @func_6556() /* ty=Tensor[(16, 14, 12), bool] */;
  (%953, %954, %var_7167, %955)
}

def @func_2536(%var_2531: Tensor[(1, 630), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) {
  %956 = cast(%var_2531, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %957 = reshape(%956, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %958 = @func_2226(%957) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %959 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %960 = %958.0;
  (%959, %960, %var_2531)
}

def @func_2617() -> Tensor[(16, 14, 12), bool] {
  %961 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %961.0
}

def @func_5554() -> (Tensor[(16, 14, 12), float32],) {
  %962 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %963 = %962.0;
  (%963,)
}

def @func_9561() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64], Tensor[(420, 4), uint32]) {
  %964 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %965 = cast(meta[relay.Constant][33] /* ty=Tensor[(420, 4), uint32] */, dtype="uint32") /* ty=Tensor[(420, 4), uint32] */;
  %966 = cast(meta[relay.Constant][33] /* ty=Tensor[(420, 4), uint32] */, dtype="uint32") /* ty=Tensor[(420, 4), uint32] */;
  %967 = reshape(%965, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint32] */;
  %968 = reshape(%966, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint32] */;
  %969 = @func_1224(%967, %968) /* ty=(Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %970 = %964.0;
  %971 = %969.3;
  (%970, %971, meta[relay.Constant][33] /* ty=Tensor[(420, 4), uint32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7900() -> (Tensor[(16, 14, 12), uint32],) {
  %2 = fn () -> (Tensor[(16, 14, 12), uint32],) {
    %0 = @func_3062() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_8065() -> (Tensor[(16, 14, 12), float64],) {
  @func_8063() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_4340(%var_4332: Tensor[(14, 4, 6), int16], %var_4333: Tensor[(14, 4, 6), int16]) -> Tensor[(14, 4, 6), int16] {
  %3 = cast(%var_4333, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %4 = shape_of(%var_4332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_4332, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%5, %6) /* ty=Tensor[(14, 4, 6), int16] */
}

def @func_1905(%var_1900: Tensor[(4, 16, 5), int8]) -> (Tensor[(4, 16, 5), int8],) {
  %7 = cast(%var_1900, dtype="int8") /* ty=Tensor[(4, 16, 5), int8] */;
  %8 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 16, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 16, 5), int8] */, dtype="int8") /* ty=Tensor[(4, 16, 5), int8] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %11 = add(%9, %10) /* ty=Tensor[(4, 16, 5), int8] */;
  (%11,)
}

def @func_4177(%var_4159: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), int64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %12 = cast(%var_4159, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
  %13 = asinh(%12) /* ty=Tensor[(8, 10, 15), float32] */;
  %14 = cast(%13, dtype="int64") /* ty=Tensor[(8, 10, 15), int64] */;
  %15 = shape_of(%var_4159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_4159, dtype="int64") /* ty=Tensor[(8, 10, 15), int64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %18 = @func_3062() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %19 = bitwise_or(%16, %17) /* ty=Tensor[(8, 10, 15), int64] */;
  %20 = %18.0;
  %21 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
  (%19, %20, %21)
}

def @func_7721() -> (Tensor[(16, 14, 12), float64], Tensor[(480), bool]) {
  @func_7719() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(480), bool]) */
}

def @func_7125(%var_7123: Tensor[(16, 14, 12), bool]) -> (Tensor[(16, 14, 12), bool],) {
  @func_7122(%var_7123) /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_6181() -> (Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) {
  @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */
}

def @func_1588() -> Tensor[(16, 14, 12), bool] {
  @func_1586() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_7777() -> Tensor[(16, 14, 12), bool] {
  @func_7775() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10443(%var_10441: Tensor[(14, 10, 1), float64], %var_10442: Tensor[(14, 10, 13), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(14, 10, 13), int16]) {
  @func_10439(%var_10441, %var_10442) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(14, 10, 13), int16]) */
}

def @func_6480() -> Tensor[(8, 7, 7), float32] {
  %22 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %22.1
}

def @func_10336(%var_10301: Tensor[(13, 6, 7), float64], %var_10313: Tensor[(882), float32], %var_10319: Tensor[(13, 6, 7), float64]) -> (Tensor[(16, 14, 12), float64], Tensor[(14, 9, 7), float64], Tensor[(882), float32], Tensor[(13, 6, 7), bool], Tensor[(8, 7, 7), bool]) {
  %23 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %24 = cast(%var_10313, dtype="float32") /* ty=Tensor[(882), float32] */;
  %25 = reshape(%24, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), float32] */;
  %26 = @func_10195(%25) /* ty=(Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) */;
  %27 = cast(%var_10301, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %28 = asin(%27) /* ty=Tensor[(13, 6, 7), float64] */;
  %29 = cast(%var_10319, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = @func_6480() /* ty=Tensor[(8, 7, 7), float32] */;
  %34 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %35 = %34.2;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(8, 7, 7), bool] */;
  %37 = cast(%35, dtype="bool") /* ty=bool */;
  %38 = %23.1;
  %39 = %26.1;
  %40 = less_equal(%31, %32) /* ty=Tensor[(13, 6, 7), bool] */;
  %41 = greater_equal(%36, %37) /* ty=Tensor[(8, 7, 7), bool] */;
  (%38, %39, %var_10313, %40, %41)
}

def @func_968() -> Tensor[(16, 14, 12), bool] {
  %42 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %42.0
}

def @func_2053() -> Tensor[(16, 14, 12), bool] {
  @func_2051() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_7543() -> Tensor[(16, 14, 12), bool] {
  %44 = fn () -> Tensor[(16, 14, 12), bool] {
    %43 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %43.0
  };
  %44() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3573() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %45 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %46 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %47 = %45.0;
  %48 = %46.0;
  (%47, %48)
}

def @func_435() -> (Tensor[(16, 14, 12), float32],) {
  @func_433() /* ty=(Tensor[(16, 14, 12), float32],) */
}

def @func_1628() -> (Tensor[(16, 14, 12), bool],) {
  %49 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %50 = %49.0;
  (%50,)
}

def @func_9845() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  @func_9843() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */
}

def @func_6428() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  @func_6426() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_8640() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  @func_8638() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_7383() -> (Tensor[(16, 14, 12), float32],) {
  %51 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %52 = %51.0;
  (%52,)
}

def @func_9918() -> (Tensor[(16, 14, 12), bool],) {
  %53 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %54 = %53.1;
  (%54,)
}

def @func_7845() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
  %60 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
    %55 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %56 = @func_5676() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %57 = @func_7775() /* ty=Tensor[(16, 14, 12), bool] */;
    %58 = %55.0;
    %59 = %56.0;
    (%57, %58, %59)
  };
  %60() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) */
}

def @func_4025() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %65 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
    %61 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
    %62 = @func_2628() /* ty=(Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) */;
    %63 = %61.0;
    %64 = %62.1;
    (%63, %64)
  };
  %65() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_4130() -> Tensor[(16, 14, 12), bool] {
  %66 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_2493() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %66() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_6305() -> (Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) {
  %78 = fn () -> (Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) {
    %67 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
    %68 = %67.1;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(10, 9, 7), float32] */;
    %70 = log10(%69) /* ty=Tensor[(10, 9, 7), float32] */;
    %71 = cast(%68, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %75 = @func_3145() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %76 = maximum(%73, %74) /* ty=Tensor[(10, 9, 7), int16] */;
    %77 = %75.0;
    (%76, %77)
  };
  %78() /* ty=(Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) */
}

def @func_5208() -> Tensor[(16, 14, 12), bool] {
  @func_5206() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_1398(%var_1396: uint16, %var_1397: Tensor[(6, 1, 16), uint16]) -> Tensor[(6, 1, 16), uint16] {
  %81 = fn (%var_1382: uint16, %var_1383: Tensor[(6, 1, 16), uint16]) -> Tensor[(6, 1, 16), uint16] {
    %79 = cast(%var_1382, dtype="uint16") /* ty=uint16 */;
    %80 = cast(%var_1383, dtype="uint16") /* ty=Tensor[(6, 1, 16), uint16] */;
    bitwise_and(%79, %80) /* ty=Tensor[(6, 1, 16), uint16] */
  };
  %81(%var_1396, %var_1397) /* ty=Tensor[(6, 1, 16), uint16] */
}

def @func_433() -> (Tensor[(16, 14, 12), float32],) {
  %82 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %85 = log10(%84) /* ty=Tensor[(16, 14, 12), float32] */;
  (%85,)
}

def @func_2228(%var_2227: Tensor[(10, 9, 7), uint16]) -> (Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) {
  %93 = fn (%var_2213: Tensor[(10, 9, 7), uint16]) -> (Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) {
    %86 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(10, 9, 7), uint16] */;
    %87 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(10, 9, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 9, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 9, 7), uint16] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %90 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %91 = minimum(%88, %89) /* ty=Tensor[(10, 9, 7), uint16] */;
    %92 = %90.0;
    (%91, %92)
  };
  %93(%var_2227) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */
}

def @func_5070() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) {
  %94 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %95 = %94.1;
  %96 = cast(%95, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %97 = reshape(%96, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
  %98 = @func_1558(%97) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
  %99 = cast(%95, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %100 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %101 = %98.3;
  %102 = log(%99) /* ty=Tensor[(16, 14, 12), float32] */;
  %103 = %100.0;
  (%101, %102, %103)
}

def @func_3921() -> (Tensor[(16, 14, 12), bool],) {
  @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_494() -> (Tensor[(16, 14, 12), uint32],) {
  %104 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %105 = %104.0;
  %106 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %109 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%105, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %112 = add(%110, %111) /* ty=Tensor[(16, 14, 12), uint32] */;
  (%112,)
}

def @func_5839(%var_5838: Tensor[(9, 14, 11), int64]) -> (Tensor[(9, 14, 11), int64],) {
  %118 = fn (%var_5833: Tensor[(9, 14, 11), int64]) -> (Tensor[(9, 14, 11), int64],) {
    %113 = cast(%var_5833, dtype="int64") /* ty=Tensor[(9, 14, 11), int64] */;
    %114 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(9, 14, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(9, 14, 11), int64] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %117 = right_shift(%115, %116) /* ty=Tensor[(9, 14, 11), int64] */;
    (%117,)
  };
  %118(%var_5838) /* ty=(Tensor[(9, 14, 11), int64],) */
}

def @func_3599() -> (Tensor[(16, 14, 12), bool],) {
  %119 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %120 = %119.0;
  (%120,)
}

def @func_604() -> (Tensor[(16, 14, 12), uint32],) {
  @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_9683() -> Tensor[(16, 14, 12), bool] {
  %121 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %121.0
}

def @func_5319(%var_5313: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %122 = @func_4951() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %123 = cast(%var_5313, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %124 = reshape(%123, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %125 = %122.0;
  %126 = @func_1433(%124) /* ty=Tensor[(10, 4, 12), uint64] */;
  (%125, %126, %var_5313)
}

def @func_9920() -> (Tensor[(16, 14, 12), bool],) {
  @func_9918() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_4232() -> Tensor[(16, 14, 12), bool] {
  @func_4230() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_8217() -> (Tensor[(16, 14, 12), bool],) {
  %129 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %127 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %128 = %127.0;
    (%128,)
  };
  %129() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_1926() -> (Tensor[(16, 14, 12), bool],) {
  %131 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %130 = @func_1502() /* ty=Tensor[(16, 14, 12), bool] */;
    (%130,)
  };
  %131() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_3751() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
  @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */
}

def @func_3840() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */
}

def @func_7177(%var_7167: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) {
  %132 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %133 = cast(%var_7167, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %134 = reshape(%133, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
  %135 = %132.0;
  %136 = @func_1433(%134) /* ty=Tensor[(10, 4, 12), uint64] */;
  %137 = @func_6556() /* ty=Tensor[(16, 14, 12), bool] */;
  (%135, %136, %var_7167, %137)
}

def @func_2675() -> (Tensor[(16, 14, 12), bool],) {
  @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_5011(%var_4983: Tensor[(9, 6, 13), float64], %var_5000: Tensor[(10, 63), uint16]) -> (Tensor[(9, 6, 13), int32], Tensor[(16, 14, 12), uint32], Tensor[(10, 63), uint16]) {
  %138 = cast(%var_4983, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %139 = cosh(%138) /* ty=Tensor[(9, 6, 13), float64] */;
  %140 = cast(%var_4983, dtype="int32") /* ty=Tensor[(9, 6, 13), int32] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="int32") /* ty=Tensor[(9, 6, 13), int32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %144 = cast(%var_5000, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %145 = reshape(%144, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %146 = @func_2226(%145) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %147 = minimum(%142, %143) /* ty=Tensor[(9, 6, 13), int32] */;
  %148 = %146.1;
  (%147, %148, %var_5000)
}

def @func_496() -> (Tensor[(16, 14, 12), uint32],) {
  @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_1787(%var_1785: Tensor[(16, 14, 12), float64]) -> (Tensor[(96), float64], Tensor[(96), float64], Tensor[(16, 14, 12), uint64]) {
  @func_1784(%var_1785) /* ty=(Tensor[(96), float64], Tensor[(96), float64], Tensor[(16, 14, 12), uint64]) */
}

def @func_9773() -> Tensor[(16, 14, 12), float32] {
  %150 = fn () -> Tensor[(16, 14, 12), float32] {
    %149 = @func_5338() /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) */;
    %149.0
  };
  %150() /* ty=Tensor[(16, 14, 12), float32] */
}

def @func_5206() -> Tensor[(16, 14, 12), bool] {
  @func_1877() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_4158() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) {
  @func_4156() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) */
}

def @func_8183(%var_8180: Tensor[(8, 2, 10), float64], %var_8181: Tensor[(8, 2, 10), float64], %var_8182: Tensor[(1134), float64]) -> (Tensor[(8, 2, 10), int32], Tensor[(8, 2, 10), float32], Tensor[(14, 9, 9), float64], Tensor[(1134), float64]) {
  %164 = fn (%var_8128: Tensor[(8, 2, 10), float64], %var_8137: Tensor[(8, 2, 10), float64], %var_8170: Tensor[(1134), float64]) -> (Tensor[(8, 2, 10), int32], Tensor[(8, 2, 10), float32], Tensor[(14, 9, 9), float64], Tensor[(1134), float64]) {
    %151 = cast(%var_8128, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
    %152 = cos(%151) /* ty=Tensor[(8, 2, 10), float64] */;
    %153 = cast(%var_8137, dtype="int32") /* ty=Tensor[(8, 2, 10), int32] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%152, dtype="int32") /* ty=Tensor[(8, 2, 10), int32] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %157 = cast(%152, dtype="float32") /* ty=Tensor[(8, 2, 10), float32] */;
    %158 = cast(%var_8170, dtype="float64") /* ty=Tensor[(1134), float64] */;
    %159 = reshape(%158, newshape=[1134]) /* ty=Tensor[(1134), float64] */;
    %160 = @func_5993(%159) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) */;
    %161 = bitwise_or(%155, %156) /* ty=Tensor[(8, 2, 10), int32] */;
    %162 = log2(%157) /* ty=Tensor[(8, 2, 10), float32] */;
    %163 = %160.8;
    (%161, %162, %163, %var_8170)
  };
  %164(%var_8180, %var_8181, %var_8182) /* ty=(Tensor[(8, 2, 10), int32], Tensor[(8, 2, 10), float32], Tensor[(14, 9, 9), float64], Tensor[(1134), float64]) */
}

def @func_6733() -> Tensor[(3, 216), float64] {
  @func_6731() /* ty=Tensor[(3, 216), float64] */
}

def @func_318() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %177 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
    %165 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %166 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %169 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 14, 12), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %170 = rsqrt(%169) /* ty=Tensor[(16, 14, 12), float64] */;
    %171 = cast(%170, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %172 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %175 = less(%167, %168) /* ty=Tensor[(16, 14, 12), bool] */;
    %176 = divide(%173, %174) /* ty=Tensor[(16, 14, 12), float64] */;
    (%175, %176)
  };
  %177() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */
}

def @func_4344(%var_4342: Tensor[(14, 4, 6), int16], %var_4343: Tensor[(14, 4, 6), int16]) -> Tensor[(14, 4, 6), int16] {
  @func_4340(%var_4342, %var_4343) /* ty=Tensor[(14, 4, 6), int16] */
}

def @func_9700() -> (Tensor[(9, 10, 5), float32], Tensor[(16, 14, 12), uint32]) {
  %178 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  %179 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %180 = cosh(%178) /* ty=Tensor[(9, 10, 5), float32] */;
  %181 = %179.0;
  (%180, %181)
}

def @func_9427() -> Tensor[(8, 7, 7), float32] {
  %182 = fn () -> Tensor[(8, 7, 7), float32] {
    @func_6480() /* ty=Tensor[(8, 7, 7), float32] */
  };
  %182() /* ty=Tensor[(8, 7, 7), float32] */
}

def @func_573(%var_555: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) {
  %183 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %184 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %185 = %184.0;
  %186 = cast(%var_555, dtype="int16") /* ty=Tensor[(16, 14, 12), int16] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="int16") /* ty=Tensor[(16, 14, 12), int16] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %190 = %183.1;
  %191 = multiply(%188, %189) /* ty=Tensor[(16, 14, 12), int16] */;
  (%190, %191)
}

def @func_2673() -> (Tensor[(16, 14, 12), bool],) {
  %192 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %193 = %192.0;
  (%193,)
}

def @func_6356() -> Tensor[(16, 14, 12), uint32] {
  @func_6354() /* ty=Tensor[(16, 14, 12), uint32] */
}

def @func_2051() -> Tensor[(16, 14, 12), bool] {
  %194 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %194.0
}

def @func_7719() -> (Tensor[(16, 14, 12), float64], Tensor[(480), bool]) {
  %195 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
  %196 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
  %197 = %195.2;
  (%196, %197)
}

def @func_8817(%var_8815: float64, %var_8816: Tensor[(2, 1, 3), float64]) -> (Tensor[(2, ?, 3), float32], Tensor[(16, 14, 12), float64], Tensor[(2, 1, 3), float32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %211 = fn (%var_8757: float64, %var_8758: Tensor[(2, 1, 3), float64]) -> (Tensor[(2, ?, 3), float32], Tensor[(16, 14, 12), float64], Tensor[(2, 1, 3), float32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
    %198 = cast(%var_8757, dtype="float64") /* ty=float64 */;
    %199 = cast(%var_8758, dtype="float64") /* ty=Tensor[(2, 1, 3), float64] */;
    %200 = floor_mod(%198, %199) /* ty=Tensor[(2, 1, 3), float64] */;
    %201 = cast(%200, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
    %202 = shape_of(%var_8758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%var_8758, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %205 = cast(%200, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
    %206 = mod(%203, %204) /* ty=Tensor[(2, ?, 3), float32] */;
    %207 = @func_7933() /* ty=Tensor[(16, 14, 12), float64] */;
    %208 = sqrt(%205) /* ty=Tensor[(2, 1, 3), float32] */;
    %209 = @func_7775() /* ty=Tensor[(16, 14, 12), bool] */;
    %210 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
    (%206, %207, %208, %209, %210)
  };
  %211(%var_8815, %var_8816) /* ty=(Tensor[(2, ?, 3), float32], Tensor[(16, 14, 12), float64], Tensor[(2, 1, 3), float32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_4084(%var_4063: Tensor[(9, 5, 2), float64]) -> Tensor[(9, 5, 2), float64] {
  %212 = cast(%var_4063, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
  asinh(%212) /* ty=Tensor[(9, 5, 2), float64] */
}

def @func_1511() -> (Tensor[(16, 14, 12), bool],) {
  %215 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %213 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %214 = %213.0;
    (%214,)
  };
  %215() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_5322(%var_5320: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  @func_5319(%var_5320) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */
}

def @func_5072() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) {
  @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */
}

def @func_7122(%var_7112: Tensor[(16, 14, 12), bool]) -> (Tensor[(16, 14, 12), bool],) {
  %216 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %217 = %216.0;
  %218 = cast(%var_7112, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = not_equal(%220, %221) /* ty=Tensor[(16, 14, 12), bool] */;
  (%222,)
}

def @func_7775() -> Tensor[(16, 14, 12), bool] {
  %223 = @func_3145() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %223.0
}

def @func_1827() -> (Tensor[(16, 14, 12), float64],) {
  %225 = fn () -> (Tensor[(16, 14, 12), float64],) {
    %224 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
    (%224,)
  };
  %225() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_3601() -> (Tensor[(16, 14, 12), bool],) {
  @func_3599() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_9415(%var_9413: Tensor[(2, 4, 1), int16]) -> Tensor[(2, 4, 10), bool] {
  @func_9412(%var_9413) /* ty=Tensor[(2, 4, 10), bool] */
}

def @func_6958() -> Tensor[(16, 14, 12), float64] {
  %227 = fn () -> Tensor[(16, 14, 12), float64] {
    %226 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %226.1
  };
  %227() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_10218() -> Tensor[(16, 14, 12), bool] {
  %228 = @func_9903() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %228.0
}

def @func_5403(%var_5401: Tensor[(16, 4, 12), int64], %var_5402: Tensor[(16, 4, 12), int64]) -> Tensor[(16, 4, 12), int64] {
  %233 = fn (%var_5392: Tensor[(16, 4, 12), int64], %var_5393: Tensor[(16, 4, 12), int64]) -> Tensor[(16, 4, 12), int64] {
    %229 = cast(%var_5393, dtype="int64") /* ty=Tensor[(16, 4, 12), int64] */;
    %230 = shape_of(%var_5392, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%var_5392, dtype="int64") /* ty=Tensor[(16, 4, 12), int64] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_or(%231, %232) /* ty=Tensor[(16, 4, 12), int64] */
  };
  %233(%var_5401, %var_5402) /* ty=Tensor[(16, 4, 12), int64] */
}

def @func_8638() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %234 = @func_3769() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %235 = @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %236 = @func_7081() /* ty=Tensor[(16, 14, 12), bool] */;
  %237 = %234.0;
  %238 = %235.0;
  (%236, %237, %238)
}

def @func_2254() -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) {
  @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */
}

def @func_5676() -> (Tensor[(16, 14, 12), uint32],) {
  %239 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
  %240 = %239.0;
  (%240,)
}

def @func_8063() -> (Tensor[(16, 14, 12), float64],) {
  %241 = @func_3291() /* ty=Tensor[(16, 14, 12), float64] */;
  (%241,)
}

def @func_9562() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64], Tensor[(420, 4), uint32]) {
  %250 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64], Tensor[(420, 4), uint32]) {
    %242 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %243 = cast(meta[relay.Constant][6] /* ty=Tensor[(420, 4), uint32] */, dtype="uint32") /* ty=Tensor[(420, 4), uint32] */;
    %244 = cast(meta[relay.Constant][6] /* ty=Tensor[(420, 4), uint32] */, dtype="uint32") /* ty=Tensor[(420, 4), uint32] */;
    %245 = reshape(%243, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint32] */;
    %246 = reshape(%244, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint32] */;
    %247 = @func_1224(%245, %246) /* ty=(Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
    %248 = %242.0;
    %249 = %247.3;
    (%248, %249, meta[relay.Constant][6] /* ty=Tensor[(420, 4), uint32] */)
  };
  %250() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64], Tensor[(420, 4), uint32]) */
}

def @func_4292() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) {
  %255 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) {
    %251 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
    %252 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %253 = %251.0;
    %254 = %252.0;
    (%253, %254)
  };
  %255() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) */
}

def @func_6741() -> (Tensor[(9, 6, 12), uint16],) {
  %256 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
  %257 = %256.2;
  (%257,)
}

def @func_8583(%var_8581: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(8, 5, 9), bool], Tensor[(16, 14, 12), bool]) {
  @func_8580(%var_8581) /* ty=(Tensor[(8, 5, 9), uint8], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(8, 5, 9), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_9024(%var_9022: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(1760), uint16], Tensor[(16, 14, 12), uint32], Tensor[(3, 216), float64]) {
  @func_9021(%var_9022) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(1760), uint16], Tensor[(16, 14, 12), uint32], Tensor[(3, 216), float64]) */
}

def @func_1106(%var_1105: Tensor[(16, 14, 12), float32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %269 = fn (%var_1067: Tensor[(16, 14, 12), float32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
    %258 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
    %259 = %258.2;
    %260 = cast(%259, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %261 = cast(%var_1067, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
    %262 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%259, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %265 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %266 = asin(%260) /* ty=Tensor[(16, 14, 12), float64] */;
    %267 = logical_xor(%263, %264) /* ty=Tensor[(16, 14, 12), uint32] */;
    %268 = %265.0;
    (%266, %267, %268)
  };
  %269(%var_1105) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */
}

def @func_9969() -> (Tensor[(16, 14, 12), float64],) {
  %272 = fn () -> (Tensor[(16, 14, 12), float64],) {
    %270 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %271 = %270.0;
    (%271,)
  };
  %272() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_6591() -> (Tensor[(16, 14, 12), float64],) {
  %273 = @func_6120() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %274 = %273.0;
  (%274,)
}

def @func_2493() -> Tensor[(16, 14, 12), bool] {
  %275 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %275.0
}

def @func_3526() -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) {
  %281 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) {
    %276 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
    %277 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %278 = @func_1877() /* ty=Tensor[(16, 14, 12), bool] */;
    %279 = %276.1;
    %280 = %277.1;
    (%278, %279, %280)
  };
  %281() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) */
}

def @func_3696() -> Tensor[(16, 14, 12), bool] {
  @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_1411(%var_1403: Tensor[(9, 6, 12), uint16], %var_1404: Tensor[(9, 6, 12), uint16]) -> Tensor[(9, 6, 12), uint16] {
  %282 = cast(%var_1404, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %283 = shape_of(%var_1403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_1403, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%284, %285) /* ty=Tensor[(9, 6, 12), uint16] */
}

def @func_8005(%var_8003: Tensor[(78), bool], %var_8004: Tensor[(1760), uint16]) -> (Tensor[(1080), uint16], Tensor[(78), bool], Tensor[(16, 11, 10), uint16], Tensor[(1760), uint16], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), float32]) {
  %303 = fn (%var_7975: Tensor[(78), bool], %var_7982: Tensor[(1760), uint16]) -> (Tensor[(1080), uint16], Tensor[(78), bool], Tensor[(16, 11, 10), uint16], Tensor[(1760), uint16], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), float32]) {
    %286 = @func_7630() /* ty=(Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %287 = cast(%var_7982, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %288 = cast(%var_7982, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %289 = reshape(%287, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %290 = reshape(%288, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %291 = @func_6205() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %292 = cast(%var_7975, dtype="bool") /* ty=Tensor[(78), bool] */;
    %293 = reshape(%292, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), bool] */;
    %294 = @func_7218(%293) /* ty=(Tensor[(13, 1, 6), bool],) */;
    %295 = %294.0;
    %296 = cast(%295, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
    %297 = log10(%296) /* ty=Tensor[(13, 1, 6), float64] */;
    %298 = cast(%297, dtype="float32") /* ty=Tensor[(13, 1, 6), float32] */;
    %299 = %286.1;
    %300 = @func_1173(%289, %290) /* ty=Tensor[(16, 11, 10), uint16] */;
    %301 = %291.0;
    %302 = cosh(%298) /* ty=Tensor[(13, 1, 6), float32] */;
    (%299, %var_7975, %300, %var_7982, %301, %302)
  };
  %303(%var_8003, %var_8004) /* ty=(Tensor[(1080), uint16], Tensor[(78), bool], Tensor[(16, 11, 10), uint16], Tensor[(1760), uint16], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), float32]) */
}

def @func_8045() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %307 = fn () -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
    %304 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %305 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
    %306 = %304.0;
    (%305, %306)
  };
  %307() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */
}

def @func_10146(%var_10144: Tensor[(8, 60), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), int64], Tensor[(8, 60), float32]) {
  @func_10143(%var_10144) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), int64], Tensor[(8, 60), float32]) */
}

def @func_4424() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %311 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
    %308 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %309 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
    %310 = %308.0;
    (%309, %310)
  };
  %311() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */
}

def @func_9702() -> (Tensor[(9, 10, 5), float32], Tensor[(16, 14, 12), uint32]) {
  @func_9700() /* ty=(Tensor[(9, 10, 5), float32], Tensor[(16, 14, 12), uint32]) */
}

def @func_3041() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %319 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
    %312 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %313 = cast(meta[relay.Constant][7] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %314 = reshape(%313, newshape=[480]) /* ty=Tensor[(480), uint64] */;
    %315 = @func_2949(%314) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
    %316 = %312.0;
    %317 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
    %318 = %315.1;
    (%316, %317, %318, meta[relay.Constant][7] /* ty=Tensor[(480), uint64] */)
  };
  %319() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */
}

def @func_1560(%var_1559: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) {
  %334 = fn (%var_1540: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) {
    %320 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %321 = %320.0;
    %322 = cast(%var_1540, dtype="int64") /* ty=Tensor[(16, 14, 12), int64] */;
    %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%321, dtype="int64") /* ty=Tensor[(16, 14, 12), int64] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %326 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
    %327 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
    %328 = reshape(%326, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %329 = reshape(%327, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %330 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %331 = bitwise_xor(%324, %325) /* ty=Tensor[(16, 14, 12), int64] */;
    %332 = @func_1411(%328, %329) /* ty=Tensor[(9, 6, 12), uint16] */;
    %333 = %330.0;
    (%331, %332, meta[relay.Constant][8] /* ty=Tensor[(648), uint16] */, %333)
  };
  %334(%var_1559) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */
}

def @func_4531(%var_4529: Tensor[(1760), uint16], %var_4530: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) {
  %354 = fn (%var_4502: Tensor[(1760), uint16], %var_4524: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) {
    %335 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
    %336 = cast(%var_4502, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %337 = cast(%var_4502, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %338 = reshape(%336, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %339 = reshape(%337, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %340 = @func_1173(%338, %339) /* ty=Tensor[(16, 11, 10), uint16] */;
    %341 = cast(%340, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
    %342 = sin(%341) /* ty=Tensor[(16, 11, 10), float64] */;
    %343 = cast(%340, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
    %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%342, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %347 = cast(%var_4524, dtype="int8") /* ty=Tensor[(1760), int8] */;
    %348 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(1), int32] */;
    %349 = cast(%var_4502, dtype="int8") /* ty=Tensor[(1760), int8] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?), int8] */;
    %351 = %335.1;
    %352 = floor_mod(%345, %346) /* ty=Tensor[(16, 11, 10), float64] */;
    %353 = bitwise_or(%349, %350) /* ty=Tensor[(1760), int8] */;
    (%351, %352, %353)
  };
  %354(%var_4529, %var_4530) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) */
}

def @main() -> (Tensor[(15, 5, 1), float64],) {
  %355 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %356 = sin(%355) /* ty=Tensor[(15, 5, 1), float64] */;
  (%356,)
}

def @func_10198(%var_10196: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) {
  @func_10195(%var_10196) /* ty=(Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) */
}

def @func_4633(%var_4630: Tensor[(10, 3, 6), bool], %var_4631: Tensor[(10, 3, 6), bool], %var_4632: Tensor[(1760), uint16]) -> (Tensor[(10, 3, 6), bool], Tensor[(16, 14, 12), uint32], Tensor[(1760), uint16], Tensor[(16, 11, 10), float32]) {
  %379 = fn (%var_4601: Tensor[(10, 3, 6), bool], %var_4602: Tensor[(10, 3, 6), bool], %var_4616: Tensor[(1760), uint16]) -> (Tensor[(10, 3, 6), bool], Tensor[(16, 14, 12), uint32], Tensor[(1760), uint16], Tensor[(16, 11, 10), float32]) {
    %357 = cast(%var_4602, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %358 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_4601, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %362 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %363 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %364 = reshape(%362, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %365 = reshape(%363, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %366 = @func_1173(%364, %365) /* ty=Tensor[(16, 11, 10), uint16] */;
    %367 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %368 = cast(%var_4616, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %369 = reshape(%367, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %370 = reshape(%368, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %371 = @func_1173(%369, %370) /* ty=Tensor[(16, 11, 10), uint16] */;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
    %373 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%366, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %376 = logical_or(%359, %360) /* ty=Tensor[(10, 3, 6), bool] */;
    %377 = %361.0;
    %378 = power(%374, %375) /* ty=Tensor[(16, 11, 10), float32] */;
    (%376, %377, %var_4616, %378)
  };
  %379(%var_4630, %var_4631, %var_4632) /* ty=(Tensor[(10, 3, 6), bool], Tensor[(16, 14, 12), uint32], Tensor[(1760), uint16], Tensor[(16, 11, 10), float32]) */
}

def @func_8415(%var_8414: Tensor[(4, 80), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), bool], Tensor[(78), bool], Tensor[(4, 16, 5), int8], Tensor[(4, 80), int8]) {
  %397 = fn (%var_8400: Tensor[(4, 80), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), bool], Tensor[(78), bool], Tensor[(4, 16, 5), int8], Tensor[(4, 80), int8]) {
    %380 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
    %381 = @func_6664() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
    %382 = @func_2840() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */;
    %383 = @func_3599() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %384 = cast(meta[relay.Constant][10] /* ty=Tensor[(78), bool] */, dtype="bool") /* ty=Tensor[(78), bool] */;
    %385 = reshape(%384, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), bool] */;
    %386 = @func_7218(%385) /* ty=(Tensor[(13, 1, 6), bool],) */;
    %387 = cast(%var_8400, dtype="int8") /* ty=Tensor[(4, 80), int8] */;
    %388 = reshape(%387, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
    %389 = @func_1905(%388) /* ty=(Tensor[(4, 16, 5), int8],) */;
    %390 = %380.0;
    %391 = %381.0;
    %392 = @func_6556() /* ty=Tensor[(16, 14, 12), bool] */;
    %393 = %382.0;
    %394 = %383.0;
    %395 = %386.0;
    %396 = %389.0;
    (%390, %391, %392, %393, %394, %395, meta[relay.Constant][10] /* ty=Tensor[(78), bool] */, %396, %var_8400)
  };
  %397(%var_8414) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(13, 1, 6), bool], Tensor[(78), bool], Tensor[(4, 16, 5), int8], Tensor[(4, 80), int8]) */
}

def @func_6426() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %398 = @func_4423() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %399 = @func_4543() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %400 = @func_6304() /* ty=(Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) */;
  %401 = %398.0;
  %402 = %399.0;
  %403 = %400.1;
  (%401, %402, %403)
}

def @func_8580(%var_8510: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(8, 5, 9), bool], Tensor[(16, 14, 12), bool]) {
  %404 = cast(%var_8510, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %405 = log(%404) /* ty=Tensor[(8, 5, 9), float64] */;
  %406 = cast(%var_8510, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %410 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %411 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %412 = cast(%var_8510, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %413 = acosh(%412) /* ty=Tensor[(8, 5, 9), float32] */;
  %414 = cast(%405, dtype="bool") /* ty=Tensor[(8, 5, 9), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(8, 5, 9), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = left_shift(%408, %409) /* ty=Tensor[(8, 5, 9), uint8] */;
  %419 = %410.0;
  %420 = %411.0;
  %421 = not_equal(%416, %417) /* ty=Tensor[(8, 5, 9), bool] */;
  %422 = @func_4377() /* ty=Tensor[(16, 14, 12), bool] */;
  (%418, %419, %420, %421, %422)
}

def @func_4377() -> Tensor[(16, 14, 12), bool] {
  %423 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %423.0
}

def @func_4379() -> Tensor[(16, 14, 12), bool] {
  @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_4156() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) {
  %424 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %425 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %426 = reshape(%425, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float64] */;
  %427 = @func_4055(%426) /* ty=(Tensor[(3, 8, 16), float64],) */;
  %428 = %424.0;
  %429 = @func_3291() /* ty=Tensor[(16, 14, 12), float64] */;
  %430 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %431 = %427.0;
  (%428, %429, %430, %431, meta[relay.Constant][11] /* ty=Tensor[(384), float64] */)
}

def @func_9887() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  @func_9885() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_9021(%var_9001: Tensor[(1760), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(1760), uint16], Tensor[(16, 14, 12), uint32], Tensor[(3, 216), float64]) {
  %432 = @func_2252() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) */;
  %433 = cast(%var_9001, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %434 = cast(%var_9001, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %435 = reshape(%433, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
  %436 = reshape(%434, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
  %437 = @func_4528(%435, %436) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 11, 10), float64], Tensor[(1760), int8]) */;
  %438 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %439 = @func_3190() /* ty=Tensor[(3, 216), float64] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %441 = rsqrt(%440) /* ty=Tensor[(3, 216), float64] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(3, 216), float32] */;
  %443 = sinh(%442) /* ty=Tensor[(3, 216), float32] */;
  %444 = cast(%439, dtype="uint8") /* ty=Tensor[(3, 216), uint8] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(2), int32] */;
  %446 = cast(%443, dtype="uint8") /* ty=Tensor[(3, 216), uint8] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %448 = minimum(%446, %447) /* ty=Tensor[(3, 216), uint8] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %450 = shape_of(%441, dtype="int32") /* ty=Tensor[(2), int32] */;
  %451 = cast(%441, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %453 = %432.0;
  %454 = @func_7542() /* ty=Tensor[(16, 14, 12), bool] */;
  %455 = %437.0;
  %456 = %438.1;
  %457 = add(%451, %452) /* ty=Tensor[(3, 216), float64] */;
  (%453, %454, %455, %var_9001, %456, %457)
}

def @func_7220(%var_7219: Tensor[(13, 1, 6), bool]) -> (Tensor[(13, 1, 6), bool],) {
  %464 = fn (%var_7188: Tensor[(13, 1, 6), bool]) -> (Tensor[(13, 1, 6), bool],) {
    %458 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %459 = cast(%var_7188, dtype="bool") /* ty=Tensor[(13, 1, 6), bool] */;
    %460 = logical_and(%458, %459) /* ty=Tensor[(13, 1, 6), bool] */;
    %461 = cast(%460, dtype="bool") /* ty=Tensor[(13, 1, 6), bool] */;
    %462 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %463 = greater_equal(%461, %462) /* ty=Tensor[(13, 1, 6), bool] */;
    (%463,)
  };
  %464(%var_7219) /* ty=(Tensor[(13, 1, 6), bool],) */
}

def @func_3883() -> (Tensor[(16, 14, 12), uint32],) {
  %465 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
  %466 = %465.1;
  (%466,)
}

def @func_8470() -> Tensor[(16, 14, 12), bool] {
  %468 = fn () -> Tensor[(16, 14, 12), bool] {
    %467 = @func_4291() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32]) */;
    %467.0
  };
  %468() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10395(%var_10387: Tensor[(320, 1), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(4, 16, 5), int8], Tensor[(320, 1), int8]) {
  %469 = @func_3769() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %470 = cast(%var_10387, dtype="int8") /* ty=Tensor[(320, 1), int8] */;
  %471 = reshape(%470, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
  %472 = @func_1905(%471) /* ty=(Tensor[(4, 16, 5), int8],) */;
  %473 = %469.0;
  %474 = %472.0;
  (%473, %474, %var_10387)
}

def @func_10289(%var_10288: Tensor[(15, 9, 2), uint64]) -> (Tensor[(15, 9, 2), bool], Tensor[(16, 14, 12), bool]) {
  %481 = fn (%var_10259: Tensor[(15, 9, 2), uint64]) -> (Tensor[(15, 9, 2), bool], Tensor[(16, 14, 12), bool]) {
    %475 = cast(%var_10259, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
    %476 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 9, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 9, 2), uint64] */, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %479 = not_equal(%477, %478) /* ty=Tensor[(15, 9, 2), bool] */;
    %480 = @func_8469() /* ty=Tensor[(16, 14, 12), bool] */;
    (%479, %480)
  };
  %481(%var_10288) /* ty=(Tensor[(15, 9, 2), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_817() -> (Tensor[(16, 14, 12), bool],) {
  %482 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %483 = %482.0;
  (%483,)
}

def @func_1436(%var_1434: Tensor[(10, 4, 12), uint64]) -> Tensor[(10, 4, 12), uint64] {
  @func_1433(%var_1434) /* ty=Tensor[(10, 4, 12), uint64] */
}

def @func_7631() -> (Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %495 = fn () -> (Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
    %484 = cast(meta[relay.Constant][13] /* ty=Tensor[(1080), uint16] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
    %485 = reshape(%484, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
    %486 = @func_883(%485) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) */;
    %487 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
    %488 = @func_5287() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) */;
    %489 = @func_4599() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
    %490 = @func_6480() /* ty=Tensor[(8, 7, 7), float32] */;
    %491 = %486.1;
    %492 = %487.3;
    %493 = %488.0;
    %494 = %489.0;
    (%490, %491, meta[relay.Constant][13] /* ty=Tensor[(1080), uint16] */, %492, %493, %494)
  };
  %495() /* ty=(Tensor[(8, 7, 7), float32], Tensor[(1080), uint16], Tensor[(1080), uint16], Tensor[(3, 216), uint16], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */
}

def @func_10143(%var_10129: Tensor[(8, 60), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), int64], Tensor[(8, 60), float32]) {
  %496 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %497 = cast(%var_10129, dtype="uint64") /* ty=Tensor[(8, 60), uint64] */;
  %498 = reshape(%497, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %499 = @func_2949(%498) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %500 = %499.1;
  %501 = cast(%var_10129, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="int64") /* ty=Tensor[(10, 4, 12), int64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %505 = cast(%var_10129, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %506 = %496.0;
  %507 = bitwise_and(%503, %504) /* ty=Tensor[(10, 4, 12), int64] */;
  %508 = atan(%505) /* ty=Tensor[(8, 60), float32] */;
  (%506, %507, %508)
}

def @func_5468() -> Tensor[(16, 14, 12), bool] {
  %509 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %509() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_4661(%var_4659: Tensor[(13, 8, 1), float32], %var_4660: Tensor[(5, 126), uint16]) -> (Tensor[(13, 8, 1), float32], Tensor[(1, 630), uint16], Tensor[(5, 126), uint16]) {
  @func_4657(%var_4659, %var_4660) /* ty=(Tensor[(13, 8, 1), float32], Tensor[(1, 630), uint16], Tensor[(5, 126), uint16]) */
}

def @func_9386() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %513 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
    %510 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %511 = @func_5206() /* ty=Tensor[(16, 14, 12), bool] */;
    %512 = %510.0;
    (%511, %512)
  };
  %513() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */
}

def @func_3062() -> (Tensor[(16, 14, 12), uint32],) {
  %514 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %515 = %514.1;
  (%515,)
}

def @func_6255() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %516 = @func_5554() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %517 = %516.0;
  %518 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %521 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%517, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %524 = floor_divide(%522, %523) /* ty=Tensor[(16, 14, 12), float64] */;
  %525 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
  (%524, %525)
}

def @func_3147() -> (Tensor[(16, 14, 12), bool],) {
  @func_3145() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_7283(%var_7282: Tensor[(9, 11, 12), int32]) -> (Tensor[(9, 11, 12), int32], Tensor[(9, 11, 12), float32]) {
  %536 = fn (%var_7270: Tensor[(9, 11, 12), int32]) -> (Tensor[(9, 11, 12), int32], Tensor[(9, 11, 12), float32]) {
    %526 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
    %527 = shape_of(%var_7270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%var_7270, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %530 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 11, 12), int32] */, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
    %531 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 11, 12), int32] */, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %534 = left_shift(%528, %529) /* ty=Tensor[(9, 11, 12), int32] */;
    %535 = mod(%532, %533) /* ty=Tensor[(9, 11, 12), float32] */;
    (%534, %535)
  };
  %536(%var_7282) /* ty=(Tensor[(9, 11, 12), int32], Tensor[(9, 11, 12), float32]) */
}

def @func_765() -> Tensor[(16, 14, 12), float64] {
  %540 = fn () -> Tensor[(16, 14, 12), float64] {
    %537 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %538 = %537.0;
    %539 = cast(%538, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    cosh(%539) /* ty=Tensor[(16, 14, 12), float64] */
  };
  %540() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_9350() -> Tensor[(16, 14, 12), uint32] {
  %542 = fn () -> Tensor[(16, 14, 12), uint32] {
    %541 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
    %541.3
  };
  %542() /* ty=Tensor[(16, 14, 12), uint32] */
}

def @func_9904() -> (Tensor[(16, 14, 12), bool],) {
  %545 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %543 = @func_7448() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %544 = %543.0;
    (%544,)
  };
  %545() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_885(%var_884: Tensor[(1080), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) {
  %556 = fn (%var_863: Tensor[(1080), uint16]) -> (Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) {
    %546 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %547 = cast(%var_863, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
    %548 = reshape(%547, newshape=[9, 15, 8]) /* ty=Tensor[(9, 15, 8), uint16] */;
    %549 = @func_711(%548) /* ty=(Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) */;
    %550 = %549.2;
    %551 = cast(%550, dtype="float64") /* ty=Tensor[(2688), float64] */;
    %552 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
    %553 = %546.1;
    %554 = sigmoid(%551) /* ty=Tensor[(2688), float64] */;
    %555 = %552.1;
    (%553, %var_863, %554, %555)
  };
  %556(%var_884) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) */
}

def @func_1467(%var_1465: Tensor[(96), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) {
  @func_1464(%var_1465) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) */
}

def @func_9983() -> (Tensor[(16, 14, 12), uint32],) {
  %559 = fn () -> (Tensor[(16, 14, 12), uint32],) {
    %557 = @func_7899() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %558 = %557.0;
    (%558,)
  };
  %559() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_4975(%var_4973: Tensor[(10, 7, 8), float64]) -> (Tensor[(10, 7, 8), float64], Tensor[(16, 14, 12), float64]) {
  @func_4972(%var_4973) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(16, 14, 12), float64]) */
}

def @func_10027() -> (Tensor[(16, 14, 12), bool],) {
  %562 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %560 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %561 = %560.0;
    (%561,)
  };
  %562() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_730() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
  %569 = fn () -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) {
    %563 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %564 = %563.0;
    %565 = cast(%564, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %566 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %567 = sin(%565) /* ty=Tensor[(16, 14, 12), float64] */;
    %568 = %566.0;
    (%567, %568)
  };
  %569() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */
}

def @func_1301(%var_1300: float64) -> Tensor[(8, 7, 7), float32] {
  %575 = fn (%var_1284: float64) -> Tensor[(8, 7, 7), float32] {
    %570 = cast(%var_1284, dtype="float64") /* ty=float64 */;
    %571 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 7), float64] */;
    %572 = floor_mod(%570, %571) /* ty=Tensor[(8, 7, 7), float64] */;
    %573 = cast(%var_1284, dtype="float32") /* ty=float32 */;
    %574 = cast(%572, dtype="float32") /* ty=Tensor[(8, 7, 7), float32] */;
    power(%573, %574) /* ty=Tensor[(8, 7, 7), float32] */
  };
  %575(%var_1300) /* ty=Tensor[(8, 7, 7), float32] */
}

def @func_9412(%var_9407: Tensor[(2, 4, 1), int16]) -> Tensor[(2, 4, 10), bool] {
  %576 = cast(%var_9407, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %577 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
  less(%576, %577) /* ty=Tensor[(2, 4, 10), bool] */
}

def @func_6179() -> (Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) {
  %578 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %579 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %580 = reshape(%579, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %581 = @func_2536(%580) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
  %582 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %583 = %578.0;
  %584 = %581.1;
  %585 = %582.0;
  (%583, %584, meta[relay.Constant][18] /* ty=Tensor[(630), uint16] */, %585)
}

def @func_6731() -> Tensor[(3, 216), float64] {
  @func_3190() /* ty=Tensor[(3, 216), float64] */
}

def @func_8887() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %592 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
    %586 = @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %587 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %588 = @func_8054() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %589 = %586.0;
    %590 = %587.0;
    %591 = %588.0;
    (%589, %590, %591)
  };
  %592() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_6482() -> Tensor[(8, 7, 7), float32] {
  @func_6480() /* ty=Tensor[(8, 7, 7), float32] */
}

def @func_5555() -> (Tensor[(16, 14, 12), float32],) {
  %595 = fn () -> (Tensor[(16, 14, 12), float32],) {
    %593 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %594 = %593.0;
    (%594,)
  };
  %595() /* ty=(Tensor[(16, 14, 12), float32],) */
}

def @func_4230() -> Tensor[(16, 14, 12), bool] {
  %596 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %596.0
}

def @func_5788(%var_5786: Tensor[(1, 6, 3), float64], %var_5787: Tensor[(2, 6, 3), float64]) -> (Tensor[(2, 6, 3), float64], Tensor[(2, 6, 3), bool], Tensor[(16, 14, 12), uint32]) {
  %605 = fn (%var_5759: Tensor[(1, 6, 3), float64], %var_5760: Tensor[(2, 6, 3), float64]) -> (Tensor[(2, 6, 3), float64], Tensor[(2, 6, 3), bool], Tensor[(16, 14, 12), uint32]) {
    %597 = cast(%var_5759, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
    %598 = cast(%var_5760, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
    %599 = cast(%var_5760, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
    %600 = cast(%var_5759, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
    %601 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %602 = divide(%597, %598) /* ty=Tensor[(2, 6, 3), float64] */;
    %603 = less_equal(%599, %600) /* ty=Tensor[(2, 6, 3), bool] */;
    %604 = %601.1;
    (%602, %603, %604)
  };
  %605(%var_5786, %var_5787) /* ty=(Tensor[(2, 6, 3), float64], Tensor[(2, 6, 3), bool], Tensor[(16, 14, 12), uint32]) */
}

def @func_5993(%var_5978: Tensor[(1134), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) {
  %606 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %607 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
  %608 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
  %609 = @func_5287() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) */;
  %610 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %611 = cast(meta[relay.Constant][19] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %612 = reshape(%611, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
  %613 = @func_2226(%612) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
  %614 = cast(-9.00953f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %615 = cast(%var_5978, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %616 = reshape(%614, newshape=[]) /* ty=float64 */;
  %617 = reshape(%615, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), float64] */;
  %618 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %619 = %606.0;
  %620 = %607.1;
  %621 = %608.0;
  %622 = %609.0;
  %623 = @func_2493() /* ty=Tensor[(16, 14, 12), bool] */;
  %624 = %610.0;
  %625 = %613.0;
  %626 = @func_2652(%616, %617) /* ty=Tensor[(14, 9, 9), float64] */;
  %627 = %618.3;
  (%619, %620, %621, %622, %623, %624, %625, meta[relay.Constant][19] /* ty=Tensor[(630), uint16] */, %626, -9.00953f64 /* ty=float64 */, %var_5978, %627)
}

def @func_7933() -> Tensor[(16, 14, 12), float64] {
  %628 = @func_6255() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
  %628.0
}

def @func_3838() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %629 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %630 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %631 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  %632 = %629.0;
  %633 = %630.0;
  (%631, %632, %633)
}

def @func_6820() -> (Tensor[(480), bool], Tensor[(16, 14, 12), float64]) {
  %638 = fn () -> (Tensor[(480), bool], Tensor[(16, 14, 12), float64]) {
    %634 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
    %635 = @func_6591() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %636 = %634.2;
    %637 = %635.0;
    (%636, %637)
  };
  %638() /* ty=(Tensor[(480), bool], Tensor[(16, 14, 12), float64]) */
}

def @func_7180(%var_7178: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) {
  @func_7177(%var_7178) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) */
}

def @func_7082() -> Tensor[(16, 14, 12), bool] {
  %639 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %639() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3064() -> (Tensor[(16, 14, 12), uint32],) {
  @func_3062() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_7935() -> Tensor[(16, 14, 12), float64] {
  @func_7933() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_1433(%var_1428: Tensor[(10, 4, 12), uint64]) -> Tensor[(10, 4, 12), uint64] {
  %640 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 4, 12), uint64] */, dtype="uint64") /* ty=Tensor[(10, 4, 12), uint64] */;
  %641 = shape_of(%var_1428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_1428, dtype="uint64") /* ty=Tensor[(10, 4, 12), uint64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%642, %643) /* ty=Tensor[(10, 4, 12), uint64] */
}

def @func_666() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) {
  %656 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) {
    %644 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %645 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %646 = @func_433() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %647 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %648 = %647.0;
    %649 = cast(%648, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
    %650 = sqrt(%649) /* ty=Tensor[(16, 14, 12), float32] */;
    %651 = cast(%650, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %652 = %644.0;
    %653 = %645.0;
    %654 = %646.0;
    %655 = atan(%651) /* ty=Tensor[(16, 14, 12), float64] */;
    (%652, %653, %654, %655)
  };
  %656() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */
}

def @func_2652(%var_2638: float64, %var_2639: Tensor[(14, 9, 9), float64]) -> Tensor[(14, 9, 9), float64] {
  %657 = cast(%var_2638, dtype="float64") /* ty=float64 */;
  %658 = cast(%var_2639, dtype="float64") /* ty=Tensor[(14, 9, 9), float64] */;
  maximum(%657, %658) /* ty=Tensor[(14, 9, 9), float64] */
}

def @func_2297() -> (Tensor[(16, 14, 12), bool],) {
  @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_5751(%var_5749: bool, %var_5750: Tensor[(7, 12, 9), bool]) -> (Tensor[(7, 12, 9), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %677 = fn (%var_5690: bool, %var_5691: Tensor[(7, 12, 9), bool]) -> (Tensor[(7, 12, 9), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
    %659 = cast(%var_5691, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
    %660 = cast(%var_5690, dtype="int32") /* ty=int32 */;
    %661 = subtract(%659, %660) /* ty=Tensor[(7, 12, 9), int32] */;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
    %663 = log2(%662) /* ty=Tensor[(7, 12, 9), float64] */;
    %664 = cast(%var_5690, dtype="bool") /* ty=bool */;
    %665 = cast(%var_5691, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
    %666 = logical_and(%664, %665) /* ty=Tensor[(7, 12, 9), bool] */;
    %667 = cast(%666, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
    %668 = sigmoid(%667) /* ty=Tensor[(7, 12, 9), float32] */;
    %669 = cast(%668, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
    %670 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%663, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %673 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %674 = greater(%671, %672) /* ty=Tensor[(7, 12, 9), bool] */;
    %675 = %673.0;
    %676 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
    (%674, %675, %676)
  };
  %677(%var_5749, %var_5750) /* ty=(Tensor[(7, 12, 9), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_4057(%var_4056: Tensor[(3, 8, 16), float64]) -> (Tensor[(3, 8, 16), float64],) {
  %680 = fn (%var_4051: Tensor[(3, 8, 16), float64]) -> (Tensor[(3, 8, 16), float64],) {
    %678 = cast(%var_4051, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %679 = cos(%678) /* ty=Tensor[(3, 8, 16), float64] */;
    (%679,)
  };
  %680(%var_4056) /* ty=(Tensor[(3, 8, 16), float64],) */
}

def @func_1503() -> Tensor[(16, 14, 12), bool] {
  %681 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_968() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %681() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_9214(%var_9198: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(480), uint64], Tensor[(480), uint64], Tensor[(14, 4, 6), int16], Tensor[(4, 84), float32]) {
  %682 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %683 = cast(%var_9198, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %684 = reshape(%683, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %685 = @func_7177(%684) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool]) */;
  %686 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 84), int16] */, dtype="int16") /* ty=Tensor[(4, 84), int16] */;
  %687 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 84), int16] */, dtype="int16") /* ty=Tensor[(4, 84), int16] */;
  %688 = reshape(%686, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), int16] */;
  %689 = reshape(%687, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), int16] */;
  %690 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 84), int16] */, dtype="float32") /* ty=Tensor[(4, 84), float32] */;
  %691 = %682.0;
  %692 = %685.2;
  %693 = @func_4340(%688, %689) /* ty=Tensor[(14, 4, 6), int16] */;
  %694 = asin(%690) /* ty=Tensor[(4, 84), float32] */;
  (%691, %692, %var_9198, %693, %694)
}

def @func_9685() -> Tensor[(16, 14, 12), bool] {
  @func_9683() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_9638() -> Tensor[(16, 14, 12), bool] {
  @func_9636() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_7854() -> (Tensor[(16, 14, 12), float64],) {
  %695 = @func_6041() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) */;
  %696 = %695.0;
  (%696,)
}

def @func_8738() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 4, 12), int64], Tensor[(768), int64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16]) {
  @func_8736() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 4, 12), int64], Tensor[(768), int64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16]) */
}

def @func_1586() -> Tensor[(16, 14, 12), bool] {
  @func_414() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3966() -> Tensor[(16, 14, 12), bool] {
  %697 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %697() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_2629() -> (Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) {
  %702 = fn () -> (Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) {
    %698 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
    %699 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %700 = %698.3;
    %701 = %699.0;
    (%700, %701)
  };
  %702() /* ty=(Tensor[(3, 216), uint16], Tensor[(16, 14, 12), bool]) */
}

def @func_8736() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 4, 12), int64], Tensor[(768), int64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16]) {
  %703 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %704 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), int64] */, dtype="int64") /* ty=Tensor[(768), int64] */;
  %705 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), int64] */, dtype="int64") /* ty=Tensor[(768), int64] */;
  %706 = reshape(%704, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), int64] */;
  %707 = reshape(%705, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), int64] */;
  %708 = @func_6304() /* ty=(Tensor[(10, 9, 7), int16], Tensor[(16, 14, 12), bool]) */;
  %709 = @func_6741() /* ty=(Tensor[(9, 6, 12), uint16],) */;
  %710 = %703.0;
  %711 = @func_5400(%706, %707) /* ty=Tensor[(16, 4, 12), int64] */;
  %712 = %708.1;
  %713 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  %714 = %709.0;
  (%710, %711, meta[relay.Constant][22] /* ty=Tensor[(768), int64] */, %712, %713, %714)
}

def @func_416() -> Tensor[(16, 14, 12), bool] {
  @func_414() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3885() -> (Tensor[(16, 14, 12), uint32],) {
  @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_970() -> Tensor[(16, 14, 12), bool] {
  @func_968() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_10398(%var_10396: Tensor[(320, 1), int8]) -> (Tensor[(16, 14, 12), bool], Tensor[(4, 16, 5), int8], Tensor[(320, 1), int8]) {
  @func_10395(%var_10396) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(4, 16, 5), int8], Tensor[(320, 1), int8]) */
}

def @func_414() -> Tensor[(16, 14, 12), bool] {
  %715 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %715.0
}

def @func_10195(%var_10185: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), float64]) {
  %716 = cast(-3.86428f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %717 = cast(%var_10185, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %718 = cast(%var_10185, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
  %719 = subtract(%716, %717) /* ty=Tensor[(14, 9, 7), float32] */;
  %720 = acosh(%718) /* ty=Tensor[(14, 9, 7), float64] */;
  (%719, %720)
}

def @func_9481(%var_9479: Tensor[(320), int8]) -> (Tensor[(384), float64], Tensor[(4, 16, 5), int8], Tensor[(320), int8], Tensor[(16, 14, 12), bool]) {
  @func_9478(%var_9479) /* ty=(Tensor[(384), float64], Tensor[(4, 16, 5), int8], Tensor[(320), int8], Tensor[(16, 14, 12), bool]) */
}

def @func_576(%var_574: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) {
  @func_573(%var_574) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) */
}

def @func_6866() -> Tensor[(16, 14, 12), uint32] {
  %722 = fn () -> Tensor[(16, 14, 12), uint32] {
    %721 = @func_5653() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */;
    %721.0
  };
  %722() /* ty=Tensor[(16, 14, 12), uint32] */
}

def @func_10341(%var_10338: Tensor[(13, 6, 7), float64], %var_10339: Tensor[(882), float32], %var_10340: Tensor[(13, 6, 7), float64]) -> (Tensor[(16, 14, 12), float64], Tensor[(14, 9, 7), float64], Tensor[(882), float32], Tensor[(13, 6, 7), bool], Tensor[(8, 7, 7), bool]) {
  @func_10336(%var_10338, %var_10339, %var_10340) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(14, 9, 7), float64], Tensor[(882), float32], Tensor[(13, 6, 7), bool], Tensor[(8, 7, 7), bool]) */
}

def @func_6925() -> (Tensor[(16, 14, 12), int64],) {
  %725 = fn () -> (Tensor[(16, 14, 12), int64],) {
    %723 = @func_2840() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */;
    %724 = %723.1;
    (%724,)
  };
  %725() /* ty=(Tensor[(16, 14, 12), int64],) */
}

def @func_8449() -> Tensor[(16, 14, 12), bool] {
  %726 = @func_2873() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %726.0
}

def @func_2538(%var_2537: Tensor[(1, 630), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) {
  %732 = fn (%var_2531: Tensor[(1, 630), uint16]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) {
    %727 = cast(%var_2531, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
    %728 = reshape(%727, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
    %729 = @func_2226(%728) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
    %730 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
    %731 = %729.0;
    (%730, %731, %var_2531)
  };
  %732(%var_2537) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */
}

def @func_7385() -> (Tensor[(16, 14, 12), float32],) {
  @func_7383() /* ty=(Tensor[(16, 14, 12), float32],) */
}

def @func_4600() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %737 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
    %733 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %734 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
    %735 = %733.1;
    %736 = %734.2;
    (%735, %736)
  };
  %737() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */
}

def @func_5288() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) {
  %746 = fn () -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) {
    %738 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %739 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
    %740 = %739.1;
    %741 = cast(%740, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
    %742 = reshape(%741, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
    %743 = @func_1558(%742) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
    %744 = %738.1;
    %745 = %743.0;
    (%744, %740, %745)
  };
  %746() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int64]) */
}

def @func_4972(%var_4953: Tensor[(10, 7, 8), float64]) -> (Tensor[(10, 7, 8), float64], Tensor[(16, 14, 12), float64]) {
  %747 = cast(%var_4953, dtype="float64") /* ty=Tensor[(10, 7, 8), float64] */;
  %748 = @func_4156() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) */;
  %749 = sinh(%747) /* ty=Tensor[(10, 7, 8), float64] */;
  %750 = %748.1;
  (%749, %750)
}

def @func_2618() -> Tensor[(16, 14, 12), bool] {
  %752 = fn () -> Tensor[(16, 14, 12), bool] {
    %751 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %751.0
  };
  %752() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_8090() -> (Tensor[(16, 14, 12), bool],) {
  %755 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %753 = @func_6205() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %754 = %753.0;
    (%754,)
  };
  %755() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_7342(%var_7302: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %756 = cast(%var_7302, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %757 = reshape(%756, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %758 = @func_5319(%757) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
  %759 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %760 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %761 = @func_4129() /* ty=Tensor[(16, 14, 12), bool] */;
  %762 = %758.1;
  %763 = %759.0;
  %764 = @func_6957() /* ty=Tensor[(16, 14, 12), float64] */;
  %765 = %760.0;
  (%761, %762, %var_7302, %763, %764, %765)
}

def @func_713(%var_712: Tensor[(9, 15, 8), uint16]) -> (Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) {
  %780 = fn (%var_685: Tensor[(9, 15, 8), uint16]) -> (Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) {
    %766 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(9, 15, 8), uint16] */;
    %767 = shape_of(%var_685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%var_685, dtype="uint16") /* ty=Tensor[(9, 15, 8), uint16] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %770 = maximum(%768, %769) /* ty=Tensor[(9, 15, 8), uint16] */;
    %771 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 15, 8), uint16] */, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %775 = cast(meta[relay.Constant][24] /* ty=Tensor[(2688), uint32] */, dtype="uint32") /* ty=Tensor[(2688), uint32] */;
    %776 = reshape(%775, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
    %777 = @func_573(%776) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), int16]) */;
    %778 = floor_divide(%773, %774) /* ty=Tensor[(9, 15, 8), float64] */;
    %779 = %777.0;
    (%778, %779, meta[relay.Constant][24] /* ty=Tensor[(2688), uint32] */)
  };
  %780(%var_712) /* ty=(Tensor[(9, 15, 8), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), uint32]) */
}

def @func_6354() -> Tensor[(16, 14, 12), uint32] {
  %781 = @func_3838() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %781.1
}

def @func_9758() -> Tensor[(16, 14, 12), bool] {
  %782 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_8469() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %782() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3145() -> (Tensor[(16, 14, 12), bool],) {
  %783 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %784 = %783.0;
  (%784,)
}

def @func_1415(%var_1413: Tensor[(9, 6, 12), uint16], %var_1414: Tensor[(9, 6, 12), uint16]) -> Tensor[(9, 6, 12), uint16] {
  @func_1411(%var_1413, %var_1414) /* ty=Tensor[(9, 6, 12), uint16] */
}

def @func_1784(%var_1779: Tensor[(16, 14, 12), float64]) -> (Tensor[(96), float64], Tensor[(96), float64], Tensor[(16, 14, 12), uint64]) {
  %785 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %786 = reshape(%785, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %787 = @func_1464(%786) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) */;
  %788 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %789 = %788.3;
  %790 = cast(%var_1779, dtype="uint64") /* ty=Tensor[(16, 14, 12), uint64] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="uint64") /* ty=Tensor[(16, 14, 12), uint64] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %794 = %787.4;
  %795 = subtract(%792, %793) /* ty=Tensor[(16, 14, 12), uint64] */;
  (%794, meta[relay.Constant][25] /* ty=Tensor[(96), float64] */, %795)
}

def @func_8451() -> Tensor[(16, 14, 12), bool] {
  @func_8449() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_5015(%var_5013: Tensor[(9, 6, 13), float64], %var_5014: Tensor[(10, 63), uint16]) -> (Tensor[(9, 6, 13), int32], Tensor[(16, 14, 12), uint32], Tensor[(10, 63), uint16]) {
  @func_5011(%var_5013, %var_5014) /* ty=(Tensor[(9, 6, 13), int32], Tensor[(16, 14, 12), uint32], Tensor[(10, 63), uint16]) */
}

def @func_5678() -> (Tensor[(16, 14, 12), uint32],) {
  @func_5676() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_2656(%var_2654: float64, %var_2655: Tensor[(14, 9, 9), float64]) -> Tensor[(14, 9, 9), float64] {
  @func_2652(%var_2654, %var_2655) /* ty=Tensor[(14, 9, 9), float64] */
}

def @func_9287() -> Tensor[(16, 14, 12), bool] {
  @func_4377() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_1020(%var_1019: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) {
  %806 = fn (%var_999: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) {
    %796 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %797 = shape_of(%var_999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_999, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %800 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), uint16] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
    %801 = reshape(%800, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
    %802 = @func_883(%801) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(1080), uint16], Tensor[(2688), float64], Tensor[(16, 14, 12), uint32]) */;
    %803 = power(%798, %799) /* ty=Tensor[(4, 12, 2), float64] */;
    %804 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
    %805 = %802.2;
    (%803, %804, %805, meta[relay.Constant][27] /* ty=Tensor[(1080), uint16] */)
  };
  %806(%var_1019) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) */
}

def @func_9217(%var_9215: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(480), uint64], Tensor[(480), uint64], Tensor[(14, 4, 6), int16], Tensor[(4, 84), float32]) {
  @func_9214(%var_9215) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(480), uint64], Tensor[(480), uint64], Tensor[(14, 4, 6), int16], Tensor[(4, 84), float32]) */
}

def @func_323() -> (Tensor[(16, 14, 12), bool],) {
  %807 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %808 = %807.0;
  (%808,)
}

def @func_2495() -> Tensor[(16, 14, 12), bool] {
  @func_2493() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_4952() -> (Tensor[(16, 14, 12), bool],) {
  %810 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %809 = @func_1502() /* ty=Tensor[(16, 14, 12), bool] */;
    (%809,)
  };
  %810() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_1630() -> (Tensor[(16, 14, 12), bool],) {
  @func_1628() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_6206() -> (Tensor[(16, 14, 12), bool],) {
  %812 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %811 = @func_1877() /* ty=Tensor[(16, 14, 12), bool] */;
    (%811,)
  };
  %812() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_7345(%var_7343: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  @func_7342(%var_7343) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */
}

def @func_7537() -> (Tensor[(40, 12), uint64], Tensor[(16, 14, 12), bool]) {
  @func_7535() /* ty=(Tensor[(40, 12), uint64], Tensor[(16, 14, 12), bool]) */
}

def @func_9885() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %813 = @func_2295() /* ty=(Tensor[(16, 14, 12), bool],) */;
  %814 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  %815 = %813.0;
  (%814, %815)
}

def @func_10183() -> Tensor[(16, 14, 12), bool] {
  %817 = fn () -> Tensor[(16, 14, 12), bool] {
    %816 = @func_9385() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
    %816.0
  };
  %817() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3293() -> Tensor[(16, 14, 12), float64] {
  @func_3291() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_5654() -> (Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) {
  %832 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) {
    %818 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %819 = @func_3040() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */;
    %820 = %819.3;
    %821 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), uint64] */, dtype="int64") /* ty=Tensor[(480), int64] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(1), int32] */;
    %823 = cast(%820, dtype="int64") /* ty=Tensor[(480), int64] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?), int64] */;
    %825 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), uint64] */, dtype="bool") /* ty=Tensor[(480), bool] */;
    %826 = shape_of(%820, dtype="int32") /* ty=Tensor[(1), int32] */;
    %827 = cast(%820, dtype="bool") /* ty=Tensor[(480), bool] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?), bool] */;
    %829 = %818.0;
    %830 = multiply(%823, %824) /* ty=Tensor[(480), int64] */;
    %831 = less(%827, %828) /* ty=Tensor[(480), bool] */;
    (%829, %830, %831)
  };
  %832() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(480), int64], Tensor[(480), bool]) */
}

def @func_8687() -> (Tensor[(630), uint16],) {
  %833 = @func_6179() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(16, 14, 12), uint32]) */;
  %834 = %833.2;
  (%834,)
}

def @func_4809(%var_4808: Tensor[(384), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(630), uint16], Tensor[(3, 8, 16), float64], Tensor[(384), float64], Tensor[(16, 14, 12), bool], Tensor[(10, 8, 2), float32], Tensor[(160), float32], Tensor[(648), float32]) {
  %870 = fn (%var_4780: Tensor[(384), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(630), uint16], Tensor[(3, 8, 16), float64], Tensor[(384), float64], Tensor[(16, 14, 12), bool], Tensor[(10, 8, 2), float32], Tensor[(160), float32], Tensor[(648), float32]) {
    %835 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
    %836 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %837 = @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %838 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %839 = cast(meta[relay.Constant][29] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %840 = reshape(%839, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), uint16] */;
    %841 = @func_2226(%840) /* ty=(Tensor[(10, 9, 7), uint16], Tensor[(16, 14, 12), uint32]) */;
    %842 = cast(%var_4780, dtype="float64") /* ty=Tensor[(384), float64] */;
    %843 = reshape(%842, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float64] */;
    %844 = @func_4055(%843) /* ty=(Tensor[(3, 8, 16), float64],) */;
    %845 = cast(meta[relay.Constant][30] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %846 = reshape(%845, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
    %847 = @func_3660(%846) /* ty=(Tensor[(10, 8, 2), float32],) */;
    %848 = cast(meta[relay.Constant][31] /* ty=Tensor[(648), uint16] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %849 = log10(%848) /* ty=Tensor[(648), float32] */;
    %850 = cast(meta[relay.Constant][31] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
    %851 = cast(meta[relay.Constant][31] /* ty=Tensor[(648), uint16] */, dtype="uint16") /* ty=Tensor[(648), uint16] */;
    %852 = reshape(%850, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %853 = reshape(%851, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %854 = @func_1411(%852, %853) /* ty=Tensor[(9, 6, 12), uint16] */;
    %855 = cast(%854, dtype="uint32") /* ty=Tensor[(9, 6, 12), uint32] */;
    %856 = shape_of(%849, dtype="int32") /* ty=Tensor[(1), int32] */;
    %857 = cast(%849, dtype="uint32") /* ty=Tensor[(648), uint32] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %859 = bitwise_and(%857, %858) /* ty=Tensor[(648), uint32] */;
    %860 = cast(%859, dtype="float32") /* ty=Tensor[(648), float32] */;
    %861 = %835.1;
    %862 = %836.0;
    %863 = %837.0;
    %864 = %838.0;
    %865 = %841.1;
    %866 = %844.0;
    %867 = @func_414() /* ty=Tensor[(16, 14, 12), bool] */;
    %868 = %847.0;
    %869 = erf(%860) /* ty=Tensor[(648), float32] */;
    (%861, %862, %863, %864, %865, meta[relay.Constant][29] /* ty=Tensor[(630), uint16] */, %866, %var_4780, %867, %868, meta[relay.Constant][30] /* ty=Tensor[(160), float32] */, %869)
  };
  %870(%var_4808) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(630), uint16], Tensor[(3, 8, 16), float64], Tensor[(384), float64], Tensor[(16, 14, 12), bool], Tensor[(10, 8, 2), float32], Tensor[(160), float32], Tensor[(648), float32]) */
}

def @func_6557() -> Tensor[(16, 14, 12), bool] {
  %871 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %871() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_2922() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  %872 = @func_1826() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %873 = @func_2493() /* ty=Tensor[(16, 14, 12), bool] */;
  %874 = %872.0;
  (%873, %874)
}

def @func_5996(%var_5994: Tensor[(1134), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) {
  @func_5993(%var_5994) /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(630), uint16], Tensor[(14, 9, 9), float64], float64, Tensor[(1134), float64], Tensor[(480), uint64]) */
}

def @func_5177() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
  %878 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) {
    %875 = @func_2673() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %876 = %875.0;
    %877 = @func_414() /* ty=Tensor[(16, 14, 12), bool] */;
    (%876, %877)
  };
  %878() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */
}

def @func_9113(%var_9112: Tensor[(630), uint16]) -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(630), uint16], Tensor[(1, 630), float32]) {
  %891 = fn (%var_9079: Tensor[(630), uint16]) -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(630), uint16], Tensor[(1, 630), float32]) {
    %879 = @func_5070() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool]) */;
    %880 = @func_8886() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
    %881 = cast(%var_9079, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %882 = reshape(%881, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %883 = @func_2536(%882) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
    %884 = %883.2;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(1, 630), float64] */;
    %886 = sigmoid(%885) /* ty=Tensor[(1, 630), float64] */;
    %887 = cast(%886, dtype="float32") /* ty=Tensor[(1, 630), float32] */;
    %888 = %879.1;
    %889 = %880.1;
    %890 = sqrt(%887) /* ty=Tensor[(1, 630), float32] */;
    (%888, %889, %var_9079, %890)
  };
  %891(%var_9112) /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), bool], Tensor[(630), uint16], Tensor[(1, 630), float32]) */
}

def @func_4180(%var_4178: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), int64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  @func_4177(%var_4178) /* ty=(Tensor[(8, 10, 15), int64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */
}

def @func_1908(%var_1906: Tensor[(4, 16, 5), int8]) -> (Tensor[(4, 16, 5), int8],) {
  @func_1905(%var_1906) /* ty=(Tensor[(4, 16, 5), int8],) */
}

def @func_10230() -> Tensor[(16, 14, 12), bool] {
  %893 = fn () -> Tensor[(16, 14, 12), bool] {
    %892 = @func_8216() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %892.0
  };
  %893() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_9478(%var_9465: Tensor[(320), int8]) -> (Tensor[(384), float64], Tensor[(4, 16, 5), int8], Tensor[(320), int8], Tensor[(16, 14, 12), bool]) {
  %894 = @func_4156() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(3, 8, 16), float64], Tensor[(384), float64]) */;
  %895 = cast(%var_9465, dtype="int8") /* ty=Tensor[(320), int8] */;
  %896 = reshape(%895, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int8] */;
  %897 = @func_1905(%896) /* ty=(Tensor[(4, 16, 5), int8],) */;
  %898 = %894.4;
  %899 = %897.0;
  %900 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
  (%898, %899, %var_9465, %900)
}

def @func_2252() -> (Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], float64) {
  %901 = @func_2101() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %902 = cast(-5.09053f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %903 = reshape(%902, newshape=[]) /* ty=float64 */;
  %904 = %901.0;
  %905 = @func_1299(%903) /* ty=Tensor[(8, 7, 7), float32] */;
  (%904, %905, -5.09053f64 /* ty=float64 */)
}

def @func_1878() -> Tensor[(16, 14, 12), bool] {
  %906 = fn () -> Tensor[(16, 14, 12), bool] {
    @func_1586() /* ty=Tensor[(16, 14, 12), bool] */
  };
  %906() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_3575() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  @func_3573() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */
}

def @func_7856() -> (Tensor[(16, 14, 12), float64],) {
  @func_7854() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_2924() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) {
  @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */
}

def @func_4207() -> (Tensor[(16, 14, 12), float32],) {
  %907 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
  %908 = %907.2;
  (%908,)
}

def @func_6043() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
  @func_6041() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) */
}

def @func_2102() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %916 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
    %909 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %910 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %911 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
    %912 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
    %913 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
    %914 = %909.0;
    %915 = %910.0;
    (%911, %912, %913, %914, %915)
  };
  %916() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */
}

def @func_3770() -> (Tensor[(16, 14, 12), bool],) {
  %918 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %917 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
    (%917,)
  };
  %918() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_3919() -> (Tensor[(16, 14, 12), bool],) {
  %919 = @func_2617() /* ty=Tensor[(16, 14, 12), bool] */;
  (%919,)
}

def @func_6593() -> (Tensor[(16, 14, 12), float64],) {
  @func_6591() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_6665() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %926 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
    %920 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %921 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
    %922 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
    %923 = %920.0;
    %924 = %921.1;
    %925 = %922.1;
    (%923, %924, %925)
  };
  %926() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */
}

def @func_4209() -> (Tensor[(16, 14, 12), float32],) {
  @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */
}

def @func_3662(%var_3661: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float32],) {
  %929 = fn (%var_3642: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float32],) {
    %927 = cast(%var_3642, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
    %928 = log10(%927) /* ty=Tensor[(10, 8, 2), float32] */;
    (%928,)
  };
  %929(%var_3661) /* ty=(Tensor[(10, 8, 2), float32],) */
}

def @func_4544() -> (Tensor[(16, 14, 12), bool],) {
  %932 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %930 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
    %931 = %930.0;
    (%931,)
  };
  %932() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_6743() -> (Tensor[(9, 6, 12), uint16],) {
  @func_6741() /* ty=(Tensor[(9, 6, 12), uint16],) */
}

def @func_4657(%var_4635: Tensor[(13, 8, 1), float32], %var_4654: Tensor[(5, 126), uint16]) -> (Tensor[(13, 8, 1), float32], Tensor[(1, 630), uint16], Tensor[(5, 126), uint16]) {
  %933 = cast(%var_4635, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
  %934 = cosh(%933) /* ty=Tensor[(13, 8, 1), float32] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
  %936 = cast(%var_4654, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %937 = reshape(%936, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %938 = @func_2536(%937) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 9, 7), uint16], Tensor[(1, 630), uint16]) */;
  %939 = asinh(%935) /* ty=Tensor[(13, 8, 1), float32] */;
  %940 = %938.2;
  (%939, %940, %var_4654)
}

def @func_2140() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) {
  %946 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) {
    %941 = cast(meta[relay.Constant][32] /* ty=Tensor[(40, 12), uint64] */, dtype="uint64") /* ty=Tensor[(40, 12), uint64] */;
    %942 = reshape(%941, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
    %943 = @func_968() /* ty=Tensor[(16, 14, 12), bool] */;
    %944 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
    %945 = @func_1433(%942) /* ty=Tensor[(10, 4, 12), uint64] */;
    (%943, %944, %945, meta[relay.Constant][32] /* ty=Tensor[(40, 12), uint64] */)
  };
  %946() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */
}

def @func_819() -> (Tensor[(16, 14, 12), bool],) {
  @func_817() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_325() -> (Tensor[(16, 14, 12), bool],) {
  @func_323() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_3749() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
  %947 = @func_3573() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
  %948 = %947.1;
  %949 = cast(%948, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %950 = reshape(%949, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %951 = @func_1104(%950) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %952 = %951.0;
  (%948, %952)
}

def @func_2874() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
  %957 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) {
    %953 = @func_2101() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
    %954 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %955 = %953.0;
    %956 = %954.1;
    (%955, %956)
  };
  %957() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */
}

def @func_5339() -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) {
  %962 = fn () -> (Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) {
    %958 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %959 = @func_3749() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */;
    %960 = %958.0;
    %961 = %959.0;
    (%960, %961)
  };
  %962() /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) */
}

def @func_9636() -> Tensor[(16, 14, 12), bool] {
  @func_3694() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_6700() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
  %969 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) {
    %963 = @func_5338() /* ty=(Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32]) */;
    %964 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
    %965 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %966 = %963.1;
    %967 = %964.0;
    %968 = %965.1;
    (%966, %967, %968)
  };
  %969() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32]) */
}

def @func_3191() -> Tensor[(3, 216), float64] {
  %973 = fn () -> Tensor[(3, 216), float64] {
    %970 = @func_2020() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */;
    %971 = %970.3;
    %972 = cast(%971, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
    cosh(%972) /* ty=Tensor[(3, 216), float64] */
  };
  %973() /* ty=Tensor[(3, 216), float64] */
}

def @func_3291() -> Tensor[(16, 14, 12), float64] {
  %974 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
  %974.1
}

def @func_10439(%var_10414: Tensor[(14, 10, 1), float64], %var_10426: Tensor[(14, 10, 13), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(14, 10, 13), int16]) {
  %975 = @func_3883() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %976 = cast(%var_10414, dtype="float64") /* ty=Tensor[(14, 10, 1), float64] */;
  %977 = cosh(%976) /* ty=Tensor[(14, 10, 1), float64] */;
  %978 = cast(%977, dtype="int16") /* ty=Tensor[(14, 10, 1), int16] */;
  %979 = cast(%var_10426, dtype="int16") /* ty=Tensor[(14, 10, 13), int16] */;
  %980 = %975.0;
  %981 = subtract(%978, %979) /* ty=Tensor[(14, 10, 13), int16] */;
  (%980, %981)
}

def @func_2021() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) {
  %991 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) {
    %982 = @func_1510() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %983 = @func_1925() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %984 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 216), uint16] */, dtype="uint16") /* ty=Tensor[(3, 216), uint16] */;
    %985 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 216), uint16] */, dtype="uint16") /* ty=Tensor[(3, 216), uint16] */;
    %986 = reshape(%984, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %987 = reshape(%985, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint16] */;
    %988 = %982.0;
    %989 = %983.0;
    %990 = @func_1411(%986, %987) /* ty=Tensor[(9, 6, 12), uint16] */;
    (%988, %989, %990, meta[relay.Constant][33] /* ty=Tensor[(3, 216), uint16] */)
  };
  %991() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool], Tensor[(9, 6, 12), uint16], Tensor[(3, 216), uint16]) */
}

def @func_9843() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) {
  %992 = @func_6664() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */;
  %993 = @func_6865() /* ty=Tensor[(16, 14, 12), uint32] */;
  %994 = %992.2;
  (%993, %994)
}

def @func_7462() -> Tensor[(16, 14, 12), float32] {
  %996 = fn () -> Tensor[(16, 14, 12), float32] {
    %995 = @func_4207() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %995.0
  };
  %996() /* ty=Tensor[(16, 14, 12), float32] */
}

def @func_6041() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
  %997 = @func_2922() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %998 = %997.1;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %1000 = reshape(%999, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %1001 = @func_1104(%1000) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %1002 = %1001.0;
  (%998, %1002)
}

def @func_8506() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
  %1007 = fn () -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) {
    %1003 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %1004 = @func_6591() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %1005 = %1003.0;
    %1006 = %1004.0;
    (%1005, %1006)
  };
  %1007() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64]) */
}

def @func_6257() -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  @func_6255() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */
}

def @func_2295() -> (Tensor[(16, 14, 12), bool],) {
  %1008 = @func_2051() /* ty=Tensor[(16, 14, 12), bool] */;
  (%1008,)
}

def @func_7756() -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
  %1015 = fn () -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
    %1009 = @func_3573() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), uint32]) */;
    %1010 = @func_3919() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %1011 = @func_6924() /* ty=(Tensor[(16, 14, 12), int64],) */;
    %1012 = %1009.1;
    %1013 = %1010.0;
    %1014 = %1011.0;
    (%1012, %1013, %1014)
  };
  %1015() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */
}

def @func_10220() -> Tensor[(16, 14, 12), bool] {
  @func_10218() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_9289() -> Tensor[(16, 14, 12), bool] {
  @func_9287() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_1173(%var_1166: Tensor[(16, 11, 10), uint16], %var_1167: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), uint16] {
  %1016 = cast(%var_1167, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %1017 = shape_of(%var_1166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%var_1166, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%1018, %1019) /* ty=Tensor[(16, 11, 10), uint16] */
}

def @func_2951(%var_2950: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
  %1025 = fn (%var_2946: Tensor[(480), uint64]) -> (Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) {
    %1020 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
    %1021 = cast(%var_2946, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %1022 = reshape(%1021, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), uint64] */;
    %1023 = %1020.3;
    %1024 = @func_1433(%1022) /* ty=Tensor[(10, 4, 12), uint64] */;
    (%1023, %1024, %var_2946)
  };
  %1025(%var_2950) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(480), uint64]) */
}

def @func_1464(%var_1461: Tensor[(96), float64]) -> (Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool], Tensor[(2688), float64], Tensor[(96), float64]) {
  %1026 = @func_602() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %1027 = %1026.0;
  %1028 = cast(%1027, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %1029 = reshape(%1028, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), float32] */;
  %1030 = @func_1104(%1029) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), bool]) */;
  %1031 = @func_317() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64]) */;
  %1032 = cast(%var_1461, dtype="float64") /* ty=Tensor[(96), float64] */;
  %1033 = reshape(%1032, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %1034 = @func_1018(%1033) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(16, 14, 12), float64], Tensor[(2688), float64], Tensor[(1080), uint16]) */;
  %1035 = %1030.1;
  %1036 = %1031.0;
  %1037 = %1034.2;
  (%1027, %1035, %1036, %1037, %var_1461)
}

def @func_7535() -> (Tensor[(40, 12), uint64], Tensor[(16, 14, 12), bool]) {
  %1038 = @func_2139() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), float64], Tensor[(10, 4, 12), uint64], Tensor[(40, 12), uint64]) */;
  %1039 = @func_4024() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), bool]) */;
  %1040 = %1038.3;
  %1041 = %1039.0;
  (%1040, %1041)
}

def @func_4087(%var_4085: Tensor[(9, 5, 2), float64]) -> Tensor[(9, 5, 2), float64] {
  @func_4084(%var_4085) /* ty=Tensor[(9, 5, 2), float64] */
}

def @func_3694() -> Tensor[(16, 14, 12), bool] {
  @func_1586() /* ty=Tensor[(16, 14, 12), bool] */
}

def @func_7449() -> (Tensor[(16, 14, 12), bool],) {
  %1044 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %1042 = @func_4951() /* ty=(Tensor[(16, 14, 12), bool],) */;
    %1043 = %1042.0;
    (%1043,)
  };
  %1044() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_1227(%var_1225: Tensor[(10, 14, 12), uint32], %var_1226: Tensor[(10, 14, 12), uint32]) -> (Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
  %1055 = fn (%var_1187: Tensor[(10, 14, 12), uint32], %var_1188: Tensor[(10, 14, 12), uint32]) -> (Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) {
    %1045 = cast(%var_1188, dtype="uint32") /* ty=Tensor[(10, 14, 12), uint32] */;
    %1046 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%var_1187, dtype="uint32") /* ty=Tensor[(10, 14, 12), uint32] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1049 = @func_433() /* ty=(Tensor[(16, 14, 12), float32],) */;
    %1050 = @func_729() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), uint32]) */;
    %1051 = subtract(%1047, %1048) /* ty=Tensor[(10, 14, 12), uint32] */;
    %1052 = %1049.0;
    %1053 = %1050.1;
    %1054 = @func_764() /* ty=Tensor[(16, 14, 12), float64] */;
    (%1051, %1052, %1053, %1054)
  };
  %1055(%var_1225, %var_1226) /* ty=(Tensor[(10, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float64]) */
}

def @func_1177(%var_1175: Tensor[(16, 11, 10), uint16], %var_1176: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), uint16] {
  @func_1173(%var_1175, %var_1176) /* ty=Tensor[(16, 11, 10), uint16] */
}

def @func_8275() -> (Tensor[(16, 14, 12), uint32],) {
  %1058 = fn () -> (Tensor[(16, 14, 12), uint32],) {
    %1056 = @func_665() /* ty=(Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), uint32], Tensor[(16, 14, 12), float32], Tensor[(16, 14, 12), float64]) */;
    %1057 = %1056.1;
    (%1057,)
  };
  %1058() /* ty=(Tensor[(16, 14, 12), uint32],) */
}

def @func_6121() -> (Tensor[(16, 14, 12), float64],) {
  %1061 = fn () -> (Tensor[(16, 14, 12), float64],) {
    %1059 = @func_3525() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(8, 7, 7), float32], Tensor[(16, 14, 12), float64]) */;
    %1060 = %1059.2;
    (%1060,)
  };
  %1061() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_2841() -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
  %1067 = fn () -> (Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) {
    %1062 = @func_1586() /* ty=Tensor[(16, 14, 12), bool] */;
    %1063 = cast(%1062, dtype="uint32") /* ty=Tensor[(16, 14, 12), uint32] */;
    %1064 = reshape(%1063, newshape=[16, 14, 12]) /* ty=Tensor[(16, 14, 12), uint32] */;
    %1065 = @func_1558(%1064) /* ty=(Tensor[(16, 14, 12), int64], Tensor[(9, 6, 12), uint16], Tensor[(648), uint16], Tensor[(16, 14, 12), bool]) */;
    %1066 = %1065.0;
    (%1062, %1066)
  };
  %1067() /* ty=(Tensor[(16, 14, 12), bool], Tensor[(16, 14, 12), int64]) */
}

def @func_8689() -> (Tensor[(630), uint16],) {
  @func_8687() /* ty=(Tensor[(630), uint16],) */
}

def @func_8055() -> (Tensor[(16, 14, 12), bool],) {
  %1069 = fn () -> (Tensor[(16, 14, 12), bool],) {
    %1068 = @func_5467() /* ty=Tensor[(16, 14, 12), bool] */;
    (%1068,)
  };
  %1069() /* ty=(Tensor[(16, 14, 12), bool],) */
}

def @func_602() -> (Tensor[(16, 14, 12), uint32],) {
  %1070 = @func_494() /* ty=(Tensor[(16, 14, 12), uint32],) */;
  %1071 = %1070.0;
  (%1071,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen227/build/output.py:3684: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen227/build/output.py:3689: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen227/build/output.py:3707: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')

===================================
#[version = "0.0.5"]
def @main() -> ((Tensor[(15, 5, 1), float64],), ()) {
  let %x = meta[relay.Constant][0] /* ty=Tensor[(15, 5, 1), float64] */;
  let %x1 = zeros_like(%x);
  let %x2 = (%x,);
  %0 = zeros(shape=[15, 5, 1], dtype="float64");
  let %x3 = (%0,);
  %1 = ones(shape=[15, 5, 1], dtype="float64");
  %2 = (%1,);
  %3 = %2.0;
  %4 = (
    let %x4 = add(%x1, %3);
    ()
  );
  (%x2, %4)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen227/build/output.py", line 3712, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(75) tvmgen_default_fused_zeros_kernel0(double* __restrict__ T_full) {
  T_full[(((int)threadIdx.x))] = 0.000000e+00;
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

