==========mod==========
#[version = "0.0.5"]
def @func_4120(%var_4090: Tensor[(10, 6, 10), int32], %var_4091: Tensor[(10, 6, 10), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) {
  %0 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %1 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %2 = cast(%var_4090, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %3 = cosh(%2) /* ty=Tensor[(10, 6, 10), float64] */;
  %4 = cast(%var_4091, dtype="int32") /* ty=Tensor[(10, 6, 10), int32] */;
  %5 = shape_of(%var_4090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_4090, dtype="int32") /* ty=Tensor[(10, 6, 10), int32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %8 = right_shift(%6, %7) /* ty=Tensor[(10, 6, 10), int32] */;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %10 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%3, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %13 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
  %14 = %0.0;
  %15 = %1.0;
  %16 = floor_mod(%11, %12) /* ty=Tensor[(10, 6, 10), float64] */;
  (%13, %14, %15, %16)
}

def @func_5381() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %17 = @func_5040() /* ty=Tensor[(5, 16, 9), float64] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %19 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %20 = erf(%18) /* ty=Tensor[(5, 16, 9), float32] */;
  (%19, %20)
}

def @func_2203() -> Tensor[(5, 16, 9), float32] {
  %21 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %21.0
}

def @func_5501() -> (Tensor[(5, 16, 9), float32],) {
  %22 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %23 = %22.1;
  (%23,)
}

def @func_3485() -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) {
  %24 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %25 = %24.1;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
  %27 = reshape(%26, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %28 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %31 = rsqrt(%30) /* ty=Tensor[(5, 16, 9), float32] */;
  %32 = cast(%29, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %33 = acos(%32) /* ty=Tensor[(5, 16, 9), float64] */;
  %34 = cast(%33, dtype="uint8") /* ty=Tensor[(5, 16, 9), uint8] */;
  %35 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%31, dtype="uint8") /* ty=Tensor[(5, 16, 9), uint8] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %38 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %39 = @func_262(%27) /* ty=Tensor[(4, 14, 16), float64] */;
  %40 = logical_xor(%36, %37) /* ty=Tensor[(5, 16, 9), uint8] */;
  %41 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
  (%25, %38, %39, %40, %41)
}

def @func_4999(%var_4988: Tensor[(5, 16, 9), float32]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool], Tensor[(896), float32]) {
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %43 = reshape(%42, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %44 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %45 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %46 = @func_3411() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %47 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
  %48 = cast(%var_4988, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(896), float64] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %53 = @func_262(%43) /* ty=Tensor[(4, 14, 16), float64] */;
  %54 = %44.0;
  %55 = %45.0;
  %56 = %46.2;
  %57 = greater_equal(%50, %51) /* ty=Tensor[(5, 16, 9), bool] */;
  %58 = sigmoid(%52) /* ty=Tensor[(896), float32] */;
  (%53, %54, %55, %56, %57, %58)
}

def @func_3552() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %59 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %60 = %59.1;
  %61 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%60, %61)
}

def @func_2990() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %62 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %64 = sqrt(%63) /* ty=Tensor[(5, 16, 9), float32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %66 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%62, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %69 = floor_mod(%67, %68) /* ty=Tensor[(5, 16, 9), float64] */;
  %70 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
  (%69, %70)
}

def @func_2355() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %71 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %72 = @func_1915() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %73 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %74 = %71.0;
  %75 = %72.1;
  %76 = %73.0;
  (%74, %75, %76)
}

def @func_8416() -> Tensor[(5, 16, 9), float64] {
  %77 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %77.0
}

def @func_8616(%var_8592: Tensor[(468), float64]) -> (Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(440), float64], Tensor[(468), float64], Tensor[(5, 16, 9), float64]) {
  %78 = @func_8202() /* ty=(Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) */;
  %79 = cast(%var_8592, dtype="float64") /* ty=Tensor[(468), float64] */;
  %80 = cast(%var_8592, dtype="float64") /* ty=Tensor[(468), float64] */;
  %81 = reshape(%79, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %82 = reshape(%80, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %83 = @func_8009(%81, %82) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) */;
  %84 = @func_6416() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %85 = %78.5;
  %86 = @func_7578() /* ty=Tensor[(5, 16, 9), float32] */;
  %87 = %83.2;
  %88 = %84.0;
  (%85, %86, %87, %var_8592, %88)
}

def @func_3994() -> Tensor[(5, 16, 9), float32] {
  @func_3572() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_5549(%var_5506: Tensor[(5, 14, 12), int8], %var_5507: Tensor[(5, 14, 12), int8], %var_5518: float64) -> (Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) {
  %89 = cast(%var_5518, dtype="float64") /* ty=float64 */;
  %90 = reshape(%89, newshape=[]) /* ty=float64 */;
  %91 = cast(%var_5507, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
  %92 = shape_of(%var_5506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_5506, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = greater_equal(%93, %94) /* ty=Tensor[(5, 14, 12), bool] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(5, 14, 12), float64] */;
  %97 = tan(%96) /* ty=Tensor[(5, 14, 12), float64] */;
  %98 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %102 = floor_divide(%100, %101) /* ty=Tensor[(5, 14, 12), float32] */;
  %103 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 14, 12), float32] */, dtype="uint8") /* ty=Tensor[(5, 14, 12), uint8] */;
  %108 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%102, dtype="uint8") /* ty=Tensor[(5, 14, 12), uint8] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %111 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
  %112 = @func_3519(%90) /* ty=Tensor[(14, 1, 2), float64] */;
  %113 = equal(%105, %106) /* ty=Tensor[(5, 14, 12), bool] */;
  %114 = left_shift(%109, %110) /* ty=Tensor[(5, 14, 12), uint8] */;
  %115 = log10(%111) /* ty=Tensor[(5, 14, 12), float32] */;
  (%112, %var_5518, %113, %114, %115)
}

def @func_351(%var_318: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) {
  %116 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %117 = cast(%var_318, dtype="float64") /* ty=Tensor[(176), float64] */;
  %118 = reshape(%117, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %119 = @func_163(%118) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %120 = %119.0;
  %121 = cast(%var_318, dtype="bool") /* ty=Tensor[(176), bool] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %125 = cast(%120, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %126 = reshape(%125, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %127 = @func_163(%126) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %128 = %127.0;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %130 = reshape(%129, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %131 = @func_163(%130) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %132 = %116.0;
  %133 = greater_equal(%123, %124) /* ty=Tensor[(11, 16, ?), bool] */;
  %134 = %131.0;
  (%132, %133, %128, %134)
}

def @func_6028() -> (Tensor[(5, 16, 9), float32],) {
  %135 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %136 = %135.0;
  (%136,)
}

def @func_2473(%var_2414: Tensor[(5, 16, 9), float32], %var_2466: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) {
  %137 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  %138 = cast(%var_2414, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %142 = left_shift(%140, %141) /* ty=Tensor[(5, 16, 9), int8] */;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %144 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%137, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %149 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%137, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %153 = %152.0;
  %154 = cast(%var_2466, dtype="uint16") /* ty=Tensor[(5, 16, 9), uint16] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint16") /* ty=Tensor[(5, 16, 9), uint16] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %158 = less_equal(%145, %146) /* ty=Tensor[(5, 16, 9), bool] */;
  %159 = logical_or(%150, %151) /* ty=Tensor[(5, 16, 9), bool] */;
  %160 = multiply(%156, %157) /* ty=Tensor[(5, 16, 9), uint16] */;
  (%158, %159, %160)
}

def @func_6103() -> Tensor[(1, 7, 13), float32] {
  %161 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  atan(%161) /* ty=Tensor[(1, 7, 13), float32] */
}

def @func_5057() -> (Tensor[(12, 5, 10), float64],) {
  %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %163 = sigmoid(%162) /* ty=Tensor[(12, 5, 10), float32] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(12, 5, 10), float64] */;
  %165 = cos(%164) /* ty=Tensor[(12, 5, 10), float64] */;
  (%165,)
}

def @func_2141() -> (Tensor[(5, 16, 9), float64],) {
  %166 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %167 = %166.0;
  (%167,)
}

def @func_8202() -> (Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) {
  %168 = @func_6715() /* ty=(Tensor[(5, 16, 9), uint8],) */;
  %169 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %170 = reshape(%169, newshape=[1, 60]) /* ty=Tensor[(1, 60), uint32] */;
  %171 = @func_5261(%170) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) */;
  %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %173 = reshape(%172, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %174 = @func_163(%173) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %175 = %168.0;
  %176 = %171.3;
  %177 = @func_7986() /* ty=Tensor[(5, 16, 9), float32] */;
  %178 = %174.0;
  %179 = @func_4647() /* ty=Tensor[(11, 4, 9), float32] */;
  (%175, %176, meta[relay.Constant][5] /* ty=Tensor[(60), uint32] */, %177, %178, meta[relay.Constant][6] /* ty=Tensor[(176), float64] */, %179)
}

def @func_1193() -> (Tensor[(5, 16, 9), float64],) {
  %180 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %181 = %180.0;
  (%181,)
}

def @func_4896(%var_4890: Tensor[(5, 16, 9), float64]) -> Tensor[(5, 16, 9), float64] {
  %182 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %183 = %182.0;
  %184 = cast(%var_4890, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%186, %187) /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3313(%var_3301: bool, %var_3302: Tensor[(9, 3, 1), bool]) -> (Tensor[(9, 3, 1), bool],) {
  %188 = cast(%var_3301, dtype="bool") /* ty=bool */;
  %189 = cast(%var_3302, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %190 = logical_and(%188, %189) /* ty=Tensor[(9, 3, 1), bool] */;
  (%190,)
}

def @func_7225(%var_7199: Tensor[(2, 12, 7), float64]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float32], Tensor[(2, 12, 7), float32]) {
  %191 = @func_4839() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) */;
  %192 = cast(%var_7199, dtype="float64") /* ty=Tensor[(2, 12, 7), float64] */;
  %193 = erf(%192) /* ty=Tensor[(2, 12, 7), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(2, 12, 7), float32] */;
  %195 = %191.1;
  %196 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
  %197 = cos(%194) /* ty=Tensor[(2, 12, 7), float32] */;
  (%195, %196, %197)
}

def @func_650() -> (Tensor[(5, 16, 9), float32],) {
  %198 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %199 = %198.0;
  (%199,)
}

def @func_5916() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %200 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %201 = %200.0;
  %202 = @func_5430() /* ty=Tensor[(5, 16, 9), float64] */;
  (%201, %202)
}

def @func_9754() -> (Tensor[(5, 16, 9), float64], Tensor[(330), float32], Tensor[(330), uint32], Tensor[(5, 16, 9), bool]) {
  %203 = @func_6495() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %204 = cast(meta[relay.Constant][7] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %205 = reshape(%204, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %206 = @func_9543(%205) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) */;
  %207 = %203.1;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %209 = cast(%207, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %210 = reshape(%208, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
  %211 = reshape(%209, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
  %212 = @func_2473(%210, %211) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) */;
  %213 = %206.2;
  %214 = %212.1;
  (%207, %213, meta[relay.Constant][7] /* ty=Tensor[(330), uint32] */, %214)
}

def @func_1467() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %215 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %216 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %219 = %215.2;
  %220 = sin(%218) /* ty=Tensor[(5, 16, 9), float64] */;
  (%219, %220)
}

def @func_8210(%var_8205: Tensor[(14, 15, 10), int32]) -> (Tensor[(14, 15, 10), bool],) {
  %221 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 15, 10), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %222 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_8205, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = equal(%223, %224) /* ty=Tensor[(14, 15, 10), bool] */;
  (%225,)
}

def @func_5970() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %226 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %227 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %228 = %226.1;
  %229 = %227.1;
  (%228, %229)
}

def @func_8062() -> (Tensor[(5, 16, 9), float32],) {
  %230 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %231 = %230.0;
  (%231,)
}

def @func_7277(%var_7272: Tensor[(8, 140), bool]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32], Tensor[(8, 140), bool]) {
  %232 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %233 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %234 = @func_6715() /* ty=(Tensor[(5, 16, 9), uint8],) */;
  %235 = cast(%var_7272, dtype="bool") /* ty=Tensor[(8, 140), bool] */;
  %236 = reshape(%235, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), bool] */;
  %237 = @func_4479(%236) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) */;
  %238 = %232.1;
  %239 = %233.0;
  %240 = %234.0;
  %241 = %237.1;
  (%238, %239, %240, %241, %var_7272)
}

def @func_2684() -> (Tensor[(5, 16, 9), float32],) {
  %242 = @func_1961() /* ty=Tensor[(5, 16, 9), float32] */;
  (%242,)
}

def @func_8009(%var_7996: Tensor[(13, 4, 9), float64], %var_7997: Tensor[(13, 4, 9), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) {
  %243 = cast(%var_7997, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %244 = shape_of(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_7996, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %247 = cast(meta[relay.Constant][9] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %248 = reshape(%247, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %249 = @func_1366(%248) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %250 = add(%245, %246) /* ty=Tensor[(13, 4, 9), float64] */;
  %251 = %249.0;
  (%250, %251, meta[relay.Constant][9] /* ty=Tensor[(440), float64] */)
}

def @func_1757(%var_1729: Tensor[(176), float64], %var_1745: Tensor[(14, 64), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) {
  %252 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %253 = cast(%var_1729, dtype="float64") /* ty=Tensor[(176), float64] */;
  %254 = reshape(%253, newshape=[88, 2]) /* ty=Tensor[(88, 2), float64] */;
  %255 = @func_1280(%254) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) */;
  %256 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %257 = cast(%var_1745, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
  %258 = reshape(%257, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %259 = @func_262(%258) /* ty=Tensor[(4, 14, 16), float64] */;
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 14, 16), float64] */, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %264 = %252.0;
  %265 = %255.2;
  %266 = %256.0;
  %267 = right_shift(%262, %263) /* ty=Tensor[(4, 14, 16), uint16] */;
  (%264, %265, %var_1729, %266, %var_1745, %267)
}

def @func_2565(%var_2512: Tensor[(12, 3, 5), int16], %var_2513: Tensor[(12, 3, 5), int16]) -> (Tensor[(5, 16, 9), float32], Tensor[(12, 3, 5), int16]) {
  %268 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %269 = cast(%var_2513, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
  %270 = shape_of(%var_2512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_2512, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %273 = bitwise_and(%271, %272) /* ty=Tensor[(12, 3, 5), int16] */;
  %274 = cast(%var_2512, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %278 = %268.0;
  %279 = maximum(%276, %277) /* ty=Tensor[(12, 3, 5), int16] */;
  (%278, %279)
}

def @func_4732() -> (Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %280 = @func_2840() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) */;
  %281 = @func_2990() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %282 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %283 = %282.3;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
  %286 = reshape(%284, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %287 = reshape(%285, newshape=[14, 64]) /* ty=Tensor[(14, 64), float64] */;
  %288 = @func_1757(%286, %287) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) */;
  %289 = cast(%283, dtype="float32") /* ty=Tensor[(11, 16, ?), float32] */;
  %290 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
  %292 = reshape(%291, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %293 = @func_3753(%292) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %296 = %280.0;
  %297 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
  %298 = %281.0;
  %299 = %288.1;
  %300 = cosh(%289) /* ty=Tensor[(11, 16, ?), float32] */;
  %301 = %290.0;
  %302 = asinh(%295) /* ty=Tensor[(5, 16, 9), float64] */;
  %303 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
  (%296, meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, %297, %298, %299, %300, %301, %302, %303)
}

def @func_7853(%var_7813: Tensor[(16, 9, 9), float64]) -> (Tensor[(16, 9, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %304 = cast(%var_7813, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %305 = cos(%304) /* ty=Tensor[(16, 9, 9), float64] */;
  %306 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  %307 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%305, %306, %307)
}

def @func_698() -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) {
  %308 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %309 = cast(meta[relay.Constant][12] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %310 = reshape(%309, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %312 = reshape(%311, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %313 = @func_351(%312) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %314 = %308.0;
  %315 = @func_262(%310) /* ty=Tensor[(4, 14, 16), float64] */;
  %316 = %313.3;
  (%314, %315, meta[relay.Constant][12] /* ty=Tensor[(896), float64] */, %316, meta[relay.Constant][13] /* ty=Tensor[(176), float64] */)
}

def @func_8808() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %317 = @func_8267() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %318 = @func_7945() /* ty=Tensor[(5, 16, 9), float32] */;
  %319 = %317.0;
  (%318, %319)
}

def @func_7658() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 14, 12), float32], Tensor[(840), int8], float64, Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(3, 15, 15), float32], Tensor[(675), float32]) {
  %320 = @func_5501() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %323 = @func_7324() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %324 = cast(meta[relay.Constant][14] /* ty=Tensor[(840), int8] */, dtype="int8") /* ty=Tensor[(840), int8] */;
  %325 = cast(meta[relay.Constant][14] /* ty=Tensor[(840), int8] */, dtype="int8") /* ty=Tensor[(840), int8] */;
  %326 = cast(7.87943f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %327 = reshape(%324, newshape=[5, 14, 12]) /* ty=Tensor[(5, 14, 12), int8] */;
  %328 = reshape(%325, newshape=[5, 14, 12]) /* ty=Tensor[(5, 14, 12), int8] */;
  %329 = reshape(%326, newshape=[]) /* ty=float64 */;
  %330 = @func_5549(%327, %328, %329) /* ty=(Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) */;
  %331 = @func_5057() /* ty=(Tensor[(12, 5, 10), float64],) */;
  %332 = @func_7194() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %333 = @func_7508() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %334 = cast(meta[relay.Constant][15] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %335 = reshape(%334, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
  %336 = log10(%322) /* ty=Tensor[(5, 16, 9), float64] */;
  %337 = %323.0;
  %338 = %330.4;
  %339 = %331.0;
  %340 = %332.0;
  %341 = @func_5040() /* ty=Tensor[(5, 16, 9), float64] */;
  %342 = %333.1;
  %343 = @func_5181(%335) /* ty=Tensor[(3, 15, 15), float32] */;
  (%336, %337, %338, meta[relay.Constant][14] /* ty=Tensor[(840), int8] */, 7.87943f64 /* ty=float64 */, %339, %340, %341, %342, %343, meta[relay.Constant][15] /* ty=Tensor[(675), float32] */)
}

def @func_1604() -> (Tensor[(5, 16, 9), float32],) {
  %344 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %345 = %344.0;
  (%345,)
}

def @func_6266() -> (Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float64]) {
  %346 = @func_5057() /* ty=(Tensor[(12, 5, 10), float64],) */;
  %347 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %348 = %346.0;
  %349 = %347.0;
  (%348, %349)
}

def @func_9487() -> Tensor[(5, 16, 9), float64] {
  @func_5019() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_8933(%var_8893: Tensor[(16, 1, 2), float64], %var_8894: Tensor[(16, 11, 2), float64]) -> (Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) {
  %350 = cast(%var_8893, dtype="float64") /* ty=Tensor[(16, 1, 2), float64] */;
  %351 = cast(%var_8894, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %352 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %353 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %354 = cast(meta[relay.Constant][16] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %355 = cast(meta[relay.Constant][17] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %356 = reshape(%354, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %357 = reshape(%355, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %358 = @func_5875(%356, %357) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) */;
  %359 = @func_4791() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %360 = cast(meta[relay.Constant][16] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %361 = reshape(%360, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %362 = @func_351(%361) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %363 = power(%350, %351) /* ty=Tensor[(16, 11, 2), float64] */;
  %364 = %352.0;
  %365 = %353.6;
  %366 = %358.4;
  %367 = %359.1;
  %368 = %362.3;
  (%363, %364, %365, %366, meta[relay.Constant][16] /* ty=Tensor[(176, 1), float64] */, meta[relay.Constant][17] /* ty=Tensor[(600), int32] */, %367, %368)
}

def @func_421(%var_414: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
  %369 = cast(%var_414, dtype="float64") /* ty=Tensor[(14, 7, 7), float64] */;
  sin(%369) /* ty=Tensor[(14, 7, 7), float64] */
}

def @func_3700() -> Tensor[(4, 14, 16), float64] {
  %370 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %370.1
}

def @func_7945() -> Tensor[(5, 16, 9), float32] {
  %371 = @func_6028() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %371.0
}

def @func_6793() -> (Tensor[(5, 16, 9), float32],) {
  %372 = @func_6028() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %373 = %372.0;
  (%373,)
}

def @func_7690() -> (Tensor[(5, 16, 9), float32],) {
  %374 = @func_6112() /* ty=Tensor[(5, 16, 9), float32] */;
  (%374,)
}

def @func_6881() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %375 = @func_3252() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %376 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %377 = %375.0;
  %378 = %376.0;
  (%377, %378)
}

def @func_2384() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %379 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %380 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %381 = %380.1;
  %382 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %383 = %382.1;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %385 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%381, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %388 = %379.0;
  %389 = divide(%386, %387) /* ty=Tensor[(5, 16, 9), float32] */;
  (%388, %389)
}

def @func_1672() -> Tensor[(5, 16, 9), float32] {
  @func_1124() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_3113() -> (Tensor[(5, 16, 9), float64],) {
  %390 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
  (%390,)
}

def @func_4479(%var_4459: Tensor[(14, 8, 10), bool]) -> (Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) {
  %391 = cast(%var_4459, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
  %392 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(14, 8, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 8, 10), bool] */, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %396 = logical_and(%393, %394) /* ty=Tensor[(14, 8, 10), bool] */;
  %397 = %395.0;
  (%396, %397)
}

def @func_3252() -> (Tensor[(5, 16, 9), float32],) {
  %398 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %399 = %398.0;
  (%399,)
}

def @func_8825() -> (Tensor[(4, 14, 16), float64],) {
  %400 = @func_3700() /* ty=Tensor[(4, 14, 16), float64] */;
  (%400,)
}

def @func_8461(%var_8419: Tensor[(3, 10, 11), uint32]) -> (Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) {
  %401 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 10, 11), uint32] */, dtype="uint32") /* ty=Tensor[(3, 10, 11), uint32] */;
  %402 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_8419, dtype="uint32") /* ty=Tensor[(3, 10, 11), uint32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %405 = cast(meta[relay.Constant][20] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %406 = reshape(%405, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %407 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 10, 11), uint32] */, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %408 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%var_8419, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = left_shift(%403, %404) /* ty=Tensor[(3, 10, 11), uint32] */;
  %412 = @func_262(%406) /* ty=Tensor[(4, 14, 16), float64] */;
  %413 = @func_7986() /* ty=Tensor[(5, 16, 9), float32] */;
  %414 = greater_equal(%409, %410) /* ty=Tensor[(3, 10, 11), bool] */;
  (%411, %412, meta[relay.Constant][20] /* ty=Tensor[(896), float64] */, %413, %414)
}

def @func_5959() -> (Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %415 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 8), float32] */;
  %416 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %417 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %418 = asinh(%415) /* ty=Tensor[(8, 13, 8), float32] */;
  %419 = %416.8;
  %420 = %417.0;
  (%418, %419, %420)
}

def @func_3877() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %421 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %422 = %421.0;
  %423 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
  (%422, %423)
}

def @func_447() -> (Tensor[(5, 16, 9), float32],) {
  %424 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %425 = %424.0;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %427 = exp(%426) /* ty=Tensor[(5, 16, 9), float32] */;
  (%427,)
}

def @func_5261(%var_5240: Tensor[(1, 60), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) {
  %428 = @func_4345() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %429 = %428.0;
  %430 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 16, 9), float32] */, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %434 = cast(%var_5240, dtype="uint32") /* ty=Tensor[(1, 60), uint32] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(130, 6), uint32] */, dtype="uint32") /* ty=Tensor[(130, 6), uint32] */;
  %436 = reshape(%434, newshape=[4, 15, 1]) /* ty=Tensor[(4, 15, 1), uint32] */;
  %437 = reshape(%435, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint32] */;
  %438 = @func_4944(%436, %437) /* ty=(Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %439 = floor_divide(%432, %433) /* ty=Tensor[(5, 16, 9), float64] */;
  %440 = %438.0;
  (%439, %440, %var_5240, meta[relay.Constant][24] /* ty=Tensor[(130, 6), uint32] */)
}

def @func_7194() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %441 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %442 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %443 = %441.4;
  %444 = %442.0;
  (%443, %444)
}

def @func_2721() -> (Tensor[(5, 16, 9), float64],) {
  %445 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %446 = %445.0;
  (%446,)
}

def @func_2743() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %447 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %448 = %447.0;
  %449 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%448, %449)
}

def @func_2506() -> Tensor[(5, 16, 9), float64] {
  %450 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %450.1
}

def @func_4839() -> (Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) {
  %451 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %452 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %453 = %451.0;
  %454 = %452.2;
  (%453, %454)
}

def @func_8560(%var_8529: Tensor[(15, 11, 1), uint64], %var_8536: Tensor[(416), int16]) -> (Tensor[(15, 11, 3), bool], Tensor[(8, 13, 4), int16], Tensor[(416), int16], Tensor[(5, 16, 9), float64]) {
  %455 = cast(%var_8529, dtype="bool") /* ty=Tensor[(15, 11, 1), bool] */;
  %456 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 11, 3), uint64] */, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %457 = cast(%var_8536, dtype="int16") /* ty=Tensor[(416), int16] */;
  %458 = reshape(%457, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), int16] */;
  %459 = equal(%455, %456) /* ty=Tensor[(15, 11, 3), bool] */;
  %460 = @func_7011(%458) /* ty=Tensor[(8, 13, 4), int16] */;
  %461 = @func_7683() /* ty=Tensor[(5, 16, 9), float64] */;
  (%459, %460, %var_8536, %461)
}

def @func_9132(%var_9115: Tensor[(32), float64], %var_9116: Tensor[(352), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(32), float64], Tensor[(352), float64]) {
  %462 = cast(%var_9115, dtype="float64") /* ty=Tensor[(32), float64] */;
  %463 = cast(%var_9116, dtype="float64") /* ty=Tensor[(352), float64] */;
  %464 = reshape(%462, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float64] */;
  %465 = reshape(%463, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), float64] */;
  %466 = @func_8933(%464, %465) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) */;
  %467 = @func_6366() /* ty=Tensor[(5, 16, 9), float64] */;
  %468 = %466.2;
  (%467, %468, %var_9115, %var_9116)
}

def @func_9838() -> (Tensor[(5, 16, 9), float32],) {
  %469 = @func_1672() /* ty=Tensor[(5, 16, 9), float32] */;
  (%469,)
}

def @func_1280(%var_1273: Tensor[(88, 2), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) {
  %470 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %471 = cast(%var_1273, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
  %472 = reshape(%471, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %473 = @func_936(%472) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %474 = %470.0;
  %475 = %473.1;
  (%474, %475, %var_1273)
}

def @func_1124() -> Tensor[(5, 16, 9), float32] {
  %476 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %476.0
}

def @func_2785() -> (Tensor[(5, 16, 9), float64],) {
  %477 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %478 = %477.0;
  (%478,)
}

def @func_4392() -> Tensor[(5, 16, 9), float64] {
  %479 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %479.0
}

def @func_6416() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %480 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %481 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %482 = %480.1;
  %483 = %481.0;
  (%482, %483)
}

def @func_1166() -> (Tensor[(5, 16, 9), float32],) {
  %484 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %485 = %484.0;
  (%485,)
}

def @func_6715() -> (Tensor[(5, 16, 9), uint8],) {
  %486 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %487 = %486.3;
  (%487,)
}

def @func_7749() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %488 = @func_7379() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) */;
  %489 = @func_6982() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %490 = @func_7578() /* ty=Tensor[(5, 16, 9), float32] */;
  %491 = %488.1;
  %492 = %489.0;
  (%490, %491, %492)
}

def @func_602(%var_597: Tensor[(8, 9, 10), float32]) -> Tensor[(8, 9, 10), float32] {
  %493 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
  %494 = shape_of(%var_597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_597, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%495, %496) /* ty=Tensor[(8, 9, 10), float32] */
}

def @func_6982() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %497 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %498 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %499 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %500 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %501 = %497.1;
  %502 = %498.0;
  %503 = %499.0;
  %504 = %500.0;
  (%501, %502, %503, %504)
}

def @func_6537(%var_6530: Tensor[(5, 15, 12), int64], %var_6531: Tensor[(5, 15, 12), int64]) -> Tensor[(5, 15, 12), int64] {
  %505 = cast(%var_6531, dtype="int64") /* ty=Tensor[(5, 15, 12), int64] */;
  %506 = shape_of(%var_6530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_6530, dtype="int64") /* ty=Tensor[(5, 15, 12), int64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%507, %508) /* ty=Tensor[(5, 15, 12), int64] */
}

def @func_3411() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %509 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %510 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %511 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %512 = %509.0;
  %513 = %510.1;
  %514 = %511.0;
  (%512, %513, %514)
}

def @func_6544() -> (Tensor[(5, 16, 9), float64],) {
  %515 = @func_4392() /* ty=Tensor[(5, 16, 9), float64] */;
  (%515,)
}

def @func_1366(%var_1359: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64],) {
  %516 = cast(%var_1359, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %517 = sigmoid(%516) /* ty=Tensor[(10, 11, 4), float64] */;
  (%517,)
}

def @func_3204() -> (Tensor[(5, 16, 9), float32],) {
  %518 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %519 = %518.1;
  (%519,)
}

def @func_9683(%var_9637: Tensor[(15, 7, 11), int8], %var_9667: Tensor[(15, 7, 11), int8]) -> (Tensor[(5, 16, 9), float64], Tensor[(15, 7, 11), float64]) {
  %520 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(15, 7, 11), int8] */;
  %521 = shape_of(%var_9637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_9637, dtype="int8") /* ty=Tensor[(15, 7, 11), int8] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %524 = bitwise_xor(%522, %523) /* ty=Tensor[(15, 7, 11), int8] */;
  %525 = cast(%var_9667, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = greater(%527, %528) /* ty=Tensor[(15, 7, 11), bool] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
  %531 = @func_6366() /* ty=Tensor[(5, 16, 9), float64] */;
  %532 = asinh(%530) /* ty=Tensor[(15, 7, 11), float64] */;
  (%531, %532)
}

def @func_3572() -> Tensor[(5, 16, 9), float32] {
  %533 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %533.0
}

def @func_6012() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %534 = @func_1915() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %535 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %536 = %534.0;
  %537 = %535.0;
  (%536, %537)
}

def @func_8389() -> Tensor[(5, 16, 9), float64] {
  %538 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %538.0
}

def @func_7508() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %539 = @func_7379() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) */;
  %540 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %541 = %539.1;
  %542 = %540.0;
  (%541, %542)
}

def @func_5181(%var_5178: Tensor[(3, 15, 15), float32]) -> Tensor[(3, 15, 15), float32] {
  %543 = cast(%var_5178, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
  log(%543) /* ty=Tensor[(3, 15, 15), float32] */
}

def @func_9209() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %544 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %545 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %546 = @func_6793() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %547 = @func_6495() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %548 = %544.0;
  %549 = %545.1;
  %550 = %546.0;
  %551 = %547.1;
  (%548, %549, %550, %551)
}

def @func_6906(%var_6903: Tensor[(2, 2, 16), float32]) -> Tensor[(2, 2, 16), float32] {
  %552 = cast(%var_6903, dtype="float32") /* ty=Tensor[(2, 2, 16), float32] */;
  sin(%552) /* ty=Tensor[(2, 2, 16), float32] */
}

def @func_4084() -> Tensor[(5, 16, 9), float64] {
  %553 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %553.0
}

def @func_8705() -> (Tensor[(5, 16, 9), float64],) {
  %554 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %555 = %554.0;
  (%555,)
}

def @func_5430() -> Tensor[(5, 16, 9), float64] {
  @func_2506() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_9543(%var_9527: Tensor[(330), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) {
  %556 = cast(%var_9527, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %557 = reshape(%556, newshape=[3, 10, 11]) /* ty=Tensor[(3, 10, 11), uint32] */;
  %558 = @func_8461(%557) /* ty=(Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) */;
  %559 = cast(%var_9527, dtype="float32") /* ty=Tensor[(330), float32] */;
  %560 = @func_2743() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %561 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  %562 = %558.3;
  %563 = acos(%559) /* ty=Tensor[(330), float32] */;
  %564 = %560.0;
  (%561, %562, %563, %564)
}

def @func_7066(%var_7034: Tensor[(8, 15, 4), int8], %var_7035: Tensor[(8, 15, 4), int8]) -> (Tensor[(8, 15, 4), int8],) {
  %565 = cast(%var_7035, dtype="int8") /* ty=Tensor[(8, 15, 4), int8] */;
  %566 = shape_of(%var_7034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_7034, dtype="int8") /* ty=Tensor[(8, 15, 4), int8] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %569 = right_shift(%567, %568) /* ty=Tensor[(8, 15, 4), int8] */;
  (%569,)
}

def @func_6614() -> Tensor[(5, 16, 9), float64] {
  %570 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %570.2
}

def @func_6366() -> Tensor[(5, 16, 9), float64] {
  %571 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %571.0
}

def @func_7324() -> (Tensor[(5, 16, 9), float32],) {
  %572 = @func_3086() /* ty=Tensor[(5, 16, 9), float32] */;
  (%572,)
}

def @func_9389() -> Tensor[(5, 16, 9), float32] {
  %573 = @func_7455() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %573.1
}

def @func_7791() -> (Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) {
  %574 = @func_7134() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) */;
  %575 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %576 = cast(meta[relay.Constant][28] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %577 = reshape(%576, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %578 = @func_1366(%577) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %579 = %578.0;
  %580 = cast(meta[relay.Constant][28] /* ty=Tensor[(440), float64] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = %574.0;
  %585 = %575.4;
  %586 = less(%582, %583) /* ty=Tensor[(10, 11, 4), bool] */;
  (%584, %585, %586)
}

def @func_3046() -> Tensor[(5, 16, 9), float64] {
  @func_2696() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_9403() -> (Tensor[(5, 16, 9), float64],) {
  %587 = @func_6012() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %588 = %587.0;
  (%588,)
}

def @func_4647() -> Tensor[(11, 4, 9), float32] {
  %589 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
  asinh(%589) /* ty=Tensor[(11, 4, 9), float32] */
}

def @func_4159() -> Tensor[(5, 16, 9), float32] {
  @func_1124() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_7379() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) {
  %590 = @func_5093() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %593 = reshape(%592, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
  %594 = @func_772(%593) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) */;
  %595 = cast(meta[relay.Constant][30] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %596 = reshape(%595, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %597 = @func_1366(%596) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(10, 11, 4), float32] */;
  %600 = %594.3;
  %601 = sinh(%599) /* ty=Tensor[(10, 11, 4), float32] */;
  (%591, %600, meta[relay.Constant][30] /* ty=Tensor[(440), float64] */, %601)
}

def @main() -> Tensor[(6, 7, 12), float64] {
  %602 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 12), float32] */;
  %603 = log(%602) /* ty=Tensor[(6, 7, 12), float32] */;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(6, 7, 12), float64] */;
  sinh(%604) /* ty=Tensor[(6, 7, 12), float64] */
}

def @func_4743() -> (Tensor[(5, 16, 9), float64],) {
  %605 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %606 = %605.0;
  (%606,)
}

def @func_4791() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %607 = @func_2743() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %608 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %609 = %607.0;
  %610 = %608.0;
  %611 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%609, %610, %611)
}

def @func_772(%var_710: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) {
  %612 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %615 = atanh(%614) /* ty=Tensor[(5, 16, 9), float32] */;
  %616 = cast(%var_710, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %617 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%613, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %620 = maximum(%618, %619) /* ty=Tensor[(5, 16, 9), int8] */;
  %621 = cast(%620, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %622 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%615, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = cast(%613, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %626 = sigmoid(%625) /* ty=Tensor[(5, 16, 9), float32] */;
  %627 = cast(%613, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %631 = cast(%626, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %632 = shape_of(%var_710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_710, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %635 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %636 = logical_and(%623, %624) /* ty=Tensor[(5, 16, 9), bool] */;
  %637 = power(%629, %630) /* ty=Tensor[(5, 16, 9), float64] */;
  %638 = minimum(%633, %634) /* ty=Tensor[(5, 16, 9), int8] */;
  %639 = %635.0;
  (%636, %637, %638, %639)
}

def @func_2840() -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) {
  %640 = cast(meta[relay.Constant][32] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %641 = reshape(%640, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %642 = @func_936(%641) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %643 = cast(meta[relay.Constant][32] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %644 = reshape(%643, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %645 = @func_163(%644) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %646 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %647 = %642.3;
  %648 = %645.0;
  (%646, %647, meta[relay.Constant][32] /* ty=Tensor[(176), float64] */, %648)
}

def @func_8645() -> Tensor[(176), float64] {
  %649 = @func_7791() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) */;
  %649.1
}

def @func_7455() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %650 = @func_5959() /* ty=(Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %651 = %650.2;
  %652 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%651, %652)
}

def @func_7986() -> Tensor[(5, 16, 9), float32] {
  @func_7945() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_998() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %653 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %656 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %657 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %658 = log(%655) /* ty=Tensor[(5, 16, 9), float64] */;
  %659 = %656.0;
  %660 = %657.0;
  (%658, %659, %660)
}

def @func_7011(%var_7006: Tensor[(8, 13, 4), int16]) -> Tensor[(8, 13, 4), int16] {
  %661 = cast(%var_7006, dtype="int16") /* ty=Tensor[(8, 13, 4), int16] */;
  %662 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(8, 13, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 13, 4), int16] */, dtype="int16") /* ty=Tensor[(8, 13, 4), int16] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%663, %664) /* ty=Tensor[(8, 13, 4), int16] */
}

def @func_1961() -> Tensor[(5, 16, 9), float32] {
  %665 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %665.0
}

def @func_8870(%var_8854: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
  %666 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %667 = shape_of(%var_8854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_8854, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %670 = divide(%668, %669) /* ty=Tensor[(13, 4, 14), float32] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %672 = sin(%671) /* ty=Tensor[(13, 4, 14), float32] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %674 = acosh(%673) /* ty=Tensor[(13, 4, 14), float32] */;
  (%674,)
}

def @func_5875(%var_5798: Tensor[(176), float64], %var_5821: Tensor[(2, 300), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) {
  %675 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %676 = cast(%var_5821, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
  %677 = cast(%var_5821, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
  %678 = reshape(%676, newshape=[10, 6, 10]) /* ty=Tensor[(10, 6, 10), int32] */;
  %679 = reshape(%677, newshape=[10, 6, 10]) /* ty=Tensor[(10, 6, 10), int32] */;
  %680 = @func_4120(%678, %679) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) */;
  %681 = cast(%var_5798, dtype="float64") /* ty=Tensor[(176), float64] */;
  %682 = reshape(%681, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %683 = @func_351(%682) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %684 = %683.3;
  %685 = cast(%var_5798, dtype="int32") /* ty=Tensor[(176), int32] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="int32") /* ty=Tensor[(11, 16, ?), int32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %689 = bitwise_and(%687, %688) /* ty=Tensor[(11, 16, ?), int32] */;
  %690 = cast(%689, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %691 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%684, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = not_equal(%692, %693) /* ty=Tensor[(11, 16, ?), bool] */;
  %695 = cast(%689, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
  %700 = @func_4873() /* ty=Tensor[(5, 16, 9), float64] */;
  %701 = %675.0;
  %702 = @func_5626() /* ty=Tensor[(5, 16, 9), int32] */;
  %703 = %680.0;
  %704 = logical_or(%697, %698) /* ty=Tensor[(11, 16, ?), bool] */;
  (%699, %700, %701, %702, %703, %var_5821, %704)
}

def @func_3753(%var_3739: Tensor[(896), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) {
  %705 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %706 = cast(%var_3739, dtype="float64") /* ty=Tensor[(896), float64] */;
  %707 = reshape(%706, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %708 = %705.0;
  %709 = @func_262(%707) /* ty=Tensor[(4, 14, 16), float64] */;
  (%708, %709, %var_3739)
}

def @func_1934() -> Tensor[(5, 16, 9), float32] {
  %710 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %710.0
}

def @func_3519(%var_3514: float64) -> Tensor[(14, 1, 2), float64] {
  %711 = cast(%var_3514, dtype="float64") /* ty=float64 */;
  %712 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 2), float64] */;
  floor_divide(%711, %712) /* ty=Tensor[(14, 1, 2), float64] */
}

def @func_8980() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %713 = @func_6982() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %714 = @func_3829() /* ty=Tensor[(5, 16, 9), float32] */;
  %715 = %713.3;
  (%714, %715)
}

def @func_4345() -> (Tensor[(5, 16, 9), float32],) {
  %716 = @func_3829() /* ty=Tensor[(5, 16, 9), float32] */;
  (%716,)
}

def @func_7683() -> Tensor[(5, 16, 9), float64] {
  @func_4873() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3829() -> Tensor[(5, 16, 9), float32] {
  %717 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %717.1
}

def @func_6112() -> Tensor[(5, 16, 9), float32] {
  @func_2203() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_163(%var_135: Tensor[(11, 16, 1), float64]) -> (Tensor[(11, 16, ?), bool],) {
  %718 = cast(%var_135, dtype="float64") /* ty=Tensor[(11, 16, 1), float64] */;
  %719 = log10(%718) /* ty=Tensor[(11, 16, 1), float64] */;
  %720 = cast(%var_135, dtype="bool") /* ty=Tensor[(11, 16, 1), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(11, 16, 1), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = less(%722, %723) /* ty=Tensor[(11, 16, ?), bool] */;
  (%724,)
}

def @func_6728() -> (Tensor[(5, 16, 9), float32],) {
  %725 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %726 = %725.0;
  (%726,)
}

def @func_9585() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(176), float64], Tensor[(600), int32]) {
  %727 = cast(meta[relay.Constant][36] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %728 = cast(meta[relay.Constant][37] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %729 = reshape(%727, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %730 = reshape(%728, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %731 = @func_5875(%729, %730) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) */;
  %732 = @func_9487() /* ty=Tensor[(5, 16, 9), float64] */;
  %733 = %731.0;
  (%732, %733, meta[relay.Constant][36] /* ty=Tensor[(176), float64] */, meta[relay.Constant][37] /* ty=Tensor[(600), int32] */)
}

def @func_2324(%var_2322: Tensor[(686), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(14, 7, 7), float64], Tensor[(686), float64]) {
  %734 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %735 = cast(%var_2322, dtype="float64") /* ty=Tensor[(686), float64] */;
  %736 = reshape(%735, newshape=[14, 7, 7]) /* ty=Tensor[(14, 7, 7), float64] */;
  %737 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  %738 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
  %739 = %734.0;
  %740 = @func_421(%736) /* ty=Tensor[(14, 7, 7), float64] */;
  (%737, %738, %739, %740, %var_2322)
}

def @func_262(%var_249: Tensor[(4, 14, 16), float64]) -> Tensor[(4, 14, 16), float64] {
  %741 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
  %742 = shape_of(%var_249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_249, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%743, %744) /* ty=Tensor[(4, 14, 16), float64] */
}

def @func_8784() -> (Tensor[(5, 16, 9), float32],) {
  %745 = @func_4159() /* ty=Tensor[(5, 16, 9), float32] */;
  (%745,)
}

def @func_1884(%var_1856: Tensor[(110, 4), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(896), float64], Tensor[(10, 11, 4), float64], Tensor[(110, 4), float64], Tensor[(88, 2), float64]) {
  %746 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %747 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %748 = cast(%var_1856, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %749 = reshape(%748, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %750 = @func_1366(%749) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %751 = cast(meta[relay.Constant][40] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %752 = cast(meta[relay.Constant][39] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %753 = reshape(%751, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %754 = reshape(%752, newshape=[14, 64]) /* ty=Tensor[(14, 64), float64] */;
  %755 = @func_1757(%753, %754) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) */;
  %756 = %755.1;
  %757 = cast(meta[relay.Constant][40] /* ty=Tensor[(44, 4), float64] */, dtype="int64") /* ty=Tensor[(44, 4), int64] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(2), int32] */;
  %759 = cast(%756, dtype="int64") /* ty=Tensor[(88, 2), int64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %761 = subtract(%759, %760) /* ty=Tensor[(88, 2), int64] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
  %763 = %746.2;
  %764 = %747.0;
  %765 = %750.0;
  %766 = acos(%762) /* ty=Tensor[(88, 2), float64] */;
  (%763, %764, meta[relay.Constant][39] /* ty=Tensor[(896), float64] */, %765, %var_1856, %766)
}

def @func_8692(%var_8685: Tensor[(1404), int64]) -> (Tensor[(5, 16, 9), float64], Tensor[(12, 13, 9), bool], Tensor[(1404), int64], Tensor[(4, 14, 16), float64]) {
  %767 = cast(%var_8685, dtype="int64") /* ty=Tensor[(1404), int64] */;
  %768 = reshape(%767, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), int64] */;
  %769 = @func_3286(%768) /* ty=(Tensor[(12, 13, 9), bool],) */;
  %770 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %771 = @func_8389() /* ty=Tensor[(5, 16, 9), float64] */;
  %772 = %769.0;
  %773 = %770.1;
  (%771, %772, %var_8685, %773)
}

def @func_3286(%var_3280: Tensor[(12, 13, 9), int64]) -> (Tensor[(12, 13, 9), bool],) {
  %774 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 13, 9), int64] */, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %775 = shape_of(%var_3280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_3280, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %778 = greater(%776, %777) /* ty=Tensor[(12, 13, 9), bool] */;
  (%778,)
}

def @func_6495() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %779 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
  %780 = @func_5019() /* ty=Tensor[(5, 16, 9), float64] */;
  (%779, %780)
}

def @func_7578() -> Tensor[(5, 16, 9), float32] {
  @func_3829() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_4590(%var_4565: Tensor[(5, 16, 9), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool]) {
  %781 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %782 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %783 = %782.2;
  %784 = cast(%var_4565, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = @func_1672() /* ty=Tensor[(5, 16, 9), float32] */;
  %789 = %781.0;
  %790 = greater(%786, %787) /* ty=Tensor[(5, 16, 9), bool] */;
  (%788, %789, %790)
}

def @func_936(%var_870: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %791 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %792 = cast(%var_870, dtype="float64") /* ty=Tensor[(176), float64] */;
  %793 = reshape(%792, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %794 = @func_163(%793) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %795 = %794.0;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %797 = reshape(%796, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %798 = @func_351(%797) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %799 = %791.0;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %801 = reshape(%800, newshape=[8, 9, 10]) /* ty=Tensor[(8, 9, 10), float32] */;
  %802 = cast(%795, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %803 = reshape(%802, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %804 = @func_163(%803) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %805 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %806 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %807 = %798.3;
  %808 = @func_602(%801) /* ty=Tensor[(8, 9, 10), float32] */;
  %809 = %804.0;
  %810 = %805.0;
  %811 = %806.0;
  (%799, %795, %var_870, %807, %808, %809, %810, %811)
}

def @func_9079() -> Tensor[(5, 16, 9), float64] {
  %812 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %812.0
}

def @func_7916() -> (Tensor[(5, 16, 9), float32],) {
  %813 = @func_6728() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %814 = %813.0;
  (%814,)
}

def @func_9014() -> (Tensor[(5, 16, 9), float32],) {
  %815 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
  (%815,)
}

def @func_5019() -> Tensor[(5, 16, 9), float64] {
  %816 = @func_4743() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %816.0
}

def @func_5093() -> (Tensor[(5, 16, 9), float32],) {
  %817 = @func_4159() /* ty=Tensor[(5, 16, 9), float32] */;
  (%817,)
}

def @func_8666() -> (Tensor[(5, 16, 9), float32],) {
  %818 = @func_5970() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %819 = %818.1;
  (%819,)
}

def @func_6160() -> (Tensor[(5, 16, 9), float64], Tensor[(8, 9, 10), float32], Tensor[(5, 16, 9), float64]) {
  %820 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %823 = reshape(%822, newshape=[8, 9, 10]) /* ty=Tensor[(8, 9, 10), float32] */;
  %824 = @func_602(%823) /* ty=Tensor[(8, 9, 10), float32] */;
  %825 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  (%821, %824, %825)
}

def @func_7134() -> (Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) {
  %826 = @func_3252() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %827 = @func_4647() /* ty=Tensor[(11, 4, 9), float32] */;
  %828 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 4, 9), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %832 = equal(%830, %831) /* ty=Tensor[(11, 4, 9), bool] */;
  %833 = cast(%832, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
  %834 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%827, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %837 = cast(%827, dtype="float64") /* ty=Tensor[(11, 4, 9), float64] */;
  %838 = %826.0;
  %839 = greater_equal(%835, %836) /* ty=Tensor[(11, 4, 9), bool] */;
  %840 = acos(%837) /* ty=Tensor[(11, 4, 9), float64] */;
  (%838, %839, %840)
}

def @func_4944(%var_4908: Tensor[(4, 15, 1), uint32], %var_4909: Tensor[(4, 15, 13), uint32]) -> (Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %841 = cast(%var_4908, dtype="uint32") /* ty=Tensor[(4, 15, 1), uint32] */;
  %842 = cast(%var_4909, dtype="uint32") /* ty=Tensor[(4, 15, 13), uint32] */;
  %843 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %844 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %845 = bitwise_or(%841, %842) /* ty=Tensor[(4, 15, 13), uint32] */;
  %846 = %843.0;
  %847 = %844.0;
  (%845, %846, %847)
}

def @func_4277(%var_4248: Tensor[(8, 5, 4), float64]) -> (Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %848 = cast(%var_4248, dtype="float64") /* ty=Tensor[(8, 5, 4), float64] */;
  %849 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %850 = cos(%848) /* ty=Tensor[(8, 5, 4), float64] */;
  %851 = %849.4;
  %852 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
  (%850, %851, %852)
}

def @func_5626() -> Tensor[(5, 16, 9), int32] {
  %853 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %854 = %853.0;
  %855 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 16, 9), float64] */, dtype="int32") /* ty=Tensor[(5, 16, 9), int32] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="int32") /* ty=Tensor[(5, 16, 9), int32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%857, %858) /* ty=Tensor[(5, 16, 9), int32] */
}

def @func_2160() -> (Tensor[(5, 16, 9), float64],) {
  %859 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %860 = %859.0;
  (%860,)
}

def @func_2110() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %861 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %862 = %861.0;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %864 = asin(%863) /* ty=Tensor[(5, 16, 9), float32] */;
  %865 = @func_1961() /* ty=Tensor[(5, 16, 9), float32] */;
  (%864, %865)
}

def @func_275() -> (Tensor[(5, 16, 9), float64],) {
  %866 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %867 = atan(%866) /* ty=Tensor[(5, 16, 9), float64] */;
  (%867,)
}

def @func_1915() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %868 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %869 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %870 = %868.0;
  %871 = %869.0;
  (%870, %871)
}

def @func_9629(%var_9588: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float64],) {
  %872 = cast(%var_9588, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %873 = asinh(%872) /* ty=Tensor[(2, 11, 12), float64] */;
  %874 = cast(%873, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %875 = atanh(%874) /* ty=Tensor[(2, 11, 12), float64] */;
  (%875,)
}

def @func_4873() -> Tensor[(5, 16, 9), float64] {
  %876 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %876.0
}

def @func_375() -> (Tensor[(5, 16, 9), float32],) {
  %877 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %878 = %877.0;
  %879 = cast(%878, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %880 = acosh(%879) /* ty=Tensor[(5, 16, 9), float32] */;
  (%880,)
}

def @func_3086() -> Tensor[(5, 16, 9), float32] {
  %881 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %881.0
}

def @func_1297() -> Tensor[(5, 16, 9), float64] {
  %882 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %882.0
}

def @func_8077(%var_8069: uint16, %var_8070: Tensor[(7, 12, 14), uint16]) -> (Tensor[(7, 12, 14), uint16],) {
  %883 = cast(%var_8069, dtype="uint16") /* ty=uint16 */;
  %884 = cast(%var_8070, dtype="uint16") /* ty=Tensor[(7, 12, 14), uint16] */;
  %885 = bitwise_xor(%883, %884) /* ty=Tensor[(7, 12, 14), uint16] */;
  (%885,)
}

def @func_5040() -> Tensor[(5, 16, 9), float64] {
  %886 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %886.0
}

def @func_6174() -> (Tensor[(5, 16, 9), float64],) {
  %887 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %888 = %887.7;
  (%888,)
}

def @func_8267() -> (Tensor[(5, 16, 9), float32],) {
  %889 = @func_6793() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %890 = %889.0;
  (%890,)
}

def @func_9777() -> (Tensor[(8, 12, 10), float64], Tensor[(5, 16, 9), float64]) {
  %891 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 10), float64] */;
  %892 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %893 = tan(%891) /* ty=Tensor[(8, 12, 10), float64] */;
  %894 = %892.0;
  (%893, %894)
}

def @func_6315(%var_6291: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(5, 16, 9), float32], Tensor[(160), float64]) {
  %895 = cast(%var_6291, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %896 = cast(meta[relay.Constant][46] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %897 = reshape(%896, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), float64] */;
  %898 = @func_4277(%897) /* ty=(Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %899 = sigmoid(%895) /* ty=Tensor[(16, 9, 13), float32] */;
  %900 = %898.2;
  (%899, %900, meta[relay.Constant][46] /* ty=Tensor[(160), float64] */)
}

def @func_2696() -> Tensor[(5, 16, 9), float64] {
  %901 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %901.0
}

def @func_9830() -> (Tensor[(5, 16, 9), float64],) {
  %902 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
  (%902,)
}

def @func_9316() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %903 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %904 = @func_3877() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %905 = %903.0;
  %906 = %904.1;
  (%905, %906)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3485() -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) {
  %0 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
  %3 = reshape(%2, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %4 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %7 = rsqrt(%6) /* ty=Tensor[(5, 16, 9), float32] */;
  %8 = cast(%5, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %9 = acos(%8) /* ty=Tensor[(5, 16, 9), float64] */;
  %10 = cast(%9, dtype="uint8") /* ty=Tensor[(5, 16, 9), uint8] */;
  %11 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%7, dtype="uint8") /* ty=Tensor[(5, 16, 9), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %14 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %15 = @func_262(%3) /* ty=Tensor[(4, 14, 16), float64] */;
  %16 = logical_xor(%12, %13) /* ty=Tensor[(5, 16, 9), uint8] */;
  %17 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
  (%1, %14, %15, %16, %17)
}

def @func_8706() -> (Tensor[(5, 16, 9), float64],) {
  %20 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %18 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %19 = %18.0;
    (%19,)
  };
  %20() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_1126() -> Tensor[(5, 16, 9), float32] {
  @func_1124() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_449() -> (Tensor[(5, 16, 9), float32],) {
  @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_7380() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) {
  %33 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) {
    %21 = @func_5093() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %22 = %21.0;
    %23 = cast(%22, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
    %24 = reshape(%23, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
    %25 = @func_772(%24) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) */;
    %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %27 = reshape(%26, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %28 = @func_1366(%27) /* ty=(Tensor[(10, 11, 4), float64],) */;
    %29 = %28.0;
    %30 = cast(%29, dtype="float32") /* ty=Tensor[(10, 11, 4), float32] */;
    %31 = %25.3;
    %32 = sinh(%30) /* ty=Tensor[(10, 11, 4), float32] */;
    (%22, %31, meta[relay.Constant][0] /* ty=Tensor[(440), float64] */, %32)
  };
  %33() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) */
}

def @func_2355() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %34 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %35 = @func_1915() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %36 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %37 = %34.0;
  %38 = %35.1;
  %39 = %36.0;
  (%37, %38, %39)
}

def @func_5002(%var_5000: Tensor[(5, 16, 9), float32]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool], Tensor[(896), float32]) {
  @func_4999(%var_5000) /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool], Tensor[(896), float32]) */
}

def @func_7069(%var_7067: Tensor[(8, 15, 4), int8], %var_7068: Tensor[(8, 15, 4), int8]) -> (Tensor[(8, 15, 4), int8],) {
  %45 = fn (%var_7034: Tensor[(8, 15, 4), int8], %var_7035: Tensor[(8, 15, 4), int8]) -> (Tensor[(8, 15, 4), int8],) {
    %40 = cast(%var_7035, dtype="int8") /* ty=Tensor[(8, 15, 4), int8] */;
    %41 = shape_of(%var_7034, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%var_7034, dtype="int8") /* ty=Tensor[(8, 15, 4), int8] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %44 = right_shift(%42, %43) /* ty=Tensor[(8, 15, 4), int8] */;
    (%44,)
  };
  %45(%var_7067, %var_7068) /* ty=(Tensor[(8, 15, 4), int8],) */
}

def @func_276() -> (Tensor[(5, 16, 9), float64],) {
  %48 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %47 = atan(%46) /* ty=Tensor[(5, 16, 9), float64] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_3252() -> (Tensor[(5, 16, 9), float32],) {
  %49 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %50 = %49.0;
  (%50,)
}

def @func_2112() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_7918() -> (Tensor[(5, 16, 9), float32],) {
  @func_7916() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_7947() -> Tensor[(5, 16, 9), float32] {
  @func_7945() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_354(%var_352: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) {
  @func_351(%var_352) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */
}

def @func_8081(%var_8079: uint16, %var_8080: Tensor[(7, 12, 14), uint16]) -> (Tensor[(7, 12, 14), uint16],) {
  @func_8077(%var_8079, %var_8080) /* ty=(Tensor[(7, 12, 14), uint16],) */
}

def @func_2162() -> (Tensor[(5, 16, 9), float64],) {
  @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_3702() -> Tensor[(4, 14, 16), float64] {
  @func_3700() /* ty=Tensor[(4, 14, 16), float64] */
}

def @func_3046() -> Tensor[(5, 16, 9), float64] {
  @func_2696() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_1467() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %51 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %52 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %55 = %51.2;
  %56 = sin(%54) /* ty=Tensor[(5, 16, 9), float64] */;
  (%55, %56)
}

def @func_166(%var_164: Tensor[(11, 16, 1), float64]) -> (Tensor[(11, 16, ?), bool],) {
  @func_163(%var_164) /* ty=(Tensor[(11, 16, ?), bool],) */
}

def @func_5261(%var_5240: Tensor[(1, 60), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) {
  %57 = @func_4345() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %58 = %57.0;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 9), float32] */, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %63 = cast(%var_5240, dtype="uint32") /* ty=Tensor[(1, 60), uint32] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 6), uint32] */, dtype="uint32") /* ty=Tensor[(130, 6), uint32] */;
  %65 = reshape(%63, newshape=[4, 15, 1]) /* ty=Tensor[(4, 15, 1), uint32] */;
  %66 = reshape(%64, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint32] */;
  %67 = @func_4944(%65, %66) /* ty=(Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %68 = floor_divide(%61, %62) /* ty=Tensor[(5, 16, 9), float64] */;
  %69 = %67.0;
  (%68, %69, %var_5240, meta[relay.Constant][3] /* ty=Tensor[(130, 6), uint32] */)
}

def @func_1761(%var_1759: Tensor[(176), float64], %var_1760: Tensor[(14, 64), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) {
  @func_1757(%var_1759, %var_1760) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) */
}

def @func_2568(%var_2566: Tensor[(12, 3, 5), int16], %var_2567: Tensor[(12, 3, 5), int16]) -> (Tensor[(5, 16, 9), float32], Tensor[(12, 3, 5), int16]) {
  %82 = fn (%var_2512: Tensor[(12, 3, 5), int16], %var_2513: Tensor[(12, 3, 5), int16]) -> (Tensor[(5, 16, 9), float32], Tensor[(12, 3, 5), int16]) {
    %70 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %71 = cast(%var_2513, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
    %72 = shape_of(%var_2512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_2512, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %75 = bitwise_and(%73, %74) /* ty=Tensor[(12, 3, 5), int16] */;
    %76 = cast(%var_2512, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
    %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%75, dtype="int16") /* ty=Tensor[(12, 3, 5), int16] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %80 = %70.0;
    %81 = maximum(%78, %79) /* ty=Tensor[(12, 3, 5), int16] */;
    (%80, %81)
  };
  %82(%var_2566, %var_2567) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(12, 3, 5), int16]) */
}

def @func_8619(%var_8617: Tensor[(468), float64]) -> (Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(440), float64], Tensor[(468), float64], Tensor[(5, 16, 9), float64]) {
  @func_8616(%var_8617) /* ty=(Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(440), float64], Tensor[(468), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_4841() -> (Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) {
  @func_4839() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) */
}

def @func_698() -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) {
  %83 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %85 = reshape(%84, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %87 = reshape(%86, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %88 = @func_351(%87) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %89 = %83.0;
  %90 = @func_262(%85) /* ty=Tensor[(4, 14, 16), float64] */;
  %91 = %88.3;
  (%89, %90, meta[relay.Constant][4] /* ty=Tensor[(896), float64] */, %91, meta[relay.Constant][5] /* ty=Tensor[(176), float64] */)
}

def @func_1963() -> Tensor[(5, 16, 9), float32] {
  @func_1961() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_7792() -> (Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) {
  %105 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) {
    %92 = @func_7134() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) */;
    %93 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
    %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %95 = reshape(%94, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %96 = @func_1366(%95) /* ty=(Tensor[(10, 11, 4), float64],) */;
    %97 = %96.0;
    %98 = cast(meta[relay.Constant][6] /* ty=Tensor[(440), float64] */, dtype="bool") /* ty=Tensor[(440), bool] */;
    %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%97, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %102 = %92.0;
    %103 = %93.4;
    %104 = less(%100, %101) /* ty=Tensor[(10, 11, 4), bool] */;
    (%102, %103, %104)
  };
  %105() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) */
}

def @func_9136(%var_9134: Tensor[(32), float64], %var_9135: Tensor[(352), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(32), float64], Tensor[(352), float64]) {
  @func_9132(%var_9134, %var_9135) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(32), float64], Tensor[(352), float64]) */
}

def @func_8826() -> (Tensor[(4, 14, 16), float64],) {
  %107 = fn () -> (Tensor[(4, 14, 16), float64],) {
    %106 = @func_3700() /* ty=Tensor[(4, 14, 16), float64] */;
    (%106,)
  };
  %107() /* ty=(Tensor[(4, 14, 16), float64],) */
}

def @func_1604() -> (Tensor[(5, 16, 9), float32],) {
  %108 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %109 = %108.0;
  (%109,)
}

def @func_6266() -> (Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float64]) {
  %110 = @func_5057() /* ty=(Tensor[(12, 5, 10), float64],) */;
  %111 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %112 = %110.0;
  %113 = %111.0;
  (%112, %113)
}

def @func_3048() -> Tensor[(5, 16, 9), float64] {
  @func_3046() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_6028() -> (Tensor[(5, 16, 9), float32],) {
  %114 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %115 = %114.0;
  (%115,)
}

def @func_6540(%var_6538: Tensor[(5, 15, 12), int64], %var_6539: Tensor[(5, 15, 12), int64]) -> Tensor[(5, 15, 12), int64] {
  %120 = fn (%var_6530: Tensor[(5, 15, 12), int64], %var_6531: Tensor[(5, 15, 12), int64]) -> Tensor[(5, 15, 12), int64] {
    %116 = cast(%var_6531, dtype="int64") /* ty=Tensor[(5, 15, 12), int64] */;
    %117 = shape_of(%var_6530, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_6530, dtype="int64") /* ty=Tensor[(5, 15, 12), int64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    right_shift(%118, %119) /* ty=Tensor[(5, 15, 12), int64] */
  };
  %120(%var_6538, %var_6539) /* ty=Tensor[(5, 15, 12), int64] */
}

def @func_8213(%var_8211: Tensor[(14, 15, 10), int32]) -> (Tensor[(14, 15, 10), bool],) {
  @func_8210(%var_8211) /* ty=(Tensor[(14, 15, 10), bool],) */
}

def @func_6795() -> (Tensor[(5, 16, 9), float32],) {
  @func_6793() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_939(%var_937: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  @func_936(%var_937) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_9014() -> (Tensor[(5, 16, 9), float32],) {
  %121 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
  (%121,)
}

def @func_7945() -> Tensor[(5, 16, 9), float32] {
  %122 = @func_6028() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %122.0
}

def @func_7987() -> Tensor[(5, 16, 9), float32] {
  %123 = fn () -> Tensor[(5, 16, 9), float32] {
    @func_7945() /* ty=Tensor[(5, 16, 9), float32] */
  };
  %123() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_4592(%var_4591: Tensor[(5, 16, 9), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool]) {
  %134 = fn (%var_4565: Tensor[(5, 16, 9), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool]) {
    %124 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %125 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
    %126 = %125.2;
    %127 = cast(%var_4565, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = @func_1672() /* ty=Tensor[(5, 16, 9), float32] */;
    %132 = %124.0;
    %133 = greater(%129, %130) /* ty=Tensor[(5, 16, 9), bool] */;
    (%131, %132, %133)
  };
  %134(%var_4591) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool]) */
}

def @func_3519(%var_3514: float64) -> Tensor[(14, 1, 2), float64] {
  %135 = cast(%var_3514, dtype="float64") /* ty=float64 */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 2), float64] */;
  floor_divide(%135, %136) /* ty=Tensor[(14, 1, 2), float64] */
}

def @func_8616(%var_8592: Tensor[(468), float64]) -> (Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(440), float64], Tensor[(468), float64], Tensor[(5, 16, 9), float64]) {
  %137 = @func_8202() /* ty=(Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) */;
  %138 = cast(%var_8592, dtype="float64") /* ty=Tensor[(468), float64] */;
  %139 = cast(%var_8592, dtype="float64") /* ty=Tensor[(468), float64] */;
  %140 = reshape(%138, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %141 = reshape(%139, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %142 = @func_8009(%140, %141) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) */;
  %143 = @func_6416() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %144 = %137.5;
  %145 = @func_7578() /* ty=Tensor[(5, 16, 9), float32] */;
  %146 = %142.2;
  %147 = %143.0;
  (%144, %145, %146, %var_8592, %147)
}

def @func_6418() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_6416() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_8269() -> (Tensor[(5, 16, 9), float32],) {
  @func_8267() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_8461(%var_8419: Tensor[(3, 10, 11), uint32]) -> (Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) {
  %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 10, 11), uint32] */, dtype="uint32") /* ty=Tensor[(3, 10, 11), uint32] */;
  %149 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_8419, dtype="uint32") /* ty=Tensor[(3, 10, 11), uint32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %152 = cast(meta[relay.Constant][9] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %153 = reshape(%152, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 10, 11), uint32] */, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %155 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_8419, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = left_shift(%150, %151) /* ty=Tensor[(3, 10, 11), uint32] */;
  %159 = @func_262(%153) /* ty=Tensor[(4, 14, 16), float64] */;
  %160 = @func_7986() /* ty=Tensor[(5, 16, 9), float32] */;
  %161 = greater_equal(%156, %157) /* ty=Tensor[(3, 10, 11), bool] */;
  (%158, %159, meta[relay.Constant][9] /* ty=Tensor[(896), float64] */, %160, %161)
}

def @func_7751() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_7749() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_3994() -> Tensor[(5, 16, 9), float32] {
  @func_3572() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_4733() -> (Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %186 = fn () -> (Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
    %162 = @func_2840() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) */;
    %163 = @func_2990() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
    %164 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
    %165 = %164.3;
    %166 = cast(%165, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
    %167 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
    %168 = reshape(%166, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %169 = reshape(%167, newshape=[14, 64]) /* ty=Tensor[(14, 64), float64] */;
    %170 = @func_1757(%168, %169) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) */;
    %171 = cast(%165, dtype="float32") /* ty=Tensor[(11, 16, ?), float32] */;
    %172 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
    %174 = reshape(%173, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %175 = @func_3753(%174) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) */;
    %176 = %175.0;
    %177 = cast(%176, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %178 = %162.0;
    %179 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
    %180 = %163.0;
    %181 = %170.1;
    %182 = cosh(%171) /* ty=Tensor[(11, 16, ?), float32] */;
    %183 = %172.0;
    %184 = asinh(%177) /* ty=Tensor[(5, 16, 9), float64] */;
    %185 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
    (%178, meta[relay.Constant][11] /* ty=Tensor[(28, 32), float64] */, %179, %180, %181, %182, %183, %184, %185)
  };
  %186() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_1887(%var_1885: Tensor[(110, 4), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(896), float64], Tensor[(10, 11, 4), float64], Tensor[(110, 4), float64], Tensor[(88, 2), float64]) {
  @func_1884(%var_1885) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(896), float64], Tensor[(10, 11, 4), float64], Tensor[(110, 4), float64], Tensor[(88, 2), float64]) */
}

def @func_8012(%var_8010: Tensor[(13, 4, 9), float64], %var_8011: Tensor[(13, 4, 9), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) {
  %196 = fn (%var_7996: Tensor[(13, 4, 9), float64], %var_7997: Tensor[(13, 4, 9), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) {
    %187 = cast(%var_7997, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %188 = shape_of(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%var_7996, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %192 = reshape(%191, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %193 = @func_1366(%192) /* ty=(Tensor[(10, 11, 4), float64],) */;
    %194 = add(%189, %190) /* ty=Tensor[(13, 4, 9), float64] */;
    %195 = %193.0;
    (%194, %195, meta[relay.Constant][12] /* ty=Tensor[(440), float64] */)
  };
  %196(%var_8010, %var_8011) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(10, 11, 4), float64], Tensor[(440), float64]) */
}

def @func_8785() -> (Tensor[(5, 16, 9), float32],) {
  %198 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %197 = @func_4159() /* ty=Tensor[(5, 16, 9), float32] */;
    (%197,)
  };
  %198() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2160() -> (Tensor[(5, 16, 9), float64],) {
  %199 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %200 = %199.0;
  (%200,)
}

def @func_4084() -> Tensor[(5, 16, 9), float64] {
  %201 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %201.0
}

def @func_2842() -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) {
  @func_2840() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) */
}

def @func_4159() -> Tensor[(5, 16, 9), float32] {
  @func_1124() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_9016() -> (Tensor[(5, 16, 9), float32],) {
  @func_9014() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_423(%var_422: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
  %203 = fn (%var_414: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
    %202 = cast(%var_414, dtype="float64") /* ty=Tensor[(14, 7, 7), float64] */;
    sin(%202) /* ty=Tensor[(14, 7, 7), float64] */
  };
  %203(%var_422) /* ty=Tensor[(14, 7, 7), float64] */
}

def @func_8810() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_8808() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_3700() -> Tensor[(4, 14, 16), float64] {
  %204 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %204.1
}

def @func_8064() -> (Tensor[(5, 16, 9), float32],) {
  @func_8062() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_9391() -> Tensor[(5, 16, 9), float32] {
  @func_9389() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_2721() -> (Tensor[(5, 16, 9), float64],) {
  %205 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %206 = %205.0;
  (%206,)
}

def @func_8204() -> (Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) {
  @func_8202() /* ty=(Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) */
}

def @func_1884(%var_1856: Tensor[(110, 4), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(896), float64], Tensor[(10, 11, 4), float64], Tensor[(110, 4), float64], Tensor[(88, 2), float64]) {
  %207 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %208 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %209 = cast(%var_1856, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %210 = reshape(%209, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %211 = @func_1366(%210) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %214 = reshape(%212, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %215 = reshape(%213, newshape=[14, 64]) /* ty=Tensor[(14, 64), float64] */;
  %216 = @func_1757(%214, %215) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) */;
  %217 = %216.1;
  %218 = cast(meta[relay.Constant][14] /* ty=Tensor[(44, 4), float64] */, dtype="int64") /* ty=Tensor[(44, 4), int64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(2), int32] */;
  %220 = cast(%217, dtype="int64") /* ty=Tensor[(88, 2), int64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %222 = subtract(%220, %221) /* ty=Tensor[(88, 2), int64] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
  %224 = %207.2;
  %225 = %208.0;
  %226 = %211.0;
  %227 = acos(%223) /* ty=Tensor[(88, 2), float64] */;
  (%224, %225, meta[relay.Constant][13] /* ty=Tensor[(896), float64] */, %226, %var_1856, %227)
}

def @func_774(%var_773: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) {
  %256 = fn (%var_710: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) {
    %228 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %229 = %228.0;
    %230 = cast(%229, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
    %231 = atanh(%230) /* ty=Tensor[(5, 16, 9), float32] */;
    %232 = cast(%var_710, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %233 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%229, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %236 = maximum(%234, %235) /* ty=Tensor[(5, 16, 9), int8] */;
    %237 = cast(%236, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %238 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %239 = cast(%231, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %241 = cast(%229, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
    %242 = sigmoid(%241) /* ty=Tensor[(5, 16, 9), float32] */;
    %243 = cast(%229, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%242, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %247 = cast(%242, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %248 = shape_of(%var_710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%var_710, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %251 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
    %252 = logical_and(%239, %240) /* ty=Tensor[(5, 16, 9), bool] */;
    %253 = power(%245, %246) /* ty=Tensor[(5, 16, 9), float64] */;
    %254 = minimum(%249, %250) /* ty=Tensor[(5, 16, 9), int8] */;
    %255 = %251.0;
    (%252, %253, %254, %255)
  };
  %256(%var_773) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), int8], Tensor[(5, 16, 9), float64]) */
}

def @func_7277(%var_7272: Tensor[(8, 140), bool]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32], Tensor[(8, 140), bool]) {
  %257 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %258 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %259 = @func_6715() /* ty=(Tensor[(5, 16, 9), uint8],) */;
  %260 = cast(%var_7272, dtype="bool") /* ty=Tensor[(8, 140), bool] */;
  %261 = reshape(%260, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), bool] */;
  %262 = @func_4479(%261) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) */;
  %263 = %257.1;
  %264 = %258.0;
  %265 = %259.0;
  %266 = %262.1;
  (%263, %264, %265, %266, %var_7272)
}

def @func_1124() -> Tensor[(5, 16, 9), float32] {
  %267 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %267.0
}

def @func_5019() -> Tensor[(5, 16, 9), float64] {
  %268 = @func_4743() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %268.0
}

def @func_7194() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %269 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %270 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %271 = %269.4;
  %272 = %270.0;
  (%271, %272)
}

def @func_2698() -> Tensor[(5, 16, 9), float64] {
  @func_2696() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_9081() -> Tensor[(5, 16, 9), float64] {
  @func_9079() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3113() -> (Tensor[(5, 16, 9), float64],) {
  %273 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
  (%273,)
}

def @func_5628() -> Tensor[(5, 16, 9), int32] {
  @func_5626() /* ty=Tensor[(5, 16, 9), int32] */
}

def @func_4481(%var_4480: Tensor[(14, 8, 10), bool]) -> (Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) {
  %281 = fn (%var_4459: Tensor[(14, 8, 10), bool]) -> (Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) {
    %274 = cast(%var_4459, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
    %275 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(14, 8, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 8, 10), bool] */, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %278 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %279 = logical_and(%276, %277) /* ty=Tensor[(14, 8, 10), bool] */;
    %280 = %278.0;
    (%279, %280)
  };
  %281(%var_4480) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(5, 16, 9), float32]) */
}

def @func_9756() -> (Tensor[(5, 16, 9), float64], Tensor[(330), float32], Tensor[(330), uint32], Tensor[(5, 16, 9), bool]) {
  @func_9754() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(330), float32], Tensor[(330), uint32], Tensor[(5, 16, 9), bool]) */
}

def @func_651() -> (Tensor[(5, 16, 9), float32],) {
  %284 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %282 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2990() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %285 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %287 = sqrt(%286) /* ty=Tensor[(5, 16, 9), float32] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %289 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%285, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = floor_mod(%290, %291) /* ty=Tensor[(5, 16, 9), float64] */;
  %293 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
  (%292, %293)
}

def @func_5093() -> (Tensor[(5, 16, 9), float32],) {
  %294 = @func_4159() /* ty=Tensor[(5, 16, 9), float32] */;
  (%294,)
}

def @func_6716() -> (Tensor[(5, 16, 9), uint8],) {
  %297 = fn () -> (Tensor[(5, 16, 9), uint8],) {
    %295 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
    %296 = %295.3;
    (%296,)
  };
  %297() /* ty=(Tensor[(5, 16, 9), uint8],) */
}

def @func_9404() -> (Tensor[(5, 16, 9), float64],) {
  %300 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %298 = @func_6012() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %299 = %298.0;
    (%299,)
  };
  %300() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_3522(%var_3520: float64) -> Tensor[(14, 1, 2), float64] {
  @func_3519(%var_3520) /* ty=Tensor[(14, 1, 2), float64] */
}

def @func_4345() -> (Tensor[(5, 16, 9), float32],) {
  %301 = @func_3829() /* ty=Tensor[(5, 16, 9), float32] */;
  (%301,)
}

def @func_9629(%var_9588: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float64],) {
  %302 = cast(%var_9588, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %303 = asinh(%302) /* ty=Tensor[(2, 11, 12), float64] */;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %305 = atanh(%304) /* ty=Tensor[(2, 11, 12), float64] */;
  (%305,)
}

def @func_2723() -> (Tensor[(5, 16, 9), float64],) {
  @func_2721() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_3205() -> (Tensor[(5, 16, 9), float32],) {
  %308 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %306 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %307 = %306.1;
    (%307,)
  };
  %308() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_4124(%var_4122: Tensor[(10, 6, 10), int32], %var_4123: Tensor[(10, 6, 10), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) {
  @func_4120(%var_4122, %var_4123) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) */
}

def @func_5059() -> (Tensor[(12, 5, 10), float64],) {
  @func_5057() /* ty=(Tensor[(12, 5, 10), float64],) */
}

def @func_6982() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %309 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %310 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %311 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %312 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %313 = %309.1;
  %314 = %310.0;
  %315 = %311.0;
  %316 = %312.0;
  (%313, %314, %315, %316)
}

def @func_3087() -> Tensor[(5, 16, 9), float32] {
  %318 = fn () -> Tensor[(5, 16, 9), float32] {
    %317 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %317.0
  };
  %318() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_5960() -> (Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %325 = fn () -> (Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
    %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 8), float32] */;
    %320 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %321 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %322 = asinh(%319) /* ty=Tensor[(8, 13, 8), float32] */;
    %323 = %320.8;
    %324 = %321.0;
    (%322, %323, %324)
  };
  %325() /* ty=(Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_7749() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %326 = @func_7379() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) */;
  %327 = @func_6982() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %328 = @func_7578() /* ty=Tensor[(5, 16, 9), float32] */;
  %329 = %326.1;
  %330 = %327.0;
  (%328, %329, %330)
}

def @func_8267() -> (Tensor[(5, 16, 9), float32],) {
  %331 = @func_6793() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %332 = %331.0;
  (%332,)
}

def @func_7013(%var_7012: Tensor[(8, 13, 4), int16]) -> Tensor[(8, 13, 4), int16] {
  %337 = fn (%var_7006: Tensor[(8, 13, 4), int16]) -> Tensor[(8, 13, 4), int16] {
    %333 = cast(%var_7006, dtype="int16") /* ty=Tensor[(8, 13, 4), int16] */;
    %334 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(8, 13, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 13, 4), int16] */, dtype="int16") /* ty=Tensor[(8, 13, 4), int16] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    minimum(%335, %336) /* ty=Tensor[(8, 13, 4), int16] */
  };
  %337(%var_7012) /* ty=Tensor[(8, 13, 4), int16] */
}

def @func_6883() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_6881() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_5095() -> (Tensor[(5, 16, 9), float32],) {
  @func_5093() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_7228(%var_7226: Tensor[(2, 12, 7), float64]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float32], Tensor[(2, 12, 7), float32]) {
  @func_7225(%var_7226) /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float32], Tensor[(2, 12, 7), float32]) */
}

def @func_9587() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(176), float64], Tensor[(600), int32]) {
  @func_9585() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(176), float64], Tensor[(600), int32]) */
}

def @func_5381() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %338 = @func_5040() /* ty=Tensor[(5, 16, 9), float64] */;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %340 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %341 = erf(%339) /* ty=Tensor[(5, 16, 9), float32] */;
  (%340, %341)
}

def @func_5503() -> (Tensor[(5, 16, 9), float32],) {
  @func_5501() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_6908(%var_6907: Tensor[(2, 2, 16), float32]) -> Tensor[(2, 2, 16), float32] {
  %343 = fn (%var_6903: Tensor[(2, 2, 16), float32]) -> Tensor[(2, 2, 16), float32] {
    %342 = cast(%var_6903, dtype="float32") /* ty=Tensor[(2, 2, 16), float32] */;
    sin(%342) /* ty=Tensor[(2, 2, 16), float32] */
  };
  %343(%var_6907) /* ty=Tensor[(2, 2, 16), float32] */
}

def @func_5181(%var_5178: Tensor[(3, 15, 15), float32]) -> Tensor[(3, 15, 15), float32] {
  %344 = cast(%var_5178, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
  log(%344) /* ty=Tensor[(3, 15, 15), float32] */
}

def @func_1916() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %349 = fn () -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
    %345 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
    %346 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %347 = %345.0;
    %348 = %346.0;
    (%347, %348)
  };
  %349() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_9839() -> (Tensor[(5, 16, 9), float32],) {
  %351 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %350 = @func_1672() /* ty=Tensor[(5, 16, 9), float32] */;
    (%350,)
  };
  %351() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_3254() -> (Tensor[(5, 16, 9), float32],) {
  @func_3252() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2745() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_2743() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_6030() -> (Tensor[(5, 16, 9), float32],) {
  @func_6028() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_8937(%var_8935: Tensor[(16, 1, 2), float64], %var_8936: Tensor[(16, 11, 2), float64]) -> (Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) {
  @func_8933(%var_8935, %var_8936) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) */
}

def @func_9831() -> (Tensor[(5, 16, 9), float64],) {
  %353 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %352 = @func_3046() /* ty=Tensor[(5, 16, 9), float64] */;
    (%352,)
  };
  %353() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_5626() -> Tensor[(5, 16, 9), int32] {
  %354 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %355 = %354.0;
  %356 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 16, 9), float64] */, dtype="int32") /* ty=Tensor[(5, 16, 9), int32] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="int32") /* ty=Tensor[(5, 16, 9), int32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%358, %359) /* ty=Tensor[(5, 16, 9), int32] */
}

def @func_264(%var_263: Tensor[(4, 14, 16), float64]) -> Tensor[(4, 14, 16), float64] {
  %364 = fn (%var_249: Tensor[(4, 14, 16), float64]) -> Tensor[(4, 14, 16), float64] {
    %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
    %361 = shape_of(%var_249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %362 = cast(%var_249, dtype="float64") /* ty=Tensor[(4, 14, 16), float64] */;
    %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%362, %363) /* ty=Tensor[(4, 14, 16), float64] */
  };
  %364(%var_263) /* ty=Tensor[(4, 14, 16), float64] */
}

def @func_2384() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %365 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %366 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %367 = %366.1;
  %368 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %369 = %368.1;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %371 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%367, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %374 = %365.0;
  %375 = divide(%372, %373) /* ty=Tensor[(5, 16, 9), float32] */;
  (%374, %375)
}

def @func_1935() -> Tensor[(5, 16, 9), float32] {
  %377 = fn () -> Tensor[(5, 16, 9), float32] {
    %376 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %376.0
  };
  %377() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_5383() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_5381() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_3115() -> (Tensor[(5, 16, 9), float64],) {
  @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_1000() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_1166() -> (Tensor[(5, 16, 9), float32],) {
  %378 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %379 = %378.0;
  (%379,)
}

def @func_9686(%var_9684: Tensor[(15, 7, 11), int8], %var_9685: Tensor[(15, 7, 11), int8]) -> (Tensor[(5, 16, 9), float64], Tensor[(15, 7, 11), float64]) {
  %393 = fn (%var_9637: Tensor[(15, 7, 11), int8], %var_9667: Tensor[(15, 7, 11), int8]) -> (Tensor[(5, 16, 9), float64], Tensor[(15, 7, 11), float64]) {
    %380 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(15, 7, 11), int8] */;
    %381 = shape_of(%var_9637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_9637, dtype="int8") /* ty=Tensor[(15, 7, 11), int8] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %384 = bitwise_xor(%382, %383) /* ty=Tensor[(15, 7, 11), int8] */;
    %385 = cast(%var_9667, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %389 = greater(%387, %388) /* ty=Tensor[(15, 7, 11), bool] */;
    %390 = cast(%389, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
    %391 = @func_6366() /* ty=Tensor[(5, 16, 9), float64] */;
    %392 = asinh(%390) /* ty=Tensor[(15, 7, 11), float64] */;
    (%391, %392)
  };
  %393(%var_9684, %var_9685) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(15, 7, 11), float64]) */
}

def @func_8563(%var_8561: Tensor[(15, 11, 1), uint64], %var_8562: Tensor[(416), int16]) -> (Tensor[(15, 11, 3), bool], Tensor[(8, 13, 4), int16], Tensor[(416), int16], Tensor[(5, 16, 9), float64]) {
  %401 = fn (%var_8529: Tensor[(15, 11, 1), uint64], %var_8536: Tensor[(416), int16]) -> (Tensor[(15, 11, 3), bool], Tensor[(8, 13, 4), int16], Tensor[(416), int16], Tensor[(5, 16, 9), float64]) {
    %394 = cast(%var_8529, dtype="bool") /* ty=Tensor[(15, 11, 1), bool] */;
    %395 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 3), uint64] */, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
    %396 = cast(%var_8536, dtype="int16") /* ty=Tensor[(416), int16] */;
    %397 = reshape(%396, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), int16] */;
    %398 = equal(%394, %395) /* ty=Tensor[(15, 11, 3), bool] */;
    %399 = @func_7011(%397) /* ty=Tensor[(8, 13, 4), int16] */;
    %400 = @func_7683() /* ty=Tensor[(5, 16, 9), float64] */;
    (%398, %399, %var_8536, %400)
  };
  %401(%var_8561, %var_8562) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(8, 13, 4), int16], Tensor[(416), int16], Tensor[(5, 16, 9), float64]) */
}

def @func_3412() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %408 = fn () -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
    %402 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %403 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %404 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %405 = %402.0;
    %406 = %403.1;
    %407 = %404.0;
    (%405, %406, %407)
  };
  %408() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_5021() -> Tensor[(5, 16, 9), float64] {
  @func_5019() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_4898(%var_4897: Tensor[(5, 16, 9), float64]) -> Tensor[(5, 16, 9), float64] {
  %415 = fn (%var_4890: Tensor[(5, 16, 9), float64]) -> Tensor[(5, 16, 9), float64] {
    %409 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %410 = %409.0;
    %411 = cast(%var_4890, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%410, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%413, %414) /* ty=Tensor[(5, 16, 9), float64] */
  };
  %415(%var_4897) /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_4744() -> (Tensor[(5, 16, 9), float64],) {
  %418 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %416 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %417 = %416.0;
    (%417,)
  };
  %418() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_6416() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %419 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %420 = @func_3204() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %421 = %419.1;
  %422 = %420.0;
  (%421, %422)
}

def @func_7280(%var_7278: Tensor[(8, 140), bool]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32], Tensor[(8, 140), bool]) {
  @func_7277(%var_7278) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32], Tensor[(8, 140), bool]) */
}

def @func_9079() -> Tensor[(5, 16, 9), float64] {
  %423 = @func_5916() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %423.0
}

def @func_7196() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  @func_7194() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_4944(%var_4908: Tensor[(4, 15, 1), uint32], %var_4909: Tensor[(4, 15, 13), uint32]) -> (Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %424 = cast(%var_4908, dtype="uint32") /* ty=Tensor[(4, 15, 1), uint32] */;
  %425 = cast(%var_4909, dtype="uint32") /* ty=Tensor[(4, 15, 13), uint32] */;
  %426 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %427 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %428 = bitwise_or(%424, %425) /* ty=Tensor[(4, 15, 13), uint32] */;
  %429 = %426.0;
  %430 = %427.0;
  (%428, %429, %430)
}

def @func_2110() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %431 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %434 = asin(%433) /* ty=Tensor[(5, 16, 9), float32] */;
  %435 = @func_1961() /* ty=Tensor[(5, 16, 9), float32] */;
  (%434, %435)
}

def @func_4277(%var_4248: Tensor[(8, 5, 4), float64]) -> (Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %436 = cast(%var_4248, dtype="float64") /* ty=Tensor[(8, 5, 4), float64] */;
  %437 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %438 = cos(%436) /* ty=Tensor[(8, 5, 4), float64] */;
  %439 = %437.4;
  %440 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
  (%438, %439, %440)
}

def @func_4394() -> Tensor[(5, 16, 9), float64] {
  @func_4392() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3996() -> Tensor[(5, 16, 9), float32] {
  @func_3994() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_1672() -> Tensor[(5, 16, 9), float32] {
  @func_1124() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_2840() -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool]) {
  %441 = cast(meta[relay.Constant][22] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %442 = reshape(%441, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %443 = @func_936(%442) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %445 = reshape(%444, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %446 = @func_163(%445) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %447 = @func_2506() /* ty=Tensor[(5, 16, 9), float64] */;
  %448 = %443.3;
  %449 = %446.0;
  (%447, %448, meta[relay.Constant][22] /* ty=Tensor[(176), float64] */, %449)
}

def @func_1194() -> (Tensor[(5, 16, 9), float64],) {
  %452 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %450 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %451 = %450.0;
    (%451,)
  };
  %452() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_1369(%var_1367: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64],) {
  @func_1366(%var_1367) /* ty=(Tensor[(10, 11, 4), float64],) */
}

def @func_1961() -> Tensor[(5, 16, 9), float32] {
  %453 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %453.0
}

def @func_5917() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %457 = fn () -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
    %454 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %455 = %454.0;
    %456 = @func_5430() /* ty=Tensor[(5, 16, 9), float64] */;
    (%455, %456)
  };
  %457() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_8647() -> Tensor[(176), float64] {
  @func_8645() /* ty=Tensor[(176), float64] */
}

def @func_4280(%var_4278: Tensor[(8, 5, 4), float64]) -> (Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_4277(%var_4278) /* ty=(Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_6114() -> Tensor[(5, 16, 9), float32] {
  @func_6112() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_2386() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_9132(%var_9115: Tensor[(32), float64], %var_9116: Tensor[(352), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(32), float64], Tensor[(352), float64]) {
  %458 = cast(%var_9115, dtype="float64") /* ty=Tensor[(32), float64] */;
  %459 = cast(%var_9116, dtype="float64") /* ty=Tensor[(352), float64] */;
  %460 = reshape(%458, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float64] */;
  %461 = reshape(%459, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), float64] */;
  %462 = @func_8933(%460, %461) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) */;
  %463 = @func_6366() /* ty=Tensor[(5, 16, 9), float64] */;
  %464 = %462.2;
  (%463, %464, %var_9115, %var_9116)
}

def @func_7508() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  %465 = @func_7379() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float32]) */;
  %466 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %467 = %465.1;
  %468 = %466.0;
  (%467, %468)
}

def @func_6014() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_6012() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_3573() -> Tensor[(5, 16, 9), float32] {
  %470 = fn () -> Tensor[(5, 16, 9), float32] {
    %469 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %469.0
  };
  %470() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_9585() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(176), float64], Tensor[(600), int32]) {
  %471 = cast(meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %472 = cast(meta[relay.Constant][24] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %473 = reshape(%471, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %474 = reshape(%472, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %475 = @func_5875(%473, %474) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) */;
  %476 = @func_9487() /* ty=Tensor[(5, 16, 9), float64] */;
  %477 = %475.0;
  (%476, %477, meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, meta[relay.Constant][24] /* ty=Tensor[(600), int32] */)
}

def @func_4839() -> (Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) {
  %478 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %479 = @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */;
  %480 = %478.0;
  %481 = %479.2;
  (%480, %481)
}

def @func_5553(%var_5550: Tensor[(5, 14, 12), int8], %var_5551: Tensor[(5, 14, 12), int8], %var_5552: float64) -> (Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) {
  %509 = fn (%var_5506: Tensor[(5, 14, 12), int8], %var_5507: Tensor[(5, 14, 12), int8], %var_5518: float64) -> (Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) {
    %482 = cast(%var_5518, dtype="float64") /* ty=float64 */;
    %483 = reshape(%482, newshape=[]) /* ty=float64 */;
    %484 = cast(%var_5507, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
    %485 = shape_of(%var_5506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%var_5506, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %488 = greater_equal(%486, %487) /* ty=Tensor[(5, 14, 12), bool] */;
    %489 = cast(%488, dtype="float64") /* ty=Tensor[(5, 14, 12), float64] */;
    %490 = tan(%489) /* ty=Tensor[(5, 14, 12), float64] */;
    %491 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
    %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%490, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %495 = floor_divide(%493, %494) /* ty=Tensor[(5, 14, 12), float32] */;
    %496 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="bool") /* ty=Tensor[(5, 14, 12), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %500 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 14, 12), float32] */, dtype="uint8") /* ty=Tensor[(5, 14, 12), uint8] */;
    %501 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%495, dtype="uint8") /* ty=Tensor[(5, 14, 12), uint8] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
    %505 = @func_3519(%483) /* ty=Tensor[(14, 1, 2), float64] */;
    %506 = equal(%498, %499) /* ty=Tensor[(5, 14, 12), bool] */;
    %507 = left_shift(%502, %503) /* ty=Tensor[(5, 14, 12), uint8] */;
    %508 = log10(%504) /* ty=Tensor[(5, 14, 12), float32] */;
    (%505, %var_5518, %506, %507, %508)
  };
  %509(%var_5550, %var_5551, %var_5552) /* ty=(Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) */
}

def @func_9545(%var_9544: Tensor[(330), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) {
  %519 = fn (%var_9527: Tensor[(330), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) {
    %510 = cast(%var_9527, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %511 = reshape(%510, newshape=[3, 10, 11]) /* ty=Tensor[(3, 10, 11), uint32] */;
    %512 = @func_8461(%511) /* ty=(Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) */;
    %513 = cast(%var_9527, dtype="float32") /* ty=Tensor[(330), float32] */;
    %514 = @func_2743() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %515 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
    %516 = %512.3;
    %517 = acos(%513) /* ty=Tensor[(330), float32] */;
    %518 = %514.0;
    (%515, %516, %517, %518)
  };
  %519(%var_9544) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_7660() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 14, 12), float32], Tensor[(840), int8], float64, Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(3, 15, 15), float32], Tensor[(675), float32]) {
  @func_7658() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 14, 12), float32], Tensor[(840), int8], float64, Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(3, 15, 15), float32], Tensor[(675), float32]) */
}

def @func_7579() -> Tensor[(5, 16, 9), float32] {
  %520 = fn () -> Tensor[(5, 16, 9), float32] {
    @func_3829() /* ty=Tensor[(5, 16, 9), float32] */
  };
  %520() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_9389() -> Tensor[(5, 16, 9), float32] {
  %521 = @func_7455() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %521.1
}

def @func_9318() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_9316() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_6615() -> Tensor[(5, 16, 9), float64] {
  %523 = fn () -> Tensor[(5, 16, 9), float64] {
    %522 = @func_998() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
    %522.2
  };
  %523() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_7683() -> Tensor[(5, 16, 9), float64] {
  @func_4873() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_5878(%var_5876: Tensor[(176), float64], %var_5877: Tensor[(2, 300), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) {
  %554 = fn (%var_5798: Tensor[(176), float64], %var_5821: Tensor[(2, 300), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) {
    %524 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %525 = cast(%var_5821, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
    %526 = cast(%var_5821, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
    %527 = reshape(%525, newshape=[10, 6, 10]) /* ty=Tensor[(10, 6, 10), int32] */;
    %528 = reshape(%526, newshape=[10, 6, 10]) /* ty=Tensor[(10, 6, 10), int32] */;
    %529 = @func_4120(%527, %528) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) */;
    %530 = cast(%var_5798, dtype="float64") /* ty=Tensor[(176), float64] */;
    %531 = reshape(%530, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %532 = @func_351(%531) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
    %533 = %532.3;
    %534 = cast(%var_5798, dtype="int32") /* ty=Tensor[(176), int32] */;
    %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(%533, dtype="int32") /* ty=Tensor[(11, 16, ?), int32] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %538 = bitwise_and(%536, %537) /* ty=Tensor[(11, 16, ?), int32] */;
    %539 = cast(%538, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
    %540 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%533, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %543 = not_equal(%541, %542) /* ty=Tensor[(11, 16, ?), bool] */;
    %544 = cast(%538, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
    %549 = @func_4873() /* ty=Tensor[(5, 16, 9), float64] */;
    %550 = %524.0;
    %551 = @func_5626() /* ty=Tensor[(5, 16, 9), int32] */;
    %552 = %529.0;
    %553 = logical_or(%546, %547) /* ty=Tensor[(11, 16, ?), bool] */;
    (%548, %549, %550, %551, %552, %var_5821, %553)
  };
  %554(%var_5876, %var_5877) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) */
}

def @func_2743() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %555 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %556 = %555.0;
  %557 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%556, %557)
}

def @func_7135() -> (Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) {
  %573 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) {
    %558 = @func_3252() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %559 = @func_4647() /* ty=Tensor[(11, 4, 9), float32] */;
    %560 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 4, 9), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
    %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%559, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %564 = equal(%562, %563) /* ty=Tensor[(11, 4, 9), bool] */;
    %565 = cast(%564, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
    %566 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%559, dtype="bool") /* ty=Tensor[(11, 4, 9), bool] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %569 = cast(%559, dtype="float64") /* ty=Tensor[(11, 4, 9), float64] */;
    %570 = %558.0;
    %571 = greater_equal(%567, %568) /* ty=Tensor[(11, 4, 9), bool] */;
    %572 = acos(%569) /* ty=Tensor[(11, 4, 9), float64] */;
    (%570, %571, %572)
  };
  %573() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 4, 9), bool], Tensor[(11, 4, 9), float64]) */
}

def @func_1298() -> Tensor[(5, 16, 9), float64] {
  %575 = fn () -> Tensor[(5, 16, 9), float64] {
    %574 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %574.0
  };
  %575() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_2992() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  @func_2990() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_2785() -> (Tensor[(5, 16, 9), float64],) {
  %576 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %577 = %576.0;
  (%577,)
}

def @func_700() -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) {
  @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */
}

def @func_5057() -> (Tensor[(12, 5, 10), float64],) {
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %579 = sigmoid(%578) /* ty=Tensor[(12, 5, 10), float32] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(12, 5, 10), float64] */;
  %581 = cos(%580) /* ty=Tensor[(12, 5, 10), float64] */;
  (%581,)
}

def @func_6984() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  @func_6982() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_1282(%var_1281: Tensor[(88, 2), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) {
  %588 = fn (%var_1273: Tensor[(88, 2), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) {
    %582 = @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %583 = cast(%var_1273, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
    %584 = reshape(%583, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %585 = @func_936(%584) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
    %586 = %582.0;
    %587 = %585.1;
    (%586, %587, %var_1273)
  };
  %588(%var_1281) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) */
}

def @func_8808() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %589 = @func_8267() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %590 = @func_7945() /* ty=Tensor[(5, 16, 9), float32] */;
  %591 = %589.0;
  (%590, %591)
}

def @func_8695(%var_8693: Tensor[(1404), int64]) -> (Tensor[(5, 16, 9), float64], Tensor[(12, 13, 9), bool], Tensor[(1404), int64], Tensor[(4, 14, 16), float64]) {
  @func_8692(%var_8693) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(12, 13, 9), bool], Tensor[(1404), int64], Tensor[(4, 14, 16), float64]) */
}

def @func_4648() -> Tensor[(11, 4, 9), float32] {
  %593 = fn () -> Tensor[(11, 4, 9), float32] {
    %592 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
    asinh(%592) /* ty=Tensor[(11, 4, 9), float32] */
  };
  %593() /* ty=Tensor[(11, 4, 9), float32] */
}

def @func_447() -> (Tensor[(5, 16, 9), float32],) {
  %594 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %597 = exp(%596) /* ty=Tensor[(5, 16, 9), float32] */;
  (%597,)
}

def @func_6318(%var_6316: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(5, 16, 9), float32], Tensor[(160), float64]) {
  @func_6315(%var_6316) /* ty=(Tensor[(16, 9, 13), float32], Tensor[(5, 16, 9), float32], Tensor[(160), float64]) */
}

def @func_163(%var_135: Tensor[(11, 16, 1), float64]) -> (Tensor[(11, 16, ?), bool],) {
  %598 = cast(%var_135, dtype="float64") /* ty=Tensor[(11, 16, 1), float64] */;
  %599 = log10(%598) /* ty=Tensor[(11, 16, 1), float64] */;
  %600 = cast(%var_135, dtype="bool") /* ty=Tensor[(11, 16, 1), bool] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(11, 16, 1), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = less(%602, %603) /* ty=Tensor[(11, 16, ?), bool] */;
  (%604,)
}

def @func_3288(%var_3287: Tensor[(12, 13, 9), int64]) -> (Tensor[(12, 13, 9), bool],) {
  %610 = fn (%var_3280: Tensor[(12, 13, 9), int64]) -> (Tensor[(12, 13, 9), bool],) {
    %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 13, 9), int64] */, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
    %606 = shape_of(%var_3280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%var_3280, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %609 = greater(%607, %608) /* ty=Tensor[(12, 13, 9), bool] */;
    (%609,)
  };
  %610(%var_3287) /* ty=(Tensor[(12, 13, 9), bool],) */
}

def @func_6012() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %611 = @func_1915() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %612 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %613 = %611.0;
  %614 = %612.0;
  (%613, %614)
}

def @func_8872(%var_8871: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
  %624 = fn (%var_8854: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
    %615 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %616 = shape_of(%var_8854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%var_8854, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %619 = divide(%617, %618) /* ty=Tensor[(13, 4, 14), float32] */;
    %620 = cast(%619, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %621 = sin(%620) /* ty=Tensor[(13, 4, 14), float32] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %623 = acosh(%622) /* ty=Tensor[(13, 4, 14), float32] */;
    (%623,)
  };
  %624(%var_8871) /* ty=(Tensor[(13, 4, 14), float32],) */
}

def @func_4161() -> Tensor[(5, 16, 9), float32] {
  @func_4159() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_2142() -> (Tensor[(5, 16, 9), float64],) {
  %627 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %625 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %626 = %625.0;
    (%626,)
  };
  %627() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_6729() -> (Tensor[(5, 16, 9), float32],) {
  %630 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %628 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %629 = %628.0;
    (%629,)
  };
  %630() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_6104() -> Tensor[(1, 7, 13), float32] {
  %632 = fn () -> Tensor[(1, 7, 13), float32] {
    %631 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
    atan(%631) /* ty=Tensor[(1, 7, 13), float32] */
  };
  %632() /* ty=Tensor[(1, 7, 13), float32] */
}

def @func_6496() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %635 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
    %633 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
    %634 = @func_5019() /* ty=Tensor[(5, 16, 9), float64] */;
    (%633, %634)
  };
  %635() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_4392() -> Tensor[(5, 16, 9), float64] {
  %636 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %636.0
}

def @func_2787() -> (Tensor[(5, 16, 9), float64],) {
  @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_1757(%var_1729: Tensor[(176), float64], %var_1745: Tensor[(14, 64), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(88, 2), float64], Tensor[(176), float64], Tensor[(5, 16, 9), float32], Tensor[(14, 64), float64], Tensor[(4, 14, 16), uint16]) {
  %637 = @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %638 = cast(%var_1729, dtype="float64") /* ty=Tensor[(176), float64] */;
  %639 = reshape(%638, newshape=[88, 2]) /* ty=Tensor[(88, 2), float64] */;
  %640 = @func_1280(%639) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(88, 2), float64]) */;
  %641 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %642 = cast(%var_1745, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
  %643 = reshape(%642, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %644 = @func_262(%643) /* ty=Tensor[(4, 14, 16), float64] */;
  %645 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 14, 16), float64] */, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %649 = %637.0;
  %650 = %640.2;
  %651 = %641.0;
  %652 = right_shift(%647, %648) /* ty=Tensor[(4, 14, 16), uint16] */;
  (%649, %650, %var_1729, %651, %var_1745, %652)
}

def @func_7456() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %656 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
    %653 = @func_5959() /* ty=(Tensor[(8, 13, 8), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %654 = %653.2;
    %655 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_7325() -> (Tensor[(5, 16, 9), float32],) {
  %658 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %657 = @func_3086() /* ty=Tensor[(5, 16, 9), float32] */;
    (%657,)
  };
  %658() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_1674() -> Tensor[(5, 16, 9), float32] {
  @func_1672() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_8062() -> (Tensor[(5, 16, 9), float32],) {
  %659 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %660 = %659.0;
  (%660,)
}

def @func_9779() -> (Tensor[(8, 12, 10), float64], Tensor[(5, 16, 9), float64]) {
  @func_9777() /* ty=(Tensor[(8, 12, 10), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_9488() -> Tensor[(5, 16, 9), float64] {
  %661 = fn () -> Tensor[(5, 16, 9), float64] {
    @func_5019() /* ty=Tensor[(5, 16, 9), float64] */
  };
  %661() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_8667() -> (Tensor[(5, 16, 9), float32],) {
  %664 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %662 = @func_5970() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %663 = %662.1;
    (%663,)
  };
  %664() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2204() -> Tensor[(5, 16, 9), float32] {
  %666 = fn () -> Tensor[(5, 16, 9), float32] {
    %665 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %665.0
  };
  %666() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_5184(%var_5182: Tensor[(3, 15, 15), float32]) -> Tensor[(3, 15, 15), float32] {
  @func_5181(%var_5182) /* ty=Tensor[(3, 15, 15), float32] */
}

def @func_6881() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %667 = @func_3252() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %668 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %669 = %667.0;
  %670 = %668.0;
  (%669, %670)
}

def @func_2685() -> (Tensor[(5, 16, 9), float32],) {
  %672 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %671 = @func_1961() /* ty=Tensor[(5, 16, 9), float32] */;
    (%671,)
  };
  %672() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2357() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_1469() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_351(%var_318: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) {
  %673 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %674 = cast(%var_318, dtype="float64") /* ty=Tensor[(176), float64] */;
  %675 = reshape(%674, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %676 = @func_163(%675) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %677 = %676.0;
  %678 = cast(%var_318, dtype="bool") /* ty=Tensor[(176), bool] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="bool") /* ty=Tensor[(11, 16, ?), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = cast(%677, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %683 = reshape(%682, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %684 = @func_163(%683) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %685 = %684.0;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %687 = reshape(%686, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %688 = @func_163(%687) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %689 = %673.0;
  %690 = greater_equal(%680, %681) /* ty=Tensor[(11, 16, ?), bool] */;
  %691 = %688.0;
  (%689, %690, %685, %691)
}

def @func_6112() -> Tensor[(5, 16, 9), float32] {
  @func_2203() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_7658() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 14, 12), float32], Tensor[(840), int8], float64, Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(3, 15, 15), float32], Tensor[(675), float32]) {
  %692 = @func_5501() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %693 = %692.0;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %695 = @func_7324() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %696 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), int8] */, dtype="int8") /* ty=Tensor[(840), int8] */;
  %697 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), int8] */, dtype="int8") /* ty=Tensor[(840), int8] */;
  %698 = cast(7.87943f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %699 = reshape(%696, newshape=[5, 14, 12]) /* ty=Tensor[(5, 14, 12), int8] */;
  %700 = reshape(%697, newshape=[5, 14, 12]) /* ty=Tensor[(5, 14, 12), int8] */;
  %701 = reshape(%698, newshape=[]) /* ty=float64 */;
  %702 = @func_5549(%699, %700, %701) /* ty=(Tensor[(14, 1, 2), float64], float64, Tensor[(5, 14, 12), bool], Tensor[(5, 14, 12), uint8], Tensor[(5, 14, 12), float32]) */;
  %703 = @func_5057() /* ty=(Tensor[(12, 5, 10), float64],) */;
  %704 = @func_7194() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %705 = @func_7508() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %706 = cast(meta[relay.Constant][35] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %707 = reshape(%706, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
  %708 = log10(%694) /* ty=Tensor[(5, 16, 9), float64] */;
  %709 = %695.0;
  %710 = %702.4;
  %711 = %703.0;
  %712 = %704.0;
  %713 = @func_5040() /* ty=Tensor[(5, 16, 9), float64] */;
  %714 = %705.1;
  %715 = @func_5181(%707) /* ty=Tensor[(3, 15, 15), float32] */;
  (%708, %709, %710, meta[relay.Constant][34] /* ty=Tensor[(840), int8] */, 7.87943f64 /* ty=float64 */, %711, %712, %713, %714, %715, meta[relay.Constant][35] /* ty=Tensor[(675), float32] */)
}

def @func_7856(%var_7854: Tensor[(16, 9, 9), float64]) -> (Tensor[(16, 9, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_7853(%var_7854) /* ty=(Tensor[(16, 9, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_1366(%var_1359: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64],) {
  %716 = cast(%var_1359, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %717 = sigmoid(%716) /* ty=Tensor[(10, 11, 4), float64] */;
  (%717,)
}

def @func_5430() -> Tensor[(5, 16, 9), float64] {
  @func_2506() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_8464(%var_8462: Tensor[(3, 10, 11), uint32]) -> (Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) {
  @func_8461(%var_8462) /* ty=(Tensor[(3, 10, 11), uint32], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(5, 16, 9), float32], Tensor[(3, 10, 11), bool]) */
}

def @func_8645() -> Tensor[(176), float64] {
  %718 = @func_7791() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(176), float64], Tensor[(10, 11, 4), bool]) */;
  %718.1
}

def @func_8980() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %719 = @func_6982() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %720 = @func_3829() /* ty=Tensor[(5, 16, 9), float32] */;
  %721 = %719.3;
  (%720, %721)
}

def @func_8692(%var_8685: Tensor[(1404), int64]) -> (Tensor[(5, 16, 9), float64], Tensor[(12, 13, 9), bool], Tensor[(1404), int64], Tensor[(4, 14, 16), float64]) {
  %722 = cast(%var_8685, dtype="int64") /* ty=Tensor[(1404), int64] */;
  %723 = reshape(%722, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), int64] */;
  %724 = @func_3286(%723) /* ty=(Tensor[(12, 13, 9), bool],) */;
  %725 = @func_698() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64]) */;
  %726 = @func_8389() /* ty=Tensor[(5, 16, 9), float64] */;
  %727 = %724.0;
  %728 = %725.1;
  (%726, %727, %var_8685, %728)
}

def @func_7685() -> Tensor[(5, 16, 9), float64] {
  @func_7683() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3316(%var_3314: bool, %var_3315: Tensor[(9, 3, 1), bool]) -> (Tensor[(9, 3, 1), bool],) {
  %732 = fn (%var_3301: bool, %var_3302: Tensor[(9, 3, 1), bool]) -> (Tensor[(9, 3, 1), bool],) {
    %729 = cast(%var_3301, dtype="bool") /* ty=bool */;
    %730 = cast(%var_3302, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
    %731 = logical_and(%729, %730) /* ty=Tensor[(9, 3, 1), bool] */;
    (%731,)
  };
  %732(%var_3314, %var_3315) /* ty=(Tensor[(9, 3, 1), bool],) */
}

def @func_8202() -> (Tensor[(5, 16, 9), uint8], Tensor[(130, 6), uint32], Tensor[(60), uint32], Tensor[(5, 16, 9), float32], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 4, 9), float32]) {
  %733 = @func_6715() /* ty=(Tensor[(5, 16, 9), uint8],) */;
  %734 = cast(meta[relay.Constant][36] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %735 = reshape(%734, newshape=[1, 60]) /* ty=Tensor[(1, 60), uint32] */;
  %736 = @func_5261(%735) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) */;
  %737 = cast(meta[relay.Constant][37] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %738 = reshape(%737, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %739 = @func_163(%738) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %740 = %733.0;
  %741 = %736.3;
  %742 = @func_7986() /* ty=Tensor[(5, 16, 9), float32] */;
  %743 = %739.0;
  %744 = @func_4647() /* ty=Tensor[(11, 4, 9), float32] */;
  (%740, %741, meta[relay.Constant][36] /* ty=Tensor[(60), uint32] */, %742, %743, meta[relay.Constant][37] /* ty=Tensor[(176), float64] */, %744)
}

def @func_8416() -> Tensor[(5, 16, 9), float64] {
  %745 = @func_3113() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %745.0
}

def @func_998() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %746 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %747 = %746.0;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(5, 16, 9), float64] */;
  %749 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %750 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %751 = log(%748) /* ty=Tensor[(5, 16, 9), float64] */;
  %752 = %749.0;
  %753 = %750.0;
  (%751, %752, %753)
}

def @func_6161() -> (Tensor[(5, 16, 9), float64], Tensor[(8, 9, 10), float32], Tensor[(5, 16, 9), float64]) {
  %760 = fn () -> (Tensor[(5, 16, 9), float64], Tensor[(8, 9, 10), float32], Tensor[(5, 16, 9), float64]) {
    %754 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
    %755 = %754.0;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
    %757 = reshape(%756, newshape=[8, 9, 10]) /* ty=Tensor[(8, 9, 10), float32] */;
    %758 = @func_602(%757) /* ty=Tensor[(8, 9, 10), float32] */;
    %759 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
    (%755, %758, %759)
  };
  %760() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(8, 9, 10), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_376() -> (Tensor[(5, 16, 9), float32],) {
  %765 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %761 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %762 = %761.0;
    %763 = cast(%762, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
    %764 = acosh(%763) /* ty=Tensor[(5, 16, 9), float32] */;
    (%764,)
  };
  %765() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_2696() -> Tensor[(5, 16, 9), float64] {
  %766 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %766.0
}

def @func_4792() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %772 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
    %767 = @func_2743() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %768 = @func_2384() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %769 = %767.0;
    %770 = %768.0;
    %771 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
    (%769, %770, %771)
  };
  %772() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_1606() -> (Tensor[(5, 16, 9), float32],) {
  @func_1604() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_5264(%var_5262: Tensor[(1, 60), uint32]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) {
  @func_5261(%var_5262) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 15, 13), uint32], Tensor[(1, 60), uint32], Tensor[(130, 6), uint32]) */
}

def @func_9632(%var_9630: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float64],) {
  @func_9629(%var_9630) /* ty=(Tensor[(2, 11, 12), float64],) */
}

def @func_9210() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %781 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
    %773 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %774 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %775 = @func_6793() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %776 = @func_6495() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
    %777 = %773.0;
    %778 = %774.1;
    %779 = %775.0;
    %780 = %776.1;
    (%777, %778, %779, %780)
  };
  %781() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_5971() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %786 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
    %782 = @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %783 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %784 = %782.1;
    %785 = %783.1;
    (%784, %785)
  };
  %786() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_9777() -> (Tensor[(8, 12, 10), float64], Tensor[(5, 16, 9), float64]) {
  %787 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 10), float64] */;
  %788 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %789 = tan(%787) /* ty=Tensor[(8, 12, 10), float64] */;
  %790 = %788.0;
  (%789, %790)
}

def @func_9754() -> (Tensor[(5, 16, 9), float64], Tensor[(330), float32], Tensor[(330), uint32], Tensor[(5, 16, 9), bool]) {
  %791 = @func_6495() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %792 = cast(meta[relay.Constant][39] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %793 = reshape(%792, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %794 = @func_9543(%793) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(330), float32], Tensor[(5, 16, 9), float32]) */;
  %795 = %791.1;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %797 = cast(%795, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %798 = reshape(%796, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
  %799 = reshape(%797, newshape=[5, 16, 9]) /* ty=Tensor[(5, 16, 9), float32] */;
  %800 = @func_2473(%798, %799) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) */;
  %801 = %794.2;
  %802 = %800.1;
  (%795, %801, meta[relay.Constant][39] /* ty=Tensor[(330), uint32] */, %802)
}

def @func_3830() -> Tensor[(5, 16, 9), float32] {
  %804 = fn () -> Tensor[(5, 16, 9), float32] {
    %803 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %803.1
  };
  %804() /* ty=Tensor[(5, 16, 9), float32] */
}

def @func_4948(%var_4946: Tensor[(4, 15, 1), uint32], %var_4947: Tensor[(4, 15, 13), uint32]) -> (Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  @func_4944(%var_4946, %var_4947) /* ty=(Tensor[(4, 15, 13), uint32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_5501() -> (Tensor[(5, 16, 9), float32],) {
  %805 = @func_2355() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %806 = %805.1;
  (%806,)
}

def @func_4999(%var_4988: Tensor[(5, 16, 9), float32]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), bool], Tensor[(896), float32]) {
  %807 = cast(meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %808 = reshape(%807, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %809 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %810 = @func_2684() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %811 = @func_3411() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */;
  %812 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
  %813 = cast(%var_4988, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %817 = cast(meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %818 = @func_262(%808) /* ty=Tensor[(4, 14, 16), float64] */;
  %819 = %809.0;
  %820 = %810.0;
  %821 = %811.2;
  %822 = greater_equal(%815, %816) /* ty=Tensor[(5, 16, 9), bool] */;
  %823 = sigmoid(%817) /* ty=Tensor[(896), float32] */;
  (%818, %819, %820, %821, %822, %823)
}

def @func_7691() -> (Tensor[(5, 16, 9), float32],) {
  %825 = fn () -> (Tensor[(5, 16, 9), float32],) {
    %824 = @func_6112() /* ty=Tensor[(5, 16, 9), float32] */;
    (%824,)
  };
  %825() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_4086() -> Tensor[(5, 16, 9), float64] {
  @func_4084() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_7225(%var_7199: Tensor[(2, 12, 7), float64]) -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float32], Tensor[(2, 12, 7), float32]) {
  %826 = @func_4839() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(4, 14, 16), float64]) */;
  %827 = cast(%var_7199, dtype="float64") /* ty=Tensor[(2, 12, 7), float64] */;
  %828 = erf(%827) /* ty=Tensor[(2, 12, 7), float64] */;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(2, 12, 7), float32] */;
  %830 = %826.1;
  %831 = @func_1124() /* ty=Tensor[(5, 16, 9), float32] */;
  %832 = cos(%829) /* ty=Tensor[(2, 12, 7), float32] */;
  (%830, %831, %832)
}

def @func_4120(%var_4090: Tensor[(10, 6, 10), int32], %var_4091: Tensor[(10, 6, 10), int32]) -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(10, 6, 10), float64]) {
  %833 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %834 = @func_650() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %835 = cast(%var_4090, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %836 = cosh(%835) /* ty=Tensor[(10, 6, 10), float64] */;
  %837 = cast(%var_4091, dtype="int32") /* ty=Tensor[(10, 6, 10), int32] */;
  %838 = shape_of(%var_4090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%var_4090, dtype="int32") /* ty=Tensor[(10, 6, 10), int32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %841 = right_shift(%839, %840) /* ty=Tensor[(10, 6, 10), int32] */;
  %842 = cast(%841, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %843 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%836, dtype="float64") /* ty=Tensor[(10, 6, 10), float64] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %846 = @func_2696() /* ty=Tensor[(5, 16, 9), float64] */;
  %847 = %833.0;
  %848 = %834.0;
  %849 = floor_mod(%844, %845) /* ty=Tensor[(10, 6, 10), float64] */;
  (%846, %847, %848, %849)
}

def @func_8210(%var_8205: Tensor[(14, 15, 10), int32]) -> (Tensor[(14, 15, 10), bool],) {
  %850 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 15, 10), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %851 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%var_8205, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %854 = equal(%852, %853) /* ty=Tensor[(14, 15, 10), bool] */;
  (%854,)
}

def @func_1168() -> (Tensor[(5, 16, 9), float32],) {
  @func_1166() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_9316() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %855 = @func_2785() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %856 = @func_3877() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %857 = %855.0;
  %858 = %856.1;
  (%857, %858)
}

def @func_6367() -> Tensor[(5, 16, 9), float64] {
  %860 = fn () -> Tensor[(5, 16, 9), float64] {
    %859 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %859.0
  };
  %860() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3755(%var_3754: Tensor[(896), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) {
  %866 = fn (%var_3739: Tensor[(896), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) {
    %861 = @func_2160() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %862 = cast(%var_3739, dtype="float64") /* ty=Tensor[(896), float64] */;
    %863 = reshape(%862, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
    %864 = %861.0;
    %865 = @func_262(%863) /* ty=Tensor[(4, 14, 16), float64] */;
    (%864, %865, %var_3739)
  };
  %866(%var_3754) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(896), float64]) */
}

def @func_4874() -> Tensor[(5, 16, 9), float64] {
  %868 = fn () -> Tensor[(5, 16, 9), float64] {
    %867 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
    %867.0
  };
  %868() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_936(%var_870: Tensor[(176), float64]) -> (Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(176), float64], Tensor[(11, 16, ?), bool], Tensor[(8, 9, 10), float32], Tensor[(11, 16, ?), bool], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  %869 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %870 = cast(%var_870, dtype="float64") /* ty=Tensor[(176), float64] */;
  %871 = reshape(%870, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %872 = @func_163(%871) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %873 = %872.0;
  %874 = cast(%873, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %875 = reshape(%874, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %876 = @func_351(%875) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %877 = %869.0;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(5, 16, 9), float32] */;
  %879 = reshape(%878, newshape=[8, 9, 10]) /* ty=Tensor[(8, 9, 10), float32] */;
  %880 = cast(%873, dtype="float64") /* ty=Tensor[(11, 16, ?), float64] */;
  %881 = reshape(%880, newshape=[11, 16, 1]) /* ty=Tensor[(11, 16, 1), float64] */;
  %882 = @func_163(%881) /* ty=(Tensor[(11, 16, ?), bool],) */;
  %883 = @func_375() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %884 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %885 = %876.3;
  %886 = @func_602(%879) /* ty=Tensor[(8, 9, 10), float32] */;
  %887 = %882.0;
  %888 = %883.0;
  %889 = %884.0;
  (%877, %873, %var_870, %885, %886, %887, %888, %889)
}

def @func_604(%var_603: Tensor[(8, 9, 10), float32]) -> Tensor[(8, 9, 10), float32] {
  %894 = fn (%var_597: Tensor[(8, 9, 10), float32]) -> Tensor[(8, 9, 10), float32] {
    %890 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
    %891 = shape_of(%var_597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%var_597, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    subtract(%892, %893) /* ty=Tensor[(8, 9, 10), float32] */
  };
  %894(%var_603) /* ty=Tensor[(8, 9, 10), float32] */
}

def @func_8933(%var_8893: Tensor[(16, 1, 2), float64], %var_8894: Tensor[(16, 11, 2), float64]) -> (Tensor[(16, 11, 2), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(176, 1), float64], Tensor[(600), int32], Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool]) {
  %895 = cast(%var_8893, dtype="float64") /* ty=Tensor[(16, 1, 2), float64] */;
  %896 = cast(%var_8894, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %897 = @func_275() /* ty=(Tensor[(5, 16, 9), float64],) */;
  %898 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %899 = cast(meta[relay.Constant][43] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %900 = cast(meta[relay.Constant][44] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %901 = reshape(%899, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %902 = reshape(%900, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %903 = @func_5875(%901, %902) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), int32], Tensor[(5, 16, 9), float64], Tensor[(2, 300), int32], Tensor[(11, 16, ?), bool]) */;
  %904 = @func_4791() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
  %905 = cast(meta[relay.Constant][43] /* ty=Tensor[(176, 1), float64] */, dtype="float64") /* ty=Tensor[(176, 1), float64] */;
  %906 = reshape(%905, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %907 = @func_351(%906) /* ty=(Tensor[(5, 16, 9), float64], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool], Tensor[(11, 16, ?), bool]) */;
  %908 = power(%895, %896) /* ty=Tensor[(16, 11, 2), float64] */;
  %909 = %897.0;
  %910 = %898.6;
  %911 = %903.4;
  %912 = %904.1;
  %913 = %907.3;
  (%908, %909, %910, %911, meta[relay.Constant][43] /* ty=Tensor[(176, 1), float64] */, meta[relay.Constant][44] /* ty=Tensor[(600), int32] */, %912, %913)
}

def @func_2326(%var_2325: Tensor[(686), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(14, 7, 7), float64], Tensor[(686), float64]) {
  %921 = fn (%var_2322: Tensor[(686), float64]) -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(14, 7, 7), float64], Tensor[(686), float64]) {
    %914 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %915 = cast(%var_2322, dtype="float64") /* ty=Tensor[(686), float64] */;
    %916 = reshape(%915, newshape=[14, 7, 7]) /* ty=Tensor[(14, 7, 7), float64] */;
    %917 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
    %918 = @func_2203() /* ty=Tensor[(5, 16, 9), float32] */;
    %919 = %914.0;
    %920 = @func_421(%916) /* ty=Tensor[(14, 7, 7), float64] */;
    (%917, %918, %919, %920, %var_2322)
  };
  %921(%var_2325) /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32], Tensor[(14, 7, 7), float64], Tensor[(686), float64]) */
}

def @func_6175() -> (Tensor[(5, 16, 9), float64],) {
  %924 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %922 = @func_4732() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(28, 32), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(88, 2), float64], Tensor[(11, 16, ?), float32], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */;
    %923 = %922.7;
    (%923,)
  };
  %924() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_8982() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) {
  @func_8980() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float64]) */
}

def @func_2507() -> Tensor[(5, 16, 9), float64] {
  %926 = fn () -> Tensor[(5, 16, 9), float64] {
    %925 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
    %925.1
  };
  %926() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_3554() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  @func_3552() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) */
}

def @func_5432() -> Tensor[(5, 16, 9), float64] {
  @func_5430() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_7916() -> (Tensor[(5, 16, 9), float32],) {
  %927 = @func_6728() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %928 = %927.0;
  (%928,)
}

def @func_7510() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) {
  @func_7508() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_3878() -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
  %932 = fn () -> (Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) {
    %929 = @func_447() /* ty=(Tensor[(5, 16, 9), float32],) */;
    %930 = %929.0;
    %931 = @func_3572() /* ty=Tensor[(5, 16, 9), float32] */;
    (%930, %931)
  };
  %932() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */
}

def @func_6793() -> (Tensor[(5, 16, 9), float32],) {
  %933 = @func_6028() /* ty=(Tensor[(5, 16, 9), float32],) */;
  %934 = %933.0;
  (%934,)
}

def @func_6315(%var_6291: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(5, 16, 9), float32], Tensor[(160), float64]) {
  %935 = cast(%var_6291, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %936 = cast(meta[relay.Constant][45] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %937 = reshape(%936, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), float64] */;
  %938 = @func_4277(%937) /* ty=(Tensor[(8, 5, 4), float64], Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
  %939 = sigmoid(%935) /* ty=Tensor[(16, 9, 13), float32] */;
  %940 = %938.2;
  (%939, %940, meta[relay.Constant][45] /* ty=Tensor[(160), float64] */)
}

def @func_8418() -> Tensor[(5, 16, 9), float64] {
  @func_8416() /* ty=Tensor[(5, 16, 9), float64] */
}

def @main() -> Tensor[(6, 7, 12), float64] {
  %941 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 12), float32] */;
  %942 = log(%941) /* ty=Tensor[(6, 7, 12), float32] */;
  %943 = cast(%942, dtype="float64") /* ty=Tensor[(6, 7, 12), float64] */;
  sinh(%943) /* ty=Tensor[(6, 7, 12), float64] */
}

def @func_7853(%var_7813: Tensor[(16, 9, 9), float64]) -> (Tensor[(16, 9, 9), float64], Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %944 = cast(%var_7813, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %945 = cos(%944) /* ty=Tensor[(16, 9, 9), float64] */;
  %946 = @func_1297() /* ty=Tensor[(5, 16, 9), float64] */;
  %947 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%945, %946, %947)
}

def @func_3552() -> (Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float32]) {
  %948 = @func_1467() /* ty=(Tensor[(5, 16, 9), float64], Tensor[(5, 16, 9), float64]) */;
  %949 = %948.1;
  %950 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
  (%949, %950)
}

def @func_2476(%var_2474: Tensor[(5, 16, 9), float32], %var_2475: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) {
  %975 = fn (%var_2414: Tensor[(5, 16, 9), float32], %var_2466: Tensor[(5, 16, 9), float32]) -> (Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) {
    %951 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
    %952 = cast(%var_2414, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %954 = cast(%951, dtype="int8") /* ty=Tensor[(5, 16, 9), int8] */;
    %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %956 = left_shift(%954, %955) /* ty=Tensor[(5, 16, 9), int8] */;
    %957 = cast(%956, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %958 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %959 = cast(%951, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %961 = @func_1934() /* ty=Tensor[(5, 16, 9), float32] */;
    %962 = cast(%961, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %963 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %964 = cast(%951, dtype="bool") /* ty=Tensor[(5, 16, 9), bool] */;
    %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %966 = @func_2110() /* ty=(Tensor[(5, 16, 9), float32], Tensor[(5, 16, 9), float32]) */;
    %967 = %966.0;
    %968 = cast(%var_2466, dtype="uint16") /* ty=Tensor[(5, 16, 9), uint16] */;
    %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%967, dtype="uint16") /* ty=Tensor[(5, 16, 9), uint16] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %972 = less_equal(%959, %960) /* ty=Tensor[(5, 16, 9), bool] */;
    %973 = logical_or(%964, %965) /* ty=Tensor[(5, 16, 9), bool] */;
    %974 = multiply(%970, %971) /* ty=Tensor[(5, 16, 9), uint16] */;
    (%972, %973, %974)
  };
  %975(%var_2474, %var_2475) /* ty=(Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), bool], Tensor[(5, 16, 9), uint16]) */
}

def @func_6268() -> (Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float64]) {
  @func_6266() /* ty=(Tensor[(12, 5, 10), float64], Tensor[(5, 16, 9), float64]) */
}

def @func_8390() -> Tensor[(5, 16, 9), float64] {
  %977 = fn () -> Tensor[(5, 16, 9), float64] {
    %976 = @func_2141() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %976.0
  };
  %977() /* ty=Tensor[(5, 16, 9), float64] */
}

def @func_6545() -> (Tensor[(5, 16, 9), float64],) {
  %979 = fn () -> (Tensor[(5, 16, 9), float64],) {
    %978 = @func_4392() /* ty=Tensor[(5, 16, 9), float64] */;
    (%978,)
  };
  %979() /* ty=(Tensor[(5, 16, 9), float64],) */
}

def @func_3487() -> (Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) {
  @func_3485() /* ty=(Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), float64], Tensor[(4, 14, 16), float64], Tensor[(5, 16, 9), uint8], Tensor[(5, 16, 9), float32]) */
}

def @func_8077(%var_8069: uint16, %var_8070: Tensor[(7, 12, 14), uint16]) -> (Tensor[(7, 12, 14), uint16],) {
  %980 = cast(%var_8069, dtype="uint16") /* ty=uint16 */;
  %981 = cast(%var_8070, dtype="uint16") /* ty=Tensor[(7, 12, 14), uint16] */;
  %982 = bitwise_xor(%980, %981) /* ty=Tensor[(7, 12, 14), uint16] */;
  (%982,)
}

def @func_4347() -> (Tensor[(5, 16, 9), float32],) {
  @func_4345() /* ty=(Tensor[(5, 16, 9), float32],) */
}

def @func_5041() -> Tensor[(5, 16, 9), float64] {
  %984 = fn () -> Tensor[(5, 16, 9), float64] {
    %983 = @func_1193() /* ty=(Tensor[(5, 16, 9), float64],) */;
    %983.0
  };
  %984() /* ty=Tensor[(5, 16, 9), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3380: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3385: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3417: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3422: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3427: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen517/build/output.py:3432: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @main() -> (Tensor[(6, 7, 12), float64], ()) {
  %0 = ();
  (meta[relay.Constant][0] /* ty=Tensor[(6, 7, 12), float64] */, %0)
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %1 = (%l, %r);
  match (%1) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %2 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %3 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %4 = %multiply(%2, %3) /* ty=T */;
      Raw(%4) /* ty=GradCell[T] */
    },
  }
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %5 = (%l1, %r1);
  match (%5) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %6 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %7 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = %add(%6, %7) /* ty=T */;
      Raw(%8) /* ty=GradCell[T] */
    },
  }
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
