==========mod==========
#[version = "0.0.5"]
def @func_454(%var_450: Tensor[(11, 13, 8), uint64]) -> Tensor[(11, 13, 8), bool] {
  %0 = cast(%var_450, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(11, 13, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 13, 8), uint64] */, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%2, %3) /* ty=Tensor[(11, 13, 8), bool] */
}

def @func_2714() -> (Tensor[(7, 8, 5), float32],) {
  %4 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %5 = %4.0;
  (%5,)
}

def @func_3964() -> Tensor[(7, 8, 5), float64] {
  %6 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %6.2
}

def @func_4360() -> (Tensor[(7, 8, 5), float32],) {
  %7 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %8 = %7.0;
  (%8,)
}

def @func_4321() -> (Tensor[(7, 8, 5), float32],) {
  %9 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %10 = %9.0;
  (%10,)
}

def @func_2832() -> Tensor[(7, 8, 5), bool] {
  %11 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %11.1
}

def @func_5375() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
  %12 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %13 = @func_4360() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %14 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %15 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
  %16 = %12.0;
  %17 = %13.0;
  %18 = %14.0;
  (%15, %16, %17, %18)
}

def @func_5232(%var_5191: Tensor[(6, 7, 15), uint32], %var_5201: Tensor[(220), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) {
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="int16") /* ty=Tensor[(6, 1, 15), int16] */;
  %20 = cast(%var_5191, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 15), uint32] */, dtype="bool") /* ty=Tensor[(6, 2, 15), bool] */;
  %23 = less_equal(%21, %22) /* ty=Tensor[(6, 2, 15), bool] */;
  %24 = cast(%23, dtype="int8") /* ty=Tensor[(6, 2, 15), int8] */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="int8") /* ty=Tensor[(6, 1, 15), int8] */;
  %26 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %27 = cast(%var_5201, dtype="float64") /* ty=Tensor[(220), float64] */;
  %28 = cast(%var_5201, dtype="float64") /* ty=Tensor[(220), float64] */;
  %29 = reshape(%27, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float64] */;
  %30 = reshape(%28, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float64] */;
  %31 = @func_3016(%29, %30) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) */;
  %32 = %31.1;
  %33 = cast(%var_5201, dtype="float32") /* ty=Tensor[(220), float32] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %37 = subtract(%19, %20) /* ty=Tensor[(6, 7, 15), int16] */;
  %38 = logical_xor(%24, %25) /* ty=Tensor[(6, 2, 15), int8] */;
  %39 = %26.0;
  %40 = floor_mod(%35, %36) /* ty=Tensor[(2, 11, 10), float32] */;
  (%37, %38, %39, %40)
}

def @func_2434(%var_2419: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) {
  %41 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %42 = %41.1;
  %43 = cast(%var_2419, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %47 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %48 = subtract(%45, %46) /* ty=Tensor[(7, 8, 5), uint8] */;
  %49 = %47.0;
  (%48, %49)
}

def @func_4826() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32]) {
  %50 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %51 = @func_4321() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %52 = %50.0;
  %53 = %51.0;
  (%52, %53)
}

def @func_3320(%var_3264: Tensor[(15, 5, 10), int8], %var_3265: Tensor[(15, 5, 10), int8]) -> (Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) {
  %54 = cast(%var_3265, dtype="int8") /* ty=Tensor[(15, 5, 10), int8] */;
  %55 = shape_of(%var_3264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_3264, dtype="int8") /* ty=Tensor[(15, 5, 10), int8] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %58 = cast(4.5479f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6), float32] */;
  %60 = reshape(%58, newshape=[]) /* ty=float32 */;
  %61 = reshape(%59, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %62 = @func_240(%60, %61) /* ty=Tensor[(2, 1, 3), uint16] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %64 = cos(%63) /* ty=Tensor[(2, 1, 3), float32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(2, 1, 3), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(2, 1, 3), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 128), float32] */, dtype="float32") /* ty=Tensor[(4, 128), float32] */;
  %70 = reshape(%69, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
  %71 = add(%56, %57) /* ty=Tensor[(15, 5, 10), int8] */;
  %72 = logical_and(%67, %68) /* ty=Tensor[(2, ?, 3), bool] */;
  %73 = @func_2790(%70) /* ty=Tensor[(16, 8, 4), float32] */;
  (%71, 4.5479f /* ty=float32 */, meta[relay.Constant][3] /* ty=Tensor[(1, 6), float32] */, %72, %73, meta[relay.Constant][4] /* ty=Tensor[(4, 128), float32] */)
}

def @func_1138() -> Tensor[(7, 8, 5), float64] {
  %74 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %74.0
}

def @func_2473() -> Tensor[(7, 8, 5), float64] {
  @func_1138() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_3075() -> Tensor[(7, 8, 5), float32] {
  %75 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %75.0
}

def @func_3388(%var_3373: Tensor[(12, 3, 13), uint8], %var_3374: Tensor[(12, 3, 13), uint8]) -> (Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) {
  %76 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %77 = cast(%var_3374, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %78 = shape_of(%var_3373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_3373, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %81 = right_shift(%79, %80) /* ty=Tensor[(12, 3, 13), uint8] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %83 = %76.0;
  %84 = sigmoid(%82) /* ty=Tensor[(12, 3, 13), float32] */;
  (%83, %84)
}

def @func_4885() -> (Tensor[(7, 8, 5), float32],) {
  %85 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %86 = %85.0;
  (%86,)
}

def @func_2675(%var_2668: Tensor[(294), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) {
  %87 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %88 = cast(%var_2668, dtype="float32") /* ty=Tensor[(294), float32] */;
  %89 = cast(%var_2668, dtype="float32") /* ty=Tensor[(294), float32] */;
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %91 = reshape(%88, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %92 = reshape(%89, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %93 = reshape(%90, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %94 = @func_798(%91, %92, %93) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
  %95 = %87.2;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %97 = reshape(%96, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %98 = @func_218(%97) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %99 = %94.0;
  %100 = %98.1;
  (%95, %99, %var_2668, meta[relay.Constant][5] /* ty=Tensor[(1144), uint64] */, %100)
}

def @func_2881(%var_2874: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) {
  %101 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %102 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %106 = reshape(%103, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %107 = reshape(%104, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %108 = reshape(%105, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %109 = @func_798(%106, %107, %108) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
  %110 = cast(%var_2874, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %111 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(1144), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %112 = cast(meta[relay.Constant][7] /* ty=Tensor[(1144), uint64] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?), bool] */;
  %114 = %101.0;
  %115 = %102.1;
  %116 = %109.3;
  %117 = logical_and(%112, %113) /* ty=Tensor[(1144), bool] */;
  (%114, %115, %116, meta[relay.Constant][6] /* ty=Tensor[(49, 6), float32] */, %117)
}

def @func_5705() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
  %118 = @func_4360() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %119 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %120 = %118.0;
  %121 = %119.0;
  %122 = @func_2915() /* ty=Tensor[(7, 8, 5), bool] */;
  (%120, %121, %122)
}

def @func_5770(%var_5743: Tensor[(2, 15, 3), float64]) -> (Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) {
  %123 = @func_4885() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %124 = @func_3729() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %125 = %124.1;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(2, 1, 3), float64] */;
  %127 = tan(%126) /* ty=Tensor[(2, 1, 3), float64] */;
  %128 = cast(%127, dtype="int8") /* ty=Tensor[(2, 1, 3), int8] */;
  %129 = cast(%var_5743, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %130 = %123.0;
  %131 = bitwise_and(%128, %129) /* ty=Tensor[(2, 15, 3), int8] */;
  (%130, %131)
}

def @func_4253() -> (Tensor[(7, 8, 5), float32],) {
  %132 = @func_4056() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) */;
  %133 = %132.0;
  (%133,)
}

def @func_6032() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %134 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %135 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
  %136 = %134.0;
  (%135, %136)
}

def @func_4508(%var_4393: Tensor[(7, 9, 4), uint8], %var_4394: Tensor[(7, 9, 4), uint8], %var_4404: Tensor[(756), float64]) -> (Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) {
  %137 = cast(%var_4394, dtype="uint8") /* ty=Tensor[(7, 9, 4), uint8] */;
  %138 = shape_of(%var_4393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_4393, dtype="uint8") /* ty=Tensor[(7, 9, 4), uint8] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %141 = cast(%var_4394, dtype="bool") /* ty=Tensor[(7, 9, 4), bool] */;
  %142 = shape_of(%var_4393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_4393, dtype="bool") /* ty=Tensor[(7, 9, 4), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = @func_3729() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %146 = cast(%var_4404, dtype="float64") /* ty=Tensor[(756), float64] */;
  %147 = reshape(%146, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %148 = @func_165(%147) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %149 = %148.1;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %151 = cast(%var_4404, dtype="float32") /* ty=Tensor[(756), float32] */;
  %152 = multiply(%139, %140) /* ty=Tensor[(7, 9, 4), uint8] */;
  %153 = @func_4187() /* ty=Tensor[(7, 8, 5), bool] */;
  %154 = logical_and(%143, %144) /* ty=Tensor[(7, 9, 4), bool] */;
  %155 = %145.0;
  %156 = cosh(%150) /* ty=Tensor[(6, 14, 9), float32] */;
  %157 = cos(%151) /* ty=Tensor[(756), float32] */;
  (%152, %153, %154, %155, %156, %157)
}

def @func_3131() -> (Tensor[(54, 14), float64],) {
  %158 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %159 = %158.2;
  (%159,)
}

def @func_520() -> (Tensor[(7, 8, 5), float64],) {
  %160 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  (%160,)
}

def @func_4026(%var_3987: Tensor[(8, 9, 5), float64], %var_3997: Tensor[(280), float64]) -> (Tensor[(8, 9, 5), float64], Tensor[(280), int32]) {
  %161 = cast(%var_3987, dtype="float64") /* ty=Tensor[(8, 9, 5), float64] */;
  %162 = cast(%var_3997, dtype="float64") /* ty=Tensor[(280), float64] */;
  %163 = reshape(%162, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %164 = @func_441(%163) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %165 = %164.1;
  %166 = cast(%165, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %167 = shape_of(%var_3997, dtype="int32") /* ty=Tensor[(1), int32] */;
  %168 = cast(%var_3997, dtype="int32") /* ty=Tensor[(280), int32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?), int32] */;
  %170 = atanh(%161) /* ty=Tensor[(8, 9, 5), float64] */;
  %171 = bitwise_or(%168, %169) /* ty=Tensor[(280), int32] */;
  (%170, %171)
}

def @func_4763() -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) {
  %172 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %173 = %172.1;
  %174 = cast(%173, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %175 = asin(%174) /* ty=Tensor[(6, 14, 9), float32] */;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %177 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
  %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
  %180 = cast(%173, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %181 = reshape(%178, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), uint8] */;
  %182 = reshape(%179, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), uint8] */;
  %183 = reshape(%180, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %184 = @func_4508(%181, %182, %183) /* ty=(Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) */;
  %185 = atanh(%176) /* ty=Tensor[(6, 14, 9), float32] */;
  %186 = %177.0;
  %187 = %184.1;
  (%185, %186, %187, meta[relay.Constant][8] /* ty=Tensor[(6, 42), uint8] */)
}

def @func_2978() -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
  %188 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %189 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
  %190 = %188.6;
  (%189, %190)
}

def @func_165(%var_138: Tensor[(6, 14, 9), float64]) -> (Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) {
  %191 = cast(%var_138, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %192 = cast(%var_138, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %193 = cos(%192) /* ty=Tensor[(6, 14, 9), float64] */;
  %194 = cast(%var_138, dtype="int32") /* ty=Tensor[(6, 14, 9), int32] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="int32") /* ty=Tensor[(6, 14, 9), int32] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %198 = asinh(%191) /* ty=Tensor[(6, 14, 9), float64] */;
  %199 = bitwise_or(%196, %197) /* ty=Tensor[(6, 14, 9), int32] */;
  (%198, %199)
}

def @func_3436(%var_3427: Tensor[(4, 15, 16), float32]) -> (Tensor[(4, 15, 16), bool],) {
  %200 = cast(%var_3427, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
  %201 = tan(%200) /* ty=Tensor[(4, 15, 16), float32] */;
  %202 = cast(%var_3427, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = equal(%204, %205) /* ty=Tensor[(4, 15, 16), bool] */;
  (%206,)
}

def @func_1832() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %207 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
  %208 = @func_1138() /* ty=Tensor[(7, 8, 5), float64] */;
  (%207, %208)
}

def @func_3096() -> Tensor[(7, 8, 5), float64] {
  %209 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %209.0
}

def @func_1600() -> Tensor[(7, 8, 5), float64] {
  @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1724() -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %210 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %213 = atanh(%212) /* ty=Tensor[(7, 8, 5), float32] */;
  %214 = cast(%211, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %218 = cast(%213, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %219 = asin(%218) /* ty=Tensor[(7, 8, 5), float32] */;
  %220 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %224 = bitwise_and(%216, %217) /* ty=Tensor[(7, 8, 5), uint8] */;
  %225 = divide(%222, %223) /* ty=Tensor[(7, 8, 5), float32] */;
  %226 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
  (%224, %225, %226)
}

def @func_3119() -> (Tensor[(7, 8, 5), float64],) {
  %227 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %228 = %227.0;
  (%228,)
}

def @func_2746() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %229 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %230 = %229.0;
  %231 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
  (%230, %231)
}

def @func_2541(%var_2488: Tensor[(125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) {
  %232 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %233 = cast(%var_2488, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %234 = reshape(%233, newshape=[1, 125]) /* ty=Tensor[(1, 125), uint16] */;
  %235 = @func_1766(%234) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) */;
  %236 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %237 = %235.0;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %239 = reshape(%238, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %240 = @func_2434(%239) /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) */;
  %241 = cast(%var_2488, dtype="float64") /* ty=Tensor[(125), float64] */;
  %242 = %232.0;
  %243 = %236.0;
  %244 = %240.1;
  %245 = asinh(%241) /* ty=Tensor[(125), float64] */;
  (%242, %237, %243, %244, %245)
}

def @func_2634() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
  %246 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %247 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %248 = %246.1;
  %249 = %247.0;
  (%248, %249)
}

def @func_3729() -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
  %250 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %251 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %252 = %250.1;
  %253 = %251.1;
  (%252, %253)
}

def @func_1386(%var_1374: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(294), float32], Tensor[(240), float32], float32) {
  %254 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %255 = %254.0;
  %256 = cast(%var_1374, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %261 = cast(9.6819f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %262 = reshape(%260, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %263 = reshape(%261, newshape=[]) /* ty=float32 */;
  %264 = @func_1264(%262, %263) /* ty=(Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) */;
  %265 = minimum(%258, %259) /* ty=Tensor[(7, 8, 5), int16] */;
  %266 = %264.7;
  (%265, %266, meta[relay.Constant][10] /* ty=Tensor[(240), float32] */, 9.6819f /* ty=float32 */)
}

def @func_5143(%var_5138: Tensor[(198), float32]) -> (Tensor[(?, 9, 3), uint64], Tensor[(3, 11, 6), float32], Tensor[(198), float32]) {
  %267 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %268 = atan(%267) /* ty=Tensor[(1, 9, 3), float32] */;
  %269 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 9, 3), float32] */, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %273 = cast(%var_5138, dtype="float32") /* ty=Tensor[(198), float32] */;
  %274 = reshape(%273, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
  %275 = @func_3915(%274) /* ty=(Tensor[(3, 11, 6), float32],) */;
  %276 = left_shift(%271, %272) /* ty=Tensor[(?, 9, 3), uint64] */;
  %277 = %275.0;
  (%276, %277, %var_5138)
}

def @func_240(%var_231: float32, %var_232: Tensor[(2, 1, 3), float32]) -> Tensor[(2, 1, 3), uint16] {
  %278 = cast(%var_231, dtype="float32") /* ty=float32 */;
  %279 = cast(%var_232, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %280 = subtract(%278, %279) /* ty=Tensor[(2, 1, 3), float32] */;
  %281 = cast(%var_231, dtype="uint16") /* ty=uint16 */;
  %282 = cast(%280, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  bitwise_or(%281, %282) /* ty=Tensor[(2, 1, 3), uint16] */
}

def @func_4187() -> Tensor[(7, 8, 5), bool] {
  %283 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %283.1
}

def @func_480(%var_472: Tensor[(13, 13, 14), int16]) -> (Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) {
  %284 = cast(%var_472, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %285 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 14), int16] */, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %288 = cast(meta[relay.Constant][13] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %289 = reshape(%288, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %290 = @func_165(%289) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %291 = logical_xor(%286, %287) /* ty=Tensor[(13, 13, 14), int16] */;
  %292 = %290.1;
  (%291, %292, meta[relay.Constant][13] /* ty=Tensor[(756), float64] */)
}

def @func_6149() -> (Tensor[(16, 8, 9), int32], Tensor[(16, 8, 9), float32]) {
  %293 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 9), int32] */;
  %294 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 9), int32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %297 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 9), int32] */, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
  %298 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 8, 9), int32] */, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %301 = subtract(%295, %296) /* ty=Tensor[(16, 8, 9), int32] */;
  %302 = power(%299, %300) /* ty=Tensor[(16, 8, 9), float32] */;
  (%301, %302)
}

def @main(%var_6340: Tensor[(125), uint16], %var_6389: Tensor[(630), uint32], %var_6393: Tensor[(1144), uint64], %var_6408: Tensor[(5, 44), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(6, 7, 15), int16], Tensor[(630), uint32], Tensor[(1144), bool], Tensor[(1144), uint64], Tensor[(5, 44), bool], Tensor[(125), bool], Tensor[(7, 8, 5), float32], Tensor[(125), uint16]) {
  %303 = @func_1853() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %304 = cast(%var_6340, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %305 = reshape(%304, newshape=[125]) /* ty=Tensor[(125), uint16] */;
  %306 = @func_6170(%305) /* ty=(Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) */;
  %307 = %306.2;
  %308 = cast(%307, dtype="bool") /* ty=Tensor[(125), bool] */;
  %309 = shape_of(%var_6340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %310 = cast(%var_6340, dtype="bool") /* ty=Tensor[(125), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?), bool] */;
  %312 = less_equal(%310, %311) /* ty=Tensor[(125), bool] */;
  %313 = cast(%312, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %314 = shape_of(%307, dtype="int32") /* ty=Tensor[(1), int32] */;
  %315 = cast(%307, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %317 = cast(%var_6389, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 44), float64] */, dtype="float64") /* ty=Tensor[(5, 44), float64] */;
  %319 = reshape(%317, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %320 = reshape(%318, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %321 = @func_5232(%319, %320) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
  %322 = cast(%var_6393, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %323 = reshape(%322, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %324 = @func_2881(%323) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) */;
  %325 = cast(%var_6408, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %326 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(5, 44), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %327 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 44), float64] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %329 = cast(%312, dtype="bool") /* ty=Tensor[(125), bool] */;
  %330 = shape_of(%var_6340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %331 = cast(%var_6340, dtype="bool") /* ty=Tensor[(125), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?), bool] */;
  %333 = @func_4056() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) */;
  %334 = cast(%307, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %335 = shape_of(%312, dtype="int32") /* ty=Tensor[(1), int32] */;
  %336 = cast(%312, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %338 = %303.0;
  %339 = logical_xor(%315, %316) /* ty=Tensor[(125), uint16] */;
  %340 = %321.0;
  %341 = %324.4;
  %342 = greater_equal(%327, %328) /* ty=Tensor[(5, 44), bool] */;
  %343 = greater(%331, %332) /* ty=Tensor[(125), bool] */;
  %344 = %333.0;
  %345 = bitwise_xor(%336, %337) /* ty=Tensor[(125), uint16] */;
  (%338, %339, %340, %var_6389, %341, %var_6393, %342, %343, %344, %345)
}

def @func_4151() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %346 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %347 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %348 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %349 = %346.2;
  %350 = %347.0;
  %351 = %348.0;
  (%349, %350, %351)
}

def @func_4697(%var_4688: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
  %352 = cast(%var_4688, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  asin(%352) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_2915() -> Tensor[(7, 8, 5), bool] {
  @func_2832() /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_3600(%var_3578: Tensor[(54, 14), float64], %var_3588: Tensor[(54, 14), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(54, 14), float32], Tensor[(54, 14), bool]) {
  %353 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %354 = @func_3131() /* ty=(Tensor[(54, 14), float64],) */;
  %355 = %354.0;
  %356 = cast(%var_3578, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(2), int32] */;
  %358 = cast(%355, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %360 = cast(%var_3588, dtype="bool") /* ty=Tensor[(54, 14), bool] */;
  %361 = shape_of(%var_3578, dtype="int32") /* ty=Tensor[(2), int32] */;
  %362 = cast(%var_3578, dtype="bool") /* ty=Tensor[(54, 14), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %364 = %353.1;
  %365 = @func_2832() /* ty=Tensor[(7, 8, 5), bool] */;
  %366 = floor_mod(%358, %359) /* ty=Tensor[(54, 14), float32] */;
  %367 = equal(%362, %363) /* ty=Tensor[(54, 14), bool] */;
  (%364, %365, %366, %367)
}

def @func_1766(%var_1764: Tensor[(1, 125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) {
  %368 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %369 = %368.0;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %372 = reshape(%370, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %373 = reshape(%371, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
  %374 = @func_933(%372, %373) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
  %375 = cast(%var_1764, dtype="uint16") /* ty=Tensor[(1, 125), uint16] */;
  %376 = cast(%var_1764, dtype="uint16") /* ty=Tensor[(1, 125), uint16] */;
  %377 = reshape(%375, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %378 = reshape(%376, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %379 = @func_1543(%377, %378) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %380 = %374.1;
  %381 = %379.1;
  (%369, %380, meta[relay.Constant][17] /* ty=Tensor[(294), float32] */, %381, %var_1764)
}

def @func_5267(%var_5255: Tensor[(756), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(756), float64], Tensor[(6, 14, 9), bool]) {
  %382 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %383 = cast(%var_5255, dtype="float64") /* ty=Tensor[(756), float64] */;
  %384 = reshape(%383, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %385 = @func_165(%384) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %386 = %385.0;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 14, 9), bool] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="bool") /* ty=Tensor[(6, 14, 9), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = %382.1;
  %392 = less_equal(%389, %390) /* ty=Tensor[(6, 14, 9), bool] */;
  (%391, %var_5255, %392)
}

def @func_6038() -> Tensor[(7, 8, 5), float32] {
  %393 = @func_4151() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %393.1
}

def @func_3016(%var_2988: Tensor[(2, 11, 10), float64], %var_2989: Tensor[(2, 11, 10), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) {
  %394 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %395 = cast(%var_2989, dtype="float64") /* ty=Tensor[(2, 11, 10), float64] */;
  %396 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%var_2988, dtype="float64") /* ty=Tensor[(2, 11, 10), float64] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %399 = divide(%397, %398) /* ty=Tensor[(2, 11, 10), float64] */;
  %400 = cast(%var_2988, dtype="int64") /* ty=Tensor[(2, 11, 10), int64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="int64") /* ty=Tensor[(2, 11, 10), int64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %404 = %394.3;
  %405 = left_shift(%402, %403) /* ty=Tensor[(2, 11, 10), int64] */;
  (%404, %405)
}

def @func_4962() -> (Tensor[(7, 8, 5), float64],) {
  %406 = @func_3405() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %407 = %406.0;
  (%407,)
}

def @func_441(%var_412: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) {
  %408 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %409 = cast(%var_412, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %413 = cast(%var_412, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %414 = reshape(%413, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %415 = @func_290(%414) /* ty=(Tensor[(7, 8, 5), int32],) */;
  %416 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %417 = maximum(%411, %412) /* ty=Tensor[(7, 8, 5), int16] */;
  %418 = %415.0;
  %419 = %416.0;
  (%417, %418, %419)
}

def @func_218(%var_182: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %420 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %421 = cast(%var_182, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = less(%423, %424) /* ty=Tensor[(7, 8, 5), bool] */;
  %426 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %427 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  (%425, %426, %427)
}

def @func_625() -> (Tensor[(7, 8, 5), float32],) {
  %428 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %429 = %428.1;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %431 = exp(%430) /* ty=Tensor[(7, 8, 5), float32] */;
  (%431,)
}

def @func_4582() -> (Tensor[(7, 8, 5), bool],) {
  %432 = @func_2915() /* ty=Tensor[(7, 8, 5), bool] */;
  (%432,)
}

def @func_5124(%var_5114: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(10, 3, 8), float64], Tensor[(240), float64], Tensor[(7, 8, 5), float64], Tensor[(750), bool]) {
  %433 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %434 = @func_2030() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %435 = @func_4885() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %436 = cast(meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %437 = reshape(%436, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float64] */;
  %438 = cast(meta[relay.Constant][20] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
  %439 = reshape(%438, newshape=[750]) /* ty=Tensor[(750), int8] */;
  %440 = @func_4234(%439) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) */;
  %441 = cast(%var_5114, dtype="bool") /* ty=Tensor[(750), bool] */;
  %442 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(750), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(750), int8] */, dtype="bool") /* ty=Tensor[(750), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), bool] */;
  %445 = %433.0;
  %446 = %434.0;
  %447 = @func_3096() /* ty=Tensor[(7, 8, 5), float64] */;
  %448 = @func_1138() /* ty=Tensor[(7, 8, 5), float64] */;
  %449 = %435.0;
  %450 = @func_4697(%437) /* ty=Tensor[(10, 3, 8), float64] */;
  %451 = %440.1;
  %452 = logical_and(%443, %444) /* ty=Tensor[(750), bool] */;
  (%445, %446, %447, %448, %449, %450, meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, %451, %452)
}

def @func_5907(%var_5890: Tensor[(135), float32], %var_5901: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(135), float32], Tensor[(16, 8, 4), float32], Tensor[(512), float32], Tensor[(7, 8, 5), float64]) {
  %453 = cast(-8.64252f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %454 = cast(%var_5890, dtype="float32") /* ty=Tensor[(135), float32] */;
  %455 = reshape(%453, newshape=[]) /* ty=float32 */;
  %456 = reshape(%454, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), float32] */;
  %457 = @func_2659(%455, %456) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) */;
  %458 = cast(%var_5901, dtype="float32") /* ty=Tensor[(512), float32] */;
  %459 = reshape(%458, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %460 = @func_3790(%459) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) */;
  %461 = @func_1853() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %462 = @func_3836() /* ty=Tensor[(7, 8, 5), float32] */;
  %463 = %457.0;
  %464 = %460.2;
  %465 = %461.0;
  (%462, %463, -8.64252f /* ty=float32 */, %var_5890, %464, %var_5901, %465)
}

def @func_933(%var_917: Tensor[(7, 8, 5), float64], %var_924: Tensor[(294, 1), float32]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) {
  %466 = @func_520() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %467 = %466.0;
  %468 = cast(%var_917, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = cast(%var_924, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
  %473 = cast(%var_924, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
  %474 = cast(meta[relay.Constant][21] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %475 = reshape(%472, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %476 = reshape(%473, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %477 = reshape(%474, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %478 = @func_798(%475, %476, %477) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
  %479 = greater_equal(%470, %471) /* ty=Tensor[(7, 8, 5), bool] */;
  %480 = %478.0;
  (%479, %480, %var_924, meta[relay.Constant][21] /* ty=Tensor[(1144), uint64] */)
}

def @func_4878() -> (Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) {
  %481 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %482 = @func_3131() /* ty=(Tensor[(54, 14), float64],) */;
  %483 = %482.0;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %485 = %481.0;
  %486 = asin(%484) /* ty=Tensor[(54, 14), float64] */;
  (%485, %486)
}

def @func_2075() -> (Tensor[(7, 8, 5), float32],) {
  %487 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %488 = %487.0;
  (%488,)
}

def @func_3836() -> Tensor[(7, 8, 5), float32] {
  %489 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %489.1
}

def @func_3187() -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) {
  %490 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %491 = @func_2832() /* ty=Tensor[(7, 8, 5), bool] */;
  %492 = %490.0;
  (%491, %492)
}

def @func_3658() -> Tensor[(7, 8, 5), float64] {
  @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_798(%var_750: Tensor[(7, 14, 3), float32], %var_751: Tensor[(7, 14, 3), float32], %var_762: Tensor[(1144), uint64]) -> (Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) {
  %493 = cast(%var_751, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %494 = shape_of(%var_750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_750, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %497 = cast(%var_762, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %498 = reshape(%497, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), uint64] */;
  %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %500 = reshape(%499, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %501 = @func_165(%500) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %502 = cast(meta[relay.Constant][22] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %503 = sinh(%502) /* ty=Tensor[(54, 14), float64] */;
  %504 = cast(meta[relay.Constant][23] /* ty=Tensor[(54, 14), float64] */, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%503, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %508 = minimum(%506, %507) /* ty=Tensor[(54, 14), uint8] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %510 = divide(%495, %496) /* ty=Tensor[(7, 14, 3), float32] */;
  %511 = @func_454(%498) /* ty=Tensor[(11, 13, 8), bool] */;
  %512 = %501.1;
  %513 = erf(%509) /* ty=Tensor[(54, 14), float32] */;
  (%510, %511, %var_762, %512, %513)
}

def @func_93(%var_89: Tensor[(11, 9, 5), float64]) -> Tensor[(11, 9, 5), float64] {
  %514 = cast(%var_89, dtype="float64") /* ty=Tensor[(11, 9, 5), float64] */;
  rsqrt(%514) /* ty=Tensor[(11, 9, 5), float64] */
}

def @func_2396() -> Tensor[(7, 8, 5), float64] {
  @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1853() -> (Tensor[(7, 8, 5), float64],) {
  %515 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %516 = %515.1;
  (%516,)
}

def @func_3250(%var_3217: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) {
  %517 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
  %518 = cast(%var_3217, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %523 = reshape(%522, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %524 = @func_2675(%523) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) */;
  %525 = floor_divide(%520, %521) /* ty=Tensor[(7, 8, 5), float64] */;
  %526 = %524.4;
  (%525, %526, meta[relay.Constant][24] /* ty=Tensor[(294), float32] */)
}

def @func_2659(%var_2641: float32, %var_2642: Tensor[(15, 9, 1), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) {
  %527 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %528 = cast(%var_2641, dtype="float32") /* ty=float32 */;
  %529 = cast(%var_2642, dtype="float32") /* ty=Tensor[(15, 9, 1), float32] */;
  %530 = multiply(%528, %529) /* ty=Tensor[(15, 9, 1), float32] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(15, 9, 1), float64] */;
  %532 = %527.0;
  %533 = log(%531) /* ty=Tensor[(15, 9, 1), float64] */;
  (%532, %533)
}

def @func_3790(%var_3785: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) {
  %534 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %535 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %536 = cast(%var_3785, dtype="float32") /* ty=Tensor[(512), float32] */;
  %537 = reshape(%536, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
  %538 = cast(%var_3785, dtype="float32") /* ty=Tensor[(512), float32] */;
  %539 = %534.1;
  %540 = %535.3;
  %541 = @func_2790(%537) /* ty=Tensor[(16, 8, 4), float32] */;
  %542 = asin(%538) /* ty=Tensor[(512), float32] */;
  (%539, %540, %541, %542)
}

def @func_3915(%var_3908: Tensor[(3, 11, 6), float32]) -> (Tensor[(3, 11, 6), float32],) {
  %543 = cast(%var_3908, dtype="float32") /* ty=Tensor[(3, 11, 6), float32] */;
  %544 = log(%543) /* ty=Tensor[(3, 11, 6), float32] */;
  (%544,)
}

def @func_2775() -> Tensor[(7, 8, 5), float64] {
  %545 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %545.1
}

def @func_129() -> Tensor[(7, 8, 5), float64] {
  %546 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  sqrt(%546) /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_588() -> (Tensor[(7, 8, 5), float64],) {
  %547 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  (%547,)
}

def @func_2303() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) {
  %548 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %549 = %548.7;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %551 = reshape(%550, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %552 = @func_441(%551) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %553 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %554 = cast(meta[relay.Constant][26] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %555 = reshape(%554, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %556 = cast(meta[relay.Constant][27] /* ty=Tensor[(49, 6), float32] */, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
  %557 = log(%556) /* ty=Tensor[(49, 6), float64] */;
  %558 = cast(meta[relay.Constant][28] /* ty=Tensor[(49, 6), float64] */, dtype="bool") /* ty=Tensor[(49, 6), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(2), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(49, 6), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %562 = greater(%560, %561) /* ty=Tensor[(49, 6), bool] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
  %564 = asin(%563) /* ty=Tensor[(49, 6), float64] */;
  %565 = cast(meta[relay.Constant][27] /* ty=Tensor[(49, 6), float32] */, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(2), int32] */;
  %567 = cast(%564, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %571 = reshape(%569, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %572 = reshape(%570, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %573 = @func_1543(%571, %572) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %574 = %553.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %576 = reshape(%575, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %577 = @func_218(%576) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %578 = %577.1;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %580 = cast(%549, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %581 = cast(meta[relay.Constant][27] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
  %582 = reshape(%580, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %583 = reshape(%581, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
  %584 = @func_933(%582, %583) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
  %585 = %584.1;
  %586 = cast(%585, dtype="uint16") /* ty=Tensor[(7, 14, 3), uint16] */;
  %587 = shape_of(%564, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%564, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %590 = cast(%549, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %591 = reshape(%590, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %592 = @func_218(%591) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %593 = %552.1;
  %594 = @func_1445(%555) /* ty=Tensor[(15, 1, 2), float32] */;
  %595 = add(%567, %568) /* ty=Tensor[(49, 6), uint16] */;
  %596 = %573.1;
  %597 = acos(%579) /* ty=Tensor[(7, 8, 5), float64] */;
  %598 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %599 = logical_xor(%588, %589) /* ty=Tensor[(49, 6), uint16] */;
  %600 = %592.1;
  (%549, %593, %574, %594, meta[relay.Constant][26] /* ty=Tensor[(30), float32] */, %595, %596, meta[relay.Constant][29] /* ty=Tensor[(125), uint16] */, %597, %598, %599, %600)
}

def @func_290(%var_269: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int32],) {
  %601 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %602 = cast(%var_269, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %606 = multiply(%604, %605) /* ty=Tensor[(7, 8, 5), int32] */;
  (%606,)
}

def @func_506() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
  %607 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %608 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %613 = less_equal(%610, %611) /* ty=Tensor[(7, 8, 5), bool] */;
  (%612, %613)
}

def @func_6126(%var_6089: Tensor[(1, 7, 15), float32]) -> (Tensor[(1, 7, 15), float64], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64]) {
  %614 = cast(%var_6089, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
  %615 = asinh(%614) /* ty=Tensor[(1, 7, 15), float32] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %618 = cast(meta[relay.Constant][32] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %619 = reshape(%617, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %620 = reshape(%618, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %621 = @func_5232(%619, %620) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
  %622 = asin(%616) /* ty=Tensor[(1, 7, 15), float64] */;
  %623 = %621.2;
  (%622, %623, meta[relay.Constant][31] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][32] /* ty=Tensor[(220), float64] */)
}

def @func_1326() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
  %624 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %625 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %626 = %624.0;
  %627 = %625.0;
  (%626, %627)
}

def @func_3817() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
  %628 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %629 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %630 = %628.1;
  (%629, %630)
}

def @func_2366() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %631 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %633 = reshape(%632, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %634 = @func_441(%633) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %635 = %634.2;
  %636 = cast(%631, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %640 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %641 = power(%638, %639) /* ty=Tensor[(7, 8, 5), float32] */;
  %642 = %640.0;
  (%641, %642)
}

def @func_6170(%var_6165: Tensor[(125), uint16]) -> (Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) {
  %643 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %644 = cast(%var_6165, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %645 = reshape(%644, newshape=[125]) /* ty=Tensor[(125), uint16] */;
  %646 = @func_2541(%645) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) */;
  %647 = %643.5;
  %648 = %646.3;
  %649 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
  (%647, %648, %var_6165, %649)
}

def @func_2558() -> (Tensor[(7, 8, 5), float64],) {
  %650 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
  (%650,)
}

def @func_5579(%var_5510: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(128, 4), float32], Tensor[(54, 14), float64], Tensor[(125), int64]) {
  %651 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %652 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %653 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %654 = cast(%var_5510, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %655 = reshape(%652, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %656 = reshape(%653, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %657 = reshape(%654, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %658 = @func_798(%655, %656, %657) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
  %659 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %660 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %661 = %651.0;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %663 = reshape(%662, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %664 = @func_290(%663) /* ty=(Tensor[(7, 8, 5), int32],) */;
  %665 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %666 = %659.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %668 = reshape(%667, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %669 = @func_3250(%668) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) */;
  %670 = cast(meta[relay.Constant][34] /* ty=Tensor[(128, 4), float32] */, dtype="float32") /* ty=Tensor[(128, 4), float32] */;
  %671 = reshape(%670, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
  %672 = @func_4878() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) */;
  %673 = cast(meta[relay.Constant][35] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %674 = cast(meta[relay.Constant][35] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %675 = reshape(%673, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %676 = reshape(%674, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
  %677 = @func_1543(%675, %676) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
  %680 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(125), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %681 = cast(meta[relay.Constant][35] /* ty=Tensor[(125), uint16] */, dtype="int64") /* ty=Tensor[(125), int64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?), int64] */;
  %683 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
  %684 = %658.0;
  %685 = %660.1;
  %686 = %664.0;
  %687 = %665.1;
  %688 = @func_4187() /* ty=Tensor[(7, 8, 5), bool] */;
  %689 = %669.1;
  %690 = @func_2790(%671) /* ty=Tensor[(16, 8, 4), float32] */;
  %691 = %672.1;
  %692 = multiply(%681, %682) /* ty=Tensor[(125), int64] */;
  (%661, %683, %684, meta[relay.Constant][33] /* ty=Tensor[(294), float32] */, %var_5510, %666, %685, %686, %687, %688, %689, %690, meta[relay.Constant][34] /* ty=Tensor[(128, 4), float32] */, %691, %692)
}

def @func_2790(%var_2781: Tensor[(16, 8, 4), float32]) -> Tensor[(16, 8, 4), float32] {
  %693 = cast(%var_2781, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
  %694 = acos(%693) /* ty=Tensor[(16, 8, 4), float32] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
  %696 = shape_of(%var_2781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_2781, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%697, %698) /* ty=Tensor[(16, 8, 4), float32] */
}

def @func_370() -> (Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) {
  %699 = cast(meta[relay.Constant][36] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %700 = reshape(%699, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %701 = @func_165(%700) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %702 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %704 = reshape(%703, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %705 = @func_290(%704) /* ty=(Tensor[(7, 8, 5), int32],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %708 = atan(%707) /* ty=Tensor[(7, 8, 5), float32] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %710 = %701.1;
  %711 = sinh(%709) /* ty=Tensor[(7, 8, 5), float64] */;
  (%702, %710, meta[relay.Constant][36] /* ty=Tensor[(54, 14), float64] */, %711)
}

def @func_4646(%var_4598: Tensor[(10, 2, 6), bool], %var_4603: Tensor[(280), float64], %var_4625: Tensor[(512), float32], %var_4637: Tensor[(512), float32]) -> (Tensor[(10, 2, 6), bool], Tensor[(294), float32], Tensor[(280), float64], Tensor[(7, 8, 5), float64], Tensor[(512), bool]) {
  %712 = cast(%var_4598, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %713 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(10, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 2, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = cast(%var_4603, dtype="float64") /* ty=Tensor[(280), float64] */;
  %717 = reshape(%716, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %718 = @func_3250(%717) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) */;
  %719 = cast(%var_4625, dtype="float32") /* ty=Tensor[(512), float32] */;
  %720 = reshape(%719, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %721 = @func_3790(%720) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) */;
  %722 = cast(%var_4637, dtype="bool") /* ty=Tensor[(512), bool] */;
  %723 = shape_of(%var_4625, dtype="int32") /* ty=Tensor[(1), int32] */;
  %724 = cast(%var_4625, dtype="bool") /* ty=Tensor[(512), bool] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?), bool] */;
  %726 = logical_or(%714, %715) /* ty=Tensor[(10, 2, 6), bool] */;
  %727 = %718.2;
  %728 = %721.1;
  %729 = logical_and(%724, %725) /* ty=Tensor[(512), bool] */;
  (%726, %727, %var_4603, %728, %729)
}

def @func_6294(%var_6245: Tensor[(198), float32], %var_6279: Tensor[(630), uint32], %var_6280: Tensor[(220), float64]) -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(750), int8], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64], Tensor[(198), bool], Tensor[(7, 8, 5), float64]) {
  %730 = @func_4763() /* ty=(Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) */;
  %731 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
  %732 = cast(meta[relay.Constant][38] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
  %733 = cast(meta[relay.Constant][38] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
  %734 = reshape(%732, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
  %735 = reshape(%733, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
  %736 = @func_3320(%734, %735) /* ty=(Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) */;
  %737 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %738 = cast(%var_6280, dtype="float64") /* ty=Tensor[(220), float64] */;
  %739 = reshape(%737, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %740 = reshape(%738, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %741 = @func_5232(%739, %740) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
  %742 = cast(%var_6245, dtype="float32") /* ty=Tensor[(198), float32] */;
  %743 = reshape(%742, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
  %744 = @func_3915(%743) /* ty=(Tensor[(3, 11, 6), float32],) */;
  %745 = %744.0;
  %746 = cast(%745, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %747 = shape_of(%var_6245, dtype="int32") /* ty=Tensor[(1), int32] */;
  %748 = cast(%var_6245, dtype="bool") /* ty=Tensor[(198), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), bool] */;
  %750 = @func_2303() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) */;
  %751 = %730.0;
  %752 = %731.1;
  %753 = %736.4;
  %754 = %741.2;
  %755 = less_equal(%748, %749) /* ty=Tensor[(198), bool] */;
  %756 = %750.9;
  (%751, %752, %753, meta[relay.Constant][38] /* ty=Tensor[(750), int8] */, %754, %var_6279, %var_6280, %755, %756)
}

def @func_5462(%var_5440: Tensor[(1, 3, 16), bool], %var_5441: Tensor[(15, 3, 16), bool]) -> (Tensor[(15, 3, 16), bool], Tensor[(1, 3, 16), float64]) {
  %757 = cast(%var_5440, dtype="bool") /* ty=Tensor[(1, 3, 16), bool] */;
  %758 = cast(%var_5441, dtype="bool") /* ty=Tensor[(15, 3, 16), bool] */;
  %759 = cast(%var_5440, dtype="float64") /* ty=Tensor[(1, 3, 16), float64] */;
  %760 = logical_and(%757, %758) /* ty=Tensor[(15, 3, 16), bool] */;
  %761 = cosh(%759) /* ty=Tensor[(1, 3, 16), float64] */;
  (%760, %761)
}

def @func_4056() -> (Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) {
  %762 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %763 = cast(meta[relay.Constant][39] /* ty=Tensor[(99, 2), float32] */, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %764 = reshape(%763, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
  %765 = @func_3915(%764) /* ty=(Tensor[(3, 11, 6), float32],) */;
  %766 = %762.0;
  %767 = %765.0;
  (%766, %767, meta[relay.Constant][39] /* ty=Tensor[(99, 2), float32] */)
}

def @func_3740() -> (Tensor[(7, 8, 5), float64],) {
  %768 = @func_1853() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %769 = %768.0;
  (%769,)
}

def @func_1030(%var_967: Tensor[(2366), int16], %var_979: float32, %var_980: Tensor[(6), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(13, 13, 14), int16], Tensor[(2366), int16], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64]) {
  %770 = cast(%var_967, dtype="int16") /* ty=Tensor[(2366), int16] */;
  %771 = reshape(%770, newshape=[13, 13, 14]) /* ty=Tensor[(13, 13, 14), int16] */;
  %772 = @func_480(%771) /* ty=(Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) */;
  %773 = cast(%var_979, dtype="float32") /* ty=float32 */;
  %774 = cast(%var_980, dtype="float32") /* ty=Tensor[(6), float32] */;
  %775 = reshape(%773, newshape=[]) /* ty=float32 */;
  %776 = reshape(%774, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %777 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %779 = reshape(%778, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %780 = @func_441(%779) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %781 = cast(%777, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %782 = reshape(%781, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %783 = @func_441(%782) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %784 = cast(meta[relay.Constant][40] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %785 = reshape(%784, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), uint64] */;
  %786 = %772.0;
  %787 = @func_240(%775, %776) /* ty=Tensor[(2, 1, 3), uint16] */;
  %788 = %780.2;
  %789 = %783.1;
  %790 = @func_454(%785) /* ty=Tensor[(11, 13, 8), bool] */;
  (%777, %786, %var_967, %787, %var_979, %var_980, %788, %789, %790, meta[relay.Constant][40] /* ty=Tensor[(1144), uint64] */)
}

def @func_850() -> (Tensor[(7, 8, 5), float32],) {
  %791 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_1431() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %793 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %794 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %795 = %793.0;
  %796 = %794.0;
  (%795, %796)
}

def @func_6083(%var_6052: Tensor[(10, 5, 10), uint8], %var_6053: Tensor[(10, 5, 10), uint8]) -> (Tensor[(7, 8, 5), float64], Tensor[(10, 5, 10), bool]) {
  %797 = @func_4878() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) */;
  %798 = cast(%var_6053, dtype="uint8") /* ty=Tensor[(10, 5, 10), uint8] */;
  %799 = shape_of(%var_6052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%var_6052, dtype="uint8") /* ty=Tensor[(10, 5, 10), uint8] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %802 = logical_xor(%800, %801) /* ty=Tensor[(10, 5, 10), uint8] */;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(10, 5, 10), float32] */;
  %804 = acos(%803) /* ty=Tensor[(10, 5, 10), float32] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(10, 5, 10), float64] */;
  %806 = sin(%805) /* ty=Tensor[(10, 5, 10), float64] */;
  %807 = cast(%var_6052, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %811 = %797.0;
  %812 = not_equal(%809, %810) /* ty=Tensor[(10, 5, 10), bool] */;
  (%811, %812)
}

def @func_6019(%var_6009: Tensor[(12, 3, 13), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(468, 1), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), bool], Tensor[(7, 8, 5), float32], Tensor[(90), float64]) {
  %813 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %815 = @func_4582() /* ty=(Tensor[(7, 8, 5), bool],) */;
  %816 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %817 = cast(meta[relay.Constant][41] /* ty=Tensor[(468, 1), uint8] */, dtype="uint8") /* ty=Tensor[(468, 1), uint8] */;
  %818 = cast(meta[relay.Constant][41] /* ty=Tensor[(468, 1), uint8] */, dtype="uint8") /* ty=Tensor[(468, 1), uint8] */;
  %819 = reshape(%817, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), uint8] */;
  %820 = reshape(%818, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), uint8] */;
  %821 = @func_3388(%819, %820) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) */;
  %822 = %821.1;
  %823 = cast(%var_6009, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = cast(meta[relay.Constant][42] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %828 = reshape(%827, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
  %829 = @func_5770(%828) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) */;
  %830 = rsqrt(%814) /* ty=Tensor[(7, 8, 5), float64] */;
  %831 = %815.0;
  %832 = %816.0;
  %833 = less(%825, %826) /* ty=Tensor[(12, 3, 13), bool] */;
  %834 = %829.0;
  (%830, meta[relay.Constant][41] /* ty=Tensor[(468, 1), uint8] */, %831, %832, %833, %834, meta[relay.Constant][42] /* ty=Tensor[(90), float64] */)
}

def @func_1507() -> Tensor[(7, 8, 5), float64] {
  %835 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %835.0
}

def @func_3405() -> (Tensor[(7, 8, 5), float64],) {
  %836 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %837 = %836.0;
  (%837,)
}

def @func_1445(%var_1440: Tensor[(15, 1, 2), float32]) -> Tensor[(15, 1, 2), float32] {
  %838 = cast(%var_1440, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  exp(%838) /* ty=Tensor[(15, 1, 2), float32] */
}

def @func_1264(%var_1243: Tensor[(15, 16, 1), float32], %var_1251: float32) -> (Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) {
  %839 = cast(%var_1243, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %840 = cast(%var_1251, dtype="float32") /* ty=float32 */;
  %841 = cast(meta[relay.Constant][43] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %842 = reshape(%840, newshape=[]) /* ty=float32 */;
  %843 = reshape(%841, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %844 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %845 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %846 = cast(%845, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %847 = cast(meta[relay.Constant][44] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %848 = reshape(%846, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %849 = reshape(%847, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
  %850 = @func_933(%848, %849) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
  %851 = asinh(%839) /* ty=Tensor[(15, 16, 1), float32] */;
  %852 = @func_240(%842, %843) /* ty=Tensor[(2, 1, 3), uint16] */;
  %853 = %844.1;
  %854 = %850.3;
  (%851, %845, %852, %var_1251, meta[relay.Constant][43] /* ty=Tensor[(6), float32] */, %853, %854, meta[relay.Constant][44] /* ty=Tensor[(294), float32] */)
}

def @func_2030() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %855 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %856 = %855.0;
  %857 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
  (%856, %857)
}

def @func_1543(%var_1522: Tensor[(5, 5, 5), uint16], %var_1523: Tensor[(5, 5, 5), uint16]) -> (Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) {
  %858 = cast(%var_1523, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %859 = shape_of(%var_1522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%var_1522, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %862 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %863 = equal(%860, %861) /* ty=Tensor[(5, 5, 5), bool] */;
  %864 = %862.3;
  (%863, %864)
}

def @func_4234(%var_4224: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) {
  %865 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %866 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %867 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %868 = cast(%var_4224, dtype="int8") /* ty=Tensor[(750), int8] */;
  %869 = cast(%var_4224, dtype="int8") /* ty=Tensor[(750), int8] */;
  %870 = reshape(%868, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
  %871 = reshape(%869, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
  %872 = @func_3320(%870, %871) /* ty=(Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) */;
  %873 = %865.1;
  %874 = %866.3;
  %875 = %867.0;
  %876 = %872.3;
  (%873, %874, %875, %876, %var_4224)
}

def @func_1226() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) {
  %877 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %878 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %879 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %880 = cast(5.21663f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %881 = cast(meta[relay.Constant][45] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %882 = reshape(%880, newshape=[]) /* ty=float32 */;
  %883 = reshape(%881, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %884 = @func_240(%882, %883) /* ty=Tensor[(2, 1, 3), uint16] */;
  %885 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 1, 3), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%884, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %889 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 1, 3), uint16] */, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %890 = @func_520() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %891 = %877.0;
  %892 = %878.0;
  %893 = %879.0;
  %894 = add(%887, %888) /* ty=Tensor[(2, ?, 3), uint16] */;
  %895 = acosh(%889) /* ty=Tensor[(2, 1, 3), float32] */;
  %896 = %890.0;
  (%891, %892, %893, 5.21663f /* ty=float32 */, meta[relay.Constant][45] /* ty=Tensor[(6), float32] */, %894, %895, %896)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5465(%var_5463: Tensor[(1, 3, 16), bool], %var_5464: Tensor[(15, 3, 16), bool]) -> (Tensor[(15, 3, 16), bool], Tensor[(1, 3, 16), float64]) {
  %5 = fn (%var_5440: Tensor[(1, 3, 16), bool], %var_5441: Tensor[(15, 3, 16), bool]) -> (Tensor[(15, 3, 16), bool], Tensor[(1, 3, 16), float64]) {
    %0 = cast(%var_5440, dtype="bool") /* ty=Tensor[(1, 3, 16), bool] */;
    %1 = cast(%var_5441, dtype="bool") /* ty=Tensor[(15, 3, 16), bool] */;
    %2 = cast(%var_5440, dtype="float64") /* ty=Tensor[(1, 3, 16), float64] */;
    %3 = logical_and(%0, %1) /* ty=Tensor[(15, 3, 16), bool] */;
    %4 = cosh(%2) /* ty=Tensor[(1, 3, 16), float64] */;
    (%3, %4)
  };
  %5(%var_5463, %var_5464) /* ty=(Tensor[(15, 3, 16), bool], Tensor[(1, 3, 16), float64]) */
}

def @func_2077() -> (Tensor[(7, 8, 5), float32],) {
  @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_293(%var_291: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int32],) {
  @func_290(%var_291) /* ty=(Tensor[(7, 8, 5), int32],) */
}

def @func_2396() -> Tensor[(7, 8, 5), float64] {
  @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1508() -> Tensor[(7, 8, 5), float64] {
  %7 = fn () -> Tensor[(7, 8, 5), float64] {
    %6 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
    %6.0
  };
  %7() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_2748() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_1228() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) {
  @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_3131() -> (Tensor[(54, 14), float64],) {
  %8 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %9 = %8.2;
  (%9,)
}

def @func_4885() -> (Tensor[(7, 8, 5), float32],) {
  %10 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_802(%var_799: Tensor[(7, 14, 3), float32], %var_800: Tensor[(7, 14, 3), float32], %var_801: Tensor[(1144), uint64]) -> (Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) {
  %33 = fn (%var_750: Tensor[(7, 14, 3), float32], %var_751: Tensor[(7, 14, 3), float32], %var_762: Tensor[(1144), uint64]) -> (Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) {
    %12 = cast(%var_751, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
    %13 = shape_of(%var_750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%var_750, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %16 = cast(%var_762, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %17 = reshape(%16, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), uint64] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
    %19 = reshape(%18, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
    %20 = @func_165(%19) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
    %22 = sinh(%21) /* ty=Tensor[(54, 14), float64] */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(54, 14), float64] */, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(2), int32] */;
    %25 = cast(%22, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %27 = minimum(%25, %26) /* ty=Tensor[(54, 14), uint8] */;
    %28 = cast(%27, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %29 = divide(%14, %15) /* ty=Tensor[(7, 14, 3), float32] */;
    %30 = @func_454(%17) /* ty=Tensor[(11, 13, 8), bool] */;
    %31 = %20.1;
    %32 = erf(%28) /* ty=Tensor[(54, 14), float32] */;
    (%29, %30, %var_762, %31, %32)
  };
  %33(%var_799, %var_800, %var_801) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */
}

def @func_3392(%var_3390: Tensor[(12, 3, 13), uint8], %var_3391: Tensor[(12, 3, 13), uint8]) -> (Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) {
  @func_3388(%var_3390, %var_3391) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) */
}

def @func_3838() -> Tensor[(7, 8, 5), float32] {
  @func_3836() /* ty=Tensor[(7, 8, 5), float32] */
}

def @func_3250(%var_3217: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) {
  %34 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
  %35 = cast(%var_3217, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %40 = reshape(%39, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %41 = @func_2675(%40) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) */;
  %42 = floor_divide(%37, %38) /* ty=Tensor[(7, 8, 5), float64] */;
  %43 = %41.4;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(294), float32] */)
}

def @func_1326() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
  %44 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %45 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
  %46 = %44.0;
  %47 = %45.0;
  (%46, %47)
}

def @func_2916() -> Tensor[(7, 8, 5), bool] {
  %48 = fn () -> Tensor[(7, 8, 5), bool] {
    @func_2832() /* ty=Tensor[(7, 8, 5), bool] */
  };
  %48() /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_2663(%var_2661: float32, %var_2662: Tensor[(15, 9, 1), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) {
  @func_2659(%var_2661, %var_2662) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) */
}

def @func_936(%var_934: Tensor[(7, 8, 5), float64], %var_935: Tensor[(294, 1), float32]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) {
  %64 = fn (%var_917: Tensor[(7, 8, 5), float64], %var_924: Tensor[(294, 1), float32]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) {
    %49 = @func_520() /* ty=(Tensor[(7, 8, 5), float64],) */;
    %50 = %49.0;
    %51 = cast(%var_917, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
    %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %53 = cast(%50, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
    %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %55 = cast(%var_924, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
    %56 = cast(%var_924, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %58 = reshape(%55, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %59 = reshape(%56, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %60 = reshape(%57, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
    %61 = @func_798(%58, %59, %60) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
    %62 = greater_equal(%53, %54) /* ty=Tensor[(7, 8, 5), bool] */;
    %63 = %61.0;
    (%62, %63, %var_924, meta[relay.Constant][3] /* ty=Tensor[(1144), uint64] */)
  };
  %64(%var_934, %var_935) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */
}

def @func_850() -> (Tensor[(7, 8, 5), float32],) {
  %65 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %66 = %65.0;
  (%66,)
}

def @func_3076() -> Tensor[(7, 8, 5), float32] {
  %68 = fn () -> Tensor[(7, 8, 5), float32] {
    %67 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %67.0
  };
  %68() /* ty=Tensor[(7, 8, 5), float32] */
}

def @func_6038() -> Tensor[(7, 8, 5), float32] {
  %69 = @func_4151() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %69.1
}

def @func_5146(%var_5144: Tensor[(198), float32]) -> (Tensor[(?, 9, 3), uint64], Tensor[(3, 11, 6), float32], Tensor[(198), float32]) {
  @func_5143(%var_5144) /* ty=(Tensor[(?, 9, 3), uint64], Tensor[(3, 11, 6), float32], Tensor[(198), float32]) */
}

def @func_2883(%var_2882: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) {
  %87 = fn (%var_2874: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) {
    %70 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %71 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
    %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
    %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %75 = reshape(%72, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %76 = reshape(%73, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %77 = reshape(%74, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
    %78 = @func_798(%75, %76, %77) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
    %79 = cast(%var_2874, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %80 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(1144), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), uint64] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), bool] */;
    %83 = %70.0;
    %84 = %71.1;
    %85 = %78.3;
    %86 = logical_and(%81, %82) /* ty=Tensor[(1144), bool] */;
    (%83, %84, %85, meta[relay.Constant][4] /* ty=Tensor[(49, 6), float32] */, %86)
  };
  %87(%var_2882) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) */
}

def @func_2979() -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
  %91 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
    %88 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
    %89 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
    %90 = %88.6;
    (%89, %90)
  };
  %91() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */
}

def @func_129() -> Tensor[(7, 8, 5), float64] {
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  sqrt(%92) /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_6033() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %96 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
    %93 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %94 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
    %95 = %93.0;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_4508(%var_4393: Tensor[(7, 9, 4), uint8], %var_4394: Tensor[(7, 9, 4), uint8], %var_4404: Tensor[(756), float64]) -> (Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) {
  %97 = cast(%var_4394, dtype="uint8") /* ty=Tensor[(7, 9, 4), uint8] */;
  %98 = shape_of(%var_4393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_4393, dtype="uint8") /* ty=Tensor[(7, 9, 4), uint8] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %101 = cast(%var_4394, dtype="bool") /* ty=Tensor[(7, 9, 4), bool] */;
  %102 = shape_of(%var_4393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_4393, dtype="bool") /* ty=Tensor[(7, 9, 4), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = @func_3729() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %106 = cast(%var_4404, dtype="float64") /* ty=Tensor[(756), float64] */;
  %107 = reshape(%106, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %108 = @func_165(%107) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %109 = %108.1;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %111 = cast(%var_4404, dtype="float32") /* ty=Tensor[(756), float32] */;
  %112 = multiply(%99, %100) /* ty=Tensor[(7, 9, 4), uint8] */;
  %113 = @func_4187() /* ty=Tensor[(7, 8, 5), bool] */;
  %114 = logical_and(%103, %104) /* ty=Tensor[(7, 9, 4), bool] */;
  %115 = %105.0;
  %116 = cosh(%110) /* ty=Tensor[(6, 14, 9), float32] */;
  %117 = cos(%111) /* ty=Tensor[(756), float32] */;
  (%112, %113, %114, %115, %116, %117)
}

def @func_3120() -> (Tensor[(7, 8, 5), float64],) {
  %120 = fn () -> (Tensor[(7, 8, 5), float64],) {
    %118 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %119 = %118.0;
    (%119,)
  };
  %120() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_4583() -> (Tensor[(7, 8, 5), bool],) {
  %122 = fn () -> (Tensor[(7, 8, 5), bool],) {
    %121 = @func_2915() /* ty=Tensor[(7, 8, 5), bool] */;
    (%121,)
  };
  %122() /* ty=(Tensor[(7, 8, 5), bool],) */
}

def @func_5705() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
  %123 = @func_4360() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %124 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %125 = %123.0;
  %126 = %124.0;
  %127 = @func_2915() /* ty=Tensor[(7, 8, 5), bool] */;
  (%125, %126, %127)
}

def @func_290(%var_269: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int32],) {
  %128 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %129 = cast(%var_269, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %133 = multiply(%131, %132) /* ty=Tensor[(7, 8, 5), int32] */;
  (%133,)
}

def @func_1854() -> (Tensor[(7, 8, 5), float64],) {
  %136 = fn () -> (Tensor[(7, 8, 5), float64],) {
    %134 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %135 = %134.1;
    (%135,)
  };
  %136() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_1547(%var_1545: Tensor[(5, 5, 5), uint16], %var_1546: Tensor[(5, 5, 5), uint16]) -> (Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) {
  @func_1543(%var_1545, %var_1546) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */
}

def @func_4763() -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) {
  %137 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %138 = %137.1;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %140 = asin(%139) /* ty=Tensor[(6, 14, 9), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(6, 14, 9), float32] */;
  %142 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
  %145 = cast(%138, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %146 = reshape(%143, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), uint8] */;
  %147 = reshape(%144, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), uint8] */;
  %148 = reshape(%145, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %149 = @func_4508(%146, %147, %148) /* ty=(Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) */;
  %150 = atanh(%141) /* ty=Tensor[(6, 14, 9), float32] */;
  %151 = %142.0;
  %152 = %149.1;
  (%150, %151, %152, meta[relay.Constant][7] /* ty=Tensor[(6, 42), uint8] */)
}

def @func_2775() -> Tensor[(7, 8, 5), float64] {
  %153 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %153.1
}

def @func_5581(%var_5580: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(128, 4), float32], Tensor[(54, 14), float64], Tensor[(125), int64]) {
  %196 = fn (%var_5510: Tensor[(1144), uint64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(128, 4), float32], Tensor[(54, 14), float64], Tensor[(125), int64]) {
    %154 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %157 = cast(%var_5510, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %158 = reshape(%155, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %159 = reshape(%156, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %160 = reshape(%157, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
    %161 = @func_798(%158, %159, %160) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
    %162 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %163 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %164 = %154.0;
    %165 = cast(%164, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %166 = reshape(%165, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %167 = @func_290(%166) /* ty=(Tensor[(7, 8, 5), int32],) */;
    %168 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %169 = %162.0;
    %170 = cast(%169, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %171 = reshape(%170, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %172 = @func_3250(%171) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) */;
    %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(128, 4), float32] */, dtype="float32") /* ty=Tensor[(128, 4), float32] */;
    %174 = reshape(%173, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
    %175 = @func_4878() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) */;
    %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %178 = reshape(%176, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %179 = reshape(%177, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %180 = @func_1543(%178, %179) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %181 = %180.0;
    %182 = cast(%181, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
    %183 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(125), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %184 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), uint16] */, dtype="int64") /* ty=Tensor[(125), int64] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?), int64] */;
    %186 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
    %187 = %161.0;
    %188 = %163.1;
    %189 = %167.0;
    %190 = %168.1;
    %191 = @func_4187() /* ty=Tensor[(7, 8, 5), bool] */;
    %192 = %172.1;
    %193 = @func_2790(%174) /* ty=Tensor[(16, 8, 4), float32] */;
    %194 = %175.1;
    %195 = multiply(%184, %185) /* ty=Tensor[(125), int64] */;
    (%164, %186, %187, meta[relay.Constant][8] /* ty=Tensor[(294), float32] */, %var_5510, %169, %188, %189, %190, %191, %192, %193, meta[relay.Constant][9] /* ty=Tensor[(128, 4), float32] */, %194, %195)
  };
  %196(%var_5580) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(128, 4), float32], Tensor[(54, 14), float64], Tensor[(125), int64]) */
}

def @func_4962() -> (Tensor[(7, 8, 5), float64],) {
  %197 = @func_3405() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %198 = %197.0;
  (%198,)
}

def @func_1601() -> Tensor[(7, 8, 5), float64] {
  %199 = fn () -> Tensor[(7, 8, 5), float64] {
    @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
  };
  %199() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1431() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %200 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %201 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %202 = %200.0;
  %203 = %201.0;
  (%202, %203)
}

def @func_5127(%var_5125: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(10, 3, 8), float64], Tensor[(240), float64], Tensor[(7, 8, 5), float64], Tensor[(750), bool]) {
  @func_5124(%var_5125) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(10, 3, 8), float64], Tensor[(240), float64], Tensor[(7, 8, 5), float64], Tensor[(750), bool]) */
}

def @func_6087(%var_6085: Tensor[(10, 5, 10), uint8], %var_6086: Tensor[(10, 5, 10), uint8]) -> (Tensor[(7, 8, 5), float64], Tensor[(10, 5, 10), bool]) {
  @func_6083(%var_6085, %var_6086) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(10, 5, 10), bool]) */
}

def @func_5773(%var_5771: Tensor[(2, 15, 3), float64]) -> (Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) {
  @func_5770(%var_5771) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) */
}

def @func_6149() -> (Tensor[(16, 8, 9), int32], Tensor[(16, 8, 9), float32]) {
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 9), int32] */;
  %205 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 9), int32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 8, 9), int32] */, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
  %209 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(16, 8, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 8, 9), int32] */, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %212 = subtract(%206, %207) /* ty=Tensor[(16, 8, 9), int32] */;
  %213 = power(%210, %211) /* ty=Tensor[(16, 8, 9), float32] */;
  (%212, %213)
}

def @func_2659(%var_2641: float32, %var_2642: Tensor[(15, 9, 1), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) {
  %214 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %215 = cast(%var_2641, dtype="float32") /* ty=float32 */;
  %216 = cast(%var_2642, dtype="float32") /* ty=Tensor[(15, 9, 1), float32] */;
  %217 = multiply(%215, %216) /* ty=Tensor[(15, 9, 1), float32] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(15, 9, 1), float64] */;
  %219 = %214.0;
  %220 = log(%218) /* ty=Tensor[(15, 9, 1), float64] */;
  (%219, %220)
}

def @func_4360() -> (Tensor[(7, 8, 5), float32],) {
  %221 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %222 = %221.0;
  (%222,)
}

def @func_2473() -> Tensor[(7, 8, 5), float64] {
  @func_1138() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_6021(%var_6020: Tensor[(12, 3, 13), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(468, 1), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), bool], Tensor[(7, 8, 5), float32], Tensor[(90), float64]) {
  %245 = fn (%var_6009: Tensor[(12, 3, 13), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(468, 1), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), bool], Tensor[(7, 8, 5), float32], Tensor[(90), float64]) {
    %223 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
    %224 = cast(%223, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %225 = @func_4582() /* ty=(Tensor[(7, 8, 5), bool],) */;
    %226 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(468, 1), uint8] */, dtype="uint8") /* ty=Tensor[(468, 1), uint8] */;
    %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(468, 1), uint8] */, dtype="uint8") /* ty=Tensor[(468, 1), uint8] */;
    %229 = reshape(%227, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), uint8] */;
    %230 = reshape(%228, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), uint8] */;
    %231 = @func_3388(%229, %230) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) */;
    %232 = %231.1;
    %233 = cast(%var_6009, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %237 = cast(meta[relay.Constant][14] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %238 = reshape(%237, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
    %239 = @func_5770(%238) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) */;
    %240 = rsqrt(%224) /* ty=Tensor[(7, 8, 5), float64] */;
    %241 = %225.0;
    %242 = %226.0;
    %243 = less(%235, %236) /* ty=Tensor[(12, 3, 13), bool] */;
    %244 = %239.0;
    (%240, meta[relay.Constant][13] /* ty=Tensor[(468, 1), uint8] */, %241, %242, %243, %244, meta[relay.Constant][14] /* ty=Tensor[(90), float64] */)
  };
  %245(%var_6020) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(468, 1), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), bool], Tensor[(7, 8, 5), float32], Tensor[(90), float64]) */
}

def @func_2677(%var_2676: Tensor[(294), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) {
  %260 = fn (%var_2668: Tensor[(294), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) {
    %246 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %247 = cast(%var_2668, dtype="float32") /* ty=Tensor[(294), float32] */;
    %248 = cast(%var_2668, dtype="float32") /* ty=Tensor[(294), float32] */;
    %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %250 = reshape(%247, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %251 = reshape(%248, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %252 = reshape(%249, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
    %253 = @func_798(%250, %251, %252) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float32]) */;
    %254 = %246.2;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %256 = reshape(%255, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %257 = @func_218(%256) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %258 = %253.0;
    %259 = %257.1;
    (%254, %258, %var_2668, meta[relay.Constant][15] /* ty=Tensor[(1144), uint64] */, %259)
  };
  %260(%var_2676) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(1144), uint64], Tensor[(7, 8, 5), float64]) */
}

def @func_6298(%var_6295: Tensor[(198), float32], %var_6296: Tensor[(630), uint32], %var_6297: Tensor[(220), float64]) -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(750), int8], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64], Tensor[(198), bool], Tensor[(7, 8, 5), float64]) {
  %288 = fn (%var_6245: Tensor[(198), float32], %var_6279: Tensor[(630), uint32], %var_6280: Tensor[(220), float64]) -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(750), int8], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64], Tensor[(198), bool], Tensor[(7, 8, 5), float64]) {
    %261 = @func_4763() /* ty=(Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) */;
    %262 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %263 = cast(meta[relay.Constant][16] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
    %264 = cast(meta[relay.Constant][16] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
    %265 = reshape(%263, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
    %266 = reshape(%264, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
    %267 = @func_3320(%265, %266) /* ty=(Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) */;
    %268 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %269 = cast(%var_6280, dtype="float64") /* ty=Tensor[(220), float64] */;
    %270 = reshape(%268, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
    %271 = reshape(%269, newshape=[220]) /* ty=Tensor[(220), float64] */;
    %272 = @func_5232(%270, %271) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
    %273 = cast(%var_6245, dtype="float32") /* ty=Tensor[(198), float32] */;
    %274 = reshape(%273, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
    %275 = @func_3915(%274) /* ty=(Tensor[(3, 11, 6), float32],) */;
    %276 = %275.0;
    %277 = cast(%276, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
    %278 = shape_of(%var_6245, dtype="int32") /* ty=Tensor[(1), int32] */;
    %279 = cast(%var_6245, dtype="bool") /* ty=Tensor[(198), bool] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), bool] */;
    %281 = @func_2303() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) */;
    %282 = %261.0;
    %283 = %262.1;
    %284 = %267.4;
    %285 = %272.2;
    %286 = less_equal(%279, %280) /* ty=Tensor[(198), bool] */;
    %287 = %281.9;
    (%282, %283, %284, meta[relay.Constant][16] /* ty=Tensor[(750), int8] */, %285, %var_6279, %var_6280, %286, %287)
  };
  %288(%var_6295, %var_6296, %var_6297) /* ty=(Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(750), int8], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64], Tensor[(198), bool], Tensor[(7, 8, 5), float64]) */
}

def @func_4029(%var_4027: Tensor[(8, 9, 5), float64], %var_4028: Tensor[(280), float64]) -> (Tensor[(8, 9, 5), float64], Tensor[(280), int32]) {
  %300 = fn (%var_3987: Tensor[(8, 9, 5), float64], %var_3997: Tensor[(280), float64]) -> (Tensor[(8, 9, 5), float64], Tensor[(280), int32]) {
    %289 = cast(%var_3987, dtype="float64") /* ty=Tensor[(8, 9, 5), float64] */;
    %290 = cast(%var_3997, dtype="float64") /* ty=Tensor[(280), float64] */;
    %291 = reshape(%290, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %292 = @func_441(%291) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
    %293 = %292.1;
    %294 = cast(%293, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
    %295 = shape_of(%var_3997, dtype="int32") /* ty=Tensor[(1), int32] */;
    %296 = cast(%var_3997, dtype="int32") /* ty=Tensor[(280), int32] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), int32] */;
    %298 = atanh(%289) /* ty=Tensor[(8, 9, 5), float64] */;
    %299 = bitwise_or(%296, %297) /* ty=Tensor[(280), int32] */;
    (%298, %299)
  };
  %300(%var_4027, %var_4028) /* ty=(Tensor[(8, 9, 5), float64], Tensor[(280), int32]) */
}

def @func_1328() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
  @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */
}

def @func_520() -> (Tensor[(7, 8, 5), float64],) {
  %301 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  (%301,)
}

def @func_2398() -> Tensor[(7, 8, 5), float64] {
  @func_2396() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_4964() -> (Tensor[(7, 8, 5), float64],) {
  @func_4962() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_2635() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
  %306 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) {
    %302 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %303 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %304 = %302.1;
    %305 = %303.0;
    (%304, %305)
  };
  %306() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */
}

def @func_3406() -> (Tensor[(7, 8, 5), float64],) {
  %309 = fn () -> (Tensor[(7, 8, 5), float64],) {
    %307 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
    %308 = %307.0;
    (%308,)
  };
  %309() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_3603(%var_3601: Tensor[(54, 14), float64], %var_3602: Tensor[(54, 14), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(54, 14), float32], Tensor[(54, 14), bool]) {
  %325 = fn (%var_3578: Tensor[(54, 14), float64], %var_3588: Tensor[(54, 14), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(54, 14), float32], Tensor[(54, 14), bool]) {
    %310 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %311 = @func_3131() /* ty=(Tensor[(54, 14), float64],) */;
    %312 = %311.0;
    %313 = cast(%var_3578, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(2), int32] */;
    %315 = cast(%312, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %317 = cast(%var_3588, dtype="bool") /* ty=Tensor[(54, 14), bool] */;
    %318 = shape_of(%var_3578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %319 = cast(%var_3578, dtype="bool") /* ty=Tensor[(54, 14), bool] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %321 = %310.1;
    %322 = @func_2832() /* ty=Tensor[(7, 8, 5), bool] */;
    %323 = floor_mod(%315, %316) /* ty=Tensor[(54, 14), float32] */;
    %324 = equal(%319, %320) /* ty=Tensor[(54, 14), bool] */;
    (%321, %322, %323, %324)
  };
  %325(%var_3601, %var_3602) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool], Tensor[(54, 14), float32], Tensor[(54, 14), bool]) */
}

def @func_3020(%var_3018: Tensor[(2, 11, 10), float64], %var_3019: Tensor[(2, 11, 10), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) {
  @func_3016(%var_3018, %var_3019) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) */
}

def @func_1833() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %328 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
    %326 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
    %327 = @func_1138() /* ty=Tensor[(7, 8, 5), float64] */;
    (%326, %327)
  };
  %328() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_5269(%var_5268: Tensor[(756), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(756), float64], Tensor[(6, 14, 9), bool]) {
  %340 = fn (%var_5255: Tensor[(756), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(756), float64], Tensor[(6, 14, 9), bool]) {
    %329 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %330 = cast(%var_5255, dtype="float64") /* ty=Tensor[(756), float64] */;
    %331 = reshape(%330, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
    %332 = @func_165(%331) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
    %333 = %332.0;
    %334 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 14, 9), bool] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%333, dtype="bool") /* ty=Tensor[(6, 14, 9), bool] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %338 = %329.1;
    %339 = less_equal(%336, %337) /* ty=Tensor[(6, 14, 9), bool] */;
    (%338, %var_5255, %339)
  };
  %340(%var_5268) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(756), float64], Tensor[(6, 14, 9), bool]) */
}

def @func_2436(%var_2435: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) {
  %350 = fn (%var_2419: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) {
    %341 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %342 = %341.1;
    %343 = cast(%var_2419, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
    %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%342, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %347 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %348 = subtract(%345, %346) /* ty=Tensor[(7, 8, 5), uint8] */;
    %349 = %347.0;
    (%348, %349)
  };
  %350(%var_2435) /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) */
}

def @func_4362() -> (Tensor[(7, 8, 5), float32],) {
  @func_4360() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_221(%var_219: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  @func_218(%var_219) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_3965() -> Tensor[(7, 8, 5), float64] {
  %352 = fn () -> Tensor[(7, 8, 5), float64] {
    %351 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %351.2
  };
  %352() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_3323(%var_3321: Tensor[(15, 5, 10), int8], %var_3322: Tensor[(15, 5, 10), int8]) -> (Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) {
  %373 = fn (%var_3264: Tensor[(15, 5, 10), int8], %var_3265: Tensor[(15, 5, 10), int8]) -> (Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) {
    %353 = cast(%var_3265, dtype="int8") /* ty=Tensor[(15, 5, 10), int8] */;
    %354 = shape_of(%var_3264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%var_3264, dtype="int8") /* ty=Tensor[(15, 5, 10), int8] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %357 = cast(4.5479f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %358 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6), float32] */;
    %359 = reshape(%357, newshape=[]) /* ty=float32 */;
    %360 = reshape(%358, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
    %361 = @func_240(%359, %360) /* ty=Tensor[(2, 1, 3), uint16] */;
    %362 = cast(%361, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
    %363 = cos(%362) /* ty=Tensor[(2, 1, 3), float32] */;
    %364 = cast(%361, dtype="bool") /* ty=Tensor[(2, 1, 3), bool] */;
    %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%363, dtype="bool") /* ty=Tensor[(2, 1, 3), bool] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %368 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 128), float32] */, dtype="float32") /* ty=Tensor[(4, 128), float32] */;
    %369 = reshape(%368, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
    %370 = add(%355, %356) /* ty=Tensor[(15, 5, 10), int8] */;
    %371 = logical_and(%366, %367) /* ty=Tensor[(2, ?, 3), bool] */;
    %372 = @func_2790(%369) /* ty=Tensor[(16, 8, 4), float32] */;
    (%370, 4.5479f /* ty=float32 */, meta[relay.Constant][18] /* ty=Tensor[(1, 6), float32] */, %371, %372, meta[relay.Constant][19] /* ty=Tensor[(4, 128), float32] */)
  };
  %373(%var_3321, %var_3322) /* ty=(Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) */
}

def @func_6128(%var_6127: Tensor[(1, 7, 15), float32]) -> (Tensor[(1, 7, 15), float64], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64]) {
  %384 = fn (%var_6089: Tensor[(1, 7, 15), float32]) -> (Tensor[(1, 7, 15), float64], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64]) {
    %374 = cast(%var_6089, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
    %375 = asinh(%374) /* ty=Tensor[(1, 7, 15), float32] */;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
    %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %378 = cast(meta[relay.Constant][21] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %379 = reshape(%377, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
    %380 = reshape(%378, newshape=[220]) /* ty=Tensor[(220), float64] */;
    %381 = @func_5232(%379, %380) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
    %382 = asin(%376) /* ty=Tensor[(1, 7, 15), float64] */;
    %383 = %381.2;
    (%382, %383, meta[relay.Constant][20] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][21] /* ty=Tensor[(220), float64] */)
  };
  %384(%var_6127) /* ty=(Tensor[(1, 7, 15), float64], Tensor[(7, 8, 5), float32], Tensor[(630), uint32], Tensor[(220), float64]) */
}

def @func_3253(%var_3251: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) {
  @func_3250(%var_3251) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) */
}

def @func_244(%var_242: float32, %var_243: Tensor[(2, 1, 3), float32]) -> Tensor[(2, 1, 3), uint16] {
  @func_240(%var_242, %var_243) /* ty=Tensor[(2, 1, 3), uint16] */
}

def @func_3658() -> Tensor[(7, 8, 5), float64] {
  @func_1507() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_4887() -> (Tensor[(7, 8, 5), float32],) {
  @func_4885() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_4879() -> (Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) {
  %391 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) {
    %385 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
    %386 = @func_3131() /* ty=(Tensor[(54, 14), float64],) */;
    %387 = %386.0;
    %388 = cast(%387, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
    %389 = %385.0;
    %390 = asin(%388) /* ty=Tensor[(54, 14), float64] */;
    (%389, %390)
  };
  %391() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) */
}

def @func_370() -> (Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) {
  %392 = cast(meta[relay.Constant][22] /* ty=Tensor[(54, 14), float64] */, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %393 = reshape(%392, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %394 = @func_165(%393) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %395 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %397 = reshape(%396, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %398 = @func_290(%397) /* ty=(Tensor[(7, 8, 5), int32],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %401 = atan(%400) /* ty=Tensor[(7, 8, 5), float32] */;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %403 = %394.1;
  %404 = sinh(%402) /* ty=Tensor[(7, 8, 5), float64] */;
  (%395, %403, meta[relay.Constant][22] /* ty=Tensor[(54, 14), float64] */, %404)
}

def @func_5232(%var_5191: Tensor[(6, 7, 15), uint32], %var_5201: Tensor[(220), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) {
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="int16") /* ty=Tensor[(6, 1, 15), int16] */;
  %406 = cast(%var_5191, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
  %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %408 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 2, 15), uint32] */, dtype="bool") /* ty=Tensor[(6, 2, 15), bool] */;
  %409 = less_equal(%407, %408) /* ty=Tensor[(6, 2, 15), bool] */;
  %410 = cast(%409, dtype="int8") /* ty=Tensor[(6, 2, 15), int8] */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 1, 15), uint32] */, dtype="int8") /* ty=Tensor[(6, 1, 15), int8] */;
  %412 = @func_4253() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %413 = cast(%var_5201, dtype="float64") /* ty=Tensor[(220), float64] */;
  %414 = cast(%var_5201, dtype="float64") /* ty=Tensor[(220), float64] */;
  %415 = reshape(%413, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float64] */;
  %416 = reshape(%414, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float64] */;
  %417 = @func_3016(%415, %416) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) */;
  %418 = %417.1;
  %419 = cast(%var_5201, dtype="float32") /* ty=Tensor[(220), float32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %423 = subtract(%405, %406) /* ty=Tensor[(6, 7, 15), int16] */;
  %424 = logical_xor(%410, %411) /* ty=Tensor[(6, 2, 15), int8] */;
  %425 = %412.0;
  %426 = floor_mod(%421, %422) /* ty=Tensor[(2, 11, 10), float32] */;
  (%423, %424, %425, %426)
}

def @func_1725() -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %444 = fn () -> (Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
    %427 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
    %430 = atanh(%429) /* ty=Tensor[(7, 8, 5), float32] */;
    %431 = cast(%428, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%430, dtype="uint8") /* ty=Tensor[(7, 8, 5), uint8] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %435 = cast(%430, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
    %436 = asin(%435) /* ty=Tensor[(7, 8, 5), float32] */;
    %437 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %441 = bitwise_and(%433, %434) /* ty=Tensor[(7, 8, 5), uint8] */;
    %442 = divide(%439, %440) /* ty=Tensor[(7, 8, 5), float32] */;
    %443 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
    (%441, %442, %443)
  };
  %444() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_6151() -> (Tensor[(16, 8, 9), int32], Tensor[(16, 8, 9), float32]) {
  @func_6149() /* ty=(Tensor[(16, 8, 9), int32], Tensor[(16, 8, 9), float32]) */
}

def @func_6040() -> Tensor[(7, 8, 5), float32] {
  @func_6038() /* ty=Tensor[(7, 8, 5), float32] */
}

def @func_218(%var_182: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %445 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %446 = cast(%var_182, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = less(%448, %449) /* ty=Tensor[(7, 8, 5), bool] */;
  %451 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %452 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  (%450, %451, %452)
}

def @func_2792(%var_2791: Tensor[(16, 8, 4), float32]) -> Tensor[(16, 8, 4), float32] {
  %459 = fn (%var_2781: Tensor[(16, 8, 4), float32]) -> Tensor[(16, 8, 4), float32] {
    %453 = cast(%var_2781, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
    %454 = acos(%453) /* ty=Tensor[(16, 8, 4), float32] */;
    %455 = cast(%454, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
    %456 = shape_of(%var_2781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%var_2781, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%457, %458) /* ty=Tensor[(16, 8, 4), float32] */
  };
  %459(%var_2791) /* ty=Tensor[(16, 8, 4), float32] */
}

def @func_3742() -> (Tensor[(7, 8, 5), float64],) {
  @func_3740() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_4826() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32]) {
  %460 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %461 = @func_4321() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %462 = %460.0;
  %463 = %461.0;
  (%462, %463)
}

def @func_3730() -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
  %468 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) {
    %464 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %465 = @func_2978() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
    %466 = %464.1;
    %467 = %465.1;
    (%466, %467)
  };
  %468() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */
}

def @func_5124(%var_5114: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(10, 3, 8), float64], Tensor[(240), float64], Tensor[(7, 8, 5), float64], Tensor[(750), bool]) {
  %469 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %470 = @func_2030() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %471 = @func_4885() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %472 = cast(meta[relay.Constant][26] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %473 = reshape(%472, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float64] */;
  %474 = cast(meta[relay.Constant][27] /* ty=Tensor[(750), int8] */, dtype="int8") /* ty=Tensor[(750), int8] */;
  %475 = reshape(%474, newshape=[750]) /* ty=Tensor[(750), int8] */;
  %476 = @func_4234(%475) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) */;
  %477 = cast(%var_5114, dtype="bool") /* ty=Tensor[(750), bool] */;
  %478 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(750), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %479 = cast(meta[relay.Constant][27] /* ty=Tensor[(750), int8] */, dtype="bool") /* ty=Tensor[(750), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?), bool] */;
  %481 = %469.0;
  %482 = %470.0;
  %483 = @func_3096() /* ty=Tensor[(7, 8, 5), float64] */;
  %484 = @func_1138() /* ty=Tensor[(7, 8, 5), float64] */;
  %485 = %471.0;
  %486 = @func_4697(%473) /* ty=Tensor[(10, 3, 8), float64] */;
  %487 = %476.1;
  %488 = logical_and(%479, %480) /* ty=Tensor[(750), bool] */;
  (%481, %482, %483, %484, %485, %486, meta[relay.Constant][26] /* ty=Tensor[(240), float64] */, %487, %488)
}

def @func_2030() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %489 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %490 = %489.0;
  %491 = @func_1600() /* ty=Tensor[(7, 8, 5), float64] */;
  (%490, %491)
}

def @func_506() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
  %492 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %493 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %498 = less_equal(%495, %496) /* ty=Tensor[(7, 8, 5), bool] */;
  (%497, %498)
}

def @func_4765() -> (Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) {
  @func_4763() /* ty=(Tensor[(6, 14, 9), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool], Tensor[(6, 42), uint8]) */
}

def @func_1386(%var_1374: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(294), float32], Tensor[(240), float32], float32) {
  %499 = @func_1326() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %500 = %499.0;
  %501 = cast(%var_1374, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %505 = cast(meta[relay.Constant][29] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %506 = cast(9.6819f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %507 = reshape(%505, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %508 = reshape(%506, newshape=[]) /* ty=float32 */;
  %509 = @func_1264(%507, %508) /* ty=(Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) */;
  %510 = minimum(%503, %504) /* ty=Tensor[(7, 8, 5), int16] */;
  %511 = %509.7;
  (%510, %511, meta[relay.Constant][29] /* ty=Tensor[(240), float32] */, 9.6819f /* ty=float32 */)
}

def @main(%var_6340: Tensor[(125), uint16], %var_6389: Tensor[(630), uint32], %var_6393: Tensor[(1144), uint64], %var_6408: Tensor[(5, 44), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(6, 7, 15), int16], Tensor[(630), uint32], Tensor[(1144), bool], Tensor[(1144), uint64], Tensor[(5, 44), bool], Tensor[(125), bool], Tensor[(7, 8, 5), float32], Tensor[(125), uint16]) {
  %512 = @func_1854() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %513 = cast(%var_6340, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %514 = reshape(%513, newshape=[125]) /* ty=Tensor[(125), uint16] */;
  %515 = @func_6172(%514) /* ty=(Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) */;
  %516 = %515.2;
  %517 = cast(%516, dtype="bool") /* ty=Tensor[(125), bool] */;
  %518 = shape_of(%var_6340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %519 = cast(%var_6340, dtype="bool") /* ty=Tensor[(125), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?), bool] */;
  %521 = less_equal(%519, %520) /* ty=Tensor[(125), bool] */;
  %522 = cast(%521, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %523 = shape_of(%516, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = cast(%516, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %526 = cast(%var_6389, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %527 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 44), float64] */, dtype="float64") /* ty=Tensor[(5, 44), float64] */;
  %528 = reshape(%526, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %529 = reshape(%527, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %530 = @func_5236(%528, %529) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */;
  %531 = cast(%var_6393, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %532 = reshape(%531, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %533 = @func_2883(%532) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(6, 14, 9), int32], Tensor[(49, 6), float32], Tensor[(1144), bool]) */;
  %534 = cast(%var_6408, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %535 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 44), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %536 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 44), float64] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %538 = cast(%521, dtype="bool") /* ty=Tensor[(125), bool] */;
  %539 = shape_of(%var_6340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(%var_6340, dtype="bool") /* ty=Tensor[(125), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), bool] */;
  %542 = @func_4057() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) */;
  %543 = cast(%516, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %544 = shape_of(%521, dtype="int32") /* ty=Tensor[(1), int32] */;
  %545 = cast(%521, dtype="uint16") /* ty=Tensor[(125), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %547 = %512.0;
  %548 = logical_xor(%524, %525) /* ty=Tensor[(125), uint16] */;
  %549 = %530.0;
  %550 = %533.4;
  %551 = greater_equal(%536, %537) /* ty=Tensor[(5, 44), bool] */;
  %552 = greater(%540, %541) /* ty=Tensor[(125), bool] */;
  %553 = %542.0;
  %554 = bitwise_xor(%545, %546) /* ty=Tensor[(125), uint16] */;
  (%547, %548, %549, %var_6389, %550, %var_6393, %551, %552, %553, %554)
}

def @func_5910(%var_5908: Tensor[(135), float32], %var_5909: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(135), float32], Tensor[(16, 8, 4), float32], Tensor[(512), float32], Tensor[(7, 8, 5), float64]) {
  %568 = fn (%var_5890: Tensor[(135), float32], %var_5901: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(135), float32], Tensor[(16, 8, 4), float32], Tensor[(512), float32], Tensor[(7, 8, 5), float64]) {
    %555 = cast(-8.64252f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %556 = cast(%var_5890, dtype="float32") /* ty=Tensor[(135), float32] */;
    %557 = reshape(%555, newshape=[]) /* ty=float32 */;
    %558 = reshape(%556, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), float32] */;
    %559 = @func_2659(%557, %558) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(15, 9, 1), float64]) */;
    %560 = cast(%var_5901, dtype="float32") /* ty=Tensor[(512), float32] */;
    %561 = reshape(%560, newshape=[512]) /* ty=Tensor[(512), float32] */;
    %562 = @func_3790(%561) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) */;
    %563 = @func_1853() /* ty=(Tensor[(7, 8, 5), float64],) */;
    %564 = @func_3836() /* ty=Tensor[(7, 8, 5), float32] */;
    %565 = %559.0;
    %566 = %562.2;
    %567 = %563.0;
    (%564, %565, -8.64252f /* ty=float32 */, %var_5890, %566, %var_5901, %567)
  };
  %568(%var_5908, %var_5909) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(135), float32], Tensor[(16, 8, 4), float32], Tensor[(512), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_168(%var_166: Tensor[(6, 14, 9), float64]) -> (Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) {
  @func_165(%var_166) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */
}

def @func_2777() -> Tensor[(7, 8, 5), float64] {
  @func_2775() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1447(%var_1446: Tensor[(15, 1, 2), float32]) -> Tensor[(15, 1, 2), float32] {
  %570 = fn (%var_1440: Tensor[(15, 1, 2), float32]) -> Tensor[(15, 1, 2), float32] {
    %569 = cast(%var_1440, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
    exp(%569) /* ty=Tensor[(15, 1, 2), float32] */
  };
  %570(%var_1446) /* ty=Tensor[(15, 1, 2), float32] */
}

def @func_372() -> (Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) {
  @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_2475() -> Tensor[(7, 8, 5), float64] {
  @func_2473() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_3915(%var_3908: Tensor[(3, 11, 6), float32]) -> (Tensor[(3, 11, 6), float32],) {
  %571 = cast(%var_3908, dtype="float32") /* ty=Tensor[(3, 11, 6), float32] */;
  %572 = log(%571) /* ty=Tensor[(3, 11, 6), float32] */;
  (%572,)
}

def @func_1226() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) {
  %573 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %574 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %575 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %576 = cast(5.21663f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %577 = cast(meta[relay.Constant][31] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %578 = reshape(%576, newshape=[]) /* ty=float32 */;
  %579 = reshape(%577, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %580 = @func_240(%578, %579) /* ty=Tensor[(2, 1, 3), uint16] */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 1, 3), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %585 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 1, 3), uint16] */, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %586 = @func_520() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %587 = %573.0;
  %588 = %574.0;
  %589 = %575.0;
  %590 = add(%583, %584) /* ty=Tensor[(2, ?, 3), uint16] */;
  %591 = acosh(%585) /* ty=Tensor[(2, 1, 3), float32] */;
  %592 = %586.0;
  (%587, %588, %589, 5.21663f /* ty=float32 */, meta[relay.Constant][31] /* ty=Tensor[(6), float32] */, %590, %591, %592)
}

def @func_1034(%var_1031: Tensor[(2366), int16], %var_1032: float32, %var_1033: Tensor[(6), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(13, 13, 14), int16], Tensor[(2366), int16], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64]) {
  %614 = fn (%var_967: Tensor[(2366), int16], %var_979: float32, %var_980: Tensor[(6), float32]) -> (Tensor[(7, 8, 5), float64], Tensor[(13, 13, 14), int16], Tensor[(2366), int16], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64]) {
    %593 = cast(%var_967, dtype="int16") /* ty=Tensor[(2366), int16] */;
    %594 = reshape(%593, newshape=[13, 13, 14]) /* ty=Tensor[(13, 13, 14), int16] */;
    %595 = @func_480(%594) /* ty=(Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) */;
    %596 = cast(%var_979, dtype="float32") /* ty=float32 */;
    %597 = cast(%var_980, dtype="float32") /* ty=Tensor[(6), float32] */;
    %598 = reshape(%596, newshape=[]) /* ty=float32 */;
    %599 = reshape(%597, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
    %600 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
    %601 = cast(%600, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %602 = reshape(%601, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %603 = @func_441(%602) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
    %604 = cast(%600, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %605 = reshape(%604, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %606 = @func_441(%605) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
    %607 = cast(meta[relay.Constant][33] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %608 = reshape(%607, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), uint64] */;
    %609 = %595.0;
    %610 = @func_240(%598, %599) /* ty=Tensor[(2, 1, 3), uint16] */;
    %611 = %603.2;
    %612 = %606.1;
    %613 = @func_454(%608) /* ty=Tensor[(11, 13, 8), bool] */;
    (%600, %609, %var_967, %610, %var_979, %var_980, %611, %612, %613, meta[relay.Constant][33] /* ty=Tensor[(1144), uint64] */)
  };
  %614(%var_1031, %var_1032, %var_1033) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(13, 13, 14), int16], Tensor[(2366), int16], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(11, 13, 8), bool], Tensor[(1144), uint64]) */
}

def @func_5707() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
  @func_5705() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) */
}

def @func_1139() -> Tensor[(7, 8, 5), float64] {
  %616 = fn () -> Tensor[(7, 8, 5), float64] {
    %615 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %615.0
  };
  %616() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_4699(%var_4698: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
  %618 = fn (%var_4688: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
    %617 = cast(%var_4688, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
    asin(%617) /* ty=Tensor[(10, 3, 8), float64] */
  };
  %618(%var_4698) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_4152() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %625 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
    %619 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %620 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
    %621 = @func_588() /* ty=(Tensor[(7, 8, 5), float64],) */;
    %622 = %619.2;
    %623 = %620.0;
    %624 = %621.0;
    (%622, %623, %624)
  };
  %625() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_522() -> (Tensor[(7, 8, 5), float64],) {
  @func_520() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_3660() -> Tensor[(7, 8, 5), float64] {
  @func_3658() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_2366() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  %626 = @func_1507() /* ty=Tensor[(7, 8, 5), float64] */;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %628 = reshape(%627, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %629 = @func_441(%628) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
  %630 = %629.2;
  %631 = cast(%626, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %635 = @func_1832() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %636 = power(%633, %634) /* ty=Tensor[(7, 8, 5), float32] */;
  %637 = %635.0;
  (%636, %637)
}

def @func_1268(%var_1266: Tensor[(15, 16, 1), float32], %var_1267: float32) -> (Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) {
  @func_1264(%var_1266, %var_1267) /* ty=(Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) */
}

def @func_3388(%var_3373: Tensor[(12, 3, 13), uint8], %var_3374: Tensor[(12, 3, 13), uint8]) -> (Tensor[(7, 8, 5), float32], Tensor[(12, 3, 13), float32]) {
  %638 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
  %639 = cast(%var_3374, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %640 = shape_of(%var_3373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%var_3373, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %643 = right_shift(%641, %642) /* ty=Tensor[(12, 3, 13), uint8] */;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %645 = %638.0;
  %646 = sigmoid(%644) /* ty=Tensor[(12, 3, 13), float32] */;
  (%645, %646)
}

def @func_240(%var_231: float32, %var_232: Tensor[(2, 1, 3), float32]) -> Tensor[(2, 1, 3), uint16] {
  %647 = cast(%var_231, dtype="float32") /* ty=float32 */;
  %648 = cast(%var_232, dtype="float32") /* ty=Tensor[(2, 1, 3), float32] */;
  %649 = subtract(%647, %648) /* ty=Tensor[(2, 1, 3), float32] */;
  %650 = cast(%var_231, dtype="uint16") /* ty=uint16 */;
  %651 = cast(%649, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  bitwise_or(%650, %651) /* ty=Tensor[(2, 1, 3), uint16] */
}

def @func_3792(%var_3791: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) {
  %661 = fn (%var_3785: Tensor[(512), float32]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) {
    %652 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %653 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
    %654 = cast(%var_3785, dtype="float32") /* ty=Tensor[(512), float32] */;
    %655 = reshape(%654, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
    %656 = cast(%var_3785, dtype="float32") /* ty=Tensor[(512), float32] */;
    %657 = %652.1;
    %658 = %653.3;
    %659 = @func_2790(%655) /* ty=Tensor[(16, 8, 4), float32] */;
    %660 = asin(%656) /* ty=Tensor[(512), float32] */;
    (%657, %658, %659, %660)
  };
  %661(%var_3791) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) */
}

def @func_4236(%var_4235: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) {
  %674 = fn (%var_4224: Tensor[(750), int8]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) {
    %662 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %663 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
    %664 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %665 = cast(%var_4224, dtype="int8") /* ty=Tensor[(750), int8] */;
    %666 = cast(%var_4224, dtype="int8") /* ty=Tensor[(750), int8] */;
    %667 = reshape(%665, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
    %668 = reshape(%666, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), int8] */;
    %669 = @func_3320(%667, %668) /* ty=(Tensor[(15, 5, 10), int8], float32, Tensor[(1, 6), float32], Tensor[(2, ?, 3), bool], Tensor[(16, 8, 4), float32], Tensor[(4, 128), float32]) */;
    %670 = %662.1;
    %671 = %663.3;
    %672 = %664.0;
    %673 = %669.3;
    (%670, %671, %672, %673, %var_4224)
  };
  %674(%var_4235) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(2, ?, 3), bool], Tensor[(750), int8]) */
}

def @func_626() -> (Tensor[(7, 8, 5), float32],) {
  %679 = fn () -> (Tensor[(7, 8, 5), float32],) {
    %675 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %676 = %675.1;
    %677 = cast(%676, dtype="float32") /* ty=Tensor[(7, 8, 5), float32] */;
    %678 = exp(%677) /* ty=Tensor[(7, 8, 5), float32] */;
    (%678,)
  };
  %679() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_4651(%var_4647: Tensor[(10, 2, 6), bool], %var_4648: Tensor[(280), float64], %var_4649: Tensor[(512), float32], %var_4650: Tensor[(512), float32]) -> (Tensor[(10, 2, 6), bool], Tensor[(294), float32], Tensor[(280), float64], Tensor[(7, 8, 5), float64], Tensor[(512), bool]) {
  %698 = fn (%var_4598: Tensor[(10, 2, 6), bool], %var_4603: Tensor[(280), float64], %var_4625: Tensor[(512), float32], %var_4637: Tensor[(512), float32]) -> (Tensor[(10, 2, 6), bool], Tensor[(294), float32], Tensor[(280), float64], Tensor[(7, 8, 5), float64], Tensor[(512), bool]) {
    %680 = cast(%var_4598, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
    %681 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 2, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %684 = cast(%var_4603, dtype="float64") /* ty=Tensor[(280), float64] */;
    %685 = reshape(%684, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %686 = @func_3250(%685) /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(294), float32]) */;
    %687 = cast(%var_4625, dtype="float32") /* ty=Tensor[(512), float32] */;
    %688 = reshape(%687, newshape=[512]) /* ty=Tensor[(512), float32] */;
    %689 = @func_3790(%688) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(16, 8, 4), float32], Tensor[(512), float32]) */;
    %690 = cast(%var_4637, dtype="bool") /* ty=Tensor[(512), bool] */;
    %691 = shape_of(%var_4625, dtype="int32") /* ty=Tensor[(1), int32] */;
    %692 = cast(%var_4625, dtype="bool") /* ty=Tensor[(512), bool] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?), bool] */;
    %694 = logical_or(%682, %683) /* ty=Tensor[(10, 2, 6), bool] */;
    %695 = %686.2;
    %696 = %689.1;
    %697 = logical_and(%692, %693) /* ty=Tensor[(512), bool] */;
    (%694, %695, %var_4603, %696, %697)
  };
  %698(%var_4647, %var_4648, %var_4649, %var_4650) /* ty=(Tensor[(10, 2, 6), bool], Tensor[(294), float32], Tensor[(280), float64], Tensor[(7, 8, 5), float64], Tensor[(512), bool]) */
}

def @func_131() -> Tensor[(7, 8, 5), float64] {
  @func_129() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_1433() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */
}

def @func_93(%var_89: Tensor[(11, 9, 5), float64]) -> Tensor[(11, 9, 5), float64] {
  %699 = cast(%var_89, dtype="float64") /* ty=Tensor[(11, 9, 5), float64] */;
  rsqrt(%699) /* ty=Tensor[(11, 9, 5), float64] */
}

def @func_5770(%var_5743: Tensor[(2, 15, 3), float64]) -> (Tensor[(7, 8, 5), float32], Tensor[(2, 15, 3), int8]) {
  %700 = @func_4885() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %701 = @func_3729() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), float32]) */;
  %702 = %701.1;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(2, 1, 3), float64] */;
  %704 = tan(%703) /* ty=Tensor[(2, 1, 3), float64] */;
  %705 = cast(%704, dtype="int8") /* ty=Tensor[(2, 1, 3), int8] */;
  %706 = cast(%var_5743, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %707 = %700.0;
  %708 = bitwise_and(%705, %706) /* ty=Tensor[(2, 15, 3), int8] */;
  (%707, %708)
}

def @func_1768(%var_1767: Tensor[(1, 125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) {
  %723 = fn (%var_1764: Tensor[(1, 125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) {
    %709 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %710 = %709.0;
    %711 = cast(%710, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %712 = cast(meta[relay.Constant][35] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %713 = reshape(%711, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %714 = reshape(%712, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
    %715 = @func_933(%713, %714) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
    %716 = cast(%var_1764, dtype="uint16") /* ty=Tensor[(1, 125), uint16] */;
    %717 = cast(%var_1764, dtype="uint16") /* ty=Tensor[(1, 125), uint16] */;
    %718 = reshape(%716, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %719 = reshape(%717, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %720 = @func_1543(%718, %719) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %721 = %715.1;
    %722 = %720.1;
    (%710, %721, meta[relay.Constant][35] /* ty=Tensor[(294), float32] */, %722, %var_1764)
  };
  %723(%var_1767) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) */
}

def @func_1543(%var_1522: Tensor[(5, 5, 5), uint16], %var_1523: Tensor[(5, 5, 5), uint16]) -> (Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) {
  %724 = cast(%var_1523, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %725 = shape_of(%var_1522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%var_1522, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %729 = equal(%726, %727) /* ty=Tensor[(5, 5, 5), bool] */;
  %730 = %728.3;
  (%729, %730)
}

def @func_165(%var_138: Tensor[(6, 14, 9), float64]) -> (Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) {
  %731 = cast(%var_138, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %732 = cast(%var_138, dtype="float64") /* ty=Tensor[(6, 14, 9), float64] */;
  %733 = cos(%732) /* ty=Tensor[(6, 14, 9), float64] */;
  %734 = cast(%var_138, dtype="int32") /* ty=Tensor[(6, 14, 9), int32] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="int32") /* ty=Tensor[(6, 14, 9), int32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %738 = asinh(%731) /* ty=Tensor[(6, 14, 9), float64] */;
  %739 = bitwise_or(%736, %737) /* ty=Tensor[(6, 14, 9), int32] */;
  (%738, %739)
}

def @func_2558() -> (Tensor[(7, 8, 5), float64],) {
  %740 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
  (%740,)
}

def @func_483(%var_481: Tensor[(13, 13, 14), int16]) -> (Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) {
  @func_480(%var_481) /* ty=(Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) */
}

def @func_4188() -> Tensor[(7, 8, 5), bool] {
  %742 = fn () -> Tensor[(7, 8, 5), bool] {
    %741 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %741.1
  };
  %742() /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_2543(%var_2542: Tensor[(125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) {
  %757 = fn (%var_2488: Tensor[(125), uint16]) -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) {
    %743 = @func_2075() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %744 = cast(%var_2488, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %745 = reshape(%744, newshape=[1, 125]) /* ty=Tensor[(1, 125), uint16] */;
    %746 = @func_1766(%745) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 8, 5), float64], Tensor[(1, 125), uint16]) */;
    %747 = @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %748 = %746.0;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %750 = reshape(%749, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %751 = @func_2434(%750) /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float64]) */;
    %752 = cast(%var_2488, dtype="float64") /* ty=Tensor[(125), float64] */;
    %753 = %743.0;
    %754 = %747.0;
    %755 = %751.1;
    %756 = asinh(%752) /* ty=Tensor[(125), float64] */;
    (%753, %748, %754, %755, %756)
  };
  %757(%var_2542) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) */
}

def @func_2368() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  @func_2366() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_3438(%var_3437: Tensor[(4, 15, 16), float32]) -> (Tensor[(4, 15, 16), bool],) {
  %765 = fn (%var_3427: Tensor[(4, 15, 16), float32]) -> (Tensor[(4, 15, 16), bool],) {
    %758 = cast(%var_3427, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
    %759 = tan(%758) /* ty=Tensor[(4, 15, 16), float32] */;
    %760 = cast(%var_3427, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
    %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
    %762 = cast(%759, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
    %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %764 = equal(%762, %763) /* ty=Tensor[(4, 15, 16), bool] */;
    (%764,)
  };
  %765(%var_3437) /* ty=(Tensor[(4, 15, 16), bool],) */
}

def @func_5143(%var_5138: Tensor[(198), float32]) -> (Tensor[(?, 9, 3), uint64], Tensor[(3, 11, 6), float32], Tensor[(198), float32]) {
  %766 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %767 = atan(%766) /* ty=Tensor[(1, 9, 3), float32] */;
  %768 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 9, 3), float32] */, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %772 = cast(%var_5138, dtype="float32") /* ty=Tensor[(198), float32] */;
  %773 = reshape(%772, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
  %774 = @func_3915(%773) /* ty=(Tensor[(3, 11, 6), float32],) */;
  %775 = left_shift(%770, %771) /* ty=Tensor[(?, 9, 3), uint64] */;
  %776 = %774.0;
  (%775, %776, %var_5138)
}

def @func_96(%var_94: Tensor[(11, 9, 5), float64]) -> Tensor[(11, 9, 5), float64] {
  @func_93(%var_94) /* ty=Tensor[(11, 9, 5), float64] */
}

def @func_456(%var_455: Tensor[(11, 13, 8), uint64]) -> Tensor[(11, 13, 8), bool] {
  %781 = fn (%var_450: Tensor[(11, 13, 8), uint64]) -> Tensor[(11, 13, 8), bool] {
    %777 = cast(%var_450, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
    %778 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(11, 13, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %779 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 13, 8), uint64] */, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%779, %780) /* ty=Tensor[(11, 13, 8), bool] */
  };
  %781(%var_455) /* ty=Tensor[(11, 13, 8), bool] */
}

def @func_3918(%var_3916: Tensor[(3, 11, 6), float32]) -> (Tensor[(3, 11, 6), float32],) {
  @func_3915(%var_3916) /* ty=(Tensor[(3, 11, 6), float32],) */
}

def @func_4513(%var_4510: Tensor[(7, 9, 4), uint8], %var_4511: Tensor[(7, 9, 4), uint8], %var_4512: Tensor[(756), float64]) -> (Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) {
  @func_4508(%var_4510, %var_4511, %var_4512) /* ty=(Tensor[(7, 9, 4), uint8], Tensor[(7, 8, 5), bool], Tensor[(7, 9, 4), bool], Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), float32], Tensor[(756), float32]) */
}

def @func_3818() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
  %785 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
    %782 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %783 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
    %784 = %782.1;
    (%783, %784)
  };
  %785() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */
}

def @func_2032() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) {
  @func_2030() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */
}

def @func_2304() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) {
  %839 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) {
    %786 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
    %787 = %786.7;
    %788 = cast(%787, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %789 = reshape(%788, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %790 = @func_441(%789) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */;
    %791 = @func_1724() /* ty=(Tensor[(7, 8, 5), uint8], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64]) */;
    %792 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %793 = reshape(%792, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
    %794 = cast(meta[relay.Constant][39] /* ty=Tensor[(49, 6), float32] */, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
    %795 = log(%794) /* ty=Tensor[(49, 6), float64] */;
    %796 = cast(meta[relay.Constant][40] /* ty=Tensor[(49, 6), float64] */, dtype="bool") /* ty=Tensor[(49, 6), bool] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(2), int32] */;
    %798 = cast(%795, dtype="bool") /* ty=Tensor[(49, 6), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %800 = greater(%798, %799) /* ty=Tensor[(49, 6), bool] */;
    %801 = cast(%800, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
    %802 = asin(%801) /* ty=Tensor[(49, 6), float64] */;
    %803 = cast(meta[relay.Constant][39] /* ty=Tensor[(49, 6), float32] */, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
    %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(2), int32] */;
    %805 = cast(%802, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %807 = cast(meta[relay.Constant][41] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %808 = cast(meta[relay.Constant][41] /* ty=Tensor[(125), uint16] */, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %809 = reshape(%807, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %810 = reshape(%808, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint16] */;
    %811 = @func_1543(%809, %810) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %812 = %791.0;
    %813 = cast(%812, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %814 = reshape(%813, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %815 = @func_218(%814) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %816 = %815.1;
    %817 = cast(%816, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %818 = cast(%787, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %819 = cast(meta[relay.Constant][39] /* ty=Tensor[(49, 6), float32] */, dtype="float32") /* ty=Tensor[(49, 6), float32] */;
    %820 = reshape(%818, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %821 = reshape(%819, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
    %822 = @func_933(%820, %821) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
    %823 = %822.1;
    %824 = cast(%823, dtype="uint16") /* ty=Tensor[(7, 14, 3), uint16] */;
    %825 = shape_of(%802, dtype="int32") /* ty=Tensor[(2), int32] */;
    %826 = cast(%802, dtype="uint16") /* ty=Tensor[(49, 6), uint16] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %828 = cast(%787, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
    %829 = reshape(%828, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
    %830 = @func_218(%829) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %831 = %790.1;
    %832 = @func_1445(%793) /* ty=Tensor[(15, 1, 2), float32] */;
    %833 = add(%805, %806) /* ty=Tensor[(49, 6), uint16] */;
    %834 = %811.1;
    %835 = acos(%817) /* ty=Tensor[(7, 8, 5), float64] */;
    %836 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
    %837 = logical_xor(%826, %827) /* ty=Tensor[(49, 6), uint16] */;
    %838 = %830.1;
    (%787, %831, %812, %832, meta[relay.Constant][38] /* ty=Tensor[(30), float32] */, %833, %834, meta[relay.Constant][41] /* ty=Tensor[(125), uint16] */, %835, %836, %837, %838)
  };
  %839() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), uint8], Tensor[(15, 1, 2), float32], Tensor[(30), float32], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(49, 6), uint16], Tensor[(7, 8, 5), float64]) */
}

def @func_2833() -> Tensor[(7, 8, 5), bool] {
  %841 = fn () -> Tensor[(7, 8, 5), bool] {
    %840 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %840.1
  };
  %841() /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_852() -> (Tensor[(7, 8, 5), float32],) {
  @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_2560() -> (Tensor[(7, 8, 5), float64],) {
  @func_2558() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_2746() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) {
  %842 = @func_1431() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
  %843 = %842.0;
  %844 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
  (%843, %844)
}

def @func_2075() -> (Tensor[(7, 8, 5), float32],) {
  %845 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
  %846 = %845.0;
  (%846,)
}

def @func_5376() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
  %854 = fn () -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) {
    %847 = @func_2746() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64]) */;
    %848 = @func_4360() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %849 = @func_3187() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */;
    %850 = @func_2473() /* ty=Tensor[(7, 8, 5), float64] */;
    %851 = %847.0;
    %852 = %848.0;
    %853 = %849.0;
    (%850, %851, %852, %853)
  };
  %854() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), bool]) */
}

def @func_5236(%var_5234: Tensor[(6, 7, 15), uint32], %var_5235: Tensor[(220), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) {
  @func_5232(%var_5234, %var_5235) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(6, 2, 15), int8], Tensor[(7, 8, 5), float32], Tensor[(2, 11, 10), float32]) */
}

def @func_1264(%var_1243: Tensor[(15, 16, 1), float32], %var_1251: float32) -> (Tensor[(15, 16, 1), float32], Tensor[(7, 8, 5), float64], Tensor[(2, 1, 3), uint16], float32, Tensor[(6), float32], Tensor[(7, 8, 5), bool], Tensor[(1144), uint64], Tensor[(294), float32]) {
  %855 = cast(%var_1243, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %856 = cast(%var_1251, dtype="float32") /* ty=float32 */;
  %857 = cast(meta[relay.Constant][42] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %858 = reshape(%856, newshape=[]) /* ty=float32 */;
  %859 = reshape(%857, newshape=[2, 1, 3]) /* ty=Tensor[(2, 1, 3), float32] */;
  %860 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
  %861 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %862 = cast(%861, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %863 = cast(meta[relay.Constant][43] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %864 = reshape(%862, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %865 = reshape(%863, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
  %866 = @func_933(%864, %865) /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 14, 3), float32], Tensor[(294, 1), float32], Tensor[(1144), uint64]) */;
  %867 = asinh(%855) /* ty=Tensor[(15, 16, 1), float32] */;
  %868 = @func_240(%858, %859) /* ty=Tensor[(2, 1, 3), uint16] */;
  %869 = %860.1;
  %870 = %866.3;
  (%867, %861, %868, %var_1251, meta[relay.Constant][42] /* ty=Tensor[(6), float32] */, %869, %870, meta[relay.Constant][43] /* ty=Tensor[(294), float32] */)
}

def @func_4254() -> (Tensor[(7, 8, 5), float32],) {
  %873 = fn () -> (Tensor[(7, 8, 5), float32],) {
    %871 = @func_4056() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) */;
    %872 = %871.0;
    (%872,)
  };
  %873() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_508() -> (Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) {
  @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */
}

def @func_6172(%var_6171: Tensor[(125), uint16]) -> (Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) {
  %881 = fn (%var_6165: Tensor[(125), uint16]) -> (Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) {
    %874 = @func_1226() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], float32, Tensor[(6), float32], Tensor[(2, ?, 3), uint16], Tensor[(2, 1, 3), float32], Tensor[(7, 8, 5), float64]) */;
    %875 = cast(%var_6165, dtype="uint16") /* ty=Tensor[(125), uint16] */;
    %876 = reshape(%875, newshape=[125]) /* ty=Tensor[(125), uint16] */;
    %877 = @func_2541(%876) /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float64], Tensor[(125), float64]) */;
    %878 = %874.5;
    %879 = %877.3;
    %880 = @func_2396() /* ty=Tensor[(7, 8, 5), float64] */;
    (%878, %879, %var_6165, %880)
  };
  %881(%var_6171) /* ty=(Tensor[(2, ?, 3), uint16], Tensor[(7, 8, 5), float64], Tensor[(125), uint16], Tensor[(7, 8, 5), float64]) */
}

def @func_1389(%var_1387: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(294), float32], Tensor[(240), float32], float32) {
  @func_1386(%var_1387) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(294), float32], Tensor[(240), float32], float32) */
}

def @func_3836() -> Tensor[(7, 8, 5), float32] {
  %882 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
  %882.1
}

def @func_2715() -> (Tensor[(7, 8, 5), float32],) {
  %885 = fn () -> (Tensor[(7, 8, 5), float32],) {
    %883 = @func_625() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %884 = %883.0;
    (%884,)
  };
  %885() /* ty=(Tensor[(7, 8, 5), float32],) */
}

def @func_3188() -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) {
  %889 = fn () -> (Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) {
    %886 = @func_506() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), bool]) */;
    %887 = @func_2832() /* ty=Tensor[(7, 8, 5), bool] */;
    %888 = %886.0;
    (%887, %888)
  };
  %889() /* ty=(Tensor[(7, 8, 5), bool], Tensor[(7, 8, 5), float64]) */
}

def @func_480(%var_472: Tensor[(13, 13, 14), int16]) -> (Tensor[(13, 13, 14), int16], Tensor[(6, 14, 9), int32], Tensor[(756), float64]) {
  %890 = cast(%var_472, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %891 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(13, 13, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 13, 14), int16] */, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %894 = cast(meta[relay.Constant][45] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %895 = reshape(%894, newshape=[6, 14, 9]) /* ty=Tensor[(6, 14, 9), float64] */;
  %896 = @func_165(%895) /* ty=(Tensor[(6, 14, 9), float64], Tensor[(6, 14, 9), int32]) */;
  %897 = logical_xor(%892, %893) /* ty=Tensor[(13, 13, 14), int16] */;
  %898 = %896.1;
  (%897, %898, meta[relay.Constant][45] /* ty=Tensor[(756), float64] */)
}

def @func_3740() -> (Tensor[(7, 8, 5), float64],) {
  %899 = @func_1853() /* ty=(Tensor[(7, 8, 5), float64],) */;
  %900 = %899.0;
  (%900,)
}

def @func_441(%var_412: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) {
  %901 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
  %902 = cast(%var_412, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="int16") /* ty=Tensor[(7, 8, 5), int16] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %906 = cast(%var_412, dtype="float64") /* ty=Tensor[(7, 8, 5), float64] */;
  %907 = reshape(%906, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), float64] */;
  %908 = @func_290(%907) /* ty=(Tensor[(7, 8, 5), int32],) */;
  %909 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %910 = maximum(%904, %905) /* ty=Tensor[(7, 8, 5), int16] */;
  %911 = %908.0;
  %912 = %909.0;
  (%910, %911, %912)
}

def @func_589() -> (Tensor[(7, 8, 5), float64],) {
  %914 = fn () -> (Tensor[(7, 8, 5), float64],) {
    %913 = @func_129() /* ty=Tensor[(7, 8, 5), float64] */;
    (%913,)
  };
  %914() /* ty=(Tensor[(7, 8, 5), float64],) */
}

def @func_3133() -> (Tensor[(54, 14), float64],) {
  @func_3131() /* ty=(Tensor[(54, 14), float64],) */
}

def @func_3097() -> Tensor[(7, 8, 5), float64] {
  %916 = fn () -> Tensor[(7, 8, 5), float64] {
    %915 = @func_2634() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(7, 8, 5), float32]) */;
    %915.0
  };
  %916() /* ty=Tensor[(7, 8, 5), float64] */
}

def @func_4057() -> (Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) {
  %923 = fn () -> (Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) {
    %917 = @func_2714() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %918 = cast(meta[relay.Constant][46] /* ty=Tensor[(99, 2), float32] */, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
    %919 = reshape(%918, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float32] */;
    %920 = @func_3915(%919) /* ty=(Tensor[(3, 11, 6), float32],) */;
    %921 = %917.0;
    %922 = %920.0;
    (%921, %922, meta[relay.Constant][46] /* ty=Tensor[(99, 2), float32] */)
  };
  %923() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(3, 11, 6), float32], Tensor[(99, 2), float32]) */
}

def @func_4828() -> (Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32]) {
  @func_4826() /* ty=(Tensor[(7, 8, 5), float32], Tensor[(7, 8, 5), float32]) */
}

def @func_3016(%var_2988: Tensor[(2, 11, 10), float64], %var_2989: Tensor[(2, 11, 10), float64]) -> (Tensor[(7, 8, 5), float64], Tensor[(2, 11, 10), int64]) {
  %924 = @func_370() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(6, 14, 9), int32], Tensor[(54, 14), float64], Tensor[(7, 8, 5), float64]) */;
  %925 = cast(%var_2989, dtype="float64") /* ty=Tensor[(2, 11, 10), float64] */;
  %926 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %927 = cast(%var_2988, dtype="float64") /* ty=Tensor[(2, 11, 10), float64] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %929 = divide(%927, %928) /* ty=Tensor[(2, 11, 10), float64] */;
  %930 = cast(%var_2988, dtype="int64") /* ty=Tensor[(2, 11, 10), int64] */;
  %931 = shape_of(%929, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%929, dtype="int64") /* ty=Tensor[(2, 11, 10), int64] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %934 = %924.3;
  %935 = left_shift(%932, %933) /* ty=Tensor[(2, 11, 10), int64] */;
  (%934, %935)
}

def @func_6083(%var_6052: Tensor[(10, 5, 10), uint8], %var_6053: Tensor[(10, 5, 10), uint8]) -> (Tensor[(7, 8, 5), float64], Tensor[(10, 5, 10), bool]) {
  %936 = @func_4878() /* ty=(Tensor[(7, 8, 5), float64], Tensor[(54, 14), float64]) */;
  %937 = cast(%var_6053, dtype="uint8") /* ty=Tensor[(10, 5, 10), uint8] */;
  %938 = shape_of(%var_6052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_6052, dtype="uint8") /* ty=Tensor[(10, 5, 10), uint8] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %941 = logical_xor(%939, %940) /* ty=Tensor[(10, 5, 10), uint8] */;
  %942 = cast(%941, dtype="float32") /* ty=Tensor[(10, 5, 10), float32] */;
  %943 = acos(%942) /* ty=Tensor[(10, 5, 10), float32] */;
  %944 = cast(%943, dtype="float64") /* ty=Tensor[(10, 5, 10), float64] */;
  %945 = sin(%944) /* ty=Tensor[(10, 5, 10), float64] */;
  %946 = cast(%var_6052, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%945, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %950 = %936.0;
  %951 = not_equal(%948, %949) /* ty=Tensor[(10, 5, 10), bool] */;
  (%950, %951)
}

def @func_444(%var_442: Tensor[(7, 8, 5), float64]) -> (Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) {
  @func_441(%var_442) /* ty=(Tensor[(7, 8, 5), int16], Tensor[(7, 8, 5), int32], Tensor[(7, 8, 5), float64]) */
}

def @func_4322() -> (Tensor[(7, 8, 5), float32],) {
  %954 = fn () -> (Tensor[(7, 8, 5), float32],) {
    %952 = @func_850() /* ty=(Tensor[(7, 8, 5), float32],) */;
    %953 = %952.0;
    (%953,)
  };
  %954() /* ty=(Tensor[(7, 8, 5), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen163/build/output.py", line 2369, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:54:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

