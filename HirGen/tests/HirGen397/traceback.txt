==========mod==========
#[version = "0.0.5"]
def @func_1263(%var_1237: uint64, %var_1238: Tensor[(36), uint64]) -> (Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) {
  %0 = cast(%var_1237, dtype="uint64") /* ty=uint64 */;
  %1 = cast(%var_1238, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %3 = reshape(%0, newshape=[]) /* ty=uint64 */;
  %4 = reshape(%1, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %5 = reshape(%2, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %6 = @func_972(%3, %4, %5) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %7 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %8 = %7.0;
  %9 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="int64") /* ty=Tensor[(13, 5, 16), int64] */;
  %12 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%8, dtype="int64") /* ty=Tensor[(13, 5, 16), int64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %15 = %6.0;
  %16 = maximum(%13, %14) /* ty=Tensor[(13, 5, 16), int64] */;
  (%15, %var_1237, %var_1238, meta[relay.Constant][0] /* ty=Tensor[(396), int64] */, %16)
}

def @func_2139(%var_2107: Tensor[(189), uint64], %var_2127: Tensor[(189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) {
  %17 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %18 = %17.0;
  %19 = cast(%var_2107, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %20 = cast(%var_2107, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %21 = reshape(%19, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %22 = reshape(%20, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %23 = @func_1857(%21, %22) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %24 = %23.3;
  %25 = cast(%24, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %26 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%18, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %30 = cast(%var_2127, dtype="bool") /* ty=Tensor[(189), bool] */;
  %31 = shape_of(%var_2107, dtype="int32") /* ty=Tensor[(1), int32] */;
  %32 = cast(%var_2107, dtype="bool") /* ty=Tensor[(189), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?), bool] */;
  %34 = greater_equal(%27, %28) /* ty=Tensor[(13, 5, 16), bool] */;
  %35 = %29.0;
  %36 = greater(%32, %33) /* ty=Tensor[(189), bool] */;
  (%34, %35, %36)
}

def @func_6374() -> Tensor[(13, 5, 16), float32] {
  @func_2271() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3112(%var_3086: Tensor[(3, 16, 7), int32], %var_3095: Tensor[(1040), bool]) -> (Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) {
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 16, 7), int32] */, dtype="int32") /* ty=Tensor[(3, 16, 7), int32] */;
  %38 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_3086, dtype="int32") /* ty=Tensor[(3, 16, 7), int32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %41 = left_shift(%39, %40) /* ty=Tensor[(3, 16, 7), int32] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %43 = cast(%var_3095, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %44 = reshape(%43, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %45 = @func_2370(%44) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
  %46 = acosh(%42) /* ty=Tensor[(3, 16, 7), float32] */;
  %47 = %45.0;
  (%46, %47, %var_3095)
}

def @func_2282(%var_2277: uint8) -> (Tensor[(10, 1, 16), uint8],) {
  %48 = cast(%var_2277, dtype="uint8") /* ty=uint8 */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(10, 1, 16), uint8] */;
  %50 = right_shift(%48, %49) /* ty=Tensor[(10, 1, 16), uint8] */;
  (%50,)
}

def @func_4970() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  %51 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %52 = @func_3552() /* ty=(Tensor[(8, 6, 15), float32],) */;
  %53 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %54 = %51.0;
  %55 = %52.0;
  (%53, %54, %55)
}

def @func_1384() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_7333(%var_7288: Tensor[(36), uint64], %var_7319: Tensor[(2, 104), bool]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) {
  %56 = @func_6522() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) */;
  %57 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %58 = cast(%var_7288, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %60 = reshape(%57, newshape=[]) /* ty=uint64 */;
  %61 = reshape(%58, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %62 = reshape(%59, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %63 = @func_972(%60, %61, %62) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %64 = cast(%var_7319, dtype="bool") /* ty=Tensor[(2, 104), bool] */;
  %65 = reshape(%64, newshape=[208]) /* ty=Tensor[(208), bool] */;
  %66 = @func_5939(%65) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) */;
  %67 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %68 = cast(%67, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %69 = reshape(%68, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %70 = @func_2370(%69) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %73 = @func_5655() /* ty=Tensor[(13, 5, 16), float32] */;
  %74 = %56.4;
  %75 = %63.2;
  %76 = %66.2;
  %77 = sigmoid(%72) /* ty=Tensor[(13, 5, 16), float64] */;
  (%73, %74, %67, %75, meta[relay.Constant][3] /* ty=uint64 */, %var_7288, meta[relay.Constant][4] /* ty=Tensor[(396), int64] */, %76, %var_7319, %77)
}

def @func_7750(%var_7741: Tensor[(120), int16], %var_7742: Tensor[(180, 1), int16], %var_7743: Tensor[(78, 1), float64], %var_7744: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(78), float64], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180, 1), int16], Tensor[(78, 1), float64], Tensor[(720), float32]) {
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %79 = cast(%var_7741, dtype="int16") /* ty=Tensor[(120), int16] */;
  %80 = cast(%var_7742, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %81 = cast(%var_7743, dtype="float64") /* ty=Tensor[(78, 1), float64] */;
  %82 = cast(%var_7744, dtype="float32") /* ty=Tensor[(720), float32] */;
  %83 = reshape(%78, newshape=[30]) /* ty=Tensor[(30), int16] */;
  %84 = reshape(%79, newshape=[120]) /* ty=Tensor[(120), int16] */;
  %85 = reshape(%80, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %86 = reshape(%81, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %87 = reshape(%82, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %88 = @func_6253(%83, %84, %85, %86, %87) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) */;
  %89 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %90 = %88.10;
  (%89, %90, meta[relay.Constant][5] /* ty=Tensor[(30), int16] */, %var_7741, %var_7742, %var_7743, %var_7744)
}

def @func_3257(%var_3234: Tensor[(1, 13, 6), float64], %var_3243: Tensor[(720), float32]) -> (Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %91 = cast(%var_3234, dtype="float64") /* ty=Tensor[(1, 13, 6), float64] */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 6), float64] */;
  %93 = cast(%var_3243, dtype="float32") /* ty=Tensor[(720), float32] */;
  %94 = reshape(%93, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %95 = @func_2548(%94) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
  %96 = power(%91, %92) /* ty=Tensor[(10, 13, 6), float64] */;
  %97 = %95.2;
  (%96, %97, %var_3243)
}

def @func_4189() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %98 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %99 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
  %100 = %98.0;
  (%99, %100)
}

def @func_5023() -> Tensor[(8, 6, 15), float32] {
  %101 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %101.1
}

def @func_2588(%var_2559: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), int8],) {
  %102 = cast(%var_2559, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %103 = sin(%102) /* ty=Tensor[(12, 14, 3), float64] */;
  %104 = cast(%103, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %105 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_2559, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %108 = bitwise_or(%106, %107) /* ty=Tensor[(12, 14, 3), int8] */;
  (%108,)
}

def @func_1156() -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  %109 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %110 = %109.0;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %116 = greater(%113, %114) /* ty=Tensor[(13, 5, 16), bool] */;
  %117 = %115.0;
  (%116, %117)
}

def @func_7627() -> Tensor[(13, 5, 16), float32] {
  @func_6374() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6994(%var_6987: Tensor[(1210), uint64]) -> (Tensor[(13, 5, 16), float32], Tensor[(11, 11, 10), uint64], Tensor[(1210), uint64]) {
  %118 = @func_4189() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %119 = cast(%var_6987, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %120 = cast(%var_6987, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %121 = reshape(%119, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %122 = reshape(%120, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %123 = @func_1918(%121, %122) /* ty=(Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) */;
  %124 = %118.0;
  %125 = %123.0;
  (%124, %125, %var_6987)
}

def @func_8056() -> (Tensor[(396), int64], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %128 = reshape(%126, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
  %129 = reshape(%127, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %130 = @func_3257(%128, %129) /* ty=(Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %131 = @func_5266() /* ty=Tensor[(396), int64] */;
  %132 = %130.0;
  (%131, %132, meta[relay.Constant][8] /* ty=Tensor[(78), float64] */, meta[relay.Constant][9] /* ty=Tensor[(720), float32] */)
}

def @func_7685(%var_7677: Tensor[(12, 6, 7), uint32]) -> (Tensor[(12, 6, 7), bool],) {
  %133 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6, 7), uint32] */, dtype="bool") /* ty=Tensor[(12, 6, 7), bool] */;
  %134 = shape_of(%var_7677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%var_7677, dtype="bool") /* ty=Tensor[(12, 6, 7), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = less(%135, %136) /* ty=Tensor[(12, 6, 7), bool] */;
  (%137,)
}

def @func_5363() -> (Tensor[(13, 5, 16), uint64], Tensor[(13, 5, 16), float32], Tensor[(189), float64]) {
  %138 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %139 = @func_3502() /* ty=(Tensor[(189), uint64],) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(189), float32] */;
  %142 = acosh(%141) /* ty=Tensor[(189), float32] */;
  %143 = cast(%140, dtype="float64") /* ty=Tensor[(189), float64] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(1), int32] */;
  %145 = cast(%142, dtype="float64") /* ty=Tensor[(189), float64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), float64] */;
  %147 = %138.3;
  %148 = @func_3634() /* ty=Tensor[(13, 5, 16), float32] */;
  %149 = subtract(%145, %146) /* ty=Tensor[(189), float64] */;
  (%147, %148, %149)
}

def @func_5504(%var_5484: Tensor[(5, 16, 10), float64], %var_5495: Tensor[(144, 1), float32]) -> (Tensor[(5, 16, 10), float64], Tensor[(1, 16, 9), float32], Tensor[(144, 1), float32], Tensor[(110, 1), uint32], Tensor[(12, 14, 3), int8], Tensor[(504), float64]) {
  %150 = cast(%var_5484, dtype="float64") /* ty=Tensor[(5, 16, 10), float64] */;
  %151 = cast(%var_5495, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(110, 1), uint32] */, dtype="uint32") /* ty=Tensor[(110, 1), uint32] */;
  %153 = reshape(%151, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %154 = reshape(%152, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %155 = @func_811(%153, %154) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %157 = reshape(%156, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
  %158 = @func_2588(%157) /* ty=(Tensor[(12, 14, 3), int8],) */;
  %159 = sigmoid(%150) /* ty=Tensor[(5, 16, 10), float64] */;
  %160 = %155.0;
  %161 = %158.0;
  (%159, %160, %var_5495, meta[relay.Constant][11] /* ty=Tensor[(110, 1), uint32] */, %161, meta[relay.Constant][12] /* ty=Tensor[(504), float64] */)
}

def @func_1063(%var_1032: Tensor[(13, 5, 16), float64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  %162 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %164 = rsqrt(%163) /* ty=Tensor[(13, 5, 16), float64] */;
  %165 = cast(%var_1032, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = less_equal(%167, %168) /* ty=Tensor[(13, 5, 16), bool] */;
  %170 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%169, %170)
}

def @func_2966(%var_2942: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %171 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %172 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %173 = cast(%var_2942, dtype="float32") /* ty=Tensor[(720), float32] */;
  %174 = reshape(%173, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %175 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
  %176 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %177 = %171.1;
  %178 = %172.1;
  %179 = @func_575(%174) /* ty=Tensor[(8, 6, 15), float32] */;
  %180 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %181 = %175.0;
  (%176, %177, %178, %179, %var_2942, %180, %181)
}

def @func_6253(%var_6229: Tensor[(30), int16], %var_6230: Tensor[(120), int16], %var_6231: Tensor[(180), int16], %var_6246: Tensor[(78), float64], %var_6247: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 63), uint64] */, dtype="uint64") /* ty=Tensor[(3, 63), uint64] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 63), uint64] */, dtype="uint64") /* ty=Tensor[(3, 63), uint64] */;
  %184 = reshape(%182, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %185 = reshape(%183, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %186 = @func_2139(%184, %185) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) */;
  %187 = @func_4593() /* ty=Tensor[(6, 6, 11), bool] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %189 = cos(%188) /* ty=Tensor[(6, 6, 11), float32] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %191 = cast(%var_6229, dtype="int16") /* ty=Tensor[(30), int16] */;
  %192 = cast(%var_6230, dtype="int16") /* ty=Tensor[(120), int16] */;
  %193 = cast(%var_6231, dtype="int16") /* ty=Tensor[(180), int16] */;
  %194 = reshape(%191, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), int16] */;
  %195 = reshape(%192, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int16] */;
  %196 = reshape(%193, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), int16] */;
  %197 = @func_3031(%194, %195, %196) /* ty=(Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) */;
  %198 = cast(%189, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %199 = cast(%var_6246, dtype="float64") /* ty=Tensor[(78), float64] */;
  %200 = cast(%var_6247, dtype="float32") /* ty=Tensor[(720), float32] */;
  %201 = reshape(%199, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
  %202 = reshape(%200, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %203 = @func_3257(%201, %202) /* ty=(Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %204 = %186.1;
  %205 = exp(%190) /* ty=Tensor[(6, 6, 11), float32] */;
  %206 = %197.1;
  %207 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
  %208 = log(%198) /* ty=Tensor[(6, 6, 11), float32] */;
  %209 = %203.0;
  (%204, meta[relay.Constant][13] /* ty=Tensor[(3, 63), uint64] */, %205, %206, %var_6229, %var_6230, %var_6231, %207, %208, %209, %var_6246, %var_6247)
}

def @func_6522() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) {
  %210 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %211 = %210.2;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %213 = reshape(%212, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %214 = @func_1063(%213) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %215 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
  %216 = %215.2;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %218 = sigmoid(%217) /* ty=Tensor[(40, 8), float32] */;
  %219 = cast(meta[relay.Constant][14] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(2), int32] */;
  %221 = cast(%218, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %223 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %224 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
  %225 = %214.1;
  %226 = floor_divide(%221, %222) /* ty=Tensor[(40, 8), float32] */;
  %227 = %223.0;
  %228 = %224.2;
  (%211, %225, %226, %227, %228)
}

def @func_2720() -> (uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) {
  %229 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %230 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 4), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %231 = reshape(%229, newshape=[]) /* ty=uint64 */;
  %232 = reshape(%230, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %233 = @func_1263(%231, %232) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %234 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %235 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %236 = cast(%235, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %237 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%234, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %240 = %233.1;
  %241 = multiply(%238, %239) /* ty=Tensor[(13, 5, 16), uint64] */;
  (%240, meta[relay.Constant][15] /* ty=uint64 */, meta[relay.Constant][16] /* ty=Tensor[(9, 4), uint64] */, %241)
}

def @main(%var_8150: Tensor[(1, 208), bool]) -> (Tensor[(13, 5, 16), float32], Tensor[(720), float32], Tensor[(36), uint64], Tensor[(6, 6, 208), bool], Tensor[(16, 11, 11), float64], Tensor[(6, 6, 1), float32]) {
  %242 = cast(meta[relay.Constant][17] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %243 = cast(%var_8150, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %244 = reshape(%242, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %245 = reshape(%243, newshape=[2, 104]) /* ty=Tensor[(2, 104), bool] */;
  %246 = @func_7333(%244, %245) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) */;
  %247 = %246.3;
  %248 = cast(%var_8150, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %249 = cast(%247, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
  %250 = @func_5298() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %253 = cast(%247, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
  %254 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %255 = @func_4744() /* ty=Tensor[(720), float32] */;
  %256 = less(%248, %249) /* ty=Tensor[(6, 6, 208), bool] */;
  %257 = log10(%252) /* ty=Tensor[(16, 11, 11), float64] */;
  %258 = exp(%253) /* ty=Tensor[(6, 6, 1), float32] */;
  (%254, %255, meta[relay.Constant][17] /* ty=Tensor[(36), uint64] */, %256, %257, %258)
}

def @func_2031() -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
  %259 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %260 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
  %262 = %259.2;
  %263 = log10(%261) /* ty=Tensor[(13, 5, 16), float32] */;
  (%262, %263)
}

def @func_3031(%var_2999: Tensor[(15, 1, 2), int16], %var_3000: Tensor[(15, 4, 2), int16], %var_3018: Tensor[(15, 6, 2), int16]) -> (Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) {
  %264 = cast(%var_2999, dtype="int16") /* ty=Tensor[(15, 1, 2), int16] */;
  %265 = cast(%var_3000, dtype="int16") /* ty=Tensor[(15, 4, 2), int16] */;
  %266 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(15, 1, 2), uint16] */;
  %267 = cast(%var_3018, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %269 = reshape(%268, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %270 = @func_1063(%269) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %271 = left_shift(%264, %265) /* ty=Tensor[(15, 4, 2), int16] */;
  %272 = bitwise_and(%266, %267) /* ty=Tensor[(15, 6, 2), uint16] */;
  %273 = %270.0;
  (%271, %272, %273, meta[relay.Constant][18] /* ty=Tensor[(1040), float64] */)
}

def @func_811(%var_792: Tensor[(1, 16, 9), float32], %var_809: Tensor[(22, 5), uint32]) -> (Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) {
  %274 = cast(%var_792, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
  %275 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %276 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %277 = cast(%var_809, dtype="uint32") /* ty=Tensor[(22, 5), uint32] */;
  %278 = reshape(%276, newshape=[]) /* ty=uint32 */;
  %279 = reshape(%277, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), uint32] */;
  %280 = @func_71(%278, %279) /* ty=(Tensor[(1, 10, 11), uint32],) */;
  %281 = tan(%274) /* ty=Tensor[(1, 16, 9), float32] */;
  %282 = %275.0;
  %283 = %280.0;
  (%281, %282, %283, meta[relay.Constant][19] /* ty=uint32 */, %var_809)
}

def @func_2842() -> Tensor[(13, 5, 16), float32] {
  @func_818() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_5923() -> (Tensor[(11, 12, ?), int8],) {
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %285 = log10(%284) /* ty=Tensor[(11, 12, 1), float32] */;
  %286 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 12, 1), float32] */, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %290 = minimum(%288, %289) /* ty=Tensor[(11, 12, ?), int8] */;
  (%290,)
}

def @func_3787() -> Tensor[(14, 6, 8), bool] {
  %291 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 6, 8), int8] */, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %292 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 6, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 6, 8), int8] */, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%293, %294) /* ty=Tensor[(14, 6, 8), bool] */
}

def @func_4234() -> Tensor[(9, 4), uint64] {
  %295 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %295.2
}

def @func_5404(%var_5389: Tensor[(1040), bool], %var_5396: Tensor[(7, 9, 3), float64]) -> (Tensor[(6, 6, 11), bool], Tensor[(1040), bool], Tensor[(7, 9, 3), uint64]) {
  %296 = cast(%var_5389, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %297 = reshape(%296, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %298 = @func_1361(%297) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %299 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %300 = %299.3;
  %301 = cast(%var_5396, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %305 = %298.3;
  %306 = bitwise_and(%303, %304) /* ty=Tensor[(7, 9, 3), uint64] */;
  (%305, %var_5389, %306)
}

def @func_6891(%var_6861: Tensor[(7, 9, 3), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(16, 8, 4), float64], Tensor[(512), int32], Tensor[(7, 9, 3), float32], Tensor[(6, 6, 1), float32], Tensor[(9, 4), uint64], Tensor[(7, 9, 3), float32], Tensor[(13, 13, 6), float32], Tensor[(1014), int16]) {
  %307 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %308 = %307.3;
  %309 = cast(%308, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %310 = reshape(%309, newshape=[1, 189]) /* ty=Tensor[(1, 189), uint64] */;
  %311 = @func_4337(%310) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(512), int32] */, dtype="int32") /* ty=Tensor[(512), int32] */;
  %313 = reshape(%312, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), int32] */;
  %314 = @func_4453(%313) /* ty=(Tensor[(16, 8, 4), float64],) */;
  %315 = cast(%308, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %316 = asinh(%315) /* ty=Tensor[(7, 9, 3), float32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %318 = exp(%317) /* ty=Tensor[(7, 9, 3), float32] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %320 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
  %321 = cast(%var_6861, dtype="bool") /* ty=Tensor[(7, 9, 3), bool] */;
  %322 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%318, dtype="bool") /* ty=Tensor[(7, 9, 3), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = not_equal(%323, %324) /* ty=Tensor[(7, 9, 3), bool] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %327 = cast(meta[relay.Constant][24] /* ty=Tensor[(1014), int16] */, dtype="int16") /* ty=Tensor[(1014), int16] */;
  %328 = reshape(%327, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), int16] */;
  %329 = @func_5144(%328) /* ty=(Tensor[(13, 13, 6), float32],) */;
  %330 = %311.0;
  %331 = %314.0;
  %332 = log10(%319) /* ty=Tensor[(7, 9, 3), float32] */;
  %333 = %320.0;
  %334 = @func_4234() /* ty=Tensor[(9, 4), uint64] */;
  %335 = sin(%326) /* ty=Tensor[(7, 9, 3), float32] */;
  %336 = %329.0;
  (%330, %331, meta[relay.Constant][23] /* ty=Tensor[(512), int32] */, %332, %333, %334, %335, %336, meta[relay.Constant][24] /* ty=Tensor[(1014), int16] */)
}

def @func_575(%var_568: Tensor[(8, 6, 15), float32]) -> Tensor[(8, 6, 15), float32] {
  %337 = cast(%var_568, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  cosh(%337) /* ty=Tensor[(8, 6, 15), float32] */
}

def @func_3303() -> (Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(396), float64]) {
  %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %339 = reshape(%338, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %340 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %341 = %340.2;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(396), float32] */;
  %343 = rsqrt(%342) /* ty=Tensor[(396), float32] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(396), float64] */;
  %345 = @func_575(%339) /* ty=Tensor[(8, 6, 15), float32] */;
  %346 = atanh(%344) /* ty=Tensor[(396), float64] */;
  (%345, meta[relay.Constant][25] /* ty=Tensor[(720), float32] */, %346)
}

def @func_2206(%var_2182: Tensor[(8, 2, 13), bool]) -> Tensor[(8, 2, 13), float64] {
  %347 = cast(%var_2182, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %348 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 2, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 2, 13), bool] */, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = logical_and(%349, %350) /* ty=Tensor[(8, 2, 13), bool] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(8, 2, 13), float64] */;
  sigmoid(%352) /* ty=Tensor[(8, 2, 13), float64] */
}

def @func_5821(%var_5736: Tensor[(504, 1), float64], %var_5764: Tensor[(504, 13), int32], %var_5792: Tensor[(12, 14, 3), int8]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32], Tensor[(504, 13), bool], Tensor[(13, 5, 16), bool], Tensor[(30), int16], Tensor[(60, 2), int16], Tensor[(180), int16], Tensor[(12, 14, 3), float32], Tensor[(504, ?), bool]) {
  %353 = cast(meta[relay.Constant][27] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %354 = cast(meta[relay.Constant][27] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %355 = reshape(%353, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %356 = reshape(%354, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %357 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
  %358 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %359 = cast(%var_5736, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %360 = reshape(%359, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
  %361 = @func_2588(%360) /* ty=(Tensor[(12, 14, 3), int8],) */;
  %362 = %361.0;
  %363 = cast(%362, dtype="int32") /* ty=Tensor[(12, 14, 3), int32] */;
  %364 = shape_of(%var_5736, dtype="int32") /* ty=Tensor[(2), int32] */;
  %365 = cast(%var_5736, dtype="int32") /* ty=Tensor[(504, 1), int32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %367 = maximum(%365, %366) /* ty=Tensor[(504, ?), int32] */;
  %368 = cast(%367, dtype="bool") /* ty=Tensor[(504, ?), bool] */;
  %369 = cast(%var_5764, dtype="bool") /* ty=Tensor[(504, 13), bool] */;
  %370 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %371 = cast(meta[relay.Constant][29] /* ty=Tensor[(60, 2), int16] */, dtype="int16") /* ty=Tensor[(60, 2), int16] */;
  %372 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %373 = reshape(%370, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), int16] */;
  %374 = reshape(%371, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int16] */;
  %375 = reshape(%372, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), int16] */;
  %376 = @func_3031(%373, %374, %375) /* ty=(Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) */;
  %377 = cast(%var_5792, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
  %378 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%362, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = cast(%367, dtype="bool") /* ty=Tensor[(504, ?), bool] */;
  %382 = shape_of(%var_5736, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%var_5736, dtype="bool") /* ty=Tensor[(504, 1), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %385 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
  %386 = @func_915(%355, %356) /* ty=Tensor[(6, 6, 11), bool] */;
  %387 = %357.0;
  %388 = %358.0;
  %389 = equal(%368, %369) /* ty=Tensor[(504, 13), bool] */;
  %390 = %376.2;
  %391 = floor_divide(%379, %380) /* ty=Tensor[(12, 14, 3), float32] */;
  %392 = less(%383, %384) /* ty=Tensor[(504, ?), bool] */;
  (%385, %386, meta[relay.Constant][27] /* ty=Tensor[(396), int64] */, %387, %388, %389, %390, meta[relay.Constant][28] /* ty=Tensor[(30), int16] */, meta[relay.Constant][29] /* ty=Tensor[(60, 2), int16] */, meta[relay.Constant][30] /* ty=Tensor[(180), int16] */, %391, %392)
}

def @func_1558() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) {
  %393 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %396 = reshape(%395, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %397 = @func_1361(%396) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %398 = %397.5;
  %399 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%394, %398, %399)
}

def @func_3758() -> (uint64,) {
  %400 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %401 = %400.1;
  (%401,)
}

def @func_4701(%var_4643: Tensor[(1, 1, 11), float32], %var_4684: Tensor[(1, 336), int32], %var_4685: Tensor[(8, 130), bool]) -> (Tensor[(396), int64], Tensor[(189), uint64], Tensor[(?, ?, 11), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 336), int32], Tensor[(8, 130), bool]) {
  %402 = cast(meta[relay.Constant][31] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %403 = cast(meta[relay.Constant][31] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %404 = reshape(%402, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %405 = reshape(%403, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %406 = @func_1857(%404, %405) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %407 = cast(%var_4643, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
  %408 = sin(%407) /* ty=Tensor[(1, 1, 11), float32] */;
  %409 = cast(%var_4643, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %413 = cast(%var_4684, dtype="int32") /* ty=Tensor[(1, 336), int32] */;
  %414 = cast(%var_4685, dtype="bool") /* ty=Tensor[(8, 130), bool] */;
  %415 = reshape(%413, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), int32] */;
  %416 = reshape(%414, newshape=[1040]) /* ty=Tensor[(1040), bool] */;
  %417 = @func_3112(%415, %416) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) */;
  %418 = %406.2;
  %419 = floor_divide(%411, %412) /* ty=Tensor[(?, ?, 11), float64] */;
  %420 = %417.0;
  (%418, meta[relay.Constant][31] /* ty=Tensor[(189), uint64] */, %419, %420, %var_4684, %var_4685)
}

def @func_6081(%var_6040: uint64) -> (Tensor[(9, 4), uint64], uint64, Tensor[(66, 6), int64], Tensor[(13, 5, 16), int64], Tensor[(13, 5, 16), float32], uint64, Tensor[(6, 6, 1), float64], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  %421 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %422 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %423 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
  %424 = cast(%423, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %425 = cast(meta[relay.Constant][32] /* ty=Tensor[(66, 6), int64] */, dtype="int64") /* ty=Tensor[(66, 6), int64] */;
  %426 = reshape(%422, newshape=[]) /* ty=uint64 */;
  %427 = reshape(%424, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %428 = reshape(%425, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %429 = @func_972(%426, %427, %428) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %430 = %429.2;
  %431 = cast(%430, dtype="uint64") /* ty=Tensor[(6, 6, 1), uint64] */;
  %432 = reshape(%421, newshape=[]) /* ty=uint64 */;
  %433 = reshape(%431, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %434 = @func_1263(%432, %433) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %435 = %434.4;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %437 = reshape(%436, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %438 = @func_1063(%437) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %439 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %440 = cast(meta[relay.Constant][32] /* ty=Tensor[(66, 6), int64] */, dtype="int64") /* ty=Tensor[(66, 6), int64] */;
  %441 = reshape(%439, newshape=[]) /* ty=uint64 */;
  %442 = reshape(%440, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %443 = @func_5083(%441, %442) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) */;
  %444 = cast(%430, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %445 = atan(%444) /* ty=Tensor[(6, 6, 1), float64] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %447 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %448 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
  %449 = %438.1;
  %450 = %443.2;
  %451 = log10(%446) /* ty=Tensor[(6, 6, 1), float64] */;
  %452 = %447.0;
  %453 = %448.2;
  (%423, %var_6040, meta[relay.Constant][32] /* ty=Tensor[(66, 6), int64] */, %435, %449, %450, %451, %452, %453)
}

def @func_3502() -> (Tensor[(189), uint64],) {
  %454 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %455 = %454.2;
  (%455,)
}

def @func_3471() -> (uint64,) {
  %456 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %457 = %456.0;
  (%457,)
}

def @func_1407() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) {
  %458 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %460 = reshape(%459, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %461 = @func_1063(%460) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %462 = %461.0;
  (%458, %462)
}

def @func_4744() -> Tensor[(720), float32] {
  %463 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %463.2
}

def @func_3888(%var_3881: Tensor[(16, 2, 10), float32], %var_3882: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float32] {
  %464 = cast(%var_3882, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %465 = shape_of(%var_3881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_3881, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%466, %467) /* ty=Tensor[(16, 2, 10), float32] */
}

def @func_4217() -> (uint64,) {
  %468 = @func_3758() /* ty=(uint64,) */;
  %469 = %468.0;
  (%469,)
}

def @func_818() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6342() -> (Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) {
  %470 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %471 = %470.1;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %473 = cast(meta[relay.Constant][33] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %474 = cast(meta[relay.Constant][33] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %475 = reshape(%473, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %476 = reshape(%474, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %477 = @func_5434() /* ty=(Tensor[(13, 5, 16), bool],) */;
  %478 = asin(%472) /* ty=Tensor[(8, 6, 15), float32] */;
  %479 = @func_3888(%475, %476) /* ty=Tensor[(16, 2, 10), float32] */;
  %480 = %477.0;
  (%478, %479, meta[relay.Constant][33] /* ty=Tensor[(40, 8), float32] */, %480)
}

def @func_7365() -> Tensor[(13, 5, 16), float32] {
  %481 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %481.1
}

def @func_6649(%var_6612: int16, %var_6613: Tensor[(1, 15, 10), int16], %var_6633: Tensor[(720, 1), float32]) -> (Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) {
  %482 = cast(%var_6612, dtype="bool") /* ty=bool */;
  %483 = cast(%var_6613, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
  %484 = cast(%var_6633, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %485 = reshape(%484, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %486 = @func_4428(%485) /* ty=(Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) */;
  %487 = greater(%482, %483) /* ty=Tensor[(1, 15, 10), bool] */;
  %488 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
  %489 = %486.1;
  (%487, %488, %489, %var_6633)
}

def @func_1742(%var_1723: Tensor[(15, 5, 8), uint64], %var_1724: Tensor[(15, 5, 8), uint64]) -> (Tensor[(15, 5, 8), bool], Tensor[(13, 5, 16), float32]) {
  %490 = cast(%var_1724, dtype="bool") /* ty=Tensor[(15, 5, 8), bool] */;
  %491 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_1723, dtype="bool") /* ty=Tensor[(15, 5, 8), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = greater(%492, %493) /* ty=Tensor[(15, 5, 8), bool] */;
  %495 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%494, %495)
}

def @func_6669() -> (Tensor[(8, 6, 15), float32],) {
  %496 = @func_3552() /* ty=(Tensor[(8, 6, 15), float32],) */;
  %497 = %496.0;
  (%497,)
}

def @func_2370(%var_2348: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) {
  %498 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %499 = %498.0;
  %500 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
  %505 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %510 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%504, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %513 = not_equal(%502, %503) /* ty=Tensor[(13, 5, 16), bool] */;
  %514 = logical_or(%507, %508) /* ty=Tensor[(13, 5, 16), bool] */;
  %515 = logical_and(%511, %512) /* ty=Tensor[(13, 5, 16), bool] */;
  (%513, %514, %515)
}

def @func_3634() -> Tensor[(13, 5, 16), float32] {
  %516 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
  %516.0
}

def @func_1946() -> Tensor[(13, 5, 16), float32] {
  %517 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %517.0
}

def @func_3841() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %518 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
  %521 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
  %522 = log2(%520) /* ty=Tensor[(13, 5, 16), float32] */;
  (%521, %522)
}

def @func_6157() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %523 = @func_5593() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %524 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %525 = %523.3;
  %526 = %524.0;
  (%525, %526)
}

def @func_1695() -> (Tensor[(13, 5, 16), float32],) {
  %527 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %528 = %527.0;
  (%528,)
}

def @func_1361(%var_1311: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %529 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %530 = %529.0;
  %531 = cast(%var_1311, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %535 = minimum(%533, %534) /* ty=Tensor[(13, 5, 16), uint64] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %537 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %538 = cast(meta[relay.Constant][34] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %539 = cast(meta[relay.Constant][34] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %540 = reshape(%538, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %541 = reshape(%539, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %542 = cast(meta[relay.Constant][35] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %543 = reshape(%542, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %544 = cosh(%536) /* ty=Tensor[(13, 5, 16), float64] */;
  %545 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %546 = %537.1;
  %547 = @func_915(%540, %541) /* ty=Tensor[(6, 6, 11), bool] */;
  %548 = @func_575(%543) /* ty=Tensor[(8, 6, 15), float32] */;
  (%544, %545, %546, %547, meta[relay.Constant][34] /* ty=Tensor[(396), int64] */, %548, meta[relay.Constant][35] /* ty=Tensor[(720), float32] */)
}

def @func_1639() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) {
  %549 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 66), int64] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %550 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 66), int64] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %551 = reshape(%549, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %552 = reshape(%550, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %553 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
  %554 = @func_915(%551, %552) /* ty=Tensor[(6, 6, 11), bool] */;
  (%553, %554, meta[relay.Constant][36] /* ty=Tensor[(6, 66), int64] */)
}

def @func_2548(%var_2543: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) {
  %555 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %556 = cast(%var_2543, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %557 = reshape(%556, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %558 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
  %559 = %555.0;
  %560 = @func_575(%557) /* ty=Tensor[(8, 6, 15), float32] */;
  (%558, %559, %560, %var_2543)
}

def @func_735() -> (Tensor[(13, 5, 16), float32],) {
  %561 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
  %562 = log(%561) /* ty=Tensor[(13, 5, 16), float32] */;
  (%562,)
}

def @func_2997() -> (Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
  %563 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %564 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %565 = cast(meta[relay.Constant][39] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %566 = cast(meta[relay.Constant][40] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %567 = reshape(%564, newshape=[]) /* ty=uint64 */;
  %568 = reshape(%565, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %569 = reshape(%566, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %570 = @func_972(%567, %568, %569) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %571 = %563.3;
  %572 = %570.2;
  (%571, %572, meta[relay.Constant][38] /* ty=uint64 */, meta[relay.Constant][39] /* ty=Tensor[(36), uint64] */, meta[relay.Constant][40] /* ty=Tensor[(396), int64] */)
}

def @func_1458() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) {
  %573 = cast(meta[relay.Constant][41] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %574 = cast(meta[relay.Constant][41] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %575 = reshape(%573, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %576 = reshape(%574, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %577 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
  %578 = @func_915(%575, %576) /* ty=Tensor[(6, 6, 11), bool] */;
  (%577, %578, meta[relay.Constant][41] /* ty=Tensor[(396), int64] */)
}

def @func_3988(%var_3984: uint64, %var_3986: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
  %579 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %580 = cast(%var_3984, dtype="uint64") /* ty=uint64 */;
  %581 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %582 = cast(%var_3986, dtype="int64") /* ty=Tensor[(396), int64] */;
  %583 = reshape(%580, newshape=[]) /* ty=uint64 */;
  %584 = reshape(%581, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %585 = reshape(%582, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %586 = @func_972(%583, %584, %585) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %587 = %579.0;
  %588 = %586.0;
  (%587, %588, %var_3984, meta[relay.Constant][42] /* ty=Tensor[(36), uint64] */, %var_3986)
}

def @func_3552() -> (Tensor[(8, 6, 15), float32],) {
  %589 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %590 = %589.1;
  (%590,)
}

def @func_5593() -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %591 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
  %592 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %593 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %594 = @func_5266() /* ty=Tensor[(396), int64] */;
  %595 = %591.1;
  %596 = %592.2;
  (%593, %594, %595, %596)
}

def @func_71(%var_55: uint32, %var_56: Tensor[(1, 10, 11), uint32]) -> (Tensor[(1, 10, 11), uint32],) {
  %597 = cast(%var_55, dtype="uint32") /* ty=uint32 */;
  %598 = cast(%var_56, dtype="uint32") /* ty=Tensor[(1, 10, 11), uint32] */;
  %599 = left_shift(%597, %598) /* ty=Tensor[(1, 10, 11), uint32] */;
  (%599,)
}

def @func_5939(%var_5937: Tensor[(208), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) {
  %600 = @func_5434() /* ty=(Tensor[(13, 5, 16), bool],) */;
  %601 = cast(%var_5937, dtype="bool") /* ty=Tensor[(208), bool] */;
  %602 = reshape(%601, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), bool] */;
  %603 = %600.0;
  %604 = @func_2206(%602) /* ty=Tensor[(8, 2, 13), float64] */;
  (%603, %604, %var_5937)
}

def @func_1809(%var_1803: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32],) {
  %605 = cast(%var_1803, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %606 = cos(%605) /* ty=Tensor[(10, 6, 4), float32] */;
  (%606,)
}

def @func_3584(%var_3575: Tensor[(12, 8, 7), float32]) -> (Tensor[(12, 8, 7), float32],) {
  %607 = cast(%var_3575, dtype="float32") /* ty=Tensor[(12, 8, 7), float32] */;
  %608 = sigmoid(%607) /* ty=Tensor[(12, 8, 7), float32] */;
  (%608,)
}

def @func_4556() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %609 = cast(meta[relay.Constant][43] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %610 = reshape(%609, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %611 = @func_2548(%610) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
  %612 = @func_3634() /* ty=Tensor[(13, 5, 16), float32] */;
  %613 = %611.2;
  (%612, %613, meta[relay.Constant][43] /* ty=Tensor[(720), float32] */)
}

def @func_5298() -> (Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) {
  %614 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %615 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %616 = tan(%614) /* ty=Tensor[(16, 11, 11), float64] */;
  %617 = %615.0;
  (%616, %617)
}

def @func_6923() -> (Tensor[(13, 5, 16), float32], uint64) {
  %618 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %619 = @func_4217() /* ty=(uint64,) */;
  %620 = %618.0;
  %621 = %619.0;
  (%620, %621)
}

def @func_5722() -> (Tensor[(720), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32]) {
  %622 = cast(meta[relay.Constant][45] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %623 = cast(meta[relay.Constant][45] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %624 = reshape(%622, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %625 = reshape(%623, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %626 = @func_4744() /* ty=Tensor[(720), float32] */;
  %627 = @func_3888(%624, %625) /* ty=Tensor[(16, 2, 10), float32] */;
  (%626, %627, meta[relay.Constant][45] /* ty=Tensor[(320), float32] */)
}

def @func_7211(%var_7191: Tensor[(1210), uint64], %var_7197: Tensor[(144), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(9, 4), uint64], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(1210), uint64], Tensor[(13, 5, 16), float32], Tensor[(144), float32], Tensor[(110), uint32]) {
  %628 = @func_6157() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %629 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %630 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %631 = cast(%var_7191, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %632 = cast(%var_7191, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %633 = reshape(%631, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %634 = reshape(%632, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %635 = @func_1918(%633, %634) /* ty=(Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) */;
  %636 = cast(%var_7197, dtype="float32") /* ty=Tensor[(144), float32] */;
  %637 = cast(meta[relay.Constant][46] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %638 = reshape(%636, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %639 = reshape(%637, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %640 = @func_811(%638, %639) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
  %641 = %628.1;
  %642 = %629.2;
  %643 = %630.0;
  %644 = %635.3;
  %645 = %640.1;
  (%641, %642, %643, %644, %var_7191, %645, %var_7197, meta[relay.Constant][46] /* ty=Tensor[(110), uint32] */)
}

def @func_5144(%var_5126: Tensor[(13, 13, 6), int16]) -> (Tensor[(13, 13, 6), float32],) {
  %646 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 13, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 13, 6), int16] */;
  %647 = shape_of(%var_5126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_5126, dtype="int16") /* ty=Tensor[(13, 13, 6), int16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %650 = logical_xor(%648, %649) /* ty=Tensor[(13, 13, 6), int16] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(13, 13, 6), float32] */;
  %652 = asin(%651) /* ty=Tensor[(13, 13, 6), float32] */;
  (%652,)
}

def @func_788() -> Tensor[(13, 5, 16), float32] {
  %653 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %653.0
}

def @func_5083(%var_5078: uint64, %var_5080: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) {
  %654 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %655 = cast(%var_5078, dtype="uint64") /* ty=uint64 */;
  %656 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 4), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %657 = cast(%var_5080, dtype="int64") /* ty=Tensor[(396), int64] */;
  %658 = reshape(%655, newshape=[]) /* ty=uint64 */;
  %659 = reshape(%656, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %660 = reshape(%657, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %661 = @func_972(%658, %659, %660) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %662 = %654.0;
  %663 = %661.3;
  (%662, %663, %var_5078, meta[relay.Constant][48] /* ty=Tensor[(9, 4), uint64] */, %var_5080)
}

def @func_1918(%var_1869: Tensor[(11, 11, 10), uint64], %var_1911: Tensor[(11, 11, 10), uint64]) -> (Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) {
  %664 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="uint64") /* ty=Tensor[(11, 11, 10), uint64] */;
  %665 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_1869, dtype="uint64") /* ty=Tensor[(11, 11, 10), uint64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %668 = cast(%var_1869, dtype="bool") /* ty=Tensor[(11, 11, 10), bool] */;
  %669 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="bool") /* ty=Tensor[(11, 11, 10), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %673 = %672.1;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %675 = cast(meta[relay.Constant][50] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %676 = cast(meta[relay.Constant][50] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %677 = reshape(%675, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %678 = reshape(%676, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %679 = @func_1857(%677, %678) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %680 = cast(%var_1911, dtype="float64") /* ty=Tensor[(11, 11, 10), float64] */;
  %681 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%var_1869, dtype="float64") /* ty=Tensor[(11, 11, 10), float64] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %684 = logical_xor(%666, %667) /* ty=Tensor[(11, 11, 10), uint64] */;
  %685 = greater(%670, %671) /* ty=Tensor[(11, 11, 10), bool] */;
  %686 = acos(%674) /* ty=Tensor[(8, 6, 15), float64] */;
  %687 = %679.1;
  %688 = power(%682, %683) /* ty=Tensor[(11, 11, 10), float64] */;
  (%684, %685, %686, %687, meta[relay.Constant][50] /* ty=Tensor[(189), uint64] */, %688)
}

def @func_3855() -> (Tensor[(6, 6, 1), float32],) {
  %689 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
  %690 = %689.1;
  (%690,)
}

def @func_4829() -> Tensor[(9, 4), uint64] {
  @func_4234() /* ty=Tensor[(9, 4), uint64] */
}

def @func_4079(%var_4032: Tensor[(1, 6, 10), float32]) -> (Tensor[(?, 6, 10), uint32], Tensor[(13, 5, 16), float32], Tensor[(1, 6, 10), float64]) {
  %691 = cast(%var_4032, dtype="float32") /* ty=Tensor[(1, 6, 10), float32] */;
  %692 = rsqrt(%691) /* ty=Tensor[(1, 6, 10), float32] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(1, 6, 10), float64] */;
  %694 = cosh(%693) /* ty=Tensor[(1, 6, 10), float64] */;
  %695 = cast(%692, dtype="uint32") /* ty=Tensor[(1, 6, 10), uint32] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="uint32") /* ty=Tensor[(1, 6, 10), uint32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %699 = cast(%694, dtype="float64") /* ty=Tensor[(1, 6, 10), float64] */;
  %700 = right_shift(%697, %698) /* ty=Tensor[(?, 6, 10), uint32] */;
  %701 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %702 = sigmoid(%699) /* ty=Tensor[(1, 6, 10), float64] */;
  (%700, %701, %702)
}

def @func_4337(%var_4326: Tensor[(1, 189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) {
  %703 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %704 = cast(%var_4326, dtype="uint64") /* ty=Tensor[(1, 189), uint64] */;
  %705 = cast(%var_4326, dtype="uint64") /* ty=Tensor[(1, 189), uint64] */;
  %706 = reshape(%704, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %707 = reshape(%705, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %708 = @func_2139(%706, %707) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) */;
  %709 = %708.2;
  %710 = cast(%709, dtype="bool") /* ty=Tensor[(189), bool] */;
  %711 = shape_of(%var_4326, dtype="int32") /* ty=Tensor[(2), int32] */;
  %712 = cast(%var_4326, dtype="bool") /* ty=Tensor[(1, 189), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %714 = %703.0;
  %715 = greater(%712, %713) /* ty=Tensor[(?, 189), bool] */;
  (%714, %715)
}

def @func_4593() -> Tensor[(6, 6, 11), bool] {
  %716 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
  %716.1
}

def @func_3461() -> Tensor[(13, 5, 16), float32] {
  @func_1946() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_5434() -> (Tensor[(13, 5, 16), bool],) {
  %717 = @func_1407() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) */;
  %718 = %717.1;
  (%718,)
}

def @func_6955() -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64]) {
  %719 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %720 = %719.0;
  %721 = @func_5266() /* ty=Tensor[(396), int64] */;
  (%720, %721)
}

def @func_7476() -> (Tensor[(6, 6, 1), float32],) {
  %722 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
  %723 = %722.0;
  (%723,)
}

def @func_7062() -> (Tensor[(8, 6, 15), float32], Tensor[(9, 4), uint64], int16, Tensor[(150), int16]) {
  %724 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %725 = cast(meta[relay.Constant][51] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %726 = cast(meta[relay.Constant][52] /* ty=Tensor[(150), int16] */, dtype="int16") /* ty=Tensor[(150), int16] */;
  %727 = %724.1;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %729 = reshape(%725, newshape=[]) /* ty=int16 */;
  %730 = reshape(%726, newshape=[1, 15, 10]) /* ty=Tensor[(1, 15, 10), int16] */;
  %731 = reshape(%728, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %732 = @func_6649(%729, %730, %731) /* ty=(Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) */;
  %733 = %732.1;
  (%727, %733, meta[relay.Constant][51] /* ty=int16 */, meta[relay.Constant][52] /* ty=Tensor[(150), int16] */)
}

def @func_7523() -> Tensor[(14, 6, 8), bool] {
  @func_3787() /* ty=Tensor[(14, 6, 8), bool] */
}

def @func_4501() -> (uint64,) {
  %734 = @func_3471() /* ty=(uint64,) */;
  %735 = %734.0;
  (%735,)
}

def @func_8023() -> (Tensor[(40, 8), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32]) {
  %736 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
  %737 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
  %738 = %736.2;
  %739 = @func_3461() /* ty=Tensor[(13, 5, 16), float32] */;
  %740 = %737.2;
  (%738, %739, %740)
}

def @func_3226() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) {
  %741 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %742 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %743 = cast(meta[relay.Constant][53] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %744 = cast(meta[relay.Constant][53] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %745 = reshape(%743, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %746 = reshape(%744, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %747 = @func_1857(%745, %746) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(7, 9, 3), float64] */;
  %750 = cast(%748, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %751 = %741.2;
  %752 = %742.0;
  %753 = log2(%749) /* ty=Tensor[(7, 9, 3), float64] */;
  %754 = sinh(%750) /* ty=Tensor[(7, 9, 3), float32] */;
  (%751, %752, meta[relay.Constant][53] /* ty=Tensor[(189), uint64] */, %753, %754)
}

def @func_4453(%var_4446: Tensor[(16, 8, 4), int32]) -> (Tensor[(16, 8, 4), float64],) {
  %755 = cast(meta[relay.Constant][54] /* ty=Tensor[(16, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 4), int32] */;
  %756 = shape_of(%var_4446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_4446, dtype="int32") /* ty=Tensor[(16, 8, 4), int32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %759 = minimum(%757, %758) /* ty=Tensor[(16, 8, 4), int32] */;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %761 = asin(%760) /* ty=Tensor[(16, 8, 4), float64] */;
  (%761,)
}

def @func_5655() -> Tensor[(13, 5, 16), float32] {
  @func_3461() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_7931(%var_7901: Tensor[(8, 6, 15), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), bool], Tensor[(13, 5, 16), float32], Tensor[(22, 5), uint32], Tensor[(144), float32], Tensor[(110), uint32]) {
  %762 = @func_6157() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
  %765 = @func_6669() /* ty=(Tensor[(8, 6, 15), float32],) */;
  %766 = %765.0;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %768 = cast(%766, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %769 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %770 = cast(%var_7901, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %771 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%766, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %774 = logical_xor(%772, %773) /* ty=Tensor[(8, 6, 15), uint16] */;
  %775 = cast(meta[relay.Constant][55] /* ty=Tensor[(8, 6, 15), uint16] */, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %779 = @func_4189() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %780 = cast(meta[relay.Constant][56] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %781 = cast(meta[relay.Constant][57] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %782 = reshape(%780, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %783 = reshape(%781, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %784 = @func_811(%782, %783) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
  %785 = sin(%764) /* ty=Tensor[(13, 5, 16), float32] */;
  %786 = erf(%767) /* ty=Tensor[(8, 6, 15), float64] */;
  %787 = log2(%768) /* ty=Tensor[(8, 6, 15), float32] */;
  %788 = %769.1;
  %789 = equal(%777, %778) /* ty=Tensor[(8, 6, 15), bool] */;
  %790 = %779.0;
  %791 = %784.4;
  (%785, %786, %787, %788, %789, %790, %791, meta[relay.Constant][56] /* ty=Tensor[(144), float32] */, meta[relay.Constant][57] /* ty=Tensor[(110), uint32] */)
}

def @func_1857(%var_1836: Tensor[(7, 9, 3), uint64], %var_1837: Tensor[(7, 9, 3), uint64]) -> (Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
  %792 = cast(%var_1837, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %793 = shape_of(%var_1836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_1836, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %796 = cast(meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %797 = cast(meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %798 = reshape(%796, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %799 = reshape(%797, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %800 = subtract(%794, %795) /* ty=Tensor[(7, 9, 3), uint64] */;
  %801 = @func_915(%798, %799) /* ty=Tensor[(6, 6, 11), bool] */;
  %802 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%800, %801, meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, %802)
}

def @func_7037() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %803 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
  %804 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
  (%803, %804)
}

def @func_6750(%var_6744: Tensor[(5, 10, 2), float32]) -> (Tensor[(5, 10, 2), float32],) {
  %805 = cast(%var_6744, dtype="float32") /* ty=Tensor[(5, 10, 2), float32] */;
  %806 = cosh(%805) /* ty=Tensor[(5, 10, 2), float32] */;
  (%806,)
}

def @func_3733(%var_3669: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], Tensor[(6, 6, 720), int8], Tensor[(13, 5, 16), bool]) {
  %807 = cast(%var_3669, dtype="float32") /* ty=Tensor[(720), float32] */;
  %808 = reshape(%807, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %809 = @func_2966(%808) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %810 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
  %811 = %810.1;
  %812 = cast(%811, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %813 = atanh(%812) /* ty=Tensor[(6, 6, 1), float64] */;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
  %815 = sqrt(%814) /* ty=Tensor[(6, 6, 1), float32] */;
  %816 = cast(%815, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
  %817 = cast(%813, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
  %818 = cast(%var_3669, dtype="bool") /* ty=Tensor[(720), bool] */;
  %819 = logical_or(%817, %818) /* ty=Tensor[(6, 6, 720), bool] */;
  %820 = cast(%815, dtype="int8") /* ty=Tensor[(6, 6, 1), int8] */;
  %821 = cast(%819, dtype="int8") /* ty=Tensor[(6, 6, 720), int8] */;
  %822 = @func_1407() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) */;
  %823 = %809.6;
  %824 = rsqrt(%816) /* ty=Tensor[(6, 6, 1), float32] */;
  %825 = bitwise_or(%820, %821) /* ty=Tensor[(6, 6, 720), int8] */;
  %826 = %822.1;
  (%823, %824, %825, %826)
}

def @func_4985() -> uint64 {
  %827 = @func_4217() /* ty=(uint64,) */;
  %827.0
}

def @func_7116() -> uint64 {
  %828 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %828.0
}

def @func_3078(%var_3074: Tensor[(110), uint32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(110), uint32]) {
  %829 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %830 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %831 = cast(meta[relay.Constant][59] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %832 = cast(%var_3074, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %833 = reshape(%831, newshape=[]) /* ty=uint32 */;
  %834 = reshape(%832, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), uint32] */;
  %835 = @func_71(%833, %834) /* ty=(Tensor[(1, 10, 11), uint32],) */;
  %836 = %829.1;
  %837 = %830.1;
  %838 = %835.0;
  (%836, %837, %838, meta[relay.Constant][59] /* ty=uint32 */, %var_3074)
}

def @func_4428(%var_4410: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) {
  %839 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %840 = @func_3758() /* ty=(uint64,) */;
  %841 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %842 = cast(%841, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %843 = reshape(%842, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %844 = @func_2370(%843) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
  %845 = cast(%var_4410, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %846 = reshape(%845, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %847 = @func_2966(%846) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %848 = cast(meta[relay.Constant][60] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %849 = cast(meta[relay.Constant][61] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %850 = reshape(%848, newshape=[]) /* ty=uint64 */;
  %851 = reshape(%849, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %852 = @func_3988(%850, %851) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
  %853 = %852.3;
  %854 = cast(%853, dtype="float64") /* ty=Tensor[(36), float64] */;
  %855 = %839.0;
  %856 = %840.0;
  %857 = %844.0;
  %858 = %847.3;
  %859 = sigmoid(%854) /* ty=Tensor[(36), float64] */;
  (%855, meta[relay.Constant][60] /* ty=uint64 */, meta[relay.Constant][61] /* ty=Tensor[(396), int64] */, %856, %841, %857, %858, %var_4410, %859)
}

def @func_6409() -> (Tensor[(9, 4), uint64], Tensor[(396), int64], Tensor[(396), int64]) {
  %860 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
  %861 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %862 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
  %863 = %860.4;
  %864 = %861.2;
  (%862, %863, %864)
}

def @func_972(%var_948: uint64, %var_949: Tensor[(6, 6, 1), uint64], %var_955: Tensor[(396), int64]) -> (Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) {
  %865 = cast(%var_955, dtype="int64") /* ty=Tensor[(396), int64] */;
  %866 = cast(%var_955, dtype="int64") /* ty=Tensor[(396), int64] */;
  %867 = reshape(%865, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %868 = reshape(%866, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %869 = cast(%var_948, dtype="uint64") /* ty=uint64 */;
  %870 = cast(%var_949, dtype="uint64") /* ty=Tensor[(6, 6, 1), uint64] */;
  %871 = bitwise_and(%869, %870) /* ty=Tensor[(6, 6, 1), uint64] */;
  %872 = cast(%var_948, dtype="float32") /* ty=float32 */;
  %873 = cast(%871, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
  %874 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %875 = @func_915(%867, %868) /* ty=Tensor[(6, 6, 11), bool] */;
  %876 = multiply(%872, %873) /* ty=Tensor[(6, 6, 1), float32] */;
  %877 = %874.0;
  (%875, %var_955, %876, %877)
}

def @func_6808() -> (Tensor[(6, 6, 1), float32],) {
  %878 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
  %879 = %878.0;
  (%879,)
}

def @func_7594() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_2420(%var_2402: Tensor[(3, 15, 6), uint64], %var_2412: uint64) -> (Tensor[(3, 15, 6), bool], Tensor[(13, 5, 16), int64], uint64, Tensor[(1, 36), uint64]) {
  %880 = cast(%var_2402, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %881 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(3, 15, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = cast(%var_2412, dtype="uint64") /* ty=uint64 */;
  %885 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 36), uint64] */, dtype="uint64") /* ty=Tensor[(1, 36), uint64] */;
  %886 = reshape(%884, newshape=[]) /* ty=uint64 */;
  %887 = reshape(%885, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %888 = @func_1263(%886, %887) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %889 = greater_equal(%882, %883) /* ty=Tensor[(3, 15, 6), bool] */;
  %890 = %888.4;
  (%889, %890, %var_2412, meta[relay.Constant][63] /* ty=Tensor[(1, 36), uint64] */)
}

def @func_5266() -> Tensor[(396), int64] {
  %891 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %891.0
}

def @func_915(%var_900: Tensor[(6, 6, 11), int64], %var_901: Tensor[(6, 6, 11), int64]) -> Tensor[(6, 6, 11), bool] {
  %892 = cast(%var_901, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %893 = shape_of(%var_900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%var_900, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %896 = add(%894, %895) /* ty=Tensor[(6, 6, 11), int64] */;
  %897 = cast(%var_901, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
  %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%896, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%899, %900) /* ty=Tensor[(6, 6, 11), bool] */
}

def @func_2271() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3522(%var_3510: Tensor[(60, 12), float32]) -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(60, 12), float32], Tensor[(396), int64]) {
  %901 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %902 = cast(%var_3510, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %903 = reshape(%902, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %904 = @func_2548(%903) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
  %905 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %906 = %901.0;
  %907 = %904.0;
  %908 = %905.2;
  (%906, %907, %var_3510, %908)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2722() -> (uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) {
  @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */
}

def @func_3587(%var_3585: Tensor[(12, 8, 7), float32]) -> (Tensor[(12, 8, 7), float32],) {
  @func_3584(%var_3585) /* ty=(Tensor[(12, 8, 7), float32],) */
}

def @func_814(%var_812: Tensor[(1, 16, 9), float32], %var_813: Tensor[(22, 5), uint32]) -> (Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) {
  %10 = fn (%var_792: Tensor[(1, 16, 9), float32], %var_809: Tensor[(22, 5), uint32]) -> (Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) {
    %0 = cast(%var_792, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
    %1 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %2 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %3 = cast(%var_809, dtype="uint32") /* ty=Tensor[(22, 5), uint32] */;
    %4 = reshape(%2, newshape=[]) /* ty=uint32 */;
    %5 = reshape(%3, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), uint32] */;
    %6 = @func_71(%4, %5) /* ty=(Tensor[(1, 10, 11), uint32],) */;
    %7 = tan(%0) /* ty=Tensor[(1, 16, 9), float32] */;
    %8 = %1.0;
    %9 = %6.0;
    (%7, %8, %9, meta[relay.Constant][0] /* ty=uint32 */, %var_809)
  };
  %10(%var_812, %var_813) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */
}

def @func_6808() -> (Tensor[(6, 6, 1), float32],) {
  %11 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
  %12 = %11.0;
  (%12,)
}

def @func_2273() -> Tensor[(13, 5, 16), float32] {
  @func_2271() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3636() -> Tensor[(13, 5, 16), float32] {
  @func_3634() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_1460() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) {
  @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */
}

def @func_6955() -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64]) {
  %13 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %14 = %13.0;
  %15 = @func_5266() /* ty=Tensor[(396), int64] */;
  (%14, %15)
}

def @func_818() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_5146(%var_5145: Tensor[(13, 13, 6), int16]) -> (Tensor[(13, 13, 6), float32],) {
  %23 = fn (%var_5126: Tensor[(13, 13, 6), int16]) -> (Tensor[(13, 13, 6), float32],) {
    %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 13, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 13, 6), int16] */;
    %17 = shape_of(%var_5126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%var_5126, dtype="int16") /* ty=Tensor[(13, 13, 6), int16] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %20 = logical_xor(%18, %19) /* ty=Tensor[(13, 13, 6), int16] */;
    %21 = cast(%20, dtype="float32") /* ty=Tensor[(13, 13, 6), float32] */;
    %22 = asin(%21) /* ty=Tensor[(13, 13, 6), float32] */;
    (%22,)
  };
  %23(%var_5145) /* ty=(Tensor[(13, 13, 6), float32],) */
}

def @func_5024() -> Tensor[(8, 6, 15), float32] {
  %25 = fn () -> Tensor[(8, 6, 15), float32] {
    %24 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %24.1
  };
  %25() /* ty=Tensor[(8, 6, 15), float32] */
}

def @func_4337(%var_4326: Tensor[(1, 189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) {
  %26 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %27 = cast(%var_4326, dtype="uint64") /* ty=Tensor[(1, 189), uint64] */;
  %28 = cast(%var_4326, dtype="uint64") /* ty=Tensor[(1, 189), uint64] */;
  %29 = reshape(%27, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %30 = reshape(%28, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %31 = @func_2139(%29, %30) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) */;
  %32 = %31.2;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(189), bool] */;
  %34 = shape_of(%var_4326, dtype="int32") /* ty=Tensor[(2), int32] */;
  %35 = cast(%var_4326, dtype="bool") /* ty=Tensor[(1, 189), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %37 = %26.0;
  %38 = greater(%35, %36) /* ty=Tensor[(?, 189), bool] */;
  (%37, %38)
}

def @func_3842() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %44 = fn () -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
    %39 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %40 = %39.0;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
    %42 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
    %43 = log2(%41) /* ty=Tensor[(13, 5, 16), float32] */;
    (%42, %43)
  };
  %44() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_3226() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) {
  %45 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %46 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %49 = reshape(%47, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %50 = reshape(%48, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %51 = @func_1857(%49, %50) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(7, 9, 3), float64] */;
  %54 = cast(%52, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  %55 = %45.2;
  %56 = %46.0;
  %57 = log2(%53) /* ty=Tensor[(7, 9, 3), float64] */;
  %58 = sinh(%54) /* ty=Tensor[(7, 9, 3), float32] */;
  (%55, %56, meta[relay.Constant][2] /* ty=Tensor[(189), uint64] */, %57, %58)
}

def @func_4972() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */
}

def @func_6084(%var_6082: uint64) -> (Tensor[(9, 4), uint64], uint64, Tensor[(66, 6), int64], Tensor[(13, 5, 16), int64], Tensor[(13, 5, 16), float32], uint64, Tensor[(6, 6, 1), float64], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  @func_6081(%var_6082) /* ty=(Tensor[(9, 4), uint64], uint64, Tensor[(66, 6), int64], Tensor[(13, 5, 16), int64], Tensor[(13, 5, 16), float32], uint64, Tensor[(6, 6, 1), float64], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */
}

def @func_5925() -> (Tensor[(11, 12, ?), int8],) {
  @func_5923() /* ty=(Tensor[(11, 12, ?), int8],) */
}

def @func_2285(%var_2283: uint8) -> (Tensor[(10, 1, 16), uint8],) {
  @func_2282(%var_2283) /* ty=(Tensor[(10, 1, 16), uint8],) */
}

def @func_2720() -> (uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) {
  %59 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 4), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %61 = reshape(%59, newshape=[]) /* ty=uint64 */;
  %62 = reshape(%60, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %63 = @func_1263(%61, %62) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %64 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %65 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %66 = cast(%65, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %67 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%64, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %70 = %63.1;
  %71 = multiply(%68, %69) /* ty=Tensor[(13, 5, 16), uint64] */;
  (%70, meta[relay.Constant][3] /* ty=uint64 */, meta[relay.Constant][4] /* ty=Tensor[(9, 4), uint64] */, %71)
}

def @func_3035(%var_3032: Tensor[(15, 1, 2), int16], %var_3033: Tensor[(15, 4, 2), int16], %var_3034: Tensor[(15, 6, 2), int16]) -> (Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) {
  %82 = fn (%var_2999: Tensor[(15, 1, 2), int16], %var_3000: Tensor[(15, 4, 2), int16], %var_3018: Tensor[(15, 6, 2), int16]) -> (Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) {
    %72 = cast(%var_2999, dtype="int16") /* ty=Tensor[(15, 1, 2), int16] */;
    %73 = cast(%var_3000, dtype="int16") /* ty=Tensor[(15, 4, 2), int16] */;
    %74 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(15, 1, 2), uint16] */;
    %75 = cast(%var_3018, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
    %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %77 = reshape(%76, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
    %78 = @func_1063(%77) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
    %79 = left_shift(%72, %73) /* ty=Tensor[(15, 4, 2), int16] */;
    %80 = bitwise_and(%74, %75) /* ty=Tensor[(15, 6, 2), uint16] */;
    %81 = %78.0;
    (%79, %80, %81, meta[relay.Constant][5] /* ty=Tensor[(1040), float64] */)
  };
  %82(%var_3032, %var_3033, %var_3034) /* ty=(Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) */
}

def @func_6410() -> (Tensor[(9, 4), uint64], Tensor[(396), int64], Tensor[(396), int64]) {
  %88 = fn () -> (Tensor[(9, 4), uint64], Tensor[(396), int64], Tensor[(396), int64]) {
    %83 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
    %84 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
    %85 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
    %86 = %83.4;
    %87 = %84.2;
    (%85, %86, %87)
  };
  %88() /* ty=(Tensor[(9, 4), uint64], Tensor[(396), int64], Tensor[(396), int64]) */
}

def @func_2139(%var_2107: Tensor[(189), uint64], %var_2127: Tensor[(189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) {
  %89 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %90 = %89.0;
  %91 = cast(%var_2107, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %92 = cast(%var_2107, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %93 = reshape(%91, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %94 = reshape(%92, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %95 = @func_1857(%93, %94) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %96 = %95.3;
  %97 = cast(%96, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %98 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%90, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %102 = cast(%var_2127, dtype="bool") /* ty=Tensor[(189), bool] */;
  %103 = shape_of(%var_2107, dtype="int32") /* ty=Tensor[(1), int32] */;
  %104 = cast(%var_2107, dtype="bool") /* ty=Tensor[(189), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?), bool] */;
  %106 = greater_equal(%99, %100) /* ty=Tensor[(13, 5, 16), bool] */;
  %107 = %101.0;
  %108 = greater(%104, %105) /* ty=Tensor[(189), bool] */;
  (%106, %107, %108)
}

def @func_1263(%var_1237: uint64, %var_1238: Tensor[(36), uint64]) -> (Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) {
  %109 = cast(%var_1237, dtype="uint64") /* ty=uint64 */;
  %110 = cast(%var_1238, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %112 = reshape(%109, newshape=[]) /* ty=uint64 */;
  %113 = reshape(%110, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %114 = reshape(%111, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %115 = @func_972(%112, %113, %114) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %116 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %117 = %116.0;
  %118 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="int64") /* ty=Tensor[(13, 5, 16), int64] */;
  %121 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%117, dtype="int64") /* ty=Tensor[(13, 5, 16), int64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %124 = %115.0;
  %125 = maximum(%122, %123) /* ty=Tensor[(13, 5, 16), int64] */;
  (%124, %var_1237, %var_1238, meta[relay.Constant][6] /* ty=Tensor[(396), int64] */, %125)
}

def @func_4189() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %126 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %127 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
  %128 = %126.0;
  (%127, %128)
}

def @func_8024() -> (Tensor[(40, 8), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32]) {
  %134 = fn () -> (Tensor[(40, 8), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32]) {
    %129 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
    %130 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
    %131 = %129.2;
    %132 = @func_3461() /* ty=Tensor[(13, 5, 16), float32] */;
    %133 = %130.2;
    (%131, %132, %133)
  };
  %134() /* ty=(Tensor[(40, 8), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32]) */
}

def @func_577(%var_576: Tensor[(8, 6, 15), float32]) -> Tensor[(8, 6, 15), float32] {
  %136 = fn (%var_568: Tensor[(8, 6, 15), float32]) -> Tensor[(8, 6, 15), float32] {
    %135 = cast(%var_568, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
    cosh(%135) /* ty=Tensor[(8, 6, 15), float32] */
  };
  %136(%var_576) /* ty=Tensor[(8, 6, 15), float32] */
}

def @func_7688(%var_7686: Tensor[(12, 6, 7), uint32]) -> (Tensor[(12, 6, 7), bool],) {
  @func_7685(%var_7686) /* ty=(Tensor[(12, 6, 7), bool],) */
}

def @func_1745(%var_1743: Tensor[(15, 5, 8), uint64], %var_1744: Tensor[(15, 5, 8), uint64]) -> (Tensor[(15, 5, 8), bool], Tensor[(13, 5, 16), float32]) {
  %143 = fn (%var_1723: Tensor[(15, 5, 8), uint64], %var_1724: Tensor[(15, 5, 8), uint64]) -> (Tensor[(15, 5, 8), bool], Tensor[(13, 5, 16), float32]) {
    %137 = cast(%var_1724, dtype="bool") /* ty=Tensor[(15, 5, 8), bool] */;
    %138 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%var_1723, dtype="bool") /* ty=Tensor[(15, 5, 8), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = greater(%139, %140) /* ty=Tensor[(15, 5, 8), bool] */;
    %142 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
    (%141, %142)
  };
  %143(%var_1743, %var_1744) /* ty=(Tensor[(15, 5, 8), bool], Tensor[(13, 5, 16), float32]) */
}

def @func_1409() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) {
  @func_1407() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) */
}

def @func_4594() -> Tensor[(6, 6, 11), bool] {
  %145 = fn () -> Tensor[(6, 6, 11), bool] {
    %144 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
    %144.1
  };
  %145() /* ty=Tensor[(6, 6, 11), bool] */
}

def @func_4831() -> Tensor[(9, 4), uint64] {
  @func_4829() /* ty=Tensor[(9, 4), uint64] */
}

def @func_4970() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  %146 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %147 = @func_3552() /* ty=(Tensor[(8, 6, 15), float32],) */;
  %148 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %149 = %146.0;
  %150 = %147.0;
  (%148, %149, %150)
}

def @func_5724() -> (Tensor[(720), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32]) {
  @func_5722() /* ty=(Tensor[(720), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32]) */
}

def @func_6893(%var_6892: Tensor[(7, 9, 3), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(16, 8, 4), float64], Tensor[(512), int32], Tensor[(7, 9, 3), float32], Tensor[(6, 6, 1), float32], Tensor[(9, 4), uint64], Tensor[(7, 9, 3), float32], Tensor[(13, 13, 6), float32], Tensor[(1014), int16]) {
  %181 = fn (%var_6861: Tensor[(7, 9, 3), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(16, 8, 4), float64], Tensor[(512), int32], Tensor[(7, 9, 3), float32], Tensor[(6, 6, 1), float32], Tensor[(9, 4), uint64], Tensor[(7, 9, 3), float32], Tensor[(13, 13, 6), float32], Tensor[(1014), int16]) {
    %151 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
    %152 = %151.3;
    %153 = cast(%152, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
    %154 = reshape(%153, newshape=[1, 189]) /* ty=Tensor[(1, 189), uint64] */;
    %155 = @func_4337(%154) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) */;
    %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(512), int32] */, dtype="int32") /* ty=Tensor[(512), int32] */;
    %157 = reshape(%156, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), int32] */;
    %158 = @func_4453(%157) /* ty=(Tensor[(16, 8, 4), float64],) */;
    %159 = cast(%152, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
    %160 = asinh(%159) /* ty=Tensor[(7, 9, 3), float32] */;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
    %162 = exp(%161) /* ty=Tensor[(7, 9, 3), float32] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
    %164 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
    %165 = cast(%var_6861, dtype="bool") /* ty=Tensor[(7, 9, 3), bool] */;
    %166 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%162, dtype="bool") /* ty=Tensor[(7, 9, 3), bool] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %169 = not_equal(%167, %168) /* ty=Tensor[(7, 9, 3), bool] */;
    %170 = cast(%169, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
    %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(1014), int16] */, dtype="int16") /* ty=Tensor[(1014), int16] */;
    %172 = reshape(%171, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), int16] */;
    %173 = @func_5144(%172) /* ty=(Tensor[(13, 13, 6), float32],) */;
    %174 = %155.0;
    %175 = %158.0;
    %176 = log10(%163) /* ty=Tensor[(7, 9, 3), float32] */;
    %177 = %164.0;
    %178 = @func_4234() /* ty=Tensor[(9, 4), uint64] */;
    %179 = sin(%170) /* ty=Tensor[(7, 9, 3), float32] */;
    %180 = %173.0;
    (%174, %175, meta[relay.Constant][7] /* ty=Tensor[(512), int32] */, %176, %177, %178, %179, %180, meta[relay.Constant][8] /* ty=Tensor[(1014), int16] */)
  };
  %181(%var_6892) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(16, 8, 4), float64], Tensor[(512), int32], Tensor[(7, 9, 3), float32], Tensor[(6, 6, 1), float32], Tensor[(9, 4), uint64], Tensor[(7, 9, 3), float32], Tensor[(13, 13, 6), float32], Tensor[(1014), int16]) */
}

def @func_4701(%var_4643: Tensor[(1, 1, 11), float32], %var_4684: Tensor[(1, 336), int32], %var_4685: Tensor[(8, 130), bool]) -> (Tensor[(396), int64], Tensor[(189), uint64], Tensor[(?, ?, 11), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 336), int32], Tensor[(8, 130), bool]) {
  %182 = cast(meta[relay.Constant][9] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
  %184 = reshape(%182, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %185 = reshape(%183, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
  %186 = @func_1857(%184, %185) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %187 = cast(%var_4643, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
  %188 = sin(%187) /* ty=Tensor[(1, 1, 11), float32] */;
  %189 = cast(%var_4643, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %193 = cast(%var_4684, dtype="int32") /* ty=Tensor[(1, 336), int32] */;
  %194 = cast(%var_4685, dtype="bool") /* ty=Tensor[(8, 130), bool] */;
  %195 = reshape(%193, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), int32] */;
  %196 = reshape(%194, newshape=[1040]) /* ty=Tensor[(1040), bool] */;
  %197 = @func_3112(%195, %196) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) */;
  %198 = %186.2;
  %199 = floor_divide(%191, %192) /* ty=Tensor[(?, ?, 11), float64] */;
  %200 = %197.0;
  (%198, meta[relay.Constant][9] /* ty=Tensor[(189), uint64] */, %199, %200, %var_4684, %var_4685)
}

def @func_1948() -> Tensor[(13, 5, 16), float32] {
  @func_1946() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_1156() -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  %201 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %202 = %201.0;
  %203 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %208 = greater(%205, %206) /* ty=Tensor[(13, 5, 16), bool] */;
  %209 = %207.0;
  (%208, %209)
}

def @func_5656() -> Tensor[(13, 5, 16), float32] {
  %210 = fn () -> Tensor[(13, 5, 16), float32] {
    @func_3461() /* ty=Tensor[(13, 5, 16), float32] */
  };
  %210() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_2424(%var_2422: Tensor[(3, 15, 6), uint64], %var_2423: uint64) -> (Tensor[(3, 15, 6), bool], Tensor[(13, 5, 16), int64], uint64, Tensor[(1, 36), uint64]) {
  @func_2420(%var_2422, %var_2423) /* ty=(Tensor[(3, 15, 6), bool], Tensor[(13, 5, 16), int64], uint64, Tensor[(1, 36), uint64]) */
}

def @func_6670() -> (Tensor[(8, 6, 15), float32],) {
  %213 = fn () -> (Tensor[(8, 6, 15), float32],) {
    %211 = @func_3552() /* ty=(Tensor[(8, 6, 15), float32],) */;
    %212 = %211.0;
    (%212,)
  };
  %213() /* ty=(Tensor[(8, 6, 15), float32],) */
}

def @func_4081(%var_4080: Tensor[(1, 6, 10), float32]) -> (Tensor[(?, 6, 10), uint32], Tensor[(13, 5, 16), float32], Tensor[(1, 6, 10), float64]) {
  %226 = fn (%var_4032: Tensor[(1, 6, 10), float32]) -> (Tensor[(?, 6, 10), uint32], Tensor[(13, 5, 16), float32], Tensor[(1, 6, 10), float64]) {
    %214 = cast(%var_4032, dtype="float32") /* ty=Tensor[(1, 6, 10), float32] */;
    %215 = rsqrt(%214) /* ty=Tensor[(1, 6, 10), float32] */;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(1, 6, 10), float64] */;
    %217 = cosh(%216) /* ty=Tensor[(1, 6, 10), float64] */;
    %218 = cast(%215, dtype="uint32") /* ty=Tensor[(1, 6, 10), uint32] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="uint32") /* ty=Tensor[(1, 6, 10), uint32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %222 = cast(%217, dtype="float64") /* ty=Tensor[(1, 6, 10), float64] */;
    %223 = right_shift(%220, %221) /* ty=Tensor[(?, 6, 10), uint32] */;
    %224 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
    %225 = sigmoid(%222) /* ty=Tensor[(1, 6, 10), float64] */;
    (%223, %224, %225)
  };
  %226(%var_4080) /* ty=(Tensor[(?, 6, 10), uint32], Tensor[(13, 5, 16), float32], Tensor[(1, 6, 10), float64]) */
}

def @func_3471() -> (uint64,) {
  %227 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %228 = %227.0;
  (%228,)
}

def @func_5299() -> (Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) {
  %233 = fn () -> (Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) {
    %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
    %230 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
    %231 = tan(%229) /* ty=Tensor[(16, 11, 11), float64] */;
    %232 = %230.0;
    (%231, %232)
  };
  %233() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) */
}

def @func_2550(%var_2549: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) {
  %240 = fn (%var_2543: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) {
    %234 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %235 = cast(%var_2543, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
    %236 = reshape(%235, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %237 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
    %238 = %234.0;
    %239 = @func_575(%236) /* ty=Tensor[(8, 6, 15), float32] */;
    (%237, %238, %239, %var_2543)
  };
  %240(%var_2549) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */
}

def @func_5435() -> (Tensor[(13, 5, 16), bool],) {
  %243 = fn () -> (Tensor[(13, 5, 16), bool],) {
    %241 = @func_1407() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) */;
    %242 = %241.1;
    (%242,)
  };
  %243() /* ty=(Tensor[(13, 5, 16), bool],) */
}

def @func_7337(%var_7335: Tensor[(36), uint64], %var_7336: Tensor[(2, 104), bool]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) {
  @func_7333(%var_7335, %var_7336) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) */
}

def @func_2966(%var_2942: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %244 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %245 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %246 = cast(%var_2942, dtype="float32") /* ty=Tensor[(720), float32] */;
  %247 = reshape(%246, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %248 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
  %249 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %250 = %244.1;
  %251 = %245.1;
  %252 = @func_575(%247) /* ty=Tensor[(8, 6, 15), float32] */;
  %253 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %254 = %248.0;
  (%249, %250, %251, %252, %var_2942, %253, %254)
}

def @func_1364(%var_1362: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  @func_1361(%var_1362) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */
}

def @func_4745() -> Tensor[(720), float32] {
  %256 = fn () -> Tensor[(720), float32] {
    %255 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %255.2
  };
  %256() /* ty=Tensor[(720), float32] */
}

def @func_820() -> Tensor[(13, 5, 16), float32] {
  @func_818() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3078(%var_3074: Tensor[(110), uint32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(110), uint32]) {
  %257 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %258 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %259 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %260 = cast(%var_3074, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %261 = reshape(%259, newshape=[]) /* ty=uint32 */;
  %262 = reshape(%260, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), uint32] */;
  %263 = @func_71(%261, %262) /* ty=(Tensor[(1, 10, 11), uint32],) */;
  %264 = %257.1;
  %265 = %258.1;
  %266 = %263.0;
  (%264, %265, %266, meta[relay.Constant][12] /* ty=uint32 */, %var_3074)
}

def @func_2844() -> Tensor[(13, 5, 16), float32] {
  @func_2842() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6810() -> (Tensor[(6, 6, 1), float32],) {
  @func_6808() /* ty=(Tensor[(6, 6, 1), float32],) */
}

def @func_4706(%var_4703: Tensor[(1, 1, 11), float32], %var_4704: Tensor[(1, 336), int32], %var_4705: Tensor[(8, 130), bool]) -> (Tensor[(396), int64], Tensor[(189), uint64], Tensor[(?, ?, 11), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 336), int32], Tensor[(8, 130), bool]) {
  @func_4701(%var_4703, %var_4704, %var_4705) /* ty=(Tensor[(396), int64], Tensor[(189), uint64], Tensor[(?, ?, 11), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 336), int32], Tensor[(8, 130), bool]) */
}

def @func_7367() -> Tensor[(13, 5, 16), float32] {
  @func_7365() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6157() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %267 = @func_5593() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %268 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %269 = %267.3;
  %270 = %268.0;
  (%269, %270)
}

def @func_6957() -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64]) {
  @func_6955() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(396), int64]) */
}

def @func_1458() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) {
  %271 = cast(meta[relay.Constant][13] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %273 = reshape(%271, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %274 = reshape(%272, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %275 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
  %276 = @func_915(%273, %274) /* ty=Tensor[(6, 6, 11), bool] */;
  (%275, %276, meta[relay.Constant][13] /* ty=Tensor[(396), int64] */)
}

def @func_1558() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) {
  %277 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %278 = %277.0;
  %279 = cast(%278, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %280 = reshape(%279, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %281 = @func_1361(%280) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %282 = %281.5;
  %283 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%278, %282, %283)
}

def @func_6159() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  @func_6157() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_4829() -> Tensor[(9, 4), uint64] {
  @func_4234() /* ty=Tensor[(9, 4), uint64] */
}

def @func_2969(%var_2967: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  @func_2966(%var_2967) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_2282(%var_2277: uint8) -> (Tensor[(10, 1, 16), uint8],) {
  %284 = cast(%var_2277, dtype="uint8") /* ty=uint8 */;
  %285 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(10, 1, 16), uint8] */;
  %286 = right_shift(%284, %285) /* ty=Tensor[(10, 1, 16), uint8] */;
  (%286,)
}

def @func_3261(%var_3259: Tensor[(1, 13, 6), float64], %var_3260: Tensor[(720), float32]) -> (Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  @func_3257(%var_3259, %var_3260) /* ty=(Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */
}

def @func_2998() -> (Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
  %297 = fn () -> (Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
    %287 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
    %288 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
    %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
    %291 = reshape(%288, newshape=[]) /* ty=uint64 */;
    %292 = reshape(%289, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
    %293 = reshape(%290, newshape=[396]) /* ty=Tensor[(396), int64] */;
    %294 = @func_972(%291, %292, %293) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
    %295 = %287.3;
    %296 = %294.2;
    (%295, %296, meta[relay.Constant][15] /* ty=uint64 */, meta[relay.Constant][16] /* ty=Tensor[(36), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(396), int64] */)
  };
  %297() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */
}

def @func_3524(%var_3523: Tensor[(60, 12), float32]) -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(60, 12), float32], Tensor[(396), int64]) {
  %306 = fn (%var_3510: Tensor[(60, 12), float32]) -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(60, 12), float32], Tensor[(396), int64]) {
    %298 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
    %299 = cast(%var_3510, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
    %300 = reshape(%299, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
    %301 = @func_2548(%300) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
    %302 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
    %303 = %298.0;
    %304 = %301.0;
    %305 = %302.2;
    (%303, %304, %var_3510, %305)
  };
  %306(%var_3523) /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(60, 12), float32], Tensor[(396), int64]) */
}

def @func_3503() -> (Tensor[(189), uint64],) {
  %309 = fn () -> (Tensor[(189), uint64],) {
    %307 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
    %308 = %307.2;
    (%308,)
  };
  %309() /* ty=(Tensor[(189), uint64],) */
}

def @func_1158() -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */
}

def @func_4236() -> Tensor[(9, 4), uint64] {
  @func_4234() /* ty=Tensor[(9, 4), uint64] */
}

def @func_4191() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  @func_4189() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_6081(%var_6040: uint64) -> (Tensor[(9, 4), uint64], uint64, Tensor[(66, 6), int64], Tensor[(13, 5, 16), int64], Tensor[(13, 5, 16), float32], uint64, Tensor[(6, 6, 1), float64], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) {
  %310 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %311 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %312 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
  %313 = cast(%312, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %314 = cast(meta[relay.Constant][18] /* ty=Tensor[(66, 6), int64] */, dtype="int64") /* ty=Tensor[(66, 6), int64] */;
  %315 = reshape(%311, newshape=[]) /* ty=uint64 */;
  %316 = reshape(%313, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %317 = reshape(%314, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %318 = @func_972(%315, %316, %317) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %319 = %318.2;
  %320 = cast(%319, dtype="uint64") /* ty=Tensor[(6, 6, 1), uint64] */;
  %321 = reshape(%310, newshape=[]) /* ty=uint64 */;
  %322 = reshape(%320, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %323 = @func_1263(%321, %322) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %324 = %323.4;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %326 = reshape(%325, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %327 = @func_1063(%326) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %328 = cast(%var_6040, dtype="uint64") /* ty=uint64 */;
  %329 = cast(meta[relay.Constant][18] /* ty=Tensor[(66, 6), int64] */, dtype="int64") /* ty=Tensor[(66, 6), int64] */;
  %330 = reshape(%328, newshape=[]) /* ty=uint64 */;
  %331 = reshape(%329, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %332 = @func_5083(%330, %331) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) */;
  %333 = cast(%319, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %334 = atan(%333) /* ty=Tensor[(6, 6, 1), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %336 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %337 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
  %338 = %327.1;
  %339 = %332.2;
  %340 = log10(%335) /* ty=Tensor[(6, 6, 1), float64] */;
  %341 = %336.0;
  %342 = %337.2;
  (%312, %var_6040, meta[relay.Constant][18] /* ty=Tensor[(66, 6), int64] */, %324, %338, %339, %340, %341, %342)
}

def @func_1921(%var_1919: Tensor[(11, 11, 10), uint64], %var_1920: Tensor[(11, 11, 10), uint64]) -> (Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) {
  %368 = fn (%var_1869: Tensor[(11, 11, 10), uint64], %var_1911: Tensor[(11, 11, 10), uint64]) -> (Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) {
    %343 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="uint64") /* ty=Tensor[(11, 11, 10), uint64] */;
    %344 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%var_1869, dtype="uint64") /* ty=Tensor[(11, 11, 10), uint64] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %347 = cast(%var_1869, dtype="bool") /* ty=Tensor[(11, 11, 10), bool] */;
    %348 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 10), uint64] */, dtype="bool") /* ty=Tensor[(11, 11, 10), bool] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %351 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
    %352 = %351.1;
    %353 = cast(%352, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
    %354 = cast(meta[relay.Constant][20] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
    %355 = cast(meta[relay.Constant][20] /* ty=Tensor[(189), uint64] */, dtype="uint64") /* ty=Tensor[(189), uint64] */;
    %356 = reshape(%354, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
    %357 = reshape(%355, newshape=[7, 9, 3]) /* ty=Tensor[(7, 9, 3), uint64] */;
    %358 = @func_1857(%356, %357) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
    %359 = cast(%var_1911, dtype="float64") /* ty=Tensor[(11, 11, 10), float64] */;
    %360 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%var_1869, dtype="float64") /* ty=Tensor[(11, 11, 10), float64] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %363 = logical_xor(%345, %346) /* ty=Tensor[(11, 11, 10), uint64] */;
    %364 = greater(%349, %350) /* ty=Tensor[(11, 11, 10), bool] */;
    %365 = acos(%353) /* ty=Tensor[(8, 6, 15), float64] */;
    %366 = %358.1;
    %367 = power(%361, %362) /* ty=Tensor[(11, 11, 10), float64] */;
    (%363, %364, %365, %366, meta[relay.Constant][20] /* ty=Tensor[(189), uint64] */, %367)
  };
  %368(%var_1919, %var_1920) /* ty=(Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) */
}

def @func_4217() -> (uint64,) {
  %369 = @func_3758() /* ty=(uint64,) */;
  %370 = %369.0;
  (%370,)
}

def @func_1811(%var_1810: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32],) {
  %373 = fn (%var_1803: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32],) {
    %371 = cast(%var_1803, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
    %372 = cos(%371) /* ty=Tensor[(10, 6, 4), float32] */;
    (%372,)
  };
  %373(%var_1810) /* ty=(Tensor[(10, 6, 4), float32],) */
}

def @func_3759() -> (uint64,) {
  %376 = fn () -> (uint64,) {
    %374 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
    %375 = %374.1;
    (%375,)
  };
  %376() /* ty=(uint64,) */
}

def @func_7750(%var_7741: Tensor[(120), int16], %var_7742: Tensor[(180, 1), int16], %var_7743: Tensor[(78, 1), float64], %var_7744: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(78), float64], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180, 1), int16], Tensor[(78, 1), float64], Tensor[(720), float32]) {
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %378 = cast(%var_7741, dtype="int16") /* ty=Tensor[(120), int16] */;
  %379 = cast(%var_7742, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %380 = cast(%var_7743, dtype="float64") /* ty=Tensor[(78, 1), float64] */;
  %381 = cast(%var_7744, dtype="float32") /* ty=Tensor[(720), float32] */;
  %382 = reshape(%377, newshape=[30]) /* ty=Tensor[(30), int16] */;
  %383 = reshape(%378, newshape=[120]) /* ty=Tensor[(120), int16] */;
  %384 = reshape(%379, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %385 = reshape(%380, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %386 = reshape(%381, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %387 = @func_6253(%382, %383, %384, %385, %386) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) */;
  %388 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %389 = %387.10;
  (%388, %389, meta[relay.Constant][21] /* ty=Tensor[(30), int16] */, %var_7741, %var_7742, %var_7743, %var_7744)
}

def @func_789() -> Tensor[(13, 5, 16), float32] {
  %391 = fn () -> Tensor[(13, 5, 16), float32] {
    %390 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %390.0
  };
  %391() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_1695() -> (Tensor[(13, 5, 16), float32],) {
  %392 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %393 = %392.0;
  (%393,)
}

def @func_3228() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) {
  @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */
}

def @func_2372(%var_2371: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) {
  %412 = fn (%var_2348: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) {
    %394 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
    %395 = %394.0;
    %396 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(%395, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %400 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
    %401 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%400, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %405 = cast(%var_2348, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %406 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%400, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %409 = not_equal(%398, %399) /* ty=Tensor[(13, 5, 16), bool] */;
    %410 = logical_or(%403, %404) /* ty=Tensor[(13, 5, 16), bool] */;
    %411 = logical_and(%407, %408) /* ty=Tensor[(13, 5, 16), bool] */;
    (%409, %410, %411)
  };
  %412(%var_2371) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */
}

def @func_6253(%var_6229: Tensor[(30), int16], %var_6230: Tensor[(120), int16], %var_6231: Tensor[(180), int16], %var_6246: Tensor[(78), float64], %var_6247: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
  %413 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 63), uint64] */, dtype="uint64") /* ty=Tensor[(3, 63), uint64] */;
  %414 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 63), uint64] */, dtype="uint64") /* ty=Tensor[(3, 63), uint64] */;
  %415 = reshape(%413, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %416 = reshape(%414, newshape=[189]) /* ty=Tensor[(189), uint64] */;
  %417 = @func_2139(%415, %416) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) */;
  %418 = @func_4593() /* ty=Tensor[(6, 6, 11), bool] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %420 = cos(%419) /* ty=Tensor[(6, 6, 11), float32] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %422 = cast(%var_6229, dtype="int16") /* ty=Tensor[(30), int16] */;
  %423 = cast(%var_6230, dtype="int16") /* ty=Tensor[(120), int16] */;
  %424 = cast(%var_6231, dtype="int16") /* ty=Tensor[(180), int16] */;
  %425 = reshape(%422, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), int16] */;
  %426 = reshape(%423, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int16] */;
  %427 = reshape(%424, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), int16] */;
  %428 = @func_3031(%425, %426, %427) /* ty=(Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) */;
  %429 = cast(%420, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %430 = cast(%var_6246, dtype="float64") /* ty=Tensor[(78), float64] */;
  %431 = cast(%var_6247, dtype="float32") /* ty=Tensor[(720), float32] */;
  %432 = reshape(%430, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
  %433 = reshape(%431, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %434 = @func_3257(%432, %433) /* ty=(Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %435 = %417.1;
  %436 = exp(%421) /* ty=Tensor[(6, 6, 11), float32] */;
  %437 = %428.1;
  %438 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
  %439 = log(%429) /* ty=Tensor[(6, 6, 11), float32] */;
  %440 = %434.0;
  (%435, meta[relay.Constant][22] /* ty=Tensor[(3, 63), uint64] */, %436, %437, %var_6229, %var_6230, %var_6231, %438, %439, %440, %var_6246, %var_6247)
}

def @func_6753(%var_6751: Tensor[(5, 10, 2), float32]) -> (Tensor[(5, 10, 2), float32],) {
  @func_6750(%var_6751) /* ty=(Tensor[(5, 10, 2), float32],) */
}

def @func_5266() -> Tensor[(396), int64] {
  %441 = @func_2031() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */;
  %441.0
}

def @func_4340(%var_4338: Tensor[(1, 189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) {
  @func_4337(%var_4338) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(?, 189), bool]) */
}

def @func_2271() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_7333(%var_7288: Tensor[(36), uint64], %var_7319: Tensor[(2, 104), bool]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) {
  %442 = @func_6522() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) */;
  %443 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %444 = cast(%var_7288, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %445 = cast(meta[relay.Constant][24] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %446 = reshape(%443, newshape=[]) /* ty=uint64 */;
  %447 = reshape(%444, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %448 = reshape(%445, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %449 = @func_972(%446, %447, %448) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %450 = cast(%var_7319, dtype="bool") /* ty=Tensor[(2, 104), bool] */;
  %451 = reshape(%450, newshape=[208]) /* ty=Tensor[(208), bool] */;
  %452 = @func_5939(%451) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) */;
  %453 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
  %454 = cast(%453, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %455 = reshape(%454, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %456 = @func_2370(%455) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
  %457 = %456.1;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %459 = @func_5655() /* ty=Tensor[(13, 5, 16), float32] */;
  %460 = %442.4;
  %461 = %449.2;
  %462 = %452.2;
  %463 = sigmoid(%458) /* ty=Tensor[(13, 5, 16), float64] */;
  (%459, %460, %453, %461, meta[relay.Constant][23] /* ty=uint64 */, %var_7288, meta[relay.Constant][24] /* ty=Tensor[(396), int64] */, %462, %var_7319, %463)
}

def @func_6997(%var_6995: Tensor[(1210), uint64]) -> (Tensor[(13, 5, 16), float32], Tensor[(11, 11, 10), uint64], Tensor[(1210), uint64]) {
  @func_6994(%var_6995) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(11, 11, 10), uint64], Tensor[(1210), uint64]) */
}

def @func_976(%var_973: uint64, %var_974: Tensor[(6, 6, 1), uint64], %var_975: Tensor[(396), int64]) -> (Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) {
  %477 = fn (%var_948: uint64, %var_949: Tensor[(6, 6, 1), uint64], %var_955: Tensor[(396), int64]) -> (Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) {
    %464 = cast(%var_955, dtype="int64") /* ty=Tensor[(396), int64] */;
    %465 = cast(%var_955, dtype="int64") /* ty=Tensor[(396), int64] */;
    %466 = reshape(%464, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
    %467 = reshape(%465, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
    %468 = cast(%var_948, dtype="uint64") /* ty=uint64 */;
    %469 = cast(%var_949, dtype="uint64") /* ty=Tensor[(6, 6, 1), uint64] */;
    %470 = bitwise_and(%468, %469) /* ty=Tensor[(6, 6, 1), uint64] */;
    %471 = cast(%var_948, dtype="float32") /* ty=float32 */;
    %472 = cast(%470, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
    %473 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %474 = @func_915(%466, %467) /* ty=Tensor[(6, 6, 11), bool] */;
    %475 = multiply(%471, %472) /* ty=Tensor[(6, 6, 1), float32] */;
    %476 = %473.0;
    (%474, %var_955, %475, %476)
  };
  %477(%var_973, %var_974, %var_975) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_4502() -> (uint64,) {
  %480 = fn () -> (uint64,) {
    %478 = @func_3471() /* ty=(uint64,) */;
    %479 = %478.0;
    (%479,)
  };
  %480() /* ty=(uint64,) */
}

def @func_6260(%var_6255: Tensor[(30), int16], %var_6256: Tensor[(120), int16], %var_6257: Tensor[(180), int16], %var_6258: Tensor[(78), float64], %var_6259: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
  @func_6253(%var_6255, %var_6256, %var_6257, %var_6258, %var_6259) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(3, 63), uint64], Tensor[(6, 6, 11), float32], Tensor[(15, 6, 2), uint16], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180), int16], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), float32], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) */
}

def @func_7931(%var_7901: Tensor[(8, 6, 15), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), bool], Tensor[(13, 5, 16), float32], Tensor[(22, 5), uint32], Tensor[(144), float32], Tensor[(110), uint32]) {
  %481 = @func_6157() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
  %484 = @func_6669() /* ty=(Tensor[(8, 6, 15), float32],) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %487 = cast(%485, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %488 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
  %489 = cast(%var_7901, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %490 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%485, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %493 = logical_xor(%491, %492) /* ty=Tensor[(8, 6, 15), uint16] */;
  %494 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 6, 15), uint16] */, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = @func_4189() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %499 = cast(meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %501 = reshape(%499, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %502 = reshape(%500, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %503 = @func_811(%501, %502) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
  %504 = sin(%483) /* ty=Tensor[(13, 5, 16), float32] */;
  %505 = erf(%486) /* ty=Tensor[(8, 6, 15), float64] */;
  %506 = log2(%487) /* ty=Tensor[(8, 6, 15), float32] */;
  %507 = %488.1;
  %508 = equal(%496, %497) /* ty=Tensor[(8, 6, 15), bool] */;
  %509 = %498.0;
  %510 = %503.4;
  (%504, %505, %506, %507, %508, %509, %510, meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, meta[relay.Constant][27] /* ty=Tensor[(110), uint32] */)
}

def @func_7756(%var_7752: Tensor[(120), int16], %var_7753: Tensor[(180, 1), int16], %var_7754: Tensor[(78, 1), float64], %var_7755: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(78), float64], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180, 1), int16], Tensor[(78, 1), float64], Tensor[(720), float32]) {
  @func_7750(%var_7752, %var_7753, %var_7754, %var_7755) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(78), float64], Tensor[(30), int16], Tensor[(120), int16], Tensor[(180, 1), int16], Tensor[(78, 1), float64], Tensor[(720), float32]) */
}

def @func_1861(%var_1859: Tensor[(7, 9, 3), uint64], %var_1860: Tensor[(7, 9, 3), uint64]) -> (Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
  @func_1857(%var_1859, %var_1860) /* ty=(Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */
}

def @func_1063(%var_1032: Tensor[(13, 5, 16), float64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  %511 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %513 = rsqrt(%512) /* ty=Tensor[(13, 5, 16), float64] */;
  %514 = cast(%var_1032, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = less_equal(%516, %517) /* ty=Tensor[(13, 5, 16), bool] */;
  %519 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%518, %519)
}

def @func_3552() -> (Tensor[(8, 6, 15), float32],) {
  %520 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %521 = %520.1;
  (%521,)
}

def @func_1066(%var_1064: Tensor[(13, 5, 16), float64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) {
  @func_1063(%var_1064) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */
}

def @func_4219() -> (uint64,) {
  @func_4217() /* ty=(uint64,) */
}

def @func_5939(%var_5937: Tensor[(208), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) {
  %522 = @func_5434() /* ty=(Tensor[(13, 5, 16), bool],) */;
  %523 = cast(%var_5937, dtype="bool") /* ty=Tensor[(208), bool] */;
  %524 = reshape(%523, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), bool] */;
  %525 = %522.0;
  %526 = @func_2206(%524) /* ty=Tensor[(8, 2, 13), float64] */;
  (%525, %526, %var_5937)
}

def @func_5407(%var_5405: Tensor[(1040), bool], %var_5406: Tensor[(7, 9, 3), float64]) -> (Tensor[(6, 6, 11), bool], Tensor[(1040), bool], Tensor[(7, 9, 3), uint64]) {
  %538 = fn (%var_5389: Tensor[(1040), bool], %var_5396: Tensor[(7, 9, 3), float64]) -> (Tensor[(6, 6, 11), bool], Tensor[(1040), bool], Tensor[(7, 9, 3), uint64]) {
    %527 = cast(%var_5389, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %528 = reshape(%527, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %529 = @func_1361(%528) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %530 = @func_3226() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(189), uint64], Tensor[(7, 9, 3), float64], Tensor[(7, 9, 3), float32]) */;
    %531 = %530.3;
    %532 = cast(%var_5396, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
    %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%531, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %536 = %529.3;
    %537 = bitwise_and(%534, %535) /* ty=Tensor[(7, 9, 3), uint64] */;
    (%536, %var_5389, %537)
  };
  %538(%var_5405, %var_5406) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(1040), bool], Tensor[(7, 9, 3), uint64]) */
}

def @func_4234() -> Tensor[(9, 4), uint64] {
  %539 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %539.2
}

def @func_8057() -> (Tensor[(396), int64], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
  %547 = fn () -> (Tensor[(396), int64], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) {
    %540 = cast(meta[relay.Constant][28] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %541 = cast(meta[relay.Constant][29] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %542 = reshape(%540, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
    %543 = reshape(%541, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %544 = @func_3257(%542, %543) /* ty=(Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %545 = @func_5266() /* ty=Tensor[(396), int64] */;
    %546 = %544.0;
    (%545, %546, meta[relay.Constant][28] /* ty=Tensor[(78), float64] */, meta[relay.Constant][29] /* ty=Tensor[(720), float32] */)
  };
  %547() /* ty=(Tensor[(396), int64], Tensor[(10, 13, 6), float64], Tensor[(78), float64], Tensor[(720), float32]) */
}

def @func_1641() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) {
  @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */
}

def @func_7038() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %550 = fn () -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
    %548 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
    %549 = @func_788() /* ty=Tensor[(13, 5, 16), float32] */;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_1639() -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) {
  %551 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 66), int64] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %552 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 66), int64] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %553 = reshape(%551, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %554 = reshape(%552, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %555 = @func_1384() /* ty=Tensor[(13, 5, 16), float32] */;
  %556 = @func_915(%553, %554) /* ty=Tensor[(6, 6, 11), bool] */;
  (%555, %556, meta[relay.Constant][30] /* ty=Tensor[(6, 66), int64] */)
}

def @func_7477() -> (Tensor[(6, 6, 1), float32],) {
  %559 = fn () -> (Tensor[(6, 6, 1), float32],) {
    %557 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
    %558 = %557.0;
    (%558,)
  };
  %559() /* ty=(Tensor[(6, 6, 1), float32],) */
}

def @func_2420(%var_2402: Tensor[(3, 15, 6), uint64], %var_2412: uint64) -> (Tensor[(3, 15, 6), bool], Tensor[(13, 5, 16), int64], uint64, Tensor[(1, 36), uint64]) {
  %560 = cast(%var_2402, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %561 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 15, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(%var_2412, dtype="uint64") /* ty=uint64 */;
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 36), uint64] */, dtype="uint64") /* ty=Tensor[(1, 36), uint64] */;
  %566 = reshape(%564, newshape=[]) /* ty=uint64 */;
  %567 = reshape(%565, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %568 = @func_1263(%566, %567) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */;
  %569 = greater_equal(%562, %563) /* ty=Tensor[(3, 15, 6), bool] */;
  %570 = %568.4;
  (%569, %570, %var_2412, meta[relay.Constant][32] /* ty=Tensor[(1, 36), uint64] */)
}

def @func_6750(%var_6744: Tensor[(5, 10, 2), float32]) -> (Tensor[(5, 10, 2), float32],) {
  %571 = cast(%var_6744, dtype="float32") /* ty=Tensor[(5, 10, 2), float32] */;
  %572 = cosh(%571) /* ty=Tensor[(5, 10, 2), float32] */;
  (%572,)
}

def @func_7594() -> Tensor[(13, 5, 16), float32] {
  @func_788() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6375() -> Tensor[(13, 5, 16), float32] {
  %573 = fn () -> Tensor[(13, 5, 16), float32] {
    @func_2271() /* ty=Tensor[(13, 5, 16), float32] */
  };
  %573() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3634() -> Tensor[(13, 5, 16), float32] {
  %574 = @func_1639() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 66), int64]) */;
  %574.0
}

def @func_1407() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) {
  %575 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %577 = reshape(%576, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %578 = @func_1063(%577) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %579 = %578.0;
  (%575, %579)
}

def @func_5268() -> Tensor[(396), int64] {
  @func_5266() /* ty=Tensor[(396), int64] */
}

def @func_918(%var_916: Tensor[(6, 6, 11), int64], %var_917: Tensor[(6, 6, 11), int64]) -> Tensor[(6, 6, 11), bool] {
  %589 = fn (%var_900: Tensor[(6, 6, 11), int64], %var_901: Tensor[(6, 6, 11), int64]) -> Tensor[(6, 6, 11), bool] {
    %580 = cast(%var_901, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
    %581 = shape_of(%var_900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(%var_900, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %584 = add(%582, %583) /* ty=Tensor[(6, 6, 11), int64] */;
    %585 = cast(%var_901, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%587, %588) /* ty=Tensor[(6, 6, 11), bool] */
  };
  %589(%var_916, %var_917) /* ty=Tensor[(6, 6, 11), bool] */
}

def @func_5942(%var_5940: Tensor[(208), bool]) -> (Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) {
  @func_5939(%var_5940) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(8, 2, 13), float64], Tensor[(208), bool]) */
}

def @func_7596() -> Tensor[(13, 5, 16), float32] {
  @func_7594() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_4985() -> uint64 {
  %590 = @func_4217() /* ty=(uint64,) */;
  %590.0
}

def @func_2208(%var_2207: Tensor[(8, 2, 13), bool]) -> Tensor[(8, 2, 13), float64] {
  %597 = fn (%var_2182: Tensor[(8, 2, 13), bool]) -> Tensor[(8, 2, 13), float64] {
    %591 = cast(%var_2182, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
    %592 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(8, 2, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 2, 13), bool] */, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %595 = logical_and(%593, %594) /* ty=Tensor[(8, 2, 13), bool] */;
    %596 = cast(%595, dtype="float64") /* ty=Tensor[(8, 2, 13), float64] */;
    sigmoid(%596) /* ty=Tensor[(8, 2, 13), float64] */
  };
  %597(%var_2207) /* ty=Tensor[(8, 2, 13), float64] */
}

def @func_3462() -> Tensor[(13, 5, 16), float32] {
  %598 = fn () -> Tensor[(13, 5, 16), float32] {
    @func_1946() /* ty=Tensor[(13, 5, 16), float32] */
  };
  %598() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3991(%var_3989: uint64, %var_3990: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
  %609 = fn (%var_3984: uint64, %var_3986: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) {
    %599 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %600 = cast(%var_3984, dtype="uint64") /* ty=uint64 */;
    %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
    %602 = cast(%var_3986, dtype="int64") /* ty=Tensor[(396), int64] */;
    %603 = reshape(%600, newshape=[]) /* ty=uint64 */;
    %604 = reshape(%601, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
    %605 = reshape(%602, newshape=[396]) /* ty=Tensor[(396), int64] */;
    %606 = @func_972(%603, %604, %605) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
    %607 = %599.0;
    %608 = %606.0;
    (%607, %608, %var_3984, meta[relay.Constant][34] /* ty=Tensor[(36), uint64] */, %var_3986)
  };
  %609(%var_3989, %var_3990) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */
}

def @func_3788() -> Tensor[(14, 6, 8), bool] {
  %614 = fn () -> Tensor[(14, 6, 8), bool] {
    %610 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 6, 8), int8] */, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
    %611 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 6, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 6, 8), int8] */, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%612, %613) /* ty=Tensor[(14, 6, 8), bool] */
  };
  %614() /* ty=Tensor[(14, 6, 8), bool] */
}

def @func_7685(%var_7677: Tensor[(12, 6, 7), uint32]) -> (Tensor[(12, 6, 7), bool],) {
  %615 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 6, 7), uint32] */, dtype="bool") /* ty=Tensor[(12, 6, 7), bool] */;
  %616 = shape_of(%var_7677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_7677, dtype="bool") /* ty=Tensor[(12, 6, 7), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = less(%617, %618) /* ty=Tensor[(12, 6, 7), bool] */;
  (%619,)
}

def @func_2032() -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
  %625 = fn () -> (Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
    %620 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
    %621 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
    %623 = %620.2;
    %624 = log10(%622) /* ty=Tensor[(13, 5, 16), float32] */;
    (%623, %624)
  };
  %625() /* ty=(Tensor[(396), int64], Tensor[(13, 5, 16), float32]) */
}

def @func_3303() -> (Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(396), float64]) {
  %626 = cast(meta[relay.Constant][38] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %627 = reshape(%626, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %628 = @func_1458() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64]) */;
  %629 = %628.2;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(396), float32] */;
  %631 = rsqrt(%630) /* ty=Tensor[(396), float32] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(396), float64] */;
  %633 = @func_575(%627) /* ty=Tensor[(8, 6, 15), float32] */;
  %634 = atanh(%632) /* ty=Tensor[(396), float64] */;
  (%633, meta[relay.Constant][38] /* ty=Tensor[(720), float32] */, %634)
}

def @func_4453(%var_4446: Tensor[(16, 8, 4), int32]) -> (Tensor[(16, 8, 4), float64],) {
  %635 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 4), int32] */;
  %636 = shape_of(%var_4446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_4446, dtype="int32") /* ty=Tensor[(16, 8, 4), int32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %639 = minimum(%637, %638) /* ty=Tensor[(16, 8, 4), int32] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %641 = asin(%640) /* ty=Tensor[(16, 8, 4), float64] */;
  (%641,)
}

def @func_5507(%var_5505: Tensor[(5, 16, 10), float64], %var_5506: Tensor[(144, 1), float32]) -> (Tensor[(5, 16, 10), float64], Tensor[(1, 16, 9), float32], Tensor[(144, 1), float32], Tensor[(110, 1), uint32], Tensor[(12, 14, 3), int8], Tensor[(504), float64]) {
  %654 = fn (%var_5484: Tensor[(5, 16, 10), float64], %var_5495: Tensor[(144, 1), float32]) -> (Tensor[(5, 16, 10), float64], Tensor[(1, 16, 9), float32], Tensor[(144, 1), float32], Tensor[(110, 1), uint32], Tensor[(12, 14, 3), int8], Tensor[(504), float64]) {
    %642 = cast(%var_5484, dtype="float64") /* ty=Tensor[(5, 16, 10), float64] */;
    %643 = cast(%var_5495, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
    %644 = cast(meta[relay.Constant][40] /* ty=Tensor[(110, 1), uint32] */, dtype="uint32") /* ty=Tensor[(110, 1), uint32] */;
    %645 = reshape(%643, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
    %646 = reshape(%644, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
    %647 = @func_811(%645, %646) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
    %648 = cast(meta[relay.Constant][41] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %649 = reshape(%648, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
    %650 = @func_2588(%649) /* ty=(Tensor[(12, 14, 3), int8],) */;
    %651 = sigmoid(%642) /* ty=Tensor[(5, 16, 10), float64] */;
    %652 = %647.0;
    %653 = %650.0;
    (%651, %652, %var_5495, meta[relay.Constant][40] /* ty=Tensor[(110, 1), uint32] */, %653, meta[relay.Constant][41] /* ty=Tensor[(504), float64] */)
  };
  %654(%var_5505, %var_5506) /* ty=(Tensor[(5, 16, 10), float64], Tensor[(1, 16, 9), float32], Tensor[(144, 1), float32], Tensor[(110, 1), uint32], Tensor[(12, 14, 3), int8], Tensor[(504), float64]) */
}

def @func_1697() -> (Tensor[(13, 5, 16), float32],) {
  @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */
}

def @func_6524() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) {
  @func_6522() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) */
}

def @func_3891(%var_3889: Tensor[(16, 2, 10), float32], %var_3890: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float32] {
  %659 = fn (%var_3881: Tensor[(16, 2, 10), float32], %var_3882: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float32] {
    %655 = cast(%var_3882, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %656 = shape_of(%var_3881, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%var_3881, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%657, %658) /* ty=Tensor[(16, 2, 10), float32] */
  };
  %659(%var_3889, %var_3890) /* ty=Tensor[(16, 2, 10), float32] */
}

def @func_3735(%var_3734: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], Tensor[(6, 6, 720), int8], Tensor[(13, 5, 16), bool]) {
  %680 = fn (%var_3669: Tensor[(720), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], Tensor[(6, 6, 720), int8], Tensor[(13, 5, 16), bool]) {
    %660 = cast(%var_3669, dtype="float32") /* ty=Tensor[(720), float32] */;
    %661 = reshape(%660, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %662 = @func_2966(%661) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
    %663 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
    %664 = %663.1;
    %665 = cast(%664, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
    %666 = atanh(%665) /* ty=Tensor[(6, 6, 1), float64] */;
    %667 = cast(%666, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
    %668 = sqrt(%667) /* ty=Tensor[(6, 6, 1), float32] */;
    %669 = cast(%668, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
    %670 = cast(%666, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
    %671 = cast(%var_3669, dtype="bool") /* ty=Tensor[(720), bool] */;
    %672 = logical_or(%670, %671) /* ty=Tensor[(6, 6, 720), bool] */;
    %673 = cast(%668, dtype="int8") /* ty=Tensor[(6, 6, 1), int8] */;
    %674 = cast(%672, dtype="int8") /* ty=Tensor[(6, 6, 720), int8] */;
    %675 = @func_1407() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool]) */;
    %676 = %662.6;
    %677 = rsqrt(%669) /* ty=Tensor[(6, 6, 1), float32] */;
    %678 = bitwise_or(%673, %674) /* ty=Tensor[(6, 6, 720), int8] */;
    %679 = %675.1;
    (%676, %677, %678, %679)
  };
  %680(%var_3734) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], Tensor[(6, 6, 720), int8], Tensor[(13, 5, 16), bool]) */
}

def @func_7627() -> Tensor[(13, 5, 16), float32] {
  @func_6374() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_7063() -> (Tensor[(8, 6, 15), float32], Tensor[(9, 4), uint64], int16, Tensor[(150), int16]) {
  %691 = fn () -> (Tensor[(8, 6, 15), float32], Tensor[(9, 4), uint64], int16, Tensor[(150), int16]) {
    %681 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %682 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %683 = cast(meta[relay.Constant][43] /* ty=Tensor[(150), int16] */, dtype="int16") /* ty=Tensor[(150), int16] */;
    %684 = %681.1;
    %685 = cast(%684, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
    %686 = reshape(%682, newshape=[]) /* ty=int16 */;
    %687 = reshape(%683, newshape=[1, 15, 10]) /* ty=Tensor[(1, 15, 10), int16] */;
    %688 = reshape(%685, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
    %689 = @func_6649(%686, %687, %688) /* ty=(Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) */;
    %690 = %689.1;
    (%684, %690, meta[relay.Constant][42] /* ty=int16 */, meta[relay.Constant][43] /* ty=Tensor[(150), int16] */)
  };
  %691() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(9, 4), uint64], int16, Tensor[(150), int16]) */
}

def @func_5923() -> (Tensor[(11, 12, ?), int8],) {
  %692 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %693 = log10(%692) /* ty=Tensor[(11, 12, 1), float32] */;
  %694 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 12, 1), float32] */, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %698 = minimum(%696, %697) /* ty=Tensor[(11, 12, ?), int8] */;
  (%698,)
}

def @func_4556() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %699 = cast(meta[relay.Constant][45] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %700 = reshape(%699, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %701 = @func_2548(%700) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
  %702 = @func_3634() /* ty=Tensor[(13, 5, 16), float32] */;
  %703 = %701.2;
  (%702, %703, meta[relay.Constant][45] /* ty=Tensor[(720), float32] */)
}

def @func_6925() -> (Tensor[(13, 5, 16), float32], uint64) {
  @func_6923() /* ty=(Tensor[(13, 5, 16), float32], uint64) */
}

def @func_1361(%var_1311: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %704 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %705 = %704.0;
  %706 = cast(%var_1311, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="uint64") /* ty=Tensor[(13, 5, 16), uint64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %710 = minimum(%708, %709) /* ty=Tensor[(13, 5, 16), uint64] */;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %712 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %714 = cast(meta[relay.Constant][46] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %715 = reshape(%713, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %716 = reshape(%714, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %718 = reshape(%717, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %719 = cosh(%711) /* ty=Tensor[(13, 5, 16), float64] */;
  %720 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  %721 = %712.1;
  %722 = @func_915(%715, %716) /* ty=Tensor[(6, 6, 11), bool] */;
  %723 = @func_575(%718) /* ty=Tensor[(8, 6, 15), float32] */;
  (%719, %720, %721, %722, meta[relay.Constant][46] /* ty=Tensor[(396), int64] */, %723, meta[relay.Constant][47] /* ty=Tensor[(720), float32] */)
}

def @func_4456(%var_4454: Tensor[(16, 8, 4), int32]) -> (Tensor[(16, 8, 4), float64],) {
  @func_4453(%var_4454) /* ty=(Tensor[(16, 8, 4), float64],) */
}

def @func_7934(%var_7932: Tensor[(8, 6, 15), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), bool], Tensor[(13, 5, 16), float32], Tensor[(22, 5), uint32], Tensor[(144), float32], Tensor[(110), uint32]) {
  @func_7931(%var_7932) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), bool], Tensor[(13, 5, 16), float32], Tensor[(22, 5), uint32], Tensor[(144), float32], Tensor[(110), uint32]) */
}

def @func_3081(%var_3079: Tensor[(110), uint32]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(110), uint32]) {
  @func_3078(%var_3079) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(110), uint32]) */
}

def @func_2590(%var_2589: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), int8],) {
  %731 = fn (%var_2559: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), int8],) {
    %724 = cast(%var_2559, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
    %725 = sin(%724) /* ty=Tensor[(12, 14, 3), float64] */;
    %726 = cast(%725, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
    %727 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%var_2559, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %730 = bitwise_or(%728, %729) /* ty=Tensor[(12, 14, 3), int8] */;
    (%730,)
  };
  %731(%var_2589) /* ty=(Tensor[(12, 14, 3), int8],) */
}

def @func_5087(%var_5085: uint64, %var_5086: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) {
  @func_5083(%var_5085, %var_5086) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) */
}

def @func_3257(%var_3234: Tensor[(1, 13, 6), float64], %var_3243: Tensor[(720), float32]) -> (Tensor[(10, 13, 6), float64], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %732 = cast(%var_3234, dtype="float64") /* ty=Tensor[(1, 13, 6), float64] */;
  %733 = cast(meta[relay.Constant][48] /* ty=Tensor[(10, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 6), float64] */;
  %734 = cast(%var_3243, dtype="float32") /* ty=Tensor[(720), float32] */;
  %735 = reshape(%734, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %736 = @func_2548(%735) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32]) */;
  %737 = power(%732, %733) /* ty=Tensor[(10, 13, 6), float64] */;
  %738 = %736.2;
  (%737, %738, %var_3243)
}

def @func_6653(%var_6650: int16, %var_6651: Tensor[(1, 15, 10), int16], %var_6652: Tensor[(720, 1), float32]) -> (Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) {
  %747 = fn (%var_6612: int16, %var_6613: Tensor[(1, 15, 10), int16], %var_6633: Tensor[(720, 1), float32]) -> (Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) {
    %739 = cast(%var_6612, dtype="bool") /* ty=bool */;
    %740 = cast(%var_6613, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
    %741 = cast(%var_6633, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
    %742 = reshape(%741, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
    %743 = @func_4428(%742) /* ty=(Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) */;
    %744 = greater(%739, %740) /* ty=Tensor[(1, 15, 10), bool] */;
    %745 = @func_4829() /* ty=Tensor[(9, 4), uint64] */;
    %746 = %743.1;
    (%744, %745, %746, %var_6633)
  };
  %747(%var_6650, %var_6651, %var_6652) /* ty=(Tensor[(1, 15, 10), bool], Tensor[(9, 4), uint64], uint64, Tensor[(720, 1), float32]) */
}

def @func_1946() -> Tensor[(13, 5, 16), float32] {
  %748 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %748.0
}

def @func_5083(%var_5078: uint64, %var_5080: Tensor[(396), int64]) -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], uint64, Tensor[(9, 4), uint64], Tensor[(396), int64]) {
  %749 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
  %750 = cast(%var_5078, dtype="uint64") /* ty=uint64 */;
  %751 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 4), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4), uint64] */;
  %752 = cast(%var_5080, dtype="int64") /* ty=Tensor[(396), int64] */;
  %753 = reshape(%750, newshape=[]) /* ty=uint64 */;
  %754 = reshape(%751, newshape=[6, 6, 1]) /* ty=Tensor[(6, 6, 1), uint64] */;
  %755 = reshape(%752, newshape=[396]) /* ty=Tensor[(396), int64] */;
  %756 = @func_972(%753, %754, %755) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32]) */;
  %757 = %749.0;
  %758 = %756.3;
  (%757, %758, %var_5078, meta[relay.Constant][49] /* ty=Tensor[(9, 4), uint64] */, %var_5080)
}

def @func_736() -> (Tensor[(13, 5, 16), float32],) {
  %761 = fn () -> (Tensor[(13, 5, 16), float32],) {
    %759 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 16), float32] */;
    %760 = log(%759) /* ty=Tensor[(13, 5, 16), float32] */;
    (%760,)
  };
  %761() /* ty=(Tensor[(13, 5, 16), float32],) */
}

def @func_7118() -> uint64 {
  @func_7116() /* ty=uint64 */
}

def @main(%var_8150: Tensor[(1, 208), bool]) -> (Tensor[(13, 5, 16), float32], Tensor[(720), float32], Tensor[(36), uint64], Tensor[(6, 6, 208), bool], Tensor[(16, 11, 11), float64], Tensor[(6, 6, 1), float32]) {
  %762 = cast(meta[relay.Constant][51] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %763 = cast(%var_8150, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %764 = reshape(%762, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %765 = reshape(%763, newshape=[2, 104]) /* ty=Tensor[(2, 104), bool] */;
  %766 = @func_7337(%764, %765) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(208), bool], Tensor[(2, 104), bool], Tensor[(13, 5, 16), float64]) */;
  %767 = %766.3;
  %768 = cast(%var_8150, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %769 = cast(%767, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
  %770 = @func_5299() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(13, 5, 16), float32]) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %773 = cast(%767, dtype="float32") /* ty=Tensor[(6, 6, 1), float32] */;
  %774 = @func_1946() /* ty=Tensor[(13, 5, 16), float32] */;
  %775 = @func_4744() /* ty=Tensor[(720), float32] */;
  %776 = less(%768, %769) /* ty=Tensor[(6, 6, 208), bool] */;
  %777 = log10(%772) /* ty=Tensor[(16, 11, 11), float64] */;
  %778 = exp(%773) /* ty=Tensor[(6, 6, 1), float32] */;
  (%774, %775, meta[relay.Constant][51] /* ty=Tensor[(36), uint64] */, %776, %777, %778)
}

def @func_1560() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) {
  @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_3305() -> (Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(396), float64]) {
  @func_3303() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(396), float64]) */
}

def @func_5825(%var_5822: Tensor[(504, 1), float64], %var_5823: Tensor[(504, 13), int32], %var_5824: Tensor[(12, 14, 3), int8]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32], Tensor[(504, 13), bool], Tensor[(13, 5, 16), bool], Tensor[(30), int16], Tensor[(60, 2), int16], Tensor[(180), int16], Tensor[(12, 14, 3), float32], Tensor[(504, ?), bool]) {
  %819 = fn (%var_5736: Tensor[(504, 1), float64], %var_5764: Tensor[(504, 13), int32], %var_5792: Tensor[(12, 14, 3), int8]) -> (Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32], Tensor[(504, 13), bool], Tensor[(13, 5, 16), bool], Tensor[(30), int16], Tensor[(60, 2), int16], Tensor[(180), int16], Tensor[(12, 14, 3), float32], Tensor[(504, ?), bool]) {
    %779 = cast(meta[relay.Constant][52] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
    %780 = cast(meta[relay.Constant][52] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
    %781 = reshape(%779, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
    %782 = reshape(%780, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
    %783 = @func_3855() /* ty=(Tensor[(6, 6, 1), float32],) */;
    %784 = @func_735() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %785 = cast(%var_5736, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
    %786 = reshape(%785, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
    %787 = @func_2588(%786) /* ty=(Tensor[(12, 14, 3), int8],) */;
    %788 = %787.0;
    %789 = cast(%788, dtype="int32") /* ty=Tensor[(12, 14, 3), int32] */;
    %790 = shape_of(%var_5736, dtype="int32") /* ty=Tensor[(2), int32] */;
    %791 = cast(%var_5736, dtype="int32") /* ty=Tensor[(504, 1), int32] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %793 = maximum(%791, %792) /* ty=Tensor[(504, ?), int32] */;
    %794 = cast(%793, dtype="bool") /* ty=Tensor[(504, ?), bool] */;
    %795 = cast(%var_5764, dtype="bool") /* ty=Tensor[(504, 13), bool] */;
    %796 = cast(meta[relay.Constant][53] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
    %797 = cast(meta[relay.Constant][54] /* ty=Tensor[(60, 2), int16] */, dtype="int16") /* ty=Tensor[(60, 2), int16] */;
    %798 = cast(meta[relay.Constant][55] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
    %799 = reshape(%796, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), int16] */;
    %800 = reshape(%797, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int16] */;
    %801 = reshape(%798, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), int16] */;
    %802 = @func_3031(%799, %800, %801) /* ty=(Tensor[(15, 4, 2), int16], Tensor[(15, 6, 2), uint16], Tensor[(13, 5, 16), bool], Tensor[(1040), float64]) */;
    %803 = cast(%var_5792, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
    %804 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%788, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %807 = cast(%793, dtype="bool") /* ty=Tensor[(504, ?), bool] */;
    %808 = shape_of(%var_5736, dtype="int32") /* ty=Tensor[(2), int32] */;
    %809 = cast(%var_5736, dtype="bool") /* ty=Tensor[(504, 1), bool] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %811 = @func_2842() /* ty=Tensor[(13, 5, 16), float32] */;
    %812 = @func_915(%781, %782) /* ty=Tensor[(6, 6, 11), bool] */;
    %813 = %783.0;
    %814 = %784.0;
    %815 = equal(%794, %795) /* ty=Tensor[(504, 13), bool] */;
    %816 = %802.2;
    %817 = floor_divide(%805, %806) /* ty=Tensor[(12, 14, 3), float32] */;
    %818 = less(%809, %810) /* ty=Tensor[(504, ?), bool] */;
    (%811, %812, meta[relay.Constant][52] /* ty=Tensor[(396), int64] */, %813, %814, %815, %816, meta[relay.Constant][53] /* ty=Tensor[(30), int16] */, meta[relay.Constant][54] /* ty=Tensor[(60, 2), int16] */, meta[relay.Constant][55] /* ty=Tensor[(180), int16] */, %817, %818)
  };
  %819(%var_5822, %var_5823, %var_5824) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(6, 6, 1), float32], Tensor[(13, 5, 16), float32], Tensor[(504, 13), bool], Tensor[(13, 5, 16), bool], Tensor[(30), int16], Tensor[(60, 2), int16], Tensor[(180), int16], Tensor[(12, 14, 3), float32], Tensor[(504, ?), bool]) */
}

def @func_2842() -> Tensor[(13, 5, 16), float32] {
  @func_818() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_7629() -> Tensor[(13, 5, 16), float32] {
  @func_7627() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_3473() -> (uint64,) {
  @func_3471() /* ty=(uint64,) */
}

def @func_3554() -> (Tensor[(8, 6, 15), float32],) {
  @func_3552() /* ty=(Tensor[(8, 6, 15), float32],) */
}

def @func_75(%var_73: uint32, %var_74: Tensor[(1, 10, 11), uint32]) -> (Tensor[(1, 10, 11), uint32],) {
  @func_71(%var_73, %var_74) /* ty=(Tensor[(1, 10, 11), uint32],) */
}

def @func_3856() -> (Tensor[(6, 6, 1), float32],) {
  %822 = fn () -> (Tensor[(6, 6, 1), float32],) {
    %820 = @func_2997() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(6, 6, 1), float32], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
    %821 = %820.1;
    (%821,)
  };
  %822() /* ty=(Tensor[(6, 6, 1), float32],) */
}

def @func_1267(%var_1265: uint64, %var_1266: Tensor[(36), uint64]) -> (Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) {
  @func_1263(%var_1265, %var_1266) /* ty=(Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64], Tensor[(13, 5, 16), int64]) */
}

def @func_5364() -> (Tensor[(13, 5, 16), uint64], Tensor[(13, 5, 16), float32], Tensor[(189), float64]) {
  %835 = fn () -> (Tensor[(13, 5, 16), uint64], Tensor[(13, 5, 16), float32], Tensor[(189), float64]) {
    %823 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
    %824 = @func_3502() /* ty=(Tensor[(189), uint64],) */;
    %825 = %824.0;
    %826 = cast(%825, dtype="float32") /* ty=Tensor[(189), float32] */;
    %827 = acosh(%826) /* ty=Tensor[(189), float32] */;
    %828 = cast(%825, dtype="float64") /* ty=Tensor[(189), float64] */;
    %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(1), int32] */;
    %830 = cast(%827, dtype="float64") /* ty=Tensor[(189), float64] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), float64] */;
    %832 = %823.3;
    %833 = @func_3634() /* ty=Tensor[(13, 5, 16), float32] */;
    %834 = subtract(%830, %831) /* ty=Tensor[(189), float64] */;
    (%832, %833, %834)
  };
  %835() /* ty=(Tensor[(13, 5, 16), uint64], Tensor[(13, 5, 16), float32], Tensor[(189), float64]) */
}

def @func_6923() -> (Tensor[(13, 5, 16), float32], uint64) {
  %836 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %837 = @func_4217() /* ty=(uint64,) */;
  %838 = %836.0;
  %839 = %837.0;
  (%838, %839)
}

def @func_4430(%var_4429: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) {
  %861 = fn (%var_4410: Tensor[(60, 12), float32]) -> (Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) {
    %840 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
    %841 = @func_3758() /* ty=(uint64,) */;
    %842 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
    %843 = cast(%842, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %844 = reshape(%843, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %845 = @func_2370(%844) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
    %846 = cast(%var_4410, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
    %847 = reshape(%846, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %848 = @func_2966(%847) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(6, 6, 11), bool], Tensor[(8, 6, 15), float32], Tensor[(720), float32], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
    %849 = cast(meta[relay.Constant][56] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %850 = cast(meta[relay.Constant][57] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
    %851 = reshape(%849, newshape=[]) /* ty=uint64 */;
    %852 = reshape(%850, newshape=[396]) /* ty=Tensor[(396), int64] */;
    %853 = @func_3988(%851, %852) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], uint64, Tensor[(36), uint64], Tensor[(396), int64]) */;
    %854 = %853.3;
    %855 = cast(%854, dtype="float64") /* ty=Tensor[(36), float64] */;
    %856 = %840.0;
    %857 = %841.0;
    %858 = %845.0;
    %859 = %848.3;
    %860 = sigmoid(%855) /* ty=Tensor[(36), float64] */;
    (%856, meta[relay.Constant][56] /* ty=uint64 */, meta[relay.Constant][57] /* ty=Tensor[(396), int64] */, %857, %842, %858, %859, %var_4410, %860)
  };
  %861(%var_4429) /* ty=(Tensor[(13, 5, 16), float32], uint64, Tensor[(396), int64], uint64, Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32], Tensor[(60, 12), float32], Tensor[(36), float64]) */
}

def @func_7116() -> uint64 {
  %862 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
  %862.0
}

def @func_2143(%var_2141: Tensor[(189), uint64], %var_2142: Tensor[(189), uint64]) -> (Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) {
  @func_2139(%var_2141, %var_2142) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(189), bool]) */
}

def @func_4558() -> (Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */
}

def @func_7365() -> Tensor[(13, 5, 16), float32] {
  %863 = @func_3841() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %863.1
}

def @func_1857(%var_1836: Tensor[(7, 9, 3), uint64], %var_1837: Tensor[(7, 9, 3), uint64]) -> (Tensor[(7, 9, 3), uint64], Tensor[(6, 6, 11), bool], Tensor[(396), int64], Tensor[(13, 5, 16), float32]) {
  %864 = cast(%var_1837, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %865 = shape_of(%var_1836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%var_1836, dtype="uint64") /* ty=Tensor[(7, 9, 3), uint64] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %868 = cast(meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %869 = cast(meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %870 = reshape(%868, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %871 = reshape(%869, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %872 = subtract(%866, %867) /* ty=Tensor[(7, 9, 3), uint64] */;
  %873 = @func_915(%870, %871) /* ty=Tensor[(6, 6, 11), bool] */;
  %874 = @func_818() /* ty=Tensor[(13, 5, 16), float32] */;
  (%872, %873, meta[relay.Constant][58] /* ty=Tensor[(396), int64] */, %874)
}

def @func_4987() -> uint64 {
  @func_4985() /* ty=uint64 */
}

def @func_6522() -> (Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool], Tensor[(8, 6, 15), float32]) {
  %875 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
  %876 = %875.2;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %878 = reshape(%877, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), float64] */;
  %879 = @func_1063(%878) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %880 = @func_6342() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */;
  %881 = %880.2;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %883 = sigmoid(%882) /* ty=Tensor[(40, 8), float32] */;
  %884 = cast(meta[relay.Constant][59] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(2), int32] */;
  %886 = cast(%883, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %888 = @func_1156() /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), float32]) */;
  %889 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
  %890 = %879.1;
  %891 = floor_divide(%886, %887) /* ty=Tensor[(40, 8), float32] */;
  %892 = %888.0;
  %893 = %889.2;
  (%876, %890, %891, %892, %893)
}

def @func_5594() -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
  %900 = fn () -> (Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) {
    %894 = @func_4970() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32]) */;
    %895 = @func_1558() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(13, 5, 16), float32]) */;
    %896 = @func_2271() /* ty=Tensor[(13, 5, 16), float32] */;
    %897 = @func_5266() /* ty=Tensor[(396), int64] */;
    %898 = %894.1;
    %899 = %895.2;
    (%896, %897, %898, %899)
  };
  %900() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(396), int64], Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */
}

def @func_3584(%var_3575: Tensor[(12, 8, 7), float32]) -> (Tensor[(12, 8, 7), float32],) {
  %901 = cast(%var_3575, dtype="float32") /* ty=Tensor[(12, 8, 7), float32] */;
  %902 = sigmoid(%901) /* ty=Tensor[(12, 8, 7), float32] */;
  (%902,)
}

def @func_7214(%var_7212: Tensor[(1210), uint64], %var_7213: Tensor[(144), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(9, 4), uint64], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(1210), uint64], Tensor[(13, 5, 16), float32], Tensor[(144), float32], Tensor[(110), uint32]) {
  %921 = fn (%var_7191: Tensor[(1210), uint64], %var_7197: Tensor[(144), float32]) -> (Tensor[(13, 5, 16), float32], Tensor[(9, 4), uint64], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(1210), uint64], Tensor[(13, 5, 16), float32], Tensor[(144), float32], Tensor[(110), uint32]) {
    %903 = @func_6157() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
    %904 = @func_2720() /* ty=(uint64, uint64, Tensor[(9, 4), uint64], Tensor[(13, 5, 16), uint64]) */;
    %905 = @func_1695() /* ty=(Tensor[(13, 5, 16), float32],) */;
    %906 = cast(%var_7191, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
    %907 = cast(%var_7191, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
    %908 = reshape(%906, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
    %909 = reshape(%907, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
    %910 = @func_1918(%908, %909) /* ty=(Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) */;
    %911 = cast(%var_7197, dtype="float32") /* ty=Tensor[(144), float32] */;
    %912 = cast(meta[relay.Constant][60] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %913 = reshape(%911, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
    %914 = reshape(%912, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
    %915 = @func_811(%913, %914) /* ty=(Tensor[(1, 16, 9), float32], Tensor[(13, 5, 16), float32], Tensor[(1, 10, 11), uint32], uint32, Tensor[(22, 5), uint32]) */;
    %916 = %903.1;
    %917 = %904.2;
    %918 = %905.0;
    %919 = %910.3;
    %920 = %915.1;
    (%916, %917, %918, %919, %var_7191, %920, %var_7197, meta[relay.Constant][60] /* ty=Tensor[(110), uint32] */)
  };
  %921(%var_7212, %var_7213) /* ty=(Tensor[(13, 5, 16), float32], Tensor[(9, 4), uint64], Tensor[(13, 5, 16), float32], Tensor[(6, 6, 11), bool], Tensor[(1210), uint64], Tensor[(13, 5, 16), float32], Tensor[(144), float32], Tensor[(110), uint32]) */
}

def @func_3115(%var_3113: Tensor[(3, 16, 7), int32], %var_3114: Tensor[(1040), bool]) -> (Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) {
  %933 = fn (%var_3086: Tensor[(3, 16, 7), int32], %var_3095: Tensor[(1040), bool]) -> (Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) {
    %922 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 16, 7), int32] */, dtype="int32") /* ty=Tensor[(3, 16, 7), int32] */;
    %923 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%var_3086, dtype="int32") /* ty=Tensor[(3, 16, 7), int32] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %926 = left_shift(%924, %925) /* ty=Tensor[(3, 16, 7), int32] */;
    %927 = cast(%926, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %928 = cast(%var_3095, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %929 = reshape(%928, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %930 = @func_2370(%929) /* ty=(Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool], Tensor[(13, 5, 16), bool]) */;
    %931 = acosh(%927) /* ty=Tensor[(3, 16, 7), float32] */;
    %932 = %930.0;
    (%931, %932, %var_3095)
  };
  %933(%var_3113, %var_3114) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(13, 5, 16), bool], Tensor[(1040), bool]) */
}

def @func_5722() -> (Tensor[(720), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32]) {
  %934 = cast(meta[relay.Constant][62] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %935 = cast(meta[relay.Constant][62] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %936 = reshape(%934, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %937 = reshape(%935, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %938 = @func_4744() /* ty=Tensor[(720), float32] */;
  %939 = @func_3888(%936, %937) /* ty=Tensor[(16, 2, 10), float32] */;
  (%938, %939, meta[relay.Constant][62] /* ty=Tensor[(320), float32] */)
}

def @func_7524() -> Tensor[(14, 6, 8), bool] {
  %940 = fn () -> Tensor[(14, 6, 8), bool] {
    @func_3787() /* ty=Tensor[(14, 6, 8), bool] */
  };
  %940() /* ty=Tensor[(14, 6, 8), bool] */
}

def @func_6994(%var_6987: Tensor[(1210), uint64]) -> (Tensor[(13, 5, 16), float32], Tensor[(11, 11, 10), uint64], Tensor[(1210), uint64]) {
  %941 = @func_4189() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(13, 5, 16), float32]) */;
  %942 = cast(%var_6987, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %943 = cast(%var_6987, dtype="uint64") /* ty=Tensor[(1210), uint64] */;
  %944 = reshape(%942, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %945 = reshape(%943, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint64] */;
  %946 = @func_1918(%944, %945) /* ty=(Tensor[(11, 11, 10), uint64], Tensor[(11, 11, 10), bool], Tensor[(8, 6, 15), float64], Tensor[(6, 6, 11), bool], Tensor[(189), uint64], Tensor[(11, 11, 10), float64]) */;
  %947 = %941.0;
  %948 = %946.0;
  (%947, %948, %var_6987)
}

def @func_1385() -> Tensor[(13, 5, 16), float32] {
  %949 = fn () -> Tensor[(13, 5, 16), float32] {
    @func_788() /* ty=Tensor[(13, 5, 16), float32] */
  };
  %949() /* ty=Tensor[(13, 5, 16), float32] */
}

def @func_6343() -> (Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) {
  %961 = fn () -> (Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) {
    %950 = @func_4556() /* ty=(Tensor[(13, 5, 16), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %951 = %950.1;
    %952 = cast(%951, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
    %953 = cast(meta[relay.Constant][63] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
    %954 = cast(meta[relay.Constant][63] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
    %955 = reshape(%953, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %956 = reshape(%954, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %957 = @func_5434() /* ty=(Tensor[(13, 5, 16), bool],) */;
    %958 = asin(%952) /* ty=Tensor[(8, 6, 15), float32] */;
    %959 = @func_3888(%955, %956) /* ty=Tensor[(16, 2, 10), float32] */;
    %960 = %957.0;
    (%958, %959, meta[relay.Constant][63] /* ty=Tensor[(40, 8), float32] */, %960)
  };
  %961() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(16, 2, 10), float32], Tensor[(40, 8), float32], Tensor[(13, 5, 16), bool]) */
}

def @func_71(%var_55: uint32, %var_56: Tensor[(1, 10, 11), uint32]) -> (Tensor[(1, 10, 11), uint32],) {
  %962 = cast(%var_55, dtype="uint32") /* ty=uint32 */;
  %963 = cast(%var_56, dtype="uint32") /* ty=Tensor[(1, 10, 11), uint32] */;
  %964 = left_shift(%962, %963) /* ty=Tensor[(1, 10, 11), uint32] */;
  (%964,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen397/build/output.py", line 2573, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:13:46] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

