==========mod==========
#[version = "0.0.5"]
def @func_4134(%var_4104: Tensor[(4, 9, 13), float64], %var_4115: Tensor[(195, 2), float32]) -> (Tensor[(2, 15, 13), float32], Tensor[(195, 2), float32], Tensor[(80), float64], Tensor[(168, 1), int16], Tensor[(90, 2), float64], Tensor[(4, 9, 13), float64]) {
  %0 = cast(%var_4115, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %1 = cast(%var_4115, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %2 = reshape(%0, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %3 = reshape(%1, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %4 = @func_220(%2, %3) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
  %7 = %4.0;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(90, 2), float64] */, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %10 = reshape(%5, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %11 = reshape(%6, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %12 = reshape(%8, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %13 = reshape(%9, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %14 = @func_1033(%10, %11, %12, %13) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %15 = cast(%var_4104, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %16 = log(%15) /* ty=Tensor[(4, 9, 13), float64] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %18 = %14.3;
  %19 = asin(%17) /* ty=Tensor[(4, 9, 13), float64] */;
  (%7, %var_4115, %18, meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, meta[relay.Constant][1] /* ty=Tensor[(90, 2), float64] */, %19)
}

def @func_10455() -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64]) {
  %20 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %21 = @func_6385() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %22 = %20.0;
  %23 = %21.2;
  (%22, %23)
}

def @func_8496(%var_8357: Tensor[(2, 40), float64], %var_8414: Tensor[(2, 40), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) {
  %24 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %27 = reshape(%25, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %28 = reshape(%26, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %30 = cast(meta[relay.Constant][4] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %31 = cast(meta[relay.Constant][5] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %32 = reshape(%29, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
  %33 = reshape(%30, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %34 = reshape(%31, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %35 = @func_2669(%32, %33, %34) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
  %36 = %35.5;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %41 = cast(meta[relay.Constant][6] /* ty=Tensor[(100, 2), uint8] */, dtype="uint8") /* ty=Tensor[(100, 2), uint8] */;
  %42 = reshape(%41, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
  %43 = @func_1492(%42) /* ty=(Tensor[(4, 10, 5), uint8],) */;
  %44 = @func_5936() /* ty=(Tensor[(660), int32],) */;
  %45 = %44.0;
  %46 = cast(%var_8357, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %47 = reshape(%46, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %48 = @func_299(%47) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %49 = %48.0;
  %50 = cast(%45, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %51 = cast(%49, dtype="uint32") /* ty=Tensor[(10, 8, 1), uint32] */;
  %52 = cast(%49, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
  %53 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(2), int32] */;
  %54 = cast(%var_8357, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %56 = floor_divide(%54, %55) /* ty=Tensor[(2, 40), float32] */;
  %57 = cast(%var_8414, dtype="int32") /* ty=Tensor[(2, 40), int32] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(2), int32] */;
  %59 = cast(%56, dtype="int32") /* ty=Tensor[(2, 40), int32] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %61 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 40), float32] */, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %62 = shape_of(%56, dtype="int32") /* ty=Tensor[(2), int32] */;
  %63 = cast(%56, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %65 = mod(%63, %64) /* ty=Tensor[(2, 40), float64] */;
  %66 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 40), float64] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(2), int32] */;
  %68 = cast(%65, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %70 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
  %71 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%36, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = cast(meta[relay.Constant][10] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %75 = reshape(%74, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
  %76 = @func_4874(%75) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
  %77 = cast(%56, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %78 = %24.0;
  %79 = @func_1356(%27, %28) /* ty=Tensor[(6, 11, 7), float64] */;
  %80 = logical_and(%39, %40) /* ty=Tensor[(2, 15, 13), bool] */;
  %81 = %43.0;
  %82 = bitwise_xor(%50, %51) /* ty=Tensor[(10, 8, 660), uint32] */;
  %83 = add(%59, %60) /* ty=Tensor[(2, 40), int32] */;
  %84 = floor_mod(%68, %69) /* ty=Tensor[(2, 40), float32] */;
  %85 = greater_equal(%72, %73) /* ty=Tensor[(2, 15, 13), bool] */;
  %86 = %76.0;
  %87 = log(%77) /* ty=Tensor[(2, 40), float64] */;
  (%78, %79, meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, meta[relay.Constant][3] /* ty=Tensor[(120), float32] */, meta[relay.Constant][4] /* ty=Tensor[(1800), float32] */, %80, %81, meta[relay.Constant][6] /* ty=Tensor[(100, 2), uint8] */, %82, %83, %84, %85, %86, meta[relay.Constant][10] /* ty=Tensor[(624), int64] */, %87)
}

def @func_11492() -> (Tensor[(15, 4, 11), int32],) {
  %88 = @func_7241() /* ty=Tensor[(15, 4, 11), int32] */;
  (%88,)
}

def @func_11542() -> Tensor[(15, 4, 11), float32] {
  %89 = @func_11507() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) */;
  %90 = %89.1;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  acos(%91) /* ty=Tensor[(15, 4, 11), float32] */
}

def @func_7658(%var_7648: float64, %var_7649: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
  %92 = cast(%var_7648, dtype="float64") /* ty=float64 */;
  %93 = cast(%var_7649, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
  %94 = subtract(%92, %93) /* ty=Tensor[(9, 15, 6), float64] */;
  (%94,)
}

def @func_8650() -> (Tensor[(15, 4, 11), bool], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
  %95 = @func_8594() /* ty=(Tensor[(15, 4, 11), bool],) */;
  %96 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %97 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %98 = %95.0;
  %99 = %96.0;
  %100 = %97.0;
  (%98, %99, %100)
}

def @func_5759(%var_5752: Tensor[(11, 16, 15), bool]) -> (Tensor[(11, 16, 15), bool],) {
  %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 16, 15), bool] */, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %102 = shape_of(%var_5752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_5752, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = logical_and(%103, %104) /* ty=Tensor[(11, 16, 15), bool] */;
  (%105,)
}

def @func_10237() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float32], Tensor[(13, 2, 2), int32]) {
  %106 = @func_7085() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %107 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %108 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
  %109 = %106.0;
  (%107, %108, %109)
}

def @func_5245(%var_5236: Tensor[(168), int16], %var_5238: Tensor[(3, 60), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) {
  %110 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %111 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %112 = reshape(%111, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
  %113 = @func_4874(%112) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
  %114 = cast(%var_5236, dtype="int16") /* ty=Tensor[(168), int16] */;
  %115 = cast(%var_5236, dtype="int16") /* ty=Tensor[(168), int16] */;
  %116 = cast(meta[relay.Constant][13] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %117 = cast(%var_5238, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
  %118 = reshape(%114, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %119 = reshape(%115, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %120 = reshape(%116, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %121 = reshape(%117, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %122 = @func_1033(%118, %119, %120, %121) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %123 = %122.0;
  %124 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), int64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %125 = cast(%123, dtype="float64") /* ty=Tensor[(14, 12, ?), float64] */;
  %126 = %110.0;
  %127 = %113.1;
  %128 = power(%124, %125) /* ty=Tensor[(14, 12, 624), float64] */;
  (%126, %127, %var_5236, meta[relay.Constant][13] /* ty=Tensor[(390), float32] */, %var_5238, %128)
}

def @func_7824() -> (Tensor[(15, 4, 11), int32],) {
  %129 = @func_7241() /* ty=Tensor[(15, 4, 11), int32] */;
  (%129,)
}

def @func_10793(%var_10775: int8, %var_10776: Tensor[(40), int8], %var_10783: Tensor[(168, 1), int16], %var_10784: Tensor[(30, 6), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], int8, Tensor[(40), int8], Tensor[(14, 12, 624), float64], Tensor[(168, 1), int16], Tensor[(30, 6), float64], Tensor[(4, 10, 5), uint8]) {
  %130 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %131 = cast(%var_10775, dtype="int8") /* ty=int8 */;
  %132 = cast(%var_10776, dtype="int8") /* ty=Tensor[(40), int8] */;
  %133 = reshape(%131, newshape=[]) /* ty=int8 */;
  %134 = reshape(%132, newshape=[1, 40]) /* ty=Tensor[(1, 40), int8] */;
  %135 = @func_9831(%133, %134) /* ty=(Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) */;
  %136 = cast(%var_10783, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
  %137 = cast(%var_10784, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %138 = reshape(%136, newshape=[168]) /* ty=Tensor[(168), int16] */;
  %139 = reshape(%137, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
  %140 = @func_5245(%138, %139) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) */;
  %141 = @func_7062() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
  %142 = %130.2;
  %143 = %135.4;
  %144 = %140.5;
  %145 = %141.1;
  (%142, %143, %var_10775, %var_10776, %144, %var_10783, %var_10784, %145)
}

def @func_5697(%var_5694: Tensor[(14), uint64]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], Tensor[(14), uint64], Tensor[(112), uint64]) {
  %146 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %147 = %146.1;
  %148 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = equal(%150, %151) /* ty=Tensor[(15, 4, 11), bool] */;
  %153 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = cast(%var_5694, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %158 = cast(meta[relay.Constant][15] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %159 = reshape(%157, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), uint64] */;
  %160 = reshape(%158, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), uint64] */;
  %161 = @func_5605(%159, %160) /* ty=(Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) */;
  %162 = logical_or(%155, %156) /* ty=Tensor[(15, 4, 11), bool] */;
  %163 = %161.1;
  (%162, %163, %var_5694, meta[relay.Constant][15] /* ty=Tensor[(112), uint64] */)
}

def @func_12907(%var_12845: Tensor[(390), float32], %var_12873: Tensor[(35), float32], %var_12891: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) {
  %164 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %165 = reshape(%164, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), float64] */;
  %166 = @func_11771(%165) /* ty=(Tensor[(4, 4, 12), float64],) */;
  %167 = cast(meta[relay.Constant][17] /* ty=Tensor[(56, 1), float32] */, dtype="float32") /* ty=Tensor[(56, 1), float32] */;
  %168 = cast(%var_12845, dtype="float32") /* ty=Tensor[(390), float32] */;
  %169 = reshape(%167, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %170 = reshape(%168, newshape=[5, 78]) /* ty=Tensor[(5, 78), float32] */;
  %171 = @func_8788(%169, %170) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) */;
  %172 = %171.3;
  %173 = cast(%var_12873, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(1), int32] */;
  %175 = cast(%172, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %177 = cast(%var_12845, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %178 = cast(meta[relay.Constant][17] /* ty=Tensor[(56, 1), float32] */, dtype="uint32") /* ty=Tensor[(56, 1), uint32] */;
  %179 = multiply(%177, %178) /* ty=Tensor[(56, 390), uint32] */;
  %180 = cast(%179, dtype="uint64") /* ty=Tensor[(56, 390), uint64] */;
  %181 = cast(meta[relay.Constant][17] /* ty=Tensor[(56, 1), float32] */, dtype="uint64") /* ty=Tensor[(56, 1), uint64] */;
  %182 = cast(%var_12891, dtype="float32") /* ty=Tensor[(273), float32] */;
  %183 = reshape(%182, newshape=[273]) /* ty=Tensor[(273), float32] */;
  %184 = @func_5487(%183) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */;
  %185 = %184.7;
  %186 = cast(%185, dtype="int64") /* ty=Tensor[(2288), int64] */;
  %187 = cast(meta[relay.Constant][17] /* ty=Tensor[(56, 1), float32] */, dtype="int64") /* ty=Tensor[(56, 1), int64] */;
  %188 = @func_8547() /* ty=Tensor[(80), float64] */;
  %189 = %166.0;
  %190 = maximum(%175, %176) /* ty=Tensor[(35), uint64] */;
  %191 = left_shift(%180, %181) /* ty=Tensor[(56, 390), uint64] */;
  %192 = bitwise_or(%186, %187) /* ty=Tensor[(56, 2288), int64] */;
  (%188, %189, meta[relay.Constant][16] /* ty=Tensor[(192), float64] */, %190, %191, %var_12891, %192)
}

def @func_8547() -> Tensor[(80), float64] {
  %193 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %193.4
}

def @func_10153() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(7, 5), float32], Tensor[(2, 6, 16), bool], Tensor[(192), float32]) {
  %194 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %195 = reshape(%194, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %196 = cast(meta[relay.Constant][19] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %197 = cast(meta[relay.Constant][19] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %198 = reshape(%196, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %199 = reshape(%197, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %200 = @func_4087(%198, %199) /* ty=(Tensor[(2, 6, 16), bool],) */;
  %201 = @func_6219() /* ty=Tensor[(13, 2, 2), int32] */;
  %202 = @func_3456(%195) /* ty=Tensor[(7, 1, 5), float32] */;
  %203 = %200.0;
  (%201, %202, meta[relay.Constant][18] /* ty=Tensor[(7, 5), float32] */, %203, meta[relay.Constant][19] /* ty=Tensor[(192), float32] */)
}

def @func_6728() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) {
  %204 = cast(meta[relay.Constant][20] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %205 = reshape(%204, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %206 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %207 = @func_3456(%205) /* ty=Tensor[(7, 1, 5), float32] */;
  (%206, %207, meta[relay.Constant][20] /* ty=Tensor[(35), float32] */)
}

def @func_894(%var_833: Tensor[(15, 6, 2), float64], %var_852: Tensor[(390), float32], %var_857: Tensor[(20, 4), float64]) -> (Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) {
  %208 = cast(%var_852, dtype="float32") /* ty=Tensor[(390), float32] */;
  %209 = cast(%var_852, dtype="float32") /* ty=Tensor[(390), float32] */;
  %210 = reshape(%208, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %211 = reshape(%209, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %212 = @func_220(%210, %211) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %213 = cast(%var_857, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
  %214 = reshape(%213, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %215 = @func_299(%214) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %218 = cast(%var_833, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
  %219 = sigmoid(%218) /* ty=Tensor[(15, 6, 2), float32] */;
  %220 = cast(%var_833, dtype="float64") /* ty=Tensor[(15, 6, 2), float64] */;
  %221 = cosh(%220) /* ty=Tensor[(15, 6, 2), float64] */;
  %222 = cast(%221, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
  %223 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%219, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %226 = cast(%216, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %227 = reshape(%226, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %228 = @func_299(%227) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %229 = %212.0;
  %230 = cosh(%217) /* ty=Tensor[(10, 8, 1), float64] */;
  %231 = maximum(%224, %225) /* ty=Tensor[(15, 6, 2), uint16] */;
  %232 = %228.0;
  (%229, %var_852, %var_857, %230, %231, %232)
}

def @func_9143() -> (Tensor[(15, 4, 11), uint32],) {
  %233 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
  (%233,)
}

def @func_4770() -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  %234 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %235 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %236 = reshape(%235, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %238 = reshape(%237, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %239 = @func_299(%238) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %240 = %234.0;
  %241 = @func_1070(%236) /* ty=Tensor[(15, 4, 11), int32] */;
  %242 = %239.0;
  (%240, %241, meta[relay.Constant][21] /* ty=Tensor[(660), int32] */, %242, meta[relay.Constant][22] /* ty=Tensor[(80), float64] */)
}

def @func_3456(%var_3453: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
  %243 = cast(%var_3453, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  sigmoid(%243) /* ty=Tensor[(7, 1, 5), float32] */
}

def @func_10298() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %244 = @func_6035() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %245 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
  %246 = %244.0;
  (%245, %246)
}

def @func_8199() -> (Tensor[(15, 4, 11), int32],) {
  %247 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %248 = %247.0;
  (%248,)
}

def @func_11696() -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int64], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32]) {
  %249 = @func_11111() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */;
  %250 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %251 = @func_7085() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %252 = %249.1;
  %253 = %250.1;
  %254 = %251.1;
  %255 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
  (%252, %253, %254, %255)
}

def @func_5333() -> (Tensor[(13, 2, 2), int32],) {
  %256 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %257 = %256.0;
  (%257,)
}

def @func_11577() -> Tensor[(13, 2, 2), int32] {
  @func_10883() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_9098(%var_9079: Tensor[(10, 13, 2), float64]) -> Tensor[(10, 13, 2), float64] {
  %258 = cast(%var_9079, dtype="float64") /* ty=Tensor[(10, 13, 2), float64] */;
  rsqrt(%258) /* ty=Tensor[(10, 13, 2), float64] */
}

def @func_8741() -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) {
  %259 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %260 = cast(meta[relay.Constant][23] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %261 = cast(meta[relay.Constant][23] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %262 = reshape(%260, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %263 = reshape(%261, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %264 = %259.0;
  %265 = @func_1356(%262, %263) /* ty=Tensor[(6, 11, 7), float64] */;
  (%264, %265, meta[relay.Constant][23] /* ty=Tensor[(462), float32] */)
}

def @func_6773() -> Tensor[(15, 4, 11), uint32] {
  %266 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %267 = %266.0;
  %268 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 4, 11), bool] */, dtype="uint32") /* ty=Tensor[(15, 4, 11), uint32] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="uint32") /* ty=Tensor[(15, 4, 11), uint32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%270, %271) /* ty=Tensor[(15, 4, 11), uint32] */
}

def @func_7085() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %272 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %273 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %274 = %272.0;
  %275 = %273.0;
  (%274, %275)
}

def @func_299(%var_270: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
  %276 = cast(%var_270, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %277 = log10(%276) /* ty=Tensor[(10, 8, 1), float64] */;
  (%277,)
}

def @func_1070(%var_1059: Tensor[(15, 4, 11), int32]) -> Tensor[(15, 4, 11), int32] {
  %278 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 4, 11), int32] */, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %279 = shape_of(%var_1059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_1059, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%280, %281) /* ty=Tensor[(15, 4, 11), int32] */
}

def @func_12606() -> (Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32]) {
  %282 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %283 = %282.0;
  %284 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
  (%283, %284)
}

def @func_5750() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) {
  %285 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %288 = acosh(%287) /* ty=Tensor[(15, 4, 11), float32] */;
  %289 = cast(%288, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %290 = reshape(%289, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %291 = @func_1070(%290) /* ty=Tensor[(15, 4, 11), int32] */;
  (%288, %291)
}

def @func_2795(%var_2784: Tensor[(11, 13, 16), float32]) -> (Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) {
  %292 = cast(%var_2784, dtype="float32") /* ty=Tensor[(11, 13, 16), float32] */;
  %293 = cast(meta[relay.Constant][26] /* ty=Tensor[(200), uint8] */, dtype="uint8") /* ty=Tensor[(200), uint8] */;
  %294 = reshape(%293, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
  %295 = @func_1492(%294) /* ty=(Tensor[(4, 10, 5), uint8],) */;
  %296 = erf(%292) /* ty=Tensor[(11, 13, 16), float32] */;
  %297 = %295.0;
  (%296, %297, meta[relay.Constant][26] /* ty=Tensor[(200), uint8] */)
}

def @func_6385() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  %298 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %299 = reshape(%298, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %300 = @func_299(%299) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %301 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %302 = %300.0;
  (%301, %302, meta[relay.Constant][27] /* ty=Tensor[(80), float64] */)
}

def @func_7133(%var_7101: Tensor[(10, 8, 1), float32], %var_7113: Tensor[(120), float32]) -> (Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) {
  %303 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %304 = %303.0;
  %305 = cast(%var_7101, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %309 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 4), int32] */;
  %310 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %311 = cast(%var_7113, dtype="float32") /* ty=Tensor[(120), float32] */;
  %312 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %313 = reshape(%309, newshape=[13, 2, 2]) /* ty=Tensor[(13, 2, 2), int32] */;
  %314 = reshape(%310, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %315 = reshape(%311, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %316 = reshape(%312, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %317 = @func_6536(%313, %314, %315, %316) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) */;
  %318 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %319 = cast(%var_7113, dtype="float32") /* ty=Tensor[(120), float32] */;
  %320 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %321 = cast(meta[relay.Constant][31] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %322 = reshape(%319, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
  %323 = reshape(%320, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %324 = reshape(%321, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %325 = @func_2669(%322, %323, %324) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
  %326 = subtract(%307, %308) /* ty=Tensor[(10, 8, ?), uint16] */;
  %327 = %317.1;
  %328 = %318.0;
  %329 = %325.0;
  (%326, %327, meta[relay.Constant][28] /* ty=Tensor[(13, 4), int32] */, meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, %var_7113, meta[relay.Constant][30] /* ty=Tensor[(1800), float32] */, %328, %329, meta[relay.Constant][31] /* ty=Tensor[(390), float32] */)
}

def @func_12098(%var_12074: Tensor[(6, 28), int16], %var_12095: Tensor[(120), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(660), int32], Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), uint32], Tensor[(1, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(462), float32], Tensor[(200), uint8], Tensor[(180), float64], Tensor[(80), float32], Tensor[(120), float32]) {
  %330 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %331 = cast(meta[relay.Constant][32] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %332 = reshape(%331, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %333 = @func_4707(%332) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %334 = %333.3;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %336 = @func_10391() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %337 = cast(%var_12074, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
  %338 = cast(meta[relay.Constant][33] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %339 = cast(meta[relay.Constant][34] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %340 = cast(meta[relay.Constant][35] /* ty=Tensor[(200), uint8] */, dtype="uint8") /* ty=Tensor[(200), uint8] */;
  %341 = reshape(%337, newshape=[6, 28]) /* ty=Tensor[(6, 28), int16] */;
  %342 = reshape(%338, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %343 = reshape(%339, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %344 = reshape(%340, newshape=[200]) /* ty=Tensor[(200), uint8] */;
  %345 = @func_7002(%341, %342, %343, %344) /* ty=(Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) */;
  %346 = cast(meta[relay.Constant][36] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %347 = cast(%var_12095, dtype="float32") /* ty=Tensor[(120), float32] */;
  %348 = reshape(%346, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
  %349 = reshape(%347, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %350 = @func_7133(%348, %349) /* ty=(Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) */;
  %351 = %330.0;
  %352 = asinh(%335) /* ty=Tensor[(15, 4, 11), float32] */;
  %353 = %336.0;
  %354 = %345.3;
  %355 = %350.3;
  (%351, meta[relay.Constant][32] /* ty=Tensor[(660), int32] */, %352, %353, %354, %var_12074, meta[relay.Constant][33] /* ty=Tensor[(390), float32] */, meta[relay.Constant][34] /* ty=Tensor[(462), float32] */, meta[relay.Constant][35] /* ty=Tensor[(200), uint8] */, %355, meta[relay.Constant][36] /* ty=Tensor[(80), float32] */, %var_12095)
}

def @func_5605(%var_5587: Tensor[(1, 2, 7), uint64], %var_5588: Tensor[(8, 2, 7), uint64]) -> (Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) {
  %356 = cast(%var_5587, dtype="uint64") /* ty=Tensor[(1, 2, 7), uint64] */;
  %357 = cast(%var_5588, dtype="uint64") /* ty=Tensor[(8, 2, 7), uint64] */;
  %358 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %359 = cast(meta[relay.Constant][38] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %360 = reshape(%358, newshape=[]) /* ty=int8 */;
  %361 = reshape(%359, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
  %362 = maximum(%356, %357) /* ty=Tensor[(8, 2, 7), uint64] */;
  %363 = @func_2085(%360, %361) /* ty=Tensor[(4, 5, 2), bool] */;
  (%362, %363, meta[relay.Constant][37] /* ty=int8 */, meta[relay.Constant][38] /* ty=Tensor[(40), int8] */)
}

def @func_4821() -> (Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) {
  %364 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %365 = %364.1;
  %366 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 4, 11), int32] */, dtype="int64") /* ty=Tensor[(15, 4, 11), int64] */;
  %371 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%365, dtype="int64") /* ty=Tensor[(15, 4, 11), int64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %374 = less(%368, %369) /* ty=Tensor[(15, 4, 11), bool] */;
  %375 = bitwise_and(%372, %373) /* ty=Tensor[(15, 4, 11), int64] */;
  (%374, %375)
}

def @func_9592() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %376 = @func_9024() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) */;
  %377 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %378 = %376.0;
  %379 = %377.0;
  (%378, %379)
}

def @func_7506() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %380 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %381 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %382 = %380.0;
  %383 = %381.0;
  %384 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
  (%382, %383, %384)
}

def @func_10031() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64]) {
  %385 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %386 = @func_7521() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %387 = cast(meta[relay.Constant][40] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %388 = cast(meta[relay.Constant][40] /* ty=Tensor[(80), float64] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %389 = reshape(%387, newshape=[2, 40]) /* ty=Tensor[(2, 40), float64] */;
  %390 = reshape(%388, newshape=[2, 40]) /* ty=Tensor[(2, 40), float32] */;
  %391 = @func_8496(%389, %390) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) */;
  %392 = %385.0;
  %393 = %386.1;
  %394 = %391.13;
  (%392, %393, %394, meta[relay.Constant][40] /* ty=Tensor[(80), float64] */)
}

def @func_8594() -> (Tensor[(15, 4, 11), bool],) {
  %395 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %396 = %395.0;
  (%396,)
}

def @func_13008() -> Tensor[(13, 2, 2), int32] {
  %397 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %397.0
}

def @func_4087(%var_4076: Tensor[(2, 6, 16), float32], %var_4077: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), bool],) {
  %398 = cast(%var_4077, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %399 = shape_of(%var_4076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_4076, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = mod(%400, %401) /* ty=Tensor[(2, 6, 16), float32] */;
  %403 = cast(%402, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %404 = shape_of(%var_4076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%var_4076, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = less_equal(%405, %406) /* ty=Tensor[(2, 6, 16), bool] */;
  (%407,)
}

def @func_8858() -> Tensor[(6, 12, 1), float64] {
  %408 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
  log(%408) /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_5366() -> (Tensor[(13, 2, 2), int32],) {
  %409 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %410 = %409.0;
  (%410,)
}

def @func_7427(%var_7398: Tensor[(10, 9, 9), float32]) -> (Tensor[(10, 9, 9), float32], Tensor[(13, 2, 2), int32]) {
  %411 = cast(%var_7398, dtype="float32") /* ty=Tensor[(10, 9, 9), float32] */;
  %412 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %413 = exp(%411) /* ty=Tensor[(10, 9, 9), float32] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_4707(%var_4688: Tensor[(660), int32]) -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) {
  %415 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %416 = cast(%var_4688, dtype="int32") /* ty=Tensor[(660), int32] */;
  %417 = reshape(%416, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %418 = @func_1070(%417) /* ty=Tensor[(15, 4, 11), int32] */;
  %419 = cast(%418, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %420 = reshape(%419, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %421 = %415.0;
  %422 = @func_1070(%420) /* ty=Tensor[(15, 4, 11), int32] */;
  (%421, %418, %var_4688, %422)
}

def @func_5410() -> (Tensor[(660), int32],) {
  %423 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %424 = %423.2;
  (%424,)
}

def @func_11771(%var_11746: Tensor[(4, 4, 12), float64]) -> (Tensor[(4, 4, 12), float64],) {
  %425 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 4, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %426 = shape_of(%var_11746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_11746, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %429 = floor_mod(%427, %428) /* ty=Tensor[(4, 4, 12), float64] */;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %431 = erf(%430) /* ty=Tensor[(4, 4, 12), float64] */;
  (%431,)
}

def @func_11902() -> (Tensor[(13, 2, 2), int32],) {
  %432 = @func_11212() /* ty=Tensor[(13, 2, 2), int32] */;
  (%432,)
}

def @func_4571(%var_4563: Tensor[(8, 13, 6), int64], %var_4564: Tensor[(8, 13, 6), int64]) -> Tensor[(8, 13, 6), int64] {
  %433 = cast(%var_4564, dtype="int64") /* ty=Tensor[(8, 13, 6), int64] */;
  %434 = shape_of(%var_4563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_4563, dtype="int64") /* ty=Tensor[(8, 13, 6), int64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%435, %436) /* ty=Tensor[(8, 13, 6), int64] */
}

def @func_2085(%var_2077: int8, %var_2078: Tensor[(4, 5, 2), int8]) -> Tensor[(4, 5, 2), bool] {
  %437 = cast(%var_2077, dtype="bool") /* ty=bool */;
  %438 = cast(%var_2078, dtype="bool") /* ty=Tensor[(4, 5, 2), bool] */;
  less(%437, %438) /* ty=Tensor[(4, 5, 2), bool] */
}

def @func_4874(%var_4868: Tensor[(24, 26), int64]) -> (Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) {
  %439 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %440 = cast(%var_4868, dtype="int64") /* ty=Tensor[(24, 26), int64] */;
  %441 = cast(%var_4868, dtype="int64") /* ty=Tensor[(24, 26), int64] */;
  %442 = reshape(%440, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int64] */;
  %443 = reshape(%441, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int64] */;
  %444 = @func_4571(%442, %443) /* ty=Tensor[(8, 13, 6), int64] */;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(8, 13, 6), bool] */;
  %446 = shape_of(%var_4868, dtype="int32") /* ty=Tensor[(2), int32] */;
  %447 = cast(%var_4868, dtype="bool") /* ty=Tensor[(24, 26), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %449 = %439.1;
  %450 = less(%447, %448) /* ty=Tensor[(24, 26), bool] */;
  (%449, %450)
}

def @func_11317(%var_11307: Tensor[(390), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64], Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(10, 8, 1), float32]) {
  %451 = @func_6399() /* ty=(Tensor[(80), float64], Tensor[(13, 2, 2), int32]) */;
  %452 = cast(%var_11307, dtype="float32") /* ty=Tensor[(390), float32] */;
  %453 = reshape(%452, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %454 = @func_3988(%453) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
  %455 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
  %456 = %451.0;
  %457 = %454.1;
  %458 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
  (%455, %456, %457, %var_11307, %458)
}

def @func_12257() -> Tensor[(6, 12, 1), float64] {
  @func_8858() /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_3988(%var_3984: Tensor[(390), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) {
  %459 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %460 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %463 = cast(%var_3984, dtype="float32") /* ty=Tensor[(390), float32] */;
  %464 = cast(%var_3984, dtype="float32") /* ty=Tensor[(390), float32] */;
  %465 = reshape(%463, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %466 = reshape(%464, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %467 = @func_220(%465, %466) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %468 = right_shift(%461, %462) /* ty=Tensor[(4, 14, 5), int64] */;
  %469 = %467.0;
  (%468, %469, %var_3984)
}

def @func_6712() -> Tensor[(13, 2, 2), int32] {
  @func_6219() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_6536(%var_6502: Tensor[(13, 2, 2), int32], %var_6519: Tensor[(180), float64], %var_6531: Tensor[(6, 20), float32], %var_6532: Tensor[(1800), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) {
  %470 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %471 = @func_6035() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %472 = %471.0;
  %473 = cast(%var_6502, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %477 = cast(%var_6519, dtype="float64") /* ty=Tensor[(180), float64] */;
  %478 = cast(meta[relay.Constant][45] /* ty=Tensor[(390, 1), float32] */, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %479 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %480 = reshape(%477, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
  %481 = reshape(%478, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %482 = reshape(%479, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
  %483 = @func_894(%480, %481, %482) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
  %484 = cast(%var_6531, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
  %485 = cast(%var_6532, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %486 = cast(meta[relay.Constant][45] /* ty=Tensor[(390, 1), float32] */, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %487 = reshape(%484, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
  %488 = reshape(%485, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %489 = reshape(%486, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %490 = @func_2669(%487, %488, %489) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
  %491 = %470.0;
  %492 = add(%475, %476) /* ty=Tensor[(13, 2, 2), int32] */;
  %493 = %483.5;
  %494 = %490.4;
  (%491, %492, %493, %var_6519, meta[relay.Constant][45] /* ty=Tensor[(390, 1), float32] */, meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, %494, %var_6531, %var_6532)
}

def @func_220(%var_210: Tensor[(2, 15, 13), float32], %var_211: Tensor[(2, 15, 13), float32]) -> (Tensor[(2, 15, 13), float32],) {
  %495 = cast(%var_211, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %496 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_210, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %499 = floor_divide(%497, %498) /* ty=Tensor[(2, 15, 13), float32] */;
  (%499,)
}

def @func_12718(%var_12712: Tensor[(56), float32]) -> (Tensor[(462), float32], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(390), float32]) {
  %500 = @func_8741() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) */;
  %501 = cast(%var_12712, dtype="float32") /* ty=Tensor[(56), float32] */;
  %502 = cast(meta[relay.Constant][47] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %503 = reshape(%501, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %504 = reshape(%502, newshape=[5, 78]) /* ty=Tensor[(5, 78), float32] */;
  %505 = @func_8788(%503, %504) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) */;
  %506 = %500.2;
  %507 = %505.1;
  (%506, %507, %var_12712, meta[relay.Constant][47] /* ty=Tensor[(390), float32] */)
}

def @func_2828(%var_2819: Tensor[(1, 10, 16), float32]) -> (Tensor[(?, 10, 16), bool],) {
  %508 = cast(%var_2819, dtype="float32") /* ty=Tensor[(1, 10, 16), float32] */;
  %509 = sigmoid(%508) /* ty=Tensor[(1, 10, 16), float32] */;
  %510 = cast(%var_2819, dtype="bool") /* ty=Tensor[(1, 10, 16), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(1, 10, 16), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = logical_or(%512, %513) /* ty=Tensor[(?, 10, 16), bool] */;
  (%514,)
}

def @func_7757() -> (Tensor[(13, 2, 2), int32], Tensor[(390), float32], Tensor[(390), float32]) {
  %515 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %516 = cast(meta[relay.Constant][48] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %517 = reshape(%516, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %518 = @func_3988(%517) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
  %519 = %515.0;
  %520 = %518.2;
  (%519, %520, meta[relay.Constant][48] /* ty=Tensor[(390), float32] */)
}

def @func_10853(%var_10838: Tensor[(168), int16], %var_10847: Tensor[(35), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(10, 4), int8], int8, Tensor[(168), int16], Tensor[(180), float64], Tensor[(180), float64], Tensor[(462), float32], Tensor[(35), float32]) {
  %521 = @func_10817() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %522 = cast(meta[relay.Constant][49] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %523 = cast(%var_10838, dtype="int16") /* ty=Tensor[(168), int16] */;
  %524 = cast(meta[relay.Constant][50] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %525 = reshape(%522, newshape=[]) /* ty=int8 */;
  %526 = reshape(%523, newshape=[168]) /* ty=Tensor[(168), int16] */;
  %527 = reshape(%524, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %528 = @func_9354(%525, %526, %527) /* ty=(Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) */;
  %529 = cast(meta[relay.Constant][51] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %530 = cast(%var_10847, dtype="float32") /* ty=Tensor[(35), float32] */;
  %531 = reshape(%529, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %532 = reshape(%530, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %533 = @func_9796(%531, %532) /* ty=(Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) */;
  %534 = %521.1;
  %535 = %528.7;
  %536 = %533.3;
  (%534, %535, meta[relay.Constant][49] /* ty=int8 */, %var_10838, meta[relay.Constant][50] /* ty=Tensor[(180), float64] */, %536, meta[relay.Constant][51] /* ty=Tensor[(462), float32] */, %var_10847)
}

def @func_9892() -> (Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) {
  %537 = @func_7062() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
  %538 = @func_8594() /* ty=(Tensor[(15, 4, 11), bool],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %541 = reshape(%540, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %542 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
  %543 = %537.1;
  %544 = @func_1070(%541) /* ty=Tensor[(15, 4, 11), int32] */;
  %545 = %542.2;
  (%543, %539, %544, %545)
}

def @func_5580() -> Tensor[(13, 2, 2), int32] {
  @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_3852(%var_3777: Tensor[(13, 7, 3), float32], %var_3808: Tensor[(1, 462), float32], %var_3816: Tensor[(180), float64], %var_3817: Tensor[(80), float64], %var_3822: Tensor[(35), float32], %var_3825: Tensor[(2288), float32]) -> (Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) {
  %546 = cast(%var_3777, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %547 = sigmoid(%546) /* ty=Tensor[(13, 7, 3), float32] */;
  %548 = cast(%547, dtype="bool") /* ty=Tensor[(13, 7, 3), bool] */;
  %549 = shape_of(%var_3777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%var_3777, dtype="bool") /* ty=Tensor[(13, 7, 3), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = cast(%var_3808, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
  %553 = cast(%var_3808, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
  %554 = reshape(%552, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %555 = reshape(%553, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %556 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 78), float32] */, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %557 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 78), float32] */, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %558 = reshape(%556, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %559 = reshape(%557, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %560 = @func_220(%558, %559) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %561 = cast(%var_3816, dtype="float64") /* ty=Tensor[(180), float64] */;
  %562 = %560.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %564 = cast(%var_3817, dtype="float64") /* ty=Tensor[(80), float64] */;
  %565 = reshape(%561, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
  %566 = reshape(%563, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %567 = reshape(%564, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
  %568 = @func_894(%565, %566, %567) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
  %569 = cast(%var_3822, dtype="float32") /* ty=Tensor[(35), float32] */;
  %570 = reshape(%569, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %571 = cast(%var_3825, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %572 = reshape(%571, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %573 = @func_2795(%572) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %574 = not_equal(%550, %551) /* ty=Tensor[(13, 7, 3), bool] */;
  %575 = @func_1356(%554, %555) /* ty=Tensor[(6, 11, 7), float64] */;
  %576 = %568.3;
  %577 = @func_3456(%570) /* ty=Tensor[(7, 1, 5), float32] */;
  %578 = %573.0;
  (%574, %575, %var_3808, %562, meta[relay.Constant][52] /* ty=Tensor[(5, 78), float32] */, %576, %var_3816, %var_3817, %577, %var_3822, %578, %var_3825)
}

def @func_7772() -> Tensor[(13, 2, 2), int32] {
  @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_11947(%var_11923: Tensor[(10, 15, 14), float32], %var_11924: Tensor[(10, 15, 14), float32]) -> (Tensor[(10, 15, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
  %579 = cast(%var_11924, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
  %580 = shape_of(%var_11923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_11923, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %583 = cast(meta[relay.Constant][53] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %584 = reshape(%583, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %585 = floor_divide(%581, %582) /* ty=Tensor[(10, 15, 14), float32] */;
  %586 = @func_1070(%584) /* ty=Tensor[(15, 4, 11), int32] */;
  (%585, %586, meta[relay.Constant][53] /* ty=Tensor[(660), int32] */)
}

def @func_11009(%var_11001: Tensor[(16, 9, 11), int8]) -> (Tensor[(16, 9, 11), int8],) {
  %587 = cast(meta[relay.Constant][54] /* ty=Tensor[(16, 9, 11), int8] */, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %588 = shape_of(%var_11001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_11001, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %591 = left_shift(%589, %590) /* ty=Tensor[(16, 9, 11), int8] */;
  (%591,)
}

def @func_12416() -> Tensor[(13, 2, 2), int32] {
  %592 = @func_11902() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %592.0
}

def @func_8010(%var_7965: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(40), int8], Tensor[(14), uint64], Tensor[(112), uint64]) {
  %593 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %594 = %593.2;
  %595 = cast(%var_7965, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = cast(meta[relay.Constant][55] /* ty=Tensor[(14), uint64] */, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %600 = cast(meta[relay.Constant][56] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %601 = reshape(%599, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), uint64] */;
  %602 = reshape(%600, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), uint64] */;
  %603 = @func_5605(%601, %602) /* ty=(Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) */;
  %604 = less(%597, %598) /* ty=Tensor[(13, 2, 2), bool] */;
  %605 = %603.3;
  (%604, %605, meta[relay.Constant][55] /* ty=Tensor[(14), uint64] */, meta[relay.Constant][56] /* ty=Tensor[(112), uint64] */)
}

def @func_1033(%var_974: Tensor[(14, 12, 1), int16], %var_975: Tensor[(14, 12, 1), int16], %var_1005: Tensor[(390, 1), float32], %var_1011: Tensor[(180), float64]) -> (Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) {
  %606 = cast(%var_975, dtype="int16") /* ty=Tensor[(14, 12, 1), int16] */;
  %607 = shape_of(%var_974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%var_974, dtype="int16") /* ty=Tensor[(14, 12, 1), int16] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %610 = bitwise_and(%608, %609) /* ty=Tensor[(14, 12, ?), int16] */;
  %611 = cast(%var_975, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(14, 12, ?), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %616 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %617 = reshape(%615, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %618 = reshape(%616, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %619 = @func_220(%617, %618) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %620 = cast(%var_1011, dtype="float64") /* ty=Tensor[(180), float64] */;
  %621 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %622 = cast(meta[relay.Constant][57] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %623 = reshape(%620, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
  %624 = reshape(%621, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %625 = reshape(%622, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
  %626 = @func_894(%623, %624, %625) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
  %627 = cast(%var_1011, dtype="float64") /* ty=Tensor[(180), float64] */;
  %628 = cast(%var_1005, dtype="float64") /* ty=Tensor[(390, 1), float64] */;
  %629 = logical_or(%613, %614) /* ty=Tensor[(14, 12, ?), bool] */;
  %630 = %619.0;
  %631 = %626.3;
  %632 = divide(%627, %628) /* ty=Tensor[(390, 180), float64] */;
  (%629, %630, %631, meta[relay.Constant][57] /* ty=Tensor[(80), float64] */, %632)
}

def @func_10472(%var_10467: Tensor[(8, 8, 1), bool]) -> (Tensor[(8, 8, 6), bool],) {
  %633 = cast(%var_10467, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
  %634 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 8, 6), bool] */, dtype="bool") /* ty=Tensor[(8, 8, 6), bool] */;
  %635 = logical_and(%633, %634) /* ty=Tensor[(8, 8, 6), bool] */;
  (%635,)
}

def @func_2669(%var_2652: Tensor[(1, 10, 12), float32], %var_2653: Tensor[(15, 10, 12), float32], %var_2662: Tensor[(195, 2), float32]) -> (Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) {
  %636 = cast(%var_2652, dtype="bool") /* ty=Tensor[(1, 10, 12), bool] */;
  %637 = cast(%var_2653, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
  %638 = cast(meta[relay.Constant][59] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %639 = cast(meta[relay.Constant][59] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %640 = cast(%var_2662, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %641 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %642 = reshape(%638, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %643 = reshape(%639, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %644 = reshape(%640, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %645 = reshape(%641, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %646 = @func_1033(%642, %643, %644, %645) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %647 = cast(meta[relay.Constant][59] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %648 = cast(meta[relay.Constant][59] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %649 = cast(%var_2662, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %650 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %651 = reshape(%647, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %652 = reshape(%648, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %653 = reshape(%649, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %654 = reshape(%650, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %655 = @func_1033(%651, %652, %653, %654) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %656 = not_equal(%636, %637) /* ty=Tensor[(15, 10, 12), bool] */;
  %657 = %646.1;
  %658 = %655.1;
  (%656, %657, meta[relay.Constant][59] /* ty=Tensor[(168), int16] */, %var_2662, meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, %658)
}

def @func_6669() -> Tensor[(10, 8, 1), float32] {
  %659 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %659.0
}

def @func_4610() -> (Tensor[(13, 2, 2), int32],) {
  %660 = cast(meta[relay.Constant][62] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
  %661 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %664 = maximum(%662, %663) /* ty=Tensor[(13, 2, 2), int32] */;
  (%664,)
}

def @func_9685() -> Tensor[(2288), float32] {
  %665 = @func_8137() /* ty=(Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) */;
  %665.7
}

def @func_5303() -> (Tensor[(13, 2, 2), int32],) {
  %666 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %667 = %666.0;
  (%667,)
}

def @func_9831(%var_9818: int8, %var_9819: Tensor[(1, 40), int8]) -> (Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) {
  %668 = cast(%var_9818, dtype="int8") /* ty=int8 */;
  %669 = cast(%var_9819, dtype="int8") /* ty=Tensor[(1, 40), int8] */;
  %670 = reshape(%668, newshape=[]) /* ty=int8 */;
  %671 = reshape(%669, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
  %672 = cast(%var_9819, dtype="uint64") /* ty=Tensor[(1, 40), uint64] */;
  %673 = cast(%var_9818, dtype="uint64") /* ty=uint64 */;
  %674 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
  %675 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
  %676 = @func_2085(%670, %671) /* ty=Tensor[(4, 5, 2), bool] */;
  %677 = @func_6712() /* ty=Tensor[(13, 2, 2), int32] */;
  %678 = bitwise_xor(%672, %673) /* ty=Tensor[(1, 40), uint64] */;
  %679 = %674.0;
  (%675, %676, %677, %678, %679)
}

def @func_10883() -> Tensor[(13, 2, 2), int32] {
  %680 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %680.0
}

def @func_6322() -> Tensor[(13, 2, 2), int32] {
  %681 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %681.0
}

def @func_4843() -> Tensor[(13, 2, 2), int32] {
  %682 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %682.0
}

def @func_8029() -> (Tensor[(35), float32],) {
  %683 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
  %684 = %683.2;
  (%684,)
}

def @func_7329(%var_7295: Tensor[(4, 1, 14), float32], %var_7307: Tensor[(390), float32], %var_7316: Tensor[(7, 5), float32]) -> (Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) {
  %685 = cast(%var_7307, dtype="float32") /* ty=Tensor[(390), float32] */;
  %686 = reshape(%685, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %687 = @func_3988(%686) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
  %688 = cast(meta[relay.Constant][63] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %689 = cast(meta[relay.Constant][64] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %690 = cast(%var_7316, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %691 = reshape(%688, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %692 = reshape(%689, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %693 = reshape(%690, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %694 = @func_5067(%691, %692, %693) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %695 = cast(%var_7295, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %696 = log2(%695) /* ty=Tensor[(4, 1, 14), float32] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %698 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 660), int32] */, dtype="int32") /* ty=Tensor[(1, 660), int32] */;
  %699 = reshape(%698, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %700 = @func_4707(%699) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %701 = %687.2;
  %702 = %694.5;
  %703 = exp(%697) /* ty=Tensor[(4, 1, 14), float32] */;
  %704 = %700.3;
  (%701, %var_7307, %702, meta[relay.Constant][63] /* ty=Tensor[(462), float32] */, meta[relay.Constant][64] /* ty=Tensor[(180), float64] */, %var_7316, %703, %704, meta[relay.Constant][65] /* ty=Tensor[(1, 660), int32] */)
}

def @func_9661() -> (Tensor[(15, 4, 11), float32],) {
  %705 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %706 = %705.1;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %708 = rsqrt(%707) /* ty=Tensor[(15, 4, 11), float64] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %710 = tan(%709) /* ty=Tensor[(15, 4, 11), float32] */;
  (%710,)
}

def @func_8788(%var_8754: Tensor[(56), float32], %var_8755: Tensor[(5, 78), float32]) -> (Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) {
  %711 = @func_8741() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) */;
  %712 = cast(%var_8754, dtype="float32") /* ty=Tensor[(56), float32] */;
  %713 = cast(%var_8755, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %714 = cast(meta[relay.Constant][66] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %715 = reshape(%712, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %716 = reshape(%713, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %717 = reshape(%714, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
  %718 = @func_7329(%715, %716, %717) /* ty=(Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) */;
  %719 = %711.1;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %721 = cast(meta[relay.Constant][67] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %722 = %718.5;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %724 = reshape(%720, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %725 = reshape(%721, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %726 = reshape(%723, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %727 = @func_5067(%724, %725, %726) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %728 = cast(%var_8755, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %729 = %727.0;
  %730 = sin(%728) /* ty=Tensor[(5, 78), float64] */;
  (%719, %722, %var_8754, meta[relay.Constant][66] /* ty=Tensor[(35), float32] */, %729, meta[relay.Constant][67] /* ty=Tensor[(180), float64] */, %730)
}

def @func_11650(%var_11638: Tensor[(13, 11, 4), float64]) -> (Tensor[(13, 11, 4), float64],) {
  %731 = cast(%var_11638, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
  %732 = log2(%731) /* ty=Tensor[(13, 11, 4), float64] */;
  (%732,)
}

def @func_7728() -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
  %733 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %734 = cast(meta[relay.Constant][68] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %735 = reshape(%734, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %736 = @func_2795(%735) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %737 = %733.1;
  %738 = %736.1;
  (%737, %738, meta[relay.Constant][68] /* ty=Tensor[(2288), float32] */)
}

def @func_5015(%var_5000: Tensor[(40), int8]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8], Tensor[(13, 2, 2), int32]) {
  %739 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %740 = cast(meta[relay.Constant][69] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %741 = cast(%var_5000, dtype="int8") /* ty=Tensor[(40), int8] */;
  %742 = reshape(%740, newshape=[]) /* ty=int8 */;
  %743 = reshape(%741, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
  %744 = %739.0;
  %745 = @func_2085(%742, %743) /* ty=Tensor[(4, 5, 2), bool] */;
  %746 = @func_4843() /* ty=Tensor[(13, 2, 2), int32] */;
  (%744, %745, meta[relay.Constant][69] /* ty=int8 */, %var_5000, %746)
}

def @func_11620() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %747 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %748 = @func_9693() /* ty=Tensor[(13, 2, 2), int32] */;
  %749 = %747.0;
  (%748, %749)
}

def @func_12518(%var_12461: Tensor[(48), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(8, 6, 1), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32], Tensor[(10, 8, 48), int8]) {
  %750 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %751 = cast(%var_12461, dtype="float32") /* ty=Tensor[(48), float32] */;
  %752 = reshape(%751, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float32] */;
  %753 = @func_11197(%752) /* ty=(Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) */;
  %754 = @func_7521() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %755 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %756 = %755.0;
  %757 = cast(%var_12461, dtype="int8") /* ty=Tensor[(48), int8] */;
  %758 = cast(%756, dtype="int8") /* ty=Tensor[(10, 8, 1), int8] */;
  %759 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %760 = %750.0;
  %761 = %753.0;
  %762 = %754.1;
  %763 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
  %764 = bitwise_or(%757, %758) /* ty=Tensor[(10, 8, 48), int8] */;
  (%759, %760, %761, %762, %763, %764)
}

def @func_11212() -> Tensor[(13, 2, 2), int32] {
  @func_7772() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_10108() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %765 = @func_9592() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %766 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %767 = %765.0;
  %768 = %766.0;
  (%767, %768)
}

def @func_11111() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
  %769 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %770 = @func_10817() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %771 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
  %772 = %769.0;
  %773 = %770.1;
  %774 = %771.2;
  (%772, %773, %774)
}

def @func_10333() -> Tensor[(15, 4, 11), float32] {
  %775 = @func_9661() /* ty=(Tensor[(15, 4, 11), float32],) */;
  %775.0
}

def @func_12185() -> (Tensor[(13, 2, 2), int32],) {
  %776 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %777 = %776.0;
  (%777,)
}

def @main() -> Tensor[(6, 12, 35), float64] {
  %778 = @func_8858() /* ty=Tensor[(6, 12, 1), float64] */;
  %779 = @func_8029() /* ty=(Tensor[(35), float32],) */;
  %780 = %779.0;
  %781 = cast(%778, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
  %782 = cast(%780, dtype="float64") /* ty=Tensor[(35), float64] */;
  power(%781, %782) /* ty=Tensor[(6, 12, 35), float64] */
}

def @func_6914(%var_6887: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(15, 4, 11), int32]) {
  %783 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %784 = %783.0;
  %785 = cast(%var_6887, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %790 = less_equal(%787, %788) /* ty=Tensor[(13, 2, 2), bool] */;
  %791 = %789.1;
  (%790, %791)
}

def @func_4649(%var_4639: Tensor[(16, 13, 5), float64], %var_4640: Tensor[(16, 13, 5), float64]) -> (Tensor[(16, 13, 5), float64],) {
  %792 = cast(%var_4640, dtype="float64") /* ty=Tensor[(16, 13, 5), float64] */;
  %793 = shape_of(%var_4639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_4639, dtype="float64") /* ty=Tensor[(16, 13, 5), float64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %796 = power(%794, %795) /* ty=Tensor[(16, 13, 5), float64] */;
  (%796,)
}

def @func_9024() -> (Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) {
  %797 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %798 = cast(meta[relay.Constant][70] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %799 = cast(meta[relay.Constant][70] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %800 = reshape(%798, newshape=[16, 13, 5]) /* ty=Tensor[(16, 13, 5), float64] */;
  %801 = reshape(%799, newshape=[16, 13, 5]) /* ty=Tensor[(16, 13, 5), float64] */;
  %802 = @func_4649(%800, %801) /* ty=(Tensor[(16, 13, 5), float64],) */;
  %803 = %797.0;
  %804 = %802.0;
  (%803, %804, meta[relay.Constant][70] /* ty=Tensor[(1040), float64] */)
}

def @func_10506() -> (Tensor[(15, 4, 11), int32],) {
  %805 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %806 = %805.1;
  (%806,)
}

def @func_9354(%var_9338: int8, %var_9343: Tensor[(168), int16], %var_9344: Tensor[(180), float64]) -> (Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) {
  %807 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %809 = reshape(%808, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %810 = @func_299(%809) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %811 = cast(%807, dtype="int16") /* ty=Tensor[(10, 8, 1), int16] */;
  %812 = cast(meta[relay.Constant][71] /* ty=Tensor[(10, 8, 2), float32] */, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
  %813 = multiply(%811, %812) /* ty=Tensor[(10, 8, 2), int16] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %815 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %816 = %815.0;
  %817 = cast(%816, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %818 = reshape(%817, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %819 = @func_4707(%818) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %820 = cast(%var_9338, dtype="int8") /* ty=int8 */;
  %821 = cast(meta[relay.Constant][72] /* ty=Tensor[(10, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 4), int8] */;
  %822 = reshape(%820, newshape=[]) /* ty=int8 */;
  %823 = reshape(%821, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
  %824 = cast(%var_9343, dtype="int16") /* ty=Tensor[(168), int16] */;
  %825 = cast(%var_9344, dtype="float64") /* ty=Tensor[(180), float64] */;
  %826 = reshape(%824, newshape=[168]) /* ty=Tensor[(168), int16] */;
  %827 = reshape(%825, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
  %828 = @func_5245(%826, %827) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) */;
  %829 = %810.0;
  %830 = log2(%814) /* ty=Tensor[(10, 8, 2), float64] */;
  %831 = @func_6219() /* ty=Tensor[(13, 2, 2), int32] */;
  %832 = %819.3;
  %833 = @func_2085(%822, %823) /* ty=Tensor[(4, 5, 2), bool] */;
  %834 = %828.0;
  (%829, %830, %816, %831, %832, %833, %var_9338, meta[relay.Constant][72] /* ty=Tensor[(10, 4), int8] */, %834, %var_9343, %var_9344)
}

def @func_6580() -> (Tensor[(13, 2, 2), int32],) {
  %835 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %836 = %835.0;
  (%836,)
}

def @func_10391() -> (Tensor[(15, 4, 11), uint32],) {
  %837 = @func_9143() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %838 = %837.0;
  (%838,)
}

def @func_7002(%var_6940: Tensor[(6, 28), int16], %var_6941: Tensor[(390), float32], %var_6964: Tensor[(462), float32], %var_6975: Tensor[(200), uint8]) -> (Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) {
  %839 = cast(%var_6940, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
  %840 = cast(%var_6940, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
  %841 = cast(%var_6941, dtype="float32") /* ty=Tensor[(390), float32] */;
  %842 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %843 = reshape(%839, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %844 = reshape(%840, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %845 = reshape(%841, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %846 = reshape(%842, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %847 = @func_1033(%843, %844, %845, %846) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %848 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %850 = atan(%849) /* ty=Tensor[(15, 4, 11), float32] */;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %852 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %853 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
  %854 = cast(%var_6964, dtype="float32") /* ty=Tensor[(462), float32] */;
  %855 = cast(%var_6964, dtype="float32") /* ty=Tensor[(462), float32] */;
  %856 = reshape(%854, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %857 = reshape(%855, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %858 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %859 = cast(%var_6975, dtype="uint8") /* ty=Tensor[(200), uint8] */;
  %860 = reshape(%859, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
  %861 = @func_1492(%860) /* ty=(Tensor[(4, 10, 5), uint8],) */;
  %862 = cast(meta[relay.Constant][74] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %863 = reshape(%862, newshape=[273]) /* ty=Tensor[(273), float32] */;
  %864 = @func_5487(%863) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */;
  %865 = %847.4;
  %866 = cosh(%851) /* ty=Tensor[(15, 4, 11), float64] */;
  %867 = %852.0;
  %868 = %853.1;
  %869 = @func_1356(%856, %857) /* ty=Tensor[(6, 11, 7), float64] */;
  %870 = %858.0;
  %871 = %861.0;
  %872 = %864.8;
  (%865, %var_6940, %var_6941, meta[relay.Constant][73] /* ty=Tensor[(1, 180), float64] */, %866, %867, %868, %869, %var_6964, %870, %871, %var_6975, %872, meta[relay.Constant][74] /* ty=Tensor[(273), float32] */)
}

def @func_8137() -> (Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) {
  %873 = @func_8029() /* ty=(Tensor[(35), float32],) */;
  %874 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %875 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
  %876 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %877 = %876.0;
  %878 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %880 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%877, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %883 = %873.0;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(35), float32] */;
  %885 = reshape(%884, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %886 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
  %887 = cast(meta[relay.Constant][75] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %888 = reshape(%887, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %889 = @func_2795(%888) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %890 = %874.0;
  %891 = %875.0;
  %892 = floor_divide(%881, %882) /* ty=Tensor[(15, 4, 11), float64] */;
  %893 = @func_3456(%885) /* ty=Tensor[(7, 1, 5), float32] */;
  %894 = %886.0;
  %895 = %889.2;
  (%883, %890, %891, %892, %893, %894, %895, meta[relay.Constant][75] /* ty=Tensor[(2288), float32] */)
}

def @func_6035() -> (Tensor[(13, 2, 2), int32],) {
  %896 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %897 = %896.0;
  (%897,)
}

def @func_10339() -> (Tensor[(13, 2, 2), int32],) {
  %898 = @func_10108() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %899 = %898.0;
  (%899,)
}

def @func_9480() -> (Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) {
  %900 = @func_8199() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %901 = cast(meta[relay.Constant][76] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %902 = reshape(%901, newshape=[10, 13, 2]) /* ty=Tensor[(10, 13, 2), float64] */;
  %903 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %904 = %900.0;
  %905 = @func_9098(%902) /* ty=Tensor[(10, 13, 2), float64] */;
  %906 = %903.0;
  (%904, %905, meta[relay.Constant][76] /* ty=Tensor[(260), float64] */, %906)
}

def @func_6266() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %907 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %908 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %909 = %907.0;
  %910 = %908.0;
  (%909, %910)
}

def @func_6399() -> (Tensor[(80), float64], Tensor[(13, 2, 2), int32]) {
  %911 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %912 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %913 = %911.4;
  %914 = %912.0;
  (%913, %914)
}

def @func_10817() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %915 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %916 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %917 = %915.0;
  %918 = %916.0;
  (%917, %918)
}

def @func_7062() -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
  %919 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %920 = cast(meta[relay.Constant][77] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %921 = reshape(%920, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %922 = @func_2795(%921) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %923 = %919.0;
  %924 = %922.1;
  (%923, %924, meta[relay.Constant][77] /* ty=Tensor[(2288), float32] */)
}

def @func_5147() -> (Tensor[(13, 2, 2), int32],) {
  %925 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %926 = %925.0;
  (%926,)
}

def @func_11831() -> Tensor[(13, 2, 2), int32] {
  %927 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %927.0
}

def @func_8151() -> Tensor[(15, 4, 11), uint32] {
  @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */
}

def @func_10583() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %928 = @func_9143() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %929 = %928.0;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %931 = cast(%929, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %932 = reshape(%931, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), bool] */;
  %933 = cos(%930) /* ty=Tensor[(15, 4, 11), float32] */;
  %934 = @func_9953(%932) /* ty=Tensor[(15, 4, 11), float64] */;
  %935 = @func_6712() /* ty=Tensor[(13, 2, 2), int32] */;
  %936 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
  (%933, %934, %935, %936)
}

def @func_12323() -> (Tensor[(13, 2, 2), int32],) {
  %937 = @func_11902() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %938 = %937.0;
  (%938,)
}

def @func_9796(%var_9782: Tensor[(462), float32], %var_9784: Tensor[(35, 1), float32]) -> (Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) {
  %939 = @func_9685() /* ty=Tensor[(2288), float32] */;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %941 = asinh(%940) /* ty=Tensor[(2288), float32] */;
  %942 = cast(%939, dtype="bool") /* ty=Tensor[(2288), bool] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(1), int32] */;
  %944 = cast(%941, dtype="bool") /* ty=Tensor[(2288), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?), bool] */;
  %946 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %947 = cast(meta[relay.Constant][78] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %948 = cast(%var_9784, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %949 = reshape(%946, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %950 = reshape(%947, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %951 = reshape(%948, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %952 = @func_5067(%949, %950, %951) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %953 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %954 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %955 = reshape(%953, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %956 = reshape(%954, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %957 = cast(meta[relay.Constant][79] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %958 = reshape(%957, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
  %959 = @func_4874(%958) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
  %960 = less(%944, %945) /* ty=Tensor[(2288), bool] */;
  %961 = %952.5;
  %962 = @func_1356(%955, %956) /* ty=Tensor[(6, 11, 7), float64] */;
  %963 = %959.0;
  (%960, %961, %var_9782, meta[relay.Constant][78] /* ty=Tensor[(180), float64] */, %var_9784, %962, %963, meta[relay.Constant][79] /* ty=Tensor[(624), int64] */)
}

def @func_11197(%var_11160: Tensor[(8, 6, 1), float32]) -> (Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) {
  %964 = cast(%var_11160, dtype="float32") /* ty=Tensor[(8, 6, 1), float32] */;
  %965 = cast(%var_11160, dtype="float64") /* ty=Tensor[(8, 6, 1), float64] */;
  %966 = atan(%964) /* ty=Tensor[(8, 6, 1), float32] */;
  %967 = log(%965) /* ty=Tensor[(8, 6, 1), float64] */;
  (%966, %967)
}

def @func_5936() -> (Tensor[(660), int32],) {
  %968 = @func_5410() /* ty=(Tensor[(660), int32],) */;
  %969 = %968.0;
  (%969,)
}

def @func_12986(%var_12953: Tensor[(195, 2), float32], %var_12954: Tensor[(35), float32], %var_12955: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(80), float64], Tensor[(195, 2), float32], Tensor[(35), float32], Tensor[(10, 8, 273), uint16], Tensor[(15, 4, 11), int32]) {
  %970 = @func_11983() /* ty=(Tensor[(80), float64],) */;
  %971 = cast(%var_12953, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %972 = cast(%var_12954, dtype="float32") /* ty=Tensor[(35), float32] */;
  %973 = cast(%var_12955, dtype="float32") /* ty=Tensor[(273), float32] */;
  %974 = reshape(%971, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %975 = reshape(%972, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %976 = reshape(%973, newshape=[273]) /* ty=Tensor[(273), float32] */;
  %977 = @func_12907(%974, %975, %976) /* ty=(Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) */;
  %978 = @func_12747() /* ty=(Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) */;
  %979 = %978.1;
  %980 = cast(%var_12955, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %981 = cast(%979, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %982 = @func_11492() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %983 = %970.0;
  %984 = %977.0;
  %985 = bitwise_xor(%980, %981) /* ty=Tensor[(10, 8, 273), uint16] */;
  %986 = %982.0;
  (%983, %984, %var_12953, %var_12954, %985, %986)
}

def @func_7521() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %987 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %988 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
  %989 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
  %990 = %987.0;
  (%988, %989, %990)
}

def @func_5067(%var_5059: Tensor[(462), float32], %var_5060: Tensor[(180), float64], %var_5062: Tensor[(35, 1), float32]) -> (Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) {
  %991 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %992 = cast(meta[relay.Constant][80] /* ty=Tensor[(1, 273), float32] */, dtype="float32") /* ty=Tensor[(1, 273), float32] */;
  %993 = cast(%var_5059, dtype="float32") /* ty=Tensor[(462), float32] */;
  %994 = cast(%var_5060, dtype="float64") /* ty=Tensor[(180), float64] */;
  %995 = cast(meta[relay.Constant][81] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %996 = cast(%var_5062, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %997 = cast(meta[relay.Constant][82] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %998 = reshape(%992, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %999 = reshape(%993, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
  %1000 = reshape(%994, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1001 = reshape(%995, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %1002 = reshape(%996, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %1003 = reshape(%997, newshape=[2288]) /* ty=Tensor[(2288), float32] */;
  %1004 = @func_3852(%998, %999, %1000, %1001, %1002, %1003) /* ty=(Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) */;
  %1005 = %991.1;
  %1006 = %1004.10;
  (%1005, %1006, meta[relay.Constant][80] /* ty=Tensor[(1, 273), float32] */, %var_5059, %var_5060, meta[relay.Constant][81] /* ty=Tensor[(80), float64] */, %var_5062, meta[relay.Constant][82] /* ty=Tensor[(2288), float32] */)
}

def @func_5351() -> (Tensor[(13, 2, 2), int32],) {
  %1007 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1008 = %1007.0;
  (%1008,)
}

def @func_7927(%var_7903: Tensor[(1, 192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(8, 192), float32]) {
  %1009 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1010 = cast(%var_7903, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %1011 = cast(%var_7903, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %1012 = reshape(%1010, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1013 = reshape(%1011, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1014 = @func_4087(%1012, %1013) /* ty=(Tensor[(2, 6, 16), bool],) */;
  %1015 = cast(%var_7903, dtype="uint8") /* ty=Tensor[(1, 192), uint8] */;
  %1016 = cast(meta[relay.Constant][83] /* ty=Tensor[(8, 192), float32] */, dtype="uint8") /* ty=Tensor[(8, 192), uint8] */;
  %1017 = multiply(%1015, %1016) /* ty=Tensor[(8, 192), uint8] */;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(8, 192), float32] */;
  %1019 = %1009.0;
  %1020 = %1014.0;
  %1021 = log2(%1018) /* ty=Tensor[(8, 192), float32] */;
  (%1019, %1020, %1021)
}

def @func_9502(%var_9489: Tensor[(5, 10, 5), float64]) -> Tensor[(5, 10, 5), float64] {
  %1022 = cast(%var_9489, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  sin(%1022) /* ty=Tensor[(5, 10, 5), float64] */
}

def @func_1492(%var_1478: Tensor[(4, 10, 5), uint8]) -> (Tensor[(4, 10, 5), uint8],) {
  %1023 = cast(meta[relay.Constant][84] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1024 = cast(%var_1478, dtype="uint8") /* ty=Tensor[(4, 10, 5), uint8] */;
  %1025 = minimum(%1023, %1024) /* ty=Tensor[(4, 10, 5), uint8] */;
  (%1025,)
}

def @func_9953(%var_9947: Tensor[(15, 4, 11), bool]) -> Tensor[(15, 4, 11), float64] {
  %1026 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
  %1027 = %1026.1;
  %1028 = cast(%var_9947, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%1027, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%1030, %1031) /* ty=Tensor[(15, 4, 11), float64] */
}

def @func_10658(%var_10628: Tensor[(2640), bool]) -> (Tensor[(15, 4, 11), int32], Tensor[(15, 4, 11), int32], Tensor[(2640), bool], Tensor[(11, 16, 15), float64]) {
  %1032 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
  %1033 = %1032.2;
  %1034 = cast(%1033, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %1035 = reshape(%1034, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %1036 = cast(%var_10628, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %1037 = reshape(%1036, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), bool] */;
  %1038 = @func_5759(%1037) /* ty=(Tensor[(11, 16, 15), bool],) */;
  %1039 = %1038.0;
  %1040 = cast(%1039, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %1041 = sqrt(%1040) /* ty=Tensor[(11, 16, 15), float32] */;
  %1042 = cast(%1041, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %1043 = @func_1070(%1035) /* ty=Tensor[(15, 4, 11), int32] */;
  %1044 = asin(%1042) /* ty=Tensor[(11, 16, 15), float64] */;
  (%1033, %1043, %var_10628, %1044)
}

def @func_1356(%var_1333: Tensor[(6, 11, 7), float32], %var_1339: Tensor[(6, 11, 7), float32]) -> Tensor[(6, 11, 7), float64] {
  %1045 = cast(%var_1333, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %1046 = rsqrt(%1045) /* ty=Tensor[(6, 11, 7), float32] */;
  %1047 = cast(%var_1339, dtype="bool") /* ty=Tensor[(6, 11, 7), bool] */;
  %1048 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1049 = cast(%1046, dtype="bool") /* ty=Tensor[(6, 11, 7), bool] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1051 = greater(%1049, %1050) /* ty=Tensor[(6, 11, 7), bool] */;
  %1052 = cast(%1051, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
  acos(%1052) /* ty=Tensor[(6, 11, 7), float64] */
}

def @func_5036() -> (Tensor[(13, 2, 2), int32],) {
  %1053 = @func_4843() /* ty=Tensor[(13, 2, 2), int32] */;
  (%1053,)
}

def @func_11454(%var_11433: int8, %var_11434: Tensor[(1, 2, 4), int8]) -> (Tensor[(1, 2, 4), int8], Tensor[(1, 2, 4), float64], Tensor[(35), float32]) {
  %1054 = cast(%var_11433, dtype="int8") /* ty=int8 */;
  %1055 = cast(%var_11434, dtype="int8") /* ty=Tensor[(1, 2, 4), int8] */;
  %1056 = cast(%var_11434, dtype="float64") /* ty=Tensor[(1, 2, 4), float64] */;
  %1057 = @func_8029() /* ty=(Tensor[(35), float32],) */;
  %1058 = logical_xor(%1054, %1055) /* ty=Tensor[(1, 2, 4), int8] */;
  %1059 = asin(%1056) /* ty=Tensor[(1, 2, 4), float64] */;
  %1060 = %1057.0;
  (%1058, %1059, %1060)
}

def @func_7241() -> Tensor[(15, 4, 11), int32] {
  %1061 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %1061.1
}

def @func_5487(%var_5445: Tensor[(273), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
  %1062 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1063 = cast(%var_5445, dtype="float32") /* ty=Tensor[(273), float32] */;
  %1064 = cast(meta[relay.Constant][85] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %1065 = cast(meta[relay.Constant][86] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1066 = cast(meta[relay.Constant][87] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %1067 = cast(meta[relay.Constant][88] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %1068 = cast(meta[relay.Constant][89] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %1069 = reshape(%1063, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %1070 = reshape(%1064, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
  %1071 = reshape(%1065, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1072 = reshape(%1066, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %1073 = reshape(%1067, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %1074 = reshape(%1068, newshape=[2288]) /* ty=Tensor[(2288), float32] */;
  %1075 = @func_3852(%1069, %1070, %1071, %1072, %1073, %1074) /* ty=(Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) */;
  %1076 = cast(meta[relay.Constant][90] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %1077 = reshape(%1076, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %1078 = @func_4707(%1077) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %1079 = %1062.0;
  %1080 = %1075.1;
  %1081 = %1078.3;
  (%1079, %1080, %var_5445, meta[relay.Constant][85] /* ty=Tensor[(462), float32] */, meta[relay.Constant][86] /* ty=Tensor[(180), float64] */, meta[relay.Constant][87] /* ty=Tensor[(80), float64] */, meta[relay.Constant][88] /* ty=Tensor[(35), float32] */, meta[relay.Constant][89] /* ty=Tensor[(2288), float32] */, %1081, meta[relay.Constant][90] /* ty=Tensor[(660), int32] */)
}

def @func_11507() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) {
  %1082 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %1083 = @func_10333() /* ty=Tensor[(15, 4, 11), float32] */;
  %1084 = %1082.1;
  (%1083, %1084)
}

def @func_9048() -> (Tensor[(13, 2, 2), int32],) {
  %1085 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1086 = %1085.0;
  (%1086,)
}

def @func_11983() -> (Tensor[(80), float64],) {
  %1087 = @func_8547() /* ty=Tensor[(80), float64] */;
  (%1087,)
}

def @func_12012(%var_12002: Tensor[(56), float32], %var_12003: Tensor[(390), float32], %var_12004: Tensor[(35, 1), float32]) -> (Tensor[(2288), float32], Tensor[(15, 4, 11), float32], Tensor[(80), float64], Tensor[(56), float32], Tensor[(390), float32], Tensor[(35, 1), float32]) {
  %1088 = @func_7728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
  %1089 = @func_9661() /* ty=(Tensor[(15, 4, 11), float32],) */;
  %1090 = cast(%var_12002, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1091 = cast(%var_12003, dtype="float32") /* ty=Tensor[(390), float32] */;
  %1092 = cast(%var_12004, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %1093 = reshape(%1090, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %1094 = reshape(%1091, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %1095 = reshape(%1092, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
  %1096 = @func_7329(%1093, %1094, %1095) /* ty=(Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) */;
  %1097 = %1088.2;
  %1098 = %1089.0;
  %1099 = %1096.2;
  (%1097, %1098, %1099, %var_12002, %var_12003, %var_12004)
}

def @func_12577(%var_12539: Tensor[(10, 13, 2), float64]) -> (Tensor[(15, 4, 11), int64], Tensor[(10, 13, 2), bool]) {
  %1100 = @func_11507() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) */;
  %1101 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
  %1102 = %1101.1;
  %1103 = cast(%var_12539, dtype="uint8") /* ty=Tensor[(10, 13, 2), uint8] */;
  %1104 = shape_of(%1102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1105 = cast(%1102, dtype="uint8") /* ty=Tensor[(10, 13, 2), uint8] */;
  %1106 = dyn.reshape(%1103, %1104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1107 = right_shift(%1105, %1106) /* ty=Tensor[(10, 13, 2), uint8] */;
  %1108 = cast(%1102, dtype="bool") /* ty=Tensor[(10, 13, 2), bool] */;
  %1109 = shape_of(%1107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1110 = cast(%1107, dtype="bool") /* ty=Tensor[(10, 13, 2), bool] */;
  %1111 = dyn.reshape(%1108, %1109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1112 = %1100.1;
  %1113 = less_equal(%1110, %1111) /* ty=Tensor[(10, 13, 2), bool] */;
  (%1112, %1113)
}

def @func_6219() -> Tensor[(13, 2, 2), int32] {
  %1114 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1114.0
}

def @func_13099(%var_13062: Tensor[(192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64], Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15, 4, 11), uint32]) {
  %1115 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1116 = cast(meta[relay.Constant][91] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %1117 = cast(meta[relay.Constant][91] /* ty=Tensor[(80), float64] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %1118 = reshape(%1116, newshape=[2, 40]) /* ty=Tensor[(2, 40), float64] */;
  %1119 = reshape(%1117, newshape=[2, 40]) /* ty=Tensor[(2, 40), float32] */;
  %1120 = @func_8496(%1118, %1119) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) */;
  %1121 = @func_11111() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */;
  %1122 = cast(%var_13062, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1123 = cast(%var_13062, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1124 = reshape(%1122, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1125 = reshape(%1123, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1126 = @func_4087(%1124, %1125) /* ty=(Tensor[(2, 6, 16), bool],) */;
  %1127 = @func_10391() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %1128 = @func_10883() /* ty=Tensor[(13, 2, 2), int32] */;
  %1129 = %1115.0;
  %1130 = %1120.13;
  %1131 = %1121.0;
  %1132 = %1126.0;
  %1133 = %1127.0;
  (%1128, %1129, %1130, meta[relay.Constant][91] /* ty=Tensor[(80), float64] */, %1131, %1132, %var_13062, %1133)
}

def @func_9693() -> Tensor[(13, 2, 2), int32] {
  @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_12793() -> (Tensor[(13, 2, 2), int32],) {
  %1134 = @func_10883() /* ty=Tensor[(13, 2, 2), int32] */;
  (%1134,)
}

def @func_12374() -> (Tensor[(15, 4, 11), float64],) {
  %1135 = @func_8137() /* ty=(Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) */;
  %1136 = %1135.3;
  (%1136,)
}

def @func_6072() -> (Tensor[(10, 8, 1), float32],) {
  %1137 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %1138 = %1137.3;
  %1139 = cast(%1138, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %1140 = sigmoid(%1139) /* ty=Tensor[(10, 8, 1), float64] */;
  %1141 = cast(%1140, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
  %1142 = atan(%1141) /* ty=Tensor[(10, 8, 1), float32] */;
  (%1142,)
}

def @func_12747() -> (Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) {
  %1143 = @func_7728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
  %1144 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
  %1145 = %1143.2;
  %1146 = %1144.3;
  (%1145, %1146)
}

def @func_9967() -> (Tensor[(13, 2, 2), int32],) {
  %1147 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1148 = %1147.0;
  (%1148,)
}

def @func_11794(%var_11785: Tensor[(3, 6, 16), float64]) -> (Tensor[(3, 6, 16), float64],) {
  %1149 = cast(%var_11785, dtype="float64") /* ty=Tensor[(3, 6, 16), float64] */;
  %1150 = log(%1149) /* ty=Tensor[(3, 6, 16), float64] */;
  (%1150,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6399() -> (Tensor[(80), float64], Tensor[(13, 2, 2), int32]) {
  %0 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %1 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %2 = %0.4;
  %3 = %1.0;
  (%2, %3)
}

def @func_11984() -> (Tensor[(80), float64],) {
  %5 = fn () -> (Tensor[(80), float64],) {
    %4 = @func_8547() /* ty=Tensor[(80), float64] */;
    (%4,)
  };
  %5() /* ty=(Tensor[(80), float64],) */
}

def @func_13008() -> Tensor[(13, 2, 2), int32] {
  %6 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %6.0
}

def @func_1495(%var_1493: Tensor[(4, 10, 5), uint8]) -> (Tensor[(4, 10, 5), uint8],) {
  @func_1492(%var_1493) /* ty=(Tensor[(4, 10, 5), uint8],) */
}

def @func_4134(%var_4104: Tensor[(4, 9, 13), float64], %var_4115: Tensor[(195, 2), float32]) -> (Tensor[(2, 15, 13), float32], Tensor[(195, 2), float32], Tensor[(80), float64], Tensor[(168, 1), int16], Tensor[(90, 2), float64], Tensor[(4, 9, 13), float64]) {
  %7 = cast(%var_4115, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %8 = cast(%var_4115, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %9 = reshape(%7, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %10 = reshape(%8, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %11 = @func_220(%9, %10) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
  %14 = %11.0;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(90, 2), float64] */, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %17 = reshape(%12, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %18 = reshape(%13, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %19 = reshape(%15, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %20 = reshape(%16, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %21 = @func_1033(%17, %18, %19, %20) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %22 = cast(%var_4104, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %23 = log(%22) /* ty=Tensor[(4, 9, 13), float64] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %25 = %21.3;
  %26 = asin(%24) /* ty=Tensor[(4, 9, 13), float64] */;
  (%14, %var_4115, %25, meta[relay.Constant][0] /* ty=Tensor[(168, 1), int16] */, meta[relay.Constant][1] /* ty=Tensor[(90, 2), float64] */, %26)
}

def @func_8138() -> (Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) {
  %50 = fn () -> (Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) {
    %27 = @func_8029() /* ty=(Tensor[(35), float32],) */;
    %28 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %29 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
    %30 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
    %31 = %30.0;
    %32 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
    %34 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%31, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %37 = %27.0;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(35), float32] */;
    %39 = reshape(%38, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
    %40 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
    %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
    %42 = reshape(%41, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
    %43 = @func_2795(%42) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
    %44 = %28.0;
    %45 = %29.0;
    %46 = floor_divide(%35, %36) /* ty=Tensor[(15, 4, 11), float64] */;
    %47 = @func_3456(%39) /* ty=Tensor[(7, 1, 5), float32] */;
    %48 = %40.0;
    %49 = %43.2;
    (%37, %44, %45, %46, %47, %48, %49, meta[relay.Constant][2] /* ty=Tensor[(2288), float32] */)
  };
  %50() /* ty=(Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) */
}

def @func_1070(%var_1059: Tensor[(15, 4, 11), int32]) -> Tensor[(15, 4, 11), int32] {
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 4, 11), int32] */, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %52 = shape_of(%var_1059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_1059, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%53, %54) /* ty=Tensor[(15, 4, 11), int32] */
}

def @func_4138(%var_4136: Tensor[(4, 9, 13), float64], %var_4137: Tensor[(195, 2), float32]) -> (Tensor[(2, 15, 13), float32], Tensor[(195, 2), float32], Tensor[(80), float64], Tensor[(168, 1), int16], Tensor[(90, 2), float64], Tensor[(4, 9, 13), float64]) {
  @func_4134(%var_4136, %var_4137) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(195, 2), float32], Tensor[(80), float64], Tensor[(168, 1), int16], Tensor[(90, 2), float64], Tensor[(4, 9, 13), float64]) */
}

def @func_12986(%var_12953: Tensor[(195, 2), float32], %var_12954: Tensor[(35), float32], %var_12955: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(80), float64], Tensor[(195, 2), float32], Tensor[(35), float32], Tensor[(10, 8, 273), uint16], Tensor[(15, 4, 11), int32]) {
  %55 = @func_11983() /* ty=(Tensor[(80), float64],) */;
  %56 = cast(%var_12953, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %57 = cast(%var_12954, dtype="float32") /* ty=Tensor[(35), float32] */;
  %58 = cast(%var_12955, dtype="float32") /* ty=Tensor[(273), float32] */;
  %59 = reshape(%56, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %60 = reshape(%57, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %61 = reshape(%58, newshape=[273]) /* ty=Tensor[(273), float32] */;
  %62 = @func_12907(%59, %60, %61) /* ty=(Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) */;
  %63 = @func_12747() /* ty=(Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) */;
  %64 = %63.1;
  %65 = cast(%var_12955, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %66 = cast(%64, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %67 = @func_11492() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %68 = %55.0;
  %69 = %62.0;
  %70 = bitwise_xor(%65, %66) /* ty=Tensor[(10, 8, 273), uint16] */;
  %71 = %67.0;
  (%68, %69, %var_12953, %var_12954, %70, %71)
}

def @func_10392() -> (Tensor[(15, 4, 11), uint32],) {
  %74 = fn () -> (Tensor[(15, 4, 11), uint32],) {
    %72 = @func_9143() /* ty=(Tensor[(15, 4, 11), uint32],) */;
    %73 = %72.0;
    (%73,)
  };
  %74() /* ty=(Tensor[(15, 4, 11), uint32],) */
}

def @func_5936() -> (Tensor[(660), int32],) {
  %75 = @func_5410() /* ty=(Tensor[(660), int32],) */;
  %76 = %75.0;
  (%76,)
}

def @func_5605(%var_5587: Tensor[(1, 2, 7), uint64], %var_5588: Tensor[(8, 2, 7), uint64]) -> (Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) {
  %77 = cast(%var_5587, dtype="uint64") /* ty=Tensor[(1, 2, 7), uint64] */;
  %78 = cast(%var_5588, dtype="uint64") /* ty=Tensor[(8, 2, 7), uint64] */;
  %79 = cast(meta[relay.Constant][4] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %81 = reshape(%79, newshape=[]) /* ty=int8 */;
  %82 = reshape(%80, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
  %83 = maximum(%77, %78) /* ty=Tensor[(8, 2, 7), uint64] */;
  %84 = @func_2085(%81, %82) /* ty=Tensor[(4, 5, 2), bool] */;
  (%83, %84, meta[relay.Constant][4] /* ty=int8 */, meta[relay.Constant][5] /* ty=Tensor[(40), int8] */)
}

def @func_6916(%var_6915: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(15, 4, 11), int32]) {
  %94 = fn (%var_6887: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(15, 4, 11), int32]) {
    %85 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %86 = %85.0;
    %87 = cast(%var_6887, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
    %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(%86, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %91 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
    %92 = less_equal(%89, %90) /* ty=Tensor[(13, 2, 2), bool] */;
    %93 = %91.1;
    (%92, %93)
  };
  %94(%var_6915) /* ty=(Tensor[(13, 2, 2), bool], Tensor[(15, 4, 11), int32]) */
}

def @func_7241() -> Tensor[(15, 4, 11), int32] {
  %95 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %95.1
}

def @func_9694() -> Tensor[(13, 2, 2), int32] {
  %96 = fn () -> Tensor[(13, 2, 2), int32] {
    @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
  };
  %96() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_8792(%var_8790: Tensor[(56), float32], %var_8791: Tensor[(5, 78), float32]) -> (Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) {
  @func_8788(%var_8790, %var_8791) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) */
}

def @func_7087() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_7085() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_11213() -> Tensor[(13, 2, 2), int32] {
  %97 = fn () -> Tensor[(13, 2, 2), int32] {
    @func_7772() /* ty=Tensor[(13, 2, 2), int32] */
  };
  %97() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_7430(%var_7428: Tensor[(10, 9, 9), float32]) -> (Tensor[(10, 9, 9), float32], Tensor[(13, 2, 2), int32]) {
  @func_7427(%var_7428) /* ty=(Tensor[(10, 9, 9), float32], Tensor[(13, 2, 2), int32]) */
}

def @func_11507() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) {
  %98 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %99 = @func_10333() /* ty=Tensor[(15, 4, 11), float32] */;
  %100 = %98.1;
  (%99, %100)
}

def @func_8860() -> Tensor[(6, 12, 1), float64] {
  @func_8858() /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_6072() -> (Tensor[(10, 8, 1), float32],) {
  %101 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %102 = %101.3;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %104 = sigmoid(%103) /* ty=Tensor[(10, 8, 1), float64] */;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
  %106 = atan(%105) /* ty=Tensor[(10, 8, 1), float32] */;
  (%106,)
}

def @func_5367() -> (Tensor[(13, 2, 2), int32],) {
  %109 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %107 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %108 = %107.0;
    (%108,)
  };
  %109() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_11579() -> Tensor[(13, 2, 2), int32] {
  @func_11577() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_7757() -> (Tensor[(13, 2, 2), int32], Tensor[(390), float32], Tensor[(390), float32]) {
  %110 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %112 = reshape(%111, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %113 = @func_3988(%112) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
  %114 = %110.0;
  %115 = %113.2;
  (%114, %115, meta[relay.Constant][6] /* ty=Tensor[(390), float32] */)
}

def @func_3990(%var_3989: Tensor[(390), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) {
  %127 = fn (%var_3984: Tensor[(390), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) {
    %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %117 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %120 = cast(%var_3984, dtype="float32") /* ty=Tensor[(390), float32] */;
    %121 = cast(%var_3984, dtype="float32") /* ty=Tensor[(390), float32] */;
    %122 = reshape(%120, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %123 = reshape(%121, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %124 = @func_220(%122, %123) /* ty=(Tensor[(2, 15, 13), float32],) */;
    %125 = right_shift(%118, %119) /* ty=Tensor[(4, 14, 5), int64] */;
    %126 = %124.0;
    (%125, %126, %var_3984)
  };
  %127(%var_3989) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */
}

def @func_11903() -> (Tensor[(13, 2, 2), int32],) {
  %129 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %128 = @func_11212() /* ty=Tensor[(13, 2, 2), int32] */;
    (%128,)
  };
  %129() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_11652(%var_11651: Tensor[(13, 11, 4), float64]) -> (Tensor[(13, 11, 4), float64],) {
  %132 = fn (%var_11638: Tensor[(13, 11, 4), float64]) -> (Tensor[(13, 11, 4), float64],) {
    %130 = cast(%var_11638, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
    %131 = log2(%130) /* ty=Tensor[(13, 11, 4), float64] */;
    (%131,)
  };
  %132(%var_11651) /* ty=(Tensor[(13, 11, 4), float64],) */
}

def @func_9953(%var_9947: Tensor[(15, 4, 11), bool]) -> Tensor[(15, 4, 11), float64] {
  %133 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
  %134 = %133.1;
  %135 = cast(%var_9947, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%137, %138) /* ty=Tensor[(15, 4, 11), float64] */
}

def @func_10798(%var_10794: int8, %var_10795: Tensor[(40), int8], %var_10796: Tensor[(168, 1), int16], %var_10797: Tensor[(30, 6), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], int8, Tensor[(40), int8], Tensor[(14, 12, 624), float64], Tensor[(168, 1), int16], Tensor[(30, 6), float64], Tensor[(4, 10, 5), uint8]) {
  %155 = fn (%var_10775: int8, %var_10776: Tensor[(40), int8], %var_10783: Tensor[(168, 1), int16], %var_10784: Tensor[(30, 6), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], int8, Tensor[(40), int8], Tensor[(14, 12, 624), float64], Tensor[(168, 1), int16], Tensor[(30, 6), float64], Tensor[(4, 10, 5), uint8]) {
    %139 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %140 = cast(%var_10775, dtype="int8") /* ty=int8 */;
    %141 = cast(%var_10776, dtype="int8") /* ty=Tensor[(40), int8] */;
    %142 = reshape(%140, newshape=[]) /* ty=int8 */;
    %143 = reshape(%141, newshape=[1, 40]) /* ty=Tensor[(1, 40), int8] */;
    %144 = @func_9831(%142, %143) /* ty=(Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) */;
    %145 = cast(%var_10783, dtype="int16") /* ty=Tensor[(168, 1), int16] */;
    %146 = cast(%var_10784, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
    %147 = reshape(%145, newshape=[168]) /* ty=Tensor[(168), int16] */;
    %148 = reshape(%146, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
    %149 = @func_5245(%147, %148) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) */;
    %150 = @func_7062() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
    %151 = %139.2;
    %152 = %144.4;
    %153 = %149.5;
    %154 = %150.1;
    (%151, %152, %var_10775, %var_10776, %153, %var_10783, %var_10784, %154)
  };
  %155(%var_10794, %var_10795, %var_10796, %var_10797) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], int8, Tensor[(40), int8], Tensor[(14, 12, 624), float64], Tensor[(168, 1), int16], Tensor[(30, 6), float64], Tensor[(4, 10, 5), uint8]) */
}

def @func_6220() -> Tensor[(13, 2, 2), int32] {
  %157 = fn () -> Tensor[(13, 2, 2), int32] {
    %156 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %156.0
  };
  %157() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_12259() -> Tensor[(6, 12, 1), float64] {
  @func_12257() /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_5245(%var_5236: Tensor[(168), int16], %var_5238: Tensor[(3, 60), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) {
  %158 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %160 = reshape(%159, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
  %161 = @func_4874(%160) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
  %162 = cast(%var_5236, dtype="int16") /* ty=Tensor[(168), int16] */;
  %163 = cast(%var_5236, dtype="int16") /* ty=Tensor[(168), int16] */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %165 = cast(%var_5238, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
  %166 = reshape(%162, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %167 = reshape(%163, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %168 = reshape(%164, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %169 = reshape(%165, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %170 = @func_1033(%166, %167, %168, %169) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %171 = %170.0;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(624), int64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %173 = cast(%171, dtype="float64") /* ty=Tensor[(14, 12, ?), float64] */;
  %174 = %158.0;
  %175 = %161.1;
  %176 = power(%172, %173) /* ty=Tensor[(14, 12, 624), float64] */;
  (%174, %175, %var_5236, meta[relay.Constant][10] /* ty=Tensor[(390), float32] */, %var_5238, %176)
}

def @func_4611() -> (Tensor[(13, 2, 2), int32],) {
  %182 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
    %178 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %181 = maximum(%179, %180) /* ty=Tensor[(13, 2, 2), int32] */;
    (%181,)
  };
  %182() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_8858() -> Tensor[(6, 12, 1), float64] {
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
  log(%183) /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_7730() -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
  @func_7728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */
}

def @func_8499(%var_8497: Tensor[(2, 40), float64], %var_8498: Tensor[(2, 40), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) {
  %248 = fn (%var_8357: Tensor[(2, 40), float64], %var_8414: Tensor[(2, 40), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) {
    %184 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %186 = cast(meta[relay.Constant][14] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %187 = reshape(%185, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %188 = reshape(%186, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %189 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %190 = cast(meta[relay.Constant][16] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %191 = cast(meta[relay.Constant][17] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %192 = reshape(%189, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
    %193 = reshape(%190, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %194 = reshape(%191, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %195 = @func_2669(%192, %193, %194) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
    %196 = %195.5;
    %197 = cast(meta[relay.Constant][17] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%196, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %201 = cast(meta[relay.Constant][18] /* ty=Tensor[(100, 2), uint8] */, dtype="uint8") /* ty=Tensor[(100, 2), uint8] */;
    %202 = reshape(%201, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
    %203 = @func_1492(%202) /* ty=(Tensor[(4, 10, 5), uint8],) */;
    %204 = @func_5936() /* ty=(Tensor[(660), int32],) */;
    %205 = %204.0;
    %206 = cast(%var_8357, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %207 = reshape(%206, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
    %208 = @func_299(%207) /* ty=(Tensor[(10, 8, 1), float64],) */;
    %209 = %208.0;
    %210 = cast(%205, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %211 = cast(%209, dtype="uint32") /* ty=Tensor[(10, 8, 1), uint32] */;
    %212 = cast(%209, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
    %213 = shape_of(%var_8357, dtype="int32") /* ty=Tensor[(2), int32] */;
    %214 = cast(%var_8357, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %216 = floor_divide(%214, %215) /* ty=Tensor[(2, 40), float32] */;
    %217 = cast(%var_8414, dtype="int32") /* ty=Tensor[(2, 40), int32] */;
    %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
    %219 = cast(%216, dtype="int32") /* ty=Tensor[(2, 40), int32] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %221 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 40), float32] */, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %222 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
    %223 = cast(%216, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %225 = mod(%223, %224) /* ty=Tensor[(2, 40), float64] */;
    %226 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 40), float64] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(2), int32] */;
    %228 = cast(%225, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %230 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
    %231 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%196, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %234 = cast(meta[relay.Constant][22] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
    %235 = reshape(%234, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
    %236 = @func_4874(%235) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
    %237 = cast(%216, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %238 = %184.0;
    %239 = @func_1356(%187, %188) /* ty=Tensor[(6, 11, 7), float64] */;
    %240 = logical_and(%199, %200) /* ty=Tensor[(2, 15, 13), bool] */;
    %241 = %203.0;
    %242 = bitwise_xor(%210, %211) /* ty=Tensor[(10, 8, 660), uint32] */;
    %243 = add(%219, %220) /* ty=Tensor[(2, 40), int32] */;
    %244 = floor_mod(%228, %229) /* ty=Tensor[(2, 40), float32] */;
    %245 = greater_equal(%232, %233) /* ty=Tensor[(2, 15, 13), bool] */;
    %246 = %236.0;
    %247 = log(%237) /* ty=Tensor[(2, 40), float64] */;
    (%238, %239, meta[relay.Constant][14] /* ty=Tensor[(462), float32] */, meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, meta[relay.Constant][16] /* ty=Tensor[(1800), float32] */, %240, %241, meta[relay.Constant][18] /* ty=Tensor[(100, 2), uint8] */, %242, %243, %244, %245, %246, meta[relay.Constant][22] /* ty=Tensor[(624), int64] */, %247)
  };
  %248(%var_8497, %var_8498) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) */
}

def @func_1359(%var_1357: Tensor[(6, 11, 7), float32], %var_1358: Tensor[(6, 11, 7), float32]) -> Tensor[(6, 11, 7), float64] {
  %257 = fn (%var_1333: Tensor[(6, 11, 7), float32], %var_1339: Tensor[(6, 11, 7), float32]) -> Tensor[(6, 11, 7), float64] {
    %249 = cast(%var_1333, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
    %250 = rsqrt(%249) /* ty=Tensor[(6, 11, 7), float32] */;
    %251 = cast(%var_1339, dtype="bool") /* ty=Tensor[(6, 11, 7), bool] */;
    %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%250, dtype="bool") /* ty=Tensor[(6, 11, 7), bool] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %255 = greater(%253, %254) /* ty=Tensor[(6, 11, 7), bool] */;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
    acos(%256) /* ty=Tensor[(6, 11, 7), float64] */
  };
  %257(%var_1357, %var_1358) /* ty=Tensor[(6, 11, 7), float64] */
}

def @func_6324() -> Tensor[(13, 2, 2), int32] {
  @func_6322() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_10339() -> (Tensor[(13, 2, 2), int32],) {
  %258 = @func_10108() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %259 = %258.0;
  (%259,)
}

def @func_5334() -> (Tensor[(13, 2, 2), int32],) {
  %262 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %260 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %261 = %260.0;
    (%261,)
  };
  %262() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_1492(%var_1478: Tensor[(4, 10, 5), uint8]) -> (Tensor[(4, 10, 5), uint8],) {
  %263 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %264 = cast(%var_1478, dtype="uint8") /* ty=Tensor[(4, 10, 5), uint8] */;
  %265 = minimum(%263, %264) /* ty=Tensor[(4, 10, 5), uint8] */;
  (%265,)
}

def @func_12912(%var_12909: Tensor[(390), float32], %var_12910: Tensor[(35), float32], %var_12911: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) {
  @func_12907(%var_12909, %var_12910, %var_12911) /* ty=(Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) */
}

def @func_11009(%var_11001: Tensor[(16, 9, 11), int8]) -> (Tensor[(16, 9, 11), int8],) {
  %266 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 9, 11), int8] */, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %267 = shape_of(%var_11001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_11001, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %270 = left_shift(%268, %269) /* ty=Tensor[(16, 9, 11), int8] */;
  (%270,)
}

def @func_2798(%var_2796: Tensor[(11, 13, 16), float32]) -> (Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) {
  @func_2795(%var_2796) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */
}

def @func_9687() -> Tensor[(2288), float32] {
  @func_9685() /* ty=Tensor[(2288), float32] */
}

def @func_12520(%var_12519: Tensor[(48), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(8, 6, 1), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32], Tensor[(10, 8, 48), int8]) {
  %286 = fn (%var_12461: Tensor[(48), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(8, 6, 1), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32], Tensor[(10, 8, 48), int8]) {
    %271 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %272 = cast(%var_12461, dtype="float32") /* ty=Tensor[(48), float32] */;
    %273 = reshape(%272, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float32] */;
    %274 = @func_11197(%273) /* ty=(Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) */;
    %275 = @func_7521() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %276 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
    %277 = %276.0;
    %278 = cast(%var_12461, dtype="int8") /* ty=Tensor[(48), int8] */;
    %279 = cast(%277, dtype="int8") /* ty=Tensor[(10, 8, 1), int8] */;
    %280 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
    %281 = %271.0;
    %282 = %274.0;
    %283 = %275.1;
    %284 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
    %285 = bitwise_or(%278, %279) /* ty=Tensor[(10, 8, 48), int8] */;
    (%280, %281, %282, %283, %284, %285)
  };
  %286(%var_12519) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(8, 6, 1), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32], Tensor[(10, 8, 48), int8]) */
}

def @func_9894() -> (Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) {
  @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */
}

def @func_10658(%var_10628: Tensor[(2640), bool]) -> (Tensor[(15, 4, 11), int32], Tensor[(15, 4, 11), int32], Tensor[(2640), bool], Tensor[(11, 16, 15), float64]) {
  %287 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
  %288 = %287.2;
  %289 = cast(%288, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %290 = reshape(%289, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %291 = cast(%var_10628, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %292 = reshape(%291, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), bool] */;
  %293 = @func_5759(%292) /* ty=(Tensor[(11, 16, 15), bool],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %296 = sqrt(%295) /* ty=Tensor[(11, 16, 15), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %298 = @func_1070(%290) /* ty=Tensor[(15, 4, 11), int32] */;
  %299 = asin(%297) /* ty=Tensor[(11, 16, 15), float64] */;
  (%288, %298, %var_10628, %299)
}

def @func_11797(%var_11795: Tensor[(3, 6, 16), float64]) -> (Tensor[(3, 6, 16), float64],) {
  @func_11794(%var_11795) /* ty=(Tensor[(3, 6, 16), float64],) */
}

def @func_11493() -> (Tensor[(15, 4, 11), int32],) {
  %301 = fn () -> (Tensor[(15, 4, 11), int32],) {
    %300 = @func_7241() /* ty=Tensor[(15, 4, 11), int32] */;
    (%300,)
  };
  %301() /* ty=(Tensor[(15, 4, 11), int32],) */
}

def @func_11454(%var_11433: int8, %var_11434: Tensor[(1, 2, 4), int8]) -> (Tensor[(1, 2, 4), int8], Tensor[(1, 2, 4), float64], Tensor[(35), float32]) {
  %302 = cast(%var_11433, dtype="int8") /* ty=int8 */;
  %303 = cast(%var_11434, dtype="int8") /* ty=Tensor[(1, 2, 4), int8] */;
  %304 = cast(%var_11434, dtype="float64") /* ty=Tensor[(1, 2, 4), float64] */;
  %305 = @func_8029() /* ty=(Tensor[(35), float32],) */;
  %306 = logical_xor(%302, %303) /* ty=Tensor[(1, 2, 4), int8] */;
  %307 = asin(%304) /* ty=Tensor[(1, 2, 4), float64] */;
  %308 = %305.0;
  (%306, %307, %308)
}

def @func_10110() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_10108() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_224(%var_222: Tensor[(2, 15, 13), float32], %var_223: Tensor[(2, 15, 13), float32]) -> (Tensor[(2, 15, 13), float32],) {
  @func_220(%var_222, %var_223) /* ty=(Tensor[(2, 15, 13), float32],) */
}

def @func_6268() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_8788(%var_8754: Tensor[(56), float32], %var_8755: Tensor[(5, 78), float32]) -> (Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) {
  %309 = @func_8741() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) */;
  %310 = cast(%var_8754, dtype="float32") /* ty=Tensor[(56), float32] */;
  %311 = cast(%var_8755, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %313 = reshape(%310, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %314 = reshape(%311, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %315 = reshape(%312, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
  %316 = @func_7329(%313, %314, %315) /* ty=(Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) */;
  %317 = %309.1;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %319 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %320 = %316.5;
  %321 = cast(%320, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %322 = reshape(%318, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %323 = reshape(%319, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %324 = reshape(%321, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %325 = @func_5067(%322, %323, %324) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %326 = cast(%var_8755, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %327 = %325.0;
  %328 = sin(%326) /* ty=Tensor[(5, 78), float64] */;
  (%317, %320, %var_8754, meta[relay.Constant][25] /* ty=Tensor[(35), float32] */, %327, meta[relay.Constant][26] /* ty=Tensor[(180), float64] */, %328)
}

def @func_10237() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float32], Tensor[(13, 2, 2), int32]) {
  %329 = @func_7085() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %330 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %331 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
  %332 = %329.0;
  (%330, %331, %332)
}

def @func_7007(%var_7003: Tensor[(6, 28), int16], %var_7004: Tensor[(390), float32], %var_7005: Tensor[(462), float32], %var_7006: Tensor[(200), uint8]) -> (Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) {
  %367 = fn (%var_6940: Tensor[(6, 28), int16], %var_6941: Tensor[(390), float32], %var_6964: Tensor[(462), float32], %var_6975: Tensor[(200), uint8]) -> (Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) {
    %333 = cast(%var_6940, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
    %334 = cast(%var_6940, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
    %335 = cast(%var_6941, dtype="float32") /* ty=Tensor[(390), float32] */;
    %336 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
    %337 = reshape(%333, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
    %338 = reshape(%334, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
    %339 = reshape(%335, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
    %340 = reshape(%336, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %341 = @func_1033(%337, %338, %339, %340) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
    %342 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
    %343 = cast(%342, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
    %344 = atan(%343) /* ty=Tensor[(15, 4, 11), float32] */;
    %345 = cast(%344, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
    %346 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %347 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
    %348 = cast(%var_6964, dtype="float32") /* ty=Tensor[(462), float32] */;
    %349 = cast(%var_6964, dtype="float32") /* ty=Tensor[(462), float32] */;
    %350 = reshape(%348, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %351 = reshape(%349, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %352 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
    %353 = cast(%var_6975, dtype="uint8") /* ty=Tensor[(200), uint8] */;
    %354 = reshape(%353, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
    %355 = @func_1492(%354) /* ty=(Tensor[(4, 10, 5), uint8],) */;
    %356 = cast(meta[relay.Constant][28] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
    %357 = reshape(%356, newshape=[273]) /* ty=Tensor[(273), float32] */;
    %358 = @func_5487(%357) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */;
    %359 = %341.4;
    %360 = cosh(%345) /* ty=Tensor[(15, 4, 11), float64] */;
    %361 = %346.0;
    %362 = %347.1;
    %363 = @func_1356(%350, %351) /* ty=Tensor[(6, 11, 7), float64] */;
    %364 = %352.0;
    %365 = %355.0;
    %366 = %358.8;
    (%359, %var_6940, %var_6941, meta[relay.Constant][27] /* ty=Tensor[(1, 180), float64] */, %360, %361, %362, %363, %var_6964, %364, %365, %var_6975, %366, meta[relay.Constant][28] /* ty=Tensor[(273), float32] */)
  };
  %367(%var_7003, %var_7004, %var_7005, %var_7006) /* ty=(Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) */
}

def @func_9144() -> (Tensor[(15, 4, 11), uint32],) {
  %369 = fn () -> (Tensor[(15, 4, 11), uint32],) {
    %368 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
    (%368,)
  };
  %369() /* ty=(Tensor[(15, 4, 11), uint32],) */
}

def @func_7133(%var_7101: Tensor[(10, 8, 1), float32], %var_7113: Tensor[(120), float32]) -> (Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) {
  %370 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %371 = %370.0;
  %372 = cast(%var_7101, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 4), int32] */;
  %377 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %378 = cast(%var_7113, dtype="float32") /* ty=Tensor[(120), float32] */;
  %379 = cast(meta[relay.Constant][31] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %380 = reshape(%376, newshape=[13, 2, 2]) /* ty=Tensor[(13, 2, 2), int32] */;
  %381 = reshape(%377, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %382 = reshape(%378, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %383 = reshape(%379, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %384 = @func_6536(%380, %381, %382, %383) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) */;
  %385 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %386 = cast(%var_7113, dtype="float32") /* ty=Tensor[(120), float32] */;
  %387 = cast(meta[relay.Constant][31] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %388 = cast(meta[relay.Constant][32] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %389 = reshape(%386, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
  %390 = reshape(%387, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %391 = reshape(%388, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %392 = @func_2669(%389, %390, %391) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
  %393 = subtract(%374, %375) /* ty=Tensor[(10, 8, ?), uint16] */;
  %394 = %384.1;
  %395 = %385.0;
  %396 = %392.0;
  (%393, %394, meta[relay.Constant][29] /* ty=Tensor[(13, 4), int32] */, meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, %var_7113, meta[relay.Constant][31] /* ty=Tensor[(1800), float32] */, %395, %396, meta[relay.Constant][32] /* ty=Tensor[(390), float32] */)
}

def @func_11832() -> Tensor[(13, 2, 2), int32] {
  %398 = fn () -> Tensor[(13, 2, 2), int32] {
    %397 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %397.0
  };
  %398() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_5699(%var_5698: Tensor[(14), uint64]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], Tensor[(14), uint64], Tensor[(112), uint64]) {
  %417 = fn (%var_5694: Tensor[(14), uint64]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], Tensor[(14), uint64], Tensor[(112), uint64]) {
    %399 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %400 = %399.1;
    %401 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%400, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %405 = equal(%403, %404) /* ty=Tensor[(15, 4, 11), bool] */;
    %406 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%405, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %410 = cast(%var_5694, dtype="uint64") /* ty=Tensor[(14), uint64] */;
    %411 = cast(meta[relay.Constant][34] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %412 = reshape(%410, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), uint64] */;
    %413 = reshape(%411, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), uint64] */;
    %414 = @func_5605(%412, %413) /* ty=(Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) */;
    %415 = logical_or(%408, %409) /* ty=Tensor[(15, 4, 11), bool] */;
    %416 = %414.1;
    (%415, %416, %var_5694, meta[relay.Constant][34] /* ty=Tensor[(112), uint64] */)
  };
  %417(%var_5698) /* ty=(Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], Tensor[(14), uint64], Tensor[(112), uint64]) */
}

def @func_7772() -> Tensor[(13, 2, 2), int32] {
  @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_301(%var_300: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
  %420 = fn (%var_270: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
    %418 = cast(%var_270, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %419 = log10(%418) /* ty=Tensor[(10, 8, 1), float64] */;
    (%419,)
  };
  %420(%var_300) /* ty=(Tensor[(10, 8, 1), float64],) */
}

def @func_2795(%var_2784: Tensor[(11, 13, 16), float32]) -> (Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) {
  %421 = cast(%var_2784, dtype="float32") /* ty=Tensor[(11, 13, 16), float32] */;
  %422 = cast(meta[relay.Constant][35] /* ty=Tensor[(200), uint8] */, dtype="uint8") /* ty=Tensor[(200), uint8] */;
  %423 = reshape(%422, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), uint8] */;
  %424 = @func_1492(%423) /* ty=(Tensor[(4, 10, 5), uint8],) */;
  %425 = erf(%421) /* ty=Tensor[(11, 13, 16), float32] */;
  %426 = %424.0;
  (%425, %426, meta[relay.Constant][35] /* ty=Tensor[(200), uint8] */)
}

def @func_4649(%var_4639: Tensor[(16, 13, 5), float64], %var_4640: Tensor[(16, 13, 5), float64]) -> (Tensor[(16, 13, 5), float64],) {
  %427 = cast(%var_4640, dtype="float64") /* ty=Tensor[(16, 13, 5), float64] */;
  %428 = shape_of(%var_4639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_4639, dtype="float64") /* ty=Tensor[(16, 13, 5), float64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %431 = power(%429, %430) /* ty=Tensor[(16, 13, 5), float64] */;
  (%431,)
}

def @func_9663() -> (Tensor[(15, 4, 11), float32],) {
  @func_9661() /* ty=(Tensor[(15, 4, 11), float32],) */
}

def @func_12416() -> Tensor[(13, 2, 2), int32] {
  %432 = @func_11902() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %432.0
}

def @func_11620() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %433 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %434 = @func_9693() /* ty=Tensor[(13, 2, 2), int32] */;
  %435 = %433.0;
  (%434, %435)
}

def @func_11509() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) {
  @func_11507() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) */
}

def @func_5412() -> (Tensor[(660), int32],) {
  @func_5410() /* ty=(Tensor[(660), int32],) */
}

def @func_12418() -> Tensor[(13, 2, 2), int32] {
  @func_12416() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_6387() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  @func_6385() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */
}

def @func_3458(%var_3457: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
  %437 = fn (%var_3453: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
    %436 = cast(%var_3453, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
    sigmoid(%436) /* ty=Tensor[(7, 1, 5), float32] */
  };
  %437(%var_3457) /* ty=Tensor[(7, 1, 5), float32] */
}

def @func_8201() -> (Tensor[(15, 4, 11), int32],) {
  @func_8199() /* ty=(Tensor[(15, 4, 11), int32],) */
}

def @func_6385() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  %438 = cast(meta[relay.Constant][36] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %439 = reshape(%438, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %440 = @func_299(%439) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %441 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %442 = %440.0;
  (%441, %442, meta[relay.Constant][36] /* ty=Tensor[(80), float64] */)
}

def @func_10108() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %443 = @func_9592() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %444 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %445 = %443.0;
  %446 = %444.0;
  (%445, %446)
}

def @func_12325() -> (Tensor[(13, 2, 2), int32],) {
  @func_12323() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_4707(%var_4688: Tensor[(660), int32]) -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) {
  %447 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %448 = cast(%var_4688, dtype="int32") /* ty=Tensor[(660), int32] */;
  %449 = reshape(%448, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %450 = @func_1070(%449) /* ty=Tensor[(15, 4, 11), int32] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %452 = reshape(%451, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %453 = %447.0;
  %454 = @func_1070(%452) /* ty=Tensor[(15, 4, 11), int32] */;
  (%453, %450, %var_4688, %454)
}

def @func_12186() -> (Tensor[(13, 2, 2), int32],) {
  %457 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %455 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %456 = %455.0;
    (%456,)
  };
  %457() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_12718(%var_12712: Tensor[(56), float32]) -> (Tensor[(462), float32], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(390), float32]) {
  %458 = @func_8741() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) */;
  %459 = cast(%var_12712, dtype="float32") /* ty=Tensor[(56), float32] */;
  %460 = cast(meta[relay.Constant][37] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %461 = reshape(%459, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %462 = reshape(%460, newshape=[5, 78]) /* ty=Tensor[(5, 78), float32] */;
  %463 = @func_8788(%461, %462) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) */;
  %464 = %458.2;
  %465 = %463.1;
  (%464, %465, %var_12712, meta[relay.Constant][37] /* ty=Tensor[(390), float32] */)
}

def @func_6669() -> Tensor[(10, 8, 1), float32] {
  %466 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
  %466.0
}

def @func_12991(%var_12988: Tensor[(195, 2), float32], %var_12989: Tensor[(35), float32], %var_12990: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(80), float64], Tensor[(195, 2), float32], Tensor[(35), float32], Tensor[(10, 8, 273), uint16], Tensor[(15, 4, 11), int32]) {
  @func_12986(%var_12988, %var_12989, %var_12990) /* ty=(Tensor[(80), float64], Tensor[(80), float64], Tensor[(195, 2), float32], Tensor[(35), float32], Tensor[(10, 8, 273), uint16], Tensor[(15, 4, 11), int32]) */
}

def @func_10472(%var_10467: Tensor[(8, 8, 1), bool]) -> (Tensor[(8, 8, 6), bool],) {
  %467 = cast(%var_10467, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
  %468 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 8, 6), bool] */, dtype="bool") /* ty=Tensor[(8, 8, 6), bool] */;
  %469 = logical_and(%467, %468) /* ty=Tensor[(8, 8, 6), bool] */;
  (%469,)
}

def @func_10661(%var_10659: Tensor[(2640), bool]) -> (Tensor[(15, 4, 11), int32], Tensor[(15, 4, 11), int32], Tensor[(2640), bool], Tensor[(11, 16, 15), float64]) {
  @func_10658(%var_10659) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(15, 4, 11), int32], Tensor[(2640), bool], Tensor[(11, 16, 15), float64]) */
}

def @func_10885() -> Tensor[(13, 2, 2), int32] {
  @func_10883() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_4653(%var_4651: Tensor[(16, 13, 5), float64], %var_4652: Tensor[(16, 13, 5), float64]) -> (Tensor[(16, 13, 5), float64],) {
  @func_4649(%var_4651, %var_4652) /* ty=(Tensor[(16, 13, 5), float64],) */
}

def @func_5410() -> (Tensor[(660), int32],) {
  %470 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %471 = %470.2;
  (%471,)
}

def @func_10583() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %472 = @func_9143() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %475 = cast(%473, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %476 = reshape(%475, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), bool] */;
  %477 = cos(%474) /* ty=Tensor[(15, 4, 11), float32] */;
  %478 = @func_9953(%476) /* ty=Tensor[(15, 4, 11), float64] */;
  %479 = @func_6712() /* ty=Tensor[(13, 2, 2), int32] */;
  %480 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
  (%477, %478, %479, %480)
}

def @func_12794() -> (Tensor[(13, 2, 2), int32],) {
  %482 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %481 = @func_10883() /* ty=Tensor[(13, 2, 2), int32] */;
    (%481,)
  };
  %482() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_13010() -> Tensor[(13, 2, 2), int32] {
  @func_13008() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_7427(%var_7398: Tensor[(10, 9, 9), float32]) -> (Tensor[(10, 9, 9), float32], Tensor[(13, 2, 2), int32]) {
  %483 = cast(%var_7398, dtype="float32") /* ty=Tensor[(10, 9, 9), float32] */;
  %484 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %485 = exp(%483) /* ty=Tensor[(10, 9, 9), float32] */;
  %486 = %484.0;
  (%485, %486)
}

def @func_8199() -> (Tensor[(15, 4, 11), int32],) {
  %487 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %488 = %487.0;
  (%488,)
}

def @func_11319(%var_11318: Tensor[(390), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64], Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(10, 8, 1), float32]) {
  %497 = fn (%var_11307: Tensor[(390), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64], Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(10, 8, 1), float32]) {
    %489 = @func_6399() /* ty=(Tensor[(80), float64], Tensor[(13, 2, 2), int32]) */;
    %490 = cast(%var_11307, dtype="float32") /* ty=Tensor[(390), float32] */;
    %491 = reshape(%490, newshape=[390]) /* ty=Tensor[(390), float32] */;
    %492 = @func_3988(%491) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
    %493 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
    %494 = %489.0;
    %495 = %492.1;
    %496 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
    (%493, %494, %495, %var_11307, %496)
  };
  %497(%var_11318) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(80), float64], Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(10, 8, 1), float32]) */
}

def @func_9956(%var_9954: Tensor[(15, 4, 11), bool]) -> Tensor[(15, 4, 11), float64] {
  @func_9953(%var_9954) /* ty=Tensor[(15, 4, 11), float64] */
}

def @func_12907(%var_12845: Tensor[(390), float32], %var_12873: Tensor[(35), float32], %var_12891: Tensor[(273), float32]) -> (Tensor[(80), float64], Tensor[(4, 4, 12), float64], Tensor[(192), float64], Tensor[(35), uint64], Tensor[(56, 390), uint64], Tensor[(273), float32], Tensor[(56, 2288), int64]) {
  %498 = cast(meta[relay.Constant][39] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %499 = reshape(%498, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), float64] */;
  %500 = @func_11771(%499) /* ty=(Tensor[(4, 4, 12), float64],) */;
  %501 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 1), float32] */, dtype="float32") /* ty=Tensor[(56, 1), float32] */;
  %502 = cast(%var_12845, dtype="float32") /* ty=Tensor[(390), float32] */;
  %503 = reshape(%501, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %504 = reshape(%502, newshape=[5, 78]) /* ty=Tensor[(5, 78), float32] */;
  %505 = @func_8788(%503, %504) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(35), float32], Tensor[(15, 4, 11), int64], Tensor[(180), float64], Tensor[(5, 78), float64]) */;
  %506 = %505.3;
  %507 = cast(%var_12873, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(1), int32] */;
  %509 = cast(%506, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %511 = cast(%var_12845, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %512 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 1), float32] */, dtype="uint32") /* ty=Tensor[(56, 1), uint32] */;
  %513 = multiply(%511, %512) /* ty=Tensor[(56, 390), uint32] */;
  %514 = cast(%513, dtype="uint64") /* ty=Tensor[(56, 390), uint64] */;
  %515 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 1), float32] */, dtype="uint64") /* ty=Tensor[(56, 1), uint64] */;
  %516 = cast(%var_12891, dtype="float32") /* ty=Tensor[(273), float32] */;
  %517 = reshape(%516, newshape=[273]) /* ty=Tensor[(273), float32] */;
  %518 = @func_5487(%517) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */;
  %519 = %518.7;
  %520 = cast(%519, dtype="int64") /* ty=Tensor[(2288), int64] */;
  %521 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 1), float32] */, dtype="int64") /* ty=Tensor[(56, 1), int64] */;
  %522 = @func_8547() /* ty=Tensor[(80), float64] */;
  %523 = %500.0;
  %524 = maximum(%509, %510) /* ty=Tensor[(35), uint64] */;
  %525 = left_shift(%514, %515) /* ty=Tensor[(56, 390), uint64] */;
  %526 = bitwise_or(%520, %521) /* ty=Tensor[(56, 2288), int64] */;
  (%522, %523, meta[relay.Constant][39] /* ty=Tensor[(192), float64] */, %524, %525, %var_12891, %526)
}

def @func_11950(%var_11948: Tensor[(10, 15, 14), float32], %var_11949: Tensor[(10, 15, 14), float32]) -> (Tensor[(10, 15, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
  %535 = fn (%var_11923: Tensor[(10, 15, 14), float32], %var_11924: Tensor[(10, 15, 14), float32]) -> (Tensor[(10, 15, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
    %527 = cast(%var_11924, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
    %528 = shape_of(%var_11923, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%var_11923, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %531 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
    %532 = reshape(%531, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
    %533 = floor_divide(%529, %530) /* ty=Tensor[(10, 15, 14), float32] */;
    %534 = @func_1070(%532) /* ty=Tensor[(15, 4, 11), int32] */;
    (%533, %534, meta[relay.Constant][41] /* ty=Tensor[(660), int32] */)
  };
  %535(%var_11948, %var_11949) /* ty=(Tensor[(10, 15, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */
}

def @func_9048() -> (Tensor[(13, 2, 2), int32],) {
  %536 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %537 = %536.0;
  (%537,)
}

def @func_12376() -> (Tensor[(15, 4, 11), float64],) {
  @func_12374() /* ty=(Tensor[(15, 4, 11), float64],) */
}

def @func_7824() -> (Tensor[(15, 4, 11), int32],) {
  %538 = @func_7241() /* ty=Tensor[(15, 4, 11), int32] */;
  (%538,)
}

def @func_5149() -> (Tensor[(13, 2, 2), int32],) {
  @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_5751() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) {
  %546 = fn () -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) {
    %539 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
    %540 = %539.0;
    %541 = cast(%540, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
    %542 = acosh(%541) /* ty=Tensor[(15, 4, 11), float32] */;
    %543 = cast(%542, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
    %544 = reshape(%543, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
    %545 = @func_1070(%544) /* ty=Tensor[(15, 4, 11), int32] */;
    (%542, %545)
  };
  %546() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */
}

def @func_9025() -> (Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) {
  %555 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) {
    %547 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %548 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %549 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %550 = reshape(%548, newshape=[16, 13, 5]) /* ty=Tensor[(16, 13, 5), float64] */;
    %551 = reshape(%549, newshape=[16, 13, 5]) /* ty=Tensor[(16, 13, 5), float64] */;
    %552 = @func_4649(%550, %551) /* ty=(Tensor[(16, 13, 5), float64],) */;
    %553 = %547.0;
    %554 = %552.0;
    (%553, %554, meta[relay.Constant][42] /* ty=Tensor[(1040), float64] */)
  };
  %555() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) */
}

def @func_5249(%var_5247: Tensor[(168), int16], %var_5248: Tensor[(3, 60), float64]) -> (Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) {
  @func_5245(%var_5247, %var_5248) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) */
}

def @func_7085() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %556 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %557 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %558 = %556.0;
  %559 = %557.0;
  (%558, %559)
}

def @func_4575(%var_4573: Tensor[(8, 13, 6), int64], %var_4574: Tensor[(8, 13, 6), int64]) -> Tensor[(8, 13, 6), int64] {
  @func_4571(%var_4573, %var_4574) /* ty=Tensor[(8, 13, 6), int64] */
}

def @func_8650() -> (Tensor[(15, 4, 11), bool], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
  %560 = @func_8594() /* ty=(Tensor[(15, 4, 11), bool],) */;
  %561 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %562 = @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */;
  %563 = %560.0;
  %564 = %561.0;
  %565 = %562.0;
  (%563, %564, %565)
}

def @func_12374() -> (Tensor[(15, 4, 11), float64],) {
  %566 = @func_8137() /* ty=(Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) */;
  %567 = %566.3;
  (%567,)
}

def @func_10818() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %572 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
    %568 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %569 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %570 = %568.0;
    %571 = %569.0;
    (%570, %571)
  };
  %572() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @main() -> Tensor[(6, 12, 35), float64] {
  %573 = @func_8858() /* ty=Tensor[(6, 12, 1), float64] */;
  %574 = @func_8030() /* ty=(Tensor[(35), float32],) */;
  %575 = %574.0;
  %576 = cast(%573, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
  %577 = cast(%575, dtype="float64") /* ty=Tensor[(35), float64] */;
  power(%576, %577) /* ty=Tensor[(6, 12, 35), float64] */
}

def @func_11199(%var_11198: Tensor[(8, 6, 1), float32]) -> (Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) {
  %582 = fn (%var_11160: Tensor[(8, 6, 1), float32]) -> (Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) {
    %578 = cast(%var_11160, dtype="float32") /* ty=Tensor[(8, 6, 1), float32] */;
    %579 = cast(%var_11160, dtype="float64") /* ty=Tensor[(8, 6, 1), float64] */;
    %580 = atan(%578) /* ty=Tensor[(8, 6, 1), float32] */;
    %581 = log(%579) /* ty=Tensor[(8, 6, 1), float64] */;
    (%580, %581)
  };
  %582(%var_11198) /* ty=(Tensor[(8, 6, 1), float32], Tensor[(8, 6, 1), float64]) */
}

def @func_6266() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %583 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %584 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %585 = %583.0;
  %586 = %584.0;
  (%585, %586)
}

def @func_2089(%var_2087: int8, %var_2088: Tensor[(4, 5, 2), int8]) -> Tensor[(4, 5, 2), bool] {
  @func_2085(%var_2087, %var_2088) /* ty=Tensor[(4, 5, 2), bool] */
}

def @func_1073(%var_1071: Tensor[(15, 4, 11), int32]) -> Tensor[(15, 4, 11), int32] {
  @func_1070(%var_1071) /* ty=Tensor[(15, 4, 11), int32] */
}

def @func_5761(%var_5760: Tensor[(11, 16, 15), bool]) -> (Tensor[(11, 16, 15), bool],) {
  %592 = fn (%var_5752: Tensor[(11, 16, 15), bool]) -> (Tensor[(11, 16, 15), bool],) {
    %587 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 16, 15), bool] */, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %588 = shape_of(%var_5752, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(%var_5752, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %591 = logical_and(%589, %590) /* ty=Tensor[(11, 16, 15), bool] */;
    (%591,)
  };
  %592(%var_5760) /* ty=(Tensor[(11, 16, 15), bool],) */
}

def @func_6322() -> Tensor[(13, 2, 2), int32] {
  %593 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %593.0
}

def @func_8012(%var_8011: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(40), int8], Tensor[(14), uint64], Tensor[(112), uint64]) {
  %607 = fn (%var_7965: Tensor[(13, 2, 2), int32]) -> (Tensor[(13, 2, 2), bool], Tensor[(40), int8], Tensor[(14), uint64], Tensor[(112), uint64]) {
    %594 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %595 = %594.2;
    %596 = cast(%var_7965, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
    %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
    %598 = cast(%595, dtype="bool") /* ty=Tensor[(13, 2, 2), bool] */;
    %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %600 = cast(meta[relay.Constant][44] /* ty=Tensor[(14), uint64] */, dtype="uint64") /* ty=Tensor[(14), uint64] */;
    %601 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %602 = reshape(%600, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), uint64] */;
    %603 = reshape(%601, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), uint64] */;
    %604 = @func_5605(%602, %603) /* ty=(Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) */;
    %605 = less(%598, %599) /* ty=Tensor[(13, 2, 2), bool] */;
    %606 = %604.3;
    (%605, %606, meta[relay.Constant][44] /* ty=Tensor[(14), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(112), uint64] */)
  };
  %607(%var_8011) /* ty=(Tensor[(13, 2, 2), bool], Tensor[(40), int8], Tensor[(14), uint64], Tensor[(112), uint64]) */
}

def @func_13101(%var_13100: Tensor[(192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64], Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15, 4, 11), uint32]) {
  %627 = fn (%var_13062: Tensor[(192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64], Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15, 4, 11), uint32]) {
    %608 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %609 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %610 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %611 = reshape(%609, newshape=[2, 40]) /* ty=Tensor[(2, 40), float64] */;
    %612 = reshape(%610, newshape=[2, 40]) /* ty=Tensor[(2, 40), float32] */;
    %613 = @func_8496(%611, %612) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) */;
    %614 = @func_11111() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */;
    %615 = cast(%var_13062, dtype="float32") /* ty=Tensor[(192), float32] */;
    %616 = cast(%var_13062, dtype="float32") /* ty=Tensor[(192), float32] */;
    %617 = reshape(%615, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %618 = reshape(%616, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %619 = @func_4087(%617, %618) /* ty=(Tensor[(2, 6, 16), bool],) */;
    %620 = @func_10391() /* ty=(Tensor[(15, 4, 11), uint32],) */;
    %621 = @func_10883() /* ty=Tensor[(13, 2, 2), int32] */;
    %622 = %608.0;
    %623 = %613.13;
    %624 = %614.0;
    %625 = %619.0;
    %626 = %620.0;
    (%621, %622, %623, meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, %624, %625, %var_13062, %626)
  };
  %627(%var_13100) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64], Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15, 4, 11), uint32]) */
}

def @func_11774(%var_11772: Tensor[(4, 4, 12), float64]) -> (Tensor[(4, 4, 12), float64],) {
  @func_11771(%var_11772) /* ty=(Tensor[(4, 4, 12), float64],) */
}

def @func_1038(%var_1034: Tensor[(14, 12, 1), int16], %var_1035: Tensor[(14, 12, 1), int16], %var_1036: Tensor[(390, 1), float32], %var_1037: Tensor[(180), float64]) -> (Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) {
  %655 = fn (%var_974: Tensor[(14, 12, 1), int16], %var_975: Tensor[(14, 12, 1), int16], %var_1005: Tensor[(390, 1), float32], %var_1011: Tensor[(180), float64]) -> (Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) {
    %628 = cast(%var_975, dtype="int16") /* ty=Tensor[(14, 12, 1), int16] */;
    %629 = shape_of(%var_974, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%var_974, dtype="int16") /* ty=Tensor[(14, 12, 1), int16] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %632 = bitwise_and(%630, %631) /* ty=Tensor[(14, 12, ?), int16] */;
    %633 = cast(%var_975, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="bool") /* ty=Tensor[(14, 12, ?), bool] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %637 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
    %638 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
    %639 = reshape(%637, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %640 = reshape(%638, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %641 = @func_220(%639, %640) /* ty=(Tensor[(2, 15, 13), float32],) */;
    %642 = cast(%var_1011, dtype="float64") /* ty=Tensor[(180), float64] */;
    %643 = cast(%var_1005, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
    %644 = cast(meta[relay.Constant][47] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %645 = reshape(%642, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
    %646 = reshape(%643, newshape=[390]) /* ty=Tensor[(390), float32] */;
    %647 = reshape(%644, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
    %648 = @func_894(%645, %646, %647) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
    %649 = cast(%var_1011, dtype="float64") /* ty=Tensor[(180), float64] */;
    %650 = cast(%var_1005, dtype="float64") /* ty=Tensor[(390, 1), float64] */;
    %651 = logical_or(%635, %636) /* ty=Tensor[(14, 12, ?), bool] */;
    %652 = %641.0;
    %653 = %648.3;
    %654 = divide(%649, %650) /* ty=Tensor[(390, 180), float64] */;
    (%651, %652, %653, meta[relay.Constant][47] /* ty=Tensor[(80), float64] */, %654)
  };
  %655(%var_1034, %var_1035, %var_1036, %var_1037) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */
}

def @func_7334(%var_7331: Tensor[(4, 1, 14), float32], %var_7332: Tensor[(390), float32], %var_7333: Tensor[(7, 5), float32]) -> (Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) {
  @func_7329(%var_7331, %var_7332, %var_7333) /* ty=(Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) */
}

def @func_2831(%var_2829: Tensor[(1, 10, 16), float32]) -> (Tensor[(?, 10, 16), bool],) {
  @func_2828(%var_2829) /* ty=(Tensor[(?, 10, 16), bool],) */
}

def @func_12748() -> (Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) {
  %660 = fn () -> (Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) {
    %656 = @func_7728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
    %657 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
    %658 = %656.2;
    %659 = %657.3;
    (%658, %659)
  };
  %660() /* ty=(Tensor[(2288), float32], Tensor[(10, 8, 1), float32]) */
}

def @func_7826() -> (Tensor[(15, 4, 11), int32],) {
  @func_7824() /* ty=(Tensor[(15, 4, 11), int32],) */
}

def @func_11622() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_11620() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_10239() -> (Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float32], Tensor[(13, 2, 2), int32]) {
  @func_10237() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float32], Tensor[(13, 2, 2), int32]) */
}

def @func_9969() -> (Tensor[(13, 2, 2), int32],) {
  @func_9967() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_7507() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %666 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
    %661 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %662 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %663 = %661.0;
    %664 = %662.0;
    %665 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
    (%663, %664, %665)
  };
  %666() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_9592() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %667 = @func_9024() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(16, 13, 5), float64], Tensor[(1040), float64]) */;
  %668 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %669 = %667.0;
  %670 = %668.0;
  (%669, %670)
}

def @func_10456() -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64]) {
  %675 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(80), float64]) {
    %671 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %672 = @func_6385() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %673 = %671.0;
    %674 = %672.2;
    (%673, %674)
  };
  %675() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(80), float64]) */
}

def @func_9685() -> Tensor[(2288), float32] {
  %676 = @func_8137() /* ty=(Tensor[(35), float32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), float64], Tensor[(7, 1, 5), float32], Tensor[(13, 2, 2), int32], Tensor[(200), uint8], Tensor[(2288), float32]) */;
  %676.7
}

def @func_4770() -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  %677 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %678 = cast(meta[relay.Constant][48] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %679 = reshape(%678, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %680 = cast(meta[relay.Constant][49] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %681 = reshape(%680, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %682 = @func_299(%681) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %683 = %677.0;
  %684 = @func_1070(%679) /* ty=Tensor[(15, 4, 11), int32] */;
  %685 = %682.0;
  (%683, %684, meta[relay.Constant][48] /* ty=Tensor[(660), int32] */, %685, meta[relay.Constant][49] /* ty=Tensor[(80), float64] */)
}

def @func_9101(%var_9099: Tensor[(10, 13, 2), float64]) -> Tensor[(10, 13, 2), float64] {
  @func_9098(%var_9099) /* ty=Tensor[(10, 13, 2), float64] */
}

def @func_2828(%var_2819: Tensor[(1, 10, 16), float32]) -> (Tensor[(?, 10, 16), bool],) {
  %686 = cast(%var_2819, dtype="float32") /* ty=Tensor[(1, 10, 16), float32] */;
  %687 = sigmoid(%686) /* ty=Tensor[(1, 10, 16), float32] */;
  %688 = cast(%var_2819, dtype="bool") /* ty=Tensor[(1, 10, 16), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(1, 10, 16), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = logical_or(%690, %691) /* ty=Tensor[(?, 10, 16), bool] */;
  (%692,)
}

def @func_5303() -> (Tensor[(13, 2, 2), int32],) {
  %693 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %694 = %693.0;
  (%694,)
}

def @func_9661() -> (Tensor[(15, 4, 11), float32],) {
  %695 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %696 = %695.1;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %698 = rsqrt(%697) /* ty=Tensor[(15, 4, 11), float64] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %700 = tan(%699) /* ty=Tensor[(15, 4, 11), float32] */;
  (%700,)
}

def @func_5067(%var_5059: Tensor[(462), float32], %var_5060: Tensor[(180), float64], %var_5062: Tensor[(35, 1), float32]) -> (Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) {
  %701 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %702 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 273), float32] */, dtype="float32") /* ty=Tensor[(1, 273), float32] */;
  %703 = cast(%var_5059, dtype="float32") /* ty=Tensor[(462), float32] */;
  %704 = cast(%var_5060, dtype="float64") /* ty=Tensor[(180), float64] */;
  %705 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %706 = cast(%var_5062, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %707 = cast(meta[relay.Constant][52] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %708 = reshape(%702, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %709 = reshape(%703, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
  %710 = reshape(%704, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %711 = reshape(%705, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %712 = reshape(%706, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %713 = reshape(%707, newshape=[2288]) /* ty=Tensor[(2288), float32] */;
  %714 = @func_3852(%708, %709, %710, %711, %712, %713) /* ty=(Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) */;
  %715 = %701.1;
  %716 = %714.10;
  (%715, %716, meta[relay.Constant][50] /* ty=Tensor[(1, 273), float32] */, %var_5059, %var_5060, meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, %var_5062, meta[relay.Constant][52] /* ty=Tensor[(2288), float32] */)
}

def @func_12721(%var_12719: Tensor[(56), float32]) -> (Tensor[(462), float32], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(390), float32]) {
  @func_12718(%var_12719) /* ty=(Tensor[(462), float32], Tensor[(7, 5), float32], Tensor[(56), float32], Tensor[(390), float32]) */
}

def @func_9800(%var_9798: Tensor[(462), float32], %var_9799: Tensor[(35, 1), float32]) -> (Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) {
  @func_9796(%var_9798, %var_9799) /* ty=(Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) */
}

def @func_2674(%var_2671: Tensor[(1, 10, 12), float32], %var_2672: Tensor[(15, 10, 12), float32], %var_2673: Tensor[(195, 2), float32]) -> (Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) {
  @func_2669(%var_2671, %var_2672, %var_2673) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */
}

def @func_6401() -> (Tensor[(80), float64], Tensor[(13, 2, 2), int32]) {
  @func_6399() /* ty=(Tensor[(80), float64], Tensor[(13, 2, 2), int32]) */
}

def @func_8742() -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) {
  %724 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) {
    %717 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %718 = cast(meta[relay.Constant][53] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %719 = cast(meta[relay.Constant][53] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %720 = reshape(%718, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %721 = reshape(%719, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
    %722 = %717.0;
    %723 = @func_1356(%720, %721) /* ty=Tensor[(6, 11, 7), float64] */;
    (%722, %723, meta[relay.Constant][53] /* ty=Tensor[(462), float32] */)
  };
  %724() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32]) */
}

def @func_6036() -> (Tensor[(13, 2, 2), int32],) {
  %727 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %725 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %726 = %725.0;
    (%726,)
  };
  %727() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_7774() -> Tensor[(13, 2, 2), int32] {
  @func_7772() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_9594() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_9592() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_8548() -> Tensor[(80), float64] {
  %729 = fn () -> Tensor[(80), float64] {
    %728 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %728.4
  };
  %729() /* ty=Tensor[(80), float64] */
}

def @func_3860(%var_3854: Tensor[(13, 7, 3), float32], %var_3855: Tensor[(1, 462), float32], %var_3856: Tensor[(180), float64], %var_3857: Tensor[(80), float64], %var_3858: Tensor[(35), float32], %var_3859: Tensor[(2288), float32]) -> (Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) {
  @func_3852(%var_3854, %var_3855, %var_3856, %var_3857, %var_3858, %var_3859) /* ty=(Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) */
}

def @func_7063() -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
  %736 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
    %730 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %731 = cast(meta[relay.Constant][54] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
    %732 = reshape(%731, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
    %733 = @func_2795(%732) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
    %734 = %730.0;
    %735 = %733.1;
    (%734, %735, meta[relay.Constant][54] /* ty=Tensor[(2288), float32] */)
  };
  %736() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */
}

def @func_2085(%var_2077: int8, %var_2078: Tensor[(4, 5, 2), int8]) -> Tensor[(4, 5, 2), bool] {
  %737 = cast(%var_2077, dtype="bool") /* ty=bool */;
  %738 = cast(%var_2078, dtype="bool") /* ty=Tensor[(4, 5, 2), bool] */;
  less(%737, %738) /* ty=Tensor[(4, 5, 2), bool] */
}

def @func_6728() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) {
  %739 = cast(meta[relay.Constant][55] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %740 = reshape(%739, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %741 = @func_6322() /* ty=Tensor[(13, 2, 2), int32] */;
  %742 = @func_3456(%740) /* ty=Tensor[(7, 1, 5), float32] */;
  (%741, %742, meta[relay.Constant][55] /* ty=Tensor[(35), float32] */)
}

def @func_11112() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
  %749 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
    %743 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %744 = @func_10817() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %745 = @func_9892() /* ty=(Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) */;
    %746 = %743.0;
    %747 = %744.1;
    %748 = %745.2;
    (%746, %747, %748)
  };
  %749() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */
}

def @func_5581() -> Tensor[(13, 2, 2), int32] {
  %750 = fn () -> Tensor[(13, 2, 2), int32] {
    @func_4843() /* ty=Tensor[(13, 2, 2), int32] */
  };
  %750() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_2669(%var_2652: Tensor[(1, 10, 12), float32], %var_2653: Tensor[(15, 10, 12), float32], %var_2662: Tensor[(195, 2), float32]) -> (Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) {
  %751 = cast(%var_2652, dtype="bool") /* ty=Tensor[(1, 10, 12), bool] */;
  %752 = cast(%var_2653, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
  %753 = cast(meta[relay.Constant][56] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %754 = cast(meta[relay.Constant][56] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %755 = cast(%var_2662, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %756 = cast(meta[relay.Constant][57] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %757 = reshape(%753, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %758 = reshape(%754, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %759 = reshape(%755, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %760 = reshape(%756, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %761 = @func_1033(%757, %758, %759, %760) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %762 = cast(meta[relay.Constant][56] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %763 = cast(meta[relay.Constant][56] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %764 = cast(%var_2662, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %765 = cast(meta[relay.Constant][57] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %766 = reshape(%762, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %767 = reshape(%763, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), int16] */;
  %768 = reshape(%764, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %769 = reshape(%765, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %770 = @func_1033(%766, %767, %768, %769) /* ty=(Tensor[(14, 12, ?), bool], Tensor[(2, 15, 13), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(390, 180), float64]) */;
  %771 = not_equal(%751, %752) /* ty=Tensor[(15, 10, 12), bool] */;
  %772 = %761.1;
  %773 = %770.1;
  (%771, %772, meta[relay.Constant][56] /* ty=Tensor[(168), int16] */, %var_2662, meta[relay.Constant][57] /* ty=Tensor[(180), float64] */, %773)
}

def @func_7661(%var_7659: float64, %var_7660: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
  %777 = fn (%var_7648: float64, %var_7649: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
    %774 = cast(%var_7648, dtype="float64") /* ty=float64 */;
    %775 = cast(%var_7649, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
    %776 = subtract(%774, %775) /* ty=Tensor[(9, 15, 6), float64] */;
    (%776,)
  };
  %777(%var_7659, %var_7660) /* ty=(Tensor[(9, 15, 6), float64],) */
}

def @func_9502(%var_9489: Tensor[(5, 10, 5), float64]) -> Tensor[(5, 10, 5), float64] {
  %778 = cast(%var_9489, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  sin(%778) /* ty=Tensor[(5, 10, 5), float64] */
}

def @func_10585() -> (Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_10583() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_6773() -> Tensor[(15, 4, 11), uint32] {
  %779 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
  %780 = %779.0;
  %781 = cast(meta[relay.Constant][58] /* ty=Tensor[(15, 4, 11), bool] */, dtype="uint32") /* ty=Tensor[(15, 4, 11), uint32] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="uint32") /* ty=Tensor[(15, 4, 11), uint32] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%783, %784) /* ty=Tensor[(15, 4, 11), uint32] */
}

def @func_6713() -> Tensor[(13, 2, 2), int32] {
  %785 = fn () -> Tensor[(13, 2, 2), int32] {
    @func_6219() /* ty=Tensor[(13, 2, 2), int32] */
  };
  %785() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_9050() -> (Tensor[(13, 2, 2), int32],) {
  @func_9048() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_4772() -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) {
  @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */
}

def @func_11697() -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int64], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32]) {
  %793 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int64], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32]) {
    %786 = @func_11111() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */;
    %787 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
    %788 = @func_7085() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %789 = %786.1;
    %790 = %787.1;
    %791 = %788.1;
    %792 = @func_8151() /* ty=Tensor[(15, 4, 11), uint32] */;
    (%789, %790, %791, %792)
  };
  %793() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int64], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), uint32]) */
}

def @func_10506() -> (Tensor[(15, 4, 11), int32],) {
  %794 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %795 = %794.1;
  (%795,)
}

def @func_10155() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(7, 5), float32], Tensor[(2, 6, 16), bool], Tensor[(192), float32]) {
  @func_10153() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(7, 5), float32], Tensor[(2, 6, 16), bool], Tensor[(192), float32]) */
}

def @func_4822() -> (Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) {
  %808 = fn () -> (Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) {
    %796 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
    %797 = %796.1;
    %798 = cast(meta[relay.Constant][59] /* ty=Tensor[(15, 4, 11), int32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%797, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %802 = cast(meta[relay.Constant][59] /* ty=Tensor[(15, 4, 11), int32] */, dtype="int64") /* ty=Tensor[(15, 4, 11), int64] */;
    %803 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%797, dtype="int64") /* ty=Tensor[(15, 4, 11), int64] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %806 = less(%800, %801) /* ty=Tensor[(15, 4, 11), bool] */;
    %807 = bitwise_and(%804, %805) /* ty=Tensor[(15, 4, 11), int64] */;
    (%806, %807)
  };
  %808() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */
}

def @func_11577() -> Tensor[(13, 2, 2), int32] {
  @func_10883() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_5352() -> (Tensor[(13, 2, 2), int32],) {
  %811 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %809 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %810 = %809.0;
    (%810,)
  };
  %811() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_8652() -> (Tensor[(15, 4, 11), bool], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) {
  @func_8650() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32]) */
}

def @func_10153() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(7, 5), float32], Tensor[(2, 6, 16), bool], Tensor[(192), float32]) {
  %812 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %813 = reshape(%812, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %814 = cast(meta[relay.Constant][61] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %815 = cast(meta[relay.Constant][61] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %816 = reshape(%814, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %817 = reshape(%815, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %818 = @func_4087(%816, %817) /* ty=(Tensor[(2, 6, 16), bool],) */;
  %819 = @func_6219() /* ty=Tensor[(13, 2, 2), int32] */;
  %820 = @func_3456(%813) /* ty=Tensor[(7, 1, 5), float32] */;
  %821 = %818.0;
  (%819, %820, meta[relay.Constant][60] /* ty=Tensor[(7, 5), float32] */, %821, meta[relay.Constant][61] /* ty=Tensor[(192), float32] */)
}

def @func_7930(%var_7928: Tensor[(1, 192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(8, 192), float32]) {
  @func_7927(%var_7928) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(8, 192), float32]) */
}

def @func_5072(%var_5069: Tensor[(462), float32], %var_5070: Tensor[(180), float64], %var_5071: Tensor[(35, 1), float32]) -> (Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) {
  @func_5067(%var_5069, %var_5070, %var_5071) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */
}

def @func_6541(%var_6537: Tensor[(13, 2, 2), int32], %var_6538: Tensor[(180), float64], %var_6539: Tensor[(6, 20), float32], %var_6540: Tensor[(1800), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) {
  %847 = fn (%var_6502: Tensor[(13, 2, 2), int32], %var_6519: Tensor[(180), float64], %var_6531: Tensor[(6, 20), float32], %var_6532: Tensor[(1800), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) {
    %822 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %823 = @func_6035() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %824 = %823.0;
    %825 = cast(%var_6502, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
    %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(%824, dtype="int32") /* ty=Tensor[(13, 2, 2), int32] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %829 = cast(%var_6519, dtype="float64") /* ty=Tensor[(180), float64] */;
    %830 = cast(meta[relay.Constant][62] /* ty=Tensor[(390, 1), float32] */, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
    %831 = cast(meta[relay.Constant][63] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %832 = reshape(%829, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
    %833 = reshape(%830, newshape=[390]) /* ty=Tensor[(390), float32] */;
    %834 = reshape(%831, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
    %835 = @func_894(%832, %833, %834) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
    %836 = cast(%var_6531, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
    %837 = cast(%var_6532, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %838 = cast(meta[relay.Constant][62] /* ty=Tensor[(390, 1), float32] */, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
    %839 = reshape(%836, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), float32] */;
    %840 = reshape(%837, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %841 = reshape(%838, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %842 = @func_2669(%839, %840, %841) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(2, 15, 13), float32], Tensor[(168), int16], Tensor[(195, 2), float32], Tensor[(180), float64], Tensor[(2, 15, 13), float32]) */;
    %843 = %822.0;
    %844 = add(%827, %828) /* ty=Tensor[(13, 2, 2), int32] */;
    %845 = %835.5;
    %846 = %842.4;
    (%843, %844, %845, %var_6519, meta[relay.Constant][62] /* ty=Tensor[(390, 1), float32] */, meta[relay.Constant][63] /* ty=Tensor[(80), float64] */, %846, %var_6531, %var_6532)
  };
  %847(%var_6537, %var_6538, %var_6539, %var_6540) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(390, 1), float32], Tensor[(80), float64], Tensor[(180), float64], Tensor[(6, 20), float32], Tensor[(1800), float32]) */
}

def @func_5017(%var_5016: Tensor[(40), int8]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8], Tensor[(13, 2, 2), int32]) {
  %856 = fn (%var_5000: Tensor[(40), int8]) -> (Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8], Tensor[(13, 2, 2), int32]) {
    %848 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
    %849 = cast(meta[relay.Constant][64] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %850 = cast(%var_5000, dtype="int8") /* ty=Tensor[(40), int8] */;
    %851 = reshape(%849, newshape=[]) /* ty=int8 */;
    %852 = reshape(%850, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
    %853 = %848.0;
    %854 = @func_2085(%851, %852) /* ty=Tensor[(4, 5, 2), bool] */;
    %855 = @func_4843() /* ty=Tensor[(13, 2, 2), int32] */;
    (%853, %854, meta[relay.Constant][64] /* ty=int8 */, %var_5000, %855)
  };
  %856(%var_5016) /* ty=(Tensor[(15, 4, 11), bool], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8], Tensor[(13, 2, 2), int32]) */
}

def @func_7329(%var_7295: Tensor[(4, 1, 14), float32], %var_7307: Tensor[(390), float32], %var_7316: Tensor[(7, 5), float32]) -> (Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) {
  %857 = cast(%var_7307, dtype="float32") /* ty=Tensor[(390), float32] */;
  %858 = reshape(%857, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %859 = @func_3988(%858) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(2, 15, 13), float32], Tensor[(390), float32]) */;
  %860 = cast(meta[relay.Constant][65] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %861 = cast(meta[relay.Constant][66] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %862 = cast(%var_7316, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %863 = reshape(%860, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %864 = reshape(%861, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %865 = reshape(%862, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %866 = @func_5067(%863, %864, %865) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %867 = cast(%var_7295, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %868 = log2(%867) /* ty=Tensor[(4, 1, 14), float32] */;
  %869 = cast(%868, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %870 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 660), int32] */, dtype="int32") /* ty=Tensor[(1, 660), int32] */;
  %871 = reshape(%870, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %872 = @func_4707(%871) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %873 = %859.2;
  %874 = %866.5;
  %875 = exp(%869) /* ty=Tensor[(4, 1, 14), float32] */;
  %876 = %872.3;
  (%873, %var_7307, %874, meta[relay.Constant][65] /* ty=Tensor[(462), float32] */, meta[relay.Constant][66] /* ty=Tensor[(180), float64] */, %var_7316, %875, %876, meta[relay.Constant][67] /* ty=Tensor[(1, 660), int32] */)
}

def @func_5487(%var_5445: Tensor[(273), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
  %877 = @func_5333() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %878 = cast(%var_5445, dtype="float32") /* ty=Tensor[(273), float32] */;
  %879 = cast(meta[relay.Constant][68] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %880 = cast(meta[relay.Constant][69] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %881 = cast(meta[relay.Constant][70] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %882 = cast(meta[relay.Constant][71] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %883 = cast(meta[relay.Constant][72] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %884 = reshape(%878, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %885 = reshape(%879, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
  %886 = reshape(%880, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %887 = reshape(%881, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %888 = reshape(%882, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %889 = reshape(%883, newshape=[2288]) /* ty=Tensor[(2288), float32] */;
  %890 = @func_3852(%884, %885, %886, %887, %888, %889) /* ty=(Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) */;
  %891 = cast(meta[relay.Constant][73] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %892 = reshape(%891, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %893 = @func_4707(%892) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %894 = %877.0;
  %895 = %890.1;
  %896 = %893.3;
  (%894, %895, %var_5445, meta[relay.Constant][68] /* ty=Tensor[(462), float32] */, meta[relay.Constant][69] /* ty=Tensor[(180), float64] */, meta[relay.Constant][70] /* ty=Tensor[(80), float64] */, meta[relay.Constant][71] /* ty=Tensor[(35), float32] */, meta[relay.Constant][72] /* ty=Tensor[(2288), float32] */, %896, meta[relay.Constant][73] /* ty=Tensor[(660), int32] */)
}

def @func_5490(%var_5488: Tensor[(273), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) {
  @func_5487(%var_5488) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35), float32], Tensor[(2288), float32], Tensor[(15, 4, 11), int32], Tensor[(660), int32]) */
}

def @func_6730() -> (Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) {
  @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */
}

def @func_10032() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64]) {
  %907 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64]) {
    %897 = @func_6266() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %898 = @func_7521() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %899 = cast(meta[relay.Constant][74] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %900 = cast(meta[relay.Constant][74] /* ty=Tensor[(80), float64] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %901 = reshape(%899, newshape=[2, 40]) /* ty=Tensor[(2, 40), float64] */;
    %902 = reshape(%900, newshape=[2, 40]) /* ty=Tensor[(2, 40), float32] */;
    %903 = @func_8496(%901, %902) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(2, 15, 13), bool], Tensor[(4, 10, 5), uint8], Tensor[(100, 2), uint8], Tensor[(10, 8, 660), uint32], Tensor[(2, 40), int32], Tensor[(2, 40), float32], Tensor[(2, 15, 13), bool], Tensor[(15, 4, 11), int32], Tensor[(624), int64], Tensor[(2, 40), float64]) */;
    %904 = %897.0;
    %905 = %898.1;
    %906 = %903.13;
    (%904, %905, %906, meta[relay.Constant][74] /* ty=Tensor[(80), float64] */)
  };
  %907() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(624), int64], Tensor[(80), float64]) */
}

def @func_9505(%var_9503: Tensor[(5, 10, 5), float64]) -> Tensor[(5, 10, 5), float64] {
  @func_9502(%var_9503) /* ty=Tensor[(5, 10, 5), float64] */
}

def @func_10856(%var_10854: Tensor[(168), int16], %var_10855: Tensor[(35), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(10, 4), int8], int8, Tensor[(168), int16], Tensor[(180), float64], Tensor[(180), float64], Tensor[(462), float32], Tensor[(35), float32]) {
  %924 = fn (%var_10838: Tensor[(168), int16], %var_10847: Tensor[(35), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(10, 4), int8], int8, Tensor[(168), int16], Tensor[(180), float64], Tensor[(180), float64], Tensor[(462), float32], Tensor[(35), float32]) {
    %908 = @func_10817() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
    %909 = cast(meta[relay.Constant][75] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %910 = cast(%var_10838, dtype="int16") /* ty=Tensor[(168), int16] */;
    %911 = cast(meta[relay.Constant][76] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %912 = reshape(%909, newshape=[]) /* ty=int8 */;
    %913 = reshape(%910, newshape=[168]) /* ty=Tensor[(168), int16] */;
    %914 = reshape(%911, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %915 = @func_9354(%912, %913, %914) /* ty=(Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) */;
    %916 = cast(meta[relay.Constant][77] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %917 = cast(%var_10847, dtype="float32") /* ty=Tensor[(35), float32] */;
    %918 = reshape(%916, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %919 = reshape(%917, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
    %920 = @func_9796(%918, %919) /* ty=(Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) */;
    %921 = %908.1;
    %922 = %915.7;
    %923 = %920.3;
    (%921, %922, meta[relay.Constant][75] /* ty=int8 */, %var_10838, meta[relay.Constant][76] /* ty=Tensor[(180), float64] */, %923, meta[relay.Constant][77] /* ty=Tensor[(462), float32] */, %var_10847)
  };
  %924(%var_10854, %var_10855) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(10, 4), int8], int8, Tensor[(168), int16], Tensor[(180), float64], Tensor[(180), float64], Tensor[(462), float32], Tensor[(35), float32]) */
}

def @func_11012(%var_11010: Tensor[(16, 9, 11), int8]) -> (Tensor[(16, 9, 11), int8],) {
  @func_11009(%var_11010) /* ty=(Tensor[(16, 9, 11), int8],) */
}

def @func_12323() -> (Tensor[(13, 2, 2), int32],) {
  %925 = @func_11902() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %926 = %925.0;
  (%926,)
}

def @func_12606() -> (Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32]) {
  %927 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
  %928 = %927.0;
  %929 = @func_7772() /* ty=Tensor[(13, 2, 2), int32] */;
  (%928, %929)
}

def @func_9834(%var_9832: int8, %var_9833: Tensor[(1, 40), int8]) -> (Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) {
  %942 = fn (%var_9818: int8, %var_9819: Tensor[(1, 40), int8]) -> (Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) {
    %930 = cast(%var_9818, dtype="int8") /* ty=int8 */;
    %931 = cast(%var_9819, dtype="int8") /* ty=Tensor[(1, 40), int8] */;
    %932 = reshape(%930, newshape=[]) /* ty=int8 */;
    %933 = reshape(%931, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
    %934 = cast(%var_9819, dtype="uint64") /* ty=Tensor[(1, 40), uint64] */;
    %935 = cast(%var_9818, dtype="uint64") /* ty=uint64 */;
    %936 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
    %937 = @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */;
    %938 = @func_2085(%932, %933) /* ty=Tensor[(4, 5, 2), bool] */;
    %939 = @func_6712() /* ty=Tensor[(13, 2, 2), int32] */;
    %940 = bitwise_xor(%934, %935) /* ty=Tensor[(1, 40), uint64] */;
    %941 = %936.0;
    (%937, %938, %939, %940, %941)
  };
  %942(%var_9832, %var_9833) /* ty=(Tensor[(15, 4, 11), uint32], Tensor[(4, 5, 2), bool], Tensor[(13, 2, 2), int32], Tensor[(1, 40), uint64], Tensor[(13, 2, 2), int32]) */
}

def @func_10475(%var_10473: Tensor[(8, 8, 1), bool]) -> (Tensor[(8, 8, 6), bool],) {
  @func_10472(%var_10473) /* ty=(Tensor[(8, 8, 6), bool],) */
}

def @func_12608() -> (Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32]) {
  @func_12606() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32]) */
}

def @func_12579(%var_12578: Tensor[(10, 13, 2), float64]) -> (Tensor[(15, 4, 11), int64], Tensor[(10, 13, 2), bool]) {
  %957 = fn (%var_12539: Tensor[(10, 13, 2), float64]) -> (Tensor[(15, 4, 11), int64], Tensor[(10, 13, 2), bool]) {
    %943 = @func_11507() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) */;
    %944 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
    %945 = %944.1;
    %946 = cast(%var_12539, dtype="uint8") /* ty=Tensor[(10, 13, 2), uint8] */;
    %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
    %948 = cast(%945, dtype="uint8") /* ty=Tensor[(10, 13, 2), uint8] */;
    %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %950 = right_shift(%948, %949) /* ty=Tensor[(10, 13, 2), uint8] */;
    %951 = cast(%945, dtype="bool") /* ty=Tensor[(10, 13, 2), bool] */;
    %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
    %953 = cast(%950, dtype="bool") /* ty=Tensor[(10, 13, 2), bool] */;
    %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %955 = %943.1;
    %956 = less_equal(%953, %954) /* ty=Tensor[(10, 13, 2), bool] */;
    (%955, %956)
  };
  %957(%var_12578) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(10, 13, 2), bool]) */
}

def @func_9892() -> (Tensor[(4, 10, 5), uint8], Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int32], Tensor[(260), float64]) {
  %958 = @func_7062() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
  %959 = @func_8594() /* ty=(Tensor[(15, 4, 11), bool],) */;
  %960 = %959.0;
  %961 = cast(%960, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
  %962 = reshape(%961, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), int32] */;
  %963 = @func_9480() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */;
  %964 = %958.1;
  %965 = @func_1070(%962) /* ty=Tensor[(15, 4, 11), int32] */;
  %966 = %963.2;
  (%964, %960, %965, %966)
}

def @func_9358(%var_9355: int8, %var_9356: Tensor[(168), int16], %var_9357: Tensor[(180), float64]) -> (Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) {
  %995 = fn (%var_9338: int8, %var_9343: Tensor[(168), int16], %var_9344: Tensor[(180), float64]) -> (Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) {
    %967 = @func_6669() /* ty=Tensor[(10, 8, 1), float32] */;
    %968 = cast(%967, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %969 = reshape(%968, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
    %970 = @func_299(%969) /* ty=(Tensor[(10, 8, 1), float64],) */;
    %971 = cast(%967, dtype="int16") /* ty=Tensor[(10, 8, 1), int16] */;
    %972 = cast(meta[relay.Constant][78] /* ty=Tensor[(10, 8, 2), float32] */, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
    %973 = multiply(%971, %972) /* ty=Tensor[(10, 8, 2), int16] */;
    %974 = cast(%973, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %975 = @func_5750() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int32]) */;
    %976 = %975.0;
    %977 = cast(%976, dtype="int32") /* ty=Tensor[(15, 4, 11), int32] */;
    %978 = reshape(%977, newshape=[660]) /* ty=Tensor[(660), int32] */;
    %979 = @func_4707(%978) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
    %980 = cast(%var_9338, dtype="int8") /* ty=int8 */;
    %981 = cast(meta[relay.Constant][79] /* ty=Tensor[(10, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 4), int8] */;
    %982 = reshape(%980, newshape=[]) /* ty=int8 */;
    %983 = reshape(%981, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), int8] */;
    %984 = cast(%var_9343, dtype="int16") /* ty=Tensor[(168), int16] */;
    %985 = cast(%var_9344, dtype="float64") /* ty=Tensor[(180), float64] */;
    %986 = reshape(%984, newshape=[168]) /* ty=Tensor[(168), int16] */;
    %987 = reshape(%985, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
    %988 = @func_5245(%986, %987) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(24, 26), bool], Tensor[(168), int16], Tensor[(390), float32], Tensor[(3, 60), float64], Tensor[(14, 12, 624), float64]) */;
    %989 = %970.0;
    %990 = log2(%974) /* ty=Tensor[(10, 8, 2), float64] */;
    %991 = @func_6219() /* ty=Tensor[(13, 2, 2), int32] */;
    %992 = %979.3;
    %993 = @func_2085(%982, %983) /* ty=Tensor[(4, 5, 2), bool] */;
    %994 = %988.0;
    (%989, %990, %976, %991, %992, %993, %var_9338, meta[relay.Constant][79] /* ty=Tensor[(10, 4), int8] */, %994, %var_9343, %var_9344)
  };
  %995(%var_9355, %var_9356, %var_9357) /* ty=(Tensor[(10, 8, 1), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 4, 11), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(4, 5, 2), bool], int8, Tensor[(10, 4), int8], Tensor[(13, 2, 2), int32], Tensor[(168), int16], Tensor[(180), float64]) */
}

def @func_12102(%var_12100: Tensor[(6, 28), int16], %var_12101: Tensor[(120), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(660), int32], Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), uint32], Tensor[(1, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(462), float32], Tensor[(200), uint8], Tensor[(180), float64], Tensor[(80), float32], Tensor[(120), float32]) {
  @func_12098(%var_12100, %var_12101) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(660), int32], Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), uint32], Tensor[(1, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(462), float32], Tensor[(200), uint8], Tensor[(180), float64], Tensor[(80), float32], Tensor[(120), float32]) */
}

def @func_12016(%var_12013: Tensor[(56), float32], %var_12014: Tensor[(390), float32], %var_12015: Tensor[(35, 1), float32]) -> (Tensor[(2288), float32], Tensor[(15, 4, 11), float32], Tensor[(80), float64], Tensor[(56), float32], Tensor[(390), float32], Tensor[(35, 1), float32]) {
  %1008 = fn (%var_12002: Tensor[(56), float32], %var_12003: Tensor[(390), float32], %var_12004: Tensor[(35, 1), float32]) -> (Tensor[(2288), float32], Tensor[(15, 4, 11), float32], Tensor[(80), float64], Tensor[(56), float32], Tensor[(390), float32], Tensor[(35, 1), float32]) {
    %996 = @func_7728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) */;
    %997 = @func_9661() /* ty=(Tensor[(15, 4, 11), float32],) */;
    %998 = cast(%var_12002, dtype="float32") /* ty=Tensor[(56), float32] */;
    %999 = cast(%var_12003, dtype="float32") /* ty=Tensor[(390), float32] */;
    %1000 = cast(%var_12004, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
    %1001 = reshape(%998, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
    %1002 = reshape(%999, newshape=[390]) /* ty=Tensor[(390), float32] */;
    %1003 = reshape(%1000, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
    %1004 = @func_7329(%1001, %1002, %1003) /* ty=(Tensor[(390), float32], Tensor[(390), float32], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(7, 5), float32], Tensor[(4, 1, 14), float32], Tensor[(15, 4, 11), int32], Tensor[(1, 660), int32]) */;
    %1005 = %996.2;
    %1006 = %997.0;
    %1007 = %1004.2;
    (%1005, %1006, %1007, %var_12002, %var_12003, %var_12004)
  };
  %1008(%var_12013, %var_12014, %var_12015) /* ty=(Tensor[(2288), float32], Tensor[(15, 4, 11), float32], Tensor[(80), float64], Tensor[(56), float32], Tensor[(390), float32], Tensor[(35, 1), float32]) */
}

def @func_4877(%var_4875: Tensor[(24, 26), int64]) -> (Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) {
  @func_4874(%var_4875) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */
}

def @func_5609(%var_5607: Tensor[(1, 2, 7), uint64], %var_5608: Tensor[(8, 2, 7), uint64]) -> (Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) {
  @func_5605(%var_5607, %var_5608) /* ty=(Tensor[(8, 2, 7), uint64], Tensor[(4, 5, 2), bool], int8, Tensor[(40), int8]) */
}

def @func_11771(%var_11746: Tensor[(4, 4, 12), float64]) -> (Tensor[(4, 4, 12), float64],) {
  %1009 = cast(meta[relay.Constant][80] /* ty=Tensor[(4, 4, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %1010 = shape_of(%var_11746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%var_11746, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1013 = floor_mod(%1011, %1012) /* ty=Tensor[(4, 4, 12), float64] */;
  %1014 = cast(%1013, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %1015 = erf(%1014) /* ty=Tensor[(4, 4, 12), float64] */;
  (%1015,)
}

def @func_7243() -> Tensor[(15, 4, 11), int32] {
  @func_7241() /* ty=Tensor[(15, 4, 11), int32] */
}

def @func_7522() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %1020 = fn () -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
    %1016 = @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %1017 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
    %1018 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
    %1019 = %1016.0;
    (%1017, %1018, %1019)
  };
  %1020() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_220(%var_210: Tensor[(2, 15, 13), float32], %var_211: Tensor[(2, 15, 13), float32]) -> (Tensor[(2, 15, 13), float32],) {
  %1021 = cast(%var_211, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %1022 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1023 = cast(%var_210, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1025 = floor_divide(%1023, %1024) /* ty=Tensor[(2, 15, 13), float32] */;
  (%1025,)
}

def @func_4844() -> Tensor[(13, 2, 2), int32] {
  %1027 = fn () -> Tensor[(13, 2, 2), int32] {
    %1026 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %1026.0
  };
  %1027() /* ty=Tensor[(13, 2, 2), int32] */
}

def @func_4710(%var_4708: Tensor[(660), int32]) -> (Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) {
  @func_4707(%var_4708) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */
}

def @func_8595() -> (Tensor[(15, 4, 11), bool],) {
  %1030 = fn () -> (Tensor[(15, 4, 11), bool],) {
    %1028 = @func_4821() /* ty=(Tensor[(15, 4, 11), bool], Tensor[(15, 4, 11), int64]) */;
    %1029 = %1028.0;
    (%1029,)
  };
  %1030() /* ty=(Tensor[(15, 4, 11), bool],) */
}

def @func_6581() -> (Tensor[(13, 2, 2), int32],) {
  %1033 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %1031 = @func_5147() /* ty=(Tensor[(13, 2, 2), int32],) */;
    %1032 = %1031.0;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_6074() -> (Tensor[(10, 8, 1), float32],) {
  @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */
}

def @func_9098(%var_9079: Tensor[(10, 13, 2), float64]) -> Tensor[(10, 13, 2), float64] {
  %1034 = cast(%var_9079, dtype="float64") /* ty=Tensor[(10, 13, 2), float64] */;
  rsqrt(%1034) /* ty=Tensor[(10, 13, 2), float64] */
}

def @func_5305() -> (Tensor[(13, 2, 2), int32],) {
  @func_5303() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_9796(%var_9782: Tensor[(462), float32], %var_9784: Tensor[(35, 1), float32]) -> (Tensor[(2288), bool], Tensor[(80), float64], Tensor[(462), float32], Tensor[(180), float64], Tensor[(35, 1), float32], Tensor[(6, 11, 7), float64], Tensor[(15, 4, 11), int32], Tensor[(624), int64]) {
  %1035 = @func_9685() /* ty=Tensor[(2288), float32] */;
  %1036 = cast(%1035, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %1037 = asinh(%1036) /* ty=Tensor[(2288), float32] */;
  %1038 = cast(%1035, dtype="bool") /* ty=Tensor[(2288), bool] */;
  %1039 = shape_of(%1037, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1040 = cast(%1037, dtype="bool") /* ty=Tensor[(2288), bool] */;
  %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1042 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %1043 = cast(meta[relay.Constant][81] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1044 = cast(%var_9784, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %1045 = reshape(%1042, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %1046 = reshape(%1043, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1047 = reshape(%1044, newshape=[35, 1]) /* ty=Tensor[(35, 1), float32] */;
  %1048 = @func_5067(%1045, %1046, %1047) /* ty=(Tensor[(15, 4, 11), int64], Tensor[(11, 13, 16), float32], Tensor[(1, 273), float32], Tensor[(462), float32], Tensor[(180), float64], Tensor[(80), float64], Tensor[(35, 1), float32], Tensor[(2288), float32]) */;
  %1049 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %1050 = cast(%var_9782, dtype="float32") /* ty=Tensor[(462), float32] */;
  %1051 = reshape(%1049, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %1052 = reshape(%1050, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %1053 = cast(meta[relay.Constant][82] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %1054 = reshape(%1053, newshape=[24, 26]) /* ty=Tensor[(24, 26), int64] */;
  %1055 = @func_4874(%1054) /* ty=(Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) */;
  %1056 = less(%1040, %1041) /* ty=Tensor[(2288), bool] */;
  %1057 = %1048.5;
  %1058 = @func_1356(%1051, %1052) /* ty=Tensor[(6, 11, 7), float64] */;
  %1059 = %1055.0;
  (%1056, %1057, %var_9782, meta[relay.Constant][81] /* ty=Tensor[(180), float64] */, %var_9784, %1058, %1059, meta[relay.Constant][82] /* ty=Tensor[(624), int64] */)
}

def @func_5147() -> (Tensor[(13, 2, 2), int32],) {
  %1060 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1061 = %1060.0;
  (%1061,)
}

def @func_10300() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  @func_10298() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */
}

def @func_11543() -> Tensor[(15, 4, 11), float32] {
  %1065 = fn () -> Tensor[(15, 4, 11), float32] {
    %1062 = @func_11507() /* ty=(Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), int64]) */;
    %1063 = %1062.1;
    %1064 = cast(%1063, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
    acos(%1064) /* ty=Tensor[(15, 4, 11), float32] */
  };
  %1065() /* ty=Tensor[(15, 4, 11), float32] */
}

def @func_6671() -> Tensor[(10, 8, 1), float32] {
  @func_6669() /* ty=Tensor[(10, 8, 1), float32] */
}

def @func_10341() -> (Tensor[(13, 2, 2), int32],) {
  @func_10339() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_4090(%var_4088: Tensor[(2, 6, 16), float32], %var_4089: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), bool],) {
  %1076 = fn (%var_4076: Tensor[(2, 6, 16), float32], %var_4077: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), bool],) {
    %1066 = cast(%var_4077, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
    %1067 = shape_of(%var_4076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1068 = cast(%var_4076, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
    %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1070 = mod(%1068, %1069) /* ty=Tensor[(2, 6, 16), float32] */;
    %1071 = cast(%1070, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1072 = shape_of(%var_4076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1073 = cast(%var_4076, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1074 = dyn.reshape(%1071, %1072, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1075 = less_equal(%1073, %1074) /* ty=Tensor[(2, 6, 16), bool] */;
    (%1075,)
  };
  %1076(%var_4088, %var_4089) /* ty=(Tensor[(2, 6, 16), bool],) */
}

def @func_7927(%var_7903: Tensor[(1, 192), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(2, 6, 16), bool], Tensor[(8, 192), float32]) {
  %1077 = @func_4610() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1078 = cast(%var_7903, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %1079 = cast(%var_7903, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %1080 = reshape(%1078, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1081 = reshape(%1079, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1082 = @func_4087(%1080, %1081) /* ty=(Tensor[(2, 6, 16), bool],) */;
  %1083 = cast(%var_7903, dtype="uint8") /* ty=Tensor[(1, 192), uint8] */;
  %1084 = cast(meta[relay.Constant][83] /* ty=Tensor[(8, 192), float32] */, dtype="uint8") /* ty=Tensor[(8, 192), uint8] */;
  %1085 = multiply(%1083, %1084) /* ty=Tensor[(8, 192), uint8] */;
  %1086 = cast(%1085, dtype="float32") /* ty=Tensor[(8, 192), float32] */;
  %1087 = %1077.0;
  %1088 = %1082.0;
  %1089 = log2(%1086) /* ty=Tensor[(8, 192), float32] */;
  (%1087, %1088, %1089)
}

def @func_11794(%var_11785: Tensor[(3, 6, 16), float64]) -> (Tensor[(3, 6, 16), float64],) {
  %1090 = cast(%var_11785, dtype="float64") /* ty=Tensor[(3, 6, 16), float64] */;
  %1091 = log(%1090) /* ty=Tensor[(3, 6, 16), float64] */;
  (%1091,)
}

def @func_898(%var_895: Tensor[(15, 6, 2), float64], %var_896: Tensor[(390), float32], %var_897: Tensor[(20, 4), float64]) -> (Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) {
  %1117 = fn (%var_833: Tensor[(15, 6, 2), float64], %var_852: Tensor[(390), float32], %var_857: Tensor[(20, 4), float64]) -> (Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) {
    %1092 = cast(%var_852, dtype="float32") /* ty=Tensor[(390), float32] */;
    %1093 = cast(%var_852, dtype="float32") /* ty=Tensor[(390), float32] */;
    %1094 = reshape(%1092, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %1095 = reshape(%1093, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
    %1096 = @func_220(%1094, %1095) /* ty=(Tensor[(2, 15, 13), float32],) */;
    %1097 = cast(%var_857, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
    %1098 = reshape(%1097, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
    %1099 = @func_299(%1098) /* ty=(Tensor[(10, 8, 1), float64],) */;
    %1100 = %1099.0;
    %1101 = cast(%1100, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %1102 = cast(%var_833, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
    %1103 = sigmoid(%1102) /* ty=Tensor[(15, 6, 2), float32] */;
    %1104 = cast(%var_833, dtype="float64") /* ty=Tensor[(15, 6, 2), float64] */;
    %1105 = cosh(%1104) /* ty=Tensor[(15, 6, 2), float64] */;
    %1106 = cast(%1105, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
    %1107 = shape_of(%1103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1108 = cast(%1103, dtype="uint16") /* ty=Tensor[(15, 6, 2), uint16] */;
    %1109 = dyn.reshape(%1106, %1107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1110 = cast(%1100, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %1111 = reshape(%1110, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
    %1112 = @func_299(%1111) /* ty=(Tensor[(10, 8, 1), float64],) */;
    %1113 = %1096.0;
    %1114 = cosh(%1101) /* ty=Tensor[(10, 8, 1), float64] */;
    %1115 = maximum(%1108, %1109) /* ty=Tensor[(15, 6, 2), uint16] */;
    %1116 = %1112.0;
    (%1113, %var_852, %var_857, %1114, %1115, %1116)
  };
  %1117(%var_895, %var_896, %var_897) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */
}

def @func_4571(%var_4563: Tensor[(8, 13, 6), int64], %var_4564: Tensor[(8, 13, 6), int64]) -> Tensor[(8, 13, 6), int64] {
  %1118 = cast(%var_4564, dtype="int64") /* ty=Tensor[(8, 13, 6), int64] */;
  %1119 = shape_of(%var_4563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1120 = cast(%var_4563, dtype="int64") /* ty=Tensor[(8, 13, 6), int64] */;
  %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%1120, %1121) /* ty=Tensor[(8, 13, 6), int64] */
}

def @func_7728() -> (Tensor[(13, 2, 2), int32], Tensor[(4, 10, 5), uint8], Tensor[(2288), float32]) {
  %1122 = @func_7506() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) */;
  %1123 = cast(meta[relay.Constant][84] /* ty=Tensor[(2288), float32] */, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %1124 = reshape(%1123, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %1125 = @func_2795(%1124) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %1126 = %1122.1;
  %1127 = %1125.1;
  (%1126, %1127, meta[relay.Constant][84] /* ty=Tensor[(2288), float32] */)
}

def @func_10508() -> (Tensor[(15, 4, 11), int32],) {
  @func_10506() /* ty=(Tensor[(15, 4, 11), int32],) */
}

def @func_12257() -> Tensor[(6, 12, 1), float64] {
  @func_8858() /* ty=Tensor[(6, 12, 1), float64] */
}

def @func_9967() -> (Tensor[(13, 2, 2), int32],) {
  %1128 = @func_5351() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1129 = %1128.0;
  (%1129,)
}

def @func_12098(%var_12074: Tensor[(6, 28), int16], %var_12095: Tensor[(120), float32]) -> (Tensor[(13, 2, 2), int32], Tensor[(660), int32], Tensor[(15, 4, 11), float32], Tensor[(15, 4, 11), uint32], Tensor[(1, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(462), float32], Tensor[(200), uint8], Tensor[(180), float64], Tensor[(80), float32], Tensor[(120), float32]) {
  %1130 = @func_5036() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1131 = cast(meta[relay.Constant][85] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %1132 = reshape(%1131, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %1133 = @func_4707(%1132) /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(15, 4, 11), int32]) */;
  %1134 = %1133.3;
  %1135 = cast(%1134, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %1136 = @func_10391() /* ty=(Tensor[(15, 4, 11), uint32],) */;
  %1137 = cast(%var_12074, dtype="int16") /* ty=Tensor[(6, 28), int16] */;
  %1138 = cast(meta[relay.Constant][86] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %1139 = cast(meta[relay.Constant][87] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %1140 = cast(meta[relay.Constant][88] /* ty=Tensor[(200), uint8] */, dtype="uint8") /* ty=Tensor[(200), uint8] */;
  %1141 = reshape(%1137, newshape=[6, 28]) /* ty=Tensor[(6, 28), int16] */;
  %1142 = reshape(%1138, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %1143 = reshape(%1139, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %1144 = reshape(%1140, newshape=[200]) /* ty=Tensor[(200), uint8] */;
  %1145 = @func_7002(%1141, %1142, %1143, %1144) /* ty=(Tensor[(390, 180), float64], Tensor[(6, 28), int16], Tensor[(390), float32], Tensor[(1, 180), float64], Tensor[(15, 4, 11), float64], Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(6, 11, 7), float64], Tensor[(462), float32], Tensor[(10, 8, 1), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8], Tensor[(15, 4, 11), int32], Tensor[(273), float32]) */;
  %1146 = cast(meta[relay.Constant][89] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %1147 = cast(%var_12095, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1148 = reshape(%1146, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
  %1149 = reshape(%1147, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %1150 = @func_7133(%1148, %1149) /* ty=(Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) */;
  %1151 = %1130.0;
  %1152 = asinh(%1135) /* ty=Tensor[(15, 4, 11), float32] */;
  %1153 = %1136.0;
  %1154 = %1145.3;
  %1155 = %1150.3;
  (%1151, meta[relay.Constant][85] /* ty=Tensor[(660), int32] */, %1152, %1153, %1154, %var_12074, meta[relay.Constant][86] /* ty=Tensor[(390), float32] */, meta[relay.Constant][87] /* ty=Tensor[(462), float32] */, meta[relay.Constant][88] /* ty=Tensor[(200), uint8] */, %1155, meta[relay.Constant][89] /* ty=Tensor[(80), float32] */, %var_12095)
}

def @func_3852(%var_3777: Tensor[(13, 7, 3), float32], %var_3808: Tensor[(1, 462), float32], %var_3816: Tensor[(180), float64], %var_3817: Tensor[(80), float64], %var_3822: Tensor[(35), float32], %var_3825: Tensor[(2288), float32]) -> (Tensor[(13, 7, 3), bool], Tensor[(6, 11, 7), float64], Tensor[(1, 462), float32], Tensor[(2, 15, 13), float32], Tensor[(5, 78), float32], Tensor[(10, 8, 1), float64], Tensor[(180), float64], Tensor[(80), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(11, 13, 16), float32], Tensor[(2288), float32]) {
  %1156 = cast(%var_3777, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %1157 = sigmoid(%1156) /* ty=Tensor[(13, 7, 3), float32] */;
  %1158 = cast(%1157, dtype="bool") /* ty=Tensor[(13, 7, 3), bool] */;
  %1159 = shape_of(%var_3777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1160 = cast(%var_3777, dtype="bool") /* ty=Tensor[(13, 7, 3), bool] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1162 = cast(%var_3808, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
  %1163 = cast(%var_3808, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
  %1164 = reshape(%1162, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %1165 = reshape(%1163, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float32] */;
  %1166 = cast(meta[relay.Constant][90] /* ty=Tensor[(5, 78), float32] */, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %1167 = cast(meta[relay.Constant][90] /* ty=Tensor[(5, 78), float32] */, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %1168 = reshape(%1166, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %1169 = reshape(%1167, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float32] */;
  %1170 = @func_220(%1168, %1169) /* ty=(Tensor[(2, 15, 13), float32],) */;
  %1171 = cast(%var_3816, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1172 = %1170.0;
  %1173 = cast(%1172, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  %1174 = cast(%var_3817, dtype="float64") /* ty=Tensor[(80), float64] */;
  %1175 = reshape(%1171, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float64] */;
  %1176 = reshape(%1173, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %1177 = reshape(%1174, newshape=[20, 4]) /* ty=Tensor[(20, 4), float64] */;
  %1178 = @func_894(%1175, %1176, %1177) /* ty=(Tensor[(2, 15, 13), float32], Tensor[(390), float32], Tensor[(20, 4), float64], Tensor[(10, 8, 1), float64], Tensor[(15, 6, 2), uint16], Tensor[(10, 8, 1), float64]) */;
  %1179 = cast(%var_3822, dtype="float32") /* ty=Tensor[(35), float32] */;
  %1180 = reshape(%1179, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %1181 = cast(%var_3825, dtype="float32") /* ty=Tensor[(2288), float32] */;
  %1182 = reshape(%1181, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), float32] */;
  %1183 = @func_2795(%1182) /* ty=(Tensor[(11, 13, 16), float32], Tensor[(4, 10, 5), uint8], Tensor[(200), uint8]) */;
  %1184 = not_equal(%1160, %1161) /* ty=Tensor[(13, 7, 3), bool] */;
  %1185 = @func_1356(%1164, %1165) /* ty=Tensor[(6, 11, 7), float64] */;
  %1186 = %1178.3;
  %1187 = @func_3456(%1180) /* ty=Tensor[(7, 1, 5), float32] */;
  %1188 = %1183.0;
  (%1184, %1185, %var_3808, %1172, meta[relay.Constant][90] /* ty=Tensor[(5, 78), float32] */, %1186, %var_3816, %var_3817, %1187, %var_3822, %1188, %var_3825)
}

def @func_7137(%var_7135: Tensor[(10, 8, 1), float32], %var_7136: Tensor[(120), float32]) -> (Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) {
  @func_7133(%var_7135, %var_7136) /* ty=(Tensor[(10, 8, ?), uint16], Tensor[(13, 2, 2), int32], Tensor[(13, 4), int32], Tensor[(180), float64], Tensor[(120), float32], Tensor[(1800), float32], Tensor[(13, 2, 2), int32], Tensor[(15, 10, 12), bool], Tensor[(390), float32]) */
}

def @func_8030() -> (Tensor[(35), float32],) {
  %1191 = fn () -> (Tensor[(35), float32],) {
    %1189 = @func_6728() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32]) */;
    %1190 = %1189.2;
    (%1190,)
  };
  %1191() /* ty=(Tensor[(35), float32],) */
}

def @func_6775() -> Tensor[(15, 4, 11), uint32] {
  @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */
}

def @func_5037() -> (Tensor[(13, 2, 2), int32],) {
  %1193 = fn () -> (Tensor[(13, 2, 2), int32],) {
    %1192 = @func_4843() /* ty=Tensor[(13, 2, 2), int32] */;
    (%1192,)
  };
  %1193() /* ty=(Tensor[(13, 2, 2), int32],) */
}

def @func_8152() -> Tensor[(15, 4, 11), uint32] {
  %1194 = fn () -> Tensor[(15, 4, 11), uint32] {
    @func_6773() /* ty=Tensor[(15, 4, 11), uint32] */
  };
  %1194() /* ty=Tensor[(15, 4, 11), uint32] */
}

def @func_10334() -> Tensor[(15, 4, 11), float32] {
  %1196 = fn () -> Tensor[(15, 4, 11), float32] {
    %1195 = @func_9661() /* ty=(Tensor[(15, 4, 11), float32],) */;
    %1195.0
  };
  %1196() /* ty=Tensor[(15, 4, 11), float32] */
}

def @func_5938() -> (Tensor[(660), int32],) {
  @func_5936() /* ty=(Tensor[(660), int32],) */
}

def @func_10883() -> Tensor[(13, 2, 2), int32] {
  %1197 = @func_6580() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1197.0
}

def @func_4874(%var_4868: Tensor[(24, 26), int64]) -> (Tensor[(15, 4, 11), int32], Tensor[(24, 26), bool]) {
  %1198 = @func_4770() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(15, 4, 11), int32], Tensor[(660), int32], Tensor[(10, 8, 1), float64], Tensor[(80), float64]) */;
  %1199 = cast(%var_4868, dtype="int64") /* ty=Tensor[(24, 26), int64] */;
  %1200 = cast(%var_4868, dtype="int64") /* ty=Tensor[(24, 26), int64] */;
  %1201 = reshape(%1199, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int64] */;
  %1202 = reshape(%1200, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int64] */;
  %1203 = @func_4571(%1201, %1202) /* ty=Tensor[(8, 13, 6), int64] */;
  %1204 = cast(%1203, dtype="bool") /* ty=Tensor[(8, 13, 6), bool] */;
  %1205 = shape_of(%var_4868, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1206 = cast(%var_4868, dtype="bool") /* ty=Tensor[(24, 26), bool] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1208 = %1198.1;
  %1209 = less(%1206, %1207) /* ty=Tensor[(24, 26), bool] */;
  (%1208, %1209)
}

def @func_9481() -> (Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) {
  %1217 = fn () -> (Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) {
    %1210 = @func_8199() /* ty=(Tensor[(15, 4, 11), int32],) */;
    %1211 = cast(meta[relay.Constant][91] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %1212 = reshape(%1211, newshape=[10, 13, 2]) /* ty=Tensor[(10, 13, 2), float64] */;
    %1213 = @func_6072() /* ty=(Tensor[(10, 8, 1), float32],) */;
    %1214 = %1210.0;
    %1215 = @func_9098(%1212) /* ty=Tensor[(10, 13, 2), float64] */;
    %1216 = %1213.0;
    (%1214, %1215, meta[relay.Constant][91] /* ty=Tensor[(260), float64] */, %1216)
  };
  %1217() /* ty=(Tensor[(15, 4, 11), int32], Tensor[(10, 13, 2), float64], Tensor[(260), float64], Tensor[(10, 8, 1), float32]) */
}

def @func_10298() -> (Tensor[(13, 2, 2), int32], Tensor[(13, 2, 2), int32]) {
  %1218 = @func_6035() /* ty=(Tensor[(13, 2, 2), int32],) */;
  %1219 = @func_5580() /* ty=Tensor[(13, 2, 2), int32] */;
  %1220 = %1218.0;
  (%1219, %1220)
}

def @func_11458(%var_11456: int8, %var_11457: Tensor[(1, 2, 4), int8]) -> (Tensor[(1, 2, 4), int8], Tensor[(1, 2, 4), float64], Tensor[(35), float32]) {
  @func_11454(%var_11456, %var_11457) /* ty=(Tensor[(1, 2, 4), int8], Tensor[(1, 2, 4), float64], Tensor[(35), float32]) */
}

def @func_7759() -> (Tensor[(13, 2, 2), int32], Tensor[(390), float32], Tensor[(390), float32]) {
  @func_7757() /* ty=(Tensor[(13, 2, 2), int32], Tensor[(390), float32], Tensor[(390), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen733/build/output.py", line 3278, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:01:56] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

