==========mod==========
#[version = "0.0.5"]
def @func_1340(%var_1336: Tensor[(14, 6, 12), int32]) -> (Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) {
  %0 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 12), int32] */, dtype="int32") /* ty=Tensor[(14, 6, 12), int32] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %3 = cast(meta[relay.Constant][2] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %4 = reshape(%2, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %5 = reshape(%3, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %6 = @func_1021(%4, %5) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %7 = cast(%var_1336, dtype="bool") /* ty=Tensor[(14, 6, 12), bool] */;
  %8 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 12), int32] */, dtype="bool") /* ty=Tensor[(14, 6, 12), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = logical_xor(%0, %1) /* ty=Tensor[(14, 6, 12), int32] */;
  %12 = %6.4;
  %13 = greater_equal(%9, %10) /* ty=Tensor[(14, 6, 12), bool] */;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(48), float32] */, meta[relay.Constant][2] /* ty=Tensor[(1800), float32] */, %13)
}

def @func_1683(%var_1672: Tensor[(14, 2, 4), float32]) -> (Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) {
  %14 = cast(%var_1672, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 1008), int32] */, dtype="int32") /* ty=Tensor[(1, 1008), int32] */;
  %16 = reshape(%15, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
  %17 = @func_1340(%16) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
  %18 = asin(%14) /* ty=Tensor[(14, 2, 4), float32] */;
  %19 = %17.0;
  (%18, %19, meta[relay.Constant][3] /* ty=Tensor[(1, 1008), int32] */)
}

def @func_6245() -> Tensor[(32), float32] {
  %20 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %20.0
}

def @main(%var_7884: Tensor[(7, 6, 14), float32]) -> Tensor[(7, 6, 14), float32] {
  %21 = cast(%var_7884, dtype="float32") /* ty=Tensor[(7, 6, 14), float32] */;
  log(%21) /* ty=Tensor[(7, 6, 14), float32] */
}

def @func_4656() -> (Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) {
  %22 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %23 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %24 = reshape(%23, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
  %25 = @func_4550(%24) /* ty=(Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) */;
  %26 = %25.1;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %28 = rsqrt(%27) /* ty=Tensor[(2, 4, 4), float64] */;
  %29 = cast(%26, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %33 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %34 = %22.0;
  %35 = divide(%31, %32) /* ty=Tensor[(2, 4, 4), float64] */;
  %36 = %33.1;
  (%34, meta[relay.Constant][4] /* ty=Tensor[(8, 4), float32] */, %35, %36)
}

def @func_5984(%var_5977: Tensor[(14, 1800), bool]) -> Tensor[(14, 1800), uint32] {
  %37 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %38 = %37.2;
  %39 = cast(%var_5977, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(2), int32] */;
  %41 = cast(%38, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  minimum(%41, %42) /* ty=Tensor[(14, 1800), uint32] */
}

def @func_2996() -> (Tensor[(5, 4, 9), int16],) {
  %43 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
  %44 = %43.0;
  (%44,)
}

def @func_2692(%var_2681: Tensor[(88), float32]) -> (Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) {
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
  %46 = cast(%var_2681, dtype="float32") /* ty=Tensor[(88), float32] */;
  %47 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
  %48 = cast(meta[relay.Constant][6] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %49 = reshape(%46, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %50 = reshape(%47, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %51 = reshape(%48, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %52 = @func_1551(%49, %50, %51) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
  %54 = asin(%53) /* ty=Tensor[(3, 16, 1), float32] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(3, 16, 1), float64] */;
  %56 = sinh(%45) /* ty=Tensor[(3, 16, 1), float32] */;
  %57 = %52.2;
  %58 = sqrt(%55) /* ty=Tensor[(3, 16, 1), float64] */;
  (%56, %57, %var_2681, meta[relay.Constant][6] /* ty=Tensor[(1320), float32] */, %58)
}

def @func_3690(%var_3668: Tensor[(63), float32], %var_3685: Tensor[(1800), float32]) -> (Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) {
  %59 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %60 = %59.1;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(48), float64] */;
  %62 = cast(%var_3668, dtype="float32") /* ty=Tensor[(63), float32] */;
  %63 = reshape(%62, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
  %64 = @func_2722(%63) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) */;
  %65 = cast(meta[relay.Constant][7] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %66 = asinh(%61) /* ty=Tensor[(48), float64] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(48), float32] */;
  %68 = cast(meta[relay.Constant][8] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %69 = reshape(%65, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %70 = reshape(%67, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %71 = reshape(%68, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %72 = @func_1551(%69, %70, %71) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %73 = cast(%var_3685, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %74 = reshape(%73, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %75 = @func_3277(%74) /* ty=(Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) */;
  %76 = %64.1;
  %77 = %72.0;
  %78 = %75.1;
  (%66, %76, %var_3668, %77, meta[relay.Constant][7] /* ty=Tensor[(88), float32] */, meta[relay.Constant][8] /* ty=Tensor[(1320), float32] */, %78, %var_3685)
}

def @func_7200(%var_7191: Tensor[(25200), bool]) -> (Tensor[(8, 4), float32], Tensor[(14, 1800), uint32], Tensor[(25200), bool]) {
  %79 = @func_5797() /* ty=(Tensor[(8, 4), float32],) */;
  %80 = cast(%var_7191, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %81 = reshape(%80, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %82 = %79.0;
  %83 = @func_5984(%81) /* ty=Tensor[(14, 1800), uint32] */;
  (%82, %83, %var_7191)
}

def @func_4600() -> (Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) {
  %84 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %86 = reshape(%85, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %87 = %84.2;
  %88 = @func_3006(%86) /* ty=Tensor[(3, 4, 2), bool] */;
  (%87, %88, meta[relay.Constant][9] /* ty=Tensor[(24), bool] */)
}

def @func_7172() -> (Tensor[(1008), int64], Tensor[(4, 4, 15), float32], Tensor[(36), uint32], Tensor[(1, 360), uint8], Tensor[(4, 4, 15), float32], Tensor[(14, 2, 4), float32], Tensor[(112), float32], Tensor[(48), float32]) {
  %89 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %90 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %91 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 360), uint8] */, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
  %92 = reshape(%90, newshape=[36]) /* ty=Tensor[(36), uint32] */;
  %93 = reshape(%91, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %94 = @func_5048(%92, %93) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
  %97 = reshape(%96, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
  %98 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %99 = reshape(%98, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float32] */;
  %100 = @func_1683(%99) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) */;
  %101 = %89.4;
  %102 = @func_3351(%97) /* ty=Tensor[(4, 4, 15), float32] */;
  %103 = %100.0;
  %104 = @func_3086() /* ty=Tensor[(48), float32] */;
  (%101, %95, meta[relay.Constant][10] /* ty=Tensor[(36), uint32] */, meta[relay.Constant][11] /* ty=Tensor[(1, 360), uint8] */, %102, %103, meta[relay.Constant][12] /* ty=Tensor[(112), float32] */, %104)
}

def @func_6721(%var_6706: Tensor[(4, 14, 6), float64], %var_6707: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(4, 14, 6), int16]) {
  %105 = cast(%var_6707, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %106 = shape_of(%var_6706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_6706, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = cast(meta[relay.Constant][13] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %110 = reshape(%109, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %111 = @func_5859(%110) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
  %112 = cast(%var_6706, dtype="int16") /* ty=Tensor[(4, 14, 6), int16] */;
  %113 = shape_of(%var_6707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_6707, dtype="int16") /* ty=Tensor[(4, 14, 6), int16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %116 = mod(%107, %108) /* ty=Tensor[(4, 14, 6), float64] */;
  %117 = %111.1;
  %118 = add(%114, %115) /* ty=Tensor[(4, 14, 6), int16] */;
  (%116, %117, meta[relay.Constant][13] /* ty=Tensor[(48), float32] */, %118)
}

def @func_3221(%var_3166: Tensor[(32), float32], %var_3175: Tensor[(14, 1800), bool], %var_3188: Tensor[(14, 1800), bool]) -> (Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) {
  %119 = cast(%var_3166, dtype="float32") /* ty=Tensor[(32), float32] */;
  %120 = reshape(%119, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
  %121 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %122 = %121.2;
  %123 = cast(%var_3175, dtype="int32") /* ty=Tensor[(14, 1800), int32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(2), int32] */;
  %125 = cast(%122, dtype="int32") /* ty=Tensor[(14, 1800), int32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %127 = cast(%var_3175, dtype="float64") /* ty=Tensor[(14, 1800), float64] */;
  %128 = cast(%var_3188, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
  %129 = shape_of(%var_3175, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%var_3175, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %132 = power(%130, %131) /* ty=Tensor[(14, 1800), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
  %134 = @func_1524(%120) /* ty=Tensor[(2, 4, 4), float32] */;
  %135 = multiply(%125, %126) /* ty=Tensor[(14, 1800), int32] */;
  %136 = sin(%127) /* ty=Tensor[(14, 1800), float64] */;
  %137 = asinh(%133) /* ty=Tensor[(14, 1800), float32] */;
  (%134, %var_3166, %135, %136, %137)
}

def @func_496(%var_388: Tensor[(2, 15, 9), float32], %var_393: Tensor[(360), uint8], %var_422: Tensor[(1800), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) {
  %138 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %139 = cast(%var_393, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %140 = reshape(%138, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %141 = reshape(%139, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %142 = @func_315(%140, %141) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %143 = cast(%var_422, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %144 = reshape(%143, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %145 = @func_176(%144) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
  %146 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %147 = %142.1;
  %148 = cast(%147, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
  %149 = reshape(%146, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %150 = reshape(%148, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %151 = @func_315(%149, %150) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %152 = %145.0;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %154 = reshape(%153, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %155 = @func_176(%154) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
  %156 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %157 = cast(%var_393, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %158 = reshape(%156, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %159 = reshape(%157, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %160 = @func_315(%158, %159) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %161 = cast(%var_388, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %162 = log2(%161) /* ty=Tensor[(2, 15, 9), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %164 = sqrt(%163) /* ty=Tensor[(2, 15, 9), float64] */;
  %165 = cast(%162, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %169 = cast(%164, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %170 = cast(%152, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %171 = reshape(%170, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %172 = @func_176(%171) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
  %173 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %174 = %151.1;
  %175 = cast(%174, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
  %176 = reshape(%173, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %177 = reshape(%175, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %178 = @func_315(%176, %177) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %180 = %160.2;
  %181 = cast(%180, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %182 = reshape(%179, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %183 = reshape(%181, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %184 = @func_315(%182, %183) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %185 = %155.0;
  %186 = mod(%167, %168) /* ty=Tensor[(2, 15, 9), float32] */;
  %187 = acos(%169) /* ty=Tensor[(2, 15, 9), float64] */;
  %188 = %172.0;
  %189 = %178.2;
  %190 = %184.2;
  (%147, meta[relay.Constant][14] /* ty=Tensor[(252, 4), int64] */, %var_393, %152, %var_422, %174, %185, %180, %186, %187, %188, %189, %190)
}

def @func_3876(%var_3844: Tensor[(192), int8], %var_3845: Tensor[(1008), int64], %var_3865: Tensor[(12, 48), uint32], %var_3874: Tensor[(112), float32]) -> (Tensor[(48), float32], Tensor[(252, 4), int64], Tensor[(192), int8], Tensor[(1008), int64], Tensor[(12, 8, 6), float64], Tensor[(12, 48), int64], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(14, 2, 4), float32], Tensor[(112), float32]) {
  %191 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %192 = cast(%var_3844, dtype="int8") /* ty=Tensor[(192), int8] */;
  %193 = cast(%var_3844, dtype="int8") /* ty=Tensor[(192), int8] */;
  %194 = cast(%var_3845, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %195 = reshape(%192, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %196 = reshape(%193, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %197 = reshape(%194, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %198 = @func_3390(%195, %196, %197) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 48), uint32] */, dtype="uint32") /* ty=Tensor[(12, 48), uint32] */;
  %200 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 48), uint32] */, dtype="uint32") /* ty=Tensor[(12, 48), uint32] */;
  %201 = reshape(%199, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), uint32] */;
  %202 = reshape(%200, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), uint32] */;
  %203 = cast(%var_3865, dtype="int64") /* ty=Tensor[(12, 48), int64] */;
  %204 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 48), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 48), uint32] */, dtype="int64") /* ty=Tensor[(12, 48), int64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %208 = reshape(%207, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %209 = cast(%var_3874, dtype="float32") /* ty=Tensor[(112), float32] */;
  %210 = reshape(%209, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float32] */;
  %211 = @func_1683(%210) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) */;
  %212 = %191.0;
  %213 = %198.3;
  %214 = @func_2043(%201, %202) /* ty=Tensor[(12, 8, 6), float64] */;
  %215 = left_shift(%205, %206) /* ty=Tensor[(12, 48), int64] */;
  %216 = @func_3006(%208) /* ty=Tensor[(3, 4, 2), bool] */;
  %217 = %211.0;
  (%212, %213, %var_3844, %var_3845, %214, %215, %216, meta[relay.Constant][16] /* ty=Tensor[(24), bool] */, %217, %var_3874)
}

def @func_3803(%var_3784: Tensor[(9, 4), uint32], %var_3787: Tensor[(360), uint8]) -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) {
  %218 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %219 = cast(meta[relay.Constant][17] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %220 = cast(meta[relay.Constant][17] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %221 = reshape(%219, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %222 = reshape(%220, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %223 = @func_3151(%221, %222) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
  %224 = cast(%var_3784, dtype="uint32") /* ty=Tensor[(9, 4), uint32] */;
  %225 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %226 = cast(meta[relay.Constant][19] /* ty=Tensor[(140), int8] */, dtype="int8") /* ty=Tensor[(140), int8] */;
  %227 = cast(%var_3787, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %228 = reshape(%224, newshape=[9, 4, 1]) /* ty=Tensor[(9, 4, 1), uint32] */;
  %229 = reshape(%225, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), uint32] */;
  %230 = reshape(%226, newshape=[140]) /* ty=Tensor[(140), int8] */;
  %231 = reshape(%227, newshape=[1, 360]) /* ty=Tensor[(1, 360), uint8] */;
  %232 = @func_837(%228, %229, %230, %231) /* ty=(Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) */;
  %233 = %218.0;
  %234 = %223.0;
  %235 = %232.4;
  (%233, %234, meta[relay.Constant][17] /* ty=Tensor[(225), int32] */, %235, %var_3784, meta[relay.Constant][18] /* ty=Tensor[(144), uint32] */, meta[relay.Constant][19] /* ty=Tensor[(140), int8] */, %var_3787)
}

def @func_1524(%var_1520: Tensor[(2, 4, 4), float32]) -> Tensor[(2, 4, 4), float32] {
  %236 = cast(%var_1520, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  sinh(%236) /* ty=Tensor[(2, 4, 4), float32] */
}

def @func_3551(%var_3506: Tensor[(360), float32], %var_3547: Tensor[(32), float32], %var_3548: Tensor[(25200), bool]) -> (Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) {
  %237 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %238 = cast(%var_3506, dtype="float32") /* ty=Tensor[(360), float32] */;
  %239 = reshape(%238, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %240 = @func_1695(%239) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %241 = cast(meta[relay.Constant][20] /* ty=Tensor[(35, 4), int8] */, dtype="int8") /* ty=Tensor[(35, 4), int8] */;
  %242 = reshape(%241, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
  %243 = @func_668(%242) /* ty=(Tensor[(1, 10, 14), int8],) */;
  %244 = cast(meta[relay.Constant][21] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %245 = cast(meta[relay.Constant][21] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %246 = reshape(%244, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %247 = reshape(%245, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %248 = @func_3151(%246, %247) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
  %249 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %250 = reshape(%249, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %251 = cast(meta[relay.Constant][23] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %252 = %240.0;
  %253 = cast(%252, dtype="uint8") /* ty=Tensor[(3, 8, 15), uint8] */;
  %254 = reshape(%251, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %255 = reshape(%253, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %256 = @func_315(%254, %255) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %257 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %258 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %259 = reshape(%257, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %260 = reshape(%258, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %261 = %256.2;
  %262 = cast(%261, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %263 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %264 = reshape(%262, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %265 = reshape(%263, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %266 = cast(%var_3547, dtype="float32") /* ty=Tensor[(32), float32] */;
  %267 = cast(%var_3548, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %268 = cast(%var_3548, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %269 = reshape(%266, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %270 = reshape(%267, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %271 = reshape(%268, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %272 = @func_3221(%269, %270, %271) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) */;
  %273 = %237.0;
  %274 = %243.0;
  %275 = %248.1;
  %276 = @func_3006(%250) /* ty=Tensor[(3, 4, 2), bool] */;
  %277 = @func_48(%259, %260) /* ty=Tensor[(8, 9, 5), uint8] */;
  %278 = @func_48(%264, %265) /* ty=Tensor[(8, 9, 5), uint8] */;
  %279 = %272.0;
  (%273, %252, %var_3506, %274, meta[relay.Constant][20] /* ty=Tensor[(35, 4), int8] */, %275, meta[relay.Constant][21] /* ty=Tensor[(225), int32] */, %276, meta[relay.Constant][22] /* ty=Tensor[(24), bool] */, %261, meta[relay.Constant][23] /* ty=Tensor[(1008), int64] */, %277, %278, %279, %var_3547, %var_3548)
}

def @func_4417() -> (Tensor[(32), float32],) {
  %280 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %281 = %280.2;
  (%281,)
}

def @func_6851() -> (Tensor[(1008), int64], Tensor[(48), float32]) {
  %282 = @func_6600() /* ty=(Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) */;
  %283 = %282.5;
  %284 = @func_4064() /* ty=Tensor[(48), float32] */;
  (%283, %284)
}

def @func_7317() -> Tensor[(88), float32] {
  @func_6506() /* ty=Tensor[(88), float32] */
}

def @func_4193() -> (Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) {
  %285 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
  %286 = cast(meta[relay.Constant][24] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %287 = reshape(%286, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
  %288 = %285.2;
  %289 = @func_3351(%287) /* ty=Tensor[(4, 4, 15), float32] */;
  (%288, %289, meta[relay.Constant][24] /* ty=Tensor[(240), float32] */)
}

def @func_7683() -> (Tensor[(88), float32], Tensor[(48), float32], Tensor[(88), float32], Tensor[(15, 14, 6), float32], Tensor[(1260), float32]) {
  %290 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %291 = cast(meta[relay.Constant][25] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %292 = cast(meta[relay.Constant][25] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %293 = reshape(%291, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %294 = reshape(%292, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %295 = @func_7317() /* ty=Tensor[(88), float32] */;
  %296 = @func_7461() /* ty=Tensor[(48), float32] */;
  %297 = %290.0;
  %298 = @func_6537(%293, %294) /* ty=Tensor[(15, 14, 6), float32] */;
  (%295, %296, %297, %298, meta[relay.Constant][25] /* ty=Tensor[(1260), float32] */)
}

def @func_3390(%var_3355: Tensor[(16, 12), int8], %var_3356: Tensor[(16, 12), int8], %var_3383: Tensor[(252, 4), int64]) -> (Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) {
  %299 = cast(%var_3356, dtype="int8") /* ty=Tensor[(16, 12), int8] */;
  %300 = shape_of(%var_3355, dtype="int32") /* ty=Tensor[(2), int32] */;
  %301 = cast(%var_3355, dtype="int8") /* ty=Tensor[(16, 12), int8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %303 = cast(%var_3383, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %304 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %305 = reshape(%303, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %306 = reshape(%304, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %307 = @func_315(%305, %306) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %308 = logical_xor(%301, %302) /* ty=Tensor[(16, 12), int8] */;
  %309 = @func_3086() /* ty=Tensor[(48), float32] */;
  %310 = %307.1;
  (%308, %309, %310, %var_3383, meta[relay.Constant][26] /* ty=Tensor[(360), uint8] */)
}

def @func_5550(%var_5483: Tensor[(360), float32], %var_5542: Tensor[(3, 8, 15), float32]) -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) {
  %311 = @func_4600() /* ty=(Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) */;
  %312 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %313 = cast(%var_5483, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %314 = reshape(%312, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %315 = reshape(%313, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %316 = @func_315(%314, %315) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %317 = cast(%var_5483, dtype="float32") /* ty=Tensor[(360), float32] */;
  %318 = reshape(%317, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %319 = @func_1695(%318) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %320 = %319.0;
  %321 = cast(%var_5542, dtype="int16") /* ty=Tensor[(3, 8, 15), int16] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="int16") /* ty=Tensor[(3, 8, 15), int16] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %325 = @func_3086() /* ty=Tensor[(48), float32] */;
  %326 = %311.0;
  %327 = %316.2;
  %328 = add(%323, %324) /* ty=Tensor[(3, 8, 15), int16] */;
  (%325, %326, %var_5483, %327, meta[relay.Constant][27] /* ty=Tensor[(1008), int64] */, %328)
}

def @func_668(%var_660: Tensor[(1, 10, 14), int8]) -> (Tensor[(1, 10, 14), int8],) {
  %329 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %330 = cast(%var_660, dtype="int8") /* ty=Tensor[(1, 10, 14), int8] */;
  %331 = multiply(%329, %330) /* ty=Tensor[(1, 10, 14), int8] */;
  (%331,)
}

def @func_6425(%var_6284: uint64, %var_6285: Tensor[(14, 9, 10), uint64], %var_6294: Tensor[(36), uint32], %var_6405: Tensor[(14, 9, 10), float64]) -> (Tensor[(360), uint8], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(8, 4), float32], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(88), float32], Tensor[(14, 9, 10), int32], Tensor[(1, 1008), int64], Tensor[(4, 4, 15), float32], Tensor[(24, 10), float32], Tensor[(14, 9, 10), bool]) {
  %332 = cast(%var_6294, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %333 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %334 = reshape(%332, newshape=[36]) /* ty=Tensor[(36), uint32] */;
  %335 = reshape(%333, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %336 = @func_5048(%334, %335) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
  %337 = @func_5405() /* ty=(Tensor[(88), float32],) */;
  %338 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %339 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %340 = reshape(%339, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %341 = @func_5859(%340) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
  %342 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %343 = cast(%var_6284, dtype="bool") /* ty=bool */;
  %344 = cast(%var_6285, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %345 = less(%343, %344) /* ty=Tensor[(14, 9, 10), bool] */;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(14, 9, 10), float64] */;
  %347 = asinh(%346) /* ty=Tensor[(14, 9, 10), float64] */;
  %348 = cast(%var_6405, dtype="int32") /* ty=Tensor[(14, 9, 10), int32] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="int32") /* ty=Tensor[(14, 9, 10), int32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %352 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %353 = reshape(%352, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %354 = @func_5859(%353) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
  %355 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %356 = reshape(%355, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
  %357 = cast(%347, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %358 = exp(%357) /* ty=Tensor[(14, 9, 10), float32] */;
  %359 = cast(%358, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %360 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%347, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = not_equal(%361, %362) /* ty=Tensor[(14, 9, 10), bool] */;
  %364 = cast(%363, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %365 = cast(%var_6284, dtype="bool") /* ty=bool */;
  %366 = %336.3;
  %367 = %337.0;
  %368 = %338.0;
  %369 = %341.1;
  %370 = %342.0;
  %371 = bitwise_or(%350, %351) /* ty=Tensor[(14, 9, 10), int32] */;
  %372 = %354.1;
  %373 = @func_3351(%356) /* ty=Tensor[(4, 4, 15), float32] */;
  %374 = greater_equal(%364, %365) /* ty=Tensor[(14, 9, 10), bool] */;
  (%366, %var_6294, meta[relay.Constant][29] /* ty=Tensor[(360), uint8] */, %367, %368, %369, meta[relay.Constant][30] /* ty=Tensor[(48), float32] */, %370, %371, %372, %373, meta[relay.Constant][31] /* ty=Tensor[(24, 10), float32] */, %374)
}

def @func_5327() -> (Tensor[(8, 4), float32],) {
  %375 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %376 = %375.1;
  (%376,)
}

def @func_1695(%var_1688: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  %377 = cast(%var_1688, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %378 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(3, 8, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = mod(%379, %380) /* ty=Tensor[(3, 8, 15), float32] */;
  (%381,)
}

def @func_2842() -> (Tensor[(48), float32],) {
  %382 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %383 = %382.1;
  (%383,)
}

def @func_3727(%var_3723: Tensor[(1008), int64]) -> (Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
  %384 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %385 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %386 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %387 = cast(%var_3723, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %388 = reshape(%385, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %389 = reshape(%386, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %390 = reshape(%387, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %391 = @func_3390(%388, %389, %390) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %392 = %384.1;
  %393 = %391.4;
  (%392, %393, meta[relay.Constant][33] /* ty=Tensor[(192), int8] */, %var_3723)
}

def @func_4904(%var_4893: Tensor[(225), int32]) -> (Tensor[(6, 6, 1), bool], Tensor[(48), float32], Tensor[(225), int32], Tensor[(48), float32], Tensor[(2496), int16]) {
  %394 = cast(7.78012f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %395 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 6, 1), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
  %396 = cast(%var_4893, dtype="int32") /* ty=Tensor[(225), int32] */;
  %397 = cast(%var_4893, dtype="int32") /* ty=Tensor[(225), int32] */;
  %398 = reshape(%396, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %399 = reshape(%397, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %400 = @func_3151(%398, %399) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
  %401 = cast(meta[relay.Constant][35] /* ty=Tensor[(2496), int16] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
  %402 = cast(meta[relay.Constant][35] /* ty=Tensor[(2496), int16] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
  %403 = reshape(%401, newshape=[12, 16, 13]) /* ty=Tensor[(12, 16, 13), int16] */;
  %404 = reshape(%402, newshape=[12, 16, 13]) /* ty=Tensor[(12, 16, 13), int16] */;
  %405 = @func_4838(%403, %404) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) */;
  %406 = less_equal(%394, %395) /* ty=Tensor[(6, 6, 1), bool] */;
  %407 = %400.0;
  %408 = %405.4;
  (%406, %407, %var_4893, %408, meta[relay.Constant][35] /* ty=Tensor[(2496), int16] */)
}

def @func_6484(%var_6477: Tensor[(1800), float32]) -> (Tensor[(4, 4, 15), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(88), float32]) {
  %409 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %410 = cast(meta[relay.Constant][36] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %411 = cast(%var_6477, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %412 = reshape(%410, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %413 = reshape(%411, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %414 = @func_3690(%412, %413) /* ty=(Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) */;
  %415 = cast(meta[relay.Constant][37] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %416 = reshape(%415, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %417 = @func_2692(%416) /* ty=(Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) */;
  %418 = %409.1;
  %419 = %414.2;
  %420 = %417.2;
  (%418, %419, meta[relay.Constant][36] /* ty=Tensor[(63), float32] */, %var_6477, %420, meta[relay.Constant][37] /* ty=Tensor[(88), float32] */)
}

def @func_3151(%var_3123: Tensor[(5, 15, 3), int32], %var_3124: Tensor[(5, 15, 3), int32]) -> (Tensor[(48), float32], Tensor[(5, 15, 3), bool]) {
  %421 = cast(%var_3124, dtype="int32") /* ty=Tensor[(5, 15, 3), int32] */;
  %422 = shape_of(%var_3123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_3123, dtype="int32") /* ty=Tensor[(5, 15, 3), int32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %425 = minimum(%423, %424) /* ty=Tensor[(5, 15, 3), int32] */;
  %426 = cast(%var_3123, dtype="bool") /* ty=Tensor[(5, 15, 3), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(5, 15, 3), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = @func_3086() /* ty=Tensor[(48), float32] */;
  %431 = greater_equal(%428, %429) /* ty=Tensor[(5, 15, 3), bool] */;
  (%430, %431)
}

def @func_6184(%var_6177: float64, %var_6178: Tensor[(1, 8, 1), float64]) -> (Tensor[(1, 8, 1), float64],) {
  %432 = cast(%var_6177, dtype="float64") /* ty=float64 */;
  %433 = cast(%var_6178, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %434 = floor_divide(%432, %433) /* ty=Tensor[(1, 8, 1), float64] */;
  (%434,)
}

def @func_3468(%var_3465: Tensor[(360), uint8]) -> (Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
  %435 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
  %436 = cast(%var_3465, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %437 = cast(%var_3465, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %438 = reshape(%436, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %439 = reshape(%437, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %440 = %435.0;
  %441 = @func_48(%438, %439) /* ty=Tensor[(8, 9, 5), uint8] */;
  (%440, %441, %var_3465)
}

def @func_3277(%var_3272: Tensor[(1800), float32]) -> (Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) {
  %442 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %443 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 84), int32] */, dtype="int32") /* ty=Tensor[(12, 84), int32] */;
  %444 = reshape(%443, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
  %445 = @func_1340(%444) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
  %446 = %445.3;
  %447 = cast(%var_3272, dtype="int64") /* ty=Tensor[(1800), int64] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(1), int32] */;
  %449 = cast(%446, dtype="int64") /* ty=Tensor[(1800), int64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?), int64] */;
  %451 = %442.0;
  %452 = left_shift(%449, %450) /* ty=Tensor[(1800), int64] */;
  (%451, meta[relay.Constant][38] /* ty=Tensor[(12, 84), int32] */, %452)
}

def @func_2043(%var_2016: Tensor[(12, 8, 6), uint32], %var_2017: Tensor[(12, 8, 6), uint32]) -> Tensor[(12, 8, 6), float64] {
  %453 = cast(%var_2017, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
  %454 = shape_of(%var_2016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_2016, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = equal(%455, %456) /* ty=Tensor[(12, 8, 6), bool] */;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(12, 8, 6), float64] */;
  tan(%458) /* ty=Tensor[(12, 8, 6), float64] */
}

def @func_6600() -> (Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) {
  %459 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %460 = @func_5166() /* ty=(Tensor[(48), float32],) */;
  %461 = @func_4765() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) */;
  %462 = cast(meta[relay.Constant][39] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %463 = cast(meta[relay.Constant][39] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %464 = reshape(%462, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %465 = reshape(%463, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %466 = @func_6537(%464, %465) /* ty=Tensor[(15, 14, 6), float32] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %468 = %460.0;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(48), float32] */;
  %470 = cast(meta[relay.Constant][40] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %471 = reshape(%469, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %472 = reshape(%470, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %473 = @func_1021(%471, %472) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %474 = %459.0;
  %475 = %461.2;
  %476 = sigmoid(%467) /* ty=Tensor[(15, 14, 6), float32] */;
  %477 = %473.6;
  (%474, meta[relay.Constant][39] /* ty=Tensor[(1260), float32] */, %468, %475, %476, %477, meta[relay.Constant][40] /* ty=Tensor[(1800), float32] */)
}

def @func_48(%var_32: Tensor[(8, 9, 5), uint8], %var_33: Tensor[(8, 9, 5), uint8]) -> Tensor[(8, 9, 5), uint8] {
  %478 = cast(%var_33, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
  %479 = shape_of(%var_32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_32, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  multiply(%480, %481) /* ty=Tensor[(8, 9, 5), uint8] */
}

def @func_4141(%var_4137: Tensor[(14, 15, 5), int8]) -> (Tensor[(14, 15, 5), int8],) {
  %482 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(1, 15, 5), int8] */;
  %483 = cast(%var_4137, dtype="int8") /* ty=Tensor[(14, 15, 5), int8] */;
  %484 = right_shift(%482, %483) /* ty=Tensor[(14, 15, 5), int8] */;
  (%484,)
}

def @func_7264() -> (Tensor[(48), float32],) {
  %485 = @func_3940() /* ty=(Tensor[(48), float32],) */;
  %486 = %485.0;
  (%486,)
}

def @func_176(%var_151: Tensor[(15, 10, 12), float32]) -> (Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) {
  %487 = cast(%var_151, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %488 = rsqrt(%487) /* ty=Tensor[(15, 10, 12), float32] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(15, 10, 12), float64] */;
  %490 = atanh(%489) /* ty=Tensor[(15, 10, 12), float64] */;
  %491 = cast(%490, dtype="uint8") /* ty=Tensor[(15, 10, 12), uint8] */;
  %492 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%488, dtype="uint8") /* ty=Tensor[(15, 10, 12), uint8] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %495 = bitwise_xor(%493, %494) /* ty=Tensor[(15, 10, 12), uint8] */;
  %496 = cast(%495, dtype="uint16") /* ty=Tensor[(15, 10, 12), uint16] */;
  %497 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%490, dtype="uint16") /* ty=Tensor[(15, 10, 12), uint16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %500 = cast(%488, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %501 = cast(%495, dtype="int64") /* ty=Tensor[(15, 10, 12), int64] */;
  %502 = shape_of(%var_151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_151, dtype="int64") /* ty=Tensor[(15, 10, 12), int64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %505 = maximum(%498, %499) /* ty=Tensor[(15, 10, 12), uint16] */;
  %506 = acosh(%500) /* ty=Tensor[(15, 10, 12), float32] */;
  %507 = add(%503, %504) /* ty=Tensor[(15, 10, 12), int64] */;
  (%505, %506, %507)
}

def @func_7373(%var_7364: Tensor[(63), float32]) -> (Tensor[(8, 4), float32], Tensor[(2, 4, 4), float32], Tensor[(7, 3, 9), float32], Tensor[(63), float32], Tensor[(189), float32]) {
  %508 = @func_6868() /* ty=Tensor[(8, 4), float32] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %510 = reshape(%509, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
  %511 = cast(%var_7364, dtype="float32") /* ty=Tensor[(63), float32] */;
  %512 = cast(meta[relay.Constant][42] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %513 = reshape(%511, newshape=[7, 1, 9]) /* ty=Tensor[(7, 1, 9), float32] */;
  %514 = reshape(%512, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), float32] */;
  %515 = @func_1664(%513, %514) /* ty=(Tensor[(7, 3, 9), float32],) */;
  %516 = @func_1524(%510) /* ty=Tensor[(2, 4, 4), float32] */;
  %517 = %515.0;
  (%508, %516, %517, %var_7364, meta[relay.Constant][42] /* ty=Tensor[(189), float32] */)
}

def @func_7802(%var_7767: Tensor[(10, 4, 15), float64], %var_7786: Tensor[(25200), bool]) -> (Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(32), float32], Tensor[(25200), bool], Tensor[(4, 4, 15), float32], Tensor[(10, 4, 15), float32], Tensor[(10, 4, 15), float64]) {
  %518 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %519 = cast(meta[relay.Constant][44] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %520 = cast(%var_7786, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %521 = reshape(%518, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %522 = reshape(%519, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %523 = reshape(%520, newshape=[25200]) /* ty=Tensor[(25200), bool] */;
  %524 = @func_3551(%521, %522, %523) /* ty=(Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) */;
  %525 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %526 = cast(%var_7767, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %527 = acos(%526) /* ty=Tensor[(10, 4, 15), float64] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %529 = log2(%528) /* ty=Tensor[(10, 4, 15), float64] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %531 = rsqrt(%530) /* ty=Tensor[(10, 4, 15), float32] */;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %533 = cast(%527, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %534 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%529, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %537 = %524.1;
  %538 = %525.3;
  %539 = atan(%532) /* ty=Tensor[(10, 4, 15), float32] */;
  %540 = floor_divide(%535, %536) /* ty=Tensor[(10, 4, 15), float64] */;
  (%537, meta[relay.Constant][43] /* ty=Tensor[(360), float32] */, meta[relay.Constant][44] /* ty=Tensor[(32), float32] */, %var_7786, %538, %539, %540)
}

def @func_4373(%var_4342: Tensor[(13, 12, 14), float64]) -> Tensor[(13, 12, 14), bool] {
  %541 = cast(%var_4342, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %542 = sin(%541) /* ty=Tensor[(13, 12, 14), float64] */;
  %543 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%545, %546) /* ty=Tensor[(13, 12, 14), bool] */
}

def @func_4064() -> Tensor[(48), float32] {
  @func_3086() /* ty=Tensor[(48), float32] */
}

def @func_5048(%var_5032: Tensor[(36), uint32], %var_5033: Tensor[(360), uint8]) -> (Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
  %547 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %548 = cast(%var_5032, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %549 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %550 = reshape(%548, newshape=[9, 4]) /* ty=Tensor[(9, 4), uint32] */;
  %551 = reshape(%549, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %552 = @func_3803(%550, %551) /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) */;
  %553 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %554 = reshape(%553, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %555 = @func_3468(%554) /* ty=(Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %556 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %557 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %558 = reshape(%556, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %559 = reshape(%557, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %560 = cast(meta[relay.Constant][46] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %561 = reshape(%560, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %562 = @func_3727(%561) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
  %563 = %547.3;
  %564 = %552.4;
  %565 = %555.0;
  %566 = @func_48(%558, %559) /* ty=Tensor[(8, 9, 5), uint8] */;
  %567 = %562.2;
  (%563, %564, %var_5032, %var_5033, %565, %566, %567, meta[relay.Constant][46] /* ty=Tensor[(1008), int64] */)
}

def @func_5249(%var_5243: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(88), float32], Tensor[(360), uint8], Tensor[(1320), float32]) {
  %568 = @func_5217() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) */;
  %569 = @func_3900() /* ty=Tensor[(88), float32] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(88), float32] */;
  %571 = cast(%569, dtype="float32") /* ty=Tensor[(88), float32] */;
  %572 = %568.1;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(48), float32] */;
  %574 = cast(%var_5243, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %575 = reshape(%571, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %576 = reshape(%573, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %577 = reshape(%574, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %578 = @func_1551(%575, %576, %577) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %579 = cosh(%570) /* ty=Tensor[(88), float32] */;
  %580 = %578.0;
  (%572, %579, %580, %var_5243)
}

def @func_4120() -> (Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) {
  %581 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %582 = cast(meta[relay.Constant][47] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %583 = reshape(%582, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
  %584 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %585 = reshape(%584, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %586 = @func_3727(%585) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
  %587 = %581.0;
  %588 = @func_1524(%583) /* ty=Tensor[(2, 4, 4), float32] */;
  %589 = %586.3;
  (%587, %588, meta[relay.Constant][47] /* ty=Tensor[(32), float32] */, %589, meta[relay.Constant][48] /* ty=Tensor[(1008), int64] */)
}

def @func_4679() -> Tensor[(48), float32] {
  %590 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %590.0
}

def @func_3900() -> Tensor[(88), float32] {
  %591 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
  %591.2
}

def @func_4307(%var_4243: Tensor[(10, 7, 12), float64], %var_4273: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) {
  %592 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %593 = reshape(%592, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
  %594 = @func_1340(%593) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
  %595 = cast(%var_4243, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %596 = exp(%595) /* ty=Tensor[(10, 7, 12), float64] */;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %598 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %599 = %594.2;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(48), float32] */;
  %601 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %602 = reshape(%598, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %603 = reshape(%600, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %604 = reshape(%601, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %605 = @func_1551(%602, %603, %604) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %606 = cast(%596, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %607 = cosh(%606) /* ty=Tensor[(10, 7, 12), float64] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %609 = sigmoid(%608) /* ty=Tensor[(10, 7, 12), float64] */;
  %610 = cast(%var_4243, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %614 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %615 = cast(%599, dtype="float32") /* ty=Tensor[(48), float32] */;
  %616 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %617 = reshape(%614, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %618 = reshape(%615, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %619 = reshape(%616, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %620 = @func_1551(%617, %618, %619) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %621 = sin(%597) /* ty=Tensor[(10, 7, 12), float64] */;
  %622 = %605.2;
  %623 = right_shift(%612, %613) /* ty=Tensor[(10, 7, 12), uint16] */;
  %624 = %620.3;
  (%599, meta[relay.Constant][49] /* ty=Tensor[(1008), int32] */, %621, %622, meta[relay.Constant][50] /* ty=Tensor[(1, 88), float32] */, %var_4273, %623, %624)
}

def @func_6257() -> (Tensor[(48), float32],) {
  %625 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %626 = %625.0;
  (%626,)
}

def @func_6506() -> Tensor[(88), float32] {
  @func_3900() /* ty=Tensor[(88), float32] */
}

def @func_5859(%var_5847: Tensor[(48), float32]) -> (Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) {
  %627 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %628 = reshape(%627, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %629 = @func_3727(%628) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
  %630 = @func_3086() /* ty=Tensor[(48), float32] */;
  %631 = cast(%var_5847, dtype="int16") /* ty=Tensor[(48), int16] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(1), int32] */;
  %633 = cast(%630, dtype="int16") /* ty=Tensor[(48), int16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?), int16] */;
  %635 = %629.3;
  %636 = right_shift(%633, %634) /* ty=Tensor[(48), int16] */;
  (%635, meta[relay.Constant][51] /* ty=Tensor[(1, 1008), int64] */, %636)
}

def @func_6537(%var_6521: Tensor[(15, 14, 6), float32], %var_6522: Tensor[(15, 14, 6), float32]) -> Tensor[(15, 14, 6), float32] {
  %637 = cast(%var_6522, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %638 = shape_of(%var_6521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_6521, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%639, %640) /* ty=Tensor[(15, 14, 6), float32] */
}

def @func_3006(%var_3001: Tensor[(3, 4, 2), bool]) -> Tensor[(3, 4, 2), bool] {
  %641 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %642 = shape_of(%var_3001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_3001, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%643, %644) /* ty=Tensor[(3, 4, 2), bool] */
}

def @func_6868() -> Tensor[(8, 4), float32] {
  %645 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %645.0
}

def @func_1551(%var_1529: Tensor[(11, 8, 1), float32], %var_1543: Tensor[(48), float32], %var_1546: Tensor[(11, 8, 15), float32]) -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) {
  %646 = cast(%var_1543, dtype="float32") /* ty=Tensor[(48), float32] */;
  %647 = cast(meta[relay.Constant][53] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %648 = reshape(%646, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %649 = reshape(%647, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %650 = @func_1021(%648, %649) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %651 = cast(%var_1529, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %652 = atan(%651) /* ty=Tensor[(11, 8, 1), float32] */;
  %653 = cast(%652, dtype="uint16") /* ty=Tensor[(11, 8, 1), uint16] */;
  %654 = cast(%var_1546, dtype="uint16") /* ty=Tensor[(11, 8, 15), uint16] */;
  %655 = %650.2;
  %656 = right_shift(%653, %654) /* ty=Tensor[(11, 8, 15), uint16] */;
  (%655, %var_1543, meta[relay.Constant][53] /* ty=Tensor[(1800), float32] */, %656)
}

def @func_2925() -> (Tensor[(5, 4, 9), int16],) {
  %657 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 4, 9), uint32] */;
  %658 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 4, 9), uint32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %661 = logical_xor(%659, %660) /* ty=Tensor[(5, 4, 9), uint32] */;
  %662 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="int16") /* ty=Tensor[(5, 4, 9), int16] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="int16") /* ty=Tensor[(5, 4, 9), int16] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %666 = bitwise_and(%664, %665) /* ty=Tensor[(5, 4, 9), int16] */;
  (%666,)
}

def @func_4456() -> Tensor[(32), float32] {
  %667 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %667.0
}

def @func_6680(%var_6645: Tensor[(11, 6, 7), float64]) -> (Tensor[(48), float32], Tensor[(11, 6, 7), int8], Tensor[(48), float32]) {
  %668 = cast(%var_6645, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %669 = sqrt(%668) /* ty=Tensor[(11, 6, 7), float64] */;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %671 = asinh(%670) /* ty=Tensor[(11, 6, 7), float32] */;
  %672 = cast(%669, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %676 = @func_5217() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) */;
  %677 = @func_4064() /* ty=Tensor[(48), float32] */;
  %678 = left_shift(%674, %675) /* ty=Tensor[(11, 6, 7), int8] */;
  %679 = %676.3;
  (%677, %678, %679)
}

def @func_6761() -> (Tensor[(88), float32],) {
  %680 = @func_3900() /* ty=Tensor[(88), float32] */;
  (%680,)
}

def @func_7448() -> (Tensor[(48), float32], Tensor[(5, 4, 9), int16]) {
  %681 = @func_7264() /* ty=(Tensor[(48), float32],) */;
  %682 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
  %683 = %681.0;
  %684 = %682.0;
  (%683, %684)
}

def @func_1664(%var_1648: Tensor[(7, 1, 9), float32], %var_1649: Tensor[(7, 3, 9), float32]) -> (Tensor[(7, 3, 9), float32],) {
  %685 = cast(%var_1648, dtype="float32") /* ty=Tensor[(7, 1, 9), float32] */;
  %686 = cast(%var_1649, dtype="float32") /* ty=Tensor[(7, 3, 9), float32] */;
  %687 = subtract(%685, %686) /* ty=Tensor[(7, 3, 9), float32] */;
  (%687,)
}

def @func_3439() -> (Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) {
  %688 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
  %689 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %690 = reshape(%689, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %691 = @func_2692(%690) /* ty=(Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) */;
  %692 = %688.0;
  %693 = %691.2;
  (%692, %693, meta[relay.Constant][56] /* ty=Tensor[(88), float32] */)
}

def @func_3915(%var_3903: Tensor[(6, 3, 15), float64]) -> Tensor[(6, 3, 15), float64] {
  %694 = cast(%var_3903, dtype="float64") /* ty=Tensor[(6, 3, 15), float64] */;
  acos(%694) /* ty=Tensor[(6, 3, 15), float64] */
}

def @func_6450() -> (Tensor[(8, 4), float32],) {
  %695 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %696 = %695.0;
  (%696,)
}

def @func_5347(%var_5338: Tensor[(10, 11, 11), float32]) -> Tensor[(10, 11, 11), float32] {
  %697 = cast(%var_5338, dtype="float32") /* ty=Tensor[(10, 11, 11), float32] */;
  asinh(%697) /* ty=Tensor[(10, 11, 11), float32] */
}

def @func_4765() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) {
  %698 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %699 = cast(meta[relay.Constant][57] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %700 = cast(meta[relay.Constant][58] /* ty=Tensor[(36, 10), uint8] */, dtype="uint8") /* ty=Tensor[(36, 10), uint8] */;
  %701 = reshape(%699, newshape=[9, 4]) /* ty=Tensor[(9, 4), uint32] */;
  %702 = reshape(%700, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %703 = @func_3803(%701, %702) /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) */;
  %704 = %698.0;
  %705 = %703.1;
  (%704, %705, meta[relay.Constant][57] /* ty=Tensor[(36), uint32] */, meta[relay.Constant][58] /* ty=Tensor[(36, 10), uint8] */)
}

def @func_7300() -> (Tensor[(88), float32],) {
  %706 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %707 = %706.0;
  (%707,)
}

def @func_5712() -> Tensor[(8, 4), float32] {
  %708 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %708.0
}

def @func_315(%var_305: Tensor[(9, 8, 14), int64], %var_312: Tensor[(360), uint8]) -> (Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
  %709 = cast(meta[relay.Constant][59] /* ty=Tensor[(9, 8, 14), int64] */, dtype="int64") /* ty=Tensor[(9, 8, 14), int64] */;
  %710 = shape_of(%var_305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_305, dtype="int64") /* ty=Tensor[(9, 8, 14), int64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %713 = cast(%var_312, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %714 = cast(%var_312, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %715 = reshape(%713, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %716 = reshape(%714, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %717 = maximum(%711, %712) /* ty=Tensor[(9, 8, 14), int64] */;
  %718 = @func_48(%715, %716) /* ty=Tensor[(8, 9, 5), uint8] */;
  (%717, %718, %var_312)
}

def @func_5166() -> (Tensor[(48), float32],) {
  %719 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %720 = %719.0;
  (%720,)
}

def @func_7461() -> Tensor[(48), float32] {
  %721 = @func_6851() /* ty=(Tensor[(1008), int64], Tensor[(48), float32]) */;
  %721.1
}

def @func_1021(%var_976: Tensor[(2, 3, 8), float32], %var_983: Tensor[(1800, 1), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) {
  %722 = cast(meta[relay.Constant][60] /* ty=Tensor[(90, 3), float32] */, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %723 = cast(meta[relay.Constant][61] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %724 = cast(%var_983, dtype="float32") /* ty=Tensor[(1800, 1), float32] */;
  %725 = reshape(%722, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %726 = reshape(%723, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %727 = reshape(%724, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %728 = @func_496(%725, %726, %727) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) */;
  %729 = cast(%var_976, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %730 = sqrt(%729) /* ty=Tensor[(2, 3, 8), float32] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %732 = cast(meta[relay.Constant][62] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %733 = cast(meta[relay.Constant][61] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %734 = reshape(%732, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %735 = reshape(%733, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %736 = @func_315(%734, %735) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %737 = cast(%730, dtype="int64") /* ty=Tensor[(2, 3, 8), int64] */;
  %738 = shape_of(%var_976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%var_976, dtype="int64") /* ty=Tensor[(2, 3, 8), int64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %741 = maximum(%739, %740) /* ty=Tensor[(2, 3, 8), int64] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %743 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%730, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %746 = cast(meta[relay.Constant][62] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %747 = cast(meta[relay.Constant][61] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %748 = reshape(%746, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %749 = reshape(%747, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %750 = @func_315(%748, %749) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %751 = %728.0;
  %752 = atan(%731) /* ty=Tensor[(2, 3, 8), float32] */;
  %753 = %736.2;
  %754 = floor_divide(%744, %745) /* ty=Tensor[(2, 3, 8), float32] */;
  %755 = %750.2;
  (%751, meta[relay.Constant][60] /* ty=Tensor[(90, 3), float32] */, meta[relay.Constant][61] /* ty=Tensor[(360), uint8] */, %var_983, %752, %753, meta[relay.Constant][62] /* ty=Tensor[(1008), int64] */, %754, %755)
}

def @func_6640() -> (Tensor[(48), float32],) {
  %756 = @func_5166() /* ty=(Tensor[(48), float32],) */;
  %757 = %756.0;
  (%757,)
}

def @func_7029() -> Tensor[(8, 4), float32] {
  %758 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %758.0
}

def @func_7748() -> (Tensor[(8, 4), float32],) {
  %759 = @func_6450() /* ty=(Tensor[(8, 4), float32],) */;
  %760 = %759.0;
  (%760,)
}

def @func_4504() -> (Tensor[(48), float32],) {
  %761 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %762 = %761.0;
  (%762,)
}

def @func_4975() -> (Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) {
  %763 = cast(meta[relay.Constant][63] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %764 = cast(meta[relay.Constant][64] /* ty=Tensor[(660, 2), float32] */, dtype="float32") /* ty=Tensor[(660, 2), float32] */;
  %765 = reshape(%763, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float64] */;
  %766 = reshape(%764, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %767 = @func_4307(%765, %766) /* ty=(Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) */;
  %768 = cast(meta[relay.Constant][65] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %769 = reshape(%768, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %770 = @func_3277(%769) /* ty=(Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) */;
  %771 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %772 = cast(meta[relay.Constant][65] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %773 = @func_4064() /* ty=Tensor[(48), float32] */;
  %774 = %767.4;
  %775 = %770.0;
  %776 = %771.0;
  %777 = log(%772) /* ty=Tensor[(1800), float32] */;
  (%773, %774, meta[relay.Constant][63] /* ty=Tensor[(840), float64] */, meta[relay.Constant][64] /* ty=Tensor[(660, 2), float32] */, %775, %776, %777)
}

def @func_4550(%var_4517: Tensor[(2, 4, 4), float32]) -> (Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) {
  %778 = @func_4337() /* ty=Tensor[(2, 4, 4), float32] */;
  %779 = cast(%var_4517, dtype="int32") /* ty=Tensor[(2, 4, 4), int32] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="int32") /* ty=Tensor[(2, 4, 4), int32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %783 = cast(%778, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  %784 = logical_xor(%781, %782) /* ty=Tensor[(2, 4, 4), int32] */;
  %785 = log2(%783) /* ty=Tensor[(2, 4, 4), float32] */;
  (%784, %785)
}

def @func_5006(%var_5001: Tensor[(10, 16, 14), int8]) -> (Tensor[(10, 16, 14), bool],) {
  %786 = cast(meta[relay.Constant][66] /* ty=Tensor[(10, 16, 14), int8] */, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %787 = shape_of(%var_5001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_5001, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = equal(%788, %789) /* ty=Tensor[(10, 16, 14), bool] */;
  (%790,)
}

def @func_5217() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) {
  %791 = @func_4975() /* ty=(Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) */;
  %792 = @func_4064() /* ty=Tensor[(48), float32] */;
  %793 = @func_4679() /* ty=Tensor[(48), float32] */;
  %794 = @func_4337() /* ty=Tensor[(2, 4, 4), float32] */;
  %795 = %791.4;
  (%792, %793, %794, %795)
}

def @func_5405() -> (Tensor[(88), float32],) {
  %796 = @func_3900() /* ty=Tensor[(88), float32] */;
  (%796,)
}

def @func_2660() -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) {
  %797 = cast(meta[relay.Constant][67] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %798 = cast(meta[relay.Constant][68] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %799 = reshape(%797, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %800 = reshape(%798, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %801 = @func_1021(%799, %800) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %802 = cast(meta[relay.Constant][69] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %803 = rsqrt(%802) /* ty=Tensor[(14, 1), float32] */;
  %804 = cast(%803, dtype="bool") /* ty=Tensor[(14, 1), bool] */;
  %805 = cast(meta[relay.Constant][68] /* ty=Tensor[(1800), float32] */, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %806 = %801.8;
  %807 = less_equal(%804, %805) /* ty=Tensor[(14, 1800), bool] */;
  (%806, meta[relay.Constant][67] /* ty=Tensor[(48), float32] */, %807)
}

def @func_3351(%var_3342: Tensor[(4, 4, 15), float32]) -> Tensor[(4, 4, 15), float32] {
  %808 = cast(meta[relay.Constant][70] /* ty=Tensor[(4, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
  %809 = shape_of(%var_3342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%var_3342, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%810, %811) /* ty=Tensor[(4, 4, 15), float32] */
}

def @func_4337() -> Tensor[(2, 4, 4), float32] {
  %812 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %812.1
}

def @func_6931(%var_6916: Tensor[(14, 1800), bool]) -> (Tensor[(14, 1800), uint32], Tensor[(88), float32]) {
  %813 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %814 = %813.2;
  %815 = cast(%var_6916, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(2), int32] */;
  %817 = cast(%814, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %819 = @func_6761() /* ty=(Tensor[(88), float32],) */;
  %820 = bitwise_and(%817, %818) /* ty=Tensor[(14, 1800), uint32] */;
  %821 = %819.0;
  (%820, %821)
}

def @func_2722(%var_2702: Tensor[(63, 1), float32]) -> (Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) {
  %822 = cast(%var_2702, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %823 = cast(meta[relay.Constant][71] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %824 = reshape(%822, newshape=[7, 1, 9]) /* ty=Tensor[(7, 1, 9), float32] */;
  %825 = reshape(%823, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), float32] */;
  %826 = @func_1664(%824, %825) /* ty=(Tensor[(7, 3, 9), float32],) */;
  %827 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %830 = cast(%var_2702, dtype="uint32") /* ty=Tensor[(63, 1), uint32] */;
  %831 = bitwise_xor(%829, %830) /* ty=Tensor[(63, 360), uint32] */;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(63, 360), float64] */;
  %833 = %826.0;
  %834 = sigmoid(%832) /* ty=Tensor[(63, 360), float64] */;
  (%833, meta[relay.Constant][71] /* ty=Tensor[(189), float32] */, %834)
}

def @func_4434() -> Tensor[(48), float32] {
  %835 = @func_3940() /* ty=(Tensor[(48), float32],) */;
  %835.0
}

def @func_837(%var_785: Tensor[(9, 4, 1), uint32], %var_786: Tensor[(9, 4, 4), uint32], %var_793: Tensor[(140), int8], %var_803: Tensor[(1, 360), uint8]) -> (Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) {
  %836 = cast(%var_785, dtype="uint32") /* ty=Tensor[(9, 4, 1), uint32] */;
  %837 = cast(%var_786, dtype="uint32") /* ty=Tensor[(9, 4, 4), uint32] */;
  %838 = cast(%var_793, dtype="int8") /* ty=Tensor[(140), int8] */;
  %839 = reshape(%838, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
  %840 = @func_668(%839) /* ty=(Tensor[(1, 10, 14), int8],) */;
  %841 = cast(meta[relay.Constant][72] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %842 = cast(%var_803, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
  %843 = reshape(%841, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %844 = reshape(%842, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %845 = @func_315(%843, %844) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
  %848 = minimum(%836, %837) /* ty=Tensor[(9, 4, 4), uint32] */;
  %849 = %840.0;
  %850 = sin(%847) /* ty=Tensor[(9, 8, 14), float64] */;
  (%848, %849, %var_793, meta[relay.Constant][72] /* ty=Tensor[(1008), int64] */, %var_803, %850)
}

def @func_5644(%var_5624: Tensor[(1050), int8], %var_5641: Tensor[(840), float64]) -> (Tensor[(48), float32], Tensor[(1050), int8], Tensor[(14, 15, 5), bool], Tensor[(1800), float32], Tensor[(840), float64], Tensor[(1320), float32]) {
  %851 = cast(%var_5624, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %852 = reshape(%851, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), int8] */;
  %853 = @func_4141(%852) /* ty=(Tensor[(14, 15, 5), int8],) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(14, 15, 5), float64] */;
  %856 = log2(%855) /* ty=Tensor[(14, 15, 5), float64] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(14, 15, 5), bool] */;
  %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%856, dtype="bool") /* ty=Tensor[(14, 15, 5), bool] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %861 = cast(%var_5641, dtype="float64") /* ty=Tensor[(840), float64] */;
  %862 = cast(meta[relay.Constant][73] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %863 = reshape(%861, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float64] */;
  %864 = reshape(%862, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %865 = @func_4307(%863, %864) /* ty=(Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) */;
  %866 = @func_4434() /* ty=Tensor[(48), float32] */;
  %867 = logical_and(%859, %860) /* ty=Tensor[(14, 15, 5), bool] */;
  %868 = %865.3;
  (%866, %var_5624, %867, %868, %var_5641, meta[relay.Constant][73] /* ty=Tensor[(1320), float32] */)
}

def @func_6800(%var_6793: Tensor[(16, 9, 3), float32], %var_6794: Tensor[(16, 9, 3), float32]) -> Tensor[(16, 9, 3), bool] {
  %869 = cast(%var_6794, dtype="bool") /* ty=Tensor[(16, 9, 3), bool] */;
  %870 = shape_of(%var_6793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%var_6793, dtype="bool") /* ty=Tensor[(16, 9, 3), bool] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%871, %872) /* ty=Tensor[(16, 9, 3), bool] */
}

def @func_4838(%var_4777: Tensor[(12, 16, 13), int16], %var_4778: Tensor[(12, 16, 13), int16]) -> (Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) {
  %873 = cast(meta[relay.Constant][74] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %874 = cast(meta[relay.Constant][74] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %875 = reshape(%873, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %876 = reshape(%874, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %877 = cast(%var_4778, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %878 = shape_of(%var_4777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_4777, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %881 = logical_xor(%879, %880) /* ty=Tensor[(12, 16, 13), int16] */;
  %882 = cast(%881, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %883 = shape_of(%var_4778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%var_4778, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %886 = @func_4765() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) */;
  %887 = @func_48(%875, %876) /* ty=Tensor[(8, 9, 5), uint8] */;
  %888 = @func_4456() /* ty=Tensor[(32), float32] */;
  %889 = logical_or(%884, %885) /* ty=Tensor[(12, 16, 13), bool] */;
  %890 = %886.1;
  (%887, meta[relay.Constant][74] /* ty=Tensor[(360), uint8] */, %888, %889, %890)
}

def @func_3940() -> (Tensor[(48), float32],) {
  %891 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %892 = %891.0;
  (%892,)
}

def @func_7408() -> (Tensor[(48), float32],) {
  %893 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %894 = %893.0;
  (%894,)
}

def @func_7853() -> (Tensor[(5, 4, 9), int16], Tensor[(48), float32], Tensor[(48), float32]) {
  %895 = @func_2996() /* ty=(Tensor[(5, 4, 9), int16],) */;
  %896 = @func_6257() /* ty=(Tensor[(48), float32],) */;
  %897 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %898 = %895.0;
  %899 = %896.0;
  %900 = %897.0;
  (%898, %899, %900)
}

def @func_5797() -> (Tensor[(8, 4), float32],) {
  %901 = @func_5712() /* ty=Tensor[(8, 4), float32] */;
  (%901,)
}

def @func_3086() -> Tensor[(48), float32] {
  %902 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %902.0
}

def @func_6142(%var_6064: Tensor[(6, 15, 3), float32], %var_6080: Tensor[(2, 16), float32], %var_6081: Tensor[(25200, 1), bool], %var_6123: Tensor[(63), float32], %var_6126: Tensor[(360), float32]) -> (Tensor[(2, 4, 4), float32], Tensor[(2, 16), float32], Tensor[(25200, 1), bool], Tensor[(252, 4), int64], Tensor[(96, 2), int8], Tensor[(32), float32], Tensor[(63, 360), float64], Tensor[(63), float32], Tensor[(3, 4, 2), bool], Tensor[(360), float32], Tensor[(48), float32], Tensor[(6, 15, 3), int32], Tensor[(1, 1008), float64]) {
  %903 = cast(%var_6080, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %904 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %905 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %906 = reshape(%903, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %907 = reshape(%904, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %908 = reshape(%905, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %909 = @func_3221(%906, %907, %908) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) */;
  %910 = cast(meta[relay.Constant][75] /* ty=Tensor[(96, 2), int8] */, dtype="int8") /* ty=Tensor[(96, 2), int8] */;
  %911 = cast(meta[relay.Constant][75] /* ty=Tensor[(96, 2), int8] */, dtype="int8") /* ty=Tensor[(96, 2), int8] */;
  %912 = cast(meta[relay.Constant][76] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %913 = reshape(%910, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %914 = reshape(%911, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %915 = reshape(%912, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %916 = @func_3390(%913, %914, %915) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %917 = @func_5960() /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) */;
  %918 = cast(%var_6123, dtype="float32") /* ty=Tensor[(63), float32] */;
  %919 = reshape(%918, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
  %920 = @func_2722(%919) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) */;
  %921 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %922 = %917.1;
  %923 = cast(%922, dtype="float32") /* ty=Tensor[(32), float32] */;
  %924 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %925 = reshape(%921, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %926 = reshape(%923, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %927 = reshape(%924, newshape=[25200]) /* ty=Tensor[(25200), bool] */;
  %928 = @func_3551(%925, %926, %927) /* ty=(Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) */;
  %929 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %930 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %931 = reshape(%929, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %932 = reshape(%930, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %933 = @func_5550(%931, %932) /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) */;
  %934 = cast(%var_6064, dtype="float32") /* ty=Tensor[(6, 15, 3), float32] */;
  %935 = sin(%934) /* ty=Tensor[(6, 15, 3), float32] */;
  %936 = cast(%var_6064, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%935, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %940 = cast(meta[relay.Constant][76] /* ty=Tensor[(1, 1008), int64] */, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
  %941 = %909.0;
  %942 = %916.3;
  %943 = %920.2;
  %944 = %928.7;
  %945 = %933.0;
  %946 = maximum(%938, %939) /* ty=Tensor[(6, 15, 3), int32] */;
  %947 = tan(%940) /* ty=Tensor[(1, 1008), float64] */;
  (%941, %var_6080, %var_6081, %942, meta[relay.Constant][75] /* ty=Tensor[(96, 2), int8] */, %922, %943, %var_6123, %944, %var_6126, %945, %946, %947)
}

def @func_5960() -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) {
  %948 = @func_3940() /* ty=(Tensor[(48), float32],) */;
  %949 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %950 = cast(meta[relay.Constant][77] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %951 = reshape(%950, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %952 = @func_176(%951) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
  %953 = %948.0;
  %954 = %949.0;
  %955 = %952.1;
  (%953, %954, %955, meta[relay.Constant][77] /* ty=Tensor[(1800), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1524(%var_1520: Tensor[(2, 4, 4), float32]) -> Tensor[(2, 4, 4), float32] {
  %0 = cast(%var_1520, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  sinh(%0) /* ty=Tensor[(2, 4, 4), float32] */
}

def @func_5984(%var_5977: Tensor[(14, 1800), bool]) -> Tensor[(14, 1800), uint32] {
  %1 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %2 = %1.2;
  %3 = cast(%var_5977, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(2), int32] */;
  %5 = cast(%2, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  minimum(%5, %6) /* ty=Tensor[(14, 1800), uint32] */
}

def @func_7684() -> (Tensor[(88), float32], Tensor[(48), float32], Tensor[(88), float32], Tensor[(15, 14, 6), float32], Tensor[(1260), float32]) {
  %16 = fn () -> (Tensor[(88), float32], Tensor[(48), float32], Tensor[(88), float32], Tensor[(15, 14, 6), float32], Tensor[(1260), float32]) {
    %7 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %10 = reshape(%8, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
    %11 = reshape(%9, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
    %12 = @func_7317() /* ty=Tensor[(88), float32] */;
    %13 = @func_7461() /* ty=Tensor[(48), float32] */;
    %14 = %7.0;
    %15 = @func_6537(%10, %11) /* ty=Tensor[(15, 14, 6), float32] */;
    (%12, %13, %14, %15, meta[relay.Constant][0] /* ty=Tensor[(1260), float32] */)
  };
  %16() /* ty=(Tensor[(88), float32], Tensor[(48), float32], Tensor[(88), float32], Tensor[(15, 14, 6), float32], Tensor[(1260), float32]) */
}

def @func_2927() -> (Tensor[(5, 4, 9), int16],) {
  @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */
}

def @main(%var_7884: Tensor[(7, 6, 14), float32]) -> Tensor[(7, 6, 14), float32] {
  %17 = cast(%var_7884, dtype="float32") /* ty=Tensor[(7, 6, 14), float32] */;
  log(%17) /* ty=Tensor[(7, 6, 14), float32] */
}

def @func_5009(%var_5007: Tensor[(10, 16, 14), int8]) -> (Tensor[(10, 16, 14), bool],) {
  @func_5006(%var_5007) /* ty=(Tensor[(10, 16, 14), bool],) */
}

def @func_3280(%var_3278: Tensor[(1800), float32]) -> (Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) {
  @func_3277(%var_3278) /* ty=(Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) */
}

def @func_4064() -> Tensor[(48), float32] {
  @func_3086() /* ty=Tensor[(48), float32] */
}

def @func_6484(%var_6477: Tensor[(1800), float32]) -> (Tensor[(4, 4, 15), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(88), float32]) {
  %18 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %20 = cast(%var_6477, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %21 = reshape(%19, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %22 = reshape(%20, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %23 = @func_3690(%21, %22) /* ty=(Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %25 = reshape(%24, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %26 = @func_2692(%25) /* ty=(Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) */;
  %27 = %18.1;
  %28 = %23.2;
  %29 = %26.2;
  (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(63), float32] */, %var_6477, %29, meta[relay.Constant][2] /* ty=Tensor[(88), float32] */)
}

def @func_1555(%var_1552: Tensor[(11, 8, 1), float32], %var_1553: Tensor[(48), float32], %var_1554: Tensor[(11, 8, 15), float32]) -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) {
  %41 = fn (%var_1529: Tensor[(11, 8, 1), float32], %var_1543: Tensor[(48), float32], %var_1546: Tensor[(11, 8, 15), float32]) -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) {
    %30 = cast(%var_1543, dtype="float32") /* ty=Tensor[(48), float32] */;
    %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %32 = reshape(%30, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
    %33 = reshape(%31, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
    %34 = @func_1021(%32, %33) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
    %35 = cast(%var_1529, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
    %36 = atan(%35) /* ty=Tensor[(11, 8, 1), float32] */;
    %37 = cast(%36, dtype="uint16") /* ty=Tensor[(11, 8, 1), uint16] */;
    %38 = cast(%var_1546, dtype="uint16") /* ty=Tensor[(11, 8, 15), uint16] */;
    %39 = %34.2;
    %40 = right_shift(%37, %38) /* ty=Tensor[(11, 8, 15), uint16] */;
    (%39, %var_1543, meta[relay.Constant][3] /* ty=Tensor[(1800), float32] */, %40)
  };
  %41(%var_1552, %var_1553, %var_1554) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */
}

def @func_4600() -> (Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) {
  %42 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %44 = reshape(%43, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %45 = %42.2;
  %46 = @func_3006(%44) /* ty=Tensor[(3, 4, 2), bool] */;
  (%45, %46, meta[relay.Constant][4] /* ty=Tensor[(24), bool] */)
}

def @func_4658() -> (Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) {
  @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */
}

def @func_4505() -> (Tensor[(48), float32],) {
  %49 = fn () -> (Tensor[(48), float32],) {
    %47 = @func_2842() /* ty=(Tensor[(48), float32],) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(48), float32],) */
}

def @func_6184(%var_6177: float64, %var_6178: Tensor[(1, 8, 1), float64]) -> (Tensor[(1, 8, 1), float64],) {
  %50 = cast(%var_6177, dtype="float64") /* ty=float64 */;
  %51 = cast(%var_6178, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %52 = floor_divide(%50, %51) /* ty=Tensor[(1, 8, 1), float64] */;
  (%52,)
}

def @func_6931(%var_6916: Tensor[(14, 1800), bool]) -> (Tensor[(14, 1800), uint32], Tensor[(88), float32]) {
  %53 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %54 = %53.2;
  %55 = cast(%var_6916, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %57 = cast(%54, dtype="uint32") /* ty=Tensor[(14, 1800), uint32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %59 = @func_6761() /* ty=(Tensor[(88), float32],) */;
  %60 = bitwise_and(%57, %58) /* ty=Tensor[(14, 1800), uint32] */;
  %61 = %59.0;
  (%60, %61)
}

def @func_7448() -> (Tensor[(48), float32], Tensor[(5, 4, 9), int16]) {
  %62 = @func_7264() /* ty=(Tensor[(48), float32],) */;
  %63 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
  %64 = %62.0;
  %65 = %63.0;
  (%64, %65)
}

def @func_4435() -> Tensor[(48), float32] {
  %67 = fn () -> Tensor[(48), float32] {
    %66 = @func_3940() /* ty=(Tensor[(48), float32],) */;
    %66.0
  };
  %67() /* ty=Tensor[(48), float32] */
}

def @func_6602() -> (Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) {
  @func_6600() /* ty=(Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) */
}

def @func_1695(%var_1688: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  %68 = cast(%var_1688, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %69 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(3, 8, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %72 = mod(%70, %71) /* ty=Tensor[(3, 8, 15), float32] */;
  (%72,)
}

def @func_4419() -> (Tensor[(32), float32],) {
  @func_4417() /* ty=(Tensor[(32), float32],) */
}

def @func_6258() -> (Tensor[(48), float32],) {
  %75 = fn () -> (Tensor[(48), float32],) {
    %73 = @func_2842() /* ty=(Tensor[(48), float32],) */;
    %74 = %73.0;
    (%74,)
  };
  %75() /* ty=(Tensor[(48), float32],) */
}

def @func_5217() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) {
  %76 = @func_4975() /* ty=(Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) */;
  %77 = @func_4064() /* ty=Tensor[(48), float32] */;
  %78 = @func_4679() /* ty=Tensor[(48), float32] */;
  %79 = @func_4337() /* ty=Tensor[(2, 4, 4), float32] */;
  %80 = %76.4;
  (%77, %78, %79, %80)
}

def @func_3803(%var_3784: Tensor[(9, 4), uint32], %var_3787: Tensor[(360), uint8]) -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) {
  %81 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %82 = cast(meta[relay.Constant][6] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %84 = reshape(%82, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %85 = reshape(%83, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %86 = @func_3151(%84, %85) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
  %87 = cast(%var_3784, dtype="uint32") /* ty=Tensor[(9, 4), uint32] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(140), int8] */, dtype="int8") /* ty=Tensor[(140), int8] */;
  %90 = cast(%var_3787, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %91 = reshape(%87, newshape=[9, 4, 1]) /* ty=Tensor[(9, 4, 1), uint32] */;
  %92 = reshape(%88, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), uint32] */;
  %93 = reshape(%89, newshape=[140]) /* ty=Tensor[(140), int8] */;
  %94 = reshape(%90, newshape=[1, 360]) /* ty=Tensor[(1, 360), uint8] */;
  %95 = @func_837(%91, %92, %93, %94) /* ty=(Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) */;
  %96 = %81.0;
  %97 = %86.0;
  %98 = %95.4;
  (%96, %97, meta[relay.Constant][6] /* ty=Tensor[(225), int32] */, %98, %var_3784, meta[relay.Constant][7] /* ty=Tensor[(144), uint32] */, meta[relay.Constant][8] /* ty=Tensor[(140), int8] */, %var_3787)
}

def @func_6934(%var_6932: Tensor[(14, 1800), bool]) -> (Tensor[(14, 1800), uint32], Tensor[(88), float32]) {
  @func_6931(%var_6932) /* ty=(Tensor[(14, 1800), uint32], Tensor[(88), float32]) */
}

def @func_179(%var_177: Tensor[(15, 10, 12), float32]) -> (Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) {
  @func_176(%var_177) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */
}

def @func_5006(%var_5001: Tensor[(10, 16, 14), int8]) -> (Tensor[(10, 16, 14), bool],) {
  %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 16, 14), int8] */, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %100 = shape_of(%var_5001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%var_5001, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = equal(%101, %102) /* ty=Tensor[(10, 16, 14), bool] */;
  (%103,)
}

def @func_4767() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) {
  @func_4765() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) */
}

def @func_6641() -> (Tensor[(48), float32],) {
  %106 = fn () -> (Tensor[(48), float32],) {
    %104 = @func_5166() /* ty=(Tensor[(48), float32],) */;
    %105 = %104.0;
    (%105,)
  };
  %106() /* ty=(Tensor[(48), float32],) */
}

def @func_7200(%var_7191: Tensor[(25200), bool]) -> (Tensor[(8, 4), float32], Tensor[(14, 1800), uint32], Tensor[(25200), bool]) {
  %107 = @func_5797() /* ty=(Tensor[(8, 4), float32],) */;
  %108 = cast(%var_7191, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %109 = reshape(%108, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %110 = %107.0;
  %111 = @func_5984(%109) /* ty=Tensor[(14, 1800), uint32] */;
  (%110, %111, %var_7191)
}

def @func_4975() -> (Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) {
  %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(660, 2), float32] */, dtype="float32") /* ty=Tensor[(660, 2), float32] */;
  %114 = reshape(%112, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float64] */;
  %115 = reshape(%113, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %116 = @func_4307(%114, %115) /* ty=(Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) */;
  %117 = cast(meta[relay.Constant][12] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %118 = reshape(%117, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %119 = @func_3277(%118) /* ty=(Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) */;
  %120 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %121 = cast(meta[relay.Constant][12] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %122 = @func_4064() /* ty=Tensor[(48), float32] */;
  %123 = %116.4;
  %124 = %119.0;
  %125 = %120.0;
  %126 = log(%121) /* ty=Tensor[(1800), float32] */;
  (%122, %123, meta[relay.Constant][10] /* ty=Tensor[(840), float64] */, meta[relay.Constant][11] /* ty=Tensor[(660, 2), float32] */, %124, %125, %126)
}

def @func_7806(%var_7804: Tensor[(10, 4, 15), float64], %var_7805: Tensor[(25200), bool]) -> (Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(32), float32], Tensor[(25200), bool], Tensor[(4, 4, 15), float32], Tensor[(10, 4, 15), float32], Tensor[(10, 4, 15), float64]) {
  @func_7802(%var_7804, %var_7805) /* ty=(Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(32), float32], Tensor[(25200), bool], Tensor[(4, 4, 15), float32], Tensor[(10, 4, 15), float32], Tensor[(10, 4, 15), float64]) */
}

def @func_4338() -> Tensor[(2, 4, 4), float32] {
  %128 = fn () -> Tensor[(2, 4, 4), float32] {
    %127 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
    %127.1
  };
  %128() /* ty=Tensor[(2, 4, 4), float32] */
}

def @func_3394(%var_3391: Tensor[(16, 12), int8], %var_3392: Tensor[(16, 12), int8], %var_3393: Tensor[(252, 4), int64]) -> (Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) {
  %141 = fn (%var_3355: Tensor[(16, 12), int8], %var_3356: Tensor[(16, 12), int8], %var_3383: Tensor[(252, 4), int64]) -> (Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) {
    %129 = cast(%var_3356, dtype="int8") /* ty=Tensor[(16, 12), int8] */;
    %130 = shape_of(%var_3355, dtype="int32") /* ty=Tensor[(2), int32] */;
    %131 = cast(%var_3355, dtype="int8") /* ty=Tensor[(16, 12), int8] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %133 = cast(%var_3383, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %134 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %135 = reshape(%133, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %136 = reshape(%134, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %137 = @func_315(%135, %136) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %138 = logical_xor(%131, %132) /* ty=Tensor[(16, 12), int8] */;
    %139 = @func_3086() /* ty=Tensor[(48), float32] */;
    %140 = %137.1;
    (%138, %139, %140, %var_3383, meta[relay.Constant][13] /* ty=Tensor[(360), uint8] */)
  };
  %141(%var_3391, %var_3392, %var_3393) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */
}

def @func_7748() -> (Tensor[(8, 4), float32],) {
  %142 = @func_6450() /* ty=(Tensor[(8, 4), float32],) */;
  %143 = %142.0;
  (%143,)
}

def @func_4977() -> (Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) {
  @func_4975() /* ty=(Tensor[(48), float32], Tensor[(1, 88), float32], Tensor[(840), float64], Tensor[(660, 2), float32], Tensor[(48), float32], Tensor[(32), float32], Tensor[(1800), float32]) */
}

def @func_7853() -> (Tensor[(5, 4, 9), int16], Tensor[(48), float32], Tensor[(48), float32]) {
  %144 = @func_2996() /* ty=(Tensor[(5, 4, 9), int16],) */;
  %145 = @func_6257() /* ty=(Tensor[(48), float32],) */;
  %146 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %147 = %144.0;
  %148 = %145.0;
  %149 = %146.0;
  (%147, %148, %149)
}

def @func_2694(%var_2693: Tensor[(88), float32]) -> (Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) {
  %164 = fn (%var_2681: Tensor[(88), float32]) -> (Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) {
    %150 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
    %151 = cast(%var_2681, dtype="float32") /* ty=Tensor[(88), float32] */;
    %152 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
    %153 = cast(meta[relay.Constant][15] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %154 = reshape(%151, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
    %155 = reshape(%152, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %156 = reshape(%153, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
    %157 = @func_1551(%154, %155, %156) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
    %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
    %159 = asin(%158) /* ty=Tensor[(3, 16, 1), float32] */;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(3, 16, 1), float64] */;
    %161 = sinh(%150) /* ty=Tensor[(3, 16, 1), float32] */;
    %162 = %157.2;
    %163 = sqrt(%160) /* ty=Tensor[(3, 16, 1), float64] */;
    (%161, %162, %var_2681, meta[relay.Constant][15] /* ty=Tensor[(1320), float32] */, %163)
  };
  %164(%var_2693) /* ty=(Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) */
}

def @func_3941() -> (Tensor[(48), float32],) {
  %167 = fn () -> (Tensor[(48), float32],) {
    %165 = @func_2842() /* ty=(Tensor[(48), float32],) */;
    %166 = %165.0;
    (%166,)
  };
  %167() /* ty=(Tensor[(48), float32],) */
}

def @func_4679() -> Tensor[(48), float32] {
  %168 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %168.0
}

def @func_2662() -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) {
  @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */
}

def @func_3556(%var_3553: Tensor[(360), float32], %var_3554: Tensor[(32), float32], %var_3555: Tensor[(25200), bool]) -> (Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) {
  @func_3551(%var_3553, %var_3554, %var_3555) /* ty=(Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) */
}

def @func_3727(%var_3723: Tensor[(1008), int64]) -> (Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
  %169 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %170 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %171 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %172 = cast(%var_3723, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %173 = reshape(%170, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %174 = reshape(%171, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %175 = reshape(%172, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %176 = @func_3390(%173, %174, %175) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %177 = %169.1;
  %178 = %176.4;
  (%177, %178, meta[relay.Constant][16] /* ty=Tensor[(192), int8] */, %var_3723)
}

def @func_7750() -> (Tensor[(8, 4), float32],) {
  @func_7748() /* ty=(Tensor[(8, 4), float32],) */
}

def @func_3353(%var_3352: Tensor[(4, 4, 15), float32]) -> Tensor[(4, 4, 15), float32] {
  %183 = fn (%var_3342: Tensor[(4, 4, 15), float32]) -> Tensor[(4, 4, 15), float32] {
    %179 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
    %180 = shape_of(%var_3342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%var_3342, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%181, %182) /* ty=Tensor[(4, 4, 15), float32] */
  };
  %183(%var_3352) /* ty=Tensor[(4, 4, 15), float32] */
}

def @func_3470(%var_3469: Tensor[(360), uint8]) -> (Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
  %191 = fn (%var_3465: Tensor[(360), uint8]) -> (Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
    %184 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
    %185 = cast(%var_3465, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %186 = cast(%var_3465, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %187 = reshape(%185, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %188 = reshape(%186, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %189 = %184.0;
    %190 = @func_48(%187, %188) /* ty=Tensor[(8, 9, 5), uint8] */;
    (%189, %190, %var_3465)
  };
  %191(%var_3469) /* ty=(Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */
}

def @func_2925() -> (Tensor[(5, 4, 9), int16],) {
  %192 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 4, 9), uint32] */;
  %193 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 4, 9), uint32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %196 = logical_xor(%194, %195) /* ty=Tensor[(5, 4, 9), uint32] */;
  %197 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 4, 9), uint32] */, dtype="int16") /* ty=Tensor[(5, 4, 9), int16] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="int16") /* ty=Tensor[(5, 4, 9), int16] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %201 = bitwise_and(%199, %200) /* ty=Tensor[(5, 4, 9), int16] */;
  (%201,)
}

def @func_5713() -> Tensor[(8, 4), float32] {
  %203 = fn () -> Tensor[(8, 4), float32] {
    %202 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
    %202.0
  };
  %203() /* ty=Tensor[(8, 4), float32] */
}

def @func_1025(%var_1023: Tensor[(2, 3, 8), float32], %var_1024: Tensor[(1800, 1), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) {
  @func_1021(%var_1023, %var_1024) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */
}

def @func_6868() -> Tensor[(8, 4), float32] {
  %204 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %204.0
}

def @func_3693(%var_3691: Tensor[(63), float32], %var_3692: Tensor[(1800), float32]) -> (Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) {
  %225 = fn (%var_3668: Tensor[(63), float32], %var_3685: Tensor[(1800), float32]) -> (Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) {
    %205 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
    %206 = %205.1;
    %207 = cast(%206, dtype="float64") /* ty=Tensor[(48), float64] */;
    %208 = cast(%var_3668, dtype="float32") /* ty=Tensor[(63), float32] */;
    %209 = reshape(%208, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
    %210 = @func_2722(%209) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) */;
    %211 = cast(meta[relay.Constant][20] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %212 = asinh(%207) /* ty=Tensor[(48), float64] */;
    %213 = cast(%212, dtype="float32") /* ty=Tensor[(48), float32] */;
    %214 = cast(meta[relay.Constant][21] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %215 = reshape(%211, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
    %216 = reshape(%213, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %217 = reshape(%214, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
    %218 = @func_1551(%215, %216, %217) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
    %219 = cast(%var_3685, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %220 = reshape(%219, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
    %221 = @func_3277(%220) /* ty=(Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) */;
    %222 = %210.1;
    %223 = %218.0;
    %224 = %221.1;
    (%212, %222, %var_3668, %223, meta[relay.Constant][20] /* ty=Tensor[(88), float32] */, meta[relay.Constant][21] /* ty=Tensor[(1320), float32] */, %224, %var_3685)
  };
  %225(%var_3691, %var_3692) /* ty=(Tensor[(48), float64], Tensor[(189), float32], Tensor[(63), float32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(12, 84), int32], Tensor[(1800), float32]) */
}

def @func_6430(%var_6426: uint64, %var_6427: Tensor[(14, 9, 10), uint64], %var_6428: Tensor[(36), uint32], %var_6429: Tensor[(14, 9, 10), float64]) -> (Tensor[(360), uint8], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(8, 4), float32], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(88), float32], Tensor[(14, 9, 10), int32], Tensor[(1, 1008), int64], Tensor[(4, 4, 15), float32], Tensor[(24, 10), float32], Tensor[(14, 9, 10), bool]) {
  %269 = fn (%var_6284: uint64, %var_6285: Tensor[(14, 9, 10), uint64], %var_6294: Tensor[(36), uint32], %var_6405: Tensor[(14, 9, 10), float64]) -> (Tensor[(360), uint8], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(8, 4), float32], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(88), float32], Tensor[(14, 9, 10), int32], Tensor[(1, 1008), int64], Tensor[(4, 4, 15), float32], Tensor[(24, 10), float32], Tensor[(14, 9, 10), bool]) {
    %226 = cast(%var_6294, dtype="uint32") /* ty=Tensor[(36), uint32] */;
    %227 = cast(meta[relay.Constant][22] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %228 = reshape(%226, newshape=[36]) /* ty=Tensor[(36), uint32] */;
    %229 = reshape(%227, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %230 = @func_5048(%228, %229) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
    %231 = @func_5405() /* ty=(Tensor[(88), float32],) */;
    %232 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
    %233 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %234 = reshape(%233, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %235 = @func_5859(%234) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
    %236 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
    %237 = cast(%var_6284, dtype="bool") /* ty=bool */;
    %238 = cast(%var_6285, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
    %239 = less(%237, %238) /* ty=Tensor[(14, 9, 10), bool] */;
    %240 = cast(%239, dtype="float64") /* ty=Tensor[(14, 9, 10), float64] */;
    %241 = asinh(%240) /* ty=Tensor[(14, 9, 10), float64] */;
    %242 = cast(%var_6405, dtype="int32") /* ty=Tensor[(14, 9, 10), int32] */;
    %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%241, dtype="int32") /* ty=Tensor[(14, 9, 10), int32] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %246 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %247 = reshape(%246, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %248 = @func_5859(%247) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
    %249 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
    %250 = reshape(%249, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
    %251 = cast(%241, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
    %252 = exp(%251) /* ty=Tensor[(14, 9, 10), float32] */;
    %253 = cast(%252, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
    %254 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%241, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = not_equal(%255, %256) /* ty=Tensor[(14, 9, 10), bool] */;
    %258 = cast(%257, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
    %259 = cast(%var_6284, dtype="bool") /* ty=bool */;
    %260 = %230.3;
    %261 = %231.0;
    %262 = %232.0;
    %263 = %235.1;
    %264 = %236.0;
    %265 = bitwise_or(%244, %245) /* ty=Tensor[(14, 9, 10), int32] */;
    %266 = %248.1;
    %267 = @func_3351(%250) /* ty=Tensor[(4, 4, 15), float32] */;
    %268 = greater_equal(%258, %259) /* ty=Tensor[(14, 9, 10), bool] */;
    (%260, %var_6294, meta[relay.Constant][22] /* ty=Tensor[(360), uint8] */, %261, %262, %263, meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, %264, %265, %266, %267, meta[relay.Constant][24] /* ty=Tensor[(24, 10), float32] */, %268)
  };
  %269(%var_6426, %var_6427, %var_6428, %var_6429) /* ty=(Tensor[(360), uint8], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(88), float32], Tensor[(8, 4), float32], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(88), float32], Tensor[(14, 9, 10), int32], Tensor[(1, 1008), int64], Tensor[(4, 4, 15), float32], Tensor[(24, 10), float32], Tensor[(14, 9, 10), bool]) */
}

def @func_3277(%var_3272: Tensor[(1800), float32]) -> (Tensor[(48), float32], Tensor[(12, 84), int32], Tensor[(1800), int64]) {
  %270 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %271 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 84), int32] */, dtype="int32") /* ty=Tensor[(12, 84), int32] */;
  %272 = reshape(%271, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
  %273 = @func_1340(%272) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
  %274 = %273.3;
  %275 = cast(%var_3272, dtype="int64") /* ty=Tensor[(1800), int64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(1), int32] */;
  %277 = cast(%274, dtype="int64") /* ty=Tensor[(1800), int64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?), int64] */;
  %279 = %270.0;
  %280 = left_shift(%277, %278) /* ty=Tensor[(1800), int64] */;
  (%279, meta[relay.Constant][25] /* ty=Tensor[(12, 84), int32] */, %280)
}

def @func_4602() -> (Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) {
  @func_4600() /* ty=(Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) */
}

def @func_6142(%var_6064: Tensor[(6, 15, 3), float32], %var_6080: Tensor[(2, 16), float32], %var_6081: Tensor[(25200, 1), bool], %var_6123: Tensor[(63), float32], %var_6126: Tensor[(360), float32]) -> (Tensor[(2, 4, 4), float32], Tensor[(2, 16), float32], Tensor[(25200, 1), bool], Tensor[(252, 4), int64], Tensor[(96, 2), int8], Tensor[(32), float32], Tensor[(63, 360), float64], Tensor[(63), float32], Tensor[(3, 4, 2), bool], Tensor[(360), float32], Tensor[(48), float32], Tensor[(6, 15, 3), int32], Tensor[(1, 1008), float64]) {
  %281 = cast(%var_6080, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %282 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %283 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %284 = reshape(%281, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %285 = reshape(%282, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %286 = reshape(%283, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %287 = @func_3221(%284, %285, %286) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) */;
  %288 = cast(meta[relay.Constant][26] /* ty=Tensor[(96, 2), int8] */, dtype="int8") /* ty=Tensor[(96, 2), int8] */;
  %289 = cast(meta[relay.Constant][26] /* ty=Tensor[(96, 2), int8] */, dtype="int8") /* ty=Tensor[(96, 2), int8] */;
  %290 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %291 = reshape(%288, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %292 = reshape(%289, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %293 = reshape(%290, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %294 = @func_3390(%291, %292, %293) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %295 = @func_5960() /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) */;
  %296 = cast(%var_6123, dtype="float32") /* ty=Tensor[(63), float32] */;
  %297 = reshape(%296, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
  %298 = @func_2722(%297) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) */;
  %299 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %300 = %295.1;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(32), float32] */;
  %302 = cast(%var_6081, dtype="bool") /* ty=Tensor[(25200, 1), bool] */;
  %303 = reshape(%299, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %304 = reshape(%301, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %305 = reshape(%302, newshape=[25200]) /* ty=Tensor[(25200), bool] */;
  %306 = @func_3551(%303, %304, %305) /* ty=(Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) */;
  %307 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %308 = cast(%var_6126, dtype="float32") /* ty=Tensor[(360), float32] */;
  %309 = reshape(%307, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %310 = reshape(%308, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %311 = @func_5550(%309, %310) /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) */;
  %312 = cast(%var_6064, dtype="float32") /* ty=Tensor[(6, 15, 3), float32] */;
  %313 = sin(%312) /* ty=Tensor[(6, 15, 3), float32] */;
  %314 = cast(%var_6064, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %318 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 1008), int64] */, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
  %319 = %287.0;
  %320 = %294.3;
  %321 = %298.2;
  %322 = %306.7;
  %323 = %311.0;
  %324 = maximum(%316, %317) /* ty=Tensor[(6, 15, 3), int32] */;
  %325 = tan(%318) /* ty=Tensor[(1, 1008), float64] */;
  (%319, %var_6080, %var_6081, %320, meta[relay.Constant][26] /* ty=Tensor[(96, 2), int8] */, %300, %321, %var_6123, %322, %var_6126, %323, %324, %325)
}

def @func_4765() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) {
  %326 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %327 = cast(meta[relay.Constant][28] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %328 = cast(meta[relay.Constant][29] /* ty=Tensor[(36, 10), uint8] */, dtype="uint8") /* ty=Tensor[(36, 10), uint8] */;
  %329 = reshape(%327, newshape=[9, 4]) /* ty=Tensor[(9, 4), uint32] */;
  %330 = reshape(%328, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %331 = @func_3803(%329, %330) /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) */;
  %332 = %326.0;
  %333 = %331.1;
  (%332, %333, meta[relay.Constant][28] /* ty=Tensor[(36), uint32] */, meta[relay.Constant][29] /* ty=Tensor[(36, 10), uint8] */)
}

def @func_4550(%var_4517: Tensor[(2, 4, 4), float32]) -> (Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) {
  %334 = @func_4337() /* ty=Tensor[(2, 4, 4), float32] */;
  %335 = cast(%var_4517, dtype="int32") /* ty=Tensor[(2, 4, 4), int32] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="int32") /* ty=Tensor[(2, 4, 4), int32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %339 = cast(%334, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  %340 = logical_xor(%337, %338) /* ty=Tensor[(2, 4, 4), int32] */;
  %341 = log2(%339) /* ty=Tensor[(2, 4, 4), float32] */;
  (%340, %341)
}

def @func_2997() -> (Tensor[(5, 4, 9), int16],) {
  %344 = fn () -> (Tensor[(5, 4, 9), int16],) {
    %342 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
    %343 = %342.0;
    (%343,)
  };
  %344() /* ty=(Tensor[(5, 4, 9), int16],) */
}

def @func_3551(%var_3506: Tensor[(360), float32], %var_3547: Tensor[(32), float32], %var_3548: Tensor[(25200), bool]) -> (Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) {
  %345 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %346 = cast(%var_3506, dtype="float32") /* ty=Tensor[(360), float32] */;
  %347 = reshape(%346, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %348 = @func_1695(%347) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %349 = cast(meta[relay.Constant][30] /* ty=Tensor[(35, 4), int8] */, dtype="int8") /* ty=Tensor[(35, 4), int8] */;
  %350 = reshape(%349, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
  %351 = @func_668(%350) /* ty=(Tensor[(1, 10, 14), int8],) */;
  %352 = cast(meta[relay.Constant][31] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %353 = cast(meta[relay.Constant][31] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %354 = reshape(%352, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %355 = reshape(%353, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
  %356 = @func_3151(%354, %355) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
  %357 = cast(meta[relay.Constant][32] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %358 = reshape(%357, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %359 = cast(meta[relay.Constant][33] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %360 = %348.0;
  %361 = cast(%360, dtype="uint8") /* ty=Tensor[(3, 8, 15), uint8] */;
  %362 = reshape(%359, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %363 = reshape(%361, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %364 = @func_315(%362, %363) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %365 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %366 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %367 = reshape(%365, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %368 = reshape(%366, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %369 = %364.2;
  %370 = cast(%369, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %371 = cast(%var_3506, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %372 = reshape(%370, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %373 = reshape(%371, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %374 = cast(%var_3547, dtype="float32") /* ty=Tensor[(32), float32] */;
  %375 = cast(%var_3548, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %376 = cast(%var_3548, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %377 = reshape(%374, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %378 = reshape(%375, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %379 = reshape(%376, newshape=[14, 1800]) /* ty=Tensor[(14, 1800), bool] */;
  %380 = @func_3221(%377, %378, %379) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) */;
  %381 = %345.0;
  %382 = %351.0;
  %383 = %356.1;
  %384 = @func_3006(%358) /* ty=Tensor[(3, 4, 2), bool] */;
  %385 = @func_48(%367, %368) /* ty=Tensor[(8, 9, 5), uint8] */;
  %386 = @func_48(%372, %373) /* ty=Tensor[(8, 9, 5), uint8] */;
  %387 = %380.0;
  (%381, %360, %var_3506, %382, meta[relay.Constant][30] /* ty=Tensor[(35, 4), int8] */, %383, meta[relay.Constant][31] /* ty=Tensor[(225), int32] */, %384, meta[relay.Constant][32] /* ty=Tensor[(24), bool] */, %369, meta[relay.Constant][33] /* ty=Tensor[(1008), int64] */, %385, %386, %387, %var_3547, %var_3548)
}

def @func_7802(%var_7767: Tensor[(10, 4, 15), float64], %var_7786: Tensor[(25200), bool]) -> (Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(32), float32], Tensor[(25200), bool], Tensor[(4, 4, 15), float32], Tensor[(10, 4, 15), float32], Tensor[(10, 4, 15), float64]) {
  %388 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %389 = cast(meta[relay.Constant][35] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %390 = cast(%var_7786, dtype="bool") /* ty=Tensor[(25200), bool] */;
  %391 = reshape(%388, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %392 = reshape(%389, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %393 = reshape(%390, newshape=[25200]) /* ty=Tensor[(25200), bool] */;
  %394 = @func_3551(%391, %392, %393) /* ty=(Tensor[(48), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(1, 10, 14), int8], Tensor[(35, 4), int8], Tensor[(5, 15, 3), bool], Tensor[(225), int32], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(8, 9, 5), uint8], Tensor[(8, 9, 5), uint8], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(25200), bool]) */;
  %395 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %396 = cast(%var_7767, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %397 = acos(%396) /* ty=Tensor[(10, 4, 15), float64] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %399 = log2(%398) /* ty=Tensor[(10, 4, 15), float64] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %401 = rsqrt(%400) /* ty=Tensor[(10, 4, 15), float32] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %403 = cast(%397, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %404 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%399, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %407 = %394.1;
  %408 = %395.3;
  %409 = atan(%402) /* ty=Tensor[(10, 4, 15), float32] */;
  %410 = floor_divide(%405, %406) /* ty=Tensor[(10, 4, 15), float64] */;
  (%407, meta[relay.Constant][34] /* ty=Tensor[(360), float32] */, meta[relay.Constant][35] /* ty=Tensor[(32), float32] */, %var_7786, %408, %409, %410)
}

def @func_7409() -> (Tensor[(48), float32],) {
  %413 = fn () -> (Tensor[(48), float32],) {
    %411 = @func_2842() /* ty=(Tensor[(48), float32],) */;
    %412 = %411.0;
    (%412,)
  };
  %413() /* ty=(Tensor[(48), float32],) */
}

def @func_7450() -> (Tensor[(48), float32], Tensor[(5, 4, 9), int16]) {
  @func_7448() /* ty=(Tensor[(48), float32], Tensor[(5, 4, 9), int16]) */
}

def @func_2842() -> (Tensor[(48), float32],) {
  %414 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %415 = %414.1;
  (%415,)
}

def @func_4310(%var_4308: Tensor[(10, 7, 12), float64], %var_4309: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) {
  %449 = fn (%var_4243: Tensor[(10, 7, 12), float64], %var_4273: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) {
    %416 = cast(meta[relay.Constant][36] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %417 = reshape(%416, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
    %418 = @func_1340(%417) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
    %419 = cast(%var_4243, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %420 = exp(%419) /* ty=Tensor[(10, 7, 12), float64] */;
    %421 = cast(%420, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %422 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
    %423 = %418.2;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(48), float32] */;
    %425 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %426 = reshape(%422, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
    %427 = reshape(%424, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %428 = reshape(%425, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
    %429 = @func_1551(%426, %427, %428) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
    %430 = cast(%420, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %431 = cosh(%430) /* ty=Tensor[(10, 7, 12), float64] */;
    %432 = cast(%431, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %433 = sigmoid(%432) /* ty=Tensor[(10, 7, 12), float64] */;
    %434 = cast(%var_4243, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
    %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%433, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %438 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
    %439 = cast(%423, dtype="float32") /* ty=Tensor[(48), float32] */;
    %440 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %441 = reshape(%438, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
    %442 = reshape(%439, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %443 = reshape(%440, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
    %444 = @func_1551(%441, %442, %443) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
    %445 = sin(%421) /* ty=Tensor[(10, 7, 12), float64] */;
    %446 = %429.2;
    %447 = right_shift(%436, %437) /* ty=Tensor[(10, 7, 12), uint16] */;
    %448 = %444.3;
    (%423, meta[relay.Constant][36] /* ty=Tensor[(1008), int32] */, %445, %446, meta[relay.Constant][37] /* ty=Tensor[(1, 88), float32] */, %var_4273, %447, %448)
  };
  %449(%var_4308, %var_4309) /* ty=(Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) */
}

def @func_5406() -> (Tensor[(88), float32],) {
  %451 = fn () -> (Tensor[(88), float32],) {
    %450 = @func_3900() /* ty=Tensor[(88), float32] */;
    (%450,)
  };
  %451() /* ty=(Tensor[(88), float32],) */
}

def @func_3009(%var_3007: Tensor[(3, 4, 2), bool]) -> Tensor[(3, 4, 2), bool] {
  @func_3006(%var_3007) /* ty=Tensor[(3, 4, 2), bool] */
}

def @func_5051(%var_5049: Tensor[(36), uint32], %var_5050: Tensor[(360), uint8]) -> (Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
  %473 = fn (%var_5032: Tensor[(36), uint32], %var_5033: Tensor[(360), uint8]) -> (Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
    %452 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
    %453 = cast(%var_5032, dtype="uint32") /* ty=Tensor[(36), uint32] */;
    %454 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %455 = reshape(%453, newshape=[9, 4]) /* ty=Tensor[(9, 4), uint32] */;
    %456 = reshape(%454, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %457 = @func_3803(%455, %456) /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) */;
    %458 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %459 = reshape(%458, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %460 = @func_3468(%459) /* ty=(Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %461 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %462 = cast(%var_5033, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %463 = reshape(%461, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %464 = reshape(%462, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %465 = cast(meta[relay.Constant][38] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %466 = reshape(%465, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %467 = @func_3727(%466) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
    %468 = %452.3;
    %469 = %457.4;
    %470 = %460.0;
    %471 = @func_48(%463, %464) /* ty=Tensor[(8, 9, 5), uint8] */;
    %472 = %467.2;
    (%468, %469, %var_5032, %var_5033, %470, %471, %472, meta[relay.Constant][38] /* ty=Tensor[(1008), int64] */)
  };
  %473(%var_5049, %var_5050) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */
}

def @func_1021(%var_976: Tensor[(2, 3, 8), float32], %var_983: Tensor[(1800, 1), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) {
  %474 = cast(meta[relay.Constant][39] /* ty=Tensor[(90, 3), float32] */, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %475 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %476 = cast(%var_983, dtype="float32") /* ty=Tensor[(1800, 1), float32] */;
  %477 = reshape(%474, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %478 = reshape(%475, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %479 = reshape(%476, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %480 = @func_496(%477, %478, %479) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) */;
  %481 = cast(%var_976, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %482 = sqrt(%481) /* ty=Tensor[(2, 3, 8), float32] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %484 = cast(meta[relay.Constant][41] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %485 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %486 = reshape(%484, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %487 = reshape(%485, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %488 = @func_315(%486, %487) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %489 = cast(%482, dtype="int64") /* ty=Tensor[(2, 3, 8), int64] */;
  %490 = shape_of(%var_976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_976, dtype="int64") /* ty=Tensor[(2, 3, 8), int64] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %493 = maximum(%491, %492) /* ty=Tensor[(2, 3, 8), int64] */;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %495 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%482, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %498 = cast(meta[relay.Constant][41] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %499 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %500 = reshape(%498, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %501 = reshape(%499, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %502 = @func_315(%500, %501) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %503 = %480.0;
  %504 = atan(%483) /* ty=Tensor[(2, 3, 8), float32] */;
  %505 = %488.2;
  %506 = floor_divide(%496, %497) /* ty=Tensor[(2, 3, 8), float32] */;
  %507 = %502.2;
  (%503, meta[relay.Constant][39] /* ty=Tensor[(90, 3), float32] */, meta[relay.Constant][40] /* ty=Tensor[(360), uint8] */, %var_983, %504, %505, meta[relay.Constant][41] /* ty=Tensor[(1008), int64] */, %506, %507)
}

def @func_3900() -> Tensor[(88), float32] {
  %508 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
  %508.2
}

def @func_5350(%var_5348: Tensor[(10, 11, 11), float32]) -> Tensor[(10, 11, 11), float32] {
  @func_5347(%var_5348) /* ty=Tensor[(10, 11, 11), float32] */
}

def @func_5797() -> (Tensor[(8, 4), float32],) {
  %509 = @func_5712() /* ty=Tensor[(8, 4), float32] */;
  (%509,)
}

def @func_6188(%var_6186: float64, %var_6187: Tensor[(1, 8, 1), float64]) -> (Tensor[(1, 8, 1), float64],) {
  @func_6184(%var_6186, %var_6187) /* ty=(Tensor[(1, 8, 1), float64],) */
}

def @func_7030() -> Tensor[(8, 4), float32] {
  %511 = fn () -> Tensor[(8, 4), float32] {
    %510 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
    %510.0
  };
  %511() /* ty=Tensor[(8, 4), float32] */
}

def @func_5252(%var_5250: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(88), float32], Tensor[(360), uint8], Tensor[(1320), float32]) {
  @func_5249(%var_5250) /* ty=(Tensor[(48), float32], Tensor[(88), float32], Tensor[(360), uint8], Tensor[(1320), float32]) */
}

def @func_4681() -> Tensor[(48), float32] {
  @func_4679() /* ty=Tensor[(48), float32] */
}

def @func_3876(%var_3844: Tensor[(192), int8], %var_3845: Tensor[(1008), int64], %var_3865: Tensor[(12, 48), uint32], %var_3874: Tensor[(112), float32]) -> (Tensor[(48), float32], Tensor[(252, 4), int64], Tensor[(192), int8], Tensor[(1008), int64], Tensor[(12, 8, 6), float64], Tensor[(12, 48), int64], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(14, 2, 4), float32], Tensor[(112), float32]) {
  %512 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %513 = cast(%var_3844, dtype="int8") /* ty=Tensor[(192), int8] */;
  %514 = cast(%var_3844, dtype="int8") /* ty=Tensor[(192), int8] */;
  %515 = cast(%var_3845, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %516 = reshape(%513, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %517 = reshape(%514, newshape=[16, 12]) /* ty=Tensor[(16, 12), int8] */;
  %518 = reshape(%515, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %519 = @func_3390(%516, %517, %518) /* ty=(Tensor[(16, 12), int8], Tensor[(48), float32], Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8]) */;
  %520 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 48), uint32] */, dtype="uint32") /* ty=Tensor[(12, 48), uint32] */;
  %521 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 48), uint32] */, dtype="uint32") /* ty=Tensor[(12, 48), uint32] */;
  %522 = reshape(%520, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), uint32] */;
  %523 = reshape(%521, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), uint32] */;
  %524 = cast(%var_3865, dtype="int64") /* ty=Tensor[(12, 48), int64] */;
  %525 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(12, 48), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 48), uint32] */, dtype="int64") /* ty=Tensor[(12, 48), int64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %528 = cast(meta[relay.Constant][43] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %529 = reshape(%528, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), bool] */;
  %530 = cast(%var_3874, dtype="float32") /* ty=Tensor[(112), float32] */;
  %531 = reshape(%530, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float32] */;
  %532 = @func_1683(%531) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) */;
  %533 = %512.0;
  %534 = %519.3;
  %535 = @func_2043(%522, %523) /* ty=Tensor[(12, 8, 6), float64] */;
  %536 = left_shift(%526, %527) /* ty=Tensor[(12, 48), int64] */;
  %537 = @func_3006(%529) /* ty=Tensor[(3, 4, 2), bool] */;
  %538 = %532.0;
  (%533, %534, %var_3844, %var_3845, %535, %536, %537, meta[relay.Constant][43] /* ty=Tensor[(24), bool] */, %538, %var_3874)
}

def @func_3918(%var_3916: Tensor[(6, 3, 15), float64]) -> Tensor[(6, 3, 15), float64] {
  @func_3915(%var_3916) /* ty=Tensor[(6, 3, 15), float64] */
}

def @func_6506() -> Tensor[(88), float32] {
  @func_3900() /* ty=Tensor[(88), float32] */
}

def @func_6721(%var_6706: Tensor[(4, 14, 6), float64], %var_6707: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(4, 14, 6), int16]) {
  %539 = cast(%var_6707, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %540 = shape_of(%var_6706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_6706, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %543 = cast(meta[relay.Constant][44] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %544 = reshape(%543, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %545 = @func_5859(%544) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */;
  %546 = cast(%var_6706, dtype="int16") /* ty=Tensor[(4, 14, 6), int16] */;
  %547 = shape_of(%var_6707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_6707, dtype="int16") /* ty=Tensor[(4, 14, 6), int16] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %550 = mod(%541, %542) /* ty=Tensor[(4, 14, 6), float64] */;
  %551 = %545.1;
  %552 = add(%548, %549) /* ty=Tensor[(4, 14, 6), int16] */;
  (%550, %551, meta[relay.Constant][44] /* ty=Tensor[(48), float32] */, %552)
}

def @func_2725(%var_2723: Tensor[(63, 1), float32]) -> (Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) {
  @func_2722(%var_2723) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) */
}

def @func_4066() -> Tensor[(48), float32] {
  @func_4064() /* ty=Tensor[(48), float32] */
}

def @func_7855() -> (Tensor[(5, 4, 9), int16], Tensor[(48), float32], Tensor[(48), float32]) {
  @func_7853() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(48), float32], Tensor[(48), float32]) */
}

def @func_4194() -> (Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) {
  %558 = fn () -> (Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) {
    %553 = @func_3439() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */;
    %554 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %555 = reshape(%554, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
    %556 = %553.2;
    %557 = @func_3351(%555) /* ty=Tensor[(4, 4, 15), float32] */;
    (%556, %557, meta[relay.Constant][45] /* ty=Tensor[(240), float32] */)
  };
  %558() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */
}

def @func_7203(%var_7201: Tensor[(25200), bool]) -> (Tensor[(8, 4), float32], Tensor[(14, 1800), uint32], Tensor[(25200), bool]) {
  @func_7200(%var_7201) /* ty=(Tensor[(8, 4), float32], Tensor[(14, 1800), uint32], Tensor[(25200), bool]) */
}

def @func_7318() -> Tensor[(88), float32] {
  %559 = fn () -> Tensor[(88), float32] {
    @func_6506() /* ty=Tensor[(88), float32] */
  };
  %559() /* ty=Tensor[(88), float32] */
}

def @func_3086() -> Tensor[(48), float32] {
  %560 = @func_2842() /* ty=(Tensor[(48), float32],) */;
  %560.0
}

def @func_3902() -> Tensor[(88), float32] {
  @func_3900() /* ty=Tensor[(88), float32] */
}

def @func_1343(%var_1341: Tensor[(14, 6, 12), int32]) -> (Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) {
  @func_1340(%var_1341) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */
}

def @func_5347(%var_5338: Tensor[(10, 11, 11), float32]) -> Tensor[(10, 11, 11), float32] {
  %561 = cast(%var_5338, dtype="float32") /* ty=Tensor[(10, 11, 11), float32] */;
  asinh(%561) /* ty=Tensor[(10, 11, 11), float32] */
}

def @func_1698(%var_1696: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  @func_1695(%var_1696) /* ty=(Tensor[(3, 8, 15), float32],) */
}

def @func_6800(%var_6793: Tensor[(16, 9, 3), float32], %var_6794: Tensor[(16, 9, 3), float32]) -> Tensor[(16, 9, 3), bool] {
  %562 = cast(%var_6794, dtype="bool") /* ty=Tensor[(16, 9, 3), bool] */;
  %563 = shape_of(%var_6793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_6793, dtype="bool") /* ty=Tensor[(16, 9, 3), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%564, %565) /* ty=Tensor[(16, 9, 3), bool] */
}

def @func_6450() -> (Tensor[(8, 4), float32],) {
  %566 = @func_5327() /* ty=(Tensor[(8, 4), float32],) */;
  %567 = %566.0;
  (%567,)
}

def @func_2660() -> (Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) {
  %568 = cast(meta[relay.Constant][46] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %569 = cast(meta[relay.Constant][47] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %570 = reshape(%568, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %571 = reshape(%569, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %572 = @func_1021(%570, %571) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %573 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %574 = rsqrt(%573) /* ty=Tensor[(14, 1), float32] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(14, 1), bool] */;
  %576 = cast(meta[relay.Constant][47] /* ty=Tensor[(1800), float32] */, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %577 = %572.8;
  %578 = less_equal(%575, %576) /* ty=Tensor[(14, 1800), bool] */;
  (%577, meta[relay.Constant][46] /* ty=Tensor[(48), float32] */, %578)
}

def @func_6508() -> Tensor[(88), float32] {
  @func_6506() /* ty=Tensor[(88), float32] */
}

def @func_500(%var_497: Tensor[(2, 15, 9), float32], %var_498: Tensor[(360), uint8], %var_499: Tensor[(1800), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) {
  %632 = fn (%var_388: Tensor[(2, 15, 9), float32], %var_393: Tensor[(360), uint8], %var_422: Tensor[(1800), float32]) -> (Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) {
    %579 = cast(meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %580 = cast(%var_393, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %581 = reshape(%579, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %582 = reshape(%580, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %583 = @func_315(%581, %582) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %584 = cast(%var_422, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %585 = reshape(%584, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %586 = @func_176(%585) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
    %587 = cast(meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %588 = %583.1;
    %589 = cast(%588, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
    %590 = reshape(%587, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %591 = reshape(%589, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %592 = @func_315(%590, %591) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %593 = %586.0;
    %594 = cast(%593, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
    %595 = reshape(%594, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %596 = @func_176(%595) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
    %597 = cast(meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %598 = cast(%var_393, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %599 = reshape(%597, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %600 = reshape(%598, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %601 = @func_315(%599, %600) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %602 = cast(%var_388, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
    %603 = log2(%602) /* ty=Tensor[(2, 15, 9), float32] */;
    %604 = cast(%603, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %605 = sqrt(%604) /* ty=Tensor[(2, 15, 9), float64] */;
    %606 = cast(%603, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
    %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%605, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %610 = cast(%605, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %611 = cast(%593, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
    %612 = reshape(%611, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %613 = @func_176(%612) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
    %614 = cast(meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %615 = %592.1;
    %616 = cast(%615, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
    %617 = reshape(%614, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %618 = reshape(%616, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %619 = @func_315(%617, %618) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %620 = cast(meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
    %621 = %601.2;
    %622 = cast(%621, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %623 = reshape(%620, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %624 = reshape(%622, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %625 = @func_315(%623, %624) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %626 = %596.0;
    %627 = mod(%608, %609) /* ty=Tensor[(2, 15, 9), float32] */;
    %628 = acos(%610) /* ty=Tensor[(2, 15, 9), float64] */;
    %629 = %613.0;
    %630 = %619.2;
    %631 = %625.2;
    (%588, meta[relay.Constant][49] /* ty=Tensor[(252, 4), int64] */, %var_393, %593, %var_422, %615, %626, %621, %627, %628, %629, %630, %631)
  };
  %632(%var_497, %var_498, %var_499) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(252, 4), int64], Tensor[(360), uint8], Tensor[(15, 10, 12), uint16], Tensor[(1800), float32], Tensor[(8, 9, 5), uint8], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(2, 15, 9), float32], Tensor[(2, 15, 9), float64], Tensor[(15, 10, 12), uint16], Tensor[(360), uint8], Tensor[(360), uint8]) */
}

def @func_6680(%var_6645: Tensor[(11, 6, 7), float64]) -> (Tensor[(48), float32], Tensor[(11, 6, 7), int8], Tensor[(48), float32]) {
  %633 = cast(%var_6645, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %634 = sqrt(%633) /* ty=Tensor[(11, 6, 7), float64] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %636 = asinh(%635) /* ty=Tensor[(11, 6, 7), float32] */;
  %637 = cast(%634, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %641 = @func_5217() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) */;
  %642 = @func_4064() /* ty=Tensor[(48), float32] */;
  %643 = left_shift(%639, %640) /* ty=Tensor[(11, 6, 7), int8] */;
  %644 = %641.3;
  (%642, %643, %644)
}

def @func_4373(%var_4342: Tensor[(13, 12, 14), float64]) -> Tensor[(13, 12, 14), bool] {
  %645 = cast(%var_4342, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %646 = sin(%645) /* ty=Tensor[(13, 12, 14), float64] */;
  %647 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%649, %650) /* ty=Tensor[(13, 12, 14), bool] */
}

def @func_4121() -> (Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) {
  %660 = fn () -> (Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) {
    %651 = @func_2842() /* ty=(Tensor[(48), float32],) */;
    %652 = cast(meta[relay.Constant][51] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %653 = reshape(%652, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
    %654 = cast(meta[relay.Constant][52] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %655 = reshape(%654, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %656 = @func_3727(%655) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
    %657 = %651.0;
    %658 = @func_1524(%653) /* ty=Tensor[(2, 4, 4), float32] */;
    %659 = %656.3;
    (%657, %658, meta[relay.Constant][51] /* ty=Tensor[(32), float32] */, %659, meta[relay.Constant][52] /* ty=Tensor[(1008), int64] */)
  };
  %660() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */
}

def @func_3155(%var_3153: Tensor[(5, 15, 3), int32], %var_3154: Tensor[(5, 15, 3), int32]) -> (Tensor[(48), float32], Tensor[(5, 15, 3), bool]) {
  @func_3151(%var_3153, %var_3154) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */
}

def @func_4842(%var_4840: Tensor[(12, 16, 13), int16], %var_4841: Tensor[(12, 16, 13), int16]) -> (Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) {
  @func_4838(%var_4840, %var_4841) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) */
}

def @func_4553(%var_4551: Tensor[(2, 4, 4), float32]) -> (Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) {
  @func_4550(%var_4551) /* ty=(Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) */
}

def @func_4656() -> (Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) {
  %661 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %662 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %663 = reshape(%662, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
  %664 = @func_4550(%663) /* ty=(Tensor[(2, 4, 4), int32], Tensor[(2, 4, 4), float32]) */;
  %665 = %664.1;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %667 = rsqrt(%666) /* ty=Tensor[(2, 4, 4), float64] */;
  %668 = cast(%665, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %672 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %673 = %661.0;
  %674 = divide(%670, %671) /* ty=Tensor[(2, 4, 4), float64] */;
  %675 = %672.1;
  (%673, meta[relay.Constant][53] /* ty=Tensor[(8, 4), float32] */, %674, %675)
}

def @func_7463() -> Tensor[(48), float32] {
  @func_7461() /* ty=Tensor[(48), float32] */
}

def @func_5647(%var_5645: Tensor[(1050), int8], %var_5646: Tensor[(840), float64]) -> (Tensor[(48), float32], Tensor[(1050), int8], Tensor[(14, 15, 5), bool], Tensor[(1800), float32], Tensor[(840), float64], Tensor[(1320), float32]) {
  %694 = fn (%var_5624: Tensor[(1050), int8], %var_5641: Tensor[(840), float64]) -> (Tensor[(48), float32], Tensor[(1050), int8], Tensor[(14, 15, 5), bool], Tensor[(1800), float32], Tensor[(840), float64], Tensor[(1320), float32]) {
    %676 = cast(%var_5624, dtype="int8") /* ty=Tensor[(1050), int8] */;
    %677 = reshape(%676, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), int8] */;
    %678 = @func_4141(%677) /* ty=(Tensor[(14, 15, 5), int8],) */;
    %679 = %678.0;
    %680 = cast(%679, dtype="float64") /* ty=Tensor[(14, 15, 5), float64] */;
    %681 = log2(%680) /* ty=Tensor[(14, 15, 5), float64] */;
    %682 = cast(%679, dtype="bool") /* ty=Tensor[(14, 15, 5), bool] */;
    %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%681, dtype="bool") /* ty=Tensor[(14, 15, 5), bool] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %686 = cast(%var_5641, dtype="float64") /* ty=Tensor[(840), float64] */;
    %687 = cast(meta[relay.Constant][54] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %688 = reshape(%686, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float64] */;
    %689 = reshape(%687, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
    %690 = @func_4307(%688, %689) /* ty=(Tensor[(48), float32], Tensor[(1008), int32], Tensor[(10, 7, 12), float64], Tensor[(1800), float32], Tensor[(1, 88), float32], Tensor[(1320), float32], Tensor[(10, 7, 12), uint16], Tensor[(11, 8, 15), uint16]) */;
    %691 = @func_4434() /* ty=Tensor[(48), float32] */;
    %692 = logical_and(%684, %685) /* ty=Tensor[(14, 15, 5), bool] */;
    %693 = %690.3;
    (%691, %var_5624, %692, %693, %var_5641, meta[relay.Constant][54] /* ty=Tensor[(1320), float32] */)
  };
  %694(%var_5645, %var_5646) /* ty=(Tensor[(48), float32], Tensor[(1050), int8], Tensor[(14, 15, 5), bool], Tensor[(1800), float32], Tensor[(840), float64], Tensor[(1320), float32]) */
}

def @func_6452() -> (Tensor[(8, 4), float32],) {
  @func_6450() /* ty=(Tensor[(8, 4), float32],) */
}

def @func_4376(%var_4374: Tensor[(13, 12, 14), float64]) -> Tensor[(13, 12, 14), bool] {
  @func_4373(%var_4374) /* ty=Tensor[(13, 12, 14), bool] */
}

def @func_5166() -> (Tensor[(48), float32],) {
  %695 = @func_4504() /* ty=(Tensor[(48), float32],) */;
  %696 = %695.0;
  (%696,)
}

def @func_6245() -> Tensor[(32), float32] {
  %697 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %697.0
}

def @func_7173() -> (Tensor[(1008), int64], Tensor[(4, 4, 15), float32], Tensor[(36), uint32], Tensor[(1, 360), uint8], Tensor[(4, 4, 15), float32], Tensor[(14, 2, 4), float32], Tensor[(112), float32], Tensor[(48), float32]) {
  %714 = fn () -> (Tensor[(1008), int64], Tensor[(4, 4, 15), float32], Tensor[(36), uint32], Tensor[(1, 360), uint8], Tensor[(4, 4, 15), float32], Tensor[(14, 2, 4), float32], Tensor[(112), float32], Tensor[(48), float32]) {
    %698 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
    %699 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
    %700 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 360), uint8] */, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
    %701 = reshape(%699, newshape=[36]) /* ty=Tensor[(36), uint32] */;
    %702 = reshape(%700, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %703 = @func_5048(%701, %702) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(9, 4), uint32], Tensor[(36), uint32], Tensor[(360), uint8], Tensor[(5, 4, 9), int16], Tensor[(8, 9, 5), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
    %704 = %703.0;
    %705 = cast(%704, dtype="float32") /* ty=Tensor[(4, 4, 15), float32] */;
    %706 = reshape(%705, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float32] */;
    %707 = cast(meta[relay.Constant][57] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %708 = reshape(%707, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float32] */;
    %709 = @func_1683(%708) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) */;
    %710 = %698.4;
    %711 = @func_3351(%706) /* ty=Tensor[(4, 4, 15), float32] */;
    %712 = %709.0;
    %713 = @func_3086() /* ty=Tensor[(48), float32] */;
    (%710, %704, meta[relay.Constant][55] /* ty=Tensor[(36), uint32] */, meta[relay.Constant][56] /* ty=Tensor[(1, 360), uint8] */, %711, %712, meta[relay.Constant][57] /* ty=Tensor[(112), float32] */, %713)
  };
  %714() /* ty=(Tensor[(1008), int64], Tensor[(4, 4, 15), float32], Tensor[(36), uint32], Tensor[(1, 360), uint8], Tensor[(4, 4, 15), float32], Tensor[(14, 2, 4), float32], Tensor[(112), float32], Tensor[(48), float32]) */
}

def @func_1685(%var_1684: Tensor[(14, 2, 4), float32]) -> (Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) {
  %721 = fn (%var_1672: Tensor[(14, 2, 4), float32]) -> (Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) {
    %715 = cast(%var_1672, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
    %716 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 1008), int32] */, dtype="int32") /* ty=Tensor[(1, 1008), int32] */;
    %717 = reshape(%716, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), int32] */;
    %718 = @func_1340(%717) /* ty=(Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) */;
    %719 = asin(%715) /* ty=Tensor[(14, 2, 4), float32] */;
    %720 = %718.0;
    (%719, %720, meta[relay.Constant][58] /* ty=Tensor[(1, 1008), int32] */)
  };
  %721(%var_1684) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(14, 6, 12), int32], Tensor[(1, 1008), int32]) */
}

def @func_5961() -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) {
  %730 = fn () -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) {
    %722 = @func_3940() /* ty=(Tensor[(48), float32],) */;
    %723 = @func_4417() /* ty=(Tensor[(32), float32],) */;
    %724 = cast(meta[relay.Constant][59] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %725 = reshape(%724, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
    %726 = @func_176(%725) /* ty=(Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) */;
    %727 = %722.0;
    %728 = %723.0;
    %729 = %726.1;
    (%727, %728, %729, meta[relay.Constant][59] /* ty=Tensor[(1800), float32] */)
  };
  %730() /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(15, 10, 12), float32], Tensor[(1800), float32]) */
}

def @func_1527(%var_1525: Tensor[(2, 4, 4), float32]) -> Tensor[(2, 4, 4), float32] {
  @func_1524(%var_1525) /* ty=Tensor[(2, 4, 4), float32] */
}

def @func_3730(%var_3728: Tensor[(1008), int64]) -> (Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) {
  @func_3727(%var_3728) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */
}

def @func_6761() -> (Tensor[(88), float32],) {
  %731 = @func_3900() /* ty=Tensor[(88), float32] */;
  (%731,)
}

def @func_2844() -> (Tensor[(48), float32],) {
  @func_2842() /* ty=(Tensor[(48), float32],) */
}

def @func_6683(%var_6681: Tensor[(11, 6, 7), float64]) -> (Tensor[(48), float32], Tensor[(11, 6, 7), int8], Tensor[(48), float32]) {
  @func_6680(%var_6681) /* ty=(Tensor[(48), float32], Tensor[(11, 6, 7), int8], Tensor[(48), float32]) */
}

def @func_4456() -> Tensor[(32), float32] {
  %732 = @func_4417() /* ty=(Tensor[(32), float32],) */;
  %732.0
}

def @func_6600() -> (Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) {
  %733 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
  %734 = @func_5166() /* ty=(Tensor[(48), float32],) */;
  %735 = @func_4765() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) */;
  %736 = cast(meta[relay.Constant][60] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %737 = cast(meta[relay.Constant][60] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %738 = reshape(%736, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %739 = reshape(%737, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float32] */;
  %740 = @func_6537(%738, %739) /* ty=Tensor[(15, 14, 6), float32] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %742 = %734.0;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(48), float32] */;
  %744 = cast(meta[relay.Constant][61] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %745 = reshape(%743, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %746 = reshape(%744, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %747 = @func_1021(%745, %746) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %748 = %733.0;
  %749 = %735.2;
  %750 = sigmoid(%741) /* ty=Tensor[(15, 14, 6), float32] */;
  %751 = %747.6;
  (%748, meta[relay.Constant][60] /* ty=Tensor[(1260), float32] */, %742, %749, %750, %751, meta[relay.Constant][61] /* ty=Tensor[(1800), float32] */)
}

def @func_5554(%var_5552: Tensor[(360), float32], %var_5553: Tensor[(3, 8, 15), float32]) -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) {
  @func_5550(%var_5552, %var_5553) /* ty=(Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) */
}

def @func_4838(%var_4777: Tensor[(12, 16, 13), int16], %var_4778: Tensor[(12, 16, 13), int16]) -> (Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) {
  %752 = cast(meta[relay.Constant][62] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %753 = cast(meta[relay.Constant][62] /* ty=Tensor[(360), uint8] */, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %754 = reshape(%752, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %755 = reshape(%753, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
  %756 = cast(%var_4778, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %757 = shape_of(%var_4777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_4777, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %760 = logical_xor(%758, %759) /* ty=Tensor[(12, 16, 13), int16] */;
  %761 = cast(%760, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %762 = shape_of(%var_4778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_4778, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = @func_4765() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(36, 10), uint8]) */;
  %766 = @func_48(%754, %755) /* ty=Tensor[(8, 9, 5), uint8] */;
  %767 = @func_4456() /* ty=Tensor[(32), float32] */;
  %768 = logical_or(%763, %764) /* ty=Tensor[(12, 16, 13), bool] */;
  %769 = %765.1;
  (%766, meta[relay.Constant][62] /* ty=Tensor[(360), uint8] */, %767, %768, %769)
}

def @func_7461() -> Tensor[(48), float32] {
  %770 = @func_6851() /* ty=(Tensor[(1008), int64], Tensor[(48), float32]) */;
  %770.1
}

def @func_7266() -> (Tensor[(48), float32],) {
  @func_7264() /* ty=(Tensor[(48), float32],) */
}

def @func_6725(%var_6723: Tensor[(4, 14, 6), float64], %var_6724: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(4, 14, 6), int16]) {
  @func_6721(%var_6723, %var_6724) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(1, 1008), int64], Tensor[(48), float32], Tensor[(4, 14, 6), int16]) */
}

def @func_51(%var_49: Tensor[(8, 9, 5), uint8], %var_50: Tensor[(8, 9, 5), uint8]) -> Tensor[(8, 9, 5), uint8] {
  %775 = fn (%var_32: Tensor[(8, 9, 5), uint8], %var_33: Tensor[(8, 9, 5), uint8]) -> Tensor[(8, 9, 5), uint8] {
    %771 = cast(%var_33, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
    %772 = shape_of(%var_32, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%var_32, dtype="uint8") /* ty=Tensor[(8, 9, 5), uint8] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    multiply(%773, %774) /* ty=Tensor[(8, 9, 5), uint8] */
  };
  %775(%var_49, %var_50) /* ty=Tensor[(8, 9, 5), uint8] */
}

def @func_5249(%var_5243: Tensor[(1320), float32]) -> (Tensor[(48), float32], Tensor[(88), float32], Tensor[(360), uint8], Tensor[(1320), float32]) {
  %776 = @func_5217() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) */;
  %777 = @func_3900() /* ty=Tensor[(88), float32] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(88), float32] */;
  %779 = cast(%777, dtype="float32") /* ty=Tensor[(88), float32] */;
  %780 = %776.1;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(48), float32] */;
  %782 = cast(%var_5243, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %783 = reshape(%779, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %784 = reshape(%781, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %785 = reshape(%782, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %786 = @func_1551(%783, %784, %785) /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(11, 8, 15), uint16]) */;
  %787 = cosh(%778) /* ty=Tensor[(88), float32] */;
  %788 = %786.0;
  (%780, %787, %788, %var_5243)
}

def @func_6149(%var_6144: Tensor[(6, 15, 3), float32], %var_6145: Tensor[(2, 16), float32], %var_6146: Tensor[(25200, 1), bool], %var_6147: Tensor[(63), float32], %var_6148: Tensor[(360), float32]) -> (Tensor[(2, 4, 4), float32], Tensor[(2, 16), float32], Tensor[(25200, 1), bool], Tensor[(252, 4), int64], Tensor[(96, 2), int8], Tensor[(32), float32], Tensor[(63, 360), float64], Tensor[(63), float32], Tensor[(3, 4, 2), bool], Tensor[(360), float32], Tensor[(48), float32], Tensor[(6, 15, 3), int32], Tensor[(1, 1008), float64]) {
  @func_6142(%var_6144, %var_6145, %var_6146, %var_6147, %var_6148) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(2, 16), float32], Tensor[(25200, 1), bool], Tensor[(252, 4), int64], Tensor[(96, 2), int8], Tensor[(32), float32], Tensor[(63, 360), float64], Tensor[(63), float32], Tensor[(3, 4, 2), bool], Tensor[(360), float32], Tensor[(48), float32], Tensor[(6, 15, 3), int32], Tensor[(1, 1008), float64]) */
}

def @func_3225(%var_3222: Tensor[(32), float32], %var_3223: Tensor[(14, 1800), bool], %var_3224: Tensor[(14, 1800), bool]) -> (Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) {
  %808 = fn (%var_3166: Tensor[(32), float32], %var_3175: Tensor[(14, 1800), bool], %var_3188: Tensor[(14, 1800), bool]) -> (Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) {
    %789 = cast(%var_3166, dtype="float32") /* ty=Tensor[(32), float32] */;
    %790 = reshape(%789, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
    %791 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
    %792 = %791.2;
    %793 = cast(%var_3175, dtype="int32") /* ty=Tensor[(14, 1800), int32] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(2), int32] */;
    %795 = cast(%792, dtype="int32") /* ty=Tensor[(14, 1800), int32] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %797 = cast(%var_3175, dtype="float64") /* ty=Tensor[(14, 1800), float64] */;
    %798 = cast(%var_3188, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
    %799 = shape_of(%var_3175, dtype="int32") /* ty=Tensor[(2), int32] */;
    %800 = cast(%var_3175, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %802 = power(%800, %801) /* ty=Tensor[(14, 1800), float32] */;
    %803 = cast(%802, dtype="float32") /* ty=Tensor[(14, 1800), float32] */;
    %804 = @func_1524(%790) /* ty=Tensor[(2, 4, 4), float32] */;
    %805 = multiply(%795, %796) /* ty=Tensor[(14, 1800), int32] */;
    %806 = sin(%797) /* ty=Tensor[(14, 1800), float64] */;
    %807 = asinh(%803) /* ty=Tensor[(14, 1800), float32] */;
    (%804, %var_3166, %805, %806, %807)
  };
  %808(%var_3222, %var_3223, %var_3224) /* ty=(Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(14, 1800), int32], Tensor[(14, 1800), float64], Tensor[(14, 1800), float32]) */
}

def @func_5987(%var_5985: Tensor[(14, 1800), bool]) -> Tensor[(14, 1800), uint32] {
  @func_5984(%var_5985) /* ty=Tensor[(14, 1800), uint32] */
}

def @func_6853() -> (Tensor[(1008), int64], Tensor[(48), float32]) {
  @func_6851() /* ty=(Tensor[(1008), int64], Tensor[(48), float32]) */
}

def @func_5799() -> (Tensor[(8, 4), float32],) {
  @func_5797() /* ty=(Tensor[(8, 4), float32],) */
}

def @func_5861(%var_5860: Tensor[(48), float32]) -> (Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) {
  %819 = fn (%var_5847: Tensor[(48), float32]) -> (Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) {
    %809 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
    %810 = reshape(%809, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %811 = @func_3727(%810) /* ty=(Tensor[(48), float32], Tensor[(360), uint8], Tensor[(192), int8], Tensor[(1008), int64]) */;
    %812 = @func_3086() /* ty=Tensor[(48), float32] */;
    %813 = cast(%var_5847, dtype="int16") /* ty=Tensor[(48), int16] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(1), int32] */;
    %815 = cast(%812, dtype="int16") /* ty=Tensor[(48), int16] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?), int16] */;
    %817 = %811.3;
    %818 = right_shift(%815, %816) /* ty=Tensor[(48), int16] */;
    (%817, meta[relay.Constant][63] /* ty=Tensor[(1, 1008), int64] */, %818)
  };
  %819(%var_5860) /* ty=(Tensor[(1008), int64], Tensor[(1, 1008), int64], Tensor[(48), int16]) */
}

def @func_4143(%var_4142: Tensor[(14, 15, 5), int8]) -> (Tensor[(14, 15, 5), int8],) {
  %823 = fn (%var_4137: Tensor[(14, 15, 5), int8]) -> (Tensor[(14, 15, 5), int8],) {
    %820 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(1, 15, 5), int8] */;
    %821 = cast(%var_4137, dtype="int8") /* ty=Tensor[(14, 15, 5), int8] */;
    %822 = right_shift(%820, %821) /* ty=Tensor[(14, 15, 5), int8] */;
    (%822,)
  };
  %823(%var_4142) /* ty=(Tensor[(14, 15, 5), int8],) */
}

def @func_318(%var_316: Tensor[(9, 8, 14), int64], %var_317: Tensor[(360), uint8]) -> (Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
  %834 = fn (%var_305: Tensor[(9, 8, 14), int64], %var_312: Tensor[(360), uint8]) -> (Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) {
    %824 = cast(meta[relay.Constant][65] /* ty=Tensor[(9, 8, 14), int64] */, dtype="int64") /* ty=Tensor[(9, 8, 14), int64] */;
    %825 = shape_of(%var_305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%var_305, dtype="int64") /* ty=Tensor[(9, 8, 14), int64] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %828 = cast(%var_312, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %829 = cast(%var_312, dtype="uint8") /* ty=Tensor[(360), uint8] */;
    %830 = reshape(%828, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %831 = reshape(%829, newshape=[8, 9, 5]) /* ty=Tensor[(8, 9, 5), uint8] */;
    %832 = maximum(%826, %827) /* ty=Tensor[(9, 8, 14), int64] */;
    %833 = @func_48(%830, %831) /* ty=Tensor[(8, 9, 5), uint8] */;
    (%832, %833, %var_312)
  };
  %834(%var_316, %var_317) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */
}

def @func_3440() -> (Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) {
  %841 = fn () -> (Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) {
    %835 = @func_2925() /* ty=(Tensor[(5, 4, 9), int16],) */;
    %836 = cast(meta[relay.Constant][66] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %837 = reshape(%836, newshape=[88]) /* ty=Tensor[(88), float32] */;
    %838 = @func_2692(%837) /* ty=(Tensor[(3, 16, 1), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(1320), float32], Tensor[(3, 16, 1), float64]) */;
    %839 = %835.0;
    %840 = %838.2;
    (%839, %840, meta[relay.Constant][66] /* ty=Tensor[(88), float32] */)
  };
  %841() /* ty=(Tensor[(5, 4, 9), int16], Tensor[(88), float32], Tensor[(88), float32]) */
}

def @func_4417() -> (Tensor[(32), float32],) {
  %842 = @func_4120() /* ty=(Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(32), float32], Tensor[(1008), int64], Tensor[(1008), int64]) */;
  %843 = %842.2;
  (%843,)
}

def @func_670(%var_669: Tensor[(1, 10, 14), int8]) -> (Tensor[(1, 10, 14), int8],) {
  %847 = fn (%var_660: Tensor[(1, 10, 14), int8]) -> (Tensor[(1, 10, 14), int8],) {
    %844 = cast(meta[relay.Constant][67] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %845 = cast(%var_660, dtype="int8") /* ty=Tensor[(1, 10, 14), int8] */;
    %846 = multiply(%844, %845) /* ty=Tensor[(1, 10, 14), int8] */;
    (%846,)
  };
  %847(%var_669) /* ty=(Tensor[(1, 10, 14), int8],) */
}

def @func_3151(%var_3123: Tensor[(5, 15, 3), int32], %var_3124: Tensor[(5, 15, 3), int32]) -> (Tensor[(48), float32], Tensor[(5, 15, 3), bool]) {
  %848 = cast(%var_3124, dtype="int32") /* ty=Tensor[(5, 15, 3), int32] */;
  %849 = shape_of(%var_3123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_3123, dtype="int32") /* ty=Tensor[(5, 15, 3), int32] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %852 = minimum(%850, %851) /* ty=Tensor[(5, 15, 3), int32] */;
  %853 = cast(%var_3123, dtype="bool") /* ty=Tensor[(5, 15, 3), bool] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="bool") /* ty=Tensor[(5, 15, 3), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %857 = @func_3086() /* ty=Tensor[(48), float32] */;
  %858 = greater_equal(%855, %856) /* ty=Tensor[(5, 15, 3), bool] */;
  (%857, %858)
}

def @func_6541(%var_6539: Tensor[(15, 14, 6), float32], %var_6540: Tensor[(15, 14, 6), float32]) -> Tensor[(15, 14, 6), float32] {
  @func_6537(%var_6539, %var_6540) /* ty=Tensor[(15, 14, 6), float32] */
}

def @func_176(%var_151: Tensor[(15, 10, 12), float32]) -> (Tensor[(15, 10, 12), uint16], Tensor[(15, 10, 12), float32], Tensor[(15, 10, 12), int64]) {
  %859 = cast(%var_151, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %860 = rsqrt(%859) /* ty=Tensor[(15, 10, 12), float32] */;
  %861 = cast(%860, dtype="float64") /* ty=Tensor[(15, 10, 12), float64] */;
  %862 = atanh(%861) /* ty=Tensor[(15, 10, 12), float64] */;
  %863 = cast(%862, dtype="uint8") /* ty=Tensor[(15, 10, 12), uint8] */;
  %864 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%860, dtype="uint8") /* ty=Tensor[(15, 10, 12), uint8] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %867 = bitwise_xor(%865, %866) /* ty=Tensor[(15, 10, 12), uint8] */;
  %868 = cast(%867, dtype="uint16") /* ty=Tensor[(15, 10, 12), uint16] */;
  %869 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%862, dtype="uint16") /* ty=Tensor[(15, 10, 12), uint16] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %872 = cast(%860, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %873 = cast(%867, dtype="int64") /* ty=Tensor[(15, 10, 12), int64] */;
  %874 = shape_of(%var_151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_151, dtype="int64") /* ty=Tensor[(15, 10, 12), int64] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %877 = maximum(%870, %871) /* ty=Tensor[(15, 10, 12), uint16] */;
  %878 = acosh(%872) /* ty=Tensor[(15, 10, 12), float32] */;
  %879 = add(%875, %876) /* ty=Tensor[(15, 10, 12), int64] */;
  (%877, %878, %879)
}

def @func_1340(%var_1336: Tensor[(14, 6, 12), int32]) -> (Tensor[(14, 6, 12), int32], Tensor[(2, 3, 8), float32], Tensor[(48), float32], Tensor[(1800), float32], Tensor[(14, 6, 12), bool]) {
  %880 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %881 = cast(meta[relay.Constant][68] /* ty=Tensor[(14, 6, 12), int32] */, dtype="int32") /* ty=Tensor[(14, 6, 12), int32] */;
  %882 = cast(meta[relay.Constant][69] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %883 = cast(meta[relay.Constant][70] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %884 = reshape(%882, newshape=[2, 3, 8]) /* ty=Tensor[(2, 3, 8), float32] */;
  %885 = reshape(%883, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), float32] */;
  %886 = @func_1021(%884, %885) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(90, 3), float32], Tensor[(360), uint8], Tensor[(1800, 1), float32], Tensor[(2, 3, 8), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(2, 3, 8), float32], Tensor[(360), uint8]) */;
  %887 = cast(%var_1336, dtype="bool") /* ty=Tensor[(14, 6, 12), bool] */;
  %888 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(14, 6, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(meta[relay.Constant][68] /* ty=Tensor[(14, 6, 12), int32] */, dtype="bool") /* ty=Tensor[(14, 6, 12), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = logical_xor(%880, %881) /* ty=Tensor[(14, 6, 12), int32] */;
  %892 = %886.4;
  %893 = greater_equal(%889, %890) /* ty=Tensor[(14, 6, 12), bool] */;
  (%891, %892, meta[relay.Constant][69] /* ty=Tensor[(48), float32] */, meta[relay.Constant][70] /* ty=Tensor[(1800), float32] */, %893)
}

def @func_5550(%var_5483: Tensor[(360), float32], %var_5542: Tensor[(3, 8, 15), float32]) -> (Tensor[(48), float32], Tensor[(32), float32], Tensor[(360), float32], Tensor[(360), uint8], Tensor[(1008), int64], Tensor[(3, 8, 15), int16]) {
  %894 = @func_4600() /* ty=(Tensor[(32), float32], Tensor[(3, 4, 2), bool], Tensor[(24), bool]) */;
  %895 = cast(meta[relay.Constant][71] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %896 = cast(%var_5483, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %897 = reshape(%895, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
  %898 = reshape(%896, newshape=[360]) /* ty=Tensor[(360), uint8] */;
  %899 = @func_315(%897, %898) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
  %900 = cast(%var_5483, dtype="float32") /* ty=Tensor[(360), float32] */;
  %901 = reshape(%900, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %902 = @func_1695(%901) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %903 = %902.0;
  %904 = cast(%var_5542, dtype="int16") /* ty=Tensor[(3, 8, 15), int16] */;
  %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%903, dtype="int16") /* ty=Tensor[(3, 8, 15), int16] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %908 = @func_3086() /* ty=Tensor[(48), float32] */;
  %909 = %894.0;
  %910 = %899.2;
  %911 = add(%906, %907) /* ty=Tensor[(3, 8, 15), int16] */;
  (%908, %909, %var_5483, %910, meta[relay.Constant][71] /* ty=Tensor[(1008), int64] */, %911)
}

def @func_6763() -> (Tensor[(88), float32],) {
  @func_6761() /* ty=(Tensor[(88), float32],) */
}

def @func_3882(%var_3878: Tensor[(192), int8], %var_3879: Tensor[(1008), int64], %var_3880: Tensor[(12, 48), uint32], %var_3881: Tensor[(112), float32]) -> (Tensor[(48), float32], Tensor[(252, 4), int64], Tensor[(192), int8], Tensor[(1008), int64], Tensor[(12, 8, 6), float64], Tensor[(12, 48), int64], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(14, 2, 4), float32], Tensor[(112), float32]) {
  @func_3876(%var_3878, %var_3879, %var_3880, %var_3881) /* ty=(Tensor[(48), float32], Tensor[(252, 4), int64], Tensor[(192), int8], Tensor[(1008), int64], Tensor[(12, 8, 6), float64], Tensor[(12, 48), int64], Tensor[(3, 4, 2), bool], Tensor[(24), bool], Tensor[(14, 2, 4), float32], Tensor[(112), float32]) */
}

def @func_3915(%var_3903: Tensor[(6, 3, 15), float64]) -> Tensor[(6, 3, 15), float64] {
  %912 = cast(%var_3903, dtype="float64") /* ty=Tensor[(6, 3, 15), float64] */;
  acos(%912) /* ty=Tensor[(6, 3, 15), float64] */
}

def @func_3088() -> Tensor[(48), float32] {
  @func_3086() /* ty=Tensor[(48), float32] */
}

def @func_6851() -> (Tensor[(1008), int64], Tensor[(48), float32]) {
  %913 = @func_6600() /* ty=(Tensor[(360), uint8], Tensor[(1260), float32], Tensor[(48), float32], Tensor[(36), uint32], Tensor[(15, 14, 6), float32], Tensor[(1008), int64], Tensor[(1800), float32]) */;
  %914 = %913.5;
  %915 = @func_4064() /* ty=Tensor[(48), float32] */;
  (%914, %915)
}

def @func_4458() -> Tensor[(32), float32] {
  @func_4456() /* ty=Tensor[(32), float32] */
}

def @func_6804(%var_6802: Tensor[(16, 9, 3), float32], %var_6803: Tensor[(16, 9, 3), float32]) -> Tensor[(16, 9, 3), bool] {
  @func_6800(%var_6802, %var_6803) /* ty=Tensor[(16, 9, 3), bool] */
}

def @func_7264() -> (Tensor[(48), float32],) {
  %916 = @func_3940() /* ty=(Tensor[(48), float32],) */;
  %917 = %916.0;
  (%917,)
}

def @func_6247() -> Tensor[(32), float32] {
  @func_6245() /* ty=Tensor[(32), float32] */
}

def @func_5219() -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) {
  @func_5217() /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(2, 4, 4), float32], Tensor[(48), float32]) */
}

def @func_2722(%var_2702: Tensor[(63, 1), float32]) -> (Tensor[(7, 3, 9), float32], Tensor[(189), float32], Tensor[(63, 360), float64]) {
  %918 = cast(%var_2702, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %919 = cast(meta[relay.Constant][72] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %920 = reshape(%918, newshape=[7, 1, 9]) /* ty=Tensor[(7, 1, 9), float32] */;
  %921 = reshape(%919, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), float32] */;
  %922 = @func_1664(%920, %921) /* ty=(Tensor[(7, 3, 9), float32],) */;
  %923 = @func_2660() /* ty=(Tensor[(360), uint8], Tensor[(48), float32], Tensor[(14, 1800), bool]) */;
  %924 = %923.0;
  %925 = cast(%924, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %926 = cast(%var_2702, dtype="uint32") /* ty=Tensor[(63, 1), uint32] */;
  %927 = bitwise_xor(%925, %926) /* ty=Tensor[(63, 360), uint32] */;
  %928 = cast(%927, dtype="float64") /* ty=Tensor[(63, 360), float64] */;
  %929 = %922.0;
  %930 = sigmoid(%928) /* ty=Tensor[(63, 360), float64] */;
  (%929, meta[relay.Constant][72] /* ty=Tensor[(189), float32] */, %930)
}

def @func_1667(%var_1665: Tensor[(7, 1, 9), float32], %var_1666: Tensor[(7, 3, 9), float32]) -> (Tensor[(7, 3, 9), float32],) {
  %934 = fn (%var_1648: Tensor[(7, 1, 9), float32], %var_1649: Tensor[(7, 3, 9), float32]) -> (Tensor[(7, 3, 9), float32],) {
    %931 = cast(%var_1648, dtype="float32") /* ty=Tensor[(7, 1, 9), float32] */;
    %932 = cast(%var_1649, dtype="float32") /* ty=Tensor[(7, 3, 9), float32] */;
    %933 = subtract(%931, %932) /* ty=Tensor[(7, 3, 9), float32] */;
    (%933,)
  };
  %934(%var_1665, %var_1666) /* ty=(Tensor[(7, 3, 9), float32],) */
}

def @func_7375(%var_7374: Tensor[(63), float32]) -> (Tensor[(8, 4), float32], Tensor[(2, 4, 4), float32], Tensor[(7, 3, 9), float32], Tensor[(63), float32], Tensor[(189), float32]) {
  %945 = fn (%var_7364: Tensor[(63), float32]) -> (Tensor[(8, 4), float32], Tensor[(2, 4, 4), float32], Tensor[(7, 3, 9), float32], Tensor[(63), float32], Tensor[(189), float32]) {
    %935 = @func_6868() /* ty=Tensor[(8, 4), float32] */;
    %936 = cast(%935, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
    %937 = reshape(%936, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), float32] */;
    %938 = cast(%var_7364, dtype="float32") /* ty=Tensor[(63), float32] */;
    %939 = cast(meta[relay.Constant][73] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %940 = reshape(%938, newshape=[7, 1, 9]) /* ty=Tensor[(7, 1, 9), float32] */;
    %941 = reshape(%939, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), float32] */;
    %942 = @func_1664(%940, %941) /* ty=(Tensor[(7, 3, 9), float32],) */;
    %943 = @func_1524(%937) /* ty=Tensor[(2, 4, 4), float32] */;
    %944 = %942.0;
    (%935, %943, %944, %var_7364, meta[relay.Constant][73] /* ty=Tensor[(189), float32] */)
  };
  %945(%var_7374) /* ty=(Tensor[(8, 4), float32], Tensor[(2, 4, 4), float32], Tensor[(7, 3, 9), float32], Tensor[(63), float32], Tensor[(189), float32]) */
}

def @func_3006(%var_3001: Tensor[(3, 4, 2), bool]) -> Tensor[(3, 4, 2), bool] {
  %946 = cast(meta[relay.Constant][74] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %947 = shape_of(%var_3001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%var_3001, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%948, %949) /* ty=Tensor[(3, 4, 2), bool] */
}

def @func_4906(%var_4905: Tensor[(225), int32]) -> (Tensor[(6, 6, 1), bool], Tensor[(48), float32], Tensor[(225), int32], Tensor[(48), float32], Tensor[(2496), int16]) {
  %965 = fn (%var_4893: Tensor[(225), int32]) -> (Tensor[(6, 6, 1), bool], Tensor[(48), float32], Tensor[(225), int32], Tensor[(48), float32], Tensor[(2496), int16]) {
    %950 = cast(7.78012f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %951 = cast(meta[relay.Constant][75] /* ty=Tensor[(6, 6, 1), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 1), bool] */;
    %952 = cast(%var_4893, dtype="int32") /* ty=Tensor[(225), int32] */;
    %953 = cast(%var_4893, dtype="int32") /* ty=Tensor[(225), int32] */;
    %954 = reshape(%952, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
    %955 = reshape(%953, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int32] */;
    %956 = @func_3151(%954, %955) /* ty=(Tensor[(48), float32], Tensor[(5, 15, 3), bool]) */;
    %957 = cast(meta[relay.Constant][76] /* ty=Tensor[(2496), int16] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
    %958 = cast(meta[relay.Constant][76] /* ty=Tensor[(2496), int16] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
    %959 = reshape(%957, newshape=[12, 16, 13]) /* ty=Tensor[(12, 16, 13), int16] */;
    %960 = reshape(%958, newshape=[12, 16, 13]) /* ty=Tensor[(12, 16, 13), int16] */;
    %961 = @func_4838(%959, %960) /* ty=(Tensor[(8, 9, 5), uint8], Tensor[(360), uint8], Tensor[(32), float32], Tensor[(12, 16, 13), bool], Tensor[(48), float32]) */;
    %962 = less_equal(%950, %951) /* ty=Tensor[(6, 6, 1), bool] */;
    %963 = %956.0;
    %964 = %961.4;
    (%962, %963, %var_4893, %964, meta[relay.Constant][76] /* ty=Tensor[(2496), int16] */)
  };
  %965(%var_4905) /* ty=(Tensor[(6, 6, 1), bool], Tensor[(48), float32], Tensor[(225), int32], Tensor[(48), float32], Tensor[(2496), int16]) */
}

def @func_5328() -> (Tensor[(8, 4), float32],) {
  %968 = fn () -> (Tensor[(8, 4), float32],) {
    %966 = @func_4656() /* ty=(Tensor[(360), uint8], Tensor[(8, 4), float32], Tensor[(2, 4, 4), float64], Tensor[(4, 4, 15), float32]) */;
    %967 = %966.1;
    (%967,)
  };
  %968() /* ty=(Tensor[(8, 4), float32],) */
}

def @func_6487(%var_6485: Tensor[(1800), float32]) -> (Tensor[(4, 4, 15), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(88), float32]) {
  @func_6484(%var_6485) /* ty=(Tensor[(4, 4, 15), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1800), float32], Tensor[(88), float32], Tensor[(88), float32]) */
}

def @func_7300() -> (Tensor[(88), float32],) {
  %969 = @func_4193() /* ty=(Tensor[(88), float32], Tensor[(4, 4, 15), float32], Tensor[(240), float32]) */;
  %970 = %969.0;
  (%970,)
}

def @func_7302() -> (Tensor[(88), float32],) {
  @func_7300() /* ty=(Tensor[(88), float32],) */
}

def @func_6870() -> Tensor[(8, 4), float32] {
  @func_6868() /* ty=Tensor[(8, 4), float32] */
}

def @func_3807(%var_3805: Tensor[(9, 4), uint32], %var_3806: Tensor[(360), uint8]) -> (Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) {
  @func_3803(%var_3805, %var_3806) /* ty=(Tensor[(48), float32], Tensor[(48), float32], Tensor[(225), int32], Tensor[(1, 360), uint8], Tensor[(9, 4), uint32], Tensor[(144), uint32], Tensor[(140), int8], Tensor[(360), uint8]) */
}

def @func_5168() -> (Tensor[(48), float32],) {
  @func_5166() /* ty=(Tensor[(48), float32],) */
}

def @func_6537(%var_6521: Tensor[(15, 14, 6), float32], %var_6522: Tensor[(15, 14, 6), float32]) -> Tensor[(15, 14, 6), float32] {
  %971 = cast(%var_6522, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %972 = shape_of(%var_6521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%var_6521, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%973, %974) /* ty=Tensor[(15, 14, 6), float32] */
}

def @func_842(%var_838: Tensor[(9, 4, 1), uint32], %var_839: Tensor[(9, 4, 4), uint32], %var_840: Tensor[(140), int8], %var_841: Tensor[(1, 360), uint8]) -> (Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) {
  %990 = fn (%var_785: Tensor[(9, 4, 1), uint32], %var_786: Tensor[(9, 4, 4), uint32], %var_793: Tensor[(140), int8], %var_803: Tensor[(1, 360), uint8]) -> (Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) {
    %975 = cast(%var_785, dtype="uint32") /* ty=Tensor[(9, 4, 1), uint32] */;
    %976 = cast(%var_786, dtype="uint32") /* ty=Tensor[(9, 4, 4), uint32] */;
    %977 = cast(%var_793, dtype="int8") /* ty=Tensor[(140), int8] */;
    %978 = reshape(%977, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
    %979 = @func_668(%978) /* ty=(Tensor[(1, 10, 14), int8],) */;
    %980 = cast(meta[relay.Constant][77] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %981 = cast(%var_803, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
    %982 = reshape(%980, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), int64] */;
    %983 = reshape(%981, newshape=[360]) /* ty=Tensor[(360), uint8] */;
    %984 = @func_315(%982, %983) /* ty=(Tensor[(9, 8, 14), int64], Tensor[(8, 9, 5), uint8], Tensor[(360), uint8]) */;
    %985 = %984.0;
    %986 = cast(%985, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
    %987 = minimum(%975, %976) /* ty=Tensor[(9, 4, 4), uint32] */;
    %988 = %979.0;
    %989 = sin(%986) /* ty=Tensor[(9, 8, 14), float64] */;
    (%987, %988, %var_793, meta[relay.Constant][77] /* ty=Tensor[(1008), int64] */, %var_803, %989)
  };
  %990(%var_838, %var_839, %var_840, %var_841) /* ty=(Tensor[(9, 4, 4), uint32], Tensor[(1, 10, 14), int8], Tensor[(140), int8], Tensor[(1008), int64], Tensor[(1, 360), uint8], Tensor[(9, 8, 14), float64]) */
}

def @func_2046(%var_2044: Tensor[(12, 8, 6), uint32], %var_2045: Tensor[(12, 8, 6), uint32]) -> Tensor[(12, 8, 6), float64] {
  %997 = fn (%var_2016: Tensor[(12, 8, 6), uint32], %var_2017: Tensor[(12, 8, 6), uint32]) -> Tensor[(12, 8, 6), float64] {
    %991 = cast(%var_2017, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
    %992 = shape_of(%var_2016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%var_2016, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %995 = equal(%993, %994) /* ty=Tensor[(12, 8, 6), bool] */;
    %996 = cast(%995, dtype="float64") /* ty=Tensor[(12, 8, 6), float64] */;
    tan(%996) /* ty=Tensor[(12, 8, 6), float64] */
  };
  %997(%var_2044, %var_2045) /* ty=Tensor[(12, 8, 6), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen26/build/output.py:2324: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen26/build/output.py", line 2329, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(588) tvmgen_default_fused_log_kernel0(float* __restrict__ T_log, float* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = __logf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

