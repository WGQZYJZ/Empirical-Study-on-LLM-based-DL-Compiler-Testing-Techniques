==========mod==========
#[version = "0.0.5"]
def @func_7518() -> Tensor[(14, 7, 9), bool] {
  %0 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %0.1
}

def @func_11595(%var_11576: Tensor[(882), bool]) -> (Tensor[(882), int64], Tensor[(14, 7, 9), bool]) {
  %1 = @func_4850() /* ty=(Tensor[(882), bool],) */;
  %2 = %1.0;
  %3 = cast(%var_11576, dtype="int64") /* ty=Tensor[(882), int64] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %5 = cast(%2, dtype="int64") /* ty=Tensor[(882), int64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?), int64] */;
  %7 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %8 = bitwise_xor(%5, %6) /* ty=Tensor[(882), int64] */;
  %9 = %7.0;
  (%8, %9)
}

def @func_12319() -> (Tensor[(11, 12, 4), float32],) {
  %10 = @func_11652() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_7906() -> (Tensor[(14, 7, 9), bool],) {
  %12 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %13 = %12.0;
  (%13,)
}

def @func_9957() -> (Tensor[(11, 12, 4), float32],) {
  %14 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %15 = %14.4;
  (%15,)
}

def @func_7660(%var_7628: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool], Tensor[(728), float64], Tensor[(13), float64], Tensor[(728), float64]) {
  %16 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %17 = %16.0;
  %18 = cast(%var_7628, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %25 = %22.0;
  %26 = cast(%25, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %27 = reshape(%23, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), float64] */;
  %28 = reshape(%24, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %29 = reshape(%26, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %30 = @func_5566(%27, %28, %29) /* ty=(Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) */;
  %31 = less(%20, %21) /* ty=Tensor[(11, 12, 4), bool] */;
  %32 = %30.1;
  (%31, %25, %32, meta[relay.Constant][0] /* ty=Tensor[(13), float64] */, meta[relay.Constant][1] /* ty=Tensor[(728), float64] */)
}

def @func_11492(%var_11485: Tensor[(882), bool]) -> (Tensor[(882), int32],) {
  %33 = @func_10471() /* ty=Tensor[(882), bool] */;
  %34 = cast(%var_11485, dtype="int32") /* ty=Tensor[(882), int32] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(1), int32] */;
  %36 = cast(%33, dtype="int32") /* ty=Tensor[(882), int32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?), int32] */;
  %38 = bitwise_and(%36, %37) /* ty=Tensor[(882), int32] */;
  (%38,)
}

def @func_7182(%var_7149: Tensor[(672), int32]) -> (Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) {
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %42 = cast(%var_7149, dtype="int32") /* ty=Tensor[(672), int32] */;
  %43 = reshape(%42, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
  %44 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %45 = tan(%39) /* ty=Tensor[(10, 6, 5), float32] */;
  %46 = sin(%40) /* ty=Tensor[(10, 6, 5), float64] */;
  %47 = log10(%41) /* ty=Tensor[(10, 6, 5), float32] */;
  %48 = @func_2832(%43) /* ty=Tensor[(6, 8, 14), bool] */;
  %49 = %44.0;
  (%45, %46, %47, %48, %var_7149, %49)
}

def @func_11813() -> (Tensor[(11, 12, 4), float32], Tensor[(882), bool], Tensor[(11, 12, 4), float32]) {
  %50 = @func_11760() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(882), bool]) */;
  %51 = @func_4961() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %52 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  %53 = %50.1;
  %54 = %51.0;
  (%52, %53, %54)
}

def @func_12636() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32]) {
  %55 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %56 = @func_11454() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) */;
  %57 = @func_8980() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) */;
  %58 = %55.0;
  %59 = %56.2;
  %60 = %57.0;
  (%58, %59, %60)
}

def @func_5273() -> (Tensor[(14, 7, 9), bool],) {
  %61 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %62 = %61.0;
  (%62,)
}

def @func_9693(%var_9681: Tensor[(1470), float32]) -> (Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(312, 2), uint64], Tensor[(1470), float32], Tensor[(2, 336), float64]) {
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(312, 2), uint64] */, dtype="uint64") /* ty=Tensor[(312, 2), uint64] */;
  %64 = cast(%var_9681, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 336), float64] */, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %66 = reshape(%63, newshape=[4, 12, 13]) /* ty=Tensor[(4, 12, 13), uint64] */;
  %67 = reshape(%64, newshape=[7, 210]) /* ty=Tensor[(7, 210), float32] */;
  %68 = reshape(%65, newshape=[168, 4]) /* ty=Tensor[(168, 4), float64] */;
  %69 = @func_3994(%66, %67, %68) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) */;
  %70 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %71 = %69.3;
  (%70, %71, meta[relay.Constant][3] /* ty=Tensor[(312, 2), uint64] */, %var_9681, meta[relay.Constant][4] /* ty=Tensor[(2, 336), float64] */)
}

def @func_9355(%var_9293: Tensor[(39, 13), float64], %var_9335: Tensor[(39, 13), float64]) -> (Tensor[(39, 13), float64], Tensor[(39, 13), uint64], Tensor[(1470), float32]) {
  %72 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %73 = %72.2;
  %74 = cast(%var_9293, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(%73, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %78 = cast(%73, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %79 = shape_of(%var_9293, dtype="int32") /* ty=Tensor[(2), int32] */;
  %80 = cast(%var_9293, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %82 = multiply(%80, %81) /* ty=Tensor[(39, 13), float64] */;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(39, 13), float32] */;
  %84 = rsqrt(%83) /* ty=Tensor[(39, 13), float32] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %86 = acosh(%85) /* ty=Tensor[(39, 13), float64] */;
  %87 = cast(%var_9335, dtype="uint64") /* ty=Tensor[(39, 13), uint64] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(2), int32] */;
  %89 = cast(%86, dtype="uint64") /* ty=Tensor[(39, 13), uint64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %91 = @func_8863() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */;
  %92 = mod(%76, %77) /* ty=Tensor[(39, 13), float64] */;
  %93 = maximum(%89, %90) /* ty=Tensor[(39, 13), uint64] */;
  %94 = %91.2;
  (%92, %93, %94)
}

def @func_7088(%var_7070: Tensor[(3, 5, 6), float64], %var_7076: Tensor[(507), int64]) -> (Tensor[(3, 5, 6), float64], Tensor[(882), int16], Tensor[(507), int64]) {
  %95 = cast(%var_7070, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
  %96 = cast(%var_7076, dtype="int64") /* ty=Tensor[(507), int64] */;
  %97 = cast(%var_7076, dtype="int64") /* ty=Tensor[(507), int64] */;
  %98 = cast(%var_7076, dtype="bool") /* ty=Tensor[(507), bool] */;
  %99 = reshape(%96, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %100 = reshape(%97, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %101 = reshape(%98, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
  %102 = @func_2491(%99, %100, %101) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %103 = atanh(%95) /* ty=Tensor[(3, 5, 6), float64] */;
  %104 = %102.1;
  (%103, %104, %var_7076)
}

def @func_2145(%var_2140: Tensor[(1, 8, 12), float64]) -> Tensor[(1, 8, 12), float64] {
  %105 = cast(%var_2140, dtype="float64") /* ty=Tensor[(1, 8, 12), float64] */;
  acosh(%105) /* ty=Tensor[(1, 8, 12), float64] */
}

def @func_10471() -> Tensor[(882), bool] {
  %106 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %106.1
}

def @func_10241(%var_10225: Tensor[(48, 2), float64]) -> Tensor[(48, 2), bool] {
  %107 = @func_9920() /* ty=(Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %108 = %107.2;
  %109 = cast(%var_10225, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(2), int32] */;
  %111 = cast(%108, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%111, %112) /* ty=Tensor[(48, 2), bool] */
}

def @func_3994(%var_3918: Tensor[(4, 12, 13), uint64], %var_3956: Tensor[(7, 210), float32], %var_3960: Tensor[(168, 4), float64]) -> (Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) {
  %113 = cast(%var_3918, dtype="uint64") /* ty=Tensor[(4, 12, 13), uint64] */;
  %114 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="uint64") /* ty=Tensor[(4, 12, 13), uint64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %117 = logical_xor(%115, %116) /* ty=Tensor[(4, 12, 13), uint64] */;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  %119 = cast(%var_3956, dtype="float32") /* ty=Tensor[(7, 210), float32] */;
  %120 = reshape(%119, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %121 = cast(%var_3960, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
  %122 = cast(%var_3960, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
  %123 = reshape(%121, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %124 = reshape(%122, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %125 = sqrt(%118) /* ty=Tensor[(4, 12, 13), float64] */;
  %126 = @func_3486(%120) /* ty=Tensor[(14, 7, 15), float32] */;
  %127 = @func_2596(%123, %124) /* ty=Tensor[(7, 12, 8), float64] */;
  (%125, %126, %var_3956, %127, %var_3960)
}

def @func_9260() -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), float32]) {
  %128 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %129 = @func_6964() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) */;
  %130 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %133 = %128.0;
  %134 = %129.2;
  %135 = cosh(%132) /* ty=Tensor[(14, 7, 9), float32] */;
  (%133, %134, %135)
}

def @func_12065() -> (Tensor[(11, 12, 4), float32],) {
  %136 = @func_11409() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %137 = %136.0;
  (%137,)
}

def @func_12128() -> (Tensor[(11, 12, 4), float32],) {
  %138 = @func_10373() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %139 = %138.0;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %141 = log2(%140) /* ty=Tensor[(11, 12, 4), float32] */;
  (%141,)
}

def @func_4873() -> (Tensor[(14, 7, 9), bool],) {
  %142 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %143 = %142.3;
  (%143,)
}

def @func_2596(%var_2561: Tensor[(7, 12, 8), float64], %var_2571: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %144 = cast(%var_2561, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %145 = atan(%144) /* ty=Tensor[(7, 12, 8), float64] */;
  %146 = cast(%var_2571, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %147 = shape_of(%var_2561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_2561, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = equal(%148, %149) /* ty=Tensor[(7, 12, 8), bool] */;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %152 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%145, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%153, %154) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_6704() -> (Tensor[(882), bool],) {
  %155 = @func_4850() /* ty=(Tensor[(882), bool],) */;
  %156 = %155.0;
  (%156,)
}

def @func_2380(%var_2362: Tensor[(13, 8, 7), float64], %var_2370: Tensor[(225), int8]) -> (Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) {
  %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 7), float64] */;
  %158 = shape_of(%var_2362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_2362, dtype="float64") /* ty=Tensor[(13, 8, 7), float64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %161 = cast(%var_2370, dtype="int8") /* ty=Tensor[(225), int8] */;
  %162 = reshape(%161, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
  %163 = subtract(%159, %160) /* ty=Tensor[(13, 8, 7), float64] */;
  %164 = @func_517(%162) /* ty=Tensor[(5, 15, 3), int8] */;
  (%163, %164, %var_2370)
}

def @func_6865() -> Tensor[(39, 13), float64] {
  %165 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %165.2
}

def @func_6964() -> (Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) {
  %166 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %167 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(882), float32] */;
  %170 = %166.0;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %172 = reshape(%171, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %173 = @func_6123(%172) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %174 = exp(%169) /* ty=Tensor[(882), float32] */;
  %175 = %173.0;
  (%170, %174, %175)
}

def @func_11097() -> (Tensor[(225), int8],) {
  %176 = @func_8745() /* ty=(Tensor[(225), int8],) */;
  %177 = %176.0;
  (%177,)
}

def @func_5215(%var_5209: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) {
  %178 = cast(meta[relay.Constant][7] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %179 = reshape(%178, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
  %180 = @func_1137(%179) /* ty=(Tensor[(4, 5, 11), float64],) */;
  %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %182 = cast(%var_5209, dtype="bool") /* ty=Tensor[(882), bool] */;
  %183 = reshape(%181, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %184 = reshape(%182, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %185 = @func_2780(%183, %184) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %186 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %187 = %180.0;
  %188 = %185.0;
  (%186, %187, meta[relay.Constant][7] /* ty=Tensor[(220), float64] */, %188, meta[relay.Constant][8] /* ty=Tensor[(700), float32] */, %var_5209)
}

def @func_4535(%var_4449: Tensor[(728), float64], %var_4458: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) {
  %189 = cast(%var_4458, dtype="bool") /* ty=Tensor[(882), bool] */;
  %190 = reshape(%189, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %191 = @func_1460(%190) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %192 = %191.0;
  %193 = cast(%var_4449, dtype="float64") /* ty=Tensor[(728), float64] */;
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %195 = reshape(%193, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %196 = reshape(%194, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %197 = @func_2380(%195, %196) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %198 = %197.2;
  %199 = cast(%192, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %200 = cast(%198, dtype="float32") /* ty=Tensor[(225), float32] */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %202 = cast(%var_4458, dtype="bool") /* ty=Tensor[(882), bool] */;
  %203 = reshape(%201, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %204 = reshape(%202, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %205 = @func_2780(%203, %204) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %206 = cast(%192, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
  %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(225), int8] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %208 = floor_mod(%206, %207) /* ty=Tensor[(2, 15, 225), float64] */;
  %209 = cast(%208, dtype="bool") /* ty=Tensor[(2, 15, 225), bool] */;
  %210 = cast(%192, dtype="bool") /* ty=Tensor[(2, 15, 1), bool] */;
  %211 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %212 = floor_divide(%199, %200) /* ty=Tensor[(2, 15, 225), float32] */;
  %213 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %214 = %205.0;
  %215 = less_equal(%209, %210) /* ty=Tensor[(2, 15, 225), bool] */;
  (%211, %var_4449, %var_4458, %212, %213, %214, meta[relay.Constant][10] /* ty=Tensor[(700), float32] */, %215)
}

def @func_598(%var_558: Tensor[(225), int8]) -> (Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) {
  %216 = cast(%var_558, dtype="int8") /* ty=Tensor[(225), int8] */;
  %217 = reshape(%216, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
  %218 = cast(%var_558, dtype="int8") /* ty=Tensor[(225), int8] */;
  %219 = reshape(%218, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
  %220 = @func_517(%219) /* ty=Tensor[(5, 15, 3), int8] */;
  %221 = cast(%220, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %222 = reshape(%221, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
  %223 = @func_517(%222) /* ty=Tensor[(5, 15, 3), int8] */;
  %224 = cast(%223, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %225 = reshape(%224, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
  %226 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
  %227 = acosh(%226) /* ty=Tensor[(15, 15, 2), float64] */;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(15, 15, 2), float32] */;
  %229 = asinh(%228) /* ty=Tensor[(15, 15, 2), float32] */;
  %230 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %234 = @func_517(%217) /* ty=Tensor[(5, 15, 3), int8] */;
  %235 = @func_517(%225) /* ty=Tensor[(5, 15, 3), int8] */;
  %236 = floor_divide(%232, %233) /* ty=Tensor[(15, 15, 2), float64] */;
  (%234, %var_558, %220, %223, %235, %236)
}

def @func_10782() -> (Tensor[(11, 12, 4), float32],) {
  %237 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  (%237,)
}

def @func_12039() -> (Tensor[(14, 7, 9), float32],) {
  %238 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %239 = %238.0;
  (%239,)
}

def @func_9920() -> (Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) {
  %240 = @func_7287() /* ty=(Tensor[(882), float64],) */;
  %241 = %240.0;
  %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(882), float64] */, dtype="int16") /* ty=Tensor[(882), int16] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="int16") /* ty=Tensor[(882), int16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), int16] */;
  %246 = logical_xor(%244, %245) /* ty=Tensor[(882), int16] */;
  %247 = cast(meta[relay.Constant][12] /* ty=Tensor[(882), float64] */, dtype="float32") /* ty=Tensor[(882), float32] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(1), int32] */;
  %249 = cast(%246, dtype="float32") /* ty=Tensor[(882), float32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?), float32] */;
  %251 = cast(meta[relay.Constant][13] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %252 = reshape(%251, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %253 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %254 = @func_9408() /* ty=(Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) */;
  %255 = floor_mod(%249, %250) /* ty=Tensor[(882), float32] */;
  %256 = @func_2145(%252) /* ty=Tensor[(1, 8, 12), float64] */;
  %257 = @func_6771() /* ty=Tensor[(882), bool] */;
  %258 = %253.1;
  %259 = %254.2;
  (%255, %256, meta[relay.Constant][13] /* ty=Tensor[(48, 2), float64] */, %257, %258, %259)
}

def @func_4727() -> Tensor[(11, 12, 4), float32] {
  @func_4372() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_11532() -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(39, 13), float64], Tensor[(14, 7, 9), float32]) {
  %260 = @func_7287() /* ty=(Tensor[(882), float64],) */;
  %261 = @func_10782() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %262 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %263 = %260.0;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(882), float64] */;
  %265 = reshape(%264, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %266 = @func_6038(%265) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
  %267 = %261.0;
  %268 = %262.0;
  %269 = %266.0;
  (%263, %267, %268, %269)
}

def @func_6473() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %270 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %273 = reshape(%272, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %274 = @func_6123(%273) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %275 = %274.0;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %277 = exp(%276) /* ty=Tensor[(11, 12, 4), float32] */;
  %278 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  (%271, %277, %278)
}

def @func_1137(%var_1119: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64],) {
  %279 = cast(%var_1119, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
  %280 = atan(%279) /* ty=Tensor[(4, 5, 11), float64] */;
  (%280,)
}

def @func_11752() -> (Tensor[(11, 12, 4), float32],) {
  %281 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  (%281,)
}

def @func_5321() -> (Tensor[(11, 12, 4), float32],) {
  %282 = @func_4961() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %283 = %282.0;
  (%283,)
}

def @func_11042(%var_11018: Tensor[(11, 12, 4), float32]) -> Tensor[(11, 12, 4), bool] {
  %284 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %285 = %284.0;
  %286 = cast(%var_11018, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%288, %289) /* ty=Tensor[(11, 12, 4), bool] */
}

def @func_11409() -> (Tensor[(11, 12, 4), float32],) {
  %290 = @func_10373() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %291 = %290.0;
  (%291,)
}

def @func_10567() -> (Tensor[(882), bool],) {
  %292 = @func_7475() /* ty=Tensor[(882), bool] */;
  (%292,)
}

def @func_5861() -> (Tensor[(11, 12, 4), float32],) {
  %293 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %294 = %293.0;
  (%294,)
}

def @func_7287() -> (Tensor[(882), float64],) {
  %295 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %296 = %295.2;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(882), float64] */;
  %298 = sqrt(%297) /* ty=Tensor[(882), float64] */;
  (%298,)
}

def @func_11652() -> (Tensor[(11, 12, 4), float32],) {
  %299 = @func_8980() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) */;
  %300 = %299.4;
  (%300,)
}

def @func_6038(%var_6002: Tensor[(14, 7, 9), float64]) -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) {
  %301 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %302 = %301.0;
  %303 = cast(%var_6002, dtype="uint32") /* ty=Tensor[(14, 7, 9), uint32] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="uint32") /* ty=Tensor[(14, 7, 9), uint32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %307 = right_shift(%305, %306) /* ty=Tensor[(14, 7, 9), uint32] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %309 = cast(%302, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %310 = reshape(%309, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %311 = @func_1460(%310) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %312 = sqrt(%308) /* ty=Tensor[(14, 7, 9), float32] */;
  %313 = %311.1;
  (%312, %313)
}

def @func_8687(%var_8672: Tensor[(14, 7, 13), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(1, 8, 12), float64], Tensor[(4, 24), float64]) {
  %314 = cast(%var_8672, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %315 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %316 = reshape(%315, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %317 = asin(%314) /* ty=Tensor[(14, 7, 13), float32] */;
  %318 = @func_2145(%316) /* ty=Tensor[(1, 8, 12), float64] */;
  (%317, %318, meta[relay.Constant][14] /* ty=Tensor[(4, 24), float64] */)
}

def @func_11914() -> (Tensor[(882), bool],) {
  %319 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %320 = %319.1;
  (%320,)
}

def @func_10613() -> (Tensor[(14, 7, 9), float64], Tensor[(700), float32], Tensor[(364, 2), float64]) {
  %321 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %322 = cast(meta[relay.Constant][15] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %323 = %321.0;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %325 = reshape(%322, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %326 = reshape(%324, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %327 = @func_4535(%325, %326) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %328 = %327.6;
  (%323, %328, meta[relay.Constant][15] /* ty=Tensor[(364, 2), float64] */)
}

def @func_10624() -> Tensor[(14, 7, 9), bool] {
  %329 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %329.0
}

def @func_10855() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_6436() -> (Tensor[(11, 12, 4), float32],) {
  %330 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  (%330,)
}

def @func_4774() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) {
  %331 = cast(meta[relay.Constant][16] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %332 = reshape(%331, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %333 = @func_1401(%332) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %336 = reshape(%335, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %337 = @func_1460(%336) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %338 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %339 = %337.1;
  (%338, %334, meta[relay.Constant][16] /* ty=Tensor[(882), bool] */, %339)
}

def @func_9736(%var_9713: Tensor[(7, 2, 6), float64]) -> Tensor[(7, 2, 6), float64] {
  %340 = cast(%var_9713, dtype="float64") /* ty=Tensor[(7, 2, 6), float64] */;
  log2(%340) /* ty=Tensor[(7, 2, 6), float64] */
}

def @func_9986() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %341 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %342 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %343 = %341.0;
  %344 = %342.1;
  (%343, %344)
}

def @func_12672() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_9169() -> (Tensor[(11, 12, 4), float32],) {
  %345 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %346 = %345.0;
  (%346,)
}

def @func_5524() -> (Tensor[(11, 12, 4), float32],) {
  %347 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  (%347,)
}

def @func_11454() -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) {
  %348 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %349 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %351 = reshape(%350, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %352 = @func_6038(%351) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
  %353 = %348.0;
  %354 = %352.1;
  (%349, %353, %354)
}

def @func_12277() -> (Tensor[(14, 7, 9), bool],) {
  %355 = @func_7518() /* ty=Tensor[(14, 7, 9), bool] */;
  (%355,)
}

def @func_3675(%var_3665: Tensor[(8, 8, 12), float64]) -> (Tensor[(8, 8, 12), float64],) {
  %356 = cast(%var_3665, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  %357 = log(%356) /* ty=Tensor[(8, 8, 12), float64] */;
  (%357,)
}

def @func_9772(%var_9755: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) {
  %358 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %359 = cast(%var_9755, dtype="int32") /* ty=Tensor[(672), int32] */;
  %360 = reshape(%359, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %361 = @func_7182(%360) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
  %362 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %363 = %358.0;
  %364 = %361.4;
  %365 = %362.0;
  (%363, %364, %var_9755, %365)
}

def @func_8980() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) {
  %366 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %367 = cast(meta[relay.Constant][17] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %368 = %366.0;
  %369 = cast(%368, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %370 = reshape(%367, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %371 = reshape(%369, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %372 = @func_2780(%370, %371) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %373 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %374 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %375 = %372.0;
  %376 = %373.0;
  (%374, %368, %375, meta[relay.Constant][17] /* ty=Tensor[(700), float32] */, %376)
}

def @func_10850() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) {
  %377 = cast(meta[relay.Constant][18] /* ty=Tensor[(98, 9), bool] */, dtype="bool") /* ty=Tensor[(98, 9), bool] */;
  %378 = reshape(%377, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %379 = @func_7013(%378) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %380 = @func_6473() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
  %381 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %382 = %379.0;
  %383 = %380.2;
  (%381, %382, meta[relay.Constant][18] /* ty=Tensor[(98, 9), bool] */, %383)
}

def @func_10349() -> (Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
  %384 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %385 = cast(meta[relay.Constant][19] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %386 = reshape(%385, newshape=[8, 84]) /* ty=Tensor[(8, 84), float64] */;
  %387 = @func_9805(%386) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) */;
  %388 = %384.1;
  %389 = %387.1;
  (%388, %389, meta[relay.Constant][19] /* ty=Tensor[(672), float64] */)
}

def @func_5711() -> (Tensor[(14, 7, 9), bool],) {
  %390 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %391 = %390.0;
  (%391,)
}

def @func_5847() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_9408() -> (Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) {
  %392 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 728), float64] */, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %394 = reshape(%392, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %395 = reshape(%393, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %396 = @func_4535(%394, %395) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %397 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %398 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(39, 13), float32] */;
  %401 = cast(%399, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %402 = %396.6;
  %403 = %397.0;
  %404 = log(%400) /* ty=Tensor[(39, 13), float32] */;
  %405 = log2(%401) /* ty=Tensor[(39, 13), float64] */;
  (%402, meta[relay.Constant][20] /* ty=Tensor[(1, 728), float64] */, meta[relay.Constant][21] /* ty=Tensor[(882), bool] */, %403, %404, %405)
}

def @func_5054() -> (Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) {
  %406 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %407 = %406.0;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 13), int64] */, dtype="int64") /* ty=Tensor[(39, 13), int64] */;
  %410 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 13), int64] */, dtype="int64") /* ty=Tensor[(39, 13), int64] */;
  %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 13), int64] */, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %412 = reshape(%409, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %413 = reshape(%410, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %414 = reshape(%411, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
  %415 = @func_2491(%412, %413, %414) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(39, 13), int64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %417 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(39, 13), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %418 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 13), int64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %420 = tan(%408) /* ty=Tensor[(14, 7, 9), float64] */;
  %421 = %415.3;
  %422 = subtract(%418, %419) /* ty=Tensor[(39, 13), float64] */;
  (%420, %421, %422)
}

def @func_10278() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_5139(%var_5134: Tensor[(728), float64], %var_5135: Tensor[(14, 63), bool]) -> (Tensor[(48, 2), float64], Tensor[(5, 14, 10), float32], Tensor[(728), float64], Tensor[(14, 63), bool]) {
  %423 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %424 = cast(%var_5134, dtype="float64") /* ty=Tensor[(728), float64] */;
  %425 = cast(%var_5135, dtype="bool") /* ty=Tensor[(14, 63), bool] */;
  %426 = reshape(%424, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %427 = reshape(%425, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %428 = @func_4535(%426, %427) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %429 = %423.1;
  %430 = %428.5;
  (%429, %430, %var_5134, %var_5135)
}

def @func_11629() -> (Tensor[(39, 13), float64],) {
  %431 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %432 = %431.2;
  (%432,)
}

def @func_2832(%var_2821: Tensor[(6, 8, 14), int32]) -> Tensor[(6, 8, 14), bool] {
  %433 = cast(%var_2821, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %434 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 8, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 8, 14), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%435, %436) /* ty=Tensor[(6, 8, 14), bool] */
}

def @func_8363() -> Tensor[(14, 7, 9), float32] {
  %437 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  acosh(%439) /* ty=Tensor[(14, 7, 9), float32] */
}

def @func_8454() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) {
  %440 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %441 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %442 = cast(meta[relay.Constant][25] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %443 = reshape(%442, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %444 = @func_6123(%443) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %445 = %440.3;
  %446 = %441.0;
  %447 = %444.0;
  (%445, %446, %447, meta[relay.Constant][25] /* ty=Tensor[(528), float32] */)
}

def @func_8703(%var_8692: Tensor[(11, 10, 14), float32]) -> Tensor[(11, 10, 14), float32] {
  %448 = cast(%var_8692, dtype="float32") /* ty=Tensor[(11, 10, 14), float32] */;
  tan(%448) /* ty=Tensor[(11, 10, 14), float32] */
}

def @func_7044() -> Tensor[(882), bool] {
  %449 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %449.2
}

def @func_10551() -> (Tensor[(11, 12, 4), float32], Tensor[(1470), float32], Tensor[(768), float64], Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %450 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %451 = cast(meta[relay.Constant][26] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %452 = reshape(%451, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %453 = @func_8050(%452) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) */;
  %454 = @func_6158() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) */;
  %455 = @func_9957() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %456 = %450.0;
  %457 = %453.3;
  %458 = %454.0;
  %459 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  %460 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  %461 = %455.0;
  (%456, %457, meta[relay.Constant][26] /* ty=Tensor[(768), float64] */, %458, %459, %460, %461)
}

def @func_11760() -> (Tensor[(14, 7, 9), float32], Tensor[(882), bool]) {
  %462 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %463 = %462.1;
  %464 = cast(%463, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %465 = reshape(%464, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %466 = @func_5215(%465) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) */;
  %467 = %466.5;
  (%463, %467)
}

def @func_10318() -> (Tensor[(14, 7, 9), float32],) {
  %468 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  (%468,)
}

def @func_10373() -> (Tensor[(11, 12, 4), float32],) {
  %469 = @func_6473() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
  %470 = %469.0;
  (%470,)
}

def @func_10434() -> (Tensor[(14, 7, 9), bool],) {
  %471 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %472 = %471.0;
  (%472,)
}

def @func_2780(%var_2762: Tensor[(5, 14, 10), float32], %var_2776: Tensor[(882), bool]) -> (Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %473 = cast(%var_2762, dtype="float32") /* ty=Tensor[(5, 14, 10), float32] */;
  %474 = cast(%var_2776, dtype="bool") /* ty=Tensor[(882), bool] */;
  %475 = reshape(%474, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %476 = @func_1401(%475) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %477 = cos(%473) /* ty=Tensor[(5, 14, 10), float32] */;
  %478 = %476.0;
  (%477, %478, %var_2776)
}

def @func_8140(%var_8138: Tensor[(882), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), float64]) {
  %479 = cast(%var_8138, dtype="float64") /* ty=Tensor[(882), float64] */;
  %480 = reshape(%479, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %481 = @func_6038(%480) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
  %482 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %483 = %481.1;
  (%482, %483, %var_8138)
}

def @func_8313() -> (Tensor[(882), float32], Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(5, 14, 10), float32]) {
  %484 = @func_7475() /* ty=Tensor[(882), bool] */;
  %485 = cast(%484, dtype="float64") /* ty=Tensor[(882), float64] */;
  %486 = acos(%485) /* ty=Tensor[(882), float64] */;
  %487 = cast(%484, dtype="float32") /* ty=Tensor[(882), float32] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(1), int32] */;
  %489 = cast(%486, dtype="float32") /* ty=Tensor[(882), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?), float32] */;
  %491 = cast(%486, dtype="bool") /* ty=Tensor[(882), bool] */;
  %492 = reshape(%491, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %493 = @func_6488(%492) /* ty=(Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) */;
  %494 = cast(%486, dtype="float32") /* ty=Tensor[(882), float32] */;
  %495 = tan(%494) /* ty=Tensor[(882), float32] */;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(882), bool] */;
  %497 = reshape(%496, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %498 = @func_5215(%497) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) */;
  %499 = floor_divide(%489, %490) /* ty=Tensor[(882), float32] */;
  %500 = %493.1;
  %501 = %498.3;
  (%499, %500, %495, %501)
}

def @func_8050(%var_8021: Tensor[(2, 384), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) {
  %502 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %503 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %504 = reshape(%503, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
  %505 = @func_1137(%504) /* ty=(Tensor[(4, 5, 11), float64],) */;
  %506 = cast(meta[relay.Constant][28] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %507 = reshape(%506, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %508 = %502.0;
  %509 = cast(%508, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %510 = cast(%var_8021, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %511 = reshape(%509, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %512 = reshape(%510, newshape=[64, 12]) /* ty=Tensor[(64, 12), float64] */;
  %513 = @func_6313(%511, %512) /* ty=(Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) */;
  %514 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), float64] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %515 = %505.0;
  %516 = @func_3486(%507) /* ty=Tensor[(14, 7, 15), float32] */;
  %517 = %513.4;
  %518 = tan(%514) /* ty=Tensor[(220), float32] */;
  (%508, %515, %516, meta[relay.Constant][28] /* ty=Tensor[(1470), float32] */, %517, %var_8021, %518)
}

def @func_6771() -> Tensor[(882), bool] {
  %519 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(882), float64] */;
  %522 = rsqrt(%521) /* ty=Tensor[(882), float64] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(882), bool] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(1), int32] */;
  %525 = cast(%522, dtype="bool") /* ty=Tensor[(882), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%525, %526) /* ty=Tensor[(882), bool] */
}

def @func_12408() -> Tensor[(39, 13), uint16] {
  %527 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %528 = %527.0;
  %529 = cast(meta[relay.Constant][29] /* ty=Tensor[(39, 13), float64] */, dtype="uint16") /* ty=Tensor[(39, 13), uint16] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = cast(%528, dtype="uint16") /* ty=Tensor[(39, 13), uint16] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  bitwise_or(%531, %532) /* ty=Tensor[(39, 13), uint16] */
}

def @func_8809(%var_8797: Tensor[(1470), float32]) -> (Tensor[(39, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  %533 = cast(meta[relay.Constant][30] /* ty=Tensor[(39, 13), float64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %534 = erf(%533) /* ty=Tensor[(39, 13), float64] */;
  %535 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %536 = %535.0;
  %537 = cast(meta[relay.Constant][30] /* ty=Tensor[(39, 13), float64] */, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(2), int32] */;
  %539 = cast(%536, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %541 = greater(%539, %540) /* ty=Tensor[(39, 13), bool] */;
  %542 = cast(%541, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %543 = shape_of(%534, dtype="int32") /* ty=Tensor[(2), int32] */;
  %544 = cast(%534, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %546 = cast(%var_8797, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %547 = reshape(%546, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %548 = logical_or(%544, %545) /* ty=Tensor[(39, 13), bool] */;
  %549 = @func_3486(%547) /* ty=Tensor[(14, 7, 15), float32] */;
  (%548, %549, %var_8797)
}

def @func_7606() -> (Tensor[(14, 7, 9), bool],) {
  %550 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %551 = %550.0;
  (%551,)
}

def @func_1460(%var_1455: Tensor[(882), bool]) -> (Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %552 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %553 = cast(%var_1455, dtype="bool") /* ty=Tensor[(882), bool] */;
  %554 = reshape(%553, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %555 = @func_1401(%554) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %556 = cos(%552) /* ty=Tensor[(2, 15, 1), float32] */;
  %557 = %555.0;
  (%556, %557, %var_1455)
}

def @func_12516() -> (Tensor[(98, 9), float64], Tensor[(1, 8, 12), float64], Tensor[(507), int64], Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(364, 2), bool]) {
  %558 = @func_10850() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) */;
  %559 = %558.2;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(98, 9), float64] */;
  %561 = cast(meta[relay.Constant][32] /* ty=Tensor[(507), int64] */, dtype="int64") /* ty=Tensor[(507), int64] */;
  %562 = cast(meta[relay.Constant][32] /* ty=Tensor[(507), int64] */, dtype="int64") /* ty=Tensor[(507), int64] */;
  %563 = cast(meta[relay.Constant][32] /* ty=Tensor[(507), int64] */, dtype="bool") /* ty=Tensor[(507), bool] */;
  %564 = reshape(%561, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %565 = reshape(%562, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %566 = reshape(%563, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
  %567 = @func_2491(%564, %565, %566) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %568 = cast(meta[relay.Constant][33] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %569 = cast(meta[relay.Constant][34] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %570 = reshape(%568, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %571 = reshape(%569, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %572 = @func_2380(%570, %571) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %573 = cast(meta[relay.Constant][33] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %574 = log10(%573) /* ty=Tensor[(364, 2), float64] */;
  %575 = cast(meta[relay.Constant][33] /* ty=Tensor[(364, 2), float64] */, dtype="bool") /* ty=Tensor[(364, 2), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(364, 2), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %579 = cos(%560) /* ty=Tensor[(98, 9), float64] */;
  %580 = %567.2;
  %581 = %572.1;
  %582 = greater_equal(%577, %578) /* ty=Tensor[(364, 2), bool] */;
  (%579, %580, meta[relay.Constant][32] /* ty=Tensor[(507), int64] */, %581, meta[relay.Constant][34] /* ty=Tensor[(225), int8] */, %582)
}

def @func_12555() -> (Tensor[(11, 12, 4), bool],) {
  %583 = @func_8735() /* ty=(Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) */;
  %584 = %583.2;
  (%584,)
}

def @func_3486(%var_3479: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  %585 = cast(%var_3479, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  log(%585) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_11982() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_9662() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) {
  %586 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %587 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %589 = %586.0;
  %590 = asinh(%588) /* ty=Tensor[(14, 7, 9), float32] */;
  %591 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  (%589, %590, %591)
}

def @func_2491(%var_2426: Tensor[(13, 3, 13), int64], %var_2427: Tensor[(13, 3, 13), int64], %var_2446: Tensor[(13, 3, 13), bool]) -> (Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) {
  %592 = cast(%var_2427, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
  %593 = shape_of(%var_2426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_2426, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = less_equal(%594, %595) /* ty=Tensor[(13, 3, 13), bool] */;
  %597 = cast(%var_2426, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = greater(%599, %600) /* ty=Tensor[(13, 3, 13), bool] */;
  %602 = cast(%var_2446, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %606 = cast(meta[relay.Constant][35] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %607 = reshape(%606, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %608 = @func_1460(%607) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %609 = %608.2;
  %610 = cast(%609, dtype="int16") /* ty=Tensor[(882), int16] */;
  %611 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(882), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(meta[relay.Constant][35] /* ty=Tensor[(882), bool] */, dtype="int16") /* ty=Tensor[(882), int16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), int16] */;
  %614 = cast(meta[relay.Constant][36] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %615 = reshape(%614, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %616 = cast(meta[relay.Constant][35] /* ty=Tensor[(882), bool] */, dtype="float32") /* ty=Tensor[(882), float32] */;
  %617 = erf(%616) /* ty=Tensor[(882), float32] */;
  %618 = cast(%609, dtype="bool") /* ty=Tensor[(882), bool] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(1), int32] */;
  %620 = cast(%617, dtype="bool") /* ty=Tensor[(882), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?), bool] */;
  %622 = left_shift(%604, %605) /* ty=Tensor[(13, 3, 13), int8] */;
  %623 = add(%612, %613) /* ty=Tensor[(882), int16] */;
  %624 = @func_2145(%615) /* ty=Tensor[(1, 8, 12), float64] */;
  %625 = greater_equal(%620, %621) /* ty=Tensor[(882), bool] */;
  (%622, %623, %624, meta[relay.Constant][36] /* ty=Tensor[(48, 2), float64] */, %625)
}

def @func_9805(%var_9797: Tensor[(8, 84), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) {
  %626 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %627 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 84), float64] */, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %628 = reshape(%627, newshape=[2, 336]) /* ty=Tensor[(2, 336), float64] */;
  %629 = @func_4622(%628) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) */;
  %630 = cast(%var_9797, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %631 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 84), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %632 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 84), float64] */, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %634 = %626.0;
  %635 = %629.0;
  %636 = left_shift(%632, %633) /* ty=Tensor[(8, 84), int32] */;
  (%634, %635, %636)
}

def @func_10181(%var_10162: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(882), float64], Tensor[(6, 8, 14), bool], Tensor[(672), int32]) {
  %637 = @func_8552() /* ty=(Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
  %638 = cast(%var_10162, dtype="int32") /* ty=Tensor[(672), int32] */;
  %639 = reshape(%638, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
  %640 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %641 = %637.0;
  %642 = @func_2832(%639) /* ty=Tensor[(6, 8, 14), bool] */;
  (%640, %641, %642, %var_10162)
}

def @func_6407() -> (Tensor[(14, 7, 9), bool],) {
  %643 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %644 = %643.0;
  (%644,)
}

def @func_4372() -> Tensor[(11, 12, 4), float32] {
  %645 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  log10(%645) /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_6158() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) {
  %646 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %648 = reshape(%647, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %649 = @func_6123(%648) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %650 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %651 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %652 = %649.0;
  %653 = %650.0;
  (%646, %651, %652, %653)
}

def @func_6606(%var_6596: Tensor[(225), int8]) -> (Tensor[(11, 12, 4), float32], Tensor[(13, 8, 7), float64], Tensor[(728), float64], Tensor[(225), int8]) {
  %654 = cast(meta[relay.Constant][39] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %655 = cast(%var_6596, dtype="int8") /* ty=Tensor[(225), int8] */;
  %656 = reshape(%654, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %657 = reshape(%655, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %658 = @func_2380(%656, %657) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %659 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %660 = %658.0;
  (%659, %660, meta[relay.Constant][39] /* ty=Tensor[(728), float64] */, %var_6596)
}

def @func_12145() -> Tensor[(700), float32] {
  %661 = @func_9408() /* ty=(Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) */;
  %661.0
}

def @func_10966() -> Tensor[(11, 12, 4), float32] {
  @func_10278() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_4924(%var_4897: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), float64], Tensor[(11, 12, 4), float64]) {
  %662 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %663 = cast(%var_4897, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %667 = cast(%var_4897, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %668 = mod(%665, %666) /* ty=Tensor[(11, 12, 4), float64] */;
  %669 = sin(%667) /* ty=Tensor[(11, 12, 4), float64] */;
  (%668, %669)
}

def @func_4961() -> (Tensor[(11, 12, 4), float32],) {
  %670 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  (%670,)
}

def @func_5676(%var_5636: Tensor[(672), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) {
  %671 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %672 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %673 = cast(%var_5636, dtype="float64") /* ty=Tensor[(672), float64] */;
  %674 = cast(%var_5636, dtype="float64") /* ty=Tensor[(672), float64] */;
  %675 = reshape(%673, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %676 = reshape(%674, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %677 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %678 = %671.0;
  %679 = %672.0;
  %680 = @func_2596(%675, %676) /* ty=Tensor[(7, 12, 8), float64] */;
  %681 = %677.0;
  (%678, %679, %680, %var_5636, %681)
}

def @func_7013(%var_7007: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %682 = cast(%var_7007, dtype="bool") /* ty=Tensor[(882), bool] */;
  %683 = reshape(%682, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %684 = @func_1401(%683) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %685 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %686 = %684.0;
  (%685, %686, %var_7007)
}

def @func_6387(%var_6379: Tensor[(768), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(672), float64], Tensor[(768), float64]) {
  %687 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %690 = cast(%var_6379, dtype="float64") /* ty=Tensor[(768), float64] */;
  %691 = reshape(%689, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %692 = reshape(%690, newshape=[64, 12]) /* ty=Tensor[(64, 12), float64] */;
  %693 = @func_6313(%691, %692) /* ty=(Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) */;
  %694 = %693.3;
  (%688, %694, %var_6379)
}

def @func_10018() -> (Tensor[(882), bool],) {
  %695 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %696 = %695.1;
  %697 = cast(meta[relay.Constant][40] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(1), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(882), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?), bool] */;
  %701 = logical_or(%699, %700) /* ty=Tensor[(882), bool] */;
  (%701,)
}

def @func_10089() -> (Tensor[(11, 12, 4), float32], Tensor[(225), int8], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 15), float32], Tensor[(5, 15, 3), float32]) {
  %702 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %703 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %704 = reshape(%703, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %705 = @func_9772(%704) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) */;
  %706 = @func_8863() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */;
  %707 = cast(meta[relay.Constant][41] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %708 = reshape(%707, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %709 = @func_598(%708) /* ty=(Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) */;
  %710 = %709.2;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %712 = %702.0;
  %713 = %705.1;
  %714 = %706.1;
  %715 = erf(%711) /* ty=Tensor[(5, 15, 3), float32] */;
  (%712, meta[relay.Constant][41] /* ty=Tensor[(225), int8] */, %713, meta[relay.Constant][42] /* ty=Tensor[(672), int32] */, %714, %715)
}

def @func_7475() -> Tensor[(882), bool] {
  %716 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %716.0
}

def @func_4622(%var_4614: Tensor[(2, 336), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) {
  %717 = cast(%var_4614, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %718 = cast(%var_4614, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %719 = reshape(%717, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %720 = reshape(%718, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %721 = @func_2596(%719, %720) /* ty=Tensor[(7, 12, 8), float64] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %723 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %724 = log(%722) /* ty=Tensor[(7, 12, 8), float64] */;
  (%723, %var_4614, %724)
}

def @main() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %725 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %726 = @func_11652() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %727 = %726.0;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %729 = %725.0;
  %730 = sqrt(%728) /* ty=Tensor[(11, 12, 4), float32] */;
  (%729, %730)
}

def @func_6313(%var_6184: Tensor[(14, 7, 9), bool], %var_6273: Tensor[(64, 12), float64]) -> (Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) {
  %731 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %732 = %731.0;
  %733 = cast(%var_6184, dtype="uint16") /* ty=Tensor[(14, 7, 9), uint16] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="uint16") /* ty=Tensor[(14, 7, 9), uint16] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %737 = cast(meta[relay.Constant][43] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %739 = cast(meta[relay.Constant][45] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %740 = reshape(%737, newshape=[4, 12, 13]) /* ty=Tensor[(4, 12, 13), uint64] */;
  %741 = reshape(%738, newshape=[7, 210]) /* ty=Tensor[(7, 210), float32] */;
  %742 = reshape(%739, newshape=[168, 4]) /* ty=Tensor[(168, 4), float64] */;
  %743 = @func_3994(%740, %741, %742) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) */;
  %744 = cast(meta[relay.Constant][45] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %745 = reshape(%744, newshape=[2, 336]) /* ty=Tensor[(2, 336), float64] */;
  %746 = @func_4622(%745) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) */;
  %747 = cast(%var_6273, dtype="float64") /* ty=Tensor[(64, 12), float64] */;
  %748 = reshape(%747, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %749 = @func_3675(%748) /* ty=(Tensor[(8, 8, 12), float64],) */;
  %750 = cast(meta[relay.Constant][43] /* ty=Tensor[(24, 26), uint64] */, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %751 = asin(%750) /* ty=Tensor[(24, 26), float32] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %753 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %754 = %753.1;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %756 = subtract(%735, %736) /* ty=Tensor[(14, 7, 9), uint16] */;
  %757 = %743.2;
  %758 = %746.1;
  %759 = %749.0;
  %760 = erf(%752) /* ty=Tensor[(24, 26), float32] */;
  %761 = tan(%755) /* ty=Tensor[(5, 15, 3), float32] */;
  (%756, %757, meta[relay.Constant][44] /* ty=Tensor[(1470), float32] */, meta[relay.Constant][45] /* ty=Tensor[(672), float64] */, %758, %759, %var_6273, %760, %761)
}

def @func_8186() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_5398() -> (Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) {
  %762 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %763 = cast(meta[relay.Constant][47] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %764 = reshape(%762, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %765 = reshape(%763, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %766 = @func_2380(%764, %765) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %767 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %768 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %769 = %766.1;
  %770 = %767.0;
  (%768, %769, meta[relay.Constant][46] /* ty=Tensor[(7, 104), float64] */, meta[relay.Constant][47] /* ty=Tensor[(225), int8] */, %770)
}

def @func_11261() -> Tensor[(14, 7, 9), float64] {
  %771 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  sinh(%773) /* ty=Tensor[(14, 7, 9), float64] */
}

def @func_7496() -> Tensor[(11, 12, 4), float32] {
  %774 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %774.0
}

def @func_9580(%var_9536: Tensor[(700), float32], %var_9537: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(672, 700), float32], Tensor[(672, 700), bool]) {
  %775 = cast(%var_9536, dtype="float32") /* ty=Tensor[(700), float32] */;
  %776 = cast(%var_9537, dtype="bool") /* ty=Tensor[(882), bool] */;
  %777 = reshape(%775, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %778 = reshape(%776, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %779 = @func_2780(%777, %778) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %780 = cast(meta[relay.Constant][48] /* ty=Tensor[(672, 1), float64] */, dtype="float64") /* ty=Tensor[(672, 1), float64] */;
  %781 = reshape(%780, newshape=[336, 2]) /* ty=Tensor[(336, 2), float64] */;
  %782 = @func_7364(%781) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) */;
  %783 = cast(%var_9536, dtype="float32") /* ty=Tensor[(700), float32] */;
  %784 = sin(%783) /* ty=Tensor[(700), float32] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(700), float32] */;
  %786 = cast(meta[relay.Constant][48] /* ty=Tensor[(672, 1), float64] */, dtype="float32") /* ty=Tensor[(672, 1), float32] */;
  %787 = cast(meta[relay.Constant][48] /* ty=Tensor[(672, 1), float64] */, dtype="bool") /* ty=Tensor[(672, 1), bool] */;
  %788 = cast(%784, dtype="bool") /* ty=Tensor[(700), bool] */;
  %789 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  %790 = %779.0;
  %791 = %782.4;
  %792 = add(%785, %786) /* ty=Tensor[(672, 700), float32] */;
  %793 = logical_and(%787, %788) /* ty=Tensor[(672, 700), bool] */;
  (%789, %790, %var_9537, %791, %792, %793)
}

def @func_11086() -> Tensor[(14, 7, 9), bool] {
  %794 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %794.0
}

def @func_4850() -> (Tensor[(882), bool],) {
  %795 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %796 = %795.2;
  (%796,)
}

def @func_5566(%var_5547: Tensor[(1, 1, 13), float64], %var_5563: Tensor[(728), float64], %var_5564: Tensor[(882), bool]) -> (Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) {
  %797 = cast(%var_5547, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %798 = asin(%797) /* ty=Tensor[(1, 1, 13), float64] */;
  %799 = cast(%798, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %800 = shape_of(%var_5547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_5547, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %803 = right_shift(%801, %802) /* ty=Tensor[(?, ?, 13), int8] */;
  %804 = cast(%803, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %805 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%798, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = cast(%var_5563, dtype="float64") /* ty=Tensor[(728), float64] */;
  %809 = cast(%var_5564, dtype="bool") /* ty=Tensor[(882), bool] */;
  %810 = reshape(%808, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %811 = reshape(%809, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %812 = @func_4535(%810, %811) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %813 = not_equal(%806, %807) /* ty=Tensor[(?, ?, 13), bool] */;
  %814 = %812.1;
  (%813, %814, %var_5563, %var_5564)
}

def @func_5303() -> Tensor[(11, 12, 4), float32] {
  @func_5245() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10933() -> (Tensor[(14, 7, 9), float32], Tensor[(220), float32], Tensor[(768), float64]) {
  %815 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %816 = cast(meta[relay.Constant][49] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %817 = reshape(%816, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %818 = @func_8050(%817) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) */;
  %819 = %815.0;
  %820 = %818.6;
  (%819, %820, meta[relay.Constant][49] /* ty=Tensor[(768), float64] */)
}

def @func_10392() -> Tensor[(11, 12, 4), float32] {
  @func_5303() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10733(%var_10677: Tensor[(4, 168), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(10, 6, 5), float64], Tensor[(4, 168), int16], Tensor[(14, 7, 9), float32], Tensor[(6, 8, 14), bool], Tensor[(4, 168), uint32]) {
  %821 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %822 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(4, 168), int32] */;
  %823 = reshape(%822, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %824 = @func_7182(%823) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
  %825 = cast(%var_10677, dtype="int16") /* ty=Tensor[(4, 168), int16] */;
  %826 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %827 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 168), int32] */, dtype="int16") /* ty=Tensor[(4, 168), int16] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %829 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %830 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(4, 168), int32] */;
  %831 = reshape(%830, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
  %832 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 168), int32] */, dtype="uint32") /* ty=Tensor[(4, 168), uint32] */;
  %833 = shape_of(%var_10677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %834 = cast(%var_10677, dtype="uint32") /* ty=Tensor[(4, 168), uint32] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %836 = %821.0;
  %837 = %824.1;
  %838 = bitwise_and(%827, %828) /* ty=Tensor[(4, 168), int16] */;
  %839 = %829.0;
  %840 = @func_2832(%831) /* ty=Tensor[(6, 8, 14), bool] */;
  %841 = minimum(%834, %835) /* ty=Tensor[(4, 168), uint32] */;
  (%836, %837, %838, %839, %840, %841)
}

def @func_5245() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_8552() -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %842 = @func_8186() /* ty=Tensor[(882), bool] */;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(882), float64] */;
  %844 = sinh(%843) /* ty=Tensor[(882), float64] */;
  %845 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %846 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  (%844, %845, %846)
}

def @func_8058() -> (Tensor[(39, 13), float64],) {
  %847 = @func_6865() /* ty=Tensor[(39, 13), float64] */;
  (%847,)
}

def @func_12190() -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), float32]) {
  %848 = @func_12039() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %849 = %848.0;
  %850 = cast(%849, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %851 = reshape(%850, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %852 = @func_1401(%851) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %853 = @func_11760() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(882), bool]) */;
  %854 = %852.0;
  %855 = %853.0;
  (%849, %854, %855)
}

def @func_11369() -> (Tensor[(11, 12, 4), float64],) {
  %856 = @func_10782() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %857 = %856.0;
  %858 = cast(%857, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %859 = acosh(%858) /* ty=Tensor[(11, 12, 4), float64] */;
  (%859,)
}

def @func_6712() -> (Tensor[(14, 7, 9), bool],) {
  %860 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %861 = %860.0;
  (%861,)
}

def @func_6488(%var_6477: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
  %862 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %863 = %862.0;
  %864 = cast(%var_6477, dtype="int8") /* ty=Tensor[(14, 7, 9), int8] */;
  %865 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%863, dtype="int8") /* ty=Tensor[(14, 7, 9), int8] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %868 = cast(meta[relay.Constant][51] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %869 = reshape(%868, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %870 = @func_5676(%869) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) */;
  %871 = bitwise_and(%866, %867) /* ty=Tensor[(14, 7, 9), int8] */;
  %872 = %870.1;
  (%871, %872, meta[relay.Constant][51] /* ty=Tensor[(672), float64] */)
}

def @func_12420() -> Tensor[(11, 12, 4), float32] {
  %873 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %873.2
}

def @func_1401(%var_1383: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), bool],) {
  %874 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 7, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %875 = shape_of(%var_1383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%var_1383, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %878 = logical_and(%876, %877) /* ty=Tensor[(14, 7, 9), bool] */;
  (%878,)
}

def @func_517(%var_506: Tensor[(5, 15, 3), int8]) -> Tensor[(5, 15, 3), int8] {
  %879 = cast(%var_506, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %880 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(5, 15, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 15, 3), int8] */, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%881, %882) /* ty=Tensor[(5, 15, 3), int8] */
}

def @func_7592(%var_7583: Tensor[(672), int32]) -> (Tensor[(8, 8, 12), float64], Tensor[(768), float64], Tensor[(882), bool], Tensor[(10, 6, 5), float32], Tensor[(672), int32], Tensor[(11, 12, 4), float32]) {
  %883 = cast(meta[relay.Constant][54] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %884 = reshape(%883, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %885 = @func_3675(%884) /* ty=(Tensor[(8, 8, 12), float64],) */;
  %886 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %887 = cast(%var_7583, dtype="int32") /* ty=Tensor[(672), int32] */;
  %888 = reshape(%887, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %889 = @func_7182(%888) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
  %890 = @func_7496() /* ty=Tensor[(11, 12, 4), float32] */;
  %891 = cast(%890, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %892 = erf(%891) /* ty=Tensor[(11, 12, 4), float32] */;
  %893 = cast(%892, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %894 = %885.0;
  %895 = %886.0;
  %896 = %889.2;
  %897 = acos(%893) /* ty=Tensor[(11, 12, 4), float32] */;
  (%894, meta[relay.Constant][54] /* ty=Tensor[(768), float64] */, %895, %896, %var_7583, %897)
}

def @func_11322() -> (Tensor[(882), float64],) {
  %898 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %899 = %898.2;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(882), float64] */;
  %901 = asin(%900) /* ty=Tensor[(882), float64] */;
  (%901,)
}

def @func_7364(%var_7358: Tensor[(336, 2), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) {
  %902 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %903 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %904 = @func_6158() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) */;
  %905 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %906 = cast(%var_7358, dtype="float64") /* ty=Tensor[(336, 2), float64] */;
  %907 = cast(%var_7358, dtype="float64") /* ty=Tensor[(336, 2), float64] */;
  %908 = reshape(%906, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %909 = reshape(%907, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %910 = %902.0;
  %911 = %903.0;
  %912 = %904.2;
  %913 = %905.0;
  %914 = @func_2596(%908, %909) /* ty=Tensor[(7, 12, 8), float64] */;
  (%910, %911, %912, %913, %914, %var_7358)
}

def @func_11850(%var_11848: Tensor[(225), int8]) -> (Tensor[(882), bool], Tensor[(15, 15, 2), float64], Tensor[(225), int8]) {
  %915 = cast(%var_11848, dtype="int8") /* ty=Tensor[(225), int8] */;
  %916 = reshape(%915, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %917 = @func_598(%916) /* ty=(Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) */;
  %918 = @func_6771() /* ty=Tensor[(882), bool] */;
  %919 = %917.5;
  (%918, %919, %var_11848)
}

def @func_8735() -> (Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) {
  %920 = @func_4850() /* ty=(Tensor[(882), bool],) */;
  %921 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %922 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %923 = %920.0;
  %924 = %921.0;
  %925 = %922.2;
  (%923, %924, %925)
}

def @func_8745() -> (Tensor[(225), int8],) {
  %926 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %927 = %926.3;
  (%927,)
}

def @func_6123(%var_6115: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool],) {
  %928 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  %929 = cast(%var_6115, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(3), int32] */;
  %931 = cast(%928, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %933 = greater(%931, %932) /* ty=Tensor[(11, 12, 4), bool] */;
  (%933,)
}

def @func_8863() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  %934 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %935 = cast(meta[relay.Constant][55] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %936 = reshape(%935, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %937 = %934.0;
  %938 = @func_3486(%936) /* ty=Tensor[(14, 7, 15), float32] */;
  (%937, %938, meta[relay.Constant][55] /* ty=Tensor[(1470), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8143(%var_8141: Tensor[(882), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), float64]) {
  @func_8140(%var_8141) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), float64]) */
}

def @func_12636() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32]) {
  %0 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %1 = @func_11454() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) */;
  %2 = @func_8980() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) */;
  %3 = %0.0;
  %4 = %1.2;
  %5 = %2.0;
  (%3, %4, %5)
}

def @func_11492(%var_11485: Tensor[(882), bool]) -> (Tensor[(882), int32],) {
  %6 = @func_10471() /* ty=Tensor[(882), bool] */;
  %7 = cast(%var_11485, dtype="int32") /* ty=Tensor[(882), int32] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %9 = cast(%6, dtype="int32") /* ty=Tensor[(882), int32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?), int32] */;
  %11 = bitwise_and(%9, %10) /* ty=Tensor[(882), int32] */;
  (%11,)
}

def @func_9921() -> (Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) {
  %32 = fn () -> (Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) {
    %12 = @func_7287() /* ty=(Tensor[(882), float64],) */;
    %13 = %12.0;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(882), float64] */, dtype="int16") /* ty=Tensor[(882), int16] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(1), int32] */;
    %16 = cast(%13, dtype="int16") /* ty=Tensor[(882), int16] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), int16] */;
    %18 = logical_xor(%16, %17) /* ty=Tensor[(882), int16] */;
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(882), float64] */, dtype="float32") /* ty=Tensor[(882), float32] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(1), int32] */;
    %21 = cast(%18, dtype="float32") /* ty=Tensor[(882), float32] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?), float32] */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
    %24 = reshape(%23, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
    %25 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
    %26 = @func_9408() /* ty=(Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) */;
    %27 = floor_mod(%21, %22) /* ty=Tensor[(882), float32] */;
    %28 = @func_2145(%24) /* ty=Tensor[(1, 8, 12), float64] */;
    %29 = @func_6771() /* ty=Tensor[(882), bool] */;
    %30 = %25.1;
    %31 = %26.2;
    (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(48, 2), float64] */, %29, %30, %31)
  };
  %32() /* ty=(Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) */
}

def @func_6317(%var_6315: Tensor[(14, 7, 9), bool], %var_6316: Tensor[(64, 12), float64]) -> (Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) {
  @func_6313(%var_6315, %var_6316) /* ty=(Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) */
}

def @func_10374() -> (Tensor[(11, 12, 4), float32],) {
  %35 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %33 = @func_6473() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
    %34 = %33.0;
    (%34,)
  };
  %35() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_5526() -> (Tensor[(11, 12, 4), float32],) {
  @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_9260() -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), float32]) {
  %36 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %37 = @func_6964() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) */;
  %38 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %39 = %38.0;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %41 = %36.0;
  %42 = %37.2;
  %43 = cosh(%40) /* ty=Tensor[(14, 7, 9), float32] */;
  (%41, %42, %43)
}

def @func_8363() -> Tensor[(14, 7, 9), float32] {
  %44 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  acosh(%46) /* ty=Tensor[(14, 7, 9), float32] */
}

def @func_7288() -> (Tensor[(882), float64],) {
  %51 = fn () -> (Tensor[(882), float64],) {
    %47 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
    %48 = %47.2;
    %49 = cast(%48, dtype="float64") /* ty=Tensor[(882), float64] */;
    %50 = sqrt(%49) /* ty=Tensor[(882), float64] */;
    (%50,)
  };
  %51() /* ty=(Tensor[(882), float64],) */
}

def @func_5303() -> Tensor[(11, 12, 4), float32] {
  @func_5245() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10184(%var_10182: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(882), float64], Tensor[(6, 8, 14), bool], Tensor[(672), int32]) {
  @func_10181(%var_10182) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(882), float64], Tensor[(6, 8, 14), bool], Tensor[(672), int32]) */
}

def @func_8812(%var_8810: Tensor[(1470), float32]) -> (Tensor[(39, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  @func_8809(%var_8810) /* ty=(Tensor[(39, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */
}

def @func_8454() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) {
  %52 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %53 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %55 = reshape(%54, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %56 = @func_6123(%55) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %57 = %52.3;
  %58 = %53.0;
  %59 = %56.0;
  (%57, %58, %59, meta[relay.Constant][2] /* ty=Tensor[(528), float32] */)
}

def @func_5322() -> (Tensor[(11, 12, 4), float32],) {
  %62 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %60 = @func_4961() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %61 = %60.0;
    (%61,)
  };
  %62() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_11630() -> (Tensor[(39, 13), float64],) {
  %65 = fn () -> (Tensor[(39, 13), float64],) {
    %63 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
    %64 = %63.2;
    (%64,)
  };
  %65() /* ty=(Tensor[(39, 13), float64],) */
}

def @func_8188() -> Tensor[(882), bool] {
  @func_8186() /* ty=Tensor[(882), bool] */
}

def @func_6704() -> (Tensor[(882), bool],) {
  %66 = @func_4850() /* ty=(Tensor[(882), bool],) */;
  %67 = %66.0;
  (%67,)
}

def @func_2495(%var_2492: Tensor[(13, 3, 13), int64], %var_2493: Tensor[(13, 3, 13), int64], %var_2494: Tensor[(13, 3, 13), bool]) -> (Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) {
  %102 = fn (%var_2426: Tensor[(13, 3, 13), int64], %var_2427: Tensor[(13, 3, 13), int64], %var_2446: Tensor[(13, 3, 13), bool]) -> (Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) {
    %68 = cast(%var_2427, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
    %69 = shape_of(%var_2426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(%var_2426, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %72 = less_equal(%70, %71) /* ty=Tensor[(13, 3, 13), bool] */;
    %73 = cast(%var_2426, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
    %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%72, dtype="bool") /* ty=Tensor[(13, 3, 13), bool] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %77 = greater(%75, %76) /* ty=Tensor[(13, 3, 13), bool] */;
    %78 = cast(%var_2446, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
    %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%77, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
    %83 = reshape(%82, newshape=[882]) /* ty=Tensor[(882), bool] */;
    %84 = @func_1460(%83) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
    %85 = %84.2;
    %86 = cast(%85, dtype="int16") /* ty=Tensor[(882), int16] */;
    %87 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(882), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(882), bool] */, dtype="int16") /* ty=Tensor[(882), int16] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?), int16] */;
    %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
    %91 = reshape(%90, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
    %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(882), bool] */, dtype="float32") /* ty=Tensor[(882), float32] */;
    %93 = erf(%92) /* ty=Tensor[(882), float32] */;
    %94 = cast(%85, dtype="bool") /* ty=Tensor[(882), bool] */;
    %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(1), int32] */;
    %96 = cast(%93, dtype="bool") /* ty=Tensor[(882), bool] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?), bool] */;
    %98 = left_shift(%80, %81) /* ty=Tensor[(13, 3, 13), int8] */;
    %99 = add(%88, %89) /* ty=Tensor[(882), int16] */;
    %100 = @func_2145(%91) /* ty=Tensor[(1, 8, 12), float64] */;
    %101 = greater_equal(%96, %97) /* ty=Tensor[(882), bool] */;
    (%98, %99, %100, meta[relay.Constant][4] /* ty=Tensor[(48, 2), float64] */, %101)
  };
  %102(%var_2492, %var_2493, %var_2494) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */
}

def @func_10244(%var_10242: Tensor[(48, 2), float64]) -> Tensor[(48, 2), bool] {
  @func_10241(%var_10242) /* ty=Tensor[(48, 2), bool] */
}

def @func_10966() -> Tensor[(11, 12, 4), float32] {
  @func_10278() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_11914() -> (Tensor[(882), bool],) {
  %103 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %104 = %103.1;
  (%104,)
}

def @func_7595(%var_7593: Tensor[(672), int32]) -> (Tensor[(8, 8, 12), float64], Tensor[(768), float64], Tensor[(882), bool], Tensor[(10, 6, 5), float32], Tensor[(672), int32], Tensor[(11, 12, 4), float32]) {
  @func_7592(%var_7593) /* ty=(Tensor[(8, 8, 12), float64], Tensor[(768), float64], Tensor[(882), bool], Tensor[(10, 6, 5), float32], Tensor[(672), int32], Tensor[(11, 12, 4), float32]) */
}

def @func_8980() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) {
  %105 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %107 = %105.0;
  %108 = cast(%107, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %109 = reshape(%106, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %110 = reshape(%108, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %111 = @func_2780(%109, %110) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %112 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %113 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %114 = %111.0;
  %115 = %112.0;
  (%113, %107, %114, meta[relay.Constant][5] /* ty=Tensor[(700), float32] */, %115)
}

def @func_11369() -> (Tensor[(11, 12, 4), float64],) {
  %116 = @func_10782() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %117 = %116.0;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %119 = acosh(%118) /* ty=Tensor[(11, 12, 4), float64] */;
  (%119,)
}

def @func_9772(%var_9755: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) {
  %120 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %121 = cast(%var_9755, dtype="int32") /* ty=Tensor[(672), int32] */;
  %122 = reshape(%121, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %123 = @func_7182(%122) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
  %124 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %125 = %120.0;
  %126 = %123.4;
  %127 = %124.0;
  (%125, %126, %var_9755, %127)
}

def @func_7906() -> (Tensor[(14, 7, 9), bool],) {
  %128 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %129 = %128.0;
  (%129,)
}

def @func_2835(%var_2833: Tensor[(6, 8, 14), int32]) -> Tensor[(6, 8, 14), bool] {
  @func_2832(%var_2833) /* ty=Tensor[(6, 8, 14), bool] */
}

def @func_6123(%var_6115: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool],) {
  %130 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  %131 = cast(%var_6115, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = greater(%133, %134) /* ty=Tensor[(11, 12, 4), bool] */;
  (%135,)
}

def @main() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %136 = @func_6438() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %137 = @func_11653() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %140 = %136.0;
  %141 = sqrt(%139) /* ty=Tensor[(11, 12, 4), float32] */;
  (%140, %141)
}

def @func_11324() -> (Tensor[(882), float64],) {
  @func_11322() /* ty=(Tensor[(882), float64],) */
}

def @func_9358(%var_9356: Tensor[(39, 13), float64], %var_9357: Tensor[(39, 13), float64]) -> (Tensor[(39, 13), float64], Tensor[(39, 13), uint64], Tensor[(1470), float32]) {
  %165 = fn (%var_9293: Tensor[(39, 13), float64], %var_9335: Tensor[(39, 13), float64]) -> (Tensor[(39, 13), float64], Tensor[(39, 13), uint64], Tensor[(1470), float32]) {
    %142 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
    %143 = %142.2;
    %144 = cast(%var_9293, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(2), int32] */;
    %146 = cast(%143, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %148 = cast(%143, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %149 = shape_of(%var_9293, dtype="int32") /* ty=Tensor[(2), int32] */;
    %150 = cast(%var_9293, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %152 = multiply(%150, %151) /* ty=Tensor[(39, 13), float64] */;
    %153 = cast(%152, dtype="float32") /* ty=Tensor[(39, 13), float32] */;
    %154 = rsqrt(%153) /* ty=Tensor[(39, 13), float32] */;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %156 = acosh(%155) /* ty=Tensor[(39, 13), float64] */;
    %157 = cast(%var_9335, dtype="uint64") /* ty=Tensor[(39, 13), uint64] */;
    %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(2), int32] */;
    %159 = cast(%156, dtype="uint64") /* ty=Tensor[(39, 13), uint64] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %161 = @func_8863() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */;
    %162 = mod(%146, %147) /* ty=Tensor[(39, 13), float64] */;
    %163 = maximum(%159, %160) /* ty=Tensor[(39, 13), uint64] */;
    %164 = %161.2;
    (%162, %163, %164)
  };
  %165(%var_9356, %var_9357) /* ty=(Tensor[(39, 13), float64], Tensor[(39, 13), uint64], Tensor[(1470), float32]) */
}

def @func_12638() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32]) {
  @func_12636() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32]) */
}

def @func_11371() -> (Tensor[(11, 12, 4), float64],) {
  @func_11369() /* ty=(Tensor[(11, 12, 4), float64],) */
}

def @func_4926(%var_4925: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), float64], Tensor[(11, 12, 4), float64]) {
  %174 = fn (%var_4897: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), float64], Tensor[(11, 12, 4), float64]) {
    %166 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
    %167 = cast(%var_4897, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
    %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%166, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %171 = cast(%var_4897, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
    %172 = mod(%169, %170) /* ty=Tensor[(11, 12, 4), float64] */;
    %173 = sin(%171) /* ty=Tensor[(11, 12, 4), float64] */;
    (%172, %173)
  };
  %174(%var_4925) /* ty=(Tensor[(11, 12, 4), float64], Tensor[(11, 12, 4), float64]) */
}

def @func_8553() -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %180 = fn () -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
    %175 = @func_8186() /* ty=Tensor[(882), bool] */;
    %176 = cast(%175, dtype="float64") /* ty=Tensor[(882), float64] */;
    %177 = sinh(%176) /* ty=Tensor[(882), float64] */;
    %178 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
    %179 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
    (%177, %178, %179)
  };
  %180() /* ty=(Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */
}

def @func_9693(%var_9681: Tensor[(1470), float32]) -> (Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(312, 2), uint64], Tensor[(1470), float32], Tensor[(2, 336), float64]) {
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(312, 2), uint64] */, dtype="uint64") /* ty=Tensor[(312, 2), uint64] */;
  %182 = cast(%var_9681, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 336), float64] */, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %184 = reshape(%181, newshape=[4, 12, 13]) /* ty=Tensor[(4, 12, 13), uint64] */;
  %185 = reshape(%182, newshape=[7, 210]) /* ty=Tensor[(7, 210), float32] */;
  %186 = reshape(%183, newshape=[168, 4]) /* ty=Tensor[(168, 4), float64] */;
  %187 = @func_3994(%184, %185, %186) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) */;
  %188 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %189 = %187.3;
  (%188, %189, meta[relay.Constant][6] /* ty=Tensor[(312, 2), uint64] */, %var_9681, meta[relay.Constant][7] /* ty=Tensor[(2, 336), float64] */)
}

def @func_5676(%var_5636: Tensor[(672), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) {
  %190 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %191 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %192 = cast(%var_5636, dtype="float64") /* ty=Tensor[(672), float64] */;
  %193 = cast(%var_5636, dtype="float64") /* ty=Tensor[(672), float64] */;
  %194 = reshape(%192, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %195 = reshape(%193, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %196 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %197 = %190.0;
  %198 = %191.0;
  %199 = @func_2596(%194, %195) /* ty=Tensor[(7, 12, 8), float64] */;
  %200 = %196.0;
  (%197, %198, %199, %var_5636, %200)
}

def @func_10436() -> (Tensor[(14, 7, 9), bool],) {
  @func_10434() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_6706() -> (Tensor[(882), bool],) {
  @func_6704() /* ty=(Tensor[(882), bool],) */
}

def @func_2832(%var_2821: Tensor[(6, 8, 14), int32]) -> Tensor[(6, 8, 14), bool] {
  %201 = cast(%var_2821, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %202 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 8, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 8, 14), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%203, %204) /* ty=Tensor[(6, 8, 14), bool] */
}

def @func_7606() -> (Tensor[(14, 7, 9), bool],) {
  %205 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %206 = %205.0;
  (%206,)
}

def @func_10551() -> (Tensor[(11, 12, 4), float32], Tensor[(1470), float32], Tensor[(768), float64], Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %207 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %208 = cast(meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %209 = reshape(%208, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %210 = @func_8050(%209) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) */;
  %211 = @func_6158() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) */;
  %212 = @func_9957() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %213 = %207.0;
  %214 = %210.3;
  %215 = %211.0;
  %216 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  %217 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
  %218 = %212.0;
  (%213, %214, meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, %215, %216, %217, %218)
}

def @func_10850() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) {
  %219 = cast(meta[relay.Constant][10] /* ty=Tensor[(98, 9), bool] */, dtype="bool") /* ty=Tensor[(98, 9), bool] */;
  %220 = reshape(%219, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %221 = @func_7013(%220) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %222 = @func_6473() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
  %223 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %224 = %221.0;
  %225 = %222.2;
  (%223, %224, meta[relay.Constant][10] /* ty=Tensor[(98, 9), bool] */, %225)
}

def @func_10626() -> Tensor[(14, 7, 9), bool] {
  @func_10624() /* ty=Tensor[(14, 7, 9), bool] */
}

def @func_8737() -> (Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) {
  @func_8735() /* ty=(Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) */
}

def @func_4727() -> Tensor[(11, 12, 4), float32] {
  @func_4372() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_6865() -> Tensor[(39, 13), float64] {
  %226 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %226.2
}

def @func_9775(%var_9773: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) {
  @func_9772(%var_9773) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) */
}

def @func_11597(%var_11596: Tensor[(882), bool]) -> (Tensor[(882), int64], Tensor[(14, 7, 9), bool]) {
  %236 = fn (%var_11576: Tensor[(882), bool]) -> (Tensor[(882), int64], Tensor[(14, 7, 9), bool]) {
    %227 = @func_4850() /* ty=(Tensor[(882), bool],) */;
    %228 = %227.0;
    %229 = cast(%var_11576, dtype="int64") /* ty=Tensor[(882), int64] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(1), int32] */;
    %231 = cast(%228, dtype="int64") /* ty=Tensor[(882), int64] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), int64] */;
    %233 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %234 = bitwise_xor(%231, %232) /* ty=Tensor[(882), int64] */;
    %235 = %233.0;
    (%234, %235)
  };
  %236(%var_11596) /* ty=(Tensor[(882), int64], Tensor[(14, 7, 9), bool]) */
}

def @func_12065() -> (Tensor[(11, 12, 4), float32],) {
  %237 = @func_11409() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %238 = %237.0;
  (%238,)
}

def @func_8058() -> (Tensor[(39, 13), float64],) {
  %239 = @func_6865() /* ty=Tensor[(39, 13), float64] */;
  (%239,)
}

def @func_8313() -> (Tensor[(882), float32], Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(5, 14, 10), float32]) {
  %240 = @func_7475() /* ty=Tensor[(882), bool] */;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(882), float64] */;
  %242 = acos(%241) /* ty=Tensor[(882), float64] */;
  %243 = cast(%240, dtype="float32") /* ty=Tensor[(882), float32] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %245 = cast(%242, dtype="float32") /* ty=Tensor[(882), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), float32] */;
  %247 = cast(%242, dtype="bool") /* ty=Tensor[(882), bool] */;
  %248 = reshape(%247, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %249 = @func_6488(%248) /* ty=(Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) */;
  %250 = cast(%242, dtype="float32") /* ty=Tensor[(882), float32] */;
  %251 = tan(%250) /* ty=Tensor[(882), float32] */;
  %252 = cast(%251, dtype="bool") /* ty=Tensor[(882), bool] */;
  %253 = reshape(%252, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %254 = @func_5215(%253) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) */;
  %255 = floor_divide(%245, %246) /* ty=Tensor[(882), float32] */;
  %256 = %249.1;
  %257 = %254.3;
  (%255, %256, %251, %257)
}

def @func_8705(%var_8704: Tensor[(11, 10, 14), float32]) -> Tensor[(11, 10, 14), float32] {
  %259 = fn (%var_8692: Tensor[(11, 10, 14), float32]) -> Tensor[(11, 10, 14), float32] {
    %258 = cast(%var_8692, dtype="float32") /* ty=Tensor[(11, 10, 14), float32] */;
    tan(%258) /* ty=Tensor[(11, 10, 14), float32] */
  };
  %259(%var_8704) /* ty=Tensor[(11, 10, 14), float32] */
}

def @func_6438() -> (Tensor[(11, 12, 4), float32],) {
  @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_4963() -> (Tensor[(11, 12, 4), float32],) {
  @func_4961() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_7477() -> Tensor[(882), bool] {
  @func_7475() /* ty=Tensor[(882), bool] */
}

def @func_6966() -> (Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) {
  @func_6964() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) */
}

def @func_10018() -> (Tensor[(882), bool],) {
  %260 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %261 = %260.1;
  %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(1), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(882), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?), bool] */;
  %266 = logical_or(%264, %265) /* ty=Tensor[(882), bool] */;
  (%266,)
}

def @func_8060() -> (Tensor[(39, 13), float64],) {
  @func_8058() /* ty=(Tensor[(39, 13), float64],) */
}

def @func_8456() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) {
  @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */
}

def @func_10020() -> (Tensor[(882), bool],) {
  @func_10018() /* ty=(Tensor[(882), bool],) */
}

def @func_7091(%var_7089: Tensor[(3, 5, 6), float64], %var_7090: Tensor[(507), int64]) -> (Tensor[(3, 5, 6), float64], Tensor[(882), int16], Tensor[(507), int64]) {
  %277 = fn (%var_7070: Tensor[(3, 5, 6), float64], %var_7076: Tensor[(507), int64]) -> (Tensor[(3, 5, 6), float64], Tensor[(882), int16], Tensor[(507), int64]) {
    %267 = cast(%var_7070, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
    %268 = cast(%var_7076, dtype="int64") /* ty=Tensor[(507), int64] */;
    %269 = cast(%var_7076, dtype="int64") /* ty=Tensor[(507), int64] */;
    %270 = cast(%var_7076, dtype="bool") /* ty=Tensor[(507), bool] */;
    %271 = reshape(%268, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
    %272 = reshape(%269, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
    %273 = reshape(%270, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
    %274 = @func_2491(%271, %272, %273) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
    %275 = atanh(%267) /* ty=Tensor[(3, 5, 6), float64] */;
    %276 = %274.1;
    (%275, %276, %var_7076)
  };
  %277(%var_7089, %var_7090) /* ty=(Tensor[(3, 5, 6), float64], Tensor[(882), int16], Tensor[(507), int64]) */
}

def @func_10472() -> Tensor[(882), bool] {
  %279 = fn () -> Tensor[(882), bool] {
    %278 = @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
    %278.1
  };
  %279() /* ty=Tensor[(882), bool] */
}

def @func_2383(%var_2381: Tensor[(13, 8, 7), float64], %var_2382: Tensor[(225), int8]) -> (Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) {
  %288 = fn (%var_2362: Tensor[(13, 8, 7), float64], %var_2370: Tensor[(225), int8]) -> (Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) {
    %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 7), float64] */;
    %281 = shape_of(%var_2362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_2362, dtype="float64") /* ty=Tensor[(13, 8, 7), float64] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %284 = cast(%var_2370, dtype="int8") /* ty=Tensor[(225), int8] */;
    %285 = reshape(%284, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
    %286 = subtract(%282, %283) /* ty=Tensor[(13, 8, 7), float64] */;
    %287 = @func_517(%285) /* ty=Tensor[(5, 15, 3), int8] */;
    (%286, %287, %var_2370)
  };
  %288(%var_2381, %var_2382) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */
}

def @func_1463(%var_1461: Tensor[(882), bool]) -> (Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  @func_1460(%var_1461) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */
}

def @func_1403(%var_1402: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), bool],) {
  %294 = fn (%var_1383: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), bool],) {
    %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 7, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
    %290 = shape_of(%var_1383, dtype="int32") /* ty=Tensor[(3), int32] */;
    %291 = cast(%var_1383, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %293 = logical_and(%291, %292) /* ty=Tensor[(14, 7, 9), bool] */;
    (%293,)
  };
  %294(%var_1402) /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_10624() -> Tensor[(14, 7, 9), bool] {
  %295 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %295.0
}

def @func_8809(%var_8797: Tensor[(1470), float32]) -> (Tensor[(39, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(39, 13), float64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %297 = erf(%296) /* ty=Tensor[(39, 13), float64] */;
  %298 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %299 = %298.0;
  %300 = cast(meta[relay.Constant][14] /* ty=Tensor[(39, 13), float64] */, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %304 = greater(%302, %303) /* ty=Tensor[(39, 13), bool] */;
  %305 = cast(%304, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %306 = shape_of(%297, dtype="int32") /* ty=Tensor[(2), int32] */;
  %307 = cast(%297, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %309 = cast(%var_8797, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %310 = reshape(%309, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %311 = logical_or(%307, %308) /* ty=Tensor[(39, 13), bool] */;
  %312 = @func_3486(%310) /* ty=Tensor[(14, 7, 15), float32] */;
  (%311, %312, %var_8797)
}

def @func_4874() -> (Tensor[(14, 7, 9), bool],) {
  %315 = fn () -> (Tensor[(14, 7, 9), bool],) {
    %313 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
    %314 = %313.3;
    (%314,)
  };
  %315() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_7608() -> (Tensor[(14, 7, 9), bool],) {
  @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_9663() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) {
  %322 = fn () -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) {
    %316 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %317 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
    %318 = cast(%317, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
    %319 = %316.0;
    %320 = asinh(%318) /* ty=Tensor[(14, 7, 9), float32] */;
    %321 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
    (%319, %320, %321)
  };
  %322() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */
}

def @func_9805(%var_9797: Tensor[(8, 84), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) {
  %323 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %324 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 84), float64] */, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %325 = reshape(%324, newshape=[2, 336]) /* ty=Tensor[(2, 336), float64] */;
  %326 = @func_4622(%325) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) */;
  %327 = cast(%var_9797, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %328 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(8, 84), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 84), float64] */, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %331 = %323.0;
  %332 = %326.0;
  %333 = left_shift(%329, %330) /* ty=Tensor[(8, 84), int32] */;
  (%331, %332, %333)
}

def @func_11916() -> (Tensor[(882), bool],) {
  @func_11914() /* ty=(Tensor[(882), bool],) */
}

def @func_12556() -> (Tensor[(11, 12, 4), bool],) {
  %336 = fn () -> (Tensor[(11, 12, 4), bool],) {
    %334 = @func_8735() /* ty=(Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) */;
    %335 = %334.2;
    (%335,)
  };
  %336() /* ty=(Tensor[(11, 12, 4), bool],) */
}

def @func_11813() -> (Tensor[(11, 12, 4), float32], Tensor[(882), bool], Tensor[(11, 12, 4), float32]) {
  %337 = @func_11760() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(882), bool]) */;
  %338 = @func_4961() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %339 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  %340 = %337.1;
  %341 = %338.0;
  (%339, %340, %341)
}

def @func_6313(%var_6184: Tensor[(14, 7, 9), bool], %var_6273: Tensor[(64, 12), float64]) -> (Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) {
  %342 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %343 = %342.0;
  %344 = cast(%var_6184, dtype="uint16") /* ty=Tensor[(14, 7, 9), uint16] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="uint16") /* ty=Tensor[(14, 7, 9), uint16] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %348 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %349 = cast(meta[relay.Constant][17] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %350 = cast(meta[relay.Constant][18] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %351 = reshape(%348, newshape=[4, 12, 13]) /* ty=Tensor[(4, 12, 13), uint64] */;
  %352 = reshape(%349, newshape=[7, 210]) /* ty=Tensor[(7, 210), float32] */;
  %353 = reshape(%350, newshape=[168, 4]) /* ty=Tensor[(168, 4), float64] */;
  %354 = @func_3994(%351, %352, %353) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) */;
  %355 = cast(meta[relay.Constant][18] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %356 = reshape(%355, newshape=[2, 336]) /* ty=Tensor[(2, 336), float64] */;
  %357 = @func_4622(%356) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) */;
  %358 = cast(%var_6273, dtype="float64") /* ty=Tensor[(64, 12), float64] */;
  %359 = reshape(%358, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %360 = @func_3675(%359) /* ty=(Tensor[(8, 8, 12), float64],) */;
  %361 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 26), uint64] */, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %362 = asin(%361) /* ty=Tensor[(24, 26), float32] */;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %364 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %365 = %364.1;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %367 = subtract(%346, %347) /* ty=Tensor[(14, 7, 9), uint16] */;
  %368 = %354.2;
  %369 = %357.1;
  %370 = %360.0;
  %371 = erf(%363) /* ty=Tensor[(24, 26), float32] */;
  %372 = tan(%366) /* ty=Tensor[(5, 15, 3), float32] */;
  (%367, %368, meta[relay.Constant][17] /* ty=Tensor[(1470), float32] */, meta[relay.Constant][18] /* ty=Tensor[(672), float64] */, %369, %370, %var_6273, %371, %372)
}

def @func_6408() -> (Tensor[(14, 7, 9), bool],) {
  %375 = fn () -> (Tensor[(14, 7, 9), bool],) {
    %373 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %374 = %373.0;
    (%374,)
  };
  %375() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_10783() -> (Tensor[(11, 12, 4), float32],) {
  %377 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %376 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
    (%376,)
  };
  %377() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_7908() -> (Tensor[(14, 7, 9), bool],) {
  @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_12674() -> Tensor[(882), bool] {
  @func_12672() /* ty=Tensor[(882), bool] */
}

def @func_10280() -> Tensor[(11, 12, 4), float32] {
  @func_10278() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_12146() -> Tensor[(700), float32] {
  %379 = fn () -> Tensor[(700), float32] {
    %378 = @func_9408() /* ty=(Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) */;
    %378.0
  };
  %379() /* ty=Tensor[(700), float32] */
}

def @func_520(%var_518: Tensor[(5, 15, 3), int8]) -> Tensor[(5, 15, 3), int8] {
  @func_517(%var_518) /* ty=Tensor[(5, 15, 3), int8] */
}

def @func_5571(%var_5568: Tensor[(1, 1, 13), float64], %var_5569: Tensor[(728), float64], %var_5570: Tensor[(882), bool]) -> (Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) {
  @func_5566(%var_5568, %var_5569, %var_5570) /* ty=(Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) */
}

def @func_7016(%var_7014: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  @func_7013(%var_7014) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */
}

def @func_10615() -> (Tensor[(14, 7, 9), float64], Tensor[(700), float32], Tensor[(364, 2), float64]) {
  @func_10613() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(700), float32], Tensor[(364, 2), float64]) */
}

def @func_5246() -> Tensor[(11, 12, 4), float32] {
  %380 = fn () -> Tensor[(11, 12, 4), float32] {
    @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
  };
  %380() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10089() -> (Tensor[(11, 12, 4), float32], Tensor[(225), int8], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 15), float32], Tensor[(5, 15, 3), float32]) {
  %381 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %382 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %383 = reshape(%382, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %384 = @func_9772(%383) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 9), bool]) */;
  %385 = @func_8863() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */;
  %386 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %387 = reshape(%386, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %388 = @func_598(%387) /* ty=(Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) */;
  %389 = %388.2;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %391 = %381.0;
  %392 = %384.1;
  %393 = %385.1;
  %394 = erf(%390) /* ty=Tensor[(5, 15, 3), float32] */;
  (%391, meta[relay.Constant][19] /* ty=Tensor[(225), int8] */, %392, meta[relay.Constant][20] /* ty=Tensor[(672), int32] */, %393, %394)
}

def @func_10241(%var_10225: Tensor[(48, 2), float64]) -> Tensor[(48, 2), bool] {
  %395 = @func_9920() /* ty=(Tensor[(882), float32], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %396 = %395.2;
  %397 = cast(%var_10225, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(2), int32] */;
  %399 = cast(%396, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%399, %400) /* ty=Tensor[(48, 2), bool] */
}

def @func_11495(%var_11493: Tensor[(882), bool]) -> (Tensor[(882), int32],) {
  @func_11492(%var_11493) /* ty=(Tensor[(882), int32],) */
}

def @func_6389(%var_6388: Tensor[(768), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(672), float64], Tensor[(768), float64]) {
  %409 = fn (%var_6379: Tensor[(768), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(672), float64], Tensor[(768), float64]) {
    %401 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %402 = %401.0;
    %403 = cast(%402, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
    %404 = cast(%var_6379, dtype="float64") /* ty=Tensor[(768), float64] */;
    %405 = reshape(%403, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
    %406 = reshape(%404, newshape=[64, 12]) /* ty=Tensor[(64, 12), float64] */;
    %407 = @func_6313(%405, %406) /* ty=(Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) */;
    %408 = %407.3;
    (%402, %408, %var_6379)
  };
  %409(%var_6388) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(672), float64], Tensor[(768), float64]) */
}

def @func_9262() -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), float32]) {
  @func_9260() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), float32]) */
}

def @func_11534() -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(39, 13), float64], Tensor[(14, 7, 9), float32]) {
  @func_11532() /* ty=(Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(39, 13), float64], Tensor[(14, 7, 9), float32]) */
}

def @func_11087() -> Tensor[(14, 7, 9), bool] {
  %411 = fn () -> Tensor[(14, 7, 9), bool] {
    %410 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %410.0
  };
  %411() /* ty=Tensor[(14, 7, 9), bool] */
}

def @func_7013(%var_7007: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %412 = cast(%var_7007, dtype="bool") /* ty=Tensor[(882), bool] */;
  %413 = reshape(%412, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %414 = @func_1401(%413) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %415 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %416 = %414.0;
  (%415, %416, %var_7007)
}

def @func_11983() -> Tensor[(11, 12, 4), float32] {
  %417 = fn () -> Tensor[(11, 12, 4), float32] {
    @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
  };
  %417() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_9410() -> (Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) {
  @func_9408() /* ty=(Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) */
}

def @func_6714() -> (Tensor[(14, 7, 9), bool],) {
  @func_6712() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_9988() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  @func_9986() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */
}

def @func_11098() -> (Tensor[(225), int8],) {
  %420 = fn () -> (Tensor[(225), int8],) {
    %418 = @func_8745() /* ty=(Tensor[(225), int8],) */;
    %419 = %418.0;
    (%419,)
  };
  %420() /* ty=(Tensor[(225), int8],) */
}

def @func_7475() -> Tensor[(882), bool] {
  %421 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %421.0
}

def @func_6488(%var_6477: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
  %422 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %423 = %422.0;
  %424 = cast(%var_6477, dtype="int8") /* ty=Tensor[(14, 7, 9), int8] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int8") /* ty=Tensor[(14, 7, 9), int8] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %428 = cast(meta[relay.Constant][21] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %429 = reshape(%428, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %430 = @func_5676(%429) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) */;
  %431 = bitwise_and(%426, %427) /* ty=Tensor[(14, 7, 9), int8] */;
  %432 = %430.1;
  (%431, %432, meta[relay.Constant][21] /* ty=Tensor[(672), float64] */)
}

def @func_8365() -> Tensor[(14, 7, 9), float32] {
  @func_8363() /* ty=Tensor[(14, 7, 9), float32] */
}

def @func_7045() -> Tensor[(882), bool] {
  %434 = fn () -> Tensor[(882), bool] {
    %433 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
    %433.2
  };
  %434() /* ty=Tensor[(882), bool] */
}

def @func_12320() -> (Tensor[(11, 12, 4), float32],) {
  %437 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %435 = @func_11652() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %436 = %435.0;
    (%436,)
  };
  %437() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_4850() -> (Tensor[(882), bool],) {
  %438 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %439 = %438.2;
  (%439,)
}

def @func_9986() -> (Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %440 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %441 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %442 = %440.0;
  %443 = %441.1;
  (%442, %443)
}

def @func_11753() -> (Tensor[(11, 12, 4), float32],) {
  %445 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %444 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
    (%444,)
  };
  %445() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_9959() -> (Tensor[(11, 12, 4), float32],) {
  @func_9957() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_12516() -> (Tensor[(98, 9), float64], Tensor[(1, 8, 12), float64], Tensor[(507), int64], Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(364, 2), bool]) {
  %446 = @func_10850() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) */;
  %447 = %446.2;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(98, 9), float64] */;
  %449 = cast(meta[relay.Constant][22] /* ty=Tensor[(507), int64] */, dtype="int64") /* ty=Tensor[(507), int64] */;
  %450 = cast(meta[relay.Constant][22] /* ty=Tensor[(507), int64] */, dtype="int64") /* ty=Tensor[(507), int64] */;
  %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(507), int64] */, dtype="bool") /* ty=Tensor[(507), bool] */;
  %452 = reshape(%449, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %453 = reshape(%450, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
  %454 = reshape(%451, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
  %455 = @func_2491(%452, %453, %454) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
  %456 = cast(meta[relay.Constant][23] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %457 = cast(meta[relay.Constant][24] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %458 = reshape(%456, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %459 = reshape(%457, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %460 = @func_2380(%458, %459) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %461 = cast(meta[relay.Constant][23] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %462 = log10(%461) /* ty=Tensor[(364, 2), float64] */;
  %463 = cast(meta[relay.Constant][23] /* ty=Tensor[(364, 2), float64] */, dtype="bool") /* ty=Tensor[(364, 2), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(364, 2), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %467 = cos(%448) /* ty=Tensor[(98, 9), float64] */;
  %468 = %455.2;
  %469 = %460.1;
  %470 = greater_equal(%465, %466) /* ty=Tensor[(364, 2), bool] */;
  (%467, %468, meta[relay.Constant][22] /* ty=Tensor[(507), int64] */, %469, meta[relay.Constant][24] /* ty=Tensor[(225), int8] */, %470)
}

def @func_4374() -> Tensor[(11, 12, 4), float32] {
  @func_4372() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_6038(%var_6002: Tensor[(14, 7, 9), float64]) -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) {
  %471 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %472 = %471.0;
  %473 = cast(%var_6002, dtype="uint32") /* ty=Tensor[(14, 7, 9), uint32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="uint32") /* ty=Tensor[(14, 7, 9), uint32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %477 = right_shift(%475, %476) /* ty=Tensor[(14, 7, 9), uint32] */;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %479 = cast(%472, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %480 = reshape(%479, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %481 = @func_1460(%480) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %482 = sqrt(%478) /* ty=Tensor[(14, 7, 9), float32] */;
  %483 = %481.1;
  (%482, %483)
}

def @func_11532() -> (Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(39, 13), float64], Tensor[(14, 7, 9), float32]) {
  %484 = @func_7287() /* ty=(Tensor[(882), float64],) */;
  %485 = @func_10782() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %486 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %487 = %484.0;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(882), float64] */;
  %489 = reshape(%488, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %490 = @func_6038(%489) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
  %491 = %485.0;
  %492 = %486.0;
  %493 = %490.0;
  (%487, %491, %492, %493)
}

def @func_5055() -> (Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) {
  %511 = fn () -> (Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) {
    %494 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %495 = %494.0;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
    %497 = cast(meta[relay.Constant][25] /* ty=Tensor[(39, 13), int64] */, dtype="int64") /* ty=Tensor[(39, 13), int64] */;
    %498 = cast(meta[relay.Constant][25] /* ty=Tensor[(39, 13), int64] */, dtype="int64") /* ty=Tensor[(39, 13), int64] */;
    %499 = cast(meta[relay.Constant][25] /* ty=Tensor[(39, 13), int64] */, dtype="bool") /* ty=Tensor[(39, 13), bool] */;
    %500 = reshape(%497, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
    %501 = reshape(%498, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int64] */;
    %502 = reshape(%499, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), bool] */;
    %503 = @func_2491(%500, %501, %502) /* ty=(Tensor[(13, 3, 13), int8], Tensor[(882), int16], Tensor[(1, 8, 12), float64], Tensor[(48, 2), float64], Tensor[(882), bool]) */;
    %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(39, 13), int64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %505 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(39, 13), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %506 = cast(meta[relay.Constant][25] /* ty=Tensor[(39, 13), int64] */, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %508 = tan(%496) /* ty=Tensor[(14, 7, 9), float64] */;
    %509 = %503.3;
    %510 = subtract(%506, %507) /* ty=Tensor[(39, 13), float64] */;
    (%508, %509, %510)
  };
  %511() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */
}

def @func_8186() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_12518() -> (Tensor[(98, 9), float64], Tensor[(1, 8, 12), float64], Tensor[(507), int64], Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(364, 2), bool]) {
  @func_12516() /* ty=(Tensor[(98, 9), float64], Tensor[(1, 8, 12), float64], Tensor[(507), int64], Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(364, 2), bool]) */
}

def @func_11852(%var_11851: Tensor[(225), int8]) -> (Tensor[(882), bool], Tensor[(15, 15, 2), float64], Tensor[(225), int8]) {
  %517 = fn (%var_11848: Tensor[(225), int8]) -> (Tensor[(882), bool], Tensor[(15, 15, 2), float64], Tensor[(225), int8]) {
    %512 = cast(%var_11848, dtype="int8") /* ty=Tensor[(225), int8] */;
    %513 = reshape(%512, newshape=[225]) /* ty=Tensor[(225), int8] */;
    %514 = @func_598(%513) /* ty=(Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) */;
    %515 = @func_6771() /* ty=Tensor[(882), bool] */;
    %516 = %514.5;
    (%515, %516, %var_11848)
  };
  %517(%var_11851) /* ty=(Tensor[(882), bool], Tensor[(15, 15, 2), float64], Tensor[(225), int8]) */
}

def @func_5305() -> Tensor[(11, 12, 4), float32] {
  @func_5303() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_11042(%var_11018: Tensor[(11, 12, 4), float32]) -> Tensor[(11, 12, 4), bool] {
  %518 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %519 = %518.0;
  %520 = cast(%var_11018, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%522, %523) /* ty=Tensor[(11, 12, 4), bool] */
}

def @func_10569() -> (Tensor[(882), bool],) {
  @func_10567() /* ty=(Tensor[(882), bool],) */
}

def @func_7519() -> Tensor[(14, 7, 9), bool] {
  %525 = fn () -> Tensor[(14, 7, 9), bool] {
    %524 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
    %524.1
  };
  %525() /* ty=Tensor[(14, 7, 9), bool] */
}

def @func_9696(%var_9694: Tensor[(1470), float32]) -> (Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(312, 2), uint64], Tensor[(1470), float32], Tensor[(2, 336), float64]) {
  @func_9693(%var_9694) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(312, 2), uint64], Tensor[(1470), float32], Tensor[(2, 336), float64]) */
}

def @func_4625(%var_4623: Tensor[(2, 336), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) {
  @func_4622(%var_4623) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) */
}

def @func_10968() -> Tensor[(11, 12, 4), float32] {
  @func_10966() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_11409() -> (Tensor[(11, 12, 4), float32],) {
  %526 = @func_10373() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %527 = %526.0;
  (%527,)
}

def @func_7184(%var_7183: Tensor[(672), int32]) -> (Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) {
  %539 = fn (%var_7149: Tensor[(672), int32]) -> (Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) {
    %528 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
    %529 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %530 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
    %531 = cast(%var_7149, dtype="int32") /* ty=Tensor[(672), int32] */;
    %532 = reshape(%531, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
    %533 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
    %534 = tan(%528) /* ty=Tensor[(10, 6, 5), float32] */;
    %535 = sin(%529) /* ty=Tensor[(10, 6, 5), float64] */;
    %536 = log10(%530) /* ty=Tensor[(10, 6, 5), float32] */;
    %537 = @func_2832(%532) /* ty=Tensor[(6, 8, 14), bool] */;
    %538 = %533.0;
    (%534, %535, %536, %537, %var_7149, %538)
  };
  %539(%var_7183) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */
}

def @func_7662(%var_7661: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool], Tensor[(728), float64], Tensor[(13), float64], Tensor[(728), float64]) {
  %557 = fn (%var_7628: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool], Tensor[(728), float64], Tensor[(13), float64], Tensor[(728), float64]) {
    %540 = @func_5861() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %541 = %540.0;
    %542 = cast(%var_7628, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
    %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%541, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %546 = @func_7606() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %547 = cast(meta[relay.Constant][28] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
    %548 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %549 = %546.0;
    %550 = cast(%549, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
    %551 = reshape(%547, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), float64] */;
    %552 = reshape(%548, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %553 = reshape(%550, newshape=[882]) /* ty=Tensor[(882), bool] */;
    %554 = @func_5566(%551, %552, %553) /* ty=(Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) */;
    %555 = less(%544, %545) /* ty=Tensor[(11, 12, 4), bool] */;
    %556 = %554.1;
    (%555, %549, %556, meta[relay.Constant][28] /* ty=Tensor[(13), float64] */, meta[relay.Constant][29] /* ty=Tensor[(728), float64] */)
  };
  %557(%var_7661) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool], Tensor[(728), float64], Tensor[(13), float64], Tensor[(728), float64]) */
}

def @func_9808(%var_9806: Tensor[(8, 84), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) {
  @func_9805(%var_9806) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) */
}

def @func_12672() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_11815() -> (Tensor[(11, 12, 4), float32], Tensor[(882), bool], Tensor[(11, 12, 4), float32]) {
  @func_11813() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(882), bool], Tensor[(11, 12, 4), float32]) */
}

def @func_600(%var_599: Tensor[(225), int8]) -> (Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) {
  %579 = fn (%var_558: Tensor[(225), int8]) -> (Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) {
    %558 = cast(%var_558, dtype="int8") /* ty=Tensor[(225), int8] */;
    %559 = reshape(%558, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
    %560 = cast(%var_558, dtype="int8") /* ty=Tensor[(225), int8] */;
    %561 = reshape(%560, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
    %562 = @func_517(%561) /* ty=Tensor[(5, 15, 3), int8] */;
    %563 = cast(%562, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
    %564 = reshape(%563, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
    %565 = @func_517(%564) /* ty=Tensor[(5, 15, 3), int8] */;
    %566 = cast(%565, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
    %567 = reshape(%566, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), int8] */;
    %568 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
    %569 = acosh(%568) /* ty=Tensor[(15, 15, 2), float64] */;
    %570 = cast(%569, dtype="float32") /* ty=Tensor[(15, 15, 2), float32] */;
    %571 = asinh(%570) /* ty=Tensor[(15, 15, 2), float32] */;
    %572 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %576 = @func_517(%559) /* ty=Tensor[(5, 15, 3), int8] */;
    %577 = @func_517(%567) /* ty=Tensor[(5, 15, 3), int8] */;
    %578 = floor_divide(%574, %575) /* ty=Tensor[(15, 15, 2), float64] */;
    (%576, %var_558, %562, %565, %577, %578)
  };
  %579(%var_599) /* ty=(Tensor[(5, 15, 3), int8], Tensor[(225), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(5, 15, 3), int8], Tensor[(15, 15, 2), float64]) */
}

def @func_5398() -> (Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) {
  %580 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %582 = reshape(%580, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %583 = reshape(%581, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %584 = @func_2380(%582, %583) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %585 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %586 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  %587 = %584.1;
  %588 = %585.0;
  (%586, %587, meta[relay.Constant][31] /* ty=Tensor[(7, 104), float64] */, meta[relay.Constant][32] /* ty=Tensor[(225), int8] */, %588)
}

def @func_6867() -> Tensor[(39, 13), float64] {
  @func_6865() /* ty=Tensor[(39, 13), float64] */
}

def @func_8745() -> (Tensor[(225), int8],) {
  %589 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %590 = %589.3;
  (%590,)
}

def @func_6712() -> (Tensor[(14, 7, 9), bool],) {
  %591 = @func_5273() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %592 = %591.0;
  (%592,)
}

def @func_6772() -> Tensor[(882), bool] {
  %601 = fn () -> Tensor[(882), bool] {
    %593 = @func_6704() /* ty=(Tensor[(882), bool],) */;
    %594 = %593.0;
    %595 = cast(%594, dtype="float64") /* ty=Tensor[(882), float64] */;
    %596 = rsqrt(%595) /* ty=Tensor[(882), float64] */;
    %597 = cast(%594, dtype="bool") /* ty=Tensor[(882), bool] */;
    %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(1), int32] */;
    %599 = cast(%596, dtype="bool") /* ty=Tensor[(882), bool] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), bool] */;
    less_equal(%599, %600) /* ty=Tensor[(882), bool] */
  };
  %601() /* ty=Tensor[(882), bool] */
}

def @func_2147(%var_2146: Tensor[(1, 8, 12), float64]) -> Tensor[(1, 8, 12), float64] {
  %603 = fn (%var_2140: Tensor[(1, 8, 12), float64]) -> Tensor[(1, 8, 12), float64] {
    %602 = cast(%var_2140, dtype="float64") /* ty=Tensor[(1, 8, 12), float64] */;
    acosh(%602) /* ty=Tensor[(1, 8, 12), float64] */
  };
  %603(%var_2146) /* ty=Tensor[(1, 8, 12), float64] */
}

def @func_10181(%var_10162: Tensor[(672), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(882), float64], Tensor[(6, 8, 14), bool], Tensor[(672), int32]) {
  %604 = @func_8552() /* ty=(Tensor[(882), float64], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */;
  %605 = cast(%var_10162, dtype="int32") /* ty=Tensor[(672), int32] */;
  %606 = reshape(%605, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
  %607 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %608 = %604.0;
  %609 = @func_2832(%606) /* ty=Tensor[(6, 8, 14), bool] */;
  (%607, %608, %609, %var_10162)
}

def @func_8687(%var_8672: Tensor[(14, 7, 13), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(1, 8, 12), float64], Tensor[(4, 24), float64]) {
  %610 = cast(%var_8672, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %611 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %612 = reshape(%611, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %613 = asin(%610) /* ty=Tensor[(14, 7, 13), float32] */;
  %614 = @func_2145(%612) /* ty=Tensor[(1, 8, 12), float64] */;
  (%613, %614, meta[relay.Constant][33] /* ty=Tensor[(4, 24), float64] */)
}

def @func_10350() -> (Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
  %621 = fn () -> (Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
    %615 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
    %616 = cast(meta[relay.Constant][34] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %617 = reshape(%616, newshape=[8, 84]) /* ty=Tensor[(8, 84), float64] */;
    %618 = @func_9805(%617) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(8, 84), int32]) */;
    %619 = %615.1;
    %620 = %618.1;
    (%619, %620, meta[relay.Constant][34] /* ty=Tensor[(672), float64] */)
  };
  %621() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) */
}

def @func_6159() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) {
  %630 = fn () -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) {
    %622 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
    %623 = cast(%622, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
    %624 = reshape(%623, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
    %625 = @func_6123(%624) /* ty=(Tensor[(11, 12, 4), bool],) */;
    %626 = @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %627 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
    %628 = %625.0;
    %629 = %626.0;
    (%622, %627, %628, %629)
  };
  %630() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) */
}

def @func_4776() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) {
  @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */
}

def @func_7367(%var_7365: Tensor[(336, 2), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) {
  @func_7364(%var_7365) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) */
}

def @func_5711() -> (Tensor[(14, 7, 9), bool],) {
  %631 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %632 = %631.0;
  (%632,)
}

def @func_6609(%var_6607: Tensor[(225), int8]) -> (Tensor[(11, 12, 4), float32], Tensor[(13, 8, 7), float64], Tensor[(728), float64], Tensor[(225), int8]) {
  @func_6606(%var_6607) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(13, 8, 7), float64], Tensor[(728), float64], Tensor[(225), int8]) */
}

def @func_6474() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  %642 = fn () -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
    %633 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
    %634 = %633.0;
    %635 = cast(%634, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
    %636 = reshape(%635, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
    %637 = @func_6123(%636) /* ty=(Tensor[(11, 12, 4), bool],) */;
    %638 = %637.0;
    %639 = cast(%638, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
    %640 = exp(%639) /* ty=Tensor[(11, 12, 4), float32] */;
    %641 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
    (%634, %640, %641)
  };
  %642() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */
}

def @func_10392() -> Tensor[(11, 12, 4), float32] {
  @func_5303() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10857() -> Tensor[(882), bool] {
  @func_10855() /* ty=Tensor[(882), bool] */
}

def @func_5524() -> (Tensor[(11, 12, 4), float32],) {
  %643 = @func_5245() /* ty=Tensor[(11, 12, 4), float32] */;
  (%643,)
}

def @func_3994(%var_3918: Tensor[(4, 12, 13), uint64], %var_3956: Tensor[(7, 210), float32], %var_3960: Tensor[(168, 4), float64]) -> (Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) {
  %644 = cast(%var_3918, dtype="uint64") /* ty=Tensor[(4, 12, 13), uint64] */;
  %645 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="uint64") /* ty=Tensor[(4, 12, 13), uint64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %648 = logical_xor(%646, %647) /* ty=Tensor[(4, 12, 13), uint64] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  %650 = cast(%var_3956, dtype="float32") /* ty=Tensor[(7, 210), float32] */;
  %651 = reshape(%650, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %652 = cast(%var_3960, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
  %653 = cast(%var_3960, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
  %654 = reshape(%652, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %655 = reshape(%653, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %656 = sqrt(%649) /* ty=Tensor[(4, 12, 13), float64] */;
  %657 = @func_3486(%651) /* ty=Tensor[(14, 7, 15), float32] */;
  %658 = @func_2596(%654, %655) /* ty=Tensor[(7, 12, 8), float64] */;
  (%656, %657, %var_3956, %658, %var_3960)
}

def @func_8863() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  %659 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %660 = cast(meta[relay.Constant][36] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %661 = reshape(%660, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %662 = %659.0;
  %663 = @func_3486(%661) /* ty=Tensor[(14, 7, 15), float32] */;
  (%662, %663, meta[relay.Constant][36] /* ty=Tensor[(1470), float32] */)
}

def @func_12278() -> (Tensor[(14, 7, 9), bool],) {
  %665 = fn () -> (Tensor[(14, 7, 9), bool],) {
    %664 = @func_7518() /* ty=Tensor[(14, 7, 9), bool] */;
    (%664,)
  };
  %665() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_4622(%var_4614: Tensor[(2, 336), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(2, 336), float64], Tensor[(7, 12, 8), float64]) {
  %666 = cast(%var_4614, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %667 = cast(%var_4614, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %668 = reshape(%666, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %669 = reshape(%667, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %670 = @func_2596(%668, %669) /* ty=Tensor[(7, 12, 8), float64] */;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %672 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %673 = log(%671) /* ty=Tensor[(7, 12, 8), float64] */;
  (%672, %var_4614, %673)
}

def @func_12408() -> Tensor[(39, 13), uint16] {
  %674 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %675 = %674.0;
  %676 = cast(meta[relay.Constant][37] /* ty=Tensor[(39, 13), float64] */, dtype="uint16") /* ty=Tensor[(39, 13), uint16] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(2), int32] */;
  %678 = cast(%675, dtype="uint16") /* ty=Tensor[(39, 13), uint16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  bitwise_or(%678, %679) /* ty=Tensor[(39, 13), uint16] */
}

def @func_1139(%var_1138: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64],) {
  %682 = fn (%var_1119: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64],) {
    %680 = cast(%var_1119, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
    %681 = atan(%680) /* ty=Tensor[(4, 5, 11), float64] */;
    (%681,)
  };
  %682(%var_1138) /* ty=(Tensor[(4, 5, 11), float64],) */
}

def @func_8315() -> (Tensor[(882), float32], Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(5, 14, 10), float32]) {
  @func_8313() /* ty=(Tensor[(882), float32], Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(5, 14, 10), float32]) */
}

def @func_2600(%var_2598: Tensor[(7, 12, 8), float64], %var_2599: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  @func_2596(%var_2598, %var_2599) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_12421() -> Tensor[(11, 12, 4), float32] {
  %684 = fn () -> Tensor[(11, 12, 4), float32] {
    %683 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
    %683.2
  };
  %684() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10933() -> (Tensor[(14, 7, 9), float32], Tensor[(220), float32], Tensor[(768), float64]) {
  %685 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %687 = reshape(%686, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %688 = @func_8050(%687) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) */;
  %689 = %685.0;
  %690 = %688.6;
  (%689, %690, meta[relay.Constant][38] /* ty=Tensor[(768), float64] */)
}

def @func_9583(%var_9581: Tensor[(700), float32], %var_9582: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(672, 700), float32], Tensor[(672, 700), bool]) {
  %710 = fn (%var_9536: Tensor[(700), float32], %var_9537: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(672, 700), float32], Tensor[(672, 700), bool]) {
    %691 = cast(%var_9536, dtype="float32") /* ty=Tensor[(700), float32] */;
    %692 = cast(%var_9537, dtype="bool") /* ty=Tensor[(882), bool] */;
    %693 = reshape(%691, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
    %694 = reshape(%692, newshape=[882]) /* ty=Tensor[(882), bool] */;
    %695 = @func_2780(%693, %694) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
    %696 = cast(meta[relay.Constant][39] /* ty=Tensor[(672, 1), float64] */, dtype="float64") /* ty=Tensor[(672, 1), float64] */;
    %697 = reshape(%696, newshape=[336, 2]) /* ty=Tensor[(336, 2), float64] */;
    %698 = @func_7364(%697) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) */;
    %699 = cast(%var_9536, dtype="float32") /* ty=Tensor[(700), float32] */;
    %700 = sin(%699) /* ty=Tensor[(700), float32] */;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(700), float32] */;
    %702 = cast(meta[relay.Constant][39] /* ty=Tensor[(672, 1), float64] */, dtype="float32") /* ty=Tensor[(672, 1), float32] */;
    %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(672, 1), float64] */, dtype="bool") /* ty=Tensor[(672, 1), bool] */;
    %704 = cast(%700, dtype="bool") /* ty=Tensor[(700), bool] */;
    %705 = @func_5303() /* ty=Tensor[(11, 12, 4), float32] */;
    %706 = %695.0;
    %707 = %698.4;
    %708 = add(%701, %702) /* ty=Tensor[(672, 700), float32] */;
    %709 = logical_and(%703, %704) /* ty=Tensor[(672, 700), bool] */;
    (%705, %706, %var_9537, %707, %708, %709)
  };
  %710(%var_9581, %var_9582) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(672, 700), float32], Tensor[(672, 700), bool]) */
}

def @func_9957() -> (Tensor[(11, 12, 4), float32],) {
  %711 = @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */;
  %712 = %711.4;
  (%712,)
}

def @func_8690(%var_8688: Tensor[(14, 7, 13), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(1, 8, 12), float64], Tensor[(4, 24), float64]) {
  @func_8687(%var_8688) /* ty=(Tensor[(14, 7, 13), float32], Tensor[(1, 8, 12), float64], Tensor[(4, 24), float64]) */
}

def @func_12067() -> (Tensor[(11, 12, 4), float32],) {
  @func_12065() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_5566(%var_5547: Tensor[(1, 1, 13), float64], %var_5563: Tensor[(728), float64], %var_5564: Tensor[(882), bool]) -> (Tensor[(?, ?, 13), bool], Tensor[(728), float64], Tensor[(728), float64], Tensor[(882), bool]) {
  %713 = cast(%var_5547, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %714 = asin(%713) /* ty=Tensor[(1, 1, 13), float64] */;
  %715 = cast(%714, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %716 = shape_of(%var_5547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_5547, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %719 = right_shift(%717, %718) /* ty=Tensor[(?, ?, 13), int8] */;
  %720 = cast(%719, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %721 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%714, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = cast(%var_5563, dtype="float64") /* ty=Tensor[(728), float64] */;
  %725 = cast(%var_5564, dtype="bool") /* ty=Tensor[(882), bool] */;
  %726 = reshape(%724, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %727 = reshape(%725, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %728 = @func_4535(%726, %727) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %729 = not_equal(%722, %723) /* ty=Tensor[(?, ?, 13), bool] */;
  %730 = %728.1;
  (%729, %730, %var_5563, %var_5564)
}

def @func_10613() -> (Tensor[(14, 7, 9), float64], Tensor[(700), float32], Tensor[(364, 2), float64]) {
  %731 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %732 = cast(meta[relay.Constant][40] /* ty=Tensor[(364, 2), float64] */, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %733 = %731.0;
  %734 = cast(%733, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %735 = reshape(%732, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %736 = reshape(%734, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %737 = @func_4535(%735, %736) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %738 = %737.6;
  (%733, %738, meta[relay.Constant][40] /* ty=Tensor[(364, 2), float64] */)
}

def @func_11762() -> (Tensor[(14, 7, 9), float32], Tensor[(882), bool]) {
  @func_11760() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(882), bool]) */
}

def @func_3486(%var_3479: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  %739 = cast(%var_3479, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  log(%739) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_517(%var_506: Tensor[(5, 15, 3), int8]) -> Tensor[(5, 15, 3), int8] {
  %740 = cast(%var_506, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %741 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(5, 15, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 15, 3), int8] */, dtype="int8") /* ty=Tensor[(5, 15, 3), int8] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%742, %743) /* ty=Tensor[(5, 15, 3), int8] */
}

def @func_2784(%var_2782: Tensor[(5, 14, 10), float32], %var_2783: Tensor[(882), bool]) -> (Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  @func_2780(%var_2782, %var_2783) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */
}

def @func_5274() -> (Tensor[(14, 7, 9), bool],) {
  %746 = fn () -> (Tensor[(14, 7, 9), bool],) {
    %744 = @func_4873() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %745 = %744.0;
    (%745,)
  };
  %746() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_3677(%var_3676: Tensor[(8, 8, 12), float64]) -> (Tensor[(8, 8, 12), float64],) {
  %749 = fn (%var_3665: Tensor[(8, 8, 12), float64]) -> (Tensor[(8, 8, 12), float64],) {
    %747 = cast(%var_3665, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
    %748 = log(%747) /* ty=Tensor[(8, 8, 12), float64] */;
    (%748,)
  };
  %749(%var_3676) /* ty=(Tensor[(8, 8, 12), float64],) */
}

def @func_11262() -> Tensor[(14, 7, 9), float64] {
  %753 = fn () -> Tensor[(14, 7, 9), float64] {
    %750 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
    %751 = %750.0;
    %752 = cast(%751, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
    sinh(%752) /* ty=Tensor[(14, 7, 9), float64] */
  };
  %753() /* ty=Tensor[(14, 7, 9), float64] */
}

def @func_4961() -> (Tensor[(11, 12, 4), float32],) {
  %754 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  (%754,)
}

def @func_9170() -> (Tensor[(11, 12, 4), float32],) {
  %757 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %755 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %756 = %755.0;
    (%756,)
  };
  %757() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_5679(%var_5677: Tensor[(672), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) {
  @func_5676(%var_5677) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), float32], Tensor[(7, 12, 8), float64], Tensor[(672), float64], Tensor[(14, 7, 9), bool]) */
}

def @func_8982() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) {
  @func_8980() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) */
}

def @func_8735() -> (Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool]) {
  %758 = @func_4850() /* ty=(Tensor[(882), bool],) */;
  %759 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %760 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %761 = %758.0;
  %762 = %759.0;
  %763 = %760.2;
  (%761, %762, %763)
}

def @func_10735(%var_10734: Tensor[(4, 168), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(10, 6, 5), float64], Tensor[(4, 168), int16], Tensor[(14, 7, 9), float32], Tensor[(6, 8, 14), bool], Tensor[(4, 168), uint32]) {
  %785 = fn (%var_10677: Tensor[(4, 168), int32]) -> (Tensor[(11, 12, 4), float32], Tensor[(10, 6, 5), float64], Tensor[(4, 168), int16], Tensor[(14, 7, 9), float32], Tensor[(6, 8, 14), bool], Tensor[(4, 168), uint32]) {
    %764 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
    %765 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(4, 168), int32] */;
    %766 = reshape(%765, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %767 = @func_7182(%766) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
    %768 = cast(%var_10677, dtype="int16") /* ty=Tensor[(4, 168), int16] */;
    %769 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %770 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 168), int32] */, dtype="int16") /* ty=Tensor[(4, 168), int16] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %772 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
    %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 168), int32] */, dtype="int32") /* ty=Tensor[(4, 168), int32] */;
    %774 = reshape(%773, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int32] */;
    %775 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 168), int32] */, dtype="uint32") /* ty=Tensor[(4, 168), uint32] */;
    %776 = shape_of(%var_10677, dtype="int32") /* ty=Tensor[(2), int32] */;
    %777 = cast(%var_10677, dtype="uint32") /* ty=Tensor[(4, 168), uint32] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %779 = %764.0;
    %780 = %767.1;
    %781 = bitwise_and(%770, %771) /* ty=Tensor[(4, 168), int16] */;
    %782 = %772.0;
    %783 = @func_2832(%774) /* ty=Tensor[(6, 8, 14), bool] */;
    %784 = minimum(%777, %778) /* ty=Tensor[(4, 168), uint32] */;
    (%779, %780, %781, %782, %783, %784)
  };
  %785(%var_10734) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(10, 6, 5), float64], Tensor[(4, 168), int16], Tensor[(14, 7, 9), float32], Tensor[(6, 8, 14), bool], Tensor[(4, 168), uint32]) */
}

def @func_5862() -> (Tensor[(11, 12, 4), float32],) {
  %788 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %786 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
    %787 = %786.0;
    (%787,)
  };
  %788() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_5848() -> Tensor[(11, 12, 4), float32] {
  %789 = fn () -> Tensor[(11, 12, 4), float32] {
    @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
  };
  %789() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_7496() -> Tensor[(11, 12, 4), float32] {
  %790 = @func_5524() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %790.0
}

def @func_10852() -> (Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) {
  @func_10850() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(98, 9), bool], Tensor[(11, 12, 4), float32]) */
}

def @func_9408() -> (Tensor[(700), float32], Tensor[(1, 728), float64], Tensor[(882), bool], Tensor[(14, 7, 9), bool], Tensor[(39, 13), float32], Tensor[(39, 13), float64]) {
  %791 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 728), float64] */, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %792 = cast(meta[relay.Constant][44] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %793 = reshape(%791, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %794 = reshape(%792, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %795 = @func_4535(%793, %794) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %796 = @func_8454() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(11, 12, 4), bool], Tensor[(528), float32]) */;
  %797 = @func_8058() /* ty=(Tensor[(39, 13), float64],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(39, 13), float32] */;
  %800 = cast(%798, dtype="float64") /* ty=Tensor[(39, 13), float64] */;
  %801 = %795.6;
  %802 = %796.0;
  %803 = log(%799) /* ty=Tensor[(39, 13), float32] */;
  %804 = log2(%800) /* ty=Tensor[(39, 13), float64] */;
  (%801, meta[relay.Constant][43] /* ty=Tensor[(1, 728), float64] */, meta[relay.Constant][44] /* ty=Tensor[(882), bool] */, %802, %803, %804)
}

def @func_12191() -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), float32]) {
  %813 = fn () -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), float32]) {
    %805 = @func_12039() /* ty=(Tensor[(14, 7, 9), float32],) */;
    %806 = %805.0;
    %807 = cast(%806, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
    %808 = reshape(%807, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
    %809 = @func_1401(%808) /* ty=(Tensor[(14, 7, 9), bool],) */;
    %810 = @func_11760() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(882), bool]) */;
    %811 = %809.0;
    %812 = %810.0;
    (%806, %811, %812)
  };
  %813() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), float32]) */
}

def @func_4774() -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) {
  %814 = cast(meta[relay.Constant][45] /* ty=Tensor[(882), bool] */, dtype="bool") /* ty=Tensor[(882), bool] */;
  %815 = reshape(%814, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %816 = @func_1401(%815) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %819 = reshape(%818, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %820 = @func_1460(%819) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %821 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %822 = %820.1;
  (%821, %817, meta[relay.Constant][45] /* ty=Tensor[(882), bool] */, %822)
}

def @func_5217(%var_5216: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) {
  %834 = fn (%var_5209: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) {
    %823 = cast(meta[relay.Constant][46] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %824 = reshape(%823, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
    %825 = @func_1137(%824) /* ty=(Tensor[(4, 5, 11), float64],) */;
    %826 = cast(meta[relay.Constant][47] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %827 = cast(%var_5209, dtype="bool") /* ty=Tensor[(882), bool] */;
    %828 = reshape(%826, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
    %829 = reshape(%827, newshape=[882]) /* ty=Tensor[(882), bool] */;
    %830 = @func_2780(%828, %829) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
    %831 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
    %832 = %825.0;
    %833 = %830.0;
    (%831, %832, meta[relay.Constant][46] /* ty=Tensor[(220), float64] */, %833, meta[relay.Constant][47] /* ty=Tensor[(700), float32] */, %var_5209)
  };
  %834(%var_5216) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) */
}

def @func_8050(%var_8021: Tensor[(2, 384), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) {
  %835 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %836 = cast(meta[relay.Constant][48] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %837 = reshape(%836, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
  %838 = @func_1137(%837) /* ty=(Tensor[(4, 5, 11), float64],) */;
  %839 = cast(meta[relay.Constant][49] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %840 = reshape(%839, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %841 = %835.0;
  %842 = cast(%841, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %843 = cast(%var_8021, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %844 = reshape(%842, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %845 = reshape(%843, newshape=[64, 12]) /* ty=Tensor[(64, 12), float64] */;
  %846 = @func_6313(%844, %845) /* ty=(Tensor[(14, 7, 9), uint16], Tensor[(7, 210), float32], Tensor[(1470), float32], Tensor[(672), float64], Tensor[(2, 336), float64], Tensor[(8, 8, 12), float64], Tensor[(64, 12), float64], Tensor[(24, 26), float32], Tensor[(5, 15, 3), float32]) */;
  %847 = cast(meta[relay.Constant][48] /* ty=Tensor[(220), float64] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %848 = %838.0;
  %849 = @func_3486(%840) /* ty=Tensor[(14, 7, 15), float32] */;
  %850 = %846.4;
  %851 = tan(%847) /* ty=Tensor[(220), float32] */;
  (%841, %848, %849, meta[relay.Constant][49] /* ty=Tensor[(1470), float32] */, %850, %var_8021, %851)
}

def @func_4539(%var_4537: Tensor[(728), float64], %var_4538: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) {
  @func_4535(%var_4537, %var_4538) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */
}

def @func_11322() -> (Tensor[(882), float64],) {
  %852 = @func_4774() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool], Tensor[(14, 7, 9), bool]) */;
  %853 = %852.2;
  %854 = cast(%853, dtype="float64") /* ty=Tensor[(882), float64] */;
  %855 = asin(%854) /* ty=Tensor[(882), float64] */;
  (%855,)
}

def @func_12041() -> (Tensor[(14, 7, 9), float32],) {
  @func_12039() /* ty=(Tensor[(14, 7, 9), float32],) */
}

def @func_12130() -> (Tensor[(11, 12, 4), float32],) {
  @func_12128() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_10320() -> (Tensor[(14, 7, 9), float32],) {
  @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */
}

def @func_10278() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_11455() -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) {
  %863 = fn () -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) {
    %856 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
    %857 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
    %858 = cast(%857, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
    %859 = reshape(%858, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
    %860 = @func_6038(%859) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
    %861 = %856.0;
    %862 = %860.1;
    (%857, %861, %862)
  };
  %863() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool], Tensor[(14, 7, 9), bool]) */
}

def @func_10935() -> (Tensor[(14, 7, 9), float32], Tensor[(220), float32], Tensor[(768), float64]) {
  @func_10933() /* ty=(Tensor[(14, 7, 9), float32], Tensor[(220), float32], Tensor[(768), float64]) */
}

def @func_12039() -> (Tensor[(14, 7, 9), float32],) {
  %864 = @func_10318() /* ty=(Tensor[(14, 7, 9), float32],) */;
  %865 = %864.0;
  (%865,)
}

def @func_8747() -> (Tensor[(225), int8],) {
  @func_8745() /* ty=(Tensor[(225), int8],) */
}

def @func_4535(%var_4449: Tensor[(728), float64], %var_4458: Tensor[(882), bool]) -> (Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) {
  %866 = cast(%var_4458, dtype="bool") /* ty=Tensor[(882), bool] */;
  %867 = reshape(%866, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %868 = @func_1460(%867) /* ty=(Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %869 = %868.0;
  %870 = cast(%var_4449, dtype="float64") /* ty=Tensor[(728), float64] */;
  %871 = cast(meta[relay.Constant][50] /* ty=Tensor[(225), int8] */, dtype="int8") /* ty=Tensor[(225), int8] */;
  %872 = reshape(%870, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %873 = reshape(%871, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %874 = @func_2380(%872, %873) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %875 = %874.2;
  %876 = cast(%869, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %877 = cast(%875, dtype="float32") /* ty=Tensor[(225), float32] */;
  %878 = cast(meta[relay.Constant][51] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %879 = cast(%var_4458, dtype="bool") /* ty=Tensor[(882), bool] */;
  %880 = reshape(%878, newshape=[5, 14, 10]) /* ty=Tensor[(5, 14, 10), float32] */;
  %881 = reshape(%879, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %882 = @func_2780(%880, %881) /* ty=(Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) */;
  %883 = cast(%869, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
  %884 = cast(meta[relay.Constant][50] /* ty=Tensor[(225), int8] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %885 = floor_mod(%883, %884) /* ty=Tensor[(2, 15, 225), float64] */;
  %886 = cast(%885, dtype="bool") /* ty=Tensor[(2, 15, 225), bool] */;
  %887 = cast(%869, dtype="bool") /* ty=Tensor[(2, 15, 1), bool] */;
  %888 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %889 = floor_divide(%876, %877) /* ty=Tensor[(2, 15, 225), float32] */;
  %890 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %891 = %882.0;
  %892 = less_equal(%886, %887) /* ty=Tensor[(2, 15, 225), bool] */;
  (%888, %var_4449, %var_4458, %889, %890, %891, meta[relay.Constant][51] /* ty=Tensor[(700), float32] */, %892)
}

def @func_4372() -> Tensor[(11, 12, 4), float32] {
  %893 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  log10(%893) /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_5713() -> (Tensor[(14, 7, 9), bool],) {
  @func_5711() /* ty=(Tensor[(14, 7, 9), bool],) */
}

def @func_6436() -> (Tensor[(11, 12, 4), float32],) {
  %894 = @func_4727() /* ty=Tensor[(11, 12, 4), float32] */;
  (%894,)
}

def @func_11653() -> (Tensor[(11, 12, 4), float32],) {
  %897 = fn () -> (Tensor[(11, 12, 4), float32],) {
    %895 = @func_8980() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(11, 12, 4), float32]) */;
    %896 = %895.4;
    (%896,)
  };
  %897() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_5139(%var_5134: Tensor[(728), float64], %var_5135: Tensor[(14, 63), bool]) -> (Tensor[(48, 2), float64], Tensor[(5, 14, 10), float32], Tensor[(728), float64], Tensor[(14, 63), bool]) {
  %898 = @func_5054() /* ty=(Tensor[(14, 7, 9), float64], Tensor[(48, 2), float64], Tensor[(39, 13), float64]) */;
  %899 = cast(%var_5134, dtype="float64") /* ty=Tensor[(728), float64] */;
  %900 = cast(%var_5135, dtype="bool") /* ty=Tensor[(14, 63), bool] */;
  %901 = reshape(%899, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %902 = reshape(%900, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %903 = @func_4535(%901, %902) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(728), float64], Tensor[(882), bool], Tensor[(2, 15, 225), float32], Tensor[(11, 12, 4), float32], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(2, 15, 225), bool]) */;
  %904 = %898.1;
  %905 = %903.5;
  (%904, %905, %var_5134, %var_5135)
}

def @func_2780(%var_2762: Tensor[(5, 14, 10), float32], %var_2776: Tensor[(882), bool]) -> (Tensor[(5, 14, 10), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %906 = cast(%var_2762, dtype="float32") /* ty=Tensor[(5, 14, 10), float32] */;
  %907 = cast(%var_2776, dtype="bool") /* ty=Tensor[(882), bool] */;
  %908 = reshape(%907, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %909 = @func_1401(%908) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %910 = cos(%906) /* ty=Tensor[(5, 14, 10), float32] */;
  %911 = %909.0;
  (%910, %911, %var_2776)
}

def @func_7592(%var_7583: Tensor[(672), int32]) -> (Tensor[(8, 8, 12), float64], Tensor[(768), float64], Tensor[(882), bool], Tensor[(10, 6, 5), float32], Tensor[(672), int32], Tensor[(11, 12, 4), float32]) {
  %912 = cast(meta[relay.Constant][53] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %913 = reshape(%912, newshape=[8, 8, 12]) /* ty=Tensor[(8, 8, 12), float64] */;
  %914 = @func_3675(%913) /* ty=(Tensor[(8, 8, 12), float64],) */;
  %915 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %916 = cast(%var_7583, dtype="int32") /* ty=Tensor[(672), int32] */;
  %917 = reshape(%916, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %918 = @func_7182(%917) /* ty=(Tensor[(10, 6, 5), float32], Tensor[(10, 6, 5), float64], Tensor[(10, 6, 5), float32], Tensor[(6, 8, 14), bool], Tensor[(672), int32], Tensor[(14, 7, 9), float64]) */;
  %919 = @func_7496() /* ty=Tensor[(11, 12, 4), float32] */;
  %920 = cast(%919, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %921 = erf(%920) /* ty=Tensor[(11, 12, 4), float32] */;
  %922 = cast(%921, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %923 = %914.0;
  %924 = %915.0;
  %925 = %918.2;
  %926 = acos(%922) /* ty=Tensor[(11, 12, 4), float32] */;
  (%923, meta[relay.Constant][53] /* ty=Tensor[(768), float64] */, %924, %925, %var_7583, %926)
}

def @func_4852() -> (Tensor[(882), bool],) {
  @func_4850() /* ty=(Tensor[(882), bool],) */
}

def @func_11760() -> (Tensor[(14, 7, 9), float32], Tensor[(882), bool]) {
  %927 = @func_9662() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32]) */;
  %928 = %927.1;
  %929 = cast(%928, dtype="bool") /* ty=Tensor[(14, 7, 9), bool] */;
  %930 = reshape(%929, newshape=[882]) /* ty=Tensor[(882), bool] */;
  %931 = @func_5215(%930) /* ty=(Tensor[(11, 12, 4), float32], Tensor[(4, 5, 11), float64], Tensor[(220), float64], Tensor[(5, 14, 10), float32], Tensor[(700), float32], Tensor[(882), bool]) */;
  %932 = %931.5;
  (%928, %932)
}

def @func_6126(%var_6124: Tensor[(11, 12, 4), float32]) -> (Tensor[(11, 12, 4), bool],) {
  @func_6123(%var_6124) /* ty=(Tensor[(11, 12, 4), bool],) */
}

def @func_2596(%var_2561: Tensor[(7, 12, 8), float64], %var_2571: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %933 = cast(%var_2561, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %934 = atan(%933) /* ty=Tensor[(7, 12, 8), float64] */;
  %935 = cast(%var_2571, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %936 = shape_of(%var_2561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %937 = cast(%var_2561, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %939 = equal(%937, %938) /* ty=Tensor[(7, 12, 8), bool] */;
  %940 = cast(%939, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %941 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%934, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%942, %943) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_4729() -> Tensor[(11, 12, 4), float32] {
  @func_4727() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_10434() -> (Tensor[(14, 7, 9), bool],) {
  %944 = @func_7906() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %945 = %944.0;
  (%945,)
}

def @func_5143(%var_5141: Tensor[(728), float64], %var_5142: Tensor[(14, 63), bool]) -> (Tensor[(48, 2), float64], Tensor[(5, 14, 10), float32], Tensor[(728), float64], Tensor[(14, 63), bool]) {
  @func_5139(%var_5141, %var_5142) /* ty=(Tensor[(48, 2), float64], Tensor[(5, 14, 10), float32], Tensor[(728), float64], Tensor[(14, 63), bool]) */
}

def @func_7364(%var_7358: Tensor[(336, 2), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(11, 12, 4), bool], Tensor[(882), bool], Tensor[(7, 12, 8), float64], Tensor[(336, 2), float64]) {
  %946 = @func_6436() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %947 = @func_6407() /* ty=(Tensor[(14, 7, 9), bool],) */;
  %948 = @func_6158() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), bool], Tensor[(14, 7, 9), bool]) */;
  %949 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %950 = cast(%var_7358, dtype="float64") /* ty=Tensor[(336, 2), float64] */;
  %951 = cast(%var_7358, dtype="float64") /* ty=Tensor[(336, 2), float64] */;
  %952 = reshape(%950, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %953 = reshape(%951, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %954 = %946.0;
  %955 = %947.0;
  %956 = %948.2;
  %957 = %949.0;
  %958 = @func_2596(%952, %953) /* ty=Tensor[(7, 12, 8), float64] */;
  (%954, %955, %956, %957, %958, %var_7358)
}

def @func_5400() -> (Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) {
  @func_5398() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(5, 15, 3), int8], Tensor[(7, 104), float64], Tensor[(225), int8], Tensor[(11, 12, 4), float32]) */
}

def @func_7498() -> Tensor[(11, 12, 4), float32] {
  @func_7496() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_12410() -> Tensor[(39, 13), uint16] {
  @func_12408() /* ty=Tensor[(39, 13), uint16] */
}

def @func_6606(%var_6596: Tensor[(225), int8]) -> (Tensor[(11, 12, 4), float32], Tensor[(13, 8, 7), float64], Tensor[(728), float64], Tensor[(225), int8]) {
  %959 = cast(meta[relay.Constant][54] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %960 = cast(%var_6596, dtype="int8") /* ty=Tensor[(225), int8] */;
  %961 = reshape(%959, newshape=[13, 8, 7]) /* ty=Tensor[(13, 8, 7), float64] */;
  %962 = reshape(%960, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %963 = @func_2380(%961, %962) /* ty=(Tensor[(13, 8, 7), float64], Tensor[(5, 15, 3), int8], Tensor[(225), int8]) */;
  %964 = @func_5847() /* ty=Tensor[(11, 12, 4), float32] */;
  %965 = %963.0;
  (%964, %965, meta[relay.Constant][54] /* ty=Tensor[(728), float64] */, %var_6596)
}

def @func_9738(%var_9737: Tensor[(7, 2, 6), float64]) -> Tensor[(7, 2, 6), float64] {
  %967 = fn (%var_9713: Tensor[(7, 2, 6), float64]) -> Tensor[(7, 2, 6), float64] {
    %966 = cast(%var_9713, dtype="float64") /* ty=Tensor[(7, 2, 6), float64] */;
    log2(%966) /* ty=Tensor[(7, 2, 6), float64] */
  };
  %967(%var_9737) /* ty=Tensor[(7, 2, 6), float64] */
}

def @func_8140(%var_8138: Tensor[(882), float64]) -> (Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), bool], Tensor[(882), float64]) {
  %968 = cast(%var_8138, dtype="float64") /* ty=Tensor[(882), float64] */;
  %969 = reshape(%968, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %970 = @func_6038(%969) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */;
  %971 = @func_4372() /* ty=Tensor[(11, 12, 4), float32] */;
  %972 = %970.1;
  (%971, %972, %var_8138)
}

def @func_11045(%var_11043: Tensor[(11, 12, 4), float32]) -> Tensor[(11, 12, 4), bool] {
  @func_11042(%var_11043) /* ty=Tensor[(11, 12, 4), bool] */
}

def @func_10553() -> (Tensor[(11, 12, 4), float32], Tensor[(1470), float32], Tensor[(768), float64], Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) {
  @func_10551() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(1470), float32], Tensor[(768), float64], Tensor[(11, 12, 4), float32], Tensor[(14, 7, 9), float32], Tensor[(11, 12, 4), float32], Tensor[(11, 12, 4), float32]) */
}

def @func_6491(%var_6489: Tensor[(14, 7, 9), bool]) -> (Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) {
  @func_6488(%var_6489) /* ty=(Tensor[(14, 7, 9), int8], Tensor[(11, 12, 4), float32], Tensor[(672), float64]) */
}

def @func_3999(%var_3996: Tensor[(4, 12, 13), uint64], %var_3997: Tensor[(7, 210), float32], %var_3998: Tensor[(168, 4), float64]) -> (Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) {
  @func_3994(%var_3996, %var_3997, %var_3998) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(14, 7, 15), float32], Tensor[(7, 210), float32], Tensor[(7, 12, 8), float64], Tensor[(168, 4), float64]) */
}

def @func_10855() -> Tensor[(882), bool] {
  @func_6771() /* ty=Tensor[(882), bool] */
}

def @func_10567() -> (Tensor[(882), bool],) {
  %973 = @func_7475() /* ty=Tensor[(882), bool] */;
  (%973,)
}

def @func_8865() -> (Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) {
  @func_8863() /* ty=(Tensor[(14, 7, 9), bool], Tensor[(14, 7, 15), float32], Tensor[(1470), float32]) */
}

def @func_12128() -> (Tensor[(11, 12, 4), float32],) {
  %974 = @func_10373() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %975 = %974.0;
  %976 = cast(%975, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %977 = log2(%976) /* ty=Tensor[(11, 12, 4), float32] */;
  (%977,)
}

def @func_10091() -> (Tensor[(11, 12, 4), float32], Tensor[(225), int8], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 15), float32], Tensor[(5, 15, 3), float32]) {
  @func_10089() /* ty=(Tensor[(11, 12, 4), float32], Tensor[(225), int8], Tensor[(672), int32], Tensor[(672), int32], Tensor[(14, 7, 15), float32], Tensor[(5, 15, 3), float32]) */
}

def @func_10394() -> Tensor[(11, 12, 4), float32] {
  @func_10392() /* ty=Tensor[(11, 12, 4), float32] */
}

def @func_6041(%var_6039: Tensor[(14, 7, 9), float64]) -> (Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) {
  @func_6038(%var_6039) /* ty=(Tensor[(14, 7, 9), float32], Tensor[(14, 7, 9), bool]) */
}

def @func_3489(%var_3487: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  @func_3486(%var_3487) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_6964() -> (Tensor[(11, 12, 4), float32], Tensor[(882), float32], Tensor[(11, 12, 4), bool]) {
  %978 = @func_5321() /* ty=(Tensor[(11, 12, 4), float32],) */;
  %979 = @func_6704() /* ty=(Tensor[(882), bool],) */;
  %980 = %979.0;
  %981 = cast(%980, dtype="float32") /* ty=Tensor[(882), float32] */;
  %982 = %978.0;
  %983 = cast(%982, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %984 = reshape(%983, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float32] */;
  %985 = @func_6123(%984) /* ty=(Tensor[(11, 12, 4), bool],) */;
  %986 = exp(%981) /* ty=Tensor[(882), float32] */;
  %987 = %985.0;
  (%982, %986, %987)
}

def @func_10318() -> (Tensor[(14, 7, 9), float32],) {
  %988 = @func_8363() /* ty=Tensor[(14, 7, 9), float32] */;
  (%988,)
}

def @func_11411() -> (Tensor[(11, 12, 4), float32],) {
  @func_11409() /* ty=(Tensor[(11, 12, 4), float32],) */
}

def @func_1460(%var_1455: Tensor[(882), bool]) -> (Tensor[(2, 15, 1), float32], Tensor[(14, 7, 9), bool], Tensor[(882), bool]) {
  %989 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %990 = cast(%var_1455, dtype="bool") /* ty=Tensor[(882), bool] */;
  %991 = reshape(%990, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), bool] */;
  %992 = @func_1401(%991) /* ty=(Tensor[(14, 7, 9), bool],) */;
  %993 = cos(%989) /* ty=Tensor[(2, 15, 1), float32] */;
  %994 = %992.0;
  (%993, %994, %var_1455)
}

def @func_8053(%var_8051: Tensor[(2, 384), float64]) -> (Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) {
  @func_8050(%var_8051) /* ty=(Tensor[(14, 7, 9), bool], Tensor[(4, 5, 11), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(2, 336), float64], Tensor[(2, 384), float64], Tensor[(220), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen727/build/output.py", line 3049, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:00:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

