==========mod==========
#[version = "0.0.5"]
def @func_1918(%var_1842: Tensor[(14, 4, 5), uint64], %var_1843: Tensor[(14, 4, 5), uint64], %var_1869: int32, %var_1870: Tensor[(616), int32], %var_1873: Tensor[(77), float32], %var_1885: Tensor[(1092), float32], %var_1910: Tensor[(1, 968), float64]) -> (Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) {
  %0 = cast(%var_1843, dtype="bool") /* ty=Tensor[(14, 4, 5), bool] */;
  %1 = shape_of(%var_1842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1842, dtype="bool") /* ty=Tensor[(14, 4, 5), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %6 = reshape(%4, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
  %7 = reshape(%5, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %8 = @func_1301(%6, %7) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %10 = reshape(%9, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %11 = cast(%var_1869, dtype="int32") /* ty=int32 */;
  %12 = cast(%var_1870, dtype="int32") /* ty=Tensor[(616), int32] */;
  %13 = reshape(%11, newshape=[]) /* ty=int32 */;
  %14 = reshape(%12, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %15 = cast(%var_1869, dtype="float32") /* ty=float32 */;
  %16 = cast(%var_1873, dtype="float32") /* ty=Tensor[(77), float32] */;
  %17 = reshape(%15, newshape=[]) /* ty=float32 */;
  %18 = reshape(%16, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %19 = @func_318(%17, %18) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
  %20 = @func_1679(%10) /* ty=Tensor[(7, 12, 13), float32] */;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %22 = reshape(%21, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %23 = cast(%var_1885, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %24 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(1092), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092), float32] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?), bool] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(156), float64] */, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %28 = cast(%var_1869, dtype="uint8") /* ty=uint8 */;
  %29 = cast(%var_1910, dtype="float64") /* ty=Tensor[(1, 968), float64] */;
  %30 = reshape(%29, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %31 = greater(%2, %3) /* ty=Tensor[(14, 4, 5), bool] */;
  %32 = %8.2;
  %33 = @func_499(%13, %14) /* ty=Tensor[(11, 14, 4), int32] */;
  %34 = %19.1;
  %35 = @func_1679(%22) /* ty=Tensor[(7, 12, 13), float32] */;
  %36 = greater_equal(%25, %26) /* ty=Tensor[(1092), bool] */;
  %37 = add(%27, %28) /* ty=Tensor[(156), uint8] */;
  %38 = @func_843(%30) /* ty=Tensor[(8, 11, 11), float64] */;
  (%31, %32, meta[relay.Constant][0] /* ty=Tensor[(210), uint64] */, %20, %33, %var_1870, %34, %var_1873, %35, %36, %37, %38, %var_1910)
}

def @func_6547() -> Tensor[(9, 3, 1), float32] {
  @func_6136() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_7959() -> (Tensor[(9, 2, 3), float64],) {
  %39 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %40 = %39.1;
  (%40,)
}

def @func_8941() -> Tensor[(9, 2, 3), float64] {
  @func_6360() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_11622(%var_11585: Tensor[(12, 11, 5), uint8], %var_11586: Tensor[(12, 11, 5), uint8], %var_11606: Tensor[(90), bool]) -> (Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) {
  %41 = cast(%var_11586, dtype="uint8") /* ty=Tensor[(12, 11, 5), uint8] */;
  %42 = shape_of(%var_11585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_11585, dtype="uint8") /* ty=Tensor[(12, 11, 5), uint8] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %45 = @func_8307() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %47 = reshape(%46, newshape=[14, 44]) /* ty=Tensor[(14, 44), int32] */;
  %48 = @func_10264(%47) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) */;
  %49 = %48.4;
  %50 = cast(%49, dtype="bool") /* ty=bool */;
  %51 = cast(%var_11606, dtype="bool") /* ty=Tensor[(90), bool] */;
  %52 = reshape(%50, newshape=[]) /* ty=bool */;
  %53 = reshape(%51, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %54 = @func_8429(%52, %53) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
  %55 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %56 = add(%43, %44) /* ty=Tensor[(12, 11, 5), uint8] */;
  %57 = %45.0;
  %58 = %54.2;
  %59 = %55.0;
  (%56, %57, %49, meta[relay.Constant][3] /* ty=Tensor[(616), int32] */, %58, %var_11606, %59)
}

def @func_11582() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(968), float64]) {
  %60 = @func_10573() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %61 = @func_7515() /* ty=Tensor[(9, 2, 3), float64] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %63 = reshape(%62, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %64 = @func_9339(%63) /* ty=(Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) */;
  %65 = %60.0;
  %66 = %64.3;
  (%65, %61, %66)
}

def @func_7273(%var_7214: Tensor[(9, 3, 15), float32], %var_7231: Tensor[(9, 3, 15), float32]) -> (Tensor[(9, 3, 15), int8], Tensor[(9, 15, 14), bool], Tensor[(63, 2), bool], Tensor[(3, 630), bool], Tensor[(9, 3, 15), float64]) {
  %67 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %68 = cast(%67, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
  %69 = cast(%var_7214, dtype="int8") /* ty=Tensor[(9, 3, 15), int8] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 630), bool] */, dtype="bool") /* ty=Tensor[(3, 630), bool] */;
  %72 = reshape(%70, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %73 = reshape(%71, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %74 = cast(%var_7231, dtype="bool") /* ty=Tensor[(9, 3, 15), bool] */;
  %75 = shape_of(%var_7214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_7214, dtype="bool") /* ty=Tensor[(9, 3, 15), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = greater(%76, %77) /* ty=Tensor[(9, 3, 15), bool] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %80 = logical_xor(%68, %69) /* ty=Tensor[(9, 3, 15), int8] */;
  %81 = @func_1446(%72, %73) /* ty=Tensor[(9, 15, 14), bool] */;
  %82 = atanh(%79) /* ty=Tensor[(9, 3, 15), float64] */;
  (%80, %81, meta[relay.Constant][4] /* ty=Tensor[(63, 2), bool] */, meta[relay.Constant][5] /* ty=Tensor[(3, 630), bool] */, %82)
}

def @func_254(%var_244: Tensor[(7, 11, 1), float32]) -> Tensor[(7, 11, 1), float32] {
  %83 = cast(%var_244, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  sin(%83) /* ty=Tensor[(7, 11, 1), float32] */
}

def @func_1301(%var_1266: Tensor[(3, 5, 14), uint64], %var_1272: Tensor[(156), float64]) -> (Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) {
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 5, 14), uint64] */, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
  %85 = shape_of(%var_1266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_1266, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
  %89 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
  %90 = reshape(%88, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
  %91 = reshape(%89, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
  %92 = @func_365(%90, %91) /* ty=(Tensor[(2, 6, 13), bool],) */;
  %93 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
  %94 = %92.0;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %96 = reshape(%93, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
  %97 = reshape(%95, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
  %98 = @func_365(%96, %97) /* ty=(Tensor[(2, 6, 13), bool],) */;
  %99 = not_equal(%86, %87) /* ty=Tensor[(3, 5, 14), bool] */;
  %100 = %98.0;
  (%99, %94, %var_1272, %100)
}

def @func_10651() -> (Tensor[(9, 2, 3), float64],) {
  %101 = @func_9137() /* ty=Tensor[(9, 2, 3), float64] */;
  (%101,)
}

def @func_1446(%var_1419: Tensor[(9, 1, 14), bool], %var_1420: Tensor[(9, 15, 14), bool]) -> Tensor[(9, 15, 14), bool] {
  %102 = cast(%var_1419, dtype="bool") /* ty=Tensor[(9, 1, 14), bool] */;
  %103 = cast(%var_1420, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  logical_or(%102, %103) /* ty=Tensor[(9, 15, 14), bool] */
}

def @func_7023() -> Tensor[(9, 3, 1), float32] {
  @func_6547() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_5223(%var_5198: Tensor[(4, 12, 12), int8], %var_5199: Tensor[(4, 12, 12), int8], %var_5213: Tensor[(280, 1), uint64]) -> (Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) {
  %104 = cast(%var_5199, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %105 = shape_of(%var_5198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_5198, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = cast(%var_5199, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %110 = cast(%var_5213, dtype="uint64") /* ty=Tensor[(280, 1), uint64] */;
  %111 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %112 = cast(meta[relay.Constant][8] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %113 = reshape(%109, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %114 = reshape(%110, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %115 = reshape(%111, newshape=[]) /* ty=int32 */;
  %116 = reshape(%112, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %117 = @func_4368(%113, %114, %115, %116) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %119 = cast(%var_5213, dtype="uint64") /* ty=Tensor[(280, 1), uint64] */;
  %120 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %122 = reshape(%118, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %123 = reshape(%119, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %124 = reshape(%120, newshape=[]) /* ty=int32 */;
  %125 = reshape(%121, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %126 = @func_4368(%122, %123, %124, %125) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %127 = cast(%var_5199, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %128 = cast(-4 /* ty=int32 */, dtype="uint64") /* ty=uint64 */;
  %129 = less_equal(%106, %107) /* ty=Tensor[(4, 12, 12), bool] */;
  %130 = cos(%108) /* ty=Tensor[(4, 12, 12), float64] */;
  %131 = %117.3;
  %132 = %126.1;
  %133 = add(%127, %128) /* ty=Tensor[(4, 12, 12), uint64] */;
  (%129, %130, %131, meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, %var_5213, meta[relay.Constant][8] /* ty=Tensor[(1092), float32] */, %132, %133)
}

def @func_11267() -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %134 = @func_11192() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %135 = %134.1;
  %136 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %137 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
  (%135, %136, %137)
}

def @func_3375(%var_3365: Tensor[(12, 4, 13), bool]) -> Tensor[(12, 4, 13), bool] {
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 4, 13), bool] */, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
  %139 = shape_of(%var_3365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_3365, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%140, %141) /* ty=Tensor[(12, 4, 13), bool] */
}

def @func_7797() -> (Tensor[(9, 3, 1), float32],) {
  %142 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  (%142,)
}

def @func_888(%var_873: Tensor[(4, 8, 7), float32]) -> (Tensor[(4, 8, 7), float32],) {
  %143 = cast(%var_873, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %144 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %147 = power(%145, %146) /* ty=Tensor[(4, 8, 7), float32] */;
  (%147,)
}

def @func_8180(%var_8140: Tensor[(9, 3, 1), float32], %var_8146: Tensor[(1680), uint16]) -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) {
  %148 = cast(%var_8146, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %149 = reshape(%148, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
  %150 = @func_4592(%149) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
  %151 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %152 = cast(%var_8140, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = not_equal(%154, %155) /* ty=Tensor[(9, 3, ?), bool] */;
  %157 = cast(%156, dtype="float64") /* ty=Tensor[(9, 3, ?), float64] */;
  %158 = cast(%var_8146, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %159 = cast(%var_8146, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %160 = cast(%151, dtype="uint8") /* ty=Tensor[(9, 3, 1), uint8] */;
  %161 = %150.1;
  %162 = power(%157, %158) /* ty=Tensor[(9, 3, 1680), float64] */;
  %163 = bitwise_or(%159, %160) /* ty=Tensor[(9, 3, 1680), uint8] */;
  (%161, %162, %163)
}

def @func_8284() -> (Tensor[(9, 3, 1), float32],) {
  %164 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  (%164,)
}

def @func_10573() -> (Tensor[(9, 3, 1), float64],) {
  %165 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %168 = exp(%167) /* ty=Tensor[(9, 3, 1), float64] */;
  (%168,)
}

def @func_10766(%var_10742: Tensor[(280), uint64], %var_10743: int32) -> (Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) {
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %170 = cast(%var_10742, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %171 = cast(%var_10743, dtype="int32") /* ty=int32 */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %173 = reshape(%169, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %174 = reshape(%170, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %175 = reshape(%171, newshape=[]) /* ty=int32 */;
  %176 = reshape(%172, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %177 = @func_4368(%173, %174, %175, %176) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %178 = @func_10420() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %179 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %180 = cast(%var_10742, dtype="int8") /* ty=Tensor[(280), int8] */;
  %181 = cast(%179, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
  %182 = cast(%var_10743, dtype="int16") /* ty=int16 */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(2240), int16] */, dtype="int16") /* ty=Tensor[(2240), int16] */;
  %184 = reshape(%182, newshape=[]) /* ty=int16 */;
  %185 = reshape(%183, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), int16] */;
  %186 = @func_7699(%184, %185) /* ty=(Tensor[(16, 10, 14), int16],) */;
  %187 = %177.3;
  %188 = %178.0;
  %189 = left_shift(%180, %181) /* ty=Tensor[(9, 3, 280), int8] */;
  %190 = %186.0;
  (%187, meta[relay.Constant][11] /* ty=Tensor[(1200), float64] */, %var_10743, meta[relay.Constant][12] /* ty=Tensor[(1092), float32] */, %188, %189, %190, meta[relay.Constant][13] /* ty=Tensor[(2240), int16] */)
}

def @func_499(%var_494: int32, %var_495: Tensor[(11, 14, 4), int32]) -> Tensor[(11, 14, 4), int32] {
  %191 = cast(%var_494, dtype="int32") /* ty=int32 */;
  %192 = cast(%var_495, dtype="int32") /* ty=Tensor[(11, 14, 4), int32] */;
  add(%191, %192) /* ty=Tensor[(11, 14, 4), int32] */
}

def @func_7181() -> (Tensor[(9, 3, 1), float32],) {
  %193 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %194 = %193.0;
  (%194,)
}

def @func_8072() -> (Tensor[(9, 2, 3), float64],) {
  %195 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
  (%195,)
}

def @func_5878() -> Tensor[(9, 3, 1), float32] {
  @func_5839() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_6486() -> (Tensor[(132), float32], Tensor[(9, 3, 1), bool]) {
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %197 = reshape(%196, newshape=[11, 1, 12]) /* ty=Tensor[(11, 1, 12), float32] */;
  %198 = @func_3924(%197) /* ty=(Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) */;
  %199 = %198.1;
  %200 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
  %201 = cast(%199, dtype="bool") /* ty=bool */;
  %202 = cast(%200, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %203 = less_equal(%201, %202) /* ty=Tensor[(9, 3, 1), bool] */;
  (meta[relay.Constant][14] /* ty=Tensor[(132), float32] */, %203)
}

def @func_9847() -> Tensor[(9, 2, 3), float64] {
  @func_7515() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_6741(%var_6735: int32) -> (Tensor[(9, 3, 1), float32], int32, Tensor[(1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
  %204 = cast(meta[relay.Constant][15] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %206 = cast(%var_6735, dtype="int32") /* ty=int32 */;
  %207 = cast(meta[relay.Constant][17] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %208 = reshape(%204, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %209 = reshape(%205, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %210 = reshape(%206, newshape=[]) /* ty=int32 */;
  %211 = reshape(%207, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %212 = @func_4368(%208, %209, %210, %211) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %213 = cast(meta[relay.Constant][17] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %214 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %215 = %212.2;
  %216 = sinh(%213) /* ty=Tensor[(1092), float32] */;
  (%214, %215, meta[relay.Constant][15] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][16] /* ty=Tensor[(280), uint64] */, %var_6735, %216)
}

def @func_10420() -> (Tensor[(9, 3, 1), float32],) {
  %217 = @func_7181() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %218 = %217.0;
  (%218,)
}

def @func_10965() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %219 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %220 = @func_7593() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
  %221 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %222 = %219.0;
  %223 = %220.0;
  (%221, %222, %223)
}

def @func_11295(%var_11289: Tensor[(294, 1), float64], %var_11290: Tensor[(156), float64]) -> (Tensor[(9, 3, 1), float32], Tensor[(3, 7, 14), bool], Tensor[(294, 1), float64], Tensor[(156), float64]) {
  %224 = @func_10965() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %225 = cast(%var_11289, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %226 = cast(%var_11290, dtype="float64") /* ty=Tensor[(156), float64] */;
  %227 = reshape(%225, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %228 = reshape(%226, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %229 = @func_9617(%227, %228) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) */;
  %230 = %224.0;
  %231 = %229.1;
  (%230, %231, %var_11289, %var_11290)
}

def @func_6240() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
  %232 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %233 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %235 = %232.1;
  %236 = tan(%234) /* ty=Tensor[(9, 3, 1), float32] */;
  (%235, %236)
}

def @func_8598() -> Tensor[(9, 2, 3), float64] {
  %237 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %237.0
}

def @func_10930() -> (Tensor[(9, 3, 1), bool],) {
  %238 = @func_10610() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) */;
  %239 = %238.1;
  (%239,)
}

def @func_6085() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %240 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %242 = cast(%240, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %244 = reshape(%243, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %245 = @func_925(%244) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %246 = atanh(%241) /* ty=Tensor[(9, 3, 1), float32] */;
  %247 = atan(%242) /* ty=Tensor[(9, 3, 1), float64] */;
  %248 = %245.0;
  (%246, %247, %248, meta[relay.Constant][18] /* ty=Tensor[(54), float64] */)
}

def @func_7515() -> Tensor[(9, 2, 3), float64] {
  %249 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %249.2
}

def @func_8709(%var_8662: Tensor[(54), float64]) -> (Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) {
  %250 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="uint64") /* ty=Tensor[(9, 3, 1), uint64] */;
  %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 3, 5), float32] */, dtype="uint64") /* ty=Tensor[(9, 3, 5), uint64] */;
  %254 = cast(%var_8662, dtype="float64") /* ty=Tensor[(54), float64] */;
  %255 = reshape(%254, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %256 = @func_925(%255) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %257 = cast(%251, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %258 = acosh(%257) /* ty=Tensor[(9, 3, 1), float32] */;
  %259 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %260 = %259.1;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %262 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%258, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %265 = cast(%251, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %266 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%258, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = floor_divide(%267, %268) /* ty=Tensor[(9, 3, ?), float32] */;
  %270 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %272 = asinh(%271) /* ty=Tensor[(9, 3, 1), float32] */;
  %273 = cast(%272, dtype="int16") /* ty=Tensor[(9, 3, 1), int16] */;
  %274 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%269, dtype="int16") /* ty=Tensor[(9, 3, ?), int16] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %277 = minimum(%252, %253) /* ty=Tensor[(9, 3, 5), uint64] */;
  %278 = @func_8211() /* ty=Tensor[(9, 3, 1), bool] */;
  %279 = %256.0;
  %280 = minimum(%263, %264) /* ty=Tensor[(9, 3, ?), float32] */;
  %281 = right_shift(%275, %276) /* ty=Tensor[(9, 3, ?), int16] */;
  (%277, %278, %279, %var_8662, %280, %281)
}

def @func_8307() -> (Tensor[(9, 3, 1), float32],) {
  %282 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %283 = %282.0;
  (%283,)
}

def @func_11192() -> (Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %284 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %287 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 840), uint16] */, dtype="uint16") /* ty=Tensor[(2, 840), uint16] */;
  %288 = reshape(%287, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
  %289 = @func_4592(%288) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
  %290 = @func_7871() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) */;
  %291 = @func_7797() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %292 = exp(%286) /* ty=Tensor[(9, 2, 3), float32] */;
  %293 = %289.1;
  %294 = %290.0;
  %295 = %291.0;
  (%292, %293, meta[relay.Constant][20] /* ty=Tensor[(2, 840), uint16] */, %294, %295)
}

def @func_318(%var_276: float32, %var_307: Tensor[(77), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) {
  %296 = cast(%var_276, dtype="float32") /* ty=float32 */;
  %297 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
  %299 = cast(%var_307, dtype="float32") /* ty=Tensor[(77), float32] */;
  %300 = reshape(%299, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %301 = divide(%296, %297) /* ty=Tensor[(14, 16, 2), float32] */;
  %302 = sqrt(%298) /* ty=Tensor[(14, 16, 2), float64] */;
  %303 = @func_254(%300) /* ty=Tensor[(7, 11, 1), float32] */;
  (%301, %302, %303, %var_307)
}

def @func_6432() -> Tensor[(9, 3, 1), float32] {
  %304 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %304.0
}

def @func_6715(%var_6712: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
  %305 = cast(%var_6712, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %306 = asinh(%305) /* ty=Tensor[(3, 7, 14), float64] */;
  (%306,)
}

def @func_10359() -> (Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) {
  %307 = cast(-3.08273f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %308 = cast(meta[relay.Constant][22] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %309 = reshape(%307, newshape=[]) /* ty=float32 */;
  %310 = reshape(%308, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %311 = @func_318(%309, %310) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
  %312 = @func_9847() /* ty=Tensor[(9, 2, 3), float64] */;
  %313 = %311.0;
  (%312, %313, -3.08273f /* ty=float32 */, meta[relay.Constant][22] /* ty=Tensor[(77), float32] */)
}

def @func_6360() -> Tensor[(9, 2, 3), float64] {
  %314 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %314.2
}

def @func_7096() -> Tensor[(9, 2, 3), float64] {
  %315 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %315.1
}

def @func_8791() -> (Tensor[(9, 3, 1), float64],) {
  %316 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %317 = %316.0;
  (%317,)
}

def @func_8211() -> Tensor[(9, 3, 1), bool] {
  %318 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
  %318.1
}

def @func_6778(%var_6771: Tensor[(3, 11, 15), float32]) -> (Tensor[(3, 11, 15), float32],) {
  %319 = cast(%var_6771, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %320 = cos(%319) /* ty=Tensor[(3, 11, 15), float32] */;
  (%320,)
}

def @func_6057(%var_6024: float32, %var_6025: Tensor[(77, 1), float32], %var_6032: Tensor[(126), bool], %var_6033: Tensor[(1890), bool], %var_6051: Tensor[(336), float32]) -> (Tensor[(9, 3, 1), float64], Tensor[(8, 7, 5), float64], Tensor[(280), float64], float32, Tensor[(77, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(1890), bool], Tensor[(968, 126), int32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(77), float32]) {
  %321 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %323 = cast(meta[relay.Constant][23] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %324 = cast(meta[relay.Constant][24] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %325 = reshape(%323, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
  %326 = reshape(%324, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %327 = @func_1977(%325, %326) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %328 = cast(%var_6032, dtype="bool") /* ty=Tensor[(126), bool] */;
  %329 = cast(%var_6033, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %330 = reshape(%328, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %331 = reshape(%329, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %332 = cast(%var_6032, dtype="int32") /* ty=Tensor[(126), int32] */;
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(968, 1), float64] */, dtype="int32") /* ty=Tensor[(968, 1), int32] */;
  %334 = cast(%var_6051, dtype="float32") /* ty=Tensor[(336), float32] */;
  %335 = reshape(%334, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
  %336 = cast(%var_6024, dtype="float32") /* ty=float32 */;
  %337 = cast(%var_6025, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
  %338 = reshape(%336, newshape=[]) /* ty=float32 */;
  %339 = reshape(%337, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %340 = @func_318(%338, %339) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
  %341 = %340.3;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(77), float32] */;
  %343 = sinh(%322) /* ty=Tensor[(9, 3, 1), float64] */;
  %344 = %327.0;
  %345 = @func_1446(%330, %331) /* ty=Tensor[(9, 15, 14), bool] */;
  %346 = bitwise_xor(%332, %333) /* ty=Tensor[(968, 126), int32] */;
  %347 = @func_48(%335) /* ty=Tensor[(3, 14, 8), float64] */;
  %348 = log2(%342) /* ty=Tensor[(77), float32] */;
  (%343, %344, meta[relay.Constant][23] /* ty=Tensor[(280), float64] */, %var_6024, %var_6025, %345, %var_6033, %346, %347, %var_6051, %348)
}

def @func_10074() -> (Tensor[(9, 3, 1), float64],) {
  %349 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %350 = %349.0;
  (%350,)
}

def @func_11398() -> (Tensor[(54), float64],) {
  %351 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %352 = %351.3;
  (%352,)
}

def @func_10610() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) {
  %353 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %354 = @func_10420() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %355 = %353.0;
  %356 = @func_8211() /* ty=Tensor[(9, 3, 1), bool] */;
  %357 = %354.0;
  (%355, %356, %357)
}

def @func_7946() -> (Tensor[(9, 3, 1), float32],) {
  %358 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
  (%358,)
}

def @func_6194(%var_6183: Tensor[(1, 1200), float64], %var_6185: int32, %var_6186: Tensor[(1092), float32]) -> (Tensor[(9, 3, 1), float32], Tensor[(616), int32], Tensor[(1, 1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
  %359 = cast(%var_6183, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %361 = cast(%var_6185, dtype="int32") /* ty=int32 */;
  %362 = cast(%var_6186, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %363 = reshape(%359, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %364 = reshape(%360, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %365 = reshape(%361, newshape=[]) /* ty=int32 */;
  %366 = reshape(%362, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %367 = @func_4368(%363, %364, %365, %366) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %368 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %369 = %367.3;
  (%368, %369, %var_6183, meta[relay.Constant][25] /* ty=Tensor[(280), uint64] */, %var_6185, %var_6186)
}

def @func_9878(%var_9875: Tensor[(27), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) {
  %370 = cast(%var_9875, dtype="float32") /* ty=Tensor[(27), float32] */;
  %371 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1680), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
  %372 = reshape(%370, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float32] */;
  %373 = reshape(%371, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %374 = @func_8180(%372, %373) /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) */;
  %375 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
  %376 = %374.2;
  (%375, %376, %var_9875, meta[relay.Constant][26] /* ty=Tensor[(1, 1680), uint16] */)
}

def @func_11682() -> (Tensor[(9, 3, 1), float32], Tensor[(1200), float64], Tensor[(9, 3, 1680), float32]) {
  %377 = cast(meta[relay.Constant][27] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %378 = @func_10074() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %379 = %378.0;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %381 = cast(meta[relay.Constant][28] /* ty=Tensor[(1680), uint16] */, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %382 = reshape(%377, newshape=[60, 20]) /* ty=Tensor[(60, 20), float64] */;
  %383 = reshape(%380, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %384 = reshape(%381, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %385 = @func_9744(%382, %383, %384) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) */;
  %386 = cast(meta[relay.Constant][28] /* ty=Tensor[(1680), uint16] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %387 = cast(%379, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %388 = %385.13;
  %389 = mod(%386, %387) /* ty=Tensor[(9, 3, 1680), float32] */;
  (%388, meta[relay.Constant][27] /* ty=Tensor[(1200), float64] */, %389)
}

def @func_10113() -> (Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %390 = cast(meta[relay.Constant][29] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %391 = reshape(%390, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %392 = @func_7428() /* ty=Tensor[(9, 3, 1), float32] */;
  %393 = @func_843(%391) /* ty=Tensor[(8, 11, 11), float64] */;
  (%392, %393, meta[relay.Constant][29] /* ty=Tensor[(968), float64] */)
}

def @func_11565() -> Tensor[(9, 3, 1), float32] {
  @func_7428() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_7428() -> Tensor[(9, 3, 1), float32] {
  @func_6388() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_11460() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) {
  %394 = @func_10573() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %395 = %394.0;
  %396 = @func_6360() /* ty=Tensor[(9, 2, 3), float64] */;
  (%395, %396)
}

def @func_12024(%var_12007: int32) -> (Tensor[(8, 7, 5), float64], Tensor[(9, 3, 280), int8], Tensor[(1092), float32], int32, Tensor[(968), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32]) {
  %397 = cast(meta[relay.Constant][30] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %398 = cast(meta[relay.Constant][31] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %399 = reshape(%397, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
  %400 = reshape(%398, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %401 = @func_1977(%399, %400) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %402 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
  %405 = cast(meta[relay.Constant][30] /* ty=Tensor[(280), float64] */, dtype="int8") /* ty=Tensor[(280), int8] */;
  %406 = cast(meta[relay.Constant][30] /* ty=Tensor[(280), float64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %407 = cast(%var_12007, dtype="int32") /* ty=int32 */;
  %408 = reshape(%406, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %409 = reshape(%407, newshape=[]) /* ty=int32 */;
  %410 = @func_10766(%408, %409) /* ty=(Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) */;
  %411 = cast(meta[relay.Constant][31] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %412 = cast(meta[relay.Constant][32] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %413 = reshape(%412, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
  %414 = @func_888(%413) /* ty=(Tensor[(4, 8, 7), float32],) */;
  %415 = %401.0;
  %416 = right_shift(%404, %405) /* ty=Tensor[(9, 3, 280), int8] */;
  %417 = %410.3;
  %418 = atan(%411) /* ty=Tensor[(968), float64] */;
  %419 = %414.0;
  (%415, %416, %417, %var_12007, %418, %419, meta[relay.Constant][32] /* ty=Tensor[(224), float32] */)
}

def @func_4368(%var_4322: Tensor[(15, 16, 5), float64], %var_4331: Tensor[(280), uint64], %var_4332: int32, %var_4335: Tensor[(1092), float32]) -> (Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) {
  %420 = cast(%var_4331, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %421 = cast(%var_4331, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %422 = cast(%var_4332, dtype="int32") /* ty=int32 */;
  %423 = cast(meta[relay.Constant][33] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %424 = cast(meta[relay.Constant][34] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %425 = cast(%var_4335, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %426 = cast(meta[relay.Constant][35] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %427 = reshape(%420, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %428 = reshape(%421, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %429 = reshape(%422, newshape=[]) /* ty=int32 */;
  %430 = reshape(%423, newshape=[616]) /* ty=Tensor[(616), int32] */;
  %431 = reshape(%424, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %432 = reshape(%425, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %433 = reshape(%426, newshape=[1, 968]) /* ty=Tensor[(1, 968), float64] */;
  %434 = @func_1918(%427, %428, %429, %430, %431, %432, %433) /* ty=(Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) */;
  %435 = cast(%var_4322, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %436 = rsqrt(%435) /* ty=Tensor[(15, 16, 5), float64] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(15, 16, 5), float32] */;
  %438 = %434.5;
  %439 = sqrt(%437) /* ty=Tensor[(15, 16, 5), float32] */;
  (%438, %var_4331, %var_4332, meta[relay.Constant][33] /* ty=Tensor[(616), int32] */, meta[relay.Constant][34] /* ty=Tensor[(77), float32] */, %var_4335, meta[relay.Constant][35] /* ty=Tensor[(968, 1), float64] */, %439)
}

def @func_9617(%var_9555: Tensor[(294), float64], %var_9582: Tensor[(156), float64]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
  %440 = @func_8782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %441 = cast(%var_9555, dtype="float64") /* ty=Tensor[(294), float64] */;
  %442 = reshape(%441, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %443 = @func_6715(%442) /* ty=(Tensor[(3, 7, 14), float64],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %446 = shape_of(%var_9555, dtype="int32") /* ty=Tensor[(1), int32] */;
  %447 = cast(%var_9555, dtype="float64") /* ty=Tensor[(294), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?), float64] */;
  %449 = subtract(%447, %448) /* ty=Tensor[(294), float64] */;
  %450 = cast(%449, dtype="bool") /* ty=Tensor[(294), bool] */;
  %451 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%444, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = cast(meta[relay.Constant][36] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %455 = cast(%var_9582, dtype="float64") /* ty=Tensor[(156), float64] */;
  %456 = reshape(%454, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
  %457 = reshape(%455, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %458 = @func_1301(%456, %457) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
  %459 = %440.1;
  %460 = logical_or(%452, %453) /* ty=Tensor[(3, 7, 14), bool] */;
  %461 = %458.2;
  %462 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  (%459, %460, %461, meta[relay.Constant][36] /* ty=Tensor[(210), uint64] */, %var_9582, %462)
}

def @func_11808(%var_11799: Tensor[(14, 10, 3), uint64]) -> Tensor[(14, 10, 3), float32] {
  %463 = cast(%var_11799, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %464 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(14, 10, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 10, 3), uint64] */, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %467 = left_shift(%465, %466) /* ty=Tensor[(14, 10, 3), uint64] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %469 = shape_of(%var_11799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_11799, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%470, %471) /* ty=Tensor[(14, 10, 3), float32] */
}

def @func_12230(%var_12219: Tensor[(576), int8], %var_12220: Tensor[(280), uint64]) -> (Tensor[(9, 3, 1), float32], Tensor[(280, 1), uint64], Tensor[(576), int8], Tensor[(280), uint64], Tensor[(14, 16, 2), float32]) {
  %472 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %473 = cast(%var_12219, dtype="int8") /* ty=Tensor[(576), int8] */;
  %474 = cast(%var_12219, dtype="int8") /* ty=Tensor[(576), int8] */;
  %475 = cast(%var_12220, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %476 = reshape(%473, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %477 = reshape(%474, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %478 = reshape(%475, newshape=[280, 1]) /* ty=Tensor[(280, 1), uint64] */;
  %479 = @func_5223(%476, %477, %478) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) */;
  %480 = @func_10359() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) */;
  %481 = %472.0;
  %482 = %479.4;
  %483 = %480.1;
  (%481, %482, %var_12219, %var_12220, %483)
}

def @func_7699(%var_7678: int16, %var_7679: Tensor[(16, 10, 14), int16]) -> (Tensor[(16, 10, 14), int16],) {
  %484 = cast(%var_7678, dtype="int16") /* ty=int16 */;
  %485 = cast(%var_7679, dtype="int16") /* ty=Tensor[(16, 10, 14), int16] */;
  %486 = left_shift(%484, %485) /* ty=Tensor[(16, 10, 14), int16] */;
  (%486,)
}

def @func_9339(%var_9326: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) {
  %487 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
  %488 = cast(%var_9326, dtype="uint8") /* ty=Tensor[(9, 2, 3), uint8] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="uint8") /* ty=Tensor[(9, 2, 3), uint8] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %492 = cast(meta[relay.Constant][38] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %493 = cast(meta[relay.Constant][39] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %494 = reshape(%492, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
  %495 = reshape(%493, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %496 = @func_1977(%494, %495) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %497 = bitwise_xor(%490, %491) /* ty=Tensor[(9, 2, 3), uint8] */;
  %498 = %496.0;
  (%497, %498, meta[relay.Constant][38] /* ty=Tensor[(280), float64] */, meta[relay.Constant][39] /* ty=Tensor[(968), float64] */)
}

def @func_12106() -> Tensor[(9, 2, 3), float64] {
  @func_8880() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_5839() -> Tensor[(9, 3, 1), float32] {
  %499 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  acos(%499) /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_8088(%var_8078: bool, %var_8079: Tensor[(1, 15, 6), bool]) -> (Tensor[(1, 15, 6), bool],) {
  %500 = cast(%var_8078, dtype="bool") /* ty=bool */;
  %501 = cast(%var_8079, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %502 = logical_or(%500, %501) /* ty=Tensor[(1, 15, 6), bool] */;
  (%502,)
}

def @func_11039(%var_11032: Tensor[(11, 14, 9), float64]) -> (Tensor[(11, 14, 9), float64],) {
  %503 = cast(%var_11032, dtype="float64") /* ty=Tensor[(11, 14, 9), float64] */;
  %504 = asin(%503) /* ty=Tensor[(11, 14, 9), float64] */;
  (%504,)
}

def @func_4592(%var_4571: Tensor[(10, 12, 14), uint16]) -> (Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) {
  %505 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 12, 14), uint16] */, dtype="bool") /* ty=Tensor[(10, 12, 14), bool] */;
  %506 = shape_of(%var_4571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_4571, dtype="bool") /* ty=Tensor[(10, 12, 14), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = not_equal(%507, %508) /* ty=Tensor[(10, 12, 14), bool] */;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
  %511 = cast(meta[relay.Constant][42] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %512 = reshape(%511, newshape=[11, 1, 12]) /* ty=Tensor[(11, 1, 12), float32] */;
  %513 = @func_3924(%512) /* ty=(Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) */;
  %514 = sigmoid(%510) /* ty=Tensor[(10, 12, 14), float32] */;
  %515 = %513.3;
  (%514, %515, meta[relay.Constant][42] /* ty=Tensor[(132), float32] */)
}

def @func_6664() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %516 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %517 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %518 = %516.1;
  %519 = %517.2;
  (%518, %519)
}

def @main(%var_12400: Tensor[(14, 6, 13), float32], %var_12404: Tensor[(1680), uint16], %var_12405: Tensor[(5040), float32]) -> (Tensor[(14, 6, 13), float32], Tensor[(1, 1680), float32], Tensor[(330, 2), uint8], Tensor[(4, 12, 12), float64], Tensor[(1, 280), float64], Tensor[(9, 3, 5040), float32], Tensor[(14, 10, 3), float32], Tensor[(420), uint64], Tensor[(576, 1680), int64], Tensor[(5040), float64]) {
  %520 = cast(%var_12400, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
  %521 = cast(%var_12404, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %522 = cast(%var_12405, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %523 = cast(meta[relay.Constant][43] /* ty=Tensor[(330, 2), uint8] */, dtype="uint8") /* ty=Tensor[(330, 2), uint8] */;
  %524 = reshape(%521, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %525 = reshape(%522, newshape=[3, 1680]) /* ty=Tensor[(3, 1680), float32] */;
  %526 = reshape(%523, newshape=[660]) /* ty=Tensor[(660), uint8] */;
  %527 = @func_12201(%524, %525, %526) /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) */;
  %528 = cast(meta[relay.Constant][44] /* ty=Tensor[(576, 1), int8] */, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %529 = cast(meta[relay.Constant][44] /* ty=Tensor[(576, 1), int8] */, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %530 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 280), uint64] */, dtype="uint64") /* ty=Tensor[(1, 280), uint64] */;
  %531 = reshape(%528, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %532 = reshape(%529, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %533 = reshape(%530, newshape=[280, 1]) /* ty=Tensor[(280, 1), uint64] */;
  %534 = @func_5223(%531, %532, %533) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) */;
  %535 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 280), uint64] */, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %536 = cast(%var_12405, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %537 = atan(%536) /* ty=Tensor[(5040), float32] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %539 = log(%538) /* ty=Tensor[(5040), float32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(5040), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(1), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(5040), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?), bool] */;
  %544 = less(%542, %543) /* ty=Tensor[(5040), bool] */;
  %545 = @func_7946() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %546 = %545.0;
  %547 = cast(%544, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %548 = cast(%546, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %549 = cast(meta[relay.Constant][46] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %550 = reshape(%549, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), uint64] */;
  %551 = cast(%var_12404, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %552 = cast(meta[relay.Constant][44] /* ty=Tensor[(576, 1), int8] */, dtype="int64") /* ty=Tensor[(576, 1), int64] */;
  %553 = cast(%539, dtype="float64") /* ty=Tensor[(5040), float64] */;
  %554 = exp(%520) /* ty=Tensor[(14, 6, 13), float32] */;
  %555 = %527.11;
  %556 = %534.1;
  %557 = asin(%535) /* ty=Tensor[(1, 280), float64] */;
  %558 = divide(%547, %548) /* ty=Tensor[(9, 3, 5040), float32] */;
  %559 = @func_11808(%550) /* ty=Tensor[(14, 10, 3), float32] */;
  %560 = add(%551, %552) /* ty=Tensor[(576, 1680), int64] */;
  %561 = tan(%553) /* ty=Tensor[(5040), float64] */;
  (%554, %555, meta[relay.Constant][43] /* ty=Tensor[(330, 2), uint8] */, %556, %557, %558, %559, meta[relay.Constant][46] /* ty=Tensor[(420), uint64] */, %560, %561)
}

def @func_4638(%var_4635: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64],) {
  %562 = cast(%var_4635, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %563 = acosh(%562) /* ty=Tensor[(11, 7, 14), float64] */;
  (%563,)
}

def @func_8429(%var_8400: bool, %var_8401: Tensor[(90), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %564 = cast(%var_8400, dtype="bool") /* ty=bool */;
  %565 = cast(%var_8401, dtype="bool") /* ty=Tensor[(90), bool] */;
  %566 = reshape(%564, newshape=[]) /* ty=bool */;
  %567 = reshape(%565, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), bool] */;
  %568 = @func_8088(%566, %567) /* ty=(Tensor[(1, 15, 6), bool],) */;
  %569 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %570 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %571 = %568.0;
  %572 = %569.0;
  %573 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  (%570, %571, %var_8400, %var_8401, %572, %573)
}

def @func_7871() -> (Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) {
  %574 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %576 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 77), float32] */, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %577 = reshape(%576, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %578 = asin(%575) /* ty=Tensor[(9, 3, 1), float32] */;
  %579 = @func_254(%577) /* ty=Tensor[(7, 11, 1), float32] */;
  (%578, %579, meta[relay.Constant][47] /* ty=Tensor[(1, 77), float32] */)
}

def @func_6700(%var_6698: Tensor[(4, 420), uint16]) -> (Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) {
  %580 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
  %581 = cast(%var_6698, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
  %582 = reshape(%581, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %583 = @func_6631(%582) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
  %584 = %580.0;
  %585 = %583.1;
  (%584, %585, %var_6698)
}

def @func_8880() -> Tensor[(9, 2, 3), float64] {
  %586 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %586.0
}

def @func_9967(%var_9927: Tensor[(9, 3, 13), float32], %var_9962: Tensor[(616), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 13), float64], Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32]) {
  %587 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %588 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %590 = cast(%var_9927, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
  %591 = less_equal(%589, %590) /* ty=Tensor[(9, 3, 13), bool] */;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %593 = shape_of(%var_9927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_9927, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %596 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %597 = cast(%var_9962, dtype="int32") /* ty=Tensor[(616), int32] */;
  %598 = reshape(%596, newshape=[]) /* ty=int32 */;
  %599 = reshape(%597, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %600 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  %601 = %587.0;
  %602 = divide(%594, %595) /* ty=Tensor[(9, 3, 13), float64] */;
  %603 = @func_499(%598, %599) /* ty=Tensor[(11, 14, 4), int32] */;
  (%600, %601, %602, %603, 2 /* ty=int32 */, %var_9962)
}

def @func_925(%var_918: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  %604 = cast(%var_918, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %605 = log2(%604) /* ty=Tensor[(9, 2, 3), float64] */;
  (%605,)
}

def @func_9810(%var_9772: Tensor[(1092), float32], %var_9780: Tensor[(65), int64], %var_9782: Tensor[(77, 1), float32], %var_9796: Tensor[(126), bool], %var_9797: Tensor[(1890), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), float32], Tensor[(13, 5, 1), int64], Tensor[(65), int64], Tensor[(2, 168), float32], Tensor[(77, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(54), float64], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(1890), bool], Tensor[(77), float32]) {
  %606 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %607 = cast(%var_9772, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %608 = reshape(%607, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %609 = cast(%var_9780, dtype="int64") /* ty=Tensor[(65), int64] */;
  %610 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %611 = cast(%var_9782, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
  %612 = reshape(%609, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), int64] */;
  %613 = reshape(%610, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %614 = reshape(%611, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %615 = @func_3982(%612, %613, %614) /* ty=(Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) */;
  %616 = cast(meta[relay.Constant][49] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %617 = reshape(%616, newshape=[54]) /* ty=Tensor[(54), float64] */;
  %618 = @func_8709(%617) /* ty=(Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) */;
  %619 = cast(%var_9796, dtype="bool") /* ty=Tensor[(126), bool] */;
  %620 = cast(%var_9797, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %621 = reshape(%619, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %622 = reshape(%620, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %623 = %615.0;
  %624 = cast(%623, dtype="int64") /* ty=Tensor[(13, 5, 1), int64] */;
  %625 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %626 = cast(%var_9782, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
  %627 = reshape(%624, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), int64] */;
  %628 = reshape(%625, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %629 = reshape(%626, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %630 = @func_3982(%627, %628, %629) /* ty=(Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) */;
  %631 = %606.0;
  %632 = @func_1679(%608) /* ty=Tensor[(7, 12, 13), float32] */;
  %633 = %618.1;
  %634 = @func_1446(%621, %622) /* ty=Tensor[(9, 15, 14), bool] */;
  %635 = %630.8;
  (%631, %632, %var_9772, %623, %var_9780, meta[relay.Constant][48] /* ty=Tensor[(2, 168), float32] */, %var_9782, %633, meta[relay.Constant][49] /* ty=Tensor[(54), float64] */, %634, %var_9796, %var_9797, %635)
}

def @func_9137() -> Tensor[(9, 2, 3), float64] {
  @func_7096() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_6136() -> Tensor[(9, 3, 1), float32] {
  @func_5878() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_10891(%var_10854: int16, %var_10855: Tensor[(2240, 1), int16], %var_10866: Tensor[(2240, 14), int16]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(16, 10, 14), int16], int16, Tensor[(2240, 14), float64], Tensor[(9, 3, 1), float32], Tensor[(2240, 1), float64], Tensor[(9, 3, 1), float32]) {
  %636 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %637 = reshape(%636, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
  %638 = cast(%var_10854, dtype="int16") /* ty=int16 */;
  %639 = cast(%var_10855, dtype="int16") /* ty=Tensor[(2240, 1), int16] */;
  %640 = reshape(%638, newshape=[]) /* ty=int16 */;
  %641 = reshape(%639, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), int16] */;
  %642 = @func_7699(%640, %641) /* ty=(Tensor[(16, 10, 14), int16],) */;
  %643 = cast(%var_10855, dtype="float64") /* ty=Tensor[(2240, 1), float64] */;
  %644 = cast(%var_10866, dtype="float64") /* ty=Tensor[(2240, 14), float64] */;
  %645 = cast(%var_10855, dtype="float64") /* ty=Tensor[(2240, 1), float64] */;
  %646 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %647 = @func_8880() /* ty=Tensor[(9, 2, 3), float64] */;
  %648 = @func_48(%637) /* ty=Tensor[(3, 14, 8), float64] */;
  %649 = %642.0;
  %650 = maximum(%643, %644) /* ty=Tensor[(2240, 14), float64] */;
  %651 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %652 = log(%645) /* ty=Tensor[(2240, 1), float64] */;
  %653 = %646.0;
  (%647, %648, meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, %649, %var_10854, %650, %651, %652, %653)
}

def @func_6388() -> Tensor[(9, 3, 1), float32] {
  %654 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %654.1
}

def @func_1679(%var_1673: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
  %655 = cast(%var_1673, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  cos(%655) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_3924(%var_3869: Tensor[(11, 1, 12), float32]) -> (Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) {
  %656 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %657 = cast(meta[relay.Constant][51] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %658 = reshape(%656, newshape=[]) /* ty=int32 */;
  %659 = reshape(%657, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %660 = cast(%var_3869, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %661 = cosh(%660) /* ty=Tensor[(11, 1, 12), float32] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(11, 1, 12), float64] */;
  %663 = @func_499(%658, %659) /* ty=Tensor[(11, 14, 4), int32] */;
  %664 = acos(%662) /* ty=Tensor[(11, 1, 12), float64] */;
  (%663, 7 /* ty=int32 */, meta[relay.Constant][51] /* ty=Tensor[(616), int32] */, %664)
}

def @func_10988() -> Tensor[(8, 11, 11), float64] {
  %665 = @func_10113() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %665.1
}

def @func_6631(%var_6580: Tensor[(1680), uint16]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) {
  %666 = cast(%var_6580, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %667 = reshape(%666, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
  %668 = @func_4592(%667) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
  %669 = cast(%var_6580, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %670 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %671 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
  %672 = %668.1;
  %673 = asin(%669) /* ty=Tensor[(1680), float64] */;
  %674 = %670.3;
  %675 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  (%671, %672, %673, %674, %675)
}

def @func_10684() -> Tensor[(9, 2, 3), float64] {
  %676 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %676.1
}

def @func_11371() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %677 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %678 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %679 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
  %680 = %677.1;
  (%678, %679, %680)
}

def @func_6675() -> (Tensor[(9, 3, 1), float32],) {
  %681 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  (%681,)
}

def @func_8782() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %682 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %683 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %684 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %685 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %686 = %682.0;
  %687 = %683.1;
  %688 = %684.0;
  (%685, %686, %687, %688)
}

def @func_3982(%var_3957: Tensor[(13, 5, 1), int64], %var_3970: Tensor[(336), float32], %var_3975: Tensor[(77), float32]) -> (Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) {
  %689 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %690 = cast(%var_3957, dtype="int64") /* ty=Tensor[(13, 5, 1), int64] */;
  %691 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %692 = reshape(%691, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %693 = cast(%var_3957, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
  %694 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %695 = cast(%var_3970, dtype="float32") /* ty=Tensor[(336), float32] */;
  %696 = reshape(%695, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
  %697 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %698 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %699 = cast(-6 /* ty=int64 */, dtype="int32") /* ty=int32 */;
  %700 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 88), int32] */, dtype="int32") /* ty=Tensor[(7, 88), int32] */;
  %701 = cast(%var_3975, dtype="float32") /* ty=Tensor[(77), float32] */;
  %702 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %703 = cast(meta[relay.Constant][55] /* ty=Tensor[(484, 2), float64] */, dtype="float64") /* ty=Tensor[(484, 2), float64] */;
  %704 = reshape(%697, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %705 = reshape(%698, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %706 = reshape(%699, newshape=[]) /* ty=int32 */;
  %707 = reshape(%700, newshape=[616]) /* ty=Tensor[(616), int32] */;
  %708 = reshape(%701, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %709 = reshape(%702, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %710 = reshape(%703, newshape=[1, 968]) /* ty=Tensor[(1, 968), float64] */;
  %711 = @func_1918(%704, %705, %706, %707, %708, %709, %710) /* ty=(Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) */;
  %712 = minimum(%689, %690) /* ty=Tensor[(13, 5, 1), int64] */;
  %713 = @func_1679(%692) /* ty=Tensor[(7, 12, 13), float32] */;
  %714 = add(%693, %694) /* ty=Tensor[(13, 5, 1092), float32] */;
  %715 = @func_48(%696) /* ty=Tensor[(3, 14, 8), float64] */;
  %716 = %711.6;
  (%712, %713, %714, %715, %var_3970, %716, meta[relay.Constant][53] /* ty=Tensor[(280), uint64] */, meta[relay.Constant][54] /* ty=Tensor[(7, 88), int32] */, %var_3975, meta[relay.Constant][55] /* ty=Tensor[(484, 2), float64] */)
}

def @func_10177(%var_10172: Tensor[(9, 3, 3), float64]) -> Tensor[(9, 3, 3), int32] {
  %717 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="int32") /* ty=Tensor[(9, 3, 1), int32] */;
  %720 = cast(%var_10172, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
  multiply(%719, %720) /* ty=Tensor[(9, 3, 3), int32] */
}

def @func_8229() -> (Tensor[(9, 3, 1), float32],) {
  %721 = @func_7428() /* ty=Tensor[(9, 3, 1), float32] */;
  (%721,)
}

def @func_11531() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
  %722 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %724 = @func_10113() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %725 = sqrt(%723) /* ty=Tensor[(9, 3, 1), float64] */;
  %726 = %724.0;
  (%725, %726)
}

def @func_12365() -> (Tensor[(7, 11, 1), float32],) {
  %727 = @func_7871() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) */;
  %728 = %727.1;
  (%728,)
}

def @func_843(%var_838: Tensor[(8, 11, 11), float64]) -> Tensor[(8, 11, 11), float64] {
  %729 = cast(%var_838, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
  atanh(%729) /* ty=Tensor[(8, 11, 11), float64] */
}

def @func_6262(%var_6249: int32, %var_6250: Tensor[(14, 44), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) {
  %730 = cast(%var_6249, dtype="int32") /* ty=int32 */;
  %731 = cast(%var_6250, dtype="int32") /* ty=Tensor[(14, 44), int32] */;
  %732 = reshape(%730, newshape=[]) /* ty=int32 */;
  %733 = reshape(%731, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %734 = cast(%var_6250, dtype="float32") /* ty=Tensor[(14, 44), float32] */;
  %735 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %736 = @func_499(%732, %733) /* ty=Tensor[(11, 14, 4), int32] */;
  %737 = exp(%734) /* ty=Tensor[(14, 44), float32] */;
  (%735, %736, %var_6249, %737)
}

def @func_8018() -> Tensor[(9, 3, 1), float32] {
  %738 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %738.0
}

def @func_12341() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %739 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %740 = @func_10684() /* ty=Tensor[(9, 2, 3), float64] */;
  (%739, %740)
}

def @func_6936(%var_6927: Tensor[(126), bool], %var_6928: Tensor[(9, 210), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) {
  %741 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %742 = cast(%var_6927, dtype="bool") /* ty=Tensor[(126), bool] */;
  %743 = cast(%var_6928, dtype="bool") /* ty=Tensor[(9, 210), bool] */;
  %744 = reshape(%742, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %745 = reshape(%743, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %746 = %741.0;
  %747 = @func_1446(%744, %745) /* ty=Tensor[(9, 15, 14), bool] */;
  (%746, %747, %var_6927, %var_6928)
}

def @func_10460(%var_10427: Tensor[(16, 1, 1), float64], %var_10428: Tensor[(16, 7, 6), float64]) -> (Tensor[(16, 7, 6), float64], Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32]) {
  %748 = cast(%var_10427, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %749 = cast(%var_10428, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
  %750 = mod(%748, %749) /* ty=Tensor[(16, 7, 6), float64] */;
  %751 = cast(%var_10428, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = cast(meta[relay.Constant][56] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %756 = reshape(%755, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
  %757 = subtract(%753, %754) /* ty=Tensor[(16, 7, 6), float64] */;
  %758 = @func_9847() /* ty=Tensor[(9, 2, 3), float64] */;
  %759 = @func_48(%756) /* ty=Tensor[(3, 14, 8), float64] */;
  (%757, %758, %759, meta[relay.Constant][56] /* ty=Tensor[(336), float32] */)
}

def @func_7000(%var_6949: Tensor[(156), float64]) -> (Tensor[(2, 6, 13), bool], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
  %760 = cast(meta[relay.Constant][57] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %761 = cast(%var_6949, dtype="float64") /* ty=Tensor[(156), float64] */;
  %762 = reshape(%760, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
  %763 = reshape(%761, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %764 = @func_1301(%762, %763) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
  %765 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %767 = %764.1;
  %768 = log10(%766) /* ty=Tensor[(9, 3, 1), float32] */;
  (%767, meta[relay.Constant][57] /* ty=Tensor[(210), uint64] */, %var_6949, %768)
}

def @func_10264(%var_10251: Tensor[(14, 44), int32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) {
  %769 = @func_8782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %770 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %771 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %772 = cast(%var_10251, dtype="int32") /* ty=Tensor[(14, 44), int32] */;
  %773 = reshape(%771, newshape=[]) /* ty=int32 */;
  %774 = reshape(%772, newshape=[14, 44]) /* ty=Tensor[(14, 44), int32] */;
  %775 = @func_6262(%773, %774) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) */;
  %776 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
  %777 = %769.0;
  %778 = %770.0;
  %779 = %775.1;
  (%776, %777, %778, %779, -8 /* ty=int32 */, %var_10251)
}

def @func_11016(%var_10991: Tensor[(1, 11, 12), float64]) -> (Tensor[(?, 11, 12), bool], Tensor[(1, 11, 12), float32], Tensor[(624), bool], Tensor[(12, 4, 13), float64]) {
  %780 = cast(%var_10991, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %781 = sqrt(%780) /* ty=Tensor[(1, 11, 12), float64] */;
  %782 = cast(%var_10991, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = cast(%var_10991, dtype="float32") /* ty=Tensor[(1, 11, 12), float32] */;
  %787 = cast(meta[relay.Constant][58] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %788 = reshape(%787, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), bool] */;
  %789 = @func_3375(%788) /* ty=Tensor[(12, 4, 13), bool] */;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
  %791 = not_equal(%784, %785) /* ty=Tensor[(?, 11, 12), bool] */;
  %792 = rsqrt(%786) /* ty=Tensor[(1, 11, 12), float32] */;
  %793 = sin(%790) /* ty=Tensor[(12, 4, 13), float64] */;
  (%791, %792, meta[relay.Constant][58] /* ty=Tensor[(624), bool] */, %793)
}

def @func_6324() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %794 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %795 = %794.1;
  %796 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
  (%795, %796)
}

def @func_9081() -> (Tensor[(9, 3, 1), bool],) {
  %797 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
  %798 = %797.1;
  (%798,)
}

def @func_1977(%var_1969: Tensor[(8, 7, 5), float64], %var_1975: Tensor[(968), float64]) -> (Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %799 = cast(%var_1969, dtype="float64") /* ty=Tensor[(8, 7, 5), float64] */;
  %800 = cast(%var_1975, dtype="float64") /* ty=Tensor[(968), float64] */;
  %801 = reshape(%800, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %802 = tan(%799) /* ty=Tensor[(8, 7, 5), float64] */;
  %803 = @func_843(%801) /* ty=Tensor[(8, 11, 11), float64] */;
  (%802, %803, %var_1975)
}

def @func_365(%var_346: Tensor[(2, 6, 13), float64], %var_352: Tensor[(2, 6, 13), float64]) -> (Tensor[(2, 6, 13), bool],) {
  %804 = cast(%var_346, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %805 = sinh(%804) /* ty=Tensor[(2, 6, 13), float64] */;
  %806 = cast(%var_352, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = not_equal(%808, %809) /* ty=Tensor[(2, 6, 13), bool] */;
  (%810,)
}

def @func_11441() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %811 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %812 = @func_9137() /* ty=Tensor[(9, 2, 3), float64] */;
  (%811, %812)
}

def @func_48(%var_27: Tensor[(3, 14, 8), float32]) -> Tensor[(3, 14, 8), float64] {
  %813 = cast(%var_27, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
  %814 = asinh(%813) /* ty=Tensor[(3, 14, 8), float32] */;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  log10(%815) /* ty=Tensor[(3, 14, 8), float64] */
}

def @func_10189() -> Tensor[(132), float32] {
  %816 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
  %816.0
}

def @func_12201(%var_12142: Tensor[(1680), uint16], %var_12181: Tensor[(3, 1680), float32], %var_12194: Tensor[(660), uint8]) -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) {
  %817 = @func_11460() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) */;
  %818 = @func_7593() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
  %819 = cast(%var_12142, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %820 = reshape(%819, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %821 = @func_6631(%820) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
  %822 = cast(%var_12142, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %823 = reshape(%822, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %824 = @func_6631(%823) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
  %825 = %817.0;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %827 = reshape(%826, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %828 = @func_9878(%827) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) */;
  %829 = %828.3;
  %830 = cast(%829, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
  %831 = tan(%830) /* ty=Tensor[(1, 1680), float64] */;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
  %833 = cast(%831, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
  %834 = reshape(%833, newshape=[4, 420]) /* ty=Tensor[(4, 420), uint16] */;
  %835 = @func_6700(%834) /* ty=(Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) */;
  %836 = cast(%831, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %837 = log2(%836) /* ty=Tensor[(1, 1680), float32] */;
  %838 = cast(%837, dtype="uint64") /* ty=Tensor[(1, 1680), uint64] */;
  %839 = cast(%var_12181, dtype="uint64") /* ty=Tensor[(3, 1680), uint64] */;
  %840 = cast(%var_12194, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %841 = cast(%var_12194, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %842 = cast(meta[relay.Constant][59] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %843 = reshape(%840, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), uint8] */;
  %844 = reshape(%841, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), uint8] */;
  %845 = reshape(%842, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %846 = @func_11622(%843, %844, %845) /* ty=(Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) */;
  %847 = cast(%837, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %848 = %818.0;
  %849 = %821.2;
  %850 = %824.0;
  %851 = log(%832) /* ty=Tensor[(1, 1680), float64] */;
  %852 = %835.2;
  %853 = multiply(%838, %839) /* ty=Tensor[(3, 1680), uint64] */;
  %854 = %846.3;
  %855 = acos(%847) /* ty=Tensor[(1, 1680), float32] */;
  (%825, %848, %849, %var_12142, %850, %851, %852, %853, %854, %var_12194, meta[relay.Constant][59] /* ty=Tensor[(90), bool] */, %855)
}

def @func_9063() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %856 = @func_7181() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %857 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
  %858 = %856.0;
  (%857, %858)
}

def @func_7593() -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %859 = @func_7515() /* ty=Tensor[(9, 2, 3), float64] */;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %861 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %862 = cos(%860) /* ty=Tensor[(9, 2, 3), float64] */;
  %863 = %861.1;
  (%862, %863)
}

def @func_9744(%var_9649: Tensor[(60, 20), float64], %var_9700: Tensor[(27), float32], %var_9701: Tensor[(1680), uint16]) -> (Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) {
  %864 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %865 = cast(%var_9649, dtype="float64") /* ty=Tensor[(60, 20), float64] */;
  %866 = cast(meta[relay.Constant][60] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %867 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %868 = cast(meta[relay.Constant][61] /* ty=Tensor[(1092, 1), float32] */, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
  %869 = reshape(%865, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %870 = reshape(%866, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %871 = reshape(%867, newshape=[]) /* ty=int32 */;
  %872 = reshape(%868, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %873 = @func_4368(%869, %870, %871, %872) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %874 = cast(meta[relay.Constant][62] /* ty=Tensor[(126), bool] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %875 = cast(meta[relay.Constant][63] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %876 = reshape(%874, newshape=[126]) /* ty=Tensor[(126), bool] */;
  %877 = reshape(%875, newshape=[9, 210]) /* ty=Tensor[(9, 210), bool] */;
  %878 = @func_6936(%876, %877) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) */;
  %879 = cast(meta[relay.Constant][64] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %880 = reshape(%879, newshape=[3, 11, 15]) /* ty=Tensor[(3, 11, 15), float32] */;
  %881 = @func_6778(%880) /* ty=(Tensor[(3, 11, 15), float32],) */;
  %882 = cast(meta[relay.Constant][63] /* ty=Tensor[(1890), bool] */, dtype="uint64") /* ty=Tensor[(1890), uint64] */;
  %883 = cast(meta[relay.Constant][61] /* ty=Tensor[(1092, 1), float32] */, dtype="uint64") /* ty=Tensor[(1092, 1), uint64] */;
  %884 = cast(%var_9700, dtype="float32") /* ty=Tensor[(27), float32] */;
  %885 = cast(%var_9701, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %886 = reshape(%884, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float32] */;
  %887 = reshape(%885, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %888 = @func_8180(%886, %887) /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) */;
  %889 = cast(meta[relay.Constant][65] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %890 = reshape(%889, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %891 = %864.0;
  %892 = %873.5;
  %893 = %878.2;
  %894 = %881.0;
  %895 = bitwise_or(%882, %883) /* ty=Tensor[(1092, 1890), uint64] */;
  %896 = %888.2;
  %897 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  %898 = @func_254(%890) /* ty=Tensor[(7, 11, 1), float32] */;
  %899 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
  (%891, %892, %var_9649, meta[relay.Constant][60] /* ty=Tensor[(280), uint64] */, 6 /* ty=int32 */, %893, meta[relay.Constant][62] /* ty=Tensor[(126), bool] */, %894, meta[relay.Constant][64] /* ty=Tensor[(495), float32] */, %895, %896, %var_9700, %var_9701, %897, %898, meta[relay.Constant][65] /* ty=Tensor[(77), float32] */, %899)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @main(%var_12400: Tensor[(14, 6, 13), float32], %var_12404: Tensor[(1680), uint16], %var_12405: Tensor[(5040), float32]) -> (Tensor[(14, 6, 13), float32], Tensor[(1, 1680), float32], Tensor[(330, 2), uint8], Tensor[(4, 12, 12), float64], Tensor[(1, 280), float64], Tensor[(9, 3, 5040), float32], Tensor[(14, 10, 3), float32], Tensor[(420), uint64], Tensor[(576, 1680), int64], Tensor[(5040), float64]) {
  %0 = cast(%var_12400, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
  %1 = cast(%var_12404, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %2 = cast(%var_12405, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(330, 2), uint8] */, dtype="uint8") /* ty=Tensor[(330, 2), uint8] */;
  %4 = reshape(%1, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %5 = reshape(%2, newshape=[3, 1680]) /* ty=Tensor[(3, 1680), float32] */;
  %6 = reshape(%3, newshape=[660]) /* ty=Tensor[(660), uint8] */;
  %7 = @func_12206(%4, %5, %6) /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(576, 1), int8] */, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(576, 1), int8] */, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 280), uint64] */, dtype="uint64") /* ty=Tensor[(1, 280), uint64] */;
  %11 = reshape(%8, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %12 = reshape(%9, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %13 = reshape(%10, newshape=[280, 1]) /* ty=Tensor[(280, 1), uint64] */;
  %14 = @func_5228(%11, %12, %13) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 280), uint64] */, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %16 = cast(%var_12405, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %17 = atan(%16) /* ty=Tensor[(5040), float32] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %19 = log(%18) /* ty=Tensor[(5040), float32] */;
  %20 = cast(%17, dtype="bool") /* ty=Tensor[(5040), bool] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(1), int32] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(5040), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?), bool] */;
  %24 = less(%22, %23) /* ty=Tensor[(5040), bool] */;
  %25 = @func_7948() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %26 = %25.0;
  %27 = cast(%24, dtype="float32") /* ty=Tensor[(5040), float32] */;
  %28 = cast(%26, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %30 = reshape(%29, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), uint64] */;
  %31 = cast(%var_12404, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(576, 1), int8] */, dtype="int64") /* ty=Tensor[(576, 1), int64] */;
  %33 = cast(%19, dtype="float64") /* ty=Tensor[(5040), float64] */;
  %34 = exp(%0) /* ty=Tensor[(14, 6, 13), float32] */;
  %35 = %7.11;
  %36 = %14.1;
  %37 = asin(%15) /* ty=Tensor[(1, 280), float64] */;
  %38 = divide(%27, %28) /* ty=Tensor[(9, 3, 5040), float32] */;
  %39 = @func_11808(%30) /* ty=Tensor[(14, 10, 3), float32] */;
  %40 = add(%31, %32) /* ty=Tensor[(576, 1680), int64] */;
  %41 = tan(%33) /* ty=Tensor[(5040), float64] */;
  (%34, %35, meta[relay.Constant][0] /* ty=Tensor[(330, 2), uint8] */, %36, %37, %38, %39, meta[relay.Constant][3] /* ty=Tensor[(420), uint64] */, %40, %41)
}

def @func_10652() -> (Tensor[(9, 2, 3), float64],) {
  %43 = fn () -> (Tensor[(9, 2, 3), float64],) {
    %42 = @func_9137() /* ty=Tensor[(9, 2, 3), float64] */;
    (%42,)
  };
  %43() /* ty=(Tensor[(9, 2, 3), float64],) */
}

def @func_10770(%var_10768: Tensor[(280), uint64], %var_10769: int32) -> (Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) {
  @func_10766(%var_10768, %var_10769) /* ty=(Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) */
}

def @func_3924(%var_3869: Tensor[(11, 1, 12), float32]) -> (Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) {
  %44 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %46 = reshape(%44, newshape=[]) /* ty=int32 */;
  %47 = reshape(%45, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %48 = cast(%var_3869, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %49 = cosh(%48) /* ty=Tensor[(11, 1, 12), float32] */;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(11, 1, 12), float64] */;
  %51 = @func_499(%46, %47) /* ty=Tensor[(11, 14, 4), int32] */;
  %52 = acos(%50) /* ty=Tensor[(11, 1, 12), float64] */;
  (%51, 7 /* ty=int32 */, meta[relay.Constant][4] /* ty=Tensor[(616), int32] */, %52)
}

def @func_11018(%var_11017: Tensor[(1, 11, 12), float64]) -> (Tensor[(?, 11, 12), bool], Tensor[(1, 11, 12), float32], Tensor[(624), bool], Tensor[(12, 4, 13), float64]) {
  %67 = fn (%var_10991: Tensor[(1, 11, 12), float64]) -> (Tensor[(?, 11, 12), bool], Tensor[(1, 11, 12), float32], Tensor[(624), bool], Tensor[(12, 4, 13), float64]) {
    %53 = cast(%var_10991, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
    %54 = sqrt(%53) /* ty=Tensor[(1, 11, 12), float64] */;
    %55 = cast(%var_10991, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(%54, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %59 = cast(%var_10991, dtype="float32") /* ty=Tensor[(1, 11, 12), float32] */;
    %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
    %61 = reshape(%60, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), bool] */;
    %62 = @func_3375(%61) /* ty=Tensor[(12, 4, 13), bool] */;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
    %64 = not_equal(%57, %58) /* ty=Tensor[(?, 11, 12), bool] */;
    %65 = rsqrt(%59) /* ty=Tensor[(1, 11, 12), float32] */;
    %66 = sin(%63) /* ty=Tensor[(12, 4, 13), float64] */;
    (%64, %65, meta[relay.Constant][5] /* ty=Tensor[(624), bool] */, %66)
  };
  %67(%var_11017) /* ty=(Tensor[(?, 11, 12), bool], Tensor[(1, 11, 12), float32], Tensor[(624), bool], Tensor[(12, 4, 13), float64]) */
}

def @func_6702(%var_6701: Tensor[(4, 420), uint16]) -> (Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) {
  %74 = fn (%var_6698: Tensor[(4, 420), uint16]) -> (Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) {
    %68 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
    %69 = cast(%var_6698, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
    %70 = reshape(%69, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
    %71 = @func_6631(%70) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
    %72 = %68.0;
    %73 = %71.1;
    (%72, %73, %var_6698)
  };
  %74(%var_6701) /* ty=(Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) */
}

def @func_11460() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) {
  %75 = @func_10573() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %76 = %75.0;
  %77 = @func_6360() /* ty=Tensor[(9, 2, 3), float64] */;
  (%76, %77)
}

def @func_11811(%var_11809: Tensor[(14, 10, 3), uint64]) -> Tensor[(14, 10, 3), float32] {
  @func_11808(%var_11809) /* ty=Tensor[(14, 10, 3), float32] */
}

def @func_12201(%var_12142: Tensor[(1680), uint16], %var_12181: Tensor[(3, 1680), float32], %var_12194: Tensor[(660), uint8]) -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) {
  %78 = @func_11460() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) */;
  %79 = @func_7593() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
  %80 = cast(%var_12142, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %81 = reshape(%80, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %82 = @func_6631(%81) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
  %83 = cast(%var_12142, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %84 = reshape(%83, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
  %85 = @func_6631(%84) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */;
  %86 = %78.0;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %88 = reshape(%87, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %89 = @func_9878(%88) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) */;
  %90 = %89.3;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
  %92 = tan(%91) /* ty=Tensor[(1, 1680), float64] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
  %94 = cast(%92, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
  %95 = reshape(%94, newshape=[4, 420]) /* ty=Tensor[(4, 420), uint16] */;
  %96 = @func_6700(%95) /* ty=(Tensor[(132), float32], Tensor[(11, 1, 12), float64], Tensor[(4, 420), uint16]) */;
  %97 = cast(%92, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %98 = log2(%97) /* ty=Tensor[(1, 1680), float32] */;
  %99 = cast(%98, dtype="uint64") /* ty=Tensor[(1, 1680), uint64] */;
  %100 = cast(%var_12181, dtype="uint64") /* ty=Tensor[(3, 1680), uint64] */;
  %101 = cast(%var_12194, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %102 = cast(%var_12194, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %104 = reshape(%101, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), uint8] */;
  %105 = reshape(%102, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), uint8] */;
  %106 = reshape(%103, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %107 = @func_11622(%104, %105, %106) /* ty=(Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) */;
  %108 = cast(%98, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %109 = %79.0;
  %110 = %82.2;
  %111 = %85.0;
  %112 = log(%93) /* ty=Tensor[(1, 1680), float64] */;
  %113 = %96.2;
  %114 = multiply(%99, %100) /* ty=Tensor[(3, 1680), uint64] */;
  %115 = %107.3;
  %116 = acos(%108) /* ty=Tensor[(1, 1680), float32] */;
  (%86, %109, %110, %var_12142, %111, %112, %113, %114, %115, %var_12194, meta[relay.Constant][6] /* ty=Tensor[(90), bool] */, %116)
}

def @func_4595(%var_4593: Tensor[(10, 12, 14), uint16]) -> (Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) {
  @func_4592(%var_4593) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */
}

def @func_7961() -> (Tensor[(9, 2, 3), float64],) {
  @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */
}

def @func_8943() -> Tensor[(9, 2, 3), float64] {
  @func_8941() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_4374(%var_4370: Tensor[(15, 16, 5), float64], %var_4371: Tensor[(280), uint64], %var_4372: int32, %var_4373: Tensor[(1092), float32]) -> (Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) {
  @func_4368(%var_4370, %var_4371, %var_4372, %var_4373) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */
}

def @func_9967(%var_9927: Tensor[(9, 3, 13), float32], %var_9962: Tensor[(616), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 13), float64], Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32]) {
  %117 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %118 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  %119 = cast(%118, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %120 = cast(%var_9927, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
  %121 = less_equal(%119, %120) /* ty=Tensor[(9, 3, 13), bool] */;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %123 = shape_of(%var_9927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_9927, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %126 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %127 = cast(%var_9962, dtype="int32") /* ty=Tensor[(616), int32] */;
  %128 = reshape(%126, newshape=[]) /* ty=int32 */;
  %129 = reshape(%127, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %130 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  %131 = %117.0;
  %132 = divide(%124, %125) /* ty=Tensor[(9, 3, 13), float64] */;
  %133 = @func_499(%128, %129) /* ty=Tensor[(11, 14, 4), int32] */;
  (%130, %131, %132, %133, 2 /* ty=int32 */, %var_9962)
}

def @func_9971(%var_9969: Tensor[(9, 3, 13), float32], %var_9970: Tensor[(616), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 13), float64], Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32]) {
  @func_9967(%var_9969, %var_9970) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 13), float64], Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32]) */
}

def @func_8784() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  @func_8782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */
}

def @func_7024() -> Tensor[(9, 3, 1), float32] {
  %134 = fn () -> Tensor[(9, 3, 1), float32] {
    @func_6547() /* ty=Tensor[(9, 3, 1), float32] */
  };
  %134() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_10360() -> (Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) {
  %142 = fn () -> (Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) {
    %135 = cast(-3.08273f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
    %137 = reshape(%135, newshape=[]) /* ty=float32 */;
    %138 = reshape(%136, newshape=[77]) /* ty=Tensor[(77), float32] */;
    %139 = @func_318(%137, %138) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
    %140 = @func_9847() /* ty=Tensor[(9, 2, 3), float64] */;
    %141 = %139.0;
    (%140, %141, -3.08273f /* ty=float32 */, meta[relay.Constant][7] /* ty=Tensor[(77), float32] */)
  };
  %142() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) */
}

def @func_10189() -> Tensor[(132), float32] {
  %143 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
  %143.0
}

def @func_11627(%var_11624: Tensor[(12, 11, 5), uint8], %var_11625: Tensor[(12, 11, 5), uint8], %var_11626: Tensor[(90), bool]) -> (Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) {
  @func_11622(%var_11624, %var_11625, %var_11626) /* ty=(Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) */
}

def @func_11373() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  @func_11371() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_8212() -> Tensor[(9, 3, 1), bool] {
  %145 = fn () -> Tensor[(9, 3, 1), bool] {
    %144 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
    %144.1
  };
  %145() /* ty=Tensor[(9, 3, 1), bool] */
}

def @func_10179(%var_10178: Tensor[(9, 3, 3), float64]) -> Tensor[(9, 3, 3), int32] {
  %150 = fn (%var_10172: Tensor[(9, 3, 3), float64]) -> Tensor[(9, 3, 3), int32] {
    %146 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
    %147 = %146.0;
    %148 = cast(%147, dtype="int32") /* ty=Tensor[(9, 3, 1), int32] */;
    %149 = cast(%var_10172, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
    multiply(%148, %149) /* ty=Tensor[(9, 3, 3), int32] */
  };
  %150(%var_10178) /* ty=Tensor[(9, 3, 3), int32] */
}

def @func_7096() -> Tensor[(9, 2, 3), float64] {
  %151 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %151.1
}

def @func_10575() -> (Tensor[(9, 3, 1), float64],) {
  @func_10573() /* ty=(Tensor[(9, 3, 1), float64],) */
}

def @func_6547() -> Tensor[(9, 3, 1), float32] {
  @func_6136() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_8941() -> Tensor[(9, 2, 3), float64] {
  @func_6360() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_4368(%var_4322: Tensor[(15, 16, 5), float64], %var_4331: Tensor[(280), uint64], %var_4332: int32, %var_4335: Tensor[(1092), float32]) -> (Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) {
  %152 = cast(%var_4331, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %153 = cast(%var_4331, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %154 = cast(%var_4332, dtype="int32") /* ty=int32 */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %157 = cast(%var_4335, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %159 = reshape(%152, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %160 = reshape(%153, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
  %161 = reshape(%154, newshape=[]) /* ty=int32 */;
  %162 = reshape(%155, newshape=[616]) /* ty=Tensor[(616), int32] */;
  %163 = reshape(%156, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %164 = reshape(%157, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %165 = reshape(%158, newshape=[1, 968]) /* ty=Tensor[(1, 968), float64] */;
  %166 = @func_1918(%159, %160, %161, %162, %163, %164, %165) /* ty=(Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) */;
  %167 = cast(%var_4322, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %168 = rsqrt(%167) /* ty=Tensor[(15, 16, 5), float64] */;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(15, 16, 5), float32] */;
  %170 = %166.5;
  %171 = sqrt(%169) /* ty=Tensor[(15, 16, 5), float32] */;
  (%170, %var_4331, %var_4332, meta[relay.Constant][8] /* ty=Tensor[(616), int32] */, meta[relay.Constant][9] /* ty=Tensor[(77), float32] */, %var_4335, meta[relay.Constant][10] /* ty=Tensor[(968, 1), float64] */, %171)
}

def @func_11400() -> (Tensor[(54), float64],) {
  @func_11398() /* ty=(Tensor[(54), float64],) */
}

def @func_10990() -> Tensor[(8, 11, 11), float64] {
  @func_10988() /* ty=Tensor[(8, 11, 11), float64] */
}

def @func_7000(%var_6949: Tensor[(156), float64]) -> (Tensor[(2, 6, 13), bool], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
  %172 = cast(meta[relay.Constant][11] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %173 = cast(%var_6949, dtype="float64") /* ty=Tensor[(156), float64] */;
  %174 = reshape(%172, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
  %175 = reshape(%173, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %176 = @func_1301(%174, %175) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
  %177 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %179 = %176.1;
  %180 = log10(%178) /* ty=Tensor[(9, 3, 1), float32] */;
  (%179, meta[relay.Constant][11] /* ty=Tensor[(210), uint64] */, %var_6949, %180)
}

def @func_7098() -> Tensor[(9, 2, 3), float64] {
  @func_7096() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_12233(%var_12231: Tensor[(576), int8], %var_12232: Tensor[(280), uint64]) -> (Tensor[(9, 3, 1), float32], Tensor[(280, 1), uint64], Tensor[(576), int8], Tensor[(280), uint64], Tensor[(14, 16, 2), float32]) {
  %193 = fn (%var_12219: Tensor[(576), int8], %var_12220: Tensor[(280), uint64]) -> (Tensor[(9, 3, 1), float32], Tensor[(280, 1), uint64], Tensor[(576), int8], Tensor[(280), uint64], Tensor[(14, 16, 2), float32]) {
    %181 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %182 = cast(%var_12219, dtype="int8") /* ty=Tensor[(576), int8] */;
    %183 = cast(%var_12219, dtype="int8") /* ty=Tensor[(576), int8] */;
    %184 = cast(%var_12220, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %185 = reshape(%182, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
    %186 = reshape(%183, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
    %187 = reshape(%184, newshape=[280, 1]) /* ty=Tensor[(280, 1), uint64] */;
    %188 = @func_5223(%185, %186, %187) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) */;
    %189 = @func_10359() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(14, 16, 2), float32], float32, Tensor[(77), float32]) */;
    %190 = %181.0;
    %191 = %188.4;
    %192 = %189.1;
    (%190, %191, %var_12219, %var_12220, %192)
  };
  %193(%var_12231, %var_12232) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(280, 1), uint64], Tensor[(576), int8], Tensor[(280), uint64], Tensor[(14, 16, 2), float32]) */
}

def @func_843(%var_838: Tensor[(8, 11, 11), float64]) -> Tensor[(8, 11, 11), float64] {
  %194 = cast(%var_838, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
  atanh(%194) /* ty=Tensor[(8, 11, 11), float64] */
}

def @func_925(%var_918: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  %195 = cast(%var_918, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %196 = log2(%195) /* ty=Tensor[(9, 2, 3), float64] */;
  (%196,)
}

def @func_6677() -> (Tensor[(9, 3, 1), float32],) {
  @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_8074() -> (Tensor[(9, 2, 3), float64],) {
  @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */
}

def @func_10932() -> (Tensor[(9, 3, 1), bool],) {
  @func_10930() /* ty=(Tensor[(9, 3, 1), bool],) */
}

def @func_6433() -> Tensor[(9, 3, 1), float32] {
  %198 = fn () -> Tensor[(9, 3, 1), float32] {
    %197 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
    %197.0
  };
  %198() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_9880(%var_9879: Tensor[(27), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) {
  %206 = fn (%var_9875: Tensor[(27), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) {
    %199 = cast(%var_9875, dtype="float32") /* ty=Tensor[(27), float32] */;
    %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1680), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
    %201 = reshape(%199, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float32] */;
    %202 = reshape(%200, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
    %203 = @func_8180(%201, %202) /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) */;
    %204 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
    %205 = %203.2;
    (%204, %205, %var_9875, meta[relay.Constant][12] /* ty=Tensor[(1, 1680), uint16] */)
  };
  %206(%var_9879) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1, 1680), uint16]) */
}

def @func_8712(%var_8710: Tensor[(54), float64]) -> (Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) {
  @func_8709(%var_8710) /* ty=(Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) */
}

def @func_11582() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(968), float64]) {
  %207 = @func_10573() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %208 = @func_7515() /* ty=Tensor[(9, 2, 3), float64] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %210 = reshape(%209, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %211 = @func_9339(%210) /* ty=(Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) */;
  %212 = %207.0;
  %213 = %211.3;
  (%212, %208, %213)
}

def @func_12106() -> Tensor[(9, 2, 3), float64] {
  @func_8880() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_6743(%var_6742: int32) -> (Tensor[(9, 3, 1), float32], int32, Tensor[(1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
  %227 = fn (%var_6735: int32) -> (Tensor[(9, 3, 1), float32], int32, Tensor[(1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
    %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %216 = cast(%var_6735, dtype="int32") /* ty=int32 */;
    %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %218 = reshape(%214, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %219 = reshape(%215, newshape=[280]) /* ty=Tensor[(280), uint64] */;
    %220 = reshape(%216, newshape=[]) /* ty=int32 */;
    %221 = reshape(%217, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %222 = @func_4368(%218, %219, %220, %221) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
    %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %224 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
    %225 = %222.2;
    %226 = sinh(%223) /* ty=Tensor[(1092), float32] */;
    (%224, %225, meta[relay.Constant][13] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][14] /* ty=Tensor[(280), uint64] */, %var_6735, %226)
  };
  %227(%var_6742) /* ty=(Tensor[(9, 3, 1), float32], int32, Tensor[(1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) */
}

def @func_8709(%var_8662: Tensor[(54), float64]) -> (Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) {
  %228 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %229 = %228.0;
  %230 = cast(%229, dtype="uint64") /* ty=Tensor[(9, 3, 1), uint64] */;
  %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 3, 5), float32] */, dtype="uint64") /* ty=Tensor[(9, 3, 5), uint64] */;
  %232 = cast(%var_8662, dtype="float64") /* ty=Tensor[(54), float64] */;
  %233 = reshape(%232, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %234 = @func_925(%233) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %235 = cast(%229, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %236 = acosh(%235) /* ty=Tensor[(9, 3, 1), float32] */;
  %237 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %238 = %237.1;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %240 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%236, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %243 = cast(%229, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %244 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%236, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %247 = floor_divide(%245, %246) /* ty=Tensor[(9, 3, ?), float32] */;
  %248 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %250 = asinh(%249) /* ty=Tensor[(9, 3, 1), float32] */;
  %251 = cast(%250, dtype="int16") /* ty=Tensor[(9, 3, 1), int16] */;
  %252 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%247, dtype="int16") /* ty=Tensor[(9, 3, ?), int16] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %255 = minimum(%230, %231) /* ty=Tensor[(9, 3, 5), uint64] */;
  %256 = @func_8211() /* ty=Tensor[(9, 3, 1), bool] */;
  %257 = %234.0;
  %258 = minimum(%241, %242) /* ty=Tensor[(9, 3, ?), float32] */;
  %259 = right_shift(%253, %254) /* ty=Tensor[(9, 3, ?), int16] */;
  (%255, %256, %257, %var_8662, %258, %259)
}

def @func_6086() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %269 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
    %260 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
    %262 = cast(%260, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
    %263 = cast(meta[relay.Constant][17] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %264 = reshape(%263, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
    %265 = @func_925(%264) /* ty=(Tensor[(9, 2, 3), float64],) */;
    %266 = atanh(%261) /* ty=Tensor[(9, 3, 1), float32] */;
    %267 = atan(%262) /* ty=Tensor[(9, 3, 1), float64] */;
    %268 = %265.0;
    (%266, %267, %268, meta[relay.Constant][17] /* ty=Tensor[(54), float64] */)
  };
  %269() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */
}

def @func_6262(%var_6249: int32, %var_6250: Tensor[(14, 44), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) {
  %270 = cast(%var_6249, dtype="int32") /* ty=int32 */;
  %271 = cast(%var_6250, dtype="int32") /* ty=Tensor[(14, 44), int32] */;
  %272 = reshape(%270, newshape=[]) /* ty=int32 */;
  %273 = reshape(%271, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %274 = cast(%var_6250, dtype="float32") /* ty=Tensor[(14, 44), float32] */;
  %275 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %276 = @func_499(%272, %273) /* ty=Tensor[(11, 14, 4), int32] */;
  %277 = exp(%274) /* ty=Tensor[(14, 44), float32] */;
  (%275, %276, %var_6249, %277)
}

def @func_502(%var_500: int32, %var_501: Tensor[(11, 14, 4), int32]) -> Tensor[(11, 14, 4), int32] {
  %280 = fn (%var_494: int32, %var_495: Tensor[(11, 14, 4), int32]) -> Tensor[(11, 14, 4), int32] {
    %278 = cast(%var_494, dtype="int32") /* ty=int32 */;
    %279 = cast(%var_495, dtype="int32") /* ty=Tensor[(11, 14, 4), int32] */;
    add(%278, %279) /* ty=Tensor[(11, 14, 4), int32] */
  };
  %280(%var_500, %var_501) /* ty=Tensor[(11, 14, 4), int32] */
}

def @func_11371() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %281 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %282 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %283 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
  %284 = %281.1;
  (%282, %283, %284)
}

def @func_8183(%var_8181: Tensor[(9, 3, 1), float32], %var_8182: Tensor[(1680), uint16]) -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) {
  %301 = fn (%var_8140: Tensor[(9, 3, 1), float32], %var_8146: Tensor[(1680), uint16]) -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) {
    %285 = cast(%var_8146, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
    %286 = reshape(%285, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
    %287 = @func_4592(%286) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
    %288 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
    %289 = cast(%var_8140, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
    %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
    %291 = cast(%288, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %293 = not_equal(%291, %292) /* ty=Tensor[(9, 3, ?), bool] */;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(9, 3, ?), float64] */;
    %295 = cast(%var_8146, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %296 = cast(%var_8146, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %297 = cast(%288, dtype="uint8") /* ty=Tensor[(9, 3, 1), uint8] */;
    %298 = %287.1;
    %299 = power(%294, %295) /* ty=Tensor[(9, 3, 1680), float64] */;
    %300 = bitwise_or(%296, %297) /* ty=Tensor[(9, 3, 1680), uint8] */;
    (%298, %299, %300)
  };
  %301(%var_8181, %var_8182) /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) */
}

def @func_1927(%var_1920: Tensor[(14, 4, 5), uint64], %var_1921: Tensor[(14, 4, 5), uint64], %var_1922: int32, %var_1923: Tensor[(616), int32], %var_1924: Tensor[(77), float32], %var_1925: Tensor[(1092), float32], %var_1926: Tensor[(1, 968), float64]) -> (Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) {
  @func_1918(%var_1920, %var_1921, %var_1922, %var_1923, %var_1924, %var_1925, %var_1926) /* ty=(Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) */
}

def @func_7183() -> (Tensor[(9, 3, 1), float32],) {
  @func_7181() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_6198(%var_6195: Tensor[(1, 1200), float64], %var_6196: int32, %var_6197: Tensor[(1092), float32]) -> (Tensor[(9, 3, 1), float32], Tensor[(616), int32], Tensor[(1, 1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
  %313 = fn (%var_6183: Tensor[(1, 1200), float64], %var_6185: int32, %var_6186: Tensor[(1092), float32]) -> (Tensor[(9, 3, 1), float32], Tensor[(616), int32], Tensor[(1, 1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) {
    %302 = cast(%var_6183, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
    %303 = cast(meta[relay.Constant][18] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %304 = cast(%var_6185, dtype="int32") /* ty=int32 */;
    %305 = cast(%var_6186, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %306 = reshape(%302, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %307 = reshape(%303, newshape=[280]) /* ty=Tensor[(280), uint64] */;
    %308 = reshape(%304, newshape=[]) /* ty=int32 */;
    %309 = reshape(%305, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %310 = @func_4368(%306, %307, %308, %309) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
    %311 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    %312 = %310.3;
    (%311, %312, %var_6183, meta[relay.Constant][18] /* ty=Tensor[(280), uint64] */, %var_6185, %var_6186)
  };
  %313(%var_6195, %var_6196, %var_6197) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(616), int32], Tensor[(1, 1200), float64], Tensor[(280), uint64], int32, Tensor[(1092), float32]) */
}

def @func_10611() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) {
  %319 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) {
    %314 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %315 = @func_10420() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %316 = %314.0;
    %317 = @func_8211() /* ty=Tensor[(9, 3, 1), bool] */;
    %318 = %315.0;
    (%316, %317, %318)
  };
  %319() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) */
}

def @func_6665() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %324 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
    %320 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
    %321 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %322 = %320.1;
    %323 = %321.2;
    (%322, %323)
  };
  %324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */
}

def @func_1980(%var_1978: Tensor[(8, 7, 5), float64], %var_1979: Tensor[(968), float64]) -> (Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %330 = fn (%var_1969: Tensor[(8, 7, 5), float64], %var_1975: Tensor[(968), float64]) -> (Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
    %325 = cast(%var_1969, dtype="float64") /* ty=Tensor[(8, 7, 5), float64] */;
    %326 = cast(%var_1975, dtype="float64") /* ty=Tensor[(968), float64] */;
    %327 = reshape(%326, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %328 = tan(%325) /* ty=Tensor[(8, 7, 5), float64] */;
    %329 = @func_843(%327) /* ty=Tensor[(8, 11, 11), float64] */;
    (%328, %329, %var_1975)
  };
  %330(%var_1978, %var_1979) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */
}

def @func_4638(%var_4635: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64],) {
  %331 = cast(%var_4635, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %332 = acosh(%331) /* ty=Tensor[(11, 7, 14), float64] */;
  (%332,)
}

def @func_7948() -> (Tensor[(9, 3, 1), float32],) {
  @func_7946() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_9748(%var_9745: Tensor[(60, 20), float64], %var_9746: Tensor[(27), float32], %var_9747: Tensor[(1680), uint16]) -> (Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) {
  %369 = fn (%var_9649: Tensor[(60, 20), float64], %var_9700: Tensor[(27), float32], %var_9701: Tensor[(1680), uint16]) -> (Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) {
    %333 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
    %334 = cast(%var_9649, dtype="float64") /* ty=Tensor[(60, 20), float64] */;
    %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %336 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(1092, 1), float32] */, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
    %338 = reshape(%334, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %339 = reshape(%335, newshape=[280]) /* ty=Tensor[(280), uint64] */;
    %340 = reshape(%336, newshape=[]) /* ty=int32 */;
    %341 = reshape(%337, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %342 = @func_4368(%338, %339, %340, %341) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
    %343 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), bool] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %344 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
    %345 = reshape(%343, newshape=[126]) /* ty=Tensor[(126), bool] */;
    %346 = reshape(%344, newshape=[9, 210]) /* ty=Tensor[(9, 210), bool] */;
    %347 = @func_6936(%345, %346) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) */;
    %348 = cast(meta[relay.Constant][23] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %349 = reshape(%348, newshape=[3, 11, 15]) /* ty=Tensor[(3, 11, 15), float32] */;
    %350 = @func_6778(%349) /* ty=(Tensor[(3, 11, 15), float32],) */;
    %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), bool] */, dtype="uint64") /* ty=Tensor[(1890), uint64] */;
    %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(1092, 1), float32] */, dtype="uint64") /* ty=Tensor[(1092, 1), uint64] */;
    %353 = cast(%var_9700, dtype="float32") /* ty=Tensor[(27), float32] */;
    %354 = cast(%var_9701, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
    %355 = reshape(%353, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float32] */;
    %356 = reshape(%354, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
    %357 = @func_8180(%355, %356) /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1680), float64], Tensor[(9, 3, 1680), uint8]) */;
    %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
    %359 = reshape(%358, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
    %360 = %333.0;
    %361 = %342.5;
    %362 = %347.2;
    %363 = %350.0;
    %364 = bitwise_or(%351, %352) /* ty=Tensor[(1092, 1890), uint64] */;
    %365 = %357.2;
    %366 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
    %367 = @func_254(%359) /* ty=Tensor[(7, 11, 1), float32] */;
    %368 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
    (%360, %361, %var_9649, meta[relay.Constant][19] /* ty=Tensor[(280), uint64] */, 6 /* ty=int32 */, %362, meta[relay.Constant][21] /* ty=Tensor[(126), bool] */, %363, meta[relay.Constant][23] /* ty=Tensor[(495), float32] */, %364, %365, %var_9700, %var_9701, %366, %367, meta[relay.Constant][24] /* ty=Tensor[(77), float32] */, %368)
  };
  %369(%var_9745, %var_9746, %var_9747) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) */
}

def @func_11267() -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %370 = @func_11192() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %371 = %370.1;
  %372 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %373 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
  (%371, %372, %373)
}

def @func_11041(%var_11040: Tensor[(11, 14, 9), float64]) -> (Tensor[(11, 14, 9), float64],) {
  %376 = fn (%var_11032: Tensor[(11, 14, 9), float64]) -> (Tensor[(11, 14, 9), float64],) {
    %374 = cast(%var_11032, dtype="float64") /* ty=Tensor[(11, 14, 9), float64] */;
    %375 = asin(%374) /* ty=Tensor[(11, 14, 9), float64] */;
    (%375,)
  };
  %376(%var_11040) /* ty=(Tensor[(11, 14, 9), float64],) */
}

def @func_6137() -> Tensor[(9, 3, 1), float32] {
  %377 = fn () -> Tensor[(9, 3, 1), float32] {
    @func_5878() /* ty=Tensor[(9, 3, 1), float32] */
  };
  %377() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_6063(%var_6058: float32, %var_6059: Tensor[(77, 1), float32], %var_6060: Tensor[(126), bool], %var_6061: Tensor[(1890), bool], %var_6062: Tensor[(336), float32]) -> (Tensor[(9, 3, 1), float64], Tensor[(8, 7, 5), float64], Tensor[(280), float64], float32, Tensor[(77, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(1890), bool], Tensor[(968, 126), int32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(77), float32]) {
  %406 = fn (%var_6024: float32, %var_6025: Tensor[(77, 1), float32], %var_6032: Tensor[(126), bool], %var_6033: Tensor[(1890), bool], %var_6051: Tensor[(336), float32]) -> (Tensor[(9, 3, 1), float64], Tensor[(8, 7, 5), float64], Tensor[(280), float64], float32, Tensor[(77, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(1890), bool], Tensor[(968, 126), int32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(77), float32]) {
    %378 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
    %379 = cast(%378, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
    %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %381 = cast(meta[relay.Constant][26] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
    %382 = reshape(%380, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
    %383 = reshape(%381, newshape=[968]) /* ty=Tensor[(968), float64] */;
    %384 = @func_1977(%382, %383) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
    %385 = cast(%var_6032, dtype="bool") /* ty=Tensor[(126), bool] */;
    %386 = cast(%var_6033, dtype="bool") /* ty=Tensor[(1890), bool] */;
    %387 = reshape(%385, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
    %388 = reshape(%386, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
    %389 = cast(%var_6032, dtype="int32") /* ty=Tensor[(126), int32] */;
    %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(968, 1), float64] */, dtype="int32") /* ty=Tensor[(968, 1), int32] */;
    %391 = cast(%var_6051, dtype="float32") /* ty=Tensor[(336), float32] */;
    %392 = reshape(%391, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
    %393 = cast(%var_6024, dtype="float32") /* ty=float32 */;
    %394 = cast(%var_6025, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
    %395 = reshape(%393, newshape=[]) /* ty=float32 */;
    %396 = reshape(%394, newshape=[77]) /* ty=Tensor[(77), float32] */;
    %397 = @func_318(%395, %396) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
    %398 = %397.3;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(77), float32] */;
    %400 = sinh(%379) /* ty=Tensor[(9, 3, 1), float64] */;
    %401 = %384.0;
    %402 = @func_1446(%387, %388) /* ty=Tensor[(9, 15, 14), bool] */;
    %403 = bitwise_xor(%389, %390) /* ty=Tensor[(968, 126), int32] */;
    %404 = @func_48(%392) /* ty=Tensor[(3, 14, 8), float64] */;
    %405 = log2(%399) /* ty=Tensor[(77), float32] */;
    (%400, %401, meta[relay.Constant][25] /* ty=Tensor[(280), float64] */, %var_6024, %var_6025, %402, %var_6033, %403, %404, %var_6051, %405)
  };
  %406(%var_6058, %var_6059, %var_6060, %var_6061, %var_6062) /* ty=(Tensor[(9, 3, 1), float64], Tensor[(8, 7, 5), float64], Tensor[(280), float64], float32, Tensor[(77, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(1890), bool], Tensor[(968, 126), int32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(77), float32]) */
}

def @func_11398() -> (Tensor[(54), float64],) {
  %407 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %408 = %407.3;
  (%408,)
}

def @func_9848() -> Tensor[(9, 2, 3), float64] {
  %409 = fn () -> Tensor[(9, 2, 3), float64] {
    @func_7515() /* ty=Tensor[(9, 2, 3), float64] */
  };
  %409() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_8018() -> Tensor[(9, 3, 1), float32] {
  %410 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %410.0
}

def @func_6549() -> Tensor[(9, 3, 1), float32] {
  @func_6547() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_10684() -> Tensor[(9, 2, 3), float64] {
  %411 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %411.1
}

def @func_7594() -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %417 = fn () -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
    %412 = @func_7515() /* ty=Tensor[(9, 2, 3), float64] */;
    %413 = cast(%412, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
    %414 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
    %415 = cos(%413) /* ty=Tensor[(9, 2, 3), float64] */;
    %416 = %414.1;
    (%415, %416)
  };
  %417() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_10573() -> (Tensor[(9, 3, 1), float64],) {
  %418 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %419 = %418.0;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %421 = exp(%420) /* ty=Tensor[(9, 3, 1), float64] */;
  (%421,)
}

def @func_3986(%var_3983: Tensor[(13, 5, 1), int64], %var_3984: Tensor[(336), float32], %var_3985: Tensor[(77), float32]) -> (Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) {
  %450 = fn (%var_3957: Tensor[(13, 5, 1), int64], %var_3970: Tensor[(336), float32], %var_3975: Tensor[(77), float32]) -> (Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) {
    %422 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %423 = cast(%var_3957, dtype="int64") /* ty=Tensor[(13, 5, 1), int64] */;
    %424 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %425 = reshape(%424, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %426 = cast(%var_3957, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
    %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %428 = cast(%var_3970, dtype="float32") /* ty=Tensor[(336), float32] */;
    %429 = reshape(%428, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
    %430 = cast(meta[relay.Constant][28] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %431 = cast(meta[relay.Constant][28] /* ty=Tensor[(280), uint64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %432 = cast(-6 /* ty=int64 */, dtype="int32") /* ty=int32 */;
    %433 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 88), int32] */, dtype="int32") /* ty=Tensor[(7, 88), int32] */;
    %434 = cast(%var_3975, dtype="float32") /* ty=Tensor[(77), float32] */;
    %435 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %436 = cast(meta[relay.Constant][30] /* ty=Tensor[(484, 2), float64] */, dtype="float64") /* ty=Tensor[(484, 2), float64] */;
    %437 = reshape(%430, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
    %438 = reshape(%431, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint64] */;
    %439 = reshape(%432, newshape=[]) /* ty=int32 */;
    %440 = reshape(%433, newshape=[616]) /* ty=Tensor[(616), int32] */;
    %441 = reshape(%434, newshape=[77]) /* ty=Tensor[(77), float32] */;
    %442 = reshape(%435, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %443 = reshape(%436, newshape=[1, 968]) /* ty=Tensor[(1, 968), float64] */;
    %444 = @func_1918(%437, %438, %439, %440, %441, %442, %443) /* ty=(Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) */;
    %445 = minimum(%422, %423) /* ty=Tensor[(13, 5, 1), int64] */;
    %446 = @func_1679(%425) /* ty=Tensor[(7, 12, 13), float32] */;
    %447 = add(%426, %427) /* ty=Tensor[(13, 5, 1092), float32] */;
    %448 = @func_48(%429) /* ty=Tensor[(3, 14, 8), float64] */;
    %449 = %444.6;
    (%445, %446, %447, %448, %var_3970, %449, meta[relay.Constant][28] /* ty=Tensor[(280), uint64] */, meta[relay.Constant][29] /* ty=Tensor[(7, 88), int32] */, %var_3975, meta[relay.Constant][30] /* ty=Tensor[(484, 2), float64] */)
  };
  %450(%var_3983, %var_3984, %var_3985) /* ty=(Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) */
}

def @func_7959() -> (Tensor[(9, 2, 3), float64],) {
  %451 = @func_6664() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %452 = %451.1;
  (%452,)
}

def @func_7871() -> (Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) {
  %453 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 77), float32] */, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %456 = reshape(%455, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %457 = asin(%454) /* ty=Tensor[(9, 3, 1), float32] */;
  %458 = @func_254(%456) /* ty=Tensor[(7, 11, 1), float32] */;
  (%457, %458, meta[relay.Constant][31] /* ty=Tensor[(1, 77), float32] */)
}

def @func_321(%var_319: float32, %var_320: Tensor[(77), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) {
  %467 = fn (%var_276: float32, %var_307: Tensor[(77), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) {
    %459 = cast(%var_276, dtype="float32") /* ty=float32 */;
    %460 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
    %461 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
    %462 = cast(%var_307, dtype="float32") /* ty=Tensor[(77), float32] */;
    %463 = reshape(%462, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
    %464 = divide(%459, %460) /* ty=Tensor[(14, 16, 2), float32] */;
    %465 = sqrt(%461) /* ty=Tensor[(14, 16, 2), float64] */;
    %466 = @func_254(%463) /* ty=Tensor[(7, 11, 1), float32] */;
    (%464, %465, %466, %var_307)
  };
  %467(%var_319, %var_320) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */
}

def @func_7702(%var_7700: int16, %var_7701: Tensor[(16, 10, 14), int16]) -> (Tensor[(16, 10, 14), int16],) {
  %471 = fn (%var_7678: int16, %var_7679: Tensor[(16, 10, 14), int16]) -> (Tensor[(16, 10, 14), int16],) {
    %468 = cast(%var_7678, dtype="int16") /* ty=int16 */;
    %469 = cast(%var_7679, dtype="int16") /* ty=Tensor[(16, 10, 14), int16] */;
    %470 = left_shift(%468, %469) /* ty=Tensor[(16, 10, 14), int16] */;
    (%470,)
  };
  %471(%var_7700, %var_7701) /* ty=(Tensor[(16, 10, 14), int16],) */
}

def @func_5228(%var_5225: Tensor[(4, 12, 12), int8], %var_5226: Tensor[(4, 12, 12), int8], %var_5227: Tensor[(280, 1), uint64]) -> (Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) {
  @func_5223(%var_5225, %var_5226, %var_5227) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) */
}

def @func_4592(%var_4571: Tensor[(10, 12, 14), uint16]) -> (Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) {
  %472 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 12, 14), uint16] */, dtype="bool") /* ty=Tensor[(10, 12, 14), bool] */;
  %473 = shape_of(%var_4571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_4571, dtype="bool") /* ty=Tensor[(10, 12, 14), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = not_equal(%474, %475) /* ty=Tensor[(10, 12, 14), bool] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
  %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %479 = reshape(%478, newshape=[11, 1, 12]) /* ty=Tensor[(11, 1, 12), float32] */;
  %480 = @func_3924(%479) /* ty=(Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) */;
  %481 = sigmoid(%477) /* ty=Tensor[(10, 12, 14), float32] */;
  %482 = %480.3;
  (%481, %482, meta[relay.Constant][34] /* ty=Tensor[(132), float32] */)
}

def @func_8429(%var_8400: bool, %var_8401: Tensor[(90), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  %483 = cast(%var_8400, dtype="bool") /* ty=bool */;
  %484 = cast(%var_8401, dtype="bool") /* ty=Tensor[(90), bool] */;
  %485 = reshape(%483, newshape=[]) /* ty=bool */;
  %486 = reshape(%484, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), bool] */;
  %487 = @func_8088(%485, %486) /* ty=(Tensor[(1, 15, 6), bool],) */;
  %488 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %489 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %490 = %487.0;
  %491 = %488.0;
  %492 = @func_6547() /* ty=Tensor[(9, 3, 1), float32] */;
  (%489, %490, %var_8400, %var_8401, %491, %492)
}

def @func_6266(%var_6264: int32, %var_6265: Tensor[(14, 44), int32]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) {
  @func_6262(%var_6264, %var_6265) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) */
}

def @func_1304(%var_1302: Tensor[(3, 5, 14), uint64], %var_1303: Tensor[(156), float64]) -> (Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) {
  %510 = fn (%var_1266: Tensor[(3, 5, 14), uint64], %var_1272: Tensor[(156), float64]) -> (Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) {
    %493 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 5, 14), uint64] */, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
    %494 = shape_of(%var_1266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %495 = cast(%var_1266, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
    %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %497 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
    %498 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
    %499 = reshape(%497, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
    %500 = reshape(%498, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
    %501 = @func_365(%499, %500) /* ty=(Tensor[(2, 6, 13), bool],) */;
    %502 = cast(%var_1272, dtype="float64") /* ty=Tensor[(156), float64] */;
    %503 = %501.0;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
    %505 = reshape(%502, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
    %506 = reshape(%504, newshape=[2, 6, 13]) /* ty=Tensor[(2, 6, 13), float64] */;
    %507 = @func_365(%505, %506) /* ty=(Tensor[(2, 6, 13), bool],) */;
    %508 = not_equal(%495, %496) /* ty=Tensor[(3, 5, 14), bool] */;
    %509 = %507.0;
    (%508, %503, %var_1272, %509)
  };
  %510(%var_1302, %var_1303) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */
}

def @func_5878() -> Tensor[(9, 3, 1), float32] {
  @func_5839() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_6717(%var_6716: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
  %513 = fn (%var_6712: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
    %511 = cast(%var_6712, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
    %512 = asinh(%511) /* ty=Tensor[(3, 7, 14), float64] */;
    (%512,)
  };
  %513(%var_6716) /* ty=(Tensor[(3, 7, 14), float64],) */
}

def @func_11584() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(968), float64]) {
  @func_11582() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(968), float64]) */
}

def @func_10266(%var_10265: Tensor[(14, 44), int32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) {
  %525 = fn (%var_10251: Tensor[(14, 44), int32]) -> (Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) {
    %514 = @func_8782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
    %515 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %516 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %517 = cast(%var_10251, dtype="int32") /* ty=Tensor[(14, 44), int32] */;
    %518 = reshape(%516, newshape=[]) /* ty=int32 */;
    %519 = reshape(%517, newshape=[14, 44]) /* ty=Tensor[(14, 44), int32] */;
    %520 = @func_6262(%518, %519) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), float32]) */;
    %521 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
    %522 = %514.0;
    %523 = %515.0;
    %524 = %520.1;
    (%521, %522, %523, %524, -8 /* ty=int32 */, %var_10251)
  };
  %525(%var_10265) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) */
}

def @func_891(%var_889: Tensor[(4, 8, 7), float32]) -> (Tensor[(4, 8, 7), float32],) {
  @func_888(%var_889) /* ty=(Tensor[(4, 8, 7), float32],) */
}

def @func_7277(%var_7275: Tensor[(9, 3, 15), float32], %var_7276: Tensor[(9, 3, 15), float32]) -> (Tensor[(9, 3, 15), int8], Tensor[(9, 15, 14), bool], Tensor[(63, 2), bool], Tensor[(3, 630), bool], Tensor[(9, 3, 15), float64]) {
  @func_7273(%var_7275, %var_7276) /* ty=(Tensor[(9, 3, 15), int8], Tensor[(9, 15, 14), bool], Tensor[(63, 2), bool], Tensor[(3, 630), bool], Tensor[(9, 3, 15), float64]) */
}

def @func_8091(%var_8089: bool, %var_8090: Tensor[(1, 15, 6), bool]) -> (Tensor[(1, 15, 6), bool],) {
  %529 = fn (%var_8078: bool, %var_8079: Tensor[(1, 15, 6), bool]) -> (Tensor[(1, 15, 6), bool],) {
    %526 = cast(%var_8078, dtype="bool") /* ty=bool */;
    %527 = cast(%var_8079, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
    %528 = logical_or(%526, %527) /* ty=Tensor[(1, 15, 6), bool] */;
    (%528,)
  };
  %529(%var_8089, %var_8090) /* ty=(Tensor[(1, 15, 6), bool],) */
}

def @func_8230() -> (Tensor[(9, 3, 1), float32],) {
  %531 = fn () -> (Tensor[(9, 3, 1), float32],) {
    %530 = @func_7428() /* ty=Tensor[(9, 3, 1), float32] */;
    (%530,)
  };
  %531() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_10074() -> (Tensor[(9, 3, 1), float64],) {
  %532 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %533 = %532.0;
  (%533,)
}

def @func_11622(%var_11585: Tensor[(12, 11, 5), uint8], %var_11586: Tensor[(12, 11, 5), uint8], %var_11606: Tensor[(90), bool]) -> (Tensor[(12, 11, 5), uint8], Tensor[(9, 3, 1), float32], int32, Tensor[(616), int32], bool, Tensor[(90), bool], Tensor[(9, 3, 1), float64]) {
  %534 = cast(%var_11586, dtype="uint8") /* ty=Tensor[(12, 11, 5), uint8] */;
  %535 = shape_of(%var_11585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_11585, dtype="uint8") /* ty=Tensor[(12, 11, 5), uint8] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %538 = @func_8307() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %539 = cast(meta[relay.Constant][36] /* ty=Tensor[(616), int32] */, dtype="int32") /* ty=Tensor[(616), int32] */;
  %540 = reshape(%539, newshape=[14, 44]) /* ty=Tensor[(14, 44), int32] */;
  %541 = @func_10264(%540) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(11, 14, 4), int32], int32, Tensor[(14, 44), int32]) */;
  %542 = %541.4;
  %543 = cast(%542, dtype="bool") /* ty=bool */;
  %544 = cast(%var_11606, dtype="bool") /* ty=Tensor[(90), bool] */;
  %545 = reshape(%543, newshape=[]) /* ty=bool */;
  %546 = reshape(%544, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %547 = @func_8429(%545, %546) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
  %548 = @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */;
  %549 = add(%536, %537) /* ty=Tensor[(12, 11, 5), uint8] */;
  %550 = %538.0;
  %551 = %547.2;
  %552 = %548.0;
  (%549, %550, %542, meta[relay.Constant][36] /* ty=Tensor[(616), int32] */, %551, %var_11606, %552)
}

def @func_9620(%var_9618: Tensor[(294), float64], %var_9619: Tensor[(156), float64]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
  %576 = fn (%var_9555: Tensor[(294), float64], %var_9582: Tensor[(156), float64]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
    %553 = @func_8782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
    %554 = cast(%var_9555, dtype="float64") /* ty=Tensor[(294), float64] */;
    %555 = reshape(%554, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %556 = @func_6715(%555) /* ty=(Tensor[(3, 7, 14), float64],) */;
    %557 = %556.0;
    %558 = cast(%557, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
    %559 = shape_of(%var_9555, dtype="int32") /* ty=Tensor[(1), int32] */;
    %560 = cast(%var_9555, dtype="float64") /* ty=Tensor[(294), float64] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?), float64] */;
    %562 = subtract(%560, %561) /* ty=Tensor[(294), float64] */;
    %563 = cast(%562, dtype="bool") /* ty=Tensor[(294), bool] */;
    %564 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%557, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %567 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %568 = cast(%var_9582, dtype="float64") /* ty=Tensor[(156), float64] */;
    %569 = reshape(%567, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
    %570 = reshape(%568, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %571 = @func_1301(%569, %570) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
    %572 = %553.1;
    %573 = logical_or(%565, %566) /* ty=Tensor[(3, 7, 14), bool] */;
    %574 = %571.2;
    %575 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    (%572, %573, %574, meta[relay.Constant][37] /* ty=Tensor[(210), uint64] */, %var_9582, %575)
  };
  %576(%var_9618, %var_9619) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_8020() -> Tensor[(9, 3, 1), float32] {
  @func_8018() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_6780(%var_6779: Tensor[(3, 11, 15), float32]) -> (Tensor[(3, 11, 15), float32],) {
  %579 = fn (%var_6771: Tensor[(3, 11, 15), float32]) -> (Tensor[(3, 11, 15), float32],) {
    %577 = cast(%var_6771, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
    %578 = cos(%577) /* ty=Tensor[(3, 11, 15), float32] */;
    (%578,)
  };
  %579(%var_6779) /* ty=(Tensor[(3, 11, 15), float32],) */
}

def @func_7003(%var_7001: Tensor[(156), float64]) -> (Tensor[(2, 6, 13), bool], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) {
  @func_7000(%var_7001) /* ty=(Tensor[(2, 6, 13), bool], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_10766(%var_10742: Tensor[(280), uint64], %var_10743: int32) -> (Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) {
  %580 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %581 = cast(%var_10742, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %582 = cast(%var_10743, dtype="int32") /* ty=int32 */;
  %583 = cast(meta[relay.Constant][39] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %584 = reshape(%580, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %585 = reshape(%581, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %586 = reshape(%582, newshape=[]) /* ty=int32 */;
  %587 = reshape(%583, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %588 = @func_4368(%584, %585, %586, %587) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %589 = @func_10420() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %590 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
  %591 = cast(%var_10742, dtype="int8") /* ty=Tensor[(280), int8] */;
  %592 = cast(%590, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
  %593 = cast(%var_10743, dtype="int16") /* ty=int16 */;
  %594 = cast(meta[relay.Constant][40] /* ty=Tensor[(2240), int16] */, dtype="int16") /* ty=Tensor[(2240), int16] */;
  %595 = reshape(%593, newshape=[]) /* ty=int16 */;
  %596 = reshape(%594, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), int16] */;
  %597 = @func_7699(%595, %596) /* ty=(Tensor[(16, 10, 14), int16],) */;
  %598 = %588.3;
  %599 = %589.0;
  %600 = left_shift(%591, %592) /* ty=Tensor[(9, 3, 280), int8] */;
  %601 = %597.0;
  (%598, meta[relay.Constant][38] /* ty=Tensor[(1200), float64] */, %var_10743, meta[relay.Constant][39] /* ty=Tensor[(1092), float32] */, %599, %600, %601, meta[relay.Constant][40] /* ty=Tensor[(2240), int16] */)
}

def @func_8072() -> (Tensor[(9, 2, 3), float64],) {
  %602 = @func_7096() /* ty=Tensor[(9, 2, 3), float64] */;
  (%602,)
}

def @func_8433(%var_8431: bool, %var_8432: Tensor[(90), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) {
  @func_8429(%var_8431, %var_8432) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(1, 15, 6), bool], bool, Tensor[(90), bool], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_12366() -> (Tensor[(7, 11, 1), float32],) {
  %605 = fn () -> (Tensor[(7, 11, 1), float32],) {
    %603 = @func_7871() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) */;
    %604 = %603.1;
    (%604,)
  };
  %605() /* ty=(Tensor[(7, 11, 1), float32],) */
}

def @func_12206(%var_12203: Tensor[(1680), uint16], %var_12204: Tensor[(3, 1680), float32], %var_12205: Tensor[(660), uint8]) -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) {
  @func_12201(%var_12203, %var_12204, %var_12205) /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(1680), float64], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(1, 1680), float64], Tensor[(4, 420), uint16], Tensor[(3, 1680), uint64], Tensor[(616), int32], Tensor[(660), uint8], Tensor[(90), bool], Tensor[(1, 1680), float32]) */
}

def @func_10463(%var_10461: Tensor[(16, 1, 1), float64], %var_10462: Tensor[(16, 7, 6), float64]) -> (Tensor[(16, 7, 6), float64], Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32]) {
  %618 = fn (%var_10427: Tensor[(16, 1, 1), float64], %var_10428: Tensor[(16, 7, 6), float64]) -> (Tensor[(16, 7, 6), float64], Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32]) {
    %606 = cast(%var_10427, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
    %607 = cast(%var_10428, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
    %608 = mod(%606, %607) /* ty=Tensor[(16, 7, 6), float64] */;
    %609 = cast(%var_10428, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
    %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%608, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %614 = reshape(%613, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
    %615 = subtract(%611, %612) /* ty=Tensor[(16, 7, 6), float64] */;
    %616 = @func_9847() /* ty=Tensor[(9, 2, 3), float64] */;
    %617 = @func_48(%614) /* ty=Tensor[(3, 14, 8), float64] */;
    (%615, %616, %617, meta[relay.Constant][41] /* ty=Tensor[(336), float32] */)
  };
  %618(%var_10461, %var_10462) /* ty=(Tensor[(16, 7, 6), float64], Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32]) */
}

def @func_7798() -> (Tensor[(9, 3, 1), float32],) {
  %620 = fn () -> (Tensor[(9, 3, 1), float32],) {
    %619 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
    (%619,)
  };
  %620() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_1449(%var_1447: Tensor[(9, 1, 14), bool], %var_1448: Tensor[(9, 15, 14), bool]) -> Tensor[(9, 15, 14), bool] {
  %623 = fn (%var_1419: Tensor[(9, 1, 14), bool], %var_1420: Tensor[(9, 15, 14), bool]) -> Tensor[(9, 15, 14), bool] {
    %621 = cast(%var_1419, dtype="bool") /* ty=Tensor[(9, 1, 14), bool] */;
    %622 = cast(%var_1420, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
    logical_or(%621, %622) /* ty=Tensor[(9, 15, 14), bool] */
  };
  %623(%var_1447, %var_1448) /* ty=Tensor[(9, 15, 14), bool] */
}

def @func_1918(%var_1842: Tensor[(14, 4, 5), uint64], %var_1843: Tensor[(14, 4, 5), uint64], %var_1869: int32, %var_1870: Tensor[(616), int32], %var_1873: Tensor[(77), float32], %var_1885: Tensor[(1092), float32], %var_1910: Tensor[(1, 968), float64]) -> (Tensor[(14, 4, 5), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(7, 12, 13), float32], Tensor[(11, 14, 4), int32], Tensor[(616), int32], Tensor[(14, 16, 2), float64], Tensor[(77), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), bool], Tensor[(156), uint8], Tensor[(8, 11, 11), float64], Tensor[(1, 968), float64]) {
  %624 = cast(%var_1843, dtype="bool") /* ty=Tensor[(14, 4, 5), bool] */;
  %625 = shape_of(%var_1842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_1842, dtype="bool") /* ty=Tensor[(14, 4, 5), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %629 = cast(meta[relay.Constant][43] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %630 = reshape(%628, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), uint64] */;
  %631 = reshape(%629, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %632 = @func_1301(%630, %631) /* ty=(Tensor[(3, 5, 14), bool], Tensor[(2, 6, 13), bool], Tensor[(156), float64], Tensor[(2, 6, 13), bool]) */;
  %633 = cast(meta[relay.Constant][44] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %634 = reshape(%633, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %635 = cast(%var_1869, dtype="int32") /* ty=int32 */;
  %636 = cast(%var_1870, dtype="int32") /* ty=Tensor[(616), int32] */;
  %637 = reshape(%635, newshape=[]) /* ty=int32 */;
  %638 = reshape(%636, newshape=[11, 14, 4]) /* ty=Tensor[(11, 14, 4), int32] */;
  %639 = cast(%var_1869, dtype="float32") /* ty=float32 */;
  %640 = cast(%var_1873, dtype="float32") /* ty=Tensor[(77), float32] */;
  %641 = reshape(%639, newshape=[]) /* ty=float32 */;
  %642 = reshape(%640, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %643 = @func_318(%641, %642) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), float64], Tensor[(7, 11, 1), float32], Tensor[(77), float32]) */;
  %644 = @func_1679(%634) /* ty=Tensor[(7, 12, 13), float32] */;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %646 = reshape(%645, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %647 = cast(%var_1885, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %648 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(1092), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(meta[relay.Constant][44] /* ty=Tensor[(1092), float32] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), bool] */;
  %651 = cast(meta[relay.Constant][43] /* ty=Tensor[(156), float64] */, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %652 = cast(%var_1869, dtype="uint8") /* ty=uint8 */;
  %653 = cast(%var_1910, dtype="float64") /* ty=Tensor[(1, 968), float64] */;
  %654 = reshape(%653, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %655 = greater(%626, %627) /* ty=Tensor[(14, 4, 5), bool] */;
  %656 = %632.2;
  %657 = @func_499(%637, %638) /* ty=Tensor[(11, 14, 4), int32] */;
  %658 = %643.1;
  %659 = @func_1679(%646) /* ty=Tensor[(7, 12, 13), float32] */;
  %660 = greater_equal(%649, %650) /* ty=Tensor[(1092), bool] */;
  %661 = add(%651, %652) /* ty=Tensor[(156), uint8] */;
  %662 = @func_843(%654) /* ty=Tensor[(8, 11, 11), float64] */;
  (%655, %656, meta[relay.Constant][42] /* ty=Tensor[(210), uint64] */, %644, %657, %var_1870, %658, %var_1873, %659, %660, %661, %662, %var_1910)
}

def @func_12026(%var_12025: int32) -> (Tensor[(8, 7, 5), float64], Tensor[(9, 3, 280), int8], Tensor[(1092), float32], int32, Tensor[(968), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32]) {
  %686 = fn (%var_12007: int32) -> (Tensor[(8, 7, 5), float64], Tensor[(9, 3, 280), int8], Tensor[(1092), float32], int32, Tensor[(968), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32]) {
    %663 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %664 = cast(meta[relay.Constant][46] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %665 = reshape(%663, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
    %666 = reshape(%664, newshape=[968]) /* ty=Tensor[(968), float64] */;
    %667 = @func_1977(%665, %666) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
    %668 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %669 = %668.0;
    %670 = cast(%669, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
    %671 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), float64] */, dtype="int8") /* ty=Tensor[(280), int8] */;
    %672 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), float64] */, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %673 = cast(%var_12007, dtype="int32") /* ty=int32 */;
    %674 = reshape(%672, newshape=[280]) /* ty=Tensor[(280), uint64] */;
    %675 = reshape(%673, newshape=[]) /* ty=int32 */;
    %676 = @func_10766(%674, %675) /* ty=(Tensor[(616), int32], Tensor[(1200), float64], int32, Tensor[(1092), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 280), int8], Tensor[(16, 10, 14), int16], Tensor[(2240), int16]) */;
    %677 = cast(meta[relay.Constant][46] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %678 = cast(meta[relay.Constant][47] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %679 = reshape(%678, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
    %680 = @func_888(%679) /* ty=(Tensor[(4, 8, 7), float32],) */;
    %681 = %667.0;
    %682 = right_shift(%670, %671) /* ty=Tensor[(9, 3, 280), int8] */;
    %683 = %676.3;
    %684 = atan(%677) /* ty=Tensor[(968), float64] */;
    %685 = %680.0;
    (%681, %682, %683, %var_12007, %684, %685, meta[relay.Constant][47] /* ty=Tensor[(224), float32] */)
  };
  %686(%var_12025) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(9, 3, 280), int8], Tensor[(1092), float32], int32, Tensor[(968), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32]) */
}

def @func_3377(%var_3376: Tensor[(12, 4, 13), bool]) -> Tensor[(12, 4, 13), bool] {
  %691 = fn (%var_3365: Tensor[(12, 4, 13), bool]) -> Tensor[(12, 4, 13), bool] {
    %687 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 4, 13), bool] */, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
    %688 = shape_of(%var_3365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%var_3365, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%689, %690) /* ty=Tensor[(12, 4, 13), bool] */
  };
  %691(%var_3376) /* ty=Tensor[(12, 4, 13), bool] */
}

def @func_6633(%var_6632: Tensor[(1680), uint16]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) {
  %702 = fn (%var_6580: Tensor[(1680), uint16]) -> (Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) {
    %692 = cast(%var_6580, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
    %693 = reshape(%692, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
    %694 = @func_4592(%693) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
    %695 = cast(%var_6580, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %696 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %697 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
    %698 = %694.1;
    %699 = asin(%695) /* ty=Tensor[(1680), float64] */;
    %700 = %696.3;
    %701 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
    (%697, %698, %699, %700, %701)
  };
  %702(%var_6632) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(11, 1, 12), float64], Tensor[(1680), float64], Tensor[(54), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_11442() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %705 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
    %703 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
    %704 = @func_9137() /* ty=Tensor[(9, 2, 3), float64] */;
    (%703, %704)
  };
  %705() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */
}

def @func_6487() -> (Tensor[(132), float32], Tensor[(9, 3, 1), bool]) {
  %714 = fn () -> (Tensor[(132), float32], Tensor[(9, 3, 1), bool]) {
    %706 = cast(meta[relay.Constant][49] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %707 = reshape(%706, newshape=[11, 1, 12]) /* ty=Tensor[(11, 1, 12), float32] */;
    %708 = @func_3924(%707) /* ty=(Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) */;
    %709 = %708.1;
    %710 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
    %711 = cast(%709, dtype="bool") /* ty=bool */;
    %712 = cast(%710, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
    %713 = less_equal(%711, %712) /* ty=Tensor[(9, 3, 1), bool] */;
    (meta[relay.Constant][49] /* ty=Tensor[(132), float32] */, %713)
  };
  %714() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */
}

def @func_8880() -> Tensor[(9, 2, 3), float64] {
  %715 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %715.0
}

def @func_7873() -> (Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) {
  @func_7871() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) */
}

def @func_10930() -> (Tensor[(9, 3, 1), bool],) {
  %716 = @func_10610() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(9, 3, 1), float32]) */;
  %717 = %716.1;
  (%717,)
}

def @func_6361() -> Tensor[(9, 2, 3), float64] {
  %719 = fn () -> Tensor[(9, 2, 3), float64] {
    %718 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %718.2
  };
  %719() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_5839() -> Tensor[(9, 3, 1), float32] {
  %720 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
  acos(%720) /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_8882() -> Tensor[(9, 2, 3), float64] {
  @func_8880() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_4641(%var_4639: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64],) {
  @func_4638(%var_4639) /* ty=(Tensor[(11, 7, 14), float64],) */
}

def @func_1681(%var_1680: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
  %722 = fn (%var_1673: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
    %721 = cast(%var_1673, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    cos(%721) /* ty=Tensor[(7, 12, 13), float32] */
  };
  %722(%var_1680) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_11462() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) {
  @func_11460() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64]) */
}

def @func_6940(%var_6938: Tensor[(126), bool], %var_6939: Tensor[(9, 210), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) {
  @func_6936(%var_6938, %var_6939) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) */
}

def @func_6324() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %723 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %724 = %723.1;
  %725 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
  (%724, %725)
}

def @func_11532() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
  %731 = fn () -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
    %726 = @func_6136() /* ty=Tensor[(9, 3, 1), float32] */;
    %727 = cast(%726, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
    %728 = @func_10113() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
    %729 = sqrt(%727) /* ty=Tensor[(9, 3, 1), float64] */;
    %730 = %728.0;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_5223(%var_5198: Tensor[(4, 12, 12), int8], %var_5199: Tensor[(4, 12, 12), int8], %var_5213: Tensor[(280, 1), uint64]) -> (Tensor[(4, 12, 12), bool], Tensor[(4, 12, 12), float64], Tensor[(616), int32], Tensor[(1200), float64], Tensor[(280, 1), uint64], Tensor[(1092), float32], Tensor[(280), uint64], Tensor[(4, 12, 12), uint64]) {
  %732 = cast(%var_5199, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %733 = shape_of(%var_5198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%var_5198, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = cast(%var_5199, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %737 = cast(meta[relay.Constant][51] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %738 = cast(%var_5213, dtype="uint64") /* ty=Tensor[(280, 1), uint64] */;
  %739 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %740 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %741 = reshape(%737, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %742 = reshape(%738, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %743 = reshape(%739, newshape=[]) /* ty=int32 */;
  %744 = reshape(%740, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %745 = @func_4368(%741, %742, %743, %744) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %746 = cast(meta[relay.Constant][51] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %747 = cast(%var_5213, dtype="uint64") /* ty=Tensor[(280, 1), uint64] */;
  %748 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %749 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %750 = reshape(%746, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %751 = reshape(%747, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %752 = reshape(%748, newshape=[]) /* ty=int32 */;
  %753 = reshape(%749, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %754 = @func_4368(%750, %751, %752, %753) /* ty=(Tensor[(616), int32], Tensor[(280), uint64], int32, Tensor[(616), int32], Tensor[(77), float32], Tensor[(1092), float32], Tensor[(968, 1), float64], Tensor[(15, 16, 5), float32]) */;
  %755 = cast(%var_5199, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %756 = cast(-4 /* ty=int32 */, dtype="uint64") /* ty=uint64 */;
  %757 = less_equal(%734, %735) /* ty=Tensor[(4, 12, 12), bool] */;
  %758 = cos(%736) /* ty=Tensor[(4, 12, 12), float64] */;
  %759 = %745.3;
  %760 = %754.1;
  %761 = add(%755, %756) /* ty=Tensor[(4, 12, 12), uint64] */;
  (%757, %758, %759, meta[relay.Constant][51] /* ty=Tensor[(1200), float64] */, %var_5213, meta[relay.Constant][52] /* ty=Tensor[(1092), float32] */, %760, %761)
}

def @func_254(%var_244: Tensor[(7, 11, 1), float32]) -> Tensor[(7, 11, 1), float32] {
  %762 = cast(%var_244, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  sin(%762) /* ty=Tensor[(7, 11, 1), float32] */
}

def @func_888(%var_873: Tensor[(4, 8, 7), float32]) -> (Tensor[(4, 8, 7), float32],) {
  %763 = cast(%var_873, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %764 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(4, 8, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][53] /* ty=Tensor[(4, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %767 = power(%765, %766) /* ty=Tensor[(4, 8, 7), float32] */;
  (%767,)
}

def @func_368(%var_366: Tensor[(2, 6, 13), float64], %var_367: Tensor[(2, 6, 13), float64]) -> (Tensor[(2, 6, 13), bool],) {
  %775 = fn (%var_346: Tensor[(2, 6, 13), float64], %var_352: Tensor[(2, 6, 13), float64]) -> (Tensor[(2, 6, 13), bool],) {
    %768 = cast(%var_346, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
    %769 = sinh(%768) /* ty=Tensor[(2, 6, 13), float64] */;
    %770 = cast(%var_352, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
    %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%769, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %774 = not_equal(%772, %773) /* ty=Tensor[(2, 6, 13), bool] */;
    (%774,)
  };
  %775(%var_366, %var_367) /* ty=(Tensor[(2, 6, 13), bool],) */
}

def @func_11566() -> Tensor[(9, 3, 1), float32] {
  %776 = fn () -> Tensor[(9, 3, 1), float32] {
    @func_7428() /* ty=Tensor[(9, 3, 1), float32] */
  };
  %776() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_10966() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %782 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
    %777 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %778 = @func_7593() /* ty=(Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32]) */;
    %779 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
    %780 = %777.0;
    %781 = %778.0;
    (%779, %780, %781)
  };
  %782() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */
}

def @func_10686() -> Tensor[(9, 2, 3), float64] {
  @func_10684() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_11269() -> (Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  @func_11267() /* ty=(Tensor[(11, 1, 12), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */
}

def @func_12108() -> Tensor[(9, 2, 3), float64] {
  @func_12106() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_6241() -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
  %788 = fn () -> (Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) {
    %783 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %784 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    %785 = cast(%784, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
    %786 = %783.1;
    %787 = tan(%785) /* ty=Tensor[(9, 3, 1), float32] */;
    (%786, %787)
  };
  %788() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_9064() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %792 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
    %789 = @func_7181() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %790 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
    %791 = %789.0;
    (%790, %791)
  };
  %792() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */
}

def @func_9138() -> Tensor[(9, 2, 3), float64] {
  %793 = fn () -> Tensor[(9, 2, 3), float64] {
    @func_7096() /* ty=Tensor[(9, 2, 3), float64] */
  };
  %793() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_50(%var_49: Tensor[(3, 14, 8), float32]) -> Tensor[(3, 14, 8), float64] {
  %797 = fn (%var_27: Tensor[(3, 14, 8), float32]) -> Tensor[(3, 14, 8), float64] {
    %794 = cast(%var_27, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
    %795 = asinh(%794) /* ty=Tensor[(3, 14, 8), float32] */;
    %796 = cast(%795, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
    log10(%796) /* ty=Tensor[(3, 14, 8), float64] */
  };
  %797(%var_49) /* ty=Tensor[(3, 14, 8), float64] */
}

def @func_8791() -> (Tensor[(9, 3, 1), float64],) {
  %798 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %799 = %798.0;
  (%799,)
}

def @func_11683() -> (Tensor[(9, 3, 1), float32], Tensor[(1200), float64], Tensor[(9, 3, 1680), float32]) {
  %813 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(1200), float64], Tensor[(9, 3, 1680), float32]) {
    %800 = cast(meta[relay.Constant][54] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %801 = @func_10074() /* ty=(Tensor[(9, 3, 1), float64],) */;
    %802 = %801.0;
    %803 = cast(%802, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
    %804 = cast(meta[relay.Constant][55] /* ty=Tensor[(1680), uint16] */, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
    %805 = reshape(%800, newshape=[60, 20]) /* ty=Tensor[(60, 20), float64] */;
    %806 = reshape(%803, newshape=[27]) /* ty=Tensor[(27), float32] */;
    %807 = reshape(%804, newshape=[1680]) /* ty=Tensor[(1680), uint16] */;
    %808 = @func_9744(%805, %806, %807) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(1092), float32], Tensor[(60, 20), float64], Tensor[(280), uint64], int32, Tensor[(126), bool], Tensor[(126), bool], Tensor[(3, 11, 15), float32], Tensor[(495), float32], Tensor[(1092, 1890), uint64], Tensor[(9, 3, 1680), uint8], Tensor[(27), float32], Tensor[(1680), uint16], Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(77), float32], Tensor[(9, 2, 3), float64]) */;
    %809 = cast(meta[relay.Constant][55] /* ty=Tensor[(1680), uint16] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %810 = cast(%802, dtype="float32") /* ty=Tensor[(9, 3, 1), float32] */;
    %811 = %808.13;
    %812 = mod(%809, %810) /* ty=Tensor[(9, 3, 1680), float32] */;
    (%811, meta[relay.Constant][54] /* ty=Tensor[(1200), float64] */, %812)
  };
  %813() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(1200), float64], Tensor[(9, 3, 1680), float32]) */
}

def @func_11193() -> (Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %826 = fn () -> (Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
    %814 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
    %815 = %814.0;
    %816 = cast(%815, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %817 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 840), uint16] */, dtype="uint16") /* ty=Tensor[(2, 840), uint16] */;
    %818 = reshape(%817, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), uint16] */;
    %819 = @func_4592(%818) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(11, 1, 12), float64], Tensor[(132), float32]) */;
    %820 = @func_7871() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 11, 1), float32], Tensor[(1, 77), float32]) */;
    %821 = @func_7797() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %822 = exp(%816) /* ty=Tensor[(9, 2, 3), float32] */;
    %823 = %819.1;
    %824 = %820.0;
    %825 = %821.0;
    (%822, %823, meta[relay.Constant][56] /* ty=Tensor[(2, 840), uint16] */, %824, %825)
  };
  %826() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(11, 1, 12), float64], Tensor[(2, 840), uint16], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */
}

def @func_8308() -> (Tensor[(9, 3, 1), float32],) {
  %829 = fn () -> (Tensor[(9, 3, 1), float32],) {
    %827 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %828 = %827.0;
    (%828,)
  };
  %829() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_10114() -> (Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %834 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
    %830 = cast(meta[relay.Constant][57] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %831 = reshape(%830, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %832 = @func_7428() /* ty=Tensor[(9, 3, 1), float32] */;
    %833 = @func_843(%831) /* ty=Tensor[(8, 11, 11), float64] */;
    (%832, %833, meta[relay.Constant][57] /* ty=Tensor[(968), float64] */)
  };
  %834() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */
}

def @func_11299(%var_11297: Tensor[(294, 1), float64], %var_11298: Tensor[(156), float64]) -> (Tensor[(9, 3, 1), float32], Tensor[(3, 7, 14), bool], Tensor[(294, 1), float64], Tensor[(156), float64]) {
  @func_11295(%var_11297, %var_11298) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(3, 7, 14), bool], Tensor[(294, 1), float64], Tensor[(156), float64]) */
}

def @func_6389() -> Tensor[(9, 3, 1), float32] {
  %836 = fn () -> Tensor[(9, 3, 1), float32] {
    %835 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
    %835.1
  };
  %836() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_6936(%var_6927: Tensor[(126), bool], %var_6928: Tensor[(9, 210), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(9, 210), bool]) {
  %837 = @func_6675() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %838 = cast(%var_6927, dtype="bool") /* ty=Tensor[(126), bool] */;
  %839 = cast(%var_6928, dtype="bool") /* ty=Tensor[(9, 210), bool] */;
  %840 = reshape(%838, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %841 = reshape(%839, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %842 = %837.0;
  %843 = @func_1446(%840, %841) /* ty=Tensor[(9, 15, 14), bool] */;
  (%842, %843, %var_6927, %var_6928)
}

def @func_7429() -> Tensor[(9, 3, 1), float32] {
  %844 = fn () -> Tensor[(9, 3, 1), float32] {
    @func_6388() /* ty=Tensor[(9, 3, 1), float32] */
  };
  %844() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_10988() -> Tensor[(8, 11, 11), float64] {
  %845 = @func_10113() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %845.1
}

def @func_928(%var_926: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  @func_925(%var_926) /* ty=(Tensor[(9, 2, 3), float64],) */
}

def @func_10421() -> (Tensor[(9, 3, 1), float32],) {
  %848 = fn () -> (Tensor[(9, 3, 1), float32],) {
    %846 = @func_7181() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %847 = %846.0;
    (%847,)
  };
  %848() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_8782() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64], Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  %849 = @func_7959() /* ty=(Tensor[(9, 2, 3), float64],) */;
  %850 = @func_6240() /* ty=(Tensor[(9, 3, 1), float64], Tensor[(9, 3, 1), float32]) */;
  %851 = @func_8229() /* ty=(Tensor[(9, 3, 1), float32],) */;
  %852 = @func_5878() /* ty=Tensor[(9, 3, 1), float32] */;
  %853 = %849.0;
  %854 = %850.1;
  %855 = %851.0;
  (%852, %853, %854, %855)
}

def @func_8285() -> (Tensor[(9, 3, 1), float32],) {
  %857 = fn () -> (Tensor[(9, 3, 1), float32],) {
    %856 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    (%856,)
  };
  %857() /* ty=(Tensor[(9, 3, 1), float32],) */
}

def @func_10191() -> Tensor[(132), float32] {
  @func_10189() /* ty=Tensor[(132), float32] */
}

def @func_7946() -> (Tensor[(9, 3, 1), float32],) {
  %858 = @func_6432() /* ty=Tensor[(9, 3, 1), float32] */;
  (%858,)
}

def @func_11295(%var_11289: Tensor[(294, 1), float64], %var_11290: Tensor[(156), float64]) -> (Tensor[(9, 3, 1), float32], Tensor[(3, 7, 14), bool], Tensor[(294, 1), float64], Tensor[(156), float64]) {
  %859 = @func_10965() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */;
  %860 = cast(%var_11289, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %861 = cast(%var_11290, dtype="float64") /* ty=Tensor[(156), float64] */;
  %862 = reshape(%860, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %863 = reshape(%861, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %864 = @func_9617(%862, %863) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(3, 7, 14), bool], Tensor[(156), float64], Tensor[(210), uint64], Tensor[(156), float64], Tensor[(9, 3, 1), float32]) */;
  %865 = %859.0;
  %866 = %864.1;
  (%865, %866, %var_11289, %var_11290)
}

def @func_9341(%var_9340: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) {
  %879 = fn (%var_9326: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) {
    %867 = @func_8941() /* ty=Tensor[(9, 2, 3), float64] */;
    %868 = cast(%var_9326, dtype="uint8") /* ty=Tensor[(9, 2, 3), uint8] */;
    %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%867, dtype="uint8") /* ty=Tensor[(9, 2, 3), uint8] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %872 = cast(meta[relay.Constant][58] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %873 = cast(meta[relay.Constant][59] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %874 = reshape(%872, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float64] */;
    %875 = reshape(%873, newshape=[968]) /* ty=Tensor[(968), float64] */;
    %876 = @func_1977(%874, %875) /* ty=(Tensor[(8, 7, 5), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
    %877 = bitwise_xor(%870, %871) /* ty=Tensor[(9, 2, 3), uint8] */;
    %878 = %876.0;
    (%877, %878, meta[relay.Constant][58] /* ty=Tensor[(280), float64] */, meta[relay.Constant][59] /* ty=Tensor[(968), float64] */)
  };
  %879(%var_9340) /* ty=(Tensor[(9, 2, 3), uint8], Tensor[(8, 7, 5), float64], Tensor[(280), float64], Tensor[(968), float64]) */
}

def @func_7273(%var_7214: Tensor[(9, 3, 15), float32], %var_7231: Tensor[(9, 3, 15), float32]) -> (Tensor[(9, 3, 15), int8], Tensor[(9, 15, 14), bool], Tensor[(63, 2), bool], Tensor[(3, 630), bool], Tensor[(9, 3, 15), float64]) {
  %880 = @func_7023() /* ty=Tensor[(9, 3, 1), float32] */;
  %881 = cast(%880, dtype="int8") /* ty=Tensor[(9, 3, 1), int8] */;
  %882 = cast(%var_7214, dtype="int8") /* ty=Tensor[(9, 3, 15), int8] */;
  %883 = cast(meta[relay.Constant][60] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %884 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 630), bool] */, dtype="bool") /* ty=Tensor[(3, 630), bool] */;
  %885 = reshape(%883, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
  %886 = reshape(%884, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
  %887 = cast(%var_7231, dtype="bool") /* ty=Tensor[(9, 3, 15), bool] */;
  %888 = shape_of(%var_7214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%var_7214, dtype="bool") /* ty=Tensor[(9, 3, 15), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = greater(%889, %890) /* ty=Tensor[(9, 3, 15), bool] */;
  %892 = cast(%891, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %893 = logical_xor(%881, %882) /* ty=Tensor[(9, 3, 15), int8] */;
  %894 = @func_1446(%885, %886) /* ty=Tensor[(9, 15, 14), bool] */;
  %895 = atanh(%892) /* ty=Tensor[(9, 3, 15), float64] */;
  (%893, %894, meta[relay.Constant][60] /* ty=Tensor[(63, 2), bool] */, meta[relay.Constant][61] /* ty=Tensor[(3, 630), bool] */, %895)
}

def @func_8793() -> (Tensor[(9, 3, 1), float64],) {
  @func_8791() /* ty=(Tensor[(9, 3, 1), float64],) */
}

def @func_10076() -> (Tensor[(9, 3, 1), float64],) {
  @func_10074() /* ty=(Tensor[(9, 3, 1), float64],) */
}

def @func_5841() -> Tensor[(9, 3, 1), float32] {
  @func_5839() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_257(%var_255: Tensor[(7, 11, 1), float32]) -> Tensor[(7, 11, 1), float32] {
  @func_254(%var_255) /* ty=Tensor[(7, 11, 1), float32] */
}

def @func_11808(%var_11799: Tensor[(14, 10, 3), uint64]) -> Tensor[(14, 10, 3), float32] {
  %896 = cast(%var_11799, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %897 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(14, 10, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(meta[relay.Constant][62] /* ty=Tensor[(14, 10, 3), uint64] */, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %900 = left_shift(%898, %899) /* ty=Tensor[(14, 10, 3), uint64] */;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %902 = shape_of(%var_11799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%var_11799, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%903, %904) /* ty=Tensor[(14, 10, 3), float32] */
}

def @func_8599() -> Tensor[(9, 2, 3), float64] {
  %906 = fn () -> Tensor[(9, 2, 3), float64] {
    %905 = @func_8072() /* ty=(Tensor[(9, 2, 3), float64],) */;
    %905.0
  };
  %906() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_5880() -> Tensor[(9, 3, 1), float32] {
  @func_5878() /* ty=Tensor[(9, 3, 1), float32] */
}

def @func_12342() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
  %909 = fn () -> (Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) {
    %907 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    %908 = @func_10684() /* ty=Tensor[(9, 2, 3), float64] */;
    (%907, %908)
  };
  %909() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 2, 3), float64]) */
}

def @func_9816(%var_9811: Tensor[(1092), float32], %var_9812: Tensor[(65), int64], %var_9813: Tensor[(77, 1), float32], %var_9814: Tensor[(126), bool], %var_9815: Tensor[(1890), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), float32], Tensor[(13, 5, 1), int64], Tensor[(65), int64], Tensor[(2, 168), float32], Tensor[(77, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(54), float64], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(1890), bool], Tensor[(77), float32]) {
  %940 = fn (%var_9772: Tensor[(1092), float32], %var_9780: Tensor[(65), int64], %var_9782: Tensor[(77, 1), float32], %var_9796: Tensor[(126), bool], %var_9797: Tensor[(1890), bool]) -> (Tensor[(9, 3, 1), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), float32], Tensor[(13, 5, 1), int64], Tensor[(65), int64], Tensor[(2, 168), float32], Tensor[(77, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(54), float64], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(1890), bool], Tensor[(77), float32]) {
    %910 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %911 = cast(%var_9772, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %912 = reshape(%911, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %913 = cast(%var_9780, dtype="int64") /* ty=Tensor[(65), int64] */;
    %914 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
    %915 = cast(%var_9782, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
    %916 = reshape(%913, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), int64] */;
    %917 = reshape(%914, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %918 = reshape(%915, newshape=[77]) /* ty=Tensor[(77), float32] */;
    %919 = @func_3982(%916, %917, %918) /* ty=(Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) */;
    %920 = cast(meta[relay.Constant][64] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %921 = reshape(%920, newshape=[54]) /* ty=Tensor[(54), float64] */;
    %922 = @func_8709(%921) /* ty=(Tensor[(9, 3, 5), uint64], Tensor[(9, 3, 1), bool], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 3, ?), float32], Tensor[(9, 3, ?), int16]) */;
    %923 = cast(%var_9796, dtype="bool") /* ty=Tensor[(126), bool] */;
    %924 = cast(%var_9797, dtype="bool") /* ty=Tensor[(1890), bool] */;
    %925 = reshape(%923, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), bool] */;
    %926 = reshape(%924, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), bool] */;
    %927 = %919.0;
    %928 = cast(%927, dtype="int64") /* ty=Tensor[(13, 5, 1), int64] */;
    %929 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
    %930 = cast(%var_9782, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
    %931 = reshape(%928, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), int64] */;
    %932 = reshape(%929, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %933 = reshape(%930, newshape=[77]) /* ty=Tensor[(77), float32] */;
    %934 = @func_3982(%931, %932, %933) /* ty=(Tensor[(13, 5, 1), int64], Tensor[(7, 12, 13), float32], Tensor[(13, 5, 1092), float32], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(14, 16, 2), float64], Tensor[(280), uint64], Tensor[(7, 88), int32], Tensor[(77), float32], Tensor[(484, 2), float64]) */;
    %935 = %910.0;
    %936 = @func_1679(%912) /* ty=Tensor[(7, 12, 13), float32] */;
    %937 = %922.1;
    %938 = @func_1446(%925, %926) /* ty=Tensor[(9, 15, 14), bool] */;
    %939 = %934.8;
    (%935, %936, %var_9772, %927, %var_9780, meta[relay.Constant][63] /* ty=Tensor[(2, 168), float32] */, %var_9782, %937, meta[relay.Constant][64] /* ty=Tensor[(54), float64] */, %938, %var_9796, %var_9797, %939)
  };
  %940(%var_9811, %var_9812, %var_9813, %var_9814, %var_9815) /* ty=(Tensor[(9, 3, 1), float32], Tensor[(7, 12, 13), float32], Tensor[(1092), float32], Tensor[(13, 5, 1), int64], Tensor[(65), int64], Tensor[(2, 168), float32], Tensor[(77, 1), float32], Tensor[(9, 3, 1), bool], Tensor[(54), float64], Tensor[(9, 15, 14), bool], Tensor[(126), bool], Tensor[(1890), bool], Tensor[(77), float32]) */
}

def @func_6326() -> (Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) {
  @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */
}

def @func_3927(%var_3925: Tensor[(11, 1, 12), float32]) -> (Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) {
  @func_3924(%var_3925) /* ty=(Tensor[(11, 14, 4), int32], int32, Tensor[(616), int32], Tensor[(11, 1, 12), float64]) */
}

def @func_10895(%var_10892: int16, %var_10893: Tensor[(2240, 1), int16], %var_10894: Tensor[(2240, 14), int16]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(16, 10, 14), int16], int16, Tensor[(2240, 14), float64], Tensor[(9, 3, 1), float32], Tensor[(2240, 1), float64], Tensor[(9, 3, 1), float32]) {
  %959 = fn (%var_10854: int16, %var_10855: Tensor[(2240, 1), int16], %var_10866: Tensor[(2240, 14), int16]) -> (Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(16, 10, 14), int16], int16, Tensor[(2240, 14), float64], Tensor[(9, 3, 1), float32], Tensor[(2240, 1), float64], Tensor[(9, 3, 1), float32]) {
    %941 = cast(meta[relay.Constant][65] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %942 = reshape(%941, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float32] */;
    %943 = cast(%var_10854, dtype="int16") /* ty=int16 */;
    %944 = cast(%var_10855, dtype="int16") /* ty=Tensor[(2240, 1), int16] */;
    %945 = reshape(%943, newshape=[]) /* ty=int16 */;
    %946 = reshape(%944, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), int16] */;
    %947 = @func_7699(%945, %946) /* ty=(Tensor[(16, 10, 14), int16],) */;
    %948 = cast(%var_10855, dtype="float64") /* ty=Tensor[(2240, 1), float64] */;
    %949 = cast(%var_10866, dtype="float64") /* ty=Tensor[(2240, 14), float64] */;
    %950 = cast(%var_10855, dtype="float64") /* ty=Tensor[(2240, 1), float64] */;
    %951 = @func_8284() /* ty=(Tensor[(9, 3, 1), float32],) */;
    %952 = @func_8880() /* ty=Tensor[(9, 2, 3), float64] */;
    %953 = @func_48(%942) /* ty=Tensor[(3, 14, 8), float64] */;
    %954 = %947.0;
    %955 = maximum(%948, %949) /* ty=Tensor[(2240, 14), float64] */;
    %956 = @func_5839() /* ty=Tensor[(9, 3, 1), float32] */;
    %957 = log(%950) /* ty=Tensor[(2240, 1), float64] */;
    %958 = %951.0;
    (%952, %953, meta[relay.Constant][65] /* ty=Tensor[(336), float32] */, %954, %var_10854, %955, %956, %957, %958)
  };
  %959(%var_10892, %var_10893, %var_10894) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float32], Tensor[(16, 10, 14), int16], int16, Tensor[(2240, 14), float64], Tensor[(9, 3, 1), float32], Tensor[(2240, 1), float64], Tensor[(9, 3, 1), float32]) */
}

def @func_6675() -> (Tensor[(9, 3, 1), float32],) {
  %960 = @func_6388() /* ty=Tensor[(9, 3, 1), float32] */;
  (%960,)
}

def @func_9082() -> (Tensor[(9, 3, 1), bool],) {
  %963 = fn () -> (Tensor[(9, 3, 1), bool],) {
    %961 = @func_6486() /* ty=(Tensor[(132), float32], Tensor[(9, 3, 1), bool]) */;
    %962 = %961.1;
    (%962,)
  };
  %963() /* ty=(Tensor[(9, 3, 1), bool],) */
}

def @func_7516() -> Tensor[(9, 2, 3), float64] {
  %965 = fn () -> Tensor[(9, 2, 3), float64] {
    %964 = @func_6085() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %964.2
  };
  %965() /* ty=Tensor[(9, 2, 3), float64] */
}

def @func_846(%var_844: Tensor[(8, 11, 11), float64]) -> Tensor[(8, 11, 11), float64] {
  @func_843(%var_844) /* ty=Tensor[(8, 11, 11), float64] */
}

def @func_7181() -> (Tensor[(9, 3, 1), float32],) {
  %966 = @func_6324() /* ty=(Tensor[(9, 3, 1), float32], Tensor[(9, 3, 1), float32]) */;
  %967 = %966.0;
  (%967,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen844/build/output.py", line 2556, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:27:02] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

