==========mod==========
#[version = "0.0.5"]
def @func_8296() -> Tensor[(11, 14, 7), float32] {
  %0 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %0.1
}

def @func_3555(%var_3518: Tensor[(11, 14, 7), float64]) -> Tensor[(11, 14, 7), float32] {
  %1 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %2 = cast(%var_3518, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%4, %5) /* ty=Tensor[(11, 14, 7), float32] */
}

def @func_3640(%var_3628: Tensor[(1452), int8], %var_3630: Tensor[(11, 14, 7), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) {
  %6 = cast(%var_3628, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %7 = cast(%var_3628, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %8 = reshape(%6, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %9 = reshape(%7, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %10 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %11 = cast(%var_3630, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %15 = @func_2902(%8, %9) /* ty=Tensor[(12, 11, 11), bool] */;
  %16 = multiply(%13, %14) /* ty=Tensor[(11, 14, 7), uint64] */;
  (%15, %var_3628, %16)
}

def @func_8261() -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 14, 7), float64]) {
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %18 = reshape(%17, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %19 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  %20 = @func_1381(%18) /* ty=Tensor[(16, 6, 13), float64] */;
  %21 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
  (%19, %20, meta[relay.Constant][0] /* ty=Tensor[(1248), float64] */, %21)
}

def @func_2268(%var_2250: Tensor[(9, 16, 1), float32]) -> (Tensor[(9, 16, 1), float32],) {
  %22 = cast(%var_2250, dtype="float32") /* ty=Tensor[(9, 16, 1), float32] */;
  %23 = log(%22) /* ty=Tensor[(9, 16, 1), float32] */;
  (%23,)
}

def @func_7830(%var_7744: int32, %var_7745: Tensor[(1, 7), int32], %var_7746: Tensor[(6, 60), int64], %var_7748: Tensor[(1, 208), int16], %var_7789: Tensor[(6, 60), int64], %var_7807: Tensor[(1452), int8], %var_7824: Tensor[(1, 792), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) {
  %24 = cast(%var_7744, dtype="int32") /* ty=int32 */;
  %25 = cast(%var_7745, dtype="int32") /* ty=Tensor[(1, 7), int32] */;
  %26 = cast(%var_7746, dtype="int64") /* ty=Tensor[(6, 60), int64] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %28 = cast(%var_7748, dtype="int16") /* ty=Tensor[(1, 208), int16] */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 32), uint8] */, dtype="uint8") /* ty=Tensor[(16, 32), uint8] */;
  %30 = reshape(%24, newshape=[]) /* ty=int32 */;
  %31 = reshape(%25, newshape=[7, 1]) /* ty=Tensor[(7, 1), int32] */;
  %32 = reshape(%26, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %33 = reshape(%27, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %34 = reshape(%28, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %35 = reshape(%29, newshape=[16, 32]) /* ty=Tensor[(16, 32), uint8] */;
  %36 = @func_6120(%30, %31, %32, %33, %34, %35) /* ty=(Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) */;
  %37 = @func_5297() /* ty=(Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 32), uint8] */, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
  %39 = atanh(%38) /* ty=Tensor[(16, 32), float64] */;
  %40 = cast(%39, dtype="int16") /* ty=Tensor[(16, 32), int16] */;
  %41 = cast(%var_7744, dtype="int16") /* ty=int16 */;
  %42 = right_shift(%40, %41) /* ty=Tensor[(16, 32), int16] */;
  %43 = cast(%42, dtype="int8") /* ty=Tensor[(16, 32), int8] */;
  %44 = cast(%var_7744, dtype="int8") /* ty=int8 */;
  %45 = cast(%var_7789, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
  %46 = shape_of(%var_7746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %47 = cast(%var_7746, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %49 = @func_7609() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) */;
  %50 = cast(%42, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
  %51 = cast(%var_7807, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %52 = cast(%var_7807, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %53 = reshape(%51, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %54 = reshape(%52, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %55 = cast(%var_7744, dtype="float64") /* ty=float64 */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  %57 = reshape(%55, newshape=[]) /* ty=float64 */;
  %58 = reshape(%56, newshape=[2, 3, 6]) /* ty=Tensor[(2, 3, 6), float64] */;
  %59 = @func_7565(%57, %58) /* ty=(Tensor[(2, 3, 6), bool], Tensor[(224), float32]) */;
  %60 = cast(%var_7824, dtype="float32") /* ty=Tensor[(1, 792), float32] */;
  %61 = reshape(%60, newshape=[11, 6, 12]) /* ty=Tensor[(11, 6, 12), float32] */;
  %62 = @func_7715(%61) /* ty=(Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */;
  %63 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  %64 = %36.4;
  %65 = %37.0;
  %66 = bitwise_or(%43, %44) /* ty=Tensor[(16, 32), int8] */;
  %67 = greater_equal(%47, %48) /* ty=Tensor[(6, 60), bool] */;
  %68 = %49.2;
  %69 = acosh(%50) /* ty=Tensor[(16, 32), float64] */;
  %70 = @func_2902(%53, %54) /* ty=Tensor[(12, 11, 11), bool] */;
  %71 = @func_7189() /* ty=Tensor[(9, 16, 1248), float64] */;
  %72 = %59.1;
  %73 = %62.0;
  %74 = @func_4008() /* ty=Tensor[(224), float32] */;
  (%63, %64, %var_7745, meta[relay.Constant][1] /* ty=Tensor[(1008), float32] */, %var_7748, %65, %66, %67, %68, %69, %70, %var_7807, %71, %72, meta[relay.Constant][3] /* ty=Tensor[(9, 4), float64] */, %73, %var_7824, %74)
}

def @func_6453() -> (Tensor[(11, 14, 7), float64],) {
  %75 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  (%75,)
}

def @func_2685() -> Tensor[(11, 14, 7), float64] {
  %76 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %76.2
}

def @func_498(%var_489: Tensor[(11, 13, 8), float32], %var_490: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
  %77 = cast(%var_490, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %78 = shape_of(%var_489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_489, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %81 = cast(%var_489, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %82 = minimum(%79, %80) /* ty=Tensor[(11, 13, 8), float32] */;
  %83 = asinh(%81) /* ty=Tensor[(11, 13, 8), float32] */;
  (%82, %83)
}

def @func_229(%var_201: Tensor[(8, 8, 8), uint8]) -> (Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) {
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 8, 8), uint8] */, dtype="uint8") /* ty=Tensor[(8, 8, 8), uint8] */;
  %85 = shape_of(%var_201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_201, dtype="uint8") /* ty=Tensor[(8, 8, 8), uint8] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %89 = reshape(%88, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
  %90 = bitwise_and(%86, %87) /* ty=Tensor[(8, 8, 8), uint8] */;
  %91 = @func_114(%89) /* ty=Tensor[(16, 13), bool] */;
  (%90, %91, meta[relay.Constant][5] /* ty=Tensor[(208), int16] */)
}

def @func_4212() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) {
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1452), int8] */, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
  %93 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %95 = reshape(%92, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %96 = reshape(%94, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
  %97 = @func_3640(%95, %96) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) */;
  %98 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %99 = %97.2;
  %100 = %98.0;
  (%93, %99, meta[relay.Constant][6] /* ty=Tensor[(1, 1452), int8] */, %100)
}

def @func_3815(%var_3729: Tensor[(24), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32]) {
  %101 = cast(%var_3729, dtype="float64") /* ty=Tensor[(24), float64] */;
  %102 = cast(%var_3729, dtype="float64") /* ty=Tensor[(24), float64] */;
  %103 = reshape(%101, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %104 = reshape(%102, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %105 = @func_2405(%103, %104) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %106 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %107 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %108 = %107.0;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 14, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %113 = %105.0;
  %114 = %106.0;
  %115 = power(%111, %112) /* ty=Tensor[(11, 14, 7), float32] */;
  (%113, %var_3729, %114, %115)
}

def @func_4422(%var_4352: Tensor[(5, 6, 12), int64], %var_4357: Tensor[(5, 6, 12), bool], %var_4402: Tensor[(1008), float32], %var_4415: Tensor[(512), uint8]) -> (Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) {
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 12), bool] */;
  %117 = shape_of(%var_4352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_4352, dtype="bool") /* ty=Tensor[(5, 6, 12), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = less(%118, %119) /* ty=Tensor[(5, 6, 12), bool] */;
  %121 = cast(%var_4357, dtype="int16") /* ty=Tensor[(5, 6, 12), int16] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="int16") /* ty=Tensor[(5, 6, 12), int16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 12), int64] */, dtype="float32") /* ty=Tensor[(5, 6, 12), float32] */;
  %126 = asin(%125) /* ty=Tensor[(5, 6, 12), float32] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(5, 6, 12), float32] */;
  %128 = cosh(%127) /* ty=Tensor[(5, 6, 12), float32] */;
  %129 = cast(%126, dtype="int8") /* ty=Tensor[(5, 6, 12), int8] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="int8") /* ty=Tensor[(5, 6, 12), int8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %133 = cast(%var_4402, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %134 = reshape(%133, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %135 = @func_582(%134) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %136 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %138 = cast(%var_4415, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %139 = reshape(%137, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %140 = reshape(%138, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %141 = @func_3894(%139, %140) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %142 = bitwise_or(%123, %124) /* ty=Tensor[(5, 6, 12), int16] */;
  %143 = logical_xor(%131, %132) /* ty=Tensor[(5, 6, 12), int8] */;
  %144 = %135.1;
  %145 = %136.0;
  %146 = %141.4;
  (%142, %143, %144, %var_4402, %145, %146, meta[relay.Constant][9] /* ty=Tensor[(208), int16] */, %var_4415)
}

def @func_5438() -> Tensor[(11, 14, 7), float64] {
  @func_4096() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_3048(%var_3020: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(11, 14, 7), float64]) {
  %147 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %148 = cast(%var_3020, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %153 = reshape(%152, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
  %154 = @func_2268(%153) /* ty=(Tensor[(9, 16, 1), float32],) */;
  %155 = cast(%147, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %156 = logical_or(%150, %151) /* ty=Tensor[(11, 14, 7), bool] */;
  %157 = %154.0;
  %158 = atan(%155) /* ty=Tensor[(11, 14, 7), float64] */;
  (%156, %157, meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, %158)
}

def @func_479(%var_471: Tensor[(1, 9, 11), int64], %var_472: Tensor[(5, 9, 11), int64]) -> (Tensor[(5, 9, 11), bool],) {
  %159 = cast(%var_471, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
  %160 = cast(%var_472, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
  %161 = not_equal(%159, %160) /* ty=Tensor[(5, 9, 11), bool] */;
  (%161,)
}

def @func_7405() -> (Tensor[(6, 15, 6), bool], Tensor[(11, 14, 7), float32]) {
  %162 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
  %163 = @func_7330() /* ty=Tensor[(6, 15, 6), bool] */;
  %164 = %162.0;
  (%163, %164)
}

def @func_3977() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) {
  %165 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %169 = log10(%167) /* ty=Tensor[(11, 14, 7), float32] */;
  %170 = cos(%168) /* ty=Tensor[(11, 14, 7), float32] */;
  (%169, %170)
}

def @func_7169(%var_7104: Tensor[(10, 2), uint16]) -> (Tensor[(6, 15, 6), bool], Tensor[(10, 2), uint16], Tensor[(4, 1, 5), float64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %171 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %172 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %173 = cast(%var_7104, dtype="uint16") /* ty=Tensor[(10, 2), uint16] */;
  %174 = reshape(%172, newshape=[]) /* ty=uint16 */;
  %175 = reshape(%173, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), uint16] */;
  %176 = @func_5879(%174, %175) /* ty=Tensor[(4, 1, 5), uint16] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(4, 1, 5), float32] */;
  %178 = cosh(%177) /* ty=Tensor[(4, 1, 5), float32] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(4, 1, 5), float64] */;
  %180 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %181 = %171.0;
  %182 = power(%179, %180) /* ty=Tensor[(4, 1, 5), float64] */;
  %183 = @func_7015() /* ty=Tensor[(224), float32] */;
  %184 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %185 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  (%181, %var_7104, %182, %183, %184, %185)
}

def @func_7630() -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64]) {
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %187 = reshape(%186, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %188 = @func_7252(%187) /* ty=(Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) */;
  %189 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
  %190 = %188.3;
  (%189, %190, meta[relay.Constant][12] /* ty=Tensor[(80), float64] */)
}

def @func_4481() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) {
  %191 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %192 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %193 = %191.0;
  %194 = %192.1;
  (%193, %194)
}

def @func_4646(%var_4632: Tensor[(512), uint8]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8]) {
  %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %196 = cast(%var_4632, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %197 = reshape(%195, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %198 = reshape(%196, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %199 = @func_3894(%197, %198) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %200 = @func_4051() /* ty=Tensor[(224), float32] */;
  %201 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %202 = %199.2;
  (%200, %201, %202, meta[relay.Constant][13] /* ty=Tensor[(208), int16] */, %var_4632)
}

def @func_334(%var_289: float64, %var_299: Tensor[(208), int16], %var_317: Tensor[(128, 4), uint8]) -> (Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) {
  %203 = cast(%var_289, dtype="float64") /* ty=float64 */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
  %205 = cast(%var_299, dtype="int16") /* ty=Tensor[(208), int16] */;
  %206 = reshape(%205, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
  %207 = cast(%var_317, dtype="uint8") /* ty=Tensor[(128, 4), uint8] */;
  %208 = reshape(%207, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
  %209 = @func_229(%208) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
  %210 = cast(%var_317, dtype="uint8") /* ty=Tensor[(128, 4), uint8] */;
  %211 = reshape(%210, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
  %212 = @func_229(%211) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
  %213 = floor_mod(%203, %204) /* ty=Tensor[(6, 3, 9), float64] */;
  %214 = @func_114(%206) /* ty=Tensor[(16, 13), bool] */;
  %215 = %209.1;
  %216 = %212.1;
  (%213, %214, %var_299, %215, %var_317, %216)
}

def @func_6397() -> (Tensor[(6, 15, 6), bool],) {
  %217 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %218 = %217.0;
  (%218,)
}

def @func_1607(%var_1591: Tensor[(8, 5, 11), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  %219 = cast(%var_1591, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %221 = reshape(%220, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %224 = reshape(%222, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %225 = reshape(%223, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %226 = @func_498(%224, %225) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %227 = atanh(%219) /* ty=Tensor[(8, 5, 11), float64] */;
  %228 = @func_1381(%221) /* ty=Tensor[(16, 6, 13), float64] */;
  %229 = %226.1;
  (%227, %228, meta[relay.Constant][15] /* ty=Tensor[(1248), float64] */, %229, meta[relay.Constant][16] /* ty=Tensor[(1144), float32] */)
}

def @func_7330() -> Tensor[(6, 15, 6), bool] {
  %230 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %230.0
}

def @func_4096() -> Tensor[(11, 14, 7), float64] {
  @func_2685() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_4112() -> (Tensor[(6, 15, 6), bool],) {
  %231 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %232 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = greater_equal(%233, %234) /* ty=Tensor[(6, 15, 6), bool] */;
  (%235,)
}

def @func_2878() -> (Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) {
  %236 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %237 = cast(meta[relay.Constant][19] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %238 = reshape(%237, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %239 = @func_1362(%238) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) */;
  %240 = %236.0;
  %241 = %239.1;
  (%240, %241, meta[relay.Constant][19] /* ty=Tensor[(224), float32] */)
}

def @func_6293() -> (Tensor[(224), float32], Tensor[(224), float32]) {
  %242 = @func_5929() /* ty=Tensor[(224), float32] */;
  %243 = @func_5929() /* ty=Tensor[(224), float32] */;
  (%242, %243)
}

def @func_6793() -> (Tensor[(11, 14, 7), float64],) {
  %244 = @func_6453() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %245 = %244.0;
  (%245,)
}

def @func_3087() -> (Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %246 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %247 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %248 = %246.3;
  %249 = %247.0;
  %250 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  (%248, %249, %250)
}

def @func_3847(%var_3841: Tensor[(1008), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(1008), float32]) {
  %251 = cast(%var_3841, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %252 = reshape(%251, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %253 = @func_582(%252) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %254 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %255 = %253.2;
  (%254, %255, %var_3841)
}

def @func_5152(%var_5111: Tensor[(8, 4, 11), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) {
  %256 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %257 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %258 = cast(%var_5111, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %259 = atan(%258) /* ty=Tensor[(8, 4, 11), float32] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %261 = asin(%260) /* ty=Tensor[(8, 4, 11), float32] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %263 = asinh(%262) /* ty=Tensor[(8, 4, 11), float32] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %265 = cast(%263, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %266 = cast(%var_5111, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
  %267 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%263, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %270 = %256.0;
  %271 = %257.0;
  %272 = rsqrt(%264) /* ty=Tensor[(8, 4, 11), float64] */;
  %273 = log10(%265) /* ty=Tensor[(8, 4, 11), float64] */;
  %274 = logical_xor(%268, %269) /* ty=Tensor[(8, 4, 11), uint64] */;
  (%270, %271, %272, %273, %274)
}

def @func_6750() -> Tensor[(11, 14, 7), float64] {
  %275 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %275.0
}

def @func_7252(%var_7205: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) {
  %276 = @func_6829() /* ty=(Tensor[(224), float32],) */;
  %277 = cast(meta[relay.Constant][20] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %278 = reshape(%277, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %279 = cast(%var_7205, dtype="float64") /* ty=Tensor[(80), float64] */;
  %280 = cast(%var_7205, dtype="float64") /* ty=Tensor[(80), float64] */;
  %281 = reshape(%279, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %282 = reshape(%280, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %284 = reshape(%283, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %285 = @func_2709(%284) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
  %286 = %276.0;
  %287 = @func_1381(%278) /* ty=Tensor[(16, 6, 13), float64] */;
  %288 = @func_5993(%281, %282) /* ty=Tensor[(2, 5, 8), float64] */;
  %289 = @func_5929() /* ty=Tensor[(224), float32] */;
  %290 = %285.3;
  (%286, %287, meta[relay.Constant][20] /* ty=Tensor[(1248), float64] */, %288, %var_7205, %289, %290, meta[relay.Constant][21] /* ty=Tensor[(495), int64] */)
}

def @func_7277() -> Tensor[(2, 10, 13), float32] {
  @func_5010() /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_7339() -> Tensor[(11, 14, 7), float64] {
  %291 = @func_4026() /* ty=(Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) */;
  %291.1
}

def @func_5769() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) {
  %292 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %293 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %294 = %293.3;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(6, 15, 6), float32] */;
  %296 = %292.0;
  %297 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %298 = rsqrt(%295) /* ty=Tensor[(6, 15, 6), float32] */;
  (%296, %297, %298)
}

def @func_2503() -> (Tensor[(11, 14, 7), float64],) {
  %299 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  (%299,)
}

def @func_3259() -> (Tensor[(11, 14, 7), float64],) {
  %300 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %301 = %300.0;
  (%301,)
}

def @func_5929() -> Tensor[(224), float32] {
  @func_4051() /* ty=Tensor[(224), float32] */
}

def @func_6418() -> (Tensor[(11, 14, 7), float64],) {
  %302 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  (%302,)
}

def @func_2709(%var_2702: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) {
  %303 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %304 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 9), int64] */, dtype="int64") /* ty=Tensor[(11, 9), int64] */;
  %305 = cast(%var_2702, dtype="int64") /* ty=Tensor[(495), int64] */;
  %306 = reshape(%304, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %307 = reshape(%305, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %308 = @func_479(%306, %307) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %309 = %303.0;
  %310 = %308.0;
  (%309, %310, meta[relay.Constant][22] /* ty=Tensor[(11, 9), int64] */, %var_2702)
}

def @func_4767(%var_4750: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool],) {
  %311 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %312 = %311.0;
  %313 = cast(%var_4750, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = equal(%315, %316) /* ty=Tensor[(11, 14, 7), bool] */;
  (%317,)
}

def @func_4008() -> Tensor[(224), float32] {
  %318 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %318.2
}

def @func_4132(%var_4127: Tensor[(1248), float64]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
  %319 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %320 = cast(%var_4127, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %321 = reshape(%320, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %322 = %319.0;
  %323 = @func_1381(%321) /* ty=Tensor[(16, 6, 13), float64] */;
  (%322, %323, %var_4127)
}

def @func_6039() -> Tensor[(9, 16, 1248), uint8] {
  %324 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %324.4
}

def @func_2613() -> (Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) {
  %325 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %326 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %327 = reshape(%326, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
  %328 = @func_2268(%327) /* ty=(Tensor[(9, 16, 1), float32],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
  %331 = sqrt(%330) /* ty=Tensor[(9, 16, 1), float64] */;
  %332 = cast(meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %333 = reshape(%332, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %334 = @func_1607(%333) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */;
  %335 = %334.2;
  %336 = cast(%331, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
  %337 = cast(%335, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %338 = %325.0;
  %339 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %340 = left_shift(%336, %337) /* ty=Tensor[(9, 16, 1248), uint8] */;
  (%338, meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, %339, meta[relay.Constant][24] /* ty=Tensor[(2, 72), float32] */, %340)
}

def @func_2902(%var_2893: Tensor[(12, 11, 11), int8], %var_2894: Tensor[(12, 11, 11), int8]) -> Tensor[(12, 11, 11), bool] {
  %341 = cast(%var_2894, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %342 = shape_of(%var_2893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_2893, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%343, %344) /* ty=Tensor[(12, 11, 11), bool] */
}

def @func_1362(%var_1343: Tensor[(14, 1, 16), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) {
  %345 = cast(%var_1343, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %346 = cast(%var_1343, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %347 = sinh(%345) /* ty=Tensor[(14, 1, 16), float32] */;
  %348 = exp(%346) /* ty=Tensor[(14, 1, 16), float32] */;
  (%347, %348)
}

def @func_4597(%var_4571: Tensor[(3, 10, 7), float64], %var_4589: Tensor[(1452), int8]) -> (Tensor[(3, 10, 7), float64], Tensor[(11, 14, 7), uint32], Tensor[(1078, 1), float32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64]) {
  %349 = cast(%var_4571, dtype="float64") /* ty=Tensor[(3, 10, 7), float64] */;
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %351 = reshape(%350, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float32] */;
  %352 = @func_3420(%351) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) */;
  %353 = cast(%var_4589, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %354 = cast(%var_4589, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %355 = reshape(%353, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %356 = reshape(%354, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %357 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %358 = sin(%349) /* ty=Tensor[(3, 10, 7), float64] */;
  %359 = %352.0;
  %360 = @func_2902(%355, %356) /* ty=Tensor[(12, 11, 11), bool] */;
  %361 = %357.0;
  (%358, %359, meta[relay.Constant][25] /* ty=Tensor[(1078, 1), float32] */, %360, %var_4589, %361)
}

def @func_3894(%var_3888: Tensor[(208), int16], %var_3889: Tensor[(2, 256), uint8]) -> (Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) {
  %362 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %363 = cast(4.99082f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %364 = cast(%var_3888, dtype="int16") /* ty=Tensor[(208), int16] */;
  %365 = cast(%var_3889, dtype="uint8") /* ty=Tensor[(2, 256), uint8] */;
  %366 = reshape(%363, newshape=[]) /* ty=float64 */;
  %367 = reshape(%364, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %368 = reshape(%365, newshape=[128, 4]) /* ty=Tensor[(128, 4), uint8] */;
  %369 = @func_334(%366, %367, %368) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) */;
  %370 = %362.0;
  %371 = %369.2;
  (%370, %371, 4.99082f64 /* ty=float64 */, %var_3888, %var_3889)
}

def @func_6697(%var_6679: Tensor[(1452), int8], %var_6685: Tensor[(14, 7, 16), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(1452), int8], Tensor[(14, 7, 16), float64]) {
  %372 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
  %373 = cast(%var_6679, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %374 = reshape(%373, newshape=[242, 6]) /* ty=Tensor[(242, 6), int8] */;
  %375 = @func_4859(%374) /* ty=(Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) */;
  %376 = %375.7;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
  %378 = cast(%var_6685, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
  %379 = %372.1;
  %380 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  %381 = floor_divide(%377, %378) /* ty=Tensor[(14, 7, 16), float64] */;
  (%379, %380, %var_6679, %381)
}

def @func_6236(%var_6188: Tensor[(80), float64], %var_6224: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) {
  %382 = cast(%var_6188, dtype="float64") /* ty=Tensor[(80), float64] */;
  %383 = cast(%var_6188, dtype="float64") /* ty=Tensor[(80), float64] */;
  %384 = reshape(%382, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %385 = reshape(%383, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %386 = cast(meta[relay.Constant][26] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %387 = reshape(%386, newshape=[242, 6]) /* ty=Tensor[(242, 6), int8] */;
  %388 = @func_4859(%387) /* ty=(Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) */;
  %389 = cast(%var_6224, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %390 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1452), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %391 = cast(meta[relay.Constant][26] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?), int8] */;
  %393 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %394 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %395 = @func_5993(%384, %385) /* ty=Tensor[(2, 5, 8), float64] */;
  %396 = %388.1;
  %397 = bitwise_and(%391, %392) /* ty=Tensor[(1452), int8] */;
  %398 = %393.1;
  (%394, %395, %var_6188, %396, %397, %398)
}

def @func_8627(%var_8623: Tensor[(39), uint64], %var_8624: Tensor[(495), int64]) -> (Tensor[(6, 15, 6), float32], Tensor[(495), int64], uint64, Tensor[(39), uint64], Tensor[(495), int64]) {
  %399 = @func_5769() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) */;
  %400 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %401 = cast(%var_8623, dtype="uint64") /* ty=Tensor[(39), uint64] */;
  %402 = cast(%var_8624, dtype="int64") /* ty=Tensor[(495), int64] */;
  %403 = reshape(%400, newshape=[]) /* ty=uint64 */;
  %404 = reshape(%401, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), uint64] */;
  %405 = reshape(%402, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %406 = @func_5494(%403, %404, %405) /* ty=(Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
  %407 = %399.2;
  %408 = %406.2;
  (%407, %408, meta[relay.Constant][27] /* ty=uint64 */, %var_8623, %var_8624)
}

def @func_6829() -> (Tensor[(224), float32],) {
  %409 = @func_6311() /* ty=Tensor[(224), float32] */;
  (%409,)
}

def @func_5560(%var_5539: Tensor[(10, 8, 2), uint16], %var_5540: Tensor[(10, 8, 2), uint16]) -> Tensor[(10, 8, 2), bool] {
  %410 = cast(%var_5540, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %411 = shape_of(%var_5539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_5539, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%412, %413) /* ty=Tensor[(10, 8, 2), bool] */
}

def @func_5993(%var_5985: Tensor[(2, 5, 8), float64], %var_5986: Tensor[(2, 5, 8), float64]) -> Tensor[(2, 5, 8), float64] {
  %414 = cast(%var_5986, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %415 = shape_of(%var_5985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_5985, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%416, %417) /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_2337() -> Tensor[(11, 14, 7), float64] {
  %418 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  sinh(%418) /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_1381(%var_1375: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
  %419 = cast(%var_1375, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  erf(%419) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_114(%var_66: Tensor[(16, 13), int16]) -> Tensor[(16, 13), bool] {
  %420 = cast(%var_66, dtype="bool") /* ty=Tensor[(16, 13), bool] */;
  %421 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(16, 13), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %422 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 13), int16] */, dtype="bool") /* ty=Tensor[(16, 13), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%422, %423) /* ty=Tensor[(16, 13), bool] */
}

def @func_2405(%var_2341: Tensor[(2, 4, 3), float64], %var_2395: Tensor[(2, 4, 3), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
  %424 = cast(meta[relay.Constant][30] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
  %425 = cast(meta[relay.Constant][31] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %426 = reshape(%424, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %427 = reshape(%425, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %428 = @func_479(%426, %427) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %429 = cast(%var_2341, dtype="float64") /* ty=Tensor[(2, 4, 3), float64] */;
  %430 = rsqrt(%429) /* ty=Tensor[(2, 4, 3), float64] */;
  %431 = cast(%var_2395, dtype="float32") /* ty=Tensor[(2, 4, 3), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(2, 4, 3), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = cast(meta[relay.Constant][32] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %436 = reshape(%435, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %437 = %428.0;
  %438 = power(%433, %434) /* ty=Tensor[(2, 4, 3), float32] */;
  %439 = @func_1381(%436) /* ty=Tensor[(16, 6, 13), float64] */;
  (%437, meta[relay.Constant][30] /* ty=Tensor[(99), int64] */, meta[relay.Constant][31] /* ty=Tensor[(495), int64] */, %438, %439, meta[relay.Constant][32] /* ty=Tensor[(1248), float64] */)
}

def @func_5297() -> (Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) {
  %440 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
  %441 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 14, 7), float64] */, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %445 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %446 = cast(meta[relay.Constant][34] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %447 = reshape(%446, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %448 = @func_4132(%447) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %449 = bitwise_and(%443, %444) /* ty=Tensor[(11, 14, 7), uint64] */;
  %450 = %445.2;
  %451 = %448.0;
  (%449, %450, %451, meta[relay.Constant][34] /* ty=Tensor[(1248), float64] */)
}

def @func_582(%var_517: Tensor[(14, 12, 6), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) {
  %452 = cast(meta[relay.Constant][35] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %453 = cast(meta[relay.Constant][35] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %454 = reshape(%452, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %455 = reshape(%453, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %456 = @func_498(%454, %455) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %457 = %456.1;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %459 = cast(meta[relay.Constant][35] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %460 = reshape(%458, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %461 = reshape(%459, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %462 = @func_498(%460, %461) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %463 = cast(%var_517, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
  %464 = sin(%463) /* ty=Tensor[(14, 12, 6), float32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
  %466 = %462.0;
  %467 = sqrt(%465) /* ty=Tensor[(14, 12, 6), float32] */;
  (%457, meta[relay.Constant][35] /* ty=Tensor[(1144), float32] */, %466, %467)
}

def @func_4338(%var_4315: Tensor[(1248), float64], %var_4322: Tensor[(840), uint16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(1248), float64], uint16, Tensor[(840), uint16], Tensor[(24), float64]) {
  %468 = cast(%var_4315, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %469 = reshape(%468, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %470 = cast(meta[relay.Constant][36] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %471 = cast(%var_4322, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %472 = cast(meta[relay.Constant][37] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %473 = reshape(%470, newshape=[]) /* ty=uint16 */;
  %474 = reshape(%471, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), uint16] */;
  %475 = reshape(%472, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %476 = @func_2993(%473, %474, %475) /* ty=(Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) */;
  %477 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  %478 = @func_1381(%469) /* ty=Tensor[(16, 6, 13), float64] */;
  %479 = %476.1;
  (%477, %478, %var_4315, %479, meta[relay.Constant][36] /* ty=uint16 */, %var_4322, meta[relay.Constant][37] /* ty=Tensor[(24), float64] */)
}

def @func_3420(%var_3405: Tensor[(11, 14, 7), float32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) {
  %480 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %482 = asin(%481) /* ty=Tensor[(11, 14, 7), float32] */;
  %483 = cast(%var_3405, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %487 = cast(meta[relay.Constant][38] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %488 = cast(meta[relay.Constant][38] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %489 = reshape(%487, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %490 = reshape(%488, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %491 = logical_xor(%485, %486) /* ty=Tensor[(11, 14, 7), uint32] */;
  %492 = @func_2902(%489, %490) /* ty=Tensor[(12, 11, 11), bool] */;
  (%491, %492, meta[relay.Constant][38] /* ty=Tensor[(1452), int8] */)
}

def @func_7015() -> Tensor[(224), float32] {
  %493 = @func_6293() /* ty=(Tensor[(224), float32], Tensor[(224), float32]) */;
  %493.1
}

def @func_5395(%var_5386: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(1, 11, 12), float32]) {
  %494 = cast(%var_5386, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %495 = cast(%var_5386, dtype="float32") /* ty=Tensor[(1, 11, 12), float32] */;
  %496 = asinh(%494) /* ty=Tensor[(1, 11, 12), float64] */;
  %497 = log10(%495) /* ty=Tensor[(1, 11, 12), float32] */;
  (%496, %497)
}

def @func_2993(%var_2978: uint16, %var_2979: Tensor[(15, 4, 14), uint16], %var_2988: Tensor[(12, 2), float64]) -> (Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) {
  %498 = cast(%var_2978, dtype="uint16") /* ty=uint16 */;
  %499 = cast(%var_2979, dtype="uint16") /* ty=Tensor[(15, 4, 14), uint16] */;
  %500 = cast(%var_2988, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %501 = cast(%var_2988, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %502 = reshape(%500, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %503 = reshape(%501, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %504 = @func_2405(%502, %503) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %505 = logical_xor(%498, %499) /* ty=Tensor[(15, 4, 14), uint16] */;
  %506 = %504.5;
  (%505, %506, %var_2988)
}

def @func_5655(%var_5612: Tensor[(208), int16], %var_5632: Tensor[(2, 256), uint8], %var_5651: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), uint32], Tensor[(512, 208), int16], Tensor[(2, 256), float32], Tensor[(2, 256), float64], Tensor[(2, 10, 13), float32], Tensor[(495), bool], Tensor[(495), int64]) {
  %507 = @func_4710() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) */;
  %508 = cast(meta[relay.Constant][39] /* ty=Tensor[(512, 1), uint8] */, dtype="int16") /* ty=Tensor[(512, 1), int16] */;
  %509 = cast(%var_5612, dtype="int16") /* ty=Tensor[(208), int16] */;
  %510 = cast(%var_5612, dtype="int16") /* ty=Tensor[(208), int16] */;
  %511 = cast(meta[relay.Constant][39] /* ty=Tensor[(512, 1), uint8] */, dtype="uint8") /* ty=Tensor[(512, 1), uint8] */;
  %512 = reshape(%510, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %513 = reshape(%511, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %514 = @func_3894(%512, %513) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %515 = %514.4;
  %516 = cast(%var_5632, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%515, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %520 = cast(%var_5632, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %521 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %522 = cast(%var_5651, dtype="int64") /* ty=Tensor[(495), int64] */;
  %523 = reshape(%522, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %524 = %507.1;
  %525 = minimum(%508, %509) /* ty=Tensor[(512, 208), int16] */;
  %526 = power(%518, %519) /* ty=Tensor[(2, 256), float32] */;
  %527 = sqrt(%520) /* ty=Tensor[(2, 256), float64] */;
  %528 = %521.4;
  %529 = @func_5216(%523) /* ty=Tensor[(495), bool] */;
  (%524, %525, %526, %527, %528, %529, %var_5651)
}

def @func_3347() -> Tensor[(11, 14, 7), float64] {
  @func_2685() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_5879(%var_5856: uint16, %var_5857: Tensor[(4, 1, 5), uint16]) -> Tensor[(4, 1, 5), uint16] {
  %530 = cast(%var_5856, dtype="uint16") /* ty=uint16 */;
  %531 = cast(%var_5857, dtype="uint16") /* ty=Tensor[(4, 1, 5), uint16] */;
  logical_xor(%530, %531) /* ty=Tensor[(4, 1, 5), uint16] */
}

def @func_7932(%var_7926: Tensor[(1248), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(80), float64], Tensor[(1452, 1), int8], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(1, 1452), int8]) {
  %532 = cast(meta[relay.Constant][40] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %533 = cast(meta[relay.Constant][41] /* ty=Tensor[(1452, 1), int8] */, dtype="int8") /* ty=Tensor[(1452, 1), int8] */;
  %534 = reshape(%532, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %535 = reshape(%533, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %536 = @func_6236(%534, %535) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) */;
  %537 = cast(%var_7926, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %538 = reshape(%537, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %539 = @func_4132(%538) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %540 = @func_4212() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) */;
  %541 = @func_7015() /* ty=Tensor[(224), float32] */;
  %542 = %536.5;
  %543 = %539.2;
  %544 = %540.2;
  (%541, %542, meta[relay.Constant][40] /* ty=Tensor[(80), float64] */, meta[relay.Constant][41] /* ty=Tensor[(1452, 1), int8] */, %543, %var_7926, %544)
}

def @func_4859(%var_4851: Tensor[(242, 6), int8]) -> (Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) {
  %545 = cast(meta[relay.Constant][42] /* ty=Tensor[(512), uint8] */, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %546 = reshape(%545, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
  %547 = @func_229(%546) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
  %548 = cast(meta[relay.Constant][43] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %549 = reshape(%548, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
  %550 = @func_2268(%549) /* ty=(Tensor[(9, 16, 1), float32],) */;
  %551 = cast(%var_4851, dtype="int8") /* ty=Tensor[(242, 6), int8] */;
  %552 = cast(%var_4851, dtype="int8") /* ty=Tensor[(242, 6), int8] */;
  %553 = reshape(%551, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %554 = reshape(%552, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %555 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %556 = @func_4008() /* ty=Tensor[(224), float32] */;
  %557 = %547.1;
  %558 = %550.0;
  %559 = @func_2902(%553, %554) /* ty=Tensor[(12, 11, 11), bool] */;
  %560 = %555.1;
  (%556, %557, meta[relay.Constant][42] /* ty=Tensor[(512), uint8] */, %558, meta[relay.Constant][43] /* ty=Tensor[(144), float32] */, %559, %var_4851, %560)
}

def @func_5216(%var_5211: Tensor[(495), int64]) -> Tensor[(495), bool] {
  %561 = @func_4527() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) */;
  %562 = %561.4;
  %563 = cast(%var_5211, dtype="bool") /* ty=Tensor[(495), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(495), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%565, %566) /* ty=Tensor[(495), bool] */
}

def @func_8213() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64]) {
  %567 = @func_6793() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %568 = @func_6821() /* ty=Tensor[(224), float32] */;
  %569 = %567.0;
  (%568, %569)
}

def @func_7715(%var_7691: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  %570 = cast(%var_7691, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %571 = cast(%var_7691, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
  %572 = atan(%571) /* ty=Tensor[(11, 6, 12), float32] */;
  %573 = cast(%572, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %574 = shape_of(%var_7691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_7691, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = cast(meta[relay.Constant][44] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %578 = cast(meta[relay.Constant][44] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %579 = reshape(%577, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %580 = reshape(%578, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %581 = @func_498(%579, %580) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %582 = log2(%570) /* ty=Tensor[(11, 6, 12), float64] */;
  %583 = logical_and(%575, %576) /* ty=Tensor[(11, 6, 12), bool] */;
  %584 = %581.1;
  (%582, %583, %584, meta[relay.Constant][44] /* ty=Tensor[(1144), float32] */)
}

def @func_8490(%var_8460: Tensor[(360, 1), int64], %var_8461: Tensor[(2, 104), int16], %var_8462: Tensor[(1, 1452), int8], %var_8478: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(9, 16, 1248), float64], int32, Tensor[(1, 7), int32], Tensor[(360, 1), int64], Tensor[(2, 104), int16], Tensor[(1, 1452), int8], Tensor[(792), float32], Tensor[(1248), float64], Tensor[(80), float64]) {
  %585 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %586 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %587 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 7), int32] */, dtype="int32") /* ty=Tensor[(1, 7), int32] */;
  %588 = cast(%var_8460, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %589 = cast(%var_8461, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %590 = cast(%var_8460, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %591 = cast(%var_8462, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
  %592 = cast(meta[relay.Constant][46] /* ty=Tensor[(792), float32] */, dtype="float32") /* ty=Tensor[(792), float32] */;
  %593 = reshape(%586, newshape=[]) /* ty=int32 */;
  %594 = reshape(%587, newshape=[1, 7]) /* ty=Tensor[(1, 7), int32] */;
  %595 = reshape(%588, newshape=[6, 60]) /* ty=Tensor[(6, 60), int64] */;
  %596 = reshape(%589, newshape=[1, 208]) /* ty=Tensor[(1, 208), int16] */;
  %597 = reshape(%590, newshape=[6, 60]) /* ty=Tensor[(6, 60), int64] */;
  %598 = reshape(%591, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %599 = reshape(%592, newshape=[1, 792]) /* ty=Tensor[(1, 792), float32] */;
  %600 = @func_7830(%593, %594, %595, %596, %597, %598, %599) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) */;
  %601 = cast(%var_8478, dtype="float64") /* ty=Tensor[(80), float64] */;
  %602 = reshape(%601, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %603 = @func_7252(%602) /* ty=(Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) */;
  %604 = @func_4051() /* ty=Tensor[(224), float32] */;
  %605 = %585.1;
  %606 = %600.12;
  %607 = %603.2;
  (%604, %605, %606, 7 /* ty=int32 */, meta[relay.Constant][45] /* ty=Tensor[(1, 7), int32] */, %var_8460, %var_8461, %var_8462, meta[relay.Constant][46] /* ty=Tensor[(792), float32] */, %607, %var_8478)
}

def @func_4812(%var_4787: Tensor[(495), int64]) -> (Tensor[(495), uint16], Tensor[(495), float32]) {
  %608 = @func_4527() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) */;
  %609 = %608.4;
  %610 = cast(%var_4787, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(%609, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %614 = cast(%609, dtype="float32") /* ty=Tensor[(495), float32] */;
  %615 = shape_of(%var_4787, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(%var_4787, dtype="float32") /* ty=Tensor[(495), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), float32] */;
  %618 = bitwise_xor(%612, %613) /* ty=Tensor[(495), uint16] */;
  %619 = power(%616, %617) /* ty=Tensor[(495), float32] */;
  (%618, %619)
}

def @func_1510(%var_1482: Tensor[(3, 4, 8), uint8], %var_1488: Tensor[(3, 4, 8), uint8]) -> (Tensor[(3, 4, 8), uint8], Tensor[(3, 4, 8), float32], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64]) {
  %620 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
  %621 = shape_of(%var_1482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_1482, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %624 = cast(%var_1488, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %625 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %628 = cast(meta[relay.Constant][48] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %629 = reshape(%628, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
  %630 = cast(meta[relay.Constant][49] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
  %631 = cast(meta[relay.Constant][50] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %632 = reshape(%630, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %633 = reshape(%631, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %634 = @func_479(%632, %633) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %635 = multiply(%622, %623) /* ty=Tensor[(3, 4, 8), uint8] */;
  %636 = mod(%626, %627) /* ty=Tensor[(3, 4, 8), float32] */;
  %637 = @func_114(%629) /* ty=Tensor[(16, 13), bool] */;
  %638 = %634.0;
  (%635, %636, %637, meta[relay.Constant][48] /* ty=Tensor[(208), int16] */, %638, meta[relay.Constant][49] /* ty=Tensor[(99), int64] */, meta[relay.Constant][50] /* ty=Tensor[(495), int64] */)
}

def @func_5371(%var_5344: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) {
  %639 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %640 = cast(%var_5344, dtype="int64") /* ty=Tensor[(495), int64] */;
  %641 = reshape(%640, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %642 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %643 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %644 = %639.0;
  %645 = @func_5216(%641) /* ty=Tensor[(495), bool] */;
  %646 = %642.0;
  (%643, %644, %645, %var_5344, %646)
}

def @func_8713(%var_8676: uint16, %var_8677: Tensor[(60, 14), uint16], %var_8708: Tensor[(60, 14), uint16]) -> (Tensor[(224), float32], Tensor[(1248), float64], uint16, Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(9, 16, 1248), uint8], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64], Tensor[(60, 14), bool]) {
  %647 = @func_8056() /* ty=(Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) */;
  %648 = cast(%var_8676, dtype="uint16") /* ty=uint16 */;
  %649 = cast(%var_8677, dtype="uint16") /* ty=Tensor[(60, 14), uint16] */;
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %651 = reshape(%648, newshape=[]) /* ty=uint16 */;
  %652 = reshape(%649, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), uint16] */;
  %653 = reshape(%650, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %654 = @func_2993(%651, %652, %653) /* ty=(Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) */;
  %655 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %656 = cast(meta[relay.Constant][52] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %657 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 1452), int8] */, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
  %658 = reshape(%656, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %659 = reshape(%657, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %660 = @func_6236(%658, %659) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) */;
  %661 = @func_3087() /* ty=(Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %662 = cast(%var_8708, dtype="bool") /* ty=Tensor[(60, 14), bool] */;
  %663 = shape_of(%var_8677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %664 = cast(%var_8677, dtype="bool") /* ty=Tensor[(60, 14), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %666 = %647.4;
  %667 = %654.1;
  %668 = %655.0;
  %669 = @func_6039() /* ty=Tensor[(9, 16, 1248), uint8] */;
  %670 = %660.1;
  %671 = %661.2;
  %672 = not_equal(%664, %665) /* ty=Tensor[(60, 14), bool] */;
  (%666, %667, %var_8676, meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, %668, %669, %670, meta[relay.Constant][52] /* ty=Tensor[(80), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1452), int8] */, %671, %672)
}

def @func_3481() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %673 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %675 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %676 = atanh(%674) /* ty=Tensor[(11, 14, 7), float64] */;
  (%675, %676)
}

def @func_8561(%var_8543: Tensor[(6, 15, 6), bool]) -> (Tensor[(224), float32], Tensor[(6, 15, 6), uint16]) {
  %677 = @func_8352() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %678 = %677.0;
  %679 = cast(%var_8543, dtype="uint16") /* ty=Tensor[(6, 15, 6), uint16] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="uint16") /* ty=Tensor[(6, 15, 6), uint16] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %683 = @func_5929() /* ty=Tensor[(224), float32] */;
  %684 = bitwise_xor(%681, %682) /* ty=Tensor[(6, 15, 6), uint16] */;
  (%683, %684)
}

def @main() -> (Tensor[(11, 14, 7), float64], Tensor[(572, 2), float32], Tensor[(11, 14, 7), bool]) {
  %685 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  %686 = cast(meta[relay.Constant][54] /* ty=Tensor[(572, 2), float32] */, dtype="float32") /* ty=Tensor[(572, 2), float32] */;
  %687 = reshape(%686, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %688 = @func_7668(%687) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) */;
  %689 = %688.1;
  %690 = cast(%689, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %691 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%685, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = @func_7339() /* ty=Tensor[(11, 14, 7), float64] */;
  %695 = not_equal(%692, %693) /* ty=Tensor[(11, 14, 7), bool] */;
  (%694, meta[relay.Constant][54] /* ty=Tensor[(572, 2), float32] */, %695)
}

def @func_7464() -> (Tensor[(6, 14, 3), float32], Tensor[(252), float32], Tensor[(14, 15, 3), float32], Tensor[(224), float32]) {
  %696 = cast(meta[relay.Constant][55] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %697 = reshape(%696, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float32] */;
  %698 = @func_3304(%697) /* ty=(Tensor[(6, 14, 3), float32],) */;
  %699 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
  %700 = log10(%699) /* ty=Tensor[(14, 15, 3), float32] */;
  %701 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %705 = %698.0;
  %706 = divide(%703, %704) /* ty=Tensor[(14, 15, 3), float32] */;
  %707 = @func_7015() /* ty=Tensor[(224), float32] */;
  (%705, meta[relay.Constant][55] /* ty=Tensor[(252), float32] */, %706, %707)
}

def @func_8056() -> (Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) {
  %708 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %709 = cast(meta[relay.Constant][57] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %710 = cast(meta[relay.Constant][58] /* ty=Tensor[(512), uint8] */, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %711 = reshape(%709, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %712 = reshape(%710, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %713 = @func_3894(%711, %712) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %714 = %708.1;
  %715 = %713.2;
  %716 = @func_5929() /* ty=Tensor[(224), float32] */;
  (%714, %715, meta[relay.Constant][57] /* ty=Tensor[(208), int16] */, meta[relay.Constant][58] /* ty=Tensor[(512), uint8] */, %716)
}

def @func_3304(%var_3298: Tensor[(6, 14, 3), float32]) -> (Tensor[(6, 14, 3), float32],) {
  %717 = cast(%var_3298, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %718 = acosh(%717) /* ty=Tensor[(6, 14, 3), float32] */;
  (%718,)
}

def @func_5010() -> Tensor[(2, 10, 13), float32] {
  %719 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  asinh(%719) /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_5519() -> (Tensor[(11, 14, 7), float64],) {
  %720 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  (%720,)
}

def @func_7609() -> (Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) {
  %721 = @func_5519() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %722 = %721.0;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %724 = reshape(%723, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
  %725 = @func_4767(%724) /* ty=(Tensor[(11, 14, 7), bool],) */;
  %726 = @func_5929() /* ty=Tensor[(224), float32] */;
  %727 = %725.0;
  (%722, %726, %727)
}

def @func_5710(%var_5665: Tensor[(10, 14, 12), uint64], %var_5670: Tensor[(10, 14, 12), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(10, 14, 12), float64], Tensor[(10, 14, 12), float64]) {
  %728 = cast(%var_5665, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %729 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(meta[relay.Constant][60] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %732 = cast(meta[relay.Constant][60] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %733 = cast(%var_5670, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %734 = shape_of(%var_5665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%var_5665, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %737 = floor_mod(%735, %736) /* ty=Tensor[(10, 14, 12), float32] */;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %739 = greater(%730, %731) /* ty=Tensor[(10, 14, 12), bool] */;
  %740 = sinh(%732) /* ty=Tensor[(10, 14, 12), float64] */;
  %741 = asinh(%738) /* ty=Tensor[(10, 14, 12), float64] */;
  (%739, %740, %741)
}

def @func_8752(%var_8728: Tensor[(4, 9, 4), uint16], %var_8729: Tensor[(4, 9, 4), uint16], %var_8743: Tensor[(4, 9, 4), uint16]) -> (Tensor[(4, 9, 4), bool], Tensor[(4, 9, 4), bool]) {
  %742 = cast(%var_8729, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
  %743 = shape_of(%var_8728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_8728, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = cast(%var_8743, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
  %747 = shape_of(%var_8729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_8729, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = less_equal(%744, %745) /* ty=Tensor[(4, 9, 4), bool] */;
  %751 = not_equal(%748, %749) /* ty=Tensor[(4, 9, 4), bool] */;
  (%750, %751)
}

def @func_4051() -> Tensor[(224), float32] {
  @func_4008() /* ty=Tensor[(224), float32] */
}

def @func_7668(%var_7665: Tensor[(11, 104), float32]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) {
  %752 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %753 = cast(%var_7665, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %754 = cast(%var_7665, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %755 = reshape(%753, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %756 = reshape(%754, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %757 = @func_498(%755, %756) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %758 = @func_7015() /* ty=Tensor[(224), float32] */;
  %759 = %752.1;
  %760 = %757.1;
  (%758, %759, %760, %var_7665)
}

def @func_6311() -> Tensor[(224), float32] {
  @func_4051() /* ty=Tensor[(224), float32] */
}

def @func_4527() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) {
  %761 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %762 = cast(meta[relay.Constant][61] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
  %763 = cast(meta[relay.Constant][62] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %764 = reshape(%762, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %765 = reshape(%763, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %766 = @func_479(%764, %765) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %767 = cast(meta[relay.Constant][63] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %768 = %761.0;
  %769 = cast(%768, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %770 = reshape(%767, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %771 = reshape(%769, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
  %772 = @func_3640(%770, %771) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) */;
  %773 = @func_4008() /* ty=Tensor[(224), float32] */;
  %774 = %766.0;
  %775 = %772.1;
  (%773, %768, %774, meta[relay.Constant][61] /* ty=Tensor[(99), int64] */, meta[relay.Constant][62] /* ty=Tensor[(495), int64] */, %775, meta[relay.Constant][63] /* ty=Tensor[(1452), int8] */)
}

def @func_8414(%var_8356: Tensor[(9, 8, 11), int64], %var_8357: Tensor[(9, 8, 11), int64], %var_8369: Tensor[(165, 3), int64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(165, 3), int64], Tensor[(14, 12, 6), float32], Tensor[(1008), float32], Tensor[(9, 8, 11), float64], Tensor[(9, 8, 11), float32], Tensor[(495), bool]) {
  %776 = cast(meta[relay.Constant][64] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
  %777 = cast(%var_8369, dtype="int64") /* ty=Tensor[(165, 3), int64] */;
  %778 = reshape(%776, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %779 = reshape(%777, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %780 = @func_479(%778, %779) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %781 = cast(meta[relay.Constant][65] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %782 = reshape(%781, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %783 = @func_582(%782) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %784 = cast(%var_8357, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %785 = shape_of(%var_8356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%var_8356, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = not_equal(%786, %787) /* ty=Tensor[(9, 8, 11), bool] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(9, 8, 11), float64] */;
  %790 = atanh(%789) /* ty=Tensor[(9, 8, 11), float64] */;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(9, 8, 11), float64] */;
  %792 = cast(%var_8356, dtype="float32") /* ty=Tensor[(9, 8, 11), float32] */;
  %793 = sqrt(%792) /* ty=Tensor[(9, 8, 11), float32] */;
  %794 = cast(meta[relay.Constant][66] /* ty=Tensor[(9, 8, 11), float32] */, dtype="uint64") /* ty=Tensor[(9, 8, 11), uint64] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="uint64") /* ty=Tensor[(9, 8, 11), uint64] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %798 = bitwise_xor(%796, %797) /* ty=Tensor[(9, 8, 11), uint64] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(9, 8, 11), float32] */;
  %800 = cast(%var_8369, dtype="int64") /* ty=Tensor[(165, 3), int64] */;
  %801 = reshape(%800, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %802 = @func_5371(%801) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) */;
  %803 = %780.0;
  %804 = %783.3;
  %805 = acos(%791) /* ty=Tensor[(9, 8, 11), float64] */;
  %806 = log2(%799) /* ty=Tensor[(9, 8, 11), float32] */;
  %807 = %802.2;
  (%803, meta[relay.Constant][64] /* ty=Tensor[(99), int64] */, %var_8369, %804, meta[relay.Constant][65] /* ty=Tensor[(1008), float32] */, %805, %806, %807)
}

def @func_6821() -> Tensor[(224), float32] {
  %808 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %808.2
}

def @func_4026() -> (Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) {
  %809 = cast(meta[relay.Constant][68] /* ty=Tensor[(16, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 9), float64] */;
  %810 = shape_of(meta[relay.Constant][67] /* ty=Tensor[(16, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(meta[relay.Constant][67] /* ty=Tensor[(16, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 9), float64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %813 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %814 = minimum(%811, %812) /* ty=Tensor[(16, 8, 9), float64] */;
  %815 = %813.0;
  (%814, %815)
}

def @func_8162(%var_8153: Tensor[(13, 14, 12), uint32], %var_8154: Tensor[(13, 14, 12), uint32]) -> Tensor[(13, 14, 12), uint32] {
  %816 = cast(%var_8154, dtype="uint32") /* ty=Tensor[(13, 14, 12), uint32] */;
  %817 = shape_of(%var_8153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%var_8153, dtype="uint32") /* ty=Tensor[(13, 14, 12), uint32] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%818, %819) /* ty=Tensor[(13, 14, 12), uint32] */
}

def @func_6887(%var_6847: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32], Tensor[(224), float32], Tensor[(6, 15, 6), bool]) {
  %820 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %821 = cast(%var_6847, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %822 = cast(%var_6847, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %823 = reshape(%821, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %824 = reshape(%822, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %825 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
  %826 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %827 = @func_6829() /* ty=(Tensor[(224), float32],) */;
  %828 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %829 = %820.0;
  %830 = @func_2902(%823, %824) /* ty=Tensor[(12, 11, 11), bool] */;
  %831 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %832 = %825.0;
  %833 = %826.0;
  %834 = %827.0;
  %835 = %828.0;
  (%829, %830, %var_6847, %831, %832, %833, %834, %835)
}

def @func_7962() -> (Tensor[(11, 14, 7), float64],) {
  %836 = @func_6319() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %837 = %836.0;
  (%837,)
}

def @func_8352() -> (Tensor[(6, 15, 6), bool],) {
  %838 = @func_7330() /* ty=Tensor[(6, 15, 6), bool] */;
  (%838,)
}

def @func_4905() -> Tensor[(11, 14, 7), float64] {
  @func_4096() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_6319() -> (Tensor[(11, 14, 7), float64],) {
  %839 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %840 = %839.0;
  (%840,)
}

def @func_6120(%var_6070: int32, %var_6071: Tensor[(7, 1), int32], %var_6081: Tensor[(360), int64], %var_6082: Tensor[(1008), float32], %var_6085: Tensor[(208), int16], %var_6110: Tensor[(16, 32), uint8]) -> (Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) {
  %841 = cast(%var_6070, dtype="int32") /* ty=int32 */;
  %842 = cast(%var_6071, dtype="int32") /* ty=Tensor[(7, 1), int32] */;
  %843 = cast(%var_6081, dtype="int64") /* ty=Tensor[(360), int64] */;
  %844 = cast(%var_6081, dtype="bool") /* ty=Tensor[(360), bool] */;
  %845 = cast(%var_6082, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %846 = cast(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="uint8") /* ty=Tensor[(16, 32), uint8] */;
  %847 = reshape(%843, newshape=[5, 6, 12]) /* ty=Tensor[(5, 6, 12), int64] */;
  %848 = reshape(%844, newshape=[5, 6, 12]) /* ty=Tensor[(5, 6, 12), bool] */;
  %849 = reshape(%845, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %850 = reshape(%846, newshape=[512]) /* ty=Tensor[(512), uint8] */;
  %851 = @func_4422(%847, %848, %849, %850) /* ty=(Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) */;
  %852 = %851.6;
  %853 = cast(%var_6085, dtype="float64") /* ty=Tensor[(208), float64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(1), int32] */;
  %855 = cast(%852, dtype="float64") /* ty=Tensor[(208), float64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?), float64] */;
  %857 = divide(%855, %856) /* ty=Tensor[(208), float64] */;
  %858 = cast(%857, dtype="bool") /* ty=Tensor[(208), bool] */;
  %859 = cast(%var_6070, dtype="bool") /* ty=bool */;
  %860 = cast(%var_6110, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
  %861 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %862 = cast(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %864 = bitwise_xor(%841, %842) /* ty=Tensor[(7, 1), int32] */;
  %865 = greater(%858, %859) /* ty=Tensor[(208), bool] */;
  %866 = less_equal(%862, %863) /* ty=Tensor[(16, 32), bool] */;
  (%864, %var_6081, %var_6082, %865, %866)
}

def @func_3126(%var_3104: Tensor[(208), int16], %var_3118: Tensor[(208), int16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 13), bool], Tensor[(11, 14, 7), float64], Tensor[(208), bool]) {
  %867 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %868 = cast(%var_3104, dtype="int16") /* ty=Tensor[(208), int16] */;
  %869 = reshape(%868, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
  %870 = cast(%var_3118, dtype="bool") /* ty=Tensor[(208), bool] */;
  %871 = shape_of(%var_3104, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(%var_3104, dtype="bool") /* ty=Tensor[(208), bool] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), bool] */;
  %874 = %867.2;
  %875 = @func_114(%869) /* ty=Tensor[(16, 13), bool] */;
  %876 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %877 = logical_or(%872, %873) /* ty=Tensor[(208), bool] */;
  (%874, %875, %876, %877)
}

def @func_7091(%var_7087: Tensor[(352), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(352), float32]) {
  %878 = @func_5519() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %879 = cast(%var_7087, dtype="float32") /* ty=Tensor[(352), float32] */;
  %880 = reshape(%879, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %881 = @func_5152(%880) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) */;
  %882 = %878.0;
  %883 = %881.0;
  (%882, %883, %var_7087)
}

def @func_7189() -> Tensor[(9, 16, 1248), float64] {
  %884 = @func_6039() /* ty=Tensor[(9, 16, 1248), uint8] */;
  %885 = cast(%884, dtype="float64") /* ty=Tensor[(9, 16, 1248), float64] */;
  sin(%885) /* ty=Tensor[(9, 16, 1248), float64] */
}

def @func_7565(%var_7553: float64, %var_7554: Tensor[(2, 3, 6), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(224), float32]) {
  %886 = cast(%var_7553, dtype="bool") /* ty=bool */;
  %887 = cast(%var_7554, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
  %888 = greater_equal(%886, %887) /* ty=Tensor[(2, 3, 6), bool] */;
  %889 = @func_6311() /* ty=Tensor[(224), float32] */;
  (%888, %889)
}

def @func_2847() -> (Tensor[(11, 14, 7), float64],) {
  %890 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %891 = %890.0;
  (%891,)
}

def @func_4710() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) {
  %892 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %893 = %892.0;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %895 = reshape(%894, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float32] */;
  %896 = @func_3420(%895) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) */;
  %897 = %896.0;
  (%893, %897)
}

def @func_5084() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) {
  %898 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %899 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %900 = %898.2;
  %901 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  %902 = @func_4008() /* ty=Tensor[(224), float32] */;
  %903 = %899.0;
  %904 = @func_5010() /* ty=Tensor[(2, 10, 13), float32] */;
  (%900, %901, %902, %903, %904)
}

def @func_5494(%var_5479: uint64, %var_5480: Tensor[(3, 1, 13), uint64], %var_5489: Tensor[(495), int64]) -> (Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) {
  %905 = cast(%var_5479, dtype="uint64") /* ty=uint64 */;
  %906 = cast(%var_5480, dtype="uint64") /* ty=Tensor[(3, 1, 13), uint64] */;
  %907 = cast(%var_5489, dtype="int64") /* ty=Tensor[(495), int64] */;
  %908 = reshape(%907, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %909 = @func_2709(%908) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
  %910 = bitwise_and(%905, %906) /* ty=Tensor[(3, 1, 13), uint64] */;
  %911 = %909.2;
  (%910, %911, %var_5489)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1513(%var_1511: Tensor[(3, 4, 8), uint8], %var_1512: Tensor[(3, 4, 8), uint8]) -> (Tensor[(3, 4, 8), uint8], Tensor[(3, 4, 8), float32], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64]) {
  %19 = fn (%var_1482: Tensor[(3, 4, 8), uint8], %var_1488: Tensor[(3, 4, 8), uint8]) -> (Tensor[(3, 4, 8), uint8], Tensor[(3, 4, 8), float32], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
    %1 = shape_of(%var_1482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_1482, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %4 = cast(%var_1488, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
    %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 4, 8), uint8] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
    %9 = reshape(%8, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
    %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
    %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
    %12 = reshape(%10, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
    %13 = reshape(%11, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
    %14 = @func_479(%12, %13) /* ty=(Tensor[(5, 9, 11), bool],) */;
    %15 = multiply(%2, %3) /* ty=Tensor[(3, 4, 8), uint8] */;
    %16 = mod(%6, %7) /* ty=Tensor[(3, 4, 8), float32] */;
    %17 = @func_114(%9) /* ty=Tensor[(16, 13), bool] */;
    %18 = %14.0;
    (%15, %16, %17, meta[relay.Constant][1] /* ty=Tensor[(208), int16] */, %18, meta[relay.Constant][2] /* ty=Tensor[(99), int64] */, meta[relay.Constant][3] /* ty=Tensor[(495), int64] */)
  };
  %19(%var_1511, %var_1512) /* ty=(Tensor[(3, 4, 8), uint8], Tensor[(3, 4, 8), float32], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64]) */
}

def @func_6239(%var_6237: Tensor[(80), float64], %var_6238: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) {
  %37 = fn (%var_6188: Tensor[(80), float64], %var_6224: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) {
    %20 = cast(%var_6188, dtype="float64") /* ty=Tensor[(80), float64] */;
    %21 = cast(%var_6188, dtype="float64") /* ty=Tensor[(80), float64] */;
    %22 = reshape(%20, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %23 = reshape(%21, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %25 = reshape(%24, newshape=[242, 6]) /* ty=Tensor[(242, 6), int8] */;
    %26 = @func_4859(%25) /* ty=(Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) */;
    %27 = cast(%var_6224, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %28 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1452), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %29 = cast(meta[relay.Constant][4] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?), int8] */;
    %31 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
    %32 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
    %33 = @func_5993(%22, %23) /* ty=Tensor[(2, 5, 8), float64] */;
    %34 = %26.1;
    %35 = bitwise_and(%29, %30) /* ty=Tensor[(1452), int8] */;
    %36 = %31.1;
    (%32, %33, %var_6188, %34, %35, %36)
  };
  %37(%var_6237, %var_6238) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) */
}

def @func_4098() -> Tensor[(11, 14, 7), float64] {
  @func_4096() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_3847(%var_3841: Tensor[(1008), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(1008), float32]) {
  %38 = cast(%var_3841, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %39 = reshape(%38, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %40 = @func_582(%39) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %41 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %42 = %40.2;
  (%41, %42, %var_3841)
}

def @func_3304(%var_3298: Tensor[(6, 14, 3), float32]) -> (Tensor[(6, 14, 3), float32],) {
  %43 = cast(%var_3298, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %44 = acosh(%43) /* ty=Tensor[(6, 14, 3), float32] */;
  (%44,)
}

def @func_2849() -> (Tensor[(11, 14, 7), float64],) {
  @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_7093(%var_7092: Tensor[(352), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(352), float32]) {
  %51 = fn (%var_7087: Tensor[(352), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(352), float32]) {
    %45 = @func_5519() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %46 = cast(%var_7087, dtype="float32") /* ty=Tensor[(352), float32] */;
    %47 = reshape(%46, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
    %48 = @func_5152(%47) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) */;
    %49 = %45.0;
    %50 = %48.0;
    (%49, %50, %var_7087)
  };
  %51(%var_7092) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(352), float32]) */
}

def @func_7405() -> (Tensor[(6, 15, 6), bool], Tensor[(11, 14, 7), float32]) {
  %52 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
  %53 = @func_7330() /* ty=Tensor[(6, 15, 6), bool] */;
  %54 = %52.0;
  (%53, %54)
}

def @func_3481() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %55 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %57 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %58 = atanh(%56) /* ty=Tensor[(11, 14, 7), float64] */;
  (%57, %58)
}

def @func_4051() -> Tensor[(224), float32] {
  @func_4008() /* ty=Tensor[(224), float32] */
}

def @func_4649(%var_4647: Tensor[(512), uint8]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8]) {
  @func_4646(%var_4647) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8]) */
}

def @func_7932(%var_7926: Tensor[(1248), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(80), float64], Tensor[(1452, 1), int8], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(1, 1452), int8]) {
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %60 = cast(meta[relay.Constant][6] /* ty=Tensor[(1452, 1), int8] */, dtype="int8") /* ty=Tensor[(1452, 1), int8] */;
  %61 = reshape(%59, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %62 = reshape(%60, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %63 = @func_6236(%61, %62) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) */;
  %64 = cast(%var_7926, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %65 = reshape(%64, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %66 = @func_4132(%65) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %67 = @func_4212() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) */;
  %68 = @func_7015() /* ty=Tensor[(224), float32] */;
  %69 = %63.5;
  %70 = %66.2;
  %71 = %67.2;
  (%68, %69, meta[relay.Constant][5] /* ty=Tensor[(80), float64] */, meta[relay.Constant][6] /* ty=Tensor[(1452, 1), int8] */, %70, %var_7926, %71)
}

def @func_6829() -> (Tensor[(224), float32],) {
  %72 = @func_6311() /* ty=Tensor[(224), float32] */;
  (%72,)
}

def @func_4815(%var_4813: Tensor[(495), int64]) -> (Tensor[(495), uint16], Tensor[(495), float32]) {
  @func_4812(%var_4813) /* ty=(Tensor[(495), uint16], Tensor[(495), float32]) */
}

def @func_5563(%var_5561: Tensor[(10, 8, 2), uint16], %var_5562: Tensor[(10, 8, 2), uint16]) -> Tensor[(10, 8, 2), bool] {
  %77 = fn (%var_5539: Tensor[(10, 8, 2), uint16], %var_5540: Tensor[(10, 8, 2), uint16]) -> Tensor[(10, 8, 2), bool] {
    %73 = cast(%var_5540, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %74 = shape_of(%var_5539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_5539, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%75, %76) /* ty=Tensor[(10, 8, 2), bool] */
  };
  %77(%var_5561, %var_5562) /* ty=Tensor[(10, 8, 2), bool] */
}

def @func_6397() -> (Tensor[(6, 15, 6), bool],) {
  %78 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %79 = %78.0;
  (%79,)
}

def @func_3130(%var_3128: Tensor[(208), int16], %var_3129: Tensor[(208), int16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 13), bool], Tensor[(11, 14, 7), float64], Tensor[(208), bool]) {
  @func_3126(%var_3128, %var_3129) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 13), bool], Tensor[(11, 14, 7), float64], Tensor[(208), bool]) */
}

def @func_7671(%var_7669: Tensor[(11, 104), float32]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) {
  @func_7668(%var_7669) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) */
}

def @func_7330() -> Tensor[(6, 15, 6), bool] {
  %80 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %80.0
}

def @func_4600(%var_4598: Tensor[(3, 10, 7), float64], %var_4599: Tensor[(1452), int8]) -> (Tensor[(3, 10, 7), float64], Tensor[(11, 14, 7), uint32], Tensor[(1078, 1), float32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64]) {
  %94 = fn (%var_4571: Tensor[(3, 10, 7), float64], %var_4589: Tensor[(1452), int8]) -> (Tensor[(3, 10, 7), float64], Tensor[(11, 14, 7), uint32], Tensor[(1078, 1), float32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64]) {
    %81 = cast(%var_4571, dtype="float64") /* ty=Tensor[(3, 10, 7), float64] */;
    %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
    %83 = reshape(%82, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float32] */;
    %84 = @func_3420(%83) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) */;
    %85 = cast(%var_4589, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %86 = cast(%var_4589, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %87 = reshape(%85, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %88 = reshape(%86, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %89 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
    %90 = sin(%81) /* ty=Tensor[(3, 10, 7), float64] */;
    %91 = %84.0;
    %92 = @func_2902(%87, %88) /* ty=Tensor[(12, 11, 11), bool] */;
    %93 = %89.0;
    (%90, %91, meta[relay.Constant][7] /* ty=Tensor[(1078, 1), float32] */, %92, %var_4589, %93)
  };
  %94(%var_4598, %var_4599) /* ty=(Tensor[(3, 10, 7), float64], Tensor[(11, 14, 7), uint32], Tensor[(1078, 1), float32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64]) */
}

def @func_7169(%var_7104: Tensor[(10, 2), uint16]) -> (Tensor[(6, 15, 6), bool], Tensor[(10, 2), uint16], Tensor[(4, 1, 5), float64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %95 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %96 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %97 = cast(%var_7104, dtype="uint16") /* ty=Tensor[(10, 2), uint16] */;
  %98 = reshape(%96, newshape=[]) /* ty=uint16 */;
  %99 = reshape(%97, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), uint16] */;
  %100 = @func_5879(%98, %99) /* ty=Tensor[(4, 1, 5), uint16] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(4, 1, 5), float32] */;
  %102 = cosh(%101) /* ty=Tensor[(4, 1, 5), float32] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(4, 1, 5), float64] */;
  %104 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %105 = %95.0;
  %106 = power(%103, %104) /* ty=Tensor[(4, 1, 5), float64] */;
  %107 = @func_7015() /* ty=Tensor[(224), float32] */;
  %108 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %109 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  (%105, %var_7104, %106, %107, %108, %109)
}

def @func_8057() -> (Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) {
  %119 = fn () -> (Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) {
    %110 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
    %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
    %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(512), uint8] */, dtype="uint8") /* ty=Tensor[(512), uint8] */;
    %113 = reshape(%111, newshape=[208]) /* ty=Tensor[(208), int16] */;
    %114 = reshape(%112, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
    %115 = @func_3894(%113, %114) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
    %116 = %110.1;
    %117 = %115.2;
    %118 = @func_5929() /* ty=Tensor[(224), float32] */;
    (%116, %117, meta[relay.Constant][9] /* ty=Tensor[(208), int16] */, meta[relay.Constant][10] /* ty=Tensor[(512), uint8] */, %118)
  };
  %119() /* ty=(Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) */
}

def @func_4428(%var_4424: Tensor[(5, 6, 12), int64], %var_4425: Tensor[(5, 6, 12), bool], %var_4426: Tensor[(1008), float32], %var_4427: Tensor[(512), uint8]) -> (Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) {
  @func_4422(%var_4424, %var_4425, %var_4426, %var_4427) /* ty=(Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) */
}

def @func_8627(%var_8623: Tensor[(39), uint64], %var_8624: Tensor[(495), int64]) -> (Tensor[(6, 15, 6), float32], Tensor[(495), int64], uint64, Tensor[(39), uint64], Tensor[(495), int64]) {
  %120 = @func_5769() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) */;
  %121 = cast(meta[relay.Constant][11] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %122 = cast(%var_8623, dtype="uint64") /* ty=Tensor[(39), uint64] */;
  %123 = cast(%var_8624, dtype="int64") /* ty=Tensor[(495), int64] */;
  %124 = reshape(%121, newshape=[]) /* ty=uint64 */;
  %125 = reshape(%122, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), uint64] */;
  %126 = reshape(%123, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %127 = @func_5494(%124, %125, %126) /* ty=(Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
  %128 = %120.2;
  %129 = %127.2;
  (%128, %129, meta[relay.Constant][11] /* ty=uint64 */, %var_8623, %var_8624)
}

def @func_2268(%var_2250: Tensor[(9, 16, 1), float32]) -> (Tensor[(9, 16, 1), float32],) {
  %130 = cast(%var_2250, dtype="float32") /* ty=Tensor[(9, 16, 1), float32] */;
  %131 = log(%130) /* ty=Tensor[(9, 16, 1), float32] */;
  (%131,)
}

def @func_6320() -> (Tensor[(11, 14, 7), float64],) {
  %134 = fn () -> (Tensor[(11, 14, 7), float64],) {
    %132 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
    %133 = %132.0;
    (%133,)
  };
  %134() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_8262() -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 14, 7), float64]) {
  %140 = fn () -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 14, 7), float64]) {
    %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %136 = reshape(%135, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
    %137 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
    %138 = @func_1381(%136) /* ty=Tensor[(16, 6, 13), float64] */;
    %139 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
    (%137, %138, meta[relay.Constant][12] /* ty=Tensor[(1248), float64] */, %139)
  };
  %140() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 14, 7), float64]) */
}

def @func_5218(%var_5217: Tensor[(495), int64]) -> Tensor[(495), bool] {
  %147 = fn (%var_5211: Tensor[(495), int64]) -> Tensor[(495), bool] {
    %141 = @func_4527() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) */;
    %142 = %141.4;
    %143 = cast(%var_5211, dtype="bool") /* ty=Tensor[(495), bool] */;
    %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(1), int32] */;
    %145 = cast(%142, dtype="bool") /* ty=Tensor[(495), bool] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), bool] */;
    equal(%145, %146) /* ty=Tensor[(495), bool] */
  };
  %147(%var_5217) /* ty=Tensor[(495), bool] */
}

def @func_6752() -> Tensor[(11, 14, 7), float64] {
  @func_6750() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_483(%var_481: Tensor[(1, 9, 11), int64], %var_482: Tensor[(5, 9, 11), int64]) -> (Tensor[(5, 9, 11), bool],) {
  @func_479(%var_481, %var_482) /* ty=(Tensor[(5, 9, 11), bool],) */
}

def @func_3307(%var_3305: Tensor[(6, 14, 3), float32]) -> (Tensor[(6, 14, 3), float32],) {
  @func_3304(%var_3305) /* ty=(Tensor[(6, 14, 3), float32],) */
}

def @func_5371(%var_5344: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) {
  %148 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %149 = cast(%var_5344, dtype="int64") /* ty=Tensor[(495), int64] */;
  %150 = reshape(%149, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %151 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %152 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %153 = %148.0;
  %154 = @func_5216(%150) /* ty=Tensor[(495), bool] */;
  %155 = %151.0;
  (%152, %153, %154, %var_5344, %155)
}

def @func_1362(%var_1343: Tensor[(14, 1, 16), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) {
  %156 = cast(%var_1343, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %157 = cast(%var_1343, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %158 = sinh(%156) /* ty=Tensor[(14, 1, 16), float32] */;
  %159 = exp(%157) /* ty=Tensor[(14, 1, 16), float32] */;
  (%158, %159)
}

def @func_4767(%var_4750: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool],) {
  %160 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %161 = %160.0;
  %162 = cast(%var_4750, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = equal(%164, %165) /* ty=Tensor[(11, 14, 7), bool] */;
  (%166,)
}

def @func_5086() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) {
  @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */
}

def @func_1607(%var_1591: Tensor[(8, 5, 11), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  %167 = cast(%var_1591, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %168 = cast(meta[relay.Constant][13] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %169 = reshape(%168, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %170 = cast(meta[relay.Constant][14] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %171 = cast(meta[relay.Constant][14] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %172 = reshape(%170, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %173 = reshape(%171, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %174 = @func_498(%172, %173) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %175 = atanh(%167) /* ty=Tensor[(8, 5, 11), float64] */;
  %176 = @func_1381(%169) /* ty=Tensor[(16, 6, 13), float64] */;
  %177 = %174.1;
  (%175, %176, meta[relay.Constant][13] /* ty=Tensor[(1248), float64] */, %177, meta[relay.Constant][14] /* ty=Tensor[(1144), float32] */)
}

def @func_6821() -> Tensor[(224), float32] {
  %178 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %178.2
}

def @func_4026() -> (Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) {
  %179 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 9), float64] */;
  %180 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(16, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 9), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %184 = minimum(%181, %182) /* ty=Tensor[(16, 8, 9), float64] */;
  %185 = %183.0;
  (%184, %185)
}

def @func_1383(%var_1382: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
  %187 = fn (%var_1375: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
    %186 = cast(%var_1375, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    erf(%186) /* ty=Tensor[(16, 6, 13), float64] */
  };
  %187(%var_1382) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_7838(%var_7831: int32, %var_7832: Tensor[(1, 7), int32], %var_7833: Tensor[(6, 60), int64], %var_7834: Tensor[(1, 208), int16], %var_7835: Tensor[(6, 60), int64], %var_7836: Tensor[(1452), int8], %var_7837: Tensor[(1, 792), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) {
  %239 = fn (%var_7744: int32, %var_7745: Tensor[(1, 7), int32], %var_7746: Tensor[(6, 60), int64], %var_7748: Tensor[(1, 208), int16], %var_7789: Tensor[(6, 60), int64], %var_7807: Tensor[(1452), int8], %var_7824: Tensor[(1, 792), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) {
    %188 = cast(%var_7744, dtype="int32") /* ty=int32 */;
    %189 = cast(%var_7745, dtype="int32") /* ty=Tensor[(1, 7), int32] */;
    %190 = cast(%var_7746, dtype="int64") /* ty=Tensor[(6, 60), int64] */;
    %191 = cast(meta[relay.Constant][17] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %192 = cast(%var_7748, dtype="int16") /* ty=Tensor[(1, 208), int16] */;
    %193 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 32), uint8] */, dtype="uint8") /* ty=Tensor[(16, 32), uint8] */;
    %194 = reshape(%188, newshape=[]) /* ty=int32 */;
    %195 = reshape(%189, newshape=[7, 1]) /* ty=Tensor[(7, 1), int32] */;
    %196 = reshape(%190, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %197 = reshape(%191, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
    %198 = reshape(%192, newshape=[208]) /* ty=Tensor[(208), int16] */;
    %199 = reshape(%193, newshape=[16, 32]) /* ty=Tensor[(16, 32), uint8] */;
    %200 = @func_6120(%194, %195, %196, %197, %198, %199) /* ty=(Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) */;
    %201 = @func_5297() /* ty=(Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) */;
    %202 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 32), uint8] */, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
    %203 = atanh(%202) /* ty=Tensor[(16, 32), float64] */;
    %204 = cast(%203, dtype="int16") /* ty=Tensor[(16, 32), int16] */;
    %205 = cast(%var_7744, dtype="int16") /* ty=int16 */;
    %206 = right_shift(%204, %205) /* ty=Tensor[(16, 32), int16] */;
    %207 = cast(%206, dtype="int8") /* ty=Tensor[(16, 32), int8] */;
    %208 = cast(%var_7744, dtype="int8") /* ty=int8 */;
    %209 = cast(%var_7789, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
    %210 = shape_of(%var_7746, dtype="int32") /* ty=Tensor[(2), int32] */;
    %211 = cast(%var_7746, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
    %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %213 = @func_7609() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) */;
    %214 = cast(%206, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
    %215 = cast(%var_7807, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %216 = cast(%var_7807, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %217 = reshape(%215, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %218 = reshape(%216, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %219 = cast(%var_7744, dtype="float64") /* ty=float64 */;
    %220 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
    %221 = reshape(%219, newshape=[]) /* ty=float64 */;
    %222 = reshape(%220, newshape=[2, 3, 6]) /* ty=Tensor[(2, 3, 6), float64] */;
    %223 = @func_7565(%221, %222) /* ty=(Tensor[(2, 3, 6), bool], Tensor[(224), float32]) */;
    %224 = cast(%var_7824, dtype="float32") /* ty=Tensor[(1, 792), float32] */;
    %225 = reshape(%224, newshape=[11, 6, 12]) /* ty=Tensor[(11, 6, 12), float32] */;
    %226 = @func_7715(%225) /* ty=(Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */;
    %227 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
    %228 = %200.4;
    %229 = %201.0;
    %230 = bitwise_or(%207, %208) /* ty=Tensor[(16, 32), int8] */;
    %231 = greater_equal(%211, %212) /* ty=Tensor[(6, 60), bool] */;
    %232 = %213.2;
    %233 = acosh(%214) /* ty=Tensor[(16, 32), float64] */;
    %234 = @func_2902(%217, %218) /* ty=Tensor[(12, 11, 11), bool] */;
    %235 = @func_7189() /* ty=Tensor[(9, 16, 1248), float64] */;
    %236 = %223.1;
    %237 = %226.0;
    %238 = @func_4008() /* ty=Tensor[(224), float32] */;
    (%227, %228, %var_7745, meta[relay.Constant][17] /* ty=Tensor[(1008), float32] */, %var_7748, %229, %230, %231, %232, %233, %234, %var_7807, %235, %236, meta[relay.Constant][19] /* ty=Tensor[(9, 4), float64] */, %237, %var_7824, %238)
  };
  %239(%var_7831, %var_7832, %var_7833, %var_7834, %var_7835, %var_7836, %var_7837) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) */
}

def @func_4422(%var_4352: Tensor[(5, 6, 12), int64], %var_4357: Tensor[(5, 6, 12), bool], %var_4402: Tensor[(1008), float32], %var_4415: Tensor[(512), uint8]) -> (Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) {
  %240 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 12), bool] */;
  %241 = shape_of(%var_4352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_4352, dtype="bool") /* ty=Tensor[(5, 6, 12), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = less(%242, %243) /* ty=Tensor[(5, 6, 12), bool] */;
  %245 = cast(%var_4357, dtype="int16") /* ty=Tensor[(5, 6, 12), int16] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="int16") /* ty=Tensor[(5, 6, 12), int16] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %249 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 6, 12), int64] */, dtype="float32") /* ty=Tensor[(5, 6, 12), float32] */;
  %250 = asin(%249) /* ty=Tensor[(5, 6, 12), float32] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(5, 6, 12), float32] */;
  %252 = cosh(%251) /* ty=Tensor[(5, 6, 12), float32] */;
  %253 = cast(%250, dtype="int8") /* ty=Tensor[(5, 6, 12), int8] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="int8") /* ty=Tensor[(5, 6, 12), int8] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %257 = cast(%var_4402, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %258 = reshape(%257, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %259 = @func_582(%258) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %260 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %261 = cast(meta[relay.Constant][21] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %262 = cast(%var_4415, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %263 = reshape(%261, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %264 = reshape(%262, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %265 = @func_3894(%263, %264) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %266 = bitwise_or(%247, %248) /* ty=Tensor[(5, 6, 12), int16] */;
  %267 = logical_xor(%255, %256) /* ty=Tensor[(5, 6, 12), int8] */;
  %268 = %259.1;
  %269 = %260.0;
  %270 = %265.4;
  (%266, %267, %268, %var_4402, %269, %270, meta[relay.Constant][21] /* ty=Tensor[(208), int16] */, %var_4415)
}

def @func_6294() -> (Tensor[(224), float32], Tensor[(224), float32]) {
  %273 = fn () -> (Tensor[(224), float32], Tensor[(224), float32]) {
    %271 = @func_5929() /* ty=Tensor[(224), float32] */;
    %272 = @func_5929() /* ty=Tensor[(224), float32] */;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(224), float32], Tensor[(224), float32]) */
}

def @func_7277() -> Tensor[(2, 10, 13), float32] {
  @func_5010() /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_4859(%var_4851: Tensor[(242, 6), int8]) -> (Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) {
  %274 = cast(meta[relay.Constant][22] /* ty=Tensor[(512), uint8] */, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %275 = reshape(%274, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
  %276 = @func_229(%275) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
  %277 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %278 = reshape(%277, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
  %279 = @func_2268(%278) /* ty=(Tensor[(9, 16, 1), float32],) */;
  %280 = cast(%var_4851, dtype="int8") /* ty=Tensor[(242, 6), int8] */;
  %281 = cast(%var_4851, dtype="int8") /* ty=Tensor[(242, 6), int8] */;
  %282 = reshape(%280, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %283 = reshape(%281, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %284 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %285 = @func_4008() /* ty=Tensor[(224), float32] */;
  %286 = %276.1;
  %287 = %279.0;
  %288 = @func_2902(%282, %283) /* ty=Tensor[(12, 11, 11), bool] */;
  %289 = %284.1;
  (%285, %286, meta[relay.Constant][22] /* ty=Tensor[(512), uint8] */, %287, meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, %288, %var_4851, %289)
}

def @func_8496(%var_8492: Tensor[(360, 1), int64], %var_8493: Tensor[(2, 104), int16], %var_8494: Tensor[(1, 1452), int8], %var_8495: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(9, 16, 1248), float64], int32, Tensor[(1, 7), int32], Tensor[(360, 1), int64], Tensor[(2, 104), int16], Tensor[(1, 1452), int8], Tensor[(792), float32], Tensor[(1248), float64], Tensor[(80), float64]) {
  @func_8490(%var_8492, %var_8493, %var_8494, %var_8495) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(9, 16, 1248), float64], int32, Tensor[(1, 7), int32], Tensor[(360, 1), int64], Tensor[(2, 104), int16], Tensor[(1, 1452), int8], Tensor[(792), float32], Tensor[(1248), float64], Tensor[(80), float64]) */
}

def @func_7715(%var_7691: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  %290 = cast(%var_7691, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %291 = cast(%var_7691, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
  %292 = atan(%291) /* ty=Tensor[(11, 6, 12), float32] */;
  %293 = cast(%292, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %294 = shape_of(%var_7691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_7691, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %298 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %299 = reshape(%297, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %300 = reshape(%298, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %301 = @func_498(%299, %300) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %302 = log2(%290) /* ty=Tensor[(11, 6, 12), float64] */;
  %303 = logical_and(%295, %296) /* ty=Tensor[(11, 6, 12), bool] */;
  %304 = %301.1;
  (%302, %303, %304, meta[relay.Constant][24] /* ty=Tensor[(1144), float32] */)
}

def @func_5012() -> Tensor[(2, 10, 13), float32] {
  @func_5010() /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_7962() -> (Tensor[(11, 14, 7), float64],) {
  %305 = @func_6319() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %306 = %305.0;
  (%306,)
}

def @func_5010() -> Tensor[(2, 10, 13), float32] {
  %307 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  asinh(%307) /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_4342(%var_4340: Tensor[(1248), float64], %var_4341: Tensor[(840), uint16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(1248), float64], uint16, Tensor[(840), uint16], Tensor[(24), float64]) {
  @func_4338(%var_4340, %var_4341) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(1248), float64], uint16, Tensor[(840), uint16], Tensor[(24), float64]) */
}

def @func_3644(%var_3642: Tensor[(1452), int8], %var_3643: Tensor[(11, 14, 7), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) {
  @func_3640(%var_3642, %var_3643) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) */
}

def @func_5440() -> Tensor[(11, 14, 7), float64] {
  @func_5438() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_6039() -> Tensor[(9, 16, 1248), uint8] {
  %308 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %308.4
}

def @func_1610(%var_1608: Tensor[(8, 5, 11), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  @func_1607(%var_1608) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */
}

def @func_7017() -> Tensor[(224), float32] {
  @func_7015() /* ty=Tensor[(224), float32] */
}

def @func_4213() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) {
  %318 = fn () -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) {
    %309 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1452), int8] */, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
    %310 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
    %311 = cast(%310, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
    %312 = reshape(%309, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
    %313 = reshape(%311, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
    %314 = @func_3640(%312, %313) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) */;
    %315 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %316 = %314.2;
    %317 = %315.0;
    (%310, %316, meta[relay.Constant][26] /* ty=Tensor[(1, 1452), int8] */, %317)
  };
  %318() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), uint64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64]) */
}

def @func_7569(%var_7567: float64, %var_7568: Tensor[(2, 3, 6), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(224), float32]) {
  @func_7565(%var_7567, %var_7568) /* ty=(Tensor[(2, 3, 6), bool], Tensor[(224), float32]) */
}

def @func_5710(%var_5665: Tensor[(10, 14, 12), uint64], %var_5670: Tensor[(10, 14, 12), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(10, 14, 12), float64], Tensor[(10, 14, 12), float64]) {
  %319 = cast(%var_5665, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %320 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 14, 12), uint64] */, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %324 = cast(%var_5670, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %325 = shape_of(%var_5665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_5665, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = floor_mod(%326, %327) /* ty=Tensor[(10, 14, 12), float32] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %330 = greater(%321, %322) /* ty=Tensor[(10, 14, 12), bool] */;
  %331 = sinh(%323) /* ty=Tensor[(10, 14, 12), float64] */;
  %332 = asinh(%329) /* ty=Tensor[(10, 14, 12), float64] */;
  (%330, %331, %332)
}

def @func_3818(%var_3816: Tensor[(24), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32]) {
  @func_3815(%var_3816) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32]) */
}

def @func_3088() -> (Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  %338 = fn () -> (Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
    %333 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
    %334 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %335 = %333.3;
    %336 = %334.0;
    %337 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
    (%335, %336, %337)
  };
  %338() /* ty=(Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */
}

def @func_6831() -> (Tensor[(224), float32],) {
  @func_6829() /* ty=(Tensor[(224), float32],) */
}

def @func_7935(%var_7933: Tensor[(1248), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(80), float64], Tensor[(1452, 1), int8], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(1, 1452), int8]) {
  @func_7932(%var_7933) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(80), float64], Tensor[(1452, 1), int8], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(1, 1452), int8]) */
}

def @func_6313() -> Tensor[(224), float32] {
  @func_6311() /* ty=Tensor[(224), float32] */
}

def @func_2879() -> (Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) {
  %345 = fn () -> (Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) {
    %339 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %340 = cast(meta[relay.Constant][28] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %341 = reshape(%340, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %342 = @func_1362(%341) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) */;
    %343 = %339.0;
    %344 = %342.1;
    (%343, %344, meta[relay.Constant][28] /* ty=Tensor[(224), float32] */)
  };
  %345() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */
}

def @func_8214() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64]) {
  %349 = fn () -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64]) {
    %346 = @func_6793() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %347 = @func_6821() /* ty=Tensor[(224), float32] */;
    %348 = %346.0;
    (%347, %348)
  };
  %349() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64]) */
}

def @func_3349() -> Tensor[(11, 14, 7), float64] {
  @func_3347() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_3422(%var_3421: Tensor[(11, 14, 7), float32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) {
  %363 = fn (%var_3405: Tensor[(11, 14, 7), float32]) -> (Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) {
    %350 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
    %351 = cast(%350, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
    %352 = asin(%351) /* ty=Tensor[(11, 14, 7), float32] */;
    %353 = cast(%var_3405, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
    %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%352, dtype="uint32") /* ty=Tensor[(11, 14, 7), uint32] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %357 = cast(meta[relay.Constant][29] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %358 = cast(meta[relay.Constant][29] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %359 = reshape(%357, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %360 = reshape(%358, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
    %361 = logical_xor(%355, %356) /* ty=Tensor[(11, 14, 7), uint32] */;
    %362 = @func_2902(%359, %360) /* ty=Tensor[(12, 11, 11), bool] */;
    (%361, %362, meta[relay.Constant][29] /* ty=Tensor[(1452), int8] */)
  };
  %363(%var_3421) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) */
}

def @func_8713(%var_8676: uint16, %var_8677: Tensor[(60, 14), uint16], %var_8708: Tensor[(60, 14), uint16]) -> (Tensor[(224), float32], Tensor[(1248), float64], uint16, Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(9, 16, 1248), uint8], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64], Tensor[(60, 14), bool]) {
  %364 = @func_8056() /* ty=(Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8], Tensor[(224), float32]) */;
  %365 = cast(%var_8676, dtype="uint16") /* ty=uint16 */;
  %366 = cast(%var_8677, dtype="uint16") /* ty=Tensor[(60, 14), uint16] */;
  %367 = cast(meta[relay.Constant][30] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %368 = reshape(%365, newshape=[]) /* ty=uint16 */;
  %369 = reshape(%366, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), uint16] */;
  %370 = reshape(%367, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %371 = @func_2993(%368, %369, %370) /* ty=(Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) */;
  %372 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %374 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 1452), int8] */, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
  %375 = reshape(%373, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %376 = reshape(%374, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %377 = @func_6236(%375, %376) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(16, 13), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float32]) */;
  %378 = @func_3087() /* ty=(Tensor[(2, 72), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %379 = cast(%var_8708, dtype="bool") /* ty=Tensor[(60, 14), bool] */;
  %380 = shape_of(%var_8677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %381 = cast(%var_8677, dtype="bool") /* ty=Tensor[(60, 14), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %383 = %364.4;
  %384 = %371.1;
  %385 = %372.0;
  %386 = @func_6039() /* ty=Tensor[(9, 16, 1248), uint8] */;
  %387 = %377.1;
  %388 = %378.2;
  %389 = not_equal(%381, %382) /* ty=Tensor[(60, 14), bool] */;
  (%383, %384, %var_8676, meta[relay.Constant][30] /* ty=Tensor[(24), float64] */, %385, %386, %387, meta[relay.Constant][31] /* ty=Tensor[(80), float64] */, meta[relay.Constant][32] /* ty=Tensor[(1, 1452), int8] */, %388, %389)
}

def @func_4906() -> Tensor[(11, 14, 7), float64] {
  %390 = fn () -> Tensor[(11, 14, 7), float64] {
    @func_4096() /* ty=Tensor[(11, 14, 7), float64] */
  };
  %390() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_5297() -> (Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) {
  %391 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 14, 7), float64] */, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %396 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %397 = cast(meta[relay.Constant][34] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %398 = reshape(%397, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %399 = @func_4132(%398) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %400 = bitwise_and(%394, %395) /* ty=Tensor[(11, 14, 7), uint64] */;
  %401 = %396.2;
  %402 = %399.0;
  (%400, %401, %402, meta[relay.Constant][34] /* ty=Tensor[(1248), float64] */)
}

def @func_2686() -> Tensor[(11, 14, 7), float64] {
  %404 = fn () -> Tensor[(11, 14, 7), float64] {
    %403 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
    %403.2
  };
  %404() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_4646(%var_4632: Tensor[(512), uint8]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], float64, Tensor[(208), int16], Tensor[(512), uint8]) {
  %405 = cast(meta[relay.Constant][35] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
  %406 = cast(%var_4632, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %407 = reshape(%405, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %408 = reshape(%406, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
  %409 = @func_3894(%407, %408) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
  %410 = @func_4051() /* ty=Tensor[(224), float32] */;
  %411 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %412 = %409.2;
  (%410, %411, %412, meta[relay.Constant][35] /* ty=Tensor[(208), int16] */, %var_4632)
}

def @func_7252(%var_7205: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) {
  %413 = @func_6829() /* ty=(Tensor[(224), float32],) */;
  %414 = cast(meta[relay.Constant][36] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %415 = reshape(%414, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %416 = cast(%var_7205, dtype="float64") /* ty=Tensor[(80), float64] */;
  %417 = cast(%var_7205, dtype="float64") /* ty=Tensor[(80), float64] */;
  %418 = reshape(%416, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %419 = reshape(%417, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %420 = cast(meta[relay.Constant][37] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %421 = reshape(%420, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %422 = @func_2709(%421) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
  %423 = %413.0;
  %424 = @func_1381(%415) /* ty=Tensor[(16, 6, 13), float64] */;
  %425 = @func_5993(%418, %419) /* ty=Tensor[(2, 5, 8), float64] */;
  %426 = @func_5929() /* ty=Tensor[(224), float32] */;
  %427 = %422.3;
  (%423, %424, meta[relay.Constant][36] /* ty=Tensor[(1248), float64] */, %425, %var_7205, %426, %427, meta[relay.Constant][37] /* ty=Tensor[(495), int64] */)
}

def @func_7332() -> Tensor[(6, 15, 6), bool] {
  @func_7330() /* ty=Tensor[(6, 15, 6), bool] */
}

def @func_7340() -> Tensor[(11, 14, 7), float64] {
  %429 = fn () -> Tensor[(11, 14, 7), float64] {
    %428 = @func_4026() /* ty=(Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) */;
    %428.1
  };
  %429() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_6887(%var_6847: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32], Tensor[(224), float32], Tensor[(6, 15, 6), bool]) {
  %430 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %431 = cast(%var_6847, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %432 = cast(%var_6847, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %433 = reshape(%431, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %434 = reshape(%432, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %435 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
  %436 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %437 = @func_6829() /* ty=(Tensor[(224), float32],) */;
  %438 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %439 = %430.0;
  %440 = @func_2902(%433, %434) /* ty=Tensor[(12, 11, 11), bool] */;
  %441 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %442 = %435.0;
  %443 = %436.0;
  %444 = %437.0;
  %445 = %438.0;
  (%439, %440, %var_6847, %441, %442, %443, %444, %445)
}

def @func_7172(%var_7170: Tensor[(10, 2), uint16]) -> (Tensor[(6, 15, 6), bool], Tensor[(10, 2), uint16], Tensor[(4, 1, 5), float64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  @func_7169(%var_7170) /* ty=(Tensor[(6, 15, 6), bool], Tensor[(10, 2), uint16], Tensor[(4, 1, 5), float64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */
}

def @func_7630() -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64]) {
  %446 = cast(meta[relay.Constant][38] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %447 = reshape(%446, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %448 = @func_7252(%447) /* ty=(Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) */;
  %449 = @func_4905() /* ty=Tensor[(11, 14, 7), float64] */;
  %450 = %448.3;
  (%449, %450, meta[relay.Constant][38] /* ty=Tensor[(80), float64] */)
}

def @func_2614() -> (Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) {
  %467 = fn () -> (Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) {
    %451 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %452 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
    %453 = reshape(%452, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
    %454 = @func_2268(%453) /* ty=(Tensor[(9, 16, 1), float32],) */;
    %455 = %454.0;
    %456 = cast(%455, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
    %457 = sqrt(%456) /* ty=Tensor[(9, 16, 1), float64] */;
    %458 = cast(meta[relay.Constant][39] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %459 = reshape(%458, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %460 = @func_1607(%459) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */;
    %461 = %460.2;
    %462 = cast(%457, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
    %463 = cast(%461, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
    %464 = %451.0;
    %465 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
    %466 = left_shift(%462, %463) /* ty=Tensor[(9, 16, 1248), uint8] */;
    (%464, meta[relay.Constant][39] /* ty=Tensor[(440), float64] */, %465, meta[relay.Constant][40] /* ty=Tensor[(2, 72), float32] */, %466)
  };
  %467() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */
}

def @func_7407() -> (Tensor[(6, 15, 6), bool], Tensor[(11, 14, 7), float32]) {
  @func_7405() /* ty=(Tensor[(6, 15, 6), bool], Tensor[(11, 14, 7), float32]) */
}

def @func_3555(%var_3518: Tensor[(11, 14, 7), float64]) -> Tensor[(11, 14, 7), float32] {
  %468 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %469 = cast(%var_3518, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%471, %472) /* ty=Tensor[(11, 14, 7), float32] */
}

def @func_8419(%var_8416: Tensor[(9, 8, 11), int64], %var_8417: Tensor[(9, 8, 11), int64], %var_8418: Tensor[(165, 3), int64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(165, 3), int64], Tensor[(14, 12, 6), float32], Tensor[(1008), float32], Tensor[(9, 8, 11), float64], Tensor[(9, 8, 11), float32], Tensor[(495), bool]) {
  @func_8414(%var_8416, %var_8417, %var_8418) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(165, 3), int64], Tensor[(14, 12, 6), float32], Tensor[(1008), float32], Tensor[(9, 8, 11), float64], Tensor[(9, 8, 11), float32], Tensor[(495), bool]) */
}

def @func_6454() -> (Tensor[(11, 14, 7), float64],) {
  %474 = fn () -> (Tensor[(11, 14, 7), float64],) {
    %473 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
    (%473,)
  };
  %474() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_3850(%var_3848: Tensor[(1008), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(1008), float32]) {
  @func_3847(%var_3848) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(1008), float32]) */
}

def @func_3558(%var_3556: Tensor[(11, 14, 7), float64]) -> Tensor[(11, 14, 7), float32] {
  @func_3555(%var_3556) /* ty=Tensor[(11, 14, 7), float32] */
}

def @func_2503() -> (Tensor[(11, 14, 7), float64],) {
  %475 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  (%475,)
}

def @func_4028() -> (Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) {
  @func_4026() /* ty=(Tensor[(16, 8, 9), float64], Tensor[(11, 14, 7), float64]) */
}

def @func_8756(%var_8753: Tensor[(4, 9, 4), uint16], %var_8754: Tensor[(4, 9, 4), uint16], %var_8755: Tensor[(4, 9, 4), uint16]) -> (Tensor[(4, 9, 4), bool], Tensor[(4, 9, 4), bool]) {
  %486 = fn (%var_8728: Tensor[(4, 9, 4), uint16], %var_8729: Tensor[(4, 9, 4), uint16], %var_8743: Tensor[(4, 9, 4), uint16]) -> (Tensor[(4, 9, 4), bool], Tensor[(4, 9, 4), bool]) {
    %476 = cast(%var_8729, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
    %477 = shape_of(%var_8728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%var_8728, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %480 = cast(%var_8743, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
    %481 = shape_of(%var_8729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_8729, dtype="bool") /* ty=Tensor[(4, 9, 4), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %484 = less_equal(%478, %479) /* ty=Tensor[(4, 9, 4), bool] */;
    %485 = not_equal(%482, %483) /* ty=Tensor[(4, 9, 4), bool] */;
    (%484, %485)
  };
  %486(%var_8753, %var_8754, %var_8755) /* ty=(Tensor[(4, 9, 4), bool], Tensor[(4, 9, 4), bool]) */
}

def @func_8718(%var_8715: uint16, %var_8716: Tensor[(60, 14), uint16], %var_8717: Tensor[(60, 14), uint16]) -> (Tensor[(224), float32], Tensor[(1248), float64], uint16, Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(9, 16, 1248), uint8], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64], Tensor[(60, 14), bool]) {
  @func_8713(%var_8715, %var_8716, %var_8717) /* ty=(Tensor[(224), float32], Tensor[(1248), float64], uint16, Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(9, 16, 1248), uint8], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(1, 1452), int8], Tensor[(11, 14, 7), float64], Tensor[(60, 14), bool]) */
}

def @func_3483() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) {
  @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */
}

def @func_5498(%var_5495: uint64, %var_5496: Tensor[(3, 1, 13), uint64], %var_5497: Tensor[(495), int64]) -> (Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) {
  %494 = fn (%var_5479: uint64, %var_5480: Tensor[(3, 1, 13), uint64], %var_5489: Tensor[(495), int64]) -> (Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) {
    %487 = cast(%var_5479, dtype="uint64") /* ty=uint64 */;
    %488 = cast(%var_5480, dtype="uint64") /* ty=Tensor[(3, 1, 13), uint64] */;
    %489 = cast(%var_5489, dtype="int64") /* ty=Tensor[(495), int64] */;
    %490 = reshape(%489, newshape=[495]) /* ty=Tensor[(495), int64] */;
    %491 = @func_2709(%490) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) */;
    %492 = bitwise_and(%487, %488) /* ty=Tensor[(3, 1, 13), uint64] */;
    %493 = %491.2;
    (%492, %493, %var_5489)
  };
  %494(%var_5495, %var_5496, %var_5497) /* ty=(Tensor[(3, 1, 13), uint64], Tensor[(11, 9), int64], Tensor[(495), int64]) */
}

def @func_5879(%var_5856: uint16, %var_5857: Tensor[(4, 1, 5), uint16]) -> Tensor[(4, 1, 5), uint16] {
  %495 = cast(%var_5856, dtype="uint16") /* ty=uint16 */;
  %496 = cast(%var_5857, dtype="uint16") /* ty=Tensor[(4, 1, 5), uint16] */;
  logical_xor(%495, %496) /* ty=Tensor[(4, 1, 5), uint16] */
}

def @func_3050(%var_3049: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(11, 14, 7), float64]) {
  %509 = fn (%var_3020: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(11, 14, 7), float64]) {
    %497 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
    %498 = cast(%var_3020, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%497, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %502 = cast(meta[relay.Constant][41] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %503 = reshape(%502, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), float32] */;
    %504 = @func_2268(%503) /* ty=(Tensor[(9, 16, 1), float32],) */;
    %505 = cast(%497, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
    %506 = logical_or(%500, %501) /* ty=Tensor[(11, 14, 7), bool] */;
    %507 = %504.0;
    %508 = atan(%505) /* ty=Tensor[(11, 14, 7), float64] */;
    (%506, %507, meta[relay.Constant][41] /* ty=Tensor[(144), float32] */, %508)
  };
  %509(%var_3049) /* ty=(Tensor[(11, 14, 7), bool], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(11, 14, 7), float64]) */
}

def @func_6700(%var_6698: Tensor[(1452), int8], %var_6699: Tensor[(14, 7, 16), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(1452), int8], Tensor[(14, 7, 16), float64]) {
  %520 = fn (%var_6679: Tensor[(1452), int8], %var_6685: Tensor[(14, 7, 16), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(1452), int8], Tensor[(14, 7, 16), float64]) {
    %510 = @func_4481() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */;
    %511 = cast(%var_6679, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %512 = reshape(%511, newshape=[242, 6]) /* ty=Tensor[(242, 6), int8] */;
    %513 = @func_4859(%512) /* ty=(Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) */;
    %514 = %513.7;
    %515 = cast(%514, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
    %516 = cast(%var_6685, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
    %517 = %510.1;
    %518 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
    %519 = floor_divide(%515, %516) /* ty=Tensor[(14, 7, 16), float64] */;
    (%517, %518, %var_6679, %519)
  };
  %520(%var_6698, %var_6699) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(1452), int8], Tensor[(14, 7, 16), float64]) */
}

def @func_8162(%var_8153: Tensor[(13, 14, 12), uint32], %var_8154: Tensor[(13, 14, 12), uint32]) -> Tensor[(13, 14, 12), uint32] {
  %521 = cast(%var_8154, dtype="uint32") /* ty=Tensor[(13, 14, 12), uint32] */;
  %522 = shape_of(%var_8153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_8153, dtype="uint32") /* ty=Tensor[(13, 14, 12), uint32] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%523, %524) /* ty=Tensor[(13, 14, 12), uint32] */
}

def @func_4096() -> Tensor[(11, 14, 7), float64] {
  @func_2685() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_2709(%var_2702: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) {
  %525 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %526 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 9), int64] */, dtype="int64") /* ty=Tensor[(11, 9), int64] */;
  %527 = cast(%var_2702, dtype="int64") /* ty=Tensor[(495), int64] */;
  %528 = reshape(%526, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %529 = reshape(%527, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %530 = @func_479(%528, %529) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %531 = %525.0;
  %532 = %530.0;
  (%531, %532, meta[relay.Constant][42] /* ty=Tensor[(11, 9), int64] */, %var_2702)
}

def @func_2408(%var_2406: Tensor[(2, 4, 3), float64], %var_2407: Tensor[(2, 4, 3), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
  %549 = fn (%var_2341: Tensor[(2, 4, 3), float64], %var_2395: Tensor[(2, 4, 3), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
    %533 = cast(meta[relay.Constant][43] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
    %534 = cast(meta[relay.Constant][44] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
    %535 = reshape(%533, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
    %536 = reshape(%534, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
    %537 = @func_479(%535, %536) /* ty=(Tensor[(5, 9, 11), bool],) */;
    %538 = cast(%var_2341, dtype="float64") /* ty=Tensor[(2, 4, 3), float64] */;
    %539 = rsqrt(%538) /* ty=Tensor[(2, 4, 3), float64] */;
    %540 = cast(%var_2395, dtype="float32") /* ty=Tensor[(2, 4, 3), float32] */;
    %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %542 = cast(%539, dtype="float32") /* ty=Tensor[(2, 4, 3), float32] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %544 = cast(meta[relay.Constant][45] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %545 = reshape(%544, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
    %546 = %537.0;
    %547 = power(%542, %543) /* ty=Tensor[(2, 4, 3), float32] */;
    %548 = @func_1381(%545) /* ty=Tensor[(16, 6, 13), float64] */;
    (%546, meta[relay.Constant][43] /* ty=Tensor[(99), int64] */, meta[relay.Constant][44] /* ty=Tensor[(495), int64] */, %547, %548, meta[relay.Constant][45] /* ty=Tensor[(1248), float64] */)
  };
  %549(%var_2406, %var_2407) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */
}

def @func_8563(%var_8562: Tensor[(6, 15, 6), bool]) -> (Tensor[(224), float32], Tensor[(6, 15, 6), uint16]) {
  %558 = fn (%var_8543: Tensor[(6, 15, 6), bool]) -> (Tensor[(224), float32], Tensor[(6, 15, 6), uint16]) {
    %550 = @func_8352() /* ty=(Tensor[(6, 15, 6), bool],) */;
    %551 = %550.0;
    %552 = cast(%var_8543, dtype="uint16") /* ty=Tensor[(6, 15, 6), uint16] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%551, dtype="uint16") /* ty=Tensor[(6, 15, 6), uint16] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %556 = @func_5929() /* ty=Tensor[(224), float32] */;
    %557 = bitwise_xor(%554, %555) /* ty=Tensor[(6, 15, 6), uint16] */;
    (%556, %557)
  };
  %558(%var_8562) /* ty=(Tensor[(224), float32], Tensor[(6, 15, 6), uint16]) */
}

def @func_2271(%var_2269: Tensor[(9, 16, 1), float32]) -> (Tensor[(9, 16, 1), float32],) {
  @func_2268(%var_2269) /* ty=(Tensor[(9, 16, 1), float32],) */
}

def @func_6890(%var_6888: Tensor[(1452), int8]) -> (Tensor[(11, 14, 7), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32], Tensor[(224), float32], Tensor[(6, 15, 6), bool]) {
  @func_6887(%var_6888) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32], Tensor[(224), float32], Tensor[(6, 15, 6), bool]) */
}

def @func_8166(%var_8164: Tensor[(13, 14, 12), uint32], %var_8165: Tensor[(13, 14, 12), uint32]) -> Tensor[(13, 14, 12), uint32] {
  @func_8162(%var_8164, %var_8165) /* ty=Tensor[(13, 14, 12), uint32] */
}

def @func_8631(%var_8629: Tensor[(39), uint64], %var_8630: Tensor[(495), int64]) -> (Tensor[(6, 15, 6), float32], Tensor[(495), int64], uint64, Tensor[(39), uint64], Tensor[(495), int64]) {
  @func_8627(%var_8629, %var_8630) /* ty=(Tensor[(6, 15, 6), float32], Tensor[(495), int64], uint64, Tensor[(39), uint64], Tensor[(495), int64]) */
}

def @func_8490(%var_8460: Tensor[(360, 1), int64], %var_8461: Tensor[(2, 104), int16], %var_8462: Tensor[(1, 1452), int8], %var_8478: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float32], Tensor[(9, 16, 1248), float64], int32, Tensor[(1, 7), int32], Tensor[(360, 1), int64], Tensor[(2, 104), int16], Tensor[(1, 1452), int8], Tensor[(792), float32], Tensor[(1248), float64], Tensor[(80), float64]) {
  %559 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %560 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %561 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 7), int32] */, dtype="int32") /* ty=Tensor[(1, 7), int32] */;
  %562 = cast(%var_8460, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %563 = cast(%var_8461, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %564 = cast(%var_8460, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %565 = cast(%var_8462, dtype="int8") /* ty=Tensor[(1, 1452), int8] */;
  %566 = cast(meta[relay.Constant][47] /* ty=Tensor[(792), float32] */, dtype="float32") /* ty=Tensor[(792), float32] */;
  %567 = reshape(%560, newshape=[]) /* ty=int32 */;
  %568 = reshape(%561, newshape=[1, 7]) /* ty=Tensor[(1, 7), int32] */;
  %569 = reshape(%562, newshape=[6, 60]) /* ty=Tensor[(6, 60), int64] */;
  %570 = reshape(%563, newshape=[1, 208]) /* ty=Tensor[(1, 208), int16] */;
  %571 = reshape(%564, newshape=[6, 60]) /* ty=Tensor[(6, 60), int64] */;
  %572 = reshape(%565, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
  %573 = reshape(%566, newshape=[1, 792]) /* ty=Tensor[(1, 792), float32] */;
  %574 = @func_7830(%567, %568, %569, %570, %571, %572, %573) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 32), bool], Tensor[(1, 7), int32], Tensor[(1008), float32], Tensor[(1, 208), int16], Tensor[(11, 14, 7), uint64], Tensor[(16, 32), int8], Tensor[(6, 60), bool], Tensor[(11, 14, 7), bool], Tensor[(16, 32), float64], Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(9, 16, 1248), float64], Tensor[(224), float32], Tensor[(9, 4), float64], Tensor[(11, 6, 12), float64], Tensor[(1, 792), float32], Tensor[(224), float32]) */;
  %575 = cast(%var_8478, dtype="float64") /* ty=Tensor[(80), float64] */;
  %576 = reshape(%575, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %577 = @func_7252(%576) /* ty=(Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) */;
  %578 = @func_4051() /* ty=Tensor[(224), float32] */;
  %579 = %559.1;
  %580 = %574.12;
  %581 = %577.2;
  (%578, %579, %580, 7 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(1, 7), int32] */, %var_8460, %var_8461, %var_8462, meta[relay.Constant][47] /* ty=Tensor[(792), float32] */, %581, %var_8478)
}

def @func_479(%var_471: Tensor[(1, 9, 11), int64], %var_472: Tensor[(5, 9, 11), int64]) -> (Tensor[(5, 9, 11), bool],) {
  %582 = cast(%var_471, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
  %583 = cast(%var_472, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
  %584 = not_equal(%582, %583) /* ty=Tensor[(5, 9, 11), bool] */;
  (%584,)
}

def @func_2338() -> Tensor[(11, 14, 7), float64] {
  %586 = fn () -> Tensor[(11, 14, 7), float64] {
    %585 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
    sinh(%585) /* ty=Tensor[(11, 14, 7), float64] */
  };
  %586() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_5397(%var_5396: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(1, 11, 12), float32]) {
  %591 = fn (%var_5386: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(1, 11, 12), float32]) {
    %587 = cast(%var_5386, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
    %588 = cast(%var_5386, dtype="float32") /* ty=Tensor[(1, 11, 12), float32] */;
    %589 = asinh(%587) /* ty=Tensor[(1, 11, 12), float64] */;
    %590 = log10(%588) /* ty=Tensor[(1, 11, 12), float32] */;
    (%589, %590)
  };
  %591(%var_5396) /* ty=(Tensor[(1, 11, 12), float64], Tensor[(1, 11, 12), float32]) */
}

def @func_5299() -> (Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) {
  @func_5297() /* ty=(Tensor[(11, 14, 7), uint64], Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(1248), float64]) */
}

def @func_4812(%var_4787: Tensor[(495), int64]) -> (Tensor[(495), uint16], Tensor[(495), float32]) {
  %592 = @func_4527() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) */;
  %593 = %592.4;
  %594 = cast(%var_4787, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(1), int32] */;
  %596 = cast(%593, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %598 = cast(%593, dtype="float32") /* ty=Tensor[(495), float32] */;
  %599 = shape_of(%var_4787, dtype="int32") /* ty=Tensor[(1), int32] */;
  %600 = cast(%var_4787, dtype="float32") /* ty=Tensor[(495), float32] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?), float32] */;
  %602 = bitwise_xor(%596, %597) /* ty=Tensor[(495), uint16] */;
  %603 = power(%600, %601) /* ty=Tensor[(495), float32] */;
  (%602, %603)
}

def @func_4008() -> Tensor[(224), float32] {
  %604 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %604.2
}

def @func_5996(%var_5994: Tensor[(2, 5, 8), float64], %var_5995: Tensor[(2, 5, 8), float64]) -> Tensor[(2, 5, 8), float64] {
  %609 = fn (%var_5985: Tensor[(2, 5, 8), float64], %var_5986: Tensor[(2, 5, 8), float64]) -> Tensor[(2, 5, 8), float64] {
    %605 = cast(%var_5986, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %606 = shape_of(%var_5985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%var_5985, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%607, %608) /* ty=Tensor[(2, 5, 8), float64] */
  };
  %609(%var_5994, %var_5995) /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_5769() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) {
  %610 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %611 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
  %612 = %611.3;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(6, 15, 6), float32] */;
  %614 = %610.0;
  %615 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  %616 = rsqrt(%613) /* ty=Tensor[(6, 15, 6), float32] */;
  (%614, %615, %616)
}

def @func_4770(%var_4768: Tensor[(11, 14, 7), float64]) -> (Tensor[(11, 14, 7), bool],) {
  @func_4767(%var_4768) /* ty=(Tensor[(11, 14, 7), bool],) */
}

def @main() -> (Tensor[(11, 14, 7), float64], Tensor[(572, 2), float32], Tensor[(11, 14, 7), bool]) {
  %617 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  %618 = cast(meta[relay.Constant][49] /* ty=Tensor[(572, 2), float32] */, dtype="float32") /* ty=Tensor[(572, 2), float32] */;
  %619 = reshape(%618, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %620 = @func_7671(%619) /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) */;
  %621 = %620.1;
  %622 = cast(%621, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %623 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%617, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = @func_7339() /* ty=Tensor[(11, 14, 7), float64] */;
  %627 = not_equal(%624, %625) /* ty=Tensor[(11, 14, 7), bool] */;
  (%626, meta[relay.Constant][49] /* ty=Tensor[(572, 2), float32] */, %627)
}

def @func_4134(%var_4133: Tensor[(1248), float64]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
  %633 = fn (%var_4127: Tensor[(1248), float64]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) {
    %628 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
    %629 = cast(%var_4127, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %630 = reshape(%629, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
    %631 = %628.0;
    %632 = @func_1381(%630) /* ty=Tensor[(16, 6, 13), float64] */;
    (%631, %632, %var_4127)
  };
  %633(%var_4133) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */
}

def @func_3815(%var_3729: Tensor[(24), float64]) -> (Tensor[(5, 9, 11), bool], Tensor[(24), float64], Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float32]) {
  %634 = cast(%var_3729, dtype="float64") /* ty=Tensor[(24), float64] */;
  %635 = cast(%var_3729, dtype="float64") /* ty=Tensor[(24), float64] */;
  %636 = reshape(%634, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %637 = reshape(%635, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %638 = @func_2405(%636, %637) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
  %639 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %640 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %641 = %640.0;
  %642 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 14, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %646 = %638.0;
  %647 = %639.0;
  %648 = power(%644, %645) /* ty=Tensor[(11, 14, 7), float32] */;
  (%646, %var_3729, %647, %648)
}

def @func_7609() -> (Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) {
  %649 = @func_5519() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
  %652 = reshape(%651, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
  %653 = @func_4767(%652) /* ty=(Tensor[(11, 14, 7), bool],) */;
  %654 = @func_5929() /* ty=Tensor[(224), float32] */;
  %655 = %653.0;
  (%650, %654, %655)
}

def @func_231(%var_230: Tensor[(8, 8, 8), uint8]) -> (Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) {
  %664 = fn (%var_201: Tensor[(8, 8, 8), uint8]) -> (Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) {
    %656 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 8, 8), uint8] */, dtype="uint8") /* ty=Tensor[(8, 8, 8), uint8] */;
    %657 = shape_of(%var_201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%var_201, dtype="uint8") /* ty=Tensor[(8, 8, 8), uint8] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %660 = cast(meta[relay.Constant][52] /* ty=Tensor[(208), int16] */, dtype="int16") /* ty=Tensor[(208), int16] */;
    %661 = reshape(%660, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
    %662 = bitwise_and(%658, %659) /* ty=Tensor[(8, 8, 8), uint8] */;
    %663 = @func_114(%661) /* ty=Tensor[(16, 13), bool] */;
    (%662, %663, meta[relay.Constant][52] /* ty=Tensor[(208), int16] */)
  };
  %664(%var_230) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */
}

def @func_5084() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) {
  %665 = @func_2878() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(14, 1, 16), float32], Tensor[(224), float32]) */;
  %666 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
  %667 = %665.2;
  %668 = @func_2685() /* ty=Tensor[(11, 14, 7), float64] */;
  %669 = @func_4008() /* ty=Tensor[(224), float32] */;
  %670 = %666.0;
  %671 = @func_5010() /* ty=Tensor[(2, 10, 13), float32] */;
  (%667, %668, %669, %670, %671)
}

def @func_7279() -> Tensor[(2, 10, 13), float32] {
  @func_7277() /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_5714(%var_5712: Tensor[(10, 14, 12), uint64], %var_5713: Tensor[(10, 14, 12), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(10, 14, 12), float64], Tensor[(10, 14, 12), float64]) {
  @func_5710(%var_5712, %var_5713) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(10, 14, 12), float64], Tensor[(10, 14, 12), float64]) */
}

def @func_7611() -> (Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) {
  @func_7609() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(11, 14, 7), bool]) */
}

def @func_5883(%var_5881: uint16, %var_5882: Tensor[(4, 1, 5), uint16]) -> Tensor[(4, 1, 5), uint16] {
  @func_5879(%var_5881, %var_5882) /* ty=Tensor[(4, 1, 5), uint16] */
}

def @func_3894(%var_3888: Tensor[(208), int16], %var_3889: Tensor[(2, 256), uint8]) -> (Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) {
  %672 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %673 = cast(4.99082f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %674 = cast(%var_3888, dtype="int16") /* ty=Tensor[(208), int16] */;
  %675 = cast(%var_3889, dtype="uint8") /* ty=Tensor[(2, 256), uint8] */;
  %676 = reshape(%673, newshape=[]) /* ty=float64 */;
  %677 = reshape(%674, newshape=[208]) /* ty=Tensor[(208), int16] */;
  %678 = reshape(%675, newshape=[128, 4]) /* ty=Tensor[(128, 4), uint8] */;
  %679 = @func_334(%676, %677, %678) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) */;
  %680 = %672.0;
  %681 = %679.2;
  (%680, %681, 4.99082f64 /* ty=float64 */, %var_3888, %var_3889)
}

def @func_6750() -> Tensor[(11, 14, 7), float64] {
  %682 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %682.0
}

def @func_4482() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) {
  %687 = fn () -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) {
    %683 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
    %684 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
    %685 = %683.0;
    %686 = %684.1;
    (%685, %686)
  };
  %687() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float64]) */
}

def @func_4338(%var_4315: Tensor[(1248), float64], %var_4322: Tensor[(840), uint16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(1248), float64], uint16, Tensor[(840), uint16], Tensor[(24), float64]) {
  %688 = cast(%var_4315, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %689 = reshape(%688, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), float64] */;
  %690 = cast(meta[relay.Constant][53] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %691 = cast(%var_4322, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %692 = cast(meta[relay.Constant][54] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %693 = reshape(%690, newshape=[]) /* ty=uint16 */;
  %694 = reshape(%691, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), uint16] */;
  %695 = reshape(%692, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %696 = @func_2993(%693, %694, %695) /* ty=(Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) */;
  %697 = @func_4096() /* ty=Tensor[(11, 14, 7), float64] */;
  %698 = @func_1381(%689) /* ty=Tensor[(16, 6, 13), float64] */;
  %699 = %696.1;
  (%697, %698, %var_4315, %699, meta[relay.Constant][53] /* ty=uint16 */, %var_4322, meta[relay.Constant][54] /* ty=Tensor[(24), float64] */)
}

def @func_582(%var_517: Tensor[(14, 12, 6), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) {
  %700 = cast(meta[relay.Constant][55] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %701 = cast(meta[relay.Constant][55] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %702 = reshape(%700, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %703 = reshape(%701, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %704 = @func_498(%702, %703) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %705 = %704.1;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
  %707 = cast(meta[relay.Constant][55] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %708 = reshape(%706, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %709 = reshape(%707, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %710 = @func_498(%708, %709) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %711 = cast(%var_517, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
  %712 = sin(%711) /* ty=Tensor[(14, 12, 6), float32] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
  %714 = %710.0;
  %715 = sqrt(%713) /* ty=Tensor[(14, 12, 6), float32] */;
  (%705, meta[relay.Constant][55] /* ty=Tensor[(1144), float32] */, %714, %715)
}

def @func_4862(%var_4860: Tensor[(242, 6), int8]) -> (Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) {
  @func_4859(%var_4860) /* ty=(Tensor[(224), float32], Tensor[(16, 13), bool], Tensor[(512), uint8], Tensor[(9, 16, 1), float32], Tensor[(144), float32], Tensor[(12, 11, 11), bool], Tensor[(242, 6), int8], Tensor[(14, 1, 16), float32]) */
}

def @func_4710() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) {
  %716 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
  %719 = reshape(%718, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float32] */;
  %720 = @func_3420(%719) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(12, 11, 11), bool], Tensor[(1452), int8]) */;
  %721 = %720.0;
  (%717, %721)
}

def @func_8353() -> (Tensor[(6, 15, 6), bool],) {
  %723 = fn () -> (Tensor[(6, 15, 6), bool],) {
    %722 = @func_7330() /* ty=Tensor[(6, 15, 6), bool] */;
    (%722,)
  };
  %723() /* ty=(Tensor[(6, 15, 6), bool],) */
}

def @func_2847() -> (Tensor[(11, 14, 7), float64],) {
  %724 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
  %725 = %724.0;
  (%725,)
}

def @func_7565(%var_7553: float64, %var_7554: Tensor[(2, 3, 6), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(224), float32]) {
  %726 = cast(%var_7553, dtype="bool") /* ty=bool */;
  %727 = cast(%var_7554, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
  %728 = greater_equal(%726, %727) /* ty=Tensor[(2, 3, 6), bool] */;
  %729 = @func_6311() /* ty=Tensor[(224), float32] */;
  (%728, %729)
}

def @func_6399() -> (Tensor[(6, 15, 6), bool],) {
  @func_6397() /* ty=(Tensor[(6, 15, 6), bool],) */
}

def @func_6418() -> (Tensor[(11, 14, 7), float64],) {
  %730 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  (%730,)
}

def @func_7668(%var_7665: Tensor[(11, 104), float32]) -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(11, 13, 8), float32], Tensor[(11, 104), float32]) {
  %731 = @func_3481() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64]) */;
  %732 = cast(%var_7665, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %733 = cast(%var_7665, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %734 = reshape(%732, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %735 = reshape(%733, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float32] */;
  %736 = @func_498(%734, %735) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */;
  %737 = @func_7015() /* ty=Tensor[(224), float32] */;
  %738 = %731.1;
  %739 = %736.1;
  (%737, %738, %739, %var_7665)
}

def @func_585(%var_583: Tensor[(14, 12, 6), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) {
  @func_582(%var_583) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */
}

def @func_7632() -> (Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64]) {
  @func_7630() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64]) */
}

def @func_5771() -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) {
  @func_5769() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), float32]) */
}

def @func_4113() -> (Tensor[(6, 15, 6), bool],) {
  %745 = fn () -> (Tensor[(6, 15, 6), bool],) {
    %740 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
    %741 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 15, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %744 = greater_equal(%742, %743) /* ty=Tensor[(6, 15, 6), bool] */;
    (%744,)
  };
  %745() /* ty=(Tensor[(6, 15, 6), bool],) */
}

def @func_7465() -> (Tensor[(6, 14, 3), float32], Tensor[(252), float32], Tensor[(14, 15, 3), float32], Tensor[(224), float32]) {
  %758 = fn () -> (Tensor[(6, 14, 3), float32], Tensor[(252), float32], Tensor[(14, 15, 3), float32], Tensor[(224), float32]) {
    %746 = cast(meta[relay.Constant][58] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %747 = reshape(%746, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float32] */;
    %748 = @func_3304(%747) /* ty=(Tensor[(6, 14, 3), float32],) */;
    %749 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
    %750 = log10(%749) /* ty=Tensor[(14, 15, 3), float32] */;
    %751 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
    %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%750, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %755 = %748.0;
    %756 = divide(%753, %754) /* ty=Tensor[(14, 15, 3), float32] */;
    %757 = @func_7015() /* ty=Tensor[(224), float32] */;
    (%755, meta[relay.Constant][58] /* ty=Tensor[(252), float32] */, %756, %757)
  };
  %758() /* ty=(Tensor[(6, 14, 3), float32], Tensor[(252), float32], Tensor[(14, 15, 3), float32], Tensor[(224), float32]) */
}

def @func_3898(%var_3896: Tensor[(208), int16], %var_3897: Tensor[(2, 256), uint8]) -> (Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) {
  @func_3894(%var_3896, %var_3897) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */
}

def @func_6794() -> (Tensor[(11, 14, 7), float64],) {
  %761 = fn () -> (Tensor[(11, 14, 7), float64],) {
    %759 = @func_6453() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %760 = %759.0;
    (%760,)
  };
  %761() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_2997(%var_2994: uint16, %var_2995: Tensor[(15, 4, 14), uint16], %var_2996: Tensor[(12, 2), float64]) -> (Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) {
  %771 = fn (%var_2978: uint16, %var_2979: Tensor[(15, 4, 14), uint16], %var_2988: Tensor[(12, 2), float64]) -> (Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) {
    %762 = cast(%var_2978, dtype="uint16") /* ty=uint16 */;
    %763 = cast(%var_2979, dtype="uint16") /* ty=Tensor[(15, 4, 14), uint16] */;
    %764 = cast(%var_2988, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
    %765 = cast(%var_2988, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
    %766 = reshape(%764, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
    %767 = reshape(%765, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
    %768 = @func_2405(%766, %767) /* ty=(Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(2, 4, 3), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64]) */;
    %769 = logical_xor(%762, %763) /* ty=Tensor[(15, 4, 14), uint16] */;
    %770 = %768.5;
    (%769, %770, %var_2988)
  };
  %771(%var_2994, %var_2995, %var_2996) /* ty=(Tensor[(15, 4, 14), uint16], Tensor[(1248), float64], Tensor[(12, 2), float64]) */
}

def @func_7015() -> Tensor[(224), float32] {
  %772 = @func_6293() /* ty=(Tensor[(224), float32], Tensor[(224), float32]) */;
  %772.1
}

def @func_4053() -> Tensor[(224), float32] {
  @func_4051() /* ty=Tensor[(224), float32] */
}

def @func_5374(%var_5372: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) {
  @func_5371(%var_5372) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) */
}

def @func_5519() -> (Tensor[(11, 14, 7), float64],) {
  %773 = @func_3347() /* ty=Tensor[(11, 14, 7), float64] */;
  (%773,)
}

def @func_2505() -> (Tensor[(11, 14, 7), float64],) {
  @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_3260() -> (Tensor[(11, 14, 7), float64],) {
  %776 = fn () -> (Tensor[(11, 14, 7), float64],) {
    %774 = @func_2847() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %775 = %774.0;
    (%775,)
  };
  %776() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_3978() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) {
  %783 = fn () -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) {
    %777 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %778 = %777.0;
    %779 = cast(%778, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
    %780 = cast(%778, dtype="float32") /* ty=Tensor[(11, 14, 7), float32] */;
    %781 = log10(%779) /* ty=Tensor[(11, 14, 7), float32] */;
    %782 = cos(%780) /* ty=Tensor[(11, 14, 7), float32] */;
    (%781, %782)
  };
  %783() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */
}

def @func_6823() -> Tensor[(224), float32] {
  @func_6821() /* ty=Tensor[(224), float32] */
}

def @func_116(%var_115: Tensor[(16, 13), int16]) -> Tensor[(16, 13), bool] {
  %788 = fn (%var_66: Tensor[(16, 13), int16]) -> Tensor[(16, 13), bool] {
    %784 = cast(%var_66, dtype="bool") /* ty=Tensor[(16, 13), bool] */;
    %785 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(16, 13), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %786 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 13), int16] */, dtype="bool") /* ty=Tensor[(16, 13), bool] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    greater(%786, %787) /* ty=Tensor[(16, 13), bool] */
  };
  %788(%var_115) /* ty=Tensor[(16, 13), bool] */
}

def @func_5438() -> Tensor[(11, 14, 7), float64] {
  @func_4096() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_6311() -> Tensor[(224), float32] {
  @func_4051() /* ty=Tensor[(224), float32] */
}

def @func_7718(%var_7716: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) {
  @func_7715(%var_7716) /* ty=(Tensor[(11, 6, 12), float64], Tensor[(11, 6, 12), bool], Tensor[(11, 13, 8), float32], Tensor[(1144), float32]) */
}

def @func_8298() -> Tensor[(11, 14, 7), float32] {
  @func_8296() /* ty=Tensor[(11, 14, 7), float32] */
}

def @func_3126(%var_3104: Tensor[(208), int16], %var_3118: Tensor[(208), int16]) -> (Tensor[(11, 14, 7), float64], Tensor[(16, 13), bool], Tensor[(11, 14, 7), float64], Tensor[(208), bool]) {
  %789 = @func_2613() /* ty=(Tensor[(11, 14, 7), float64], Tensor[(440), float64], Tensor[(11, 14, 7), float64], Tensor[(2, 72), float32], Tensor[(9, 16, 1248), uint8]) */;
  %790 = cast(%var_3104, dtype="int16") /* ty=Tensor[(208), int16] */;
  %791 = reshape(%790, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
  %792 = cast(%var_3118, dtype="bool") /* ty=Tensor[(208), bool] */;
  %793 = shape_of(%var_3104, dtype="int32") /* ty=Tensor[(1), int32] */;
  %794 = cast(%var_3104, dtype="bool") /* ty=Tensor[(208), bool] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?), bool] */;
  %796 = %789.2;
  %797 = @func_114(%791) /* ty=Tensor[(16, 13), bool] */;
  %798 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %799 = logical_or(%794, %795) /* ty=Tensor[(208), bool] */;
  (%796, %797, %798, %799)
}

def @func_4528() -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) {
  %815 = fn () -> (Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) {
    %800 = @func_3259() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %801 = cast(meta[relay.Constant][61] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
    %802 = cast(meta[relay.Constant][62] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
    %803 = reshape(%801, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
    %804 = reshape(%802, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
    %805 = @func_479(%803, %804) /* ty=(Tensor[(5, 9, 11), bool],) */;
    %806 = cast(meta[relay.Constant][63] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %807 = %800.0;
    %808 = cast(%807, dtype="float64") /* ty=Tensor[(11, 14, 7), float64] */;
    %809 = reshape(%806, newshape=[1452]) /* ty=Tensor[(1452), int8] */;
    %810 = reshape(%808, newshape=[11, 14, 7]) /* ty=Tensor[(11, 14, 7), float64] */;
    %811 = @func_3640(%809, %810) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) */;
    %812 = @func_4008() /* ty=Tensor[(224), float32] */;
    %813 = %805.0;
    %814 = %811.1;
    (%812, %807, %813, meta[relay.Constant][61] /* ty=Tensor[(99), int64] */, meta[relay.Constant][62] /* ty=Tensor[(495), int64] */, %814, meta[relay.Constant][63] /* ty=Tensor[(1452), int8] */)
  };
  %815() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(495), int64], Tensor[(1452), int8], Tensor[(1452), int8]) */
}

def @func_338(%var_335: float64, %var_336: Tensor[(208), int16], %var_337: Tensor[(128, 4), uint8]) -> (Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) {
  %830 = fn (%var_289: float64, %var_299: Tensor[(208), int16], %var_317: Tensor[(128, 4), uint8]) -> (Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) {
    %816 = cast(%var_289, dtype="float64") /* ty=float64 */;
    %817 = cast(meta[relay.Constant][64] /* ty=Tensor[(6, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
    %818 = cast(%var_299, dtype="int16") /* ty=Tensor[(208), int16] */;
    %819 = reshape(%818, newshape=[16, 13]) /* ty=Tensor[(16, 13), int16] */;
    %820 = cast(%var_317, dtype="uint8") /* ty=Tensor[(128, 4), uint8] */;
    %821 = reshape(%820, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
    %822 = @func_229(%821) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
    %823 = cast(%var_317, dtype="uint8") /* ty=Tensor[(128, 4), uint8] */;
    %824 = reshape(%823, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), uint8] */;
    %825 = @func_229(%824) /* ty=(Tensor[(8, 8, 8), uint8], Tensor[(16, 13), bool], Tensor[(208), int16]) */;
    %826 = floor_mod(%816, %817) /* ty=Tensor[(6, 3, 9), float64] */;
    %827 = @func_114(%819) /* ty=Tensor[(16, 13), bool] */;
    %828 = %822.1;
    %829 = %825.1;
    (%826, %827, %var_299, %828, %var_317, %829)
  };
  %830(%var_335, %var_336, %var_337) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(16, 13), bool], Tensor[(208), int16], Tensor[(16, 13), bool], Tensor[(128, 4), uint8], Tensor[(16, 13), bool]) */
}

def @func_4010() -> Tensor[(224), float32] {
  @func_4008() /* ty=Tensor[(224), float32] */
}

def @func_5931() -> Tensor[(224), float32] {
  @func_5929() /* ty=Tensor[(224), float32] */
}

def @func_7255(%var_7253: Tensor[(80), float64]) -> (Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) {
  @func_7252(%var_7253) /* ty=(Tensor[(224), float32], Tensor[(16, 6, 13), float64], Tensor[(1248), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(224), float32], Tensor[(495), int64], Tensor[(495), int64]) */
}

def @func_6041() -> Tensor[(9, 16, 1248), uint8] {
  @func_6039() /* ty=Tensor[(9, 16, 1248), uint8] */
}

def @func_1365(%var_1363: Tensor[(14, 1, 16), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) {
  @func_1362(%var_1363) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(14, 1, 16), float32]) */
}

def @func_8414(%var_8356: Tensor[(9, 8, 11), int64], %var_8357: Tensor[(9, 8, 11), int64], %var_8369: Tensor[(165, 3), int64]) -> (Tensor[(5, 9, 11), bool], Tensor[(99), int64], Tensor[(165, 3), int64], Tensor[(14, 12, 6), float32], Tensor[(1008), float32], Tensor[(9, 8, 11), float64], Tensor[(9, 8, 11), float32], Tensor[(495), bool]) {
  %831 = cast(meta[relay.Constant][65] /* ty=Tensor[(99), int64] */, dtype="int64") /* ty=Tensor[(99), int64] */;
  %832 = cast(%var_8369, dtype="int64") /* ty=Tensor[(165, 3), int64] */;
  %833 = reshape(%831, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), int64] */;
  %834 = reshape(%832, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int64] */;
  %835 = @func_479(%833, %834) /* ty=(Tensor[(5, 9, 11), bool],) */;
  %836 = cast(meta[relay.Constant][66] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %837 = reshape(%836, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float32] */;
  %838 = @func_582(%837) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(1144), float32], Tensor[(11, 13, 8), float32], Tensor[(14, 12, 6), float32]) */;
  %839 = cast(%var_8357, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %840 = shape_of(%var_8356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_8356, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %843 = not_equal(%841, %842) /* ty=Tensor[(9, 8, 11), bool] */;
  %844 = cast(%843, dtype="float64") /* ty=Tensor[(9, 8, 11), float64] */;
  %845 = atanh(%844) /* ty=Tensor[(9, 8, 11), float64] */;
  %846 = cast(%845, dtype="float64") /* ty=Tensor[(9, 8, 11), float64] */;
  %847 = cast(%var_8356, dtype="float32") /* ty=Tensor[(9, 8, 11), float32] */;
  %848 = sqrt(%847) /* ty=Tensor[(9, 8, 11), float32] */;
  %849 = cast(meta[relay.Constant][67] /* ty=Tensor[(9, 8, 11), float32] */, dtype="uint64") /* ty=Tensor[(9, 8, 11), uint64] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="uint64") /* ty=Tensor[(9, 8, 11), uint64] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %853 = bitwise_xor(%851, %852) /* ty=Tensor[(9, 8, 11), uint64] */;
  %854 = cast(%853, dtype="float32") /* ty=Tensor[(9, 8, 11), float32] */;
  %855 = cast(%var_8369, dtype="int64") /* ty=Tensor[(165, 3), int64] */;
  %856 = reshape(%855, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %857 = @func_5371(%856) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(11, 14, 7), float64], Tensor[(495), bool], Tensor[(495), int64], Tensor[(224), float32]) */;
  %858 = %835.0;
  %859 = %838.3;
  %860 = acos(%846) /* ty=Tensor[(9, 8, 11), float64] */;
  %861 = log2(%854) /* ty=Tensor[(9, 8, 11), float32] */;
  %862 = %857.2;
  (%858, meta[relay.Constant][65] /* ty=Tensor[(99), int64] */, %var_8369, %859, meta[relay.Constant][66] /* ty=Tensor[(1008), float32] */, %860, %861, %862)
}

def @func_8296() -> Tensor[(11, 14, 7), float32] {
  %863 = @func_3977() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), float32]) */;
  %863.1
}

def @func_7964() -> (Tensor[(11, 14, 7), float64],) {
  @func_7962() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_501(%var_499: Tensor[(11, 13, 8), float32], %var_500: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
  %871 = fn (%var_489: Tensor[(11, 13, 8), float32], %var_490: Tensor[(11, 13, 8), float32]) -> (Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) {
    %864 = cast(%var_490, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %865 = shape_of(%var_489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(%var_489, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %868 = cast(%var_489, dtype="float32") /* ty=Tensor[(11, 13, 8), float32] */;
    %869 = minimum(%866, %867) /* ty=Tensor[(11, 13, 8), float32] */;
    %870 = asinh(%868) /* ty=Tensor[(11, 13, 8), float32] */;
    (%869, %870)
  };
  %871(%var_499, %var_500) /* ty=(Tensor[(11, 13, 8), float32], Tensor[(11, 13, 8), float32]) */
}

def @func_7190() -> Tensor[(9, 16, 1248), float64] {
  %874 = fn () -> Tensor[(9, 16, 1248), float64] {
    %872 = @func_6039() /* ty=Tensor[(9, 16, 1248), uint8] */;
    %873 = cast(%872, dtype="float64") /* ty=Tensor[(9, 16, 1248), float64] */;
    sin(%873) /* ty=Tensor[(9, 16, 1248), float64] */
  };
  %874() /* ty=Tensor[(9, 16, 1248), float64] */
}

def @func_3347() -> Tensor[(11, 14, 7), float64] {
  @func_2685() /* ty=Tensor[(11, 14, 7), float64] */
}

def @func_5521() -> (Tensor[(11, 14, 7), float64],) {
  @func_5519() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_5154(%var_5153: Tensor[(8, 4, 11), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) {
  %894 = fn (%var_5111: Tensor[(8, 4, 11), float32]) -> (Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) {
    %875 = @func_2503() /* ty=(Tensor[(11, 14, 7), float64],) */;
    %876 = @func_4112() /* ty=(Tensor[(6, 15, 6), bool],) */;
    %877 = cast(%var_5111, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %878 = atan(%877) /* ty=Tensor[(8, 4, 11), float32] */;
    %879 = cast(%878, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %880 = asin(%879) /* ty=Tensor[(8, 4, 11), float32] */;
    %881 = cast(%880, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %882 = asinh(%881) /* ty=Tensor[(8, 4, 11), float32] */;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
    %884 = cast(%882, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
    %885 = cast(%var_5111, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
    %886 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%882, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %889 = %875.0;
    %890 = %876.0;
    %891 = rsqrt(%883) /* ty=Tensor[(8, 4, 11), float64] */;
    %892 = log10(%884) /* ty=Tensor[(8, 4, 11), float64] */;
    %893 = logical_xor(%887, %888) /* ty=Tensor[(8, 4, 11), uint64] */;
    (%889, %890, %891, %892, %893)
  };
  %894(%var_5153) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(6, 15, 6), bool], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), float64], Tensor[(8, 4, 11), uint64]) */
}

def @func_5659(%var_5656: Tensor[(208), int16], %var_5657: Tensor[(2, 256), uint8], %var_5658: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), uint32], Tensor[(512, 208), int16], Tensor[(2, 256), float32], Tensor[(2, 256), float64], Tensor[(2, 10, 13), float32], Tensor[(495), bool], Tensor[(495), int64]) {
  %918 = fn (%var_5612: Tensor[(208), int16], %var_5632: Tensor[(2, 256), uint8], %var_5651: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), uint32], Tensor[(512, 208), int16], Tensor[(2, 256), float32], Tensor[(2, 256), float64], Tensor[(2, 10, 13), float32], Tensor[(495), bool], Tensor[(495), int64]) {
    %895 = @func_4710() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) */;
    %896 = cast(meta[relay.Constant][68] /* ty=Tensor[(512, 1), uint8] */, dtype="int16") /* ty=Tensor[(512, 1), int16] */;
    %897 = cast(%var_5612, dtype="int16") /* ty=Tensor[(208), int16] */;
    %898 = cast(%var_5612, dtype="int16") /* ty=Tensor[(208), int16] */;
    %899 = cast(meta[relay.Constant][68] /* ty=Tensor[(512, 1), uint8] */, dtype="uint8") /* ty=Tensor[(512, 1), uint8] */;
    %900 = reshape(%898, newshape=[208]) /* ty=Tensor[(208), int16] */;
    %901 = reshape(%899, newshape=[2, 256]) /* ty=Tensor[(2, 256), uint8] */;
    %902 = @func_3894(%900, %901) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(208), int16], float64, Tensor[(208), int16], Tensor[(2, 256), uint8]) */;
    %903 = %902.4;
    %904 = cast(%var_5632, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(2), int32] */;
    %906 = cast(%903, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %908 = cast(%var_5632, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
    %909 = @func_5084() /* ty=(Tensor[(224), float32], Tensor[(11, 14, 7), float64], Tensor[(224), float32], Tensor[(6, 15, 6), bool], Tensor[(2, 10, 13), float32]) */;
    %910 = cast(%var_5651, dtype="int64") /* ty=Tensor[(495), int64] */;
    %911 = reshape(%910, newshape=[495]) /* ty=Tensor[(495), int64] */;
    %912 = %895.1;
    %913 = minimum(%896, %897) /* ty=Tensor[(512, 208), int16] */;
    %914 = power(%906, %907) /* ty=Tensor[(2, 256), float32] */;
    %915 = sqrt(%908) /* ty=Tensor[(2, 256), float64] */;
    %916 = %909.4;
    %917 = @func_5216(%911) /* ty=Tensor[(495), bool] */;
    (%912, %913, %914, %915, %916, %917, %var_5651)
  };
  %918(%var_5656, %var_5657, %var_5658) /* ty=(Tensor[(11, 14, 7), uint32], Tensor[(512, 208), int16], Tensor[(2, 256), float32], Tensor[(2, 256), float64], Tensor[(2, 10, 13), float32], Tensor[(495), bool], Tensor[(495), int64]) */
}

def @func_3640(%var_3628: Tensor[(1452), int8], %var_3630: Tensor[(11, 14, 7), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(1452), int8], Tensor[(11, 14, 7), uint64]) {
  %919 = cast(%var_3628, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %920 = cast(%var_3628, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %921 = reshape(%919, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %922 = reshape(%920, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int8] */;
  %923 = @func_2337() /* ty=Tensor[(11, 14, 7), float64] */;
  %924 = cast(%var_3630, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%923, dtype="uint64") /* ty=Tensor[(11, 14, 7), uint64] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %928 = @func_2902(%921, %922) /* ty=Tensor[(12, 11, 11), bool] */;
  %929 = multiply(%926, %927) /* ty=Tensor[(11, 14, 7), uint64] */;
  (%928, %var_3628, %929)
}

def @func_5929() -> Tensor[(224), float32] {
  @func_4051() /* ty=Tensor[(224), float32] */
}

def @func_2905(%var_2903: Tensor[(12, 11, 11), int8], %var_2904: Tensor[(12, 11, 11), int8]) -> Tensor[(12, 11, 11), bool] {
  %934 = fn (%var_2893: Tensor[(12, 11, 11), int8], %var_2894: Tensor[(12, 11, 11), int8]) -> Tensor[(12, 11, 11), bool] {
    %930 = cast(%var_2894, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
    %931 = shape_of(%var_2893, dtype="int32") /* ty=Tensor[(3), int32] */;
    %932 = cast(%var_2893, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
    %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%932, %933) /* ty=Tensor[(12, 11, 11), bool] */
  };
  %934(%var_2903, %var_2904) /* ty=Tensor[(12, 11, 11), bool] */
}

def @func_6420() -> (Tensor[(11, 14, 7), float64],) {
  @func_6418() /* ty=(Tensor[(11, 14, 7), float64],) */
}

def @func_6127(%var_6121: int32, %var_6122: Tensor[(7, 1), int32], %var_6123: Tensor[(360), int64], %var_6124: Tensor[(1008), float32], %var_6125: Tensor[(208), int16], %var_6126: Tensor[(16, 32), uint8]) -> (Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) {
  %961 = fn (%var_6070: int32, %var_6071: Tensor[(7, 1), int32], %var_6081: Tensor[(360), int64], %var_6082: Tensor[(1008), float32], %var_6085: Tensor[(208), int16], %var_6110: Tensor[(16, 32), uint8]) -> (Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) {
    %935 = cast(%var_6070, dtype="int32") /* ty=int32 */;
    %936 = cast(%var_6071, dtype="int32") /* ty=Tensor[(7, 1), int32] */;
    %937 = cast(%var_6081, dtype="int64") /* ty=Tensor[(360), int64] */;
    %938 = cast(%var_6081, dtype="bool") /* ty=Tensor[(360), bool] */;
    %939 = cast(%var_6082, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %940 = cast(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="uint8") /* ty=Tensor[(16, 32), uint8] */;
    %941 = reshape(%937, newshape=[5, 6, 12]) /* ty=Tensor[(5, 6, 12), int64] */;
    %942 = reshape(%938, newshape=[5, 6, 12]) /* ty=Tensor[(5, 6, 12), bool] */;
    %943 = reshape(%939, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
    %944 = reshape(%940, newshape=[512]) /* ty=Tensor[(512), uint8] */;
    %945 = @func_4422(%941, %942, %943, %944) /* ty=(Tensor[(5, 6, 12), int16], Tensor[(5, 6, 12), int8], Tensor[(1144), float32], Tensor[(1008), float32], Tensor[(11, 14, 7), float64], Tensor[(2, 256), uint8], Tensor[(208), int16], Tensor[(512), uint8]) */;
    %946 = %945.6;
    %947 = cast(%var_6085, dtype="float64") /* ty=Tensor[(208), float64] */;
    %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(1), int32] */;
    %949 = cast(%946, dtype="float64") /* ty=Tensor[(208), float64] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?), float64] */;
    %951 = divide(%949, %950) /* ty=Tensor[(208), float64] */;
    %952 = cast(%951, dtype="bool") /* ty=Tensor[(208), bool] */;
    %953 = cast(%var_6070, dtype="bool") /* ty=bool */;
    %954 = cast(%var_6110, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
    %955 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %956 = cast(meta[relay.Constant][69] /* ty=Tensor[(16, 32), uint8] */, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
    %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %958 = bitwise_xor(%935, %936) /* ty=Tensor[(7, 1), int32] */;
    %959 = greater(%952, %953) /* ty=Tensor[(208), bool] */;
    %960 = less_equal(%956, %957) /* ty=Tensor[(16, 32), bool] */;
    (%958, %var_6081, %var_6082, %959, %960)
  };
  %961(%var_6121, %var_6122, %var_6123, %var_6124, %var_6125, %var_6126) /* ty=(Tensor[(7, 1), int32], Tensor[(360), int64], Tensor[(1008), float32], Tensor[(208), bool], Tensor[(16, 32), bool]) */
}

def @func_4712() -> (Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) {
  @func_4710() /* ty=(Tensor[(11, 14, 7), float32], Tensor[(11, 14, 7), uint32]) */
}

def @func_2712(%var_2710: Tensor[(495), int64]) -> (Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) {
  @func_2709(%var_2710) /* ty=(Tensor[(11, 14, 7), float64], Tensor[(5, 9, 11), bool], Tensor[(11, 9), int64], Tensor[(495), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen106/build/output.py", line 2594, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:08] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

