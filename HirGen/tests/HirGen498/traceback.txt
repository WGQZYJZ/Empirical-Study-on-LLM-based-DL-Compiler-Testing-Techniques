==========mod==========
#[version = "0.0.5"]
def @func_4182(%var_4176: Tensor[(3, 14, 6), uint64]) -> Tensor[(3, 14, 6), bool] {
  %0 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %1 = %0.0;
  %2 = cast(%var_4176, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%4, %5) /* ty=Tensor[(3, 14, 6), bool] */
}

def @func_9443() -> (Tensor[(3, 14, 6), uint64],) {
  %6 = @func_8928() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %7 = %6.1;
  (%7,)
}

def @func_10592() -> (Tensor[(3, 14, 6), uint64],) {
  %8 = @func_9224() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%8,)
}

def @func_9344() -> Tensor[(3, 14, 6), float32] {
  @func_4539() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_8518(%var_8507: Tensor[(112), int32]) -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %9 = @func_6064() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) */;
  %10 = cast(%var_8507, dtype="int32") /* ty=Tensor[(112), int32] */;
  %11 = reshape(%10, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %12 = @func_3949(%11) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %13 = %9.1;
  %14 = %12.0;
  (%13, %14, %var_8507)
}

def @func_306(%var_298: uint64) -> Tensor[(3, 14, 6), uint64] {
  %15 = cast(%var_298, dtype="uint64") /* ty=uint64 */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 14, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
  minimum(%15, %16) /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_13236() -> (Tensor[(3, 14, 6), uint8],) {
  %17 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %18 = %17.1;
  (%18,)
}

def @func_3259() -> Tensor[(6, 12, 13), float32] {
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  acos(%19) /* ty=Tensor[(6, 12, 13), float32] */
}

def @func_13364() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(1728), int32]) {
  %20 = @func_8902() /* ty=(Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(1728), int32] */, dtype="int32") /* ty=Tensor[(1728), int32] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(1728), int32] */, dtype="int32") /* ty=Tensor[(1728), int32] */;
  %23 = reshape(%21, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), int32] */;
  %24 = reshape(%22, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), int32] */;
  %25 = @func_7863(%23, %24) /* ty=(Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) */;
  %26 = %20.1;
  %27 = %25.3;
  (%26, %27, meta[relay.Constant][2] /* ty=Tensor[(1728), int32] */)
}

def @func_5362() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %28 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %29 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %30 = %28.0;
  %31 = %29.1;
  (%30, %31)
}

def @func_8150(%var_8101: int16, %var_8139: Tensor[(2, 48), float32]) -> (Tensor[(1, 5, 4), bool], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32], Tensor[(2, 48), float32]) {
  %32 = cast(%var_8101, dtype="bool") /* ty=bool */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 5, 4), int16] */, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
  %34 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %35 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %36 = cast(%var_8139, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %37 = reshape(%36, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %38 = @func_6561(%37) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) */;
  %39 = not_equal(%32, %33) /* ty=Tensor[(1, 5, 4), bool] */;
  %40 = %34.0;
  %41 = %35.1;
  %42 = %38.0;
  (%39, %40, %41, %42, %var_8139)
}

def @func_8928() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %43 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
  %44 = @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%43, %44)
}

def @func_3046() -> (Tensor[(3, 14, 6), uint8],) {
  %45 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%45,)
}

def @func_5756() -> Tensor[(3, 14, 6), float32] {
  %46 = @func_5362() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) */;
  %46.1
}

def @func_1809() -> (Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %47 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %50 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %51 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %52 = log(%49) /* ty=Tensor[(9, 3, 4), float64] */;
  %53 = %50.0;
  %54 = %51.1;
  (%52, %53, %54)
}

def @func_12466() -> Tensor[(3, 14, 6), uint8] {
  @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_2203() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %55 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %58 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %59 = asinh(%57) /* ty=Tensor[(3, 14, 6), float32] */;
  %60 = %58.0;
  %61 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%59, %60, %61)
}

def @func_7358() -> (Tensor[(270), float64],) {
  %62 = @func_7069() /* ty=(Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) */;
  %63 = %62.2;
  (%63,)
}

def @func_12161() -> Tensor[(3, 14, 6), float32] {
  %64 = @func_8409() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %64.0
}

def @func_4383(%var_4351: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) {
  %65 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %66 = %65.1;
  %67 = cast(%66, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
  %68 = reshape(%67, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
  %69 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %70 = cast(%var_4351, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %71 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%66, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %74 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %75 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %76 = @func_4182(%68) /* ty=Tensor[(3, 14, 6), bool] */;
  %77 = %69.1;
  %78 = mod(%72, %73) /* ty=Tensor[(3, 14, 6), float64] */;
  %79 = %74.0;
  %80 = %75.1;
  (%76, %77, %78, %79, %80)
}

def @func_2055(%var_1995: uint64, %var_2047: Tensor[(3, 14, 6), float64]) -> (Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) {
  %81 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="uint32") /* ty=Tensor[(3, 14, 6), uint32] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="uint32") /* ty=Tensor[(3, 14, 6), uint32] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %86 = cast(%var_1995, dtype="uint64") /* ty=uint64 */;
  %87 = reshape(%86, newshape=[]) /* ty=uint64 */;
  %88 = @func_1617(%87) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %89 = %88.4;
  %90 = cast(%89, dtype="uint64") /* ty=uint64 */;
  %91 = reshape(%90, newshape=[]) /* ty=uint64 */;
  %92 = @func_1617(%91) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %93 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %94 = cast(%81, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %95 = log2(%94) /* ty=Tensor[(3, 14, 6), float64] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %97 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %98 = cast(%81, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %99 = sin(%98) /* ty=Tensor[(3, 14, 6), float64] */;
  %100 = cast(%var_2047, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %104 = logical_xor(%84, %85) /* ty=Tensor[(3, 14, 6), uint32] */;
  %105 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  %106 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  %107 = %92.2;
  %108 = %93.1;
  %109 = asin(%96) /* ty=Tensor[(3, 14, 6), float32] */;
  %110 = %97.1;
  %111 = divide(%102, %103) /* ty=Tensor[(3, 14, 6), float64] */;
  (%104, %89, %var_1995, %105, %106, %107, %108, %109, %110, %111)
}

def @func_10188() -> Tensor[(3, 14, 6), uint8] {
  @func_8947() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_13321() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint64]) {
  %112 = @func_11620() /* ty=(Tensor[(4, 14, 2), int32], uint64) */;
  %113 = %112.0;
  %114 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%113, %114)
}

def @func_13071() -> (Tensor[(9, 3, 4), float32],) {
  %115 = @func_8733() /* ty=(Tensor[(9, 3, 4), float32],) */;
  %116 = %115.0;
  (%116,)
}

def @func_8733() -> (Tensor[(9, 3, 4), float32],) {
  %117 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %118 = %117.0;
  (%118,)
}

def @func_12385(%var_12361: Tensor[(112), int32], %var_12370: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], uint64, Tensor[(112), int32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8]) {
  %119 = @func_11265() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %120 = @func_10408() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %121 = cast(%var_12361, dtype="int32") /* ty=Tensor[(112), int32] */;
  %122 = reshape(%121, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %123 = @func_8518(%122) /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="uint8") /* ty=uint8 */;
  %126 = cast(%var_12370, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %127 = reshape(%125, newshape=[]) /* ty=uint8 */;
  %128 = reshape(%126, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
  %129 = %119.0;
  %130 = %120.0;
  %131 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
  %132 = @func_4930(%127, %128) /* ty=Tensor[(5, 4, 1), uint8] */;
  (%129, %130, %131, %124, %var_12361, %132, %var_12370)
}

def @func_12951() -> uint64 {
  @func_6601() /* ty=uint64 */
}

def @func_5088() -> (Tensor[(3, 14, 6), uint8],) {
  %133 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %134 = %133.2;
  (%134,)
}

def @func_10408() -> (Tensor[(3, 14, 6), uint8],) {
  %135 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %136 = %135.5;
  (%136,)
}

def @func_11219(%var_11212: uint8) -> (Tensor[(3, 14, 6), uint64], Tensor[(66), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(10, 2), uint8], uint8, Tensor[(20), uint8]) {
  %137 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %138 = @func_10408() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %139 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %140 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %141 = cast(%var_11212, dtype="uint8") /* ty=uint8 */;
  %142 = cast(meta[relay.Constant][5] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %143 = reshape(%141, newshape=[]) /* ty=uint8 */;
  %144 = reshape(%142, newshape=[10, 2]) /* ty=Tensor[(10, 2), uint8] */;
  %145 = @func_6810(%143, %144) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) */;
  %146 = @func_7485() /* ty=Tensor[(3, 14, 6), uint64] */;
  %147 = @func_4839() /* ty=Tensor[(66), float64] */;
  %148 = %137.0;
  %149 = %138.0;
  %150 = %139.0;
  %151 = %140.1;
  %152 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
  %153 = %145.5;
  (%146, %147, %148, %149, %150, %151, %152, %153, %var_11212, meta[relay.Constant][5] /* ty=Tensor[(20), uint8] */)
}

def @func_4508(%var_4487: Tensor[(252), uint64]) -> (uint64, Tensor[(3, 14, 6), bool], Tensor[(252), uint64], Tensor[(3, 14, 6), uint64]) {
  %154 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %155 = cast(%var_4487, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %156 = reshape(%155, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
  %157 = %154.0;
  %158 = cast(%157, dtype="uint64") /* ty=uint64 */;
  %159 = reshape(%158, newshape=[]) /* ty=uint64 */;
  %160 = @func_4182(%156) /* ty=Tensor[(3, 14, 6), bool] */;
  %161 = @func_306(%159) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%157, %160, %var_4487, %161)
}

def @func_7689(%var_7664: Tensor[(7, 6, 8), uint64], %var_7665: Tensor[(7, 6, 8), uint64]) -> (Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) {
  %162 = cast(%var_7665, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %163 = cast(%var_7665, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %164 = shape_of(%var_7664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_7664, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = less_equal(%165, %166) /* ty=Tensor[(7, 6, 8), bool] */;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %169 = log10(%162) /* ty=Tensor[(7, 6, 8), float32] */;
  %170 = exp(%168) /* ty=Tensor[(7, 6, 8), float64] */;
  (%169, %170)
}

def @func_13790(%var_13718: uint64, %var_13788: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, uint64, Tensor[(3, 14, 6), uint64], Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %171 = cast(%var_13718, dtype="uint64") /* ty=uint64 */;
  %172 = reshape(%171, newshape=[]) /* ty=uint64 */;
  %173 = @func_3512(%172) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %174 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %175 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %176 = cast(%var_13788, dtype="int32") /* ty=Tensor[(112), int32] */;
  %177 = reshape(%176, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %178 = @func_3949(%177) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %179 = @func_12869() /* ty=Tensor[(3, 14, 6), uint64] */;
  %180 = %173.1;
  %181 = %174.0;
  %182 = %175.0;
  %183 = %178.0;
  (%179, %180, %var_13718, %181, %182, %183, %var_13788)
}

def @func_7195() -> Tensor[(3, 14, 6), float32] {
  @func_4539() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_14476() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), bool]) {
  %184 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %185 = @func_7999() /* ty=Tensor[(3, 14, 6), uint64] */;
  %186 = cast(%185, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
  %187 = reshape(%186, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
  %188 = @func_4383(%187) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) */;
  %189 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
  %190 = %184.0;
  %191 = %188.0;
  (%189, %185, %190, %191)
}

def @func_11672() -> (Tensor[(3, 14, 6), uint16],) {
  %192 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  (%192,)
}

def @func_7810(%var_7799: Tensor[(280), bool]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(2, 14, 10), bool], Tensor[(280), bool], Tensor[(3, 14, 6), uint64]) {
  %193 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %194 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %195 = cast(%var_7799, dtype="bool") /* ty=Tensor[(280), bool] */;
  %196 = cast(%var_7799, dtype="bool") /* ty=Tensor[(280), bool] */;
  %197 = reshape(%195, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %198 = reshape(%196, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %199 = @func_2512(%197, %198) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %200 = %193.0;
  %201 = %194.3;
  %202 = %199.0;
  %203 = @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%200, %201, %202, %var_7799, %203)
}

def @func_8947() -> Tensor[(3, 14, 6), uint8] {
  %204 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %204.2
}

def @func_1547() -> (Tensor[(3, 14, 6), uint8], uint64) {
  %205 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %206 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %207 = %205.1;
  %208 = %206.2;
  (%207, %208)
}

def @func_3698() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) {
  %209 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %210 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %211 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %212 = cast(meta[relay.Constant][6] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %213 = reshape(%212, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %214 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %215 = reshape(%214, newshape=[]) /* ty=uint64 */;
  %216 = @func_1617(%215) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %217 = cast(meta[relay.Constant][6] /* ty=Tensor[(66), float32] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %218 = %209.1;
  %219 = %210.0;
  %220 = %211.0;
  %221 = @func_1656(%213) /* ty=Tensor[(6, 11, 1), float32] */;
  %222 = %216.2;
  %223 = asinh(%217) /* ty=Tensor[(66), float64] */;
  (%218, %219, %220, %221, %222, meta[relay.Constant][7] /* ty=uint64 */, %223)
}

def @func_8307() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) {
  %224 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %225 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 12), float32] */, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %226 = reshape(%225, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float32] */;
  %227 = @func_5924(%226) /* ty=(Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) */;
  %228 = %227.0;
  %229 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 12), float32] */, dtype="uint16") /* ty=Tensor[(8, 12), uint16] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="uint16") /* ty=Tensor[(1, 6, 16), uint16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %233 = subtract(%231, %232) /* ty=Tensor[(?, 6, 16), uint16] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(?, 6, 16), float64] */;
  %235 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%228, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %238 = %224.1;
  %239 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %240 = @func_5064() /* ty=Tensor[(3, 14, 6), uint64] */;
  %241 = floor_mod(%236, %237) /* ty=Tensor[(?, 6, 16), float64] */;
  (%238, %239, %240, %241)
}

def @func_10201() -> Tensor[(3, 14, 6), uint8] {
  @func_2958() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_6810(%var_6807: uint8, %var_6808: Tensor[(10, 2), uint8]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) {
  %242 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 8), float64] */;
  %243 = cast(meta[relay.Constant][10] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %244 = reshape(%243, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
  %245 = @func_4383(%244) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) */;
  %246 = cast(%var_6807, dtype="uint8") /* ty=uint8 */;
  %247 = cast(%var_6808, dtype="uint8") /* ty=Tensor[(10, 2), uint8] */;
  %248 = reshape(%246, newshape=[]) /* ty=uint8 */;
  %249 = reshape(%247, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
  %250 = asinh(%242) /* ty=Tensor[(3, 8, 8), float64] */;
  %251 = %245.3;
  %252 = @func_4930(%248, %249) /* ty=Tensor[(5, 4, 1), uint8] */;
  (%250, %251, meta[relay.Constant][10] /* ty=Tensor[(252), uint64] */, %252, %var_6807, %var_6808)
}

def @func_12249() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %253 = @func_2619() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %254 = %253.0;
  %255 = @func_11292() /* ty=Tensor[(3, 14, 6), uint64] */;
  %256 = @func_6574() /* ty=uint64 */;
  (%254, %255, %256)
}

def @func_2478() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) {
  %257 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %258 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %259 = %257.1;
  %260 = %258.1;
  (%259, %260)
}

def @func_8179() -> (Tensor[(3, 14, 6), uint8],) {
  %261 = @func_7898() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %262 = %261.0;
  (%262,)
}

def @func_4600() -> (uint64,) {
  %263 = @func_3816() /* ty=uint64 */;
  (%263,)
}

def @func_2958() -> Tensor[(3, 14, 6), uint8] {
  %264 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %264.2
}

def @func_5670() -> uint64 {
  %265 = @func_4741() /* ty=(uint64,) */;
  %265.0
}

def @func_6520() -> (Tensor[(11, 13, 10), uint8],) {
  %266 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %267 = %266.0;
  (%267,)
}

def @func_7863(%var_7820: Tensor[(9, 16, 12), int32], %var_7821: Tensor[(9, 16, 12), int32]) -> (Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) {
  %268 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %269 = cast(%var_7821, dtype="int32") /* ty=Tensor[(9, 16, 12), int32] */;
  %270 = shape_of(%var_7820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_7820, dtype="int32") /* ty=Tensor[(9, 16, 12), int32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %273 = right_shift(%271, %272) /* ty=Tensor[(9, 16, 12), int32] */;
  %274 = cast(%var_7821, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = %268.1;
  %279 = @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */;
  %280 = equal(%276, %277) /* ty=Tensor[(9, 16, 12), bool] */;
  %281 = @func_6652() /* ty=uint64 */;
  (%278, %279, %280, %281)
}

def @func_3168() -> Tensor[(3, 14, 6), uint8] {
  %282 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %282.0
}

def @func_3373() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %283 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %284 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %285 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %286 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %287 = %283.0;
  %288 = %284.2;
  %289 = %285.1;
  %290 = %286.0;
  (%287, %288, %289, %290)
}

def @func_10102(%var_10078: Tensor[(3, 7, 3), bool]) -> (Tensor[(3, 7, 3), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 7, 3), float32]) {
  %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 7, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %292 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_10078, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %295 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %296 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 7, 3), bool] */, dtype="uint8") /* ty=Tensor[(3, 7, 3), uint8] */;
  %297 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_10078, dtype="uint8") /* ty=Tensor[(3, 7, 3), uint8] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %300 = right_shift(%298, %299) /* ty=Tensor[(3, 7, 3), uint8] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
  %302 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_10078, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %305 = logical_or(%293, %294) /* ty=Tensor[(3, 7, 3), bool] */;
  %306 = %295.0;
  %307 = floor_divide(%303, %304) /* ty=Tensor[(3, 7, 3), float32] */;
  (%305, %306, %307)
}

def @func_1617(%var_1595: uint64) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
  %308 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %309 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %310 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %311 = cast(%var_1595, dtype="uint64") /* ty=uint64 */;
  %312 = reshape(%311, newshape=[]) /* ty=uint64 */;
  %313 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %314 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %315 = %308.1;
  %316 = %309.0;
  %317 = %310.0;
  %318 = @func_306(%312) /* ty=Tensor[(3, 14, 6), uint64] */;
  %319 = %313.0;
  %320 = %314.1;
  (%315, %316, %317, %318, %var_1595, %319, %320)
}

def @func_10138(%var_10124: Tensor[(13, 11, 9), int32], %var_10125: Tensor[(13, 11, 9), int32]) -> (Tensor[(13, 11, 9), bool], Tensor[(13, 11, 9), float32], Tensor[(3, 14, 6), uint64]) {
  %321 = cast(%var_10125, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %322 = shape_of(%var_10124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_10124, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(%var_10125, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %326 = @func_6265() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %327 = less_equal(%323, %324) /* ty=Tensor[(13, 11, 9), bool] */;
  %328 = log(%325) /* ty=Tensor[(13, 11, 9), float32] */;
  %329 = %326.0;
  (%327, %328, %329)
}

def @func_10473() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
  %330 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %331 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %332 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  %333 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %334 = %330.0;
  %335 = %331.0;
  (%332, %333, %334, %335)
}

def @func_11620() -> (Tensor[(4, 14, 2), int32], uint64) {
  %336 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %337 = %336.1;
  %338 = @func_3816() /* ty=uint64 */;
  (%337, %338)
}

def @func_3310() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %339 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %340 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %341 = %339.0;
  %342 = %340.0;
  (%341, %342)
}

def @func_6226() -> (Tensor[(3, 14, 6), float32],) {
  %343 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %346 = cosh(%345) /* ty=Tensor[(3, 14, 6), float32] */;
  (%346,)
}

def @func_9132() -> uint64 {
  @func_4269() /* ty=uint64 */
}

def @func_13823() -> Tensor[(3, 14, 6), float32] {
  %347 = @func_7155() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %347.0
}

def @func_1899() -> Tensor[(3, 14, 6), float32] {
  %348 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %351 = atan(%350) /* ty=Tensor[(3, 14, 6), float64] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %353 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%349, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%354, %355) /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_6652() -> uint64 {
  %356 = @func_4600() /* ty=(uint64,) */;
  %356.0
}

def @func_2668() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) {
  %357 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %358 = %357.2;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %360 = cast(meta[relay.Constant][12] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %361 = reshape(%360, newshape=[]) /* ty=uint64 */;
  %362 = @func_1780(%361) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
  %363 = @func_2478() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) */;
  %364 = rsqrt(%359) /* ty=Tensor[(3, 14, 6), float64] */;
  %365 = %362.1;
  %366 = %363.0;
  (%364, %365, meta[relay.Constant][12] /* ty=uint64 */, %366)
}

def @func_2141() -> Tensor[(3, 14, 6), uint8] {
  @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_8217() -> Tensor[(5, 15, 13), float64] {
  %367 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 13), float64] */;
  tan(%367) /* ty=Tensor[(5, 15, 13), float64] */
}

def @func_9224() -> Tensor[(3, 14, 6), uint64] {
  @func_6852() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_10720() -> (Tensor[(3, 14, 6), uint8],) {
  %368 = @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%368,)
}

def @func_9764() -> (uint64, Tensor[(9, 3, 4), float64]) {
  %369 = @func_6725() /* ty=(uint64,) */;
  %370 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %371 = %369.0;
  %372 = %370.1;
  (%371, %372)
}

def @func_10970(%var_10903: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(66), float32], Tensor[(7, 156), float64], Tensor[(7, 156), bool], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  %373 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %374 = cast(meta[relay.Constant][14] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %375 = cast(%var_10903, dtype="float32") /* ty=Tensor[(66), float32] */;
  %376 = reshape(%374, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %377 = reshape(%375, newshape=[1, 66]) /* ty=Tensor[(1, 66), float32] */;
  %378 = @func_8614(%376, %377) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) */;
  %379 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 156), float64] */, dtype="float32") /* ty=Tensor[(7, 156), float32] */;
  %380 = acos(%379) /* ty=Tensor[(7, 156), float32] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 156), float64] */, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %383 = reshape(%382, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
  %384 = @func_6017(%383) /* ty=Tensor[(13, 14, 6), float64] */;
  %385 = cast(%384, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
  %386 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %387 = cast(%380, dtype="bool") /* ty=Tensor[(7, 156), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %389 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %390 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %391 = @func_8672() /* ty=(Tensor[(6, 12, 13), float32],) */;
  %392 = @func_8179() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %393 = %373.0;
  %394 = %378.1;
  %395 = sin(%381) /* ty=Tensor[(7, 156), float64] */;
  %396 = less(%387, %388) /* ty=Tensor[(7, 156), bool] */;
  %397 = %389.0;
  %398 = @func_9286() /* ty=Tensor[(3, 14, 6), uint8] */;
  %399 = %390.1;
  %400 = %391.0;
  %401 = %392.0;
  (%393, %394, meta[relay.Constant][14] /* ty=Tensor[(224), float64] */, %var_10903, %395, %396, %397, %398, %399, %400, %401)
}

def @func_5315() -> (uint64, Tensor[(9, 3, 4), float64]) {
  %402 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %405 = @func_4847() /* ty=uint64 */;
  %406 = rsqrt(%404) /* ty=Tensor[(9, 3, 4), float64] */;
  (%405, %406)
}

def @func_12850(%var_12842: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64],) {
  %407 = cast(%var_12842, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %408 = asinh(%407) /* ty=Tensor[(16, 1, 5), float64] */;
  (%408,)
}

def @func_3735(%var_3729: Tensor[(270), float64]) -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) {
  %409 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %410 = cast(%var_3729, dtype="float64") /* ty=Tensor[(270), float64] */;
  %411 = %409.2;
  %412 = cast(%411, dtype="uint64") /* ty=uint64 */;
  %413 = reshape(%410, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float64] */;
  %414 = reshape(%412, newshape=[]) /* ty=uint64 */;
  %415 = @func_3226(%413, %414) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %416 = %415.0;
  (%411, %416, %var_3729)
}

def @func_12226(%var_12204: Tensor[(6, 4, 11), int16], %var_12205: Tensor[(6, 4, 11), int16]) -> (Tensor[(6, 4, 11), int16], uint64) {
  %417 = cast(%var_12205, dtype="int16") /* ty=Tensor[(6, 4, 11), int16] */;
  %418 = shape_of(%var_12204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_12204, dtype="int16") /* ty=Tensor[(6, 4, 11), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = left_shift(%419, %420) /* ty=Tensor[(6, 4, 11), int16] */;
  %422 = @func_6652() /* ty=uint64 */;
  (%421, %422)
}

def @func_9604() -> (Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) {
  %423 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  %424 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="int64") /* ty=Tensor[(3, 14, 6), int64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int64") /* ty=Tensor[(3, 14, 6), int64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %428 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %429 = bitwise_xor(%426, %427) /* ty=Tensor[(3, 14, 6), int64] */;
  %430 = @func_7917() /* ty=Tensor[(16, 11, 10), uint64] */;
  %431 = %428.0;
  (%429, %430, %431)
}

def @func_6901() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %432 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %433 = %432.0;
  %434 = @func_5064() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%433, %434)
}

def @func_9804() -> (Tensor[(3, 14, 6), float32],) {
  %435 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %436 = %435.0;
  (%436,)
}

def @func_11292() -> Tensor[(3, 14, 6), uint64] {
  %437 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %437.0
}

def @func_9981() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %438 = @func_9804() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %439 = %438.0;
  %440 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
  (%439, %440)
}

def @func_11039() -> (uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %441 = @func_6725() /* ty=(uint64,) */;
  %442 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %443 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %444 = @func_9390() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %445 = %441.0;
  %446 = %442.1;
  %447 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %448 = %443.2;
  %449 = %444.0;
  (%445, %446, %447, %448, %449)
}

def @func_13535() -> Tensor[(?, 6, 16), float64] {
  %450 = @func_8307() /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) */;
  %450.3
}

def @func_13514(%var_13489: Tensor[(10, 2, 16), int8]) -> (Tensor[(10, 2, 16), float64], Tensor[(10, 2, 16), uint16], Tensor[(3, 14, 6), uint8]) {
  %451 = cast(%var_13489, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %452 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 16), int8] */, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  %453 = shape_of(%var_13489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_13489, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = not_equal(%454, %455) /* ty=Tensor[(10, 2, 16), bool] */;
  %457 = cast(%456, dtype="uint16") /* ty=Tensor[(10, 2, 16), uint16] */;
  %458 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 16), int8] */, dtype="uint16") /* ty=Tensor[(10, 2, 16), uint16] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %461 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %462 = cosh(%451) /* ty=Tensor[(10, 2, 16), float64] */;
  %463 = bitwise_or(%459, %460) /* ty=Tensor[(10, 2, 16), uint16] */;
  %464 = %461.2;
  (%462, %463, %464)
}

def @func_5064() -> Tensor[(3, 14, 6), uint64] {
  %465 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %465.4
}

def @func_6310() -> Tensor[(3, 14, 6), uint8] {
  %466 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %466.1
}

def @func_13649(%var_13630: Tensor[(270), float64]) -> (Tensor[(270), float64], Tensor[(270), bool]) {
  %467 = @func_10234() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(270), float64]) */;
  %468 = %467.1;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(270), float64] */;
  %470 = cast(%var_13630, dtype="bool") /* ty=Tensor[(270), bool] */;
  %471 = shape_of(%468, dtype="int32") /* ty=Tensor[(1), int32] */;
  %472 = cast(%468, dtype="bool") /* ty=Tensor[(270), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), bool] */;
  %474 = acos(%469) /* ty=Tensor[(270), float64] */;
  %475 = less_equal(%472, %473) /* ty=Tensor[(270), bool] */;
  (%474, %475)
}

def @func_7788() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint8]) {
  %476 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %477 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  %478 = %476.1;
  (%477, %478)
}

def @func_9251() -> Tensor[(3, 14, 6), uint64] {
  %479 = @func_2264() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */;
  %479.1
}

def @func_2727() -> (Tensor[(3, 14, 6), float64],) {
  %480 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %482 = exp(%481) /* ty=Tensor[(3, 14, 6), float64] */;
  (%482,)
}

def @func_6354(%var_6325: Tensor[(5, 4), uint8]) -> (uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) {
  %483 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %484 = %483.1;
  %485 = cast(%484, dtype="uint8") /* ty=uint8 */;
  %486 = cast(%var_6325, dtype="uint8") /* ty=Tensor[(5, 4), uint8] */;
  %487 = reshape(%485, newshape=[]) /* ty=uint8 */;
  %488 = reshape(%486, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
  %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
  %490 = cast(meta[relay.Constant][19] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %491 = reshape(%489, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %492 = reshape(%490, newshape=[66]) /* ty=Tensor[(66), float32] */;
  %493 = @func_5505(%491, %492) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) */;
  %494 = @func_4930(%487, %488) /* ty=Tensor[(5, 4, 1), uint8] */;
  %495 = %493.4;
  %496 = @func_5670() /* ty=uint64 */;
  (%484, %494, %var_6325, %495, meta[relay.Constant][18] /* ty=Tensor[(16, 14), float64] */, meta[relay.Constant][19] /* ty=Tensor[(66), float32] */, %496)
}

def @func_12496() -> (Tensor[(3, 14, 6), uint64],) {
  %497 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %498 = %497.0;
  (%498,)
}

def @func_2428() -> (Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) {
  %499 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %500 = %499.0;
  %501 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %505 = floor_mod(%503, %504) /* ty=Tensor[(3, 14, 6), float64] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %507 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %508 = log10(%506) /* ty=Tensor[(3, 14, 6), float32] */;
  %509 = %507.0;
  (%508, %509)
}

def @func_6786() -> (Tensor[(3, 14, 6), uint8],) {
  %510 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %511 = %510.5;
  (%511,)
}

def @func_6159() -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  %512 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %513 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%512, %513)
}

def @func_2559() -> (uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %514 = @func_2389() /* ty=(uint64,) */;
  %515 = @func_2389() /* ty=(uint64,) */;
  %516 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %517 = %514.0;
  %518 = %515.0;
  %519 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
  %520 = %516.1;
  (%517, %518, %519, %520)
}

def @func_7999() -> Tensor[(3, 14, 6), uint64] {
  %521 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %521.0
}

def @func_2931() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %522 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %523 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %524 = %522.0;
  %525 = %523.1;
  (%524, %525)
}

def @func_2751(%var_2741: Tensor[(280), bool]) -> (Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  %526 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %527 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %528 = cast(%var_2741, dtype="bool") /* ty=Tensor[(280), bool] */;
  %529 = cast(%var_2741, dtype="bool") /* ty=Tensor[(280), bool] */;
  %530 = reshape(%528, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %531 = reshape(%529, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %532 = @func_2512(%530, %531) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %533 = %526.0;
  %534 = %527.1;
  %535 = %532.0;
  (%533, %534, %535, %var_2741)
}

def @func_4839() -> Tensor[(66), float64] {
  %536 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %536.6
}

def @func_11753(%var_11724: Tensor[(2, 5, 13), float32]) -> (Tensor[(2, 5, 13), float32], Tensor[(3, 14, 6), float32], Tensor[(4, 14, 2), int32]) {
  %537 = cast(%var_11724, dtype="float32") /* ty=Tensor[(2, 5, 13), float32] */;
  %538 = @func_11265() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %539 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %540 = log(%537) /* ty=Tensor[(2, 5, 13), float32] */;
  %541 = %538.0;
  %542 = %539.1;
  (%540, %541, %542)
}

def @func_10528() -> (uint64, uint64, Tensor[(6, 12, 13), float32], uint64) {
  %543 = @func_5315() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
  %544 = @func_9764() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
  %545 = @func_2389() /* ty=(uint64,) */;
  %546 = %543.0;
  %547 = %544.0;
  %548 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %549 = %545.0;
  (%546, %547, %548, %549)
}

def @func_6950(%var_6931: Tensor[(96), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(96), float32], Tensor[(16, 11, 10), bool]) {
  %550 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %551 = cast(%var_6931, dtype="float32") /* ty=Tensor[(96), float32] */;
  %552 = reshape(%551, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %553 = @func_6561(%552) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) */;
  %554 = %553.1;
  %555 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 11, 10), uint64] */, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = %550.0;
  %560 = less(%557, %558) /* ty=Tensor[(16, 11, 10), bool] */;
  (%559, %var_6931, %560)
}

def @func_13114(%var_13104: Tensor[(14, 15, 10), float64]) -> Tensor[(14, 15, 10), float64] {
  %561 = cast(%var_13104, dtype="float64") /* ty=Tensor[(14, 15, 10), float64] */;
  asin(%561) /* ty=Tensor[(14, 15, 10), float64] */
}

def @func_12271(%var_12265: bool) -> Tensor[(13, 3, 8), bool] {
  %562 = cast(%var_12265, dtype="bool") /* ty=bool */;
  %563 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
  logical_and(%562, %563) /* ty=Tensor[(13, 3, 8), bool] */
}

def @func_4984() -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %564 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %565 = cast(meta[relay.Constant][23] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %566 = reshape(%565, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %567 = @func_3949(%566) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %568 = %564.3;
  %569 = %567.0;
  (%568, %569, meta[relay.Constant][23] /* ty=Tensor[(112), int32] */)
}

def @func_10688() -> (Tensor[(3, 14, 6), uint8],) {
  %570 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %571 = %570.0;
  (%571,)
}

def @func_3768() -> (uint64, Tensor[(3, 14, 6), float64]) {
  %572 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %573 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %574 = %572.2;
  %575 = %573.0;
  (%574, %575)
}

def @func_4734() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) {
  %576 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %577 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %578 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %579 = %576.1;
  %580 = %577.0;
  %581 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  %582 = %578.0;
  (%579, %580, %581, %582)
}

def @func_1920() -> (Tensor[(3, 14, 6), uint8],) {
  %583 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%583,)
}

def @func_4930(%var_4922: uint8, %var_4923: Tensor[(5, 4, 1), uint8]) -> Tensor[(5, 4, 1), uint8] {
  %584 = cast(%var_4922, dtype="uint8") /* ty=uint8 */;
  %585 = cast(%var_4923, dtype="uint8") /* ty=Tensor[(5, 4, 1), uint8] */;
  logical_xor(%584, %585) /* ty=Tensor[(5, 4, 1), uint8] */
}

def @func_1867() -> Tensor[(3, 14, 6), uint8] {
  %586 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %586.1
}

def @func_3816() -> uint64 {
  %587 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %587.0
}

def @func_3949(%var_3938: Tensor[(4, 14, 2), int32]) -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) {
  %588 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 14, 2), int32] */;
  %589 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_3938, dtype="int32") /* ty=Tensor[(4, 14, 2), int32] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %592 = multiply(%590, %591) /* ty=Tensor[(4, 14, 2), int32] */;
  %593 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%592, %593)
}

def @func_3098() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %594 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %595 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %596 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %597 = reshape(%596, newshape=[]) /* ty=uint64 */;
  %598 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %599 = %594.2;
  %600 = %595.0;
  %601 = @func_306(%597) /* ty=Tensor[(3, 14, 6), uint64] */;
  %602 = %598.0;
  %603 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%599, %600, %601, meta[relay.Constant][25] /* ty=uint64 */, %602, %603)
}

def @func_7485() -> Tensor[(3, 14, 6), uint64] {
  %604 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %604.0
}

def @main(%var_14480: Tensor[(4, 2, 6), float32]) -> (Tensor[(4, 2, 6), float32], Tensor[(4, 2, 6), float64]) {
  %605 = cast(%var_14480, dtype="float32") /* ty=Tensor[(4, 2, 6), float32] */;
  %606 = cast(%var_14480, dtype="float64") /* ty=Tensor[(4, 2, 6), float64] */;
  %607 = cosh(%605) /* ty=Tensor[(4, 2, 6), float32] */;
  %608 = sin(%606) /* ty=Tensor[(4, 2, 6), float64] */;
  (%607, %608)
}

def @func_4847() -> uint64 {
  %609 = @func_4600() /* ty=(uint64,) */;
  %609.0
}

def @func_5979(%var_5972: Tensor[(224), float64]) -> (Tensor[(16, 11, 10), uint64], Tensor[(16, 1, 14), float64], Tensor[(224), float64]) {
  %610 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %611 = cast(%var_5972, dtype="float64") /* ty=Tensor[(224), float64] */;
  %612 = reshape(%611, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %613 = @func_2095(%612) /* ty=(Tensor[(16, 1, 14), float64],) */;
  %614 = %610.2;
  %615 = %613.0;
  (%614, %615, %var_5972)
}

def @func_11505() -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) {
  %616 = @func_6388() /* ty=(Tensor[(3, 14, 6), float64],) */;
  %617 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %618 = %616.0;
  %619 = @func_6652() /* ty=uint64 */;
  %620 = %617.1;
  (%618, %619, %620)
}

def @func_12069() -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
  %621 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %622 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %623 = %621.0;
  %624 = %622.5;
  %625 = @func_10201() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%623, %624, %625)
}

def @func_12993() -> uint64 {
  @func_6574() /* ty=uint64 */
}

def @func_11993() -> uint64 {
  %626 = @func_7338() /* ty=(uint64,) */;
  %626.0
}

def @func_13030() -> (Tensor[(3, 14, 6), uint64], Tensor[(6, 12, 13), float32]) {
  %627 = @func_9443() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %628 = @func_8672() /* ty=(Tensor[(6, 12, 13), float32],) */;
  %629 = %627.0;
  %630 = %628.0;
  (%629, %630)
}

def @func_2619() -> (Tensor[(3, 14, 6), uint64],) {
  %631 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_9064() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %633 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
  %634 = @func_8043() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%633, %634)
}

def @func_1370() -> (Tensor[(3, 14, 6), uint64],) {
  %635 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %636 = %635.1;
  (%636,)
}

def @func_3789() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %637 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %638 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %639 = %637.1;
  %640 = %638.3;
  (%639, %640)
}

def @func_6265() -> (Tensor[(3, 14, 6), uint64],) {
  %641 = @func_4768() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %642 = %641.0;
  (%642,)
}

def @func_6561(%var_6551: Tensor[(1, 96), float32]) -> (Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) {
  %643 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %644 = %643.0;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %646 = cast(%var_6551, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %647 = reshape(%646, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float32] */;
  %648 = @func_5924(%647) /* ty=(Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) */;
  %649 = log(%645) /* ty=Tensor[(3, 14, 6), float32] */;
  %650 = %648.4;
  (%649, %650, %var_6551)
}

def @func_2581() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  %651 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %652 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %653 = %651.0;
  %654 = %652.0;
  (%653, %654)
}

def @func_6725() -> (uint64,) {
  %655 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %656 = %655.0;
  (%656,)
}

def @func_11280() -> (uint64,) {
  %657 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %658 = %657.2;
  (%658,)
}

def @func_9390() -> (Tensor[(3, 14, 6), uint64],) {
  %659 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%659,)
}

def @func_7017(%var_6995: Tensor[(10, 28), bool], %var_6998: Tensor[(4, 56), float64]) -> (Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(10, 28), bool], Tensor[(16, 1, 14), float64], Tensor[(4, 56), float64], Tensor[(3, 14, 6), uint64]) {
  %660 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %661 = @func_6725() /* ty=(uint64,) */;
  %662 = cast(%var_6995, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %663 = cast(%var_6995, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %664 = reshape(%662, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %665 = reshape(%663, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %666 = @func_2512(%664, %665) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %667 = cast(%var_6998, dtype="float64") /* ty=Tensor[(4, 56), float64] */;
  %668 = reshape(%667, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %669 = @func_2095(%668) /* ty=(Tensor[(16, 1, 14), float64],) */;
  %670 = @func_2264() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */;
  %671 = %660.0;
  %672 = %661.0;
  %673 = %666.1;
  %674 = %669.0;
  %675 = %670.1;
  (%671, %672, %673, %var_6995, %674, %var_6998, %675)
}

def @func_9862(%var_9836: Tensor[(13, 8, 15), uint16], %var_9837: Tensor[(13, 8, 15), uint16]) -> (Tensor[(13, 8, 15), uint16], Tensor[(3, 14, 6), uint8]) {
  %676 = cast(%var_9837, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %677 = shape_of(%var_9836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_9836, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %680 = maximum(%678, %679) /* ty=Tensor[(13, 8, 15), uint16] */;
  %681 = @func_8947() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%680, %681)
}

def @func_8201() -> uint64 {
  %682 = @func_6725() /* ty=(uint64,) */;
  %682.0
}

def @func_13388() -> (Tensor[(3, 14, 6), uint64],) {
  %683 = @func_7999() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%683,)
}

def @func_11977() -> uint64 {
  %684 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %684.0
}

def @func_14384(%var_14336: uint64, %var_14359: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(252), float64], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint8], Tensor[(112), int32], Tensor[(16, 11, 1), bool]) {
  %685 = cast(%var_14336, dtype="uint64") /* ty=uint64 */;
  %686 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %687 = reshape(%685, newshape=[]) /* ty=uint64 */;
  %688 = reshape(%686, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
  %689 = @func_2055(%687, %688) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
  %690 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %691 = cast(%var_14359, dtype="int32") /* ty=Tensor[(112), int32] */;
  %692 = reshape(%691, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %693 = @func_3949(%692) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %694 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %697 = cast(%var_14336, dtype="bool") /* ty=bool */;
  %698 = %689.5;
  %699 = %690.3;
  %700 = %693.1;
  %701 = logical_and(%696, %697) /* ty=Tensor[(16, 11, 1), bool] */;
  (%698, meta[relay.Constant][26] /* ty=Tensor[(252), float64] */, %699, %700, %var_14359, %701)
}

def @func_14199() -> (Tensor[(3, 14, 6), float64],) {
  %702 = @func_11505() /* ty=(Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) */;
  %703 = %702.0;
  (%703,)
}

def @func_11909() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %704 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %705 = @func_7485() /* ty=Tensor[(3, 14, 6), uint64] */;
  %706 = %704.0;
  (%705, %706)
}

def @func_7955(%var_7938: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), int16], Tensor[(3, 14, 6), uint8], Tensor[(3, 8, 8), float64], uint8, Tensor[(20, 1), uint8]) {
  %707 = @func_6786() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %708 = @func_6265() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %709 = %708.0;
  %710 = cast(%var_7938, dtype="int16") /* ty=Tensor[(3, 14, 6), int16] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="int16") /* ty=Tensor[(3, 14, 6), int16] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %714 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %715 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %716 = cast(meta[relay.Constant][28] /* ty=Tensor[(20, 1), uint8] */, dtype="uint8") /* ty=Tensor[(20, 1), uint8] */;
  %717 = reshape(%715, newshape=[]) /* ty=uint8 */;
  %718 = reshape(%716, newshape=[10, 2]) /* ty=Tensor[(10, 2), uint8] */;
  %719 = @func_6810(%717, %718) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) */;
  %720 = %707.0;
  %721 = bitwise_or(%712, %713) /* ty=Tensor[(3, 14, 6), int16] */;
  %722 = %714.0;
  %723 = %719.0;
  (%720, %721, %722, %723, meta[relay.Constant][27] /* ty=uint8 */, meta[relay.Constant][28] /* ty=Tensor[(20, 1), uint8] */)
}

def @func_14451() -> uint64 {
  @func_4847() /* ty=uint64 */
}

def @func_3877() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
  %724 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %725 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %726 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %727 = %724.1;
  %728 = %725.2;
  %729 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %730 = %726.0;
  %731 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%727, %728, %729, %730, %731)
}

def @func_11265() -> (Tensor[(3, 14, 6), float32],) {
  %732 = @func_9604() /* ty=(Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) */;
  %733 = %732.2;
  (%733,)
}

def @func_10353() -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32]) {
  %734 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %735 = reshape(%734, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %736 = @func_3735(%735) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %737 = @func_9132() /* ty=uint64 */;
  %738 = cast(%737, dtype="uint64") /* ty=uint64 */;
  %739 = reshape(%738, newshape=[]) /* ty=uint64 */;
  %740 = @func_1780(%739) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
  %741 = @func_9438() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) */;
  %742 = %736.1;
  %743 = %740.1;
  %744 = %741.2;
  (%737, %742, meta[relay.Constant][29] /* ty=Tensor[(270), float64] */, %743, %744)
}

def @func_8724() -> (Tensor[(3, 14, 6), uint8],) {
  %745 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %746 = %745.1;
  (%746,)
}

def @func_11390() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %747 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
  %748 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  (%747, %748)
}

def @func_6601() -> uint64 {
  %749 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %749.1
}

def @func_1727() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %750 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %751 = %750.0;
  %752 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%751, %752)
}

def @func_6017(%var_6014: Tensor[(13, 14, 6), float64]) -> Tensor[(13, 14, 6), float64] {
  %753 = cast(%var_6014, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
  acosh(%753) /* ty=Tensor[(13, 14, 6), float64] */
}

def @func_7428() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) {
  %754 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %755 = @func_4741() /* ty=(uint64,) */;
  %756 = %754.1;
  %757 = %755.0;
  %758 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  (%756, %757, %758)
}

def @func_6064() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) {
  %759 = @func_2958() /* ty=Tensor[(3, 14, 6), uint8] */;
  %760 = @func_4269() /* ty=uint64 */;
  %761 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%759, %760, %761)
}

def @func_7069() -> (Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) {
  %762 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %763 = cast(meta[relay.Constant][30] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %764 = reshape(%763, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %765 = @func_3735(%764) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %766 = %762.0;
  %767 = %765.0;
  (%766, %767, meta[relay.Constant][30] /* ty=Tensor[(270), float64] */)
}

def @func_8459() -> (Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) {
  %768 = @func_2478() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) */;
  %769 = cast(meta[relay.Constant][31] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %770 = reshape(%769, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %771 = @func_3735(%770) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %772 = %768.0;
  %773 = %771.2;
  (%772, %773, meta[relay.Constant][31] /* ty=Tensor[(270), float64] */)
}

def @func_9073() -> (uint64,) {
  %774 = @func_7338() /* ty=(uint64,) */;
  %775 = %774.0;
  (%775,)
}

def @func_9785() -> (Tensor[(3, 14, 6), uint8],) {
  %776 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
  %777 = %776.0;
  (%777,)
}

def @func_8382() -> (uint64,) {
  %778 = @func_7338() /* ty=(uint64,) */;
  %779 = %778.0;
  (%779,)
}

def @func_14406() -> (Tensor[(3, 14, 6), uint8],) {
  %780 = @func_9785() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %781 = %780.0;
  (%781,)
}

def @func_3936() -> (Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) {
  %782 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 1), float32] */;
  %783 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %784 = erf(%782) /* ty=Tensor[(16, 11, 1), float32] */;
  %785 = %783.1;
  (%784, %785)
}

def @func_8409() -> (Tensor[(3, 14, 6), float32],) {
  %786 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
  (%786,)
}

def @func_12825() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8]) {
  %787 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %788 = @func_6520() /* ty=(Tensor[(11, 13, 10), uint8],) */;
  %789 = %787.0;
  %790 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
  %791 = %788.0;
  (%789, %790, %791)
}

def @func_1219() -> (Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
  %792 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
  %793 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %794 = reshape(%793, newshape=[]) /* ty=uint64 */;
  %795 = asin(%792) /* ty=Tensor[(9, 3, 4), float32] */;
  %796 = @func_306(%794) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%795, %796, meta[relay.Constant][34] /* ty=uint64 */)
}

def @func_13873() -> (uint64, Tensor[(3, 14, 6), uint64]) {
  %797 = @func_9443() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %798 = @func_11872() /* ty=uint64 */;
  %799 = %797.0;
  (%798, %799)
}

def @func_3226(%var_3189: Tensor[(2, 15, 9), float64], %var_3222: uint64) -> (Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %800 = cast(%var_3189, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %801 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %802 = cast(%var_3222, dtype="uint64") /* ty=uint64 */;
  %803 = reshape(%802, newshape=[]) /* ty=uint64 */;
  %804 = sinh(%800) /* ty=Tensor[(2, 15, 9), float64] */;
  %805 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
  %806 = %801.0;
  %807 = @func_306(%803) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%804, %805, %806, %807, %var_3222)
}

def @func_5924(%var_5851: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) {
  %808 = cast(%var_5851, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
  %809 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %810 = cast(%var_5851, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %811 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %812 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %813 = cast(%var_5851, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %814 = erf(%808) /* ty=Tensor[(1, 6, 16), float32] */;
  %815 = %809.1;
  %816 = rsqrt(%810) /* ty=Tensor[(1, 6, 16), float64] */;
  %817 = %811.0;
  %818 = %812.2;
  %819 = log10(%813) /* ty=Tensor[(1, 6, 16), float64] */;
  (%814, %815, %816, %817, %818, %819)
}

def @func_3906() -> Tensor[(3, 14, 6), float32] {
  %820 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %820.0
}

def @func_4124(%var_4015: Tensor[(2, 14, 10), bool], %var_4057: Tensor[(270), float64], %var_4061: Tensor[(140, 2), float64], %var_4071: Tensor[(140, 2), float64]) -> (uint64, Tensor[(2, 14, 10), int16], Tensor[(3, 14, 6), uint8], Tensor[(140, 2), int32], Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(140, 2), int16], Tensor[(140, 2), bool], Tensor[(140, 2), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %821 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %822 = cast(meta[relay.Constant][35] /* ty=Tensor[(140, 2), bool] */, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %823 = reshape(%822, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %824 = @func_2751(%823) /* ty=(Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) */;
  %825 = %824.2;
  %826 = cast(%var_4015, dtype="int16") /* ty=Tensor[(2, 14, 10), int16] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="int16") /* ty=Tensor[(2, 14, 10), int16] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %830 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %831 = cast(meta[relay.Constant][35] /* ty=Tensor[(140, 2), bool] */, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
  %832 = asin(%831) /* ty=Tensor[(140, 2), float32] */;
  %833 = cast(%825, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%832, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %837 = not_equal(%835, %836) /* ty=Tensor[(140, 2), bool] */;
  %838 = cast(%832, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(2), int32] */;
  %840 = cast(%837, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %842 = cast(%var_4057, dtype="float64") /* ty=Tensor[(270), float64] */;
  %843 = reshape(%842, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %844 = @func_3735(%843) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %845 = cast(%837, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %846 = exp(%845) /* ty=Tensor[(140, 2), float64] */;
  %847 = cast(%var_4071, dtype="int16") /* ty=Tensor[(140, 2), int16] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(2), int32] */;
  %849 = cast(%846, dtype="int16") /* ty=Tensor[(140, 2), int16] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %851 = cast(%825, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %852 = shape_of(%832, dtype="int32") /* ty=Tensor[(2), int32] */;
  %853 = cast(%832, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %855 = cast(%var_4061, dtype="uint64") /* ty=Tensor[(140, 2), uint64] */;
  %856 = shape_of(%846, dtype="int32") /* ty=Tensor[(2), int32] */;
  %857 = cast(%846, dtype="uint64") /* ty=Tensor[(140, 2), uint64] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %859 = logical_xor(%857, %858) /* ty=Tensor[(140, 2), uint64] */;
  %860 = cast(%846, dtype="uint8") /* ty=Tensor[(140, 2), uint8] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(2), int32] */;
  %862 = cast(%859, dtype="uint8") /* ty=Tensor[(140, 2), uint8] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %864 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %865 = %821.1;
  %866 = cast(%865, dtype="uint64") /* ty=uint64 */;
  %867 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %869 = reshape(%866, newshape=[]) /* ty=uint64 */;
  %870 = reshape(%868, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
  %871 = @func_2055(%869, %870) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
  %872 = bitwise_or(%828, %829) /* ty=Tensor[(2, 14, 10), int16] */;
  %873 = %830.0;
  %874 = bitwise_or(%840, %841) /* ty=Tensor[(140, 2), int32] */;
  %875 = %844.1;
  %876 = bitwise_xor(%849, %850) /* ty=Tensor[(140, 2), int16] */;
  %877 = logical_or(%853, %854) /* ty=Tensor[(140, 2), bool] */;
  %878 = add(%862, %863) /* ty=Tensor[(140, 2), uint8] */;
  %879 = %864.0;
  %880 = %871.8;
  (%865, %872, %873, %874, %875, %var_4057, %876, %877, %878, %867, %879, %880)
}

def @func_11331(%var_11296: int16, %var_11297: Tensor[(6, 15, 12), int16]) -> (Tensor[(6, 15, 12), int16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
  %881 = cast(%var_11296, dtype="int16") /* ty=int16 */;
  %882 = cast(%var_11297, dtype="int16") /* ty=Tensor[(6, 15, 12), int16] */;
  %883 = @func_8179() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %884 = bitwise_or(%881, %882) /* ty=Tensor[(6, 15, 12), int16] */;
  %885 = @func_7080() /* ty=Tensor[(3, 14, 6), float32] */;
  %886 = %883.0;
  (%884, %885, %886)
}

def @func_11793() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
  %887 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %888 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %889 = %887.1;
  %890 = %888.2;
  %891 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%889, %890, %891)
}

def @func_7508() -> Tensor[(3, 14, 6), uint8] {
  %892 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %892.1
}

def @func_13587() -> (Tensor[(3, 14, 6), uint8],) {
  %893 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%893,)
}

def @func_4689() -> (Tensor[(3, 14, 6), uint8],) {
  %894 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %895 = %894.0;
  (%895,)
}

def @func_13935() -> (Tensor[(3, 14, 6), float32],) {
  %896 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %897 = %896.0;
  (%897,)
}

def @func_12092() -> (uint64,) {
  %898 = @func_6574() /* ty=uint64 */;
  (%898,)
}

def @func_2812() -> (Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
  %899 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %900 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %903 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %904 = logical_xor(%901, %902) /* ty=Tensor[(11, 13, 10), uint8] */;
  %905 = %903.0;
  (%904, %905)
}

def @func_4636() -> Tensor[(3, 14, 6), float64] {
  %906 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %906.1
}

def @func_4863() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) {
  %907 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %908 = %907.1;
  %909 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  (%908, %909)
}

def @func_6388() -> (Tensor[(3, 14, 6), float64],) {
  %910 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
  %911 = %910.1;
  (%911,)
}

def @func_6574() -> uint64 {
  %912 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %912.1
}

def @func_9013(%var_9010: Tensor[(2, 6, 2), float32]) -> Tensor[(2, 6, 2), float32] {
  %913 = cast(%var_9010, dtype="float32") /* ty=Tensor[(2, 6, 2), float32] */;
  atanh(%913) /* ty=Tensor[(2, 6, 2), float32] */
}

def @func_13910() -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), float32]) {
  %914 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %915 = @func_9804() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %916 = %914.1;
  %917 = @func_4847() /* ty=uint64 */;
  %918 = %915.0;
  (%916, %917, %918)
}

def @func_4437() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) {
  %919 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %920 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %921 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %922 = %921.0;
  %923 = cast(%922, dtype="uint64") /* ty=Tensor[(16, 11, 1), uint64] */;
  %924 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 11, 10), float32] */, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
  %925 = %919.0;
  %926 = %920.2;
  %927 = left_shift(%923, %924) /* ty=Tensor[(16, 11, 10), uint64] */;
  (%925, %926, %927)
}

def @func_7565(%var_7532: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(20), uint8], uint64) {
  %928 = cast(%var_7532, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %929 = reshape(%928, newshape=[5, 4]) /* ty=Tensor[(5, 4), uint8] */;
  %930 = @func_6354(%929) /* ty=(uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) */;
  %931 = @func_4600() /* ty=(uint64,) */;
  %932 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
  %933 = %930.6;
  %934 = %931.0;
  (%932, %933, %var_7532, %934)
}

def @func_11536(%var_11526: uint64, %var_11527: Tensor[(7, 4, 7), uint64]) -> (Tensor[(7, 4, 7), bool],) {
  %935 = cast(%var_11526, dtype="bool") /* ty=bool */;
  %936 = cast(%var_11527, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %937 = less(%935, %936) /* ty=Tensor[(7, 4, 7), bool] */;
  (%937,)
}

def @func_8981() -> (Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32], Tensor[(1092, ?), float64]) {
  %938 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %939 = @func_7155() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %940 = cast(meta[relay.Constant][39] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %941 = reshape(%940, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
  %942 = @func_6017(%941) /* ty=Tensor[(13, 14, 6), float64] */;
  %943 = cast(%942, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
  %944 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1092, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %945 = cast(meta[relay.Constant][39] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %947 = %938.2;
  %948 = %939.0;
  %949 = divide(%945, %946) /* ty=Tensor[(1092, ?), float64] */;
  (%947, %948, %949)
}

def @func_7283() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %950 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
  %951 = @func_4539() /* ty=Tensor[(3, 14, 6), float32] */;
  %952 = %950.1;
  %953 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %954 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%951, %952, %953, %954)
}

def @func_14291() -> Tensor[(16, 11, 10), float64] {
  %955 = @func_9604() /* ty=(Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) */;
  %956 = %955.1;
  %957 = cast(%956, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  log10(%957) /* ty=Tensor[(16, 11, 10), float64] */
}

def @func_6870(%var_6866: Tensor[(12, 5, 1), int16]) -> Tensor[(12, 5, 1), int16] {
  %958 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %959 = cast(%var_6866, dtype="int16") /* ty=Tensor[(12, 5, 1), int16] */;
  right_shift(%958, %959) /* ty=Tensor[(12, 5, 1), int16] */
}

def @func_1627() -> Tensor[(3, 14, 6), uint8] {
  %960 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %960.0
}

def @func_4539() -> Tensor[(3, 14, 6), float32] {
  @func_3906() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_4741() -> (uint64,) {
  %961 = @func_2389() /* ty=(uint64,) */;
  %962 = %961.0;
  (%962,)
}

def @func_6484() -> Tensor[(3, 14, 6), uint16] {
  @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */
}

def @func_2512(%var_2495: Tensor[(2, 14, 10), bool], %var_2496: Tensor[(2, 14, 10), bool]) -> (Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) {
  %963 = cast(%var_2496, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %964 = shape_of(%var_2495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%var_2495, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %967 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %968 = logical_and(%965, %966) /* ty=Tensor[(2, 14, 10), bool] */;
  %969 = %967.0;
  (%968, %969)
}

def @func_1512() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %970 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %971 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %972 = %971.1;
  %973 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %974 = %973.0;
  %975 = cast(%974, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %976 = shape_of(%972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%972, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %979 = greater_equal(%977, %978) /* ty=Tensor[(3, 14, 6), bool] */;
  %980 = cast(%972, dtype="uint8") /* ty=Tensor[(3, 14, 6), uint8] */;
  %981 = shape_of(%979, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(%979, dtype="uint8") /* ty=Tensor[(3, 14, 6), uint8] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %984 = %970.1;
  %985 = bitwise_and(%982, %983) /* ty=Tensor[(3, 14, 6), uint8] */;
  (%984, %985)
}

def @func_1950() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %986 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %987 = cast(meta[relay.Constant][41] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %988 = reshape(%987, newshape=[]) /* ty=uint64 */;
  %989 = %986.0;
  %990 = @func_306(%988) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%989, %990, meta[relay.Constant][41] /* ty=uint64 */)
}

def @func_9694(%var_9691: Tensor[(30, 9), float64]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(30, 9), float64], uint64) {
  %991 = cast(%var_9691, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %992 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %993 = reshape(%991, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float64] */;
  %994 = reshape(%992, newshape=[]) /* ty=uint64 */;
  %995 = @func_3226(%993, %994) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %996 = @func_9224() /* ty=Tensor[(3, 14, 6), uint64] */;
  %997 = %995.1;
  (%996, %997, %var_9691, meta[relay.Constant][42] /* ty=uint64 */)
}

def @func_8672() -> (Tensor[(6, 12, 13), float32],) {
  %998 = @func_7428() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) */;
  %999 = %998.2;
  (%999,)
}

def @func_9438() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) {
  %1000 = @func_6388() /* ty=(Tensor[(3, 14, 6), float64],) */;
  %1001 = %1000.0;
  %1002 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %1003 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %1004 = @func_6484() /* ty=Tensor[(3, 14, 6), uint16] */;
  (%1001, %1002, %1003, %1004)
}

def @func_9652() -> uint64 {
  %1005 = @func_8382() /* ty=(uint64,) */;
  %1005.0
}

def @func_7917() -> Tensor[(16, 11, 10), uint64] {
  %1006 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %1006.2
}

def @func_9531(%var_9499: Tensor[(14, 13, 3), float64]) -> Tensor[(14, 13, 3), int32] {
  %1007 = cast(%var_9499, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %1008 = sigmoid(%1007) /* ty=Tensor[(14, 13, 3), float64] */;
  %1009 = cast(%var_9499, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %1010 = asin(%1009) /* ty=Tensor[(14, 13, 3), float64] */;
  %1011 = cast(%1010, dtype="int32") /* ty=Tensor[(14, 13, 3), int32] */;
  %1012 = shape_of(%1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%1008, dtype="int32") /* ty=Tensor[(14, 13, 3), int32] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%1013, %1014) /* ty=Tensor[(14, 13, 3), int32] */
}

def @func_12621(%var_12616: Tensor[(8, 9, 14), uint64]) -> Tensor[(8, 9, 14), uint16] {
  %1015 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %1016 = %1015.1;
  %1017 = cast(%1016, dtype="uint16") /* ty=uint16 */;
  %1018 = cast(%var_12616, dtype="uint16") /* ty=Tensor[(8, 9, 14), uint16] */;
  bitwise_xor(%1017, %1018) /* ty=Tensor[(8, 9, 14), uint16] */
}

def @func_10857(%var_10853: Tensor[(2, 7, 7), float32]) -> Tensor[(2, 7, 7), float32] {
  %1019 = cast(%var_10853, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  log(%1019) /* ty=Tensor[(2, 7, 7), float32] */
}

def @func_12757(%var_12745: Tensor[(280), bool]) -> (Tensor[(6, 12, 13), float32], Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  %1020 = cast(%var_12745, dtype="bool") /* ty=Tensor[(280), bool] */;
  %1021 = cast(%var_12745, dtype="bool") /* ty=Tensor[(280), bool] */;
  %1022 = reshape(%1020, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %1023 = reshape(%1021, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %1024 = @func_2512(%1022, %1023) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %1025 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %1026 = %1024.0;
  (%1025, %1026, %var_12745)
}

def @func_9286() -> Tensor[(3, 14, 6), uint8] {
  %1027 = @func_9064() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %1027.0
}

def @func_7598(%var_7586: Tensor[(16, 16, 5), float32], %var_7587: Tensor[(16, 16, 5), float32]) -> (Tensor[(16, 16, 5), float32],) {
  %1028 = cast(%var_7587, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
  %1029 = shape_of(%var_7586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%var_7586, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1032 = divide(%1030, %1031) /* ty=Tensor[(16, 16, 5), float32] */;
  (%1032,)
}

def @func_11559() -> (Tensor[(3, 14, 6), uint8],) {
  %1033 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1034 = %1033.0;
  (%1034,)
}

def @func_7898() -> (Tensor[(3, 14, 6), uint8],) {
  %1035 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%1035,)
}

def @func_3512(%var_3485: uint64) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
  %1036 = cast(%var_3485, dtype="uint64") /* ty=uint64 */;
  %1037 = reshape(%1036, newshape=[]) /* ty=uint64 */;
  %1038 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1039 = cast(%var_3485, dtype="uint64") /* ty=uint64 */;
  %1040 = @func_306(%1037) /* ty=Tensor[(3, 14, 6), uint64] */;
  %1041 = cast(%1040, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %1042 = reshape(%1039, newshape=[]) /* ty=uint64 */;
  %1043 = reshape(%1041, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
  %1044 = @func_2055(%1042, %1043) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
  %1045 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
  %1046 = %1038.2;
  %1047 = %1044.1;
  (%1045, %1040, %var_3485, %1046, %1047)
}

def @func_6852() -> Tensor[(3, 14, 6), uint64] {
  @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_4269() -> uint64 {
  %1048 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %1048.3
}

def @func_2095(%var_2077: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64],) {
  %1049 = cast(%var_2077, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
  %1050 = sin(%1049) /* ty=Tensor[(16, 1, 14), float64] */;
  (%1050,)
}

def @func_2691() -> (Tensor[(3, 14, 6), uint64], uint64) {
  %1051 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1052 = @func_2389() /* ty=(uint64,) */;
  %1053 = %1051.0;
  %1054 = %1052.0;
  (%1053, %1054)
}

def @func_12048() -> (Tensor[(3, 14, 6), uint8],) {
  %1055 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %1056 = %1055.1;
  (%1056,)
}

def @func_7776(%var_7745: Tensor[(15, 4), int16]) -> (Tensor[(3, 14, 6), uint8], Tensor[(15, 4), int16], Tensor[(3, 14, 6), uint8], Tensor[(12, 5, 1), float32], Tensor[(3, 14, 6), uint64]) {
  %1057 = cast(%var_7745, dtype="int16") /* ty=Tensor[(15, 4), int16] */;
  %1058 = reshape(%1057, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), int16] */;
  %1059 = @func_6870(%1058) /* ty=Tensor[(12, 5, 1), int16] */;
  %1060 = cast(%1059, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
  %1061 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  %1062 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  %1063 = erf(%1060) /* ty=Tensor[(12, 5, 1), float32] */;
  %1064 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%1061, %var_7745, %1062, %1063, %1064)
}

def @func_7155() -> (Tensor[(3, 14, 6), float32],) {
  %1065 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %1066 = %1065.1;
  (%1066,)
}

def @func_7035() -> Tensor[(3, 14, 6), uint64] {
  %1067 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1067.0
}

def @func_7080() -> Tensor[(3, 14, 6), float32] {
  @func_1899() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_8571() -> (uint64, Tensor[(16, 11, 1), float32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8], Tensor[(13, 14, 6), float64], Tensor[(1092), float64], Tensor[(3, 14, 6), uint64]) {
  %1068 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %1069 = cast(meta[relay.Constant][43] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %1070 = reshape(%1069, newshape=[5, 4]) /* ty=Tensor[(5, 4), uint8] */;
  %1071 = @func_6354(%1070) /* ty=(uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) */;
  %1072 = cast(meta[relay.Constant][44] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1073 = reshape(%1072, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
  %1074 = @func_8201() /* ty=uint64 */;
  %1075 = %1068.0;
  %1076 = %1071.1;
  %1077 = @func_6017(%1073) /* ty=Tensor[(13, 14, 6), float64] */;
  %1078 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%1074, %1075, %1076, meta[relay.Constant][43] /* ty=Tensor[(20), uint8] */, %1077, meta[relay.Constant][44] /* ty=Tensor[(1092), float64] */, %1078)
}

def @func_13212() -> (Tensor[(6, 12, 13), float32],) {
  %1079 = @func_10528() /* ty=(uint64, uint64, Tensor[(6, 12, 13), float32], uint64) */;
  %1080 = %1079.2;
  (%1080,)
}

def @func_1656(%var_1653: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, 1), float32] {
  %1081 = cast(%var_1653, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
  acos(%1081) /* ty=Tensor[(6, 11, 1), float32] */
}

def @func_10984() -> (uint64,) {
  %1082 = @func_10528() /* ty=(uint64, uint64, Tensor[(6, 12, 13), float32], uint64) */;
  %1083 = %1082.0;
  (%1083,)
}

def @func_3587() -> Tensor[(3, 14, 6), uint64] {
  %1084 = @func_2619() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1084.0
}

def @func_7338() -> (uint64,) {
  %1085 = @func_7069() /* ty=(Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) */;
  %1086 = %1085.1;
  (%1086,)
}

def @func_4889() -> Tensor[(3, 14, 6), uint16] {
  %1087 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %1087.1
}

def @func_6096() -> Tensor[(3, 14, 6), uint64] {
  %1088 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %1088.1
}

def @func_8614(%var_8611: Tensor[(224), float64], %var_8612: Tensor[(1, 66), float32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) {
  %1089 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1090 = cast(%var_8611, dtype="float64") /* ty=Tensor[(224), float64] */;
  %1091 = cast(%var_8612, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
  %1092 = reshape(%1090, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %1093 = reshape(%1091, newshape=[66]) /* ty=Tensor[(66), float32] */;
  %1094 = @func_5505(%1092, %1093) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) */;
  %1095 = %1089.0;
  %1096 = %1094.6;
  (%1095, %1096, %var_8611, %var_8612)
}

def @func_8633() -> (Tensor[(3, 14, 6), float64],) {
  %1097 = @func_4734() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) */;
  %1098 = %1097.2;
  (%1098,)
}

def @func_5505(%var_5413: Tensor[(224), float64], %var_5493: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) {
  %1099 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1100 = cast(%var_5413, dtype="float64") /* ty=Tensor[(224), float64] */;
  %1101 = reshape(%1100, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %1102 = @func_2095(%1101) /* ty=(Tensor[(16, 1, 14), float64],) */;
  %1103 = %1102.0;
  %1104 = cast(%var_5413, dtype="float32") /* ty=Tensor[(224), float32] */;
  %1105 = shape_of(%1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1106 = cast(%1103, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1108 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1109 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1110 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1111 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1112 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %1113 = cast(%var_5493, dtype="float32") /* ty=Tensor[(66), float32] */;
  %1114 = reshape(%1113, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %1115 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1116 = %1099.0;
  %1117 = power(%1106, %1107) /* ty=Tensor[(16, ?, 14), float32] */;
  %1118 = %1108.0;
  %1119 = %1109.3;
  %1120 = %1110.0;
  %1121 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
  %1122 = %1111.0;
  %1123 = %1112.5;
  %1124 = @func_1656(%1114) /* ty=Tensor[(6, 11, 1), float32] */;
  %1125 = %1115.0;
  (%1116, %1117, %1118, %1119, %1120, %1121, %1122, %1123, %1124, %var_5493, %1125)
}

def @func_1780(%var_1766: uint64) -> (uint64, Tensor[(3, 14, 6), uint16]) {
  %1126 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  %1127 = cast(%var_1766, dtype="uint64") /* ty=uint64 */;
  %1128 = reshape(%1127, newshape=[]) /* ty=uint64 */;
  %1129 = @func_1298(%1128) /* ty=(Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1130 = %1129.4;
  %1131 = cast(%1126, dtype="uint16") /* ty=Tensor[(3, 14, 6), uint16] */;
  %1132 = cast(%1130, dtype="uint16") /* ty=uint16 */;
  %1133 = add(%1131, %1132) /* ty=Tensor[(3, 14, 6), uint16] */;
  (%var_1766, %1133)
}

def @func_1298(%var_1295: uint64) -> (Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
  %1134 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1135 = %1134.1;
  %1136 = cast(%1135, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %1137 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1138 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1139 = cast(%var_1295, dtype="uint64") /* ty=uint64 */;
  %1140 = reshape(%1139, newshape=[]) /* ty=uint64 */;
  %1141 = erf(%1136) /* ty=Tensor[(3, 14, 6), float64] */;
  %1142 = %1137.0;
  %1143 = %1138.0;
  %1144 = @func_306(%1140) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%1141, %1142, %1143, %1144, %var_1295)
}

def @func_10290(%var_10255: Tensor[(7, 10, 5), float64], %var_10256: Tensor[(7, 10, 5), float64]) -> (Tensor[(7, 10, 5), float64], uint64, uint64) {
  %1145 = cast(%var_10256, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %1146 = shape_of(%var_10255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1147 = cast(%var_10255, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1149 = greater(%1147, %1148) /* ty=Tensor[(7, 10, 5), bool] */;
  %1150 = cast(%var_10256, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1152 = cast(%1149, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1154 = @func_9652() /* ty=uint64 */;
  %1155 = cast(%1154, dtype="uint64") /* ty=uint64 */;
  %1156 = reshape(%1155, newshape=[]) /* ty=uint64 */;
  %1157 = @func_1617(%1156) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %1158 = power(%1152, %1153) /* ty=Tensor[(7, 10, 5), float64] */;
  %1159 = %1157.4;
  (%1158, %1154, %1159)
}

def @func_10234() -> (Tensor[(9, 3, 4), float32], Tensor[(270), float64]) {
  %1160 = @func_9764() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
  %1161 = %1160.1;
  %1162 = cast(%1161, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
  %1163 = @func_8459() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) */;
  %1164 = cosh(%1162) /* ty=Tensor[(9, 3, 4), float32] */;
  %1165 = %1163.2;
  (%1164, %1165)
}

def @func_4768() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  %1166 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %1167 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  %1168 = %1166.2;
  (%1167, %1168)
}

def @func_8789() -> (Tensor[(3, 14, 6), uint8],) {
  %1169 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_3421(%var_3404: uint64) -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint16], uint64, Tensor[(11, 13, 10), uint8]) {
  %1171 = cast(%var_3404, dtype="uint64") /* ty=uint64 */;
  %1172 = reshape(%1171, newshape=[]) /* ty=uint64 */;
  %1173 = @func_1780(%1172) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
  %1174 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %1175 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %1176 = %1173.1;
  %1177 = %1174.0;
  (%1175, %1176, %var_3404, %1177)
}

def @func_2389() -> (uint64,) {
  %1178 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %1179 = %1178.2;
  (%1179,)
}

def @func_2264() -> (uint64, Tensor[(3, 14, 6), uint64]) {
  %1180 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %1181 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1182 = %1180.2;
  %1183 = %1181.1;
  (%1182, %1183)
}

def @func_8902() -> (Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) {
  %1184 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %1185 = @func_6901() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) */;
  %1186 = cast(meta[relay.Constant][45] /* ty=Tensor[(336, 1), uint64] */, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %1187 = cast(meta[relay.Constant][45] /* ty=Tensor[(336, 1), uint64] */, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %1188 = reshape(%1186, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), uint64] */;
  %1189 = reshape(%1187, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), uint64] */;
  %1190 = @func_7689(%1188, %1189) /* ty=(Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) */;
  %1191 = %1184.2;
  %1192 = %1185.0;
  %1193 = %1190.0;
  (%1191, %1192, %1193, meta[relay.Constant][45] /* ty=Tensor[(336, 1), uint64] */)
}

def @func_12869() -> Tensor[(3, 14, 6), uint64] {
  @func_9251() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_8043() -> Tensor[(3, 14, 6), uint8] {
  %1194 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %1194.0
}

def @func_9371() -> (uint64,) {
  %1195 = @func_9073() /* ty=(uint64,) */;
  %1196 = %1195.0;
  (%1196,)
}

def @func_11872() -> uint64 {
  @func_6652() /* ty=uint64 */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5757() -> Tensor[(3, 14, 6), float32] {
  %1 = fn () -> Tensor[(3, 14, 6), float32] {
    %0 = @func_5362() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) */;
    %0.1
  };
  %1() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_6787() -> (Tensor[(3, 14, 6), uint8],) {
  %4 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %2 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %3 = %2.5;
    (%3,)
  };
  %4() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_8929() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %7 = fn () -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
    %5 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
    %6 = @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */
}

def @func_3770() -> (uint64, Tensor[(3, 14, 6), float64]) {
  @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */
}

def @func_6065() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) {
  %11 = fn () -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) {
    %8 = @func_2958() /* ty=Tensor[(3, 14, 6), uint8] */;
    %9 = @func_4269() /* ty=uint64 */;
    %10 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%8, %9, %10)
  };
  %11() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) */
}

def @func_4636() -> Tensor[(3, 14, 6), float64] {
  %12 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %12.1
}

def @func_6521() -> (Tensor[(11, 13, 10), uint8],) {
  %15 = fn () -> (Tensor[(11, 13, 10), uint8],) {
    %13 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
    %14 = %13.0;
    (%14,)
  };
  %15() /* ty=(Tensor[(11, 13, 10), uint8],) */
}

def @func_11390() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %16 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
  %17 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  (%16, %17)
}

def @func_10202() -> Tensor[(3, 14, 6), uint8] {
  %18 = fn () -> Tensor[(3, 14, 6), uint8] {
    @func_2958() /* ty=Tensor[(3, 14, 6), uint8] */
  };
  %18() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_1298(%var_1295: uint64) -> (Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
  %19 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %20 = %19.1;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %22 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %23 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %24 = cast(%var_1295, dtype="uint64") /* ty=uint64 */;
  %25 = reshape(%24, newshape=[]) /* ty=uint64 */;
  %26 = erf(%21) /* ty=Tensor[(3, 14, 6), float64] */;
  %27 = %22.0;
  %28 = %23.0;
  %29 = @func_306(%25) /* ty=Tensor[(3, 14, 6), uint64] */;
  (%26, %27, %28, %29, %var_1295)
}

def @func_1728() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %33 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
    %30 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %31 = %30.0;
    %32 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%31, %32)
  };
  %33() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_309(%var_307: uint64) -> Tensor[(3, 14, 6), uint64] {
  @func_306(%var_307) /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_6561(%var_6551: Tensor[(1, 96), float32]) -> (Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) {
  %34 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %37 = cast(%var_6551, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %38 = reshape(%37, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float32] */;
  %39 = @func_5924(%38) /* ty=(Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) */;
  %40 = log(%36) /* ty=Tensor[(3, 14, 6), float32] */;
  %41 = %39.4;
  (%40, %41, %var_6551)
}

def @func_13236() -> (Tensor[(3, 14, 6), uint8],) {
  %42 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %43 = %42.1;
  (%43,)
}

def @func_3698() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) {
  %44 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %45 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %46 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %48 = reshape(%47, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %49 = cast(meta[relay.Constant][1] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %50 = reshape(%49, newshape=[]) /* ty=uint64 */;
  %51 = @func_1617(%50) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(66), float32] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %53 = %44.1;
  %54 = %45.0;
  %55 = %46.0;
  %56 = @func_1656(%48) /* ty=Tensor[(6, 11, 1), float32] */;
  %57 = %51.2;
  %58 = asinh(%52) /* ty=Tensor[(66), float64] */;
  (%53, %54, %55, %56, %57, meta[relay.Constant][1] /* ty=uint64 */, %58)
}

def @func_10721() -> (Tensor[(3, 14, 6), uint8],) {
  %60 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %59 = @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%59,)
  };
  %60() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_1656(%var_1653: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, 1), float32] {
  %61 = cast(%var_1653, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
  acos(%61) /* ty=Tensor[(6, 11, 1), float32] */
}

def @func_8459() -> (Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) {
  %62 = @func_2478() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %64 = reshape(%63, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %65 = @func_3735(%64) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %66 = %62.0;
  %67 = %65.2;
  (%66, %67, meta[relay.Constant][2] /* ty=Tensor[(270), float64] */)
}

def @func_6901() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %68 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %69 = %68.0;
  %70 = @func_5064() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%69, %70)
}

def @func_11621() -> (Tensor[(4, 14, 2), int32], uint64) {
  %74 = fn () -> (Tensor[(4, 14, 2), int32], uint64) {
    %71 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
    %72 = %71.1;
    %73 = @func_3816() /* ty=uint64 */;
    (%72, %73)
  };
  %74() /* ty=(Tensor[(4, 14, 2), int32], uint64) */
}

def @func_3789() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %75 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %76 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %77 = %75.1;
  %78 = %76.3;
  (%77, %78)
}

def @main(%var_14480: Tensor[(4, 2, 6), float32]) -> (Tensor[(4, 2, 6), float32], Tensor[(4, 2, 6), float64]) {
  %79 = cast(%var_14480, dtype="float32") /* ty=Tensor[(4, 2, 6), float32] */;
  %80 = cast(%var_14480, dtype="float64") /* ty=Tensor[(4, 2, 6), float64] */;
  %81 = cosh(%79) /* ty=Tensor[(4, 2, 6), float32] */;
  %82 = sin(%80) /* ty=Tensor[(4, 2, 6), float64] */;
  (%81, %82)
}

def @func_2620() -> (Tensor[(3, 14, 6), uint64],) {
  %85 = fn () -> (Tensor[(3, 14, 6), uint64],) {
    %83 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %84 = %83.0;
    (%84,)
  };
  %85() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_7917() -> Tensor[(16, 11, 10), uint64] {
  %86 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %86.2
}

def @func_8384() -> (uint64,) {
  @func_8382() /* ty=(uint64,) */
}

def @func_9065() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %89 = fn () -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
    %87 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
    %88 = @func_8043() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%87, %88)
  };
  %89() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */
}

def @func_9787() -> (Tensor[(3, 14, 6), uint8],) {
  @func_9785() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_10353() -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32]) {
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %91 = reshape(%90, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %92 = @func_3735(%91) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %93 = @func_9132() /* ty=uint64 */;
  %94 = cast(%93, dtype="uint64") /* ty=uint64 */;
  %95 = reshape(%94, newshape=[]) /* ty=uint64 */;
  %96 = @func_1780(%95) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
  %97 = @func_9438() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) */;
  %98 = %92.1;
  %99 = %96.1;
  %100 = %97.2;
  (%93, %98, meta[relay.Constant][3] /* ty=Tensor[(270), float64] */, %99, %100)
}

def @func_2728() -> (Tensor[(3, 14, 6), float64],) {
  %104 = fn () -> (Tensor[(3, 14, 6), float64],) {
    %101 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
    %102 = cast(%101, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %103 = exp(%102) /* ty=Tensor[(3, 14, 6), float64] */;
    (%103,)
  };
  %104() /* ty=(Tensor[(3, 14, 6), float64],) */
}

def @func_4383(%var_4351: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) {
  %105 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %106 = %105.1;
  %107 = cast(%106, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
  %108 = reshape(%107, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
  %109 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %110 = cast(%var_4351, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %111 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%106, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %115 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %116 = @func_4182(%108) /* ty=Tensor[(3, 14, 6), bool] */;
  %117 = %109.1;
  %118 = mod(%112, %113) /* ty=Tensor[(3, 14, 6), float64] */;
  %119 = %114.0;
  %120 = %115.1;
  (%116, %117, %118, %119, %120)
}

def @func_4848() -> uint64 {
  %122 = fn () -> uint64 {
    %121 = @func_4600() /* ty=(uint64,) */;
    %121.0
  };
  %122() /* ty=uint64 */
}

def @func_13238() -> (Tensor[(3, 14, 6), uint8],) {
  @func_13236() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_2428() -> (Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) {
  %123 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %124 = %123.0;
  %125 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %129 = floor_mod(%127, %128) /* ty=Tensor[(3, 14, 6), float64] */;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %131 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %132 = log10(%130) /* ty=Tensor[(3, 14, 6), float32] */;
  %133 = %131.0;
  (%132, %133)
}

def @func_9252() -> Tensor[(3, 14, 6), uint64] {
  %135 = fn () -> Tensor[(3, 14, 6), uint64] {
    %134 = @func_2264() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */;
    %134.1
  };
  %135() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_1780(%var_1766: uint64) -> (uint64, Tensor[(3, 14, 6), uint16]) {
  %136 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  %137 = cast(%var_1766, dtype="uint64") /* ty=uint64 */;
  %138 = reshape(%137, newshape=[]) /* ty=uint64 */;
  %139 = @func_1298(%138) /* ty=(Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %140 = %139.4;
  %141 = cast(%136, dtype="uint16") /* ty=Tensor[(3, 14, 6), uint16] */;
  %142 = cast(%140, dtype="uint16") /* ty=uint16 */;
  %143 = add(%141, %142) /* ty=Tensor[(3, 14, 6), uint16] */;
  (%var_1766, %143)
}

def @func_3169() -> Tensor[(3, 14, 6), uint8] {
  %145 = fn () -> Tensor[(3, 14, 6), uint8] {
    %144 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
    %144.0
  };
  %145() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_9653() -> uint64 {
  %147 = fn () -> uint64 {
    %146 = @func_8382() /* ty=(uint64,) */;
    %146.0
  };
  %147() /* ty=uint64 */
}

def @func_10410() -> (Tensor[(3, 14, 6), uint8],) {
  @func_10408() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_6356(%var_6355: Tensor[(5, 4), uint8]) -> (uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) {
  %162 = fn (%var_6325: Tensor[(5, 4), uint8]) -> (uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) {
    %148 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %149 = %148.1;
    %150 = cast(%149, dtype="uint8") /* ty=uint8 */;
    %151 = cast(%var_6325, dtype="uint8") /* ty=Tensor[(5, 4), uint8] */;
    %152 = reshape(%150, newshape=[]) /* ty=uint8 */;
    %153 = reshape(%151, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
    %154 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
    %155 = cast(meta[relay.Constant][6] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
    %156 = reshape(%154, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %157 = reshape(%155, newshape=[66]) /* ty=Tensor[(66), float32] */;
    %158 = @func_5505(%156, %157) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) */;
    %159 = @func_4930(%152, %153) /* ty=Tensor[(5, 4, 1), uint8] */;
    %160 = %158.4;
    %161 = @func_5670() /* ty=uint64 */;
    (%149, %159, %var_6325, %160, meta[relay.Constant][5] /* ty=Tensor[(16, 14), float64] */, meta[relay.Constant][6] /* ty=Tensor[(66), float32] */, %161)
  };
  %162(%var_6355) /* ty=(uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) */
}

def @func_10970(%var_10903: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(66), float32], Tensor[(7, 156), float64], Tensor[(7, 156), bool], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  %163 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %165 = cast(%var_10903, dtype="float32") /* ty=Tensor[(66), float32] */;
  %166 = reshape(%164, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %167 = reshape(%165, newshape=[1, 66]) /* ty=Tensor[(1, 66), float32] */;
  %168 = @func_8614(%166, %167) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) */;
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 156), float64] */, dtype="float32") /* ty=Tensor[(7, 156), float32] */;
  %170 = acos(%169) /* ty=Tensor[(7, 156), float32] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 156), float64] */, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %173 = reshape(%172, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
  %174 = @func_6017(%173) /* ty=Tensor[(13, 14, 6), float64] */;
  %175 = cast(%174, dtype="bool") /* ty=Tensor[(13, 14, 6), bool] */;
  %176 = shape_of(%170, dtype="int32") /* ty=Tensor[(2), int32] */;
  %177 = cast(%170, dtype="bool") /* ty=Tensor[(7, 156), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %179 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %180 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %181 = @func_8672() /* ty=(Tensor[(6, 12, 13), float32],) */;
  %182 = @func_8179() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %183 = %163.0;
  %184 = %168.1;
  %185 = sin(%171) /* ty=Tensor[(7, 156), float64] */;
  %186 = less(%177, %178) /* ty=Tensor[(7, 156), bool] */;
  %187 = %179.0;
  %188 = @func_9286() /* ty=Tensor[(3, 14, 6), uint8] */;
  %189 = %180.1;
  %190 = %181.0;
  %191 = %182.0;
  (%183, %184, meta[relay.Constant][7] /* ty=Tensor[(224), float64] */, %var_10903, %185, %186, %187, %188, %189, %190, %191)
}

def @func_4839() -> Tensor[(66), float64] {
  %192 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %192.6
}

def @func_1220() -> (Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
  %198 = fn () -> (Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
    %193 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
    %194 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %195 = reshape(%194, newshape=[]) /* ty=uint64 */;
    %196 = asin(%193) /* ty=Tensor[(9, 3, 4), float32] */;
    %197 = @func_306(%195) /* ty=Tensor[(3, 14, 6), uint64] */;
    (%196, %197, meta[relay.Constant][10] /* ty=uint64 */)
  };
  %198() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_5315() -> (uint64, Tensor[(9, 3, 4), float64]) {
  %199 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %202 = @func_4847() /* ty=uint64 */;
  %203 = rsqrt(%201) /* ty=Tensor[(9, 3, 4), float64] */;
  (%202, %203)
}

def @func_7082() -> Tensor[(3, 14, 6), float32] {
  @func_7080() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_8791() -> (Tensor[(3, 14, 6), uint8],) {
  @func_8789() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_10235() -> (Tensor[(9, 3, 4), float32], Tensor[(270), float64]) {
  %210 = fn () -> (Tensor[(9, 3, 4), float32], Tensor[(270), float64]) {
    %204 = @func_9764() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
    %205 = %204.1;
    %206 = cast(%205, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
    %207 = @func_8459() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) */;
    %208 = cosh(%206) /* ty=Tensor[(9, 3, 4), float32] */;
    %209 = %207.2;
    (%208, %209)
  };
  %210() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(270), float64]) */
}

def @func_4742() -> (uint64,) {
  %213 = fn () -> (uint64,) {
    %211 = @func_2389() /* ty=(uint64,) */;
    %212 = %211.0;
    (%212,)
  };
  %213() /* ty=(uint64,) */
}

def @func_8571() -> (uint64, Tensor[(16, 11, 1), float32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8], Tensor[(13, 14, 6), float64], Tensor[(1092), float64], Tensor[(3, 14, 6), uint64]) {
  %214 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %215 = cast(meta[relay.Constant][11] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %216 = reshape(%215, newshape=[5, 4]) /* ty=Tensor[(5, 4), uint8] */;
  %217 = @func_6354(%216) /* ty=(uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) */;
  %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %219 = reshape(%218, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
  %220 = @func_8201() /* ty=uint64 */;
  %221 = %214.0;
  %222 = %217.1;
  %223 = @func_6017(%219) /* ty=Tensor[(13, 14, 6), float64] */;
  %224 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%220, %221, %222, meta[relay.Constant][11] /* ty=Tensor[(20), uint8] */, %223, meta[relay.Constant][12] /* ty=Tensor[(1092), float64] */, %224)
}

def @func_12162() -> Tensor[(3, 14, 6), float32] {
  %226 = fn () -> Tensor[(3, 14, 6), float32] {
    %225 = @func_8409() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %225.0
  };
  %226() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_3877() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
  %227 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %228 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %229 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %230 = %227.1;
  %231 = %228.2;
  %232 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %233 = %229.0;
  %234 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%230, %231, %232, %233, %234)
}

def @func_7958(%var_7956: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), int16], Tensor[(3, 14, 6), uint8], Tensor[(3, 8, 8), float64], uint8, Tensor[(20, 1), uint8]) {
  @func_7955(%var_7956) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), int16], Tensor[(3, 14, 6), uint8], Tensor[(3, 8, 8), float64], uint8, Tensor[(20, 1), uint8]) */
}

def @func_7955(%var_7938: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), int16], Tensor[(3, 14, 6), uint8], Tensor[(3, 8, 8), float64], uint8, Tensor[(20, 1), uint8]) {
  %235 = @func_6786() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %236 = @func_6265() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %237 = %236.0;
  %238 = cast(%var_7938, dtype="int16") /* ty=Tensor[(3, 14, 6), int16] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="int16") /* ty=Tensor[(3, 14, 6), int16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %242 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %243 = cast(meta[relay.Constant][13] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %244 = cast(meta[relay.Constant][14] /* ty=Tensor[(20, 1), uint8] */, dtype="uint8") /* ty=Tensor[(20, 1), uint8] */;
  %245 = reshape(%243, newshape=[]) /* ty=uint8 */;
  %246 = reshape(%244, newshape=[10, 2]) /* ty=Tensor[(10, 2), uint8] */;
  %247 = @func_6810(%245, %246) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) */;
  %248 = %235.0;
  %249 = bitwise_or(%240, %241) /* ty=Tensor[(3, 14, 6), int16] */;
  %250 = %242.0;
  %251 = %247.0;
  (%248, %249, %250, %251, meta[relay.Constant][13] /* ty=uint8 */, meta[relay.Constant][14] /* ty=Tensor[(20, 1), uint8] */)
}

def @func_9785() -> (Tensor[(3, 14, 6), uint8],) {
  %252 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
  %253 = %252.0;
  (%253,)
}

def @func_6564(%var_6562: Tensor[(1, 96), float32]) -> (Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) {
  @func_6561(%var_6562) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) */
}

def @func_13212() -> (Tensor[(6, 12, 13), float32],) {
  %254 = @func_10528() /* ty=(uint64, uint64, Tensor[(6, 12, 13), float32], uint64) */;
  %255 = %254.2;
  (%255,)
}

def @func_8217() -> Tensor[(5, 15, 13), float64] {
  %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 13), float64] */;
  tan(%256) /* ty=Tensor[(5, 15, 13), float64] */
}

def @func_9134() -> uint64 {
  @func_9132() /* ty=uint64 */
}

def @func_3311() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %261 = fn () -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
    %257 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %258 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
    %259 = %257.0;
    %260 = %258.0;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */
}

def @func_12623(%var_12622: Tensor[(8, 9, 14), uint64]) -> Tensor[(8, 9, 14), uint16] {
  %266 = fn (%var_12616: Tensor[(8, 9, 14), uint64]) -> Tensor[(8, 9, 14), uint16] {
    %262 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %263 = %262.1;
    %264 = cast(%263, dtype="uint16") /* ty=uint16 */;
    %265 = cast(%var_12616, dtype="uint16") /* ty=Tensor[(8, 9, 14), uint16] */;
    bitwise_xor(%264, %265) /* ty=Tensor[(8, 9, 14), uint16] */
  };
  %266(%var_12622) /* ty=Tensor[(8, 9, 14), uint16] */
}

def @func_3421(%var_3404: uint64) -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint16], uint64, Tensor[(11, 13, 10), uint8]) {
  %267 = cast(%var_3404, dtype="uint64") /* ty=uint64 */;
  %268 = reshape(%267, newshape=[]) /* ty=uint64 */;
  %269 = @func_1780(%268) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
  %270 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %271 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %272 = %269.1;
  %273 = %270.0;
  (%271, %272, %var_3404, %273)
}

def @func_1659(%var_1657: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, 1), float32] {
  @func_1656(%var_1657) /* ty=Tensor[(6, 11, 1), float32] */
}

def @func_11392() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  @func_11390() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) */
}

def @func_5670() -> uint64 {
  %274 = @func_4741() /* ty=(uint64,) */;
  %274.0
}

def @func_8672() -> (Tensor[(6, 12, 13), float32],) {
  %275 = @func_7428() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) */;
  %276 = %275.2;
  (%276,)
}

def @func_12050() -> (Tensor[(3, 14, 6), uint8],) {
  @func_12048() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_6159() -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  %277 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %278 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%277, %278)
}

def @func_2430() -> (Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) {
  @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */
}

def @func_11873() -> uint64 {
  %279 = fn () -> uint64 {
    @func_6652() /* ty=uint64 */
  };
  %279() /* ty=uint64 */
}

def @func_2516(%var_2514: Tensor[(2, 14, 10), bool], %var_2515: Tensor[(2, 14, 10), bool]) -> (Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) {
  @func_2512(%var_2514, %var_2515) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */
}

def @func_12249() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %280 = @func_2619() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %281 = %280.0;
  %282 = @func_11292() /* ty=Tensor[(3, 14, 6), uint64] */;
  %283 = @func_6574() /* ty=uint64 */;
  (%281, %282, %283)
}

def @func_7283() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  %284 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
  %285 = @func_4539() /* ty=Tensor[(3, 14, 6), float32] */;
  %286 = %284.1;
  %287 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %288 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%285, %286, %287, %288)
}

def @func_9013(%var_9010: Tensor[(2, 6, 2), float32]) -> Tensor[(2, 6, 2), float32] {
  %289 = cast(%var_9010, dtype="float32") /* ty=Tensor[(2, 6, 2), float32] */;
  atanh(%289) /* ty=Tensor[(2, 6, 2), float32] */
}

def @func_9286() -> Tensor[(3, 14, 6), uint8] {
  %290 = @func_9064() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %290.0
}

def @func_8904() -> (Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) {
  @func_8902() /* ty=(Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) */
}

def @func_7017(%var_6995: Tensor[(10, 28), bool], %var_6998: Tensor[(4, 56), float64]) -> (Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(10, 28), bool], Tensor[(16, 1, 14), float64], Tensor[(4, 56), float64], Tensor[(3, 14, 6), uint64]) {
  %291 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %292 = @func_6725() /* ty=(uint64,) */;
  %293 = cast(%var_6995, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %294 = cast(%var_6995, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %295 = reshape(%293, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %296 = reshape(%294, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %297 = @func_2512(%295, %296) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %298 = cast(%var_6998, dtype="float64") /* ty=Tensor[(4, 56), float64] */;
  %299 = reshape(%298, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %300 = @func_2095(%299) /* ty=(Tensor[(16, 1, 14), float64],) */;
  %301 = @func_2264() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */;
  %302 = %291.0;
  %303 = %292.0;
  %304 = %297.1;
  %305 = %300.0;
  %306 = %301.1;
  (%302, %303, %304, %var_6995, %305, %var_6998, %306)
}

def @func_11794() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
  %312 = fn () -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
    %307 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
    %308 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
    %309 = %307.1;
    %310 = %308.2;
    %311 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%309, %310, %311)
  };
  %312() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_5926(%var_5925: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) {
  %325 = fn (%var_5851: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) {
    %313 = cast(%var_5851, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
    %314 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
    %315 = cast(%var_5851, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
    %316 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %317 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
    %318 = cast(%var_5851, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
    %319 = erf(%313) /* ty=Tensor[(1, 6, 16), float32] */;
    %320 = %314.1;
    %321 = rsqrt(%315) /* ty=Tensor[(1, 6, 16), float64] */;
    %322 = %316.0;
    %323 = %317.2;
    %324 = log10(%318) /* ty=Tensor[(1, 6, 16), float64] */;
    (%319, %320, %321, %322, %323, %324)
  };
  %325(%var_5925) /* ty=(Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) */
}

def @func_10141(%var_10139: Tensor[(13, 11, 9), int32], %var_10140: Tensor[(13, 11, 9), int32]) -> (Tensor[(13, 11, 9), bool], Tensor[(13, 11, 9), float32], Tensor[(3, 14, 6), uint64]) {
  %335 = fn (%var_10124: Tensor[(13, 11, 9), int32], %var_10125: Tensor[(13, 11, 9), int32]) -> (Tensor[(13, 11, 9), bool], Tensor[(13, 11, 9), float32], Tensor[(3, 14, 6), uint64]) {
    %326 = cast(%var_10125, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
    %327 = shape_of(%var_10124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%var_10124, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %330 = cast(%var_10125, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
    %331 = @func_6265() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %332 = less_equal(%328, %329) /* ty=Tensor[(13, 11, 9), bool] */;
    %333 = log(%330) /* ty=Tensor[(13, 11, 9), float32] */;
    %334 = %331.0;
    (%332, %333, %334)
  };
  %335(%var_10139, %var_10140) /* ty=(Tensor[(13, 11, 9), bool], Tensor[(13, 11, 9), float32], Tensor[(3, 14, 6), uint64]) */
}

def @func_8949() -> Tensor[(3, 14, 6), uint8] {
  @func_8947() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_11911() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  @func_11909() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_12092() -> (uint64,) {
  %336 = @func_6574() /* ty=uint64 */;
  (%336,)
}

def @func_1629() -> Tensor[(3, 14, 6), uint8] {
  @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_8307() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) {
  %337 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %338 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 12), float32] */, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %339 = reshape(%338, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float32] */;
  %340 = @func_5924(%339) /* ty=(Tensor[(1, 6, 16), float32], uint64, Tensor[(1, 6, 16), float64], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64], Tensor[(1, 6, 16), float64]) */;
  %341 = %340.0;
  %342 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 12), float32] */, dtype="uint16") /* ty=Tensor[(8, 12), uint16] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="uint16") /* ty=Tensor[(1, 6, 16), uint16] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %346 = subtract(%344, %345) /* ty=Tensor[(?, 6, 16), uint16] */;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(?, 6, 16), float64] */;
  %348 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%341, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %351 = %337.1;
  %352 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %353 = @func_5064() /* ty=Tensor[(3, 14, 6), uint64] */;
  %354 = floor_mod(%349, %350) /* ty=Tensor[(?, 6, 16), float64] */;
  (%351, %352, %353, %354)
}

def @func_6853() -> Tensor[(3, 14, 6), uint64] {
  %355 = fn () -> Tensor[(3, 14, 6), uint64] {
    @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */
  };
  %355() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_7071() -> (Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) {
  @func_7069() /* ty=(Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) */
}

def @func_7021(%var_7019: Tensor[(10, 28), bool], %var_7020: Tensor[(4, 56), float64]) -> (Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(10, 28), bool], Tensor[(16, 1, 14), float64], Tensor[(4, 56), float64], Tensor[(3, 14, 6), uint64]) {
  @func_7017(%var_7019, %var_7020) /* ty=(Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(10, 28), bool], Tensor[(16, 1, 14), float64], Tensor[(4, 56), float64], Tensor[(3, 14, 6), uint64]) */
}

def @func_4863() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) {
  %356 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %357 = %356.1;
  %358 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  (%357, %358)
}

def @func_6161() -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_2959() -> Tensor[(3, 14, 6), uint8] {
  %360 = fn () -> Tensor[(3, 14, 6), uint8] {
    %359 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %359.2
  };
  %360() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_4540() -> Tensor[(3, 14, 6), float32] {
  %361 = fn () -> Tensor[(3, 14, 6), float32] {
    @func_3906() /* ty=Tensor[(3, 14, 6), float32] */
  };
  %361() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_5672() -> uint64 {
  @func_5670() /* ty=uint64 */
}

def @func_8410() -> (Tensor[(3, 14, 6), float32],) {
  %363 = fn () -> (Tensor[(3, 14, 6), float32],) {
    %362 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
    (%362,)
  };
  %363() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_7080() -> Tensor[(3, 14, 6), float32] {
  @func_1899() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_10290(%var_10255: Tensor[(7, 10, 5), float64], %var_10256: Tensor[(7, 10, 5), float64]) -> (Tensor[(7, 10, 5), float64], uint64, uint64) {
  %364 = cast(%var_10256, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %365 = shape_of(%var_10255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_10255, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %368 = greater(%366, %367) /* ty=Tensor[(7, 10, 5), bool] */;
  %369 = cast(%var_10256, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %373 = @func_9652() /* ty=uint64 */;
  %374 = cast(%373, dtype="uint64") /* ty=uint64 */;
  %375 = reshape(%374, newshape=[]) /* ty=uint64 */;
  %376 = @func_1617(%375) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %377 = power(%371, %372) /* ty=Tensor[(7, 10, 5), float64] */;
  %378 = %376.4;
  (%377, %373, %378)
}

def @func_11221(%var_11220: uint8) -> (Tensor[(3, 14, 6), uint64], Tensor[(66), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(10, 2), uint8], uint8, Tensor[(20), uint8]) {
  %396 = fn (%var_11212: uint8) -> (Tensor[(3, 14, 6), uint64], Tensor[(66), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(10, 2), uint8], uint8, Tensor[(20), uint8]) {
    %379 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
    %380 = @func_10408() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %381 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %382 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %383 = cast(%var_11212, dtype="uint8") /* ty=uint8 */;
    %384 = cast(meta[relay.Constant][17] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
    %385 = reshape(%383, newshape=[]) /* ty=uint8 */;
    %386 = reshape(%384, newshape=[10, 2]) /* ty=Tensor[(10, 2), uint8] */;
    %387 = @func_6810(%385, %386) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) */;
    %388 = @func_7485() /* ty=Tensor[(3, 14, 6), uint64] */;
    %389 = @func_4839() /* ty=Tensor[(66), float64] */;
    %390 = %379.0;
    %391 = %380.0;
    %392 = %381.0;
    %393 = %382.1;
    %394 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
    %395 = %387.5;
    (%388, %389, %390, %391, %392, %393, %394, %395, %var_11212, meta[relay.Constant][17] /* ty=Tensor[(20), uint8] */)
  };
  %396(%var_11220) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(66), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(10, 2), uint8], uint8, Tensor[(20), uint8]) */
}

def @func_8947() -> Tensor[(3, 14, 6), uint8] {
  %397 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %397.2
}

def @func_12094() -> (uint64,) {
  @func_12092() /* ty=(uint64,) */
}

def @func_10189() -> Tensor[(3, 14, 6), uint8] {
  %398 = fn () -> Tensor[(3, 14, 6), uint8] {
    @func_8947() /* ty=Tensor[(3, 14, 6), uint8] */
  };
  %398() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_9440() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) {
  @func_9438() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) */
}

def @func_10985() -> (uint64,) {
  %401 = fn () -> (uint64,) {
    %399 = @func_10528() /* ty=(uint64, uint64, Tensor[(6, 12, 13), float32], uint64) */;
    %400 = %399.0;
    (%400,)
  };
  %401() /* ty=(uint64,) */
}

def @func_13649(%var_13630: Tensor[(270), float64]) -> (Tensor[(270), float64], Tensor[(270), bool]) {
  %402 = @func_10234() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(270), float64]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(270), float64] */;
  %405 = cast(%var_13630, dtype="bool") /* ty=Tensor[(270), bool] */;
  %406 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
  %407 = cast(%403, dtype="bool") /* ty=Tensor[(270), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?), bool] */;
  %409 = acos(%404) /* ty=Tensor[(270), float64] */;
  %410 = less_equal(%407, %408) /* ty=Tensor[(270), bool] */;
  (%409, %410)
}

def @func_1900() -> Tensor[(3, 14, 6), float32] {
  %419 = fn () -> Tensor[(3, 14, 6), float32] {
    %411 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %412 = %411.0;
    %413 = cast(%412, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %414 = atan(%413) /* ty=Tensor[(3, 14, 6), float64] */;
    %415 = cast(%414, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
    %416 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%412, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%417, %418) /* ty=Tensor[(3, 14, 6), float32] */
  };
  %419() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_6574() -> uint64 {
  %420 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %420.1
}

def @func_8382() -> (uint64,) {
  %421 = @func_7338() /* ty=(uint64,) */;
  %422 = %421.0;
  (%422,)
}

def @func_12467() -> Tensor[(3, 14, 6), uint8] {
  %423 = fn () -> Tensor[(3, 14, 6), uint8] {
    @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */
  };
  %423() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_4130(%var_4126: Tensor[(2, 14, 10), bool], %var_4127: Tensor[(270), float64], %var_4128: Tensor[(140, 2), float64], %var_4129: Tensor[(140, 2), float64]) -> (uint64, Tensor[(2, 14, 10), int16], Tensor[(3, 14, 6), uint8], Tensor[(140, 2), int32], Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(140, 2), int16], Tensor[(140, 2), bool], Tensor[(140, 2), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  @func_4124(%var_4126, %var_4127, %var_4128, %var_4129) /* ty=(uint64, Tensor[(2, 14, 10), int16], Tensor[(3, 14, 6), uint8], Tensor[(140, 2), int32], Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(140, 2), int16], Tensor[(140, 2), bool], Tensor[(140, 2), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) */
}

def @func_7788() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint8]) {
  %424 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %425 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  %426 = %424.1;
  (%425, %426)
}

def @func_12230(%var_12228: Tensor[(6, 4, 11), int16], %var_12229: Tensor[(6, 4, 11), int16]) -> (Tensor[(6, 4, 11), int16], uint64) {
  @func_12226(%var_12228, %var_12229) /* ty=(Tensor[(6, 4, 11), int16], uint64) */
}

def @func_14291() -> Tensor[(16, 11, 10), float64] {
  %427 = @func_9604() /* ty=(Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  log10(%429) /* ty=Tensor[(16, 11, 10), float64] */
}

def @func_1921() -> (Tensor[(3, 14, 6), uint8],) {
  %431 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %430 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%430,)
  };
  %431() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_3908() -> Tensor[(3, 14, 6), float32] {
  @func_3906() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_7285() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) {
  @func_7283() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */
}

def @func_9981() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %432 = @func_9804() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %433 = %432.0;
  %434 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
  (%433, %434)
}

def @func_13031() -> (Tensor[(3, 14, 6), uint64], Tensor[(6, 12, 13), float32]) {
  %439 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(6, 12, 13), float32]) {
    %435 = @func_9443() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %436 = @func_8672() /* ty=(Tensor[(6, 12, 13), float32],) */;
    %437 = %435.0;
    %438 = %436.0;
    (%437, %438)
  };
  %439() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(6, 12, 13), float32]) */
}

def @func_12389(%var_12387: Tensor[(112), int32], %var_12388: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], uint64, Tensor[(112), int32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8]) {
  @func_12385(%var_12387, %var_12388) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], uint64, Tensor[(112), int32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8]) */
}

def @func_3589() -> Tensor[(3, 14, 6), uint64] {
  @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_6265() -> (Tensor[(3, 14, 6), uint64],) {
  %440 = @func_4768() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %441 = %440.0;
  (%441,)
}

def @func_9805() -> (Tensor[(3, 14, 6), float32],) {
  %444 = fn () -> (Tensor[(3, 14, 6), float32],) {
    %442 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %443 = %442.0;
    (%443,)
  };
  %444() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_11540(%var_11538: uint64, %var_11539: Tensor[(7, 4, 7), uint64]) -> (Tensor[(7, 4, 7), bool],) {
  @func_11536(%var_11538, %var_11539) /* ty=(Tensor[(7, 4, 7), bool],) */
}

def @func_4770() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  @func_4768() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */
}

def @func_12853(%var_12851: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64],) {
  @func_12850(%var_12851) /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_11293() -> Tensor[(3, 14, 6), uint64] {
  %446 = fn () -> Tensor[(3, 14, 6), uint64] {
    %445 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %445.0
  };
  %446() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_12953() -> uint64 {
  @func_12951() /* ty=uint64 */
}

def @func_8902() -> (Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) {
  %447 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %448 = @func_6901() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) */;
  %449 = cast(meta[relay.Constant][18] /* ty=Tensor[(336, 1), uint64] */, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %450 = cast(meta[relay.Constant][18] /* ty=Tensor[(336, 1), uint64] */, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %451 = reshape(%449, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), uint64] */;
  %452 = reshape(%450, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), uint64] */;
  %453 = @func_7689(%451, %452) /* ty=(Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) */;
  %454 = %447.2;
  %455 = %448.0;
  %456 = %453.0;
  (%454, %455, %456, meta[relay.Constant][18] /* ty=Tensor[(336, 1), uint64] */)
}

def @func_11993() -> uint64 {
  %457 = @func_7338() /* ty=(uint64,) */;
  %457.0
}

def @func_8789() -> (Tensor[(3, 14, 6), uint8],) {
  %458 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %459 = %458.0;
  (%459,)
}

def @func_1512() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %460 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %461 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %462 = %461.1;
  %463 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %466 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%462, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = greater_equal(%467, %468) /* ty=Tensor[(3, 14, 6), bool] */;
  %470 = cast(%462, dtype="uint8") /* ty=Tensor[(3, 14, 6), uint8] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="uint8") /* ty=Tensor[(3, 14, 6), uint8] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %474 = %460.1;
  %475 = bitwise_and(%472, %473) /* ty=Tensor[(3, 14, 6), uint8] */;
  (%474, %475)
}

def @func_8725() -> (Tensor[(3, 14, 6), uint8],) {
  %478 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %476 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
    %477 = %476.1;
    (%477,)
  };
  %478() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_4269() -> uint64 {
  %479 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %479.3
}

def @func_7919() -> Tensor[(16, 11, 10), uint64] {
  @func_7917() /* ty=Tensor[(16, 11, 10), uint64] */
}

def @func_4768() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  %480 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %481 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  %482 = %480.2;
  (%481, %482)
}

def @func_9697(%var_9695: Tensor[(30, 9), float64]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(30, 9), float64], uint64) {
  @func_9694(%var_9695) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(30, 9), float64], uint64) */
}

def @func_7486() -> Tensor[(3, 14, 6), uint64] {
  %484 = fn () -> Tensor[(3, 14, 6), uint64] {
    %483 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
    %483.0
  };
  %484() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_11977() -> uint64 {
  %485 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %485.0
}

def @func_1547() -> (Tensor[(3, 14, 6), uint8], uint64) {
  %486 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %487 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %488 = %486.1;
  %489 = %487.2;
  (%488, %489)
}

def @func_13589() -> (Tensor[(3, 14, 6), uint8],) {
  @func_13587() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_8203() -> uint64 {
  @func_8201() /* ty=uint64 */
}

def @func_4985() -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %496 = fn () -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
    %490 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %491 = cast(meta[relay.Constant][19] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %492 = reshape(%491, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
    %493 = @func_3949(%492) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
    %494 = %490.3;
    %495 = %493.0;
    (%494, %495, meta[relay.Constant][19] /* ty=Tensor[(112), int32] */)
  };
  %496() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */
}

def @func_5363() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  %501 = fn () -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
    %497 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
    %498 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %499 = %497.0;
    %500 = %498.1;
    (%499, %500)
  };
  %501() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) */
}

def @func_11506() -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) {
  %507 = fn () -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) {
    %502 = @func_6388() /* ty=(Tensor[(3, 14, 6), float64],) */;
    %503 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %504 = %502.0;
    %505 = @func_6652() /* ty=uint64 */;
    %506 = %503.1;
    (%504, %505, %506)
  };
  %507() /* ty=(Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) */
}

def @func_1549() -> (Tensor[(3, 14, 6), uint8], uint64) {
  @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */
}

def @func_5089() -> (Tensor[(3, 14, 6), uint8],) {
  %510 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %508 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %509 = %508.2;
    (%509,)
  };
  %510() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_12048() -> (Tensor[(3, 14, 6), uint8],) {
  %511 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %512 = %511.1;
  (%512,)
}

def @func_9438() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint16]) {
  %513 = @func_6388() /* ty=(Tensor[(3, 14, 6), float64],) */;
  %514 = %513.0;
  %515 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %516 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %517 = @func_6484() /* ty=Tensor[(3, 14, 6), uint16] */;
  (%514, %515, %516, %517)
}

def @func_9694(%var_9691: Tensor[(30, 9), float64]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(30, 9), float64], uint64) {
  %518 = cast(%var_9691, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %519 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %520 = reshape(%518, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float64] */;
  %521 = reshape(%519, newshape=[]) /* ty=uint64 */;
  %522 = @func_3226(%520, %521) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
  %523 = @func_9224() /* ty=Tensor[(3, 14, 6), uint64] */;
  %524 = %522.1;
  (%523, %524, %var_9691, meta[relay.Constant][20] /* ty=uint64 */)
}

def @func_10355() -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32]) {
  @func_10353() /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), float32]) */
}

def @func_8674() -> (Tensor[(6, 12, 13), float32],) {
  @func_8672() /* ty=(Tensor[(6, 12, 13), float32],) */
}

def @func_12070() -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
  %530 = fn () -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
    %525 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %526 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
    %527 = %525.0;
    %528 = %526.5;
    %529 = @func_10201() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%527, %528, %529)
  };
  %530() /* ty=(Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */
}

def @func_2754(%var_2752: Tensor[(280), bool]) -> (Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  @func_2751(%var_2752) /* ty=(Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) */
}

def @func_11265() -> (Tensor[(3, 14, 6), float32],) {
  %531 = @func_9604() /* ty=(Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) */;
  %532 = %531.2;
  (%532,)
}

def @func_3949(%var_3938: Tensor[(4, 14, 2), int32]) -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) {
  %533 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 14, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 14, 2), int32] */;
  %534 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_3938, dtype="int32") /* ty=Tensor[(4, 14, 2), int32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %537 = multiply(%535, %536) /* ty=Tensor[(4, 14, 2), int32] */;
  %538 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%537, %538)
}

def @func_14388(%var_14386: uint64, %var_14387: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(252), float64], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint8], Tensor[(112), int32], Tensor[(16, 11, 1), bool]) {
  @func_14384(%var_14386, %var_14387) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(252), float64], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint8], Tensor[(112), int32], Tensor[(16, 11, 1), bool]) */
}

def @func_9225() -> Tensor[(3, 14, 6), uint64] {
  %539 = fn () -> Tensor[(3, 14, 6), uint64] {
    @func_6852() /* ty=Tensor[(3, 14, 6), uint64] */
  };
  %539() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_6653() -> uint64 {
  %541 = fn () -> uint64 {
    %540 = @func_4600() /* ty=(uint64,) */;
    %540.0
  };
  %541() /* ty=uint64 */
}

def @func_13214() -> (Tensor[(6, 12, 13), float32],) {
  @func_13212() /* ty=(Tensor[(6, 12, 13), float32],) */
}

def @func_9766() -> (uint64, Tensor[(9, 3, 4), float64]) {
  @func_9764() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */
}

def @func_11995() -> uint64 {
  @func_11993() /* ty=uint64 */
}

def @func_4184(%var_4183: Tensor[(3, 14, 6), uint64]) -> Tensor[(3, 14, 6), bool] {
  %548 = fn (%var_4176: Tensor[(3, 14, 6), uint64]) -> Tensor[(3, 14, 6), bool] {
    %542 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
    %543 = %542.0;
    %544 = cast(%var_4176, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%546, %547) /* ty=Tensor[(3, 14, 6), bool] */
  };
  %548(%var_4183) /* ty=Tensor[(3, 14, 6), bool] */
}

def @func_12994() -> uint64 {
  %549 = fn () -> uint64 {
    @func_6574() /* ty=uint64 */
  };
  %549() /* ty=uint64 */
}

def @func_9371() -> (uint64,) {
  %550 = @func_9073() /* ty=(uint64,) */;
  %551 = %550.0;
  (%551,)
}

def @func_7197() -> Tensor[(3, 14, 6), float32] {
  @func_7195() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_13323() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint64]) {
  @func_13321() /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint64]) */
}

def @func_2390() -> (uint64,) {
  %554 = fn () -> (uint64,) {
    %552 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %553 = %552.2;
    (%553,)
  };
  %554() /* ty=(uint64,) */
}

def @func_10294(%var_10292: Tensor[(7, 10, 5), float64], %var_10293: Tensor[(7, 10, 5), float64]) -> (Tensor[(7, 10, 5), float64], uint64, uint64) {
  @func_10290(%var_10292, %var_10293) /* ty=(Tensor[(7, 10, 5), float64], uint64, uint64) */
}

def @func_7428() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) {
  %555 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %556 = @func_4741() /* ty=(uint64,) */;
  %557 = %555.1;
  %558 = %556.0;
  %559 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  (%557, %558, %559)
}

def @func_9983() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) {
  @func_9981() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32]) */
}

def @func_11755(%var_11754: Tensor[(2, 5, 13), float32]) -> (Tensor[(2, 5, 13), float32], Tensor[(3, 14, 6), float32], Tensor[(4, 14, 2), int32]) {
  %566 = fn (%var_11724: Tensor[(2, 5, 13), float32]) -> (Tensor[(2, 5, 13), float32], Tensor[(3, 14, 6), float32], Tensor[(4, 14, 2), int32]) {
    %560 = cast(%var_11724, dtype="float32") /* ty=Tensor[(2, 5, 13), float32] */;
    %561 = @func_11265() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %562 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
    %563 = log(%560) /* ty=Tensor[(2, 5, 13), float32] */;
    %564 = %561.0;
    %565 = %562.1;
    (%563, %564, %565)
  };
  %566(%var_11754) /* ty=(Tensor[(2, 5, 13), float32], Tensor[(3, 14, 6), float32], Tensor[(4, 14, 2), int32]) */
}

def @func_10857(%var_10853: Tensor[(2, 7, 7), float32]) -> Tensor[(2, 7, 7), float32] {
  %567 = cast(%var_10853, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  log(%567) /* ty=Tensor[(2, 7, 7), float32] */
}

def @func_3879() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) {
  @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */
}

def @func_8219() -> Tensor[(5, 15, 13), float64] {
  @func_8217() /* ty=Tensor[(5, 15, 13), float64] */
}

def @func_9865(%var_9863: Tensor[(13, 8, 15), uint16], %var_9864: Tensor[(13, 8, 15), uint16]) -> (Tensor[(13, 8, 15), uint16], Tensor[(3, 14, 6), uint8]) {
  %574 = fn (%var_9836: Tensor[(13, 8, 15), uint16], %var_9837: Tensor[(13, 8, 15), uint16]) -> (Tensor[(13, 8, 15), uint16], Tensor[(3, 14, 6), uint8]) {
    %568 = cast(%var_9837, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
    %569 = shape_of(%var_9836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%var_9836, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %572 = maximum(%570, %571) /* ty=Tensor[(13, 8, 15), uint16] */;
    %573 = @func_8947() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%572, %573)
  };
  %574(%var_9863, %var_9864) /* ty=(Tensor[(13, 8, 15), uint16], Tensor[(3, 14, 6), uint8]) */
}

def @func_13587() -> (Tensor[(3, 14, 6), uint8],) {
  %575 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%575,)
}

def @func_4865() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) {
  @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */
}

def @func_6267() -> (Tensor[(3, 14, 6), uint64],) {
  @func_6265() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_8734() -> (Tensor[(9, 3, 4), float32],) {
  %578 = fn () -> (Tensor[(9, 3, 4), float32],) {
    %576 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
    %577 = %576.0;
    (%577,)
  };
  %578() /* ty=(Tensor[(9, 3, 4), float32],) */
}

def @func_13072() -> (Tensor[(9, 3, 4), float32],) {
  %581 = fn () -> (Tensor[(9, 3, 4), float32],) {
    %579 = @func_8733() /* ty=(Tensor[(9, 3, 4), float32],) */;
    %580 = %579.0;
    (%580,)
  };
  %581() /* ty=(Tensor[(9, 3, 4), float32],) */
}

def @func_6228() -> (Tensor[(3, 14, 6), float32],) {
  @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_4271() -> uint64 {
  @func_4269() /* ty=uint64 */
}

def @func_11536(%var_11526: uint64, %var_11527: Tensor[(7, 4, 7), uint64]) -> (Tensor[(7, 4, 7), bool],) {
  %582 = cast(%var_11526, dtype="bool") /* ty=bool */;
  %583 = cast(%var_11527, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %584 = less(%582, %583) /* ty=Tensor[(7, 4, 7), bool] */;
  (%584,)
}

def @func_1301(%var_1299: uint64) -> (Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) {
  @func_1298(%var_1299) /* ty=(Tensor[(3, 14, 6), float64], Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_12251() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  @func_12249() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_3587() -> Tensor[(3, 14, 6), uint64] {
  %585 = @func_2619() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %585.0
}

def @func_3791() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_14200() -> (Tensor[(3, 14, 6), float64],) {
  %588 = fn () -> (Tensor[(3, 14, 6), float64],) {
    %586 = @func_11505() /* ty=(Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), uint8]) */;
    %587 = %586.0;
    (%587,)
  };
  %588() /* ty=(Tensor[(3, 14, 6), float64],) */
}

def @func_2691() -> (Tensor[(3, 14, 6), uint64], uint64) {
  %589 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %590 = @func_2389() /* ty=(uint64,) */;
  %591 = %589.0;
  %592 = %590.0;
  (%591, %592)
}

def @func_2932() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %597 = fn () -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
    %593 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
    %594 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %595 = %593.0;
    %596 = %594.1;
    (%595, %596)
  };
  %597() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */
}

def @func_3514(%var_3513: uint64) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
  %610 = fn (%var_3485: uint64) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
    %598 = cast(%var_3485, dtype="uint64") /* ty=uint64 */;
    %599 = reshape(%598, newshape=[]) /* ty=uint64 */;
    %600 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %601 = cast(%var_3485, dtype="uint64") /* ty=uint64 */;
    %602 = @func_306(%599) /* ty=Tensor[(3, 14, 6), uint64] */;
    %603 = cast(%602, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %604 = reshape(%601, newshape=[]) /* ty=uint64 */;
    %605 = reshape(%603, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
    %606 = @func_2055(%604, %605) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
    %607 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
    %608 = %600.2;
    %609 = %606.1;
    (%607, %602, %var_3485, %608, %609)
  };
  %610(%var_3513) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_12757(%var_12745: Tensor[(280), bool]) -> (Tensor[(6, 12, 13), float32], Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  %611 = cast(%var_12745, dtype="bool") /* ty=Tensor[(280), bool] */;
  %612 = cast(%var_12745, dtype="bool") /* ty=Tensor[(280), bool] */;
  %613 = reshape(%611, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %614 = reshape(%612, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %615 = @func_2512(%613, %614) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %616 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
  %617 = %615.0;
  (%616, %617, %var_12745)
}

def @func_4690() -> (Tensor[(3, 14, 6), uint8],) {
  %620 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %618 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
    %619 = %618.0;
    (%619,)
  };
  %620() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_13389() -> (Tensor[(3, 14, 6), uint64],) {
  %622 = fn () -> (Tensor[(3, 14, 6), uint64],) {
    %621 = @func_7999() /* ty=Tensor[(3, 14, 6), uint64] */;
    (%621,)
  };
  %622() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_13824() -> Tensor[(3, 14, 6), float32] {
  %624 = fn () -> Tensor[(3, 14, 6), float32] {
    %623 = @func_7155() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %623.0
  };
  %624() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_2479() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) {
  %629 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) {
    %625 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %626 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %627 = %625.1;
    %628 = %626.1;
    (%627, %628)
  };
  %629() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) */
}

def @func_6903() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  @func_6901() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) */
}

def @func_6872(%var_6871: Tensor[(12, 5, 1), int16]) -> Tensor[(12, 5, 1), int16] {
  %632 = fn (%var_6866: Tensor[(12, 5, 1), int16]) -> Tensor[(12, 5, 1), int16] {
    %630 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %631 = cast(%var_6866, dtype="int16") /* ty=Tensor[(12, 5, 1), int16] */;
    right_shift(%630, %631) /* ty=Tensor[(12, 5, 1), int16] */
  };
  %632(%var_6871) /* ty=Tensor[(12, 5, 1), int16] */
}

def @func_4438() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) {
  %642 = fn () -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) {
    %633 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %634 = @func_1809() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %635 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
    %636 = %635.0;
    %637 = cast(%636, dtype="uint64") /* ty=Tensor[(16, 11, 1), uint64] */;
    %638 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 11, 10), float32] */, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
    %639 = %633.0;
    %640 = %634.2;
    %641 = left_shift(%637, %638) /* ty=Tensor[(16, 11, 10), uint64] */;
    (%639, %640, %641)
  };
  %642() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */
}

def @func_10475() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
  @func_10473() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */
}

def @func_2693() -> (Tensor[(3, 14, 6), uint64], uint64) {
  @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_7601(%var_7599: Tensor[(16, 16, 5), float32], %var_7600: Tensor[(16, 16, 5), float32]) -> (Tensor[(16, 16, 5), float32],) {
  %648 = fn (%var_7586: Tensor[(16, 16, 5), float32], %var_7587: Tensor[(16, 16, 5), float32]) -> (Tensor[(16, 16, 5), float32],) {
    %643 = cast(%var_7587, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
    %644 = shape_of(%var_7586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_7586, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %647 = divide(%645, %646) /* ty=Tensor[(16, 16, 5), float32] */;
    (%647,)
  };
  %648(%var_7599, %var_7600) /* ty=(Tensor[(16, 16, 5), float32],) */
}

def @func_6813(%var_6811: uint8, %var_6812: Tensor[(10, 2), uint8]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) {
  %660 = fn (%var_6807: uint8, %var_6808: Tensor[(10, 2), uint8]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) {
    %649 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 8), float64] */;
    %650 = cast(meta[relay.Constant][25] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %651 = reshape(%650, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
    %652 = @func_4383(%651) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) */;
    %653 = cast(%var_6807, dtype="uint8") /* ty=uint8 */;
    %654 = cast(%var_6808, dtype="uint8") /* ty=Tensor[(10, 2), uint8] */;
    %655 = reshape(%653, newshape=[]) /* ty=uint8 */;
    %656 = reshape(%654, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
    %657 = asinh(%649) /* ty=Tensor[(3, 8, 8), float64] */;
    %658 = %652.3;
    %659 = @func_4930(%655, %656) /* ty=Tensor[(5, 4, 1), uint8] */;
    (%657, %658, meta[relay.Constant][25] /* ty=Tensor[(252), uint64] */, %659, %var_6807, %var_6808)
  };
  %660(%var_6811, %var_6812) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 13, 10), uint8], Tensor[(252), uint64], Tensor[(5, 4, 1), uint8], uint8, Tensor[(10, 2), uint8]) */
}

def @func_3700() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) {
  @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */
}

def @func_2751(%var_2741: Tensor[(280), bool]) -> (Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  %661 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %662 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %663 = cast(%var_2741, dtype="bool") /* ty=Tensor[(280), bool] */;
  %664 = cast(%var_2741, dtype="bool") /* ty=Tensor[(280), bool] */;
  %665 = reshape(%663, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %666 = reshape(%664, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
  %667 = @func_2512(%665, %666) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
  %668 = %661.0;
  %669 = %662.1;
  %670 = %667.0;
  (%668, %669, %670, %var_2741)
}

def @func_12869() -> Tensor[(3, 14, 6), uint64] {
  @func_9251() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_6952(%var_6951: Tensor[(96), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(96), float32], Tensor[(16, 11, 10), bool]) {
  %682 = fn (%var_6931: Tensor[(96), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(96), float32], Tensor[(16, 11, 10), bool]) {
    %671 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %672 = cast(%var_6931, dtype="float32") /* ty=Tensor[(96), float32] */;
    %673 = reshape(%672, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
    %674 = @func_6561(%673) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) */;
    %675 = %674.1;
    %676 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 11, 10), uint64] */, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %680 = %671.0;
    %681 = less(%678, %679) /* ty=Tensor[(16, 11, 10), bool] */;
    (%680, %var_6931, %681)
  };
  %682(%var_6951) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(96), float32], Tensor[(16, 11, 10), bool]) */
}

def @func_10688() -> (Tensor[(3, 14, 6), uint8],) {
  %683 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %684 = %683.0;
  (%684,)
}

def @func_10104(%var_10103: Tensor[(3, 7, 3), bool]) -> (Tensor[(3, 7, 3), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 7, 3), float32]) {
  %702 = fn (%var_10078: Tensor[(3, 7, 3), bool]) -> (Tensor[(3, 7, 3), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 7, 3), float32]) {
    %685 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 7, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
    %686 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_10078, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %689 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %690 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 7, 3), bool] */, dtype="uint8") /* ty=Tensor[(3, 7, 3), uint8] */;
    %691 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%var_10078, dtype="uint8") /* ty=Tensor[(3, 7, 3), uint8] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %694 = right_shift(%692, %693) /* ty=Tensor[(3, 7, 3), uint8] */;
    %695 = cast(%694, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
    %696 = shape_of(%var_10078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%var_10078, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %699 = logical_or(%687, %688) /* ty=Tensor[(3, 7, 3), bool] */;
    %700 = %689.0;
    %701 = floor_divide(%697, %698) /* ty=Tensor[(3, 7, 3), float32] */;
    (%699, %700, %701)
  };
  %702(%var_10103) /* ty=(Tensor[(3, 7, 3), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 7, 3), float32]) */
}

def @func_3260() -> Tensor[(6, 12, 13), float32] {
  %704 = fn () -> Tensor[(6, 12, 13), float32] {
    %703 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    acos(%703) /* ty=Tensor[(6, 12, 13), float32] */
  };
  %704() /* ty=Tensor[(6, 12, 13), float32] */
}

def @func_1783(%var_1781: uint64) -> (uint64, Tensor[(3, 14, 6), uint16]) {
  @func_1780(%var_1781) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */
}

def @func_12385(%var_12361: Tensor[(112), int32], %var_12370: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], uint64, Tensor[(112), int32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8]) {
  %705 = @func_11265() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %706 = @func_10408() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %707 = cast(%var_12361, dtype="int32") /* ty=Tensor[(112), int32] */;
  %708 = reshape(%707, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %709 = @func_8518(%708) /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %710 = %709.0;
  %711 = cast(%710, dtype="uint8") /* ty=uint8 */;
  %712 = cast(%var_12370, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %713 = reshape(%711, newshape=[]) /* ty=uint8 */;
  %714 = reshape(%712, newshape=[5, 4, 1]) /* ty=Tensor[(5, 4, 1), uint8] */;
  %715 = %705.0;
  %716 = %706.0;
  %717 = @func_6310() /* ty=Tensor[(3, 14, 6), uint8] */;
  %718 = @func_4930(%713, %714) /* ty=Tensor[(5, 4, 1), uint8] */;
  (%715, %716, %717, %710, %var_12361, %718, %var_12370)
}

def @func_13516(%var_13515: Tensor[(10, 2, 16), int8]) -> (Tensor[(10, 2, 16), float64], Tensor[(10, 2, 16), uint16], Tensor[(3, 14, 6), uint8]) {
  %733 = fn (%var_13489: Tensor[(10, 2, 16), int8]) -> (Tensor[(10, 2, 16), float64], Tensor[(10, 2, 16), uint16], Tensor[(3, 14, 6), uint8]) {
    %719 = cast(%var_13489, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %720 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 16), int8] */, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
    %721 = shape_of(%var_13489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%var_13489, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %724 = not_equal(%722, %723) /* ty=Tensor[(10, 2, 16), bool] */;
    %725 = cast(%724, dtype="uint16") /* ty=Tensor[(10, 2, 16), uint16] */;
    %726 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 16), int8] */, dtype="uint16") /* ty=Tensor[(10, 2, 16), uint16] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %729 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %730 = cosh(%719) /* ty=Tensor[(10, 2, 16), float64] */;
    %731 = bitwise_or(%727, %728) /* ty=Tensor[(10, 2, 16), uint16] */;
    %732 = %729.2;
    (%730, %731, %732)
  };
  %733(%var_13515) /* ty=(Tensor[(10, 2, 16), float64], Tensor[(10, 2, 16), uint16], Tensor[(3, 14, 6), uint8]) */
}

def @func_12850(%var_12842: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64],) {
  %734 = cast(%var_12842, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %735 = asinh(%734) /* ty=Tensor[(16, 1, 5), float64] */;
  (%735,)
}

def @func_12826() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8]) {
  %741 = fn () -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8]) {
    %736 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
    %737 = @func_6520() /* ty=(Tensor[(11, 13, 10), uint8],) */;
    %738 = %736.0;
    %739 = @func_5756() /* ty=Tensor[(3, 14, 6), float32] */;
    %740 = %737.0;
    (%738, %739, %740)
  };
  %741() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8]) */
}

def @func_4386(%var_4384: Tensor[(3, 14, 6), uint64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) {
  @func_4383(%var_4384) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) */
}

def @func_2813() -> (Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
  %749 = fn () -> (Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
    %742 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
    %743 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %746 = @func_1920() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %747 = logical_xor(%744, %745) /* ty=Tensor[(11, 13, 10), uint8] */;
    %748 = %746.0;
    (%747, %748)
  };
  %749() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */
}

def @func_6097() -> Tensor[(3, 14, 6), uint64] {
  %751 = fn () -> Tensor[(3, 14, 6), uint64] {
    %750 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
    %750.1
  };
  %751() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_10473() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), float32], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) {
  %752 = @func_2812() /* ty=(Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint8]) */;
  %753 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %754 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
  %755 = @func_1899() /* ty=Tensor[(3, 14, 6), float32] */;
  %756 = %752.0;
  %757 = %753.0;
  (%754, %755, %756, %757)
}

def @func_8634() -> (Tensor[(3, 14, 6), float64],) {
  %760 = fn () -> (Tensor[(3, 14, 6), float64],) {
    %758 = @func_4734() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) */;
    %759 = %758.2;
    (%759,)
  };
  %760() /* ty=(Tensor[(3, 14, 6), float64],) */
}

def @func_5505(%var_5413: Tensor[(224), float64], %var_5493: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) {
  %761 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %762 = cast(%var_5413, dtype="float64") /* ty=Tensor[(224), float64] */;
  %763 = reshape(%762, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %764 = @func_2095(%763) /* ty=(Tensor[(16, 1, 14), float64],) */;
  %765 = %764.0;
  %766 = cast(%var_5413, dtype="float32") /* ty=Tensor[(224), float32] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %770 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %771 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %772 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %773 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %774 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %775 = cast(%var_5493, dtype="float32") /* ty=Tensor[(66), float32] */;
  %776 = reshape(%775, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %777 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %778 = %761.0;
  %779 = power(%768, %769) /* ty=Tensor[(16, ?, 14), float32] */;
  %780 = %770.0;
  %781 = %771.3;
  %782 = %772.0;
  %783 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
  %784 = %773.0;
  %785 = %774.5;
  %786 = @func_1656(%776) /* ty=Tensor[(6, 11, 1), float32] */;
  %787 = %777.0;
  (%778, %779, %780, %781, %782, %783, %784, %785, %786, %var_5493, %787)
}

def @func_9346() -> Tensor[(3, 14, 6), float32] {
  @func_9344() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_9288() -> Tensor[(3, 14, 6), uint8] {
  @func_9286() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_3046() -> (Tensor[(3, 14, 6), uint8],) {
  %788 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
  (%788,)
}

def @func_8001() -> Tensor[(3, 14, 6), uint64] {
  @func_7999() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_11281() -> (uint64,) {
  %791 = fn () -> (uint64,) {
    %789 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %790 = %789.2;
    (%790,)
  };
  %791() /* ty=(uint64,) */
}

def @func_2143() -> Tensor[(3, 14, 6), uint8] {
  @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_7155() -> (Tensor[(3, 14, 6), float32],) {
  %792 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
  %793 = %792.1;
  (%793,)
}

def @func_11560() -> (Tensor[(3, 14, 6), uint8],) {
  %796 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %794 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %795 = %794.0;
    (%795,)
  };
  %796() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_11979() -> uint64 {
  @func_11977() /* ty=uint64 */
}

def @func_14477() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), bool]) {
  %805 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), bool]) {
    %797 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %798 = @func_7999() /* ty=Tensor[(3, 14, 6), uint64] */;
    %799 = cast(%798, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
    %800 = reshape(%799, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
    %801 = @func_4383(%800) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(11, 13, 10), uint8], Tensor[(3, 14, 6), uint64]) */;
    %802 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
    %803 = %797.0;
    %804 = %801.0;
    (%802, %798, %803, %804)
  };
  %805() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), bool]) */
}

def @func_3937() -> (Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) {
  %810 = fn () -> (Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) {
    %806 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 1), float32] */;
    %807 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %808 = erf(%806) /* ty=Tensor[(16, 11, 1), float32] */;
    %809 = %807.1;
    (%808, %809)
  };
  %810() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_5981(%var_5980: Tensor[(224), float64]) -> (Tensor[(16, 11, 10), uint64], Tensor[(16, 1, 14), float64], Tensor[(224), float64]) {
  %817 = fn (%var_5972: Tensor[(224), float64]) -> (Tensor[(16, 11, 10), uint64], Tensor[(16, 1, 14), float64], Tensor[(224), float64]) {
    %811 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
    %812 = cast(%var_5972, dtype="float64") /* ty=Tensor[(224), float64] */;
    %813 = reshape(%812, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
    %814 = @func_2095(%813) /* ty=(Tensor[(16, 1, 14), float64],) */;
    %815 = %811.2;
    %816 = %814.0;
    (%815, %816, %var_5972)
  };
  %817(%var_5980) /* ty=(Tensor[(16, 11, 10), uint64], Tensor[(16, 1, 14), float64], Tensor[(224), float64]) */
}

def @func_4930(%var_4922: uint8, %var_4923: Tensor[(5, 4, 1), uint8]) -> Tensor[(5, 4, 1), uint8] {
  %818 = cast(%var_4922, dtype="uint8") /* ty=uint8 */;
  %819 = cast(%var_4923, dtype="uint8") /* ty=Tensor[(5, 4, 1), uint8] */;
  logical_xor(%818, %819) /* ty=Tensor[(5, 4, 1), uint8] */
}

def @func_5317() -> (uint64, Tensor[(9, 3, 4), float64]) {
  @func_5315() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */
}

def @func_8614(%var_8611: Tensor[(224), float64], %var_8612: Tensor[(1, 66), float32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) {
  %820 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %821 = cast(%var_8611, dtype="float64") /* ty=Tensor[(224), float64] */;
  %822 = cast(%var_8612, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
  %823 = reshape(%821, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %824 = reshape(%822, newshape=[66]) /* ty=Tensor[(66), float32] */;
  %825 = @func_5505(%823, %824) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) */;
  %826 = %820.0;
  %827 = %825.6;
  (%826, %827, %var_8611, %var_8612)
}

def @func_9391() -> (Tensor[(3, 14, 6), uint64],) {
  %829 = fn () -> (Tensor[(3, 14, 6), uint64],) {
    %828 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
    (%828,)
  };
  %829() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_2265() -> (uint64, Tensor[(3, 14, 6), uint64]) {
  %834 = fn () -> (uint64, Tensor[(3, 14, 6), uint64]) {
    %830 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %831 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
    %832 = %830.2;
    %833 = %831.1;
    (%832, %833)
  };
  %834() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */
}

def @func_10690() -> (Tensor[(3, 14, 6), uint8],) {
  @func_10688() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_10860(%var_10858: Tensor[(2, 7, 7), float32]) -> Tensor[(2, 7, 7), float32] {
  @func_10857(%var_10858) /* ty=Tensor[(2, 7, 7), float32] */
}

def @func_11039() -> (uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %835 = @func_6725() /* ty=(uint64,) */;
  %836 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
  %837 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %838 = @func_9390() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %839 = %835.0;
  %840 = %836.1;
  %841 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  %842 = %837.2;
  %843 = %838.0;
  (%839, %840, %841, %842, %843)
}

def @func_7999() -> Tensor[(3, 14, 6), uint64] {
  %844 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
  %844.0
}

def @func_6602() -> uint64 {
  %846 = fn () -> uint64 {
    %845 = @func_2691() /* ty=(Tensor[(3, 14, 6), uint64], uint64) */;
    %845.1
  };
  %846() /* ty=uint64 */
}

def @func_13652(%var_13650: Tensor[(270), float64]) -> (Tensor[(270), float64], Tensor[(270), bool]) {
  @func_13649(%var_13650) /* ty=(Tensor[(270), float64], Tensor[(270), bool]) */
}

def @func_3375() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_1372() -> (Tensor[(3, 14, 6), uint64],) {
  @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_2581() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  %847 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %848 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %849 = %847.0;
  %850 = %848.0;
  (%849, %850)
}

def @func_11267() -> (Tensor[(3, 14, 6), float32],) {
  @func_11265() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_7360() -> (Tensor[(270), float64],) {
  @func_7358() /* ty=(Tensor[(270), float64],) */
}

def @func_3952(%var_3950: Tensor[(4, 14, 2), int32]) -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) {
  @func_3949(%var_3950) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */
}

def @func_10592() -> (Tensor[(3, 14, 6), uint64],) {
  %851 = @func_9224() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%851,)
}

def @func_14406() -> (Tensor[(3, 14, 6), uint8],) {
  %852 = @func_9785() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %853 = %852.0;
  (%853,)
}

def @func_9605() -> (Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) {
  %863 = fn () -> (Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) {
    %854 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    %855 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="int64") /* ty=Tensor[(3, 14, 6), int64] */;
    %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %857 = cast(%854, dtype="int64") /* ty=Tensor[(3, 14, 6), int64] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %859 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %860 = bitwise_xor(%857, %858) /* ty=Tensor[(3, 14, 6), int64] */;
    %861 = @func_7917() /* ty=Tensor[(16, 11, 10), uint64] */;
    %862 = %859.0;
    (%860, %861, %862)
  };
  %863() /* ty=(Tensor[(3, 14, 6), int64], Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32]) */
}

def @func_4934(%var_4932: uint8, %var_4933: Tensor[(5, 4, 1), uint8]) -> Tensor[(5, 4, 1), uint8] {
  @func_4930(%var_4932, %var_4933) /* ty=Tensor[(5, 4, 1), uint8] */
}

def @func_2512(%var_2495: Tensor[(2, 14, 10), bool], %var_2496: Tensor[(2, 14, 10), bool]) -> (Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) {
  %864 = cast(%var_2496, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %865 = shape_of(%var_2495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%var_2495, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %868 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %869 = logical_and(%866, %867) /* ty=Tensor[(2, 14, 10), bool] */;
  %870 = %868.0;
  (%869, %870)
}

def @func_8982() -> (Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32], Tensor[(1092, ?), float64]) {
  %883 = fn () -> (Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32], Tensor[(1092, ?), float64]) {
    %871 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
    %872 = @func_7155() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %873 = cast(meta[relay.Constant][34] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
    %874 = reshape(%873, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float64] */;
    %875 = @func_6017(%874) /* ty=Tensor[(13, 14, 6), float64] */;
    %876 = cast(%875, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
    %877 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1092, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %878 = cast(meta[relay.Constant][34] /* ty=Tensor[(1092, 1), float64] */, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
    %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %880 = %871.2;
    %881 = %872.0;
    %882 = divide(%878, %879) /* ty=Tensor[(1092, ?), float64] */;
    (%880, %881, %882)
  };
  %883() /* ty=(Tensor[(16, 11, 10), uint64], Tensor[(3, 14, 6), float32], Tensor[(1092, ?), float64]) */
}

def @func_8309() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) {
  @func_8307() /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) */
}

def @func_2141() -> Tensor[(3, 14, 6), uint8] {
  @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_10973(%var_10971: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(66), float32], Tensor[(7, 156), float64], Tensor[(7, 156), bool], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) {
  @func_10970(%var_10971) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(66), float32], Tensor[(7, 156), float64], Tensor[(7, 156), bool], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_8618(%var_8616: Tensor[(224), float64], %var_8617: Tensor[(1, 66), float32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) {
  @func_8614(%var_8616, %var_8617) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(224), float64], Tensor[(1, 66), float32]) */
}

def @func_7567(%var_7566: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(20), uint8], uint64) {
  %891 = fn (%var_7532: Tensor[(20), uint8]) -> (Tensor[(3, 14, 6), float32], uint64, Tensor[(20), uint8], uint64) {
    %884 = cast(%var_7532, dtype="uint8") /* ty=Tensor[(20), uint8] */;
    %885 = reshape(%884, newshape=[5, 4]) /* ty=Tensor[(5, 4), uint8] */;
    %886 = @func_6354(%885) /* ty=(uint64, Tensor[(5, 4, 1), uint8], Tensor[(5, 4), uint8], Tensor[(3, 14, 6), uint64], Tensor[(16, 14), float64], Tensor[(66), float32], uint64) */;
    %887 = @func_4600() /* ty=(uint64,) */;
    %888 = @func_3906() /* ty=Tensor[(3, 14, 6), float32] */;
    %889 = %886.6;
    %890 = %887.0;
    (%888, %889, %var_7532, %890)
  };
  %891(%var_7566) /* ty=(Tensor[(3, 14, 6), float32], uint64, Tensor[(20), uint8], uint64) */
}

def @func_10529() -> (uint64, uint64, Tensor[(6, 12, 13), float32], uint64) {
  %899 = fn () -> (uint64, uint64, Tensor[(6, 12, 13), float32], uint64) {
    %892 = @func_5315() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
    %893 = @func_9764() /* ty=(uint64, Tensor[(9, 3, 4), float64]) */;
    %894 = @func_2389() /* ty=(uint64,) */;
    %895 = %892.0;
    %896 = %893.0;
    %897 = @func_3259() /* ty=Tensor[(6, 12, 13), float32] */;
    %898 = %894.0;
    (%895, %896, %897, %898)
  };
  %899() /* ty=(uint64, uint64, Tensor[(6, 12, 13), float32], uint64) */
}

def @func_14408() -> (Tensor[(3, 14, 6), uint8],) {
  @func_14406() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_13874() -> (uint64, Tensor[(3, 14, 6), uint64]) {
  %903 = fn () -> (uint64, Tensor[(3, 14, 6), uint64]) {
    %900 = @func_9443() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %901 = @func_11872() /* ty=uint64 */;
    %902 = %900.0;
    (%901, %902)
  };
  %903() /* ty=(uint64, Tensor[(3, 14, 6), uint64]) */
}

def @func_6311() -> Tensor[(3, 14, 6), uint8] {
  %905 = fn () -> Tensor[(3, 14, 6), uint8] {
    %904 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %904.1
  };
  %905() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_9764() -> (uint64, Tensor[(9, 3, 4), float64]) {
  %906 = @func_6725() /* ty=(uint64,) */;
  %907 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
  %908 = %906.0;
  %909 = %907.1;
  (%908, %909)
}

def @func_7778(%var_7777: Tensor[(15, 4), int16]) -> (Tensor[(3, 14, 6), uint8], Tensor[(15, 4), int16], Tensor[(3, 14, 6), uint8], Tensor[(12, 5, 1), float32], Tensor[(3, 14, 6), uint64]) {
  %918 = fn (%var_7745: Tensor[(15, 4), int16]) -> (Tensor[(3, 14, 6), uint8], Tensor[(15, 4), int16], Tensor[(3, 14, 6), uint8], Tensor[(12, 5, 1), float32], Tensor[(3, 14, 6), uint64]) {
    %910 = cast(%var_7745, dtype="int16") /* ty=Tensor[(15, 4), int16] */;
    %911 = reshape(%910, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), int16] */;
    %912 = @func_6870(%911) /* ty=Tensor[(12, 5, 1), int16] */;
    %913 = cast(%912, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
    %914 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    %915 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
    %916 = erf(%913) /* ty=Tensor[(12, 5, 1), float32] */;
    %917 = @func_7035() /* ty=Tensor[(3, 14, 6), uint64] */;
    (%914, %var_7745, %915, %916, %917)
  };
  %918(%var_7777) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(15, 4), int16], Tensor[(3, 14, 6), uint8], Tensor[(12, 5, 1), float32], Tensor[(3, 14, 6), uint64]) */
}

def @func_9073() -> (uint64,) {
  %919 = @func_7338() /* ty=(uint64,) */;
  %920 = %919.0;
  (%920,)
}

def @func_11041() -> (uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  @func_11039() /* ty=(uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) */
}

def @func_12497() -> (Tensor[(3, 14, 6), uint64],) {
  %923 = fn () -> (Tensor[(3, 14, 6), uint64],) {
    %921 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
    %922 = %921.0;
    (%922,)
  };
  %923() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_14293() -> Tensor[(16, 11, 10), float64] {
  @func_14291() /* ty=Tensor[(16, 11, 10), float64] */
}

def @func_2204() -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %931 = fn () -> (Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
    %924 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %925 = %924.1;
    %926 = cast(%925, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
    %927 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %928 = asinh(%926) /* ty=Tensor[(3, 14, 6), float32] */;
    %929 = %927.0;
    %930 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%928, %929, %930)
  };
  %931() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_4510(%var_4509: Tensor[(252), uint64]) -> (uint64, Tensor[(3, 14, 6), bool], Tensor[(252), uint64], Tensor[(3, 14, 6), uint64]) {
  %940 = fn (%var_4487: Tensor[(252), uint64]) -> (uint64, Tensor[(3, 14, 6), bool], Tensor[(252), uint64], Tensor[(3, 14, 6), uint64]) {
    %932 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
    %933 = cast(%var_4487, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %934 = reshape(%933, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), uint64] */;
    %935 = %932.0;
    %936 = cast(%935, dtype="uint64") /* ty=uint64 */;
    %937 = reshape(%936, newshape=[]) /* ty=uint64 */;
    %938 = @func_4182(%934) /* ty=Tensor[(3, 14, 6), bool] */;
    %939 = @func_306(%937) /* ty=Tensor[(3, 14, 6), uint64] */;
    (%935, %938, %var_4487, %939)
  };
  %940(%var_4509) /* ty=(uint64, Tensor[(3, 14, 6), bool], Tensor[(252), uint64], Tensor[(3, 14, 6), uint64]) */
}

def @func_1620(%var_1618: uint64) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
  @func_1617(%var_1618) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_3048() -> (Tensor[(3, 14, 6), uint8],) {
  @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_10408() -> (Tensor[(3, 14, 6), uint8],) {
  %941 = @func_3098() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %942 = %941.5;
  (%942,)
}

def @func_7358() -> (Tensor[(270), float64],) {
  %943 = @func_7069() /* ty=(Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) */;
  %944 = %943.2;
  (%944,)
}

def @func_7157() -> (Tensor[(3, 14, 6), float32],) {
  @func_7155() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_7812(%var_7811: Tensor[(280), bool]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(2, 14, 10), bool], Tensor[(280), bool], Tensor[(3, 14, 6), uint64]) {
  %956 = fn (%var_7799: Tensor[(280), bool]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(2, 14, 10), bool], Tensor[(280), bool], Tensor[(3, 14, 6), uint64]) {
    %945 = @func_3789() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %946 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %947 = cast(%var_7799, dtype="bool") /* ty=Tensor[(280), bool] */;
    %948 = cast(%var_7799, dtype="bool") /* ty=Tensor[(280), bool] */;
    %949 = reshape(%947, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
    %950 = reshape(%948, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), bool] */;
    %951 = @func_2512(%949, %950) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(3, 14, 6), uint64]) */;
    %952 = %945.0;
    %953 = %946.3;
    %954 = %951.0;
    %955 = @func_6096() /* ty=Tensor[(3, 14, 6), uint64] */;
    (%952, %953, %954, %var_7799, %955)
  };
  %956(%var_7811) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(2, 14, 10), bool], Tensor[(280), bool], Tensor[(3, 14, 6), uint64]) */
}

def @func_6485() -> Tensor[(3, 14, 6), uint16] {
  %957 = fn () -> Tensor[(3, 14, 6), uint16] {
    @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */
  };
  %957() /* ty=Tensor[(3, 14, 6), uint16] */
}

def @func_13117(%var_13115: Tensor[(14, 15, 10), float64]) -> Tensor[(14, 15, 10), float64] {
  @func_13114(%var_13115) /* ty=Tensor[(14, 15, 10), float64] */
}

def @func_14452() -> uint64 {
  %958 = fn () -> uint64 {
    @func_4847() /* ty=uint64 */
  };
  %958() /* ty=uint64 */
}

def @func_13790(%var_13718: uint64, %var_13788: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, uint64, Tensor[(3, 14, 6), uint64], Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %959 = cast(%var_13718, dtype="uint64") /* ty=uint64 */;
  %960 = reshape(%959, newshape=[]) /* ty=uint64 */;
  %961 = @func_3512(%960) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
  %962 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
  %963 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %964 = cast(%var_13788, dtype="int32") /* ty=Tensor[(112), int32] */;
  %965 = reshape(%964, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %966 = @func_3949(%965) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %967 = @func_12869() /* ty=Tensor[(3, 14, 6), uint64] */;
  %968 = %961.1;
  %969 = %962.0;
  %970 = %963.0;
  %971 = %966.0;
  (%967, %968, %var_13718, %969, %970, %971, %var_13788)
}

def @func_3424(%var_3422: uint64) -> (Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint16], uint64, Tensor[(11, 13, 10), uint8]) {
  @func_3421(%var_3422) /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint16], uint64, Tensor[(11, 13, 10), uint8]) */
}

def @func_4124(%var_4015: Tensor[(2, 14, 10), bool], %var_4057: Tensor[(270), float64], %var_4061: Tensor[(140, 2), float64], %var_4071: Tensor[(140, 2), float64]) -> (uint64, Tensor[(2, 14, 10), int16], Tensor[(3, 14, 6), uint8], Tensor[(140, 2), int32], Tensor[(2, 15, 9), float64], Tensor[(270), float64], Tensor[(140, 2), int16], Tensor[(140, 2), bool], Tensor[(140, 2), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64]) {
  %972 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %973 = cast(meta[relay.Constant][35] /* ty=Tensor[(140, 2), bool] */, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %974 = reshape(%973, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %975 = @func_2751(%974) /* ty=(Tensor[(9, 3, 4), float32], uint64, Tensor[(2, 14, 10), bool], Tensor[(280), bool]) */;
  %976 = %975.2;
  %977 = cast(%var_4015, dtype="int16") /* ty=Tensor[(2, 14, 10), int16] */;
  %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %979 = cast(%976, dtype="int16") /* ty=Tensor[(2, 14, 10), int16] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %981 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %982 = cast(meta[relay.Constant][35] /* ty=Tensor[(140, 2), bool] */, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
  %983 = asin(%982) /* ty=Tensor[(140, 2), float32] */;
  %984 = cast(%976, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %986 = cast(%983, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %988 = not_equal(%986, %987) /* ty=Tensor[(140, 2), bool] */;
  %989 = cast(%983, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
  %990 = shape_of(%988, dtype="int32") /* ty=Tensor[(2), int32] */;
  %991 = cast(%988, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %993 = cast(%var_4057, dtype="float64") /* ty=Tensor[(270), float64] */;
  %994 = reshape(%993, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %995 = @func_3735(%994) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %996 = cast(%988, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %997 = exp(%996) /* ty=Tensor[(140, 2), float64] */;
  %998 = cast(%var_4071, dtype="int16") /* ty=Tensor[(140, 2), int16] */;
  %999 = shape_of(%997, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1000 = cast(%997, dtype="int16") /* ty=Tensor[(140, 2), int16] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1002 = cast(%976, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %1003 = shape_of(%983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1004 = cast(%983, dtype="bool") /* ty=Tensor[(140, 2), bool] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1006 = cast(%var_4061, dtype="uint64") /* ty=Tensor[(140, 2), uint64] */;
  %1007 = shape_of(%997, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1008 = cast(%997, dtype="uint64") /* ty=Tensor[(140, 2), uint64] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %1010 = logical_xor(%1008, %1009) /* ty=Tensor[(140, 2), uint64] */;
  %1011 = cast(%997, dtype="uint8") /* ty=Tensor[(140, 2), uint8] */;
  %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1013 = cast(%1010, dtype="uint8") /* ty=Tensor[(140, 2), uint8] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1015 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1016 = %972.1;
  %1017 = cast(%1016, dtype="uint64") /* ty=uint64 */;
  %1018 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  %1019 = cast(%1018, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
  %1020 = reshape(%1017, newshape=[]) /* ty=uint64 */;
  %1021 = reshape(%1019, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
  %1022 = @func_2055(%1020, %1021) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
  %1023 = bitwise_or(%979, %980) /* ty=Tensor[(2, 14, 10), int16] */;
  %1024 = %981.0;
  %1025 = bitwise_or(%991, %992) /* ty=Tensor[(140, 2), int32] */;
  %1026 = %995.1;
  %1027 = bitwise_xor(%1000, %1001) /* ty=Tensor[(140, 2), int16] */;
  %1028 = logical_or(%1004, %1005) /* ty=Tensor[(140, 2), bool] */;
  %1029 = add(%1013, %1014) /* ty=Tensor[(140, 2), uint8] */;
  %1030 = %1015.0;
  %1031 = %1022.8;
  (%1016, %1023, %1024, %1025, %1026, %var_4057, %1027, %1028, %1029, %1018, %1030, %1031)
}

def @func_6725() -> (uint64,) {
  %1032 = @func_4984() /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */;
  %1033 = %1032.0;
  (%1033,)
}

def @func_7339() -> (uint64,) {
  %1036 = fn () -> (uint64,) {
    %1034 = @func_7069() /* ty=(Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) */;
    %1035 = %1034.1;
    (%1035,)
  };
  %1036() /* ty=(uint64,) */
}

def @func_9075() -> (uint64,) {
  @func_9073() /* ty=(uint64,) */
}

def @func_8201() -> uint64 {
  %1037 = @func_6725() /* ty=(uint64,) */;
  %1037.0
}

def @func_7899() -> (Tensor[(3, 14, 6), uint8],) {
  %1039 = fn () -> (Tensor[(3, 14, 6), uint8],) {
    %1038 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%1038,)
  };
  %1039() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_11334(%var_11332: int16, %var_11333: Tensor[(6, 15, 12), int16]) -> (Tensor[(6, 15, 12), int16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
  %1046 = fn (%var_11296: int16, %var_11297: Tensor[(6, 15, 12), int16]) -> (Tensor[(6, 15, 12), int16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) {
    %1040 = cast(%var_11296, dtype="int16") /* ty=int16 */;
    %1041 = cast(%var_11297, dtype="int16") /* ty=Tensor[(6, 15, 12), int16] */;
    %1042 = @func_8179() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %1043 = bitwise_or(%1040, %1041) /* ty=Tensor[(6, 15, 12), int16] */;
    %1044 = @func_7080() /* ty=Tensor[(3, 14, 6), float32] */;
    %1045 = %1042.0;
    (%1043, %1044, %1045)
  };
  %1046(%var_11332, %var_11333) /* ty=(Tensor[(6, 15, 12), int16], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_306(%var_298: uint64) -> Tensor[(3, 14, 6), uint64] {
  %1047 = cast(%var_298, dtype="uint64") /* ty=uint64 */;
  %1048 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 14, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 14, 6), uint64] */;
  minimum(%1047, %1048) /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_13794(%var_13792: uint64, %var_13793: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, uint64, Tensor[(3, 14, 6), uint64], Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  @func_13790(%var_13792, %var_13793) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, uint64, Tensor[(3, 14, 6), uint64], Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */
}

def @func_3906() -> Tensor[(3, 14, 6), float32] {
  %1049 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %1049.0
}

def @func_7036() -> Tensor[(3, 14, 6), uint64] {
  %1051 = fn () -> Tensor[(3, 14, 6), uint64] {
    %1050 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1050.0
  };
  %1051() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_8573() -> (uint64, Tensor[(16, 11, 1), float32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8], Tensor[(13, 14, 6), float64], Tensor[(1092), float64], Tensor[(3, 14, 6), uint64]) {
  @func_8571() /* ty=(uint64, Tensor[(16, 11, 1), float32], Tensor[(5, 4, 1), uint8], Tensor[(20), uint8], Tensor[(13, 14, 6), float64], Tensor[(1092), float64], Tensor[(3, 14, 6), uint64]) */
}

def @func_5509(%var_5507: Tensor[(224), float64], %var_5508: Tensor[(66), float32]) -> (Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) {
  @func_5505(%var_5507, %var_5508) /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(16, ?, 14), float32], Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], uint64, Tensor[(6, 11, 1), float32], Tensor[(66), float32], Tensor[(3, 14, 6), uint8]) */
}

def @func_4735() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) {
  %1059 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) {
    %1052 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1053 = @func_4689() /* ty=(Tensor[(3, 14, 6), uint8],) */;
    %1054 = @func_3373() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1055 = %1052.1;
    %1056 = %1053.0;
    %1057 = @func_4636() /* ty=Tensor[(3, 14, 6), float64] */;
    %1058 = %1054.0;
    (%1055, %1056, %1057, %1058)
  };
  %1059() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint64]) */
}

def @func_3229(%var_3227: Tensor[(2, 15, 9), float64], %var_3228: uint64) -> (Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %1068 = fn (%var_3189: Tensor[(2, 15, 9), float64], %var_3222: uint64) -> (Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
    %1060 = cast(%var_3189, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %1061 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1062 = cast(%var_3222, dtype="uint64") /* ty=uint64 */;
    %1063 = reshape(%1062, newshape=[]) /* ty=uint64 */;
    %1064 = sinh(%1060) /* ty=Tensor[(2, 15, 9), float64] */;
    %1065 = @func_3168() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1066 = %1061.0;
    %1067 = @func_306(%1063) /* ty=Tensor[(3, 14, 6), uint64] */;
    (%1064, %1065, %1066, %1067, %var_3222)
  };
  %1068(%var_3227, %var_3228) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_9344() -> Tensor[(3, 14, 6), float32] {
  @func_4539() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_13364() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(1728), int32]) {
  %1069 = @func_8902() /* ty=(Tensor[(112), int32], Tensor[(3, 14, 6), uint8], Tensor[(7, 6, 8), float32], Tensor[(336, 1), uint64]) */;
  %1070 = cast(meta[relay.Constant][37] /* ty=Tensor[(1728), int32] */, dtype="int32") /* ty=Tensor[(1728), int32] */;
  %1071 = cast(meta[relay.Constant][37] /* ty=Tensor[(1728), int32] */, dtype="int32") /* ty=Tensor[(1728), int32] */;
  %1072 = reshape(%1070, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), int32] */;
  %1073 = reshape(%1071, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), int32] */;
  %1074 = @func_7863(%1072, %1073) /* ty=(Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) */;
  %1075 = %1069.1;
  %1076 = %1074.3;
  (%1075, %1076, meta[relay.Constant][37] /* ty=Tensor[(1728), int32] */)
}

def @func_7866(%var_7864: Tensor[(9, 16, 12), int32], %var_7865: Tensor[(9, 16, 12), int32]) -> (Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) {
  %1091 = fn (%var_7820: Tensor[(9, 16, 12), int32], %var_7821: Tensor[(9, 16, 12), int32]) -> (Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) {
    %1077 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
    %1078 = cast(%var_7821, dtype="int32") /* ty=Tensor[(9, 16, 12), int32] */;
    %1079 = shape_of(%var_7820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1080 = cast(%var_7820, dtype="int32") /* ty=Tensor[(9, 16, 12), int32] */;
    %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1082 = right_shift(%1080, %1081) /* ty=Tensor[(9, 16, 12), int32] */;
    %1083 = cast(%var_7821, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
    %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1085 = cast(%1082, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
    %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1087 = %1077.1;
    %1088 = @func_7508() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1089 = equal(%1085, %1086) /* ty=Tensor[(9, 16, 12), bool] */;
    %1090 = @func_6652() /* ty=uint64 */;
    (%1087, %1088, %1089, %1090)
  };
  %1091(%var_7864, %var_7865) /* ty=(Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint8], Tensor[(9, 16, 12), bool], uint64) */
}

def @func_7430() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) {
  @func_7428() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(6, 12, 13), float32]) */
}

def @func_9534(%var_9532: Tensor[(14, 13, 3), float64]) -> Tensor[(14, 13, 3), int32] {
  @func_9531(%var_9532) /* ty=Tensor[(14, 13, 3), int32] */
}

def @func_6576() -> uint64 {
  @func_6574() /* ty=uint64 */
}

def @func_2669() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) {
  %1102 = fn () -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) {
    %1092 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1093 = %1092.2;
    %1094 = cast(%1093, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %1095 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %1096 = reshape(%1095, newshape=[]) /* ty=uint64 */;
    %1097 = @func_1780(%1096) /* ty=(uint64, Tensor[(3, 14, 6), uint16]) */;
    %1098 = @func_2478() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64]) */;
    %1099 = rsqrt(%1094) /* ty=Tensor[(3, 14, 6), float64] */;
    %1100 = %1097.1;
    %1101 = %1098.0;
    (%1099, %1100, meta[relay.Constant][38] /* ty=uint64 */, %1101)
  };
  %1102() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */
}

def @func_7509() -> Tensor[(3, 14, 6), uint8] {
  %1104 = fn () -> Tensor[(3, 14, 6), uint8] {
    %1103 = @func_4437() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(16, 11, 10), uint64]) */;
    %1103.1
  };
  %1104() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_7790() -> (Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint8]) {
  @func_7788() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint8]) */
}

def @func_1868() -> Tensor[(3, 14, 6), uint8] {
  %1106 = fn () -> Tensor[(3, 14, 6), uint8] {
    %1105 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1105.1
  };
  %1106() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_8044() -> Tensor[(3, 14, 6), uint8] {
  %1108 = fn () -> Tensor[(3, 14, 6), uint8] {
    %1107 = @func_2931() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %1107.0
  };
  %1108() /* ty=Tensor[(3, 14, 6), uint8] */
}

def @func_12951() -> uint64 {
  @func_6601() /* ty=uint64 */
}

def @func_9444() -> (Tensor[(3, 14, 6), uint64],) {
  %1111 = fn () -> (Tensor[(3, 14, 6), uint64],) {
    %1109 = @func_8928() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
    %1110 = %1109.1;
    (%1110,)
  };
  %1111() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_4890() -> Tensor[(3, 14, 6), uint16] {
  %1113 = fn () -> Tensor[(3, 14, 6), uint16] {
    %1112 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
    %1112.1
  };
  %1113() /* ty=Tensor[(3, 14, 6), uint16] */
}

def @func_12226(%var_12204: Tensor[(6, 4, 11), int16], %var_12205: Tensor[(6, 4, 11), int16]) -> (Tensor[(6, 4, 11), int16], uint64) {
  %1114 = cast(%var_12205, dtype="int16") /* ty=Tensor[(6, 4, 11), int16] */;
  %1115 = shape_of(%var_12204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1116 = cast(%var_12204, dtype="int16") /* ty=Tensor[(6, 4, 11), int16] */;
  %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1118 = left_shift(%1116, %1117) /* ty=Tensor[(6, 4, 11), int16] */;
  %1119 = @func_6652() /* ty=uint64 */;
  (%1118, %1119)
}

def @func_13321() -> (Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint64]) {
  %1120 = @func_11620() /* ty=(Tensor[(4, 14, 2), int32], uint64) */;
  %1121 = %1120.0;
  %1122 = @func_3587() /* ty=Tensor[(3, 14, 6), uint64] */;
  (%1121, %1122)
}

def @func_14384(%var_14336: uint64, %var_14359: Tensor[(112), int32]) -> (Tensor[(3, 14, 6), uint64], Tensor[(252), float64], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint8], Tensor[(112), int32], Tensor[(16, 11, 1), bool]) {
  %1123 = cast(%var_14336, dtype="uint64") /* ty=uint64 */;
  %1124 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %1125 = reshape(%1123, newshape=[]) /* ty=uint64 */;
  %1126 = reshape(%1124, newshape=[3, 14, 6]) /* ty=Tensor[(3, 14, 6), float64] */;
  %1127 = @func_2055(%1125, %1126) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */;
  %1128 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
  %1129 = cast(%var_14359, dtype="int32") /* ty=Tensor[(112), int32] */;
  %1130 = reshape(%1129, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
  %1131 = @func_3949(%1130) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
  %1132 = @func_3936() /* ty=(Tensor[(16, 11, 1), float32], Tensor[(3, 14, 6), uint8]) */;
  %1133 = %1132.0;
  %1134 = cast(%1133, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %1135 = cast(%var_14336, dtype="bool") /* ty=bool */;
  %1136 = %1127.5;
  %1137 = %1128.3;
  %1138 = %1131.1;
  %1139 = logical_and(%1134, %1135) /* ty=Tensor[(16, 11, 1), bool] */;
  (%1136, meta[relay.Constant][39] /* ty=Tensor[(252), float64] */, %1137, %1138, %var_14359, %1139)
}

def @func_3768() -> (uint64, Tensor[(3, 14, 6), float64]) {
  %1140 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %1141 = @func_2668() /* ty=(Tensor[(3, 14, 6), float64], Tensor[(3, 14, 6), uint16], uint64, Tensor[(3, 14, 6), uint64]) */;
  %1142 = %1140.2;
  %1143 = %1141.0;
  (%1142, %1143)
}

def @func_9016(%var_9014: Tensor[(2, 6, 2), float32]) -> Tensor[(2, 6, 2), float32] {
  @func_9013(%var_9014) /* ty=Tensor[(2, 6, 2), float32] */
}

def @func_4600() -> (uint64,) {
  %1144 = @func_3816() /* ty=uint64 */;
  (%1144,)
}

def @func_3817() -> uint64 {
  %1146 = fn () -> uint64 {
    %1145 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
    %1145.0
  };
  %1146() /* ty=uint64 */
}

def @func_3099() -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %1157 = fn () -> (Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
    %1147 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
    %1148 = @func_2428() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(9, 3, 4), float64]) */;
    %1149 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %1150 = reshape(%1149, newshape=[]) /* ty=uint64 */;
    %1151 = @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */;
    %1152 = %1147.2;
    %1153 = %1148.0;
    %1154 = @func_306(%1150) /* ty=Tensor[(3, 14, 6), uint64] */;
    %1155 = %1151.0;
    %1156 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
    (%1152, %1153, %1154, meta[relay.Constant][40] /* ty=uint64 */, %1155, %1156)
  };
  %1157() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_13935() -> (Tensor[(3, 14, 6), float32],) {
  %1158 = @func_6226() /* ty=(Tensor[(3, 14, 6), float32],) */;
  %1159 = %1158.0;
  (%1159,)
}

def @func_11909() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %1160 = @func_5088() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1161 = @func_7485() /* ty=Tensor[(3, 14, 6), uint64] */;
  %1162 = %1160.0;
  (%1161, %1162)
}

def @func_6389() -> (Tensor[(3, 14, 6), float64],) {
  %1165 = fn () -> (Tensor[(3, 14, 6), float64],) {
    %1163 = @func_4863() /* ty=(Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float64]) */;
    %1164 = %1163.1;
    (%1164,)
  };
  %1165() /* ty=(Tensor[(3, 14, 6), float64],) */
}

def @func_1370() -> (Tensor[(3, 14, 6), uint64],) {
  %1166 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1167 = %1166.1;
  (%1167,)
}

def @func_9132() -> uint64 {
  @func_4269() /* ty=uint64 */
}

def @func_9531(%var_9499: Tensor[(14, 13, 3), float64]) -> Tensor[(14, 13, 3), int32] {
  %1168 = cast(%var_9499, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %1169 = sigmoid(%1168) /* ty=Tensor[(14, 13, 3), float64] */;
  %1170 = cast(%var_9499, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %1171 = asin(%1170) /* ty=Tensor[(14, 13, 3), float64] */;
  %1172 = cast(%1171, dtype="int32") /* ty=Tensor[(14, 13, 3), int32] */;
  %1173 = shape_of(%1169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1174 = cast(%1169, dtype="int32") /* ty=Tensor[(14, 13, 3), int32] */;
  %1175 = dyn.reshape(%1172, %1173, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%1174, %1175) /* ty=Tensor[(14, 13, 3), int32] */
}

def @func_4841() -> Tensor[(66), float64] {
  @func_4839() /* ty=Tensor[(66), float64] */
}

def @func_2058(%var_2056: uint64, %var_2057: Tensor[(3, 14, 6), float64]) -> (Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) {
  %1207 = fn (%var_1995: uint64, %var_2047: Tensor[(3, 14, 6), float64]) -> (Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) {
    %1176 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1177 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 14, 6), uint8] */, dtype="uint32") /* ty=Tensor[(3, 14, 6), uint32] */;
    %1178 = shape_of(%1176, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1179 = cast(%1176, dtype="uint32") /* ty=Tensor[(3, 14, 6), uint32] */;
    %1180 = dyn.reshape(%1177, %1178, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1181 = cast(%var_1995, dtype="uint64") /* ty=uint64 */;
    %1182 = reshape(%1181, newshape=[]) /* ty=uint64 */;
    %1183 = @func_1617(%1182) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
    %1184 = %1183.4;
    %1185 = cast(%1184, dtype="uint64") /* ty=uint64 */;
    %1186 = reshape(%1185, newshape=[]) /* ty=uint64 */;
    %1187 = @func_1617(%1186) /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) */;
    %1188 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1189 = cast(%1176, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %1190 = log2(%1189) /* ty=Tensor[(3, 14, 6), float64] */;
    %1191 = cast(%1190, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
    %1192 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
    %1193 = cast(%1176, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %1194 = sin(%1193) /* ty=Tensor[(3, 14, 6), float64] */;
    %1195 = cast(%var_2047, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %1196 = shape_of(%1194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1197 = cast(%1194, dtype="float64") /* ty=Tensor[(3, 14, 6), float64] */;
    %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1199 = logical_xor(%1179, %1180) /* ty=Tensor[(3, 14, 6), uint32] */;
    %1200 = @func_1867() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1201 = @func_1627() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1202 = %1187.2;
    %1203 = %1188.1;
    %1204 = asin(%1191) /* ty=Tensor[(3, 14, 6), float32] */;
    %1205 = %1192.1;
    %1206 = divide(%1197, %1198) /* ty=Tensor[(3, 14, 6), float64] */;
    (%1199, %1184, %var_1995, %1200, %1201, %1202, %1203, %1204, %1205, %1206)
  };
  %1207(%var_2056, %var_2057) /* ty=(Tensor[(3, 14, 6), uint32], uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float64]) */
}

def @func_2097(%var_2096: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64],) {
  %1210 = fn (%var_2077: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64],) {
    %1208 = cast(%var_2077, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
    %1209 = sin(%1208) /* ty=Tensor[(16, 1, 14), float64] */;
    (%1209,)
  };
  %1210(%var_2096) /* ty=(Tensor[(16, 1, 14), float64],) */
}

def @func_8154(%var_8152: int16, %var_8153: Tensor[(2, 48), float32]) -> (Tensor[(1, 5, 4), bool], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32], Tensor[(2, 48), float32]) {
  @func_8150(%var_8152, %var_8153) /* ty=(Tensor[(1, 5, 4), bool], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32], Tensor[(2, 48), float32]) */
}

def @func_10594() -> (Tensor[(3, 14, 6), uint64],) {
  @func_10592() /* ty=(Tensor[(3, 14, 6), uint64],) */
}

def @func_7069() -> (Tensor[(6, 12, 13), float32], uint64, Tensor[(270), float64]) {
  %1211 = @func_6159() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(3, 14, 6), uint8]) */;
  %1212 = cast(meta[relay.Constant][42] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %1213 = reshape(%1212, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %1214 = @func_3735(%1213) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */;
  %1215 = %1211.0;
  %1216 = %1214.0;
  (%1215, %1216, meta[relay.Constant][42] /* ty=Tensor[(270), float64] */)
}

def @func_5065() -> Tensor[(3, 14, 6), uint64] {
  %1218 = fn () -> Tensor[(3, 14, 6), uint64] {
    %1217 = @func_3698() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint8], Tensor[(6, 11, 1), float32], Tensor[(3, 14, 6), uint64], uint64, Tensor[(66), float64]) */;
    %1217.4
  };
  %1218() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_3373() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %1219 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1220 = @func_2559() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */;
  %1221 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1222 = @func_3046() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1223 = %1219.0;
  %1224 = %1220.2;
  %1225 = %1221.1;
  %1226 = %1222.0;
  (%1223, %1224, %1225, %1226)
}

def @func_9373() -> (uint64,) {
  @func_9371() /* ty=(uint64,) */
}

def @func_4602() -> (uint64,) {
  @func_4600() /* ty=(uint64,) */
}

def @func_8179() -> (Tensor[(3, 14, 6), uint8],) {
  %1227 = @func_7898() /* ty=(Tensor[(3, 14, 6), uint8],) */;
  %1228 = %1227.0;
  (%1228,)
}

def @func_7195() -> Tensor[(3, 14, 6), float32] {
  @func_4539() /* ty=Tensor[(3, 14, 6), float32] */
}

def @func_11674() -> (Tensor[(3, 14, 6), uint16],) {
  @func_11672() /* ty=(Tensor[(3, 14, 6), uint16],) */
}

def @func_12760(%var_12758: Tensor[(280), bool]) -> (Tensor[(6, 12, 13), float32], Tensor[(2, 14, 10), bool], Tensor[(280), bool]) {
  @func_12757(%var_12758) /* ty=(Tensor[(6, 12, 13), float32], Tensor[(2, 14, 10), bool], Tensor[(280), bool]) */
}

def @func_13366() -> (Tensor[(3, 14, 6), uint8], uint64, Tensor[(1728), int32]) {
  @func_13364() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(1728), int32]) */
}

def @func_13114(%var_13104: Tensor[(14, 15, 10), float64]) -> Tensor[(14, 15, 10), float64] {
  %1229 = cast(%var_13104, dtype="float64") /* ty=Tensor[(14, 15, 10), float64] */;
  asin(%1229) /* ty=Tensor[(14, 15, 10), float64] */
}

def @func_6727() -> (uint64,) {
  @func_6725() /* ty=(uint64,) */
}

def @func_6226() -> (Tensor[(3, 14, 6), float32],) {
  %1230 = @func_3877() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), float32], uint64, Tensor[(3, 14, 6), uint8]) */;
  %1231 = %1230.0;
  %1232 = cast(%1231, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %1233 = cosh(%1232) /* ty=Tensor[(3, 14, 6), float32] */;
  (%1233,)
}

def @func_1617(%var_1595: uint64) -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64, Tensor[(3, 14, 6), uint64], uint64) {
  %1234 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
  %1235 = @func_1370() /* ty=(Tensor[(3, 14, 6), uint64],) */;
  %1236 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1237 = cast(%var_1595, dtype="uint64") /* ty=uint64 */;
  %1238 = reshape(%1237, newshape=[]) /* ty=uint64 */;
  %1239 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1240 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %1241 = %1234.1;
  %1242 = %1235.0;
  %1243 = %1236.0;
  %1244 = @func_306(%1238) /* ty=Tensor[(3, 14, 6), uint64] */;
  %1245 = %1239.0;
  %1246 = %1240.1;
  (%1241, %1242, %1243, %1244, %var_1595, %1245, %1246)
}

def @func_13911() -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), float32]) {
  %1252 = fn () -> (Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), float32]) {
    %1247 = @func_3768() /* ty=(uint64, Tensor[(3, 14, 6), float64]) */;
    %1248 = @func_9804() /* ty=(Tensor[(3, 14, 6), float32],) */;
    %1249 = %1247.1;
    %1250 = @func_4847() /* ty=uint64 */;
    %1251 = %1248.0;
    (%1249, %1250, %1251)
  };
  %1252() /* ty=(Tensor[(3, 14, 6), float64], uint64, Tensor[(3, 14, 6), float32]) */
}

def @func_2560() -> (uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
  %1260 = fn () -> (uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) {
    %1253 = @func_2389() /* ty=(uint64,) */;
    %1254 = @func_2389() /* ty=(uint64,) */;
    %1255 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1256 = %1253.0;
    %1257 = %1254.0;
    %1258 = @func_2141() /* ty=Tensor[(3, 14, 6), uint8] */;
    %1259 = %1255.1;
    (%1256, %1257, %1258, %1259)
  };
  %1260() /* ty=(uint64, uint64, Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint8]) */
}

def @func_12871() -> Tensor[(3, 14, 6), uint64] {
  @func_12869() /* ty=Tensor[(3, 14, 6), uint64] */
}

def @func_3737(%var_3736: Tensor[(270), float64]) -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) {
  %1269 = fn (%var_3729: Tensor[(270), float64]) -> (uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) {
    %1261 = @func_1950() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %1262 = cast(%var_3729, dtype="float64") /* ty=Tensor[(270), float64] */;
    %1263 = %1261.2;
    %1264 = cast(%1263, dtype="uint64") /* ty=uint64 */;
    %1265 = reshape(%1262, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float64] */;
    %1266 = reshape(%1264, newshape=[]) /* ty=uint64 */;
    %1267 = @func_3226(%1265, %1266) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(3, 14, 6), uint8], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */;
    %1268 = %1267.0;
    (%1263, %1268, %var_3729)
  };
  %1269(%var_3736) /* ty=(uint64, Tensor[(2, 15, 9), float64], Tensor[(270), float64]) */
}

def @func_13535() -> Tensor[(?, 6, 16), float64] {
  %1270 = @func_8307() /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint16], Tensor[(3, 14, 6), uint64], Tensor[(?, 6, 16), float64]) */;
  %1270.3
}

def @func_8461() -> (Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) {
  @func_8459() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(270), float64], Tensor[(270), float64]) */
}

def @func_11672() -> (Tensor[(3, 14, 6), uint16],) {
  %1271 = @func_4889() /* ty=Tensor[(3, 14, 6), uint16] */;
  (%1271,)
}

def @func_13937() -> (Tensor[(3, 14, 6), float32],) {
  @func_13935() /* ty=(Tensor[(3, 14, 6), float32],) */
}

def @func_12273(%var_12272: bool) -> Tensor[(13, 3, 8), bool] {
  %1274 = fn (%var_12265: bool) -> Tensor[(13, 3, 8), bool] {
    %1272 = cast(%var_12265, dtype="bool") /* ty=bool */;
    %1273 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
    logical_and(%1272, %1273) /* ty=Tensor[(13, 3, 8), bool] */
  };
  %1274(%var_12272) /* ty=Tensor[(13, 3, 8), bool] */
}

def @func_1810() -> (Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  %1283 = fn () -> (Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
    %1275 = @func_1219() /* ty=(Tensor[(9, 3, 4), float32], Tensor[(3, 14, 6), uint64], uint64) */;
    %1276 = %1275.0;
    %1277 = cast(%1276, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
    %1278 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1279 = @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1280 = log(%1277) /* ty=Tensor[(9, 3, 4), float64] */;
    %1281 = %1278.0;
    %1282 = %1279.1;
    (%1280, %1281, %1282)
  };
  %1283() /* ty=(Tensor[(9, 3, 4), float64], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_7692(%var_7690: Tensor[(7, 6, 8), uint64], %var_7691: Tensor[(7, 6, 8), uint64]) -> (Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) {
  %1293 = fn (%var_7664: Tensor[(7, 6, 8), uint64], %var_7665: Tensor[(7, 6, 8), uint64]) -> (Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) {
    %1284 = cast(%var_7665, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
    %1285 = cast(%var_7665, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
    %1286 = shape_of(%var_7664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1287 = cast(%var_7664, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
    %1288 = dyn.reshape(%1285, %1286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1289 = less_equal(%1287, %1288) /* ty=Tensor[(7, 6, 8), bool] */;
    %1290 = cast(%1289, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
    %1291 = log10(%1284) /* ty=Tensor[(7, 6, 8), float32] */;
    %1292 = exp(%1290) /* ty=Tensor[(7, 6, 8), float64] */;
    (%1291, %1292)
  };
  %1293(%var_7690, %var_7691) /* ty=(Tensor[(7, 6, 8), float32], Tensor[(7, 6, 8), float64]) */
}

def @func_6019(%var_6018: Tensor[(13, 14, 6), float64]) -> Tensor[(13, 14, 6), float64] {
  %1295 = fn (%var_6014: Tensor[(13, 14, 6), float64]) -> Tensor[(13, 14, 6), float64] {
    %1294 = cast(%var_6014, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
    acosh(%1294) /* ty=Tensor[(13, 14, 6), float64] */
  };
  %1295(%var_6018) /* ty=Tensor[(13, 14, 6), float64] */
}

def @func_8181() -> (Tensor[(3, 14, 6), uint8],) {
  @func_8179() /* ty=(Tensor[(3, 14, 6), uint8],) */
}

def @func_13537() -> Tensor[(?, 6, 16), float64] {
  @func_13535() /* ty=Tensor[(?, 6, 16), float64] */
}

def @func_8150(%var_8101: int16, %var_8139: Tensor[(2, 48), float32]) -> (Tensor[(1, 5, 4), bool], Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32], Tensor[(2, 48), float32]) {
  %1296 = cast(%var_8101, dtype="bool") /* ty=bool */;
  %1297 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 5, 4), int16] */, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
  %1298 = @func_3310() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64]) */;
  %1299 = @func_2203() /* ty=(Tensor[(3, 14, 6), float32], Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
  %1300 = cast(%var_8139, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %1301 = reshape(%1300, newshape=[1, 96]) /* ty=Tensor[(1, 96), float32] */;
  %1302 = @func_6561(%1301) /* ty=(Tensor[(3, 14, 6), float32], Tensor[(16, 11, 10), uint64], Tensor[(1, 96), float32]) */;
  %1303 = not_equal(%1296, %1297) /* ty=Tensor[(1, 5, 4), bool] */;
  %1304 = %1298.0;
  %1305 = %1299.1;
  %1306 = %1302.0;
  (%1303, %1304, %1305, %1306, %var_8139)
}

def @func_2583() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) {
  @func_2581() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), float32]) */
}

def @func_1627() -> Tensor[(3, 14, 6), uint8] {
  %1307 = @func_1547() /* ty=(Tensor[(3, 14, 6), uint8], uint64) */;
  %1307.0
}

def @func_4638() -> Tensor[(3, 14, 6), float64] {
  @func_4636() /* ty=Tensor[(3, 14, 6), float64] */
}

def @func_1951() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
  %1313 = fn () -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) {
    %1308 = @func_1727() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */;
    %1309 = cast(meta[relay.Constant][45] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %1310 = reshape(%1309, newshape=[]) /* ty=uint64 */;
    %1311 = %1308.0;
    %1312 = @func_306(%1310) /* ty=Tensor[(3, 14, 6), uint64] */;
    (%1311, %1312, meta[relay.Constant][45] /* ty=uint64 */)
  };
  %1313() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint64], uint64) */
}

def @func_1514() -> (Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) {
  @func_1512() /* ty=(Tensor[(3, 14, 6), uint64], Tensor[(3, 14, 6), uint8]) */
}

def @func_8520(%var_8519: Tensor[(112), int32]) -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
  %1320 = fn (%var_8507: Tensor[(112), int32]) -> (uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) {
    %1314 = @func_6064() /* ty=(Tensor[(3, 14, 6), uint8], uint64, Tensor[(3, 14, 6), uint8]) */;
    %1315 = cast(%var_8507, dtype="int32") /* ty=Tensor[(112), int32] */;
    %1316 = reshape(%1315, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), int32] */;
    %1317 = @func_3949(%1316) /* ty=(Tensor[(4, 14, 2), int32], Tensor[(3, 14, 6), uint8]) */;
    %1318 = %1314.1;
    %1319 = %1317.0;
    (%1318, %1319, %var_8507)
  };
  %1320(%var_8519) /* ty=(uint64, Tensor[(4, 14, 2), int32], Tensor[(112), int32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen498/build/output.py:4844: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen498/build/output.py", line 4849, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(48) tvmgen_default_fused_cosh_kernel0(float* __restrict__ T_cosh, float* __restrict__ placeholder) {
  T_cosh[(((int)threadIdx.x))] = coshf(placeholder[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(48) tvmgen_default_fused_cast_sin_kernel0(double* __restrict__ T_sin, float* __restrict__ placeholder) {
  T_sin[(((int)threadIdx.x))] = sin(((double)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

