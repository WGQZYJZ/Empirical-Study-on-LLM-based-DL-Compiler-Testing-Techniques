==========mod==========
#[version = "0.0.5"]
def @func_2044() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %0 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %3 = cast(%1, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %4 = reshape(%2, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %5 = reshape(%3, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %6 = @func_435(%4, %5) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %7 = %6.3;
  (%1, %7)
}

def @func_2654(%var_2636: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), uint16], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %8 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %9 = %8.0;
  %10 = cast(%var_2636, dtype="uint16") /* ty=Tensor[(14, 6, 16), uint16] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="uint16") /* ty=Tensor[(14, 6, 16), uint16] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %14 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %15 = cast(%9, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %16 = reshape(%15, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %17 = @func_730(%16) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %18 = left_shift(%12, %13) /* ty=Tensor[(14, 6, 16), uint16] */;
  %19 = %14.0;
  %20 = %17.1;
  (%18, %19, %20)
}

def @func_4111() -> (Tensor[(14, 6, 16), float32],) {
  %21 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
  (%21,)
}

def @func_7219(%var_7192: Tensor[(1, 3, 4), float64], %var_7198: Tensor[(9, 3, 4), float64]) -> (Tensor[(?, 3, 4), float64], Tensor[(9, 3, 4), float64]) {
  %22 = cast(%var_7192, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %23 = erf(%22) /* ty=Tensor[(1, 3, 4), float64] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %25 = shape_of(%var_7192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_7192, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %28 = cast(%23, dtype="int8") /* ty=Tensor[(1, 3, 4), int8] */;
  %29 = cast(%var_7198, dtype="int8") /* ty=Tensor[(9, 3, 4), int8] */;
  %30 = multiply(%28, %29) /* ty=Tensor[(9, 3, 4), int8] */;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %32 = power(%26, %27) /* ty=Tensor[(?, 3, 4), float64] */;
  %33 = tan(%31) /* ty=Tensor[(9, 3, 4), float64] */;
  (%32, %33)
}

def @func_655(%var_645: Tensor[(16, 2), float64]) -> Tensor[(16, 2), float64] {
  %34 = cast(%var_645, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  sigmoid(%34) /* ty=Tensor[(16, 2), float64] */
}

def @func_191() -> Tensor[(14, 6, 16), float32] {
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %36 = erf(%35) /* ty=Tensor[(14, 6, 16), float32] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  sinh(%37) /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_3477() -> Tensor[(14, 6, 16), float32] {
  %38 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %38.0
}

def @func_834() -> Tensor[(14, 6, 16), float32] {
  %39 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %39.0
}

def @func_4568() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %40 = @func_2885() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %43 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
  %44 = tan(%42) /* ty=Tensor[(14, 6, 16), float32] */;
  (%43, %44)
}

def @func_8080() -> (Tensor[(88), int32],) {
  %45 = @func_5330() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) */;
  %46 = %45.2;
  (%46,)
}

def @func_8036() -> (Tensor[(14, 6, 16), float64],) {
  %47 = @func_1951() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %48 = %47.0;
  (%48,)
}

def @func_5267() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %49 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
  %50 = @func_4395() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %51 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %52 = %49.4;
  %53 = %50.0;
  %54 = %51.0;
  (%52, %53, %54)
}

def @func_5975() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %55 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %56 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %57 = %55.0;
  %58 = %56.0;
  (%57, %58)
}

def @func_1951() -> (Tensor[(14, 6, 16), float64],) {
  %59 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %60 = %59.2;
  (%60,)
}

def @func_435(%var_394: Tensor[(14, 6, 16), float32], %var_412: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %61 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %62 = cast(%var_394, dtype="uint8") /* ty=Tensor[(14, 6, 16), uint8] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="uint8") /* ty=Tensor[(14, 6, 16), uint8] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %66 = bitwise_and(%64, %65) /* ty=Tensor[(14, 6, 16), uint8] */;
  %67 = cast(%var_394, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(%var_412, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %72 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%61, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %75 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), int64] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %78 = reshape(%75, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %79 = reshape(%76, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %80 = reshape(%77, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
  %81 = @func_246(%78, %79, %80) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
  %82 = less(%69, %70) /* ty=Tensor[(14, 6, 16), bool] */;
  %83 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %84 = add(%73, %74) /* ty=Tensor[(14, 6, 16), float64] */;
  %85 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %86 = %81.2;
  %87 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %88 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  (%82, %83, %84, %85, %86, meta[relay.Constant][1] /* ty=Tensor[(336), int64] */, %87, %88)
}

def @func_5622() -> (Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %89 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
  %90 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %91 = %89.3;
  %92 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
  %93 = %90.0;
  (%91, %92, %93)
}

def @func_5854() -> (Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
  %94 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %96 = reshape(%95, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %97 = @func_2506(%96) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %98 = %94.0;
  %99 = %97.0;
  (%98, %99, meta[relay.Constant][2] /* ty=Tensor[(110), float64] */)
}

def @func_3268() -> (Tensor[(14, 6, 16), float64],) {
  %100 = @func_2848() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) */;
  %101 = %100.1;
  (%101,)
}

def @func_6528() -> (Tensor[(880), int32],) {
  %102 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %103 = %102.0;
  (%103,)
}

def @func_6709(%var_6673: Tensor[(9, 15, 16), float32]) -> Tensor[(9, 15, 16), float32] {
  %104 = cast(%var_6673, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
  %105 = log(%104) /* ty=Tensor[(9, 15, 16), float32] */;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
  atanh(%106) /* ty=Tensor[(9, 15, 16), float32] */
}

def @func_876() -> (Tensor[(14, 6, 16), float32],) {
  %107 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %108 = %107.1;
  (%108,)
}

def @func_1380(%var_1374: Tensor[(3, 8, 13), float32]) -> Tensor[(3, 8, 13), float32] {
  %109 = cast(%var_1374, dtype="float32") /* ty=Tensor[(3, 8, 13), float32] */;
  atanh(%109) /* ty=Tensor[(3, 8, 13), float32] */
}

def @func_1232() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) {
  %110 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %111 = %110.4;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %113 = reshape(%112, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %114 = @func_692(%113) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %115 = %114.0;
  (%111, %115)
}

def @func_3463() -> (Tensor[(14, 6, 16), float32],) {
  %116 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %117 = %116.0;
  (%117,)
}

def @func_1150() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) {
  %118 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %121 = exp(%120) /* ty=Tensor[(14, 6, 16), float64] */;
  %122 = cast(%119, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %126 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %127 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %128 = reshape(%127, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %129 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %130 = floor_mod(%124, %125) /* ty=Tensor[(14, 6, 16), float32] */;
  %131 = %126.2;
  %132 = @func_655(%128) /* ty=Tensor[(16, 2), float64] */;
  %133 = %129.2;
  (%130, %131, %132, meta[relay.Constant][3] /* ty=Tensor[(8, 4), float64] */, %133)
}

def @func_7094() -> Tensor[(8, 4), float64] {
  %134 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %134.3
}

def @func_4395() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %135 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %137 = reshape(%136, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %138 = @func_692(%137) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %139 = %138.1;
  (%135, %139)
}

def @func_2125() -> Tensor[(14, 6, 16), float64] {
  %140 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %140.0
}

def @func_5360(%var_5349: Tensor[(44, 2), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) {
  %141 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %142 = cast(%var_5349, dtype="int32") /* ty=Tensor[(44, 2), int32] */;
  %143 = reshape(%142, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %144 = @func_2006(%143) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) */;
  %145 = cast(meta[relay.Constant][4] /* ty=Tensor[(24, 14), int64] */, dtype="int64") /* ty=Tensor[(24, 14), int64] */;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(156, 2), float32] */, dtype="float32") /* ty=Tensor[(156, 2), float32] */;
  %147 = reshape(%145, newshape=[336]) /* ty=Tensor[(336), int64] */;
  %148 = reshape(%146, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %149 = @func_1771(%147, %148) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) */;
  %150 = %141.0;
  %151 = %144.0;
  %152 = %149.4;
  (%150, %151, %var_5349, %152, meta[relay.Constant][4] /* ty=Tensor[(24, 14), int64] */, meta[relay.Constant][5] /* ty=Tensor[(156, 2), float32] */)
}

def @func_1889() -> (Tensor[(32), float64],) {
  %153 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
  %154 = %153.4;
  (%154,)
}

def @func_6848() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %155 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %156 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %157 = %155.2;
  %158 = %156.0;
  (%157, %158)
}

def @func_4374() -> (Tensor[(14, 6, 16), float32],) {
  %159 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %160 = %159.1;
  (%160,)
}

def @func_9083() -> Tensor[(880), int32] {
  %161 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %161.1
}

def @func_5330() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) {
  %162 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %163 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %164 = @func_5176() /* ty=(Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %165 = %162.0;
  %166 = %163.0;
  %167 = %164.0;
  (%165, %166, %167)
}

def @func_2606() -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) {
  %168 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %169 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(110, 1), float64] */, dtype="float64") /* ty=Tensor[(110, 1), float64] */;
  %171 = reshape(%170, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %172 = @func_2506(%171) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %173 = %168.2;
  %174 = %169.0;
  %175 = %172.0;
  (%173, %174, %175, meta[relay.Constant][6] /* ty=Tensor[(110, 1), float64] */)
}

def @func_6976() -> Tensor[(14, 6, 16), float32] {
  %176 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %176.1
}

def @func_8759() -> Tensor[(16, 2), float64] {
  @func_3613() /* ty=Tensor[(16, 2), float64] */
}

def @func_2440(%var_2411: Tensor[(8, 2, 1), float64]) -> (Tensor[(8, 2, 1), float64],) {
  %177 = cast(%var_2411, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %178 = log(%177) /* ty=Tensor[(8, 2, 1), float64] */;
  (%178,)
}

def @func_7895() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %179 = @func_4461() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) */;
  %180 = @func_6600() /* ty=Tensor[(32), float64] */;
  %181 = @func_6573() /* ty=Tensor[(14, 6, 16), float32] */;
  %182 = %179.0;
  (%180, %181, %182)
}

def @func_811() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %183 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %184 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %185 = %183.1;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %187 = %184.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %189 = reshape(%186, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %190 = reshape(%188, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %191 = @func_435(%189, %190) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %192 = %191.6;
  (%185, %187, %192)
}

def @func_6180(%var_6162: Tensor[(2, 11, 5), float32]) -> (Tensor[(16, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(14, 6, 16), float32]) {
  %193 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %194 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %195 = %194.1;
  %196 = cast(%var_6162, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %200 = @func_5928() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %201 = %193.0;
  %202 = minimum(%198, %199) /* ty=Tensor[(2, 11, 5), int64] */;
  %203 = %200.0;
  (%201, %202, %203)
}

def @func_5928() -> (Tensor[(14, 6, 16), float32],) {
  %204 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %205 = %204.1;
  (%205,)
}

def @func_9244(%var_9227: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %206 = cast(%var_9227, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %207 = acos(%206) /* ty=Tensor[(16, 9, 13), float32] */;
  %208 = cast(%var_9227, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = @func_6821() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %213 = less_equal(%210, %211) /* ty=Tensor[(16, 9, 13), bool] */;
  %214 = %212.0;
  %215 = @func_2288() /* ty=Tensor[(14, 6, 16), float32] */;
  (%213, %214, %215)
}

def @func_2848() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) {
  %216 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %217 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %218 = %216.0;
  %219 = %217.0;
  (%218, %219)
}

def @func_5910() -> (Tensor[(32), float64], Tensor[(2, 11, 5), float32]) {
  %220 = @func_5001() /* ty=(Tensor[(32), float64],) */;
  %221 = @func_5854() /* ty=(Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) */;
  %222 = %220.0;
  %223 = %221.1;
  (%222, %223)
}

def @func_730(%var_713: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %224 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %225 = cast(%var_713, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = cast(%var_713, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %230 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %231 = equal(%227, %228) /* ty=Tensor[(14, 6, 16), bool] */;
  %232 = atanh(%229) /* ty=Tensor[(14, 6, 16), float32] */;
  %233 = %230.0;
  (%231, %232, %233)
}

def @func_9060(%var_9034: Tensor[(88), int32], %var_9035: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64]) {
  %234 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %235 = @func_3261() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %236 = cast(%var_9034, dtype="int32") /* ty=Tensor[(88), int32] */;
  %237 = cast(%var_9035, dtype="int32") /* ty=Tensor[(880), int32] */;
  %238 = reshape(%236, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %239 = reshape(%237, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %240 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %241 = @func_7565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %242 = cast(meta[relay.Constant][7] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %243 = reshape(%242, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %244 = @func_1990(%243) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %245 = %234.0;
  %246 = %235.0;
  %247 = @func_1018(%238, %239) /* ty=Tensor[(11, 10, 8), float32] */;
  %248 = %240.0;
  %249 = %241.1;
  %250 = %244.0;
  (%245, %246, %247, %var_9034, %var_9035, %248, %249, %250, meta[relay.Constant][7] /* ty=Tensor[(32), float64] */)
}

def @func_4343(%var_4268: Tensor[(880), int32], %var_4298: Tensor[(32, 1), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32, 1), float64], Tensor[(14, 6, 16), bool], Tensor[(880), int32], Tensor[(14, 6, 16), float32]) {
  %251 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %252 = cast(meta[relay.Constant][8] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %253 = cast(%var_4268, dtype="int32") /* ty=Tensor[(880), int32] */;
  %254 = reshape(%252, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %255 = reshape(%253, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %256 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %257 = cast(%var_4298, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %258 = reshape(%257, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %259 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
  %260 = @func_3444() /* ty=(Tensor[(16, 2), float64], Tensor[(880), int32]) */;
  %261 = %251.0;
  %262 = @func_1018(%254, %255) /* ty=Tensor[(11, 10, 8), float32] */;
  %263 = %256.0;
  %264 = @func_655(%258) /* ty=Tensor[(16, 2), float64] */;
  %265 = %259.0;
  %266 = %260.1;
  %267 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
  (%261, %262, meta[relay.Constant][8] /* ty=Tensor[(88), int32] */, %var_4268, %263, %264, %var_4298, %265, %266, %267)
}

def @func_2153() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  %268 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %269 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %270 = %268.2;
  (%269, %270)
}

def @func_7849() -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32]) {
  %271 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %272 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %273 = %271.1;
  %274 = %272.2;
  (%273, %274)
}

def @func_8521() -> (Tensor[(14, 6, 16), float64],) {
  %275 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %276 = %275.0;
  (%276,)
}

def @func_4536() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  %277 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %278 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %279 = %277.0;
  %280 = %278.0;
  %281 = @func_3717() /* ty=Tensor[(14, 6, 16), float32] */;
  (%279, %280, %281)
}

def @func_6132(%var_6113: Tensor[(2, 5, 14), float32], %var_6122: Tensor[(2, 5, 14), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(2, 5, 14), float64]) {
  %282 = cast(%var_6113, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %283 = asin(%282) /* ty=Tensor[(2, 5, 14), float32] */;
  %284 = cast(%var_6122, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %288 = mod(%286, %287) /* ty=Tensor[(2, 5, 14), float64] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %290 = shape_of(%var_6113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_6113, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %293 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %294 = floor_divide(%291, %292) /* ty=Tensor[(2, 5, 14), float64] */;
  (%293, %294)
}

def @func_6104() -> Tensor[(14, 6, 16), bool] {
  %295 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
  %296 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%298, %299) /* ty=Tensor[(14, 6, 16), bool] */
}

def @func_9397() -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(16, 2), float64]) {
  %300 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %301 = @func_8080() /* ty=(Tensor[(88), int32],) */;
  %302 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %303 = %300.0;
  %304 = %301.0;
  %305 = %302.0;
  (%303, %304, %305)
}

def @func_6573() -> Tensor[(14, 6, 16), float32] {
  %306 = @func_6069() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %306.1
}

def @func_4717(%var_4692: Tensor[(12, 14, 4), float64], %var_4710: Tensor[(1344), float32]) -> (Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) {
  %307 = cast(%var_4692, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
  %308 = atan(%307) /* ty=Tensor[(12, 14, 4), float64] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
  %310 = cast(%308, dtype="float32") /* ty=Tensor[(12, 14, 4), float32] */;
  %311 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 4), float64] */, dtype="uint16") /* ty=Tensor[(12, 14, 4), uint16] */;
  %312 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%308, dtype="uint16") /* ty=Tensor[(12, 14, 4), uint16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %315 = cast(%var_4710, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %316 = cast(%var_4710, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %317 = reshape(%315, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %318 = reshape(%316, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %319 = @func_435(%317, %318) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %320 = log10(%309) /* ty=Tensor[(12, 14, 4), float64] */;
  %321 = acos(%310) /* ty=Tensor[(12, 14, 4), float32] */;
  %322 = maximum(%313, %314) /* ty=Tensor[(12, 14, 4), uint16] */;
  %323 = %319.3;
  (%320, %321, %322, %323, %var_4710)
}

def @func_634() -> (Tensor[(14, 6, 16), float32],) {
  %324 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %325 = %324.1;
  (%325,)
}

def @func_1871() -> (Tensor[(14, 6, 16), float32],) {
  %326 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  (%326,)
}

def @func_2006(%var_2004: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) {
  %327 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %328 = cast(%var_2004, dtype="int32") /* ty=Tensor[(88), int32] */;
  %329 = reshape(%328, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %330 = @func_1055(%329) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %331 = %327.0;
  %332 = %330.4;
  (%331, %332, %var_2004)
}

def @func_4083(%var_4059: Tensor[(7, 11, 14), int8], %var_4060: Tensor[(7, 11, 14), int8], %var_4069: Tensor[(880), int32]) -> (Tensor[(7, 11, 14), bool], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(14, 6, 16), int16], Tensor[(1344), float32], Tensor[(88), float32]) {
  %333 = cast(%var_4060, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
  %334 = shape_of(%var_4059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%var_4059, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = cast(meta[relay.Constant][11] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %338 = cast(%var_4069, dtype="int32") /* ty=Tensor[(880), int32] */;
  %339 = reshape(%337, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %340 = reshape(%338, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %341 = cast(meta[relay.Constant][12] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %342 = reshape(%341, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %343 = @func_692(%342) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %344 = cast(meta[relay.Constant][11] /* ty=Tensor[(88), int32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %345 = less(%335, %336) /* ty=Tensor[(7, 11, 14), bool] */;
  %346 = @func_1018(%339, %340) /* ty=Tensor[(11, 10, 8), float32] */;
  %347 = %343.0;
  %348 = asinh(%344) /* ty=Tensor[(88), float32] */;
  (%345, %346, %var_4069, %347, meta[relay.Constant][12] /* ty=Tensor[(1344), float32] */, %348)
}

def @func_3613() -> Tensor[(16, 2), float64] {
  %349 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %349.0
}

def @func_756(%var_735: Tensor[(15, 12, 5), uint8], %var_736: Tensor[(15, 12, 5), uint8], %var_742: Tensor[(1344), float32]) -> (Tensor[(15, 12, 5), uint8], Tensor[(14, 6, 16), float64], Tensor[(1344), float32]) {
  %350 = cast(%var_736, dtype="uint8") /* ty=Tensor[(15, 12, 5), uint8] */;
  %351 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_735, dtype="uint8") /* ty=Tensor[(15, 12, 5), uint8] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %354 = cast(%var_742, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %355 = reshape(%354, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %356 = @func_730(%355) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %357 = subtract(%352, %353) /* ty=Tensor[(15, 12, 5), uint8] */;
  %358 = %356.2;
  (%357, %358, %var_742)
}

def @func_4866(%var_4781: Tensor[(110), float64], %var_4801: Tensor[(88), int32], %var_4807: Tensor[(1050), uint16]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(70), uint16], Tensor[(1050), uint16], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(336), int64], Tensor[(5, 14, 5), float64]) {
  %359 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %360 = cast(%var_4781, dtype="float64") /* ty=Tensor[(110), float64] */;
  %361 = reshape(%360, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %362 = @func_2506(%361) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %363 = @func_4536() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %364 = cast(%var_4801, dtype="int32") /* ty=Tensor[(88), int32] */;
  %365 = reshape(%364, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %366 = @func_1055(%365) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %367 = @func_2885() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %368 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %369 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %370 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %371 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), int64] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %372 = reshape(%369, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %373 = reshape(%370, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %374 = reshape(%371, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
  %375 = @func_246(%372, %373, %374) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
  %376 = cast(meta[relay.Constant][13] /* ty=Tensor[(70), uint16] */, dtype="uint16") /* ty=Tensor[(70), uint16] */;
  %377 = cast(%var_4807, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %378 = reshape(%376, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), uint16] */;
  %379 = reshape(%377, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint16] */;
  %380 = @func_3142(%378, %379) /* ty=(Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) */;
  %381 = %380.4;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %383 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
  %384 = %359.0;
  %385 = %362.0;
  %386 = %363.1;
  %387 = %366.1;
  %388 = %367.0;
  %389 = %368.0;
  %390 = %375.0;
  %391 = sqrt(%382) /* ty=Tensor[(5, 14, 5), float64] */;
  (%383, %384, %385, %var_4781, %386, %387, %var_4801, meta[relay.Constant][13] /* ty=Tensor[(70), uint16] */, %var_4807, %388, %389, %390, meta[relay.Constant][14] /* ty=Tensor[(336), int64] */, %391)
}

def @func_6885() -> (Tensor[(16, 2), float64],) {
  %392 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %393 = %392.1;
  (%393,)
}

def @func_6821() -> (Tensor[(14, 6, 16), float32],) {
  %394 = @func_5432() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %395 = %394.1;
  (%395,)
}

def @func_3238() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
  %396 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %397 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %398 = %396.0;
  %399 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %400 = %397.0;
  (%398, %399, %400)
}

def @func_7066() -> (Tensor[(14, 6, 16), float32],) {
  %401 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %403 = cosh(%402) /* ty=Tensor[(14, 6, 16), float32] */;
  (%403,)
}

def @func_534() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  %404 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %406 = cos(%405) /* ty=Tensor[(14, 6, 16), float64] */;
  %407 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  (%406, %407)
}

def @func_3717() -> Tensor[(14, 6, 16), float32] {
  %408 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %408.0
}

def @func_3331() -> (Tensor[(14, 6, 16), float32],) {
  %409 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %410 = %409.0;
  (%410,)
}

def @func_6989() -> Tensor[(14, 6, 16), float32] {
  @func_4646() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_7914() -> (Tensor[(880), int32], Tensor[(32), float64]) {
  %411 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %412 = @func_7895() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %413 = %411.1;
  %414 = %412.0;
  (%413, %414)
}

def @func_6654() -> (Tensor[(14, 6, 16), float32],) {
  %415 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %416 = %415.0;
  (%416,)
}

def @func_246(%var_210: Tensor[(12, 4, 7), int64], %var_211: Tensor[(12, 4, 7), int64], %var_237: Tensor[(12, 4, 7), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) {
  %417 = cast(%var_210, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %418 = tan(%417) /* ty=Tensor[(12, 4, 7), float32] */;
  %419 = cast(%var_211, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
  %420 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_210, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = greater_equal(%421, %422) /* ty=Tensor[(12, 4, 7), bool] */;
  %424 = cast(%var_211, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %428 = maximum(%426, %427) /* ty=Tensor[(12, 4, 7), float64] */;
  %429 = cast(%428, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
  %430 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%418, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(%var_237, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %434 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%418, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %437 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %438 = not_equal(%431, %432) /* ty=Tensor[(12, 4, 7), bool] */;
  %439 = power(%435, %436) /* ty=Tensor[(12, 4, 7), float32] */;
  (%437, %438, %439)
}

def @func_8467() -> (Tensor[(14, 6, 16), float64], Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %440 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %441 = %440.0;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %443 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %444 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %445 = log(%442) /* ty=Tensor[(14, 6, 16), float64] */;
  %446 = %443.1;
  %447 = @func_6976() /* ty=Tensor[(14, 6, 16), float32] */;
  %448 = %444.1;
  (%445, %446, %447, %448)
}

def @func_7380() -> (Tensor[(14, 6, 16), float32], Tensor[(8, 2, 1), float64], Tensor[(8, 2), float64]) {
  %449 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %450 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %451 = reshape(%450, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
  %452 = @func_2440(%451) /* ty=(Tensor[(8, 2, 1), float64],) */;
  %453 = %449.4;
  %454 = %452.0;
  (%453, %454, meta[relay.Constant][15] /* ty=Tensor[(8, 2), float64] */)
}

def @func_7503(%var_7402: Tensor[(4, 2), float32], %var_7450: Tensor[(162, 6), float32], %var_7454: Tensor[(324), int64], %var_7477: Tensor[(672), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(9, 9, 12), uint32], Tensor[(162, 6), float32], Tensor[(3, 12, 9), int64], Tensor[(324), int64], Tensor[(12, 14, 4), float64], Tensor[(4, 2), float32], Tensor[(672), bool], Tensor[(13, 15, 3), float32], Tensor[(585), float32]) {
  %455 = @func_5432() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %456 = cast(%var_7450, dtype="float32") /* ty=Tensor[(162, 6), float32] */;
  %457 = reshape(%456, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float32] */;
  %458 = @func_1421(%457) /* ty=(Tensor[(9, 9, 12), uint32],) */;
  %459 = cast(%var_7454, dtype="int64") /* ty=Tensor[(324), int64] */;
  %460 = reshape(%459, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int64] */;
  %461 = @func_4668(%460) /* ty=(Tensor[(3, 12, 9), int64],) */;
  %462 = cast(meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %463 = %455.1;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %465 = reshape(%462, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float64] */;
  %466 = reshape(%464, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %467 = @func_4717(%465, %466) /* ty=(Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) */;
  %468 = cast(%var_7402, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %469 = asinh(%468) /* ty=Tensor[(4, 2), float32] */;
  %470 = cast(%469, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
  %471 = exp(%470) /* ty=Tensor[(4, 2), float64] */;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %473 = cast(%var_7477, dtype="bool") /* ty=Tensor[(672), bool] */;
  %474 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %475 = cast(meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?), bool] */;
  %477 = cast(meta[relay.Constant][17] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %478 = reshape(%477, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %479 = @func_1369(%478) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) */;
  %480 = %458.0;
  %481 = %461.0;
  %482 = %467.0;
  %483 = asin(%472) /* ty=Tensor[(4, 2), float32] */;
  %484 = equal(%475, %476) /* ty=Tensor[(672), bool] */;
  %485 = %479.0;
  (%463, %480, %var_7450, %481, %var_7454, %482, %483, %484, %485, meta[relay.Constant][17] /* ty=Tensor[(585), float32] */)
}

def @func_4668(%var_4663: Tensor[(3, 12, 9), int64]) -> (Tensor[(3, 12, 9), int64],) {
  %486 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 12, 9), int64] */, dtype="int64") /* ty=Tensor[(3, 12, 9), int64] */;
  %487 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_4663, dtype="int64") /* ty=Tensor[(3, 12, 9), int64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %490 = minimum(%488, %489) /* ty=Tensor[(3, 12, 9), int64] */;
  (%490,)
}

def @func_6053() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_5001() -> (Tensor[(32), float64],) {
  %491 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(32), float64] */;
  %494 = log2(%493) /* ty=Tensor[(32), float64] */;
  (%494,)
}

def @func_7520(%var_7517: Tensor[(1, 12, 7), float32]) -> (Tensor[(1, 12, 7), float32],) {
  %495 = cast(%var_7517, dtype="float32") /* ty=Tensor[(1, 12, 7), float32] */;
  %496 = log10(%495) /* ty=Tensor[(1, 12, 7), float32] */;
  (%496,)
}

def @func_3871() -> Tensor[(14, 6, 16), float32] {
  @func_191() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_2096() -> Tensor[(14, 6, 16), float32] {
  %497 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %497.1
}

def @func_4200() -> Tensor[(14, 6, 16), float32] {
  %498 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %498.0
}

def @func_9295() -> (Tensor[(16, 2), float64],) {
  %499 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
  %500 = %499.0;
  (%500,)
}

def @func_8256() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %501 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %502 = @func_5886() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %503 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %504 = @func_6475() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %505 = %501.0;
  %506 = %502.0;
  %507 = %503.0;
  %508 = %504.2;
  (%505, %506, %507, %508)
}

def @func_7002() -> (Tensor[(14, 6, 16), float64],) {
  %509 = @func_4536() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %510 = %509.1;
  (%510,)
}

def @func_5507(%var_5488: Tensor[(16, 4, 14), uint8], %var_5489: Tensor[(16, 4, 14), uint8]) -> Tensor[(16, 4, 14), uint16] {
  %511 = cast(%var_5489, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %512 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_5488, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = greater(%513, %514) /* ty=Tensor[(16, 4, 14), bool] */;
  %516 = cast(%var_5489, dtype="uint16") /* ty=Tensor[(16, 4, 14), uint16] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="uint16") /* ty=Tensor[(16, 4, 14), uint16] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%518, %519) /* ty=Tensor[(16, 4, 14), uint16] */
}

def @func_1580() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
  %520 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %521 = cast(meta[relay.Constant][19] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %522 = cast(meta[relay.Constant][20] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
  %523 = reshape(%521, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %524 = reshape(%522, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %525 = @func_1440() /* ty=Tensor[(14, 6, 16), float32] */;
  %526 = %520.0;
  %527 = @func_1018(%523, %524) /* ty=Tensor[(11, 10, 8), float32] */;
  (%525, %526, %527, meta[relay.Constant][19] /* ty=Tensor[(88), int32] */, meta[relay.Constant][20] /* ty=Tensor[(880), int32] */)
}

def @func_6209() -> Tensor[(880), int32] {
  %528 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %528.4
}

def @func_6739() -> (Tensor[(16, 2), float64],) {
  %529 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
  %530 = %529.2;
  (%530,)
}

def @func_1440() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6634() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  %531 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %532 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %533 = %531.0;
  %534 = %532.2;
  (%533, %534)
}

def @func_8881(%var_8871: Tensor[(312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(8, 4), float64], Tensor[(3, 8, 13), float32], Tensor[(312), float32], Tensor[(112, 8), float32]) {
  %535 = @func_6821() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %536 = @func_6391() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %537 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %538 = cast(%var_8871, dtype="float32") /* ty=Tensor[(312), float32] */;
  %539 = reshape(%538, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %540 = cast(meta[relay.Constant][21] /* ty=Tensor[(112, 8), uint8] */, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
  %541 = sigmoid(%540) /* ty=Tensor[(112, 8), float64] */;
  %542 = cast(meta[relay.Constant][21] /* ty=Tensor[(112, 8), uint8] */, dtype="uint8") /* ty=Tensor[(112, 8), uint8] */;
  %543 = cast(meta[relay.Constant][21] /* ty=Tensor[(112, 8), uint8] */, dtype="uint8") /* ty=Tensor[(112, 8), uint8] */;
  %544 = reshape(%542, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %545 = reshape(%543, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %546 = @func_5507(%544, %545) /* ty=Tensor[(16, 4, 14), uint16] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(16, 4, 14), float32] */;
  %548 = shape_of(%541, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%541, dtype="float32") /* ty=Tensor[(112, 8), float32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %551 = %535.0;
  %552 = %536.3;
  %553 = %537.1;
  %554 = @func_7094() /* ty=Tensor[(8, 4), float64] */;
  %555 = @func_1380(%539) /* ty=Tensor[(3, 8, 13), float32] */;
  %556 = power(%549, %550) /* ty=Tensor[(112, 8), float32] */;
  (%551, %552, %553, %554, %555, %var_8871, %556)
}

def @func_6950(%var_6938: Tensor[(585), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(585), float32]) {
  %557 = @func_5565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) */;
  %558 = cast(%var_6938, dtype="float32") /* ty=Tensor[(585), float32] */;
  %559 = reshape(%558, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %560 = @func_1369(%559) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) */;
  %561 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
  %562 = %557.3;
  %563 = %560.1;
  (%561, %562, %563, %var_6938)
}

def @func_9431() -> Tensor[(16, 2), float64] {
  @func_8759() /* ty=Tensor[(16, 2), float64] */
}

def @func_978() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %564 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %565 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %566 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %567 = reshape(%566, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %568 = %564.0;
  %569 = %565.0;
  %570 = @func_655(%567) /* ty=Tensor[(16, 2), float64] */;
  %571 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  (%568, %569, %570, meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, %571)
}

def @func_9128() -> (Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(88), int32]) {
  %572 = @func_7565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %573 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %574 = @func_7849() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(88), int32]) */;
  %575 = %572.1;
  %576 = %573.0;
  %577 = %574.1;
  (%575, %576, %577)
}

def @func_5176() -> (Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %578 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %579 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %580 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %581 = %578.3;
  %582 = %579.0;
  %583 = %580.0;
  (%581, %582, %583)
}

def @func_1421(%var_1392: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), uint32],) {
  %584 = cast(%var_1392, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %585 = asin(%584) /* ty=Tensor[(9, 9, 12), float32] */;
  %586 = cast(%var_1392, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %590 = multiply(%588, %589) /* ty=Tensor[(9, 9, 12), uint32] */;
  (%590,)
}

def @func_2271() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  %591 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %592 = %591.0;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %594 = @func_834() /* ty=Tensor[(14, 6, 16), float32] */;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %596 = asinh(%593) /* ty=Tensor[(14, 6, 16), float32] */;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %598 = reshape(%595, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %599 = reshape(%597, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %600 = @func_435(%598, %599) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %601 = %600.0;
  (%596, %594, %601)
}

def @func_7612() -> Tensor[(14, 6, 16), float32] {
  %602 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %602.1
}

def @func_294() -> Tensor[(14, 6, 16), float32] {
  @func_191() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6777() -> (Tensor[(14, 6, 16), float32],) {
  %603 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  (%603,)
}

def @func_7806() -> Tensor[(32), float64] {
  %604 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %604.0
}

def @func_5482() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %605 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %606 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %607 = %605.0;
  %608 = %606.0;
  (%607, %608)
}

def @func_6391() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %609 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %611 = @func_3613() /* ty=Tensor[(16, 2), float64] */;
  %612 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
  %613 = @func_4154() /* ty=Tensor[(14, 6, 16), float32] */;
  %614 = sigmoid(%610) /* ty=Tensor[(14, 6, 16), float64] */;
  (%611, %612, %613, %614)
}

def @func_8971() -> (Tensor[(16, 2), float64],) {
  %615 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
  %616 = %615.0;
  (%616,)
}

def @func_1818() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  %617 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %618 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %619 = reshape(%618, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %620 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %621 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %622 = %617.1;
  %623 = @func_655(%619) /* ty=Tensor[(16, 2), float64] */;
  %624 = %620.3;
  (%621, %622, %623, meta[relay.Constant][23] /* ty=Tensor[(4, 8), float64] */, %624)
}

def @func_6475() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %625 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
  %626 = %625.0;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %628 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
  %629 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %631 = cast(%626, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %632 = reshape(%630, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %633 = reshape(%631, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %634 = @func_435(%632, %633) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %635 = @func_4929() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %636 = %628.0;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %638 = reshape(%637, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %639 = @func_692(%638) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %640 = rsqrt(%627) /* ty=Tensor[(14, 6, 16), float64] */;
  %641 = %634.4;
  %642 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
  %643 = %635.0;
  %644 = %639.1;
  (%640, %636, %629, %641, %642, %643, %644)
}

def @func_6069() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %645 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %646 = %645.0;
  %647 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
  (%646, %647)
}

def @func_4154() -> Tensor[(14, 6, 16), float32] {
  %648 = @func_4111() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %648.0
}

def @func_4929() -> (Tensor[(14, 6, 16), float32],) {
  %649 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %650 = %649.1;
  (%650,)
}

def @func_1990(%var_1978: Tensor[(32), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  %651 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %652 = cast(%var_1978, dtype="float64") /* ty=Tensor[(32), float64] */;
  %653 = reshape(%652, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %654 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %655 = %654.4;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %657 = cast(%655, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %658 = reshape(%656, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %659 = reshape(%657, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %660 = @func_435(%658, %659) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %661 = %651.1;
  %662 = @func_655(%653) /* ty=Tensor[(16, 2), float64] */;
  %663 = %660.0;
  (%661, %662, %var_1978, %655, %663)
}

def @func_7565() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %664 = @func_5267() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %665 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %666 = %664.1;
  %667 = %665.0;
  (%666, %667)
}

def @func_9156() -> Tensor[(880), int32] {
  %668 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %668.0
}

def @func_479() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %669 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %671 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %673 = sqrt(%670) /* ty=Tensor[(14, 6, 16), float64] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %675 = reshape(%672, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %676 = reshape(%674, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %677 = @func_435(%675, %676) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %678 = %677.2;
  (%673, %671, %678)
}

def @func_1586() -> Tensor[(14, 6, 16), float32] {
  @func_331() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_5795(%var_5653: Tensor[(7, 11, 2), int64], %var_5654: Tensor[(7, 11, 2), int64], %var_5668: Tensor[(7, 11, 2), int64], %var_5693: Tensor[(896), uint8]) -> (Tensor[(7, 11, 2), bool], Tensor[(14, 6, 16), float32], Tensor[(16, 4, 14), uint16], Tensor[(896), uint8], Tensor[(7, 11, 2), bool], Tensor[(2, 44), int32], Tensor[(7, 11, 2), float64], Tensor[(24, 14), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(11, 10, 8), float32]) {
  %679 = cast(%var_5654, dtype="int64") /* ty=Tensor[(7, 11, 2), int64] */;
  %680 = shape_of(%var_5653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_5653, dtype="int64") /* ty=Tensor[(7, 11, 2), int64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %683 = bitwise_xor(%681, %682) /* ty=Tensor[(7, 11, 2), int64] */;
  %684 = cast(%var_5668, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = @func_5482() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %689 = cast(%var_5693, dtype="uint8") /* ty=Tensor[(896), uint8] */;
  %690 = cast(%var_5693, dtype="uint8") /* ty=Tensor[(896), uint8] */;
  %691 = reshape(%689, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %692 = reshape(%690, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %693 = cast(%var_5654, dtype="float32") /* ty=Tensor[(7, 11, 2), float32] */;
  %694 = sigmoid(%693) /* ty=Tensor[(7, 11, 2), float32] */;
  %695 = cast(%var_5654, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = cast(%683, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %700 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%694, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %703 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 44), int32] */, dtype="int32") /* ty=Tensor[(2, 44), int32] */;
  %704 = reshape(%703, newshape=[44, 2]) /* ty=Tensor[(44, 2), int32] */;
  %705 = @func_5360(%704) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) */;
  %706 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 44), int32] */, dtype="int32") /* ty=Tensor[(2, 44), int32] */;
  %707 = reshape(%706, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %708 = @func_1055(%707) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %709 = %708.2;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  %711 = erf(%710) /* ty=Tensor[(11, 10, 8), float32] */;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  %713 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %714 = cast(%711, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  %715 = logical_and(%686, %687) /* ty=Tensor[(7, 11, 2), bool] */;
  %716 = %688.0;
  %717 = @func_5507(%691, %692) /* ty=Tensor[(16, 4, 14), uint16] */;
  %718 = logical_or(%697, %698) /* ty=Tensor[(7, 11, 2), bool] */;
  %719 = floor_mod(%701, %702) /* ty=Tensor[(7, 11, 2), float64] */;
  %720 = %705.4;
  %721 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %722 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
  %723 = sinh(%712) /* ty=Tensor[(11, 10, 8), float32] */;
  %724 = %713.0;
  %725 = cos(%714) /* ty=Tensor[(11, 10, 8), float32] */;
  (%715, %716, %717, %var_5693, %718, meta[relay.Constant][24] /* ty=Tensor[(2, 44), int32] */, %719, %720, %721, %722, %723, %724, %725)
}

def @func_4637() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) {
  %726 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %727 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %728 = cast(meta[relay.Constant][25] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %729 = reshape(%728, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %730 = @func_1055(%729) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %731 = %726.1;
  %732 = %727.0;
  %733 = %730.3;
  (%731, %732, %733, meta[relay.Constant][25] /* ty=Tensor[(88), int32] */)
}

def @func_2955(%var_2950: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(880), float64]) {
  %734 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
  %735 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %736 = reshape(%735, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %737 = @func_1055(%736) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %738 = %737.4;
  %739 = cast(%var_2950, dtype="float64") /* ty=Tensor[(880), float64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %741 = cast(%738, dtype="float64") /* ty=Tensor[(880), float64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?), float64] */;
  %743 = %734.0;
  %744 = divide(%741, %742) /* ty=Tensor[(880), float64] */;
  (%743, meta[relay.Constant][26] /* ty=Tensor[(88), int32] */, %744)
}

def @func_1369(%var_1355: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) {
  %745 = cast(%var_1355, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %746 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %747 = sin(%745) /* ty=Tensor[(13, 15, 3), float32] */;
  %748 = %746.0;
  (%747, %748)
}

def @func_5057() -> (Tensor[(14, 6, 16), float32],) {
  %749 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %750 = %749.1;
  (%750,)
}

def @func_6261(%var_6220: Tensor[(13, 8, 5), float64], %var_6221: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(14, 6, 16), float32], Tensor[(13, 8, 5), float32]) {
  %751 = cast(%var_6221, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %752 = shape_of(%var_6220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_6220, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = @func_5176() /* ty=(Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %756 = cast(%var_6221, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %757 = mod(%753, %754) /* ty=Tensor[(13, 8, 5), float64] */;
  %758 = %755.2;
  %759 = cosh(%756) /* ty=Tensor[(13, 8, 5), float32] */;
  (%757, %758, %759)
}

def @func_3045() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %760 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %761 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %762 = @func_2781() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %763 = %760.1;
  %764 = %761.1;
  %765 = %762.0;
  (%763, %764, %765)
}

def @func_7656() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32]) {
  %766 = @func_6634() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %767 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %768 = %766.1;
  %769 = %767.1;
  (%768, %769)
}

def @func_4501() -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
  %770 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %771 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  %772 = %770.0;
  (%771, %772)
}

def @func_5886() -> (Tensor[(14, 6, 16), float32],) {
  %773 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %774 = %773.0;
  (%774,)
}

def @func_8588(%var_8556: Tensor[(4, 1, 13), uint16], %var_8557: Tensor[(4, 7, 13), uint16]) -> (Tensor[(4, 7, 13), uint16], Tensor[(4, 1, 13), float32], Tensor[(16, 2), float64], Tensor[(4, 7, 13), float64]) {
  %775 = cast(%var_8556, dtype="uint16") /* ty=Tensor[(4, 1, 13), uint16] */;
  %776 = cast(%var_8557, dtype="uint16") /* ty=Tensor[(4, 7, 13), uint16] */;
  %777 = cast(%var_8556, dtype="float32") /* ty=Tensor[(4, 1, 13), float32] */;
  %778 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
  %779 = cast(%var_8557, dtype="float64") /* ty=Tensor[(4, 7, 13), float64] */;
  %780 = left_shift(%775, %776) /* ty=Tensor[(4, 7, 13), uint16] */;
  %781 = sin(%777) /* ty=Tensor[(4, 1, 13), float32] */;
  %782 = %778.0;
  %783 = log(%779) /* ty=Tensor[(4, 7, 13), float64] */;
  (%780, %781, %782, %783)
}

def @func_3444() -> (Tensor[(16, 2), float64], Tensor[(880), int32]) {
  %784 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %785 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %786 = %784.1;
  %787 = %785.2;
  (%786, %787)
}

def @func_2885() -> (Tensor[(14, 6, 16), float32],) {
  %788 = @func_2781() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %789 = %788.0;
  (%789,)
}

def @func_331() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4461() -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) {
  %790 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %791 = cast(meta[relay.Constant][27] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %792 = reshape(%791, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %793 = %790.2;
  %794 = @func_1380(%792) /* ty=Tensor[(3, 8, 13), float32] */;
  (%793, %794, meta[relay.Constant][27] /* ty=Tensor[(312), float32] */)
}

def @func_8314(%var_8273: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
  %795 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %796 = shape_of(%var_8273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%var_8273, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%797, %798) /* ty=Tensor[(9, 6, 5), float64] */
}

def @func_1018(%var_997: Tensor[(11, 1, 8), int32], %var_998: Tensor[(11, 10, 8), int32]) -> Tensor[(11, 10, 8), float32] {
  %799 = cast(%var_997, dtype="int32") /* ty=Tensor[(11, 1, 8), int32] */;
  %800 = cast(%var_998, dtype="int32") /* ty=Tensor[(11, 10, 8), int32] */;
  %801 = subtract(%799, %800) /* ty=Tensor[(11, 10, 8), int32] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  rsqrt(%802) /* ty=Tensor[(11, 10, 8), float32] */
}

def @func_8644(%var_8639: Tensor[(4, 3, 15), uint32]) -> (Tensor[(4, 3, 15), uint32],) {
  %803 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 3, 15), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 15), uint32] */;
  %804 = shape_of(%var_8639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_8639, dtype="uint32") /* ty=Tensor[(4, 3, 15), uint32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %807 = bitwise_or(%805, %806) /* ty=Tensor[(4, 3, 15), uint32] */;
  (%807,)
}

def @func_6600() -> Tensor[(32), float64] {
  %808 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %808.0
}

def @func_2288() -> Tensor[(14, 6, 16), float32] {
  %809 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %809.1
}

def @func_3142(%var_3096: Tensor[(5, 14, 1), uint16], %var_3117: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) {
  %810 = cast(%var_3096, dtype="uint16") /* ty=Tensor[(5, 14, 1), uint16] */;
  %811 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %812 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %813 = cast(%var_3096, dtype="int16") /* ty=Tensor[(5, 14, 1), int16] */;
  %814 = cast(%var_3117, dtype="int16") /* ty=Tensor[(5, 14, 15), int16] */;
  %815 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %816 = acos(%815) /* ty=Tensor[(5, 14, 5), float64] */;
  %817 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="uint32") /* ty=Tensor[(5, 14, 5), uint32] */;
  %818 = cast(%var_3096, dtype="uint32") /* ty=Tensor[(5, 14, 1), uint32] */;
  %819 = multiply(%817, %818) /* ty=Tensor[(5, 14, 5), uint32] */;
  %820 = cast(%819, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %821 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%816, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %824 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  %825 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %829 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%816, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %832 = minimum(%810, %811) /* ty=Tensor[(5, 14, 5), uint16] */;
  %833 = %812.1;
  %834 = bitwise_and(%813, %814) /* ty=Tensor[(5, 14, 15), int16] */;
  %835 = add(%822, %823) /* ty=Tensor[(5, 14, 5), uint16] */;
  %836 = logical_and(%826, %827) /* ty=Tensor[(5, 14, 5), bool] */;
  %837 = floor_divide(%830, %831) /* ty=Tensor[(5, 14, 5), float32] */;
  (%832, %833, %834, %835, %836, %837)
}

def @func_2533() -> (Tensor[(880), int32],) {
  %838 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %839 = %838.4;
  (%839,)
}

def @func_8159(%var_8151: Tensor[(12, 15, 8), int8], %var_8152: Tensor[(12, 15, 8), int8]) -> Tensor[(12, 15, 8), int8] {
  %840 = cast(%var_8152, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
  %841 = shape_of(%var_8151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_8151, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%842, %843) /* ty=Tensor[(12, 15, 8), int8] */
}

def @func_5565() -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) {
  %844 = cast(meta[relay.Constant][32] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %845 = reshape(%844, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %846 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
  %847 = @func_1440() /* ty=Tensor[(14, 6, 16), float32] */;
  %848 = @func_1380(%845) /* ty=Tensor[(3, 8, 13), float32] */;
  %849 = %846.1;
  (%847, %848, meta[relay.Constant][32] /* ty=Tensor[(78, 4), float32] */, %849)
}

def @func_6036() -> Tensor[(14, 6, 16), float32] {
  %850 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %850.0
}

def @func_5432() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %851 = @func_5057() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %852 = %851.0;
  %853 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  (%852, %853)
}

def @func_1771(%var_1724: Tensor[(336), int64], %var_1761: Tensor[(1, 312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) {
  %854 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %855 = cast(%var_1724, dtype="int64") /* ty=Tensor[(336), int64] */;
  %856 = cast(%var_1724, dtype="int64") /* ty=Tensor[(336), int64] */;
  %857 = cast(%var_1724, dtype="float32") /* ty=Tensor[(336), float32] */;
  %858 = reshape(%855, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %859 = reshape(%856, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
  %860 = reshape(%857, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
  %861 = @func_246(%858, %859, %860) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
  %862 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %863 = cast(%var_1761, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
  %864 = reshape(%863, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %865 = %854.0;
  %866 = %861.2;
  %867 = %862.0;
  %868 = @func_1380(%864) /* ty=Tensor[(3, 8, 13), float32] */;
  (%865, %866, %var_1724, %867, %868, %var_1761)
}

def @func_1271() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %869 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %870 = %869.0;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %872 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %873 = asin(%871) /* ty=Tensor[(14, 6, 16), float32] */;
  %874 = %872.2;
  (%873, %874)
}

def @func_1055(%var_1046: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
  %875 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %876 = cast(%var_1046, dtype="int32") /* ty=Tensor[(88), int32] */;
  %877 = cast(meta[relay.Constant][33] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
  %878 = reshape(%876, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %879 = reshape(%877, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %880 = %875.0;
  %881 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %882 = @func_1018(%878, %879) /* ty=Tensor[(11, 10, 8), float32] */;
  (%880, %881, %882, %var_1046, meta[relay.Constant][33] /* ty=Tensor[(880), int32] */)
}

def @func_4646() -> Tensor[(14, 6, 16), float32] {
  @func_3477() /* ty=Tensor[(14, 6, 16), float32] */
}

def @main() -> Tensor[(14, 16, 12), float32] {
  %883 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  rsqrt(%883) /* ty=Tensor[(14, 16, 12), float32] */
}

def @func_7124() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %884 = @func_3717() /* ty=Tensor[(14, 6, 16), float32] */;
  %885 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  (%884, %885)
}

def @func_7758(%var_7749: Tensor[(12, 13, 9), bool], %var_7750: Tensor[(12, 13, 9), bool]) -> (Tensor[(12, 13, 9), bool],) {
  %886 = cast(%var_7750, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %887 = shape_of(%var_7749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%var_7749, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %890 = logical_and(%888, %889) /* ty=Tensor[(12, 13, 9), bool] */;
  (%890,)
}

def @func_692(%var_674: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) {
  %891 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %892 = cast(%var_674, dtype="int16") /* ty=Tensor[(14, 6, 16), int16] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%891, dtype="int16") /* ty=Tensor[(14, 6, 16), int16] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %896 = bitwise_xor(%894, %895) /* ty=Tensor[(14, 6, 16), int16] */;
  %897 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  (%896, %897)
}

def @func_7980(%var_7933: Tensor[(32), float64]) -> (Tensor[(14, 12, 4), uint16], Tensor[(14, 6, 16), bool], Tensor[(32), float64], Tensor[(14, 6, 16), float64], Tensor[(2, 11, 5), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 12, 4), float64], Tensor[(12, 4, 7), float32]) {
  %898 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %899 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 12, 4), uint16] */, dtype="uint16") /* ty=Tensor[(14, 12, 4), uint16] */;
  %900 = cast(%var_7933, dtype="float64") /* ty=Tensor[(32), float64] */;
  %901 = reshape(%900, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %902 = @func_1990(%901) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %903 = @func_5622() /* ty=(Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %904 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %905 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %906 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 12, 4), uint16] */, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %907 = rsqrt(%906) /* ty=Tensor[(14, 12, 4), float64] */;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(14, 12, 4), float32] */;
  %909 = asin(%908) /* ty=Tensor[(14, 12, 4), float32] */;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %911 = @func_6475() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %912 = bitwise_xor(%898, %899) /* ty=Tensor[(14, 12, 4), uint16] */;
  %913 = %902.4;
  %914 = %903.2;
  %915 = %904.1;
  %916 = %905.2;
  %917 = exp(%910) /* ty=Tensor[(14, 12, 4), float64] */;
  %918 = %911.3;
  (%912, %913, %var_7933, %914, %915, %916, %917, %918)
}

def @func_2781() -> (Tensor[(14, 6, 16), float32],) {
  %919 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
  (%919,)
}

def @func_4689() -> Tensor[(16, 2), float64] {
  %920 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %920.1
}

def @func_3979() -> Tensor[(14, 6, 16), float32] {
  %921 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %921.0
}

def @func_3261() -> (Tensor[(14, 6, 16), float32],) {
  %922 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %923 = %922.0;
  (%923,)
}

def @func_9199() -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
  %924 = cast(meta[relay.Constant][37] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %925 = reshape(%924, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %926 = @func_2506(%925) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %927 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
  %928 = @func_9083() /* ty=Tensor[(880), int32] */;
  %929 = %926.0;
  (%927, %928, %929, meta[relay.Constant][37] /* ty=Tensor[(110), float64] */)
}

def @func_2506(%var_2485: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), float32],) {
  %930 = cast(%var_2485, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
  %931 = log2(%930) /* ty=Tensor[(2, 11, 5), float64] */;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
  %933 = sqrt(%932) /* ty=Tensor[(2, 11, 5), float32] */;
  (%933,)
}

def @func_3575(%var_3553: Tensor[(4, 8), float64]) -> (Tensor[(14, 6, 16), bool], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(14, 6, 16), float64]) {
  %934 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %935 = cast(%var_3553, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %936 = reshape(%935, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %937 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %938 = %934.2;
  %939 = @func_655(%936) /* ty=Tensor[(16, 2), float64] */;
  %940 = %937.0;
  (%938, %939, %var_3553, %940)
}

def @func_8707(%var_8663: uint32, %var_8664: Tensor[(3, 10, 6), uint32]) -> (Tensor[(3, 10, 6), float32], Tensor[(11, 10, 8), float32], Tensor[(14, 6, 16), float32], Tensor[(3, 10, 6), int32]) {
  %941 = cast(%var_8663, dtype="bool") /* ty=bool */;
  %942 = cast(%var_8664, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
  %943 = not_equal(%941, %942) /* ty=Tensor[(3, 10, 6), bool] */;
  %944 = cast(%943, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %945 = cast(%var_8663, dtype="float32") /* ty=float32 */;
  %946 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %947 = cast(%var_8664, dtype="int32") /* ty=Tensor[(3, 10, 6), int32] */;
  %948 = shape_of(%943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%943, dtype="int32") /* ty=Tensor[(3, 10, 6), int32] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %951 = mod(%944, %945) /* ty=Tensor[(3, 10, 6), float32] */;
  %952 = %946.2;
  %953 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
  %954 = minimum(%949, %950) /* ty=Tensor[(3, 10, 6), int32] */;
  (%951, %952, %953, %954)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7004() -> (Tensor[(14, 6, 16), float64],) {
  @func_7002() /* ty=(Tensor[(14, 6, 16), float64],) */
}

def @func_3047() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_7896() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %4 = fn () -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %0 = @func_4461() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) */;
    %1 = @func_6600() /* ty=Tensor[(32), float64] */;
    %2 = @func_6573() /* ty=Tensor[(14, 6, 16), float32] */;
    %3 = %0.0;
    (%1, %2, %3)
  };
  %4() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_1889() -> (Tensor[(32), float64],) {
  %5 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
  %6 = %5.4;
  (%6,)
}

def @func_5507(%var_5488: Tensor[(16, 4, 14), uint8], %var_5489: Tensor[(16, 4, 14), uint8]) -> Tensor[(16, 4, 14), uint16] {
  %7 = cast(%var_5489, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %8 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_5488, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = greater(%9, %10) /* ty=Tensor[(16, 4, 14), bool] */;
  %12 = cast(%var_5489, dtype="uint16") /* ty=Tensor[(16, 4, 14), uint16] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="uint16") /* ty=Tensor[(16, 4, 14), uint16] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%14, %15) /* ty=Tensor[(16, 4, 14), uint16] */
}

def @func_3979() -> Tensor[(14, 6, 16), float32] {
  %16 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %16.0
}

def @func_5886() -> (Tensor[(14, 6, 16), float32],) {
  %17 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %18 = %17.0;
  (%18,)
}

def @func_7762(%var_7760: Tensor[(12, 13, 9), bool], %var_7761: Tensor[(12, 13, 9), bool]) -> (Tensor[(12, 13, 9), bool],) {
  @func_7758(%var_7760, %var_7761) /* ty=(Tensor[(12, 13, 9), bool],) */
}

def @func_694(%var_693: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) {
  %26 = fn (%var_674: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) {
    %19 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
    %20 = cast(%var_674, dtype="int16") /* ty=Tensor[(14, 6, 16), int16] */;
    %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%19, dtype="int16") /* ty=Tensor[(14, 6, 16), int16] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %24 = bitwise_xor(%22, %23) /* ty=Tensor[(14, 6, 16), int16] */;
    %25 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
    (%24, %25)
  };
  %26(%var_693) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */
}

def @func_5332() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) {
  @func_5330() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) */
}

def @func_1382(%var_1381: Tensor[(3, 8, 13), float32]) -> Tensor[(3, 8, 13), float32] {
  %28 = fn (%var_1374: Tensor[(3, 8, 13), float32]) -> Tensor[(3, 8, 13), float32] {
    %27 = cast(%var_1374, dtype="float32") /* ty=Tensor[(3, 8, 13), float32] */;
    atanh(%27) /* ty=Tensor[(3, 8, 13), float32] */
  };
  %28(%var_1381) /* ty=Tensor[(3, 8, 13), float32] */
}

def @func_1993(%var_1991: Tensor[(32), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  @func_1990(%var_1991) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */
}

def @func_2654(%var_2636: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), uint16], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %29 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %30 = %29.0;
  %31 = cast(%var_2636, dtype="uint16") /* ty=Tensor[(14, 6, 16), uint16] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="uint16") /* ty=Tensor[(14, 6, 16), uint16] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %35 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %36 = cast(%30, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %37 = reshape(%36, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %38 = @func_730(%37) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %39 = left_shift(%33, %34) /* ty=Tensor[(14, 6, 16), uint16] */;
  %40 = %35.0;
  %41 = %38.1;
  (%39, %40, %41)
}

def @func_1581() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
  %50 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
    %42 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %43 = cast(meta[relay.Constant][0] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
    %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
    %45 = reshape(%43, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
    %46 = reshape(%44, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
    %47 = @func_1440() /* ty=Tensor[(14, 6, 16), float32] */;
    %48 = %42.0;
    %49 = @func_1018(%45, %46) /* ty=Tensor[(11, 10, 8), float32] */;
    (%47, %48, %49, meta[relay.Constant][0] /* ty=Tensor[(88), int32] */, meta[relay.Constant][1] /* ty=Tensor[(880), int32] */)
  };
  %50() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */
}

def @func_2443(%var_2441: Tensor[(8, 2, 1), float64]) -> (Tensor[(8, 2, 1), float64],) {
  @func_2440(%var_2441) /* ty=(Tensor[(8, 2, 1), float64],) */
}

def @func_3444() -> (Tensor[(16, 2), float64], Tensor[(880), int32]) {
  %51 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %52 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %53 = %51.1;
  %54 = %52.2;
  (%53, %54)
}

def @func_5856() -> (Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
  @func_5854() /* ty=(Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) */
}

def @func_8884(%var_8882: Tensor[(312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(8, 4), float64], Tensor[(3, 8, 13), float32], Tensor[(312), float32], Tensor[(112, 8), float32]) {
  @func_8881(%var_8882) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(8, 4), float64], Tensor[(3, 8, 13), float32], Tensor[(312), float32], Tensor[(112, 8), float32]) */
}

def @func_5565() -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) {
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %56 = reshape(%55, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %57 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
  %58 = @func_1440() /* ty=Tensor[(14, 6, 16), float32] */;
  %59 = @func_1380(%56) /* ty=Tensor[(3, 8, 13), float32] */;
  %60 = %57.1;
  (%58, %59, meta[relay.Constant][2] /* ty=Tensor[(78, 4), float32] */, %60)
}

def @func_3331() -> (Tensor[(14, 6, 16), float32],) {
  %61 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %62 = %61.0;
  (%62,)
}

def @func_730(%var_713: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %63 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %64 = cast(%var_713, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = cast(%var_713, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %69 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %70 = equal(%66, %67) /* ty=Tensor[(14, 6, 16), bool] */;
  %71 = atanh(%68) /* ty=Tensor[(14, 6, 16), float32] */;
  %72 = %69.0;
  (%70, %71, %72)
}

def @func_8522() -> (Tensor[(14, 6, 16), float64],) {
  %75 = fn () -> (Tensor[(14, 6, 16), float64],) {
    %73 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %74 = %73.0;
    (%74,)
  };
  %75() /* ty=(Tensor[(14, 6, 16), float64],) */
}

def @func_636() -> (Tensor[(14, 6, 16), float32],) {
  @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_4462() -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) {
  %81 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) {
    %76 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %78 = reshape(%77, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
    %79 = %76.2;
    %80 = @func_1380(%78) /* ty=Tensor[(3, 8, 13), float32] */;
    (%79, %80, meta[relay.Constant][3] /* ty=Tensor[(312), float32] */)
  };
  %81() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(312), float32]) */
}

def @func_536() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_8082() -> (Tensor[(88), int32],) {
  @func_8080() /* ty=(Tensor[(88), int32],) */
}

def @func_6265(%var_6263: Tensor[(13, 8, 5), float64], %var_6264: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(14, 6, 16), float32], Tensor[(13, 8, 5), float32]) {
  @func_6261(%var_6263, %var_6264) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(14, 6, 16), float32], Tensor[(13, 8, 5), float32]) */
}

def @func_3333() -> (Tensor[(14, 6, 16), float32],) {
  @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_4870(%var_4867: Tensor[(110), float64], %var_4868: Tensor[(88), int32], %var_4869: Tensor[(1050), uint16]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(70), uint16], Tensor[(1050), uint16], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(336), int64], Tensor[(5, 14, 5), float64]) {
  %115 = fn (%var_4781: Tensor[(110), float64], %var_4801: Tensor[(88), int32], %var_4807: Tensor[(1050), uint16]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(70), uint16], Tensor[(1050), uint16], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(336), int64], Tensor[(5, 14, 5), float64]) {
    %82 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %83 = cast(%var_4781, dtype="float64") /* ty=Tensor[(110), float64] */;
    %84 = reshape(%83, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
    %85 = @func_2506(%84) /* ty=(Tensor[(2, 11, 5), float32],) */;
    %86 = @func_4536() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
    %87 = cast(%var_4801, dtype="int32") /* ty=Tensor[(88), int32] */;
    %88 = reshape(%87, newshape=[88]) /* ty=Tensor[(88), int32] */;
    %89 = @func_1055(%88) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %90 = @func_2885() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %91 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), int64] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %95 = reshape(%92, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %96 = reshape(%93, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %97 = reshape(%94, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
    %98 = @func_246(%95, %96, %97) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
    %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(70), uint16] */, dtype="uint16") /* ty=Tensor[(70), uint16] */;
    %100 = cast(%var_4807, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %101 = reshape(%99, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), uint16] */;
    %102 = reshape(%100, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint16] */;
    %103 = @func_3142(%101, %102) /* ty=(Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) */;
    %104 = %103.4;
    %105 = cast(%104, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
    %106 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
    %107 = %82.0;
    %108 = %85.0;
    %109 = %86.1;
    %110 = %89.1;
    %111 = %90.0;
    %112 = %91.0;
    %113 = %98.0;
    %114 = sqrt(%105) /* ty=Tensor[(5, 14, 5), float64] */;
    (%106, %107, %108, %var_4781, %109, %110, %var_4801, meta[relay.Constant][4] /* ty=Tensor[(70), uint16] */, %var_4807, %111, %112, %113, meta[relay.Constant][5] /* ty=Tensor[(336), int64] */, %114)
  };
  %115(%var_4867, %var_4868, %var_4869) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(70), uint16], Tensor[(1050), uint16], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(336), int64], Tensor[(5, 14, 5), float64]) */
}

def @func_9295() -> (Tensor[(16, 2), float64],) {
  %116 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
  %117 = %116.0;
  (%117,)
}

def @func_6055() -> Tensor[(14, 6, 16), float32] {
  @func_6053() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_3446() -> (Tensor[(16, 2), float64], Tensor[(880), int32]) {
  @func_3444() /* ty=(Tensor[(16, 2), float64], Tensor[(880), int32]) */
}

def @func_7657() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32]) {
  %122 = fn () -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32]) {
    %118 = @func_6634() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
    %119 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %120 = %118.1;
    %121 = %119.1;
    (%120, %121)
  };
  %122() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_1152() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) {
  @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_8710(%var_8708: uint32, %var_8709: Tensor[(3, 10, 6), uint32]) -> (Tensor[(3, 10, 6), float32], Tensor[(11, 10, 8), float32], Tensor[(14, 6, 16), float32], Tensor[(3, 10, 6), int32]) {
  %137 = fn (%var_8663: uint32, %var_8664: Tensor[(3, 10, 6), uint32]) -> (Tensor[(3, 10, 6), float32], Tensor[(11, 10, 8), float32], Tensor[(14, 6, 16), float32], Tensor[(3, 10, 6), int32]) {
    %123 = cast(%var_8663, dtype="bool") /* ty=bool */;
    %124 = cast(%var_8664, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
    %125 = not_equal(%123, %124) /* ty=Tensor[(3, 10, 6), bool] */;
    %126 = cast(%125, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
    %127 = cast(%var_8663, dtype="float32") /* ty=float32 */;
    %128 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %129 = cast(%var_8664, dtype="int32") /* ty=Tensor[(3, 10, 6), int32] */;
    %130 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%125, dtype="int32") /* ty=Tensor[(3, 10, 6), int32] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %133 = mod(%126, %127) /* ty=Tensor[(3, 10, 6), float32] */;
    %134 = %128.2;
    %135 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
    %136 = minimum(%131, %132) /* ty=Tensor[(3, 10, 6), int32] */;
    (%133, %134, %135, %136)
  };
  %137(%var_8708, %var_8709) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(11, 10, 8), float32], Tensor[(14, 6, 16), float32], Tensor[(3, 10, 6), int32]) */
}

def @func_978() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %138 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %139 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %141 = reshape(%140, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %142 = %138.0;
  %143 = %139.0;
  %144 = @func_655(%141) /* ty=Tensor[(16, 2), float64] */;
  %145 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  (%142, %143, %144, meta[relay.Constant][6] /* ty=Tensor[(32), float64] */, %145)
}

def @func_7002() -> (Tensor[(14, 6, 16), float64],) {
  %146 = @func_4536() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %147 = %146.1;
  (%147,)
}

def @func_9247(%var_9245: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_9244(%var_9245) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_6477() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_6475() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_5623() -> (Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %153 = fn () -> (Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
    %148 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
    %149 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
    %150 = %148.3;
    %151 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
    %152 = %149.0;
    (%150, %151, %152)
  };
  %153() /* ty=(Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */
}

def @func_1021(%var_1019: Tensor[(11, 1, 8), int32], %var_1020: Tensor[(11, 10, 8), int32]) -> Tensor[(11, 10, 8), float32] {
  %158 = fn (%var_997: Tensor[(11, 1, 8), int32], %var_998: Tensor[(11, 10, 8), int32]) -> Tensor[(11, 10, 8), float32] {
    %154 = cast(%var_997, dtype="int32") /* ty=Tensor[(11, 1, 8), int32] */;
    %155 = cast(%var_998, dtype="int32") /* ty=Tensor[(11, 10, 8), int32] */;
    %156 = subtract(%154, %155) /* ty=Tensor[(11, 10, 8), int32] */;
    %157 = cast(%156, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    rsqrt(%157) /* ty=Tensor[(11, 10, 8), float32] */
  };
  %158(%var_1019, %var_1020) /* ty=Tensor[(11, 10, 8), float32] */
}

def @func_4375() -> (Tensor[(14, 6, 16), float32],) {
  %161 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %159 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %160 = %159.1;
    (%160,)
  };
  %161() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_9129() -> (Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(88), int32]) {
  %168 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(88), int32]) {
    %162 = @func_7565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %163 = @func_1889() /* ty=(Tensor[(32), float64],) */;
    %164 = @func_7849() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(88), int32]) */;
    %165 = %162.1;
    %166 = %163.0;
    %167 = %164.1;
    (%165, %166, %167)
  };
  %168() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(88), int32]) */
}

def @func_6821() -> (Tensor[(14, 6, 16), float32],) {
  %169 = @func_5432() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %170 = %169.1;
  (%170,)
}

def @func_1588() -> Tensor[(14, 6, 16), float32] {
  @func_1586() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_3478() -> Tensor[(14, 6, 16), float32] {
  %172 = fn () -> Tensor[(14, 6, 16), float32] {
    %171 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %171.0
  };
  %172() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_1440() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6106() -> Tensor[(14, 6, 16), bool] {
  @func_6104() /* ty=Tensor[(14, 6, 16), bool] */
}

def @func_4570() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_4568() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_733(%var_731: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  @func_730(%var_731) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */
}

def @func_3718() -> Tensor[(14, 6, 16), float32] {
  %174 = fn () -> Tensor[(14, 6, 16), float32] {
    %173 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %173.0
  };
  %174() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_3142(%var_3096: Tensor[(5, 14, 1), uint16], %var_3117: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) {
  %175 = cast(%var_3096, dtype="uint16") /* ty=Tensor[(5, 14, 1), uint16] */;
  %176 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %177 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %178 = cast(%var_3096, dtype="int16") /* ty=Tensor[(5, 14, 1), int16] */;
  %179 = cast(%var_3117, dtype="int16") /* ty=Tensor[(5, 14, 15), int16] */;
  %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="float64") /* ty=Tensor[(5, 14, 5), float64] */;
  %181 = acos(%180) /* ty=Tensor[(5, 14, 5), float64] */;
  %182 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="uint32") /* ty=Tensor[(5, 14, 5), uint32] */;
  %183 = cast(%var_3096, dtype="uint32") /* ty=Tensor[(5, 14, 1), uint32] */;
  %184 = multiply(%182, %183) /* ty=Tensor[(5, 14, 5), uint32] */;
  %185 = cast(%184, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %186 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%181, dtype="uint16") /* ty=Tensor[(5, 14, 5), uint16] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %189 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  %190 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 14, 5), uint16] */, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %194 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%181, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %197 = minimum(%175, %176) /* ty=Tensor[(5, 14, 5), uint16] */;
  %198 = %177.1;
  %199 = bitwise_and(%178, %179) /* ty=Tensor[(5, 14, 15), int16] */;
  %200 = add(%187, %188) /* ty=Tensor[(5, 14, 5), uint16] */;
  %201 = logical_and(%191, %192) /* ty=Tensor[(5, 14, 5), bool] */;
  %202 = floor_divide(%195, %196) /* ty=Tensor[(5, 14, 5), float32] */;
  (%197, %198, %199, %200, %201, %202)
}

def @func_3614() -> Tensor[(16, 2), float64] {
  %204 = fn () -> Tensor[(16, 2), float64] {
    %203 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %203.0
  };
  %204() /* ty=Tensor[(16, 2), float64] */
}

def @func_6209() -> Tensor[(880), int32] {
  %205 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %205.4
}

def @func_4930() -> (Tensor[(14, 6, 16), float32],) {
  %208 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %206 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
    %207 = %206.1;
    (%207,)
  };
  %208() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_6600() -> Tensor[(32), float64] {
  %209 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %209.0
}

def @func_7612() -> Tensor[(14, 6, 16), float32] {
  %210 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %210.1
}

def @func_756(%var_735: Tensor[(15, 12, 5), uint8], %var_736: Tensor[(15, 12, 5), uint8], %var_742: Tensor[(1344), float32]) -> (Tensor[(15, 12, 5), uint8], Tensor[(14, 6, 16), float64], Tensor[(1344), float32]) {
  %211 = cast(%var_736, dtype="uint8") /* ty=Tensor[(15, 12, 5), uint8] */;
  %212 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_735, dtype="uint8") /* ty=Tensor[(15, 12, 5), uint8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %215 = cast(%var_742, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %216 = reshape(%215, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %217 = @func_730(%216) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %218 = subtract(%213, %214) /* ty=Tensor[(15, 12, 5), uint8] */;
  %219 = %217.2;
  (%218, %219, %var_742)
}

def @func_8258() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  @func_8256() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_8761() -> Tensor[(16, 2), float64] {
  @func_8759() /* ty=Tensor[(16, 2), float64] */
}

def @func_7614() -> Tensor[(14, 6, 16), float32] {
  @func_7612() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_9158() -> Tensor[(880), int32] {
  @func_9156() /* ty=Tensor[(880), int32] */
}

def @func_7222(%var_7220: Tensor[(1, 3, 4), float64], %var_7221: Tensor[(9, 3, 4), float64]) -> (Tensor[(?, 3, 4), float64], Tensor[(9, 3, 4), float64]) {
  %232 = fn (%var_7192: Tensor[(1, 3, 4), float64], %var_7198: Tensor[(9, 3, 4), float64]) -> (Tensor[(?, 3, 4), float64], Tensor[(9, 3, 4), float64]) {
    %220 = cast(%var_7192, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %221 = erf(%220) /* ty=Tensor[(1, 3, 4), float64] */;
    %222 = cast(%221, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %223 = shape_of(%var_7192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%var_7192, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %226 = cast(%221, dtype="int8") /* ty=Tensor[(1, 3, 4), int8] */;
    %227 = cast(%var_7198, dtype="int8") /* ty=Tensor[(9, 3, 4), int8] */;
    %228 = multiply(%226, %227) /* ty=Tensor[(9, 3, 4), int8] */;
    %229 = cast(%228, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
    %230 = power(%224, %225) /* ty=Tensor[(?, 3, 4), float64] */;
    %231 = tan(%229) /* ty=Tensor[(9, 3, 4), float64] */;
    (%230, %231)
  };
  %232(%var_7220, %var_7221) /* ty=(Tensor[(?, 3, 4), float64], Tensor[(9, 3, 4), float64]) */
}

def @func_7508(%var_7504: Tensor[(4, 2), float32], %var_7505: Tensor[(162, 6), float32], %var_7506: Tensor[(324), int64], %var_7507: Tensor[(672), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(9, 9, 12), uint32], Tensor[(162, 6), float32], Tensor[(3, 12, 9), int64], Tensor[(324), int64], Tensor[(12, 14, 4), float64], Tensor[(4, 2), float32], Tensor[(672), bool], Tensor[(13, 15, 3), float32], Tensor[(585), float32]) {
  %264 = fn (%var_7402: Tensor[(4, 2), float32], %var_7450: Tensor[(162, 6), float32], %var_7454: Tensor[(324), int64], %var_7477: Tensor[(672), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(9, 9, 12), uint32], Tensor[(162, 6), float32], Tensor[(3, 12, 9), int64], Tensor[(324), int64], Tensor[(12, 14, 4), float64], Tensor[(4, 2), float32], Tensor[(672), bool], Tensor[(13, 15, 3), float32], Tensor[(585), float32]) {
    %233 = @func_5432() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %234 = cast(%var_7450, dtype="float32") /* ty=Tensor[(162, 6), float32] */;
    %235 = reshape(%234, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float32] */;
    %236 = @func_1421(%235) /* ty=(Tensor[(9, 9, 12), uint32],) */;
    %237 = cast(%var_7454, dtype="int64") /* ty=Tensor[(324), int64] */;
    %238 = reshape(%237, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int64] */;
    %239 = @func_4668(%238) /* ty=(Tensor[(3, 12, 9), int64],) */;
    %240 = cast(meta[relay.Constant][9] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %241 = %233.1;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %243 = reshape(%240, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float64] */;
    %244 = reshape(%242, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %245 = @func_4717(%243, %244) /* ty=(Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) */;
    %246 = cast(%var_7402, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
    %247 = asinh(%246) /* ty=Tensor[(4, 2), float32] */;
    %248 = cast(%247, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
    %249 = exp(%248) /* ty=Tensor[(4, 2), float64] */;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
    %251 = cast(%var_7477, dtype="bool") /* ty=Tensor[(672), bool] */;
    %252 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(672), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %253 = cast(meta[relay.Constant][9] /* ty=Tensor[(672), float64] */, dtype="bool") /* ty=Tensor[(672), bool] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), bool] */;
    %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
    %256 = reshape(%255, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
    %257 = @func_1369(%256) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) */;
    %258 = %236.0;
    %259 = %239.0;
    %260 = %245.0;
    %261 = asin(%250) /* ty=Tensor[(4, 2), float32] */;
    %262 = equal(%253, %254) /* ty=Tensor[(672), bool] */;
    %263 = %257.0;
    (%241, %258, %var_7450, %259, %var_7454, %260, %261, %262, %263, meta[relay.Constant][10] /* ty=Tensor[(585), float32] */)
  };
  %264(%var_7504, %var_7505, %var_7506, %var_7507) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(9, 9, 12), uint32], Tensor[(162, 6), float32], Tensor[(3, 12, 9), int64], Tensor[(324), int64], Tensor[(12, 14, 4), float64], Tensor[(4, 2), float32], Tensor[(672), bool], Tensor[(13, 15, 3), float32], Tensor[(585), float32]) */
}

def @func_8644(%var_8639: Tensor[(4, 3, 15), uint32]) -> (Tensor[(4, 3, 15), uint32],) {
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 3, 15), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 15), uint32] */;
  %266 = shape_of(%var_8639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_8639, dtype="uint32") /* ty=Tensor[(4, 3, 15), uint32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %269 = bitwise_or(%267, %268) /* ty=Tensor[(4, 3, 15), uint32] */;
  (%269,)
}

def @func_7522(%var_7521: Tensor[(1, 12, 7), float32]) -> (Tensor[(1, 12, 7), float32],) {
  %272 = fn (%var_7517: Tensor[(1, 12, 7), float32]) -> (Tensor[(1, 12, 7), float32],) {
    %270 = cast(%var_7517, dtype="float32") /* ty=Tensor[(1, 12, 7), float32] */;
    %271 = log10(%270) /* ty=Tensor[(1, 12, 7), float32] */;
    (%271,)
  };
  %272(%var_7521) /* ty=(Tensor[(1, 12, 7), float32],) */
}

def @func_331() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_2271() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  %273 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %274 = %273.0;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %276 = @func_834() /* ty=Tensor[(14, 6, 16), float32] */;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %278 = asinh(%275) /* ty=Tensor[(14, 6, 16), float32] */;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %280 = reshape(%277, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %281 = reshape(%279, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %282 = @func_435(%280, %281) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %283 = %282.0;
  (%278, %276, %283)
}

def @func_6977() -> Tensor[(14, 6, 16), float32] {
  %285 = fn () -> Tensor[(14, 6, 16), float32] {
    %284 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %284.1
  };
  %285() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6602() -> Tensor[(32), float64] {
  @func_6600() /* ty=Tensor[(32), float64] */
}

def @func_876() -> (Tensor[(14, 6, 16), float32],) {
  %286 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %287 = %286.1;
  (%287,)
}

def @func_7126() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_7124() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_534() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  %288 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %290 = cos(%289) /* ty=Tensor[(14, 6, 16), float64] */;
  %291 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  (%290, %291)
}

def @func_8647(%var_8645: Tensor[(4, 3, 15), uint32]) -> (Tensor[(4, 3, 15), uint32],) {
  @func_8644(%var_8645) /* ty=(Tensor[(4, 3, 15), uint32],) */
}

def @func_980() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_3269() -> (Tensor[(14, 6, 16), float64],) {
  %294 = fn () -> (Tensor[(14, 6, 16), float64],) {
    %292 = @func_2848() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) */;
    %293 = %292.1;
    (%293,)
  };
  %294() /* ty=(Tensor[(14, 6, 16), float64],) */
}

def @func_5854() -> (Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
  %295 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %297 = reshape(%296, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %298 = @func_2506(%297) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %299 = %295.0;
  %300 = %298.0;
  (%299, %300, meta[relay.Constant][12] /* ty=Tensor[(110), float64] */)
}

def @func_5910() -> (Tensor[(32), float64], Tensor[(2, 11, 5), float32]) {
  %301 = @func_5001() /* ty=(Tensor[(32), float64],) */;
  %302 = @func_5854() /* ty=(Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) */;
  %303 = %301.0;
  %304 = %302.1;
  (%303, %304)
}

def @func_4201() -> Tensor[(14, 6, 16), float32] {
  %306 = fn () -> Tensor[(14, 6, 16), float32] {
    %305 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %305.0
  };
  %306() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_9064(%var_9062: Tensor[(88), int32], %var_9063: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64]) {
  @func_9060(%var_9062, %var_9063) /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64]) */
}

def @func_7566() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %311 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %307 = @func_5267() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %308 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %309 = %307.1;
    %310 = %308.0;
    (%309, %310)
  };
  %311() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_4501() -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
  %312 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %313 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  %314 = %312.0;
  (%313, %314)
}

def @func_1233() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) {
  %321 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) {
    %315 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
    %316 = %315.4;
    %317 = cast(%316, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %318 = reshape(%317, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %319 = @func_692(%318) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
    %320 = %319.0;
    (%316, %320)
  };
  %321() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */
}

def @func_2153() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  %322 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %323 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %324 = %322.2;
  (%323, %324)
}

def @func_7851() -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32]) {
  @func_7849() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(88), int32]) */
}

def @func_811() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %325 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %326 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %327 = %325.1;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %329 = %326.0;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %331 = reshape(%328, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %332 = reshape(%330, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %333 = @func_435(%331, %332) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %334 = %333.6;
  (%327, %329, %334)
}

def @func_8591(%var_8589: Tensor[(4, 1, 13), uint16], %var_8590: Tensor[(4, 7, 13), uint16]) -> (Tensor[(4, 7, 13), uint16], Tensor[(4, 1, 13), float32], Tensor[(16, 2), float64], Tensor[(4, 7, 13), float64]) {
  %344 = fn (%var_8556: Tensor[(4, 1, 13), uint16], %var_8557: Tensor[(4, 7, 13), uint16]) -> (Tensor[(4, 7, 13), uint16], Tensor[(4, 1, 13), float32], Tensor[(16, 2), float64], Tensor[(4, 7, 13), float64]) {
    %335 = cast(%var_8556, dtype="uint16") /* ty=Tensor[(4, 1, 13), uint16] */;
    %336 = cast(%var_8557, dtype="uint16") /* ty=Tensor[(4, 7, 13), uint16] */;
    %337 = cast(%var_8556, dtype="float32") /* ty=Tensor[(4, 1, 13), float32] */;
    %338 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
    %339 = cast(%var_8557, dtype="float64") /* ty=Tensor[(4, 7, 13), float64] */;
    %340 = left_shift(%335, %336) /* ty=Tensor[(4, 7, 13), uint16] */;
    %341 = sin(%337) /* ty=Tensor[(4, 1, 13), float32] */;
    %342 = %338.0;
    %343 = log(%339) /* ty=Tensor[(4, 7, 13), float64] */;
    (%340, %341, %342, %343)
  };
  %344(%var_8589, %var_8590) /* ty=(Tensor[(4, 7, 13), uint16], Tensor[(4, 1, 13), float32], Tensor[(16, 2), float64], Tensor[(4, 7, 13), float64]) */
}

def @func_3146(%var_3144: Tensor[(5, 14, 1), uint16], %var_3145: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) {
  @func_3142(%var_3144, %var_3145) /* ty=(Tensor[(5, 14, 5), uint16], Tensor[(14, 6, 16), float32], Tensor[(5, 14, 15), int16], Tensor[(5, 14, 5), uint16], Tensor[(5, 14, 5), bool], Tensor[(5, 14, 5), float32]) */
}

def @func_6070() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %348 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %345 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %346 = %345.0;
    %347 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
    (%346, %347)
  };
  %348() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_5001() -> (Tensor[(32), float64],) {
  %349 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %350 = %349.0;
  %351 = cast(%350, dtype="float64") /* ty=Tensor[(32), float64] */;
  %352 = log2(%351) /* ty=Tensor[(32), float64] */;
  (%352,)
}

def @func_2440(%var_2411: Tensor[(8, 2, 1), float64]) -> (Tensor[(8, 2, 1), float64],) {
  %353 = cast(%var_2411, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %354 = log(%353) /* ty=Tensor[(8, 2, 1), float64] */;
  (%354,)
}

def @func_5567() -> (Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) {
  @func_5565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_6950(%var_6938: Tensor[(585), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(585), float32]) {
  %355 = @func_5565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(3, 8, 13), float32], Tensor[(78, 4), float32], Tensor[(14, 6, 16), float32]) */;
  %356 = cast(%var_6938, dtype="float32") /* ty=Tensor[(585), float32] */;
  %357 = reshape(%356, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %358 = @func_1369(%357) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) */;
  %359 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
  %360 = %355.3;
  %361 = %358.1;
  (%359, %360, %361, %var_6938)
}

def @func_3239() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
  %367 = fn () -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
    %362 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
    %363 = @func_2533() /* ty=(Tensor[(880), int32],) */;
    %364 = %362.0;
    %365 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
    %366 = %363.0;
    (%364, %365, %366)
  };
  %367() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */
}

def @func_9244(%var_9227: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %368 = cast(%var_9227, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %369 = acos(%368) /* ty=Tensor[(16, 9, 13), float32] */;
  %370 = cast(%var_9227, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = @func_6821() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %375 = less_equal(%372, %373) /* ty=Tensor[(16, 9, 13), bool] */;
  %376 = %374.0;
  %377 = @func_2288() /* ty=Tensor[(14, 6, 16), float32] */;
  (%375, %376, %377)
}

def @func_1990(%var_1978: Tensor[(32), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  %378 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %379 = cast(%var_1978, dtype="float64") /* ty=Tensor[(32), float64] */;
  %380 = reshape(%379, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %381 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %382 = %381.4;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %384 = cast(%382, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %385 = reshape(%383, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %386 = reshape(%384, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %387 = @func_435(%385, %386) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %388 = %378.1;
  %389 = @func_655(%380) /* ty=Tensor[(16, 2), float64] */;
  %390 = %387.0;
  (%388, %389, %var_1978, %382, %390)
}

def @func_2506(%var_2485: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), float32],) {
  %391 = cast(%var_2485, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
  %392 = log2(%391) /* ty=Tensor[(2, 11, 5), float64] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
  %394 = sqrt(%393) /* ty=Tensor[(2, 11, 5), float32] */;
  (%394,)
}

def @func_2781() -> (Tensor[(14, 6, 16), float32],) {
  %395 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
  (%395,)
}

def @func_4691() -> Tensor[(16, 2), float64] {
  @func_4689() /* ty=Tensor[(16, 2), float64] */
}

def @func_813() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_1272() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %402 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %396 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
    %397 = %396.0;
    %398 = cast(%397, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %399 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %400 = asin(%398) /* ty=Tensor[(14, 6, 16), float32] */;
    %401 = %399.2;
    (%400, %401)
  };
  %402() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_5178() -> (Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_5176() /* ty=(Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_333() -> Tensor[(14, 6, 16), float32] {
  @func_331() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_1058(%var_1056: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
  @func_1055(%var_1056) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */
}

def @func_6261(%var_6220: Tensor[(13, 8, 5), float64], %var_6221: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(14, 6, 16), float32], Tensor[(13, 8, 5), float32]) {
  %403 = cast(%var_6221, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %404 = shape_of(%var_6220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%var_6220, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %407 = @func_5176() /* ty=(Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %408 = cast(%var_6221, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %409 = mod(%405, %406) /* ty=Tensor[(13, 8, 5), float64] */;
  %410 = %407.2;
  %411 = cosh(%408) /* ty=Tensor[(13, 8, 5), float32] */;
  (%409, %410, %411)
}

def @func_2045() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %420 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %412 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %415 = cast(%413, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %416 = reshape(%414, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %417 = reshape(%415, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %418 = @func_435(%416, %417) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %419 = %418.3;
    (%413, %419)
  };
  %420() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_4720(%var_4718: Tensor[(12, 14, 4), float64], %var_4719: Tensor[(1344), float32]) -> (Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) {
  %438 = fn (%var_4692: Tensor[(12, 14, 4), float64], %var_4710: Tensor[(1344), float32]) -> (Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) {
    %421 = cast(%var_4692, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
    %422 = atan(%421) /* ty=Tensor[(12, 14, 4), float64] */;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
    %424 = cast(%422, dtype="float32") /* ty=Tensor[(12, 14, 4), float32] */;
    %425 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 14, 4), float64] */, dtype="uint16") /* ty=Tensor[(12, 14, 4), uint16] */;
    %426 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%422, dtype="uint16") /* ty=Tensor[(12, 14, 4), uint16] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %429 = cast(%var_4710, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %430 = cast(%var_4710, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %431 = reshape(%429, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %432 = reshape(%430, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %433 = @func_435(%431, %432) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %434 = log10(%423) /* ty=Tensor[(12, 14, 4), float64] */;
    %435 = acos(%424) /* ty=Tensor[(12, 14, 4), float32] */;
    %436 = maximum(%427, %428) /* ty=Tensor[(12, 14, 4), uint16] */;
    %437 = %433.3;
    (%434, %435, %436, %437, %var_4710)
  };
  %438(%var_4718, %var_4719) /* ty=(Tensor[(12, 14, 4), float64], Tensor[(12, 14, 4), float32], Tensor[(12, 14, 4), uint16], Tensor[(14, 6, 16), float32], Tensor[(1344), float32]) */
}

def @func_2886() -> (Tensor[(14, 6, 16), float32],) {
  %441 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %439 = @func_2781() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %440 = %439.0;
    (%440,)
  };
  %441() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_4112() -> (Tensor[(14, 6, 16), float32],) {
  %443 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %442 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
    (%442,)
  };
  %443() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_2098() -> Tensor[(14, 6, 16), float32] {
  @func_2096() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_5058() -> (Tensor[(14, 6, 16), float32],) {
  %446 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %444 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %445 = %444.1;
    (%445,)
  };
  %446() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_1150() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) {
  %447 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %450 = exp(%449) /* ty=Tensor[(14, 6, 16), float64] */;
  %451 = cast(%448, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %455 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %456 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %457 = reshape(%456, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %458 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %459 = floor_mod(%453, %454) /* ty=Tensor[(14, 6, 16), float32] */;
  %460 = %455.2;
  %461 = @func_655(%457) /* ty=Tensor[(16, 2), float64] */;
  %462 = %458.2;
  (%459, %460, %461, meta[relay.Constant][14] /* ty=Tensor[(8, 4), float64] */, %462)
}

def @func_1818() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  %463 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %464 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %465 = reshape(%464, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %466 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %467 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
  %468 = %463.1;
  %469 = @func_655(%465) /* ty=Tensor[(16, 2), float64] */;
  %470 = %466.3;
  (%467, %468, %469, meta[relay.Constant][15] /* ty=Tensor[(4, 8), float64] */, %470)
}

def @func_4346(%var_4344: Tensor[(880), int32], %var_4345: Tensor[(32, 1), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32, 1), float64], Tensor[(14, 6, 16), bool], Tensor[(880), int32], Tensor[(14, 6, 16), float32]) {
  %488 = fn (%var_4268: Tensor[(880), int32], %var_4298: Tensor[(32, 1), float64]) -> (Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32, 1), float64], Tensor[(14, 6, 16), bool], Tensor[(880), int32], Tensor[(14, 6, 16), float32]) {
    %471 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
    %472 = cast(meta[relay.Constant][16] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
    %473 = cast(%var_4268, dtype="int32") /* ty=Tensor[(880), int32] */;
    %474 = reshape(%472, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
    %475 = reshape(%473, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
    %476 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %477 = cast(%var_4298, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
    %478 = reshape(%477, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
    %479 = @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */;
    %480 = @func_3444() /* ty=(Tensor[(16, 2), float64], Tensor[(880), int32]) */;
    %481 = %471.0;
    %482 = @func_1018(%474, %475) /* ty=Tensor[(11, 10, 8), float32] */;
    %483 = %476.0;
    %484 = @func_655(%478) /* ty=Tensor[(16, 2), float64] */;
    %485 = %479.0;
    %486 = %480.1;
    %487 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
    (%481, %482, meta[relay.Constant][16] /* ty=Tensor[(88), int32] */, %var_4268, %483, %484, %var_4298, %485, %486, %487)
  };
  %488(%var_4344, %var_4345) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32, 1), float64], Tensor[(14, 6, 16), bool], Tensor[(880), int32], Tensor[(14, 6, 16), float32]) */
}

def @func_655(%var_645: Tensor[(16, 2), float64]) -> Tensor[(16, 2), float64] {
  %489 = cast(%var_645, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  sigmoid(%489) /* ty=Tensor[(16, 2), float64] */
}

def @func_6104() -> Tensor[(14, 6, 16), bool] {
  %490 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
  %491 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%493, %494) /* ty=Tensor[(14, 6, 16), bool] */
}

def @main() -> Tensor[(14, 16, 12), float32] {
  %495 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  rsqrt(%495) /* ty=Tensor[(14, 16, 12), float32] */
}

def @func_8759() -> Tensor[(16, 2), float64] {
  @func_3613() /* ty=Tensor[(16, 2), float64] */
}

def @func_6989() -> Tensor[(14, 6, 16), float32] {
  @func_4646() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6887() -> (Tensor[(16, 2), float64],) {
  @func_6885() /* ty=(Tensor[(16, 2), float64],) */
}

def @func_7807() -> Tensor[(32), float64] {
  %497 = fn () -> Tensor[(32), float64] {
    %496 = @func_1889() /* ty=(Tensor[(32), float64],) */;
    %496.0
  };
  %497() /* ty=Tensor[(32), float64] */
}

def @func_9084() -> Tensor[(880), int32] {
  %499 = fn () -> Tensor[(880), int32] {
    %498 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %498.1
  };
  %499() /* ty=Tensor[(880), int32] */
}

def @func_9156() -> Tensor[(880), int32] {
  %500 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %500.0
}

def @func_3465() -> (Tensor[(14, 6, 16), float32],) {
  @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_4154() -> Tensor[(14, 6, 16), float32] {
  %501 = @func_4111() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %501.0
}

def @func_835() -> Tensor[(14, 6, 16), float32] {
  %503 = fn () -> Tensor[(14, 6, 16), float32] {
    %502 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %502.0
  };
  %503() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_5975() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %504 = @func_1889() /* ty=(Tensor[(32), float64],) */;
  %505 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %506 = %504.0;
  %507 = %505.0;
  (%506, %507)
}

def @func_6991() -> Tensor[(14, 6, 16), float32] {
  @func_6989() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_2657(%var_2655: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), uint16], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  @func_2654(%var_2655) /* ty=(Tensor[(14, 6, 16), uint16], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_2008(%var_2007: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) {
  %514 = fn (%var_2004: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) {
    %508 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %509 = cast(%var_2004, dtype="int32") /* ty=Tensor[(88), int32] */;
    %510 = reshape(%509, newshape=[88]) /* ty=Tensor[(88), int32] */;
    %511 = @func_1055(%510) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %512 = %508.0;
    %513 = %511.4;
    (%512, %513, %var_2004)
  };
  %514(%var_2007) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) */
}

def @func_4647() -> Tensor[(14, 6, 16), float32] {
  %515 = fn () -> Tensor[(14, 6, 16), float32] {
    @func_3477() /* ty=Tensor[(14, 6, 16), float32] */
  };
  %515() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_1891() -> (Tensor[(32), float64],) {
  @func_1889() /* ty=(Tensor[(32), float64],) */
}

def @func_8162(%var_8160: Tensor[(12, 15, 8), int8], %var_8161: Tensor[(12, 15, 8), int8]) -> Tensor[(12, 15, 8), int8] {
  %520 = fn (%var_8151: Tensor[(12, 15, 8), int8], %var_8152: Tensor[(12, 15, 8), int8]) -> Tensor[(12, 15, 8), int8] {
    %516 = cast(%var_8152, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
    %517 = shape_of(%var_8151, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_8151, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_and(%518, %519) /* ty=Tensor[(12, 15, 8), int8] */
  };
  %520(%var_8160, %var_8161) /* ty=Tensor[(12, 15, 8), int8] */
}

def @func_6528() -> (Tensor[(880), int32],) {
  %521 = @func_2533() /* ty=(Tensor[(880), int32],) */;
  %522 = %521.0;
  (%522,)
}

def @func_191() -> Tensor[(14, 6, 16), float32] {
  %523 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %524 = erf(%523) /* ty=Tensor[(14, 6, 16), float32] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  sinh(%525) /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4538() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  @func_4536() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_1952() -> (Tensor[(14, 6, 16), float64],) {
  %528 = fn () -> (Tensor[(14, 6, 16), float64],) {
    %526 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
    %527 = %526.2;
    (%527,)
  };
  %528() /* ty=(Tensor[(14, 6, 16), float64],) */
}

def @func_6741() -> (Tensor[(16, 2), float64],) {
  @func_6739() /* ty=(Tensor[(16, 2), float64],) */
}

def @func_5800(%var_5796: Tensor[(7, 11, 2), int64], %var_5797: Tensor[(7, 11, 2), int64], %var_5798: Tensor[(7, 11, 2), int64], %var_5799: Tensor[(896), uint8]) -> (Tensor[(7, 11, 2), bool], Tensor[(14, 6, 16), float32], Tensor[(16, 4, 14), uint16], Tensor[(896), uint8], Tensor[(7, 11, 2), bool], Tensor[(2, 44), int32], Tensor[(7, 11, 2), float64], Tensor[(24, 14), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(11, 10, 8), float32]) {
  %576 = fn (%var_5653: Tensor[(7, 11, 2), int64], %var_5654: Tensor[(7, 11, 2), int64], %var_5668: Tensor[(7, 11, 2), int64], %var_5693: Tensor[(896), uint8]) -> (Tensor[(7, 11, 2), bool], Tensor[(14, 6, 16), float32], Tensor[(16, 4, 14), uint16], Tensor[(896), uint8], Tensor[(7, 11, 2), bool], Tensor[(2, 44), int32], Tensor[(7, 11, 2), float64], Tensor[(24, 14), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(11, 10, 8), float32]) {
    %529 = cast(%var_5654, dtype="int64") /* ty=Tensor[(7, 11, 2), int64] */;
    %530 = shape_of(%var_5653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%var_5653, dtype="int64") /* ty=Tensor[(7, 11, 2), int64] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %533 = bitwise_xor(%531, %532) /* ty=Tensor[(7, 11, 2), int64] */;
    %534 = cast(%var_5668, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
    %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(%533, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %538 = @func_5482() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %539 = cast(%var_5693, dtype="uint8") /* ty=Tensor[(896), uint8] */;
    %540 = cast(%var_5693, dtype="uint8") /* ty=Tensor[(896), uint8] */;
    %541 = reshape(%539, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
    %542 = reshape(%540, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
    %543 = cast(%var_5654, dtype="float32") /* ty=Tensor[(7, 11, 2), float32] */;
    %544 = sigmoid(%543) /* ty=Tensor[(7, 11, 2), float32] */;
    %545 = cast(%var_5654, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %549 = cast(%533, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
    %550 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%544, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %553 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 44), int32] */, dtype="int32") /* ty=Tensor[(2, 44), int32] */;
    %554 = reshape(%553, newshape=[44, 2]) /* ty=Tensor[(44, 2), int32] */;
    %555 = @func_5360(%554) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) */;
    %556 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 44), int32] */, dtype="int32") /* ty=Tensor[(2, 44), int32] */;
    %557 = reshape(%556, newshape=[88]) /* ty=Tensor[(88), int32] */;
    %558 = @func_1055(%557) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %559 = %558.2;
    %560 = cast(%559, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    %561 = erf(%560) /* ty=Tensor[(11, 10, 8), float32] */;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    %563 = @func_2533() /* ty=(Tensor[(880), int32],) */;
    %564 = cast(%561, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    %565 = logical_and(%536, %537) /* ty=Tensor[(7, 11, 2), bool] */;
    %566 = %538.0;
    %567 = @func_5507(%541, %542) /* ty=Tensor[(16, 4, 14), uint16] */;
    %568 = logical_or(%547, %548) /* ty=Tensor[(7, 11, 2), bool] */;
    %569 = floor_mod(%551, %552) /* ty=Tensor[(7, 11, 2), float64] */;
    %570 = %555.4;
    %571 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
    %572 = @func_4646() /* ty=Tensor[(14, 6, 16), float32] */;
    %573 = sinh(%562) /* ty=Tensor[(11, 10, 8), float32] */;
    %574 = %563.0;
    %575 = cos(%564) /* ty=Tensor[(11, 10, 8), float32] */;
    (%565, %566, %567, %var_5693, %568, meta[relay.Constant][20] /* ty=Tensor[(2, 44), int32] */, %569, %570, %571, %572, %573, %574, %575)
  };
  %576(%var_5796, %var_5797, %var_5798, %var_5799) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(14, 6, 16), float32], Tensor[(16, 4, 14), uint16], Tensor[(896), uint8], Tensor[(7, 11, 2), bool], Tensor[(2, 44), int32], Tensor[(7, 11, 2), float64], Tensor[(24, 14), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(11, 10, 8), float32]) */
}

def @func_3575(%var_3553: Tensor[(4, 8), float64]) -> (Tensor[(14, 6, 16), bool], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(14, 6, 16), float64]) {
  %577 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %578 = cast(%var_3553, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %579 = reshape(%578, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %580 = @func_3238() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %581 = %577.2;
  %582 = @func_655(%579) /* ty=Tensor[(16, 2), float64] */;
  %583 = %580.0;
  (%581, %582, %var_3553, %583)
}

def @func_4637() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) {
  %584 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %585 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %586 = cast(meta[relay.Constant][21] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
  %587 = reshape(%586, newshape=[88]) /* ty=Tensor[(88), int32] */;
  %588 = @func_1055(%587) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
  %589 = %584.1;
  %590 = %585.0;
  %591 = %588.3;
  (%589, %590, %591, meta[relay.Constant][21] /* ty=Tensor[(88), int32] */)
}

def @func_9060(%var_9034: Tensor[(88), int32], %var_9035: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64]) {
  %592 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %593 = @func_3261() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %594 = cast(%var_9034, dtype="int32") /* ty=Tensor[(88), int32] */;
  %595 = cast(%var_9035, dtype="int32") /* ty=Tensor[(880), int32] */;
  %596 = reshape(%594, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %597 = reshape(%595, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %598 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %599 = @func_7565() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %600 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %601 = reshape(%600, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %602 = @func_1990(%601) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %603 = %592.0;
  %604 = %593.0;
  %605 = @func_1018(%596, %597) /* ty=Tensor[(11, 10, 8), float32] */;
  %606 = %598.0;
  %607 = %599.1;
  %608 = %602.0;
  (%603, %604, %605, %var_9034, %var_9035, %606, %607, %608, meta[relay.Constant][22] /* ty=Tensor[(32), float64] */)
}

def @func_5362(%var_5361: Tensor[(44, 2), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) {
  %621 = fn (%var_5349: Tensor[(44, 2), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) {
    %609 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %610 = cast(%var_5349, dtype="int32") /* ty=Tensor[(44, 2), int32] */;
    %611 = reshape(%610, newshape=[88]) /* ty=Tensor[(88), int32] */;
    %612 = @func_2006(%611) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(88), int32]) */;
    %613 = cast(meta[relay.Constant][23] /* ty=Tensor[(24, 14), int64] */, dtype="int64") /* ty=Tensor[(24, 14), int64] */;
    %614 = cast(meta[relay.Constant][24] /* ty=Tensor[(156, 2), float32] */, dtype="float32") /* ty=Tensor[(156, 2), float32] */;
    %615 = reshape(%613, newshape=[336]) /* ty=Tensor[(336), int64] */;
    %616 = reshape(%614, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
    %617 = @func_1771(%615, %616) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) */;
    %618 = %609.0;
    %619 = %612.0;
    %620 = %617.4;
    (%618, %619, %var_5349, %620, meta[relay.Constant][23] /* ty=Tensor[(24, 14), int64] */, meta[relay.Constant][24] /* ty=Tensor[(156, 2), float32] */)
  };
  %621(%var_5361) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(44, 2), int32], Tensor[(3, 8, 13), float32], Tensor[(24, 14), int64], Tensor[(156, 2), float32]) */
}

def @func_8469() -> (Tensor[(14, 6, 16), float64], Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_8467() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_6392() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %628 = fn () -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
    %622 = @func_1586() /* ty=Tensor[(14, 6, 16), float32] */;
    %623 = cast(%622, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
    %624 = @func_3613() /* ty=Tensor[(16, 2), float64] */;
    %625 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
    %626 = @func_4154() /* ty=Tensor[(14, 6, 16), float32] */;
    %627 = sigmoid(%623) /* ty=Tensor[(14, 6, 16), float64] */;
    (%624, %625, %626, %627)
  };
  %628() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */
}

def @func_8972() -> (Tensor[(16, 2), float64],) {
  %631 = fn () -> (Tensor[(16, 2), float64],) {
    %629 = @func_6739() /* ty=(Tensor[(16, 2), float64],) */;
    %630 = %629.0;
    (%630,)
  };
  %631() /* ty=(Tensor[(16, 2), float64],) */
}

def @func_6575() -> Tensor[(14, 6, 16), float32] {
  @func_6573() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_7980(%var_7933: Tensor[(32), float64]) -> (Tensor[(14, 12, 4), uint16], Tensor[(14, 6, 16), bool], Tensor[(32), float64], Tensor[(14, 6, 16), float64], Tensor[(2, 11, 5), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 12, 4), float64], Tensor[(12, 4, 7), float32]) {
  %632 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %633 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 12, 4), uint16] */, dtype="uint16") /* ty=Tensor[(14, 12, 4), uint16] */;
  %634 = cast(%var_7933, dtype="float64") /* ty=Tensor[(32), float64] */;
  %635 = reshape(%634, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %636 = @func_1990(%635) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %637 = @func_5622() /* ty=(Tensor[(110, 1), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %638 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %639 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %640 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 12, 4), uint16] */, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %641 = rsqrt(%640) /* ty=Tensor[(14, 12, 4), float64] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(14, 12, 4), float32] */;
  %643 = asin(%642) /* ty=Tensor[(14, 12, 4), float32] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %645 = @func_6475() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %646 = bitwise_xor(%632, %633) /* ty=Tensor[(14, 12, 4), uint16] */;
  %647 = %636.4;
  %648 = %637.2;
  %649 = %638.1;
  %650 = %639.2;
  %651 = exp(%644) /* ty=Tensor[(14, 12, 4), float64] */;
  %652 = %645.3;
  (%646, %647, %var_7933, %648, %649, %650, %651, %652)
}

def @func_1055(%var_1046: Tensor[(88), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) {
  %653 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %654 = cast(%var_1046, dtype="int32") /* ty=Tensor[(88), int32] */;
  %655 = cast(meta[relay.Constant][27] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
  %656 = reshape(%654, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
  %657 = reshape(%655, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
  %658 = %653.0;
  %659 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
  %660 = @func_1018(%656, %657) /* ty=Tensor[(11, 10, 8), float32] */;
  (%658, %659, %660, %var_1046, meta[relay.Constant][27] /* ty=Tensor[(880), int32] */)
}

def @func_7849() -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32]) {
  %661 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %662 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %663 = %661.1;
  %664 = %662.2;
  (%663, %664)
}

def @func_4639() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) {
  @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */
}

def @func_2608() -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) {
  @func_2606() /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) */
}

def @func_5432() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %665 = @func_5057() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %666 = %665.0;
  %667 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  (%666, %667)
}

def @func_5888() -> (Tensor[(14, 6, 16), float32],) {
  @func_5886() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_5484() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_5482() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_9200() -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
  %674 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) {
    %668 = cast(meta[relay.Constant][28] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %669 = reshape(%668, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
    %670 = @func_2506(%669) /* ty=(Tensor[(2, 11, 5), float32],) */;
    %671 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
    %672 = @func_9083() /* ty=Tensor[(880), int32] */;
    %673 = %670.0;
    (%671, %672, %673, meta[relay.Constant][28] /* ty=Tensor[(110), float64] */)
  };
  %674() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32], Tensor[(2, 11, 5), float32], Tensor[(110), float64]) */
}

def @func_1369(%var_1355: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) {
  %675 = cast(%var_1355, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %676 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %677 = sin(%675) /* ty=Tensor[(13, 15, 3), float32] */;
  %678 = %676.0;
  (%677, %678)
}

def @func_9398() -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(16, 2), float64]) {
  %685 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(16, 2), float64]) {
    %679 = @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %680 = @func_8080() /* ty=(Tensor[(88), int32],) */;
    %681 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
    %682 = %679.0;
    %683 = %680.0;
    %684 = %681.0;
    (%682, %683, %684)
  };
  %685() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(16, 2), float64]) */
}

def @func_1372(%var_1370: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) {
  @func_1369(%var_1370) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_2125() -> Tensor[(14, 6, 16), float64] {
  %686 = @func_978() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */;
  %686.0
}

def @func_6778() -> (Tensor[(14, 6, 16), float32],) {
  %688 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %687 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
    (%687,)
  };
  %688() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_2850() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) {
  @func_2848() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) */
}

def @func_5511(%var_5509: Tensor[(16, 4, 14), uint8], %var_5510: Tensor[(16, 4, 14), uint8]) -> Tensor[(16, 4, 14), uint16] {
  @func_5507(%var_5509, %var_5510) /* ty=Tensor[(16, 4, 14), uint16] */
}

def @func_8038() -> (Tensor[(14, 6, 16), float64],) {
  @func_8036() /* ty=(Tensor[(14, 6, 16), float64],) */
}

def @func_193() -> Tensor[(14, 6, 16), float32] {
  @func_191() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4395() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %689 = @func_3477() /* ty=Tensor[(14, 6, 16), float32] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %691 = reshape(%690, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %692 = @func_692(%691) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %693 = %692.1;
  (%689, %693)
}

def @func_6823() -> (Tensor[(14, 6, 16), float32],) {
  @func_6821() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_250(%var_247: Tensor[(12, 4, 7), int64], %var_248: Tensor[(12, 4, 7), int64], %var_249: Tensor[(12, 4, 7), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) {
  %717 = fn (%var_210: Tensor[(12, 4, 7), int64], %var_211: Tensor[(12, 4, 7), int64], %var_237: Tensor[(12, 4, 7), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) {
    %694 = cast(%var_210, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
    %695 = tan(%694) /* ty=Tensor[(12, 4, 7), float32] */;
    %696 = cast(%var_211, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
    %697 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %698 = cast(%var_210, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %700 = greater_equal(%698, %699) /* ty=Tensor[(12, 4, 7), bool] */;
    %701 = cast(%var_211, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
    %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%700, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %705 = maximum(%703, %704) /* ty=Tensor[(12, 4, 7), float64] */;
    %706 = cast(%705, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
    %707 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%695, dtype="bool") /* ty=Tensor[(12, 4, 7), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %710 = cast(%var_237, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
    %711 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%695, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %714 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
    %715 = not_equal(%708, %709) /* ty=Tensor[(12, 4, 7), bool] */;
    %716 = power(%712, %713) /* ty=Tensor[(12, 4, 7), float32] */;
    (%714, %715, %716)
  };
  %717(%var_247, %var_248, %var_249) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */
}

def @func_1442() -> Tensor[(14, 6, 16), float32] {
  @func_1440() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_2957(%var_2956: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(880), float64]) {
  %729 = fn (%var_2950: Tensor[(880), int32]) -> (Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(880), float64]) {
    %718 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
    %719 = cast(meta[relay.Constant][29] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
    %720 = reshape(%719, newshape=[88]) /* ty=Tensor[(88), int32] */;
    %721 = @func_1055(%720) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %722 = %721.4;
    %723 = cast(%var_2950, dtype="float64") /* ty=Tensor[(880), float64] */;
    %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(1), int32] */;
    %725 = cast(%722, dtype="float64") /* ty=Tensor[(880), float64] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?), float64] */;
    %727 = %718.0;
    %728 = divide(%725, %726) /* ty=Tensor[(880), float64] */;
    (%727, meta[relay.Constant][29] /* ty=Tensor[(88), int32] */, %728)
  };
  %729(%var_2956) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(880), float64]) */
}

def @func_1586() -> Tensor[(14, 6, 16), float32] {
  @func_331() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_878() -> (Tensor[(14, 6, 16), float32],) {
  @func_876() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_2273() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) {
  @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */
}

def @func_761(%var_758: Tensor[(15, 12, 5), uint8], %var_759: Tensor[(15, 12, 5), uint8], %var_760: Tensor[(1344), float32]) -> (Tensor[(15, 12, 5), uint8], Tensor[(14, 6, 16), float64], Tensor[(1344), float32]) {
  @func_756(%var_758, %var_759, %var_760) /* ty=(Tensor[(15, 12, 5), uint8], Tensor[(14, 6, 16), float64], Tensor[(1344), float32]) */
}

def @func_3981() -> Tensor[(14, 6, 16), float32] {
  @func_3979() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4087(%var_4084: Tensor[(7, 11, 14), int8], %var_4085: Tensor[(7, 11, 14), int8], %var_4086: Tensor[(880), int32]) -> (Tensor[(7, 11, 14), bool], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(14, 6, 16), int16], Tensor[(1344), float32], Tensor[(88), float32]) {
  %746 = fn (%var_4059: Tensor[(7, 11, 14), int8], %var_4060: Tensor[(7, 11, 14), int8], %var_4069: Tensor[(880), int32]) -> (Tensor[(7, 11, 14), bool], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(14, 6, 16), int16], Tensor[(1344), float32], Tensor[(88), float32]) {
    %730 = cast(%var_4060, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
    %731 = shape_of(%var_4059, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%var_4059, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %734 = cast(meta[relay.Constant][30] /* ty=Tensor[(88), int32] */, dtype="int32") /* ty=Tensor[(88), int32] */;
    %735 = cast(%var_4069, dtype="int32") /* ty=Tensor[(880), int32] */;
    %736 = reshape(%734, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), int32] */;
    %737 = reshape(%735, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int32] */;
    %738 = cast(meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %739 = reshape(%738, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %740 = @func_692(%739) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
    %741 = cast(meta[relay.Constant][30] /* ty=Tensor[(88), int32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %742 = less(%732, %733) /* ty=Tensor[(7, 11, 14), bool] */;
    %743 = @func_1018(%736, %737) /* ty=Tensor[(11, 10, 8), float32] */;
    %744 = %740.0;
    %745 = asinh(%741) /* ty=Tensor[(88), float32] */;
    (%742, %743, %var_4069, %744, meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */, %745)
  };
  %746(%var_4084, %var_4085, %var_4086) /* ty=(Tensor[(7, 11, 14), bool], Tensor[(11, 10, 8), float32], Tensor[(880), int32], Tensor[(14, 6, 16), int16], Tensor[(1344), float32], Tensor[(88), float32]) */
}

def @func_4670(%var_4669: Tensor[(3, 12, 9), int64]) -> (Tensor[(3, 12, 9), int64],) {
  %752 = fn (%var_4663: Tensor[(3, 12, 9), int64]) -> (Tensor[(3, 12, 9), int64],) {
    %747 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 12, 9), int64] */, dtype="int64") /* ty=Tensor[(3, 12, 9), int64] */;
    %748 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%var_4663, dtype="int64") /* ty=Tensor[(3, 12, 9), int64] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %751 = minimum(%749, %750) /* ty=Tensor[(3, 12, 9), int64] */;
    (%751,)
  };
  %752(%var_4669) /* ty=(Tensor[(3, 12, 9), int64],) */
}

def @func_9432() -> Tensor[(16, 2), float64] {
  %753 = fn () -> Tensor[(16, 2), float64] {
    @func_8759() /* ty=Tensor[(16, 2), float64] */
  };
  %753() /* ty=Tensor[(16, 2), float64] */
}

def @func_3578(%var_3576: Tensor[(4, 8), float64]) -> (Tensor[(14, 6, 16), bool], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(14, 6, 16), float64]) {
  @func_3575(%var_3576) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(14, 6, 16), float64]) */
}

def @func_6211() -> Tensor[(880), int32] {
  @func_6209() /* ty=Tensor[(880), int32] */
}

def @func_296() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4503() -> (Tensor[(14, 6, 16), float32], Tensor[(880), int32]) {
  @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */
}

def @func_5330() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) {
  %754 = @func_1271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %755 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %756 = @func_5176() /* ty=(Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %757 = %754.0;
  %758 = %755.0;
  %759 = %756.0;
  (%757, %758, %759)
}

def @func_2534() -> (Tensor[(880), int32],) {
  %762 = fn () -> (Tensor[(880), int32],) {
    %760 = @func_1580() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(11, 10, 8), float32], Tensor[(88), int32], Tensor[(880), int32]) */;
    %761 = %760.4;
    (%761,)
  };
  %762() /* ty=(Tensor[(880), int32],) */
}

def @func_6739() -> (Tensor[(16, 2), float64],) {
  %763 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
  %764 = %763.2;
  (%764,)
}

def @func_9297() -> (Tensor[(16, 2), float64],) {
  @func_9295() /* ty=(Tensor[(16, 2), float64],) */
}

def @func_7068() -> (Tensor[(14, 6, 16), float32],) {
  @func_7066() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_6573() -> Tensor[(14, 6, 16), float32] {
  %765 = @func_6069() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %765.1
}

def @func_480() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
  %776 = fn () -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) {
    %766 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
    %767 = cast(%766, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
    %768 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
    %769 = cast(%768, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %770 = sqrt(%767) /* ty=Tensor[(14, 6, 16), float64] */;
    %771 = cast(%770, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
    %772 = reshape(%769, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %773 = reshape(%771, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
    %774 = @func_435(%772, %773) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %775 = %774.2;
    (%770, %768, %775)
  };
  %776() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */
}

def @func_7983(%var_7981: Tensor[(32), float64]) -> (Tensor[(14, 12, 4), uint16], Tensor[(14, 6, 16), bool], Tensor[(32), float64], Tensor[(14, 6, 16), float64], Tensor[(2, 11, 5), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 12, 4), float64], Tensor[(12, 4, 7), float32]) {
  @func_7980(%var_7981) /* ty=(Tensor[(14, 12, 4), uint16], Tensor[(14, 6, 16), bool], Tensor[(32), float64], Tensor[(14, 6, 16), float64], Tensor[(2, 11, 5), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 12, 4), float64], Tensor[(12, 4, 7), float32]) */
}

def @func_658(%var_656: Tensor[(16, 2), float64]) -> Tensor[(16, 2), float64] {
  @func_655(%var_656) /* ty=Tensor[(16, 2), float64] */
}

def @func_8256() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  %777 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
  %778 = @func_5886() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %779 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %780 = @func_6475() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %781 = %777.0;
  %782 = %778.0;
  %783 = %779.0;
  %784 = %780.2;
  (%781, %782, %783, %784)
}

def @func_7095() -> Tensor[(8, 4), float64] {
  %786 = fn () -> Tensor[(8, 4), float64] {
    %785 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
    %785.3
  };
  %786() /* ty=Tensor[(8, 4), float64] */
}

def @func_7124() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %787 = @func_3717() /* ty=Tensor[(14, 6, 16), float32] */;
  %788 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  (%787, %788)
}

def @func_294() -> Tensor[(14, 6, 16), float32] {
  @func_191() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_8467() -> (Tensor[(14, 6, 16), float64], Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %789 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %790 = %789.0;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %792 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %793 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %794 = log(%791) /* ty=Tensor[(14, 6, 16), float64] */;
  %795 = %792.1;
  %796 = @func_6976() /* ty=Tensor[(14, 6, 16), float32] */;
  %797 = %793.1;
  (%794, %795, %796, %797)
}

def @func_2848() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64]) {
  %798 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %799 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %800 = %798.0;
  %801 = %799.0;
  (%800, %801)
}

def @func_2155() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */
}

def @func_2096() -> Tensor[(14, 6, 16), float32] {
  %802 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %802.1
}

def @func_8881(%var_8871: Tensor[(312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(8, 4), float64], Tensor[(3, 8, 13), float32], Tensor[(312), float32], Tensor[(112, 8), float32]) {
  %803 = @func_6821() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %804 = @func_6391() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %805 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
  %806 = cast(%var_8871, dtype="float32") /* ty=Tensor[(312), float32] */;
  %807 = reshape(%806, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
  %808 = cast(meta[relay.Constant][33] /* ty=Tensor[(112, 8), uint8] */, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
  %809 = sigmoid(%808) /* ty=Tensor[(112, 8), float64] */;
  %810 = cast(meta[relay.Constant][33] /* ty=Tensor[(112, 8), uint8] */, dtype="uint8") /* ty=Tensor[(112, 8), uint8] */;
  %811 = cast(meta[relay.Constant][33] /* ty=Tensor[(112, 8), uint8] */, dtype="uint8") /* ty=Tensor[(112, 8), uint8] */;
  %812 = reshape(%810, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %813 = reshape(%811, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), uint8] */;
  %814 = @func_5507(%812, %813) /* ty=Tensor[(16, 4, 14), uint16] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(16, 4, 14), float32] */;
  %816 = shape_of(%809, dtype="int32") /* ty=Tensor[(2), int32] */;
  %817 = cast(%809, dtype="float32") /* ty=Tensor[(112, 8), float32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %819 = %803.0;
  %820 = %804.3;
  %821 = %805.1;
  %822 = @func_7094() /* ty=Tensor[(8, 4), float64] */;
  %823 = @func_1380(%807) /* ty=Tensor[(3, 8, 13), float32] */;
  %824 = power(%817, %818) /* ty=Tensor[(112, 8), float32] */;
  (%819, %820, %821, %822, %823, %var_8871, %824)
}

def @func_6183(%var_6181: Tensor[(2, 11, 5), float32]) -> (Tensor[(16, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(14, 6, 16), float32]) {
  @func_6180(%var_6181) /* ty=(Tensor[(16, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(14, 6, 16), float32]) */
}

def @func_3262() -> (Tensor[(14, 6, 16), float32],) {
  %827 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %825 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %826 = %825.0;
    (%826,)
  };
  %827() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_1423(%var_1422: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), uint32],) {
  %835 = fn (%var_1392: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), uint32],) {
    %828 = cast(%var_1392, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
    %829 = asin(%828) /* ty=Tensor[(9, 9, 12), float32] */;
    %830 = cast(%var_1392, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
    %832 = cast(%829, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %834 = multiply(%832, %833) /* ty=Tensor[(9, 9, 12), uint32] */;
    (%834,)
  };
  %835(%var_1422) /* ty=(Tensor[(9, 9, 12), uint32],) */
}

def @func_7381() -> (Tensor[(14, 6, 16), float32], Tensor[(8, 2, 1), float64], Tensor[(8, 2), float64]) {
  %842 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(8, 2, 1), float64], Tensor[(8, 2), float64]) {
    %836 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
    %837 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
    %838 = reshape(%837, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
    %839 = @func_2440(%838) /* ty=(Tensor[(8, 2, 1), float64],) */;
    %840 = %836.4;
    %841 = %839.0;
    (%840, %841, meta[relay.Constant][34] /* ty=Tensor[(8, 2), float64] */)
  };
  %842() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(8, 2, 1), float64], Tensor[(8, 2), float64]) */
}

def @func_5977() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32]) {
  @func_5975() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32]) */
}

def @func_6053() -> Tensor[(14, 6, 16), float32] {
  @func_294() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_1774(%var_1772: Tensor[(336), int64], %var_1773: Tensor[(1, 312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) {
  %858 = fn (%var_1724: Tensor[(336), int64], %var_1761: Tensor[(1, 312), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) {
    %843 = @func_634() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %844 = cast(%var_1724, dtype="int64") /* ty=Tensor[(336), int64] */;
    %845 = cast(%var_1724, dtype="int64") /* ty=Tensor[(336), int64] */;
    %846 = cast(%var_1724, dtype="float32") /* ty=Tensor[(336), float32] */;
    %847 = reshape(%844, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %848 = reshape(%845, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %849 = reshape(%846, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
    %850 = @func_246(%847, %848, %849) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
    %851 = @func_479() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64]) */;
    %852 = cast(%var_1761, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
    %853 = reshape(%852, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), float32] */;
    %854 = %843.0;
    %855 = %850.2;
    %856 = %851.0;
    %857 = @func_1380(%853) /* ty=Tensor[(3, 8, 13), float32] */;
    (%854, %855, %var_1724, %856, %857, %var_1761)
  };
  %858(%var_1772, %var_1773) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float64], Tensor[(3, 8, 13), float32], Tensor[(1, 312), float32]) */
}

def @func_6711(%var_6710: Tensor[(9, 15, 16), float32]) -> Tensor[(9, 15, 16), float32] {
  %862 = fn (%var_6673: Tensor[(9, 15, 16), float32]) -> Tensor[(9, 15, 16), float32] {
    %859 = cast(%var_6673, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
    %860 = log(%859) /* ty=Tensor[(9, 15, 16), float32] */;
    %861 = cast(%860, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
    atanh(%861) /* ty=Tensor[(9, 15, 16), float32] */
  };
  %862(%var_6710) /* ty=Tensor[(9, 15, 16), float32] */
}

def @func_6885() -> (Tensor[(16, 2), float64],) {
  %863 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %864 = %863.1;
  (%864,)
}

def @func_6037() -> Tensor[(14, 6, 16), float32] {
  %866 = fn () -> Tensor[(14, 6, 16), float32] {
    %865 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %865.0
  };
  %866() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_5929() -> (Tensor[(14, 6, 16), float32],) {
  %869 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %867 = @func_3045() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %868 = %867.1;
    (%868,)
  };
  %869() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_1872() -> (Tensor[(14, 6, 16), float32],) {
  %871 = fn () -> (Tensor[(14, 6, 16), float32],) {
    %870 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
    (%870,)
  };
  %871() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_3463() -> (Tensor[(14, 6, 16), float32],) {
  %872 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %873 = %872.0;
  (%873,)
}

def @func_5912() -> (Tensor[(32), float64], Tensor[(2, 11, 5), float32]) {
  @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */
}

def @func_2290() -> Tensor[(14, 6, 16), float32] {
  @func_2288() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4156() -> Tensor[(14, 6, 16), float32] {
  @func_4154() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_6530() -> (Tensor[(880), int32],) {
  @func_6528() /* ty=(Tensor[(880), int32],) */
}

def @func_2288() -> Tensor[(14, 6, 16), float32] {
  %874 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %874.1
}

def @func_7915() -> (Tensor[(880), int32], Tensor[(32), float64]) {
  %879 = fn () -> (Tensor[(880), int32], Tensor[(32), float64]) {
    %875 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %876 = @func_7895() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %877 = %875.1;
    %878 = %876.0;
    (%877, %878)
  };
  %879() /* ty=(Tensor[(880), int32], Tensor[(32), float64]) */
}

def @func_4568() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %880 = @func_2885() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %881 = %880.0;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %883 = @func_2096() /* ty=Tensor[(14, 6, 16), float32] */;
  %884 = tan(%882) /* ty=Tensor[(14, 6, 16), float32] */;
  (%883, %884)
}

def @func_6634() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  %885 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %886 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %887 = %885.0;
  %888 = %886.2;
  (%887, %888)
}

def @func_5482() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %889 = @func_3331() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %890 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %891 = %889.0;
  %892 = %890.0;
  (%891, %892)
}

def @func_6475() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %893 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
  %896 = @func_1232() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), int16]) */;
  %897 = @func_3979() /* ty=Tensor[(14, 6, 16), float32] */;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %899 = cast(%894, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %900 = reshape(%898, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %901 = reshape(%899, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %902 = @func_435(%900, %901) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %903 = @func_4929() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %904 = %896.0;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %906 = reshape(%905, newshape=[14, 6, 16]) /* ty=Tensor[(14, 6, 16), float32] */;
  %907 = @func_692(%906) /* ty=(Tensor[(14, 6, 16), int16], Tensor[(14, 6, 16), float32]) */;
  %908 = rsqrt(%895) /* ty=Tensor[(14, 6, 16), float64] */;
  %909 = %902.4;
  %910 = @func_3871() /* ty=Tensor[(14, 6, 16), float32] */;
  %911 = %903.0;
  %912 = %907.1;
  (%908, %904, %897, %909, %910, %911, %912)
}

def @func_6636() -> (Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) {
  @func_6634() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */
}

def @func_8316(%var_8315: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
  %917 = fn (%var_8273: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
    %913 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
    %914 = shape_of(%var_8273, dtype="int32") /* ty=Tensor[(3), int32] */;
    %915 = cast(%var_8273, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
    %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%915, %916) /* ty=Tensor[(9, 6, 5), float64] */
  };
  %917(%var_8315) /* ty=Tensor[(9, 6, 5), float64] */
}

def @func_634() -> (Tensor[(14, 6, 16), float32],) {
  %918 = @func_534() /* ty=(Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) */;
  %919 = %918.1;
  (%919,)
}

def @func_6953(%var_6951: Tensor[(585), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(585), float32]) {
  @func_6950(%var_6951) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(585), float32]) */
}

def @func_5003() -> (Tensor[(32), float64],) {
  @func_5001() /* ty=(Tensor[(32), float64],) */
}

def @func_1820() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */
}

def @func_2509(%var_2507: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), float32],) {
  @func_2506(%var_2507) /* ty=(Tensor[(2, 11, 5), float32],) */
}

def @func_2606() -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(2, 11, 5), float32], Tensor[(110, 1), float64]) {
  %920 = @func_2271() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), bool]) */;
  %921 = @func_2044() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
  %922 = cast(meta[relay.Constant][36] /* ty=Tensor[(110, 1), float64] */, dtype="float64") /* ty=Tensor[(110, 1), float64] */;
  %923 = reshape(%922, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %924 = @func_2506(%923) /* ty=(Tensor[(2, 11, 5), float32],) */;
  %925 = %920.2;
  %926 = %921.0;
  %927 = %924.0;
  (%925, %926, %927, meta[relay.Constant][36] /* ty=Tensor[(110, 1), float64] */)
}

def @func_5176() -> (Tensor[(88), int32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %928 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %929 = @func_4374() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %930 = @func_3463() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %931 = %928.3;
  %932 = %929.0;
  %933 = %930.0;
  (%931, %932, %933)
}

def @func_7066() -> (Tensor[(14, 6, 16), float32],) {
  %934 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(14, 6, 16), float32] */;
  %936 = cosh(%935) /* ty=Tensor[(14, 6, 16), float32] */;
  (%936,)
}

def @func_4689() -> Tensor[(16, 2), float64] {
  %937 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %937.1
}

def @func_3872() -> Tensor[(14, 6, 16), float32] {
  %938 = fn () -> Tensor[(14, 6, 16), float32] {
    @func_191() /* ty=Tensor[(14, 6, 16), float32] */
  };
  %938() /* ty=Tensor[(14, 6, 16), float32] */
}

def @func_4536() -> (Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32]) {
  %939 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %940 = @func_3268() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %941 = %939.0;
  %942 = %940.0;
  %943 = @func_3717() /* ty=Tensor[(14, 6, 16), float32] */;
  (%941, %942, %943)
}

def @func_5268() -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %950 = fn () -> (Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %944 = @func_1818() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(4, 8), float64], Tensor[(32), float64]) */;
    %945 = @func_4395() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %946 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
    %947 = %944.4;
    %948 = %945.0;
    %949 = %946.0;
    (%947, %948, %949)
  };
  %950() /* ty=(Tensor[(32), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_8080() -> (Tensor[(88), int32],) {
  %951 = @func_5330() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(88), int32]) */;
  %952 = %951.2;
  (%952,)
}

def @func_6656() -> (Tensor[(14, 6, 16), float32],) {
  @func_6654() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_5434() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_5432() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_6849() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %957 = fn () -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %953 = @func_811() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */;
    %954 = @func_4501() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(880), int32]) */;
    %955 = %953.2;
    %956 = %954.0;
    (%955, %956)
  };
  %957() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_438(%var_436: Tensor[(14, 6, 16), float32], %var_437: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %986 = fn (%var_394: Tensor[(14, 6, 16), float32], %var_412: Tensor[(14, 6, 16), float32]) -> (Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
    %958 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
    %959 = cast(%var_394, dtype="uint8") /* ty=Tensor[(14, 6, 16), uint8] */;
    %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %961 = cast(%958, dtype="uint8") /* ty=Tensor[(14, 6, 16), uint8] */;
    %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %963 = bitwise_and(%961, %962) /* ty=Tensor[(14, 6, 16), uint8] */;
    %964 = cast(%var_394, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
    %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %966 = cast(%963, dtype="bool") /* ty=Tensor[(14, 6, 16), bool] */;
    %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %968 = cast(%var_412, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
    %969 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%958, dtype="float64") /* ty=Tensor[(14, 6, 16), float64] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %972 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %973 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %974 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), int64] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %975 = reshape(%972, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %976 = reshape(%973, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), int64] */;
    %977 = reshape(%974, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float32] */;
    %978 = @func_246(%975, %976, %977) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), bool], Tensor[(12, 4, 7), float32]) */;
    %979 = less(%966, %967) /* ty=Tensor[(14, 6, 16), bool] */;
    %980 = @func_191() /* ty=Tensor[(14, 6, 16), float32] */;
    %981 = add(%970, %971) /* ty=Tensor[(14, 6, 16), float64] */;
    %982 = @func_331() /* ty=Tensor[(14, 6, 16), float32] */;
    %983 = %978.2;
    %984 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
    %985 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
    (%979, %980, %981, %982, %983, meta[relay.Constant][37] /* ty=Tensor[(336), int64] */, %984, %985)
  };
  %986(%var_436, %var_437) /* ty=(Tensor[(14, 6, 16), bool], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float64], Tensor[(14, 6, 16), float32], Tensor[(12, 4, 7), float32], Tensor[(336), int64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_6654() -> (Tensor[(14, 6, 16), float32],) {
  %987 = @func_1871() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %988 = %987.0;
  (%988,)
}

def @func_6180(%var_6162: Tensor[(2, 11, 5), float32]) -> (Tensor[(16, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(14, 6, 16), float32]) {
  %989 = @func_4637() /* ty=(Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(88), int32], Tensor[(88), int32]) */;
  %990 = @func_5910() /* ty=(Tensor[(32), float64], Tensor[(2, 11, 5), float32]) */;
  %991 = %990.1;
  %992 = cast(%var_6162, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%991, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %996 = @func_5928() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %997 = %989.0;
  %998 = minimum(%994, %995) /* ty=Tensor[(2, 11, 5), int64] */;
  %999 = %996.0;
  (%997, %998, %999)
}

def @func_2783() -> (Tensor[(14, 6, 16), float32],) {
  @func_2781() /* ty=(Tensor[(14, 6, 16), float32],) */
}

def @func_2127() -> Tensor[(14, 6, 16), float64] {
  @func_2125() /* ty=Tensor[(14, 6, 16), float64] */
}

def @func_6132(%var_6113: Tensor[(2, 5, 14), float32], %var_6122: Tensor[(2, 5, 14), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(2, 5, 14), float64]) {
  %1000 = cast(%var_6113, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %1001 = asin(%1000) /* ty=Tensor[(2, 5, 14), float32] */;
  %1002 = cast(%var_6122, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1004 = cast(%1001, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1006 = mod(%1004, %1005) /* ty=Tensor[(2, 5, 14), float64] */;
  %1007 = cast(%1006, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %1008 = shape_of(%var_6113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%var_6113, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1011 = @func_294() /* ty=Tensor[(14, 6, 16), float32] */;
  %1012 = floor_divide(%1009, %1010) /* ty=Tensor[(2, 5, 14), float64] */;
  (%1011, %1012)
}

def @func_3045() -> (Tensor[(16, 2), float64], Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  %1013 = @func_2153() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64]) */;
  %1014 = @func_1150() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32], Tensor[(16, 2), float64], Tensor[(8, 4), float64], Tensor[(14, 6, 16), float32]) */;
  %1015 = @func_2781() /* ty=(Tensor[(14, 6, 16), float32],) */;
  %1016 = %1013.1;
  %1017 = %1014.1;
  %1018 = %1015.0;
  (%1016, %1017, %1018)
}

def @func_4397() -> (Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) {
  @func_4395() /* ty=(Tensor[(14, 6, 16), float32], Tensor[(14, 6, 16), float32]) */
}

def @func_8036() -> (Tensor[(14, 6, 16), float64],) {
  %1019 = @func_1951() /* ty=(Tensor[(14, 6, 16), float64],) */;
  %1020 = %1019.0;
  (%1020,)
}

def @func_6136(%var_6134: Tensor[(2, 5, 14), float32], %var_6135: Tensor[(2, 5, 14), float32]) -> (Tensor[(14, 6, 16), float32], Tensor[(2, 5, 14), float64]) {
  @func_6132(%var_6134, %var_6135) /* ty=(Tensor[(14, 6, 16), float32], Tensor[(2, 5, 14), float64]) */
}

def @func_7758(%var_7749: Tensor[(12, 13, 9), bool], %var_7750: Tensor[(12, 13, 9), bool]) -> (Tensor[(12, 13, 9), bool],) {
  %1021 = cast(%var_7750, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %1022 = shape_of(%var_7749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1023 = cast(%var_7749, dtype="bool") /* ty=Tensor[(12, 13, 9), bool] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1025 = logical_and(%1023, %1024) /* ty=Tensor[(12, 13, 9), bool] */;
  (%1025,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen20/build/output.py:3337: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen20/build/output.py:3342: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x = (%l, %r);
  let %x1 = match (%x) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      let %x2 = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          let %x5 = %x4();
          %x5
        },
        Zero(%x6: fn () -> T) => {
          let %x7 = %x6();
          %x7
        },
      };
      let %x8 = match (%r) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          let %x11 = %x10();
          %x11
        },
        Zero(%x12: fn () -> T) => {
          let %x13 = %x12();
          %x13
        },
      };
      let %x14 = %multiply(%x2, %x8);
      let %x15 = Raw(%x14);
      %x15
    },
  };
  %x1
}

def @main() -> (Tensor[(14, 16, 12), float32], ()) {
  let %x16 = fn () -> (GradCell[Tensor[(14, 16, 12), float32]], ()) {
    let %x17 = meta[relay.Constant][0] /* ty=Tensor[(14, 16, 12), float32] */;
    let %x18 = Raw(%x17);
    let %x19 = fn () -> Tensor[(14, 16, 12), float32] {
      let %x20 = meta[relay.Constant][1];
      %x20
    };
    let %x21 = One(%x19);
    let %x22 = ();
    let %x23 = (%x18, %x22);
    %x23
  };
  let %x24 = meta[relay.Constant][0] /* ty=Tensor[(14, 16, 12), float32] */;
  let %x25 = Raw(%x24);
  let %x26 = fn () -> Tensor[(14, 16, 12), float32] {
    let %x27 = meta[relay.Constant][2];
    %x27
  };
  let %x28 = One(%x26);
  let %x29 = ();
  let %x30 = (%x25, %x29);
  let %x31 = ();
  let %x32 = (%x24, %x31);
  %x32
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x33 = match (%g) {
    Raw(%x34: T) => {
      %x34
    },
    One(%x35: fn () -> T) => {
      let %x36 = %x35();
      %x36
    },
    Zero(%x37: fn () -> T) => {
      let %x38 = %x37();
      %x38
    },
  };
  %x33
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x39 = (%l1, %r1);
  let %x40 = match (%x39) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      let %x41 = match (%l1) {
        Raw(%x42: T) => {
          %x42
        },
        One(%x43: fn () -> T) => {
          let %x44 = %x43();
          %x44
        },
        Zero(%x45: fn () -> T) => {
          let %x46 = %x45();
          %x46
        },
      };
      let %x47 = match (%r1) {
        Raw(%x48: T) => {
          %x48
        },
        One(%x49: fn () -> T) => {
          let %x50 = %x49();
          %x50
        },
        Zero(%x51: fn () -> T) => {
          let %x52 = %x51();
          %x52
        },
      };
      let %x53 = %add(%x41, %x47);
      let %x54 = Raw(%x53);
      %x54
    },
  };
  %x40
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen20/build/output.py", line 3366, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  27: TVMFuncCall
  26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  25: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  24: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  23: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  22: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  21: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  20: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  19: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  18: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  17: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  16: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  15: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  11: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  10: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  9: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
