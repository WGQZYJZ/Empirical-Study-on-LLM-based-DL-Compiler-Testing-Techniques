==========mod==========
#[version = "0.0.5"]
def @func_2094() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) {
  %0 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %3 = reshape(%2, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %4 = @func_941(%3) /* ty=Tensor[(7, 2, 16), uint64] */;
  (%1, %4)
}

def @func_13997() -> Tensor[(7, 2, 16), float32] {
  @func_12164() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_7587() -> (Tensor[(7, 2, 16), float32],) {
  %5 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %6 = %5.0;
  (%6,)
}

def @func_767(%var_760: int32) -> (Tensor[(12, 9, 13), int32],) {
  %7 = cast(%var_760, dtype="int32") /* ty=int32 */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 9, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 9, 13), int32] */;
  %9 = left_shift(%7, %8) /* ty=Tensor[(12, 9, 13), int32] */;
  (%9,)
}

def @func_8958() -> (Tensor[(7, 2, 16), float32],) {
  %10 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_5416() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %12 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %13 = @func_1805() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %14 = %12.0;
  %15 = %13.0;
  (%14, %15)
}

def @func_11297() -> Tensor[(7, 2, 16), float32] {
  @func_4183() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_9855() -> (Tensor[(12, 9, 13), float32],) {
  %16 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %17 = %16.0;
  (%17,)
}

def @func_10482() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
  %18 = @func_8543() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
  %19 = @func_7901() /* ty=Tensor[(7, 2, 16), bool] */;
  %20 = %18.1;
  (%19, %20)
}

def @func_3613(%var_3604: Tensor[(3, 11, 14), int8]) -> Tensor[(3, 11, 14), int8] {
  %21 = cast(%var_3604, dtype="int8") /* ty=Tensor[(3, 11, 14), int8] */;
  %22 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 14), int8] */, dtype="int8") /* ty=Tensor[(3, 11, 14), int8] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%23, %24) /* ty=Tensor[(3, 11, 14), int8] */
}

def @func_9136() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(1, 22), float32]) {
  %25 = @func_5504() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) */;
  %26 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
  %28 = reshape(%27, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %29 = @func_7687(%28) /* ty=(Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) */;
  %30 = %25.1;
  %31 = %26.0;
  %32 = %29.1;
  (%30, %31, %32, meta[relay.Constant][2] /* ty=Tensor[(1, 22), float32] */)
}

def @func_602() -> (Tensor[(7, 2, 16), float32],) {
  %33 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  (%33,)
}

def @func_10625() -> Tensor[(7, 2, 16), float32] {
  %34 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %34.0
}

def @func_6419() -> Tensor[(7, 2, 16), float64] {
  %35 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %35.0
}

def @func_896() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %36 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %37 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %38 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %39 = %36.0;
  %40 = %37.0;
  (%38, %39, %40)
}

def @func_1613() -> (Tensor[(7, 2, 16), float64],) {
  %41 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %44 = log2(%43) /* ty=Tensor[(7, 2, 16), float64] */;
  (%44,)
}

def @func_1189() -> (Tensor[(7, 2, 16), float32],) {
  %45 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %46 = %45.0;
  (%46,)
}

def @func_1383() -> Tensor[(7, 2, 16), float32] {
  %47 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %47.0
}

def @func_10111() -> (Tensor[(12, 9, 13), float32],) {
  %48 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %49 = %48.0;
  (%49,)
}

def @func_13357() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %50 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %51 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %52 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %53 = %50.0;
  %54 = %51.0;
  %55 = %52.0;
  (%53, %54, %55)
}

def @func_12423() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %56 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  %57 = @func_9170() /* ty=Tensor[(7, 2, 16), float64] */;
  (%56, %57)
}

def @func_10576() -> Tensor[(7, 2, 16), float32] {
  %58 = @func_6170() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %58.0
}

def @func_7281(%var_7278: Tensor[(13, 55), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(13, 55), float64]) {
  %59 = cast(%var_7278, dtype="float64") /* ty=Tensor[(13, 55), float64] */;
  %60 = cast(%var_7278, dtype="float64") /* ty=Tensor[(13, 55), float64] */;
  %61 = reshape(%59, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
  %62 = reshape(%60, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
  %63 = @func_2418(%61, %62) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) */;
  %64 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %65 = %63.1;
  (%64, %65, %var_7278)
}

def @func_7828(%var_7818: Tensor[(8, 4, 9), int8]) -> (Tensor[(8, 4, 9), int8],) {
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 4, 9), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
  %67 = shape_of(%var_7818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_7818, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %70 = add(%68, %69) /* ty=Tensor[(8, 4, 9), int8] */;
  (%70,)
}

def @func_7650() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %71 = @func_3555() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %72 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
  %73 = %71.1;
  %74 = %72.4;
  (%73, %74)
}

def @func_12476(%var_12461: Tensor[(9, 13, 3), float64]) -> (Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) {
  %75 = cast(%var_12461, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
  %76 = sigmoid(%75) /* ty=Tensor[(9, 13, 3), float64] */;
  %77 = cast(%76, dtype="bool") /* ty=Tensor[(9, 13, 3), bool] */;
  %78 = shape_of(%var_12461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_12461, dtype="bool") /* ty=Tensor[(9, 13, 3), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = @func_10302() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %82 = logical_or(%79, %80) /* ty=Tensor[(9, 13, 3), bool] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_4183() -> Tensor[(7, 2, 16), float32] {
  %84 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
  %84.1
}

def @func_8135() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
  %85 = @func_7811() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
  %86 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %87 = %85.1;
  %88 = %86.0;
  (%87, %88)
}

def @func_8285() -> (Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %89 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
  %90 = @func_896() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %91 = @func_5995() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %92 = %89.3;
  %93 = %90.1;
  %94 = %91.2;
  (%92, %93, %94)
}

def @func_2819() -> (Tensor[(7, 2, 16), float32],) {
  %95 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %96 = %95.0;
  (%96,)
}

def @func_8092(%var_8067: Tensor[(13, 11, 4), float32], %var_8068: Tensor[(13, 11, 4), float32]) -> (Tensor[(13, 11, 4), float32], Tensor[(13, 11, 4), float32], Tensor[(7, 2, 16), float32]) {
  %97 = cast(%var_8068, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %98 = shape_of(%var_8067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_8067, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %101 = cast(%var_8067, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %102 = @func_5067() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %103 = mod(%99, %100) /* ty=Tensor[(13, 11, 4), float32] */;
  %104 = acos(%101) /* ty=Tensor[(13, 11, 4), float32] */;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_12164() -> Tensor[(7, 2, 16), float32] {
  %106 = @func_10482() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) */;
  %106.1
}

def @func_9151() -> Tensor[(7, 2, 16), float32] {
  %107 = @func_8285() /* ty=(Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %107.1
}

def @func_11323(%var_11305: Tensor[(6, 9, 14), int64]) -> (Tensor[(6, 9, 14), int64], Tensor[(7, 2, 16), float32]) {
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 9, 14), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 14), int64] */;
  %109 = shape_of(%var_11305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_11305, dtype="int64") /* ty=Tensor[(6, 9, 14), int64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %112 = @func_8285() /* ty=(Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %113 = bitwise_and(%110, %111) /* ty=Tensor[(6, 9, 14), int64] */;
  %114 = %112.1;
  (%113, %114)
}

def @func_6170() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %115 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %116 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %117 = %115.3;
  %118 = %116.1;
  (%117, %118)
}

def @func_1805() -> (Tensor[(7, 2, 16), float32],) {
  %119 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %120 = %119.0;
  (%120,)
}

def @func_13133() -> (Tensor[(7, 2, 16), float32],) {
  %121 = @func_7025() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %122 = %121.0;
  (%122,)
}

def @func_13637() -> (Tensor[(1, 210), int32],) {
  %123 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
  %124 = %123.3;
  (%124,)
}

def @func_738() -> (Tensor[(7, 2, 16), float32],) {
  %125 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %126 = %125.0;
  (%126,)
}

def @func_12580(%var_12572: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), float32],) {
  %127 = cast(%var_12572, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %128 = tan(%127) /* ty=Tensor[(7, 2, 2), float32] */;
  (%128,)
}

def @func_1518(%var_1506: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, 1, 4), float32],) {
  %129 = cast(%var_1506, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %130 = atan(%129) /* ty=Tensor[(14, 1, 4), float32] */;
  (%130,)
}

def @func_10081() -> (Tensor[(7, 2, 16), float32],) {
  %131 = @func_8046() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %132 = %131.0;
  (%132,)
}

def @func_2391(%var_2372: Tensor[(16, 9, 16), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) {
  %133 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %134 = cast(%var_2372, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %135 = atanh(%134) /* ty=Tensor[(16, 9, 16), float32] */;
  %136 = cast(%var_2372, dtype="int8") /* ty=Tensor[(16, 9, 16), int8] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="int8") /* ty=Tensor[(16, 9, 16), int8] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %140 = %133.0;
  %141 = maximum(%138, %139) /* ty=Tensor[(16, 9, 16), int8] */;
  (%140, %141)
}

def @func_1032() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %142 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %143 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %144 = %142.0;
  %145 = %143.0;
  (%144, %145)
}

def @func_4150() -> (Tensor[(7, 2, 16), bool],) {
  %146 = @func_3378() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %147 = %146.0;
  (%147,)
}

def @func_10261() -> (Tensor[(7, 2, 16), float32],) {
  %148 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %149 = %148.0;
  (%149,)
}

def @func_11845() -> (Tensor[(3, 7, 10), float32], Tensor[(7, 2, 16), float32]) {
  %150 = @func_5243() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
  %151 = %150.2;
  %152 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
  (%151, %152)
}

def @func_13297() -> (Tensor[(7, 2, 16), float64],) {
  %153 = @func_9161() /* ty=Tensor[(7, 2, 16), float64] */;
  (%153,)
}

def @func_5717() -> (Tensor[(7, 2, 16), bool],) {
  %154 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %155 = %154.0;
  (%155,)
}

def @func_13378() -> (Tensor[(7, 2, 16), float32],) {
  %156 = @func_7025() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %157 = %156.0;
  (%157,)
}

def @func_12900() -> (Tensor[(7, 2, 16), float32], Tensor[(4, 12, 15), float32], Tensor[(720), float32], Tensor[(7, 2, 16), float32]) {
  %158 = @func_10410() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %159 = cast(meta[relay.Constant][5] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %160 = reshape(%159, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %161 = @func_5798(%160) /* ty=(Tensor[(4, 12, 15), float32],) */;
  %162 = %158.0;
  %163 = %161.0;
  %164 = @func_9986() /* ty=Tensor[(7, 2, 16), float32] */;
  (%162, %163, meta[relay.Constant][5] /* ty=Tensor[(720), float32] */, %164)
}

def @func_1096() -> Tensor[(7, 2, 16), float32] {
  %165 = @func_896() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %165.2
}

def @func_4257() -> Tensor[(7, 2, 16), float32] {
  %166 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %166.0
}

def @func_2505() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) {
  %167 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %168 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %169 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %170 = %167.0;
  %171 = %168.0;
  %172 = %169.2;
  (%170, %171, %172)
}

def @func_10270() -> (Tensor[(12, 9, 13), float32],) {
  %173 = @func_9855() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %174 = %173.0;
  (%174,)
}

def @func_5858() -> (Tensor[(7, 2, 16), float32],) {
  %175 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %176 = %175.0;
  (%176,)
}

def @func_7687(%var_7670: Tensor[(11, 2), float32]) -> (Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) {
  %177 = cast(%var_7670, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %178 = @func_3378() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %179 = asinh(%177) /* ty=Tensor[(11, 2), float32] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_3169(%var_3163: Tensor[(210), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
  %181 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %184 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %185 = cast(%var_3163, dtype="float32") /* ty=Tensor[(210), float32] */;
  %186 = reshape(%185, newshape=[3, 7, 10]) /* ty=Tensor[(3, 7, 10), float32] */;
  %187 = @func_2215(%186) /* ty=(Tensor[(3, 7, 10), float32],) */;
  %188 = tan(%183) /* ty=Tensor[(7, 2, 16), float64] */;
  %189 = %184.0;
  %190 = %187.0;
  (%188, %189, %190, %var_3163)
}

def @func_7811() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %191 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %192 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %193 = %191.1;
  %194 = %192.0;
  (%193, %194)
}

def @func_11715(%var_11692: Tensor[(715), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(715), float64], Tensor[(7, 2, 16), float64]) {
  %195 = @func_5874() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %196 = cast(%var_11692, dtype="float64") /* ty=Tensor[(715), float64] */;
  %197 = cast(%var_11692, dtype="float64") /* ty=Tensor[(715), float64] */;
  %198 = reshape(%196, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
  %199 = reshape(%197, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
  %200 = @func_2418(%198, %199) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) */;
  %201 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %202 = %195.0;
  %203 = %200.1;
  %204 = %201.0;
  (%202, %203, %var_11692, %204)
}

def @func_11662() -> Tensor[(7, 2, 16), uint64] {
  %205 = @func_7458() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) */;
  %205.1
}

def @func_12003() -> (Tensor[(7, 2, 16), float32],) {
  %206 = @func_8958() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %207 = %206.0;
  (%207,)
}

def @func_4856(%var_4853: Tensor[(672), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) {
  %208 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %209 = cast(%var_4853, dtype="float64") /* ty=Tensor[(672), float64] */;
  %210 = reshape(%209, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float64] */;
  %211 = @func_4321(%210) /* ty=(Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) */;
  %212 = %208.0;
  %213 = %211.0;
  (%212, %213, %var_4853)
}

def @func_308() -> Tensor[(7, 2, 16), float32] {
  %214 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %214.0
}

def @func_8339() -> (Tensor[(10, 9, 2), int64],) {
  %215 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %216 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(10, 9, 2), int64] */;
  %217 = minimum(%215, %216) /* ty=Tensor[(10, 9, 2), int64] */;
  (%217,)
}

def @func_11124(%var_11112: Tensor[(6, 2, 14), float32], %var_11113: Tensor[(6, 2, 14), float32]) -> (Tensor[(6, 2, 14), bool],) {
  %218 = cast(%var_11113, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
  %219 = shape_of(%var_11112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_11112, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = less(%220, %221) /* ty=Tensor[(6, 2, 14), bool] */;
  (%222,)
}

def @func_8996(%var_8977: Tensor[(13, 1, 7), int64]) -> (Tensor[(13, 10, 7), int64], Tensor[(7, 2, 16), float32], Tensor[(13, 1, 7), float64]) {
  %223 = cast(%var_8977, dtype="int64") /* ty=Tensor[(13, 1, 7), int64] */;
  %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 10, 7), int64] */, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %225 = cast(%var_8977, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
  %226 = minimum(%223, %224) /* ty=Tensor[(13, 10, 7), int64] */;
  %227 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
  %228 = sin(%225) /* ty=Tensor[(13, 1, 7), float64] */;
  (%226, %227, %228)
}

def @func_11938() -> (Tensor[(7, 2, 16), float32],) {
  %229 = @func_11395() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %230 = %229.0;
  (%230,)
}

def @func_7544() -> Tensor[(7, 2, 16), float32] {
  %231 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %231.0
}

def @func_5035() -> (Tensor[(7, 2, 16), float64],) {
  %232 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%232,)
}

def @func_134() -> (Tensor[(7, 2, 16), float32],) {
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %234 = sigmoid(%233) /* ty=Tensor[(7, 2, 16), float32] */;
  (%234,)
}

def @func_7025() -> (Tensor[(7, 2, 16), float32],) {
  %235 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  (%235,)
}

def @func_11812() -> (Tensor[(1, 3, 3), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(8, 7, 4), bool], Tensor[(28, 1), bool]) {
  %236 = @func_9437() /* ty=(Tensor[(1, 3, 3), float32],) */;
  %237 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %238 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %239 = @func_6496() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) */;
  %240 = cast(meta[relay.Constant][9] /* ty=Tensor[(28, 1), bool] */, dtype="bool") /* ty=Tensor[(28, 1), bool] */;
  %241 = %238.1;
  %242 = cast(%241, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %243 = reshape(%240, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), bool] */;
  %244 = reshape(%242, newshape=[8, 7, 4]) /* ty=Tensor[(8, 7, 4), bool] */;
  %245 = @func_4033(%243, %244) /* ty=(Tensor[(8, 7, 4), bool],) */;
  %246 = %236.0;
  %247 = %237.0;
  %248 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
  %249 = %239.2;
  %250 = @func_5941() /* ty=Tensor[(7, 2, 16), float32] */;
  %251 = %245.0;
  (%246, %247, %248, %241, %249, %250, %251, meta[relay.Constant][9] /* ty=Tensor[(28, 1), bool] */)
}

def @func_344() -> (Tensor[(7, 2, 16), float32],) {
  %252 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  (%252,)
}

def @func_1247() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %253 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %254 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %255 = %253.0;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %257 = reshape(%256, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %258 = %254.1;
  %259 = @func_941(%257) /* ty=Tensor[(7, 2, 16), uint64] */;
  %260 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %261 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  (%255, %258, %259, %260, %261)
}

def @func_2805() -> (Tensor[(7, 2, 16), float32],) {
  %262 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %263 = %262.0;
  (%263,)
}

def @func_2418(%var_2398: Tensor[(11, 13, 5), float64], %var_2399: Tensor[(11, 13, 5), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) {
  %264 = cast(%var_2399, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %265 = shape_of(%var_2398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%var_2398, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %268 = add(%266, %267) /* ty=Tensor[(11, 13, 5), float64] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %270 = sqrt(%269) /* ty=Tensor[(11, 13, 5), float32] */;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %272 = cast(%var_2398, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %273 = log10(%271) /* ty=Tensor[(11, 13, 5), float64] */;
  %274 = asinh(%272) /* ty=Tensor[(11, 13, 5), float64] */;
  (%273, %274)
}

def @func_8225() -> Tensor[(7, 2, 16), float32] {
  %275 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %275.0
}

def @func_2984() -> Tensor[(3, 16, 14), float64] {
  %276 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %277 = rsqrt(%276) /* ty=Tensor[(3, 16, 14), float32] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %279 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(3, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%280, %281) /* ty=Tensor[(3, 16, 14), float64] */
}

def @func_1320() -> Tensor[(7, 2, 16), float32] {
  %282 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %282.1
}

def @func_10308() -> (Tensor[(3, 16, 14), float64],) {
  %283 = @func_3923() /* ty=(Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) */;
  %284 = %283.0;
  (%284,)
}

def @func_6189(%var_6182: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), float32] {
  %285 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %286 = cast(%var_6182, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%288, %289) /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_6357(%var_6354: Tensor[(5, 42), int32]) -> (Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) {
  %290 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %293 = cast(%var_6354, dtype="int32") /* ty=Tensor[(5, 42), int32] */;
  %294 = reshape(%293, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
  %295 = @func_1662(%294) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) */;
  %296 = asinh(%292) /* ty=Tensor[(12, 9, 13), float64] */;
  %297 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
  %298 = %295.2;
  (%296, %297, %298, %var_6354)
}

def @func_11469(%var_11448: Tensor[(11, 8, 3), float64]) -> Tensor[(11, 8, 3), float64] {
  %299 = cast(%var_11448, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
  sigmoid(%299) /* ty=Tensor[(11, 8, 3), float64] */
}

def @func_4732() -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %300 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %301 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %302 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %303 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %304 = %300.0;
  %305 = %301.1;
  %306 = %302.2;
  %307 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %308 = %303.0;
  (%304, %305, %306, %307, %308)
}

def @func_12090(%var_12040: Tensor[(3, 4, 7), float64]) -> (Tensor[(3, 4, 7), float32],) {
  %309 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %310 = %309.1;
  %311 = cast(%310, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %312 = cast(%var_12040, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %313 = equal(%311, %312) /* ty=Tensor[(3, 4, 7), bool] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %315 = sinh(%314) /* ty=Tensor[(3, 4, 7), float32] */;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %317 = atan(%316) /* ty=Tensor[(3, 4, 7), float32] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %319 = erf(%318) /* ty=Tensor[(3, 4, 7), float32] */;
  (%319,)
}

def @func_5445() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %320 = @func_3749() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %321 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %322 = %320.0;
  %323 = %321.0;
  (%322, %323)
}

def @func_11209() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %324 = @func_5917() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %325 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %326 = @func_10748() /* ty=Tensor[(7, 2, 16), float32] */;
  %327 = %324.0;
  %328 = @func_9427() /* ty=Tensor[(7, 2, 16), float64] */;
  %329 = %325.4;
  (%326, %327, %328, %329)
}

def @func_3232() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %330 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %331 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %332 = %330.0;
  %333 = %331.0;
  (%332, %333)
}

def @func_3842() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %334 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %335 = @func_3139() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %336 = %334.1;
  %337 = %335.2;
  (%336, %337)
}

def @main() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(5, 4, 11), uint64]) {
  %338 = @func_2569() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %339 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %340 = acosh(%339) /* ty=Tensor[(5, 4, 11), float32] */;
  %341 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 4, 11), float32] */, dtype="uint64") /* ty=Tensor[(5, 4, 11), uint64] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="uint64") /* ty=Tensor[(5, 4, 11), uint64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %345 = %338.1;
  %346 = @func_12509() /* ty=Tensor[(7, 2, 16), float64] */;
  %347 = @func_13428() /* ty=Tensor[(7, 2, 16), float32] */;
  %348 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  %349 = bitwise_and(%343, %344) /* ty=Tensor[(5, 4, 11), uint64] */;
  (%345, %346, %347, %348, %349)
}

def @func_6787() -> Tensor[(7, 2, 16), uint64] {
  @func_4199() /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_2349() -> Tensor[(7, 2, 16), float32] {
  %350 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %350.0
}

def @func_5941() -> Tensor[(7, 2, 16), float32] {
  @func_5544() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_11395() -> (Tensor[(7, 2, 16), float32],) {
  %351 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %352 = %351.0;
  (%352,)
}

def @func_13261() -> Tensor[(7, 2, 16), float64] {
  %353 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %353.0
}

def @func_13949(%var_13846: Tensor[(48), uint32], %var_13928: Tensor[(168), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(3, 4, 4), int16], Tensor[(3, 4, 4), float64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(6, 2, 14), bool], Tensor[(168), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
  %354 = @func_12423() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) */;
  %355 = cast(%var_13846, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %356 = reshape(%355, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
  %357 = @func_1748(%356) /* ty=Tensor[(3, 4, 4), bool] */;
  %358 = cast(%var_13846, dtype="bool") /* ty=Tensor[(48), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = not_equal(%360, %361) /* ty=Tensor[(3, 4, 4), bool] */;
  %363 = cast(%362, dtype="int16") /* ty=Tensor[(3, 4, 4), int16] */;
  %364 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%357, dtype="int16") /* ty=Tensor[(3, 4, 4), int16] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %367 = cast(%357, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %368 = @func_13297() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %369 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %370 = cast(%var_13928, dtype="float32") /* ty=Tensor[(168), float32] */;
  %371 = cast(%var_13928, dtype="float32") /* ty=Tensor[(168), float32] */;
  %372 = reshape(%370, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %373 = reshape(%371, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %374 = @func_11124(%372, %373) /* ty=(Tensor[(6, 2, 14), bool],) */;
  %375 = %354.0;
  %376 = minimum(%365, %366) /* ty=Tensor[(3, 4, 4), int16] */;
  %377 = acosh(%367) /* ty=Tensor[(3, 4, 4), float64] */;
  %378 = %368.0;
  %379 = @func_5132() /* ty=Tensor[(7, 2, 16), float32] */;
  %380 = %369.0;
  %381 = %374.0;
  %382 = @func_9958() /* ty=Tensor[(7, 2, 16), float32] */;
  %383 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%375, %376, %377, %378, %379, %380, %381, %var_13928, %382, %383)
}

def @func_13051(%var_13024: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
  %384 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %385 = cast(%var_13024, dtype="float32") /* ty=Tensor[(56), float32] */;
  %386 = reshape(%385, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
  %387 = @func_1518(%386) /* ty=(Tensor[(14, 1, 4), float32],) */;
  %388 = %384.0;
  %389 = %387.0;
  (%388, %389, %var_13024)
}

def @func_12593() -> Tensor[(7, 2, 16), float32] {
  @func_4183() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_13443() -> Tensor[(7, 2, 16), float32] {
  %390 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %390.1
}

def @func_13325() -> (Tensor[(7, 2, 16), float32],) {
  %391 = @func_10410() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_1662(%var_1654: Tensor[(1, 210), int32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) {
  %393 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %394 = cast(%var_1654, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
  %395 = reshape(%394, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
  %396 = %393.0;
  %397 = @func_290(%395) /* ty=Tensor[(7, 6, 5), int32] */;
  (%396, %397, %var_1654)
}

def @func_9355() -> (Tensor[(7, 2, 16), float64],) {
  %398 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
  (%398,)
}

def @func_3139() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %399 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %400 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %401 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %403 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %404 = %399.0;
  %405 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %406 = %400.1;
  %407 = exp(%402) /* ty=Tensor[(7, 2, 16), float64] */;
  %408 = %403.0;
  (%404, %405, %406, %407, %408)
}

def @func_2588() -> Tensor[(7, 2, 16), bool] {
  %409 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %409.1
}

def @func_8567() -> Tensor[(12, 9, 13), float32] {
  %410 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %411 = %410.0;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  tan(%412) /* ty=Tensor[(12, 9, 13), float32] */
}

def @func_10302() -> (Tensor[(7, 2, 16), float32],) {
  %413 = @func_5067() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %414 = %413.0;
  (%414,)
}

def @func_5679() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %415 = @func_5393() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) */;
  %416 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %417 = @func_4199() /* ty=Tensor[(7, 2, 16), uint64] */;
  %418 = %415.2;
  %419 = %416.0;
  (%417, %418, %419)
}

def @func_7159() -> (Tensor[(7, 2, 16), float32],) {
  %420 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %421 = %420.0;
  (%421,)
}

def @func_10819() -> (Tensor[(10, 9, 2), int64],) {
  %422 = @func_8339() /* ty=(Tensor[(10, 9, 2), int64],) */;
  %423 = %422.0;
  (%423,)
}

def @func_6291() -> int32 {
  %424 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %424.2
}

def @func_3749() -> (Tensor[(7, 2, 16), float32],) {
  %425 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %426 = %425.0;
  (%426,)
}

def @func_9388(%var_9381: Tensor[(13, 10, 4), bool]) -> (Tensor[(13, 10, 4), bool],) {
  %427 = cast(%var_9381, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %428 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(13, 10, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 10, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = logical_and(%429, %430) /* ty=Tensor[(13, 10, 4), bool] */;
  (%431,)
}

def @func_7232(%var_7195: Tensor[(3, 4, 7), float64]) -> Tensor[(3, 4, 7), float64] {
  %432 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %433 = %432.1;
  %434 = cast(%433, dtype="int64") /* ty=Tensor[(3, 4, ?), int64] */;
  %435 = cast(%var_7195, dtype="int64") /* ty=Tensor[(3, 4, 7), int64] */;
  %436 = bitwise_or(%434, %435) /* ty=Tensor[(3, 4, 7), int64] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %438 = sigmoid(%437) /* ty=Tensor[(3, 4, 7), float32] */;
  %439 = cast(%436, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%441, %442) /* ty=Tensor[(3, 4, 7), float64] */
}

def @func_11354(%var_11349: int8, %var_11350: Tensor[(12, 6, 3), int8]) -> Tensor[(12, 6, 3), int8] {
  %443 = cast(%var_11349, dtype="int8") /* ty=int8 */;
  %444 = cast(%var_11350, dtype="int8") /* ty=Tensor[(12, 6, 3), int8] */;
  right_shift(%443, %444) /* ty=Tensor[(12, 6, 3), int8] */
}

def @func_13743() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  %445 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %446 = @func_9730() /* ty=Tensor[(7, 2, 16), float32] */;
  %447 = %445.1;
  (%446, %447)
}

def @func_12671(%var_12650: int8) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(12, 6, 3), int8], int8, Tensor[(216), int8], Tensor[(7, 2, 16), float32]) {
  %448 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %449 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %450 = cast(%var_12650, dtype="int8") /* ty=int8 */;
  %451 = cast(meta[relay.Constant][13] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
  %452 = reshape(%450, newshape=[]) /* ty=int8 */;
  %453 = reshape(%451, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), int8] */;
  %454 = %448.0;
  %455 = %449.0;
  %456 = @func_11354(%452, %453) /* ty=Tensor[(12, 6, 3), int8] */;
  %457 = @func_7099() /* ty=Tensor[(7, 2, 16), float32] */;
  (%454, %455, %456, %var_12650, meta[relay.Constant][13] /* ty=Tensor[(216), int8] */, %457)
}

def @func_5067() -> (Tensor[(7, 2, 16), float32],) {
  %458 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %459 = %458.0;
  (%459,)
}

def @func_12750() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 13, 10), float64], Tensor[(1820), float64]) {
  %460 = @func_12003() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %461 = cast(meta[relay.Constant][14] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %462 = reshape(%461, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
  %463 = @func_9692(%462) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) */;
  %464 = %460.0;
  %465 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
  %466 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %467 = %463.0;
  (%464, %465, %466, %467, meta[relay.Constant][14] /* ty=Tensor[(1820), float64] */)
}

def @func_6304() -> Tensor[(7, 2, 16), float32] {
  @func_1096() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_11089(%var_11041: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(14, 6, 48), float64], Tensor[(14, 6, 48), float64]) {
  %468 = cast(%var_11041, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %469 = reshape(%468, newshape=[48]) /* ty=Tensor[(48), uint32] */;
  %470 = @func_2640(%469) /* ty=(Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) */;
  %471 = @func_8135() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %472 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %473 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %474 = sin(%473) /* ty=Tensor[(14, 6, 1), float32] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %476 = cast(%var_11041, dtype="float64") /* ty=Tensor[(48), float64] */;
  %477 = floor_divide(%475, %476) /* ty=Tensor[(14, 6, 48), float64] */;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(14, 6, 48), float64] */;
  %479 = cast(%477, dtype="float64") /* ty=Tensor[(14, 6, 48), float64] */;
  %480 = %470.0;
  %481 = %471.1;
  %482 = %472.0;
  %483 = atanh(%478) /* ty=Tensor[(14, 6, 48), float64] */;
  %484 = atan(%479) /* ty=Tensor[(14, 6, 48), float64] */;
  (%480, %481, %482, %483, %484)
}

def @func_9170() -> Tensor[(7, 2, 16), float64] {
  %485 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %485.0
}

def @func_8487() -> (Tensor[(12, 9, 13), int32],) {
  %486 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %487 = %486.0;
  (%487,)
}

def @func_4019() -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) {
  %488 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %489 = @func_2783() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %490 = %488.0;
  %491 = %489.0;
  (%490, %491)
}

def @func_11952(%var_11946: Tensor[(10, 5, 5), float32]) -> (Tensor[(10, 5, 5), float32], Tensor[(7, 2, 16), float32]) {
  %492 = cast(%var_11946, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %493 = @func_3232() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %494 = acosh(%492) /* ty=Tensor[(10, 5, 5), float32] */;
  %495 = %493.0;
  (%494, %495)
}

def @func_11252(%var_11218: Tensor[(14, 14, 13), int64], %var_11219: Tensor[(14, 14, 13), int64], %var_11226: Tensor[(48), uint32], %var_11238: Tensor[(210), int32]) -> (Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
  %496 = cast(%var_11219, dtype="bool") /* ty=Tensor[(14, 14, 13), bool] */;
  %497 = shape_of(%var_11218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_11218, dtype="bool") /* ty=Tensor[(14, 14, 13), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = cast(%var_11226, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %501 = reshape(%500, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
  %502 = cast(%var_11238, dtype="int32") /* ty=Tensor[(210), int32] */;
  %503 = reshape(%502, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
  %504 = not_equal(%498, %499) /* ty=Tensor[(14, 14, 13), bool] */;
  %505 = @func_1748(%501) /* ty=Tensor[(3, 4, 4), bool] */;
  %506 = @func_290(%503) /* ty=Tensor[(7, 6, 5), int32] */;
  (%504, %505, %var_11226, %506, %var_11238)
}

def @func_10990() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %507 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %508 = @func_2505() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) */;
  %509 = %507.0;
  %510 = %508.1;
  (%509, %510)
}

def @func_5874() -> (Tensor[(7, 2, 16), float32],) {
  %511 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %512 = %511.0;
  (%512,)
}

def @func_9161() -> Tensor[(7, 2, 16), float64] {
  %513 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %513.0
}

def @func_12488(%var_12486: Tensor[(2304), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(16, 9, 16), int8], Tensor[(2304), float32]) {
  %514 = @func_5243() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
  %515 = cast(%var_12486, dtype="float32") /* ty=Tensor[(2304), float32] */;
  %516 = reshape(%515, newshape=[16, 9, 16]) /* ty=Tensor[(16, 9, 16), float32] */;
  %517 = @func_2391(%516) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) */;
  %518 = %514.2;
  %519 = %517.1;
  (%518, %519, %var_12486)
}

def @func_4352() -> Tensor[(7, 2, 16), float32] {
  %520 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %520.0
}

def @func_2569() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %521 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %522 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %523 = %521.0;
  %524 = %522.0;
  (%523, %524)
}

def @func_290(%var_282: Tensor[(7, 6, 5), int32]) -> Tensor[(7, 6, 5), int32] {
  %525 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 6, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 6, 5), int32] */;
  %526 = shape_of(%var_282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_282, dtype="int32") /* ty=Tensor[(7, 6, 5), int32] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%527, %528) /* ty=Tensor[(7, 6, 5), int32] */
}

def @func_6720() -> (Tensor[(12, 9, 13), float32],) {
  %529 = @func_5393() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) */;
  %530 = %529.1;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %532 = cos(%531) /* ty=Tensor[(12, 9, 13), float32] */;
  (%532,)
}

def @func_10410() -> (Tensor[(7, 2, 16), float32],) {
  %533 = @func_5995() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %534 = %533.1;
  (%534,)
}

def @func_6378() -> Tensor[(7, 2, 16), float64] {
  %535 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %535.0
}

def @func_2783() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %536 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %537 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  %538 = %536.0;
  (%537, %538)
}

def @func_397(%var_389: Tensor[(15, 7, 3), float64]) -> Tensor[(15, 7, 3), float64] {
  %539 = cast(%var_389, dtype="float64") /* ty=Tensor[(15, 7, 3), float64] */;
  sqrt(%539) /* ty=Tensor[(15, 7, 3), float64] */
}

def @func_13180(%var_13165: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
  %540 = @func_7973() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %541 = cast(%var_13165, dtype="float64") /* ty=Tensor[(351), float64] */;
  %542 = reshape(%541, newshape=[9, 13, 3]) /* ty=Tensor[(9, 13, 3), float64] */;
  %543 = @func_12476(%542) /* ty=(Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) */;
  %544 = %540.0;
  %545 = %543.1;
  (%544, %545, %var_13165)
}

def @func_14076() -> int32 {
  @func_6291() /* ty=int32 */
}

def @func_5798(%var_5793: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32],) {
  %546 = cast(%var_5793, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  %547 = cosh(%546) /* ty=Tensor[(4, 12, 15), float32] */;
  (%547,)
}

def @func_11906() -> (Tensor[(7, 2, 16), float64],) {
  %548 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %549 = %548.0;
  (%549,)
}

def @func_13770() -> (Tensor[(7, 2, 16), bool],) {
  %550 = @func_6496() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) */;
  %551 = %550.1;
  (%551,)
}

def @func_13989() -> Tensor[(7, 2, 16), uint64] {
  %552 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %552.1
}

def @func_242() -> Tensor[(7, 2, 16), float32] {
  %553 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %553.0
}

def @func_8828() -> (Tensor[(7, 2, 16), float32],) {
  %554 = @func_7137() /* ty=Tensor[(7, 2, 16), float32] */;
  (%554,)
}

def @func_4250() -> Tensor[(7, 2, 16), float64] {
  %555 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %556 = %555.0;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  cosh(%557) /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_1748(%var_1728: Tensor[(3, 4, 4), uint32]) -> Tensor[(3, 4, 4), bool] {
  %558 = cast(%var_1728, dtype="uint32") /* ty=Tensor[(3, 4, 4), uint32] */;
  %559 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4, 4), uint32] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %562 = right_shift(%560, %561) /* ty=Tensor[(3, 4, 4), uint32] */;
  %563 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%565, %566) /* ty=Tensor[(3, 4, 4), bool] */
}

def @func_2206() -> (Tensor[(10, 7, 6), bool],) {
  %567 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %568 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 7, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %571 = logical_and(%569, %570) /* ty=Tensor[(10, 7, 6), bool] */;
  (%571,)
}

def @func_4056() -> Tensor[(7, 2, 16), float32] {
  %572 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %572.0
}

def @func_4879() -> (Tensor[(7, 2, 16), float32],) {
  %573 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %574 = %573.0;
  (%574,)
}

def @func_7901() -> Tensor[(7, 2, 16), bool] {
  %575 = @func_4150() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %575.0
}

def @func_7991() -> Tensor[(7, 2, 16), bool] {
  @func_7901() /* ty=Tensor[(7, 2, 16), bool] */
}

def @func_8046() -> (Tensor[(7, 2, 16), float32],) {
  %576 = @func_5132() /* ty=Tensor[(7, 2, 16), float32] */;
  (%576,)
}

def @func_8543() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %577 = @func_7458() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) */;
  %578 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %579 = %577.1;
  %580 = %578.0;
  (%579, %580)
}

def @func_13506(%var_13499: Tensor[(144), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(144), float64]) {
  %581 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %582 = cast(%var_13499, dtype="float64") /* ty=Tensor[(144), float64] */;
  %583 = reshape(%582, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %584 = @func_12320(%583) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) */;
  %585 = %581.0;
  %586 = %584.1;
  (%585, %586, %var_13499)
}

def @func_461() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
  %587 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %588 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %590 = cast(meta[relay.Constant][20] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %591 = reshape(%590, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
  %592 = %587.1;
  %593 = asin(%589) /* ty=Tensor[(7, 2, 16), float64] */;
  %594 = @func_290(%591) /* ty=Tensor[(7, 6, 5), int32] */;
  (%592, %593, %594, meta[relay.Constant][20] /* ty=Tensor[(210), int32] */)
}

def @func_1725() -> (Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) {
  %595 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %596 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %597 = cosh(%596) /* ty=Tensor[(3, 4, 1), float64] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %599 = cos(%598) /* ty=Tensor[(3, 4, 1), float64] */;
  %600 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %604 = %595.0;
  %605 = power(%602, %603) /* ty=Tensor[(3, 4, ?), float64] */;
  (%604, %605)
}

def @func_2923() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %606 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %607 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %608 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %609 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %610 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %611 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %612 = %606.0;
  %613 = %607.1;
  %614 = %608.1;
  %615 = %609.0;
  %616 = %610.1;
  %617 = %611.0;
  (%612, %613, %614, %615, %616, %617)
}

def @func_5132() -> Tensor[(7, 2, 16), float32] {
  @func_4896() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_11524() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %618 = @func_5874() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %619 = @func_5941() /* ty=Tensor[(7, 2, 16), float32] */;
  %620 = %618.0;
  (%619, %620)
}

def @func_4321(%var_4284: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) {
  %621 = @func_2984() /* ty=Tensor[(3, 16, 14), float64] */;
  %622 = cast(%var_4284, dtype="int8") /* ty=Tensor[(3, 16, 14), int8] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="int8") /* ty=Tensor[(3, 16, 14), int8] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %626 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %627 = cast(%621, dtype="uint8") /* ty=Tensor[(3, 16, 14), uint8] */;
  %628 = shape_of(%var_4284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_4284, dtype="uint8") /* ty=Tensor[(3, 16, 14), uint8] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %631 = add(%624, %625) /* ty=Tensor[(3, 16, 14), int8] */;
  %632 = %626.2;
  %633 = right_shift(%629, %630) /* ty=Tensor[(3, 16, 14), uint8] */;
  (%631, %632, %633)
}

def @func_9786() -> (Tensor[(10, 7, 6), bool],) {
  %634 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %635 = %634.1;
  (%635,)
}

def @func_210() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
  %636 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %637 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %640 = sinh(%639) /* ty=Tensor[(7, 2, 16), float64] */;
  %641 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 2, 16), float64] */, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = %636.0;
  %646 = less(%643, %644) /* ty=Tensor[(7, 2, 16), bool] */;
  (%645, %646)
}

def @func_3923() -> (Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) {
  %647 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %648 = @func_2984() /* ty=Tensor[(3, 16, 14), float64] */;
  %649 = %647.0;
  (%648, %649)
}

def @func_13428() -> Tensor[(7, 2, 16), float32] {
  %650 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %650.1
}

def @func_4601() -> (Tensor[(7, 2, 16), float32],) {
  %651 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %652 = %651.0;
  (%652,)
}

def @func_13748() -> Tensor[(7, 2, 16), float32] {
  %653 = @func_13133() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %653.0
}

def @func_14187(%var_14167: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
  %654 = @func_8046() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %655 = cast(%var_14167, dtype="float64") /* ty=Tensor[(351), float64] */;
  %656 = reshape(%655, newshape=[351]) /* ty=Tensor[(351), float64] */;
  %657 = @func_13180(%656) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) */;
  %658 = %654.0;
  %659 = %657.1;
  (%658, %659, %var_14167)
}

def @func_1855() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %660 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %661 = %660.0;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %663 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %664 = acos(%662) /* ty=Tensor[(7, 2, 16), float64] */;
  %665 = %663.0;
  (%664, %665)
}

def @func_13538() -> Tensor[(12, 9, 13), float32] {
  @func_8567() /* ty=Tensor[(12, 9, 13), float32] */
}

def @func_5393() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) {
  %666 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %667 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %668 = %666.0;
  %669 = %667.0;
  %670 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%668, %669, %670)
}

def @func_4033(%var_4028: Tensor[(1, 7, 4), bool], %var_4029: Tensor[(8, 7, 4), bool]) -> (Tensor[(8, 7, 4), bool],) {
  %671 = cast(%var_4028, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
  %672 = cast(%var_4029, dtype="bool") /* ty=Tensor[(8, 7, 4), bool] */;
  %673 = logical_and(%671, %672) /* ty=Tensor[(8, 7, 4), bool] */;
  (%673,)
}

def @func_7973() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %674 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %675 = @func_6702() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %676 = %674.0;
  %677 = %675.2;
  (%676, %677)
}

def @func_14110(%var_14084: Tensor[(2, 6, 6), float64]) -> (Tensor[(2, 6, 6), float64], Tensor[(7, 2, 16), float32]) {
  %678 = cast(-8.6611f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %679 = cast(%var_14084, dtype="float64") /* ty=Tensor[(2, 6, 6), float64] */;
  %680 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %681 = power(%678, %679) /* ty=Tensor[(2, 6, 6), float64] */;
  %682 = %680.0;
  (%681, %682)
}

def @func_8613() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %683 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %684 = %683.0;
  %685 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  (%684, %685)
}

def @func_8779(%var_8757: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), float64], Tensor[(7, 2, 16), uint64]) {
  %686 = cast(%var_8757, dtype="float64") /* ty=Tensor[(11, 12, 14), float64] */;
  %687 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %688 = exp(%686) /* ty=Tensor[(11, 12, 14), float64] */;
  %689 = %687.1;
  (%688, %689)
}

def @func_6989() -> (Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) {
  %690 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
  %691 = @func_6787() /* ty=Tensor[(7, 2, 16), uint64] */;
  %692 = %690.2;
  (%691, %692)
}

def @func_5326() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %693 = @func_2569() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %694 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %695 = %693.1;
  %696 = %694.2;
  (%695, %696)
}

def @func_11302() -> (Tensor[(1, 210), int32],) {
  %697 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
  %698 = %697.2;
  (%698,)
}

def @func_1955() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %699 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %700 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %701 = %699.0;
  %702 = %700.0;
  (%701, %702)
}

def @func_9730() -> Tensor[(7, 2, 16), float32] {
  %703 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %703.0
}

def @func_5790() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  %704 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %705 = @func_4896() /* ty=Tensor[(7, 2, 16), float32] */;
  %706 = %704.1;
  (%705, %706)
}

def @func_5243() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
  %707 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %708 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %709 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %710 = reshape(%709, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %711 = @func_3169(%710) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
  %712 = %707.1;
  %713 = %708.1;
  %714 = %711.2;
  (%712, %713, %714, meta[relay.Constant][23] /* ty=Tensor[(210), float32] */)
}

def @func_6702() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %715 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %716 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %717 = %715.0;
  %718 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %719 = %716.0;
  (%717, %718, %719)
}

def @func_10251() -> (Tensor[(7, 2, 16), float64], Tensor[(12, 9, 13), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), float64]) {
  %720 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %721 = @func_8613() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %722 = @func_3923() /* ty=(Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) */;
  %723 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
  %724 = %720.2;
  %725 = %721.1;
  %726 = %722.0;
  (%723, %724, %725, %726)
}

def @func_9282() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %727 = @func_8828() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %728 = @func_7587() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %729 = %727.0;
  %730 = %728.0;
  %731 = @func_7099() /* ty=Tensor[(7, 2, 16), float32] */;
  (%729, %730, %731)
}

def @func_9958() -> Tensor[(7, 2, 16), float32] {
  %732 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %732.1
}

def @func_12811() -> Tensor[(7, 2, 16), float32] {
  %733 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %733.0
}

def @func_10724() -> (Tensor[(7, 2, 16), uint64],) {
  %734 = @func_8543() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
  %735 = %734.0;
  (%735,)
}

def @func_12509() -> Tensor[(7, 2, 16), float64] {
  %736 = @func_11906() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %736.0
}

def @func_1879(%var_1860: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) {
  %737 = cast(%var_1860, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %738 = asinh(%737) /* ty=Tensor[(12, 15, 1), float32] */;
  %739 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  (%738, %739)
}

def @func_6555(%var_6549: Tensor[(5, 42), int32]) -> (Tensor[(7, 2, 16), uint64], Tensor[(5, 42), int32], Tensor[(5, 42), int32]) {
  %740 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %741 = cast(%var_6549, dtype="int32") /* ty=Tensor[(5, 42), int32] */;
  %742 = reshape(%741, newshape=[5, 42]) /* ty=Tensor[(5, 42), int32] */;
  %743 = @func_6357(%742) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) */;
  %744 = %740.1;
  %745 = %743.3;
  (%744, %745, %var_6549)
}

def @func_1982() -> (Tensor[(7, 2, 16), float32],) {
  %746 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  (%746,)
}

def @func_5544() -> Tensor[(7, 2, 16), float32] {
  %747 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %747.0
}

def @func_7088() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) {
  %748 = @func_3139() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %749 = @func_4732() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %750 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 210), int32] */, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
  %751 = reshape(%750, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
  %752 = @func_1662(%751) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) */;
  %753 = %748.0;
  %754 = %749.1;
  %755 = %752.2;
  (%753, %754, %755, meta[relay.Constant][24] /* ty=Tensor[(1, 210), int32] */)
}

def @func_9922() -> (Tensor[(10, 7, 6), bool], Tensor[(4, 12, 15), float32], Tensor[(720), float32]) {
  %756 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %757 = cast(meta[relay.Constant][25] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %758 = reshape(%757, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %759 = @func_5798(%758) /* ty=(Tensor[(4, 12, 15), float32],) */;
  %760 = %756.1;
  %761 = %759.0;
  (%760, %761, meta[relay.Constant][25] /* ty=Tensor[(720), float32] */)
}

def @func_2215(%var_2211: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), float32],) {
  %762 = cast(%var_2211, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
  %763 = log2(%762) /* ty=Tensor[(3, 7, 10), float32] */;
  (%763,)
}

def @func_3494(%var_3487: Tensor[(14, 4), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 4), float32], Tensor[(10, 7, 6), float32]) {
  %764 = @func_3232() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %765 = %764.1;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %767 = sin(%766) /* ty=Tensor[(10, 7, 6), float32] */;
  %768 = cast(%765, dtype="uint32") /* ty=Tensor[(10, 7, 6), uint32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint32") /* ty=Tensor[(10, 7, 6), uint32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %772 = bitwise_xor(%770, %771) /* ty=Tensor[(10, 7, 6), uint32] */;
  %773 = cast(%767, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %774 = acosh(%773) /* ty=Tensor[(10, 7, 6), float64] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %776 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%772, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %779 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %780 = cast(%var_3487, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
  %781 = reshape(%780, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %782 = @func_2723(%781) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */;
  %783 = cast(%767, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %784 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %785 = power(%777, %778) /* ty=Tensor[(10, 7, 6), float64] */;
  %786 = %779.0;
  %787 = %782.0;
  %788 = sqrt(%783) /* ty=Tensor[(10, 7, 6), float32] */;
  (%784, %785, %786, %787, %var_3487, %788)
}

def @func_9692(%var_9663: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) {
  %789 = cast(%var_9663, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %790 = cosh(%789) /* ty=Tensor[(14, 13, 10), float64] */;
  %791 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
  (%790, %791)
}

def @func_5587() -> Tensor[(7, 2, 16), float64] {
  %792 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %793 = %792.0;
  %794 = cast(%793, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  log10(%794) /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_2309(%var_2298: Tensor[(180), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) {
  %795 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %796 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %797 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %798 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %799 = cast(meta[relay.Constant][26] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %800 = reshape(%799, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
  %801 = @func_1518(%800) /* ty=(Tensor[(14, 1, 4), float32],) */;
  %802 = %801.0;
  %803 = cast(meta[relay.Constant][26] /* ty=Tensor[(56), float32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%802, dtype="bool") /* ty=Tensor[(14, 1, 4), bool] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %807 = cast(%var_2298, dtype="float32") /* ty=Tensor[(180), float32] */;
  %808 = reshape(%807, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
  %809 = @func_1879(%808) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) */;
  %810 = cast(%802, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %811 = reshape(%810, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
  %812 = @func_1518(%811) /* ty=(Tensor[(14, 1, 4), float32],) */;
  %813 = %795.1;
  %814 = %796.0;
  %815 = %797.0;
  %816 = %798.0;
  %817 = less(%805, %806) /* ty=Tensor[(14, ?, 4), bool] */;
  %818 = %809.0;
  %819 = %812.0;
  (%813, %814, %815, %816, %817, %818, %var_2298, %819)
}

def @func_2545() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %820 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %821 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %822 = %820.0;
  (%821, %822)
}

def @func_5743() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %823 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %824 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %825 = %823.1;
  %826 = %824.0;
  (%825, %826)
}

def @func_3240(%var_3236: Tensor[(7, 15, 8), uint16]) -> Tensor[(7, 15, 8), uint16] {
  %827 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(7, 15, 8), uint16] */;
  %828 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 8), uint16] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%829, %830) /* ty=Tensor[(7, 15, 8), uint16] */
}

def @func_4199() -> Tensor[(7, 2, 16), uint64] {
  %831 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %831.1
}

def @func_11282() -> Tensor[(7, 2, 16), float32] {
  @func_4896() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_3555() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %832 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %833 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  %834 = %832.1;
  (%833, %834)
}

def @func_9986() -> Tensor[(7, 2, 16), float32] {
  %835 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %835.0
}

def @func_2055() -> (Tensor[(7, 2, 16), float32],) {
  %836 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %837 = %836.1;
  (%837,)
}

def @func_12959(%var_12908: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), float32], Tensor[(14, 14, 13), bool], Tensor[(1274, 2), int64], Tensor[(48), uint32], Tensor[(210), int32], Tensor[(7, 2, 16), float32], Tensor[(6, 12, 4), float64], Tensor[(7, 2, 16), uint64]) {
  %838 = cast(%var_12908, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
  %839 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 12, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %842 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274, 2), int64] */, dtype="int64") /* ty=Tensor[(1274, 2), int64] */;
  %843 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274, 2), int64] */, dtype="int64") /* ty=Tensor[(1274, 2), int64] */;
  %844 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %845 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %846 = reshape(%842, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), int64] */;
  %847 = reshape(%843, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), int64] */;
  %848 = reshape(%844, newshape=[48]) /* ty=Tensor[(48), uint32] */;
  %849 = reshape(%845, newshape=[210]) /* ty=Tensor[(210), int32] */;
  %850 = @func_11252(%846, %847, %848, %849) /* ty=(Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %851 = @func_5445() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %852 = cast(%var_12908, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
  %853 = @func_10724() /* ty=(Tensor[(7, 2, 16), uint64],) */;
  %854 = power(%840, %841) /* ty=Tensor[(6, 12, 4), float32] */;
  %855 = %850.0;
  %856 = %851.1;
  %857 = atanh(%852) /* ty=Tensor[(6, 12, 4), float64] */;
  %858 = %853.0;
  (%854, %855, meta[relay.Constant][29] /* ty=Tensor[(1274, 2), int64] */, meta[relay.Constant][30] /* ty=Tensor[(48), uint32] */, meta[relay.Constant][31] /* ty=Tensor[(210), int32] */, %856, %857, %858)
}

def @func_12289(%var_12279: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), bool], Tensor[(7, 2, 16), float32]) {
  %859 = @func_10111() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %860 = %859.0;
  %861 = cast(%var_12279, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %865 = @func_6702() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %866 = not_equal(%863, %864) /* ty=Tensor[(12, 9, 13), bool] */;
  %867 = %865.2;
  (%866, %867)
}

def @func_12358() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64]) {
  %868 = @func_4150() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %869 = %868.0;
  %870 = @func_7991() /* ty=Tensor[(7, 2, 16), bool] */;
  %871 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%869, %870, %871)
}

def @func_5164() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) {
  %872 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %873 = cast(meta[relay.Constant][32] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %874 = reshape(%873, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float64] */;
  %875 = @func_4321(%874) /* ty=(Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) */;
  %876 = cast(meta[relay.Constant][32] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %877 = reshape(%876, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %878 = @func_4856(%877) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) */;
  %879 = %872.1;
  %880 = %875.1;
  %881 = %878.2;
  %882 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
  (%879, %880, meta[relay.Constant][32] /* ty=Tensor[(672), float64] */, %881, %882)
}

def @func_8402(%var_8398: Tensor[(28), bool], %var_8399: Tensor[(224), bool]) -> (Tensor[(10, 7, 6), bool], Tensor[(672), float64], Tensor[(8, 7, 4), bool], Tensor[(28), bool], Tensor[(224), bool]) {
  %883 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
  %884 = @func_6989() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) */;
  %885 = cast(%var_8398, dtype="bool") /* ty=Tensor[(28), bool] */;
  %886 = cast(%var_8399, dtype="bool") /* ty=Tensor[(224), bool] */;
  %887 = reshape(%885, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), bool] */;
  %888 = reshape(%886, newshape=[8, 7, 4]) /* ty=Tensor[(8, 7, 4), bool] */;
  %889 = @func_4033(%887, %888) /* ty=(Tensor[(8, 7, 4), bool],) */;
  %890 = %883.0;
  %891 = %884.1;
  %892 = %889.0;
  (%890, %891, %892, %var_8398, %var_8399)
}

def @func_5504() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
  %893 = @func_5326() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %894 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %895 = %893.0;
  %896 = %894.0;
  (%895, %896)
}

def @func_9427() -> Tensor[(7, 2, 16), float64] {
  @func_6378() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_7137() -> Tensor[(7, 2, 16), float32] {
  %897 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %897.0
}

def @func_6496() -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) {
  %898 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
  %899 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %900 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %901 = %898.0;
  %902 = %899.1;
  %903 = %900.1;
  (%901, %902, %903)
}

def @func_10748() -> Tensor[(7, 2, 16), float32] {
  %904 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %904.0
}

def @func_941(%var_922: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), uint64] {
  %905 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %906 = %905.0;
  %907 = cast(%var_922, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %908 = shape_of(%906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%906, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%909, %910) /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_629() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  %911 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %912 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %914 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %915 = %911.0;
  %916 = sin(%913) /* ty=Tensor[(7, 2, 16), float32] */;
  %917 = %914.1;
  (%915, %916, %917)
}

def @func_4896() -> Tensor[(7, 2, 16), float32] {
  @func_242() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_13479() -> (Tensor[(7, 2, 16), float32],) {
  %918 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %919 = %918.0;
  (%919,)
}

def @func_5917() -> (Tensor[(7, 2, 16), float32],) {
  %920 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %921 = %920.0;
  (%921,)
}

def @func_12320(%var_12301: Tensor[(12, 1, 12), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) {
  %922 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %923 = reshape(%922, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
  %924 = @func_1879(%923) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) */;
  %925 = cast(%var_12301, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %926 = log10(%925) /* ty=Tensor[(12, 1, 12), float64] */;
  %927 = cast(%var_12301, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%926, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %931 = %924.1;
  %932 = mod(%929, %930) /* ty=Tensor[(12, ?, 12), float64] */;
  (%931, meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, %932)
}

def @func_12518() -> Tensor[(7, 2, 16), float32] {
  %933 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %933.0
}

def @func_10879() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %934 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %935 = %934.0;
  %936 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
  (%935, %936)
}

def @func_9649() -> (Tensor[(7, 2, 16), float32],) {
  %937 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %938 = %937.1;
  (%938,)
}

def @func_1283() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) {
  %939 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %940 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %941 = reshape(%940, newshape=[]) /* ty=int32 */;
  %942 = @func_767(%941) /* ty=(Tensor[(12, 9, 13), int32],) */;
  %943 = %939.1;
  %944 = %942.0;
  (%943, %944, 1 /* ty=int32 */)
}

def @func_3378() -> (Tensor[(7, 2, 16), bool],) {
  %945 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %946 = %945.1;
  (%946,)
}

def @func_501() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  %947 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %950 = rsqrt(%949) /* ty=Tensor[(7, 2, 16), float64] */;
  %951 = cast(%948, dtype="uint8") /* ty=Tensor[(7, 2, 16), uint8] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="uint8") /* ty=Tensor[(7, 2, 16), uint8] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %955 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %956 = minimum(%953, %954) /* ty=Tensor[(7, 2, 16), uint8] */;
  (%955, %956)
}

def @func_7458() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) {
  %957 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %958 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %959 = %957.1;
  %960 = %958.2;
  (%959, %960)
}

def @func_7099() -> Tensor[(7, 2, 16), float32] {
  %961 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %961.1
}

def @func_2031() -> (Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) {
  %962 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %963 = %962.1;
  %964 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  (%963, %964)
}

def @func_13106(%var_13081: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(56), float32], Tensor[(56), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
  %965 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %966 = cast(%var_13081, dtype="float32") /* ty=Tensor[(56), float32] */;
  %967 = reshape(%966, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %968 = @func_13051(%967) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */;
  %969 = @func_5717() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %970 = @func_5917() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %971 = %965.0;
  %972 = %968.2;
  %973 = %969.0;
  %974 = %970.0;
  (%971, %972, %var_13081, %973, %974)
}

def @func_2175() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %975 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %976 = %975.1;
  %977 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
  (%976, %977)
}

def @func_7346() -> (Tensor[(7, 2, 16), float32],) {
  %978 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
  (%978,)
}

def @func_12227() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(180), float32], Tensor[(7, 2, 16), float32]) {
  %979 = @func_11395() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %980 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %981 = reshape(%980, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %982 = @func_2309(%981) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) */;
  %983 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %984 = %979.0;
  %985 = %982.3;
  %986 = %983.0;
  (%984, %985, meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, %986)
}

def @func_6823() -> Tensor[(7, 2, 16), float32] {
  %987 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
  %987.4
}

def @func_13622(%var_13589: Tensor[(9, 10, 7), uint32], %var_13590: Tensor[(9, 10, 7), uint32]) -> (Tensor[(9, 10, 7), uint32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %988 = cast(%var_13590, dtype="uint32") /* ty=Tensor[(9, 10, 7), uint32] */;
  %989 = shape_of(%var_13589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%var_13589, dtype="uint32") /* ty=Tensor[(9, 10, 7), uint32] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %992 = bitwise_xor(%990, %991) /* ty=Tensor[(9, 10, 7), uint32] */;
  %993 = @func_8225() /* ty=Tensor[(7, 2, 16), float32] */;
  %994 = @func_9958() /* ty=Tensor[(7, 2, 16), float32] */;
  (%992, %993, %994)
}

def @func_6567(%var_6559: Tensor[(10, 10, 10), uint64]) -> Tensor[(10, 10, 10), bool] {
  %995 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 10, 10), uint64] */, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %996 = shape_of(%var_6559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%var_6559, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%997, %998) /* ty=Tensor[(10, 10, 10), bool] */
}

def @func_8003() -> Tensor[(7, 2, 16), float64] {
  @func_5587() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_1941() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) {
  %999 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1000 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1001 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1002 = reshape(%1001, newshape=[]) /* ty=int32 */;
  %1003 = @func_767(%1002) /* ty=(Tensor[(12, 9, 13), int32],) */;
  %1004 = %1003.0;
  %1005 = cast(%1004, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  %1006 = cast(7 /* ty=int32 */, dtype="int8") /* ty=int8 */;
  %1007 = %999.0;
  %1008 = %1000.0;
  %1009 = logical_xor(%1005, %1006) /* ty=Tensor[(12, 9, 13), int8] */;
  (%1007, %1008, %1009)
}

def @func_5995() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1010 = @func_2783() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1011 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1012 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1013 = %1010.1;
  %1014 = %1011.0;
  %1015 = %1012.0;
  (%1013, %1014, %1015)
}

def @func_4928() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) {
  %1016 = @func_1805() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1017 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %1018 = %1016.0;
  %1019 = %1017.1;
  (%1018, %1019)
}

def @func_8740(%var_8736: Tensor[(7, 8, 8), float32]) -> Tensor[(7, 8, 8), float32] {
  %1020 = cast(%var_8736, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  tan(%1020) /* ty=Tensor[(7, 8, 8), float32] */
}

def @func_9437() -> (Tensor[(1, 3, 3), float32],) {
  %1021 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %1022 = rsqrt(%1021) /* ty=Tensor[(1, 3, 3), float32] */;
  (%1022,)
}

def @func_1342() -> (Tensor[(7, 2, 16), float32],) {
  %1023 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  (%1023,)
}

def @func_2640(%var_2632: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) {
  %1024 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %1025 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1026 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1028 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
  %1029 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1032 = bitwise_and(%1030, %1031) /* ty=Tensor[(7, 5, 13), int8] */;
  %1033 = cast(%1032, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %1034 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %1035 = cast(%var_2632, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %1036 = reshape(%1035, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
  %1037 = multiply(%1026, %1027) /* ty=Tensor[(7, 5, 13), float64] */;
  %1038 = atan(%1033) /* ty=Tensor[(7, 5, 13), float32] */;
  %1039 = %1034.1;
  %1040 = @func_1748(%1036) /* ty=Tensor[(3, 4, 4), bool] */;
  (%1037, %1038, %1039, %1040, %var_2632)
}

def @func_2723(%var_2719: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
  %1041 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %1042 = %1041.1;
  %1043 = cast(%1042, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %1044 = cast(%var_2719, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1045 = reshape(%1044, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
  %1046 = @func_1518(%1045) /* ty=(Tensor[(14, 1, 4), float32],) */;
  %1047 = erf(%1043) /* ty=Tensor[(7, 2, 16), float32] */;
  %1048 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
  %1049 = %1046.0;
  (%1047, %1048, %1049, %var_2719)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_14189(%var_14188: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
  %6 = fn (%var_14167: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
    %0 = @func_8046() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1 = cast(%var_14167, dtype="float64") /* ty=Tensor[(351), float64] */;
    %2 = reshape(%1, newshape=[351]) /* ty=Tensor[(351), float64] */;
    %3 = @func_13180(%2) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) */;
    %4 = %0.0;
    %5 = %3.1;
    (%4, %5, %var_14167)
  };
  %6(%var_14188) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) */
}

def @func_941(%var_922: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), uint64] {
  %7 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %8 = %7.0;
  %9 = cast(%var_922, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%11, %12) /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_10411() -> (Tensor[(7, 2, 16), float32],) {
  %15 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %13 = @func_5995() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %14 = %13.1;
    (%14,)
  };
  %15() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_3242(%var_3241: Tensor[(7, 15, 8), uint16]) -> Tensor[(7, 15, 8), uint16] {
  %20 = fn (%var_3236: Tensor[(7, 15, 8), uint16]) -> Tensor[(7, 15, 8), uint16] {
    %16 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(7, 15, 8), uint16] */;
    %17 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 15, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 8), uint16] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    multiply(%18, %19) /* ty=Tensor[(7, 15, 8), uint16] */
  };
  %20(%var_3241) /* ty=Tensor[(7, 15, 8), uint16] */
}

def @func_8996(%var_8977: Tensor[(13, 1, 7), int64]) -> (Tensor[(13, 10, 7), int64], Tensor[(7, 2, 16), float32], Tensor[(13, 1, 7), float64]) {
  %21 = cast(%var_8977, dtype="int64") /* ty=Tensor[(13, 1, 7), int64] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 10, 7), int64] */, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %23 = cast(%var_8977, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
  %24 = minimum(%21, %22) /* ty=Tensor[(13, 10, 7), int64] */;
  %25 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
  %26 = sin(%23) /* ty=Tensor[(13, 1, 7), float64] */;
  (%24, %25, %26)
}

def @func_7283(%var_7282: Tensor[(13, 55), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(13, 55), float64]) {
  %34 = fn (%var_7278: Tensor[(13, 55), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(13, 55), float64]) {
    %27 = cast(%var_7278, dtype="float64") /* ty=Tensor[(13, 55), float64] */;
    %28 = cast(%var_7278, dtype="float64") /* ty=Tensor[(13, 55), float64] */;
    %29 = reshape(%27, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
    %30 = reshape(%28, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
    %31 = @func_2418(%29, %30) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) */;
    %32 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
    %33 = %31.1;
    (%32, %33, %var_7278)
  };
  %34(%var_7282) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(13, 55), float64]) */
}

def @func_12228() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(180), float32], Tensor[(7, 2, 16), float32]) {
  %43 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(180), float32], Tensor[(7, 2, 16), float32]) {
    %35 = @func_11395() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %37 = reshape(%36, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %38 = @func_2309(%37) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) */;
    %39 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %40 = %35.0;
    %41 = %38.3;
    %42 = %39.0;
    (%40, %41, meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, %42)
  };
  %43() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(180), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_10992() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_10990() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_7137() -> Tensor[(7, 2, 16), float32] {
  %44 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %44.0
}

def @func_13135() -> (Tensor[(7, 2, 16), float32],) {
  @func_13133() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_2394(%var_2392: Tensor[(16, 9, 16), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) {
  @func_2391(%var_2392) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) */
}

def @func_7813() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  @func_7811() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */
}

def @func_7689(%var_7688: Tensor[(11, 2), float32]) -> (Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) {
  %49 = fn (%var_7670: Tensor[(11, 2), float32]) -> (Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) {
    %45 = cast(%var_7670, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
    %46 = @func_3378() /* ty=(Tensor[(7, 2, 16), bool],) */;
    %47 = asinh(%45) /* ty=Tensor[(11, 2), float32] */;
    %48 = %46.0;
    (%47, %48)
  };
  %49(%var_7688) /* ty=(Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) */
}

def @func_4601() -> (Tensor[(7, 2, 16), float32],) {
  %50 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %51 = %50.0;
  (%51,)
}

def @func_4252() -> Tensor[(7, 2, 16), float64] {
  @func_4250() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_11357(%var_11355: int8, %var_11356: Tensor[(12, 6, 3), int8]) -> Tensor[(12, 6, 3), int8] {
  %54 = fn (%var_11349: int8, %var_11350: Tensor[(12, 6, 3), int8]) -> Tensor[(12, 6, 3), int8] {
    %52 = cast(%var_11349, dtype="int8") /* ty=int8 */;
    %53 = cast(%var_11350, dtype="int8") /* ty=Tensor[(12, 6, 3), int8] */;
    right_shift(%52, %53) /* ty=Tensor[(12, 6, 3), int8] */
  };
  %54(%var_11355, %var_11356) /* ty=Tensor[(12, 6, 3), int8] */
}

def @func_1956() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %59 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %55 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %56 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %57 = %55.0;
    %58 = %56.0;
    (%57, %58)
  };
  %59() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_6378() -> Tensor[(7, 2, 16), float64] {
  %60 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %60.0
}

def @func_503() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */
}

def @func_4928() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) {
  %61 = @func_1805() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %62 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %63 = %61.0;
  %64 = %62.1;
  (%63, %64)
}

def @func_6557(%var_6556: Tensor[(5, 42), int32]) -> (Tensor[(7, 2, 16), uint64], Tensor[(5, 42), int32], Tensor[(5, 42), int32]) {
  %71 = fn (%var_6549: Tensor[(5, 42), int32]) -> (Tensor[(7, 2, 16), uint64], Tensor[(5, 42), int32], Tensor[(5, 42), int32]) {
    %65 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
    %66 = cast(%var_6549, dtype="int32") /* ty=Tensor[(5, 42), int32] */;
    %67 = reshape(%66, newshape=[5, 42]) /* ty=Tensor[(5, 42), int32] */;
    %68 = @func_6357(%67) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) */;
    %69 = %65.1;
    %70 = %68.3;
    (%69, %70, %var_6549)
  };
  %71(%var_6556) /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(5, 42), int32], Tensor[(5, 42), int32]) */
}

def @func_8402(%var_8398: Tensor[(28), bool], %var_8399: Tensor[(224), bool]) -> (Tensor[(10, 7, 6), bool], Tensor[(672), float64], Tensor[(8, 7, 4), bool], Tensor[(28), bool], Tensor[(224), bool]) {
  %72 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
  %73 = @func_6989() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) */;
  %74 = cast(%var_8398, dtype="bool") /* ty=Tensor[(28), bool] */;
  %75 = cast(%var_8399, dtype="bool") /* ty=Tensor[(224), bool] */;
  %76 = reshape(%74, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), bool] */;
  %77 = reshape(%75, newshape=[8, 7, 4]) /* ty=Tensor[(8, 7, 4), bool] */;
  %78 = @func_4033(%76, %77) /* ty=(Tensor[(8, 7, 4), bool],) */;
  %79 = %72.0;
  %80 = %73.1;
  %81 = %78.0;
  (%79, %80, %81, %var_8398, %var_8399)
}

def @func_12423() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %82 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  %83 = @func_9170() /* ty=Tensor[(7, 2, 16), float64] */;
  (%82, %83)
}

def @func_8489() -> (Tensor[(12, 9, 13), int32],) {
  @func_8487() /* ty=(Tensor[(12, 9, 13), int32],) */
}

def @func_6305() -> Tensor[(7, 2, 16), float32] {
  %84 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_1096() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %84() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2986() -> Tensor[(3, 16, 14), float64] {
  @func_2984() /* ty=Tensor[(3, 16, 14), float64] */
}

def @func_6293() -> int32 {
  @func_6291() /* ty=int32 */
}

def @func_9438() -> (Tensor[(1, 3, 3), float32],) {
  %87 = fn () -> (Tensor[(1, 3, 3), float32],) {
    %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
    %86 = rsqrt(%85) /* ty=Tensor[(1, 3, 3), float32] */;
    (%86,)
  };
  %87() /* ty=(Tensor[(1, 3, 3), float32],) */
}

def @func_9924() -> (Tensor[(10, 7, 6), bool], Tensor[(4, 12, 15), float32], Tensor[(720), float32]) {
  @func_9922() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(4, 12, 15), float32], Tensor[(720), float32]) */
}

def @func_11282() -> Tensor[(7, 2, 16), float32] {
  @func_4896() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_11323(%var_11305: Tensor[(6, 9, 14), int64]) -> (Tensor[(6, 9, 14), int64], Tensor[(7, 2, 16), float32]) {
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 9, 14), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 14), int64] */;
  %89 = shape_of(%var_11305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_11305, dtype="int64") /* ty=Tensor[(6, 9, 14), int64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %92 = @func_8285() /* ty=(Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %93 = bitwise_and(%90, %91) /* ty=Tensor[(6, 9, 14), int64] */;
  %94 = %92.1;
  (%93, %94)
}

def @func_4321(%var_4284: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) {
  %95 = @func_2984() /* ty=Tensor[(3, 16, 14), float64] */;
  %96 = cast(%var_4284, dtype="int8") /* ty=Tensor[(3, 16, 14), int8] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="int8") /* ty=Tensor[(3, 16, 14), int8] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %100 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %101 = cast(%95, dtype="uint8") /* ty=Tensor[(3, 16, 14), uint8] */;
  %102 = shape_of(%var_4284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_4284, dtype="uint8") /* ty=Tensor[(3, 16, 14), uint8] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %105 = add(%98, %99) /* ty=Tensor[(3, 16, 14), int8] */;
  %106 = %100.2;
  %107 = right_shift(%103, %104) /* ty=Tensor[(3, 16, 14), uint8] */;
  (%105, %106, %107)
}

def @func_9152() -> Tensor[(7, 2, 16), float32] {
  %109 = fn () -> Tensor[(7, 2, 16), float32] {
    %108 = @func_8285() /* ty=(Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %108.1
  };
  %109() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_134() -> (Tensor[(7, 2, 16), float32],) {
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %111 = sigmoid(%110) /* ty=Tensor[(7, 2, 16), float32] */;
  (%111,)
}

def @func_7903() -> Tensor[(7, 2, 16), bool] {
  @func_7901() /* ty=Tensor[(7, 2, 16), bool] */
}

def @func_5681() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  @func_5679() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) */
}

def @func_7139() -> Tensor[(7, 2, 16), float32] {
  @func_7137() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_8828() -> (Tensor[(7, 2, 16), float32],) {
  %112 = @func_7137() /* ty=Tensor[(7, 2, 16), float32] */;
  (%112,)
}

def @func_6191(%var_6190: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), float32] {
  %118 = fn (%var_6182: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), float32] {
    %113 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
    %114 = cast(%var_6182, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%113, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%116, %117) /* ty=Tensor[(7, 2, 16), float32] */
  };
  %118(%var_6190) /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_1664(%var_1663: Tensor[(1, 210), int32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) {
  %124 = fn (%var_1654: Tensor[(1, 210), int32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) {
    %119 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %120 = cast(%var_1654, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
    %121 = reshape(%120, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
    %122 = %119.0;
    %123 = @func_290(%121) /* ty=Tensor[(7, 6, 5), int32] */;
    (%122, %123, %var_1654)
  };
  %124(%var_1663) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) */
}

def @func_11092(%var_11090: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(14, 6, 48), float64], Tensor[(14, 6, 48), float64]) {
  @func_11089(%var_11090) /* ty=(Tensor[(7, 5, 13), float64], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(14, 6, 48), float64], Tensor[(14, 6, 48), float64]) */
}

def @func_13772() -> (Tensor[(7, 2, 16), bool],) {
  @func_13770() /* ty=(Tensor[(7, 2, 16), bool],) */
}

def @func_5745() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_5743() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_13480() -> (Tensor[(7, 2, 16), float32],) {
  %127 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %125 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %126 = %125.0;
    (%126,)
  };
  %127() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5395() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) {
  @func_5393() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) */
}

def @func_7973() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %128 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %129 = @func_6702() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %130 = %128.0;
  %131 = %129.2;
  (%130, %131)
}

def @func_5328() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_5326() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_6788() -> Tensor[(7, 2, 16), uint64] {
  %132 = fn () -> Tensor[(7, 2, 16), uint64] {
    @func_4199() /* ty=Tensor[(7, 2, 16), uint64] */
  };
  %132() /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_10271() -> (Tensor[(12, 9, 13), float32],) {
  %135 = fn () -> (Tensor[(12, 9, 13), float32],) {
    %133 = @func_9855() /* ty=(Tensor[(12, 9, 13), float32],) */;
    %134 = %133.0;
    (%134,)
  };
  %135() /* ty=(Tensor[(12, 9, 13), float32],) */
}

def @func_11940() -> (Tensor[(7, 2, 16), float32],) {
  @func_11938() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13509(%var_13507: Tensor[(144), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(144), float64]) {
  @func_13506(%var_13507) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(144), float64]) */
}

def @func_9731() -> Tensor[(7, 2, 16), float32] {
  %137 = fn () -> Tensor[(7, 2, 16), float32] {
    %136 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %136.0
  };
  %137() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_3171(%var_3170: Tensor[(210), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
  %148 = fn (%var_3163: Tensor[(210), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
    %138 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
    %139 = %138.0;
    %140 = cast(%139, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %141 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %142 = cast(%var_3163, dtype="float32") /* ty=Tensor[(210), float32] */;
    %143 = reshape(%142, newshape=[3, 7, 10]) /* ty=Tensor[(3, 7, 10), float32] */;
    %144 = @func_2215(%143) /* ty=(Tensor[(3, 7, 10), float32],) */;
    %145 = tan(%140) /* ty=Tensor[(7, 2, 16), float64] */;
    %146 = %141.0;
    %147 = %144.0;
    (%145, %146, %147, %var_3163)
  };
  %148(%var_3170) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */
}

def @func_13952(%var_13950: Tensor[(48), uint32], %var_13951: Tensor[(168), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(3, 4, 4), int16], Tensor[(3, 4, 4), float64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(6, 2, 14), bool], Tensor[(168), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
  %179 = fn (%var_13846: Tensor[(48), uint32], %var_13928: Tensor[(168), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(3, 4, 4), int16], Tensor[(3, 4, 4), float64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(6, 2, 14), bool], Tensor[(168), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
    %149 = @func_12423() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) */;
    %150 = cast(%var_13846, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %151 = reshape(%150, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
    %152 = @func_1748(%151) /* ty=Tensor[(3, 4, 4), bool] */;
    %153 = cast(%var_13846, dtype="bool") /* ty=Tensor[(48), bool] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%152, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %157 = not_equal(%155, %156) /* ty=Tensor[(3, 4, 4), bool] */;
    %158 = cast(%157, dtype="int16") /* ty=Tensor[(3, 4, 4), int16] */;
    %159 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %160 = cast(%152, dtype="int16") /* ty=Tensor[(3, 4, 4), int16] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %162 = cast(%152, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
    %163 = @func_13297() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %164 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %165 = cast(%var_13928, dtype="float32") /* ty=Tensor[(168), float32] */;
    %166 = cast(%var_13928, dtype="float32") /* ty=Tensor[(168), float32] */;
    %167 = reshape(%165, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
    %168 = reshape(%166, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
    %169 = @func_11124(%167, %168) /* ty=(Tensor[(6, 2, 14), bool],) */;
    %170 = %149.0;
    %171 = minimum(%160, %161) /* ty=Tensor[(3, 4, 4), int16] */;
    %172 = acosh(%162) /* ty=Tensor[(3, 4, 4), float64] */;
    %173 = %163.0;
    %174 = @func_5132() /* ty=Tensor[(7, 2, 16), float32] */;
    %175 = %164.0;
    %176 = %169.0;
    %177 = @func_9958() /* ty=Tensor[(7, 2, 16), float32] */;
    %178 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
    (%170, %171, %172, %173, %174, %175, %176, %var_13928, %177, %178)
  };
  %179(%var_13950, %var_13951) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(3, 4, 4), int16], Tensor[(3, 4, 4), float64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(6, 2, 14), bool], Tensor[(168), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) */
}

def @func_11952(%var_11946: Tensor[(10, 5, 5), float32]) -> (Tensor[(10, 5, 5), float32], Tensor[(7, 2, 16), float32]) {
  %180 = cast(%var_11946, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %181 = @func_3232() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %182 = acosh(%180) /* ty=Tensor[(10, 5, 5), float32] */;
  %183 = %181.0;
  (%182, %183)
}

def @func_12358() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64]) {
  %184 = @func_4150() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %185 = %184.0;
  %186 = @func_7991() /* ty=Tensor[(7, 2, 16), bool] */;
  %187 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%185, %186, %187)
}

def @func_8096(%var_8094: Tensor[(13, 11, 4), float32], %var_8095: Tensor[(13, 11, 4), float32]) -> (Tensor[(13, 11, 4), float32], Tensor[(13, 11, 4), float32], Tensor[(7, 2, 16), float32]) {
  @func_8092(%var_8094, %var_8095) /* ty=(Tensor[(13, 11, 4), float32], Tensor[(13, 11, 4), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_10625() -> Tensor[(7, 2, 16), float32] {
  %188 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %188.0
}

def @func_13051(%var_13024: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
  %189 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %190 = cast(%var_13024, dtype="float32") /* ty=Tensor[(56), float32] */;
  %191 = reshape(%190, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
  %192 = @func_1518(%191) /* ty=(Tensor[(14, 1, 4), float32],) */;
  %193 = %189.0;
  %194 = %192.0;
  (%193, %194, %var_13024)
}

def @func_8046() -> (Tensor[(7, 2, 16), float32],) {
  %195 = @func_5132() /* ty=Tensor[(7, 2, 16), float32] */;
  (%195,)
}

def @func_11526() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_11524() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_12518() -> Tensor[(7, 2, 16), float32] {
  %196 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %196.0
}

def @func_6380() -> Tensor[(7, 2, 16), float64] {
  @func_6378() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_13298() -> (Tensor[(7, 2, 16), float64],) {
  %198 = fn () -> (Tensor[(7, 2, 16), float64],) {
    %197 = @func_9161() /* ty=Tensor[(7, 2, 16), float64] */;
    (%197,)
  };
  %198() /* ty=(Tensor[(7, 2, 16), float64],) */
}

def @func_767(%var_760: int32) -> (Tensor[(12, 9, 13), int32],) {
  %199 = cast(%var_760, dtype="int32") /* ty=int32 */;
  %200 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 9, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 9, 13), int32] */;
  %201 = left_shift(%199, %200) /* ty=Tensor[(12, 9, 13), int32] */;
  (%201,)
}

def @func_11089(%var_11041: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(14, 6, 48), float64], Tensor[(14, 6, 48), float64]) {
  %202 = cast(%var_11041, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %203 = reshape(%202, newshape=[48]) /* ty=Tensor[(48), uint32] */;
  %204 = @func_2640(%203) /* ty=(Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) */;
  %205 = @func_8135() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %206 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %208 = sin(%207) /* ty=Tensor[(14, 6, 1), float32] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %210 = cast(%var_11041, dtype="float64") /* ty=Tensor[(48), float64] */;
  %211 = floor_divide(%209, %210) /* ty=Tensor[(14, 6, 48), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(14, 6, 48), float64] */;
  %213 = cast(%211, dtype="float64") /* ty=Tensor[(14, 6, 48), float64] */;
  %214 = %204.0;
  %215 = %205.1;
  %216 = %206.0;
  %217 = atanh(%212) /* ty=Tensor[(14, 6, 48), float64] */;
  %218 = atan(%213) /* ty=Tensor[(14, 6, 48), float64] */;
  (%214, %215, %216, %217, %218)
}

def @func_4020() -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) {
  %223 = fn () -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) {
    %219 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
    %220 = @func_2783() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %221 = %219.0;
    %222 = %220.0;
    (%221, %222)
  };
  %223() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */
}

def @func_1943() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) {
  @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */
}

def @func_2177() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_10310() -> (Tensor[(3, 16, 14), float64],) {
  @func_10308() /* ty=(Tensor[(3, 16, 14), float64],) */
}

def @func_3749() -> (Tensor[(7, 2, 16), float32],) {
  %224 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %225 = %224.0;
  (%225,)
}

def @func_12322(%var_12321: Tensor[(12, 1, 12), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) {
  %237 = fn (%var_12301: Tensor[(12, 1, 12), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) {
    %226 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %227 = reshape(%226, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
    %228 = @func_1879(%227) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) */;
    %229 = cast(%var_12301, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %230 = log10(%229) /* ty=Tensor[(12, 1, 12), float64] */;
    %231 = cast(%var_12301, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %235 = %228.1;
    %236 = mod(%233, %234) /* ty=Tensor[(12, ?, 12), float64] */;
    (%235, meta[relay.Constant][8] /* ty=Tensor[(180), float32] */, %236)
  };
  %237(%var_12321) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) */
}

def @func_9356() -> (Tensor[(7, 2, 16), float64],) {
  %239 = fn () -> (Tensor[(7, 2, 16), float64],) {
    %238 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
    (%238,)
  };
  %239() /* ty=(Tensor[(7, 2, 16), float64],) */
}

def @func_5069() -> (Tensor[(7, 2, 16), float32],) {
  @func_5067() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13430() -> Tensor[(7, 2, 16), float32] {
  @func_13428() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_7347() -> (Tensor[(7, 2, 16), float32],) {
  %241 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %240 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
    (%240,)
  };
  %241() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5506() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
  @func_5504() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) */
}

def @func_4259() -> Tensor[(7, 2, 16), float32] {
  @func_4257() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2505() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) {
  %242 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %243 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %244 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %245 = %242.0;
  %246 = %243.0;
  %247 = %244.2;
  (%245, %246, %247)
}

def @func_13770() -> (Tensor[(7, 2, 16), bool],) {
  %248 = @func_6496() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) */;
  %249 = %248.1;
  (%249,)
}

def @func_12594() -> Tensor[(7, 2, 16), float32] {
  %250 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_4183() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %250() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2821() -> (Tensor[(7, 2, 16), float32],) {
  @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_9170() -> Tensor[(7, 2, 16), float64] {
  %251 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %251.0
}

def @func_5036() -> (Tensor[(7, 2, 16), float64],) {
  %253 = fn () -> (Tensor[(7, 2, 16), float64],) {
    %252 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
    (%252,)
  };
  %253() /* ty=(Tensor[(7, 2, 16), float64],) */
}

def @func_13638() -> (Tensor[(1, 210), int32],) {
  %256 = fn () -> (Tensor[(1, 210), int32],) {
    %254 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
    %255 = %254.3;
    (%255,)
  };
  %256() /* ty=(Tensor[(1, 210), int32],) */
}

def @func_1520(%var_1519: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, 1, 4), float32],) {
  %259 = fn (%var_1506: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, 1, 4), float32],) {
    %257 = cast(%var_1506, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
    %258 = atan(%257) /* ty=Tensor[(14, 1, 4), float32] */;
    (%258,)
  };
  %259(%var_1519) /* ty=(Tensor[(14, 1, 4), float32],) */
}

def @func_12812() -> Tensor[(7, 2, 16), float32] {
  %261 = fn () -> Tensor[(7, 2, 16), float32] {
    %260 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %260.0
  };
  %261() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_5792() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */
}

def @func_10483() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
  %265 = fn () -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
    %262 = @func_8543() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
    %263 = @func_7901() /* ty=Tensor[(7, 2, 16), bool] */;
    %264 = %262.1;
    (%263, %264)
  };
  %265() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) */
}

def @func_8613() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %266 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %267 = %266.0;
  %268 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  (%267, %268)
}

def @func_11209() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %269 = @func_5917() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %270 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %271 = @func_10748() /* ty=Tensor[(7, 2, 16), float32] */;
  %272 = %269.0;
  %273 = @func_9427() /* ty=Tensor[(7, 2, 16), float64] */;
  %274 = %270.4;
  (%271, %272, %273, %274)
}

def @func_4058() -> Tensor[(7, 2, 16), float32] {
  @func_4056() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_9786() -> (Tensor[(10, 7, 6), bool],) {
  %275 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %276 = %275.1;
  (%276,)
}

def @func_5545() -> Tensor[(7, 2, 16), float32] {
  %278 = fn () -> Tensor[(7, 2, 16), float32] {
    %277 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %277.0
  };
  %278() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_1982() -> (Tensor[(7, 2, 16), float32],) {
  %279 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  (%279,)
}

def @func_629() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  %280 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
  %281 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %283 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %284 = %280.0;
  %285 = sin(%282) /* ty=Tensor[(7, 2, 16), float32] */;
  %286 = %283.1;
  (%284, %285, %286)
}

def @func_7232(%var_7195: Tensor[(3, 4, 7), float64]) -> Tensor[(3, 4, 7), float64] {
  %287 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
  %288 = %287.1;
  %289 = cast(%288, dtype="int64") /* ty=Tensor[(3, 4, ?), int64] */;
  %290 = cast(%var_7195, dtype="int64") /* ty=Tensor[(3, 4, 7), int64] */;
  %291 = bitwise_or(%289, %290) /* ty=Tensor[(3, 4, 7), int64] */;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %293 = sigmoid(%292) /* ty=Tensor[(3, 4, 7), float32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%296, %297) /* ty=Tensor[(3, 4, 7), float64] */
}

def @func_10726() -> (Tensor[(7, 2, 16), uint64],) {
  @func_10724() /* ty=(Tensor[(7, 2, 16), uint64],) */
}

def @func_13326() -> (Tensor[(7, 2, 16), float32],) {
  %300 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %298 = @func_10410() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %299 = %298.0;
    (%299,)
  };
  %300() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_290(%var_282: Tensor[(7, 6, 5), int32]) -> Tensor[(7, 6, 5), int32] {
  %301 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 6, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 6, 5), int32] */;
  %302 = shape_of(%var_282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_282, dtype="int32") /* ty=Tensor[(7, 6, 5), int32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%303, %304) /* ty=Tensor[(7, 6, 5), int32] */
}

def @func_11812() -> (Tensor[(1, 3, 3), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(8, 7, 4), bool], Tensor[(28, 1), bool]) {
  %305 = @func_9437() /* ty=(Tensor[(1, 3, 3), float32],) */;
  %306 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %307 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %308 = @func_6496() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) */;
  %309 = cast(meta[relay.Constant][10] /* ty=Tensor[(28, 1), bool] */, dtype="bool") /* ty=Tensor[(28, 1), bool] */;
  %310 = %307.1;
  %311 = cast(%310, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %312 = reshape(%309, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), bool] */;
  %313 = reshape(%311, newshape=[8, 7, 4]) /* ty=Tensor[(8, 7, 4), bool] */;
  %314 = @func_4033(%312, %313) /* ty=(Tensor[(8, 7, 4), bool],) */;
  %315 = %305.0;
  %316 = %306.0;
  %317 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
  %318 = %308.2;
  %319 = @func_5941() /* ty=Tensor[(7, 2, 16), float32] */;
  %320 = %314.0;
  (%315, %316, %317, %310, %318, %319, %320, meta[relay.Constant][10] /* ty=Tensor[(28, 1), bool] */)
}

def @func_7651() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %325 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %321 = @func_3555() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %322 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
    %323 = %321.1;
    %324 = %322.4;
    (%323, %324)
  };
  %325() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_11955(%var_11953: Tensor[(10, 5, 5), float32]) -> (Tensor[(10, 5, 5), float32], Tensor[(7, 2, 16), float32]) {
  @func_11952(%var_11953) /* ty=(Tensor[(10, 5, 5), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_9390(%var_9389: Tensor[(13, 10, 4), bool]) -> (Tensor[(13, 10, 4), bool],) {
  %331 = fn (%var_9381: Tensor[(13, 10, 4), bool]) -> (Tensor[(13, 10, 4), bool],) {
    %326 = cast(%var_9381, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
    %327 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 10, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 10, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %330 = logical_and(%328, %329) /* ty=Tensor[(13, 10, 4), bool] */;
    (%330,)
  };
  %331(%var_9389) /* ty=(Tensor[(13, 10, 4), bool],) */
}

def @func_12582(%var_12581: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), float32],) {
  %334 = fn (%var_12572: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), float32],) {
    %332 = cast(%var_12572, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
    %333 = tan(%332) /* ty=Tensor[(7, 2, 2), float32] */;
    (%333,)
  };
  %334(%var_12581) /* ty=(Tensor[(7, 2, 2), float32],) */
}

def @func_10302() -> (Tensor[(7, 2, 16), float32],) {
  %335 = @func_5067() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %336 = %335.0;
  (%336,)
}

def @func_1856() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %343 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
    %337 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %338 = %337.0;
    %339 = cast(%338, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %340 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %341 = acos(%339) /* ty=Tensor[(7, 2, 16), float64] */;
    %342 = %340.0;
    (%341, %342)
  };
  %343() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_7159() -> (Tensor[(7, 2, 16), float32],) {
  %344 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %345 = %344.0;
  (%345,)
}

def @func_9427() -> Tensor[(7, 2, 16), float64] {
  @func_6378() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_4036(%var_4034: Tensor[(1, 7, 4), bool], %var_4035: Tensor[(8, 7, 4), bool]) -> (Tensor[(8, 7, 4), bool],) {
  %349 = fn (%var_4028: Tensor[(1, 7, 4), bool], %var_4029: Tensor[(8, 7, 4), bool]) -> (Tensor[(8, 7, 4), bool],) {
    %346 = cast(%var_4028, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
    %347 = cast(%var_4029, dtype="bool") /* ty=Tensor[(8, 7, 4), bool] */;
    %348 = logical_and(%346, %347) /* ty=Tensor[(8, 7, 4), bool] */;
    (%348,)
  };
  %349(%var_4034, %var_4035) /* ty=(Tensor[(8, 7, 4), bool],) */
}

def @func_5067() -> (Tensor[(7, 2, 16), float32],) {
  %350 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %351 = %350.0;
  (%351,)
}

def @func_5790() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  %352 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %353 = @func_4896() /* ty=Tensor[(7, 2, 16), float32] */;
  %354 = %352.1;
  (%353, %354)
}

def @func_12291(%var_12290: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), bool], Tensor[(7, 2, 16), float32]) {
  %364 = fn (%var_12279: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), bool], Tensor[(7, 2, 16), float32]) {
    %355 = @func_10111() /* ty=(Tensor[(12, 9, 13), float32],) */;
    %356 = %355.0;
    %357 = cast(%var_12279, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%356, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = @func_6702() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %362 = not_equal(%359, %360) /* ty=Tensor[(12, 9, 13), bool] */;
    %363 = %361.2;
    (%362, %363)
  };
  %364(%var_12290) /* ty=(Tensor[(12, 9, 13), bool], Tensor[(7, 2, 16), float32]) */
}

def @func_2311(%var_2310: Tensor[(180), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) {
  %390 = fn (%var_2298: Tensor[(180), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) {
    %365 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
    %366 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
    %367 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %368 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
    %369 = cast(meta[relay.Constant][12] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %370 = reshape(%369, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
    %371 = @func_1518(%370) /* ty=(Tensor[(14, 1, 4), float32],) */;
    %372 = %371.0;
    %373 = cast(meta[relay.Constant][12] /* ty=Tensor[(56), float32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
    %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%372, dtype="bool") /* ty=Tensor[(14, 1, 4), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %377 = cast(%var_2298, dtype="float32") /* ty=Tensor[(180), float32] */;
    %378 = reshape(%377, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
    %379 = @func_1879(%378) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) */;
    %380 = cast(%372, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
    %381 = reshape(%380, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
    %382 = @func_1518(%381) /* ty=(Tensor[(14, 1, 4), float32],) */;
    %383 = %365.1;
    %384 = %366.0;
    %385 = %367.0;
    %386 = %368.0;
    %387 = less(%375, %376) /* ty=Tensor[(14, ?, 4), bool] */;
    %388 = %379.0;
    %389 = %382.0;
    (%383, %384, %385, %386, %387, %388, %var_2298, %389)
  };
  %390(%var_2310) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(14, ?, 4), bool], Tensor[(12, 15, 1), float32], Tensor[(180), float32], Tensor[(14, 1, 4), float32]) */
}

def @func_8782(%var_8780: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), float64], Tensor[(7, 2, 16), uint64]) {
  @func_8779(%var_8780) /* ty=(Tensor[(11, 12, 14), float64], Tensor[(7, 2, 16), uint64]) */
}

def @func_4856(%var_4853: Tensor[(672), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) {
  %391 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %392 = cast(%var_4853, dtype="float64") /* ty=Tensor[(672), float64] */;
  %393 = reshape(%392, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float64] */;
  %394 = @func_4321(%393) /* ty=(Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) */;
  %395 = %391.0;
  %396 = %394.0;
  (%395, %396, %var_4853)
}

def @func_5417() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %401 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
    %397 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %398 = @func_1805() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %399 = %397.0;
    %400 = %398.0;
    (%399, %400)
  };
  %401() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_6570(%var_6568: Tensor[(10, 10, 10), uint64]) -> Tensor[(10, 10, 10), bool] {
  @func_6567(%var_6568) /* ty=Tensor[(10, 10, 10), bool] */
}

def @func_2805() -> (Tensor[(7, 2, 16), float32],) {
  %402 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %403 = %402.0;
  (%403,)
}

def @func_5858() -> (Tensor[(7, 2, 16), float32],) {
  %404 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %405 = %404.0;
  (%405,)
}

def @func_9137() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(1, 22), float32]) {
  %414 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(1, 22), float32]) {
    %406 = @func_5504() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) */;
    %407 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %408 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
    %409 = reshape(%408, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
    %410 = @func_7687(%409) /* ty=(Tensor[(11, 2), float32], Tensor[(7, 2, 16), bool]) */;
    %411 = %406.1;
    %412 = %407.0;
    %413 = %410.1;
    (%411, %412, %413, meta[relay.Constant][13] /* ty=Tensor[(1, 22), float32] */)
  };
  %414() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(1, 22), float32]) */
}

def @func_1248() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %424 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %415 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %416 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %417 = %415.0;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %419 = reshape(%418, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
    %420 = %416.1;
    %421 = @func_941(%419) /* ty=Tensor[(7, 2, 16), uint64] */;
    %422 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
    %423 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
    (%417, %420, %421, %422, %423)
  };
  %424() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_4734() -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  @func_4732() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */
}

def @func_8487() -> (Tensor[(12, 9, 13), int32],) {
  %425 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %426 = %425.0;
  (%426,)
}

def @func_11258(%var_11254: Tensor[(14, 14, 13), int64], %var_11255: Tensor[(14, 14, 13), int64], %var_11256: Tensor[(48), uint32], %var_11257: Tensor[(210), int32]) -> (Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
  @func_11252(%var_11254, %var_11255, %var_11256, %var_11257) /* ty=(Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */
}

def @func_11304() -> (Tensor[(1, 210), int32],) {
  @func_11302() /* ty=(Tensor[(1, 210), int32],) */
}

def @func_12166() -> Tensor[(7, 2, 16), float32] {
  @func_12164() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_4732() -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %427 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %428 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %429 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %430 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %431 = %427.0;
  %432 = %428.1;
  %433 = %429.2;
  %434 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %435 = %430.0;
  (%431, %432, %433, %434, %435)
}

def @func_8340() -> (Tensor[(10, 9, 2), int64],) {
  %439 = fn () -> (Tensor[(10, 9, 2), int64],) {
    %436 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %437 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(10, 9, 2), int64] */;
    %438 = minimum(%436, %437) /* ty=Tensor[(10, 9, 2), int64] */;
    (%438,)
  };
  %439() /* ty=(Tensor[(10, 9, 2), int64],) */
}

def @func_8567() -> Tensor[(12, 9, 13), float32] {
  %440 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
  %441 = %440.0;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  tan(%442) /* ty=Tensor[(12, 9, 13), float32] */
}

def @func_2095() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) {
  %448 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) {
    %443 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %444 = %443.0;
    %445 = cast(%444, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %446 = reshape(%445, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
    %447 = @func_941(%446) /* ty=Tensor[(7, 2, 16), uint64] */;
    (%444, %447)
  };
  %448() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */
}

def @func_2033() -> (Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) {
  @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */
}

def @func_13378() -> (Tensor[(7, 2, 16), float32],) {
  %449 = @func_7025() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %450 = %449.0;
  (%450,)
}

def @func_1285() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) {
  @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */
}

def @func_6704() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_6702() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_7992() -> Tensor[(7, 2, 16), bool] {
  %451 = fn () -> Tensor[(7, 2, 16), bool] {
    @func_7901() /* ty=Tensor[(7, 2, 16), bool] */
  };
  %451() /* ty=Tensor[(7, 2, 16), bool] */
}

def @func_12164() -> Tensor[(7, 2, 16), float32] {
  %452 = @func_10482() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) */;
  %452.1
}

def @func_3615(%var_3614: Tensor[(3, 11, 14), int8]) -> Tensor[(3, 11, 14), int8] {
  %457 = fn (%var_3604: Tensor[(3, 11, 14), int8]) -> Tensor[(3, 11, 14), int8] {
    %453 = cast(%var_3604, dtype="int8") /* ty=Tensor[(3, 11, 14), int8] */;
    %454 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(3, 11, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 11, 14), int8] */, dtype="int8") /* ty=Tensor[(3, 11, 14), int8] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    subtract(%455, %456) /* ty=Tensor[(3, 11, 14), int8] */
  };
  %457(%var_3614) /* ty=Tensor[(3, 11, 14), int8] */
}

def @func_8048() -> (Tensor[(7, 2, 16), float32],) {
  @func_8046() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_10112() -> (Tensor[(12, 9, 13), float32],) {
  %460 = fn () -> (Tensor[(12, 9, 13), float32],) {
    %458 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
    %459 = %458.0;
    (%459,)
  };
  %460() /* ty=(Tensor[(12, 9, 13), float32],) */
}

def @func_10251() -> (Tensor[(7, 2, 16), float64], Tensor[(12, 9, 13), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), float64]) {
  %461 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %462 = @func_8613() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %463 = @func_3923() /* ty=(Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) */;
  %464 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
  %465 = %461.2;
  %466 = %462.1;
  %467 = %463.0;
  (%464, %465, %466, %467)
}

def @func_8742(%var_8741: Tensor[(7, 8, 8), float32]) -> Tensor[(7, 8, 8), float32] {
  %469 = fn (%var_8736: Tensor[(7, 8, 8), float32]) -> Tensor[(7, 8, 8), float32] {
    %468 = cast(%var_8736, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
    tan(%468) /* ty=Tensor[(7, 8, 8), float32] */
  };
  %469(%var_8741) /* ty=Tensor[(7, 8, 8), float32] */
}

def @func_10253() -> (Tensor[(7, 2, 16), float64], Tensor[(12, 9, 13), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), float64]) {
  @func_10251() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(12, 9, 13), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), float64]) */
}

def @func_944(%var_942: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), uint64] {
  @func_941(%var_942) /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_5743() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %470 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %471 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %472 = %470.1;
  %473 = %471.0;
  (%472, %473)
}

def @func_11124(%var_11112: Tensor[(6, 2, 14), float32], %var_11113: Tensor[(6, 2, 14), float32]) -> (Tensor[(6, 2, 14), bool],) {
  %474 = cast(%var_11113, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
  %475 = shape_of(%var_11112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%var_11112, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = less(%476, %477) /* ty=Tensor[(6, 2, 14), bool] */;
  (%478,)
}

def @func_5133() -> Tensor[(7, 2, 16), float32] {
  %479 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_4896() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %479() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_738() -> (Tensor[(7, 2, 16), float32],) {
  %480 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %481 = %480.0;
  (%481,)
}

def @func_11396() -> (Tensor[(7, 2, 16), float32],) {
  %484 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %482 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %483 = %482.0;
    (%483,)
  };
  %484() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_1984() -> (Tensor[(7, 2, 16), float32],) {
  @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_1097() -> Tensor[(7, 2, 16), float32] {
  %486 = fn () -> Tensor[(7, 2, 16), float32] {
    %485 = @func_896() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %485.2
  };
  %486() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_8135() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
  %487 = @func_7811() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
  %488 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
  %489 = %487.1;
  %490 = %488.0;
  (%489, %490)
}

def @main() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(5, 4, 11), uint64]) {
  %491 = @func_2571() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %492 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %493 = acosh(%492) /* ty=Tensor[(5, 4, 11), float32] */;
  %494 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 4, 11), float32] */, dtype="uint64") /* ty=Tensor[(5, 4, 11), uint64] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="uint64") /* ty=Tensor[(5, 4, 11), uint64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %498 = %491.1;
  %499 = @func_12509() /* ty=Tensor[(7, 2, 16), float64] */;
  %500 = @func_13428() /* ty=Tensor[(7, 2, 16), float32] */;
  %501 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  %502 = bitwise_and(%496, %497) /* ty=Tensor[(5, 4, 11), uint64] */;
  (%498, %499, %500, %501, %502)
}

def @func_5165() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) {
  %514 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) {
    %503 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
    %504 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %505 = reshape(%504, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float64] */;
    %506 = @func_4321(%505) /* ty=(Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) */;
    %507 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %508 = reshape(%507, newshape=[672]) /* ty=Tensor[(672), float64] */;
    %509 = @func_4856(%508) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) */;
    %510 = %503.1;
    %511 = %506.1;
    %512 = %509.2;
    %513 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
    (%510, %511, meta[relay.Constant][17] /* ty=Tensor[(672), float64] */, %512, %513)
  };
  %514() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_4257() -> Tensor[(7, 2, 16), float32] {
  %515 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %515.0
}

def @func_4859(%var_4857: Tensor[(672), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) {
  @func_4856(%var_4857) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), int8], Tensor[(672), float64]) */
}

def @func_5393() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) {
  %516 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %517 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
  %518 = %516.0;
  %519 = %517.0;
  %520 = @func_4250() /* ty=Tensor[(7, 2, 16), float64] */;
  (%518, %519, %520)
}

def @func_242() -> Tensor[(7, 2, 16), float32] {
  %521 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %521.0
}

def @func_4184() -> Tensor[(7, 2, 16), float32] {
  %523 = fn () -> Tensor[(7, 2, 16), float32] {
    %522 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
    %522.1
  };
  %523() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_5874() -> (Tensor[(7, 2, 16), float32],) {
  %524 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %525 = %524.0;
  (%525,)
}

def @func_12961(%var_12960: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), float32], Tensor[(14, 14, 13), bool], Tensor[(1274, 2), int64], Tensor[(48), uint32], Tensor[(210), int32], Tensor[(7, 2, 16), float32], Tensor[(6, 12, 4), float64], Tensor[(7, 2, 16), uint64]) {
  %547 = fn (%var_12908: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), float32], Tensor[(14, 14, 13), bool], Tensor[(1274, 2), int64], Tensor[(48), uint32], Tensor[(210), int32], Tensor[(7, 2, 16), float32], Tensor[(6, 12, 4), float64], Tensor[(7, 2, 16), uint64]) {
    %526 = cast(%var_12908, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
    %527 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(6, 12, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %530 = cast(meta[relay.Constant][19] /* ty=Tensor[(1274, 2), int64] */, dtype="int64") /* ty=Tensor[(1274, 2), int64] */;
    %531 = cast(meta[relay.Constant][19] /* ty=Tensor[(1274, 2), int64] */, dtype="int64") /* ty=Tensor[(1274, 2), int64] */;
    %532 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %533 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
    %534 = reshape(%530, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), int64] */;
    %535 = reshape(%531, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), int64] */;
    %536 = reshape(%532, newshape=[48]) /* ty=Tensor[(48), uint32] */;
    %537 = reshape(%533, newshape=[210]) /* ty=Tensor[(210), int32] */;
    %538 = @func_11252(%534, %535, %536, %537) /* ty=(Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
    %539 = @func_5445() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %540 = cast(%var_12908, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
    %541 = @func_10724() /* ty=(Tensor[(7, 2, 16), uint64],) */;
    %542 = power(%528, %529) /* ty=Tensor[(6, 12, 4), float32] */;
    %543 = %538.0;
    %544 = %539.1;
    %545 = atanh(%540) /* ty=Tensor[(6, 12, 4), float64] */;
    %546 = %541.0;
    (%542, %543, meta[relay.Constant][19] /* ty=Tensor[(1274, 2), int64] */, meta[relay.Constant][20] /* ty=Tensor[(48), uint32] */, meta[relay.Constant][21] /* ty=Tensor[(210), int32] */, %544, %545, %546)
  };
  %547(%var_12960) /* ty=(Tensor[(6, 12, 4), float32], Tensor[(14, 14, 13), bool], Tensor[(1274, 2), int64], Tensor[(48), uint32], Tensor[(210), int32], Tensor[(7, 2, 16), float32], Tensor[(6, 12, 4), float64], Tensor[(7, 2, 16), uint64]) */
}

def @func_3234() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  @func_3232() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */
}

def @func_5919() -> (Tensor[(7, 2, 16), float32],) {
  @func_5917() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_12509() -> Tensor[(7, 2, 16), float64] {
  %548 = @func_11906() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %548.0
}

def @func_10880() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %552 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %549 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
    %550 = %549.0;
    %551 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
    (%550, %551)
  };
  %552() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_7544() -> Tensor[(7, 2, 16), float32] {
  %553 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %553.0
}

def @func_1384() -> Tensor[(7, 2, 16), float32] {
  %555 = fn () -> Tensor[(7, 2, 16), float32] {
    %554 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %554.0
  };
  %555() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_1806() -> (Tensor[(7, 2, 16), float32],) {
  %558 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %556 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %557 = %556.0;
    (%557,)
  };
  %558() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5942() -> Tensor[(7, 2, 16), float32] {
  %559 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_5544() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %559() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2217(%var_2216: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), float32],) {
  %562 = fn (%var_2211: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), float32],) {
    %560 = cast(%var_2211, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
    %561 = log2(%560) /* ty=Tensor[(3, 7, 10), float32] */;
    (%561,)
  };
  %562(%var_2216) /* ty=(Tensor[(3, 7, 10), float32],) */
}

def @func_6359(%var_6358: Tensor[(5, 42), int32]) -> (Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) {
  %572 = fn (%var_6354: Tensor[(5, 42), int32]) -> (Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) {
    %563 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
    %564 = %563.0;
    %565 = cast(%564, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    %566 = cast(%var_6354, dtype="int32") /* ty=Tensor[(5, 42), int32] */;
    %567 = reshape(%566, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
    %568 = @func_1662(%567) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) */;
    %569 = asinh(%565) /* ty=Tensor[(12, 9, 13), float64] */;
    %570 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
    %571 = %568.2;
    (%569, %570, %571, %var_6354)
  };
  %572(%var_6358) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(7, 2, 16), float32], Tensor[(1, 210), int32], Tensor[(5, 42), int32]) */
}

def @func_13445() -> Tensor[(7, 2, 16), float32] {
  @func_13443() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_399(%var_398: Tensor[(15, 7, 3), float64]) -> Tensor[(15, 7, 3), float64] {
  %574 = fn (%var_389: Tensor[(15, 7, 3), float64]) -> Tensor[(15, 7, 3), float64] {
    %573 = cast(%var_389, dtype="float64") /* ty=Tensor[(15, 7, 3), float64] */;
    sqrt(%573) /* ty=Tensor[(15, 7, 3), float64] */
  };
  %574(%var_398) /* ty=Tensor[(15, 7, 3), float64] */
}

def @func_293(%var_291: Tensor[(7, 6, 5), int32]) -> Tensor[(7, 6, 5), int32] {
  @func_290(%var_291) /* ty=Tensor[(7, 6, 5), int32] */
}

def @func_13626(%var_13624: Tensor[(9, 10, 7), uint32], %var_13625: Tensor[(9, 10, 7), uint32]) -> (Tensor[(9, 10, 7), uint32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_13622(%var_13624, %var_13625) /* ty=(Tensor[(9, 10, 7), uint32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_4199() -> Tensor[(7, 2, 16), uint64] {
  %575 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
  %575.1
}

def @func_9960() -> Tensor[(7, 2, 16), float32] {
  @func_9958() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_7459() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) {
  %580 = fn () -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) {
    %576 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %577 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %578 = %576.1;
    %579 = %577.2;
    (%578, %579)
  };
  %580() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) */
}

def @func_2640(%var_2632: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) {
  %581 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %582 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %585 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
  %586 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 13), float64] */, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %589 = bitwise_and(%587, %588) /* ty=Tensor[(7, 5, 13), int8] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %591 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %592 = cast(%var_2632, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %593 = reshape(%592, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
  %594 = multiply(%583, %584) /* ty=Tensor[(7, 5, 13), float64] */;
  %595 = atan(%590) /* ty=Tensor[(7, 5, 13), float32] */;
  %596 = %591.1;
  %597 = @func_1748(%593) /* ty=Tensor[(3, 4, 4), bool] */;
  (%594, %595, %596, %597, %var_2632)
}

def @func_10082() -> (Tensor[(7, 2, 16), float32],) {
  %600 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %598 = @func_8046() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %599 = %598.0;
    (%599,)
  };
  %600() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13506(%var_13499: Tensor[(144), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(144), float64]) {
  %601 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %602 = cast(%var_13499, dtype="float64") /* ty=Tensor[(144), float64] */;
  %603 = reshape(%602, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %604 = @func_12320(%603) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(180), float32], Tensor[(12, ?, 12), float64]) */;
  %605 = %601.0;
  %606 = %604.1;
  (%605, %606, %var_13499)
}

def @func_13054(%var_13052: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
  @func_13051(%var_13052) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */
}

def @func_4151() -> (Tensor[(7, 2, 16), bool],) {
  %609 = fn () -> (Tensor[(7, 2, 16), bool],) {
    %607 = @func_3378() /* ty=(Tensor[(7, 2, 16), bool],) */;
    %608 = %607.0;
    (%608,)
  };
  %609() /* ty=(Tensor[(7, 2, 16), bool],) */
}

def @func_9283() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %615 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %610 = @func_8828() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %611 = @func_7587() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %612 = %610.0;
    %613 = %611.0;
    %614 = @func_7099() /* ty=Tensor[(7, 2, 16), float32] */;
    (%612, %613, %614)
  };
  %615() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_13108(%var_13107: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(56), float32], Tensor[(56), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
  %626 = fn (%var_13081: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(56), float32], Tensor[(56), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) {
    %616 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %617 = cast(%var_13081, dtype="float32") /* ty=Tensor[(56), float32] */;
    %618 = reshape(%617, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %619 = @func_13051(%618) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */;
    %620 = @func_5717() /* ty=(Tensor[(7, 2, 16), bool],) */;
    %621 = @func_5917() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %622 = %616.0;
    %623 = %619.2;
    %624 = %620.0;
    %625 = %621.0;
    (%622, %623, %var_13081, %624, %625)
  };
  %626(%var_13107) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(56), float32], Tensor[(56), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32]) */
}

def @func_1750(%var_1749: Tensor[(3, 4, 4), uint32]) -> Tensor[(3, 4, 4), bool] {
  %636 = fn (%var_1728: Tensor[(3, 4, 4), uint32]) -> Tensor[(3, 4, 4), bool] {
    %627 = cast(%var_1728, dtype="uint32") /* ty=Tensor[(3, 4, 4), uint32] */;
    %628 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4, 4), uint32] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %631 = right_shift(%629, %630) /* ty=Tensor[(3, 4, 4), uint32] */;
    %632 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 4, 4), uint32] */, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%634, %635) /* ty=Tensor[(3, 4, 4), bool] */
  };
  %636(%var_1749) /* ty=Tensor[(3, 4, 4), bool] */
}

def @func_2507() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) {
  @func_2505() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) */
}

def @func_12520() -> Tensor[(7, 2, 16), float32] {
  @func_12518() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_603() -> (Tensor[(7, 2, 16), float32],) {
  %638 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %637 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
    (%637,)
  };
  %638() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_14077() -> int32 {
  %639 = fn () -> int32 {
    @func_6291() /* ty=int32 */
  };
  %639() /* ty=int32 */
}

def @func_11211() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  @func_11209() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) */
}

def @func_770(%var_768: int32) -> (Tensor[(12, 9, 13), int32],) {
  @func_767(%var_768) /* ty=(Tensor[(12, 9, 13), int32],) */
}

def @func_136() -> (Tensor[(7, 2, 16), float32],) {
  @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13622(%var_13589: Tensor[(9, 10, 7), uint32], %var_13590: Tensor[(9, 10, 7), uint32]) -> (Tensor[(9, 10, 7), uint32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %640 = cast(%var_13590, dtype="uint32") /* ty=Tensor[(9, 10, 7), uint32] */;
  %641 = shape_of(%var_13589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_13589, dtype="uint32") /* ty=Tensor[(9, 10, 7), uint32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %644 = bitwise_xor(%642, %643) /* ty=Tensor[(9, 10, 7), uint32] */;
  %645 = @func_8225() /* ty=Tensor[(7, 2, 16), float32] */;
  %646 = @func_9958() /* ty=Tensor[(7, 2, 16), float32] */;
  (%644, %645, %646)
}

def @func_2725(%var_2724: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
  %656 = fn (%var_2719: Tensor[(56), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) {
    %647 = @func_501() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
    %648 = %647.1;
    %649 = cast(%648, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %650 = cast(%var_2719, dtype="float32") /* ty=Tensor[(56), float32] */;
    %651 = reshape(%650, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), float32] */;
    %652 = @func_1518(%651) /* ty=(Tensor[(14, 1, 4), float32],) */;
    %653 = erf(%649) /* ty=Tensor[(7, 2, 16), float32] */;
    %654 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
    %655 = %652.0;
    (%653, %654, %655, %var_2719)
  };
  %656(%var_2724) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */
}

def @func_9856() -> (Tensor[(12, 9, 13), float32],) {
  %659 = fn () -> (Tensor[(12, 9, 13), float32],) {
    %657 = @func_6720() /* ty=(Tensor[(12, 9, 13), float32],) */;
    %658 = %657.0;
    (%658,)
  };
  %659() /* ty=(Tensor[(12, 9, 13), float32],) */
}

def @func_4250() -> Tensor[(7, 2, 16), float64] {
  %660 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %661 = %660.0;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  cosh(%662) /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_2418(%var_2398: Tensor[(11, 13, 5), float64], %var_2399: Tensor[(11, 13, 5), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) {
  %663 = cast(%var_2399, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %664 = shape_of(%var_2398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%var_2398, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %667 = add(%665, %666) /* ty=Tensor[(11, 13, 5), float64] */;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %669 = sqrt(%668) /* ty=Tensor[(11, 13, 5), float32] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %671 = cast(%var_2398, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %672 = log10(%670) /* ty=Tensor[(11, 13, 5), float64] */;
  %673 = asinh(%671) /* ty=Tensor[(11, 13, 5), float64] */;
  (%672, %673)
}

def @func_4353() -> Tensor[(7, 2, 16), float32] {
  %675 = fn () -> Tensor[(7, 2, 16), float32] {
    %674 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %674.0
  };
  %675() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_8285() -> (Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %676 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
  %677 = @func_896() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %678 = @func_5995() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %679 = %676.3;
  %680 = %677.1;
  %681 = %678.2;
  (%679, %680, %681)
}

def @func_5800(%var_5799: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32],) {
  %684 = fn (%var_5793: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32],) {
    %682 = cast(%var_5793, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
    %683 = cosh(%682) /* ty=Tensor[(4, 12, 15), float32] */;
    (%683,)
  };
  %684(%var_5799) /* ty=(Tensor[(4, 12, 15), float32],) */
}

def @func_9172() -> Tensor[(7, 2, 16), float64] {
  @func_9170() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_1283() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) {
  %685 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %686 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %687 = reshape(%686, newshape=[]) /* ty=int32 */;
  %688 = @func_767(%687) /* ty=(Tensor[(12, 9, 13), int32],) */;
  %689 = %685.1;
  %690 = %688.0;
  (%689, %690, 1 /* ty=int32 */)
}

def @func_631() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */
}

def @func_13989() -> Tensor[(7, 2, 16), uint64] {
  %691 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %691.1
}

def @func_1322() -> Tensor[(7, 2, 16), float32] {
  @func_1320() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2546() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %695 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
    %692 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
    %693 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
    %694 = %692.0;
    (%693, %694)
  };
  %695() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */
}

def @func_2175() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %696 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %697 = %696.1;
  %698 = @func_1320() /* ty=Tensor[(7, 2, 16), float32] */;
  (%697, %698)
}

def @func_8999(%var_8997: Tensor[(13, 1, 7), int64]) -> (Tensor[(13, 10, 7), int64], Tensor[(7, 2, 16), float32], Tensor[(13, 1, 7), float64]) {
  @func_8996(%var_8997) /* ty=(Tensor[(13, 10, 7), int64], Tensor[(7, 2, 16), float32], Tensor[(13, 1, 7), float64]) */
}

def @func_2819() -> (Tensor[(7, 2, 16), float32],) {
  %699 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %700 = %699.0;
  (%700,)
}

def @func_244() -> Tensor[(7, 2, 16), float32] {
  @func_242() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_7235(%var_7233: Tensor[(3, 4, 7), float64]) -> Tensor[(3, 4, 7), float64] {
  @func_7232(%var_7233) /* ty=Tensor[(3, 4, 7), float64] */
}

def @func_6721() -> (Tensor[(12, 9, 13), float32],) {
  %705 = fn () -> (Tensor[(12, 9, 13), float32],) {
    %701 = @func_5393() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) */;
    %702 = %701.1;
    %703 = cast(%702, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
    %704 = cos(%703) /* ty=Tensor[(12, 9, 13), float32] */;
    (%704,)
  };
  %705() /* ty=(Tensor[(12, 9, 13), float32],) */
}

def @func_7026() -> (Tensor[(7, 2, 16), float32],) {
  %707 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %706 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
    (%706,)
  };
  %707() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13750() -> Tensor[(7, 2, 16), float32] {
  @func_13748() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_12490(%var_12489: Tensor[(2304), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(16, 9, 16), int8], Tensor[(2304), float32]) {
  %714 = fn (%var_12486: Tensor[(2304), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(16, 9, 16), int8], Tensor[(2304), float32]) {
    %708 = @func_5243() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
    %709 = cast(%var_12486, dtype="float32") /* ty=Tensor[(2304), float32] */;
    %710 = reshape(%709, newshape=[16, 9, 16]) /* ty=Tensor[(16, 9, 16), float32] */;
    %711 = @func_2391(%710) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) */;
    %712 = %708.2;
    %713 = %711.1;
    (%712, %713, %var_12486)
  };
  %714(%var_12489) /* ty=(Tensor[(3, 7, 10), float32], Tensor[(16, 9, 16), int8], Tensor[(2304), float32]) */
}

def @func_2783() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %715 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %716 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  %717 = %715.0;
  (%716, %717)
}

def @func_4880() -> (Tensor[(7, 2, 16), float32],) {
  %720 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %718 = @func_2819() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %719 = %718.0;
    (%719,)
  };
  %720() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_309() -> Tensor[(7, 2, 16), float32] {
  %722 = fn () -> Tensor[(7, 2, 16), float32] {
    %721 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %721.0
  };
  %722() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_12425() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  @func_12423() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) */
}

def @func_4324(%var_4322: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) {
  @func_4321(%var_4322) /* ty=(Tensor[(3, 16, 14), int8], Tensor[(7, 2, 16), float32], Tensor[(3, 16, 14), uint8]) */
}

def @func_2055() -> (Tensor[(7, 2, 16), float32],) {
  %723 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %724 = %723.1;
  (%724,)
}

def @func_1882(%var_1880: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) {
  @func_1879(%var_1880) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_2207() -> (Tensor[(10, 7, 6), bool],) {
  %730 = fn () -> (Tensor[(10, 7, 6), bool],) {
    %725 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
    %726 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(10, 7, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %729 = logical_and(%727, %728) /* ty=Tensor[(10, 7, 6), bool] */;
    (%729,)
  };
  %730() /* ty=(Tensor[(10, 7, 6), bool],) */
}

def @func_9922() -> (Tensor[(10, 7, 6), bool], Tensor[(4, 12, 15), float32], Tensor[(720), float32]) {
  %731 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %732 = cast(meta[relay.Constant][28] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %733 = reshape(%732, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %734 = @func_5798(%733) /* ty=(Tensor[(4, 12, 15), float32],) */;
  %735 = %731.1;
  %736 = %734.0;
  (%735, %736, meta[relay.Constant][28] /* ty=Tensor[(720), float32] */)
}

def @func_5589() -> Tensor[(7, 2, 16), float64] {
  @func_5587() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_11524() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %737 = @func_5874() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %738 = @func_5941() /* ty=Tensor[(7, 2, 16), float32] */;
  %739 = %737.0;
  (%738, %739)
}

def @func_11663() -> Tensor[(7, 2, 16), uint64] {
  %741 = fn () -> Tensor[(7, 2, 16), uint64] {
    %740 = @func_7458() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) */;
    %740.1
  };
  %741() /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_13262() -> Tensor[(7, 2, 16), float64] {
  %743 = fn () -> Tensor[(7, 2, 16), float64] {
    %742 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %742.0
  };
  %743() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_13743() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  %744 = @func_5790() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */;
  %745 = @func_9730() /* ty=Tensor[(7, 2, 16), float32] */;
  %746 = %744.1;
  (%745, %746)
}

def @func_13133() -> (Tensor[(7, 2, 16), float32],) {
  %747 = @func_7025() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %748 = %747.0;
  (%748,)
}

def @func_13183(%var_13181: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
  @func_13180(%var_13181) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) */
}

def @func_2422(%var_2420: Tensor[(11, 13, 5), float64], %var_2421: Tensor[(11, 13, 5), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) {
  @func_2418(%var_2420, %var_2421) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) */
}

def @func_5917() -> (Tensor[(7, 2, 16), float32],) {
  %749 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_2057() -> (Tensor[(7, 2, 16), float32],) {
  @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_8779(%var_8757: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), float64], Tensor[(7, 2, 16), uint64]) {
  %751 = cast(%var_8757, dtype="float64") /* ty=Tensor[(11, 12, 14), float64] */;
  %752 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %753 = exp(%751) /* ty=Tensor[(11, 12, 14), float64] */;
  %754 = %752.1;
  (%753, %754)
}

def @func_3496(%var_3495: Tensor[(14, 4), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 4), float32], Tensor[(10, 7, 6), float32]) {
  %780 = fn (%var_3487: Tensor[(14, 4), float32]) -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 4), float32], Tensor[(10, 7, 6), float32]) {
    %755 = @func_3232() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
    %756 = %755.1;
    %757 = cast(%756, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
    %758 = sin(%757) /* ty=Tensor[(10, 7, 6), float32] */;
    %759 = cast(%756, dtype="uint32") /* ty=Tensor[(10, 7, 6), uint32] */;
    %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%758, dtype="uint32") /* ty=Tensor[(10, 7, 6), uint32] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %763 = bitwise_xor(%761, %762) /* ty=Tensor[(10, 7, 6), uint32] */;
    %764 = cast(%758, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
    %765 = acosh(%764) /* ty=Tensor[(10, 7, 6), float64] */;
    %766 = cast(%765, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
    %767 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%763, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %770 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %771 = cast(%var_3487, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
    %772 = reshape(%771, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %773 = @func_2723(%772) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 1, 4), float32], Tensor[(56), float32]) */;
    %774 = cast(%758, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
    %775 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
    %776 = power(%768, %769) /* ty=Tensor[(10, 7, 6), float64] */;
    %777 = %770.0;
    %778 = %773.0;
    %779 = sqrt(%774) /* ty=Tensor[(10, 7, 6), float32] */;
    (%775, %776, %777, %778, %var_3487, %779)
  };
  %780(%var_3495) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 4), float32], Tensor[(10, 7, 6), float32]) */
}

def @func_345() -> (Tensor[(7, 2, 16), float32],) {
  %782 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %781 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
    (%781,)
  };
  %782() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_211() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
  %794 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
    %783 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %784 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %785 = %784.0;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %787 = sinh(%786) /* ty=Tensor[(7, 2, 16), float64] */;
    %788 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 2, 16), float64] */, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%787, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %792 = %783.0;
    %793 = less(%790, %791) /* ty=Tensor[(7, 2, 16), bool] */;
    (%792, %793)
  };
  %794() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */
}

def @func_1614() -> (Tensor[(7, 2, 16), float64],) {
  %799 = fn () -> (Tensor[(7, 2, 16), float64],) {
    %795 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %796 = %795.0;
    %797 = cast(%796, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %798 = log2(%797) /* ty=Tensor[(7, 2, 16), float64] */;
    (%798,)
  };
  %799() /* ty=(Tensor[(7, 2, 16), float64],) */
}

def @func_10749() -> Tensor[(7, 2, 16), float32] {
  %801 = fn () -> Tensor[(7, 2, 16), float32] {
    %800 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %800.0
  };
  %801() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_2807() -> (Tensor[(7, 2, 16), float32],) {
  @func_2805() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_13745() -> (Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) {
  @func_13743() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32]) */
}

def @func_12360() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64]) {
  @func_12358() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64]) */
}

def @func_1033() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %806 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %802 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %803 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %804 = %802.0;
    %805 = %803.0;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_11299() -> Tensor[(7, 2, 16), float32] {
  @func_11297() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_12092(%var_12091: Tensor[(3, 4, 7), float64]) -> (Tensor[(3, 4, 7), float32],) {
  %818 = fn (%var_12040: Tensor[(3, 4, 7), float64]) -> (Tensor[(3, 4, 7), float32],) {
    %807 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
    %808 = %807.1;
    %809 = cast(%808, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
    %810 = cast(%var_12040, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %811 = equal(%809, %810) /* ty=Tensor[(3, 4, 7), bool] */;
    %812 = cast(%811, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %813 = sinh(%812) /* ty=Tensor[(3, 4, 7), float32] */;
    %814 = cast(%813, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %815 = atan(%814) /* ty=Tensor[(3, 4, 7), float32] */;
    %816 = cast(%815, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %817 = erf(%816) /* ty=Tensor[(3, 4, 7), float32] */;
    (%817,)
  };
  %818(%var_12091) /* ty=(Tensor[(3, 4, 7), float32],) */
}

def @func_9650() -> (Tensor[(7, 2, 16), float32],) {
  %821 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %819 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %820 = %819.1;
    (%820,)
  };
  %821() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_12511() -> Tensor[(7, 2, 16), float64] {
  @func_12509() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_7089() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) {
  %830 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) {
    %822 = @func_3139() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
    %823 = @func_4732() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), bool], int32, Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
    %824 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 210), int32] */, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
    %825 = reshape(%824, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
    %826 = @func_1662(%825) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(1, 210), int32]) */;
    %827 = %822.0;
    %828 = %823.1;
    %829 = %826.2;
    (%827, %828, %829, meta[relay.Constant][30] /* ty=Tensor[(1, 210), int32] */)
  };
  %830() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */
}

def @func_462() -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
  %839 = fn () -> (Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
    %831 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %832 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
    %833 = cast(%832, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %834 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
    %835 = reshape(%834, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
    %836 = %831.1;
    %837 = asin(%833) /* ty=Tensor[(7, 2, 16), float64] */;
    %838 = @func_290(%835) /* ty=Tensor[(7, 6, 5), int32] */;
    (%836, %837, %838, meta[relay.Constant][31] /* ty=Tensor[(210), int32] */)
  };
  %839() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */
}

def @func_8544() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %844 = fn () -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
    %840 = @func_7458() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), uint64]) */;
    %841 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %842 = %840.1;
    %843 = %841.0;
    (%842, %843)
  };
  %844() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */
}

def @func_13180(%var_13165: Tensor[(351), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(351), float64]) {
  %845 = @func_7973() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %846 = cast(%var_13165, dtype="float64") /* ty=Tensor[(351), float64] */;
  %847 = reshape(%846, newshape=[9, 13, 3]) /* ty=Tensor[(9, 13, 3), float64] */;
  %848 = @func_12476(%847) /* ty=(Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) */;
  %849 = %845.0;
  %850 = %848.1;
  (%849, %850, %var_13165)
}

def @func_2785() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_2783() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_3556() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %854 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %851 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
    %852 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
    %853 = %851.1;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_12673(%var_12672: int8) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(12, 6, 3), int8], int8, Tensor[(216), int8], Tensor[(7, 2, 16), float32]) {
  %865 = fn (%var_12650: int8) -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(12, 6, 3), int8], int8, Tensor[(216), int8], Tensor[(7, 2, 16), float32]) {
    %855 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
    %856 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %857 = cast(%var_12650, dtype="int8") /* ty=int8 */;
    %858 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
    %859 = reshape(%857, newshape=[]) /* ty=int8 */;
    %860 = reshape(%858, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), int8] */;
    %861 = %855.0;
    %862 = %856.0;
    %863 = @func_11354(%859, %860) /* ty=Tensor[(12, 6, 3), int8] */;
    %864 = @func_7099() /* ty=Tensor[(7, 2, 16), float32] */;
    (%861, %862, %863, %var_12650, meta[relay.Constant][32] /* ty=Tensor[(216), int8] */, %864)
  };
  %865(%var_12672) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(12, 6, 3), int8], int8, Tensor[(216), int8], Tensor[(7, 2, 16), float32]) */
}

def @func_9429() -> Tensor[(7, 2, 16), float64] {
  @func_9427() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_1189() -> (Tensor[(7, 2, 16), float32],) {
  %866 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %867 = %866.0;
  (%867,)
}

def @func_11471(%var_11470: Tensor[(11, 8, 3), float64]) -> Tensor[(11, 8, 3), float64] {
  %869 = fn (%var_11448: Tensor[(11, 8, 3), float64]) -> Tensor[(11, 8, 3), float64] {
    %868 = cast(%var_11448, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
    sigmoid(%868) /* ty=Tensor[(11, 8, 3), float64] */
  };
  %869(%var_11470) /* ty=Tensor[(11, 8, 3), float64] */
}

def @func_897() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %875 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %870 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %871 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %872 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
    %873 = %870.0;
    %874 = %871.0;
    (%872, %873, %874)
  };
  %875() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_2924() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %888 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
    %876 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %877 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %878 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %879 = @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %880 = @func_461() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) */;
    %881 = @func_1725() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */;
    %882 = %876.0;
    %883 = %877.1;
    %884 = %878.1;
    %885 = %879.0;
    %886 = %880.1;
    %887 = %881.0;
    (%882, %883, %884, %885, %886, %887)
  };
  %888() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_4930() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) {
  @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */
}

def @func_2589() -> Tensor[(7, 2, 16), bool] {
  %890 = fn () -> Tensor[(7, 2, 16), bool] {
    %889 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %889.1
  };
  %890() /* ty=Tensor[(7, 2, 16), bool] */
}

def @func_1879(%var_1860: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(7, 2, 16), float32]) {
  %891 = cast(%var_1860, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %892 = asinh(%891) /* ty=Tensor[(12, 15, 1), float32] */;
  %893 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  (%892, %893)
}

def @func_7161() -> (Tensor[(7, 2, 16), float32],) {
  @func_7159() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_11907() -> (Tensor[(7, 2, 16), float64],) {
  %896 = fn () -> (Tensor[(7, 2, 16), float64],) {
    %894 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %895 = %894.0;
    (%895,)
  };
  %896() /* ty=(Tensor[(7, 2, 16), float64],) */
}

def @func_8960() -> (Tensor[(7, 2, 16), float32],) {
  @func_8958() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_11814() -> (Tensor[(1, 3, 3), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(8, 7, 4), bool], Tensor[(28, 1), bool]) {
  @func_11812() /* ty=(Tensor[(1, 3, 3), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(8, 7, 4), bool], Tensor[(28, 1), bool]) */
}

def @func_12751() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 13, 10), float64], Tensor[(1820), float64]) {
  %905 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 13, 10), float64], Tensor[(1820), float64]) {
    %897 = @func_12003() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %898 = cast(meta[relay.Constant][33] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
    %899 = reshape(%898, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
    %900 = @func_9692(%899) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) */;
    %901 = %897.0;
    %902 = @func_4056() /* ty=Tensor[(7, 2, 16), float32] */;
    %903 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
    %904 = %900.0;
    (%901, %902, %903, %904, meta[relay.Constant][33] /* ty=Tensor[(1820), float64] */)
  };
  %905() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(14, 13, 10), float64], Tensor[(1820), float64]) */
}

def @func_3380() -> (Tensor[(7, 2, 16), bool],) {
  @func_3378() /* ty=(Tensor[(7, 2, 16), bool],) */
}

def @func_10990() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %906 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %907 = @func_2505() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 6, 5), int32]) */;
  %908 = %906.0;
  %909 = %907.1;
  (%908, %909)
}

def @func_1191() -> (Tensor[(7, 2, 16), float32],) {
  @func_1189() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_8406(%var_8404: Tensor[(28), bool], %var_8405: Tensor[(224), bool]) -> (Tensor[(10, 7, 6), bool], Tensor[(672), float64], Tensor[(8, 7, 4), bool], Tensor[(28), bool], Tensor[(224), bool]) {
  @func_8402(%var_8404, %var_8405) /* ty=(Tensor[(10, 7, 6), bool], Tensor[(672), float64], Tensor[(8, 7, 4), bool], Tensor[(28), bool], Tensor[(224), bool]) */
}

def @func_7901() -> Tensor[(7, 2, 16), bool] {
  %910 = @func_4150() /* ty=(Tensor[(7, 2, 16), bool],) */;
  %910.0
}

def @func_8830() -> (Tensor[(7, 2, 16), float32],) {
  @func_8828() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_6990() -> (Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) {
  %914 = fn () -> (Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) {
    %911 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
    %912 = @func_6787() /* ty=Tensor[(7, 2, 16), uint64] */;
    %913 = %911.2;
    (%912, %913)
  };
  %914() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(672), float64]) */
}

def @func_3751() -> (Tensor[(7, 2, 16), float32],) {
  @func_3749() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_3232() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %915 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %916 = @func_2206() /* ty=(Tensor[(10, 7, 6), bool],) */;
  %917 = %915.0;
  %918 = %916.0;
  (%917, %918)
}

def @func_6171() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %923 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %919 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %920 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
    %921 = %919.3;
    %922 = %920.1;
    (%921, %922)
  };
  %923() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_6567(%var_6559: Tensor[(10, 10, 10), uint64]) -> Tensor[(10, 10, 10), bool] {
  %924 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 10, 10), uint64] */, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %925 = shape_of(%var_6559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_6559, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%926, %927) /* ty=Tensor[(10, 10, 10), bool] */
}

def @func_6824() -> Tensor[(7, 2, 16), float32] {
  %929 = fn () -> Tensor[(7, 2, 16), float32] {
    %928 = @func_5164() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(672), float64], Tensor[(672), float64], Tensor[(7, 2, 16), float32]) */;
    %928.4
  };
  %929() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_1941() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) {
  %930 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %931 = @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %932 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %933 = reshape(%932, newshape=[]) /* ty=int32 */;
  %934 = @func_767(%933) /* ty=(Tensor[(12, 9, 13), int32],) */;
  %935 = %934.0;
  %936 = cast(%935, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  %937 = cast(7 /* ty=int32 */, dtype="int8") /* ty=int8 */;
  %938 = %930.0;
  %939 = %931.0;
  %940 = logical_xor(%936, %937) /* ty=Tensor[(12, 9, 13), int8] */;
  (%938, %939, %940)
}

def @func_2984() -> Tensor[(3, 16, 14), float64] {
  %941 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %942 = rsqrt(%941) /* ty=Tensor[(3, 16, 14), float32] */;
  %943 = cast(%942, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %944 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %945 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%945, %946) /* ty=Tensor[(3, 16, 14), float64] */
}

def @func_8226() -> Tensor[(7, 2, 16), float32] {
  %948 = fn () -> Tensor[(7, 2, 16), float32] {
    %947 = @func_1982() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %947.0
  };
  %948() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_6420() -> Tensor[(7, 2, 16), float64] {
  %950 = fn () -> Tensor[(7, 2, 16), float64] {
    %949 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %949.0
  };
  %950() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_3141() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  @func_3139() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_2031() -> (Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) {
  %951 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %952 = %951.1;
  %953 = @func_1383() /* ty=Tensor[(7, 2, 16), float32] */;
  (%952, %953)
}

def @func_2350() -> Tensor[(7, 2, 16), float32] {
  %955 = fn () -> Tensor[(7, 2, 16), float32] {
    %954 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %954.0
  };
  %955() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_9987() -> Tensor[(7, 2, 16), float32] {
  %957 = fn () -> Tensor[(7, 2, 16), float32] {
    %956 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
    %956.0
  };
  %957() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_1344() -> (Tensor[(7, 2, 16), float32],) {
  @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5326() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %958 = @func_2569() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %959 = @func_2923() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %960 = %958.1;
  %961 = %959.2;
  (%960, %961)
}

def @func_10261() -> (Tensor[(7, 2, 16), float32],) {
  %962 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %963 = %962.0;
  (%963,)
}

def @func_10627() -> Tensor[(7, 2, 16), float32] {
  @func_10625() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_3924() -> (Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) {
  %967 = fn () -> (Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) {
    %964 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
    %965 = @func_2984() /* ty=Tensor[(3, 16, 14), float64] */;
    %966 = %964.0;
    (%965, %966)
  };
  %967() /* ty=(Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) */
}

def @func_7830(%var_7829: Tensor[(8, 4, 9), int8]) -> (Tensor[(8, 4, 9), int8],) {
  %973 = fn (%var_7818: Tensor[(8, 4, 9), int8]) -> (Tensor[(8, 4, 9), int8],) {
    %968 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 4, 9), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
    %969 = shape_of(%var_7818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%var_7818, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %972 = add(%970, %971) /* ty=Tensor[(8, 4, 9), int8] */;
    (%972,)
  };
  %973(%var_7829) /* ty=(Tensor[(8, 4, 9), int8],) */
}

def @func_14113(%var_14111: Tensor[(2, 6, 6), float64]) -> (Tensor[(2, 6, 6), float64], Tensor[(7, 2, 16), float32]) {
  @func_14110(%var_14111) /* ty=(Tensor[(2, 6, 6), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_7588() -> (Tensor[(7, 2, 16), float32],) {
  %976 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %974 = @func_1955() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %975 = %974.0;
    (%975,)
  };
  %976() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_4603() -> (Tensor[(7, 2, 16), float32],) {
  @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_6291() -> int32 {
  %977 = @func_1283() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], int32) */;
  %977.2
}

def @func_8004() -> Tensor[(7, 2, 16), float64] {
  %978 = fn () -> Tensor[(7, 2, 16), float64] {
    @func_5587() /* ty=Tensor[(7, 2, 16), float64] */
  };
  %978() /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_8092(%var_8067: Tensor[(13, 11, 4), float32], %var_8068: Tensor[(13, 11, 4), float32]) -> (Tensor[(13, 11, 4), float32], Tensor[(13, 11, 4), float32], Tensor[(7, 2, 16), float32]) {
  %979 = cast(%var_8068, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %980 = shape_of(%var_8067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_8067, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %983 = cast(%var_8067, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %984 = @func_5067() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %985 = mod(%981, %982) /* ty=Tensor[(13, 11, 4), float32] */;
  %986 = acos(%983) /* ty=Tensor[(13, 11, 4), float32] */;
  %987 = %984.0;
  (%985, %986, %987)
}

def @func_8137() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) {
  @func_8135() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */
}

def @func_5860() -> (Tensor[(7, 2, 16), float32],) {
  @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_2571() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_2569() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_740() -> (Tensor[(7, 2, 16), float32],) {
  @func_738() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5876() -> (Tensor[(7, 2, 16), float32],) {
  @func_5874() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_11284() -> Tensor[(7, 2, 16), float32] {
  @func_11282() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_11302() -> (Tensor[(1, 210), int32],) {
  %988 = @func_7088() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(1, 210), int32], Tensor[(1, 210), int32]) */;
  %989 = %988.2;
  (%989,)
}

def @func_8569() -> Tensor[(12, 9, 13), float32] {
  @func_8567() /* ty=Tensor[(12, 9, 13), float32] */
}

def @func_9788() -> (Tensor[(10, 7, 6), bool],) {
  @func_9786() /* ty=(Tensor[(10, 7, 6), bool],) */
}

def @func_9692(%var_9663: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) {
  %990 = cast(%var_9663, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %991 = cosh(%990) /* ty=Tensor[(14, 13, 10), float64] */;
  %992 = @func_6419() /* ty=Tensor[(7, 2, 16), float64] */;
  (%991, %992)
}

def @func_5447() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_5445() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_5718() -> (Tensor[(7, 2, 16), bool],) {
  %995 = fn () -> (Tensor[(7, 2, 16), bool],) {
    %993 = @func_629() /* ty=(Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) */;
    %994 = %993.0;
    (%994,)
  };
  %995() /* ty=(Tensor[(7, 2, 16), bool],) */
}

def @func_13998() -> Tensor[(7, 2, 16), float32] {
  %996 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_12164() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %996() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_10724() -> (Tensor[(7, 2, 16), uint64],) {
  %997 = @func_8543() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) */;
  %998 = %997.0;
  (%998,)
}

def @func_7975() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_7973() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_8615() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_8613() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_4897() -> Tensor[(7, 2, 16), float32] {
  %999 = fn () -> Tensor[(7, 2, 16), float32] {
    @func_242() /* ty=Tensor[(7, 2, 16), float32] */
  };
  %999() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_7100() -> Tensor[(7, 2, 16), float32] {
  %1001 = fn () -> Tensor[(7, 2, 16), float32] {
    %1000 = @func_2031() /* ty=(Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float32]) */;
    %1000.1
  };
  %1001() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_13380() -> (Tensor[(7, 2, 16), float32],) {
  @func_13378() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_1342() -> (Tensor[(7, 2, 16), float32],) {
  %1002 = @func_1096() /* ty=Tensor[(7, 2, 16), float32] */;
  (%1002,)
}

def @func_5445() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1003 = @func_3749() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1004 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %1005 = %1003.0;
  %1006 = %1004.0;
  (%1005, %1006)
}

def @func_14110(%var_14084: Tensor[(2, 6, 6), float64]) -> (Tensor[(2, 6, 6), float64], Tensor[(7, 2, 16), float32]) {
  %1007 = cast(-8.6611f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1008 = cast(%var_14084, dtype="float64") /* ty=Tensor[(2, 6, 6), float64] */;
  %1009 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1010 = power(%1007, %1008) /* ty=Tensor[(2, 6, 6), float64] */;
  %1011 = %1009.0;
  (%1010, %1011)
}

def @func_1320() -> Tensor[(7, 2, 16), float32] {
  %1012 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1012.1
}

def @func_5996() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1019 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %1013 = @func_2783() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1014 = @func_5858() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1015 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1016 = %1013.1;
    %1017 = %1014.0;
    %1018 = %1015.0;
    (%1016, %1017, %1018)
  };
  %1019() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_9695(%var_9693: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) {
  @func_9692(%var_9693) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(7, 2, 16), float64]) */
}

def @func_3139() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) {
  %1020 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1021 = @func_2545() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
  %1022 = @func_308() /* ty=Tensor[(7, 2, 16), float32] */;
  %1023 = cast(%1022, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %1024 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1025 = %1020.0;
  %1026 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %1027 = %1021.1;
  %1028 = exp(%1023) /* ty=Tensor[(7, 2, 16), float64] */;
  %1029 = %1024.0;
  (%1025, %1026, %1027, %1028, %1029)
}

def @func_11128(%var_11126: Tensor[(6, 2, 14), float32], %var_11127: Tensor[(6, 2, 14), float32]) -> (Tensor[(6, 2, 14), bool],) {
  @func_11124(%var_11126, %var_11127) /* ty=(Tensor[(6, 2, 14), bool],) */
}

def @func_3378() -> (Tensor[(7, 2, 16), bool],) {
  %1030 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %1031 = %1030.1;
  (%1031,)
}

def @func_11252(%var_11218: Tensor[(14, 14, 13), int64], %var_11219: Tensor[(14, 14, 13), int64], %var_11226: Tensor[(48), uint32], %var_11238: Tensor[(210), int32]) -> (Tensor[(14, 14, 13), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32], Tensor[(7, 6, 5), int32], Tensor[(210), int32]) {
  %1032 = cast(%var_11219, dtype="bool") /* ty=Tensor[(14, 14, 13), bool] */;
  %1033 = shape_of(%var_11218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%var_11218, dtype="bool") /* ty=Tensor[(14, 14, 13), bool] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1036 = cast(%var_11226, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %1037 = reshape(%1036, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), uint32] */;
  %1038 = cast(%var_11238, dtype="int32") /* ty=Tensor[(210), int32] */;
  %1039 = reshape(%1038, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), int32] */;
  %1040 = not_equal(%1034, %1035) /* ty=Tensor[(14, 14, 13), bool] */;
  %1041 = @func_1748(%1037) /* ty=Tensor[(3, 4, 4), bool] */;
  %1042 = @func_290(%1039) /* ty=Tensor[(7, 6, 5), int32] */;
  (%1040, %1041, %var_11226, %1042, %var_11238)
}

def @func_12478(%var_12477: Tensor[(9, 13, 3), float64]) -> (Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) {
  %1052 = fn (%var_12461: Tensor[(9, 13, 3), float64]) -> (Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) {
    %1043 = cast(%var_12461, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
    %1044 = sigmoid(%1043) /* ty=Tensor[(9, 13, 3), float64] */;
    %1045 = cast(%1044, dtype="bool") /* ty=Tensor[(9, 13, 3), bool] */;
    %1046 = shape_of(%var_12461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%var_12461, dtype="bool") /* ty=Tensor[(9, 13, 3), bool] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1049 = @func_10302() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1050 = logical_or(%1047, %1048) /* ty=Tensor[(9, 13, 3), bool] */;
    %1051 = %1049.0;
    (%1050, %1051)
  };
  %1052(%var_12477) /* ty=(Tensor[(9, 13, 3), bool], Tensor[(7, 2, 16), float32]) */
}

def @func_13428() -> Tensor[(7, 2, 16), float32] {
  %1053 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1053.1
}

def @func_13748() -> Tensor[(7, 2, 16), float32] {
  %1054 = @func_13133() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1054.0
}

def @func_2391(%var_2372: Tensor[(16, 9, 16), float32]) -> (Tensor[(7, 2, 16), float64], Tensor[(16, 9, 16), int8]) {
  %1055 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %1056 = cast(%var_2372, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %1057 = atanh(%1056) /* ty=Tensor[(16, 9, 16), float32] */;
  %1058 = cast(%var_2372, dtype="int8") /* ty=Tensor[(16, 9, 16), int8] */;
  %1059 = shape_of(%1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(%1057, dtype="int8") /* ty=Tensor[(16, 9, 16), int8] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1062 = %1055.0;
  %1063 = maximum(%1060, %1061) /* ty=Tensor[(16, 9, 16), int8] */;
  (%1062, %1063)
}

def @func_5244() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
  %1072 = fn () -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) {
    %1064 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %1065 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1066 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %1067 = reshape(%1066, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %1068 = @func_3169(%1067) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
    %1069 = %1064.1;
    %1070 = %1065.1;
    %1071 = %1068.2;
    (%1069, %1070, %1071, meta[relay.Constant][37] /* ty=Tensor[(210), float32] */)
  };
  %1072() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */
}

def @func_12900() -> (Tensor[(7, 2, 16), float32], Tensor[(4, 12, 15), float32], Tensor[(720), float32], Tensor[(7, 2, 16), float32]) {
  %1073 = @func_10410() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1074 = cast(meta[relay.Constant][38] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %1075 = reshape(%1074, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %1076 = @func_5798(%1075) /* ty=(Tensor[(4, 12, 15), float32],) */;
  %1077 = %1073.0;
  %1078 = %1076.0;
  %1079 = @func_9986() /* ty=Tensor[(7, 2, 16), float32] */;
  (%1077, %1078, meta[relay.Constant][38] /* ty=Tensor[(720), float32] */, %1079)
}

def @func_11717(%var_11716: Tensor[(715), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(715), float64], Tensor[(7, 2, 16), float64]) {
  %1090 = fn (%var_11692: Tensor[(715), float64]) -> (Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(715), float64], Tensor[(7, 2, 16), float64]) {
    %1080 = @func_5874() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1081 = cast(%var_11692, dtype="float64") /* ty=Tensor[(715), float64] */;
    %1082 = cast(%var_11692, dtype="float64") /* ty=Tensor[(715), float64] */;
    %1083 = reshape(%1081, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
    %1084 = reshape(%1082, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float64] */;
    %1085 = @func_2418(%1083, %1084) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(11, 13, 5), float64]) */;
    %1086 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
    %1087 = %1080.0;
    %1088 = %1085.1;
    %1089 = %1086.0;
    (%1087, %1088, %var_11692, %1089)
  };
  %1090(%var_11716) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(11, 13, 5), float64], Tensor[(715), float64], Tensor[(7, 2, 16), float64]) */
}

def @func_10577() -> Tensor[(7, 2, 16), float32] {
  %1092 = fn () -> Tensor[(7, 2, 16), float32] {
    %1091 = @func_6170() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1091.0
  };
  %1092() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_12004() -> (Tensor[(7, 2, 16), float32],) {
  %1095 = fn () -> (Tensor[(7, 2, 16), float32],) {
    %1093 = @func_8958() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1094 = %1093.0;
    (%1094,)
  };
  %1095() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_5504() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float64]) {
  %1096 = @func_5326() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1097 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %1098 = %1096.0;
  %1099 = %1097.0;
  (%1098, %1099)
}

def @func_5679() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64]) {
  %1100 = @func_5393() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int32], Tensor[(7, 2, 16), float64]) */;
  %1101 = @func_1613() /* ty=(Tensor[(7, 2, 16), float64],) */;
  %1102 = @func_4199() /* ty=Tensor[(7, 2, 16), uint64] */;
  %1103 = %1100.2;
  %1104 = %1101.0;
  (%1102, %1103, %1104)
}

def @func_10308() -> (Tensor[(3, 16, 14), float64],) {
  %1105 = @func_3923() /* ty=(Tensor[(3, 16, 14), float64], Tensor[(7, 2, 16), bool]) */;
  %1106 = %1105.0;
  (%1106,)
}

def @func_2569() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1107 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1108 = @func_1342() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1109 = %1107.0;
  %1110 = %1108.0;
  (%1109, %1110)
}

def @func_7811() -> (Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %1111 = @func_4928() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint64]) */;
  %1112 = @func_2055() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1113 = %1111.1;
  %1114 = %1112.0;
  (%1113, %1114)
}

def @func_10820() -> (Tensor[(10, 9, 2), int64],) {
  %1117 = fn () -> (Tensor[(10, 9, 2), int64],) {
    %1115 = @func_8339() /* ty=(Tensor[(10, 9, 2), int64],) */;
    %1116 = %1115.0;
    (%1116,)
  };
  %1117() /* ty=(Tensor[(10, 9, 2), int64],) */
}

def @func_8287() -> (Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  @func_8285() /* ty=(Tensor[(1, 210), int32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_501() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), uint8]) {
  %1118 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
  %1119 = %1118.0;
  %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %1121 = rsqrt(%1120) /* ty=Tensor[(7, 2, 16), float64] */;
  %1122 = cast(%1119, dtype="uint8") /* ty=Tensor[(7, 2, 16), uint8] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1124 = cast(%1121, dtype="uint8") /* ty=Tensor[(7, 2, 16), uint8] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1126 = @func_242() /* ty=Tensor[(7, 2, 16), float32] */;
  %1127 = minimum(%1124, %1125) /* ty=Tensor[(7, 2, 16), uint8] */;
  (%1126, %1127)
}

def @func_10304() -> (Tensor[(7, 2, 16), float32],) {
  @func_10302() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_11326(%var_11324: Tensor[(6, 9, 14), int64]) -> (Tensor[(6, 9, 14), int64], Tensor[(7, 2, 16), float32]) {
  @func_11323(%var_11324) /* ty=(Tensor[(6, 9, 14), int64], Tensor[(7, 2, 16), float32]) */
}

def @func_4201() -> Tensor[(7, 2, 16), uint64] {
  @func_4199() /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_11297() -> Tensor[(7, 2, 16), float32] {
  @func_4183() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_6497() -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) {
  %1134 = fn () -> (Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) {
    %1128 = @func_4019() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float32]) */;
    %1129 = @func_1247() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1130 = @func_210() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), bool]) */;
    %1131 = %1128.0;
    %1132 = %1129.1;
    %1133 = %1130.1;
    (%1131, %1132, %1133)
  };
  %1134() /* ty=(Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), bool], Tensor[(7, 2, 16), bool]) */
}

def @func_11938() -> (Tensor[(7, 2, 16), float32],) {
  %1135 = @func_11395() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1136 = %1135.0;
  (%1136,)
}

def @func_13358() -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1143 = fn () -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
    %1137 = @func_5035() /* ty=(Tensor[(7, 2, 16), float64],) */;
    %1138 = @func_344() /* ty=(Tensor[(7, 2, 16), float32],) */;
    %1139 = @func_3842() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */;
    %1140 = %1137.0;
    %1141 = %1138.0;
    %1142 = %1139.0;
    (%1140, %1141, %1142)
  };
  %1143() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_2643(%var_2641: Tensor[(48), uint32]) -> (Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) {
  @func_2640(%var_2641) /* ty=(Tensor[(7, 5, 13), float64], Tensor[(7, 5, 13), float32], Tensor[(7, 2, 16), bool], Tensor[(3, 4, 4), bool], Tensor[(48), uint32]) */
}

def @func_9958() -> Tensor[(7, 2, 16), float32] {
  %1144 = @func_1855() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
  %1144.1
}

def @func_1726() -> (Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) {
  %1156 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) {
    %1145 = @func_1032() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1146 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
    %1147 = cosh(%1146) /* ty=Tensor[(3, 4, 1), float64] */;
    %1148 = cast(%1147, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
    %1149 = cos(%1148) /* ty=Tensor[(3, 4, 1), float64] */;
    %1150 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
    %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1152 = cast(%1149, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
    %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1154 = %1145.0;
    %1155 = power(%1152, %1153) /* ty=Tensor[(3, 4, ?), float64] */;
    (%1154, %1155)
  };
  %1156() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(3, 4, ?), float64]) */
}

def @func_11846() -> (Tensor[(3, 7, 10), float32], Tensor[(7, 2, 16), float32]) {
  %1160 = fn () -> (Tensor[(3, 7, 10), float32], Tensor[(7, 2, 16), float32]) {
    %1157 = @func_5243() /* ty=(Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32], Tensor[(3, 7, 10), float32], Tensor[(210), float32]) */;
    %1158 = %1157.2;
    %1159 = @func_4352() /* ty=Tensor[(7, 2, 16), float32] */;
    (%1158, %1159)
  };
  %1160() /* ty=(Tensor[(3, 7, 10), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_12902() -> (Tensor[(7, 2, 16), float32], Tensor[(4, 12, 15), float32], Tensor[(720), float32], Tensor[(7, 2, 16), float32]) {
  @func_12900() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(4, 12, 15), float32], Tensor[(720), float32], Tensor[(7, 2, 16), float32]) */
}

def @func_6702() -> (Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) {
  %1161 = @func_134() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1162 = @func_1941() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(12, 9, 13), int8]) */;
  %1163 = %1161.0;
  %1164 = @func_2349() /* ty=Tensor[(7, 2, 16), float32] */;
  %1165 = %1162.0;
  (%1163, %1164, %1165)
}

def @func_8958() -> (Tensor[(7, 2, 16), float32],) {
  %1166 = @func_7346() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1167 = %1166.0;
  (%1167,)
}

def @func_10263() -> (Tensor[(7, 2, 16), float32],) {
  @func_10261() /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_7546() -> Tensor[(7, 2, 16), float32] {
  @func_7544() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_3843() -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
  %1172 = fn () -> (Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) {
    %1168 = @func_2175() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
    %1169 = @func_3139() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool], Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float32]) */;
    %1170 = %1168.1;
    %1171 = %1169.2;
    (%1170, %1171)
  };
  %1172() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(10, 7, 6), bool]) */
}

def @func_13443() -> Tensor[(7, 2, 16), float32] {
  %1173 = @func_7650() /* ty=(Tensor[(7, 2, 16), float32], Tensor[(7, 2, 16), float32]) */;
  %1173.1
}

def @func_13539() -> Tensor[(12, 9, 13), float32] {
  %1174 = fn () -> Tensor[(12, 9, 13), float32] {
    @func_8567() /* ty=Tensor[(12, 9, 13), float32] */
  };
  %1174() /* ty=Tensor[(12, 9, 13), float32] */
}

def @func_13991() -> Tensor[(7, 2, 16), uint64] {
  @func_13989() /* ty=Tensor[(7, 2, 16), uint64] */
}

def @func_4056() -> Tensor[(7, 2, 16), float32] {
  %1175 = @func_602() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1175.0
}

def @func_5587() -> Tensor[(7, 2, 16), float64] {
  %1176 = @func_4601() /* ty=(Tensor[(7, 2, 16), float32],) */;
  %1177 = %1176.0;
  %1178 = cast(%1177, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  log10(%1178) /* ty=Tensor[(7, 2, 16), float64] */
}

def @func_9162() -> Tensor[(7, 2, 16), float64] {
  %1180 = fn () -> Tensor[(7, 2, 16), float64] {
    %1179 = @func_2094() /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), uint64]) */;
    %1179.0
  };
  %1180() /* ty=Tensor[(7, 2, 16), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen437/build/output.py", line 4650, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:17:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

