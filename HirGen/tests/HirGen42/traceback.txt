==========mod==========
#[version = "0.0.5"]
def @func_2767() -> (Tensor[(1, 7, 16), float64],) {
  %0 = @func_2458() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_5555(%var_5545: Tensor[(16, 6), int32]) -> (Tensor[(15, 15, 16), float64], Tensor[(6, 8, 2), bool], Tensor[(16, 6), int32], Tensor[(352), float32], Tensor[(1, 7, 16), float64]) {
  %2 = @func_3318() /* ty=(Tensor[(15, 15, 16), bool],) */;
  %3 = %2.0;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 15, 16), bool] */, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %8 = cast(%var_5545, dtype="int32") /* ty=Tensor[(16, 6), int32] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %10 = reshape(%8, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int32] */;
  %11 = reshape(%9, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %12 = @func_5198(%10, %11) /* ty=(Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) */;
  %13 = floor_mod(%6, %7) /* ty=Tensor[(15, 15, 16), float64] */;
  %14 = %12.0;
  %15 = @func_3294() /* ty=Tensor[(1, 7, 16), float64] */;
  (%13, %14, %var_5545, meta[relay.Constant][1] /* ty=Tensor[(352), float32] */, %15)
}

def @func_2342(%var_2300: Tensor[(5, 13, 16), float64], %var_2326: Tensor[(5, 13, 16), float32]) -> (Tensor[(5, 13, 16), uint16], Tensor[(5, 13, 16), float64]) {
  %16 = cast(%var_2300, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
  %17 = sigmoid(%16) /* ty=Tensor[(5, 13, 16), float32] */;
  %18 = cast(%var_2300, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %19 = sqrt(%18) /* ty=Tensor[(5, 13, 16), float64] */;
  %20 = cast(%19, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %21 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%17, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %24 = cast(%var_2326, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %25 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%17, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %28 = bitwise_xor(%22, %23) /* ty=Tensor[(5, 13, 16), uint16] */;
  %29 = floor_divide(%26, %27) /* ty=Tensor[(5, 13, 16), float64] */;
  (%28, %29)
}

def @func_3179() -> (Tensor[(16, 12, 5), float32],) {
  %30 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  (%30,)
}

def @func_4448(%var_4419: Tensor[(2, 12, 2), uint16], %var_4420: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), bool], Tensor[(2, 12, 2), int8]) {
  %31 = cast(%var_4420, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %32 = shape_of(%var_4419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_4419, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = cast(%var_4419, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %36 = shape_of(%var_4420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_4420, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %39 = less_equal(%33, %34) /* ty=Tensor[(2, 12, 2), bool] */;
  %40 = logical_xor(%37, %38) /* ty=Tensor[(2, 12, 2), int8] */;
  (%39, %40)
}

def @func_1908(%var_1882: Tensor[(3, 3, 2), float64], %var_1899: Tensor[(96), int64]) -> (Tensor[(3, 3, 2), float64], Tensor[(16, 12, 5), float32], Tensor[(3, 20), float32], Tensor[(4, 3, 8), int64], Tensor[(96), int64]) {
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %42 = shape_of(%var_1882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_1882, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %46 = reshape(%45, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %47 = cast(%var_1899, dtype="int64") /* ty=Tensor[(96), int64] */;
  %48 = reshape(%47, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
  %49 = floor_divide(%43, %44) /* ty=Tensor[(3, 3, 2), float64] */;
  %50 = @func_278(%46) /* ty=Tensor[(16, 12, 5), float32] */;
  %51 = @func_383(%48) /* ty=Tensor[(4, 3, 8), int64] */;
  (%49, %50, meta[relay.Constant][3] /* ty=Tensor[(3, 20), float32] */, %51, %var_1899)
}

def @func_60(%var_49: Tensor[(13, 13, 4), float32]) -> (Tensor[(13, 13, 4), float32],) {
  %52 = cast(%var_49, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %53 = sinh(%52) /* ty=Tensor[(13, 13, 4), float32] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %55 = sigmoid(%54) /* ty=Tensor[(13, 13, 4), float32] */;
  (%55,)
}

def @func_2416() -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) {
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %57 = reshape(%56, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %58 = @func_2246(%57) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %59 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  %60 = %58.1;
  (%59, %60, meta[relay.Constant][4] /* ty=Tensor[(160), uint64] */)
}

def @func_3405(%var_3400: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32]) {
  %61 = @func_2867() /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(429), float32] */, dtype="float32") /* ty=Tensor[(429), float32] */;
  %63 = cast(%var_3400, dtype="float32") /* ty=Tensor[(676), float32] */;
  %64 = reshape(%62, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %65 = reshape(%63, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %66 = @func_408(%64, %65) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %67 = %61.0;
  %68 = %66.0;
  (%67, %68, meta[relay.Constant][5] /* ty=Tensor[(429), float32] */, %var_3400)
}

def @func_2813() -> Tensor[(160), uint64] {
  @func_1503() /* ty=Tensor[(160), uint64] */
}

def @func_4267() -> (Tensor[(60), float32],) {
  %69 = @func_2439() /* ty=(Tensor[(60), float32],) */;
  %70 = %69.0;
  (%70,)
}

def @func_3503(%var_3460: Tensor[(160), uint64]) -> (Tensor[(60), float32], Tensor[(160), uint64], Tensor[(12, 7, 16), float64]) {
  %71 = cast(%var_3460, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %72 = reshape(%71, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %73 = @func_2246(%72) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %74 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 16), float64] */;
  %77 = %73.3;
  %78 = power(%75, %76) /* ty=Tensor[(12, 7, 16), float64] */;
  (%77, %var_3460, %78)
}

def @func_967(%var_922: Tensor[(2, 3, 14), uint64], %var_923: Tensor[(2, 3, 14), uint64], %var_928: Tensor[(2, 3, 14), uint64], %var_938: Tensor[(1650), float32], %var_949: Tensor[(1650), float32]) -> (Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) {
  %79 = cast(%var_928, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %80 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_923, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = cast(%var_938, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %84 = cast(%var_938, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 20), uint64] */, dtype="uint64") /* ty=Tensor[(8, 20), uint64] */;
  %87 = reshape(%83, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %88 = reshape(%84, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %89 = reshape(%85, newshape=[48, 2]) /* ty=Tensor[(48, 2), int64] */;
  %90 = reshape(%86, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %91 = @func_670(%87, %88, %89, %90) /* ty=(Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) */;
  %92 = cast(%var_923, dtype="uint64") /* ty=Tensor[(2, 3, 14), uint64] */;
  %93 = shape_of(%var_922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%var_922, dtype="uint64") /* ty=Tensor[(2, 3, 14), uint64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %96 = add(%94, %95) /* ty=Tensor[(2, 3, 14), uint64] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %98 = cast(%var_949, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %99 = shape_of(%var_938, dtype="int32") /* ty=Tensor[(1), int32] */;
  %100 = cast(%var_938, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?), float64] */;
  %102 = equal(%81, %82) /* ty=Tensor[(2, 3, 14), bool] */;
  %103 = %91.2;
  %104 = acos(%97) /* ty=Tensor[(2, 3, 14), float32] */;
  %105 = divide(%100, %101) /* ty=Tensor[(1650), float64] */;
  (%102, %103, meta[relay.Constant][7] /* ty=Tensor[(96), int64] */, meta[relay.Constant][8] /* ty=Tensor[(8, 20), uint64] */, %104, %105)
}

def @func_3244(%var_3216: Tensor[(14, 1, 13), bool]) -> (Tensor[(14, 9, 13), bool],) {
  %106 = cast(%var_3216, dtype="bool") /* ty=Tensor[(14, 1, 13), bool] */;
  %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
  %108 = logical_and(%106, %107) /* ty=Tensor[(14, 9, 13), bool] */;
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = greater(%111, %112) /* ty=Tensor[(14, 9, 13), bool] */;
  (%113,)
}

def @func_989() -> (Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
  %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 15, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %115 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 15, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 15, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %120 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %121 = reshape(%118, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %122 = reshape(%119, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %123 = reshape(%120, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %124 = @func_571(%121, %122, %123) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %125 = logical_or(%116, %117) /* ty=Tensor[(15, 15, 16), bool] */;
  %126 = %124.1;
  (%125, %126, meta[relay.Constant][12] /* ty=Tensor[(160), uint64] */, meta[relay.Constant][13] /* ty=Tensor[(60), float32] */)
}

def @func_4396(%var_4378: Tensor[(2, 7, 16), float64]) -> (Tensor[(14, 9, 13), bool], Tensor[(11, 182), float64], Tensor[(2, 7, 16), float64], Tensor[(16, 12, 5), float32]) {
  %127 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 182), bool] */, dtype="bool") /* ty=Tensor[(1, 182), bool] */;
  %128 = reshape(%127, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), bool] */;
  %129 = @func_3244(%128) /* ty=(Tensor[(14, 9, 13), bool],) */;
  %130 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 182), bool] */, dtype="float64") /* ty=Tensor[(1, 182), float64] */;
  %131 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 182), bool] */, dtype="float64") /* ty=Tensor[(11, 182), float64] */;
  %132 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %134 = cast(%var_4378, dtype="float64") /* ty=Tensor[(2, 7, 16), float64] */;
  %135 = @func_3179() /* ty=(Tensor[(16, 12, 5), float32],) */;
  %136 = %129.0;
  %137 = divide(%130, %131) /* ty=Tensor[(11, 182), float64] */;
  %138 = power(%133, %134) /* ty=Tensor[(2, 7, 16), float64] */;
  %139 = %135.0;
  (%136, %137, %138, %139)
}

def @func_5262(%var_5237: Tensor[(16, 12, 5), float64], %var_5252: Tensor[(56, 26), int32]) -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), int32], Tensor[(2, 728), uint16], Tensor[(56, 26), int32]) {
  %140 = @func_3606() /* ty=(Tensor[(16, 12, 5), float32],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
  %143 = erf(%142) /* ty=Tensor[(16, 12, 5), float64] */;
  %144 = cast(%141, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %148 = cast(%var_5237, dtype="int32") /* ty=Tensor[(16, 12, 5), int32] */;
  %149 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%143, dtype="int32") /* ty=Tensor[(16, 12, 5), int32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %152 = cast(%var_5252, dtype="int32") /* ty=Tensor[(56, 26), int32] */;
  %153 = reshape(%152, newshape=[2, 728]) /* ty=Tensor[(2, 728), int32] */;
  %154 = @func_4912(%153) /* ty=(Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) */;
  %155 = floor_mod(%146, %147) /* ty=Tensor[(16, 12, 5), float32] */;
  %156 = add(%150, %151) /* ty=Tensor[(16, 12, 5), int32] */;
  %157 = %154.4;
  (%155, %156, %157, %var_5252)
}

def @func_814(%var_805: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), bool] {
  %158 = cast(%var_805, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %159 = log10(%158) /* ty=Tensor[(10, 3, 6), float32] */;
  %160 = cast(%159, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %161 = shape_of(%var_805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_805, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%162, %163) /* ty=Tensor[(10, 3, 6), bool] */
}

def @func_1553() -> (Tensor[(60), float32],) {
  %164 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %165 = %164.3;
  (%165,)
}

def @func_5147(%var_5128: Tensor[(4, 3, 5), int16], %var_5129: Tensor[(4, 3, 5), int16], %var_5134: Tensor[(160), uint64]) -> (Tensor[(4, 3, 5), int16], Tensor[(160), float64], Tensor[(160), uint64], Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), float32]) {
  %166 = cast(%var_5129, dtype="int16") /* ty=Tensor[(4, 3, 5), int16] */;
  %167 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_5128, dtype="int16") /* ty=Tensor[(4, 3, 5), int16] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %170 = cast(%var_5134, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %171 = reshape(%170, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %172 = cast(%var_5129, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %173 = cast(%var_5129, dtype="float32") /* ty=Tensor[(4, 3, 5), float32] */;
  %174 = add(%168, %169) /* ty=Tensor[(4, 3, 5), int16] */;
  %175 = @func_4043(%171) /* ty=Tensor[(160), float64] */;
  %176 = acosh(%172) /* ty=Tensor[(4, 3, 5), float64] */;
  %177 = erf(%173) /* ty=Tensor[(4, 3, 5), float32] */;
  (%174, %175, %var_5134, %176, %177)
}

def @func_3771(%var_3766: Tensor[(16, 12, 5), float32]) -> (Tensor[(60), float32], Tensor[(16, 12, 5), bool]) {
  %178 = @func_1553() /* ty=(Tensor[(60), float32],) */;
  %179 = @func_3277() /* ty=Tensor[(16, 12, 5), float32] */;
  %180 = cast(%var_3766, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%179, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = %178.0;
  %185 = greater_equal(%182, %183) /* ty=Tensor[(16, 12, 5), bool] */;
  (%184, %185)
}

def @func_4738(%var_4687: int64) -> (int64, Tensor[(2640), int64], Tensor[(676), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(1, 7, 16), float64]) {
  %186 = cast(%var_4687, dtype="int64") /* ty=int64 */;
  %187 = cast(meta[relay.Constant][16] /* ty=Tensor[(2640), int64] */, dtype="int64") /* ty=Tensor[(2640), int64] */;
  %188 = cast(meta[relay.Constant][17] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %189 = reshape(%186, newshape=[]) /* ty=int64 */;
  %190 = reshape(%187, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), int64] */;
  %191 = reshape(%188, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %192 = @func_776(%189, %190, %191) /* ty=(Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %193 = %192.2;
  %194 = cast(%193, dtype="bool") /* ty=Tensor[(676), bool] */;
  %195 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(676), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %196 = cast(meta[relay.Constant][17] /* ty=Tensor[(676), float32] */, dtype="bool") /* ty=Tensor[(676), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?), bool] */;
  %198 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %199 = %198.1;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %201 = cosh(%200) /* ty=Tensor[(16, 12, 5), float32] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %203 = less(%196, %197) /* ty=Tensor[(676), bool] */;
  %204 = asinh(%202) /* ty=Tensor[(16, 12, 5), float32] */;
  %205 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %206 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  (%var_4687, meta[relay.Constant][16] /* ty=Tensor[(2640), int64] */, %203, %204, %205, %206)
}

def @func_3935() -> Tensor[(1, 7, 16), float64] {
  %207 = @func_2458() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %207.0
}

def @func_571(%var_555: Tensor[(8, 4, 5), uint64], %var_556: Tensor[(8, 4, 5), uint64], %var_564: Tensor[(60), float32]) -> (Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) {
  %208 = cast(%var_556, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %209 = shape_of(%var_555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_555, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = cast(%var_564, dtype="float32") /* ty=Tensor[(60), float32] */;
  %213 = reshape(%212, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %214 = greater_equal(%210, %211) /* ty=Tensor[(8, 4, 5), bool] */;
  %215 = @func_278(%213) /* ty=Tensor[(16, 12, 5), float32] */;
  (%214, %215, %var_564)
}

def @func_2458() -> (Tensor[(1, 7, 16), float64],) {
  %216 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  (%216,)
}

def @func_4343() -> Tensor[(1, 7, 16), float64] {
  %217 = @func_3619() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %217.0
}

def @func_1356(%var_1348: Tensor[(4, 8, 11), float32]) -> Tensor[(4, 8, 11), float32] {
  %218 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %219 = shape_of(%var_1348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_1348, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%220, %221) /* ty=Tensor[(4, 8, 11), float32] */
}

def @func_3606() -> (Tensor[(16, 12, 5), float32],) {
  %222 = @func_2896() /* ty=Tensor[(16, 12, 5), float32] */;
  (%222,)
}

def @func_1685(%var_1633: Tensor[(84), uint64], %var_1636: Tensor[(429), float32], %var_1643: Tensor[(352), float32], %var_1647: Tensor[(1536), float64], %var_1648: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(39, 11), float32], Tensor[(84), uint64], Tensor[(550, 3), float32], Tensor[(48, 8), float32], Tensor[(429), float32], Tensor[(352), float32], Tensor[(16, 12, 8), float32], Tensor[(160), uint64], Tensor[(676), float32], Tensor[(676), float32], Tensor[(60, 2640), float32], Tensor[(4, 8, 11), uint16], Tensor[(60, 1536), bool]) {
  %223 = @func_1265() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %224 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %225 = cast(meta[relay.Constant][19] /* ty=Tensor[(550, 3), float32] */, dtype="float32") /* ty=Tensor[(550, 3), float32] */;
  %226 = cast(meta[relay.Constant][20] /* ty=Tensor[(48, 8), float32] */, dtype="float32") /* ty=Tensor[(48, 8), float32] */;
  %227 = cast(%var_1636, dtype="float32") /* ty=Tensor[(429), float32] */;
  %228 = reshape(%224, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %229 = reshape(%225, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), float32] */;
  %230 = reshape(%226, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %231 = reshape(%227, newshape=[39, 11]) /* ty=Tensor[(39, 11), float32] */;
  %232 = @func_1223(%228, %229, %230, %231) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) */;
  %233 = cast(%var_1647, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %234 = cast(%var_1647, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %235 = cast(%var_1648, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %236 = cast(meta[relay.Constant][21] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %237 = reshape(%233, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float64] */;
  %238 = reshape(%234, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float64] */;
  %239 = reshape(%235, newshape=[2, 80]) /* ty=Tensor[(2, 80), uint64] */;
  %240 = reshape(%236, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %241 = @func_1328(%237, %238, %239, %240) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) */;
  %242 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %243 = cast(meta[relay.Constant][22] /* ty=Tensor[(2640), int64] */, dtype="int64") /* ty=Tensor[(2640), int64] */;
  %244 = cast(meta[relay.Constant][23] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %245 = reshape(%242, newshape=[]) /* ty=int64 */;
  %246 = reshape(%243, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), int64] */;
  %247 = reshape(%244, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %248 = @func_776(%245, %246, %247) /* ty=(Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %249 = cast(meta[relay.Constant][21] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %250 = cast(meta[relay.Constant][22] /* ty=Tensor[(2640), int64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %251 = cast(%var_1643, dtype="float32") /* ty=Tensor[(352), float32] */;
  %252 = reshape(%251, newshape=[4, 8, 11]) /* ty=Tensor[(4, 8, 11), float32] */;
  %253 = @func_1356(%252) /* ty=Tensor[(4, 8, 11), float32] */;
  %254 = cast(6 /* ty=int64 */, dtype="uint16") /* ty=uint16 */;
  %255 = cast(%253, dtype="uint16") /* ty=Tensor[(4, 8, 11), uint16] */;
  %256 = cast(%var_1647, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %257 = cast(meta[relay.Constant][21] /* ty=Tensor[(60, 1), float32] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %258 = %223.0;
  %259 = %232.11;
  %260 = %241.3;
  %261 = %248.2;
  %262 = divide(%249, %250) /* ty=Tensor[(60, 2640), float32] */;
  %263 = bitwise_or(%254, %255) /* ty=Tensor[(4, 8, 11), uint16] */;
  %264 = less(%256, %257) /* ty=Tensor[(60, 1536), bool] */;
  (%258, %259, %var_1633, meta[relay.Constant][19] /* ty=Tensor[(550, 3), float32] */, meta[relay.Constant][20] /* ty=Tensor[(48, 8), float32] */, %var_1636, %var_1643, %260, %var_1648, %261, meta[relay.Constant][23] /* ty=Tensor[(676), float32] */, %262, %263, %264)
}

def @func_1138(%var_1091: Tensor[(15, 3, 2), float32], %var_1099: Tensor[(96), int64], %var_1125: Tensor[(429), float32]) -> (Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) {
  %265 = cast(%var_1099, dtype="int64") /* ty=Tensor[(96), int64] */;
  %266 = reshape(%265, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
  %267 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %268 = reshape(%267, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %269 = cast(%var_1091, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %270 = log10(%269) /* ty=Tensor[(15, 3, 2), float32] */;
  %271 = cast(%var_1091, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %275 = cast(%var_1125, dtype="float32") /* ty=Tensor[(429), float32] */;
  %276 = cast(meta[relay.Constant][25] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %277 = reshape(%275, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %278 = reshape(%276, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %279 = @func_408(%277, %278) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %280 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %281 = @func_383(%266) /* ty=Tensor[(4, 3, 8), int64] */;
  %282 = @func_814(%268) /* ty=Tensor[(10, 3, 6), bool] */;
  %283 = subtract(%273, %274) /* ty=Tensor[(15, 3, 2), float64] */;
  %284 = %279.0;
  %285 = %280.2;
  (%281, %var_1099, %282, meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, %283, %284, %var_1125, meta[relay.Constant][25] /* ty=Tensor[(676), float32] */, %285)
}

def @func_1503() -> Tensor[(160), uint64] {
  %286 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %286.2
}

def @func_776(%var_759: int64, %var_760: Tensor[(11, 16, 15), int64], %var_772: Tensor[(676), float32]) -> (Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
  %287 = cast(%var_759, dtype="bool") /* ty=bool */;
  %288 = cast(%var_760, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %289 = cast(%var_772, dtype="float32") /* ty=Tensor[(676), float32] */;
  %290 = reshape(%289, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float32] */;
  %291 = @func_60(%290) /* ty=(Tensor[(13, 13, 4), float32],) */;
  %292 = less_equal(%287, %288) /* ty=Tensor[(11, 16, 15), bool] */;
  %293 = %291.0;
  (%292, %293, %var_772)
}

def @func_1021() -> Tensor[(1, 7, 16), float64] {
  %294 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  acosh(%294) /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_3294() -> Tensor[(1, 7, 16), float64] {
  @func_1075() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_1223(%var_1183: Tensor[(84), uint64], %var_1184: Tensor[(1, 1650), float32], %var_1201: Tensor[(384), float32], %var_1218: Tensor[(39, 11), float32]) -> (Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) {
  %295 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %297 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %298 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %299 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %300 = cast(%var_1184, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
  %301 = cast(%var_1184, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
  %302 = reshape(%297, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %303 = reshape(%298, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %304 = reshape(%299, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %305 = reshape(%300, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %306 = reshape(%301, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %307 = @func_967(%302, %303, %304, %305, %306) /* ty=(Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) */;
  %308 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 88), float32] */, dtype="float32") /* ty=Tensor[(8, 88), float32] */;
  %309 = reshape(%308, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float32] */;
  %310 = @func_529(%309) /* ty=(Tensor[(4, 11, 16), float32],) */;
  %311 = cast(%var_1201, dtype="float32") /* ty=Tensor[(384), float32] */;
  %312 = cast(%var_1201, dtype="float32") /* ty=Tensor[(384), float32] */;
  %313 = reshape(%311, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %314 = reshape(%312, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %315 = @func_620(%313, %314) /* ty=(Tensor[(4, 8, 12), float32],) */;
  %316 = cast(meta[relay.Constant][28] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %317 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 1), int64] */, dtype="int64") /* ty=Tensor[(96, 1), int64] */;
  %318 = cast(%var_1218, dtype="float32") /* ty=Tensor[(39, 11), float32] */;
  %319 = reshape(%316, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
  %320 = reshape(%317, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %321 = reshape(%318, newshape=[429]) /* ty=Tensor[(429), float32] */;
  %322 = @func_1138(%319, %320, %321) /* ty=(Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) */;
  %323 = rsqrt(%296) /* ty=Tensor[(1, 7, 16), float64] */;
  %324 = %307.4;
  %325 = %310.0;
  %326 = %315.0;
  %327 = %322.3;
  (%323, %324, %var_1183, %var_1184, %325, meta[relay.Constant][27] /* ty=Tensor[(8, 88), float32] */, %326, %var_1201, %327, meta[relay.Constant][28] /* ty=Tensor[(90), float32] */, meta[relay.Constant][29] /* ty=Tensor[(96, 1), int64] */, %var_1218)
}

def @func_3619() -> (Tensor[(1, 7, 16), float64],) {
  %328 = @func_2867() /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) */;
  %329 = %328.1;
  (%329,)
}

def @func_5408() -> (Tensor[(60), float64], Tensor[(160), uint64]) {
  %330 = @func_2439() /* ty=(Tensor[(60), float32],) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(60), float64] */;
  %333 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
  %334 = erf(%332) /* ty=Tensor[(60), float64] */;
  %335 = %333.0;
  (%334, %335)
}

def @func_4634() -> (Tensor[(1, 7, 16), float64], Tensor[(160), uint64]) {
  %336 = @func_4144() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %337 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %338 = %336.0;
  %339 = %337.2;
  (%338, %339)
}

def @func_2601(%var_2558: Tensor[(429), float32], %var_2559: Tensor[(676), float32], %var_2588: Tensor[(84), uint64], %var_2589: Tensor[(1650), float32]) -> (Tensor[(676), float32], Tensor[(429), int64], Tensor[(?, 11, 12), bool], Tensor[(96), int64], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(?, 11, 12), float64]) {
  %340 = cast(%var_2558, dtype="float32") /* ty=Tensor[(429), float32] */;
  %341 = cast(%var_2559, dtype="float32") /* ty=Tensor[(676), float32] */;
  %342 = reshape(%340, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %343 = reshape(%341, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %344 = @func_408(%342, %343) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="int64") /* ty=Tensor[(13, 3, 11), int64] */;
  %347 = shape_of(%var_2558, dtype="int32") /* ty=Tensor[(1), int32] */;
  %348 = cast(%var_2558, dtype="int64") /* ty=Tensor[(429), int64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?), int64] */;
  %350 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %351 = exp(%350) /* ty=Tensor[(1, 11, 12), float64] */;
  %352 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 11, 12), float64] */, dtype="int64") /* ty=Tensor[(1, 11, 12), int64] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int64") /* ty=Tensor[(1, 11, 12), int64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %356 = bitwise_and(%354, %355) /* ty=Tensor[(?, 11, 12), int64] */;
  %357 = cast(%356, dtype="bool") /* ty=Tensor[(?, 11, 12), bool] */;
  %358 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%351, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %362 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %363 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %364 = cast(%var_2589, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %365 = cast(%var_2589, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %366 = reshape(%361, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %367 = reshape(%362, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %368 = reshape(%363, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %369 = reshape(%364, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %370 = reshape(%365, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %371 = @func_967(%366, %367, %368, %369, %370) /* ty=(Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) */;
  %372 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %373 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%356, dtype="float64") /* ty=Tensor[(?, 11, 12), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %376 = add(%348, %349) /* ty=Tensor[(429), int64] */;
  %377 = greater(%359, %360) /* ty=Tensor[(?, 11, 12), bool] */;
  %378 = %371.2;
  %379 = divide(%374, %375) /* ty=Tensor[(?, 11, 12), float64] */;
  (%var_2559, %376, %377, %378, %var_2588, %var_2589, %379)
}

def @func_1523() -> Tensor[(16, 12, 5), float32] {
  %380 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %380.1
}

def @func_278(%var_270: Tensor[(1, 12, 5), float32]) -> Tensor[(16, 12, 5), float32] {
  %381 = cast(%var_270, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %382 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %383 = greater(%381, %382) /* ty=Tensor[(16, 12, 5), bool] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  rsqrt(%384) /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_1265() -> (Tensor[(1, 7, 16), float64],) {
  %385 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  (%385,)
}

def @func_2169(%var_2087: Tensor[(16, 1, 7), float32], %var_2154: Tensor[(16, 13, 7), int32]) -> (Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) {
  %386 = cast(meta[relay.Constant][32] /* ty=Tensor[(704), float32] */, dtype="float32") /* ty=Tensor[(704), float32] */;
  %387 = reshape(%386, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float32] */;
  %388 = @func_529(%387) /* ty=(Tensor[(4, 11, 16), float32],) */;
  %389 = @func_1265() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %390 = cast(%var_2087, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
  %391 = atanh(%390) /* ty=Tensor[(16, 1, 7), float32] */;
  %392 = cast(%391, dtype="int32") /* ty=Tensor[(16, 1, 7), int32] */;
  %393 = shape_of(%var_2087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_2087, dtype="int32") /* ty=Tensor[(16, 1, 7), int32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %396 = bitwise_and(%394, %395) /* ty=Tensor[(16, ?, 7), int32] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(16, ?, 7), float64] */;
  %398 = rsqrt(%397) /* ty=Tensor[(16, ?, 7), float64] */;
  %399 = cast(%var_2087, dtype="float64") /* ty=Tensor[(16, 1, 7), float64] */;
  %400 = exp(%399) /* ty=Tensor[(16, 1, 7), float64] */;
  %401 = cast(%400, dtype="bool") /* ty=Tensor[(16, 1, 7), bool] */;
  %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%398, dtype="bool") /* ty=Tensor[(16, ?, 7), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = cast(%396, dtype="int8") /* ty=Tensor[(16, ?, 7), int8] */;
  %406 = cast(%var_2154, dtype="int8") /* ty=Tensor[(16, 13, 7), int8] */;
  %407 = cast(%var_2087, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
  %408 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%391, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %411 = subtract(%409, %410) /* ty=Tensor[(16, ?, 7), float32] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(16, ?, 7), float64] */;
  %413 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  %414 = %388.0;
  %415 = %389.0;
  %416 = equal(%403, %404) /* ty=Tensor[(16, ?, 7), bool] */;
  %417 = add(%405, %406) /* ty=Tensor[(16, 13, 7), int8] */;
  %418 = sinh(%412) /* ty=Tensor[(16, ?, 7), float64] */;
  (%413, %414, meta[relay.Constant][32] /* ty=Tensor[(704), float32] */, %415, %416, %417, %418)
}

def @func_4912(%var_4870: Tensor[(2, 728), int32]) -> (Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) {
  %419 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
  %420 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  %422 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 728), int32] */, dtype="int32") /* ty=Tensor[(2, 728), int32] */;
  %423 = reshape(%421, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), float32] */;
  %424 = reshape(%422, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
  %425 = @func_2169(%423, %424) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) */;
  %426 = %425.3;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %428 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%420, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %431 = cast(%420, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  %432 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%426, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = mod(%433, %434) /* ty=Tensor[(?, 7, 16), float32] */;
  %436 = cast(%435, dtype="uint64") /* ty=Tensor[(?, 7, 16), uint64] */;
  %437 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%426, dtype="uint64") /* ty=Tensor[(1, 7, 16), uint64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %440 = cast(%var_4870, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
  %441 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 728), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %442 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 728), int32] */, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %444 = cast(meta[relay.Constant][34] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %445 = reshape(%444, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %446 = @func_3362(%445) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) */;
  %447 = %446.1;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(429), float32] */;
  %449 = log(%448) /* ty=Tensor[(429), float32] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(429), float64] */;
  %451 = @func_3821() /* ty=Tensor[(160), uint64] */;
  %452 = %419.0;
  %453 = multiply(%429, %430) /* ty=Tensor[(?, 7, 16), float64] */;
  %454 = bitwise_and(%438, %439) /* ty=Tensor[(?, 7, 16), uint64] */;
  %455 = right_shift(%442, %443) /* ty=Tensor[(2, 728), uint16] */;
  %456 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  %457 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %458 = sqrt(%450) /* ty=Tensor[(429), float64] */;
  (%451, %452, %453, %454, %455, meta[relay.Constant][34] /* ty=Tensor[(676), float32] */, %456, %457, %458)
}

def @func_2674(%var_2668: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  %459 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %461 = cast(%var_2668, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %462 = divide(%460, %461) /* ty=Tensor[(8, 7, 16), float64] */;
  (%462,)
}

def @main(%var_5562: Tensor[(9, 4, 1), float64]) -> Tensor[(9, 4, 1), float64] {
  %463 = cast(%var_5562, dtype="float64") /* ty=Tensor[(9, 4, 1), float64] */;
  log10(%463) /* ty=Tensor[(9, 4, 1), float64] */
}

def @func_670(%var_637: Tensor[(15, 10, 11), float32], %var_638: Tensor[(15, 10, 11), float32], %var_647: Tensor[(48, 2), int64], %var_664: Tensor[(160), uint64]) -> (Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) {
  %464 = cast(%var_638, dtype="bool") /* ty=Tensor[(15, 10, 11), bool] */;
  %465 = shape_of(%var_637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_637, dtype="bool") /* ty=Tensor[(15, 10, 11), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = cast(%var_647, dtype="int64") /* ty=Tensor[(48, 2), int64] */;
  %469 = reshape(%468, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
  %470 = cast(%var_664, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %471 = cast(%var_664, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %472 = cast(meta[relay.Constant][35] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %473 = reshape(%470, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %474 = reshape(%471, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %475 = reshape(%472, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %476 = @func_571(%473, %474, %475) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %477 = less(%466, %467) /* ty=Tensor[(15, 10, 11), bool] */;
  %478 = @func_383(%469) /* ty=Tensor[(4, 3, 8), int64] */;
  %479 = %476.1;
  (%477, %478, %var_647, %479, %var_664, meta[relay.Constant][35] /* ty=Tensor[(30, 2), float32] */)
}

def @func_2439() -> (Tensor[(60), float32],) {
  %480 = @func_1553() /* ty=(Tensor[(60), float32],) */;
  %481 = %480.0;
  (%481,)
}

def @func_2975(%var_2960: Tensor[(352), float32]) -> (Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) {
  %482 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %483 = cast(meta[relay.Constant][36] /* ty=Tensor[(160), uint64] */, dtype="int8") /* ty=Tensor[(160), int8] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(1), int32] */;
  %485 = cast(%482, dtype="int8") /* ty=Tensor[(160), int8] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?), int8] */;
  %487 = cast(%var_2960, dtype="float32") /* ty=Tensor[(352), float32] */;
  %488 = reshape(%487, newshape=[4, 8, 11]) /* ty=Tensor[(4, 8, 11), float32] */;
  %489 = cast(%var_2960, dtype="float64") /* ty=Tensor[(352), float64] */;
  %490 = logical_xor(%485, %486) /* ty=Tensor[(160), int8] */;
  %491 = @func_1356(%488) /* ty=Tensor[(4, 8, 11), float32] */;
  %492 = sigmoid(%489) /* ty=Tensor[(352), float64] */;
  (%490, %491, %492)
}

def @func_4772() -> (Tensor[(160), uint64],) {
  %493 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
  %494 = %493.0;
  (%494,)
}

def @func_4656() -> Tensor[(9, 4), float64] {
  %495 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  asin(%495) /* ty=Tensor[(9, 4), float64] */
}

def @func_5112(%var_5062: Tensor[(676), float32], %var_5068: Tensor[(6, 7, 16), float64]) -> (Tensor[(676), float32], Tensor[(16, 12, 5), float32], Tensor[(6, 7, 16), bool], Tensor[(16, 12, 5), uint8]) {
  %496 = @func_3619() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
  %499 = cast(%var_5068, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %500 = cast(%var_5062, dtype="float32") /* ty=Tensor[(676), float32] */;
  %501 = reshape(%500, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %502 = @func_3362(%501) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %505 = tan(%504) /* ty=Tensor[(16, 12, 5), float32] */;
  %506 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 12, 5), float32] */, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %510 = floor_divide(%508, %509) /* ty=Tensor[(16, 12, 5), float64] */;
  %511 = cast(%505, dtype="uint8") /* ty=Tensor[(16, 12, 5), uint8] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="uint8") /* ty=Tensor[(16, 12, 5), uint8] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %515 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  %516 = not_equal(%498, %499) /* ty=Tensor[(6, 7, 16), bool] */;
  %517 = logical_xor(%513, %514) /* ty=Tensor[(16, 12, 5), uint8] */;
  (%var_5062, %515, %516, %517)
}

def @func_3070(%var_3068: Tensor[(180), float32]) -> (Tensor[(160), uint64], Tensor[(10, 3, 6), bool], Tensor[(180), float32]) {
  %518 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %519 = cast(%var_3068, dtype="float32") /* ty=Tensor[(180), float32] */;
  %520 = reshape(%519, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %521 = %518.2;
  %522 = @func_814(%520) /* ty=Tensor[(10, 3, 6), bool] */;
  (%521, %522, %var_3068)
}

def @func_383(%var_369: Tensor[(4, 3, 8), int64]) -> Tensor[(4, 3, 8), int64] {
  %523 = cast(%var_369, dtype="int64") /* ty=Tensor[(4, 3, 8), int64] */;
  %524 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(4, 3, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 3, 8), int64] */, dtype="int64") /* ty=Tensor[(4, 3, 8), int64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%525, %526) /* ty=Tensor[(4, 3, 8), int64] */
}

def @func_3300(%var_3296: Tensor[(12, 3, 6), float32]) -> (Tensor[(12, 3, 6), float32],) {
  %527 = cast(%var_3296, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
  %528 = acos(%527) /* ty=Tensor[(12, 3, 6), float32] */;
  (%528,)
}

def @func_620(%var_615: Tensor[(4, 8, 12), float32], %var_616: Tensor[(4, 8, 12), float32]) -> (Tensor[(4, 8, 12), float32],) {
  %529 = cast(%var_616, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
  %530 = shape_of(%var_615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_615, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %533 = mod(%531, %532) /* ty=Tensor[(4, 8, 12), float32] */;
  (%533,)
}

def @func_1806(%var_1778: Tensor[(2, 6, 8), float64], %var_1792: Tensor[(1650), float32], %var_1794: Tensor[(429), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) {
  %534 = cast(%var_1778, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %535 = erf(%534) /* ty=Tensor[(2, 6, 8), float64] */;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(2, 6, 8), float32] */;
  %537 = cast(meta[relay.Constant][40] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %538 = cast(%var_1792, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %539 = cast(meta[relay.Constant][41] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %540 = cast(%var_1794, dtype="float32") /* ty=Tensor[(429), float32] */;
  %541 = reshape(%537, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %542 = reshape(%538, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), float32] */;
  %543 = reshape(%539, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %544 = reshape(%540, newshape=[39, 11]) /* ty=Tensor[(39, 11), float32] */;
  %545 = @func_1223(%541, %542, %543, %544) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) */;
  %546 = cast(meta[relay.Constant][41] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %547 = cast(meta[relay.Constant][41] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %548 = reshape(%546, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %549 = reshape(%547, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %550 = @func_620(%548, %549) /* ty=(Tensor[(4, 8, 12), float32],) */;
  %551 = log10(%536) /* ty=Tensor[(2, 6, 8), float32] */;
  %552 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %553 = %545.5;
  %554 = %550.0;
  (%551, %552, %553, meta[relay.Constant][40] /* ty=Tensor[(84), uint64] */, %var_1792, meta[relay.Constant][41] /* ty=Tensor[(384), float32] */, %var_1794, %554)
}

def @func_2246(%var_2220: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
  %555 = cast(%var_2220, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %556 = cast(%var_2220, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %557 = cast(meta[relay.Constant][42] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %558 = reshape(%555, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %559 = reshape(%556, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %560 = reshape(%557, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %561 = @func_571(%558, %559, %560) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %562 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %563 = %561.1;
  (%562, %563, %var_2220, meta[relay.Constant][42] /* ty=Tensor[(60), float32] */)
}

def @func_3318() -> (Tensor[(15, 15, 16), bool],) {
  %564 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %565 = %564.0;
  (%565,)
}

def @func_2867() -> (Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) {
  %566 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
  %568 = atanh(%567) /* ty=Tensor[(16, 12, 5), float64] */;
  %569 = cast(%566, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = less(%571, %572) /* ty=Tensor[(16, 12, 5), bool] */;
  %574 = cast(%568, dtype="uint32") /* ty=Tensor[(16, 12, 5), uint32] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="uint32") /* ty=Tensor[(16, 12, 5), uint32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %578 = left_shift(%576, %577) /* ty=Tensor[(16, 12, 5), uint32] */;
  %579 = @func_1733() /* ty=Tensor[(1, 7, 16), float64] */;
  (%578, %579)
}

def @func_5198(%var_5167: Tensor[(6, 8, 2), int32], %var_5181: Tensor[(4, 88), float32]) -> (Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) {
  %580 = cast(%var_5167, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %581 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %584 = subtract(%582, %583) /* ty=Tensor[(6, 8, 2), int32] */;
  %585 = cast(%var_5167, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = cast(%584, dtype="float32") /* ty=Tensor[(6, 8, 2), float32] */;
  %590 = cast(%var_5181, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %591 = reshape(%590, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %592 = @func_2975(%591) /* ty=(Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) */;
  %593 = cast(meta[relay.Constant][44] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %594 = reshape(%593, newshape=[16, 12, 5]) /* ty=Tensor[(16, 12, 5), float32] */;
  %595 = @func_3771(%594) /* ty=(Tensor[(60), float32], Tensor[(16, 12, 5), bool]) */;
  %596 = greater(%587, %588) /* ty=Tensor[(6, 8, 2), bool] */;
  %597 = acosh(%589) /* ty=Tensor[(6, 8, 2), float32] */;
  %598 = %592.1;
  %599 = %595.0;
  (%596, %597, %598, %var_5181, %599, meta[relay.Constant][44] /* ty=Tensor[(960), float32] */)
}

def @func_1075() -> Tensor[(1, 7, 16), float64] {
  @func_1021() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_5474() -> (Tensor[(160), uint64], Tensor[(112), float32], Tensor[(1456), int32]) {
  %600 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
  %601 = cast(meta[relay.Constant][45] /* ty=Tensor[(1456), int32] */, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %602 = reshape(%601, newshape=[1456]) /* ty=Tensor[(1456), int32] */;
  %603 = @func_3050(%602) /* ty=(Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) */;
  %604 = %600.0;
  %605 = %603.2;
  (%604, %605, meta[relay.Constant][45] /* ty=Tensor[(1456), int32] */)
}

def @func_1733() -> Tensor[(1, 7, 16), float64] {
  @func_1075() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_3821() -> Tensor[(160), uint64] {
  @func_2041() /* ty=Tensor[(160), uint64] */
}

def @func_4599() -> (Tensor[(160), uint64],) {
  %606 = @func_2041() /* ty=Tensor[(160), uint64] */;
  (%606,)
}

def @func_2896() -> Tensor[(16, 12, 5), float32] {
  %607 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %607.0
}

def @func_3277() -> Tensor[(16, 12, 5), float32] {
  %608 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %608.1
}

def @func_3115(%var_3106: Tensor[(96), float64], %var_3107: Tensor[(1650, 1), float32], %var_3108: Tensor[(429), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(429), float32], Tensor[(96), float64], Tensor[(1650, 1), float32], Tensor[(429), float32]) {
  %609 = cast(%var_3106, dtype="float64") /* ty=Tensor[(96), float64] */;
  %610 = cast(%var_3107, dtype="float32") /* ty=Tensor[(1650, 1), float32] */;
  %611 = cast(%var_3108, dtype="float32") /* ty=Tensor[(429), float32] */;
  %612 = reshape(%609, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float64] */;
  %613 = reshape(%610, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %614 = reshape(%611, newshape=[429]) /* ty=Tensor[(429), float32] */;
  %615 = @func_1806(%612, %613, %614) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) */;
  %616 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  %617 = @func_1733() /* ty=Tensor[(1, 7, 16), float64] */;
  %618 = @func_2813() /* ty=Tensor[(160), uint64] */;
  %619 = @func_2041() /* ty=Tensor[(160), uint64] */;
  %620 = %615.6;
  (%616, %617, %618, %619, %620, %var_3106, %var_3107, %var_3108)
}

def @func_1328(%var_1280: Tensor[(16, 12, 8), float64], %var_1298: Tensor[(16, 12, 8), float64], %var_1305: Tensor[(2, 80), uint64], %var_1306: Tensor[(60), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) {
  %621 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 80), uint64] */;
  %622 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 80), uint64] */;
  %623 = cast(%var_1306, dtype="float32") /* ty=Tensor[(60), float32] */;
  %624 = reshape(%621, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %625 = reshape(%622, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %626 = reshape(%623, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %627 = @func_571(%624, %625, %626) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %628 = cast(%var_1280, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %629 = cos(%628) /* ty=Tensor[(16, 12, 8), float64] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %631 = cast(%629, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %632 = log(%631) /* ty=Tensor[(16, 12, 8), float32] */;
  %633 = cast(%var_1298, dtype="int32") /* ty=Tensor[(16, 12, 8), int32] */;
  %634 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%629, dtype="int32") /* ty=Tensor[(16, 12, 8), int32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %637 = maximum(%635, %636) /* ty=Tensor[(16, 12, 8), int32] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %639 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%632, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %642 = power(%640, %641) /* ty=Tensor[(16, 12, 8), float64] */;
  %643 = cast(%632, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %647 = %627.1;
  %648 = atanh(%630) /* ty=Tensor[(16, 12, 8), float32] */;
  %649 = multiply(%645, %646) /* ty=Tensor[(16, 12, 8), int64] */;
  (%647, %var_1305, %var_1306, %648, %649)
}

def @func_3050(%var_3017: Tensor[(1456), int32]) -> (Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) {
  %650 = cast(meta[relay.Constant][46] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %651 = cast(%var_3017, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %652 = reshape(%650, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), float32] */;
  %653 = reshape(%651, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
  %654 = @func_2169(%652, %653) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) */;
  %655 = @func_2439() /* ty=(Tensor[(60), float32],) */;
  %656 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %657 = %654.2;
  %658 = %655.0;
  (%656, %657, meta[relay.Constant][46] /* ty=Tensor[(112), float32] */, %var_3017, %658)
}

def @func_4545() -> (Tensor[(1, 7, 16), float64],) {
  %659 = @func_3935() /* ty=Tensor[(1, 7, 16), float64] */;
  (%659,)
}

def @func_3362(%var_3334: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) {
  %660 = cast(meta[relay.Constant][47] /* ty=Tensor[(429), float32] */, dtype="float32") /* ty=Tensor[(429), float32] */;
  %661 = cast(%var_3334, dtype="float32") /* ty=Tensor[(676), float32] */;
  %662 = reshape(%660, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %663 = reshape(%661, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %664 = @func_408(%662, %663) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %665 = %664.1;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %667 = @func_2439() /* ty=(Tensor[(60), float32],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(60), float32] */;
  %670 = @func_2896() /* ty=Tensor[(16, 12, 5), float32] */;
  %671 = acosh(%666) /* ty=Tensor[(13, 13, 4), float32] */;
  %672 = tan(%669) /* ty=Tensor[(60), float32] */;
  (%670, meta[relay.Constant][47] /* ty=Tensor[(429), float32] */, %var_3334, %671, %672)
}

def @func_3991() -> (Tensor[(16, 12, 5), float32],) {
  %673 = @func_3606() /* ty=(Tensor[(16, 12, 5), float32],) */;
  %674 = %673.0;
  (%674,)
}

def @func_3580() -> (Tensor[(1, 7, 16), float64],) {
  %675 = @func_2767() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %676 = %675.0;
  (%676,)
}

def @func_2041() -> Tensor[(160), uint64] {
  @func_1503() /* ty=Tensor[(160), uint64] */
}

def @func_4166(%var_4149: Tensor[(5, 1, 16), float32]) -> Tensor[(5, 1, 16), float32] {
  %677 = cast(%var_4149, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
  asinh(%677) /* ty=Tensor[(5, 1, 16), float32] */
}

def @func_1466(%var_1459: Tensor[(15, 9, 2), int16], %var_1460: Tensor[(15, 9, 2), int16]) -> Tensor[(15, 9, 2), int16] {
  %678 = cast(%var_1460, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %679 = shape_of(%var_1459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%var_1459, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%680, %681) /* ty=Tensor[(15, 9, 2), int16] */
}

def @func_4144() -> (Tensor[(1, 7, 16), float64],) {
  %682 = @func_3580() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %683 = %682.0;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %685 = log2(%684) /* ty=Tensor[(1, 7, 16), float64] */;
  (%685,)
}

def @func_3572(%var_3551: Tensor[(16, 12, 5), float32]) -> (Tensor[(16, 12, 5), uint16],) {
  %686 = @func_3277() /* ty=Tensor[(16, 12, 5), float32] */;
  %687 = cast(%var_3551, dtype="uint16") /* ty=Tensor[(16, 12, 5), uint16] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="uint16") /* ty=Tensor[(16, 12, 5), uint16] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %691 = subtract(%689, %690) /* ty=Tensor[(16, 12, 5), uint16] */;
  (%691,)
}

def @func_4043(%var_4035: Tensor[(160), uint64]) -> Tensor[(160), float64] {
  %692 = @func_2041() /* ty=Tensor[(160), uint64] */;
  %693 = cast(%var_4035, dtype="float64") /* ty=Tensor[(160), float64] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(1), int32] */;
  %695 = cast(%692, dtype="float64") /* ty=Tensor[(160), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_divide(%695, %696) /* ty=Tensor[(160), float64] */
}

def @func_408(%var_396: Tensor[(13, 3, 11), float32], %var_404: Tensor[(676), float32]) -> (Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
  %697 = cast(%var_396, dtype="float32") /* ty=Tensor[(13, 3, 11), float32] */;
  %698 = cast(%var_404, dtype="float32") /* ty=Tensor[(676), float32] */;
  %699 = reshape(%698, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float32] */;
  %700 = @func_60(%699) /* ty=(Tensor[(13, 13, 4), float32],) */;
  %701 = atanh(%697) /* ty=Tensor[(13, 3, 11), float32] */;
  %702 = %700.0;
  (%701, %702, %var_404)
}

def @func_529(%var_516: Tensor[(4, 11, 16), float32]) -> (Tensor[(4, 11, 16), float32],) {
  %703 = cast(%var_516, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
  %704 = cosh(%703) /* ty=Tensor[(4, 11, 16), float32] */;
  (%704,)
}

def @func_1997(%var_1990: Tensor[(384), float32]) -> (Tensor[(60), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32]) {
  %705 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %706 = cast(%var_1990, dtype="float32") /* ty=Tensor[(384), float32] */;
  %707 = cast(%var_1990, dtype="float32") /* ty=Tensor[(384), float32] */;
  %708 = reshape(%706, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %709 = reshape(%707, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %710 = @func_620(%708, %709) /* ty=(Tensor[(4, 8, 12), float32],) */;
  %711 = %705.3;
  %712 = %710.0;
  (%711, %712, %var_1990)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1228(%var_1224: Tensor[(84), uint64], %var_1225: Tensor[(1, 1650), float32], %var_1226: Tensor[(384), float32], %var_1227: Tensor[(39, 11), float32]) -> (Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) {
  %33 = fn (%var_1183: Tensor[(84), uint64], %var_1184: Tensor[(1, 1650), float32], %var_1201: Tensor[(384), float32], %var_1218: Tensor[(39, 11), float32]) -> (Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) {
    %0 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %2 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %3 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %4 = cast(%var_1183, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %5 = cast(%var_1184, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
    %6 = cast(%var_1184, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
    %7 = reshape(%2, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
    %8 = reshape(%3, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
    %9 = reshape(%4, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
    %10 = reshape(%5, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
    %11 = reshape(%6, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
    %12 = @func_967(%7, %8, %9, %10, %11) /* ty=(Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 88), float32] */, dtype="float32") /* ty=Tensor[(8, 88), float32] */;
    %14 = reshape(%13, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float32] */;
    %15 = @func_529(%14) /* ty=(Tensor[(4, 11, 16), float32],) */;
    %16 = cast(%var_1201, dtype="float32") /* ty=Tensor[(384), float32] */;
    %17 = cast(%var_1201, dtype="float32") /* ty=Tensor[(384), float32] */;
    %18 = reshape(%16, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
    %19 = reshape(%17, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
    %20 = @func_620(%18, %19) /* ty=(Tensor[(4, 8, 12), float32],) */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(96, 1), int64] */, dtype="int64") /* ty=Tensor[(96, 1), int64] */;
    %23 = cast(%var_1218, dtype="float32") /* ty=Tensor[(39, 11), float32] */;
    %24 = reshape(%21, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
    %25 = reshape(%22, newshape=[96]) /* ty=Tensor[(96), int64] */;
    %26 = reshape(%23, newshape=[429]) /* ty=Tensor[(429), float32] */;
    %27 = @func_1138(%24, %25, %26) /* ty=(Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) */;
    %28 = rsqrt(%1) /* ty=Tensor[(1, 7, 16), float64] */;
    %29 = %12.4;
    %30 = %15.0;
    %31 = %20.0;
    %32 = %27.3;
    (%28, %29, %var_1183, %var_1184, %30, meta[relay.Constant][0] /* ty=Tensor[(8, 88), float32] */, %31, %var_1201, %32, meta[relay.Constant][1] /* ty=Tensor[(90), float32] */, meta[relay.Constant][2] /* ty=Tensor[(96, 1), int64] */, %var_1218)
  };
  %33(%var_1224, %var_1225, %var_1226, %var_1227) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) */
}

def @func_2977(%var_2976: Tensor[(352), float32]) -> (Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) {
  %45 = fn (%var_2960: Tensor[(352), float32]) -> (Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) {
    %34 = @func_1503() /* ty=Tensor[(160), uint64] */;
    %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(160), uint64] */, dtype="int8") /* ty=Tensor[(160), int8] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
    %37 = cast(%34, dtype="int8") /* ty=Tensor[(160), int8] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), int8] */;
    %39 = cast(%var_2960, dtype="float32") /* ty=Tensor[(352), float32] */;
    %40 = reshape(%39, newshape=[4, 8, 11]) /* ty=Tensor[(4, 8, 11), float32] */;
    %41 = cast(%var_2960, dtype="float64") /* ty=Tensor[(352), float64] */;
    %42 = logical_xor(%37, %38) /* ty=Tensor[(160), int8] */;
    %43 = @func_1356(%40) /* ty=Tensor[(4, 8, 11), float32] */;
    %44 = sigmoid(%41) /* ty=Tensor[(352), float64] */;
    (%42, %43, %44)
  };
  %45(%var_2976) /* ty=(Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) */
}

def @func_3318() -> (Tensor[(15, 15, 16), bool],) {
  %46 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %47 = %46.0;
  (%47,)
}

def @func_571(%var_555: Tensor[(8, 4, 5), uint64], %var_556: Tensor[(8, 4, 5), uint64], %var_564: Tensor[(60), float32]) -> (Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) {
  %48 = cast(%var_556, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %49 = shape_of(%var_555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_555, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(%var_564, dtype="float32") /* ty=Tensor[(60), float32] */;
  %53 = reshape(%52, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %54 = greater_equal(%50, %51) /* ty=Tensor[(8, 4, 5), bool] */;
  %55 = @func_278(%53) /* ty=Tensor[(16, 12, 5), float32] */;
  (%54, %55, %var_564)
}

def @func_2248(%var_2247: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
  %65 = fn (%var_2220: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
    %56 = cast(%var_2220, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %57 = cast(%var_2220, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %59 = reshape(%56, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
    %60 = reshape(%57, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
    %61 = reshape(%58, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %62 = @func_571(%59, %60, %61) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
    %63 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
    %64 = %62.1;
    (%63, %64, %var_2220, meta[relay.Constant][4] /* ty=Tensor[(60), float32] */)
  };
  %65(%var_2247) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */
}

def @func_1912(%var_1910: Tensor[(3, 3, 2), float64], %var_1911: Tensor[(96), int64]) -> (Tensor[(3, 3, 2), float64], Tensor[(16, 12, 5), float32], Tensor[(3, 20), float32], Tensor[(4, 3, 8), int64], Tensor[(96), int64]) {
  @func_1908(%var_1910, %var_1911) /* ty=(Tensor[(3, 3, 2), float64], Tensor[(16, 12, 5), float32], Tensor[(3, 20), float32], Tensor[(4, 3, 8), int64], Tensor[(96), int64]) */
}

def @func_1525() -> Tensor[(16, 12, 5), float32] {
  @func_1523() /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_1685(%var_1633: Tensor[(84), uint64], %var_1636: Tensor[(429), float32], %var_1643: Tensor[(352), float32], %var_1647: Tensor[(1536), float64], %var_1648: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(39, 11), float32], Tensor[(84), uint64], Tensor[(550, 3), float32], Tensor[(48, 8), float32], Tensor[(429), float32], Tensor[(352), float32], Tensor[(16, 12, 8), float32], Tensor[(160), uint64], Tensor[(676), float32], Tensor[(676), float32], Tensor[(60, 2640), float32], Tensor[(4, 8, 11), uint16], Tensor[(60, 1536), bool]) {
  %66 = @func_1265() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %67 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(550, 3), float32] */, dtype="float32") /* ty=Tensor[(550, 3), float32] */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(48, 8), float32] */, dtype="float32") /* ty=Tensor[(48, 8), float32] */;
  %70 = cast(%var_1636, dtype="float32") /* ty=Tensor[(429), float32] */;
  %71 = reshape(%67, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %72 = reshape(%68, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), float32] */;
  %73 = reshape(%69, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %74 = reshape(%70, newshape=[39, 11]) /* ty=Tensor[(39, 11), float32] */;
  %75 = @func_1223(%71, %72, %73, %74) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) */;
  %76 = cast(%var_1647, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %77 = cast(%var_1647, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %78 = cast(%var_1648, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %80 = reshape(%76, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float64] */;
  %81 = reshape(%77, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float64] */;
  %82 = reshape(%78, newshape=[2, 80]) /* ty=Tensor[(2, 80), uint64] */;
  %83 = reshape(%79, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %84 = @func_1328(%80, %81, %82, %83) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) */;
  %85 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(2640), int64] */, dtype="int64") /* ty=Tensor[(2640), int64] */;
  %87 = cast(meta[relay.Constant][9] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %88 = reshape(%85, newshape=[]) /* ty=int64 */;
  %89 = reshape(%86, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), int64] */;
  %90 = reshape(%87, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %91 = @func_776(%88, %89, %90) /* ty=(Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %93 = cast(meta[relay.Constant][8] /* ty=Tensor[(2640), int64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %94 = cast(%var_1643, dtype="float32") /* ty=Tensor[(352), float32] */;
  %95 = reshape(%94, newshape=[4, 8, 11]) /* ty=Tensor[(4, 8, 11), float32] */;
  %96 = @func_1356(%95) /* ty=Tensor[(4, 8, 11), float32] */;
  %97 = cast(6 /* ty=int64 */, dtype="uint16") /* ty=uint16 */;
  %98 = cast(%96, dtype="uint16") /* ty=Tensor[(4, 8, 11), uint16] */;
  %99 = cast(%var_1647, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(60, 1), float32] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %101 = %66.0;
  %102 = %75.11;
  %103 = %84.3;
  %104 = %91.2;
  %105 = divide(%92, %93) /* ty=Tensor[(60, 2640), float32] */;
  %106 = bitwise_or(%97, %98) /* ty=Tensor[(4, 8, 11), uint16] */;
  %107 = less(%99, %100) /* ty=Tensor[(60, 1536), bool] */;
  (%101, %102, %var_1633, meta[relay.Constant][5] /* ty=Tensor[(550, 3), float32] */, meta[relay.Constant][6] /* ty=Tensor[(48, 8), float32] */, %var_1636, %var_1643, %103, %var_1648, %104, meta[relay.Constant][9] /* ty=Tensor[(676), float32] */, %105, %106, %107)
}

def @func_3295() -> Tensor[(1, 7, 16), float64] {
  %108 = fn () -> Tensor[(1, 7, 16), float64] {
    @func_1075() /* ty=Tensor[(1, 7, 16), float64] */
  };
  %108() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_4741(%var_4739: int64) -> (int64, Tensor[(2640), int64], Tensor[(676), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(1, 7, 16), float64]) {
  @func_4738(%var_4739) /* ty=(int64, Tensor[(2640), int64], Tensor[(676), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(1, 7, 16), float64]) */
}

def @func_4168(%var_4167: Tensor[(5, 1, 16), float32]) -> Tensor[(5, 1, 16), float32] {
  %110 = fn (%var_4149: Tensor[(5, 1, 16), float32]) -> Tensor[(5, 1, 16), float32] {
    %109 = cast(%var_4149, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
    asinh(%109) /* ty=Tensor[(5, 1, 16), float32] */
  };
  %110(%var_4167) /* ty=Tensor[(5, 1, 16), float32] */
}

def @func_5409() -> (Tensor[(60), float64], Tensor[(160), uint64]) {
  %117 = fn () -> (Tensor[(60), float64], Tensor[(160), uint64]) {
    %111 = @func_2439() /* ty=(Tensor[(60), float32],) */;
    %112 = %111.0;
    %113 = cast(%112, dtype="float64") /* ty=Tensor[(60), float64] */;
    %114 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
    %115 = erf(%113) /* ty=Tensor[(60), float64] */;
    %116 = %114.0;
    (%115, %116)
  };
  %117() /* ty=(Tensor[(60), float64], Tensor[(160), uint64]) */
}

def @func_4398(%var_4397: Tensor[(2, 7, 16), float64]) -> (Tensor[(14, 9, 13), bool], Tensor[(11, 182), float64], Tensor[(2, 7, 16), float64], Tensor[(16, 12, 5), float32]) {
  %131 = fn (%var_4378: Tensor[(2, 7, 16), float64]) -> (Tensor[(14, 9, 13), bool], Tensor[(11, 182), float64], Tensor[(2, 7, 16), float64], Tensor[(16, 12, 5), float32]) {
    %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 182), bool] */, dtype="bool") /* ty=Tensor[(1, 182), bool] */;
    %119 = reshape(%118, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), bool] */;
    %120 = @func_3244(%119) /* ty=(Tensor[(14, 9, 13), bool],) */;
    %121 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 182), bool] */, dtype="float64") /* ty=Tensor[(1, 182), float64] */;
    %122 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 182), bool] */, dtype="float64") /* ty=Tensor[(11, 182), float64] */;
    %123 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
    %124 = cast(%123, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %125 = cast(%var_4378, dtype="float64") /* ty=Tensor[(2, 7, 16), float64] */;
    %126 = @func_3179() /* ty=(Tensor[(16, 12, 5), float32],) */;
    %127 = %120.0;
    %128 = divide(%121, %122) /* ty=Tensor[(11, 182), float64] */;
    %129 = power(%124, %125) /* ty=Tensor[(2, 7, 16), float64] */;
    %130 = %126.0;
    (%127, %128, %129, %130)
  };
  %131(%var_4397) /* ty=(Tensor[(14, 9, 13), bool], Tensor[(11, 182), float64], Tensor[(2, 7, 16), float64], Tensor[(16, 12, 5), float32]) */
}

def @func_411(%var_409: Tensor[(13, 3, 11), float32], %var_410: Tensor[(676), float32]) -> (Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
  %138 = fn (%var_396: Tensor[(13, 3, 11), float32], %var_404: Tensor[(676), float32]) -> (Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
    %132 = cast(%var_396, dtype="float32") /* ty=Tensor[(13, 3, 11), float32] */;
    %133 = cast(%var_404, dtype="float32") /* ty=Tensor[(676), float32] */;
    %134 = reshape(%133, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float32] */;
    %135 = @func_60(%134) /* ty=(Tensor[(13, 13, 4), float32],) */;
    %136 = atanh(%132) /* ty=Tensor[(13, 3, 11), float32] */;
    %137 = %135.0;
    (%136, %137, %var_404)
  };
  %138(%var_409, %var_410) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */
}

def @func_1466(%var_1459: Tensor[(15, 9, 2), int16], %var_1460: Tensor[(15, 9, 2), int16]) -> Tensor[(15, 9, 2), int16] {
  %139 = cast(%var_1460, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %140 = shape_of(%var_1459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_1459, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%141, %142) /* ty=Tensor[(15, 9, 2), int16] */
}

def @func_4914(%var_4913: Tensor[(2, 728), int32]) -> (Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) {
  %183 = fn (%var_4870: Tensor[(2, 728), int32]) -> (Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) {
    %143 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
    %144 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
    %145 = cast(%144, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
    %146 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 728), int32] */, dtype="int32") /* ty=Tensor[(2, 728), int32] */;
    %147 = reshape(%145, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), float32] */;
    %148 = reshape(%146, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
    %149 = @func_2169(%147, %148) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) */;
    %150 = %149.3;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %152 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%144, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %155 = cast(%144, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
    %156 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %157 = cast(%150, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %159 = mod(%157, %158) /* ty=Tensor[(?, 7, 16), float32] */;
    %160 = cast(%159, dtype="uint64") /* ty=Tensor[(?, 7, 16), uint64] */;
    %161 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%150, dtype="uint64") /* ty=Tensor[(1, 7, 16), uint64] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %164 = cast(%var_4870, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
    %165 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(2, 728), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 728), int32] */, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %168 = cast(meta[relay.Constant][13] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
    %169 = reshape(%168, newshape=[676]) /* ty=Tensor[(676), float32] */;
    %170 = @func_3362(%169) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) */;
    %171 = %170.1;
    %172 = cast(%171, dtype="float32") /* ty=Tensor[(429), float32] */;
    %173 = log(%172) /* ty=Tensor[(429), float32] */;
    %174 = cast(%173, dtype="float64") /* ty=Tensor[(429), float64] */;
    %175 = @func_3821() /* ty=Tensor[(160), uint64] */;
    %176 = %143.0;
    %177 = multiply(%153, %154) /* ty=Tensor[(?, 7, 16), float64] */;
    %178 = bitwise_and(%162, %163) /* ty=Tensor[(?, 7, 16), uint64] */;
    %179 = right_shift(%166, %167) /* ty=Tensor[(2, 728), uint16] */;
    %180 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
    %181 = @func_1503() /* ty=Tensor[(160), uint64] */;
    %182 = sqrt(%174) /* ty=Tensor[(429), float64] */;
    (%175, %176, %177, %178, %179, meta[relay.Constant][13] /* ty=Tensor[(676), float32] */, %180, %181, %182)
  };
  %183(%var_4913) /* ty=(Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) */
}

def @func_2043() -> Tensor[(160), uint64] {
  @func_2041() /* ty=Tensor[(160), uint64] */
}

def @func_4635() -> (Tensor[(1, 7, 16), float64], Tensor[(160), uint64]) {
  %188 = fn () -> (Tensor[(1, 7, 16), float64], Tensor[(160), uint64]) {
    %184 = @func_4144() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %185 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
    %186 = %184.0;
    %187 = %185.2;
    (%186, %187)
  };
  %188() /* ty=(Tensor[(1, 7, 16), float64], Tensor[(160), uint64]) */
}

def @func_675(%var_671: Tensor[(15, 10, 11), float32], %var_672: Tensor[(15, 10, 11), float32], %var_673: Tensor[(48, 2), int64], %var_674: Tensor[(160), uint64]) -> (Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) {
  %205 = fn (%var_637: Tensor[(15, 10, 11), float32], %var_638: Tensor[(15, 10, 11), float32], %var_647: Tensor[(48, 2), int64], %var_664: Tensor[(160), uint64]) -> (Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) {
    %189 = cast(%var_638, dtype="bool") /* ty=Tensor[(15, 10, 11), bool] */;
    %190 = shape_of(%var_637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_637, dtype="bool") /* ty=Tensor[(15, 10, 11), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %193 = cast(%var_647, dtype="int64") /* ty=Tensor[(48, 2), int64] */;
    %194 = reshape(%193, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
    %195 = cast(%var_664, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %196 = cast(%var_664, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %198 = reshape(%195, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
    %199 = reshape(%196, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
    %200 = reshape(%197, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %201 = @func_571(%198, %199, %200) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
    %202 = less(%191, %192) /* ty=Tensor[(15, 10, 11), bool] */;
    %203 = @func_383(%194) /* ty=Tensor[(4, 3, 8), int64] */;
    %204 = %201.1;
    (%202, %203, %var_647, %204, %var_664, meta[relay.Constant][14] /* ty=Tensor[(30, 2), float32] */)
  };
  %205(%var_671, %var_672, %var_673, %var_674) /* ty=(Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) */
}

def @func_2868() -> (Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) {
  %220 = fn () -> (Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) {
    %206 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
    %207 = cast(%206, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
    %208 = atanh(%207) /* ty=Tensor[(16, 12, 5), float64] */;
    %209 = cast(%206, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
    %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
    %211 = cast(%208, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
    %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %213 = less(%211, %212) /* ty=Tensor[(16, 12, 5), bool] */;
    %214 = cast(%208, dtype="uint32") /* ty=Tensor[(16, 12, 5), uint32] */;
    %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
    %216 = cast(%213, dtype="uint32") /* ty=Tensor[(16, 12, 5), uint32] */;
    %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %218 = left_shift(%216, %217) /* ty=Tensor[(16, 12, 5), uint32] */;
    %219 = @func_1733() /* ty=Tensor[(1, 7, 16), float64] */;
    (%218, %219)
  };
  %220() /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) */
}

def @func_3364(%var_3363: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) {
  %234 = fn (%var_3334: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) {
    %221 = cast(meta[relay.Constant][15] /* ty=Tensor[(429), float32] */, dtype="float32") /* ty=Tensor[(429), float32] */;
    %222 = cast(%var_3334, dtype="float32") /* ty=Tensor[(676), float32] */;
    %223 = reshape(%221, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
    %224 = reshape(%222, newshape=[676]) /* ty=Tensor[(676), float32] */;
    %225 = @func_408(%223, %224) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
    %226 = %225.1;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
    %228 = @func_2439() /* ty=(Tensor[(60), float32],) */;
    %229 = %228.0;
    %230 = cast(%229, dtype="float32") /* ty=Tensor[(60), float32] */;
    %231 = @func_2896() /* ty=Tensor[(16, 12, 5), float32] */;
    %232 = acosh(%227) /* ty=Tensor[(13, 13, 4), float32] */;
    %233 = tan(%230) /* ty=Tensor[(60), float32] */;
    (%231, meta[relay.Constant][15] /* ty=Tensor[(429), float32] */, %var_3334, %232, %233)
  };
  %234(%var_3363) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) */
}

def @func_4452(%var_4450: Tensor[(2, 12, 2), uint16], %var_4451: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), bool], Tensor[(2, 12, 2), int8]) {
  @func_4448(%var_4450, %var_4451) /* ty=(Tensor[(2, 12, 2), bool], Tensor[(2, 12, 2), int8]) */
}

def @func_4545() -> (Tensor[(1, 7, 16), float64],) {
  %235 = @func_3935() /* ty=Tensor[(1, 7, 16), float64] */;
  (%235,)
}

def @func_1143(%var_1140: Tensor[(15, 3, 2), float32], %var_1141: Tensor[(96), int64], %var_1142: Tensor[(429), float32]) -> (Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) {
  @func_1138(%var_1140, %var_1141, %var_1142) /* ty=(Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) */
}

def @func_2897() -> Tensor[(16, 12, 5), float32] {
  %237 = fn () -> Tensor[(16, 12, 5), float32] {
    %236 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
    %236.0
  };
  %237() /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_1266() -> (Tensor[(1, 7, 16), float64],) {
  %239 = fn () -> (Tensor[(1, 7, 16), float64],) {
    %238 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
    (%238,)
  };
  %239() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_4656() -> Tensor[(9, 4), float64] {
  %240 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  asin(%240) /* ty=Tensor[(9, 4), float64] */
}

def @func_4773() -> (Tensor[(160), uint64],) {
  %243 = fn () -> (Tensor[(160), uint64],) {
    %241 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
    %242 = %241.0;
    (%242,)
  };
  %243() /* ty=(Tensor[(160), uint64],) */
}

def @main(%var_5562: Tensor[(9, 4, 1), float64]) -> Tensor[(9, 4, 1), float64] {
  %244 = cast(%var_5562, dtype="float64") /* ty=Tensor[(9, 4, 1), float64] */;
  log10(%244) /* ty=Tensor[(9, 4, 1), float64] */
}

def @func_5202(%var_5200: Tensor[(6, 8, 2), int32], %var_5201: Tensor[(4, 88), float32]) -> (Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) {
  @func_5198(%var_5200, %var_5201) /* ty=(Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) */
}

def @func_4046(%var_4044: Tensor[(160), uint64]) -> Tensor[(160), float64] {
  @func_4043(%var_4044) /* ty=Tensor[(160), float64] */
}

def @func_4145() -> (Tensor[(1, 7, 16), float64],) {
  %249 = fn () -> (Tensor[(1, 7, 16), float64],) {
    %245 = @func_3580() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %246 = %245.0;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %248 = log2(%247) /* ty=Tensor[(1, 7, 16), float64] */;
    (%248,)
  };
  %249() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_1505() -> Tensor[(160), uint64] {
  @func_1503() /* ty=Tensor[(160), uint64] */
}

def @func_3278() -> Tensor[(16, 12, 5), float32] {
  %251 = fn () -> Tensor[(16, 12, 5), float32] {
    %250 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
    %250.1
  };
  %251() /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_3407(%var_3406: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32]) {
  %260 = fn (%var_3400: Tensor[(676), float32]) -> (Tensor[(16, 12, 5), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32]) {
    %252 = @func_2867() /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) */;
    %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(429), float32] */, dtype="float32") /* ty=Tensor[(429), float32] */;
    %254 = cast(%var_3400, dtype="float32") /* ty=Tensor[(676), float32] */;
    %255 = reshape(%253, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
    %256 = reshape(%254, newshape=[676]) /* ty=Tensor[(676), float32] */;
    %257 = @func_408(%255, %256) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
    %258 = %252.0;
    %259 = %257.0;
    (%258, %259, meta[relay.Constant][17] /* ty=Tensor[(429), float32] */, %var_3400)
  };
  %260(%var_3406) /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32]) */
}

def @func_2767() -> (Tensor[(1, 7, 16), float64],) {
  %261 = @func_2458() /* ty=(Tensor[(1, 7, 16), float64],) */;
  %262 = %261.0;
  (%262,)
}

def @func_5115(%var_5113: Tensor[(676), float32], %var_5114: Tensor[(6, 7, 16), float64]) -> (Tensor[(676), float32], Tensor[(16, 12, 5), float32], Tensor[(6, 7, 16), bool], Tensor[(16, 12, 5), uint8]) {
  %285 = fn (%var_5062: Tensor[(676), float32], %var_5068: Tensor[(6, 7, 16), float64]) -> (Tensor[(676), float32], Tensor[(16, 12, 5), float32], Tensor[(6, 7, 16), bool], Tensor[(16, 12, 5), uint8]) {
    %263 = @func_3619() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %264 = %263.0;
    %265 = cast(%264, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
    %266 = cast(%var_5068, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
    %267 = cast(%var_5062, dtype="float32") /* ty=Tensor[(676), float32] */;
    %268 = reshape(%267, newshape=[676]) /* ty=Tensor[(676), float32] */;
    %269 = @func_3362(%268) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(13, 13, 4), float32], Tensor[(60), float32]) */;
    %270 = %269.0;
    %271 = cast(%270, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
    %272 = tan(%271) /* ty=Tensor[(16, 12, 5), float32] */;
    %273 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 12, 5), float32] */, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %277 = floor_divide(%275, %276) /* ty=Tensor[(16, 12, 5), float64] */;
    %278 = cast(%272, dtype="uint8") /* ty=Tensor[(16, 12, 5), uint8] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="uint8") /* ty=Tensor[(16, 12, 5), uint8] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %282 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
    %283 = not_equal(%265, %266) /* ty=Tensor[(6, 7, 16), bool] */;
    %284 = logical_xor(%280, %281) /* ty=Tensor[(16, 12, 5), uint8] */;
    (%var_5062, %282, %283, %284)
  };
  %285(%var_5113, %var_5114) /* ty=(Tensor[(676), float32], Tensor[(16, 12, 5), float32], Tensor[(6, 7, 16), bool], Tensor[(16, 12, 5), uint8]) */
}

def @func_1328(%var_1280: Tensor[(16, 12, 8), float64], %var_1298: Tensor[(16, 12, 8), float64], %var_1305: Tensor[(2, 80), uint64], %var_1306: Tensor[(60), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) {
  %286 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 80), uint64] */;
  %287 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 80), uint64] */;
  %288 = cast(%var_1306, dtype="float32") /* ty=Tensor[(60), float32] */;
  %289 = reshape(%286, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %290 = reshape(%287, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %291 = reshape(%288, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %292 = @func_571(%289, %290, %291) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %293 = cast(%var_1280, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %294 = cos(%293) /* ty=Tensor[(16, 12, 8), float64] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %296 = cast(%294, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %297 = log(%296) /* ty=Tensor[(16, 12, 8), float32] */;
  %298 = cast(%var_1298, dtype="int32") /* ty=Tensor[(16, 12, 8), int32] */;
  %299 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%294, dtype="int32") /* ty=Tensor[(16, 12, 8), int32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %302 = maximum(%300, %301) /* ty=Tensor[(16, 12, 8), int32] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %304 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%297, dtype="float64") /* ty=Tensor[(16, 12, 8), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %307 = power(%305, %306) /* ty=Tensor[(16, 12, 8), float64] */;
  %308 = cast(%297, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %312 = %292.1;
  %313 = atanh(%295) /* ty=Tensor[(16, 12, 8), float32] */;
  %314 = multiply(%310, %311) /* ty=Tensor[(16, 12, 8), int64] */;
  (%312, %var_1305, %var_1306, %313, %314)
}

def @func_3992() -> (Tensor[(16, 12, 5), float32],) {
  %317 = fn () -> (Tensor[(16, 12, 5), float32],) {
    %315 = @func_3606() /* ty=(Tensor[(16, 12, 5), float32],) */;
    %316 = %315.0;
    (%316,)
  };
  %317() /* ty=(Tensor[(16, 12, 5), float32],) */
}

def @func_989() -> (Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
  %318 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 15, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %319 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(15, 15, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 15, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %324 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %325 = reshape(%322, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %326 = reshape(%323, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), uint64] */;
  %327 = reshape(%324, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %328 = @func_571(%325, %326, %327) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */;
  %329 = logical_or(%320, %321) /* ty=Tensor[(15, 15, 16), bool] */;
  %330 = %328.1;
  (%329, %330, meta[relay.Constant][21] /* ty=Tensor[(160), uint64] */, meta[relay.Constant][22] /* ty=Tensor[(60), float32] */)
}

def @func_2815() -> Tensor[(160), uint64] {
  @func_2813() /* ty=Tensor[(160), uint64] */
}

def @func_2041() -> Tensor[(160), uint64] {
  @func_1503() /* ty=Tensor[(160), uint64] */
}

def @func_2172(%var_2170: Tensor[(16, 1, 7), float32], %var_2171: Tensor[(16, 13, 7), int32]) -> (Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) {
  %364 = fn (%var_2087: Tensor[(16, 1, 7), float32], %var_2154: Tensor[(16, 13, 7), int32]) -> (Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) {
    %331 = cast(meta[relay.Constant][23] /* ty=Tensor[(704), float32] */, dtype="float32") /* ty=Tensor[(704), float32] */;
    %332 = reshape(%331, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float32] */;
    %333 = @func_529(%332) /* ty=(Tensor[(4, 11, 16), float32],) */;
    %334 = @func_1265() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %335 = cast(%var_2087, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
    %336 = atanh(%335) /* ty=Tensor[(16, 1, 7), float32] */;
    %337 = cast(%336, dtype="int32") /* ty=Tensor[(16, 1, 7), int32] */;
    %338 = shape_of(%var_2087, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%var_2087, dtype="int32") /* ty=Tensor[(16, 1, 7), int32] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %341 = bitwise_and(%339, %340) /* ty=Tensor[(16, ?, 7), int32] */;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(16, ?, 7), float64] */;
    %343 = rsqrt(%342) /* ty=Tensor[(16, ?, 7), float64] */;
    %344 = cast(%var_2087, dtype="float64") /* ty=Tensor[(16, 1, 7), float64] */;
    %345 = exp(%344) /* ty=Tensor[(16, 1, 7), float64] */;
    %346 = cast(%345, dtype="bool") /* ty=Tensor[(16, 1, 7), bool] */;
    %347 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%343, dtype="bool") /* ty=Tensor[(16, ?, 7), bool] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %350 = cast(%341, dtype="int8") /* ty=Tensor[(16, ?, 7), int8] */;
    %351 = cast(%var_2154, dtype="int8") /* ty=Tensor[(16, 13, 7), int8] */;
    %352 = cast(%var_2087, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
    %353 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%336, dtype="float32") /* ty=Tensor[(16, 1, 7), float32] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %356 = subtract(%354, %355) /* ty=Tensor[(16, ?, 7), float32] */;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(16, ?, 7), float64] */;
    %358 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
    %359 = %333.0;
    %360 = %334.0;
    %361 = equal(%348, %349) /* ty=Tensor[(16, ?, 7), bool] */;
    %362 = add(%350, %351) /* ty=Tensor[(16, 13, 7), int8] */;
    %363 = sinh(%357) /* ty=Tensor[(16, ?, 7), float64] */;
    (%358, %359, meta[relay.Constant][23] /* ty=Tensor[(704), float32] */, %360, %361, %362, %363)
  };
  %364(%var_2170, %var_2171) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) */
}

def @func_3936() -> Tensor[(1, 7, 16), float64] {
  %366 = fn () -> Tensor[(1, 7, 16), float64] {
    %365 = @func_2458() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %365.0
  };
  %366() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_576(%var_573: Tensor[(8, 4, 5), uint64], %var_574: Tensor[(8, 4, 5), uint64], %var_575: Tensor[(60), float32]) -> (Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) {
  @func_571(%var_573, %var_574, %var_575) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(16, 12, 5), float32], Tensor[(60), float32]) */
}

def @func_1075() -> Tensor[(1, 7, 16), float64] {
  @func_1021() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_780(%var_777: int64, %var_778: Tensor[(11, 16, 15), int64], %var_779: Tensor[(676), float32]) -> (Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
  %374 = fn (%var_759: int64, %var_760: Tensor[(11, 16, 15), int64], %var_772: Tensor[(676), float32]) -> (Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) {
    %367 = cast(%var_759, dtype="bool") /* ty=bool */;
    %368 = cast(%var_760, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %369 = cast(%var_772, dtype="float32") /* ty=Tensor[(676), float32] */;
    %370 = reshape(%369, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float32] */;
    %371 = @func_60(%370) /* ty=(Tensor[(13, 13, 4), float32],) */;
    %372 = less_equal(%367, %368) /* ty=Tensor[(11, 16, 15), bool] */;
    %373 = %371.0;
    (%372, %373, %var_772)
  };
  %374(%var_777, %var_778, %var_779) /* ty=(Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */
}

def @func_2459() -> (Tensor[(1, 7, 16), float64],) {
  %376 = fn () -> (Tensor[(1, 7, 16), float64],) {
    %375 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
    (%375,)
  };
  %376() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_3179() -> (Tensor[(16, 12, 5), float32],) {
  %377 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  (%377,)
}

def @func_2813() -> Tensor[(160), uint64] {
  @func_1503() /* ty=Tensor[(160), uint64] */
}

def @func_991() -> (Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) {
  @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */
}

def @func_63(%var_61: Tensor[(13, 13, 4), float32]) -> (Tensor[(13, 13, 4), float32],) {
  @func_60(%var_61) /* ty=(Tensor[(13, 13, 4), float32],) */
}

def @func_1021() -> Tensor[(1, 7, 16), float64] {
  %378 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  acosh(%378) /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_623(%var_621: Tensor[(4, 8, 12), float32], %var_622: Tensor[(4, 8, 12), float32]) -> (Tensor[(4, 8, 12), float32],) {
  %384 = fn (%var_615: Tensor[(4, 8, 12), float32], %var_616: Tensor[(4, 8, 12), float32]) -> (Tensor[(4, 8, 12), float32],) {
    %379 = cast(%var_616, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
    %380 = shape_of(%var_615, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%var_615, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %383 = mod(%381, %382) /* ty=Tensor[(4, 8, 12), float32] */;
    (%383,)
  };
  %384(%var_621, %var_622) /* ty=(Tensor[(4, 8, 12), float32],) */
}

def @func_3181() -> (Tensor[(16, 12, 5), float32],) {
  @func_3179() /* ty=(Tensor[(16, 12, 5), float32],) */
}

def @func_4738(%var_4687: int64) -> (int64, Tensor[(2640), int64], Tensor[(676), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(1, 7, 16), float64]) {
  %385 = cast(%var_4687, dtype="int64") /* ty=int64 */;
  %386 = cast(meta[relay.Constant][25] /* ty=Tensor[(2640), int64] */, dtype="int64") /* ty=Tensor[(2640), int64] */;
  %387 = cast(meta[relay.Constant][26] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %388 = reshape(%385, newshape=[]) /* ty=int64 */;
  %389 = reshape(%386, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), int64] */;
  %390 = reshape(%387, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %391 = @func_776(%388, %389, %390) /* ty=(Tensor[(11, 16, 15), bool], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %392 = %391.2;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(676), bool] */;
  %394 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(676), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %395 = cast(meta[relay.Constant][26] /* ty=Tensor[(676), float32] */, dtype="bool") /* ty=Tensor[(676), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?), bool] */;
  %397 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
  %398 = %397.1;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %400 = cosh(%399) /* ty=Tensor[(16, 12, 5), float32] */;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  %402 = less(%395, %396) /* ty=Tensor[(676), bool] */;
  %403 = asinh(%401) /* ty=Tensor[(16, 12, 5), float32] */;
  %404 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %405 = @func_1075() /* ty=Tensor[(1, 7, 16), float64] */;
  (%var_4687, meta[relay.Constant][25] /* ty=Tensor[(2640), int64] */, %402, %403, %404, %405)
}

def @func_1806(%var_1778: Tensor[(2, 6, 8), float64], %var_1792: Tensor[(1650), float32], %var_1794: Tensor[(429), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) {
  %406 = cast(%var_1778, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %407 = erf(%406) /* ty=Tensor[(2, 6, 8), float64] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(2, 6, 8), float32] */;
  %409 = cast(meta[relay.Constant][27] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %410 = cast(%var_1792, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %411 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %412 = cast(%var_1794, dtype="float32") /* ty=Tensor[(429), float32] */;
  %413 = reshape(%409, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %414 = reshape(%410, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), float32] */;
  %415 = reshape(%411, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %416 = reshape(%412, newshape=[39, 11]) /* ty=Tensor[(39, 11), float32] */;
  %417 = @func_1223(%413, %414, %415, %416) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(2, 3, 14), float32], Tensor[(84), uint64], Tensor[(1, 1650), float32], Tensor[(4, 11, 16), float32], Tensor[(8, 88), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32], Tensor[(180), float32], Tensor[(90), float32], Tensor[(96, 1), int64], Tensor[(39, 11), float32]) */;
  %418 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %419 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %420 = reshape(%418, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %421 = reshape(%419, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %422 = @func_620(%420, %421) /* ty=(Tensor[(4, 8, 12), float32],) */;
  %423 = log10(%408) /* ty=Tensor[(2, 6, 8), float32] */;
  %424 = @func_1503() /* ty=Tensor[(160), uint64] */;
  %425 = %417.5;
  %426 = %422.0;
  (%423, %424, %425, meta[relay.Constant][27] /* ty=Tensor[(84), uint64] */, %var_1792, meta[relay.Constant][28] /* ty=Tensor[(384), float32] */, %var_1794, %426)
}

def @func_1692(%var_1687: Tensor[(84), uint64], %var_1688: Tensor[(429), float32], %var_1689: Tensor[(352), float32], %var_1690: Tensor[(1536), float64], %var_1691: Tensor[(160), uint64]) -> (Tensor[(1, 7, 16), float64], Tensor[(39, 11), float32], Tensor[(84), uint64], Tensor[(550, 3), float32], Tensor[(48, 8), float32], Tensor[(429), float32], Tensor[(352), float32], Tensor[(16, 12, 8), float32], Tensor[(160), uint64], Tensor[(676), float32], Tensor[(676), float32], Tensor[(60, 2640), float32], Tensor[(4, 8, 11), uint16], Tensor[(60, 1536), bool]) {
  @func_1685(%var_1687, %var_1688, %var_1689, %var_1690, %var_1691) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(39, 11), float32], Tensor[(84), uint64], Tensor[(550, 3), float32], Tensor[(48, 8), float32], Tensor[(429), float32], Tensor[(352), float32], Tensor[(16, 12, 8), float32], Tensor[(160), uint64], Tensor[(676), float32], Tensor[(676), float32], Tensor[(60, 2640), float32], Tensor[(4, 8, 11), uint16], Tensor[(60, 1536), bool]) */
}

def @func_1554() -> (Tensor[(60), float32],) {
  %429 = fn () -> (Tensor[(60), float32],) {
    %427 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
    %428 = %427.3;
    (%428,)
  };
  %429() /* ty=(Tensor[(60), float32],) */
}

def @func_3320() -> (Tensor[(15, 15, 16), bool],) {
  @func_3318() /* ty=(Tensor[(15, 15, 16), bool],) */
}

def @func_281(%var_279: Tensor[(1, 12, 5), float32]) -> Tensor[(16, 12, 5), float32] {
  @func_278(%var_279) /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_3773(%var_3772: Tensor[(16, 12, 5), float32]) -> (Tensor[(60), float32], Tensor[(16, 12, 5), bool]) {
  %438 = fn (%var_3766: Tensor[(16, 12, 5), float32]) -> (Tensor[(60), float32], Tensor[(16, 12, 5), bool]) {
    %430 = @func_1553() /* ty=(Tensor[(60), float32],) */;
    %431 = @func_3277() /* ty=Tensor[(16, 12, 5), float32] */;
    %432 = cast(%var_3766, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
    %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%431, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %436 = %430.0;
    %437 = greater_equal(%434, %435) /* ty=Tensor[(16, 12, 5), bool] */;
    (%436, %437)
  };
  %438(%var_3772) /* ty=(Tensor[(60), float32], Tensor[(16, 12, 5), bool]) */
}

def @func_60(%var_49: Tensor[(13, 13, 4), float32]) -> (Tensor[(13, 13, 4), float32],) {
  %439 = cast(%var_49, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %440 = sinh(%439) /* ty=Tensor[(13, 13, 4), float32] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %442 = sigmoid(%441) /* ty=Tensor[(13, 13, 4), float32] */;
  (%442,)
}

def @func_1997(%var_1990: Tensor[(384), float32]) -> (Tensor[(60), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32]) {
  %443 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %444 = cast(%var_1990, dtype="float32") /* ty=Tensor[(384), float32] */;
  %445 = cast(%var_1990, dtype="float32") /* ty=Tensor[(384), float32] */;
  %446 = reshape(%444, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %447 = reshape(%445, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float32] */;
  %448 = @func_620(%446, %447) /* ty=(Tensor[(4, 8, 12), float32],) */;
  %449 = %443.3;
  %450 = %448.0;
  (%449, %450, %var_1990)
}

def @func_1334(%var_1330: Tensor[(16, 12, 8), float64], %var_1331: Tensor[(16, 12, 8), float64], %var_1332: Tensor[(2, 80), uint64], %var_1333: Tensor[(60), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) {
  @func_1328(%var_1330, %var_1331, %var_1332, %var_1333) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(2, 80), uint64], Tensor[(60), float32], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 8), int64]) */
}

def @func_3300(%var_3296: Tensor[(12, 3, 6), float32]) -> (Tensor[(12, 3, 6), float32],) {
  %451 = cast(%var_3296, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
  %452 = acos(%451) /* ty=Tensor[(12, 3, 6), float32] */;
  (%452,)
}

def @func_4547() -> (Tensor[(1, 7, 16), float64],) {
  @func_4545() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_1734() -> Tensor[(1, 7, 16), float64] {
  %453 = fn () -> Tensor[(1, 7, 16), float64] {
    @func_1075() /* ty=Tensor[(1, 7, 16), float64] */
  };
  %453() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_5151(%var_5148: Tensor[(4, 3, 5), int16], %var_5149: Tensor[(4, 3, 5), int16], %var_5150: Tensor[(160), uint64]) -> (Tensor[(4, 3, 5), int16], Tensor[(160), float64], Tensor[(160), uint64], Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), float32]) {
  %466 = fn (%var_5128: Tensor[(4, 3, 5), int16], %var_5129: Tensor[(4, 3, 5), int16], %var_5134: Tensor[(160), uint64]) -> (Tensor[(4, 3, 5), int16], Tensor[(160), float64], Tensor[(160), uint64], Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), float32]) {
    %454 = cast(%var_5129, dtype="int16") /* ty=Tensor[(4, 3, 5), int16] */;
    %455 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%var_5128, dtype="int16") /* ty=Tensor[(4, 3, 5), int16] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %458 = cast(%var_5134, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %459 = reshape(%458, newshape=[160]) /* ty=Tensor[(160), uint64] */;
    %460 = cast(%var_5129, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
    %461 = cast(%var_5129, dtype="float32") /* ty=Tensor[(4, 3, 5), float32] */;
    %462 = add(%456, %457) /* ty=Tensor[(4, 3, 5), int16] */;
    %463 = @func_4043(%459) /* ty=Tensor[(160), float64] */;
    %464 = acosh(%460) /* ty=Tensor[(4, 3, 5), float64] */;
    %465 = erf(%461) /* ty=Tensor[(4, 3, 5), float32] */;
    (%462, %463, %var_5134, %464, %465)
  };
  %466(%var_5148, %var_5149, %var_5150) /* ty=(Tensor[(4, 3, 5), int16], Tensor[(160), float64], Tensor[(160), uint64], Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), float32]) */
}

def @func_2440() -> (Tensor[(60), float32],) {
  %469 = fn () -> (Tensor[(60), float32],) {
    %467 = @func_1553() /* ty=(Tensor[(60), float32],) */;
    %468 = %467.0;
    (%468,)
  };
  %469() /* ty=(Tensor[(60), float32],) */
}

def @func_4043(%var_4035: Tensor[(160), uint64]) -> Tensor[(160), float64] {
  %470 = @func_2041() /* ty=Tensor[(160), uint64] */;
  %471 = cast(%var_4035, dtype="float64") /* ty=Tensor[(160), float64] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(1), int32] */;
  %473 = cast(%470, dtype="float64") /* ty=Tensor[(160), float64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_divide(%473, %474) /* ty=Tensor[(160), float64] */
}

def @func_3246(%var_3245: Tensor[(14, 1, 13), bool]) -> (Tensor[(14, 9, 13), bool],) {
  %483 = fn (%var_3216: Tensor[(14, 1, 13), bool]) -> (Tensor[(14, 9, 13), bool],) {
    %475 = cast(%var_3216, dtype="bool") /* ty=Tensor[(14, 1, 13), bool] */;
    %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
    %477 = logical_and(%475, %476) /* ty=Tensor[(14, 9, 13), bool] */;
    %478 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%477, dtype="bool") /* ty=Tensor[(14, 9, 13), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %482 = greater(%480, %481) /* ty=Tensor[(14, 9, 13), bool] */;
    (%482,)
  };
  %483(%var_3245) /* ty=(Tensor[(14, 9, 13), bool],) */
}

def @func_5557(%var_5556: Tensor[(16, 6), int32]) -> (Tensor[(15, 15, 16), float64], Tensor[(6, 8, 2), bool], Tensor[(16, 6), int32], Tensor[(352), float32], Tensor[(1, 7, 16), float64]) {
  %498 = fn (%var_5545: Tensor[(16, 6), int32]) -> (Tensor[(15, 15, 16), float64], Tensor[(6, 8, 2), bool], Tensor[(16, 6), int32], Tensor[(352), float32], Tensor[(1, 7, 16), float64]) {
    %484 = @func_3318() /* ty=(Tensor[(15, 15, 16), bool],) */;
    %485 = %484.0;
    %486 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 15, 16), bool] */, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
    %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%485, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %490 = cast(%var_5545, dtype="int32") /* ty=Tensor[(16, 6), int32] */;
    %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %492 = reshape(%490, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int32] */;
    %493 = reshape(%491, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %494 = @func_5198(%492, %493) /* ty=(Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) */;
    %495 = floor_mod(%488, %489) /* ty=Tensor[(15, 15, 16), float64] */;
    %496 = %494.0;
    %497 = @func_3294() /* ty=Tensor[(1, 7, 16), float64] */;
    (%495, %496, %var_5545, meta[relay.Constant][31] /* ty=Tensor[(352), float32] */, %497)
  };
  %498(%var_5556) /* ty=(Tensor[(15, 15, 16), float64], Tensor[(6, 8, 2), bool], Tensor[(16, 6), int32], Tensor[(352), float32], Tensor[(1, 7, 16), float64]) */
}

def @func_3620() -> (Tensor[(1, 7, 16), float64],) {
  %501 = fn () -> (Tensor[(1, 7, 16), float64],) {
    %499 = @func_2867() /* ty=(Tensor[(16, 12, 5), uint32], Tensor[(1, 7, 16), float64]) */;
    %500 = %499.1;
    (%500,)
  };
  %501() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_3505(%var_3504: Tensor[(160), uint64]) -> (Tensor[(60), float32], Tensor[(160), uint64], Tensor[(12, 7, 16), float64]) {
  %510 = fn (%var_3460: Tensor[(160), uint64]) -> (Tensor[(60), float32], Tensor[(160), uint64], Tensor[(12, 7, 16), float64]) {
    %502 = cast(%var_3460, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %503 = reshape(%502, newshape=[160]) /* ty=Tensor[(160), uint64] */;
    %504 = @func_2246(%503) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
    %505 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
    %506 = cast(%505, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
    %507 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 16), float64] */;
    %508 = %504.3;
    %509 = power(%506, %507) /* ty=Tensor[(12, 7, 16), float64] */;
    (%508, %var_3460, %509)
  };
  %510(%var_3504) /* ty=(Tensor[(60), float32], Tensor[(160), uint64], Tensor[(12, 7, 16), float64]) */
}

def @func_3607() -> (Tensor[(16, 12, 5), float32],) {
  %512 = fn () -> (Tensor[(16, 12, 5), float32],) {
    %511 = @func_2896() /* ty=Tensor[(16, 12, 5), float32] */;
    (%511,)
  };
  %512() /* ty=(Tensor[(16, 12, 5), float32],) */
}

def @func_2769() -> (Tensor[(1, 7, 16), float64],) {
  @func_2767() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_1503() -> Tensor[(160), uint64] {
  %513 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %513.2
}

def @func_1470(%var_1468: Tensor[(15, 9, 2), int16], %var_1469: Tensor[(15, 9, 2), int16]) -> Tensor[(15, 9, 2), int16] {
  @func_1466(%var_1468, %var_1469) /* ty=Tensor[(15, 9, 2), int16] */
}

def @func_4269() -> (Tensor[(60), float32],) {
  @func_4267() /* ty=(Tensor[(60), float32],) */
}

def @func_4448(%var_4419: Tensor[(2, 12, 2), uint16], %var_4420: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), bool], Tensor[(2, 12, 2), int8]) {
  %514 = cast(%var_4420, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %515 = shape_of(%var_4419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_4419, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = cast(%var_4419, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %519 = shape_of(%var_4420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_4420, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %522 = less_equal(%516, %517) /* ty=Tensor[(2, 12, 2), bool] */;
  %523 = logical_xor(%520, %521) /* ty=Tensor[(2, 12, 2), int8] */;
  (%522, %523)
}

def @func_4600() -> (Tensor[(160), uint64],) {
  %525 = fn () -> (Tensor[(160), uint64],) {
    %524 = @func_2041() /* ty=Tensor[(160), uint64] */;
    (%524,)
  };
  %525() /* ty=(Tensor[(160), uint64],) */
}

def @func_3072(%var_3071: Tensor[(180), float32]) -> (Tensor[(160), uint64], Tensor[(10, 3, 6), bool], Tensor[(180), float32]) {
  %531 = fn (%var_3068: Tensor[(180), float32]) -> (Tensor[(160), uint64], Tensor[(10, 3, 6), bool], Tensor[(180), float32]) {
    %526 = @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */;
    %527 = cast(%var_3068, dtype="float32") /* ty=Tensor[(180), float32] */;
    %528 = reshape(%527, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %529 = %526.2;
    %530 = @func_814(%528) /* ty=Tensor[(10, 3, 6), bool] */;
    (%529, %530, %var_3068)
  };
  %531(%var_3071) /* ty=(Tensor[(160), uint64], Tensor[(10, 3, 6), bool], Tensor[(180), float32]) */
}

def @func_1359(%var_1357: Tensor[(4, 8, 11), float32]) -> Tensor[(4, 8, 11), float32] {
  @func_1356(%var_1357) /* ty=Tensor[(4, 8, 11), float32] */
}

def @func_1138(%var_1091: Tensor[(15, 3, 2), float32], %var_1099: Tensor[(96), int64], %var_1125: Tensor[(429), float32]) -> (Tensor[(4, 3, 8), int64], Tensor[(96), int64], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(15, 3, 2), float64], Tensor[(13, 3, 11), float32], Tensor[(429), float32], Tensor[(676), float32], Tensor[(160), uint64]) {
  %532 = cast(%var_1099, dtype="int64") /* ty=Tensor[(96), int64] */;
  %533 = reshape(%532, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
  %534 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %535 = reshape(%534, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %536 = cast(%var_1091, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %537 = log10(%536) /* ty=Tensor[(15, 3, 2), float32] */;
  %538 = cast(%var_1091, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %542 = cast(%var_1125, dtype="float32") /* ty=Tensor[(429), float32] */;
  %543 = cast(meta[relay.Constant][34] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %544 = reshape(%542, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %545 = reshape(%543, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %546 = @func_408(%544, %545) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %547 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %548 = @func_383(%533) /* ty=Tensor[(4, 3, 8), int64] */;
  %549 = @func_814(%535) /* ty=Tensor[(10, 3, 6), bool] */;
  %550 = subtract(%540, %541) /* ty=Tensor[(15, 3, 2), float64] */;
  %551 = %546.0;
  %552 = %547.2;
  (%548, %var_1099, %549, meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, %550, %551, %var_1125, meta[relay.Constant][34] /* ty=Tensor[(676), float32] */, %552)
}

def @func_4658() -> Tensor[(9, 4), float64] {
  @func_4656() /* ty=Tensor[(9, 4), float64] */
}

def @func_2674(%var_2668: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  %553 = @func_1021() /* ty=Tensor[(1, 7, 16), float64] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(1, 7, 16), float64] */;
  %555 = cast(%var_2668, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %556 = divide(%554, %555) /* ty=Tensor[(8, 7, 16), float64] */;
  (%556,)
}

def @func_2416() -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) {
  %557 = cast(meta[relay.Constant][35] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %558 = reshape(%557, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %559 = @func_2246(%558) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %560 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
  %561 = %559.1;
  (%560, %561, meta[relay.Constant][35] /* ty=Tensor[(160), uint64] */)
}

def @func_2607(%var_2603: Tensor[(429), float32], %var_2604: Tensor[(676), float32], %var_2605: Tensor[(84), uint64], %var_2606: Tensor[(1650), float32]) -> (Tensor[(676), float32], Tensor[(429), int64], Tensor[(?, 11, 12), bool], Tensor[(96), int64], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(?, 11, 12), float64]) {
  @func_2601(%var_2603, %var_2604, %var_2605, %var_2606) /* ty=(Tensor[(676), float32], Tensor[(429), int64], Tensor[(?, 11, 12), bool], Tensor[(96), int64], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(?, 11, 12), float64]) */
}

def @func_1023() -> Tensor[(1, 7, 16), float64] {
  @func_1021() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_2418() -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) {
  @func_2416() /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), float32], Tensor[(160), uint64]) */
}

def @func_1356(%var_1348: Tensor[(4, 8, 11), float32]) -> Tensor[(4, 8, 11), float32] {
  %562 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %563 = shape_of(%var_1348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_1348, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%564, %565) /* ty=Tensor[(4, 8, 11), float32] */
}

def @func_2601(%var_2558: Tensor[(429), float32], %var_2559: Tensor[(676), float32], %var_2588: Tensor[(84), uint64], %var_2589: Tensor[(1650), float32]) -> (Tensor[(676), float32], Tensor[(429), int64], Tensor[(?, 11, 12), bool], Tensor[(96), int64], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(?, 11, 12), float64]) {
  %566 = cast(%var_2558, dtype="float32") /* ty=Tensor[(429), float32] */;
  %567 = cast(%var_2559, dtype="float32") /* ty=Tensor[(676), float32] */;
  %568 = reshape(%566, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float32] */;
  %569 = reshape(%567, newshape=[676]) /* ty=Tensor[(676), float32] */;
  %570 = @func_408(%568, %569) /* ty=(Tensor[(13, 3, 11), float32], Tensor[(13, 13, 4), float32], Tensor[(676), float32]) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="int64") /* ty=Tensor[(13, 3, 11), int64] */;
  %573 = shape_of(%var_2558, dtype="int32") /* ty=Tensor[(1), int32] */;
  %574 = cast(%var_2558, dtype="int64") /* ty=Tensor[(429), int64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?), int64] */;
  %576 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %577 = exp(%576) /* ty=Tensor[(1, 11, 12), float64] */;
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 11, 12), float64] */, dtype="int64") /* ty=Tensor[(1, 11, 12), int64] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="int64") /* ty=Tensor[(1, 11, 12), int64] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %582 = bitwise_and(%580, %581) /* ty=Tensor[(?, 11, 12), int64] */;
  %583 = cast(%582, dtype="bool") /* ty=Tensor[(?, 11, 12), bool] */;
  %584 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%577, dtype="bool") /* ty=Tensor[(1, 11, 12), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %588 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %589 = cast(%var_2588, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %590 = cast(%var_2589, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %591 = cast(%var_2589, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %592 = reshape(%587, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %593 = reshape(%588, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %594 = reshape(%589, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), uint64] */;
  %595 = reshape(%590, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %596 = reshape(%591, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
  %597 = @func_967(%592, %593, %594, %595, %596) /* ty=(Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) */;
  %598 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %599 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%582, dtype="float64") /* ty=Tensor[(?, 11, 12), float64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %602 = add(%574, %575) /* ty=Tensor[(429), int64] */;
  %603 = greater(%585, %586) /* ty=Tensor[(?, 11, 12), bool] */;
  %604 = %597.2;
  %605 = divide(%600, %601) /* ty=Tensor[(?, 11, 12), float64] */;
  (%var_2559, %602, %603, %604, %var_2588, %var_2589, %605)
}

def @func_816(%var_815: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), bool] {
  %612 = fn (%var_805: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), bool] {
    %606 = cast(%var_805, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
    %607 = log10(%606) /* ty=Tensor[(10, 3, 6), float32] */;
    %608 = cast(%607, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %609 = shape_of(%var_805, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_805, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%610, %611) /* ty=Tensor[(10, 3, 6), bool] */
  };
  %612(%var_815) /* ty=Tensor[(10, 3, 6), bool] */
}

def @func_531(%var_530: Tensor[(4, 11, 16), float32]) -> (Tensor[(4, 11, 16), float32],) {
  %615 = fn (%var_516: Tensor[(4, 11, 16), float32]) -> (Tensor[(4, 11, 16), float32],) {
    %613 = cast(%var_516, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
    %614 = cosh(%613) /* ty=Tensor[(4, 11, 16), float32] */;
    (%614,)
  };
  %615(%var_530) /* ty=(Tensor[(4, 11, 16), float32],) */
}

def @func_1908(%var_1882: Tensor[(3, 3, 2), float64], %var_1899: Tensor[(96), int64]) -> (Tensor[(3, 3, 2), float64], Tensor[(16, 12, 5), float32], Tensor[(3, 20), float32], Tensor[(4, 3, 8), int64], Tensor[(96), int64]) {
  %616 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %617 = shape_of(%var_1882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_1882, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %620 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %621 = reshape(%620, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %622 = cast(%var_1899, dtype="int64") /* ty=Tensor[(96), int64] */;
  %623 = reshape(%622, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), int64] */;
  %624 = floor_divide(%618, %619) /* ty=Tensor[(3, 3, 2), float64] */;
  %625 = @func_278(%621) /* ty=Tensor[(16, 12, 5), float32] */;
  %626 = @func_383(%623) /* ty=Tensor[(4, 3, 8), int64] */;
  (%624, %625, meta[relay.Constant][39] /* ty=Tensor[(3, 20), float32] */, %626, %var_1899)
}

def @func_5475() -> (Tensor[(160), uint64], Tensor[(112), float32], Tensor[(1456), int32]) {
  %633 = fn () -> (Tensor[(160), uint64], Tensor[(112), float32], Tensor[(1456), int32]) {
    %627 = @func_4599() /* ty=(Tensor[(160), uint64],) */;
    %628 = cast(meta[relay.Constant][40] /* ty=Tensor[(1456), int32] */, dtype="int32") /* ty=Tensor[(1456), int32] */;
    %629 = reshape(%628, newshape=[1456]) /* ty=Tensor[(1456), int32] */;
    %630 = @func_3050(%629) /* ty=(Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) */;
    %631 = %627.0;
    %632 = %630.2;
    (%631, %632, meta[relay.Constant][40] /* ty=Tensor[(1456), int32] */)
  };
  %633() /* ty=(Tensor[(160), uint64], Tensor[(112), float32], Tensor[(1456), int32]) */
}

def @func_4344() -> Tensor[(1, 7, 16), float64] {
  %635 = fn () -> Tensor[(1, 7, 16), float64] {
    %634 = @func_3619() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %634.0
  };
  %635() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_3822() -> Tensor[(160), uint64] {
  %636 = fn () -> Tensor[(160), uint64] {
    @func_2041() /* ty=Tensor[(160), uint64] */
  };
  %636() /* ty=Tensor[(160), uint64] */
}

def @func_4267() -> (Tensor[(60), float32],) {
  %637 = @func_2439() /* ty=(Tensor[(60), float32],) */;
  %638 = %637.0;
  (%638,)
}

def @func_973(%var_968: Tensor[(2, 3, 14), uint64], %var_969: Tensor[(2, 3, 14), uint64], %var_970: Tensor[(2, 3, 14), uint64], %var_971: Tensor[(1650), float32], %var_972: Tensor[(1650), float32]) -> (Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) {
  %666 = fn (%var_922: Tensor[(2, 3, 14), uint64], %var_923: Tensor[(2, 3, 14), uint64], %var_928: Tensor[(2, 3, 14), uint64], %var_938: Tensor[(1650), float32], %var_949: Tensor[(1650), float32]) -> (Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) {
    %639 = cast(%var_928, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
    %640 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%var_923, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %643 = cast(%var_938, dtype="float32") /* ty=Tensor[(1650), float32] */;
    %644 = cast(%var_938, dtype="float32") /* ty=Tensor[(1650), float32] */;
    %645 = cast(meta[relay.Constant][41] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
    %646 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 20), uint64] */, dtype="uint64") /* ty=Tensor[(8, 20), uint64] */;
    %647 = reshape(%643, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
    %648 = reshape(%644, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
    %649 = reshape(%645, newshape=[48, 2]) /* ty=Tensor[(48, 2), int64] */;
    %650 = reshape(%646, newshape=[160]) /* ty=Tensor[(160), uint64] */;
    %651 = @func_670(%647, %648, %649, %650) /* ty=(Tensor[(15, 10, 11), bool], Tensor[(4, 3, 8), int64], Tensor[(48, 2), int64], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(30, 2), float32]) */;
    %652 = cast(%var_923, dtype="uint64") /* ty=Tensor[(2, 3, 14), uint64] */;
    %653 = shape_of(%var_922, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%var_922, dtype="uint64") /* ty=Tensor[(2, 3, 14), uint64] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %656 = add(%654, %655) /* ty=Tensor[(2, 3, 14), uint64] */;
    %657 = cast(%656, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
    %658 = cast(%var_949, dtype="float64") /* ty=Tensor[(1650), float64] */;
    %659 = shape_of(%var_938, dtype="int32") /* ty=Tensor[(1), int32] */;
    %660 = cast(%var_938, dtype="float64") /* ty=Tensor[(1650), float64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?), float64] */;
    %662 = equal(%641, %642) /* ty=Tensor[(2, 3, 14), bool] */;
    %663 = %651.2;
    %664 = acos(%657) /* ty=Tensor[(2, 3, 14), float32] */;
    %665 = divide(%660, %661) /* ty=Tensor[(1650), float64] */;
    (%662, %663, meta[relay.Constant][41] /* ty=Tensor[(96), int64] */, meta[relay.Constant][42] /* ty=Tensor[(8, 20), uint64] */, %664, %665)
  };
  %666(%var_968, %var_969, %var_970, %var_971, %var_972) /* ty=(Tensor[(2, 3, 14), bool], Tensor[(48, 2), int64], Tensor[(96), int64], Tensor[(8, 20), uint64], Tensor[(2, 3, 14), float32], Tensor[(1650), float64]) */
}

def @func_383(%var_369: Tensor[(4, 3, 8), int64]) -> Tensor[(4, 3, 8), int64] {
  %667 = cast(%var_369, dtype="int64") /* ty=Tensor[(4, 3, 8), int64] */;
  %668 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 8), int64] */, dtype="int64") /* ty=Tensor[(4, 3, 8), int64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%669, %670) /* ty=Tensor[(4, 3, 8), int64] */
}

def @func_1077() -> Tensor[(1, 7, 16), float64] {
  @func_1075() /* ty=Tensor[(1, 7, 16), float64] */
}

def @func_1523() -> Tensor[(16, 12, 5), float32] {
  %671 = @func_989() /* ty=(Tensor[(15, 15, 16), bool], Tensor[(16, 12, 5), float32], Tensor[(160), uint64], Tensor[(60), float32]) */;
  %671.1
}

def @func_3052(%var_3051: Tensor[(1456), int32]) -> (Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) {
  %681 = fn (%var_3017: Tensor[(1456), int32]) -> (Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) {
    %672 = cast(meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %673 = cast(%var_3017, dtype="int32") /* ty=Tensor[(1456), int32] */;
    %674 = reshape(%672, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), float32] */;
    %675 = reshape(%673, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
    %676 = @func_2169(%674, %675) /* ty=(Tensor[(1, 7, 16), float64], Tensor[(4, 11, 16), float32], Tensor[(704), float32], Tensor[(1, 7, 16), float64], Tensor[(16, ?, 7), bool], Tensor[(16, 13, 7), int8], Tensor[(16, ?, 7), float64]) */;
    %677 = @func_2439() /* ty=(Tensor[(60), float32],) */;
    %678 = @func_1503() /* ty=Tensor[(160), uint64] */;
    %679 = %676.2;
    %680 = %677.0;
    (%678, %679, meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, %var_3017, %680)
  };
  %681(%var_3051) /* ty=(Tensor[(160), uint64], Tensor[(704), float32], Tensor[(112), float32], Tensor[(1456), int32], Tensor[(60), float32]) */
}

def @func_5198(%var_5167: Tensor[(6, 8, 2), int32], %var_5181: Tensor[(4, 88), float32]) -> (Tensor[(6, 8, 2), bool], Tensor[(6, 8, 2), float32], Tensor[(4, 8, 11), float32], Tensor[(4, 88), float32], Tensor[(60), float32], Tensor[(960), float32]) {
  %682 = cast(%var_5167, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %683 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %686 = subtract(%684, %685) /* ty=Tensor[(6, 8, 2), int32] */;
  %687 = cast(%var_5167, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = cast(%686, dtype="float32") /* ty=Tensor[(6, 8, 2), float32] */;
  %692 = cast(%var_5181, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %693 = reshape(%692, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %694 = @func_2975(%693) /* ty=(Tensor[(160), int8], Tensor[(4, 8, 11), float32], Tensor[(352), float64]) */;
  %695 = cast(meta[relay.Constant][46] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %696 = reshape(%695, newshape=[16, 12, 5]) /* ty=Tensor[(16, 12, 5), float32] */;
  %697 = @func_3771(%696) /* ty=(Tensor[(60), float32], Tensor[(16, 12, 5), bool]) */;
  %698 = greater(%689, %690) /* ty=Tensor[(6, 8, 2), bool] */;
  %699 = acosh(%691) /* ty=Tensor[(6, 8, 2), float32] */;
  %700 = %694.1;
  %701 = %697.0;
  (%698, %699, %700, %var_5181, %701, meta[relay.Constant][46] /* ty=Tensor[(960), float32] */)
}

def @func_278(%var_270: Tensor[(1, 12, 5), float32]) -> Tensor[(16, 12, 5), float32] {
  %702 = cast(%var_270, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %703 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(16, 12, 5), bool] */;
  %704 = greater(%702, %703) /* ty=Tensor[(16, 12, 5), bool] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
  rsqrt(%705) /* ty=Tensor[(16, 12, 5), float32] */
}

def @func_3574(%var_3573: Tensor[(16, 12, 5), float32]) -> (Tensor[(16, 12, 5), uint16],) {
  %712 = fn (%var_3551: Tensor[(16, 12, 5), float32]) -> (Tensor[(16, 12, 5), uint16],) {
    %706 = @func_3277() /* ty=Tensor[(16, 12, 5), float32] */;
    %707 = cast(%var_3551, dtype="uint16") /* ty=Tensor[(16, 12, 5), uint16] */;
    %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%706, dtype="uint16") /* ty=Tensor[(16, 12, 5), uint16] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %711 = subtract(%709, %710) /* ty=Tensor[(16, 12, 5), uint16] */;
    (%711,)
  };
  %712(%var_3573) /* ty=(Tensor[(16, 12, 5), uint16],) */
}

def @func_2677(%var_2675: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  @func_2674(%var_2675) /* ty=(Tensor[(8, 7, 16), float64],) */
}

def @func_2345(%var_2343: Tensor[(5, 13, 16), float64], %var_2344: Tensor[(5, 13, 16), float32]) -> (Tensor[(5, 13, 16), uint16], Tensor[(5, 13, 16), float64]) {
  %727 = fn (%var_2300: Tensor[(5, 13, 16), float64], %var_2326: Tensor[(5, 13, 16), float32]) -> (Tensor[(5, 13, 16), uint16], Tensor[(5, 13, 16), float64]) {
    %713 = cast(%var_2300, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
    %714 = sigmoid(%713) /* ty=Tensor[(5, 13, 16), float32] */;
    %715 = cast(%var_2300, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
    %716 = sqrt(%715) /* ty=Tensor[(5, 13, 16), float64] */;
    %717 = cast(%716, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
    %718 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%714, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %721 = cast(%var_2326, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
    %722 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%714, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %725 = bitwise_xor(%719, %720) /* ty=Tensor[(5, 13, 16), uint16] */;
    %726 = floor_divide(%723, %724) /* ty=Tensor[(5, 13, 16), float64] */;
    (%725, %726)
  };
  %727(%var_2343, %var_2344) /* ty=(Tensor[(5, 13, 16), uint16], Tensor[(5, 13, 16), float64]) */
}

def @func_1811(%var_1808: Tensor[(2, 6, 8), float64], %var_1809: Tensor[(1650), float32], %var_1810: Tensor[(429), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) {
  @func_1806(%var_1808, %var_1809, %var_1810) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) */
}

def @func_3119(%var_3116: Tensor[(96), float64], %var_3117: Tensor[(1650, 1), float32], %var_3118: Tensor[(429), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(429), float32], Tensor[(96), float64], Tensor[(1650, 1), float32], Tensor[(429), float32]) {
  %740 = fn (%var_3106: Tensor[(96), float64], %var_3107: Tensor[(1650, 1), float32], %var_3108: Tensor[(429), float32]) -> (Tensor[(16, 12, 5), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(429), float32], Tensor[(96), float64], Tensor[(1650, 1), float32], Tensor[(429), float32]) {
    %728 = cast(%var_3106, dtype="float64") /* ty=Tensor[(96), float64] */;
    %729 = cast(%var_3107, dtype="float32") /* ty=Tensor[(1650, 1), float32] */;
    %730 = cast(%var_3108, dtype="float32") /* ty=Tensor[(429), float32] */;
    %731 = reshape(%728, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float64] */;
    %732 = reshape(%729, newshape=[1650]) /* ty=Tensor[(1650), float32] */;
    %733 = reshape(%730, newshape=[429]) /* ty=Tensor[(429), float32] */;
    %734 = @func_1806(%731, %732, %733) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(160), uint64], Tensor[(8, 88), float32], Tensor[(84), uint64], Tensor[(1650), float32], Tensor[(384), float32], Tensor[(429), float32], Tensor[(4, 8, 12), float32]) */;
    %735 = @func_1523() /* ty=Tensor[(16, 12, 5), float32] */;
    %736 = @func_1733() /* ty=Tensor[(1, 7, 16), float64] */;
    %737 = @func_2813() /* ty=Tensor[(160), uint64] */;
    %738 = @func_2041() /* ty=Tensor[(160), uint64] */;
    %739 = %734.6;
    (%735, %736, %737, %738, %739, %var_3106, %var_3107, %var_3108)
  };
  %740(%var_3116, %var_3117, %var_3118) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(429), float32], Tensor[(96), float64], Tensor[(1650, 1), float32], Tensor[(429), float32]) */
}

def @func_3303(%var_3301: Tensor[(12, 3, 6), float32]) -> (Tensor[(12, 3, 6), float32],) {
  @func_3300(%var_3301) /* ty=(Tensor[(12, 3, 6), float32],) */
}

def @func_5265(%var_5263: Tensor[(16, 12, 5), float64], %var_5264: Tensor[(56, 26), int32]) -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), int32], Tensor[(2, 728), uint16], Tensor[(56, 26), int32]) {
  %759 = fn (%var_5237: Tensor[(16, 12, 5), float64], %var_5252: Tensor[(56, 26), int32]) -> (Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), int32], Tensor[(2, 728), uint16], Tensor[(56, 26), int32]) {
    %741 = @func_3606() /* ty=(Tensor[(16, 12, 5), float32],) */;
    %742 = %741.0;
    %743 = cast(%742, dtype="float64") /* ty=Tensor[(16, 12, 5), float64] */;
    %744 = erf(%743) /* ty=Tensor[(16, 12, 5), float64] */;
    %745 = cast(%742, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
    %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%744, dtype="float32") /* ty=Tensor[(16, 12, 5), float32] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %749 = cast(%var_5237, dtype="int32") /* ty=Tensor[(16, 12, 5), int32] */;
    %750 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%744, dtype="int32") /* ty=Tensor[(16, 12, 5), int32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %753 = cast(%var_5252, dtype="int32") /* ty=Tensor[(56, 26), int32] */;
    %754 = reshape(%753, newshape=[2, 728]) /* ty=Tensor[(2, 728), int32] */;
    %755 = @func_4912(%754) /* ty=(Tensor[(160), uint64], Tensor[(160), uint64], Tensor[(?, 7, 16), float64], Tensor[(?, 7, 16), uint64], Tensor[(2, 728), uint16], Tensor[(676), float32], Tensor[(1, 7, 16), float64], Tensor[(160), uint64], Tensor[(429), float64]) */;
    %756 = floor_mod(%747, %748) /* ty=Tensor[(16, 12, 5), float32] */;
    %757 = add(%751, %752) /* ty=Tensor[(16, 12, 5), int32] */;
    %758 = %755.4;
    (%756, %757, %758, %var_5252)
  };
  %759(%var_5263, %var_5264) /* ty=(Tensor[(16, 12, 5), float32], Tensor[(16, 12, 5), int32], Tensor[(2, 728), uint16], Tensor[(56, 26), int32]) */
}

def @func_2000(%var_1998: Tensor[(384), float32]) -> (Tensor[(60), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32]) {
  @func_1997(%var_1998) /* ty=(Tensor[(60), float32], Tensor[(4, 8, 12), float32], Tensor[(384), float32]) */
}

def @func_3581() -> (Tensor[(1, 7, 16), float64],) {
  %762 = fn () -> (Tensor[(1, 7, 16), float64],) {
    %760 = @func_2767() /* ty=(Tensor[(1, 7, 16), float64],) */;
    %761 = %760.0;
    (%761,)
  };
  %762() /* ty=(Tensor[(1, 7, 16), float64],) */
}

def @func_386(%var_384: Tensor[(4, 3, 8), int64]) -> Tensor[(4, 3, 8), int64] {
  @func_383(%var_384) /* ty=Tensor[(4, 3, 8), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen42/build/output.py:1754: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen42/build/output.py", line 1759, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(36) tvmgen_default_fused_log10_kernel0(double* __restrict__ T_log10, double* __restrict__ placeholder) {
  T_log10[(((int)threadIdx.x))] = log10(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

