==========mod==========
#[version = "0.0.5"]
def @func_13872() -> (Tensor[(15, 12, 2), float64],) {
  %0 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
  %1 = %0.2;
  (%1,)
}

def @func_11695() -> (Tensor[(15, 12, 2), bool],) {
  %2 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %3 = %2.0;
  (%3,)
}

def @func_10994(%var_10981: Tensor[(726), float32]) -> (Tensor[(252), bool], Tensor[(726), float32], Tensor[(726), float32], Tensor[(8, 12, 13), float64]) {
  %4 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %5 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %6 = %5.1;
  %7 = cast(%var_10981, dtype="float32") /* ty=Tensor[(726), float32] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %9 = cast(%6, dtype="float32") /* ty=Tensor[(726), float32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?), float32] */;
  %11 = cast(%6, dtype="float32") /* ty=Tensor[(726), float32] */;
  %12 = divide(%9, %10) /* ty=Tensor[(726), float32] */;
  %13 = cast(%12, dtype="int16") /* ty=Tensor[(726), int16] */;
  %14 = reshape(%13, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
  %15 = @func_1245(%14) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
  %16 = %4.0;
  %17 = cosh(%11) /* ty=Tensor[(726), float32] */;
  %18 = %15.1;
  (%16, %12, %17, %18)
}

def @func_14709() -> Tensor[(15, 12, 2), bool] {
  %19 = @func_13454() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) */;
  %19.1
}

def @func_19874() -> (Tensor[(12, 4, 5), float32], Tensor[(15, 12, 2), int32], Tensor[(432), int16]) {
  %20 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
  %21 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %22 = %20.4;
  %23 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
  %24 = %21.3;
  (%22, %23, %24)
}

def @func_8332(%var_8290: Tensor[(420, 1), float64], %var_8291: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) {
  %25 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %26 = cast(%var_8290, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %27 = cast(%var_8290, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %28 = cast(%var_8291, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %29 = reshape(%26, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %30 = reshape(%27, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %31 = reshape(%28, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %32 = @func_2408(%29, %30, %31) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %33 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %34 = %25.1;
  %35 = %32.0;
  %36 = %33.0;
  (%34, %35, %var_8290, %var_8291, %36)
}

def @func_16701() -> Tensor[(12, 4), int16] {
  %37 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %37.0
}

def @func_6797() -> (Tensor[(252), bool],) {
  %38 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %39 = %38.2;
  (%39,)
}

def @func_19594() -> (Tensor[(1, 3, 4), uint32],) {
  %40 = @func_19170() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) */;
  %41 = %40.0;
  (%41,)
}

def @func_10265(%var_10258: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(21), float32], Tensor[(21), float32], Tensor[(432), int16]) {
  %42 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %43 = cast(%var_10258, dtype="float32") /* ty=Tensor[(21), float32] */;
  %44 = reshape(%43, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %45 = @func_9103(%44) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) */;
  %46 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %47 = %42.0;
  %48 = %45.3;
  %49 = %46.0;
  (%47, %48, %var_10258, %49)
}

def @func_20525() -> (Tensor[(726), int16], Tensor[(15, 12, 2), bool], Tensor[(21), float32], Tensor[(12, 4), int16], Tensor[(8, 14, 11), float32], Tensor[(1232), float32], Tensor[(11, 66), float64]) {
  %50 = @func_16868() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %51 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %52 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
  %53 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
  %54 = cast(meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %55 = cast(meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %56 = reshape(%54, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %57 = reshape(%55, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %58 = @func_7539(%56, %57) /* ty=(Tensor[(8, 14, 11), float32],) */;
  %59 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %60 = %59.1;
  %61 = @func_18722() /* ty=(Tensor[(726), float32], Tensor[(726), bool]) */;
  %62 = %61.1;
  %63 = cast(%62, dtype="uint64") /* ty=Tensor[(726), uint64] */;
  %64 = shape_of(%60, dtype="int32") /* ty=Tensor[(2), int32] */;
  %65 = cast(%60, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %67 = add(%65, %66) /* ty=Tensor[(11, 66), uint64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %69 = %50.1;
  %70 = %51.0;
  %71 = %52.2;
  %72 = %53.0;
  %73 = %58.0;
  %74 = tan(%68) /* ty=Tensor[(11, 66), float64] */;
  (%69, %70, %71, %72, %73, meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, %74)
}

def @func_20045() -> (Tensor[(16, 16, 3), bool],) {
  %75 = @func_12247() /* ty=(Tensor[(16, 16, 3), bool],) */;
  %76 = %75.0;
  (%76,)
}

def @func_8064(%var_8052: Tensor[(726), int16]) -> (Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %77 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %78 = cast(%var_8052, dtype="int16") /* ty=Tensor[(726), int16] */;
  %79 = cast(%var_8052, dtype="int16") /* ty=Tensor[(726), int16] */;
  %80 = reshape(%78, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %81 = reshape(%79, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %82 = %77.2;
  %83 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %84 = @func_697(%80, %81) /* ty=Tensor[(11, 6, 11), int16] */;
  (%82, %83, %84, %var_8052)
}

def @func_15474() -> (Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) {
  %85 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %86 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %87 = %85.0;
  %88 = %86.0;
  (%87, %88)
}

def @func_2408(%var_2380: Tensor[(6, 10, 7), float64], %var_2381: Tensor[(6, 10, 7), float64], %var_2389: Tensor[(12), uint32]) -> (Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) {
  %89 = cast(%var_2381, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %90 = shape_of(%var_2380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_2380, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %93 = cast(%var_2389, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %94 = reshape(%93, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %95 = @func_2228(%94) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %96 = cast(%var_2381, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %97 = divide(%91, %92) /* ty=Tensor[(6, 10, 7), float64] */;
  %98 = %95.0;
  %99 = atan(%96) /* ty=Tensor[(6, 10, 7), float64] */;
  (%97, %98, %var_2389, %99)
}

def @func_14229() -> Tensor[(15, 12, 2), int32] {
  @func_9809() /* ty=Tensor[(15, 12, 2), int32] */
}

def @func_17540() -> (Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) {
  %100 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
  %101 = cast(meta[relay.Constant][1] /* ty=Tensor[(21, 1), float32] */, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %102 = reshape(%101, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %103 = @func_3552(%102) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %104 = @func_14873() /* ty=(Tensor[(432), int16],) */;
  %105 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %106 = %100.4;
  %107 = %103.0;
  %108 = %104.0;
  %109 = %105.0;
  (%106, %107, meta[relay.Constant][1] /* ty=Tensor[(21, 1), float32] */, %108, %109)
}

def @func_7999(%var_7981: Tensor[(4, 11, 14), float32]) -> (Tensor[(4, 11, 14), float32],) {
  %110 = cast(%var_7981, dtype="float32") /* ty=Tensor[(4, 11, 14), float32] */;
  %111 = log2(%110) /* ty=Tensor[(4, 11, 14), float32] */;
  (%111,)
}

def @func_9636(%var_9629: Tensor[(16, 16, 3), bool]) -> Tensor[(16, 16, 3), int64] {
  %112 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %113 = %112.1;
  %114 = cast(%var_9629, dtype="int64") /* ty=Tensor[(16, 16, 3), int64] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="int64") /* ty=Tensor[(16, 16, 3), int64] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%116, %117) /* ty=Tensor[(16, 16, 3), int64] */
}

def @func_15217() -> Tensor[(1, 3, 4), uint32] {
  %118 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %118.1
}

def @func_9809() -> Tensor[(15, 12, 2), int32] {
  %119 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %119.0
}

def @func_21266() -> (Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
  %120 = @func_11196() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %121 = @func_14205() /* ty=Tensor[(12), uint32] */;
  %122 = %120.0;
  (%121, %122)
}

def @func_12455() -> (Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) {
  %123 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %124 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %125 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %128 = reshape(%127, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %129 = @func_7667(%128) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %130 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
  %131 = %123.0;
  %132 = %124.0;
  %133 = %129.0;
  %134 = %130.1;
  (%131, %132, %126, %133, %134)
}

def @func_7838() -> (Tensor[(3, 4), uint32],) {
  %135 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %136 = %135.5;
  (%136,)
}

def @func_18807() -> (Tensor[(15, 12, 2), bool],) {
  %137 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %138 = %137.0;
  (%138,)
}

def @func_14310(%var_14277: Tensor[(726, 1), int16]) -> (Tensor[(12, 4, 5), float32], Tensor[(726), int32], Tensor[(726, 1), int16], Tensor[(726), float32]) {
  %139 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %140 = cast(%var_14277, dtype="int16") /* ty=Tensor[(726, 1), int16] */;
  %141 = reshape(%140, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %142 = @func_8145(%141) /* ty=(Tensor[(726), int32],) */;
  %143 = @func_13466() /* ty=(Tensor[(726), float32],) */;
  %144 = %139.0;
  %145 = %142.0;
  %146 = %143.0;
  (%144, %145, %var_14277, %146)
}

def @func_19332() -> (Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %147 = cast(meta[relay.Constant][2] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %148 = cast(meta[relay.Constant][2] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %149 = reshape(%147, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %150 = reshape(%148, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %151 = @func_10393() /* ty=Tensor[(252), bool] */;
  %152 = @func_697(%149, %150) /* ty=Tensor[(11, 6, 11), int16] */;
  (%151, %152, meta[relay.Constant][2] /* ty=Tensor[(726), int16] */)
}

def @func_20895() -> (Tensor[(15, 12, 2), int32], Tensor[(252), bool], Tensor[(12, 4), int16]) {
  %153 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %154 = @func_13026() /* ty=(Tensor[(252), bool],) */;
  %155 = %153.0;
  %156 = %154.0;
  %157 = @func_11048() /* ty=Tensor[(12, 4), int16] */;
  (%155, %156, %157)
}

def @func_8646() -> (Tensor[(252), bool], Tensor[(15, 12, 2), int32]) {
  %158 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %159 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %160 = %158.0;
  %161 = %159.7;
  (%160, %161)
}

def @func_20642(%var_20610: Tensor[(726), int16], %var_20627: Tensor[(726), int16]) -> (Tensor[(21), float32], Tensor[(11, 6, 11), int16], Tensor[(8, 12, 13), float64], Tensor[(726), bool], Tensor[(726), bool]) {
  %162 = @func_15474() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) */;
  %163 = cast(meta[relay.Constant][3] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %164 = cast(meta[relay.Constant][3] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %165 = reshape(%163, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %166 = reshape(%164, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %167 = @func_697(%165, %166) /* ty=Tensor[(11, 6, 11), int16] */;
  %168 = cast(%167, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
  %169 = reshape(%168, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
  %170 = @func_1245(%169) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
  %171 = cast(%var_20610, dtype="bool") /* ty=Tensor[(726), bool] */;
  %172 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(726), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(meta[relay.Constant][3] /* ty=Tensor[(726), int16] */, dtype="bool") /* ty=Tensor[(726), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), bool] */;
  %175 = cast(%var_20627, dtype="bool") /* ty=Tensor[(726), bool] */;
  %176 = shape_of(%var_20610, dtype="int32") /* ty=Tensor[(1), int32] */;
  %177 = cast(%var_20610, dtype="bool") /* ty=Tensor[(726), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?), bool] */;
  %179 = %162.1;
  %180 = %170.1;
  %181 = less(%173, %174) /* ty=Tensor[(726), bool] */;
  %182 = less_equal(%177, %178) /* ty=Tensor[(726), bool] */;
  (%179, %167, %180, %181, %182)
}

def @func_15419() -> (Tensor[(1, 3, 4), float64], Tensor[(15, 12, 2), float64]) {
  %183 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %184 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %185 = %183.0;
  %186 = %184.0;
  (%185, %186)
}

def @func_13515() -> (Tensor[(15, 12, 2), int32],) {
  %187 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
  (%187,)
}

def @func_15173() -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  %188 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
  %189 = %188.2;
  %190 = @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%189, %190)
}

def @func_9125() -> (Tensor[(15, 12, 2), float64],) {
  %191 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %192 = %191.0;
  (%192,)
}

def @func_11017() -> (Tensor[(15, 12, 2), bool],) {
  %193 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %194 = %193.1;
  (%194,)
}

def @func_6630() -> Tensor[(15, 12, 2), float64] {
  %195 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  sinh(%195) /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_15735(%var_15726: Tensor[(14, 3, 4), uint32]) -> (Tensor[(14, 3, 4), uint16],) {
  %196 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %197 = %196.1;
  %198 = cast(%197, dtype="uint16") /* ty=Tensor[(1, 3, 4), uint16] */;
  %199 = cast(%var_15726, dtype="uint16") /* ty=Tensor[(14, 3, 4), uint16] */;
  %200 = subtract(%198, %199) /* ty=Tensor[(14, 3, 4), uint16] */;
  (%200,)
}

def @func_15653(%var_15629: Tensor[(392), float32]) -> (Tensor[(21), float32], Tensor[(392), float32], Tensor[(2, 14, 14), float32], Tensor[(1, 3, 4), float64]) {
  %201 = cast(%var_15629, dtype="float32") /* ty=Tensor[(392), float32] */;
  %202 = reshape(%201, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
  %203 = @func_5719(%202) /* ty=(Tensor[(2, 14, 14), float32],) */;
  %204 = %203.0;
  %205 = cast(%204, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %206 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %207 = @func_14132() /* ty=Tensor[(21), float32] */;
  %208 = exp(%205) /* ty=Tensor[(2, 14, 14), float32] */;
  %209 = %206.0;
  (%207, %var_15629, %208, %209)
}

def @func_9332() -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) {
  %210 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %211 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %212 = %210.0;
  %213 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  %214 = %211.0;
  (%212, %213, %214)
}

def @func_10548() -> (Tensor[(1, 3, 4), uint32],) {
  %215 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %216 = %215.1;
  (%216,)
}

def @func_13498() -> (Tensor[(15, 12, 2), float64],) {
  %217 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
  %218 = %217.0;
  (%218,)
}

def @func_13454() -> (Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) {
  %219 = @func_8096() /* ty=(Tensor[(252), bool],) */;
  %220 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %221 = reshape(%220, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %222 = @func_7609(%221) /* ty=(Tensor[(15, 12, 2), bool],) */;
  %223 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %224 = %219.0;
  %225 = %222.0;
  %226 = %223.1;
  (%224, %225, meta[relay.Constant][5] /* ty=Tensor[(360), float64] */, %226)
}

def @func_17666() -> Tensor[(21), float32] {
  @func_14132() /* ty=Tensor[(21), float32] */
}

def @func_17705(%var_17668: Tensor[(8, 12, 13), float32]) -> (Tensor[(8, 12, 13), float32], Tensor[(15, 12, 2), bool]) {
  %227 = cast(%var_17668, dtype="float32") /* ty=Tensor[(8, 12, 13), float32] */;
  %228 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %229 = sqrt(%227) /* ty=Tensor[(8, 12, 13), float32] */;
  %230 = %228.0;
  (%229, %230)
}

def @func_8544() -> (Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) {
  %231 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %232 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 4), int16] */, dtype="int16") /* ty=Tensor[(12, 4), int16] */;
  %233 = reshape(%232, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), int16] */;
  %234 = %231.0;
  %235 = @func_7462(%233) /* ty=Tensor[(16, 16, 3), bool] */;
  (%234, %235, meta[relay.Constant][6] /* ty=Tensor[(12, 4), int16] */)
}

def @func_19170() -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) {
  %236 = @func_15623() /* ty=(Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) */;
  %237 = @func_14162() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %238 = %236.1;
  %239 = %237.0;
  (%238, %239)
}

def @func_17954() -> (Tensor[(1, 3, 4), uint32],) {
  %240 = @func_15707() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%240,)
}

def @func_9310() -> (Tensor[(432), int16],) {
  %241 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %242 = %241.1;
  (%242,)
}

def @func_14873() -> (Tensor[(432), int16],) {
  %243 = @func_12926() /* ty=(Tensor[(432), int16],) */;
  %244 = %243.0;
  (%244,)
}

def @func_17129() -> (Tensor[(726), float32],) {
  %245 = @func_6964() /* ty=Tensor[(726), int16] */;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(726), float32] */;
  %247 = erf(%246) /* ty=Tensor[(726), float32] */;
  (%247,)
}

def @func_15500() -> (Tensor[(726), int16], Tensor[(252), bool]) {
  %248 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
  %249 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %250 = %248.0;
  %251 = %249.0;
  (%250, %251)
}

def @func_11820() -> (Tensor[(1, 3, 4), float64],) {
  %252 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %253 = %252.2;
  (%253,)
}

def @func_14418(%var_14408: Tensor[(392), float32]) -> (Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) {
  %254 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %255 = cast(%var_14408, dtype="float32") /* ty=Tensor[(392), float32] */;
  %256 = reshape(%255, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %257 = @func_12975(%256) /* ty=(Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) */;
  %258 = %254.0;
  %259 = %257.1;
  (%258, %259, %var_14408)
}

def @func_14504() -> (Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) {
  %260 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %261 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %262 = @func_14318() /* ty=(Tensor[(21), float32],) */;
  %263 = @func_14439() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %264 = %260.1;
  %265 = %261.1;
  %266 = %262.0;
  %267 = %263.0;
  (%264, %265, %266, %267)
}

def @func_17480(%var_17449: Tensor[(126, 2), bool]) -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float32], Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(126, 2), bool], Tensor[(726), int16]) {
  %268 = cast(meta[relay.Constant][7] /* ty=Tensor[(126, 2), bool] */, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %269 = reshape(%268, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %270 = @func_8489(%269) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) */;
  %271 = @func_10828() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) */;
  %272 = cast(%var_17449, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %273 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(126, 2), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %274 = cast(meta[relay.Constant][7] /* ty=Tensor[(126, 2), bool] */, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %276 = @func_14867() /* ty=(Tensor[(252), bool], Tensor[(726), int16]) */;
  %277 = @func_16701() /* ty=Tensor[(12, 4), int16] */;
  %278 = %270.0;
  %279 = %271.1;
  %280 = @func_16459() /* ty=Tensor[(1, 3, 4), uint32] */;
  %281 = logical_and(%274, %275) /* ty=Tensor[(126, 2), bool] */;
  %282 = %276.1;
  (%277, %278, %279, %280, %281, %282)
}

def @func_21588() -> Tensor[(16, 16, 3), bool] {
  @func_12528() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_12975(%var_12960: Tensor[(392), float32]) -> (Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) {
  %283 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
  %284 = cast(%var_12960, dtype="float32") /* ty=Tensor[(392), float32] */;
  %285 = reshape(%284, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
  %286 = @func_5719(%285) /* ty=(Tensor[(2, 14, 14), float32],) */;
  %287 = @func_12318() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) */;
  %288 = atanh(%283) /* ty=Tensor[(2, 7, 11), float64] */;
  %289 = %286.0;
  %290 = %287.0;
  (%288, %289, %var_12960, %290)
}

def @func_15794() -> Tensor[(252), bool] {
  %291 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %291.0
}

def @func_20746() -> Tensor[(15, 12, 2), float64] {
  %292 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %292.0
}

def @func_9521(%var_9516: Tensor[(36), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(252), bool]) {
  %293 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %294 = cast(%var_9516, dtype="bool") /* ty=Tensor[(36), bool] */;
  %295 = cast(%var_9516, dtype="bool") /* ty=Tensor[(36), bool] */;
  %296 = reshape(%294, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %297 = reshape(%295, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %298 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %299 = %293.1;
  %300 = @func_9178(%296, %297) /* ty=Tensor[(2, 9, 2), bool] */;
  %301 = %298.0;
  (%299, %300, %var_9516, %301)
}

def @func_7729(%var_7724: Tensor[(726), int16]) -> (Tensor[(726), int16], Tensor[(726), int32]) {
  %302 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %303 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %304 = %303.0;
  %305 = cast(%var_7724, dtype="int32") /* ty=Tensor[(726), int32] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(1), int32] */;
  %307 = cast(%304, dtype="int32") /* ty=Tensor[(726), int32] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), int32] */;
  %309 = %302.0;
  %310 = left_shift(%307, %308) /* ty=Tensor[(726), int32] */;
  (%309, %310)
}

def @func_20224() -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32]) {
  %311 = @func_17540() /* ty=(Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) */;
  %312 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %313 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %314 = reshape(%313, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
  %315 = @func_16243(%314) /* ty=(Tensor[(2, 14, 6), int64],) */;
  %316 = %311.1;
  %317 = %312.0;
  %318 = %315.0;
  (%316, %317, %318, meta[relay.Constant][9] /* ty=Tensor[(168), float32] */)
}

def @func_17569() -> Tensor[(15, 12, 2), bool] {
  %319 = @func_16406() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) */;
  %319.0
}

def @func_9342() -> (Tensor[(12, 4), int16],) {
  %320 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %321 = %320.2;
  (%321,)
}

def @func_21010() -> Tensor[(15, 12, 2), float64] {
  %322 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %322.0
}

def @func_9490() -> (Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) {
  %323 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %324 = %323.0;
  %325 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%324, %325)
}

def @func_21192() -> (Tensor[(?, 3, 4), bool],) {
  %326 = @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %328 = log2(%327) /* ty=Tensor[(1, 3, 4), float32] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %330 = atanh(%329) /* ty=Tensor[(1, 3, 4), float64] */;
  %331 = cast(%326, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = equal(%333, %334) /* ty=Tensor[(?, 3, 4), bool] */;
  (%335,)
}

def @func_15149() -> Tensor[(15, 12, 2), bool] {
  %336 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %336.1
}

def @func_12399() -> (Tensor[(1, 3, 4), uint32],) {
  %337 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %338 = %337.0;
  (%338,)
}

def @func_7309(%var_7246: Tensor[(726), int16]) -> (Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) {
  %339 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %340 = %339.0;
  %341 = cast(%var_7246, dtype="float64") /* ty=Tensor[(726), float64] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %343 = cast(%340, dtype="float64") /* ty=Tensor[(726), float64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?), float64] */;
  %345 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %346 = cast(meta[relay.Constant][10] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %347 = reshape(%346, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %348 = @func_7220(%347) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %349 = floor_divide(%343, %344) /* ty=Tensor[(726), float64] */;
  %350 = %345.0;
  %351 = %348.1;
  (%349, %350, %351, meta[relay.Constant][10] /* ty=Tensor[(12), uint32] */)
}

def @func_18793() -> (Tensor[(726), int16], Tensor[(21), float32]) {
  %352 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %353 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(21), float32] */;
  %356 = %352.0;
  %357 = log10(%355) /* ty=Tensor[(21), float32] */;
  (%356, %357)
}

def @func_9362() -> (Tensor[(1, 3, 4), uint32],) {
  %358 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %359 = %358.1;
  (%359,)
}

def @func_16406() -> (Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) {
  %360 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %361 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %362 = @func_14873() /* ty=(Tensor[(432), int16],) */;
  %363 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %364 = %360.0;
  %365 = %361.1;
  %366 = %362.0;
  %367 = %363.0;
  (%364, %365, %366, %367)
}

def @func_13171(%var_13146: Tensor[(1248), float64], %var_13147: Tensor[(726), int16]) -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) {
  %368 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %369 = cast(%var_13146, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %370 = cast(%var_13147, dtype="int16") /* ty=Tensor[(726), int16] */;
  %371 = reshape(%369, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), float64] */;
  %372 = reshape(%370, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %373 = @func_828(%371, %372) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) */;
  %374 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %375 = %368.3;
  %376 = %373.2;
  %377 = %374.0;
  (%375, %376, %var_13146, %var_13147, %377)
}

def @func_14069() -> (Tensor[(11, 66), bool],) {
  %378 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %379 = %378.1;
  %380 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 66), int16] */, dtype="bool") /* ty=Tensor[(11, 66), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(11, 66), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %384 = greater_equal(%382, %383) /* ty=Tensor[(11, 66), bool] */;
  (%384,)
}

def @func_19205() -> (Tensor[(15, 12, 2), float64],) {
  %385 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %386 = %385.0;
  (%386,)
}

def @func_18753(%var_18724: Tensor[(4, 13, 8), float32]) -> (Tensor[(4, 13, 8), float32], Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
  %387 = cast(%var_18724, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %388 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %389 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %390 = tan(%387) /* ty=Tensor[(4, 13, 8), float32] */;
  %391 = %388.3;
  %392 = %389.0;
  (%390, %391, %392)
}

def @func_20393() -> (Tensor[(11, 66), bool],) {
  %393 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
  %394 = %393.0;
  (%394,)
}

def @func_16360() -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) {
  %395 = @func_14439() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %396 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %397 = reshape(%396, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), int16] */;
  %398 = @func_14318() /* ty=(Tensor[(21), float32],) */;
  %399 = @func_15217() /* ty=Tensor[(1, 3, 4), uint32] */;
  %400 = %395.0;
  %401 = @func_7462(%397) /* ty=Tensor[(16, 16, 3), bool] */;
  %402 = %398.0;
  (%399, %400, %401, meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, %402)
}

def @func_7428(%var_7407: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) {
  %403 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %404 = cast(%var_7407, dtype="float32") /* ty=Tensor[(21), float32] */;
  %405 = reshape(%404, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %406 = @func_3552(%405) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %407 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %408 = %403.0;
  %409 = %406.0;
  %410 = %407.0;
  (%408, %409, %var_7407, %410)
}

def @func_8145(%var_8135: Tensor[(726), int16]) -> (Tensor[(726), int32],) {
  %411 = @func_6964() /* ty=Tensor[(726), int16] */;
  %412 = cast(%var_8135, dtype="int32") /* ty=Tensor[(726), int32] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(1), int32] */;
  %414 = cast(%411, dtype="int32") /* ty=Tensor[(726), int32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?), int32] */;
  %416 = bitwise_xor(%414, %415) /* ty=Tensor[(726), int32] */;
  (%416,)
}

def @func_7491() -> Tensor[(15, 12, 2), float64] {
  @func_6630() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_8865() -> (Tensor[(726), int16],) {
  %417 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %418 = %417.2;
  (%418,)
}

def @func_18057() -> (Tensor[(726), int16], Tensor[(392), float32], Tensor[(7, 56), float64], Tensor[(726), int16]) {
  %419 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %420 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 56), float32] */, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %421 = reshape(%420, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %422 = @func_14418(%421) /* ty=(Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) */;
  %423 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 56), float32] */, dtype="float64") /* ty=Tensor[(7, 56), float64] */;
  %424 = %419.1;
  %425 = cast(%424, dtype="int16") /* ty=Tensor[(726), int16] */;
  %426 = reshape(%425, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %427 = @func_8064(%426) /* ty=(Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %428 = %422.2;
  %429 = atan(%423) /* ty=Tensor[(7, 56), float64] */;
  %430 = %427.3;
  (%424, %428, %429, %430)
}

def @func_6964() -> Tensor[(726), int16] {
  %431 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %431.2
}

def @func_18862(%var_18822: Tensor[(1248), float64], %var_18823: Tensor[(726), int16], %var_18844: Tensor[(726), int16]) -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(1248), float64], Tensor[(726), int64], Tensor[(1, 3, 4), uint32]) {
  %432 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %433 = cast(%var_18822, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %434 = cast(%var_18823, dtype="int16") /* ty=Tensor[(726), int16] */;
  %435 = reshape(%433, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %436 = reshape(%434, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %437 = @func_13171(%435, %436) /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) */;
  %438 = cast(%var_18844, dtype="int64") /* ty=Tensor[(726), int64] */;
  %439 = shape_of(%var_18823, dtype="int32") /* ty=Tensor[(1), int32] */;
  %440 = cast(%var_18823, dtype="int64") /* ty=Tensor[(726), int64] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?), int64] */;
  %442 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %443 = %432.0;
  %444 = %437.4;
  %445 = logical_xor(%440, %441) /* ty=Tensor[(726), int64] */;
  %446 = %442.0;
  (%443, %444, %var_18822, %445, %446)
}

def @func_17347() -> (Tensor[(1, 3, 4), uint32],) {
  %447 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%447,)
}

def @func_10828() -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) {
  %448 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %449 = @func_8865() /* ty=(Tensor[(726), int16],) */;
  %450 = %448.1;
  %451 = %449.0;
  (%450, %451)
}

def @func_13575(%var_13561: Tensor[(616), float32]) -> (Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) {
  %452 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %453 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
  %454 = cast(meta[relay.Constant][14] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %455 = reshape(%454, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %456 = @func_10016(%455) /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) */;
  %457 = cast(%var_13561, dtype="float32") /* ty=Tensor[(616), float32] */;
  %458 = reshape(%457, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
  %459 = @func_7999(%458) /* ty=(Tensor[(4, 11, 14), float32],) */;
  %460 = %452.0;
  %461 = %453.3;
  %462 = %456.1;
  %463 = %459.0;
  (%460, %461, %462, meta[relay.Constant][14] /* ty=Tensor[(12), uint32] */, %463, %var_13561)
}

def @func_7609(%var_7597: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), bool],) {
  %464 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  %465 = cast(%var_7597, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = less_equal(%467, %468) /* ty=Tensor[(15, 12, 2), bool] */;
  (%469,)
}

def @func_20160() -> Tensor[(16, 16, 3), bool] {
  @func_18500() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_17589() -> (Tensor[(16, 16, 3), bool],) {
  %470 = @func_16360() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) */;
  %471 = %470.2;
  %472 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = less_equal(%474, %475) /* ty=Tensor[(16, 16, 3), bool] */;
  (%476,)
}

def @func_18578() -> Tensor[(1, 3, 4), uint32] {
  @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_16280() -> (Tensor[(15, 12, 2), bool],) {
  %477 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %478 = %477.0;
  (%478,)
}

def @func_10106(%var_10087: Tensor[(726), int16]) -> (Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) {
  %479 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %480 = %479.0;
  %481 = cast(%var_10087, dtype="bool") /* ty=Tensor[(726), bool] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(1), int32] */;
  %483 = cast(%480, dtype="bool") /* ty=Tensor[(726), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?), bool] */;
  %485 = cast(%var_10087, dtype="int16") /* ty=Tensor[(726), int16] */;
  %486 = reshape(%485, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %487 = @func_7309(%486) /* ty=(Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) */;
  %488 = equal(%483, %484) /* ty=Tensor[(726), bool] */;
  %489 = %487.2;
  (%488, %489)
}

def @func_12926() -> (Tensor[(432), int16],) {
  %490 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %491 = %490.0;
  (%491,)
}

def @func_9840() -> (Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) {
  %492 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %493 = cast(meta[relay.Constant][16] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %494 = reshape(%493, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %495 = @func_7428(%494) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %496 = %492.0;
  %497 = %495.2;
  (%496, %497, meta[relay.Constant][16] /* ty=Tensor[(21), float32] */)
}

def @func_11196() -> (Tensor[(15, 12, 2), float64],) {
  %498 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %499 = %498.0;
  (%499,)
}

def @func_13638() -> Tensor[(12, 4), int16] {
  @func_11048() /* ty=Tensor[(12, 4), int16] */
}

def @func_12657() -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) {
  %500 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %501 = cast(meta[relay.Constant][17] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %502 = reshape(%501, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %503 = @func_8064(%502) /* ty=(Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %504 = cast(meta[relay.Constant][18] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %505 = cast(meta[relay.Constant][18] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %506 = %500.0;
  %507 = cast(%506, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %508 = reshape(%504, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %509 = reshape(%505, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %510 = reshape(%507, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %511 = @func_2408(%508, %509, %510) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %512 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %513 = %503.3;
  %514 = %511.3;
  %515 = %512.0;
  (%506, %513, meta[relay.Constant][17] /* ty=Tensor[(726), int16] */, %514, meta[relay.Constant][18] /* ty=Tensor[(210, 2), float64] */, %515)
}

def @func_8216() -> (Tensor[(21), float32],) {
  %516 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %517 = %516.4;
  (%517,)
}

def @func_15985(%var_15962: Tensor[(15, 12, 2), float64]) -> (Tensor[(16, 16, 3), bool], Tensor[(15, 12, 2), uint64], Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %518 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %519 = %518.0;
  %520 = cast(%var_15962, dtype="uint64") /* ty=Tensor[(15, 12, 2), uint64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="uint64") /* ty=Tensor[(15, 12, 2), uint64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %524 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %525 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
  %526 = right_shift(%522, %523) /* ty=Tensor[(15, 12, 2), uint64] */;
  %527 = %524.0;
  %528 = @func_15707() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%525, %526, %527, %528)
}

def @func_10016(%var_10005: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) {
  %529 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %530 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %531 = cast(%var_10005, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %532 = reshape(%529, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %533 = reshape(%530, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %534 = reshape(%531, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %535 = @func_2408(%532, %533, %534) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %536 = @func_6964() /* ty=Tensor[(726), int16] */;
  %537 = %535.1;
  (%536, %537, meta[relay.Constant][19] /* ty=Tensor[(1, 420), float64] */, %var_10005)
}

def @func_16459() -> Tensor[(1, 3, 4), uint32] {
  %538 = @func_15474() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) */;
  %538.0
}

def @func_9178(%var_9173: Tensor[(2, 9, 2), bool], %var_9174: Tensor[(2, 9, 2), bool]) -> Tensor[(2, 9, 2), bool] {
  %539 = cast(%var_9174, dtype="bool") /* ty=Tensor[(2, 9, 2), bool] */;
  %540 = shape_of(%var_9173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_9173, dtype="bool") /* ty=Tensor[(2, 9, 2), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%541, %542) /* ty=Tensor[(2, 9, 2), bool] */
}

def @func_9103(%var_9073: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) {
  %543 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %544 = cast(%var_9073, dtype="float32") /* ty=Tensor[(21), float32] */;
  %545 = reshape(%544, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %546 = @func_7428(%545) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %547 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %548 = %546.1;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
  %550 = reshape(%549, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %551 = @func_3552(%550) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %552 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  %553 = %543.1;
  %554 = %547.0;
  %555 = %551.0;
  (%552, %553, %548, %var_9073, %554, %555)
}

def @func_19473() -> (Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) {
  %556 = @func_19332() /* ty=(Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %557 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %558 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %559 = reshape(%557, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %560 = reshape(%558, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %561 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
  %562 = %556.1;
  %563 = @func_9178(%559, %560) /* ty=Tensor[(2, 9, 2), bool] */;
  %564 = %561.4;
  (%562, %563, meta[relay.Constant][20] /* ty=Tensor[(36), bool] */, %564)
}

def @func_2190(%var_2179: Tensor[(3, 6, 14), bool], %var_2180: Tensor[(3, 6, 14), bool]) -> Tensor[(3, 6, 14), bool] {
  %565 = cast(%var_2180, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %566 = shape_of(%var_2179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_2179, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%567, %568) /* ty=Tensor[(3, 6, 14), bool] */
}

def @func_14162() -> (Tensor[(15, 12, 2), bool],) {
  %569 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %570 = %569.0;
  (%570,)
}

def @func_21311() -> (Tensor[(6, 2), uint32], Tensor[(3, 6, 14), bool], Tensor[(1848), float32]) {
  %571 = @func_15771() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) */;
  %572 = cast(meta[relay.Constant][21] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %573 = reshape(%572, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %574 = @func_21112(%573) /* ty=(Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) */;
  %575 = %571.2;
  %576 = %574.1;
  (%575, %576, meta[relay.Constant][21] /* ty=Tensor[(1848), float32] */)
}

def @func_8197() -> (Tensor[(3, 4), uint32], Tensor[(432), int16]) {
  %577 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %578 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %579 = %577.0;
  %580 = %578.3;
  (%579, %580)
}

def @func_10179(%var_10143: Tensor[(616), float32], %var_10154: Tensor[(12), uint32]) -> (Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) {
  %581 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %582 = cast(%var_10143, dtype="float32") /* ty=Tensor[(616), float32] */;
  %583 = reshape(%582, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
  %584 = @func_7999(%583) /* ty=(Tensor[(4, 11, 14), float32],) */;
  %585 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %586 = cast(%var_10154, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %587 = reshape(%586, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %588 = @func_2228(%587) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %589 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %590 = %588.0;
  %591 = cast(%590, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %592 = reshape(%591, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %593 = @func_7667(%592) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %594 = %581.0;
  %595 = %584.0;
  %596 = %585.0;
  %597 = %589.0;
  %598 = %593.1;
  (%594, %595, %var_10143, %596, %590, %var_10154, %597, %598)
}

def @func_7569(%var_7567: Tensor[(252), bool]) -> (Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  %599 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %600 = cast(%var_7567, dtype="bool") /* ty=Tensor[(252), bool] */;
  %601 = cast(%var_7567, dtype="bool") /* ty=Tensor[(252), bool] */;
  %602 = reshape(%600, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %603 = reshape(%601, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %604 = %599.1;
  %605 = @func_2190(%602, %603) /* ty=Tensor[(3, 6, 14), bool] */;
  (%604, %605, %var_7567)
}

def @func_20675() -> (Tensor[(252), bool],) {
  %606 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %607 = %606.0;
  (%607,)
}

def @func_10781() -> (Tensor[(726), int16], Tensor[(11, 66), int16]) {
  %608 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="int16") /* ty=Tensor[(726), int16] */;
  %611 = reshape(%610, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
  %612 = @func_1245(%611) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
  %613 = %612.5;
  (%609, %613)
}

def @func_18986(%var_18962: Tensor[(432), int16]) -> (Tensor[(12, 4), int16], Tensor[(432), bool], Tensor[(1, 3, 4), uint32]) {
  %614 = @func_18275() /* ty=(Tensor[(12, 4), int16],) */;
  %615 = @func_12926() /* ty=(Tensor[(432), int16],) */;
  %616 = %615.0;
  %617 = cast(%var_18962, dtype="bool") /* ty=Tensor[(432), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(1), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(432), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?), bool] */;
  %621 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %622 = %614.0;
  %623 = greater_equal(%619, %620) /* ty=Tensor[(432), bool] */;
  %624 = %621.0;
  (%622, %623, %624)
}

def @func_13913(%var_13901: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %625 = @func_13872() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %626 = cast(%var_13901, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %627 = reshape(%626, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %628 = @func_7667(%627) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %629 = %625.0;
  %630 = %628.2;
  (%629, %630, %var_13901)
}

def @func_13376() -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) {
  %631 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %632 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %633 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %634 = @func_9923() /* ty=(Tensor[(12, 4), int16],) */;
  %635 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %636 = %631.0;
  %637 = %632.0;
  %638 = %633.0;
  %639 = %634.0;
  %640 = %635.0;
  (%636, %637, %638, %639, %640)
}

def @func_10294(%var_10286: Tensor[(1232), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(8, 14, 11), float32], Tensor[(1232), float32]) {
  %641 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %642 = cast(%var_10286, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %643 = cast(%var_10286, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %644 = reshape(%642, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %645 = reshape(%643, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %646 = @func_7539(%644, %645) /* ty=(Tensor[(8, 14, 11), float32],) */;
  %647 = %641.1;
  %648 = %646.0;
  (%647, %648, %var_10286)
}

def @func_16682() -> (Tensor[(432), int16], Tensor[(1, 3, 4), uint32]) {
  %649 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %650 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %651 = %649.1;
  %652 = %650.0;
  (%651, %652)
}

def @func_697(%var_687: Tensor[(11, 6, 11), int16], %var_688: Tensor[(11, 6, 11), int16]) -> Tensor[(11, 6, 11), int16] {
  %653 = cast(%var_688, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
  %654 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_687, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%655, %656) /* ty=Tensor[(11, 6, 11), int16] */
}

def @func_6912() -> (Tensor[(15, 12, 2), float64],) {
  %657 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %658 = %657.0;
  (%658,)
}

def @func_8096() -> (Tensor[(252), bool],) {
  %659 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %660 = %659.0;
  (%660,)
}

def @func_1245(%var_1232: Tensor[(11, 66), int16]) -> (Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) {
  %661 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 13), float32] */;
  %662 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 12, 13), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 13), float64] */;
  %663 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 216), int16] */, dtype="int16") /* ty=Tensor[(2, 216), int16] */;
  %664 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 216), int16] */, dtype="int16") /* ty=Tensor[(2, 216), int16] */;
  %665 = reshape(%663, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %666 = reshape(%664, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %667 = @func_940(%665, %666) /* ty=(Tensor[(3, 16, 9), int16],) */;
  %668 = cast(%var_1232, dtype="int16") /* ty=Tensor[(11, 66), int16] */;
  %669 = cast(%var_1232, dtype="int16") /* ty=Tensor[(11, 66), int16] */;
  %670 = reshape(%668, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %671 = reshape(%669, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %672 = acosh(%661) /* ty=Tensor[(8, 12, 13), float32] */;
  %673 = exp(%662) /* ty=Tensor[(8, 12, 13), float64] */;
  %674 = %667.0;
  %675 = @func_697(%670, %671) /* ty=Tensor[(11, 6, 11), int16] */;
  (%672, %673, %674, meta[relay.Constant][23] /* ty=Tensor[(2, 216), int16] */, %675, %var_1232)
}

def @func_21512(%var_21470: Tensor[(16, 15, 14), float64], %var_21483: Tensor[(1008), int8]) -> (Tensor[(16, 15, 14), float64], Tensor[(36), bool], Tensor[(16, 15, 14), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
  %676 = cast(%var_21470, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %677 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 15, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %680 = @func_19473() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) */;
  %681 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %682 = cast(%var_21483, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %683 = reshape(%682, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), int8] */;
  %684 = @func_15880(%683) /* ty=(Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) */;
  %685 = floor_divide(%678, %679) /* ty=Tensor[(16, 15, 14), float64] */;
  %686 = %680.2;
  %687 = sqrt(%681) /* ty=Tensor[(16, 15, 14), float64] */;
  %688 = %684.2;
  (%685, %686, %687, %688, %var_21483)
}

def @func_19116(%var_19094: Tensor[(120), uint16]) -> (Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %689 = @func_12247() /* ty=(Tensor[(16, 16, 3), bool],) */;
  %690 = @func_18793() /* ty=(Tensor[(726), int16], Tensor[(21), float32]) */;
  %691 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %692 = cast(%var_19094, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %693 = reshape(%691, newshape=[]) /* ty=uint16 */;
  %694 = reshape(%692, newshape=[2, 15, 4]) /* ty=Tensor[(2, 15, 4), uint16] */;
  %695 = @func_17954() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %696 = @func_12399() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %697 = %689.0;
  %698 = %690.1;
  %699 = @func_18403(%693, %694) /* ty=Tensor[(2, 15, 4), uint16] */;
  %700 = %695.0;
  %701 = %696.0;
  (%697, %698, %699, meta[relay.Constant][25] /* ty=uint16 */, %var_19094, %700, %701)
}

def @func_12163() -> (Tensor[(11, 6, 11), int16],) {
  %702 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
  %703 = %702.1;
  (%703,)
}

def @func_12773() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool]) {
  %704 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %707 = @func_8725() /* ty=(Tensor[(252), bool],) */;
  %708 = log(%706) /* ty=Tensor[(15, 12, 2), float64] */;
  %709 = %707.0;
  (%708, %709)
}

def @func_16994() -> Tensor[(15, 12, 2), bool] {
  %710 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %710.0
}

def @func_18640(%var_18624: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64], Tensor[(726), int32], Tensor[(726), int16]) {
  %711 = cast(%var_18624, dtype="float64") /* ty=Tensor[(4, 13, 4), float64] */;
  %712 = cast(meta[relay.Constant][26] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %713 = reshape(%712, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %714 = @func_8145(%713) /* ty=(Tensor[(726), int32],) */;
  %715 = sqrt(%711) /* ty=Tensor[(4, 13, 4), float64] */;
  %716 = %714.0;
  (%715, %716, meta[relay.Constant][26] /* ty=Tensor[(726), int16] */)
}

def @func_12318() -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) {
  %717 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %718 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
  %719 = %717.0;
  (%718, %719)
}

def @func_11756() -> Tensor[(15, 12, 2), int32] {
  %720 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
  %720.0
}

def @main(%var_21608: Tensor[(11, 66), bool]) -> (Tensor[(11, 66), float64], Tensor[(16, 16, 3), bool], Tensor[(11, 66), float32]) {
  %721 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
  %722 = %721.0;
  %723 = cast(%var_21608, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %725 = cast(%722, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %727 = power(%725, %726) /* ty=Tensor[(11, 66), float64] */;
  %728 = cast(%var_21608, dtype="int64") /* ty=Tensor[(11, 66), int64] */;
  %729 = shape_of(%722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %730 = cast(%722, dtype="int64") /* ty=Tensor[(11, 66), int64] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %732 = bitwise_xor(%730, %731) /* ty=Tensor[(11, 66), int64] */;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %734 = shape_of(%727, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%727, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %737 = cast(%var_21608, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
  %738 = floor_divide(%735, %736) /* ty=Tensor[(11, 66), float64] */;
  %739 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
  %740 = log(%737) /* ty=Tensor[(11, 66), float32] */;
  (%738, %739, %740)
}

def @func_940(%var_934: Tensor[(3, 16, 9), int16], %var_935: Tensor[(3, 16, 9), int16]) -> (Tensor[(3, 16, 9), int16],) {
  %741 = cast(%var_935, dtype="int16") /* ty=Tensor[(3, 16, 9), int16] */;
  %742 = shape_of(%var_934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_934, dtype="int16") /* ty=Tensor[(3, 16, 9), int16] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %745 = right_shift(%743, %744) /* ty=Tensor[(3, 16, 9), int16] */;
  (%745,)
}

def @func_9818() -> Tensor[(15, 12, 2), float64] {
  %746 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %746.0
}

def @func_20022() -> Tensor[(15, 12, 2), bool] {
  @func_17569() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_19739(%var_19629: Tensor[(1248), float64], %var_19731: Tensor[(168, 1), float32]) -> (Tensor[(726), float32], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(15, 12, 2), int32], Tensor[(72), int64], Tensor[(252), bool], Tensor[(2, 14, 6), int64], Tensor[(168, 1), float32], Tensor[(?, 3, 4), float64]) {
  %747 = @func_17129() /* ty=(Tensor[(726), float32],) */;
  %748 = cast(%var_19629, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %749 = %747.0;
  %750 = cast(%749, dtype="int16") /* ty=Tensor[(726), int16] */;
  %751 = reshape(%748, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %752 = reshape(%750, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %753 = @func_13171(%751, %752) /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) */;
  %754 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %755 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
  %756 = @func_12773() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool]) */;
  %757 = cast(%var_19731, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %758 = reshape(%757, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
  %759 = @func_16243(%758) /* ty=(Tensor[(2, 14, 6), int64],) */;
  %760 = @func_18578() /* ty=Tensor[(1, 3, 4), uint32] */;
  %761 = @func_18578() /* ty=Tensor[(1, 3, 4), uint32] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %763 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%760, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %766 = %753.2;
  %767 = %754.0;
  %768 = %755.2;
  %769 = %756.1;
  %770 = %759.0;
  %771 = mod(%764, %765) /* ty=Tensor[(?, 3, 4), float64] */;
  (%749, %766, %var_19629, %767, %768, %769, %770, %var_19731, %771)
}

def @func_17389() -> (Tensor[(252), bool],) {
  %772 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %773 = %772.0;
  (%773,)
}

def @func_12857() -> (Tensor[(12), uint32],) {
  %774 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %775 = %774.3;
  (%775,)
}

def @func_7667(%var_7645: Tensor[(12), uint32]) -> (Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %776 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %777 = cast(%var_7645, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %778 = reshape(%777, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %779 = @func_7220(%778) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %780 = %776.0;
  %781 = %779.3;
  (%780, %781, %var_7645)
}

def @func_13823() -> (Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) {
  %782 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %783 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %784 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %785 = %782.4;
  %786 = %783.0;
  %787 = %784.0;
  %788 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
  %789 = @func_9934() /* ty=Tensor[(3, 4), uint32] */;
  (%785, %786, %787, %788, %789)
}

def @func_16868() -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
  %790 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %791 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %792 = %790.1;
  %793 = %791.2;
  (%792, %793)
}

def @func_10393() -> Tensor[(252), bool] {
  %794 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %794.0
}

def @func_19070() -> (Tensor[(15, 12, 2), int32],) {
  %795 = @func_14373() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) */;
  %796 = %795.2;
  (%796,)
}

def @func_19227() -> (Tensor[(8, 5, 16), float32],) {
  %797 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %798 = asin(%797) /* ty=Tensor[(8, 5, 16), float32] */;
  (%798,)
}

def @func_7908(%var_7904: Tensor[(21, 1), float32]) -> (Tensor[(3, 6, 14), float32], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32]) {
  %799 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %800 = %799.1;
  %801 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 6, 14), bool] */, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %805 = cast(%var_7904, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %806 = reshape(%805, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %807 = @func_3552(%806) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %808 = divide(%803, %804) /* ty=Tensor[(3, 6, 14), float32] */;
  %809 = %807.0;
  (%808, %809, %var_7904)
}

def @func_13466() -> (Tensor[(726), float32],) {
  %810 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %811 = %810.1;
  (%811,)
}

def @func_19904(%var_19901: Tensor[(15, 9, 15), float32]) -> (Tensor[(15, 9, 15), float32],) {
  %812 = cast(%var_19901, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %813 = atanh(%812) /* ty=Tensor[(15, 9, 15), float32] */;
  (%813,)
}

def @func_14867() -> (Tensor[(252), bool], Tensor[(726), int16]) {
  %814 = @func_12773() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool]) */;
  %815 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %816 = %814.1;
  %817 = %815.0;
  (%816, %817)
}

def @func_5255(%var_5234: int64, %var_5235: Tensor[(4, 15, 2), int64]) -> Tensor[(4, 15, 2), int64] {
  %818 = cast(%var_5234, dtype="int64") /* ty=int64 */;
  %819 = cast(%var_5235, dtype="int64") /* ty=Tensor[(4, 15, 2), int64] */;
  multiply(%818, %819) /* ty=Tensor[(4, 15, 2), int64] */
}

def @func_21112(%var_21087: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) {
  %820 = cast(%var_21087, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %821 = cast(meta[relay.Constant][29] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %822 = cast(meta[relay.Constant][29] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %823 = reshape(%821, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %824 = reshape(%822, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %825 = @func_18256() /* ty=(Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) */;
  %826 = acosh(%820) /* ty=Tensor[(14, 11, 12), float32] */;
  %827 = @func_2190(%823, %824) /* ty=Tensor[(3, 6, 14), bool] */;
  %828 = %825.2;
  (%826, %827, meta[relay.Constant][29] /* ty=Tensor[(252), bool] */, %828)
}

def @func_18887() -> (Tensor[(4, 11, 8), uint16], Tensor[(252), bool]) {
  %829 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
  %830 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %831 = %829.1;
  %832 = %830.0;
  (%831, %832)
}

def @func_7220(%var_7202: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %833 = cast(meta[relay.Constant][30] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %834 = cast(%var_7202, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %835 = reshape(%833, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
  %836 = reshape(%834, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %837 = @func_4048(%835, %836) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
  %838 = cast(meta[relay.Constant][30] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %839 = cast(%var_7202, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %840 = reshape(%838, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
  %841 = reshape(%839, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %842 = @func_4048(%840, %841) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
  %843 = @func_6964() /* ty=Tensor[(726), int16] */;
  %844 = %837.0;
  %845 = %842.4;
  (%843, %844, meta[relay.Constant][30] /* ty=Tensor[(432), int16] */, %var_7202, %845)
}

def @func_20289(%var_20285: Tensor[(252), bool]) -> (Tensor[(3, 4), uint32], Tensor[(726), int16], Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  %846 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %847 = @func_10828() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) */;
  %848 = %847.1;
  %849 = cast(%848, dtype="int16") /* ty=Tensor[(726), int16] */;
  %850 = cast(%848, dtype="int16") /* ty=Tensor[(726), int16] */;
  %851 = reshape(%849, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %852 = reshape(%850, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %853 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %854 = cast(%var_20285, dtype="bool") /* ty=Tensor[(252), bool] */;
  %855 = cast(%var_20285, dtype="bool") /* ty=Tensor[(252), bool] */;
  %856 = reshape(%854, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %857 = reshape(%855, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %858 = %846.0;
  %859 = @func_697(%851, %852) /* ty=Tensor[(11, 6, 11), int16] */;
  %860 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  %861 = %853.0;
  %862 = @func_2190(%856, %857) /* ty=Tensor[(3, 6, 14), bool] */;
  (%858, %848, %859, %860, %861, %862, %var_20285)
}

def @func_18275() -> (Tensor[(12, 4), int16],) {
  %863 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
  %864 = %863.3;
  (%864,)
}

def @func_18692() -> (Tensor[(252), bool], Tensor[(21), int8], Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  %865 = @func_13026() /* ty=(Tensor[(252), bool],) */;
  %866 = cast(meta[relay.Constant][31] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %867 = reshape(%866, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %868 = @func_7428(%867) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %869 = %868.2;
  %870 = cast(%869, dtype="int8") /* ty=Tensor[(21), int8] */;
  %871 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(21), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(meta[relay.Constant][31] /* ty=Tensor[(21), float32] */, dtype="int8") /* ty=Tensor[(21), int8] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), int8] */;
  %874 = @func_16406() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) */;
  %875 = %865.0;
  %876 = bitwise_and(%872, %873) /* ty=Tensor[(21), int8] */;
  %877 = @func_15794() /* ty=Tensor[(252), bool] */;
  %878 = %874.1;
  (%875, %876, %877, %878)
}

def @func_15063(%var_15023: Tensor[(15, 14, 14), uint64], %var_15024: Tensor[(15, 14, 14), uint64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(15, 14, 14), float32]) {
  %879 = cast(%var_15024, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %880 = shape_of(%var_15023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%var_15023, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %883 = cast(%var_15023, dtype="float64") /* ty=Tensor[(15, 14, 14), float64] */;
  %884 = cos(%883) /* ty=Tensor[(15, 14, 14), float64] */;
  %885 = cast(%884, dtype="float32") /* ty=Tensor[(15, 14, 14), float32] */;
  %886 = logical_xor(%881, %882) /* ty=Tensor[(15, 14, 14), uint64] */;
  %887 = acos(%885) /* ty=Tensor[(15, 14, 14), float32] */;
  (%886, %887)
}

def @func_19063() -> (Tensor[(11, 6, 11), int16], Tensor[(?, 3, 4), float32]) {
  %888 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %889 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
  %890 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %891 = %890.1;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %893 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%889, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %896 = %888.1;
  %897 = floor_mod(%894, %895) /* ty=Tensor[(?, 3, 4), float32] */;
  (%896, %897)
}

def @func_13026() -> (Tensor[(252), bool],) {
  %898 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %899 = %898.0;
  (%899,)
}

def @func_9267() -> (Tensor[(12, 4, 5), float32],) {
  %900 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %901 = sqrt(%900) /* ty=Tensor[(12, 4, 5), float32] */;
  (%901,)
}

def @func_9227(%var_9214: Tensor[(6, 20), int64], %var_9221: Tensor[(210, 2), float64]) -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(4, 15, 2), int64], int64, Tensor[(6, 20), int64], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(3, 4), uint32]) {
  %902 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %903 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %904 = reshape(%902, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %905 = reshape(%903, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %906 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %907 = cast(%var_9214, dtype="int64") /* ty=Tensor[(6, 20), int64] */;
  %908 = reshape(%906, newshape=[]) /* ty=int64 */;
  %909 = reshape(%907, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), int64] */;
  %910 = cast(%var_9221, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %911 = cast(%var_9221, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %912 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4), uint32] */;
  %913 = reshape(%910, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %914 = reshape(%911, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %915 = reshape(%912, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %916 = @func_2408(%913, %914, %915) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %917 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  %918 = @func_2190(%904, %905) /* ty=Tensor[(3, 6, 14), bool] */;
  %919 = @func_5255(%908, %909) /* ty=Tensor[(4, 15, 2), int64] */;
  %920 = %916.0;
  (%917, %918, meta[relay.Constant][33] /* ty=Tensor[(252), bool] */, %919, -10 /* ty=int64 */, %var_9214, %920, %var_9221, meta[relay.Constant][34] /* ty=Tensor[(3, 4), uint32] */)
}

def @func_14924(%var_14898: Tensor[(768), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(16, 16, 3), int64], Tensor[(768), bool]) {
  %921 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
  %922 = cast(meta[relay.Constant][35] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %923 = reshape(%922, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %924 = @func_13575(%923) /* ty=(Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) */;
  %925 = cast(%var_14898, dtype="bool") /* ty=Tensor[(768), bool] */;
  %926 = reshape(%925, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), bool] */;
  %927 = %921.3;
  %928 = %924.4;
  %929 = @func_9636(%926) /* ty=Tensor[(16, 16, 3), int64] */;
  (%927, %928, meta[relay.Constant][35] /* ty=Tensor[(616), float32] */, %929, %var_14898)
}

def @func_11973() -> (Tensor[(15, 12, 2), float64],) {
  %930 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %931 = %930.0;
  (%931,)
}

def @func_18722() -> (Tensor[(726), float32], Tensor[(726), bool]) {
  %932 = @func_17129() /* ty=(Tensor[(726), float32],) */;
  %933 = %932.0;
  %934 = cast(%933, dtype="int16") /* ty=Tensor[(726), int16] */;
  %935 = reshape(%934, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %936 = @func_10106(%935) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
  %937 = %936.0;
  (%933, %937)
}

def @func_6861() -> (Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %938 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %939 = cast(meta[relay.Constant][36] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %940 = cast(meta[relay.Constant][36] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %941 = reshape(%939, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %942 = reshape(%940, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %943 = %938.1;
  %944 = @func_697(%941, %942) /* ty=Tensor[(11, 6, 11), int16] */;
  (%943, %944, meta[relay.Constant][36] /* ty=Tensor[(726), int16] */)
}

def @func_20135() -> Tensor[(16, 16, 3), bool] {
  %945 = @func_17589() /* ty=(Tensor[(16, 16, 3), bool],) */;
  %945.0
}

def @func_14132() -> Tensor[(21), float32] {
  %946 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %946.0
}

def @func_15623() -> (Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %947 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %948 = %947.0;
  %949 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%948, %949)
}

def @func_7462(%var_7438: Tensor[(16, 1, 3), int16]) -> Tensor[(16, 16, 3), bool] {
  %950 = cast(%var_7438, dtype="bool") /* ty=Tensor[(16, 1, 3), bool] */;
  %951 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 16, 3), int16] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  greater_equal(%950, %951) /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_9049() -> (Tensor[(15, 12, 2), float64],) {
  %952 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  (%952,)
}

def @func_8970() -> (Tensor[(252), bool],) {
  %953 = @func_8725() /* ty=(Tensor[(252), bool],) */;
  %954 = %953.0;
  (%954,)
}

def @func_9787() -> (Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) {
  %955 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %956 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
  %957 = %955.1;
  (%956, %957)
}

def @func_8667() -> (Tensor[(726), int16],) {
  %958 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %959 = %958.2;
  (%959,)
}

def @func_17017() -> (Tensor[(726), int16],) {
  %960 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %961 = %960.0;
  (%961,)
}

def @func_16243(%var_16220: Tensor[(2, 14, 6), float32]) -> (Tensor[(2, 14, 6), int64],) {
  %962 = cast(%var_16220, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %963 = asin(%962) /* ty=Tensor[(2, 14, 6), float32] */;
  %964 = cast(%963, dtype="int64") /* ty=Tensor[(2, 14, 6), int64] */;
  %965 = shape_of(%var_16220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%var_16220, dtype="int64") /* ty=Tensor[(2, 14, 6), int64] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %968 = subtract(%966, %967) /* ty=Tensor[(2, 14, 6), int64] */;
  (%968,)
}

def @func_9154() -> Tensor[(1, 3, 4), uint32] {
  %969 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %969.1
}

def @func_18149(%var_18119: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(21), bool]) {
  %970 = @func_11695() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %971 = @func_14132() /* ty=Tensor[(21), float32] */;
  %972 = cast(%var_18119, dtype="bool") /* ty=Tensor[(21), bool] */;
  %973 = shape_of(%971, dtype="int32") /* ty=Tensor[(1), int32] */;
  %974 = cast(%971, dtype="bool") /* ty=Tensor[(21), bool] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?), bool] */;
  %976 = %970.0;
  %977 = greater(%974, %975) /* ty=Tensor[(21), bool] */;
  (%976, %977)
}

def @func_18561() -> (Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) {
  %978 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %979 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %980 = @func_14504() /* ty=(Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) */;
  %981 = %978.0;
  %982 = %979.0;
  %983 = %980.0;
  (%981, %982, %983)
}

def @func_14205() -> Tensor[(12), uint32] {
  %984 = @func_12857() /* ty=(Tensor[(12), uint32],) */;
  %984.0
}

def @func_12588() -> Tensor[(252), bool] {
  %985 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %985.2
}

def @func_19274() -> Tensor[(252), bool] {
  %986 = @func_15500() /* ty=(Tensor[(726), int16], Tensor[(252), bool]) */;
  %986.1
}

def @func_7178() -> (Tensor[(726), int16], Tensor[(726), float32]) {
  %987 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %988 = @func_6964() /* ty=Tensor[(726), int16] */;
  %989 = %987.6;
  (%988, %989)
}

def @func_17304(%var_17289: Tensor[(726), int16]) -> (Tensor[(1, 3, 4), uint32], Tensor[(4, 11, 8), uint16], Tensor[(726), int16], Tensor[(1, 3, 4), uint32]) {
  %990 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %991 = cast(%var_17289, dtype="int16") /* ty=Tensor[(726), int16] */;
  %992 = reshape(%991, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %993 = @func_10106(%992) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
  %994 = %990.0;
  %995 = cast(%994, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %996 = reshape(%995, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %997 = @func_2228(%996) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %998 = %993.1;
  %999 = %997.0;
  (%994, %998, %var_17289, %999)
}

def @func_20988(%var_20985: Tensor[(1008), int8]) -> (Tensor[(1, 3, 4), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
  %1000 = @func_11820() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %1001 = cast(%var_20985, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %1002 = reshape(%1001, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), int8] */;
  %1003 = @func_15880(%1002) /* ty=(Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) */;
  %1004 = %1000.0;
  %1005 = %1003.2;
  (%1004, %1005, %var_20985)
}

def @func_8725() -> (Tensor[(252), bool],) {
  %1006 = @func_8096() /* ty=(Tensor[(252), bool],) */;
  %1007 = %1006.0;
  (%1007,)
}

def @func_14373() -> (Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) {
  %1008 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1009 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %1010 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %1011 = %1008.0;
  %1012 = %1009.0;
  %1013 = %1010.0;
  (%1011, %1012, %1013)
}

def @func_4048(%var_4006: Tensor[(36, 12), int16], %var_4023: Tensor[(12), uint32]) -> (Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) {
  %1014 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1015 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %1016 = cast(%var_4006, dtype="int16") /* ty=Tensor[(36, 12), int16] */;
  %1017 = cast(%var_4006, dtype="int16") /* ty=Tensor[(36, 12), int16] */;
  %1018 = reshape(%1016, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %1019 = reshape(%1017, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %1020 = @func_940(%1018, %1019) /* ty=(Tensor[(3, 16, 9), int16],) */;
  %1021 = %1020.0;
  %1022 = cast(%1021, dtype="float64") /* ty=Tensor[(3, 16, 9), float64] */;
  %1023 = cast(%var_4023, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1024 = reshape(%1023, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %1025 = @func_2228(%1024) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1026 = logical_xor(%1014, %1015) /* ty=Tensor[(4, 11, 8), uint16] */;
  %1027 = asin(%1022) /* ty=Tensor[(3, 16, 9), float64] */;
  %1028 = %1025.0;
  (%1026, %var_4006, %1027, %1028, %var_4023)
}

def @func_7539(%var_7530: Tensor[(8, 14, 11), float32], %var_7531: Tensor[(8, 14, 11), float32]) -> (Tensor[(8, 14, 11), float32],) {
  %1029 = cast(%var_7531, dtype="float32") /* ty=Tensor[(8, 14, 11), float32] */;
  %1030 = shape_of(%var_7530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1031 = cast(%var_7530, dtype="float32") /* ty=Tensor[(8, 14, 11), float32] */;
  %1032 = dyn.reshape(%1029, %1030, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1033 = mod(%1031, %1032) /* ty=Tensor[(8, 14, 11), float32] */;
  (%1033,)
}

def @func_20923(%var_20912: Tensor[(7, 11, 11), float32]) -> (Tensor[(7, 11, 11), float32],) {
  %1034 = cast(%var_20912, dtype="float32") /* ty=Tensor[(7, 11, 11), float32] */;
  %1035 = log2(%1034) /* ty=Tensor[(7, 11, 11), float32] */;
  (%1035,)
}

def @func_10321() -> (Tensor[(1, 3, 4), uint32],) {
  %1036 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1037 = %1036.0;
  (%1037,)
}

def @func_11618() -> (Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) {
  %1038 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1039 = %1038.1;
  %1040 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1041 = %1040.2;
  %1042 = cast(%1041, dtype="int32") /* ty=Tensor[(1, 3, 4), int32] */;
  %1043 = shape_of(%1039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%1039, dtype="int32") /* ty=Tensor[(1, 3, 4), int32] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1046 = cast(%1039, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %1047 = reshape(%1046, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1048 = @func_7220(%1047) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %1049 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %1050 = add(%1044, %1045) /* ty=Tensor[(?, 3, 4), int32] */;
  %1051 = %1048.2;
  %1052 = %1049.0;
  (%1050, %1051, %1052)
}

def @func_19377() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(120), uint16]) {
  %1053 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1054 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %1055 = cast(meta[relay.Constant][40] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %1056 = reshape(%1055, newshape=[120]) /* ty=Tensor[(120), uint16] */;
  %1057 = @func_19116(%1056) /* ty=(Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) */;
  %1058 = %1053.0;
  %1059 = %1054.0;
  %1060 = %1057.5;
  (%1058, %1059, %1060, meta[relay.Constant][40] /* ty=Tensor[(120), uint16] */)
}

def @func_14658() -> (Tensor[(432), int16], Tensor[(11, 66), bool]) {
  %1061 = @func_11618() /* ty=(Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) */;
  %1062 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
  %1063 = %1061.1;
  %1064 = %1062.0;
  (%1063, %1064)
}

def @func_21436() -> (Tensor[(21), float32], Tensor[(15, 12, 2), float64]) {
  %1065 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %1066 = %1065.0;
  %1067 = @func_20746() /* ty=Tensor[(15, 12, 2), float64] */;
  (%1066, %1067)
}

def @func_20308() -> Tensor[(1, 3, 4), uint32] {
  @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_13737() -> (Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) {
  %1068 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1069 = cast(meta[relay.Constant][41] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %1070 = reshape(%1069, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), int64] */;
  %1071 = @func_10348(%1070) /* ty=(Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) */;
  %1072 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %1073 = %1068.0;
  %1074 = %1071.1;
  %1075 = %1072.1;
  (%1073, %1074, meta[relay.Constant][41] /* ty=Tensor[(72), int64] */, %1075)
}

def @func_18256() -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) {
  %1076 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1077 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1078 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %1079 = %1076.2;
  %1080 = %1077.0;
  %1081 = %1078.0;
  %1082 = @func_6964() /* ty=Tensor[(726), int16] */;
  (%1079, %1080, %1081, %1082)
}

def @func_11807() -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) {
  %1083 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %1084 = %1083.0;
  %1085 = cast(%1084, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1086 = reshape(%1085, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %1087 = @func_10106(%1086) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
  %1088 = %1087.1;
  (%1084, %1088)
}

def @func_7125() -> (Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) {
  %1089 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %1090 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %1091 = reshape(%1089, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %1092 = reshape(%1090, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %1093 = @func_940(%1091, %1092) /* ty=(Tensor[(3, 16, 9), int16],) */;
  %1094 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4), uint32] */;
  %1095 = reshape(%1094, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %1096 = @func_2228(%1095) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1097 = cast(meta[relay.Constant][42] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %1098 = cast(meta[relay.Constant][43] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1099 = reshape(%1097, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), float64] */;
  %1100 = reshape(%1098, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %1101 = @func_828(%1099, %1100) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) */;
  %1102 = %1101.1;
  %1103 = cast(%1102, dtype="float32") /* ty=Tensor[(726), float32] */;
  %1104 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %1105 = %1104.0;
  %1106 = cast(%1105, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1107 = atan(%1106) /* ty=Tensor[(15, 12, 2), float32] */;
  %1108 = cast(%1107, dtype="int32") /* ty=Tensor[(15, 12, 2), int32] */;
  %1109 = shape_of(%1105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1110 = cast(%1105, dtype="int32") /* ty=Tensor[(15, 12, 2), int32] */;
  %1111 = dyn.reshape(%1108, %1109, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1112 = %1093.0;
  %1113 = %1096.0;
  %1114 = atan(%1103) /* ty=Tensor[(726), float32] */;
  %1115 = left_shift(%1110, %1111) /* ty=Tensor[(15, 12, 2), int32] */;
  (meta[relay.Constant][42] /* ty=Tensor[(1248), float64] */, meta[relay.Constant][43] /* ty=Tensor[(726), int16] */, %1112, meta[relay.Constant][44] /* ty=Tensor[(432), int16] */, %1113, meta[relay.Constant][45] /* ty=Tensor[(3, 4), uint32] */, %1114, %1115)
}

def @func_20801() -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(726), int16]) {
  %1116 = @func_18275() /* ty=(Tensor[(12, 4), int16],) */;
  %1117 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1118 = @func_18561() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) */;
  %1119 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
  %1120 = %1116.0;
  %1121 = %1117.0;
  %1122 = %1118.1;
  %1123 = %1119.0;
  (%1120, %1121, %1122, %1123)
}

def @func_18500() -> Tensor[(16, 16, 3), bool] {
  @func_12528() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_8854() -> (Tensor[(432), int16],) {
  %1124 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %1125 = %1124.1;
  (%1125,)
}

def @func_5719(%var_5694: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
  %1126 = cast(%var_5694, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %1127 = atanh(%1126) /* ty=Tensor[(2, 14, 14), float32] */;
  (%1127,)
}

def @func_14318() -> (Tensor[(21), float32],) {
  %1128 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %1129 = %1128.0;
  (%1129,)
}

def @func_15580(%var_15558: Tensor[(36), bool]) -> (Tensor[(12), uint32], Tensor[(2, 9, 2), bool], Tensor[(36), bool]) {
  %1130 = @func_12857() /* ty=(Tensor[(12), uint32],) */;
  %1131 = cast(%var_15558, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1132 = cast(%var_15558, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1133 = reshape(%1131, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %1134 = reshape(%1132, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %1135 = %1130.0;
  %1136 = @func_9178(%1133, %1134) /* ty=Tensor[(2, 9, 2), bool] */;
  (%1135, %1136, %var_15558)
}

def @func_16615(%var_16540: Tensor[(12, 4, 5), float32], %var_16605: Tensor[(12, 4, 5), float32]) -> (Tensor[(3, 4), uint32], Tensor[(12, 4, 5), uint64], Tensor[(12, 4, 5), int32], Tensor[(11, 66), int16], Tensor[(252), bool], Tensor[(21), float32], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), uint16], Tensor[(48), int16]) {
  %1137 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
  %1138 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
  %1139 = %1138.1;
  %1140 = cast(%var_16540, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %1141 = shape_of(%1139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1142 = cast(%1139, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %1143 = dyn.reshape(%1140, %1141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1144 = mod(%1142, %1143) /* ty=Tensor[(12, 4, 5), float32] */;
  %1145 = cast(%1139, dtype="uint64") /* ty=Tensor[(12, 4, 5), uint64] */;
  %1146 = shape_of(%1144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1147 = cast(%1144, dtype="uint64") /* ty=Tensor[(12, 4, 5), uint64] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1149 = cast(%1139, dtype="int32") /* ty=Tensor[(12, 4, 5), int32] */;
  %1150 = shape_of(%var_16540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1151 = cast(%var_16540, dtype="int32") /* ty=Tensor[(12, 4, 5), int32] */;
  %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1153 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %1154 = cast(meta[relay.Constant][46] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1155 = reshape(%1154, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %1156 = @func_7428(%1155) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %1157 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1158 = cast(%var_16605, dtype="uint16") /* ty=Tensor[(12, 4, 5), uint16] */;
  %1159 = shape_of(%var_16540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1160 = cast(%var_16540, dtype="uint16") /* ty=Tensor[(12, 4, 5), uint16] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1162 = @func_16360() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) */;
  %1163 = %1137.4;
  %1164 = multiply(%1147, %1148) /* ty=Tensor[(12, 4, 5), uint64] */;
  %1165 = subtract(%1151, %1152) /* ty=Tensor[(12, 4, 5), int32] */;
  %1166 = %1153.1;
  %1167 = %1156.0;
  %1168 = %1157.0;
  %1169 = minimum(%1160, %1161) /* ty=Tensor[(12, 4, 5), uint16] */;
  %1170 = %1162.3;
  (%1163, %1164, %1165, %1166, %1167, meta[relay.Constant][46] /* ty=Tensor[(21), float32] */, %1168, %1169, %1170)
}

def @func_2228(%var_2224: Tensor[(1, 3, 4), uint32]) -> (Tensor[(1, 3, 4), uint32],) {
  %1171 = cast(meta[relay.Constant][47] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1172 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %1173 = minimum(%1171, %1172) /* ty=Tensor[(1, 3, 4), uint32] */;
  (%1173,)
}

def @func_13286(%var_13248: Tensor[(616), float32], %var_13249: Tensor[(6, 2), uint32]) -> (Tensor[(726), int16], Tensor[(12, 4, 5), float32], Tensor[(726), int16], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(616), float32], Tensor[(6, 2), uint32], Tensor[(1, 3, 4), uint32]) {
  %1174 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %1175 = @func_8865() /* ty=(Tensor[(726), int16],) */;
  %1176 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1177 = cast(%var_13248, dtype="float32") /* ty=Tensor[(616), float32] */;
  %1178 = cast(%var_13249, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
  %1179 = reshape(%1177, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %1180 = reshape(%1178, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1181 = @func_10179(%1179, %1180) /* ty=(Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) */;
  %1182 = cast(%var_13249, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
  %1183 = reshape(%1182, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %1184 = @func_2228(%1183) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1185 = @func_6964() /* ty=Tensor[(726), int16] */;
  %1186 = %1174.0;
  %1187 = %1175.0;
  %1188 = %1176.0;
  %1189 = %1181.3;
  %1190 = %1184.0;
  (%1185, %1186, %1187, %1188, %1189, %var_13248, %var_13249, %1190)
}

def @func_18375() -> (Tensor[(726), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32], Tensor[(252), bool], Tensor[(14, 3, 4), uint16]) {
  %1191 = cast(meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1192 = reshape(%1191, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
  %1193 = @func_16243(%1192) /* ty=(Tensor[(2, 14, 6), int64],) */;
  %1194 = @func_6964() /* ty=Tensor[(726), int16] */;
  %1195 = cast(%1194, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1196 = reshape(%1195, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %1197 = @func_17899(%1196) /* ty=(Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) */;
  %1198 = cast(meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1199 = reshape(%1198, newshape=[14, 3, 4]) /* ty=Tensor[(14, 3, 4), uint32] */;
  %1200 = @func_15735(%1199) /* ty=(Tensor[(14, 3, 4), uint16],) */;
  %1201 = %1193.0;
  %1202 = %1197.1;
  %1203 = %1200.0;
  (%1194, %1201, meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, %1202, %1203)
}

def @func_21548() -> (Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), int32]) {
  %1204 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1205 = %1204.0;
  %1206 = cast(%1205, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %1207 = reshape(%1206, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %1208 = @func_7609(%1207) /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1209 = @func_16868() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %1210 = %1208.0;
  %1211 = %1209.0;
  (%1205, %1210, %1211)
}

def @func_10348(%var_10336: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) {
  %1212 = cast(%var_10336, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %1213 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(3, 2, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1214 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 2, 12), int64] */, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %1215 = dyn.reshape(%1212, %1213, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1216 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
  %1217 = bitwise_or(%1214, %1215) /* ty=Tensor[(3, 2, 12), int64] */;
  %1218 = %1216.0;
  (%1217, %1218)
}

def @func_9462(%var_9454: Tensor[(15, 12, 2), float64]) -> (Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(70, 6), float64], Tensor[(12), uint32], Tensor[(15, 12, 2), float32]) {
  %1219 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1220 = cast(meta[relay.Constant][50] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1221 = cast(meta[relay.Constant][50] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1222 = %1219.0;
  %1223 = cast(%1222, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %1224 = reshape(%1220, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %1225 = reshape(%1221, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %1226 = reshape(%1223, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1227 = @func_2408(%1224, %1225, %1226) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %1228 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %1229 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %1230 = cast(%var_9454, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1231 = shape_of(%1229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1232 = cast(%1229, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1233 = dyn.reshape(%1230, %1231, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1234 = %1227.2;
  %1235 = %1228.3;
  %1236 = floor_mod(%1232, %1233) /* ty=Tensor[(15, 12, 2), float32] */;
  (%1222, %1234, meta[relay.Constant][50] /* ty=Tensor[(70, 6), float64] */, %1235, %1236)
}

def @func_12528() -> Tensor[(16, 16, 3), bool] {
  %1237 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1237.1
}

def @func_11504() -> (Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) {
  %1238 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %1239 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1240 = @func_10321() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1241 = %1240.0;
  %1242 = cast(%1241, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %1243 = log10(%1242) /* ty=Tensor[(1, 3, 4), float64] */;
  %1244 = cast(%1243, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %1245 = %1238.1;
  %1246 = %1239.0;
  %1247 = cosh(%1244) /* ty=Tensor[(1, 3, 4), float64] */;
  (%1245, %1246, %1247)
}

def @func_9934() -> Tensor[(3, 4), uint32] {
  %1248 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %1248.0
}

def @func_15771() -> (Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) {
  %1249 = @func_15360() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(726), int16]) */;
  %1250 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 2), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
  %1251 = reshape(%1250, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1252 = @func_7220(%1251) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %1253 = %1249.0;
  %1254 = %1252.3;
  (%1253, %1254, meta[relay.Constant][51] /* ty=Tensor[(6, 2), uint32] */)
}

def @func_14568() -> Tensor[(252), bool] {
  %1255 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %1255.0
}

def @func_14439() -> (Tensor[(15, 12, 2), int32],) {
  %1256 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %1257 = %1256.0;
  (%1257,)
}

def @func_19843() -> (Tensor[(1, 3, 4), uint32],) {
  %1258 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
  %1259 = %1258.1;
  (%1259,)
}

def @func_11812() -> (Tensor[(1, 3, 4), float64],) {
  %1260 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1261 = %1260.2;
  (%1261,)
}

def @func_20340() -> (Tensor[(15, 12, 2), bool],) {
  %1262 = @func_20022() /* ty=Tensor[(15, 12, 2), bool] */;
  (%1262,)
}

def @func_16172(%var_16047: Tensor[(15, 12, 2), bool], %var_16067: Tensor[(21), float32], %var_16118: Tensor[(210, 2), float64]) -> (Tensor[(2, 14, 14), float32], Tensor[(15, 12, 2), bool], Tensor[(252), bool], Tensor[(21), float32], Tensor[(252), bool], Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), float64], Tensor[(210, 2), uint64], Tensor[(12, 4), int16], Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
  %1263 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
  %1264 = @func_14709() /* ty=Tensor[(15, 12, 2), bool] */;
  %1265 = cast(%var_16047, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %1266 = shape_of(%1264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1267 = cast(%1264, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %1268 = dyn.reshape(%1265, %1266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1269 = cast(%var_16067, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1270 = reshape(%1269, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %1271 = @func_7428(%1270) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %1272 = @func_8725() /* ty=(Tensor[(252), bool],) */;
  %1273 = @func_12318() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) */;
  %1274 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1275 = @func_12657() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) */;
  %1276 = %1275.4;
  %1277 = cast(%var_16118, dtype="int32") /* ty=Tensor[(210, 2), int32] */;
  %1278 = shape_of(%1276, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1279 = cast(%1276, dtype="int32") /* ty=Tensor[(210, 2), int32] */;
  %1280 = dyn.reshape(%1277, %1278, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1281 = right_shift(%1279, %1280) /* ty=Tensor[(210, 2), int32] */;
  %1282 = cast(%1281, dtype="uint64") /* ty=Tensor[(210, 2), uint64] */;
  %1283 = shape_of(%1276, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1284 = cast(%1276, dtype="uint64") /* ty=Tensor[(210, 2), uint64] */;
  %1285 = dyn.reshape(%1282, %1283, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %1286 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %1287 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1288 = %1263.3;
  %1289 = equal(%1267, %1268) /* ty=Tensor[(15, 12, 2), bool] */;
  %1290 = %1271.0;
  %1291 = %1272.0;
  %1292 = %1273.1;
  %1293 = %1274.0;
  %1294 = add(%1284, %1285) /* ty=Tensor[(210, 2), uint64] */;
  %1295 = @func_13638() /* ty=Tensor[(12, 4), int16] */;
  %1296 = %1286.0;
  %1297 = %1287.0;
  (%1288, %1289, %1290, %var_16067, %1291, %1292, %1293, %1294, %1295, %1296, %1297)
}

def @func_15707() -> Tensor[(1, 3, 4), uint32] {
  %1298 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1298.0
}

def @func_3552(%var_3541: Tensor[(3, 1, 7), float32]) -> (Tensor[(3, 1, 7), float32],) {
  %1299 = cast(%var_3541, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
  %1300 = log(%1299) /* ty=Tensor[(3, 1, 7), float32] */;
  (%1300,)
}

def @func_17939() -> Tensor[(252), bool] {
  %1301 = @func_8096() /* ty=(Tensor[(252), bool],) */;
  %1301.0
}

def @func_18302() -> (Tensor[(21), float32], Tensor[(726), int16]) {
  %1302 = @func_11618() /* ty=(Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) */;
  %1303 = @func_14132() /* ty=Tensor[(21), float32] */;
  %1304 = %1302.2;
  (%1303, %1304)
}

def @func_17899(%var_17850: Tensor[(726), int16]) -> (Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) {
  %1305 = @func_15360() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(726), int16]) */;
  %1306 = %1305.1;
  %1307 = cast(%var_17850, dtype="float32") /* ty=Tensor[(726), float32] */;
  %1308 = shape_of(%1306, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1309 = cast(%1306, dtype="float32") /* ty=Tensor[(726), float32] */;
  %1310 = dyn.reshape(%1307, %1308, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1311 = @func_12926() /* ty=(Tensor[(432), int16],) */;
  %1312 = mod(%1309, %1310) /* ty=Tensor[(726), float32] */;
  %1313 = @func_12588() /* ty=Tensor[(252), bool] */;
  %1314 = %1311.0;
  (%1312, %1313, %1314)
}

def @func_17044() -> (Tensor[(21), float32],) {
  %1315 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %1316 = %1315.0;
  (%1316,)
}

def @func_21572() -> Tensor[(726), int16] {
  %1317 = @func_20177() /* ty=(Tensor[(726), int16],) */;
  %1317.0
}

def @func_12940() -> Tensor[(1, 3, 4), uint32] {
  %1318 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
  %1318.1
}

def @func_8489(%var_8475: Tensor[(252), bool]) -> (Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %1319 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1320 = %1319.0;
  %1321 = cast(%1320, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1322 = acosh(%1321) /* ty=Tensor[(15, 12, 2), float32] */;
  %1323 = cast(%1320, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1324 = shape_of(%1322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1325 = cast(%1322, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1326 = dyn.reshape(%1323, %1324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1327 = cast(meta[relay.Constant][52] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
  %1328 = reshape(%1327, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
  %1329 = @func_7999(%1328) /* ty=(Tensor[(4, 11, 14), float32],) */;
  %1330 = cast(%var_8475, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1331 = reshape(%1330, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %1332 = @func_7569(%1331) /* ty=(Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) */;
  %1333 = mod(%1325, %1326) /* ty=Tensor[(15, 12, 2), float32] */;
  %1334 = %1329.0;
  %1335 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  %1336 = %1332.2;
  (%1333, %1334, meta[relay.Constant][52] /* ty=Tensor[(616, 1), float32] */, %1335, %1336, %var_8475)
}

def @func_18403(%var_18381: uint16, %var_18382: Tensor[(2, 15, 4), uint16]) -> Tensor[(2, 15, 4), uint16] {
  %1337 = cast(%var_18381, dtype="uint16") /* ty=uint16 */;
  %1338 = cast(%var_18382, dtype="uint16") /* ty=Tensor[(2, 15, 4), uint16] */;
  subtract(%1337, %1338) /* ty=Tensor[(2, 15, 4), uint16] */
}

def @func_9621() -> (Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
  %1339 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %1340 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %1341 = %1339.0;
  %1342 = %1340.1;
  (%1341, %1342)
}

def @func_11048() -> Tensor[(12, 4), int16] {
  %1343 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %1343.0
}

def @func_19783() -> Tensor[(21), float32] {
  @func_17666() /* ty=Tensor[(21), float32] */
}

def @func_10950() -> (Tensor[(12, 4), int16],) {
  %1344 = @func_9342() /* ty=(Tensor[(12, 4), int16],) */;
  %1345 = %1344.0;
  (%1345,)
}

def @func_19248() -> (Tensor[(12, 5, 7), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %1346 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 7), float64] */;
  %1347 = cast(meta[relay.Constant][54] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1348 = reshape(%1347, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %1349 = @func_8489(%1348) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) */;
  %1350 = acosh(%1346) /* ty=Tensor[(12, 5, 7), float64] */;
  %1351 = %1349.5;
  (%1350, %1351, meta[relay.Constant][54] /* ty=Tensor[(252), bool] */)
}

def @func_7931() -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) {
  %1352 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1353 = %1352.7;
  %1354 = cast(%1353, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %1355 = reshape(%1354, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %1356 = @func_7609(%1355) /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1357 = %1356.0;
  (%1353, %1357)
}

def @func_19994(%var_19951: Tensor[(11, 66), bool], %var_19969: Tensor[(392), float32], %var_19989: Tensor[(11, 66), int8]) -> (Tensor[(15, 12, 2), float64], Tensor[(11, 66), uint64], Tensor[(21), float32], Tensor[(21), float32], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(11, 66), float32]) {
  %1358 = @func_19205() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1359 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
  %1360 = %1359.0;
  %1361 = cast(%var_19951, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
  %1362 = shape_of(%1360, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1363 = cast(%1360, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
  %1364 = dyn.reshape(%1361, %1362, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %1365 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1366 = reshape(%1365, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %1367 = @func_9103(%1366) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) */;
  %1368 = cast(%var_19969, dtype="float32") /* ty=Tensor[(392), float32] */;
  %1369 = reshape(%1368, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
  %1370 = @func_5719(%1369) /* ty=(Tensor[(2, 14, 14), float32],) */;
  %1371 = cast(%var_19951, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
  %1372 = log10(%1371) /* ty=Tensor[(11, 66), float32] */;
  %1373 = cast(%1372, dtype="int8") /* ty=Tensor[(11, 66), int8] */;
  %1374 = shape_of(%1360, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1375 = cast(%1360, dtype="int8") /* ty=Tensor[(11, 66), int8] */;
  %1376 = dyn.reshape(%1373, %1374, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %1377 = subtract(%1375, %1376) /* ty=Tensor[(11, 66), int8] */;
  %1378 = cast(%var_19989, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
  %1379 = shape_of(%1377, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1380 = cast(%1377, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
  %1381 = dyn.reshape(%1378, %1379, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1382 = %1358.0;
  %1383 = minimum(%1363, %1364) /* ty=Tensor[(11, 66), uint64] */;
  %1384 = %1367.4;
  %1385 = %1370.0;
  %1386 = multiply(%1380, %1381) /* ty=Tensor[(11, 66), float32] */;
  (%1382, %1383, %1384, meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, %1385, %var_19969, %1386)
}

def @func_17090() -> (Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %1387 = @func_10321() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1388 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
  %1389 = %1387.0;
  (%1388, %1389)
}

def @func_12701() -> (Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) {
  %1390 = @func_9923() /* ty=(Tensor[(12, 4), int16],) */;
  %1391 = cast(meta[relay.Constant][58] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %1392 = reshape(%1391, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
  %1393 = @func_5719(%1392) /* ty=(Tensor[(2, 14, 14), float32],) */;
  %1394 = cast(meta[relay.Constant][56] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %1395 = cast(meta[relay.Constant][57] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1396 = reshape(%1394, newshape=[420, 1]) /* ty=Tensor[(420, 1), float64] */;
  %1397 = reshape(%1395, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1398 = @func_8332(%1396, %1397) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) */;
  %1399 = %1398.2;
  %1400 = cast(meta[relay.Constant][58] /* ty=Tensor[(392), float32] */, dtype="bool") /* ty=Tensor[(392), bool] */;
  %1401 = cast(%1399, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
  %1402 = %1390.0;
  %1403 = %1393.0;
  %1404 = logical_and(%1400, %1401) /* ty=Tensor[(420, 392), bool] */;
  (%1402, meta[relay.Constant][56] /* ty=Tensor[(420), float64] */, meta[relay.Constant][57] /* ty=Tensor[(12), uint32] */, %1403, %1404)
}

def @func_11261() -> (Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) {
  %1405 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %1406 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
  %1407 = %1405.1;
  %1408 = %1406.0;
  (%1407, %1408)
}

def @func_15880(%var_15845: Tensor[(6, 14, 12), int8]) -> (Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) {
  %1409 = cast(%var_15845, dtype="int8") /* ty=Tensor[(6, 14, 12), int8] */;
  %1410 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(6, 14, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1411 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 14, 12), int8] */, dtype="int8") /* ty=Tensor[(6, 14, 12), int8] */;
  %1412 = dyn.reshape(%1409, %1410, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1413 = @func_11820() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %1414 = @func_9310() /* ty=(Tensor[(432), int16],) */;
  %1415 = right_shift(%1411, %1412) /* ty=Tensor[(6, 14, 12), int8] */;
  %1416 = %1413.0;
  %1417 = %1414.0;
  (%1415, %1416, %1417)
}

def @func_9923() -> (Tensor[(12, 4), int16],) {
  %1418 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1419 = %1418.2;
  (%1419,)
}

def @func_12247() -> (Tensor[(16, 16, 3), bool],) {
  %1420 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1421 = %1420.1;
  (%1421,)
}

def @func_9762() -> Tensor[(1, 3, 4), uint32] {
  @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_828(%var_768: Tensor[(12, 13, 8), float64], %var_812: Tensor[(726), int16]) -> (Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) {
  %1422 = cast(%var_768, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %1423 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(12, 13, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1424 = cast(meta[relay.Constant][60] /* ty=Tensor[(12, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %1425 = dyn.reshape(%1422, %1423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1426 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1427 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1428 = reshape(%1426, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1429 = reshape(%1427, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1430 = @func_697(%1428, %1429) /* ty=Tensor[(11, 6, 11), int16] */;
  %1431 = cast(%1430, dtype="int8") /* ty=Tensor[(11, 6, 11), int8] */;
  %1432 = shape_of(%var_812, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1433 = cast(%var_812, dtype="int8") /* ty=Tensor[(726), int8] */;
  %1434 = dyn.reshape(%1431, %1432, newshape=[]) /* ty=Tensor[(?), int8] */;
  %1435 = cast(%1430, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
  %1436 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1437 = reshape(%1435, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1438 = reshape(%1436, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1439 = power(%1424, %1425) /* ty=Tensor[(12, 13, 8), float64] */;
  %1440 = bitwise_and(%1433, %1434) /* ty=Tensor[(726), int8] */;
  %1441 = @func_697(%1437, %1438) /* ty=Tensor[(11, 6, 11), int16] */;
  (%1439, %1440, %1441)
}

def @func_6751() -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) {
  %1442 = cast(meta[relay.Constant][61] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1443 = cast(meta[relay.Constant][61] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1444 = reshape(%1442, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1445 = reshape(%1443, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1446 = cast(meta[relay.Constant][62] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1447 = reshape(%1446, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %1448 = @func_3552(%1447) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %1449 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %1450 = @func_2190(%1444, %1445) /* ty=Tensor[(3, 6, 14), bool] */;
  %1451 = %1448.0;
  (%1449, %1450, meta[relay.Constant][61] /* ty=Tensor[(252), bool] */, %1451, meta[relay.Constant][62] /* ty=Tensor[(21), float32] */)
}

def @func_20177() -> (Tensor[(726), int16],) {
  %1452 = @func_19332() /* ty=(Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %1453 = %1452.2;
  (%1453,)
}

def @func_8762() -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) {
  %1454 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %1455 = cast(meta[relay.Constant][63] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %1456 = cast(meta[relay.Constant][64] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1457 = reshape(%1455, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
  %1458 = reshape(%1456, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1459 = @func_4048(%1457, %1458) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
  %1460 = %1454.0;
  %1461 = %1459.3;
  (%1460, %1461, meta[relay.Constant][63] /* ty=Tensor[(432), int16] */, meta[relay.Constant][64] /* ty=Tensor[(12), uint32] */)
}

def @func_15360() -> (Tensor[(11, 6, 11), float64], Tensor[(726), int16]) {
  %1462 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1463 = %1462.0;
  %1464 = cast(meta[relay.Constant][65] /* ty=Tensor[(11, 6, 11), int16] */, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
  %1465 = shape_of(%1463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1466 = cast(%1463, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
  %1467 = dyn.reshape(%1464, %1465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1468 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %1469 = power(%1466, %1467) /* ty=Tensor[(11, 6, 11), float64] */;
  %1470 = %1468.1;
  (%1469, %1470)
}

def @func_15776() -> (Tensor[(15, 12, 2), bool],) {
  %1471 = @func_14709() /* ty=Tensor[(15, 12, 2), bool] */;
  (%1471,)
}

def @func_17777() -> (Tensor[(1248), float64], Tensor[(15, 12, 2), int32]) {
  %1472 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1473 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %1474 = %1472.0;
  %1475 = %1473.0;
  (%1474, %1475)
}

def @func_11380(%var_11348: Tensor[(15, 12, 2), int32]) -> (Tensor[(15, 12, 2), float32], Tensor[(15, 12, 2), int32]) {
  %1476 = @func_9809() /* ty=Tensor[(15, 12, 2), int32] */;
  %1477 = cast(%var_11348, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1478 = shape_of(%1476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1479 = cast(%1476, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1480 = dyn.reshape(%1477, %1478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1481 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
  %1482 = floor_divide(%1479, %1480) /* ty=Tensor[(15, 12, 2), float32] */;
  %1483 = %1481.0;
  (%1482, %1483)
}

def @func_11939() -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
  %1484 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1485 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %1486 = %1484.7;
  %1487 = %1485.0;
  (%1486, %1487)
}

def @func_8928() -> (Tensor[(15, 12, 2), float64],) {
  %1488 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  (%1488,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8668() -> (Tensor[(726), int16],) {
  %2 = fn () -> (Tensor[(726), int16],) {
    %0 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %1 = %0.2;
    (%1,)
  };
  %2() /* ty=(Tensor[(726), int16],) */
}

def @func_20340() -> (Tensor[(15, 12, 2), bool],) {
  %3 = @func_20022() /* ty=Tensor[(15, 12, 2), bool] */;
  (%3,)
}

def @func_12318() -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) {
  %4 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %5 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
  %6 = %4.0;
  (%5, %6)
}

def @func_9363() -> (Tensor[(1, 3, 4), uint32],) {
  %9 = fn () -> (Tensor[(1, 3, 4), uint32],) {
    %7 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
    %8 = %7.1;
    (%8,)
  };
  %9() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_20526() -> (Tensor[(726), int16], Tensor[(15, 12, 2), bool], Tensor[(21), float32], Tensor[(12, 4), int16], Tensor[(8, 14, 11), float32], Tensor[(1232), float32], Tensor[(11, 66), float64]) {
  %35 = fn () -> (Tensor[(726), int16], Tensor[(15, 12, 2), bool], Tensor[(21), float32], Tensor[(12, 4), int16], Tensor[(8, 14, 11), float32], Tensor[(1232), float32], Tensor[(11, 66), float64]) {
    %10 = @func_16868() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
    %11 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %12 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
    %13 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
    %16 = reshape(%14, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
    %17 = reshape(%15, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
    %18 = @func_7539(%16, %17) /* ty=(Tensor[(8, 14, 11), float32],) */;
    %19 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
    %20 = %19.1;
    %21 = @func_18722() /* ty=(Tensor[(726), float32], Tensor[(726), bool]) */;
    %22 = %21.1;
    %23 = cast(%22, dtype="uint64") /* ty=Tensor[(726), uint64] */;
    %24 = shape_of(%20, dtype="int32") /* ty=Tensor[(2), int32] */;
    %25 = cast(%20, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %27 = add(%25, %26) /* ty=Tensor[(11, 66), uint64] */;
    %28 = cast(%27, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
    %29 = %10.1;
    %30 = %11.0;
    %31 = %12.2;
    %32 = %13.0;
    %33 = %18.0;
    %34 = tan(%28) /* ty=Tensor[(11, 66), float64] */;
    (%29, %30, %31, %32, %33, meta[relay.Constant][0] /* ty=Tensor[(1232), float32] */, %34)
  };
  %35() /* ty=(Tensor[(726), int16], Tensor[(15, 12, 2), bool], Tensor[(21), float32], Tensor[(12, 4), int16], Tensor[(8, 14, 11), float32], Tensor[(1232), float32], Tensor[(11, 66), float64]) */
}

def @func_15583(%var_15581: Tensor[(36), bool]) -> (Tensor[(12), uint32], Tensor[(2, 9, 2), bool], Tensor[(36), bool]) {
  @func_15580(%var_15581) /* ty=(Tensor[(12), uint32], Tensor[(2, 9, 2), bool], Tensor[(36), bool]) */
}

def @func_8002(%var_8000: Tensor[(4, 11, 14), float32]) -> (Tensor[(4, 11, 14), float32],) {
  @func_7999(%var_8000) /* ty=(Tensor[(4, 11, 14), float32],) */
}

def @func_19116(%var_19094: Tensor[(120), uint16]) -> (Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %36 = @func_12247() /* ty=(Tensor[(16, 16, 3), bool],) */;
  %37 = @func_18793() /* ty=(Tensor[(726), int16], Tensor[(21), float32]) */;
  %38 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %39 = cast(%var_19094, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %40 = reshape(%38, newshape=[]) /* ty=uint16 */;
  %41 = reshape(%39, newshape=[2, 15, 4]) /* ty=Tensor[(2, 15, 4), uint16] */;
  %42 = @func_17954() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %43 = @func_12399() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %44 = %36.0;
  %45 = %37.1;
  %46 = @func_18403(%40, %41) /* ty=Tensor[(2, 15, 4), uint16] */;
  %47 = %42.0;
  %48 = %43.0;
  (%44, %45, %46, meta[relay.Constant][1] /* ty=uint16 */, %var_19094, %47, %48)
}

def @func_13823() -> (Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) {
  %49 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %50 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %51 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %52 = %49.4;
  %53 = %50.0;
  %54 = %51.0;
  %55 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
  %56 = @func_9934() /* ty=Tensor[(3, 4), uint32] */;
  (%52, %53, %54, %55, %56)
}

def @func_17570() -> Tensor[(15, 12, 2), bool] {
  %58 = fn () -> Tensor[(15, 12, 2), bool] {
    %57 = @func_16406() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) */;
    %57.0
  };
  %58() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_10829() -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) {
  %63 = fn () -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) {
    %59 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
    %60 = @func_8865() /* ty=(Tensor[(726), int16],) */;
    %61 = %59.1;
    %62 = %60.0;
    (%61, %62)
  };
  %63() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) */
}

def @func_15173() -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  %64 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
  %65 = %64.2;
  %66 = @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%65, %66)
}

def @func_20292(%var_20290: Tensor[(252), bool]) -> (Tensor[(3, 4), uint32], Tensor[(726), int16], Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  @func_20289(%var_20290) /* ty=(Tensor[(3, 4), uint32], Tensor[(726), int16], Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) */
}

def @func_13378() -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) {
  @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */
}

def @func_17541() -> (Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) {
  %77 = fn () -> (Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) {
    %67 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
    %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(21, 1), float32] */, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
    %69 = reshape(%68, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
    %70 = @func_3552(%69) /* ty=(Tensor[(3, 1, 7), float32],) */;
    %71 = @func_14873() /* ty=(Tensor[(432), int16],) */;
    %72 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
    %73 = %67.4;
    %74 = %70.0;
    %75 = %71.0;
    %76 = %72.0;
    (%73, %74, meta[relay.Constant][2] /* ty=Tensor[(21, 1), float32] */, %75, %76)
  };
  %77() /* ty=(Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) */
}

def @func_16243(%var_16220: Tensor[(2, 14, 6), float32]) -> (Tensor[(2, 14, 6), int64],) {
  %78 = cast(%var_16220, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %79 = asin(%78) /* ty=Tensor[(2, 14, 6), float32] */;
  %80 = cast(%79, dtype="int64") /* ty=Tensor[(2, 14, 6), int64] */;
  %81 = shape_of(%var_16220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_16220, dtype="int64") /* ty=Tensor[(2, 14, 6), int64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %84 = subtract(%82, %83) /* ty=Tensor[(2, 14, 6), int64] */;
  (%84,)
}

def @func_20896() -> (Tensor[(15, 12, 2), int32], Tensor[(252), bool], Tensor[(12, 4), int16]) {
  %90 = fn () -> (Tensor[(15, 12, 2), int32], Tensor[(252), bool], Tensor[(12, 4), int16]) {
    %85 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
    %86 = @func_13026() /* ty=(Tensor[(252), bool],) */;
    %87 = %85.0;
    %88 = %86.0;
    %89 = @func_11048() /* ty=Tensor[(12, 4), int16] */;
    (%87, %88, %89)
  };
  %90() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(252), bool], Tensor[(12, 4), int16]) */
}

def @func_8648() -> (Tensor[(252), bool], Tensor[(15, 12, 2), int32]) {
  @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */
}

def @func_19379() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(120), uint16]) {
  @func_19377() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(120), uint16]) */
}

def @func_12589() -> Tensor[(252), bool] {
  %92 = fn () -> Tensor[(252), bool] {
    %91 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
    %91.2
  };
  %92() /* ty=Tensor[(252), bool] */
}

def @func_17480(%var_17449: Tensor[(126, 2), bool]) -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float32], Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(126, 2), bool], Tensor[(726), int16]) {
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(126, 2), bool] */, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %94 = reshape(%93, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %95 = @func_8489(%94) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) */;
  %96 = @func_10828() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) */;
  %97 = cast(%var_17449, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %98 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(126, 2), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(126, 2), bool] */, dtype="bool") /* ty=Tensor[(126, 2), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %101 = @func_14867() /* ty=(Tensor[(252), bool], Tensor[(726), int16]) */;
  %102 = @func_16701() /* ty=Tensor[(12, 4), int16] */;
  %103 = %95.0;
  %104 = %96.1;
  %105 = @func_16459() /* ty=Tensor[(1, 3, 4), uint32] */;
  %106 = logical_and(%99, %100) /* ty=Tensor[(126, 2), bool] */;
  %107 = %101.1;
  (%102, %103, %104, %105, %106, %107)
}

def @func_11822() -> (Tensor[(1, 3, 4), float64],) {
  @func_11820() /* ty=(Tensor[(1, 3, 4), float64],) */
}

def @func_5259(%var_5257: int64, %var_5258: Tensor[(4, 15, 2), int64]) -> Tensor[(4, 15, 2), int64] {
  @func_5255(%var_5257, %var_5258) /* ty=Tensor[(4, 15, 2), int64] */
}

def @func_6863() -> (Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */
}

def @func_15773() -> (Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) {
  @func_15771() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) */
}

def @func_8970() -> (Tensor[(252), bool],) {
  %108 = @func_8725() /* ty=(Tensor[(252), bool],) */;
  %109 = %108.0;
  (%109,)
}

def @func_21515(%var_21513: Tensor[(16, 15, 14), float64], %var_21514: Tensor[(1008), int8]) -> (Tensor[(16, 15, 14), float64], Tensor[(36), bool], Tensor[(16, 15, 14), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
  %123 = fn (%var_21470: Tensor[(16, 15, 14), float64], %var_21483: Tensor[(1008), int8]) -> (Tensor[(16, 15, 14), float64], Tensor[(36), bool], Tensor[(16, 15, 14), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
    %110 = cast(%var_21470, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %111 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 15, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %114 = @func_19473() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) */;
    %115 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %116 = cast(%var_21483, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %117 = reshape(%116, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), int8] */;
    %118 = @func_15880(%117) /* ty=(Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) */;
    %119 = floor_divide(%112, %113) /* ty=Tensor[(16, 15, 14), float64] */;
    %120 = %114.2;
    %121 = sqrt(%115) /* ty=Tensor[(16, 15, 14), float64] */;
    %122 = %118.2;
    (%119, %120, %121, %122, %var_21483)
  };
  %123(%var_21513, %var_21514) /* ty=(Tensor[(16, 15, 14), float64], Tensor[(36), bool], Tensor[(16, 15, 14), float64], Tensor[(432), int16], Tensor[(1008), int8]) */
}

def @func_15796() -> Tensor[(252), bool] {
  @func_15794() /* ty=Tensor[(252), bool] */
}

def @func_12942() -> Tensor[(1, 3, 4), uint32] {
  @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_9810() -> Tensor[(15, 12, 2), int32] {
  %125 = fn () -> Tensor[(15, 12, 2), int32] {
    %124 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
    %124.0
  };
  %125() /* ty=Tensor[(15, 12, 2), int32] */
}

def @func_14570() -> Tensor[(252), bool] {
  @func_14568() /* ty=Tensor[(252), bool] */
}

def @func_15738(%var_15736: Tensor[(14, 3, 4), uint32]) -> (Tensor[(14, 3, 4), uint16],) {
  @func_15735(%var_15736) /* ty=(Tensor[(14, 3, 4), uint16],) */
}

def @func_2413(%var_2410: Tensor[(6, 10, 7), float64], %var_2411: Tensor[(6, 10, 7), float64], %var_2412: Tensor[(12), uint32]) -> (Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) {
  @func_2408(%var_2410, %var_2411, %var_2412) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */
}

def @func_7999(%var_7981: Tensor[(4, 11, 14), float32]) -> (Tensor[(4, 11, 14), float32],) {
  %126 = cast(%var_7981, dtype="float32") /* ty=Tensor[(4, 11, 14), float32] */;
  %127 = log2(%126) /* ty=Tensor[(4, 11, 14), float32] */;
  (%127,)
}

def @func_9103(%var_9073: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) {
  %128 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %129 = cast(%var_9073, dtype="float32") /* ty=Tensor[(21), float32] */;
  %130 = reshape(%129, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %131 = @func_7428(%130) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %132 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %133 = %131.1;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
  %135 = reshape(%134, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %136 = @func_3552(%135) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %137 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  %138 = %128.1;
  %139 = %132.0;
  %140 = %136.0;
  (%137, %138, %133, %var_9073, %139, %140)
}

def @func_19595() -> (Tensor[(1, 3, 4), uint32],) {
  %143 = fn () -> (Tensor[(1, 3, 4), uint32],) {
    %141 = @func_19170() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) */;
    %142 = %141.0;
    (%142,)
  };
  %143() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_7611(%var_7610: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), bool],) {
  %150 = fn (%var_7597: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), bool],) {
    %144 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
    %145 = cast(%var_7597, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
    %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%144, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %149 = less_equal(%147, %148) /* ty=Tensor[(15, 12, 2), bool] */;
    (%149,)
  };
  %150(%var_7610) /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_17091() -> (Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %154 = fn () -> (Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
    %151 = @func_10321() /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %152 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
    %153 = %151.0;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) */
}

def @func_18276() -> (Tensor[(12, 4), int16],) {
  %157 = fn () -> (Tensor[(12, 4), int16],) {
    %155 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
    %156 = %155.3;
    (%156,)
  };
  %157() /* ty=(Tensor[(12, 4), int16],) */
}

def @func_18403(%var_18381: uint16, %var_18382: Tensor[(2, 15, 4), uint16]) -> Tensor[(2, 15, 4), uint16] {
  %158 = cast(%var_18381, dtype="uint16") /* ty=uint16 */;
  %159 = cast(%var_18382, dtype="uint16") /* ty=Tensor[(2, 15, 4), uint16] */;
  subtract(%158, %159) /* ty=Tensor[(2, 15, 4), uint16] */
}

def @func_6913() -> (Tensor[(15, 12, 2), float64],) {
  %162 = fn () -> (Tensor[(15, 12, 2), float64],) {
    %160 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
    %161 = %160.0;
    (%161,)
  };
  %162() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_7126() -> (Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) {
  %190 = fn () -> (Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) {
    %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %165 = reshape(%163, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
    %166 = reshape(%164, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
    %167 = @func_940(%165, %166) /* ty=(Tensor[(3, 16, 9), int16],) */;
    %168 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4), uint32] */;
    %169 = reshape(%168, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
    %170 = @func_2228(%169) /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
    %173 = reshape(%171, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), float64] */;
    %174 = reshape(%172, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %175 = @func_828(%173, %174) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) */;
    %176 = %175.1;
    %177 = cast(%176, dtype="float32") /* ty=Tensor[(726), float32] */;
    %178 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
    %179 = %178.0;
    %180 = cast(%179, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
    %181 = atan(%180) /* ty=Tensor[(15, 12, 2), float32] */;
    %182 = cast(%181, dtype="int32") /* ty=Tensor[(15, 12, 2), int32] */;
    %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%179, dtype="int32") /* ty=Tensor[(15, 12, 2), int32] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %186 = %167.0;
    %187 = %170.0;
    %188 = atan(%177) /* ty=Tensor[(726), float32] */;
    %189 = left_shift(%184, %185) /* ty=Tensor[(15, 12, 2), int32] */;
    (meta[relay.Constant][5] /* ty=Tensor[(1248), float64] */, meta[relay.Constant][6] /* ty=Tensor[(726), int16] */, %186, meta[relay.Constant][7] /* ty=Tensor[(432), int16] */, %187, meta[relay.Constant][8] /* ty=Tensor[(3, 4), uint32] */, %188, %189)
  };
  %190() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */
}

def @func_6753() -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) {
  @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */
}

def @func_12400() -> (Tensor[(1, 3, 4), uint32],) {
  %193 = fn () -> (Tensor[(1, 3, 4), uint32],) {
    %191 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %192 = %191.0;
    (%192,)
  };
  %193() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_11261() -> (Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) {
  %194 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %195 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
  %196 = %194.1;
  %197 = %195.0;
  (%196, %197)
}

def @func_18561() -> (Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) {
  %198 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
  %199 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %200 = @func_14504() /* ty=(Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) */;
  %201 = %198.0;
  %202 = %199.0;
  %203 = %200.0;
  (%201, %202, %203)
}

def @func_18756(%var_18754: Tensor[(4, 13, 8), float32]) -> (Tensor[(4, 13, 8), float32], Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
  @func_18753(%var_18754) /* ty=(Tensor[(4, 13, 8), float32], Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) */
}

def @func_19071() -> (Tensor[(15, 12, 2), int32],) {
  %206 = fn () -> (Tensor[(15, 12, 2), int32],) {
    %204 = @func_14373() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) */;
    %205 = %204.2;
    (%205,)
  };
  %206() /* ty=(Tensor[(15, 12, 2), int32],) */
}

def @func_4048(%var_4006: Tensor[(36, 12), int16], %var_4023: Tensor[(12), uint32]) -> (Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) {
  %207 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %209 = cast(%var_4006, dtype="int16") /* ty=Tensor[(36, 12), int16] */;
  %210 = cast(%var_4006, dtype="int16") /* ty=Tensor[(36, 12), int16] */;
  %211 = reshape(%209, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %212 = reshape(%210, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %213 = @func_940(%211, %212) /* ty=(Tensor[(3, 16, 9), int16],) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(3, 16, 9), float64] */;
  %216 = cast(%var_4023, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %217 = reshape(%216, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %218 = @func_2228(%217) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %219 = logical_xor(%207, %208) /* ty=Tensor[(4, 11, 8), uint16] */;
  %220 = asin(%215) /* ty=Tensor[(3, 16, 9), float64] */;
  %221 = %218.0;
  (%219, %var_4006, %220, %221, %var_4023)
}

def @func_10265(%var_10258: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(21), float32], Tensor[(21), float32], Tensor[(432), int16]) {
  %222 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %223 = cast(%var_10258, dtype="float32") /* ty=Tensor[(21), float32] */;
  %224 = reshape(%223, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %225 = @func_9103(%224) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) */;
  %226 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %227 = %222.0;
  %228 = %225.3;
  %229 = %226.0;
  (%227, %228, %var_10258, %229)
}

def @func_14162() -> (Tensor[(15, 12, 2), bool],) {
  %230 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %231 = %230.0;
  (%231,)
}

def @func_9840() -> (Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) {
  %232 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %234 = reshape(%233, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %235 = @func_7428(%234) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %236 = %232.0;
  %237 = %235.2;
  (%236, %237, meta[relay.Constant][11] /* ty=Tensor[(21), float32] */)
}

def @func_940(%var_934: Tensor[(3, 16, 9), int16], %var_935: Tensor[(3, 16, 9), int16]) -> (Tensor[(3, 16, 9), int16],) {
  %238 = cast(%var_935, dtype="int16") /* ty=Tensor[(3, 16, 9), int16] */;
  %239 = shape_of(%var_934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_934, dtype="int16") /* ty=Tensor[(3, 16, 9), int16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %242 = right_shift(%240, %241) /* ty=Tensor[(3, 16, 9), int16] */;
  (%242,)
}

def @func_6797() -> (Tensor[(252), bool],) {
  %243 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %244 = %243.2;
  (%244,)
}

def @func_10108(%var_10107: Tensor[(726), int16]) -> (Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) {
  %256 = fn (%var_10087: Tensor[(726), int16]) -> (Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) {
    %245 = @func_8667() /* ty=(Tensor[(726), int16],) */;
    %246 = %245.0;
    %247 = cast(%var_10087, dtype="bool") /* ty=Tensor[(726), bool] */;
    %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(1), int32] */;
    %249 = cast(%246, dtype="bool") /* ty=Tensor[(726), bool] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?), bool] */;
    %251 = cast(%var_10087, dtype="int16") /* ty=Tensor[(726), int16] */;
    %252 = reshape(%251, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %253 = @func_7309(%252) /* ty=(Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) */;
    %254 = equal(%249, %250) /* ty=Tensor[(726), bool] */;
    %255 = %253.2;
    (%254, %255)
  };
  %256(%var_10107) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */
}

def @func_20342() -> (Tensor[(15, 12, 2), bool],) {
  @func_20340() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_15625() -> (Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  @func_15623() /* ty=(Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) */
}

def @func_16361() -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) {
  %265 = fn () -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) {
    %257 = @func_14439() /* ty=(Tensor[(15, 12, 2), int32],) */;
    %258 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %259 = reshape(%258, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), int16] */;
    %260 = @func_14318() /* ty=(Tensor[(21), float32],) */;
    %261 = @func_15217() /* ty=Tensor[(1, 3, 4), uint32] */;
    %262 = %257.0;
    %263 = @func_7462(%259) /* ty=Tensor[(16, 16, 3), bool] */;
    %264 = %260.0;
    (%261, %262, %263, meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, %264)
  };
  %265() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) */
}

def @func_16176(%var_16173: Tensor[(15, 12, 2), bool], %var_16174: Tensor[(21), float32], %var_16175: Tensor[(210, 2), float64]) -> (Tensor[(2, 14, 14), float32], Tensor[(15, 12, 2), bool], Tensor[(252), bool], Tensor[(21), float32], Tensor[(252), bool], Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), float64], Tensor[(210, 2), uint64], Tensor[(12, 4), int16], Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
  %301 = fn (%var_16047: Tensor[(15, 12, 2), bool], %var_16067: Tensor[(21), float32], %var_16118: Tensor[(210, 2), float64]) -> (Tensor[(2, 14, 14), float32], Tensor[(15, 12, 2), bool], Tensor[(252), bool], Tensor[(21), float32], Tensor[(252), bool], Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), float64], Tensor[(210, 2), uint64], Tensor[(12, 4), int16], Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
    %266 = @func_12701() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */;
    %267 = @func_14709() /* ty=Tensor[(15, 12, 2), bool] */;
    %268 = cast(%var_16047, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
    %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%267, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %272 = cast(%var_16067, dtype="float32") /* ty=Tensor[(21), float32] */;
    %273 = reshape(%272, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %274 = @func_7428(%273) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
    %275 = @func_8725() /* ty=(Tensor[(252), bool],) */;
    %276 = @func_12318() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) */;
    %277 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %278 = @func_12657() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) */;
    %279 = %278.4;
    %280 = cast(%var_16118, dtype="int32") /* ty=Tensor[(210, 2), int32] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(2), int32] */;
    %282 = cast(%279, dtype="int32") /* ty=Tensor[(210, 2), int32] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %284 = right_shift(%282, %283) /* ty=Tensor[(210, 2), int32] */;
    %285 = cast(%284, dtype="uint64") /* ty=Tensor[(210, 2), uint64] */;
    %286 = shape_of(%279, dtype="int32") /* ty=Tensor[(2), int32] */;
    %287 = cast(%279, dtype="uint64") /* ty=Tensor[(210, 2), uint64] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %289 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
    %290 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %291 = %266.3;
    %292 = equal(%270, %271) /* ty=Tensor[(15, 12, 2), bool] */;
    %293 = %274.0;
    %294 = %275.0;
    %295 = %276.1;
    %296 = %277.0;
    %297 = add(%287, %288) /* ty=Tensor[(210, 2), uint64] */;
    %298 = @func_13638() /* ty=Tensor[(12, 4), int16] */;
    %299 = %289.0;
    %300 = %290.0;
    (%291, %292, %293, %var_16067, %294, %295, %296, %297, %298, %299, %300)
  };
  %301(%var_16173, %var_16174, %var_16175) /* ty=(Tensor[(2, 14, 14), float32], Tensor[(15, 12, 2), bool], Tensor[(252), bool], Tensor[(21), float32], Tensor[(252), bool], Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), float64], Tensor[(210, 2), uint64], Tensor[(12, 4), int16], Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */
}

def @func_19170() -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) {
  %302 = @func_15623() /* ty=(Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) */;
  %303 = @func_14162() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %304 = %302.1;
  %305 = %303.0;
  (%304, %305)
}

def @func_12978(%var_12976: Tensor[(392), float32]) -> (Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) {
  @func_12975(%var_12976) /* ty=(Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) */
}

def @func_2193(%var_2191: Tensor[(3, 6, 14), bool], %var_2192: Tensor[(3, 6, 14), bool]) -> Tensor[(3, 6, 14), bool] {
  %310 = fn (%var_2179: Tensor[(3, 6, 14), bool], %var_2180: Tensor[(3, 6, 14), bool]) -> Tensor[(3, 6, 14), bool] {
    %306 = cast(%var_2180, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
    %307 = shape_of(%var_2179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%var_2179, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%308, %309) /* ty=Tensor[(3, 6, 14), bool] */
  };
  %310(%var_2191, %var_2192) /* ty=Tensor[(3, 6, 14), bool] */
}

def @func_12455() -> (Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) {
  %311 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %312 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %313 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %316 = reshape(%315, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %317 = @func_7667(%316) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %318 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
  %319 = %311.0;
  %320 = %312.0;
  %321 = %317.0;
  %322 = %318.1;
  (%319, %320, %314, %321, %322)
}

def @func_828(%var_768: Tensor[(12, 13, 8), float64], %var_812: Tensor[(726), int16]) -> (Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) {
  %323 = cast(%var_768, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %324 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(12, 13, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %327 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %328 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %329 = reshape(%327, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %330 = reshape(%328, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %331 = @func_697(%329, %330) /* ty=Tensor[(11, 6, 11), int16] */;
  %332 = cast(%331, dtype="int8") /* ty=Tensor[(11, 6, 11), int8] */;
  %333 = shape_of(%var_812, dtype="int32") /* ty=Tensor[(1), int32] */;
  %334 = cast(%var_812, dtype="int8") /* ty=Tensor[(726), int8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?), int8] */;
  %336 = cast(%331, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
  %337 = cast(%var_812, dtype="int16") /* ty=Tensor[(726), int16] */;
  %338 = reshape(%336, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %339 = reshape(%337, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %340 = power(%325, %326) /* ty=Tensor[(12, 13, 8), float64] */;
  %341 = bitwise_and(%334, %335) /* ty=Tensor[(726), int8] */;
  %342 = @func_697(%338, %339) /* ty=Tensor[(11, 6, 11), int16] */;
  (%340, %341, %342)
}

def @func_15735(%var_15726: Tensor[(14, 3, 4), uint32]) -> (Tensor[(14, 3, 4), uint16],) {
  %343 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %344 = %343.1;
  %345 = cast(%344, dtype="uint16") /* ty=Tensor[(1, 3, 4), uint16] */;
  %346 = cast(%var_15726, dtype="uint16") /* ty=Tensor[(14, 3, 4), uint16] */;
  %347 = subtract(%345, %346) /* ty=Tensor[(14, 3, 4), uint16] */;
  (%347,)
}

def @func_18809() -> (Tensor[(15, 12, 2), bool],) {
  @func_18807() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_9788() -> (Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) {
  %351 = fn () -> (Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) {
    %348 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %349 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
    %350 = %348.1;
    (%349, %350)
  };
  %351() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */
}

def @func_15987(%var_15986: Tensor[(15, 12, 2), float64]) -> (Tensor[(16, 16, 3), bool], Tensor[(15, 12, 2), uint64], Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %363 = fn (%var_15962: Tensor[(15, 12, 2), float64]) -> (Tensor[(16, 16, 3), bool], Tensor[(15, 12, 2), uint64], Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
    %352 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %353 = %352.0;
    %354 = cast(%var_15962, dtype="uint64") /* ty=Tensor[(15, 12, 2), uint64] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%353, dtype="uint64") /* ty=Tensor[(15, 12, 2), uint64] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %358 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
    %359 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
    %360 = right_shift(%356, %357) /* ty=Tensor[(15, 12, 2), uint64] */;
    %361 = %358.0;
    %362 = @func_15707() /* ty=Tensor[(1, 3, 4), uint32] */;
    (%359, %360, %361, %362)
  };
  %363(%var_15986) /* ty=(Tensor[(16, 16, 3), bool], Tensor[(15, 12, 2), uint64], Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) */
}

def @func_9819() -> Tensor[(15, 12, 2), float64] {
  %365 = fn () -> Tensor[(15, 12, 2), float64] {
    %364 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %364.0
  };
  %365() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_20309() -> Tensor[(1, 3, 4), uint32] {
  %366 = fn () -> Tensor[(1, 3, 4), uint32] {
    @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */
  };
  %366() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_13872() -> (Tensor[(15, 12, 2), float64],) {
  %367 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
  %368 = %367.2;
  (%368,)
}

def @func_12164() -> (Tensor[(11, 6, 11), int16],) {
  %371 = fn () -> (Tensor[(11, 6, 11), int16],) {
    %369 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
    %370 = %369.1;
    (%370,)
  };
  %371() /* ty=(Tensor[(11, 6, 11), int16],) */
}

def @func_14711() -> Tensor[(15, 12, 2), bool] {
  @func_14709() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_8726() -> (Tensor[(252), bool],) {
  %374 = fn () -> (Tensor[(252), bool],) {
    %372 = @func_8096() /* ty=(Tensor[(252), bool],) */;
    %373 = %372.0;
    (%373,)
  };
  %374() /* ty=(Tensor[(252), bool],) */
}

def @func_11813() -> (Tensor[(1, 3, 4), float64],) {
  %377 = fn () -> (Tensor[(1, 3, 4), float64],) {
    %375 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
    %376 = %375.2;
    (%376,)
  };
  %377() /* ty=(Tensor[(1, 3, 4), float64],) */
}

def @func_15655(%var_15654: Tensor[(392), float32]) -> (Tensor[(21), float32], Tensor[(392), float32], Tensor[(2, 14, 14), float32], Tensor[(1, 3, 4), float64]) {
  %387 = fn (%var_15629: Tensor[(392), float32]) -> (Tensor[(21), float32], Tensor[(392), float32], Tensor[(2, 14, 14), float32], Tensor[(1, 3, 4), float64]) {
    %378 = cast(%var_15629, dtype="float32") /* ty=Tensor[(392), float32] */;
    %379 = reshape(%378, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
    %380 = @func_5719(%379) /* ty=(Tensor[(2, 14, 14), float32],) */;
    %381 = %380.0;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
    %383 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
    %384 = @func_14132() /* ty=Tensor[(21), float32] */;
    %385 = exp(%382) /* ty=Tensor[(2, 14, 14), float32] */;
    %386 = %383.0;
    (%384, %var_15629, %385, %386)
  };
  %387(%var_15654) /* ty=(Tensor[(21), float32], Tensor[(392), float32], Tensor[(2, 14, 14), float32], Tensor[(1, 3, 4), float64]) */
}

def @func_10182(%var_10180: Tensor[(616), float32], %var_10181: Tensor[(12), uint32]) -> (Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) {
  %406 = fn (%var_10143: Tensor[(616), float32], %var_10154: Tensor[(12), uint32]) -> (Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) {
    %388 = @func_8216() /* ty=(Tensor[(21), float32],) */;
    %389 = cast(%var_10143, dtype="float32") /* ty=Tensor[(616), float32] */;
    %390 = reshape(%389, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
    %391 = @func_7999(%390) /* ty=(Tensor[(4, 11, 14), float32],) */;
    %392 = @func_8970() /* ty=(Tensor[(252), bool],) */;
    %393 = cast(%var_10154, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %394 = reshape(%393, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
    %395 = @func_2228(%394) /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %396 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
    %397 = %395.0;
    %398 = cast(%397, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
    %399 = reshape(%398, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %400 = @func_7667(%399) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
    %401 = %388.0;
    %402 = %391.0;
    %403 = %392.0;
    %404 = %396.0;
    %405 = %400.1;
    (%401, %402, %var_10143, %403, %397, %var_10154, %404, %405)
  };
  %406(%var_10180, %var_10181) /* ty=(Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) */
}

def @func_8217() -> (Tensor[(21), float32],) {
  %409 = fn () -> (Tensor[(21), float32],) {
    %407 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
    %408 = %407.4;
    (%408,)
  };
  %409() /* ty=(Tensor[(21), float32],) */
}

def @func_9268() -> (Tensor[(12, 4, 5), float32],) {
  %412 = fn () -> (Tensor[(12, 4, 5), float32],) {
    %410 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
    %411 = sqrt(%410) /* ty=Tensor[(12, 4, 5), float32] */;
    (%411,)
  };
  %412() /* ty=(Tensor[(12, 4, 5), float32],) */
}

def @func_17129() -> (Tensor[(726), float32],) {
  %413 = @func_6964() /* ty=Tensor[(726), int16] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(726), float32] */;
  %415 = erf(%414) /* ty=Tensor[(726), float32] */;
  (%415,)
}

def @func_20022() -> Tensor[(15, 12, 2), bool] {
  @func_17569() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_19904(%var_19901: Tensor[(15, 9, 15), float32]) -> (Tensor[(15, 9, 15), float32],) {
  %416 = cast(%var_19901, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %417 = atanh(%416) /* ty=Tensor[(15, 9, 15), float32] */;
  (%417,)
}

def @func_8067(%var_8065: Tensor[(726), int16]) -> (Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  @func_8064(%var_8065) /* ty=(Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */
}

def @func_19785() -> Tensor[(21), float32] {
  @func_19783() /* ty=Tensor[(21), float32] */
}

def @func_12859() -> (Tensor[(12), uint32],) {
  @func_12857() /* ty=(Tensor[(12), uint32],) */
}

def @func_10996(%var_10995: Tensor[(726), float32]) -> (Tensor[(252), bool], Tensor[(726), float32], Tensor[(726), float32], Tensor[(8, 12, 13), float64]) {
  %433 = fn (%var_10981: Tensor[(726), float32]) -> (Tensor[(252), bool], Tensor[(726), float32], Tensor[(726), float32], Tensor[(8, 12, 13), float64]) {
    %418 = @func_6797() /* ty=(Tensor[(252), bool],) */;
    %419 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
    %420 = %419.1;
    %421 = cast(%var_10981, dtype="float32") /* ty=Tensor[(726), float32] */;
    %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(1), int32] */;
    %423 = cast(%420, dtype="float32") /* ty=Tensor[(726), float32] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?), float32] */;
    %425 = cast(%420, dtype="float32") /* ty=Tensor[(726), float32] */;
    %426 = divide(%423, %424) /* ty=Tensor[(726), float32] */;
    %427 = cast(%426, dtype="int16") /* ty=Tensor[(726), int16] */;
    %428 = reshape(%427, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
    %429 = @func_1245(%428) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
    %430 = %418.0;
    %431 = cosh(%425) /* ty=Tensor[(726), float32] */;
    %432 = %429.1;
    (%430, %426, %431, %432)
  };
  %433(%var_10995) /* ty=(Tensor[(252), bool], Tensor[(726), float32], Tensor[(726), float32], Tensor[(8, 12, 13), float64]) */
}

def @func_16615(%var_16540: Tensor[(12, 4, 5), float32], %var_16605: Tensor[(12, 4, 5), float32]) -> (Tensor[(3, 4), uint32], Tensor[(12, 4, 5), uint64], Tensor[(12, 4, 5), int32], Tensor[(11, 66), int16], Tensor[(252), bool], Tensor[(21), float32], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), uint16], Tensor[(48), int16]) {
  %434 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
  %435 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
  %436 = %435.1;
  %437 = cast(%var_16540, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %441 = mod(%439, %440) /* ty=Tensor[(12, 4, 5), float32] */;
  %442 = cast(%436, dtype="uint64") /* ty=Tensor[(12, 4, 5), uint64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint64") /* ty=Tensor[(12, 4, 5), uint64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %446 = cast(%436, dtype="int32") /* ty=Tensor[(12, 4, 5), int32] */;
  %447 = shape_of(%var_16540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_16540, dtype="int32") /* ty=Tensor[(12, 4, 5), int32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %450 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %451 = cast(meta[relay.Constant][15] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %452 = reshape(%451, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %453 = @func_7428(%452) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %454 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %455 = cast(%var_16605, dtype="uint16") /* ty=Tensor[(12, 4, 5), uint16] */;
  %456 = shape_of(%var_16540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_16540, dtype="uint16") /* ty=Tensor[(12, 4, 5), uint16] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %459 = @func_16360() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) */;
  %460 = %434.4;
  %461 = multiply(%444, %445) /* ty=Tensor[(12, 4, 5), uint64] */;
  %462 = subtract(%448, %449) /* ty=Tensor[(12, 4, 5), int32] */;
  %463 = %450.1;
  %464 = %453.0;
  %465 = %454.0;
  %466 = minimum(%457, %458) /* ty=Tensor[(12, 4, 5), uint16] */;
  %467 = %459.3;
  (%460, %461, %462, %463, %464, meta[relay.Constant][15] /* ty=Tensor[(21), float32] */, %465, %466, %467)
}

def @func_7539(%var_7530: Tensor[(8, 14, 11), float32], %var_7531: Tensor[(8, 14, 11), float32]) -> (Tensor[(8, 14, 11), float32],) {
  %468 = cast(%var_7531, dtype="float32") /* ty=Tensor[(8, 14, 11), float32] */;
  %469 = shape_of(%var_7530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_7530, dtype="float32") /* ty=Tensor[(8, 14, 11), float32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %472 = mod(%470, %471) /* ty=Tensor[(8, 14, 11), float32] */;
  (%472,)
}

def @func_17304(%var_17289: Tensor[(726), int16]) -> (Tensor[(1, 3, 4), uint32], Tensor[(4, 11, 8), uint16], Tensor[(726), int16], Tensor[(1, 3, 4), uint32]) {
  %473 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %474 = cast(%var_17289, dtype="int16") /* ty=Tensor[(726), int16] */;
  %475 = reshape(%474, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %476 = @func_10106(%475) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
  %477 = %473.0;
  %478 = cast(%477, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %479 = reshape(%478, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %480 = @func_2228(%479) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %481 = %476.1;
  %482 = %480.0;
  (%477, %481, %var_17289, %482)
}

def @func_12928() -> (Tensor[(432), int16],) {
  @func_12926() /* ty=(Tensor[(432), int16],) */
}

def @func_12457() -> (Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) {
  @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */
}

def @func_18377() -> (Tensor[(726), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32], Tensor[(252), bool], Tensor[(14, 3, 4), uint16]) {
  @func_18375() /* ty=(Tensor[(726), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32], Tensor[(252), bool], Tensor[(14, 3, 4), uint16]) */
}

def @func_17590() -> (Tensor[(16, 16, 3), bool],) {
  %490 = fn () -> (Tensor[(16, 16, 3), bool],) {
    %483 = @func_16360() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), int32], Tensor[(16, 16, 3), bool], Tensor[(48), int16], Tensor[(21), float32]) */;
    %484 = %483.2;
    %485 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
    %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %487 = cast(%484, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %489 = less_equal(%487, %488) /* ty=Tensor[(16, 16, 3), bool] */;
    (%489,)
  };
  %490() /* ty=(Tensor[(16, 16, 3), bool],) */
}

def @func_14373() -> (Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) {
  %491 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %492 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %493 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %494 = %491.0;
  %495 = %492.0;
  %496 = %493.0;
  (%494, %495, %496)
}

def @func_700(%var_698: Tensor[(11, 6, 11), int16], %var_699: Tensor[(11, 6, 11), int16]) -> Tensor[(11, 6, 11), int16] {
  %501 = fn (%var_687: Tensor[(11, 6, 11), int16], %var_688: Tensor[(11, 6, 11), int16]) -> Tensor[(11, 6, 11), int16] {
    %497 = cast(%var_688, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
    %498 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%var_687, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    right_shift(%499, %500) /* ty=Tensor[(11, 6, 11), int16] */
  };
  %501(%var_698, %var_699) /* ty=Tensor[(11, 6, 11), int16] */
}

def @func_7179() -> (Tensor[(726), int16], Tensor[(726), float32]) {
  %505 = fn () -> (Tensor[(726), int16], Tensor[(726), float32]) {
    %502 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
    %503 = @func_6964() /* ty=Tensor[(726), int16] */;
    %504 = %502.6;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */
}

def @main(%var_21608: Tensor[(11, 66), bool]) -> (Tensor[(11, 66), float64], Tensor[(16, 16, 3), bool], Tensor[(11, 66), float32]) {
  %506 = @func_14070() /* ty=(Tensor[(11, 66), bool],) */;
  %507 = %506.0;
  %508 = cast(%var_21608, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(2), int32] */;
  %510 = cast(%507, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %512 = power(%510, %511) /* ty=Tensor[(11, 66), float64] */;
  %513 = cast(%var_21608, dtype="int64") /* ty=Tensor[(11, 66), int64] */;
  %514 = shape_of(%507, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(%507, dtype="int64") /* ty=Tensor[(11, 66), int64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %517 = bitwise_xor(%515, %516) /* ty=Tensor[(11, 66), int64] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %519 = shape_of(%512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %520 = cast(%512, dtype="float64") /* ty=Tensor[(11, 66), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %522 = cast(%var_21608, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
  %523 = floor_divide(%520, %521) /* ty=Tensor[(11, 66), float64] */;
  %524 = @func_12528() /* ty=Tensor[(16, 16, 3), bool] */;
  %525 = log(%522) /* ty=Tensor[(11, 66), float32] */;
  (%523, %524, %525)
}

def @func_14709() -> Tensor[(15, 12, 2), bool] {
  %526 = @func_13454() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) */;
  %526.1
}

def @func_17956() -> (Tensor[(1, 3, 4), uint32],) {
  @func_17954() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_8646() -> (Tensor[(252), bool], Tensor[(15, 12, 2), int32]) {
  %527 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %528 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %529 = %527.0;
  %530 = %528.7;
  (%529, %530)
}

def @func_14231() -> Tensor[(15, 12, 2), int32] {
  @func_14229() /* ty=Tensor[(15, 12, 2), int32] */
}

def @func_19783() -> Tensor[(21), float32] {
  @func_17666() /* ty=Tensor[(21), float32] */
}

def @func_9125() -> (Tensor[(15, 12, 2), float64],) {
  %531 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %532 = %531.0;
  (%532,)
}

def @func_7569(%var_7567: Tensor[(252), bool]) -> (Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  %533 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %534 = cast(%var_7567, dtype="bool") /* ty=Tensor[(252), bool] */;
  %535 = cast(%var_7567, dtype="bool") /* ty=Tensor[(252), bool] */;
  %536 = reshape(%534, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %537 = reshape(%535, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %538 = %533.1;
  %539 = @func_2190(%536, %537) /* ty=Tensor[(3, 6, 14), bool] */;
  (%538, %539, %var_7567)
}

def @func_8972() -> (Tensor[(252), bool],) {
  @func_8970() /* ty=(Tensor[(252), bool],) */
}

def @func_13289(%var_13287: Tensor[(616), float32], %var_13288: Tensor[(6, 2), uint32]) -> (Tensor[(726), int16], Tensor[(12, 4, 5), float32], Tensor[(726), int16], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(616), float32], Tensor[(6, 2), uint32], Tensor[(1, 3, 4), uint32]) {
  %557 = fn (%var_13248: Tensor[(616), float32], %var_13249: Tensor[(6, 2), uint32]) -> (Tensor[(726), int16], Tensor[(12, 4, 5), float32], Tensor[(726), int16], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(616), float32], Tensor[(6, 2), uint32], Tensor[(1, 3, 4), uint32]) {
    %540 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
    %541 = @func_8865() /* ty=(Tensor[(726), int16],) */;
    %542 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %543 = cast(%var_13248, dtype="float32") /* ty=Tensor[(616), float32] */;
    %544 = cast(%var_13249, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
    %545 = reshape(%543, newshape=[616]) /* ty=Tensor[(616), float32] */;
    %546 = reshape(%544, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %547 = @func_10179(%545, %546) /* ty=(Tensor[(21), float32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(21), float32], Tensor[(12), uint32]) */;
    %548 = cast(%var_13249, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
    %549 = reshape(%548, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
    %550 = @func_2228(%549) /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %551 = @func_6964() /* ty=Tensor[(726), int16] */;
    %552 = %540.0;
    %553 = %541.0;
    %554 = %542.0;
    %555 = %547.3;
    %556 = %550.0;
    (%551, %552, %553, %554, %555, %var_13248, %var_13249, %556)
  };
  %557(%var_13287, %var_13288) /* ty=(Tensor[(726), int16], Tensor[(12, 4, 5), float32], Tensor[(726), int16], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(616), float32], Tensor[(6, 2), uint32], Tensor[(1, 3, 4), uint32]) */
}

def @func_7312(%var_7310: Tensor[(726), int16]) -> (Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) {
  @func_7309(%var_7310) /* ty=(Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) */
}

def @func_19064() -> (Tensor[(11, 6, 11), int16], Tensor[(?, 3, 4), float32]) {
  %568 = fn () -> (Tensor[(11, 6, 11), int16], Tensor[(?, 3, 4), float32]) {
    %558 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %559 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
    %560 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
    %561 = %560.1;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
    %563 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%559, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %566 = %558.1;
    %567 = floor_mod(%564, %565) /* ty=Tensor[(?, 3, 4), float32] */;
    (%566, %567)
  };
  %568() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(?, 3, 4), float32]) */
}

def @func_18640(%var_18624: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64], Tensor[(726), int32], Tensor[(726), int16]) {
  %569 = cast(%var_18624, dtype="float64") /* ty=Tensor[(4, 13, 4), float64] */;
  %570 = cast(meta[relay.Constant][17] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %571 = reshape(%570, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %572 = @func_8145(%571) /* ty=(Tensor[(726), int32],) */;
  %573 = sqrt(%569) /* ty=Tensor[(4, 13, 4), float64] */;
  %574 = %572.0;
  (%573, %574, meta[relay.Constant][17] /* ty=Tensor[(726), int16] */)
}

def @func_18888() -> (Tensor[(4, 11, 8), uint16], Tensor[(252), bool]) {
  %579 = fn () -> (Tensor[(4, 11, 8), uint16], Tensor[(252), bool]) {
    %575 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
    %576 = @func_6797() /* ty=(Tensor[(252), bool],) */;
    %577 = %575.1;
    %578 = %576.0;
    (%577, %578)
  };
  %579() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(252), bool]) */
}

def @func_11019() -> (Tensor[(15, 12, 2), bool],) {
  @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_9178(%var_9173: Tensor[(2, 9, 2), bool], %var_9174: Tensor[(2, 9, 2), bool]) -> Tensor[(2, 9, 2), bool] {
  %580 = cast(%var_9174, dtype="bool") /* ty=Tensor[(2, 9, 2), bool] */;
  %581 = shape_of(%var_9173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_9173, dtype="bool") /* ty=Tensor[(2, 9, 2), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%582, %583) /* ty=Tensor[(2, 9, 2), bool] */
}

def @func_15360() -> (Tensor[(11, 6, 11), float64], Tensor[(726), int16]) {
  %584 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %585 = %584.0;
  %586 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 6, 11), int16] */, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %590 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %591 = power(%588, %589) /* ty=Tensor[(11, 6, 11), float64] */;
  %592 = %590.1;
  (%591, %592)
}

def @func_20991(%var_20989: Tensor[(1008), int8]) -> (Tensor[(1, 3, 4), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
  @func_20988(%var_20989) /* ty=(Tensor[(1, 3, 4), float64], Tensor[(432), int16], Tensor[(1008), int8]) */
}

def @func_19332() -> (Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %593 = cast(meta[relay.Constant][19] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %594 = cast(meta[relay.Constant][19] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %595 = reshape(%593, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %596 = reshape(%594, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %597 = @func_10393() /* ty=Tensor[(252), bool] */;
  %598 = @func_697(%595, %596) /* ty=Tensor[(11, 6, 11), int16] */;
  (%597, %598, meta[relay.Constant][19] /* ty=Tensor[(726), int16] */)
}

def @func_21549() -> (Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), int32]) {
  %607 = fn () -> (Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), int32]) {
    %599 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %600 = %599.0;
    %601 = cast(%600, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
    %602 = reshape(%601, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %603 = @func_7609(%602) /* ty=(Tensor[(15, 12, 2), bool],) */;
    %604 = @func_16868() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
    %605 = %603.0;
    %606 = %604.0;
    (%600, %605, %606)
  };
  %607() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), int32]) */
}

def @func_9491() -> (Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) {
  %611 = fn () -> (Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) {
    %608 = @func_8216() /* ty=(Tensor[(21), float32],) */;
    %609 = %608.0;
    %610 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
    (%609, %610)
  };
  %611() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */
}

def @func_15150() -> Tensor[(15, 12, 2), bool] {
  %613 = fn () -> Tensor[(15, 12, 2), bool] {
    %612 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
    %612.1
  };
  %613() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_20136() -> Tensor[(16, 16, 3), bool] {
  %615 = fn () -> Tensor[(16, 16, 3), bool] {
    %614 = @func_17589() /* ty=(Tensor[(16, 16, 3), bool],) */;
    %614.0
  };
  %615() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_2230(%var_2229: Tensor[(1, 3, 4), uint32]) -> (Tensor[(1, 3, 4), uint32],) {
  %619 = fn (%var_2224: Tensor[(1, 3, 4), uint32]) -> (Tensor[(1, 3, 4), uint32],) {
    %616 = cast(meta[relay.Constant][20] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %617 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
    %618 = minimum(%616, %617) /* ty=Tensor[(1, 3, 4), uint32] */;
    (%618,)
  };
  %619(%var_2229) /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_18258() -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) {
  @func_18256() /* ty=(Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) */
}

def @func_8867() -> (Tensor[(726), int16],) {
  @func_8865() /* ty=(Tensor[(726), int16],) */
}

def @func_10019(%var_10017: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) {
  @func_10016(%var_10017) /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) */
}

def @func_15063(%var_15023: Tensor[(15, 14, 14), uint64], %var_15024: Tensor[(15, 14, 14), uint64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(15, 14, 14), float32]) {
  %620 = cast(%var_15024, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %621 = shape_of(%var_15023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_15023, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %624 = cast(%var_15023, dtype="float64") /* ty=Tensor[(15, 14, 14), float64] */;
  %625 = cos(%624) /* ty=Tensor[(15, 14, 14), float64] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(15, 14, 14), float32] */;
  %627 = logical_xor(%622, %623) /* ty=Tensor[(15, 14, 14), uint64] */;
  %628 = acos(%626) /* ty=Tensor[(15, 14, 14), float32] */;
  (%627, %628)
}

def @func_19998(%var_19995: Tensor[(11, 66), bool], %var_19996: Tensor[(392), float32], %var_19997: Tensor[(11, 66), int8]) -> (Tensor[(15, 12, 2), float64], Tensor[(11, 66), uint64], Tensor[(21), float32], Tensor[(21), float32], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(11, 66), float32]) {
  %658 = fn (%var_19951: Tensor[(11, 66), bool], %var_19969: Tensor[(392), float32], %var_19989: Tensor[(11, 66), int8]) -> (Tensor[(15, 12, 2), float64], Tensor[(11, 66), uint64], Tensor[(21), float32], Tensor[(21), float32], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(11, 66), float32]) {
    %629 = @func_19205() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %630 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
    %631 = %630.0;
    %632 = cast(%var_19951, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(2), int32] */;
    %634 = cast(%631, dtype="uint64") /* ty=Tensor[(11, 66), uint64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %636 = cast(meta[relay.Constant][21] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
    %637 = reshape(%636, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %638 = @func_9103(%637) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) */;
    %639 = cast(%var_19969, dtype="float32") /* ty=Tensor[(392), float32] */;
    %640 = reshape(%639, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
    %641 = @func_5719(%640) /* ty=(Tensor[(2, 14, 14), float32],) */;
    %642 = cast(%var_19951, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
    %643 = log10(%642) /* ty=Tensor[(11, 66), float32] */;
    %644 = cast(%643, dtype="int8") /* ty=Tensor[(11, 66), int8] */;
    %645 = shape_of(%631, dtype="int32") /* ty=Tensor[(2), int32] */;
    %646 = cast(%631, dtype="int8") /* ty=Tensor[(11, 66), int8] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %648 = subtract(%646, %647) /* ty=Tensor[(11, 66), int8] */;
    %649 = cast(%var_19989, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
    %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(2), int32] */;
    %651 = cast(%648, dtype="float32") /* ty=Tensor[(11, 66), float32] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %653 = %629.0;
    %654 = minimum(%634, %635) /* ty=Tensor[(11, 66), uint64] */;
    %655 = %638.4;
    %656 = %641.0;
    %657 = multiply(%651, %652) /* ty=Tensor[(11, 66), float32] */;
    (%653, %654, %655, meta[relay.Constant][21] /* ty=Tensor[(21), float32] */, %656, %var_19969, %657)
  };
  %658(%var_19995, %var_19996, %var_19997) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(11, 66), uint64], Tensor[(21), float32], Tensor[(21), float32], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(11, 66), float32]) */
}

def @func_14070() -> (Tensor[(11, 66), bool],) {
  %666 = fn () -> (Tensor[(11, 66), bool],) {
    %659 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
    %660 = %659.1;
    %661 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 66), int16] */, dtype="bool") /* ty=Tensor[(11, 66), bool] */;
    %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(2), int32] */;
    %663 = cast(%660, dtype="bool") /* ty=Tensor[(11, 66), bool] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %665 = greater_equal(%663, %664) /* ty=Tensor[(11, 66), bool] */;
    (%665,)
  };
  %666() /* ty=(Tensor[(11, 66), bool],) */
}

def @func_10782() -> (Tensor[(726), int16], Tensor[(11, 66), int16]) {
  %673 = fn () -> (Tensor[(726), int16], Tensor[(11, 66), int16]) {
    %667 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
    %668 = %667.0;
    %669 = cast(%668, dtype="int16") /* ty=Tensor[(726), int16] */;
    %670 = reshape(%669, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
    %671 = @func_1245(%670) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
    %672 = %671.5;
    (%668, %672)
  };
  %673() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */
}

def @func_17708(%var_17706: Tensor[(8, 12, 13), float32]) -> (Tensor[(8, 12, 13), float32], Tensor[(15, 12, 2), bool]) {
  @func_17705(%var_17706) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(15, 12, 2), bool]) */
}

def @func_9923() -> (Tensor[(12, 4), int16],) {
  %674 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %675 = %674.2;
  (%675,)
}

def @func_6965() -> Tensor[(726), int16] {
  %677 = fn () -> Tensor[(726), int16] {
    %676 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %676.2
  };
  %677() /* ty=Tensor[(726), int16] */
}

def @func_10016(%var_10005: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) {
  %678 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %679 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %680 = cast(%var_10005, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %681 = reshape(%678, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %682 = reshape(%679, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %683 = reshape(%680, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %684 = @func_2408(%681, %682, %683) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %685 = @func_6964() /* ty=Tensor[(726), int16] */;
  %686 = %684.1;
  (%685, %686, meta[relay.Constant][23] /* ty=Tensor[(1, 420), float64] */, %var_10005)
}

def @func_11757() -> Tensor[(15, 12, 2), int32] {
  %688 = fn () -> Tensor[(15, 12, 2), int32] {
    %687 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
    %687.0
  };
  %688() /* ty=Tensor[(15, 12, 2), int32] */
}

def @func_8199() -> (Tensor[(3, 4), uint32], Tensor[(432), int16]) {
  @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */
}

def @func_13825() -> (Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) {
  @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */
}

def @func_14874() -> (Tensor[(432), int16],) {
  %691 = fn () -> (Tensor[(432), int16],) {
    %689 = @func_12926() /* ty=(Tensor[(432), int16],) */;
    %690 = %689.0;
    (%690,)
  };
  %691() /* ty=(Tensor[(432), int16],) */
}

def @func_14164() -> (Tensor[(15, 12, 2), bool],) {
  @func_14162() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_7464(%var_7463: Tensor[(16, 1, 3), int16]) -> Tensor[(16, 16, 3), bool] {
  %694 = fn (%var_7438: Tensor[(16, 1, 3), int16]) -> Tensor[(16, 16, 3), bool] {
    %692 = cast(%var_7438, dtype="bool") /* ty=Tensor[(16, 1, 3), bool] */;
    %693 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 3), int16] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
    greater_equal(%692, %693) /* ty=Tensor[(16, 16, 3), bool] */
  };
  %694(%var_7463) /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_18375() -> (Tensor[(726), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32], Tensor[(252), bool], Tensor[(14, 3, 4), uint16]) {
  %695 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %696 = reshape(%695, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
  %697 = @func_16243(%696) /* ty=(Tensor[(2, 14, 6), int64],) */;
  %698 = @func_6964() /* ty=Tensor[(726), int16] */;
  %699 = cast(%698, dtype="int16") /* ty=Tensor[(726), int16] */;
  %700 = reshape(%699, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %701 = @func_17899(%700) /* ty=(Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) */;
  %702 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), float32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %703 = reshape(%702, newshape=[14, 3, 4]) /* ty=Tensor[(14, 3, 4), uint32] */;
  %704 = @func_15735(%703) /* ty=(Tensor[(14, 3, 4), uint16],) */;
  %705 = %697.0;
  %706 = %701.1;
  %707 = %704.0;
  (%698, %705, meta[relay.Constant][25] /* ty=Tensor[(168), float32] */, %706, %707)
}

def @func_11974() -> (Tensor[(15, 12, 2), float64],) {
  %710 = fn () -> (Tensor[(15, 12, 2), float64],) {
    %708 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %709 = %708.0;
    (%709,)
  };
  %710() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_6631() -> Tensor[(15, 12, 2), float64] {
  %712 = fn () -> Tensor[(15, 12, 2), float64] {
    %711 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
    sinh(%711) /* ty=Tensor[(15, 12, 2), float64] */
  };
  %712() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_14229() -> Tensor[(15, 12, 2), int32] {
  @func_9809() /* ty=Tensor[(15, 12, 2), int32] */
}

def @func_16246(%var_16244: Tensor[(2, 14, 6), float32]) -> (Tensor[(2, 14, 6), int64],) {
  @func_16243(%var_16244) /* ty=(Tensor[(2, 14, 6), int64],) */
}

def @func_17901(%var_17900: Tensor[(726), int16]) -> (Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) {
  %723 = fn (%var_17850: Tensor[(726), int16]) -> (Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) {
    %713 = @func_15360() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(726), int16]) */;
    %714 = %713.1;
    %715 = cast(%var_17850, dtype="float32") /* ty=Tensor[(726), float32] */;
    %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
    %717 = cast(%714, dtype="float32") /* ty=Tensor[(726), float32] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), float32] */;
    %719 = @func_12926() /* ty=(Tensor[(432), int16],) */;
    %720 = mod(%717, %718) /* ty=Tensor[(726), float32] */;
    %721 = @func_12588() /* ty=Tensor[(252), bool] */;
    %722 = %719.0;
    (%720, %721, %722)
  };
  %723(%var_17900) /* ty=(Tensor[(726), float32], Tensor[(252), bool], Tensor[(432), int16]) */
}

def @func_13874() -> (Tensor[(15, 12, 2), float64],) {
  @func_13872() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_18407(%var_18405: uint16, %var_18406: Tensor[(2, 15, 4), uint16]) -> Tensor[(2, 15, 4), uint16] {
  @func_18403(%var_18405, %var_18406) /* ty=Tensor[(2, 15, 4), uint16] */
}

def @func_19249() -> (Tensor[(12, 5, 7), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %730 = fn () -> (Tensor[(12, 5, 7), float64], Tensor[(252), bool], Tensor[(252), bool]) {
    %724 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 7), float64] */;
    %725 = cast(meta[relay.Constant][28] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %726 = reshape(%725, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %727 = @func_8489(%726) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) */;
    %728 = acosh(%724) /* ty=Tensor[(12, 5, 7), float64] */;
    %729 = %727.5;
    (%728, %729, meta[relay.Constant][28] /* ty=Tensor[(252), bool] */)
  };
  %730() /* ty=(Tensor[(12, 5, 7), float64], Tensor[(252), bool], Tensor[(252), bool]) */
}

def @func_10294(%var_10286: Tensor[(1232), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(8, 14, 11), float32], Tensor[(1232), float32]) {
  %731 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %732 = cast(%var_10286, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %733 = cast(%var_10286, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %734 = reshape(%732, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %735 = reshape(%733, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float32] */;
  %736 = @func_7539(%734, %735) /* ty=(Tensor[(8, 14, 11), float32],) */;
  %737 = %731.1;
  %738 = %736.0;
  (%737, %738, %var_10286)
}

def @func_12926() -> (Tensor[(432), int16],) {
  %739 = @func_8854() /* ty=(Tensor[(432), int16],) */;
  %740 = %739.0;
  (%740,)
}

def @func_19377() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(120), uint16]) {
  %741 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %742 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %743 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %744 = reshape(%743, newshape=[120]) /* ty=Tensor[(120), uint16] */;
  %745 = @func_19116(%744) /* ty=(Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) */;
  %746 = %741.0;
  %747 = %742.0;
  %748 = %745.5;
  (%746, %747, %748, meta[relay.Constant][29] /* ty=Tensor[(120), uint16] */)
}

def @func_8335(%var_8333: Tensor[(420, 1), float64], %var_8334: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) {
  %761 = fn (%var_8290: Tensor[(420, 1), float64], %var_8291: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) {
    %749 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
    %750 = cast(%var_8290, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
    %751 = cast(%var_8290, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
    %752 = cast(%var_8291, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %753 = reshape(%750, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %754 = reshape(%751, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %755 = reshape(%752, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %756 = @func_2408(%753, %754, %755) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
    %757 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
    %758 = %749.1;
    %759 = %756.0;
    %760 = %757.0;
    (%758, %759, %var_8290, %var_8291, %760)
  };
  %761(%var_8333, %var_8334) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) */
}

def @func_20925(%var_20924: Tensor[(7, 11, 11), float32]) -> (Tensor[(7, 11, 11), float32],) {
  %764 = fn (%var_20912: Tensor[(7, 11, 11), float32]) -> (Tensor[(7, 11, 11), float32],) {
    %762 = cast(%var_20912, dtype="float32") /* ty=Tensor[(7, 11, 11), float32] */;
    %763 = log2(%762) /* ty=Tensor[(7, 11, 11), float32] */;
    (%763,)
  };
  %764(%var_20924) /* ty=(Tensor[(7, 11, 11), float32],) */
}

def @func_9051() -> (Tensor[(15, 12, 2), float64],) {
  @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_20045() -> (Tensor[(16, 16, 3), bool],) {
  %765 = @func_12247() /* ty=(Tensor[(16, 16, 3), bool],) */;
  %766 = %765.0;
  (%766,)
}

def @func_9523(%var_9522: Tensor[(36), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(252), bool]) {
  %776 = fn (%var_9516: Tensor[(36), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(252), bool]) {
    %767 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
    %768 = cast(%var_9516, dtype="bool") /* ty=Tensor[(36), bool] */;
    %769 = cast(%var_9516, dtype="bool") /* ty=Tensor[(36), bool] */;
    %770 = reshape(%768, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
    %771 = reshape(%769, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
    %772 = @func_8970() /* ty=(Tensor[(252), bool],) */;
    %773 = %767.1;
    %774 = @func_9178(%770, %771) /* ty=Tensor[(2, 9, 2), bool] */;
    %775 = %772.0;
    (%773, %774, %var_9516, %775)
  };
  %776(%var_9522) /* ty=(Tensor[(15, 12, 2), int32], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(252), bool]) */
}

def @func_17131() -> (Tensor[(726), float32],) {
  @func_17129() /* ty=(Tensor[(726), float32],) */
}

def @func_11808() -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) {
  %783 = fn () -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) {
    %777 = @func_8667() /* ty=(Tensor[(726), int16],) */;
    %778 = %777.0;
    %779 = cast(%778, dtype="int16") /* ty=Tensor[(726), int16] */;
    %780 = reshape(%779, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %781 = @func_10106(%780) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
    %782 = %781.1;
    (%778, %782)
  };
  %783() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */
}

def @func_19474() -> (Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) {
  %793 = fn () -> (Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) {
    %784 = @func_19332() /* ty=(Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %785 = cast(meta[relay.Constant][30] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %786 = cast(meta[relay.Constant][30] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %787 = reshape(%785, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
    %788 = reshape(%786, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
    %789 = @func_13823() /* ty=(Tensor[(21), float32], Tensor[(3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(3, 4), uint32]) */;
    %790 = %784.1;
    %791 = @func_9178(%787, %788) /* ty=Tensor[(2, 9, 2), bool] */;
    %792 = %789.4;
    (%790, %791, meta[relay.Constant][30] /* ty=Tensor[(36), bool] */, %792)
  };
  %793() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(2, 9, 2), bool], Tensor[(36), bool], Tensor[(3, 4), uint32]) */
}

def @func_13737() -> (Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) {
  %794 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %795 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %796 = reshape(%795, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), int64] */;
  %797 = @func_10348(%796) /* ty=(Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) */;
  %798 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %799 = %794.0;
  %800 = %797.1;
  %801 = %798.1;
  (%799, %800, meta[relay.Constant][31] /* ty=Tensor[(72), int64] */, %801)
}

def @func_14659() -> (Tensor[(432), int16], Tensor[(11, 66), bool]) {
  %806 = fn () -> (Tensor[(432), int16], Tensor[(11, 66), bool]) {
    %802 = @func_11618() /* ty=(Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) */;
    %803 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
    %804 = %802.1;
    %805 = %803.0;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(432), int16], Tensor[(11, 66), bool]) */
}

def @func_19207() -> (Tensor[(15, 12, 2), float64],) {
  @func_19205() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_9762() -> Tensor[(1, 3, 4), uint32] {
  @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_17483(%var_17481: Tensor[(126, 2), bool]) -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float32], Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(126, 2), bool], Tensor[(726), int16]) {
  @func_17480(%var_17481) /* ty=(Tensor[(12, 4), int16], Tensor[(15, 12, 2), float32], Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(126, 2), bool], Tensor[(726), int16]) */
}

def @func_21193() -> (Tensor[(?, 3, 4), bool],) {
  %817 = fn () -> (Tensor[(?, 3, 4), bool],) {
    %807 = @func_12940() /* ty=Tensor[(1, 3, 4), uint32] */;
    %808 = cast(%807, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
    %809 = log2(%808) /* ty=Tensor[(1, 3, 4), float32] */;
    %810 = cast(%809, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %811 = atanh(%810) /* ty=Tensor[(1, 3, 4), float64] */;
    %812 = cast(%807, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %816 = equal(%814, %815) /* ty=Tensor[(?, 3, 4), bool] */;
    (%816,)
  };
  %817() /* ty=(Tensor[(?, 3, 4), bool],) */
}

def @func_20802() -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(726), int16]) {
  %826 = fn () -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(726), int16]) {
    %818 = @func_18275() /* ty=(Tensor[(12, 4), int16],) */;
    %819 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %820 = @func_18561() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) */;
    %821 = @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */;
    %822 = %818.0;
    %823 = %819.0;
    %824 = %820.1;
    %825 = %821.0;
    (%822, %823, %824, %825)
  };
  %826() /* ty=(Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(726), int16]) */
}

def @func_16994() -> Tensor[(15, 12, 2), bool] {
  %827 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %827.0
}

def @func_17045() -> (Tensor[(21), float32],) {
  %830 = fn () -> (Tensor[(21), float32],) {
    %828 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
    %829 = %828.0;
    (%829,)
  };
  %830() /* ty=(Tensor[(21), float32],) */
}

def @func_15771() -> (Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) {
  %831 = @func_15360() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(726), int16]) */;
  %832 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 2), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2), uint32] */;
  %833 = reshape(%832, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %834 = @func_7220(%833) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %835 = %831.0;
  %836 = %834.3;
  (%835, %836, meta[relay.Constant][32] /* ty=Tensor[(6, 2), uint32] */)
}

def @func_18256() -> (Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) {
  %837 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %838 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %839 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %840 = %837.2;
  %841 = %838.0;
  %842 = %839.0;
  %843 = @func_6964() /* ty=Tensor[(726), int16] */;
  (%840, %841, %842, %843)
}

def @func_7572(%var_7570: Tensor[(252), bool]) -> (Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  @func_7569(%var_7570) /* ty=(Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) */
}

def @func_11380(%var_11348: Tensor[(15, 12, 2), int32]) -> (Tensor[(15, 12, 2), float32], Tensor[(15, 12, 2), int32]) {
  %844 = @func_9809() /* ty=Tensor[(15, 12, 2), int32] */;
  %845 = cast(%var_11348, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%844, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %849 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
  %850 = floor_divide(%847, %848) /* ty=Tensor[(15, 12, 2), float32] */;
  %851 = %849.0;
  (%850, %851)
}

def @func_8098() -> (Tensor[(252), bool],) {
  @func_8096() /* ty=(Tensor[(252), bool],) */
}

def @func_13517() -> (Tensor[(15, 12, 2), int32],) {
  @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */
}

def @func_18563() -> (Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) {
  @func_18561() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(432), int16], Tensor[(432), int16]) */
}

def @func_5721(%var_5720: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
  %854 = fn (%var_5694: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
    %852 = cast(%var_5694, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
    %853 = atanh(%852) /* ty=Tensor[(2, 14, 14), float32] */;
    (%853,)
  };
  %854(%var_5720) /* ty=(Tensor[(2, 14, 14), float32],) */
}

def @func_15219() -> Tensor[(1, 3, 4), uint32] {
  @func_15217() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_15580(%var_15558: Tensor[(36), bool]) -> (Tensor[(12), uint32], Tensor[(2, 9, 2), bool], Tensor[(36), bool]) {
  %855 = @func_12857() /* ty=(Tensor[(12), uint32],) */;
  %856 = cast(%var_15558, dtype="bool") /* ty=Tensor[(36), bool] */;
  %857 = cast(%var_15558, dtype="bool") /* ty=Tensor[(36), bool] */;
  %858 = reshape(%856, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %859 = reshape(%857, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), bool] */;
  %860 = %855.0;
  %861 = @func_9178(%858, %859) /* ty=Tensor[(2, 9, 2), bool] */;
  (%860, %861, %var_15558)
}

def @func_9465(%var_9463: Tensor[(15, 12, 2), float64]) -> (Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(70, 6), float64], Tensor[(12), uint32], Tensor[(15, 12, 2), float32]) {
  @func_9462(%var_9463) /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(70, 6), float64], Tensor[(12), uint32], Tensor[(15, 12, 2), float32]) */
}

def @func_1245(%var_1232: Tensor[(11, 66), int16]) -> (Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) {
  %862 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 13), float32] */;
  %863 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 12, 13), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 13), float64] */;
  %864 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 216), int16] */, dtype="int16") /* ty=Tensor[(2, 216), int16] */;
  %865 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 216), int16] */, dtype="int16") /* ty=Tensor[(2, 216), int16] */;
  %866 = reshape(%864, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %867 = reshape(%865, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), int16] */;
  %868 = @func_940(%866, %867) /* ty=(Tensor[(3, 16, 9), int16],) */;
  %869 = cast(%var_1232, dtype="int16") /* ty=Tensor[(11, 66), int16] */;
  %870 = cast(%var_1232, dtype="int16") /* ty=Tensor[(11, 66), int16] */;
  %871 = reshape(%869, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %872 = reshape(%870, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %873 = acosh(%862) /* ty=Tensor[(8, 12, 13), float32] */;
  %874 = exp(%863) /* ty=Tensor[(8, 12, 13), float64] */;
  %875 = %868.0;
  %876 = @func_697(%871, %872) /* ty=Tensor[(11, 6, 11), int16] */;
  (%873, %874, %875, meta[relay.Constant][34] /* ty=Tensor[(2, 216), int16] */, %876, %var_1232)
}

def @func_8855() -> (Tensor[(432), int16],) {
  %879 = fn () -> (Tensor[(432), int16],) {
    %877 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
    %878 = %877.1;
    (%878,)
  };
  %879() /* ty=(Tensor[(432), int16],) */
}

def @func_17941() -> Tensor[(252), bool] {
  @func_17939() /* ty=Tensor[(252), bool] */
}

def @func_13454() -> (Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) {
  %880 = @func_8096() /* ty=(Tensor[(252), bool],) */;
  %881 = cast(meta[relay.Constant][35] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %882 = reshape(%881, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %883 = @func_7609(%882) /* ty=(Tensor[(15, 12, 2), bool],) */;
  %884 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %885 = %880.0;
  %886 = %883.0;
  %887 = %884.1;
  (%885, %886, meta[relay.Constant][35] /* ty=Tensor[(360), float64] */, %887)
}

def @func_19334() -> (Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  @func_19332() /* ty=(Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */
}

def @func_18723() -> (Tensor[(726), float32], Tensor[(726), bool]) {
  %894 = fn () -> (Tensor[(726), float32], Tensor[(726), bool]) {
    %888 = @func_17129() /* ty=(Tensor[(726), float32],) */;
    %889 = %888.0;
    %890 = cast(%889, dtype="int16") /* ty=Tensor[(726), int16] */;
    %891 = reshape(%890, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %892 = @func_10106(%891) /* ty=(Tensor[(726), bool], Tensor[(4, 11, 8), uint16]) */;
    %893 = %892.0;
    (%889, %893)
  };
  %894() /* ty=(Tensor[(726), float32], Tensor[(726), bool]) */
}

def @func_13739() -> (Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) {
  @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */
}

def @func_19844() -> (Tensor[(1, 3, 4), uint32],) {
  %897 = fn () -> (Tensor[(1, 3, 4), uint32],) {
    %895 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
    %896 = %895.1;
    (%896,)
  };
  %897() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_21112(%var_21087: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) {
  %898 = cast(%var_21087, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %899 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %900 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %901 = reshape(%899, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %902 = reshape(%900, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %903 = @func_18256() /* ty=(Tensor[(12, 4), int16], Tensor[(15, 12, 2), float64], Tensor[(3, 4), uint32], Tensor[(726), int16]) */;
  %904 = acosh(%898) /* ty=Tensor[(14, 11, 12), float32] */;
  %905 = @func_2190(%901, %902) /* ty=Tensor[(3, 6, 14), bool] */;
  %906 = %903.2;
  (%904, %905, meta[relay.Constant][36] /* ty=Tensor[(252), bool] */, %906)
}

def @func_15776() -> (Tensor[(15, 12, 2), bool],) {
  %907 = @func_14709() /* ty=Tensor[(15, 12, 2), bool] */;
  (%907,)
}

def @func_16407() -> (Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) {
  %916 = fn () -> (Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) {
    %908 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %909 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
    %910 = @func_14873() /* ty=(Tensor[(432), int16],) */;
    %911 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
    %912 = %908.0;
    %913 = %909.1;
    %914 = %910.0;
    %915 = %911.0;
    (%912, %913, %914, %915)
  };
  %916() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) */
}

def @func_21590() -> Tensor[(16, 16, 3), bool] {
  @func_21588() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_14310(%var_14277: Tensor[(726, 1), int16]) -> (Tensor[(12, 4, 5), float32], Tensor[(726), int32], Tensor[(726, 1), int16], Tensor[(726), float32]) {
  %917 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %918 = cast(%var_14277, dtype="int16") /* ty=Tensor[(726, 1), int16] */;
  %919 = reshape(%918, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %920 = @func_8145(%919) /* ty=(Tensor[(726), int32],) */;
  %921 = @func_13466() /* ty=(Tensor[(726), float32],) */;
  %922 = %917.0;
  %923 = %920.0;
  %924 = %921.0;
  (%922, %923, %var_14277, %924)
}

def @func_11504() -> (Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) {
  %925 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %926 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %927 = @func_10321() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %928 = %927.0;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %930 = log10(%929) /* ty=Tensor[(1, 3, 4), float64] */;
  %931 = cast(%930, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
  %932 = %925.1;
  %933 = %926.0;
  %934 = cosh(%931) /* ty=Tensor[(1, 3, 4), float64] */;
  (%932, %933, %934)
}

def @func_12857() -> (Tensor[(12), uint32],) {
  %935 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %936 = %935.3;
  (%936,)
}

def @func_14926(%var_14925: Tensor[(768), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(16, 16, 3), int64], Tensor[(768), bool]) {
  %946 = fn (%var_14898: Tensor[(768), bool]) -> (Tensor[(15, 12, 2), int32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(16, 16, 3), int64], Tensor[(768), bool]) {
    %937 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
    %938 = cast(meta[relay.Constant][37] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %939 = reshape(%938, newshape=[616]) /* ty=Tensor[(616), float32] */;
    %940 = @func_13575(%939) /* ty=(Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) */;
    %941 = cast(%var_14898, dtype="bool") /* ty=Tensor[(768), bool] */;
    %942 = reshape(%941, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), bool] */;
    %943 = %937.3;
    %944 = %940.4;
    %945 = @func_9636(%942) /* ty=Tensor[(16, 16, 3), int64] */;
    (%943, %944, meta[relay.Constant][37] /* ty=Tensor[(616), float32] */, %945, %var_14898)
  };
  %946(%var_14925) /* ty=(Tensor[(15, 12, 2), int32], Tensor[(4, 11, 14), float32], Tensor[(616), float32], Tensor[(16, 16, 3), int64], Tensor[(768), bool]) */
}

def @func_18989(%var_18987: Tensor[(432), int16]) -> (Tensor[(12, 4), int16], Tensor[(432), bool], Tensor[(1, 3, 4), uint32]) {
  @func_18986(%var_18987) /* ty=(Tensor[(12, 4), int16], Tensor[(432), bool], Tensor[(1, 3, 4), uint32]) */
}

def @func_16868() -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
  %947 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %948 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %949 = %947.1;
  %950 = %948.2;
  (%949, %950)
}

def @func_16682() -> (Tensor[(432), int16], Tensor[(1, 3, 4), uint32]) {
  %951 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %952 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %953 = %951.1;
  %954 = %952.0;
  (%953, %954)
}

def @func_14868() -> (Tensor[(252), bool], Tensor[(726), int16]) {
  %959 = fn () -> (Tensor[(252), bool], Tensor[(726), int16]) {
    %955 = @func_12773() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool]) */;
    %956 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
    %957 = %955.1;
    %958 = %956.0;
    (%957, %958)
  };
  %959() /* ty=(Tensor[(252), bool], Tensor[(726), int16]) */
}

def @func_9344() -> (Tensor[(12, 4), int16],) {
  @func_9342() /* ty=(Tensor[(12, 4), int16],) */
}

def @func_11048() -> Tensor[(12, 4), int16] {
  %960 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %960.0
}

def @func_10351(%var_10349: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) {
  @func_10348(%var_10349) /* ty=(Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) */
}

def @func_15362() -> (Tensor[(11, 6, 11), float64], Tensor[(726), int16]) {
  @func_15360() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(726), int16]) */
}

def @func_12775() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool]) {
  @func_12773() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool]) */
}

def @func_14134() -> Tensor[(21), float32] {
  @func_14132() /* ty=Tensor[(21), float32] */
}

def @func_13638() -> Tensor[(12, 4), int16] {
  @func_11048() /* ty=Tensor[(12, 4), int16] */
}

def @func_16701() -> Tensor[(12, 4), int16] {
  %961 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
  %961.0
}

def @func_9106(%var_9104: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) {
  @func_9103(%var_9104) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(432), int16], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(21), float32], Tensor[(3, 1, 7), float32]) */
}

def @func_7428(%var_7407: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) {
  %962 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %963 = cast(%var_7407, dtype="float32") /* ty=Tensor[(21), float32] */;
  %964 = reshape(%963, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %965 = @func_3552(%964) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %966 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %967 = %962.0;
  %968 = %965.0;
  %969 = %966.0;
  (%967, %968, %var_7407, %969)
}

def @func_17018() -> (Tensor[(726), int16],) {
  %972 = fn () -> (Tensor[(726), int16],) {
    %970 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
    %971 = %970.0;
    (%971,)
  };
  %972() /* ty=(Tensor[(726), int16],) */
}

def @func_11506() -> (Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) {
  @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */
}

def @func_8491(%var_8490: Tensor[(252), bool]) -> (Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %991 = fn (%var_8475: Tensor[(252), bool]) -> (Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) {
    %973 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %974 = %973.0;
    %975 = cast(%974, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
    %976 = acosh(%975) /* ty=Tensor[(15, 12, 2), float32] */;
    %977 = cast(%974, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
    %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %979 = cast(%976, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
    %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %981 = cast(meta[relay.Constant][38] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
    %982 = reshape(%981, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
    %983 = @func_7999(%982) /* ty=(Tensor[(4, 11, 14), float32],) */;
    %984 = cast(%var_8475, dtype="bool") /* ty=Tensor[(252), bool] */;
    %985 = reshape(%984, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %986 = @func_7569(%985) /* ty=(Tensor[(726), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) */;
    %987 = mod(%979, %980) /* ty=Tensor[(15, 12, 2), float32] */;
    %988 = %983.0;
    %989 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
    %990 = %986.2;
    (%987, %988, meta[relay.Constant][38] /* ty=Tensor[(616, 1), float32] */, %989, %990, %var_8475)
  };
  %991(%var_8490) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(4, 11, 14), float32], Tensor[(616, 1), float32], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(252), bool]) */
}

def @func_9333() -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) {
  %997 = fn () -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) {
    %992 = @func_8970() /* ty=(Tensor[(252), bool],) */;
    %993 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
    %994 = %992.0;
    %995 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
    %996 = %993.0;
    (%994, %995, %996)
  };
  %997() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */
}

def @func_11050() -> Tensor[(12, 4), int16] {
  @func_11048() /* ty=Tensor[(12, 4), int16] */
}

def @func_13515() -> (Tensor[(15, 12, 2), int32],) {
  %998 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
  (%998,)
}

def @func_20746() -> Tensor[(15, 12, 2), float64] {
  %999 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %999.0
}

def @func_8096() -> (Tensor[(252), bool],) {
  %1000 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %1001 = %1000.0;
  (%1001,)
}

def @func_15500() -> (Tensor[(726), int16], Tensor[(252), bool]) {
  %1002 = @func_11807() /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16]) */;
  %1003 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %1004 = %1002.0;
  %1005 = %1003.0;
  (%1004, %1005)
}

def @func_7731(%var_7730: Tensor[(726), int16]) -> (Tensor[(726), int16], Tensor[(726), int32]) {
  %1015 = fn (%var_7724: Tensor[(726), int16]) -> (Tensor[(726), int16], Tensor[(726), int32]) {
    %1006 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
    %1007 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
    %1008 = %1007.0;
    %1009 = cast(%var_7724, dtype="int32") /* ty=Tensor[(726), int32] */;
    %1010 = shape_of(%1008, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1011 = cast(%1008, dtype="int32") /* ty=Tensor[(726), int32] */;
    %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?), int32] */;
    %1013 = %1006.0;
    %1014 = left_shift(%1011, %1012) /* ty=Tensor[(726), int32] */;
    (%1013, %1014)
  };
  %1015(%var_7730) /* ty=(Tensor[(726), int16], Tensor[(726), int32]) */
}

def @func_18753(%var_18724: Tensor[(4, 13, 8), float32]) -> (Tensor[(4, 13, 8), float32], Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
  %1016 = cast(%var_18724, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %1017 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %1018 = @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1019 = tan(%1016) /* ty=Tensor[(4, 13, 8), float32] */;
  %1020 = %1017.3;
  %1021 = %1018.0;
  (%1019, %1020, %1021)
}

def @func_15502() -> (Tensor[(726), int16], Tensor[(252), bool]) {
  @func_15500() /* ty=(Tensor[(726), int16], Tensor[(252), bool]) */
}

def @func_18057() -> (Tensor[(726), int16], Tensor[(392), float32], Tensor[(7, 56), float64], Tensor[(726), int16]) {
  %1022 = @func_11939() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */;
  %1023 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 56), float32] */, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %1024 = reshape(%1023, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %1025 = @func_14418(%1024) /* ty=(Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) */;
  %1026 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 56), float32] */, dtype="float64") /* ty=Tensor[(7, 56), float64] */;
  %1027 = %1022.1;
  %1028 = cast(%1027, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1029 = reshape(%1028, newshape=[726]) /* ty=Tensor[(726), int16] */;
  %1030 = @func_8064(%1029) /* ty=(Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %1031 = %1025.2;
  %1032 = atan(%1026) /* ty=Tensor[(7, 56), float64] */;
  %1033 = %1030.3;
  (%1027, %1031, %1032, %1033)
}

def @func_20988(%var_20985: Tensor[(1008), int8]) -> (Tensor[(1, 3, 4), float64], Tensor[(432), int16], Tensor[(1008), int8]) {
  %1034 = @func_11820() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %1035 = cast(%var_20985, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %1036 = reshape(%1035, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), int8] */;
  %1037 = @func_15880(%1036) /* ty=(Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) */;
  %1038 = %1034.0;
  %1039 = %1037.2;
  (%1038, %1039, %var_20985)
}

def @func_18501() -> Tensor[(16, 16, 3), bool] {
  %1040 = fn () -> Tensor[(16, 16, 3), bool] {
    @func_12528() /* ty=Tensor[(16, 16, 3), bool] */
  };
  %1040() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_832(%var_830: Tensor[(12, 13, 8), float64], %var_831: Tensor[(726), int16]) -> (Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) {
  @func_828(%var_830, %var_831) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) */
}

def @func_9462(%var_9454: Tensor[(15, 12, 2), float64]) -> (Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(70, 6), float64], Tensor[(12), uint32], Tensor[(15, 12, 2), float32]) {
  %1041 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1042 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1043 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1044 = %1041.0;
  %1045 = cast(%1044, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %1046 = reshape(%1042, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %1047 = reshape(%1043, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %1048 = reshape(%1045, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1049 = @func_2408(%1046, %1047, %1048) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
  %1050 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
  %1051 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %1052 = cast(%var_9454, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1053 = shape_of(%1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1054 = cast(%1051, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1056 = %1049.2;
  %1057 = %1050.3;
  %1058 = floor_mod(%1054, %1055) /* ty=Tensor[(15, 12, 2), float32] */;
  (%1044, %1056, meta[relay.Constant][40] /* ty=Tensor[(70, 6), float64] */, %1057, %1058)
}

def @func_15623() -> (Tensor[(3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  %1059 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %1060 = %1059.0;
  %1061 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%1060, %1061)
}

def @func_21010() -> Tensor[(15, 12, 2), float64] {
  %1062 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1062.0
}

def @func_7222(%var_7221: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %1076 = fn (%var_7202: Tensor[(12), uint32]) -> (Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) {
    %1063 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %1064 = cast(%var_7202, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %1065 = reshape(%1063, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
    %1066 = reshape(%1064, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1067 = @func_4048(%1065, %1066) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
    %1068 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %1069 = cast(%var_7202, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %1070 = reshape(%1068, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
    %1071 = reshape(%1069, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1072 = @func_4048(%1070, %1071) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
    %1073 = @func_6964() /* ty=Tensor[(726), int16] */;
    %1074 = %1067.0;
    %1075 = %1072.4;
    (%1073, %1074, meta[relay.Constant][41] /* ty=Tensor[(432), int16] */, %var_7202, %1075)
  };
  %1076(%var_7221) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */
}

def @func_18059() -> (Tensor[(726), int16], Tensor[(392), float32], Tensor[(7, 56), float64], Tensor[(726), int16]) {
  @func_18057() /* ty=(Tensor[(726), int16], Tensor[(392), float32], Tensor[(7, 56), float64], Tensor[(726), int16]) */
}

def @func_11197() -> (Tensor[(15, 12, 2), float64],) {
  %1079 = fn () -> (Tensor[(15, 12, 2), float64],) {
    %1077 = @func_9049() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1078 = %1077.0;
    (%1078,)
  };
  %1079() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_15476() -> (Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) {
  @func_15474() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) */
}

def @func_14375() -> (Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) {
  @func_14373() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(726), int16], Tensor[(15, 12, 2), int32]) */
}

def @func_8197() -> (Tensor[(3, 4), uint32], Tensor[(432), int16]) {
  %1080 = @func_7838() /* ty=(Tensor[(3, 4), uint32],) */;
  %1081 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1082 = %1080.0;
  %1083 = %1081.3;
  (%1082, %1083)
}

def @func_13027() -> (Tensor[(252), bool],) {
  %1086 = fn () -> (Tensor[(252), bool],) {
    %1084 = @func_6797() /* ty=(Tensor[(252), bool],) */;
    %1085 = %1084.0;
    (%1085,)
  };
  %1086() /* ty=(Tensor[(252), bool],) */
}

def @func_18151(%var_18150: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(21), bool]) {
  %1095 = fn (%var_18119: Tensor[(21), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(21), bool]) {
    %1087 = @func_11695() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %1088 = @func_14132() /* ty=Tensor[(21), float32] */;
    %1089 = cast(%var_18119, dtype="bool") /* ty=Tensor[(21), bool] */;
    %1090 = shape_of(%1088, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1091 = cast(%1088, dtype="bool") /* ty=Tensor[(21), bool] */;
    %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1093 = %1087.0;
    %1094 = greater(%1091, %1092) /* ty=Tensor[(21), bool] */;
    (%1093, %1094)
  };
  %1095(%var_18150) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(21), bool]) */
}

def @func_18795() -> (Tensor[(726), int16], Tensor[(21), float32]) {
  @func_18793() /* ty=(Tensor[(726), int16], Tensor[(21), float32]) */
}

def @func_20047() -> (Tensor[(16, 16, 3), bool],) {
  @func_20045() /* ty=(Tensor[(16, 16, 3), bool],) */
}

def @func_17779() -> (Tensor[(1248), float64], Tensor[(15, 12, 2), int32]) {
  @func_17777() /* ty=(Tensor[(1248), float64], Tensor[(15, 12, 2), int32]) */
}

def @func_7908(%var_7904: Tensor[(21, 1), float32]) -> (Tensor[(3, 6, 14), float32], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32]) {
  %1096 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %1097 = %1096.1;
  %1098 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 6, 14), bool] */, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %1099 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1100 = cast(%1097, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1102 = cast(%var_7904, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %1103 = reshape(%1102, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %1104 = @func_3552(%1103) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %1105 = divide(%1100, %1101) /* ty=Tensor[(3, 6, 14), float32] */;
  %1106 = %1104.0;
  (%1105, %1106, %var_7904)
}

def @func_20748() -> Tensor[(15, 12, 2), float64] {
  @func_20746() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_17307(%var_17305: Tensor[(726), int16]) -> (Tensor[(1, 3, 4), uint32], Tensor[(4, 11, 8), uint16], Tensor[(726), int16], Tensor[(1, 3, 4), uint32]) {
  @func_17304(%var_17305) /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(4, 11, 8), uint16], Tensor[(726), int16], Tensor[(1, 3, 4), uint32]) */
}

def @func_19742(%var_19740: Tensor[(1248), float64], %var_19741: Tensor[(168, 1), float32]) -> (Tensor[(726), float32], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(15, 12, 2), int32], Tensor[(72), int64], Tensor[(252), bool], Tensor[(2, 14, 6), int64], Tensor[(168, 1), float32], Tensor[(?, 3, 4), float64]) {
  %1132 = fn (%var_19629: Tensor[(1248), float64], %var_19731: Tensor[(168, 1), float32]) -> (Tensor[(726), float32], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(15, 12, 2), int32], Tensor[(72), int64], Tensor[(252), bool], Tensor[(2, 14, 6), int64], Tensor[(168, 1), float32], Tensor[(?, 3, 4), float64]) {
    %1107 = @func_17129() /* ty=(Tensor[(726), float32],) */;
    %1108 = cast(%var_19629, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %1109 = %1107.0;
    %1110 = cast(%1109, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1111 = reshape(%1108, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
    %1112 = reshape(%1110, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %1113 = @func_13171(%1111, %1112) /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) */;
    %1114 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
    %1115 = @func_13737() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(1, 3, 4), uint32], Tensor[(72), int64], Tensor[(15, 12, 2), int32]) */;
    %1116 = @func_12773() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(252), bool]) */;
    %1117 = cast(%var_19731, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %1118 = reshape(%1117, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
    %1119 = @func_16243(%1118) /* ty=(Tensor[(2, 14, 6), int64],) */;
    %1120 = @func_18578() /* ty=Tensor[(1, 3, 4), uint32] */;
    %1121 = @func_18578() /* ty=Tensor[(1, 3, 4), uint32] */;
    %1122 = cast(%1121, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %1123 = shape_of(%1120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1124 = cast(%1120, dtype="float64") /* ty=Tensor[(1, 3, 4), float64] */;
    %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1126 = %1113.2;
    %1127 = %1114.0;
    %1128 = %1115.2;
    %1129 = %1116.1;
    %1130 = %1119.0;
    %1131 = mod(%1124, %1125) /* ty=Tensor[(?, 3, 4), float64] */;
    (%1109, %1126, %var_19629, %1127, %1128, %1129, %1130, %var_19731, %1131)
  };
  %1132(%var_19740, %var_19741) /* ty=(Tensor[(726), float32], Tensor[(1248), float64], Tensor[(1248), float64], Tensor[(15, 12, 2), int32], Tensor[(72), int64], Tensor[(252), bool], Tensor[(2, 14, 6), int64], Tensor[(168, 1), float32], Tensor[(?, 3, 4), float64]) */
}

def @func_10268(%var_10266: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(21), float32], Tensor[(21), float32], Tensor[(432), int16]) {
  @func_10265(%var_10266) /* ty=(Tensor[(252), bool], Tensor[(21), float32], Tensor[(21), float32], Tensor[(432), int16]) */
}

def @func_15778() -> (Tensor[(15, 12, 2), bool],) {
  @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_11383(%var_11381: Tensor[(15, 12, 2), int32]) -> (Tensor[(15, 12, 2), float32], Tensor[(15, 12, 2), int32]) {
  @func_11380(%var_11381) /* ty=(Tensor[(15, 12, 2), float32], Tensor[(15, 12, 2), int32]) */
}

def @func_9925() -> (Tensor[(12, 4), int16],) {
  @func_9923() /* ty=(Tensor[(12, 4), int16],) */
}

def @func_7932() -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) {
  %1139 = fn () -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) {
    %1133 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
    %1134 = %1133.7;
    %1135 = cast(%1134, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
    %1136 = reshape(%1135, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %1137 = @func_7609(%1136) /* ty=(Tensor[(15, 12, 2), bool],) */;
    %1138 = %1137.0;
    (%1134, %1138)
  };
  %1139() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */
}

def @func_17390() -> (Tensor[(252), bool],) {
  %1142 = fn () -> (Tensor[(252), bool],) {
    %1140 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
    %1141 = %1140.0;
    (%1141,)
  };
  %1142() /* ty=(Tensor[(252), bool],) */
}

def @func_18580() -> Tensor[(1, 3, 4), uint32] {
  @func_18578() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_18303() -> (Tensor[(21), float32], Tensor[(726), int16]) {
  %1146 = fn () -> (Tensor[(21), float32], Tensor[(726), int16]) {
    %1143 = @func_11618() /* ty=(Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) */;
    %1144 = @func_14132() /* ty=Tensor[(21), float32] */;
    %1145 = %1143.2;
    (%1144, %1145)
  };
  %1146() /* ty=(Tensor[(21), float32], Tensor[(726), int16]) */
}

def @func_20161() -> Tensor[(16, 16, 3), bool] {
  %1147 = fn () -> Tensor[(16, 16, 3), bool] {
    @func_18500() /* ty=Tensor[(16, 16, 3), bool] */
  };
  %1147() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_20289(%var_20285: Tensor[(252), bool]) -> (Tensor[(3, 4), uint32], Tensor[(726), int16], Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool]) {
  %1148 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
  %1149 = @func_10828() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16]) */;
  %1150 = %1149.1;
  %1151 = cast(%1150, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1152 = cast(%1150, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1153 = reshape(%1151, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1154 = reshape(%1152, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1155 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1156 = cast(%var_20285, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1157 = cast(%var_20285, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1158 = reshape(%1156, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1159 = reshape(%1157, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1160 = %1148.0;
  %1161 = @func_697(%1153, %1154) /* ty=Tensor[(11, 6, 11), int16] */;
  %1162 = @func_9154() /* ty=Tensor[(1, 3, 4), uint32] */;
  %1163 = %1155.0;
  %1164 = @func_2190(%1158, %1159) /* ty=Tensor[(3, 6, 14), bool] */;
  (%1160, %1150, %1161, %1162, %1163, %1164, %var_20285)
}

def @func_16703() -> Tensor[(12, 4), int16] {
  @func_16701() /* ty=Tensor[(12, 4), int16] */
}

def @func_19276() -> Tensor[(252), bool] {
  @func_19274() /* ty=Tensor[(252), bool] */
}

def @func_20676() -> (Tensor[(252), bool],) {
  %1167 = fn () -> (Tensor[(252), bool],) {
    %1165 = @func_6797() /* ty=(Tensor[(252), bool],) */;
    %1166 = %1165.0;
    (%1166,)
  };
  %1167() /* ty=(Tensor[(252), bool],) */
}

def @func_15067(%var_15065: Tensor[(15, 14, 14), uint64], %var_15066: Tensor[(15, 14, 14), uint64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(15, 14, 14), float32]) {
  @func_15063(%var_15065, %var_15066) /* ty=(Tensor[(15, 14, 14), uint64], Tensor[(15, 14, 14), float32]) */
}

def @func_17667() -> Tensor[(21), float32] {
  %1168 = fn () -> Tensor[(21), float32] {
    @func_14132() /* ty=Tensor[(21), float32] */
  };
  %1168() /* ty=Tensor[(21), float32] */
}

def @func_20225() -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32]) {
  %1177 = fn () -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32]) {
    %1169 = @func_17540() /* ty=(Tensor[(420, 392), bool], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32], Tensor[(432), int16], Tensor[(1, 3, 4), float64]) */;
    %1170 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
    %1171 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1172 = reshape(%1171, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
    %1173 = @func_16243(%1172) /* ty=(Tensor[(2, 14, 6), int64],) */;
    %1174 = %1169.1;
    %1175 = %1170.0;
    %1176 = %1173.0;
    (%1174, %1175, %1176, meta[relay.Constant][43] /* ty=Tensor[(168), float32] */)
  };
  %1177() /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(2, 14, 6), int64], Tensor[(168), float32]) */
}

def @func_17954() -> (Tensor[(1, 3, 4), uint32],) {
  %1178 = @func_15707() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%1178,)
}

def @func_18986(%var_18962: Tensor[(432), int16]) -> (Tensor[(12, 4), int16], Tensor[(432), bool], Tensor[(1, 3, 4), uint32]) {
  %1179 = @func_18275() /* ty=(Tensor[(12, 4), int16],) */;
  %1180 = @func_12926() /* ty=(Tensor[(432), int16],) */;
  %1181 = %1180.0;
  %1182 = cast(%var_18962, dtype="bool") /* ty=Tensor[(432), bool] */;
  %1183 = shape_of(%1181, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1184 = cast(%1181, dtype="bool") /* ty=Tensor[(432), bool] */;
  %1185 = dyn.reshape(%1182, %1183, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1186 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1187 = %1179.0;
  %1188 = greater_equal(%1184, %1185) /* ty=Tensor[(432), bool] */;
  %1189 = %1186.0;
  (%1187, %1188, %1189)
}

def @func_13456() -> (Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) {
  @func_13454() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), bool], Tensor[(360), float64], Tensor[(11, 6, 11), int16]) */
}

def @func_8545() -> (Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) {
  %1195 = fn () -> (Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) {
    %1190 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1191 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 4), int16] */, dtype="int16") /* ty=Tensor[(12, 4), int16] */;
    %1192 = reshape(%1191, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), int16] */;
    %1193 = %1190.0;
    %1194 = @func_7462(%1192) /* ty=Tensor[(16, 16, 3), bool] */;
    (%1193, %1194, meta[relay.Constant][44] /* ty=Tensor[(12, 4), int16] */)
  };
  %1195() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */
}

def @func_5255(%var_5234: int64, %var_5235: Tensor[(4, 15, 2), int64]) -> Tensor[(4, 15, 2), int64] {
  %1196 = cast(%var_5234, dtype="int64") /* ty=int64 */;
  %1197 = cast(%var_5235, dtype="int64") /* ty=Tensor[(4, 15, 2), int64] */;
  multiply(%1196, %1197) /* ty=Tensor[(4, 15, 2), int64] */
}

def @func_20393() -> (Tensor[(11, 66), bool],) {
  %1198 = @func_14069() /* ty=(Tensor[(11, 66), bool],) */;
  %1199 = %1198.0;
  (%1199,)
}

def @func_10321() -> (Tensor[(1, 3, 4), uint32],) {
  %1200 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1201 = %1200.0;
  (%1201,)
}

def @func_14568() -> Tensor[(252), bool] {
  %1202 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %1202.0
}

def @func_8762() -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) {
  %1203 = @func_8667() /* ty=(Tensor[(726), int16],) */;
  %1204 = cast(meta[relay.Constant][45] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %1205 = cast(meta[relay.Constant][46] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1206 = reshape(%1204, newshape=[36, 12]) /* ty=Tensor[(36, 12), int16] */;
  %1207 = reshape(%1205, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1208 = @func_4048(%1206, %1207) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */;
  %1209 = %1203.0;
  %1210 = %1208.3;
  (%1209, %1210, meta[relay.Constant][45] /* ty=Tensor[(432), int16] */, meta[relay.Constant][46] /* ty=Tensor[(12), uint32] */)
}

def @func_11620() -> (Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) {
  @func_11618() /* ty=(Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) */
}

def @func_6861() -> (Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %1211 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
  %1212 = cast(meta[relay.Constant][47] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1213 = cast(meta[relay.Constant][47] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1214 = reshape(%1212, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1215 = reshape(%1213, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1216 = %1211.1;
  %1217 = @func_697(%1214, %1215) /* ty=Tensor[(11, 6, 11), int16] */;
  (%1216, %1217, meta[relay.Constant][47] /* ty=Tensor[(726), int16] */)
}

def @func_8148(%var_8146: Tensor[(726), int16]) -> (Tensor[(726), int32],) {
  @func_8145(%var_8146) /* ty=(Tensor[(726), int32],) */
}

def @func_11618() -> (Tensor[(?, 3, 4), int32], Tensor[(432), int16], Tensor[(726), int16]) {
  %1218 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1219 = %1218.1;
  %1220 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1221 = %1220.2;
  %1222 = cast(%1221, dtype="int32") /* ty=Tensor[(1, 3, 4), int32] */;
  %1223 = shape_of(%1219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1224 = cast(%1219, dtype="int32") /* ty=Tensor[(1, 3, 4), int32] */;
  %1225 = dyn.reshape(%1222, %1223, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1226 = cast(%1219, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
  %1227 = reshape(%1226, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1228 = @func_7220(%1227) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %1229 = @func_10781() /* ty=(Tensor[(726), int16], Tensor[(11, 66), int16]) */;
  %1230 = add(%1224, %1225) /* ty=Tensor[(?, 3, 4), int32] */;
  %1231 = %1228.2;
  %1232 = %1229.0;
  (%1230, %1231, %1232)
}

def @func_17939() -> Tensor[(252), bool] {
  %1233 = @func_8096() /* ty=(Tensor[(252), bool],) */;
  %1233.0
}

def @func_19274() -> Tensor[(252), bool] {
  %1234 = @func_15500() /* ty=(Tensor[(726), int16], Tensor[(252), bool]) */;
  %1234.1
}

def @func_19205() -> (Tensor[(15, 12, 2), float64],) {
  %1235 = @func_11973() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1236 = %1235.0;
  (%1236,)
}

def @func_13467() -> (Tensor[(726), float32],) {
  %1239 = fn () -> (Tensor[(726), float32],) {
    %1237 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
    %1238 = %1237.1;
    (%1238,)
  };
  %1239() /* ty=(Tensor[(726), float32],) */
}

def @func_14440() -> (Tensor[(15, 12, 2), int32],) {
  %1242 = fn () -> (Tensor[(15, 12, 2), int32],) {
    %1240 = @func_13515() /* ty=(Tensor[(15, 12, 2), int32],) */;
    %1241 = %1240.0;
    (%1241,)
  };
  %1242() /* ty=(Tensor[(15, 12, 2), int32],) */
}

def @func_7839() -> (Tensor[(3, 4), uint32],) {
  %1245 = fn () -> (Tensor[(3, 4), uint32],) {
    %1243 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
    %1244 = %1243.5;
    (%1244,)
  };
  %1245() /* ty=(Tensor[(3, 4), uint32],) */
}

def @func_6751() -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) {
  %1246 = cast(meta[relay.Constant][48] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1247 = cast(meta[relay.Constant][48] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1248 = reshape(%1246, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1249 = reshape(%1247, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %1250 = cast(meta[relay.Constant][49] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1251 = reshape(%1250, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), float32] */;
  %1252 = @func_3552(%1251) /* ty=(Tensor[(3, 1, 7), float32],) */;
  %1253 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %1254 = @func_2190(%1248, %1249) /* ty=Tensor[(3, 6, 14), bool] */;
  %1255 = %1252.0;
  (%1253, %1254, meta[relay.Constant][48] /* ty=Tensor[(252), bool] */, %1255, meta[relay.Constant][49] /* ty=Tensor[(21), float32] */)
}

def @func_18643(%var_18641: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64], Tensor[(726), int32], Tensor[(726), int16]) {
  @func_18640(%var_18641) /* ty=(Tensor[(4, 13, 4), float64], Tensor[(726), int32], Tensor[(726), int16]) */
}

def @func_13499() -> (Tensor[(15, 12, 2), float64],) {
  %1258 = fn () -> (Tensor[(15, 12, 2), float64],) {
    %1256 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
    %1257 = %1256.0;
    (%1257,)
  };
  %1258() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_15708() -> Tensor[(1, 3, 4), uint32] {
  %1260 = fn () -> Tensor[(1, 3, 4), uint32] {
    %1259 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %1259.0
  };
  %1260() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_7309(%var_7246: Tensor[(726), int16]) -> (Tensor[(726), float64], Tensor[(15, 12, 2), float64], Tensor[(4, 11, 8), uint16], Tensor[(12), uint32]) {
  %1261 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %1262 = %1261.0;
  %1263 = cast(%var_7246, dtype="float64") /* ty=Tensor[(726), float64] */;
  %1264 = shape_of(%1262, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1265 = cast(%1262, dtype="float64") /* ty=Tensor[(726), float64] */;
  %1266 = dyn.reshape(%1263, %1264, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1267 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1268 = cast(meta[relay.Constant][50] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1269 = reshape(%1268, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1270 = @func_7220(%1269) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %1271 = floor_divide(%1265, %1266) /* ty=Tensor[(726), float64] */;
  %1272 = %1267.0;
  %1273 = %1270.1;
  (%1271, %1272, %1273, meta[relay.Constant][50] /* ty=Tensor[(12), uint32] */)
}

def @func_18694() -> (Tensor[(252), bool], Tensor[(21), int8], Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  @func_18692() /* ty=(Tensor[(252), bool], Tensor[(21), int8], Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) */
}

def @func_21436() -> (Tensor[(21), float32], Tensor[(15, 12, 2), float64]) {
  %1274 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %1275 = %1274.0;
  %1276 = @func_20746() /* ty=Tensor[(15, 12, 2), float64] */;
  (%1275, %1276)
}

def @func_10348(%var_10336: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64], Tensor[(1, 3, 4), uint32]) {
  %1277 = cast(%var_10336, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %1278 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(3, 2, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1279 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 2, 12), int64] */, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %1280 = dyn.reshape(%1277, %1278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1281 = @func_9787() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(11, 6, 11), int16]) */;
  %1282 = bitwise_or(%1279, %1280) /* ty=Tensor[(3, 2, 12), int64] */;
  %1283 = %1281.0;
  (%1282, %1283)
}

def @func_12773() -> (Tensor[(15, 12, 2), float64], Tensor[(252), bool]) {
  %1284 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1285 = %1284.0;
  %1286 = cast(%1285, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %1287 = @func_8725() /* ty=(Tensor[(252), bool],) */;
  %1288 = log(%1286) /* ty=Tensor[(15, 12, 2), float64] */;
  %1289 = %1287.0;
  (%1288, %1289)
}

def @func_18578() -> Tensor[(1, 3, 4), uint32] {
  @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_19172() -> (Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) {
  @func_19170() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(15, 12, 2), bool]) */
}

def @func_13376() -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) {
  %1290 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1291 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
  %1292 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %1293 = @func_9923() /* ty=(Tensor[(12, 4), int16],) */;
  %1294 = @func_9267() /* ty=(Tensor[(12, 4, 5), float32],) */;
  %1295 = %1290.0;
  %1296 = %1291.0;
  %1297 = %1292.0;
  %1298 = %1293.0;
  %1299 = %1294.0;
  (%1295, %1296, %1297, %1298, %1299)
}

def @func_15420() -> (Tensor[(1, 3, 4), float64], Tensor[(15, 12, 2), float64]) {
  %1304 = fn () -> (Tensor[(1, 3, 4), float64], Tensor[(15, 12, 2), float64]) {
    %1300 = @func_11812() /* ty=(Tensor[(1, 3, 4), float64],) */;
    %1301 = @func_6912() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1302 = %1300.0;
    %1303 = %1301.0;
    (%1302, %1303)
  };
  %1304() /* ty=(Tensor[(1, 3, 4), float64], Tensor[(15, 12, 2), float64]) */
}

def @func_18866(%var_18863: Tensor[(1248), float64], %var_18864: Tensor[(726), int16], %var_18865: Tensor[(726), int16]) -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(1248), float64], Tensor[(726), int64], Tensor[(1, 3, 4), uint32]) {
  %1320 = fn (%var_18822: Tensor[(1248), float64], %var_18823: Tensor[(726), int16], %var_18844: Tensor[(726), int16]) -> (Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(1248), float64], Tensor[(726), int64], Tensor[(1, 3, 4), uint32]) {
    %1305 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %1306 = cast(%var_18822, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %1307 = cast(%var_18823, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1308 = reshape(%1306, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
    %1309 = reshape(%1307, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %1310 = @func_13171(%1308, %1309) /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) */;
    %1311 = cast(%var_18844, dtype="int64") /* ty=Tensor[(726), int64] */;
    %1312 = shape_of(%var_18823, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1313 = cast(%var_18823, dtype="int64") /* ty=Tensor[(726), int64] */;
    %1314 = dyn.reshape(%1311, %1312, newshape=[]) /* ty=Tensor[(?), int64] */;
    %1315 = @func_9362() /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %1316 = %1305.0;
    %1317 = %1310.4;
    %1318 = logical_xor(%1313, %1314) /* ty=Tensor[(726), int64] */;
    %1319 = %1315.0;
    (%1316, %1317, %var_18822, %1318, %1319)
  };
  %1320(%var_18863, %var_18864, %var_18865) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(1248), float64], Tensor[(726), int64], Tensor[(1, 3, 4), uint32]) */
}

def @func_7431(%var_7429: Tensor[(21), float32]) -> (Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) {
  @func_7428(%var_7429) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */
}

def @func_12702() -> (Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) {
  %1336 = fn () -> (Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) {
    %1321 = @func_9923() /* ty=(Tensor[(12, 4), int16],) */;
    %1322 = cast(meta[relay.Constant][54] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %1323 = reshape(%1322, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
    %1324 = @func_5719(%1323) /* ty=(Tensor[(2, 14, 14), float32],) */;
    %1325 = cast(meta[relay.Constant][52] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %1326 = cast(meta[relay.Constant][53] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %1327 = reshape(%1325, newshape=[420, 1]) /* ty=Tensor[(420, 1), float64] */;
    %1328 = reshape(%1326, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1329 = @func_8332(%1327, %1328) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(6, 10, 7), float64], Tensor[(420, 1), float64], Tensor[(12), uint32], Tensor[(3, 4), uint32]) */;
    %1330 = %1329.2;
    %1331 = cast(meta[relay.Constant][54] /* ty=Tensor[(392), float32] */, dtype="bool") /* ty=Tensor[(392), bool] */;
    %1332 = cast(%1330, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
    %1333 = %1321.0;
    %1334 = %1324.0;
    %1335 = logical_and(%1331, %1332) /* ty=Tensor[(420, 392), bool] */;
    (%1333, meta[relay.Constant][52] /* ty=Tensor[(420), float64] */, meta[relay.Constant][53] /* ty=Tensor[(12), uint32] */, %1334, %1335)
  };
  %1336() /* ty=(Tensor[(12, 4), int16], Tensor[(420), float64], Tensor[(12), uint32], Tensor[(2, 14, 14), float32], Tensor[(420, 392), bool]) */
}

def @func_18692() -> (Tensor[(252), bool], Tensor[(21), int8], Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  %1337 = @func_13026() /* ty=(Tensor[(252), bool],) */;
  %1338 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1339 = reshape(%1338, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %1340 = @func_7428(%1339) /* ty=(Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32], Tensor[(252), bool]) */;
  %1341 = %1340.2;
  %1342 = cast(%1341, dtype="int8") /* ty=Tensor[(21), int8] */;
  %1343 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1344 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="int8") /* ty=Tensor[(21), int8] */;
  %1345 = dyn.reshape(%1342, %1343, newshape=[]) /* ty=Tensor[(?), int8] */;
  %1346 = @func_16406() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(15, 12, 2), int32]) */;
  %1347 = %1337.0;
  %1348 = bitwise_and(%1344, %1345) /* ty=Tensor[(21), int8] */;
  %1349 = @func_15794() /* ty=Tensor[(252), bool] */;
  %1350 = %1346.1;
  (%1347, %1348, %1349, %1350)
}

def @func_12658() -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) {
  %1367 = fn () -> (Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) {
    %1351 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
    %1352 = cast(meta[relay.Constant][56] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1353 = reshape(%1352, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %1354 = @func_8064(%1353) /* ty=(Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %1355 = cast(meta[relay.Constant][57] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %1356 = cast(meta[relay.Constant][57] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %1357 = %1351.0;
    %1358 = cast(%1357, dtype="uint32") /* ty=Tensor[(1, 3, 4), uint32] */;
    %1359 = reshape(%1355, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %1360 = reshape(%1356, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %1361 = reshape(%1358, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1362 = @func_2408(%1359, %1360, %1361) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
    %1363 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
    %1364 = %1354.3;
    %1365 = %1362.3;
    %1366 = %1363.0;
    (%1357, %1364, meta[relay.Constant][56] /* ty=Tensor[(726), int16] */, %1365, meta[relay.Constant][57] /* ty=Tensor[(210, 2), float64] */, %1366)
  };
  %1367() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(726), int16], Tensor[(726), int16], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(12, 4), int16]) */
}

def @func_15175() -> (Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) {
  @func_15173() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32]) */
}

def @func_21312() -> (Tensor[(6, 2), uint32], Tensor[(3, 6, 14), bool], Tensor[(1848), float32]) {
  %1374 = fn () -> (Tensor[(6, 2), uint32], Tensor[(3, 6, 14), bool], Tensor[(1848), float32]) {
    %1368 = @func_15771() /* ty=(Tensor[(11, 6, 11), float64], Tensor[(12), uint32], Tensor[(6, 2), uint32]) */;
    %1369 = cast(meta[relay.Constant][58] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %1370 = reshape(%1369, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
    %1371 = @func_21112(%1370) /* ty=(Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) */;
    %1372 = %1368.2;
    %1373 = %1371.1;
    (%1372, %1373, meta[relay.Constant][58] /* ty=Tensor[(1848), float32] */)
  };
  %1374() /* ty=(Tensor[(6, 2), uint32], Tensor[(3, 6, 14), bool], Tensor[(1848), float32]) */
}

def @func_6799() -> (Tensor[(252), bool],) {
  @func_6797() /* ty=(Tensor[(252), bool],) */
}

def @func_8764() -> (Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) {
  @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */
}

def @func_15880(%var_15845: Tensor[(6, 14, 12), int8]) -> (Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) {
  %1375 = cast(%var_15845, dtype="int8") /* ty=Tensor[(6, 14, 12), int8] */;
  %1376 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(6, 14, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1377 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 14, 12), int8] */, dtype="int8") /* ty=Tensor[(6, 14, 12), int8] */;
  %1378 = dyn.reshape(%1375, %1376, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1379 = @func_11820() /* ty=(Tensor[(1, 3, 4), float64],) */;
  %1380 = @func_9310() /* ty=(Tensor[(432), int16],) */;
  %1381 = right_shift(%1377, %1378) /* ty=Tensor[(6, 14, 12), int8] */;
  %1382 = %1379.0;
  %1383 = %1380.0;
  (%1381, %1382, %1383)
}

def @func_8865() -> (Tensor[(726), int16],) {
  %1384 = @func_6861() /* ty=(Tensor[(3, 6, 14), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
  %1385 = %1384.2;
  (%1385,)
}

def @func_14319() -> (Tensor[(21), float32],) {
  %1388 = fn () -> (Tensor[(21), float32],) {
    %1386 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
    %1387 = %1386.0;
    (%1387,)
  };
  %1388() /* ty=(Tensor[(21), float32],) */
}

def @func_10393() -> Tensor[(252), bool] {
  %1389 = @func_8646() /* ty=(Tensor[(252), bool], Tensor[(15, 12, 2), int32]) */;
  %1389.0
}

def @func_17705(%var_17668: Tensor[(8, 12, 13), float32]) -> (Tensor[(8, 12, 13), float32], Tensor[(15, 12, 2), bool]) {
  %1390 = cast(%var_17668, dtype="float32") /* ty=Tensor[(8, 12, 13), float32] */;
  %1391 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1392 = sqrt(%1390) /* ty=Tensor[(8, 12, 13), float32] */;
  %1393 = %1391.0;
  (%1392, %1393)
}

def @func_20395() -> (Tensor[(11, 66), bool],) {
  @func_20393() /* ty=(Tensor[(11, 66), bool],) */
}

def @func_14206() -> Tensor[(12), uint32] {
  %1395 = fn () -> Tensor[(12), uint32] {
    %1394 = @func_12857() /* ty=(Tensor[(12), uint32],) */;
    %1394.0
  };
  %1395() /* ty=Tensor[(12), uint32] */
}

def @func_9842() -> (Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) {
  @func_9840() /* ty=(Tensor[(726), int16], Tensor[(21), float32], Tensor[(21), float32]) */
}

def @func_16870() -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
  @func_16868() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */
}

def @func_11695() -> (Tensor[(15, 12, 2), bool],) {
  %1396 = @func_11017() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1397 = %1396.0;
  (%1397,)
}

def @func_2408(%var_2380: Tensor[(6, 10, 7), float64], %var_2381: Tensor[(6, 10, 7), float64], %var_2389: Tensor[(12), uint32]) -> (Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) {
  %1398 = cast(%var_2381, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %1399 = shape_of(%var_2380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1400 = cast(%var_2380, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %1401 = dyn.reshape(%1398, %1399, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1402 = cast(%var_2389, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1403 = reshape(%1402, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint32] */;
  %1404 = @func_2228(%1403) /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1405 = cast(%var_2381, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %1406 = divide(%1400, %1401) /* ty=Tensor[(6, 10, 7), float64] */;
  %1407 = %1404.0;
  %1408 = atan(%1405) /* ty=Tensor[(6, 10, 7), float64] */;
  (%1406, %1407, %var_2389, %1408)
}

def @func_1248(%var_1246: Tensor[(11, 66), int16]) -> (Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) {
  @func_1245(%var_1246) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */
}

def @func_7667(%var_7645: Tensor[(12), uint32]) -> (Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %1409 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1410 = cast(%var_7645, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1411 = reshape(%1410, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1412 = @func_7220(%1411) /* ty=(Tensor[(726), int16], Tensor[(4, 11, 8), uint16], Tensor[(432), int16], Tensor[(12), uint32], Tensor[(12), uint32]) */;
  %1413 = %1409.0;
  %1414 = %1412.3;
  (%1413, %1414, %var_7645)
}

def @func_10952() -> (Tensor[(12, 4), int16],) {
  @func_10950() /* ty=(Tensor[(12, 4), int16],) */
}

def @func_10297(%var_10295: Tensor[(1232), float32]) -> (Tensor[(15, 12, 2), bool], Tensor[(8, 14, 11), float32], Tensor[(1232), float32]) {
  @func_10294(%var_10295) /* ty=(Tensor[(15, 12, 2), bool], Tensor[(8, 14, 11), float32], Tensor[(1232), float32]) */
}

def @func_12940() -> Tensor[(1, 3, 4), uint32] {
  %1415 = @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */;
  %1415.1
}

def @func_13575(%var_13561: Tensor[(616), float32]) -> (Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) {
  %1416 = @func_8970() /* ty=(Tensor[(252), bool],) */;
  %1417 = @func_12455() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12, 4, 5), float32], Tensor[(1, 3, 4), uint32], Tensor[(1248), float64], Tensor[(4, 11, 8), uint16]) */;
  %1418 = cast(meta[relay.Constant][60] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1419 = reshape(%1418, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1420 = @func_10016(%1419) /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 420), float64], Tensor[(12), uint32]) */;
  %1421 = cast(%var_13561, dtype="float32") /* ty=Tensor[(616), float32] */;
  %1422 = reshape(%1421, newshape=[4, 11, 14]) /* ty=Tensor[(4, 11, 14), float32] */;
  %1423 = @func_7999(%1422) /* ty=(Tensor[(4, 11, 14), float32],) */;
  %1424 = %1416.0;
  %1425 = %1417.3;
  %1426 = %1420.1;
  %1427 = %1423.0;
  (%1424, %1425, %1426, meta[relay.Constant][60] /* ty=Tensor[(12), uint32] */, %1427, %var_13561)
}

def @func_12975(%var_12960: Tensor[(392), float32]) -> (Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) {
  %1428 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
  %1429 = cast(%var_12960, dtype="float32") /* ty=Tensor[(392), float32] */;
  %1430 = reshape(%1429, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), float32] */;
  %1431 = @func_5719(%1430) /* ty=(Tensor[(2, 14, 14), float32],) */;
  %1432 = @func_12318() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) */;
  %1433 = atanh(%1428) /* ty=Tensor[(2, 7, 11), float64] */;
  %1434 = %1431.0;
  %1435 = %1432.0;
  (%1433, %1434, %var_12960, %1435)
}

def @func_21115(%var_21113: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) {
  @func_21112(%var_21113) /* ty=(Tensor[(14, 11, 12), float32], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 4), uint32]) */
}

def @func_13174(%var_13172: Tensor[(1248), float64], %var_13173: Tensor[(726), int16]) -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) {
  %1446 = fn (%var_13146: Tensor[(1248), float64], %var_13147: Tensor[(726), int16]) -> (Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) {
    %1436 = @func_6751() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(3, 1, 7), float32], Tensor[(21), float32]) */;
    %1437 = cast(%var_13146, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %1438 = cast(%var_13147, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1439 = reshape(%1437, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), float64] */;
    %1440 = reshape(%1438, newshape=[726]) /* ty=Tensor[(726), int16] */;
    %1441 = @func_828(%1439, %1440) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(726), int8], Tensor[(11, 6, 11), int16]) */;
    %1442 = @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1443 = %1436.3;
    %1444 = %1441.2;
    %1445 = %1442.0;
    (%1443, %1444, %var_13146, %var_13147, %1445)
  };
  %1446(%var_13172, %var_13173) /* ty=(Tensor[(3, 1, 7), float32], Tensor[(11, 6, 11), int16], Tensor[(1248), float64], Tensor[(726), int16], Tensor[(15, 12, 2), float64]) */
}

def @func_17777() -> (Tensor[(1248), float64], Tensor[(15, 12, 2), int32]) {
  %1447 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1448 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %1449 = %1447.0;
  %1450 = %1448.0;
  (%1449, %1450)
}

def @func_19907(%var_19905: Tensor[(15, 9, 15), float32]) -> (Tensor[(15, 9, 15), float32],) {
  @func_19904(%var_19905) /* ty=(Tensor[(15, 9, 15), float32],) */
}

def @func_21573() -> Tensor[(726), int16] {
  %1452 = fn () -> Tensor[(726), int16] {
    %1451 = @func_20177() /* ty=(Tensor[(726), int16],) */;
    %1451.0
  };
  %1452() /* ty=Tensor[(726), int16] */
}

def @func_9182(%var_9180: Tensor[(2, 9, 2), bool], %var_9181: Tensor[(2, 9, 2), bool]) -> Tensor[(2, 9, 2), bool] {
  @func_9178(%var_9180, %var_9181) /* ty=Tensor[(2, 9, 2), bool] */
}

def @func_14313(%var_14311: Tensor[(726, 1), int16]) -> (Tensor[(12, 4, 5), float32], Tensor[(726), int32], Tensor[(726, 1), int16], Tensor[(726), float32]) {
  @func_14310(%var_14311) /* ty=(Tensor[(12, 4, 5), float32], Tensor[(726), int32], Tensor[(726, 1), int16], Tensor[(726), float32]) */
}

def @func_16996() -> Tensor[(15, 12, 2), bool] {
  @func_16994() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_21267() -> (Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
  %1456 = fn () -> (Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) {
    %1453 = @func_11196() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1454 = @func_14205() /* ty=Tensor[(12), uint32] */;
    %1455 = %1453.0;
    (%1454, %1455)
  };
  %1456() /* ty=(Tensor[(12), uint32], Tensor[(15, 12, 2), float64]) */
}

def @func_19119(%var_19117: Tensor[(120), uint16]) -> (Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) {
  @func_19116(%var_19117) /* ty=(Tensor[(16, 16, 3), bool], Tensor[(21), float32], Tensor[(2, 15, 4), uint16], uint16, Tensor[(120), uint16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), uint32]) */
}

def @func_13915(%var_13914: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
  %1463 = fn (%var_13901: Tensor[(12), uint32]) -> (Tensor[(15, 12, 2), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
    %1457 = @func_13872() /* ty=(Tensor[(15, 12, 2), float64],) */;
    %1458 = cast(%var_13901, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %1459 = reshape(%1458, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1460 = @func_7667(%1459) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */;
    %1461 = %1457.0;
    %1462 = %1460.2;
    (%1461, %1462, %var_13901)
  };
  %1463(%var_13914) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */
}

def @func_9764() -> Tensor[(1, 3, 4), uint32] {
  @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_7543(%var_7541: Tensor[(8, 14, 11), float32], %var_7542: Tensor[(8, 14, 11), float32]) -> (Tensor[(8, 14, 11), float32],) {
  @func_7539(%var_7541, %var_7542) /* ty=(Tensor[(8, 14, 11), float32],) */
}

def @func_10323() -> (Tensor[(1, 3, 4), uint32],) {
  @func_10321() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_9636(%var_9629: Tensor[(16, 16, 3), bool]) -> Tensor[(16, 16, 3), int64] {
  %1464 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1465 = %1464.1;
  %1466 = cast(%var_9629, dtype="int64") /* ty=Tensor[(16, 16, 3), int64] */;
  %1467 = shape_of(%1465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1468 = cast(%1465, dtype="int64") /* ty=Tensor[(16, 16, 3), int64] */;
  %1469 = dyn.reshape(%1466, %1467, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%1468, %1469) /* ty=Tensor[(16, 16, 3), int64] */
}

def @func_9155() -> Tensor[(1, 3, 4), uint32] {
  %1471 = fn () -> Tensor[(1, 3, 4), uint32] {
    %1470 = @func_8762() /* ty=(Tensor[(726), int16], Tensor[(1, 3, 4), uint32], Tensor[(432), int16], Tensor[(12), uint32]) */;
    %1470.1
  };
  %1471() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_13640() -> Tensor[(12, 4), int16] {
  @func_13638() /* ty=Tensor[(12, 4), int16] */
}

def @func_15474() -> (Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) {
  %1472 = @func_10548() /* ty=(Tensor[(1, 3, 4), uint32],) */;
  %1473 = @func_8216() /* ty=(Tensor[(21), float32],) */;
  %1474 = %1472.0;
  %1475 = %1473.0;
  (%1474, %1475)
}

def @func_944(%var_942: Tensor[(3, 16, 9), int16], %var_943: Tensor[(3, 16, 9), int16]) -> (Tensor[(3, 16, 9), int16],) {
  @func_940(%var_942, %var_943) /* ty=(Tensor[(3, 16, 9), int16],) */
}

def @func_9230(%var_9228: Tensor[(6, 20), int64], %var_9229: Tensor[(210, 2), float64]) -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(4, 15, 2), int64], int64, Tensor[(6, 20), int64], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(3, 4), uint32]) {
  %1495 = fn (%var_9214: Tensor[(6, 20), int64], %var_9221: Tensor[(210, 2), float64]) -> (Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(4, 15, 2), int64], int64, Tensor[(6, 20), int64], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(3, 4), uint32]) {
    %1476 = cast(meta[relay.Constant][62] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %1477 = cast(meta[relay.Constant][62] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %1478 = reshape(%1476, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
    %1479 = reshape(%1477, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
    %1480 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %1481 = cast(%var_9214, dtype="int64") /* ty=Tensor[(6, 20), int64] */;
    %1482 = reshape(%1480, newshape=[]) /* ty=int64 */;
    %1483 = reshape(%1481, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), int64] */;
    %1484 = cast(%var_9221, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %1485 = cast(%var_9221, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %1486 = cast(meta[relay.Constant][63] /* ty=Tensor[(3, 4), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4), uint32] */;
    %1487 = reshape(%1484, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %1488 = reshape(%1485, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %1489 = reshape(%1486, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %1490 = @func_2408(%1487, %1488, %1489) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(6, 10, 7), float64]) */;
    %1491 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
    %1492 = @func_2190(%1478, %1479) /* ty=Tensor[(3, 6, 14), bool] */;
    %1493 = @func_5255(%1482, %1483) /* ty=Tensor[(4, 15, 2), int64] */;
    %1494 = %1490.0;
    (%1491, %1492, meta[relay.Constant][62] /* ty=Tensor[(252), bool] */, %1493, -10 /* ty=int64 */, %var_9214, %1494, %var_9221, meta[relay.Constant][63] /* ty=Tensor[(3, 4), uint32] */)
  };
  %1495(%var_9228, %var_9229) /* ty=(Tensor[(15, 12, 2), float64], Tensor[(3, 6, 14), bool], Tensor[(252), bool], Tensor[(4, 15, 2), int64], int64, Tensor[(6, 20), int64], Tensor[(6, 10, 7), float64], Tensor[(210, 2), float64], Tensor[(3, 4), uint32]) */
}

def @func_18793() -> (Tensor[(726), int16], Tensor[(21), float32]) {
  %1496 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
  %1497 = @func_9621() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */;
  %1498 = %1497.0;
  %1499 = cast(%1498, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1500 = %1496.0;
  %1501 = log10(%1499) /* ty=Tensor[(21), float32] */;
  (%1500, %1501)
}

def @func_11940() -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
  %1506 = fn () -> (Tensor[(15, 12, 2), int32], Tensor[(726), int16]) {
    %1502 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
    %1503 = @func_7178() /* ty=(Tensor[(726), int16], Tensor[(726), float32]) */;
    %1504 = %1502.7;
    %1505 = %1503.0;
    (%1504, %1505)
  };
  %1506() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(726), int16]) */
}

def @func_12248() -> (Tensor[(16, 16, 3), bool],) {
  %1509 = fn () -> (Tensor[(16, 16, 3), bool],) {
    %1507 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
    %1508 = %1507.1;
    (%1508,)
  };
  %1509() /* ty=(Tensor[(16, 16, 3), bool],) */
}

def @func_11697() -> (Tensor[(15, 12, 2), bool],) {
  @func_11695() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_11017() -> (Tensor[(15, 12, 2), bool],) {
  %1510 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
  %1511 = %1510.1;
  (%1511,)
}

def @func_9935() -> Tensor[(3, 4), uint32] {
  %1513 = fn () -> Tensor[(3, 4), uint32] {
    %1512 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
    %1512.0
  };
  %1513() /* ty=Tensor[(3, 4), uint32] */
}

def @func_15217() -> Tensor[(1, 3, 4), uint32] {
  %1514 = @func_9332() /* ty=(Tensor[(252), bool], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), float32]) */;
  %1514.1
}

def @func_11263() -> (Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) {
  @func_11261() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(1, 3, 4), uint32]) */
}

def @func_9342() -> (Tensor[(12, 4), int16],) {
  %1515 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
  %1516 = %1515.2;
  (%1516,)
}

def @func_20178() -> (Tensor[(726), int16],) {
  %1519 = fn () -> (Tensor[(726), int16],) {
    %1517 = @func_19332() /* ty=(Tensor[(252), bool], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) */;
    %1518 = %1517.2;
    (%1518,)
  };
  %1519() /* ty=(Tensor[(726), int16],) */
}

def @func_4052(%var_4050: Tensor[(36, 12), int16], %var_4051: Tensor[(12), uint32]) -> (Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) {
  @func_4048(%var_4050, %var_4051) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(36, 12), int16], Tensor[(3, 16, 9), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32]) */
}

def @func_9311() -> (Tensor[(432), int16],) {
  %1522 = fn () -> (Tensor[(432), int16],) {
    %1520 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
    %1521 = %1520.1;
    (%1521,)
  };
  %1522() /* ty=(Tensor[(432), int16],) */
}

def @func_9049() -> (Tensor[(15, 12, 2), float64],) {
  %1523 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  (%1523,)
}

def @func_17347() -> (Tensor[(1, 3, 4), uint32],) {
  %1524 = @func_9762() /* ty=Tensor[(1, 3, 4), uint32] */;
  (%1524,)
}

def @func_20645(%var_20643: Tensor[(726), int16], %var_20644: Tensor[(726), int16]) -> (Tensor[(21), float32], Tensor[(11, 6, 11), int16], Tensor[(8, 12, 13), float64], Tensor[(726), bool], Tensor[(726), bool]) {
  %1546 = fn (%var_20610: Tensor[(726), int16], %var_20627: Tensor[(726), int16]) -> (Tensor[(21), float32], Tensor[(11, 6, 11), int16], Tensor[(8, 12, 13), float64], Tensor[(726), bool], Tensor[(726), bool]) {
    %1525 = @func_15474() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) */;
    %1526 = cast(meta[relay.Constant][64] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1527 = cast(meta[relay.Constant][64] /* ty=Tensor[(726), int16] */, dtype="int16") /* ty=Tensor[(726), int16] */;
    %1528 = reshape(%1526, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
    %1529 = reshape(%1527, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
    %1530 = @func_697(%1528, %1529) /* ty=Tensor[(11, 6, 11), int16] */;
    %1531 = cast(%1530, dtype="int16") /* ty=Tensor[(11, 6, 11), int16] */;
    %1532 = reshape(%1531, newshape=[11, 66]) /* ty=Tensor[(11, 66), int16] */;
    %1533 = @func_1245(%1532) /* ty=(Tensor[(8, 12, 13), float32], Tensor[(8, 12, 13), float64], Tensor[(3, 16, 9), int16], Tensor[(2, 216), int16], Tensor[(11, 6, 11), int16], Tensor[(11, 66), int16]) */;
    %1534 = cast(%var_20610, dtype="bool") /* ty=Tensor[(726), bool] */;
    %1535 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(726), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1536 = cast(meta[relay.Constant][64] /* ty=Tensor[(726), int16] */, dtype="bool") /* ty=Tensor[(726), bool] */;
    %1537 = dyn.reshape(%1534, %1535, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1538 = cast(%var_20627, dtype="bool") /* ty=Tensor[(726), bool] */;
    %1539 = shape_of(%var_20610, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1540 = cast(%var_20610, dtype="bool") /* ty=Tensor[(726), bool] */;
    %1541 = dyn.reshape(%1538, %1539, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1542 = %1525.1;
    %1543 = %1533.1;
    %1544 = less(%1536, %1537) /* ty=Tensor[(726), bool] */;
    %1545 = less_equal(%1540, %1541) /* ty=Tensor[(726), bool] */;
    (%1542, %1530, %1543, %1544, %1545)
  };
  %1546(%var_20643, %var_20644) /* ty=(Tensor[(21), float32], Tensor[(11, 6, 11), int16], Tensor[(8, 12, 13), float64], Tensor[(726), bool], Tensor[(726), bool]) */
}

def @func_17349() -> (Tensor[(1, 3, 4), uint32],) {
  @func_17347() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_12320() -> (Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) {
  @func_12318() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), float64]) */
}

def @func_9127() -> (Tensor[(15, 12, 2), float64],) {
  @func_9125() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_7492() -> Tensor[(15, 12, 2), float64] {
  %1547 = fn () -> Tensor[(15, 12, 2), float64] {
    @func_6630() /* ty=Tensor[(15, 12, 2), float64] */
  };
  %1547() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_16460() -> Tensor[(1, 3, 4), uint32] {
  %1549 = fn () -> Tensor[(1, 3, 4), uint32] {
    %1548 = @func_15474() /* ty=(Tensor[(1, 3, 4), uint32], Tensor[(21), float32]) */;
    %1548.0
  };
  %1549() /* ty=Tensor[(1, 3, 4), uint32] */
}

def @func_11820() -> (Tensor[(1, 3, 4), float64],) {
  %1550 = @func_11504() /* ty=(Tensor[(11, 6, 11), int16], Tensor[(1, 3, 4), uint32], Tensor[(1, 3, 4), float64]) */;
  %1551 = %1550.2;
  (%1551,)
}

def @func_8145(%var_8135: Tensor[(726), int16]) -> (Tensor[(726), int32],) {
  %1552 = @func_6964() /* ty=Tensor[(726), int16] */;
  %1553 = cast(%var_8135, dtype="int32") /* ty=Tensor[(726), int32] */;
  %1554 = shape_of(%1552, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1555 = cast(%1552, dtype="int32") /* ty=Tensor[(726), int32] */;
  %1556 = dyn.reshape(%1553, %1554, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1557 = bitwise_xor(%1555, %1556) /* ty=Tensor[(726), int32] */;
  (%1557,)
}

def @func_21588() -> Tensor[(16, 16, 3), bool] {
  @func_12528() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_16281() -> (Tensor[(15, 12, 2), bool],) {
  %1560 = fn () -> (Tensor[(15, 12, 2), bool],) {
    %1558 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
    %1559 = %1558.0;
    (%1559,)
  };
  %1560() /* ty=(Tensor[(15, 12, 2), bool],) */
}

def @func_19228() -> (Tensor[(8, 5, 16), float32],) {
  %1563 = fn () -> (Tensor[(8, 5, 16), float32],) {
    %1561 = cast(meta[relay.Constant][65] /* ty=Tensor[(8, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
    %1562 = asin(%1561) /* ty=Tensor[(8, 5, 16), float32] */;
    (%1562,)
  };
  %1563() /* ty=(Tensor[(8, 5, 16), float32],) */
}

def @func_14505() -> (Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) {
  %1572 = fn () -> (Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) {
    %1564 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
    %1565 = @func_8197() /* ty=(Tensor[(3, 4), uint32], Tensor[(432), int16]) */;
    %1566 = @func_14318() /* ty=(Tensor[(21), float32],) */;
    %1567 = @func_14439() /* ty=(Tensor[(15, 12, 2), int32],) */;
    %1568 = %1564.1;
    %1569 = %1565.1;
    %1570 = %1566.0;
    %1571 = %1567.0;
    (%1568, %1569, %1570, %1571)
  };
  %1572() /* ty=(Tensor[(432), int16], Tensor[(432), int16], Tensor[(21), float32], Tensor[(15, 12, 2), int32]) */
}

def @func_10549() -> (Tensor[(1, 3, 4), uint32],) {
  %1575 = fn () -> (Tensor[(1, 3, 4), uint32],) {
    %1573 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
    %1574 = %1573.1;
    (%1574,)
  };
  %1575() /* ty=(Tensor[(1, 3, 4), uint32],) */
}

def @func_21012() -> Tensor[(15, 12, 2), float64] {
  @func_21010() /* ty=Tensor[(15, 12, 2), float64] */
}

def @func_3554(%var_3553: Tensor[(3, 1, 7), float32]) -> (Tensor[(3, 1, 7), float32],) {
  %1578 = fn (%var_3541: Tensor[(3, 1, 7), float32]) -> (Tensor[(3, 1, 7), float32],) {
    %1576 = cast(%var_3541, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
    %1577 = log(%1576) /* ty=Tensor[(3, 1, 7), float32] */;
    (%1577,)
  };
  %1578(%var_3553) /* ty=(Tensor[(3, 1, 7), float32],) */
}

def @func_13578(%var_13576: Tensor[(616), float32]) -> (Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) {
  @func_13575(%var_13576) /* ty=(Tensor[(252), bool], Tensor[(1248), float64], Tensor[(1, 3, 4), uint32], Tensor[(12), uint32], Tensor[(4, 11, 14), float32], Tensor[(616), float32]) */
}

def @func_7911(%var_7909: Tensor[(21, 1), float32]) -> (Tensor[(3, 6, 14), float32], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32]) {
  @func_7908(%var_7909) /* ty=(Tensor[(3, 6, 14), float32], Tensor[(3, 1, 7), float32], Tensor[(21, 1), float32]) */
}

def @func_16684() -> (Tensor[(432), int16], Tensor[(1, 3, 4), uint32]) {
  @func_16682() /* ty=(Tensor[(432), int16], Tensor[(1, 3, 4), uint32]) */
}

def @func_14132() -> Tensor[(21), float32] {
  %1579 = @func_9490() /* ty=(Tensor[(21), float32], Tensor[(1, 3, 4), uint32]) */;
  %1579.0
}

def @func_7670(%var_7668: Tensor[(12), uint32]) -> (Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) {
  @func_7667(%var_7668) /* ty=(Tensor[(1248), float64], Tensor[(12), uint32], Tensor[(12), uint32]) */
}

def @func_15794() -> Tensor[(252), bool] {
  %1580 = @func_6797() /* ty=(Tensor[(252), bool],) */;
  %1580.0
}

def @func_20024() -> Tensor[(15, 12, 2), bool] {
  @func_20022() /* ty=Tensor[(15, 12, 2), bool] */
}

def @func_16619(%var_16617: Tensor[(12, 4, 5), float32], %var_16618: Tensor[(12, 4, 5), float32]) -> (Tensor[(3, 4), uint32], Tensor[(12, 4, 5), uint64], Tensor[(12, 4, 5), int32], Tensor[(11, 66), int16], Tensor[(252), bool], Tensor[(21), float32], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), uint16], Tensor[(48), int16]) {
  @func_16615(%var_16617, %var_16618) /* ty=(Tensor[(3, 4), uint32], Tensor[(12, 4, 5), uint64], Tensor[(12, 4, 5), int32], Tensor[(11, 66), int16], Tensor[(252), bool], Tensor[(21), float32], Tensor[(1, 3, 4), uint32], Tensor[(12, 4, 5), uint16], Tensor[(48), int16]) */
}

def @func_8064(%var_8052: Tensor[(726), int16]) -> (Tensor[(3, 16, 9), int16], Tensor[(15, 12, 2), float64], Tensor[(11, 6, 11), int16], Tensor[(726), int16]) {
  %1581 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
  %1582 = cast(%var_8052, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1583 = cast(%var_8052, dtype="int16") /* ty=Tensor[(726), int16] */;
  %1584 = reshape(%1582, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1585 = reshape(%1583, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), int16] */;
  %1586 = %1581.2;
  %1587 = @func_6630() /* ty=Tensor[(15, 12, 2), float64] */;
  %1588 = @func_697(%1584, %1585) /* ty=Tensor[(11, 6, 11), int16] */;
  (%1586, %1587, %1588, %var_8052)
}

def @func_14420(%var_14419: Tensor[(392), float32]) -> (Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) {
  %1595 = fn (%var_14408: Tensor[(392), float32]) -> (Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) {
    %1589 = @func_10950() /* ty=(Tensor[(12, 4), int16],) */;
    %1590 = cast(%var_14408, dtype="float32") /* ty=Tensor[(392), float32] */;
    %1591 = reshape(%1590, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %1592 = @func_12975(%1591) /* ty=(Tensor[(2, 7, 11), float64], Tensor[(2, 14, 14), float32], Tensor[(392), float32], Tensor[(15, 12, 2), int32]) */;
    %1593 = %1589.0;
    %1594 = %1592.1;
    (%1593, %1594, %var_14408)
  };
  %1595(%var_14419) /* ty=(Tensor[(12, 4), int16], Tensor[(2, 14, 14), float32], Tensor[(392), float32]) */
}

def @func_8930() -> (Tensor[(15, 12, 2), float64],) {
  @func_8928() /* ty=(Tensor[(15, 12, 2), float64],) */
}

def @func_18807() -> (Tensor[(15, 12, 2), bool],) {
  %1596 = @func_15776() /* ty=(Tensor[(15, 12, 2), bool],) */;
  %1597 = %1596.0;
  (%1597,)
}

def @func_8928() -> (Tensor[(15, 12, 2), float64],) {
  %1598 = @func_7491() /* ty=Tensor[(15, 12, 2), float64] */;
  (%1598,)
}

def @func_19875() -> (Tensor[(12, 4, 5), float32], Tensor[(15, 12, 2), int32], Tensor[(432), int16]) {
  %1604 = fn () -> (Tensor[(12, 4, 5), float32], Tensor[(15, 12, 2), int32], Tensor[(432), int16]) {
    %1599 = @func_13376() /* ty=(Tensor[(15, 12, 2), bool], Tensor[(15, 12, 2), float64], Tensor[(252), bool], Tensor[(12, 4), int16], Tensor[(12, 4, 5), float32]) */;
    %1600 = @func_7125() /* ty=(Tensor[(1248), float64], Tensor[(726), int16], Tensor[(3, 16, 9), int16], Tensor[(432), int16], Tensor[(1, 3, 4), uint32], Tensor[(3, 4), uint32], Tensor[(726), float32], Tensor[(15, 12, 2), int32]) */;
    %1601 = %1599.4;
    %1602 = @func_11756() /* ty=Tensor[(15, 12, 2), int32] */;
    %1603 = %1600.3;
    (%1601, %1602, %1603)
  };
  %1604() /* ty=(Tensor[(12, 4, 5), float32], Tensor[(15, 12, 2), int32], Tensor[(432), int16]) */
}

def @func_10950() -> (Tensor[(12, 4), int16],) {
  %1605 = @func_9342() /* ty=(Tensor[(12, 4), int16],) */;
  %1606 = %1605.0;
  (%1606,)
}

def @func_10395() -> Tensor[(252), bool] {
  @func_10393() /* ty=Tensor[(252), bool] */
}

def @func_15883(%var_15881: Tensor[(6, 14, 12), int8]) -> (Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) {
  @func_15880(%var_15881) /* ty=(Tensor[(6, 14, 12), int8], Tensor[(1, 3, 4), float64], Tensor[(432), int16]) */
}

def @func_21438() -> (Tensor[(21), float32], Tensor[(15, 12, 2), float64]) {
  @func_21436() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), float64]) */
}

def @func_12529() -> Tensor[(16, 16, 3), bool] {
  %1608 = fn () -> Tensor[(16, 16, 3), bool] {
    %1607 = @func_8544() /* ty=(Tensor[(15, 12, 2), float64], Tensor[(16, 16, 3), bool], Tensor[(12, 4), int16]) */;
    %1607.1
  };
  %1608() /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_9622() -> (Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
  %1613 = fn () -> (Tensor[(21), float32], Tensor[(15, 12, 2), bool]) {
    %1609 = @func_8216() /* ty=(Tensor[(21), float32],) */;
    %1610 = @func_7931() /* ty=(Tensor[(15, 12, 2), int32], Tensor[(15, 12, 2), bool]) */;
    %1611 = %1609.0;
    %1612 = %1610.1;
    (%1611, %1612)
  };
  %1613() /* ty=(Tensor[(21), float32], Tensor[(15, 12, 2), bool]) */
}

def @func_9639(%var_9637: Tensor[(16, 16, 3), bool]) -> Tensor[(16, 16, 3), int64] {
  @func_9636(%var_9637) /* ty=Tensor[(16, 16, 3), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen902/build/output.py", line 5195, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:42:01] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

