==========mod==========
#[version = "0.0.5"]
def @func_2544() -> (uint16,) {
  %0 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_4969(%var_4962: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float64], Tensor[(672), bool]) {
  %2 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %3 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %4 = %3.3;
  %5 = cast(%var_4962, dtype="bool") /* ty=Tensor[(672), bool] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(%4, dtype="bool") /* ty=Tensor[(672), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), bool] */;
  %9 = %2.0;
  %10 = logical_or(%7, %8) /* ty=Tensor[(672), bool] */;
  (%9, %10)
}

def @func_2698() -> (Tensor[(2, 3, 1), float64],) {
  %11 = @func_2490() /* ty=Tensor[(2, 3, 1), float64] */;
  (%11,)
}

def @func_4845(%var_4836: Tensor[(4, 15, 9), float64], %var_4837: Tensor[(4, 15, 9), float64]) -> Tensor[(4, 15, 9), float64] {
  %12 = cast(%var_4837, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %13 = shape_of(%var_4836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_4836, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%14, %15) /* ty=Tensor[(4, 15, 9), float64] */
}

def @func_4404(%var_4392: Tensor[(2, 252), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(2, 252), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  %16 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %17 = cast(%var_4392, dtype="float64") /* ty=Tensor[(2, 252), float64] */;
  %18 = reshape(%17, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %19 = @func_3993(%18) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %22 = reshape(%20, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %23 = reshape(%21, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %24 = %16.0;
  %25 = %19.0;
  %26 = @func_1809(%22, %23) /* ty=Tensor[(2, 15, 15), bool] */;
  (%24, %25, %var_4392, %26, meta[relay.Constant][0] /* ty=Tensor[(450), int16] */)
}

def @func_3334() -> (Tensor[(11, 14, 8), int32],) {
  %27 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
  (%27,)
}

def @func_2673() -> (Tensor[(11, 14, 8), int32],) {
  %28 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %29 = %28.0;
  (%29,)
}

def @func_983(%var_977: Tensor[(10, 16, 7), uint16]) -> (Tensor[(10, 16, 7), bool],) {
  %30 = cast(%var_977, dtype="bool") /* ty=Tensor[(10, 16, 7), bool] */;
  %31 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(10, 16, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 16, 7), uint16] */, dtype="bool") /* ty=Tensor[(10, 16, 7), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = equal(%32, %33) /* ty=Tensor[(10, 16, 7), bool] */;
  (%34,)
}

def @func_4010() -> Tensor[(2, 3, 1), float64] {
  @func_2490() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_3648(%var_3628: Tensor[(1232), int32], %var_3629: uint64, %var_3643: Tensor[(720), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) {
  %35 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %36 = cast(%var_3628, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %37 = cast(%var_3629, dtype="uint64") /* ty=uint64 */;
  %38 = reshape(%36, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %39 = reshape(%37, newshape=[]) /* ty=uint64 */;
  %40 = @func_2187(%38, %39) /* ty=(Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) */;
  %41 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %42 = cast(%var_3643, dtype="float32") /* ty=Tensor[(720), float32] */;
  %43 = reshape(%42, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %44 = @func_2952(%43) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) */;
  %45 = @func_3127() /* ty=Tensor[(2, 3, 1), float64] */;
  %46 = %35.2;
  %47 = %40.1;
  %48 = %41.0;
  %49 = %44.2;
  (%45, %46, %47, %var_3628, %var_3629, %48, %49, %var_3643)
}

def @func_2430(%var_2412: Tensor[(16, 6, 15), float64]) -> Tensor[(16, 6, 15), float64] {
  %50 = cast(-9.09188f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %51 = cast(%var_2412, dtype="float64") /* ty=Tensor[(16, 6, 15), float64] */;
  floor_divide(%50, %51) /* ty=Tensor[(16, 6, 15), float64] */
}

def @func_3993(%var_3973: Tensor[(504), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) {
  %52 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %53 = cast(%var_3973, dtype="float64") /* ty=Tensor[(504), float64] */;
  %54 = reshape(%53, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), float64] */;
  %55 = @func_1500(%54) /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) */;
  %56 = %52.0;
  %57 = %55.0;
  (%56, %57, %var_3973)
}

def @func_2187(%var_2165: Tensor[(11, 14, 8), int32], %var_2182: uint64) -> (Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) {
  %58 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %59 = %58.0;
  %60 = cast(%var_2165, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = cast(%var_2182, dtype="uint64") /* ty=uint64 */;
  %65 = reshape(%64, newshape=[]) /* ty=uint64 */;
  %66 = @func_1010(%65) /* ty=(Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) */;
  %67 = equal(%62, %63) /* ty=Tensor[(11, 14, 8), bool] */;
  %68 = %66.0;
  (%67, %68, %var_2182)
}

def @func_1617(%var_1613: uint16) -> (Tensor[(11, 14, 8), int32], Tensor[(7, 4, 9), bool], uint16) {
  %69 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %70 = cast(%69, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %71 = cast(%var_1613, dtype="uint16") /* ty=uint16 */;
  %72 = reshape(%70, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %73 = reshape(%71, newshape=[]) /* ty=uint16 */;
  %74 = @func_463(%72, %73) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %75 = %74.1;
  (%69, %75, %var_1613)
}

def @func_4559(%var_4537: uint64) -> (Tensor[(2, 3, 1), float64], Tensor[(672), uint32], Tensor[(616, 2), float64], Tensor[(2, 3, 1), float64], uint64, Tensor[(720), float32]) {
  %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), float64] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %77 = reshape(%76, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %78 = @func_2984(%77) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), float64] */, dtype="int32") /* ty=Tensor[(616, 2), int32] */;
  %80 = cast(%var_4537, dtype="uint64") /* ty=uint64 */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %82 = reshape(%79, newshape=[1232]) /* ty=Tensor[(1232), int32] */;
  %83 = reshape(%80, newshape=[]) /* ty=uint64 */;
  %84 = reshape(%81, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %85 = @func_3648(%82, %83, %84) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) */;
  %86 = @func_4010() /* ty=Tensor[(2, 3, 1), float64] */;
  %87 = %78.0;
  %88 = %85.1;
  (%86, %87, meta[relay.Constant][2] /* ty=Tensor[(616, 2), float64] */, %88, %var_4537, meta[relay.Constant][3] /* ty=Tensor[(720), float32] */)
}

def @func_5421() -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
  %89 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %90 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
  %91 = %89.0;
  (%90, %91)
}

def @func_3694(%var_3659: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  %92 = cast(%var_3659, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %93 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 9, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %98 = reshape(%96, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %99 = reshape(%97, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %100 = logical_and(%94, %95) /* ty=Tensor[(14, 9, 14), bool] */;
  %101 = @func_1809(%98, %99) /* ty=Tensor[(2, 15, 15), bool] */;
  (%100, %101, meta[relay.Constant][5] /* ty=Tensor[(450), int16] */)
}

def @func_1856(%var_1841: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) {
  %102 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %103 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %106 = cast(%var_1841, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %107 = cast(%var_1841, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %108 = reshape(%106, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %109 = reshape(%107, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %110 = @func_910(%108, %109) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
  %111 = %102.1;
  %112 = exp(%105) /* ty=Tensor[(2, 3, 1), float64] */;
  %113 = %110.1;
  (%111, %112, %113, %var_1841)
}

def @func_5034() -> Tensor[(11, 14, 8), float64] {
  %114 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %114.0
}

def @func_5192(%var_5123: Tensor[(11, 14, 8), int32]) -> (Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16], uint16) {
  %115 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %116 = %115.0;
  %117 = cast(%var_5123, dtype="int16") /* ty=Tensor[(11, 14, 8), int16] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="int16") /* ty=Tensor[(11, 14, 8), int16] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %121 = subtract(%119, %120) /* ty=Tensor[(11, 14, 8), int16] */;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %125 = reshape(%123, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %126 = reshape(%124, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %127 = @func_4457() /* ty=(uint16,) */;
  %128 = atanh(%122) /* ty=Tensor[(11, 14, 8), float64] */;
  %129 = @func_4010() /* ty=Tensor[(2, 3, 1), float64] */;
  %130 = @func_1809(%125, %126) /* ty=Tensor[(2, 15, 15), bool] */;
  %131 = %127.0;
  (%128, %129, %130, meta[relay.Constant][6] /* ty=Tensor[(450), int16] */, %131)
}

def @func_695() -> (Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) {
  %132 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %135 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %136 = reshape(%134, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %137 = reshape(%135, newshape=[]) /* ty=uint16 */;
  %138 = @func_463(%136, %137) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %139 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %140 = %139.0;
  %141 = cast(%133, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %145 = mod(%143, %144) /* ty=Tensor[(11, 14, 8), float64] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %147 = acosh(%146) /* ty=Tensor[(11, 14, 8), float64] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %149 = tan(%148) /* ty=Tensor[(11, 14, 8), float64] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %151 = acos(%150) /* ty=Tensor[(11, 14, 8), float32] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %153 = %138.0;
  %154 = sqrt(%152) /* ty=Tensor[(11, 14, 8), float64] */;
  (%153, meta[relay.Constant][7] /* ty=uint16 */, %154)
}

def @func_5006() -> Tensor[(672), uint32] {
  %155 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %155.3
}

def @func_4048(%var_4040: Tensor[(2, 6, 14), float64]) -> (uint16, Tensor[(11, 14, 8), float64], Tensor[(72), float64], Tensor[(2, 6, 14), uint32]) {
  %156 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %158 = %156.1;
  %159 = cast(%158, dtype="uint16") /* ty=uint16 */;
  %160 = reshape(%157, newshape=[2, 3, 12]) /* ty=Tensor[(2, 3, 12), float64] */;
  %161 = reshape(%159, newshape=[]) /* ty=uint16 */;
  %162 = @func_2892(%160, %161) /* ty=(Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) */;
  %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 14), float64] */;
  %164 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 14), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %167 = floor_divide(%165, %166) /* ty=Tensor[(2, 6, 14), float64] */;
  %168 = cast(%var_4040, dtype="uint32") /* ty=Tensor[(2, 6, 14), uint32] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="uint32") /* ty=Tensor[(2, 6, 14), uint32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %172 = %162.3;
  %173 = multiply(%170, %171) /* ty=Tensor[(2, 6, 14), uint32] */;
  (%158, %172, meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, %173)
}

def @func_2802(%var_2775: Tensor[(2, 15, 15), bool], %var_2790: Tensor[(1, 480), int64], %var_2791: Tensor[(1, 252), uint64], %var_2792: Tensor[(280, 4), uint16]) -> (Tensor[(11, 14, 8), float64], Tensor[(450), int16], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), float32], Tensor[(2, 15, 15), bool], Tensor[(11, 14, 8), float64], Tensor[(840), uint64], Tensor[(1, 480), int64], Tensor[(1, 252), uint64], Tensor[(280, 4), uint16], Tensor[(11, 14, 8), uint64]) {
  %174 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %177 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %178 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
  %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %180 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %181 = reshape(%179, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %182 = reshape(%180, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %183 = @func_1809(%181, %182) /* ty=Tensor[(2, 15, 15), bool] */;
  %184 = cast(%var_2775, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(%175, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %189 = sin(%188) /* ty=Tensor[(11, 14, 8), float64] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %191 = cast(%var_2790, dtype="int64") /* ty=Tensor[(1, 480), int64] */;
  %192 = cast(%var_2791, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %193 = cast(%var_2792, dtype="uint16") /* ty=Tensor[(280, 4), uint16] */;
  %194 = reshape(%191, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), int64] */;
  %195 = reshape(%192, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint64] */;
  %196 = reshape(%193, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %197 = @func_2633(%194, %195, %196) /* ty=(Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) */;
  %198 = cast(%189, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %199 = atan(%198) /* ty=Tensor[(11, 14, 8), float32] */;
  %200 = cast(%175, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %204 = exp(%176) /* ty=Tensor[(11, 14, 8), float64] */;
  %205 = %177.0;
  %206 = %178.0;
  %207 = logical_and(%186, %187) /* ty=Tensor[(2, 15, 15), bool] */;
  %208 = sinh(%190) /* ty=Tensor[(11, 14, 8), float64] */;
  %209 = %197.6;
  %210 = minimum(%202, %203) /* ty=Tensor[(11, 14, 8), uint64] */;
  (%204, meta[relay.Constant][11] /* ty=Tensor[(450), int16] */, %205, %206, %207, %208, %209, %var_2790, %var_2791, %var_2792, %210)
}

def @func_2892(%var_2839: Tensor[(2, 3, 12), float64], %var_2876: uint16) -> (Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) {
  %211 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %212 = %211.0;
  %213 = cast(%212, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %214 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 3, 13), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 13), bool] */;
  %215 = cast(%212, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %216 = cast(%var_2839, dtype="float32") /* ty=Tensor[(2, 3, 12), float32] */;
  %217 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %218 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %219 = cast(%var_2876, dtype="uint16") /* ty=uint16 */;
  %220 = reshape(%219, newshape=[]) /* ty=uint16 */;
  %221 = @func_1440(%220) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
  %222 = cast(%212, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %223 = atan(%222) /* ty=Tensor[(2, 3, 1), float64] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %225 = less(%213, %214) /* ty=Tensor[(2, 3, 13), bool] */;
  %226 = multiply(%215, %216) /* ty=Tensor[(2, 3, 12), float32] */;
  %227 = %217.2;
  %228 = %218.0;
  %229 = %221.1;
  %230 = rsqrt(%224) /* ty=Tensor[(2, 3, 1), float32] */;
  (%225, %226, %227, %228, %229, %var_2876, %230)
}

def @func_2952(%var_2917: Tensor[(10, 8, 9), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) {
  %231 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %232 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %233 = cast(%var_2917, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
  %234 = sinh(%233) /* ty=Tensor[(10, 8, 9), float32] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %236 = %231.0;
  %237 = %232.1;
  %238 = sin(%235) /* ty=Tensor[(10, 8, 9), float64] */;
  (%236, %237, %238)
}

def @func_4785() -> Tensor[(11, 14, 8), uint64] {
  %239 = @func_4683() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) */;
  %239.1
}

def @func_4426(%var_4417: Tensor[(8, 7, 1), int64], %var_4418: Tensor[(8, 7, 6), int64]) -> (Tensor[(8, 7, 6), int64], Tensor[(8, 7, 1), float32]) {
  %240 = cast(%var_4417, dtype="int64") /* ty=Tensor[(8, 7, 1), int64] */;
  %241 = cast(%var_4418, dtype="int64") /* ty=Tensor[(8, 7, 6), int64] */;
  %242 = cast(%var_4417, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
  %243 = bitwise_or(%240, %241) /* ty=Tensor[(8, 7, 6), int64] */;
  %244 = log10(%242) /* ty=Tensor[(8, 7, 1), float32] */;
  (%243, %244)
}

def @func_3595() -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
  %245 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %246 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
  %247 = %245.0;
  %248 = %246.0;
  (%247, %248)
}

def @func_1581() -> (Tensor[(11, 14, 8), int32],) {
  %249 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  (%249,)
}

def @func_426() -> (Tensor[(11, 14, 8), int32],) {
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %251 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %254 = logical_xor(%252, %253) /* ty=Tensor[(11, 14, 8), int32] */;
  (%254,)
}

def @func_960() -> (Tensor[(2, 3, 1), float64],) {
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %256 = acosh(%255) /* ty=Tensor[(2, 3, 1), float64] */;
  (%256,)
}

def @func_1560() -> (Tensor[(2, 3, 1), float64], int64) {
  %257 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %258 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
  %259 = %257.0;
  %260 = %258.3;
  (%259, %260)
}

def @func_1257(%var_1143: Tensor[(126, 2), uint64], %var_1144: Tensor[(840), uint64], %var_1152: Tensor[(2, 560), uint16]) -> (Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) {
  %261 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %262 = cast(%var_1143, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %263 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %264 = %263.2;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %266 = cast(%var_1144, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %267 = reshape(%261, newshape=[]) /* ty=uint64 */;
  %268 = reshape(%262, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %269 = reshape(%265, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
  %270 = reshape(%266, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
  %271 = @func_829(%267, %268, %269, %270) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
  %272 = %271.2;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %274 = cast(%var_1152, dtype="uint16") /* ty=Tensor[(2, 560), uint16] */;
  %275 = reshape(%274, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
  %276 = @func_983(%275) /* ty=(Tensor[(10, 16, 7), bool],) */;
  %277 = erf(%273) /* ty=Tensor[(11, 14, 8), float64] */;
  %278 = cast(%277, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %279 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint16") /* ty=uint16 */;
  %280 = reshape(%278, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %281 = reshape(%279, newshape=[]) /* ty=uint16 */;
  %282 = @func_463(%280, %281) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %283 = cast(%var_1143, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %284 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %285 = cast(%264, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %286 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
  %287 = %276.0;
  %288 = cast(%287, dtype="uint16") /* ty=Tensor[(10, 16, 7), uint16] */;
  %289 = reshape(%288, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
  %290 = @func_983(%289) /* ty=(Tensor[(10, 16, 7), bool],) */;
  %291 = cast(%var_1143, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %292 = cast(%var_1152, dtype="float32") /* ty=Tensor[(2, 560), float32] */;
  %293 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  %294 = %282.2;
  %295 = power(%283, %284) /* ty=Tensor[(126, 2), float64] */;
  %296 = rsqrt(%285) /* ty=Tensor[(11, 14, 8), float32] */;
  %297 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  %298 = %286.1;
  %299 = %290.0;
  %300 = log(%291) /* ty=Tensor[(126, 2), float64] */;
  %301 = exp(%292) /* ty=Tensor[(2, 560), float32] */;
  %302 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  (%var_1144, %277, %287, %293, %294, %295, %296, %297, %298, %299, %300, %301, %302)
}

def @func_4321(%var_4288: Tensor[(11, 14, 8), float32], %var_4312: uint16) -> (Tensor[(11, 14, 8), uint8], Tensor[(7, 4, 9), float32], uint16) {
  %303 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
  %304 = %303.0;
  %305 = cast(%var_4288, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %309 = cast(%var_4312, dtype="uint16") /* ty=uint16 */;
  %310 = reshape(%309, newshape=[]) /* ty=uint16 */;
  %311 = @func_1440(%310) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
  %312 = add(%307, %308) /* ty=Tensor[(11, 14, 8), uint8] */;
  %313 = %311.0;
  (%312, %313, %var_4312)
}

def @func_463(%var_441: Tensor[(11, 14, 8), int32], %var_449: uint16) -> (Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) {
  %314 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %315 = %314.0;
  %316 = cast(%var_441, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %320 = cast(%var_449, dtype="uint16") /* ty=uint16 */;
  %321 = reshape(%320, newshape=[]) /* ty=uint16 */;
  %322 = @func_357(%321) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
  %323 = left_shift(%318, %319) /* ty=Tensor[(11, 14, 8), uint64] */;
  %324 = %322.0;
  (%323, %324, %var_449)
}

def @func_2249() -> (Tensor[(2, 3, 1), float64],) {
  %325 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %326 = %325.1;
  (%326,)
}

def @func_2475() -> (Tensor[(11, 14, 8), float32],) {
  %327 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %329 = log2(%328) /* ty=Tensor[(11, 14, 8), float32] */;
  (%329,)
}

def @func_829(%var_775: uint64, %var_776: Tensor[(252), uint64], %var_783: Tensor[(11, 14, 8), float64], %var_796: Tensor[(7, 8, 15), uint64]) -> (uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) {
  %330 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %331 = %330.2;
  %332 = cast(%var_783, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %337 = cast(%var_775, dtype="uint64") /* ty=uint64 */;
  %338 = cast(%var_776, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %339 = reshape(%337, newshape=[]) /* ty=uint64 */;
  %340 = reshape(%338, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %341 = @func_589(%339, %340) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
  %342 = %341.2;
  %343 = cast(%342, dtype="uint16") /* ty=uint16 */;
  %344 = reshape(%343, newshape=[]) /* ty=uint16 */;
  %345 = @func_357(%344) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
  %346 = cast(%342, dtype="float64") /* ty=float64 */;
  %347 = cast(%var_796, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %348 = divide(%346, %347) /* ty=Tensor[(7, 8, 15), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %350 = atan(%349) /* ty=Tensor[(7, 8, 15), float64] */;
  %351 = cast(%331, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %352 = cast(%342, dtype="uint16") /* ty=uint16 */;
  %353 = reshape(%351, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %354 = reshape(%352, newshape=[]) /* ty=uint16 */;
  %355 = @func_463(%353, %354) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %356 = %355.2;
  %357 = cast(%350, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %358 = cast(%356, dtype="float64") /* ty=float64 */;
  %359 = logical_and(%334, %335) /* ty=Tensor[(11, 14, 8), bool] */;
  %360 = %336.1;
  %361 = %345.1;
  %362 = floor_divide(%357, %358) /* ty=Tensor[(7, 8, 15), float64] */;
  (%var_775, %var_776, %359, %360, %361, %362)
}

def @func_1763(%var_1753: Tensor[(16, 5, 8), float64]) -> (Tensor[(16, 5, 8), float64],) {
  %363 = cast(%var_1753, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %364 = sinh(%363) /* ty=Tensor[(16, 5, 8), float64] */;
  (%364,)
}

def @func_2633(%var_2596: Tensor[(5, 12, 8), int64], %var_2603: Tensor[(1, 252), uint64], %var_2623: Tensor[(1120), uint16]) -> (Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) {
  %365 = cast(%var_2596, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %366 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %369 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %370 = cast(%var_2603, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %371 = reshape(%369, newshape=[]) /* ty=uint64 */;
  %372 = reshape(%370, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint64] */;
  %373 = @func_311(%371, %372) /* ty=(Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) */;
  %374 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %375 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 13, 12), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 12), bool] */;
  %376 = @func_2544() /* ty=(uint16,) */;
  %377 = cast(%var_2603, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %378 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %379 = cast(%var_2623, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %380 = reshape(%377, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint64] */;
  %381 = reshape(%378, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %382 = reshape(%379, newshape=[2, 560]) /* ty=Tensor[(2, 560), uint16] */;
  %383 = @func_1257(%380, %381, %382) /* ty=(Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) */;
  %384 = %376.0;
  %385 = cast(%384, dtype="uint16") /* ty=uint16 */;
  %386 = reshape(%385, newshape=[]) /* ty=uint16 */;
  %387 = @func_1440(%386) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
  %388 = bitwise_xor(%367, %368) /* ty=Tensor[(5, 12, 8), int64] */;
  %389 = %373.0;
  %390 = less_equal(%374, %375) /* ty=Tensor[(9, 13, 12), bool] */;
  %391 = %383.8;
  %392 = %387.2;
  (%388, %389, %var_2603, %390, %384, %391, meta[relay.Constant][20] /* ty=Tensor[(840), uint64] */, %var_2623, %392)
}

def @func_1028() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) {
  %393 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %394 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %395 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %396 = reshape(%395, newshape=[]) /* ty=int64 */;
  %397 = @func_487(%396) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
  %398 = %393.0;
  %399 = %394.0;
  %400 = %397.0;
  (%398, %399, %400, -6 /* ty=int64 */)
}

def @func_2683() -> Tensor[(11, 14, 8), float64] {
  %401 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %401.0
}

def @func_487(%var_473: int64) -> (Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) {
  %402 = cast(%var_473, dtype="bool") /* ty=bool */;
  %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 2, 8), int64] */, dtype="bool") /* ty=Tensor[(7, 2, 8), bool] */;
  %404 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 2, 8), int64] */, dtype="float32") /* ty=Tensor[(7, 2, 8), float32] */;
  %405 = less_equal(%402, %403) /* ty=Tensor[(7, 2, 8), bool] */;
  %406 = sqrt(%404) /* ty=Tensor[(7, 2, 8), float32] */;
  (%405, %406)
}

def @func_910(%var_860: Tensor[(8, 12, 7), uint32], %var_861: Tensor[(8, 12, 7), uint32]) -> (Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) {
  %407 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %408 = reshape(%407, newshape=[]) /* ty=int64 */;
  %409 = @func_487(%408) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
  %410 = cast(%var_861, dtype="uint32") /* ty=Tensor[(8, 12, 7), uint32] */;
  %411 = shape_of(%var_860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_860, dtype="uint32") /* ty=Tensor[(8, 12, 7), uint32] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %414 = add(%412, %413) /* ty=Tensor[(8, 12, 7), uint32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
  %416 = acos(%415) /* ty=Tensor[(8, 12, 7), float64] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(8, 12, 7), float32] */;
  %418 = %409.1;
  %419 = asin(%417) /* ty=Tensor[(8, 12, 7), float32] */;
  (%418, 3 /* ty=int64 */, %419)
}

def @func_608() -> (Tensor[(11, 14, 8), int32],) {
  %420 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %421 = %420.0;
  (%421,)
}

def @func_357(%var_335: uint16) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) {
  %422 = cast(%var_335, dtype="bool") /* ty=bool */;
  %423 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 9), uint16] */, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %424 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 9), uint16] */, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %425 = not_equal(%422, %423) /* ty=Tensor[(7, 4, 9), bool] */;
  %426 = sqrt(%424) /* ty=Tensor[(7, 4, 9), float32] */;
  (%425, %426)
}

def @func_5249() -> (Tensor[(11, 14, 8), uint64],) {
  %427 = @func_4785() /* ty=Tensor[(11, 14, 8), uint64] */;
  (%427,)
}

def @func_5332(%var_5320: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float32], Tensor[(11, 14, 8), int32], Tensor[(672), uint32]) {
  %428 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
  %429 = cast(%var_5320, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %430 = reshape(%429, newshape=[672]) /* ty=Tensor[(672), uint32] */;
  %431 = @func_2591(%430) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) */;
  %432 = %428.0;
  %433 = %431.0;
  (%432, %433, %var_5320)
}

def @func_968() -> Tensor[(2, 3, 1), float64] {
  %434 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %434.0
}

def @func_2490() -> Tensor[(2, 3, 1), float64] {
  %435 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %435.0
}

def @func_1107(%var_1088: Tensor[(252), uint64], %var_1089: Tensor[(1232), float64]) -> (int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) {
  %436 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
  %437 = %436.3;
  %438 = cast(%437, dtype="uint64") /* ty=uint64 */;
  %439 = cast(%var_1088, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %440 = cast(%var_1089, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %441 = cast(meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %442 = reshape(%438, newshape=[]) /* ty=uint64 */;
  %443 = reshape(%439, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %444 = reshape(%440, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
  %445 = reshape(%441, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
  %446 = @func_829(%442, %443, %444, %445) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
  %447 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %448 = %446.2;
  %449 = %447.0;
  (%437, %448, %var_1088, %var_1089, meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, %449)
}

def @func_4254(%var_4232: Tensor[(2, 4, 11), int16], %var_4233: Tensor[(2, 4, 11), int16], %var_4241: Tensor[(1764), bool]) -> (Tensor[(2, 4, 11), int16], Tensor[(450), int16], Tensor[(1764), bool], Tensor[(2, 3, 1), float64]) {
  %450 = cast(%var_4233, dtype="int16") /* ty=Tensor[(2, 4, 11), int16] */;
  %451 = shape_of(%var_4232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_4232, dtype="int16") /* ty=Tensor[(2, 4, 11), int16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %454 = cast(%var_4241, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %455 = reshape(%454, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %456 = @func_3694(%455) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */;
  %457 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %458 = right_shift(%452, %453) /* ty=Tensor[(2, 4, 11), int16] */;
  %459 = %456.2;
  %460 = %457.0;
  (%458, %459, %var_4241, %460)
}

def @func_589(%var_583: uint64, %var_584: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) {
  %461 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %462 = cast(%var_583, dtype="uint64") /* ty=uint64 */;
  %463 = cast(%var_584, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %464 = reshape(%462, newshape=[]) /* ty=uint64 */;
  %465 = reshape(%463, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
  %466 = @func_137(%464, %465) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
  %467 = %461.0;
  %468 = %466.1;
  (%467, %468, %var_583, %var_584)
}

def @func_5110() -> (uint16,) {
  %469 = @func_4457() /* ty=(uint16,) */;
  %470 = %469.0;
  (%470,)
}

def @func_5693() -> (Tensor[(672), uint32],) {
  %471 = @func_5561() /* ty=(Tensor[(672), uint32],) */;
  %472 = %471.0;
  (%472,)
}

def @func_4365() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  %473 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %474 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %475 = %473.0;
  %476 = %474.3;
  (%475, %476)
}

def @func_3127() -> Tensor[(2, 3, 1), float64] {
  %477 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %477.0
}

def @func_3240(%var_3156: Tensor[(4, 180), float32]) -> (Tensor[(11, 14, 8), int32], Tensor[(4, 180), float32], Tensor[(16, 5, 8), float64], Tensor[(640), float64], Tensor[(2, 3, ?), bool]) {
  %478 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %479 = cast(%var_3156, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %480 = cast(meta[relay.Constant][24] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %481 = reshape(%480, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float64] */;
  %482 = @func_1763(%481) /* ty=(Tensor[(16, 5, 8), float64],) */;
  %483 = cast(%var_3156, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %484 = reshape(%483, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %485 = @func_2952(%484) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %488 = sin(%487) /* ty=Tensor[(2, 3, 1), float32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = %478.0;
  %494 = acosh(%479) /* ty=Tensor[(4, 180), float32] */;
  %495 = %482.0;
  %496 = logical_or(%491, %492) /* ty=Tensor[(2, 3, ?), bool] */;
  (%493, %494, %495, meta[relay.Constant][24] /* ty=Tensor[(640), float64] */, %496)
}

def @func_1500(%var_1481: Tensor[(14, 3, 12), float64]) -> (Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) {
  %497 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 12), float64] */;
  %498 = asinh(%497) /* ty=Tensor[(14, 3, 12), float64] */;
  %499 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 12), float64] */, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %503 = cast(%var_1481, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %504 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %507 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %508 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%498, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = power(%501, %502) /* ty=Tensor[(14, 3, 12), float32] */;
  %512 = logical_and(%505, %506) /* ty=Tensor[(14, 3, 12), bool] */;
  %513 = greater_equal(%509, %510) /* ty=Tensor[(14, 3, 12), bool] */;
  (%511, %512, %513)
}

def @func_4226(%var_4203: Tensor[(504), float64], %var_4208: Tensor[(640), float64]) -> (Tensor[(2, 3, 1), float32], Tensor[(14, 3, 12), float32], Tensor[(504), float64], Tensor[(16, 5, 8), float64], Tensor[(640), float64]) {
  %514 = @func_3127() /* ty=Tensor[(2, 3, 1), float64] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %516 = cast(%var_4203, dtype="float64") /* ty=Tensor[(504), float64] */;
  %517 = reshape(%516, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), float64] */;
  %518 = @func_1500(%517) /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) */;
  %519 = cast(%var_4208, dtype="float64") /* ty=Tensor[(640), float64] */;
  %520 = reshape(%519, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float64] */;
  %521 = @func_1763(%520) /* ty=(Tensor[(16, 5, 8), float64],) */;
  %522 = atanh(%515) /* ty=Tensor[(2, 3, 1), float32] */;
  %523 = %518.0;
  %524 = %521.0;
  (%522, %523, %var_4203, %524, %var_4208)
}

def @func_1302() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) {
  %525 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %528 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %529 = asinh(%527) /* ty=Tensor[(11, 14, 8), float64] */;
  %530 = %528.0;
  (%529, %530)
}

def @func_2984(%var_2977: Tensor[(1232), float64]) -> (Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) {
  %531 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %532 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 252), uint64] */, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %533 = cast(%var_2977, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %534 = reshape(%532, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %535 = reshape(%533, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %536 = @func_1107(%534, %535) /* ty=(int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) */;
  %537 = %531.3;
  %538 = %536.4;
  (%537, %538, meta[relay.Constant][26] /* ty=Tensor[(1, 252), uint64] */, %var_2977)
}

def @func_1965() -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %539 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %540 = %539.0;
  %541 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  (%540, %541)
}

def @func_4683() -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) {
  %542 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %543 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %544 = %542.0;
  %545 = %543.1;
  (%544, %545)
}

def @func_3870(%var_3782: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) {
  %546 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %547 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint64") /* ty=uint64 */;
  %548 = cast(%var_3782, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %549 = reshape(%547, newshape=[]) /* ty=uint64 */;
  %550 = reshape(%548, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %551 = @func_589(%549, %550) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
  %552 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %555 = log(%554) /* ty=Tensor[(2, 3, 1), float32] */;
  %556 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %557 = %556.3;
  %558 = cast(%555, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %559 = cast(%557, dtype="float64") /* ty=Tensor[(672), float64] */;
  %560 = cast(meta[relay.Constant][28] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %561 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %562 = reshape(%560, newshape=[2, 3, 12]) /* ty=Tensor[(2, 3, 12), float64] */;
  %563 = reshape(%561, newshape=[]) /* ty=uint16 */;
  %564 = @func_2892(%562, %563) /* ty=(Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) */;
  %565 = @func_2683() /* ty=Tensor[(11, 14, 8), float64] */;
  %566 = %546.0;
  %567 = cast(%566, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %568 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %569 = reshape(%567, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %570 = reshape(%568, newshape=[]) /* ty=uint16 */;
  %571 = @func_463(%569, %570) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %572 = %571.0;
  %573 = cast(%572, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %574 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%565, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %577 = cast(%555, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %578 = sqrt(%577) /* ty=Tensor[(2, 3, 1), float64] */;
  %579 = cast(%555, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = logical_and(%581, %582) /* ty=Tensor[(2, 3, ?), bool] */;
  %584 = cast(%583, dtype="bool") /* ty=Tensor[(2, 3, ?), bool] */;
  %585 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %586 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %587 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %588 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %589 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
  %590 = %551.1;
  %591 = floor_divide(%558, %559) /* ty=Tensor[(2, 3, 672), float64] */;
  %592 = %564.4;
  %593 = bitwise_and(%575, %576) /* ty=Tensor[(11, 14, 8), uint64] */;
  %594 = less_equal(%584, %585) /* ty=Tensor[(2, 3, ?), bool] */;
  %595 = %586.0;
  %596 = %587.0;
  (%566, %588, %589, %590, %var_3782, %591, %592, meta[relay.Constant][28] /* ty=Tensor[(72), float64] */, %593, %594, %595, %596)
}

def @func_4622() -> (Tensor[(11, 14, 8), int32],) {
  %597 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %598 = %597.0;
  (%598,)
}

def @func_2591(%var_2582: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) {
  %599 = cast(%var_2582, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %600 = cast(%var_2582, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %601 = reshape(%599, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %602 = reshape(%600, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %603 = @func_910(%601, %602) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
  %604 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
  %605 = %603.2;
  (%604, %605, %var_2582)
}

def @func_1010(%var_995: uint64) -> (Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) {
  %606 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %607 = cast(%var_995, dtype="uint64") /* ty=uint64 */;
  %608 = cast(meta[relay.Constant][29] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %609 = %606.0;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %611 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %612 = reshape(%607, newshape=[]) /* ty=uint64 */;
  %613 = reshape(%608, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %614 = reshape(%610, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
  %615 = reshape(%611, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
  %616 = @func_829(%612, %613, %614, %615) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
  %617 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %618 = %616.0;
  %619 = %617.0;
  (%609, %618, %var_995, meta[relay.Constant][29] /* ty=Tensor[(252), uint64] */, meta[relay.Constant][30] /* ty=Tensor[(840), uint64] */, %619)
}

def @func_1809(%var_1794: Tensor[(2, 15, 15), int16], %var_1795: Tensor[(2, 15, 15), int16]) -> Tensor[(2, 15, 15), bool] {
  %620 = cast(%var_1795, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %621 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_1794, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%622, %623) /* ty=Tensor[(2, 15, 15), bool] */
}

def @func_3933() -> (Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %624 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %626 = reshape(%625, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %627 = @func_3277(%626) /* ty=(uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) */;
  %628 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %629 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
  %630 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %631 = %627.0;
  %632 = %628.0;
  %633 = %629.0;
  %634 = %630.0;
  (%624, %631, %632, %633, %634)
}

def @func_6101(%var_6065: Tensor[(7, 252), uint64]) -> (Tensor[(11, 14, 8), uint64], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(7, 252), bool]) {
  %635 = @func_4683() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) */;
  %636 = @func_3107() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
  %637 = @func_4732() /* ty=(Tensor[(11, 14, 8), bool],) */;
  %638 = %635.1;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %640 = reshape(%639, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %641 = @func_2984(%640) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
  %642 = %641.2;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %644 = cast(%var_6065, dtype="bool") /* ty=Tensor[(7, 252), bool] */;
  %645 = %636.1;
  %646 = %637.0;
  %647 = greater(%643, %644) /* ty=Tensor[(7, 252), bool] */;
  (%638, %645, %646, %647)
}

def @func_4732() -> (Tensor[(11, 14, 8), bool],) {
  %648 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %649 = %648.1;
  (%649,)
}

def @func_3277(%var_3261: Tensor[(1232), float64]) -> (uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) {
  %650 = @func_2544() /* ty=(uint16,) */;
  %651 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %652 = cast(%var_3261, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %653 = reshape(%652, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %654 = @func_2984(%653) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
  %655 = %654.2;
  %656 = cast(%655, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %657 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 252), uint64] */, dtype="uint64") /* ty=Tensor[(8, 252), uint64] */;
  %658 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 252), uint64] */, dtype="float32") /* ty=Tensor[(8, 252), float32] */;
  %659 = %650.0;
  %660 = %651.0;
  %661 = bitwise_xor(%656, %657) /* ty=Tensor[(8, 252), uint64] */;
  %662 = tan(%658) /* ty=Tensor[(8, 252), float32] */;
  (%659, %var_3261, %660, %661, %662)
}

def @func_3107() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  %663 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %664 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %665 = %663.1;
  %666 = %664.0;
  (%665, %666)
}

def @func_4899() -> (uint16, Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %667 = @func_4457() /* ty=(uint16,) */;
  %668 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
  %669 = %667.0;
  %670 = %668.0;
  %671 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  (%669, %670, %671)
}

def @func_2289() -> Tensor[(11, 14, 8), int32] {
  %672 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %672.0
}

def @func_5223() -> (Tensor[(11, 14, 8), int32],) {
  %673 = @func_3107() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
  %674 = %673.1;
  (%674,)
}

def @func_5623(%var_5616: uint64) -> (Tensor[(2, 3, 1), float64], uint64, uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), int32]) {
  %675 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %676 = cast(%var_5616, dtype="uint64") /* ty=uint64 */;
  %677 = cast(meta[relay.Constant][32] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %678 = reshape(%676, newshape=[]) /* ty=uint64 */;
  %679 = reshape(%677, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %680 = @func_589(%678, %679) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
  %681 = @func_3933() /* ty=(Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %682 = %675.0;
  %683 = %680.2;
  %684 = %681.0;
  (%682, %683, %var_5616, meta[relay.Constant][32] /* ty=Tensor[(252), uint64] */, %684)
}

def @main(%var_6129: uint64, %var_6130: Tensor[(12, 1, 10), uint64]) -> (Tensor[(12, 1, 10), uint64], Tensor[(12, 1, 10), bool]) {
  %685 = cast(%var_6129, dtype="uint64") /* ty=uint64 */;
  %686 = cast(%var_6130, dtype="uint64") /* ty=Tensor[(12, 1, 10), uint64] */;
  %687 = cast(%var_6130, dtype="bool") /* ty=Tensor[(12, 1, 10), bool] */;
  %688 = cast(%var_6129, dtype="bool") /* ty=bool */;
  %689 = maximum(%685, %686) /* ty=Tensor[(12, 1, 10), uint64] */;
  %690 = not_equal(%687, %688) /* ty=Tensor[(12, 1, 10), bool] */;
  (%689, %690)
}

def @func_5561() -> (Tensor[(672), uint32],) {
  %691 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %692 = %691.3;
  (%692,)
}

def @func_5733() -> Tensor[(11, 14, 8), float64] {
  %693 = @func_5421() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) */;
  %694 = %693.0;
  %695 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 14, 8), int32] */, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%697, %698) /* ty=Tensor[(11, 14, 8), float64] */
}

def @func_137(%var_116: uint64, %var_117: Tensor[(3, 12, 7), uint64]) -> (Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) {
  %699 = cast(%var_116, dtype="uint64") /* ty=uint64 */;
  %700 = cast(%var_117, dtype="uint64") /* ty=Tensor[(3, 12, 7), uint64] */;
  %701 = cast(%var_117, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  %702 = multiply(%699, %700) /* ty=Tensor[(3, 12, 7), uint64] */;
  %703 = sin(%701) /* ty=Tensor[(3, 12, 7), float32] */;
  (%702, %703)
}

def @func_1440(%var_1373: uint16) -> (Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) {
  %704 = cast(%var_1373, dtype="uint16") /* ty=uint16 */;
  %705 = reshape(%704, newshape=[]) /* ty=uint16 */;
  %706 = @func_357(%705) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
  %707 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %708 = %707.0;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %710 = sinh(%709) /* ty=Tensor[(2, 3, 1), float32] */;
  %711 = cast(%710, dtype="int16") /* ty=Tensor[(2, 3, 1), int16] */;
  %712 = cast(%var_1373, dtype="int16") /* ty=int16 */;
  %713 = cast(%710, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %714 = cosh(%713) /* ty=Tensor[(2, 3, 1), float64] */;
  %715 = cast(%714, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %716 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 11), bool] */;
  %717 = cast(%var_1373, dtype="int64") /* ty=int64 */;
  %718 = reshape(%717, newshape=[]) /* ty=int64 */;
  %719 = @func_487(%718) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
  %720 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %721 = cast(%714, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %722 = asinh(%721) /* ty=Tensor[(2, 3, 1), float64] */;
  %723 = cast(%714, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %727 = cast(%722, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %728 = %720.1;
  %729 = cast(%728, dtype="uint64") /* ty=uint64 */;
  %730 = %706.1;
  %731 = cast(%730, dtype="uint64") /* ty=Tensor[(7, 4, 9), uint64] */;
  %732 = reshape(%729, newshape=[]) /* ty=uint64 */;
  %733 = reshape(%731, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
  %734 = @func_137(%732, %733) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
  %735 = maximum(%711, %712) /* ty=Tensor[(2, 3, 1), int16] */;
  %736 = logical_and(%715, %716) /* ty=Tensor[(2, 3, 11), bool] */;
  %737 = %719.1;
  %738 = mod(%725, %726) /* ty=Tensor[(2, 3, ?), float64] */;
  %739 = asin(%727) /* ty=Tensor[(2, 3, 1), float64] */;
  %740 = %734.0;
  (%730, %735, %736, %737, %728, %738, %739, %740)
}

def @func_5474(%var_5453: Tensor[(252), uint64], %var_5472: Tensor[(1120), uint16]) -> (Tensor[(168, 4), uint32], Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(252), uint64], Tensor[(10, 16, 7), bool], Tensor[(1120), uint16]) {
  %741 = @func_4721() /* ty=(Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) */;
  %742 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %743 = cast(%var_5453, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %744 = reshape(%743, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %745 = @func_3870(%744) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) */;
  %746 = cast(%var_5472, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %747 = reshape(%746, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
  %748 = @func_983(%747) /* ty=(Tensor[(10, 16, 7), bool],) */;
  %749 = %741.2;
  %750 = %742.0;
  %751 = %745.11;
  %752 = %748.0;
  (%749, %750, %751, %var_5453, %752, %var_5472)
}

def @func_4457() -> (uint16,) {
  %753 = @func_2544() /* ty=(uint16,) */;
  %754 = %753.0;
  (%754,)
}

def @func_5879() -> (Tensor[(450), int16], Tensor[(1764), bool], Tensor[(11, 14, 8), float64]) {
  %755 = cast(meta[relay.Constant][35] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %756 = reshape(%755, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %757 = @func_3694(%756) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */;
  %758 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %759 = %758.2;
  %760 = @func_4365() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
  %761 = %760.1;
  %762 = cast(%761, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %763 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%759, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = greater(%764, %765) /* ty=Tensor[(11, 14, 8), bool] */;
  %767 = cast(%766, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %768 = sigmoid(%767) /* ty=Tensor[(11, 14, 8), float32] */;
  %769 = cast(%768, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %770 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%766, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %773 = %757.2;
  %774 = floor_mod(%771, %772) /* ty=Tensor[(11, 14, 8), float64] */;
  (%773, meta[relay.Constant][35] /* ty=Tensor[(1764), bool] */, %774)
}

def @func_4721() -> (Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) {
  %775 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %778 = cast(meta[relay.Constant][36] /* ty=Tensor[(168, 4), uint32] */, dtype="uint32") /* ty=Tensor[(168, 4), uint32] */;
  %779 = cast(meta[relay.Constant][36] /* ty=Tensor[(168, 4), uint32] */, dtype="uint32") /* ty=Tensor[(168, 4), uint32] */;
  %780 = reshape(%778, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %781 = reshape(%779, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %782 = @func_910(%780, %781) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
  %783 = cosh(%777) /* ty=Tensor[(11, 14, 8), float32] */;
  %784 = %782.0;
  (%783, %784, meta[relay.Constant][36] /* ty=Tensor[(168, 4), uint32] */)
}

def @func_5526(%var_5520: Tensor[(11, 14, 8), float64]) -> Tensor[(11, 14, 8), uint8] {
  %785 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %786 = %785.0;
  %787 = cast(%var_5520, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%789, %790) /* ty=Tensor[(11, 14, 8), uint8] */
}

def @func_1330() -> Tensor[(11, 14, 8), int32] {
  %791 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %791.0
}

def @func_5261() -> Tensor[(2, 3, 1), float64] {
  %792 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %792.0
}

def @func_3469() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) {
  %793 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %794 = %793.0;
  %795 = @func_2683() /* ty=Tensor[(11, 14, 8), float64] */;
  %796 = cast(%795, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %797 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%794, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = cast(%795, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %801 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
  %802 = less(%798, %799) /* ty=Tensor[(11, 14, 8), bool] */;
  %803 = log10(%800) /* ty=Tensor[(11, 14, 8), float64] */;
  (%801, %802, %803)
}

def @func_5941() -> (uint16, Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool]) {
  %804 = @func_5110() /* ty=(uint16,) */;
  %805 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %806 = %805.0;
  %807 = cast(%806, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %808 = %804.0;
  %809 = cast(%808, dtype="uint64") /* ty=uint64 */;
  %810 = reshape(%807, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %811 = reshape(%809, newshape=[]) /* ty=uint64 */;
  %812 = @func_2187(%810, %811) /* ty=(Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) */;
  %813 = %812.0;
  (%808, %806, %813)
}

def @func_2516() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) {
  %814 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %815 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %816 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), uint32] */, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %817 = reshape(%816, newshape=[672]) /* ty=Tensor[(672), uint32] */;
  %818 = @func_1856(%817) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) */;
  %819 = %814.0;
  %820 = %815.0;
  %821 = %818.1;
  (%819, %820, %821, meta[relay.Constant][37] /* ty=Tensor[(672), uint32] */)
}

def @func_311(%var_301: uint64, %var_302: Tensor[(1, 252), uint64]) -> (Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) {
  %822 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
  %823 = cast(%var_301, dtype="uint64") /* ty=uint64 */;
  %824 = cast(%var_302, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %825 = reshape(%823, newshape=[]) /* ty=uint64 */;
  %826 = reshape(%824, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
  %827 = @func_137(%825, %826) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
  %828 = atan(%822) /* ty=Tensor[(3, 1, 2), float64] */;
  %829 = %827.0;
  (%828, %829, %var_301, %var_302)
}

def @func_1724() -> (Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %830 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %831 = %830.1;
  %832 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %833 = cast(%831, dtype="int8") /* ty=int8 */;
  %834 = cast(%832, dtype="int8") /* ty=Tensor[(11, 14, 8), int8] */;
  %835 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
  %836 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %837 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %838 = right_shift(%833, %834) /* ty=Tensor[(11, 14, 8), int8] */;
  %839 = %835.0;
  %840 = %836.0;
  %841 = %837.0;
  (%838, %839, %840, %841)
}

def @func_1731() -> Tensor[(11, 14, 8), int32] {
  %842 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %842.0
}

def @func_5964() -> Tensor[(14, 4, 16), float32] {
  %843 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %844 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  power(%843, %844) /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_3411(%var_3363: Tensor[(15, 8, 8), float32], %var_3366: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(15, 8, 8), float64], Tensor[(15, 8, 8), float32]) {
  %845 = cast(%var_3363, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
  %846 = cos(%845) /* ty=Tensor[(15, 8, 8), float32] */;
  %847 = cast(%var_3366, dtype="uint64") /* ty=Tensor[(15, 8, 8), uint64] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="uint64") /* ty=Tensor[(15, 8, 8), uint64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %851 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %852 = cast(%846, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
  %853 = cast(%846, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
  %854 = logical_xor(%849, %850) /* ty=Tensor[(15, 8, 8), uint64] */;
  %855 = @func_2490() /* ty=Tensor[(2, 3, 1), float64] */;
  %856 = %851.0;
  %857 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %858 = sinh(%852) /* ty=Tensor[(15, 8, 8), float64] */;
  %859 = atanh(%853) /* ty=Tensor[(15, 8, 8), float32] */;
  (%854, %855, %856, %857, %858, %859)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2249() -> (Tensor[(2, 3, 1), float64],) {
  %0 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %1 = %0.1;
  (%1,)
}

def @func_696() -> (Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) {
  %25 = fn () -> (Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) {
    %2 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %3 = %2.0;
    %4 = cast(%3, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
    %5 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %6 = reshape(%4, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
    %7 = reshape(%5, newshape=[]) /* ty=uint16 */;
    %8 = @func_463(%6, %7) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
    %9 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %10 = %9.0;
    %11 = cast(%3, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %15 = mod(%13, %14) /* ty=Tensor[(11, 14, 8), float64] */;
    %16 = cast(%15, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %17 = acosh(%16) /* ty=Tensor[(11, 14, 8), float64] */;
    %18 = cast(%17, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %19 = tan(%18) /* ty=Tensor[(11, 14, 8), float64] */;
    %20 = cast(%19, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
    %21 = acos(%20) /* ty=Tensor[(11, 14, 8), float32] */;
    %22 = cast(%21, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %23 = %8.0;
    %24 = sqrt(%22) /* ty=Tensor[(11, 14, 8), float64] */;
    (%23, meta[relay.Constant][0] /* ty=uint16 */, %24)
  };
  %25() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */
}

def @func_592(%var_590: uint64, %var_591: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) {
  %34 = fn (%var_583: uint64, %var_584: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) {
    %26 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %27 = cast(%var_583, dtype="uint64") /* ty=uint64 */;
    %28 = cast(%var_584, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %29 = reshape(%27, newshape=[]) /* ty=uint64 */;
    %30 = reshape(%28, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
    %31 = @func_137(%29, %30) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
    %32 = %26.0;
    %33 = %31.1;
    (%32, %33, %var_583, %var_584)
  };
  %34(%var_590, %var_591) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */
}

def @func_4407(%var_4405: Tensor[(2, 252), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(2, 252), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  @func_4404(%var_4405) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(2, 252), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */
}

def @func_4325(%var_4323: Tensor[(11, 14, 8), float32], %var_4324: uint16) -> (Tensor[(11, 14, 8), uint8], Tensor[(7, 4, 9), float32], uint16) {
  @func_4321(%var_4323, %var_4324) /* ty=(Tensor[(11, 14, 8), uint8], Tensor[(7, 4, 9), float32], uint16) */
}

def @func_1029() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) {
  %43 = fn () -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) {
    %35 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %36 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %37 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %38 = reshape(%37, newshape=[]) /* ty=int64 */;
    %39 = @func_487(%38) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
    %40 = %35.0;
    %41 = %36.0;
    %42 = %39.0;
    (%40, %41, %42, -6 /* ty=int64 */)
  };
  %43() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */
}

def @func_4230(%var_4228: Tensor[(504), float64], %var_4229: Tensor[(640), float64]) -> (Tensor[(2, 3, 1), float32], Tensor[(14, 3, 12), float32], Tensor[(504), float64], Tensor[(16, 5, 8), float64], Tensor[(640), float64]) {
  @func_4226(%var_4228, %var_4229) /* ty=(Tensor[(2, 3, 1), float32], Tensor[(14, 3, 12), float32], Tensor[(504), float64], Tensor[(16, 5, 8), float64], Tensor[(640), float64]) */
}

def @func_1262(%var_1259: Tensor[(126, 2), uint64], %var_1260: Tensor[(840), uint64], %var_1261: Tensor[(2, 560), uint16]) -> (Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) {
  @func_1257(%var_1259, %var_1260, %var_1261) /* ty=(Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) */
}

def @func_5036() -> Tensor[(11, 14, 8), float64] {
  @func_5034() /* ty=Tensor[(11, 14, 8), float64] */
}

def @func_1010(%var_995: uint64) -> (Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) {
  %44 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %45 = cast(%var_995, dtype="uint64") /* ty=uint64 */;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %47 = %44.0;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %50 = reshape(%45, newshape=[]) /* ty=uint64 */;
  %51 = reshape(%46, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %52 = reshape(%48, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
  %53 = reshape(%49, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
  %54 = @func_829(%50, %51, %52, %53) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
  %55 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %56 = %54.0;
  %57 = %55.0;
  (%47, %56, %var_995, meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */, meta[relay.Constant][2] /* ty=Tensor[(840), uint64] */, %57)
}

def @func_4258(%var_4255: Tensor[(2, 4, 11), int16], %var_4256: Tensor[(2, 4, 11), int16], %var_4257: Tensor[(1764), bool]) -> (Tensor[(2, 4, 11), int16], Tensor[(450), int16], Tensor[(1764), bool], Tensor[(2, 3, 1), float64]) {
  %69 = fn (%var_4232: Tensor[(2, 4, 11), int16], %var_4233: Tensor[(2, 4, 11), int16], %var_4241: Tensor[(1764), bool]) -> (Tensor[(2, 4, 11), int16], Tensor[(450), int16], Tensor[(1764), bool], Tensor[(2, 3, 1), float64]) {
    %58 = cast(%var_4233, dtype="int16") /* ty=Tensor[(2, 4, 11), int16] */;
    %59 = shape_of(%var_4232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%var_4232, dtype="int16") /* ty=Tensor[(2, 4, 11), int16] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %62 = cast(%var_4241, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %63 = reshape(%62, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
    %64 = @func_3694(%63) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */;
    %65 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %66 = right_shift(%60, %61) /* ty=Tensor[(2, 4, 11), int16] */;
    %67 = %64.2;
    %68 = %65.0;
    (%66, %67, %var_4241, %68)
  };
  %69(%var_4255, %var_4256, %var_4257) /* ty=(Tensor[(2, 4, 11), int16], Tensor[(450), int16], Tensor[(1764), bool], Tensor[(2, 3, 1), float64]) */
}

def @func_1813(%var_1811: Tensor[(2, 15, 15), int16], %var_1812: Tensor[(2, 15, 15), int16]) -> Tensor[(2, 15, 15), bool] {
  @func_1809(%var_1811, %var_1812) /* ty=Tensor[(2, 15, 15), bool] */
}

def @func_2633(%var_2596: Tensor[(5, 12, 8), int64], %var_2603: Tensor[(1, 252), uint64], %var_2623: Tensor[(1120), uint16]) -> (Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) {
  %70 = cast(%var_2596, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %71 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %74 = cast(meta[relay.Constant][4] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %75 = cast(%var_2603, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %76 = reshape(%74, newshape=[]) /* ty=uint64 */;
  %77 = reshape(%75, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint64] */;
  %78 = @func_311(%76, %77) /* ty=(Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) */;
  %79 = cast(meta[relay.Constant][4] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 13, 12), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 12), bool] */;
  %81 = @func_2544() /* ty=(uint16,) */;
  %82 = cast(%var_2603, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %84 = cast(%var_2623, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %85 = reshape(%82, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint64] */;
  %86 = reshape(%83, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %87 = reshape(%84, newshape=[2, 560]) /* ty=Tensor[(2, 560), uint16] */;
  %88 = @func_1257(%85, %86, %87) /* ty=(Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) */;
  %89 = %81.0;
  %90 = cast(%89, dtype="uint16") /* ty=uint16 */;
  %91 = reshape(%90, newshape=[]) /* ty=uint16 */;
  %92 = @func_1440(%91) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
  %93 = bitwise_xor(%72, %73) /* ty=Tensor[(5, 12, 8), int64] */;
  %94 = %78.0;
  %95 = less_equal(%79, %80) /* ty=Tensor[(9, 13, 12), bool] */;
  %96 = %88.8;
  %97 = %92.2;
  (%93, %94, %var_2603, %95, %89, %96, meta[relay.Constant][6] /* ty=Tensor[(840), uint64] */, %var_2623, %97)
}

def @func_962() -> (Tensor[(2, 3, 1), float64],) {
  @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */
}

def @func_5034() -> Tensor[(11, 14, 8), float64] {
  %98 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %98.0
}

def @func_3694(%var_3659: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  %99 = cast(%var_3659, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %100 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 9, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %105 = reshape(%103, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %106 = reshape(%104, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %107 = logical_and(%101, %102) /* ty=Tensor[(14, 9, 14), bool] */;
  %108 = @func_1809(%105, %106) /* ty=Tensor[(2, 15, 15), bool] */;
  (%107, %108, meta[relay.Constant][8] /* ty=Tensor[(450), int16] */)
}

def @func_2518() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) {
  @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */
}

def @func_913(%var_911: Tensor[(8, 12, 7), uint32], %var_912: Tensor[(8, 12, 7), uint32]) -> (Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) {
  %122 = fn (%var_860: Tensor[(8, 12, 7), uint32], %var_861: Tensor[(8, 12, 7), uint32]) -> (Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) {
    %109 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %110 = reshape(%109, newshape=[]) /* ty=int64 */;
    %111 = @func_487(%110) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
    %112 = cast(%var_861, dtype="uint32") /* ty=Tensor[(8, 12, 7), uint32] */;
    %113 = shape_of(%var_860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%var_860, dtype="uint32") /* ty=Tensor[(8, 12, 7), uint32] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %116 = add(%114, %115) /* ty=Tensor[(8, 12, 7), uint32] */;
    %117 = cast(%116, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
    %118 = acos(%117) /* ty=Tensor[(8, 12, 7), float64] */;
    %119 = cast(%118, dtype="float32") /* ty=Tensor[(8, 12, 7), float32] */;
    %120 = %111.1;
    %121 = asin(%119) /* ty=Tensor[(8, 12, 7), float32] */;
    (%120, 3 /* ty=int64 */, %121)
  };
  %122(%var_911, %var_912) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */
}

def @func_5332(%var_5320: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float32], Tensor[(11, 14, 8), int32], Tensor[(672), uint32]) {
  %123 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
  %124 = cast(%var_5320, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %125 = reshape(%124, newshape=[672]) /* ty=Tensor[(672), uint32] */;
  %126 = @func_2591(%125) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) */;
  %127 = %123.0;
  %128 = %126.0;
  (%127, %128, %var_5320)
}

def @func_3471() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) {
  @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */
}

def @func_2432(%var_2431: Tensor[(16, 6, 15), float64]) -> Tensor[(16, 6, 15), float64] {
  %131 = fn (%var_2412: Tensor[(16, 6, 15), float64]) -> Tensor[(16, 6, 15), float64] {
    %129 = cast(-9.09188f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %130 = cast(%var_2412, dtype="float64") /* ty=Tensor[(16, 6, 15), float64] */;
    floor_divide(%129, %130) /* ty=Tensor[(16, 6, 15), float64] */
  };
  %131(%var_2431) /* ty=Tensor[(16, 6, 15), float64] */
}

def @func_1257(%var_1143: Tensor[(126, 2), uint64], %var_1144: Tensor[(840), uint64], %var_1152: Tensor[(2, 560), uint16]) -> (Tensor[(840), uint64], Tensor[(11, 14, 8), float64], Tensor[(10, 16, 7), bool], Tensor[(2, 3, 1), float64], uint16, Tensor[(126, 2), float64], Tensor[(11, 14, 8), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 16, 7), bool], Tensor[(126, 2), float64], Tensor[(2, 560), float32], Tensor[(2, 3, 1), float64]) {
  %132 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %133 = cast(%var_1143, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %134 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %135 = %134.2;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %137 = cast(%var_1144, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %138 = reshape(%132, newshape=[]) /* ty=uint64 */;
  %139 = reshape(%133, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %140 = reshape(%136, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
  %141 = reshape(%137, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
  %142 = @func_829(%138, %139, %140, %141) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
  %143 = %142.2;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %145 = cast(%var_1152, dtype="uint16") /* ty=Tensor[(2, 560), uint16] */;
  %146 = reshape(%145, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
  %147 = @func_983(%146) /* ty=(Tensor[(10, 16, 7), bool],) */;
  %148 = erf(%144) /* ty=Tensor[(11, 14, 8), float64] */;
  %149 = cast(%148, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %150 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint16") /* ty=uint16 */;
  %151 = reshape(%149, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %152 = reshape(%150, newshape=[]) /* ty=uint16 */;
  %153 = @func_463(%151, %152) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %154 = cast(%var_1143, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %155 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %156 = cast(%135, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %157 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
  %158 = %147.0;
  %159 = cast(%158, dtype="uint16") /* ty=Tensor[(10, 16, 7), uint16] */;
  %160 = reshape(%159, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
  %161 = @func_983(%160) /* ty=(Tensor[(10, 16, 7), bool],) */;
  %162 = cast(%var_1143, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %163 = cast(%var_1152, dtype="float32") /* ty=Tensor[(2, 560), float32] */;
  %164 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  %165 = %153.2;
  %166 = power(%154, %155) /* ty=Tensor[(126, 2), float64] */;
  %167 = rsqrt(%156) /* ty=Tensor[(11, 14, 8), float32] */;
  %168 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  %169 = %157.1;
  %170 = %161.0;
  %171 = log(%162) /* ty=Tensor[(126, 2), float64] */;
  %172 = exp(%163) /* ty=Tensor[(2, 560), float32] */;
  %173 = @func_968() /* ty=Tensor[(2, 3, 1), float64] */;
  (%var_1144, %148, %158, %164, %165, %166, %167, %168, %169, %170, %171, %172, %173)
}

def @func_1620(%var_1618: uint16) -> (Tensor[(11, 14, 8), int32], Tensor[(7, 4, 9), bool], uint16) {
  @func_1617(%var_1618) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(7, 4, 9), bool], uint16) */
}

def @func_5563() -> (Tensor[(672), uint32],) {
  @func_5561() /* ty=(Tensor[(672), uint32],) */
}

def @func_427() -> (Tensor[(11, 14, 8), int32],) {
  %179 = fn () -> (Tensor[(11, 14, 8), int32],) {
    %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
    %175 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 14, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %178 = logical_xor(%176, %177) /* ty=Tensor[(11, 14, 8), int32] */;
    (%178,)
  };
  %179() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_4051(%var_4049: Tensor[(2, 6, 14), float64]) -> (uint16, Tensor[(11, 14, 8), float64], Tensor[(72), float64], Tensor[(2, 6, 14), uint32]) {
  @func_4048(%var_4049) /* ty=(uint16, Tensor[(11, 14, 8), float64], Tensor[(72), float64], Tensor[(2, 6, 14), uint32]) */
}

def @func_489(%var_488: int64) -> (Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) {
  %185 = fn (%var_473: int64) -> (Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) {
    %180 = cast(%var_473, dtype="bool") /* ty=bool */;
    %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 2, 8), int64] */, dtype="bool") /* ty=Tensor[(7, 2, 8), bool] */;
    %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 2, 8), int64] */, dtype="float32") /* ty=Tensor[(7, 2, 8), float32] */;
    %183 = less_equal(%180, %181) /* ty=Tensor[(7, 2, 8), bool] */;
    %184 = sqrt(%182) /* ty=Tensor[(7, 2, 8), float32] */;
    (%183, %184)
  };
  %185(%var_488) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */
}

def @func_2807(%var_2803: Tensor[(2, 15, 15), bool], %var_2804: Tensor[(1, 480), int64], %var_2805: Tensor[(1, 252), uint64], %var_2806: Tensor[(280, 4), uint16]) -> (Tensor[(11, 14, 8), float64], Tensor[(450), int16], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), float32], Tensor[(2, 15, 15), bool], Tensor[(11, 14, 8), float64], Tensor[(840), uint64], Tensor[(1, 480), int64], Tensor[(1, 252), uint64], Tensor[(280, 4), uint16], Tensor[(11, 14, 8), uint64]) {
  %223 = fn (%var_2775: Tensor[(2, 15, 15), bool], %var_2790: Tensor[(1, 480), int64], %var_2791: Tensor[(1, 252), uint64], %var_2792: Tensor[(280, 4), uint16]) -> (Tensor[(11, 14, 8), float64], Tensor[(450), int16], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), float32], Tensor[(2, 15, 15), bool], Tensor[(11, 14, 8), float64], Tensor[(840), uint64], Tensor[(1, 480), int64], Tensor[(1, 252), uint64], Tensor[(280, 4), uint16], Tensor[(11, 14, 8), uint64]) {
    %186 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %187 = %186.0;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %189 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %190 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
    %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
    %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
    %193 = reshape(%191, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
    %194 = reshape(%192, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
    %195 = @func_1809(%193, %194) /* ty=Tensor[(2, 15, 15), bool] */;
    %196 = cast(%var_2775, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%195, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %200 = cast(%187, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %201 = sin(%200) /* ty=Tensor[(11, 14, 8), float64] */;
    %202 = cast(%201, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %203 = cast(%var_2790, dtype="int64") /* ty=Tensor[(1, 480), int64] */;
    %204 = cast(%var_2791, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
    %205 = cast(%var_2792, dtype="uint16") /* ty=Tensor[(280, 4), uint16] */;
    %206 = reshape(%203, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), int64] */;
    %207 = reshape(%204, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint64] */;
    %208 = reshape(%205, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %209 = @func_2633(%206, %207, %208) /* ty=(Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) */;
    %210 = cast(%201, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
    %211 = atan(%210) /* ty=Tensor[(11, 14, 8), float32] */;
    %212 = cast(%187, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
    %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %214 = cast(%211, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %216 = exp(%188) /* ty=Tensor[(11, 14, 8), float64] */;
    %217 = %189.0;
    %218 = %190.0;
    %219 = logical_and(%198, %199) /* ty=Tensor[(2, 15, 15), bool] */;
    %220 = sinh(%202) /* ty=Tensor[(11, 14, 8), float64] */;
    %221 = %209.6;
    %222 = minimum(%214, %215) /* ty=Tensor[(11, 14, 8), uint64] */;
    (%216, meta[relay.Constant][13] /* ty=Tensor[(450), int16] */, %217, %218, %219, %220, %221, %var_2790, %var_2791, %var_2792, %222)
  };
  %223(%var_2803, %var_2804, %var_2805, %var_2806) /* ty=(Tensor[(11, 14, 8), float64], Tensor[(450), int16], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), float32], Tensor[(2, 15, 15), bool], Tensor[(11, 14, 8), float64], Tensor[(840), uint64], Tensor[(1, 480), int64], Tensor[(1, 252), uint64], Tensor[(280, 4), uint16], Tensor[(11, 14, 8), uint64]) */
}

def @func_2491() -> Tensor[(2, 3, 1), float64] {
  %225 = fn () -> Tensor[(2, 3, 1), float64] {
    %224 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %224.0
  };
  %225() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_4226(%var_4203: Tensor[(504), float64], %var_4208: Tensor[(640), float64]) -> (Tensor[(2, 3, 1), float32], Tensor[(14, 3, 12), float32], Tensor[(504), float64], Tensor[(16, 5, 8), float64], Tensor[(640), float64]) {
  %226 = @func_3127() /* ty=Tensor[(2, 3, 1), float64] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %228 = cast(%var_4203, dtype="float64") /* ty=Tensor[(504), float64] */;
  %229 = reshape(%228, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), float64] */;
  %230 = @func_1500(%229) /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) */;
  %231 = cast(%var_4208, dtype="float64") /* ty=Tensor[(640), float64] */;
  %232 = reshape(%231, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float64] */;
  %233 = @func_1763(%232) /* ty=(Tensor[(16, 5, 8), float64],) */;
  %234 = atanh(%227) /* ty=Tensor[(2, 3, 1), float32] */;
  %235 = %230.0;
  %236 = %233.0;
  (%234, %235, %var_4203, %236, %var_4208)
}

def @func_2187(%var_2165: Tensor[(11, 14, 8), int32], %var_2182: uint64) -> (Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) {
  %237 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %238 = %237.0;
  %239 = cast(%var_2165, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = cast(%var_2182, dtype="uint64") /* ty=uint64 */;
  %244 = reshape(%243, newshape=[]) /* ty=uint64 */;
  %245 = @func_1010(%244) /* ty=(Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) */;
  %246 = equal(%241, %242) /* ty=Tensor[(11, 14, 8), bool] */;
  %247 = %245.0;
  (%246, %247, %var_2182)
}

def @func_137(%var_116: uint64, %var_117: Tensor[(3, 12, 7), uint64]) -> (Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) {
  %248 = cast(%var_116, dtype="uint64") /* ty=uint64 */;
  %249 = cast(%var_117, dtype="uint64") /* ty=Tensor[(3, 12, 7), uint64] */;
  %250 = cast(%var_117, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  %251 = multiply(%248, %249) /* ty=Tensor[(3, 12, 7), uint64] */;
  %252 = sin(%250) /* ty=Tensor[(3, 12, 7), float32] */;
  (%251, %252)
}

def @func_2895(%var_2893: Tensor[(2, 3, 12), float64], %var_2894: uint16) -> (Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) {
  %273 = fn (%var_2839: Tensor[(2, 3, 12), float64], %var_2876: uint16) -> (Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) {
    %253 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %254 = %253.0;
    %255 = cast(%254, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
    %256 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 3, 13), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 13), bool] */;
    %257 = cast(%254, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
    %258 = cast(%var_2839, dtype="float32") /* ty=Tensor[(2, 3, 12), float32] */;
    %259 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
    %260 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
    %261 = cast(%var_2876, dtype="uint16") /* ty=uint16 */;
    %262 = reshape(%261, newshape=[]) /* ty=uint16 */;
    %263 = @func_1440(%262) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
    %264 = cast(%254, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %265 = atan(%264) /* ty=Tensor[(2, 3, 1), float64] */;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
    %267 = less(%255, %256) /* ty=Tensor[(2, 3, 13), bool] */;
    %268 = multiply(%257, %258) /* ty=Tensor[(2, 3, 12), float32] */;
    %269 = %259.2;
    %270 = %260.0;
    %271 = %263.1;
    %272 = rsqrt(%266) /* ty=Tensor[(2, 3, 1), float32] */;
    (%267, %268, %269, %270, %271, %var_2876, %272)
  };
  %273(%var_2893, %var_2894) /* ty=(Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) */
}

def @func_985(%var_984: Tensor[(10, 16, 7), uint16]) -> (Tensor[(10, 16, 7), bool],) {
  %279 = fn (%var_977: Tensor[(10, 16, 7), uint16]) -> (Tensor[(10, 16, 7), bool],) {
    %274 = cast(%var_977, dtype="bool") /* ty=Tensor[(10, 16, 7), bool] */;
    %275 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 16, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 16, 7), uint16] */, dtype="bool") /* ty=Tensor[(10, 16, 7), bool] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %278 = equal(%276, %277) /* ty=Tensor[(10, 16, 7), bool] */;
    (%278,)
  };
  %279(%var_984) /* ty=(Tensor[(10, 16, 7), bool],) */
}

def @func_1859(%var_1857: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) {
  @func_1856(%var_1857) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) */
}

def @func_4367() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  @func_4365() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */
}

def @func_1500(%var_1481: Tensor[(14, 3, 12), float64]) -> (Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) {
  %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 12), float64] */;
  %281 = asinh(%280) /* ty=Tensor[(14, 3, 12), float64] */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 3, 12), float64] */, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %286 = cast(%var_1481, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %287 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 3, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 3, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 3, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %291 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%281, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %294 = power(%284, %285) /* ty=Tensor[(14, 3, 12), float32] */;
  %295 = logical_and(%288, %289) /* ty=Tensor[(14, 3, 12), bool] */;
  %296 = greater_equal(%292, %293) /* ty=Tensor[(14, 3, 12), bool] */;
  (%294, %295, %296)
}

def @func_610() -> (Tensor[(11, 14, 8), int32],) {
  @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_2593(%var_2592: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) {
  %304 = fn (%var_2582: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) {
    %297 = cast(%var_2582, dtype="uint32") /* ty=Tensor[(672), uint32] */;
    %298 = cast(%var_2582, dtype="uint32") /* ty=Tensor[(672), uint32] */;
    %299 = reshape(%297, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
    %300 = reshape(%298, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
    %301 = @func_910(%299, %300) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
    %302 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
    %303 = %301.2;
    (%302, %303, %var_2582)
  };
  %304(%var_2592) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(8, 12, 7), float32], Tensor[(672), uint32]) */
}

def @func_4321(%var_4288: Tensor[(11, 14, 8), float32], %var_4312: uint16) -> (Tensor[(11, 14, 8), uint8], Tensor[(7, 4, 9), float32], uint16) {
  %305 = @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */;
  %306 = %305.0;
  %307 = cast(%var_4288, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %311 = cast(%var_4312, dtype="uint16") /* ty=uint16 */;
  %312 = reshape(%311, newshape=[]) /* ty=uint16 */;
  %313 = @func_1440(%312) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */;
  %314 = add(%309, %310) /* ty=Tensor[(11, 14, 8), uint8] */;
  %315 = %313.0;
  (%314, %315, %var_4312)
}

def @func_6103(%var_6102: Tensor[(7, 252), uint64]) -> (Tensor[(11, 14, 8), uint64], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(7, 252), bool]) {
  %329 = fn (%var_6065: Tensor[(7, 252), uint64]) -> (Tensor[(11, 14, 8), uint64], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(7, 252), bool]) {
    %316 = @func_4683() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) */;
    %317 = @func_3107() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
    %318 = @func_4732() /* ty=(Tensor[(11, 14, 8), bool],) */;
    %319 = %316.1;
    %320 = cast(%319, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %321 = reshape(%320, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %322 = @func_2984(%321) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
    %323 = %322.2;
    %324 = cast(%323, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
    %325 = cast(%var_6065, dtype="bool") /* ty=Tensor[(7, 252), bool] */;
    %326 = %317.1;
    %327 = %318.0;
    %328 = greater(%324, %325) /* ty=Tensor[(7, 252), bool] */;
    (%319, %326, %327, %328)
  };
  %329(%var_6102) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(7, 252), bool]) */
}

def @func_5263() -> Tensor[(2, 3, 1), float64] {
  @func_5261() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_1763(%var_1753: Tensor[(16, 5, 8), float64]) -> (Tensor[(16, 5, 8), float64],) {
  %330 = cast(%var_1753, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %331 = sinh(%330) /* ty=Tensor[(16, 5, 8), float64] */;
  (%331,)
}

def @func_2674() -> (Tensor[(11, 14, 8), int32],) {
  %334 = fn () -> (Tensor[(11, 14, 8), int32],) {
    %332 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %333 = %332.0;
    (%333,)
  };
  %334() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_3107() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  %335 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %336 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %337 = %335.1;
  %338 = %336.0;
  (%337, %338)
}

def @func_314(%var_312: uint64, %var_313: Tensor[(1, 252), uint64]) -> (Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) {
  %347 = fn (%var_301: uint64, %var_302: Tensor[(1, 252), uint64]) -> (Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) {
    %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
    %340 = cast(%var_301, dtype="uint64") /* ty=uint64 */;
    %341 = cast(%var_302, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
    %342 = reshape(%340, newshape=[]) /* ty=uint64 */;
    %343 = reshape(%341, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
    %344 = @func_137(%342, %343) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
    %345 = atan(%339) /* ty=Tensor[(3, 1, 2), float64] */;
    %346 = %344.0;
    (%345, %346, %var_301, %var_302)
  };
  %347(%var_312, %var_313) /* ty=(Tensor[(3, 1, 2), float64], Tensor[(3, 12, 7), uint64], uint64, Tensor[(1, 252), uint64]) */
}

def @func_3414(%var_3412: Tensor[(15, 8, 8), float32], %var_3413: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(15, 8, 8), float64], Tensor[(15, 8, 8), float32]) {
  %363 = fn (%var_3363: Tensor[(15, 8, 8), float32], %var_3366: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(15, 8, 8), float64], Tensor[(15, 8, 8), float32]) {
    %348 = cast(%var_3363, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
    %349 = cos(%348) /* ty=Tensor[(15, 8, 8), float32] */;
    %350 = cast(%var_3366, dtype="uint64") /* ty=Tensor[(15, 8, 8), uint64] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="uint64") /* ty=Tensor[(15, 8, 8), uint64] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %354 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %355 = cast(%349, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
    %356 = cast(%349, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
    %357 = logical_xor(%352, %353) /* ty=Tensor[(15, 8, 8), uint64] */;
    %358 = @func_2490() /* ty=Tensor[(2, 3, 1), float64] */;
    %359 = %354.0;
    %360 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
    %361 = sinh(%355) /* ty=Tensor[(15, 8, 8), float64] */;
    %362 = atanh(%356) /* ty=Tensor[(15, 8, 8), float32] */;
    (%357, %358, %359, %360, %361, %362)
  };
  %363(%var_3412, %var_3413) /* ty=(Tensor[(15, 8, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(15, 8, 8), float64], Tensor[(15, 8, 8), float32]) */
}

def @func_4429(%var_4427: Tensor[(8, 7, 1), int64], %var_4428: Tensor[(8, 7, 6), int64]) -> (Tensor[(8, 7, 6), int64], Tensor[(8, 7, 1), float32]) {
  %369 = fn (%var_4417: Tensor[(8, 7, 1), int64], %var_4418: Tensor[(8, 7, 6), int64]) -> (Tensor[(8, 7, 6), int64], Tensor[(8, 7, 1), float32]) {
    %364 = cast(%var_4417, dtype="int64") /* ty=Tensor[(8, 7, 1), int64] */;
    %365 = cast(%var_4418, dtype="int64") /* ty=Tensor[(8, 7, 6), int64] */;
    %366 = cast(%var_4417, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
    %367 = bitwise_or(%364, %365) /* ty=Tensor[(8, 7, 6), int64] */;
    %368 = log10(%366) /* ty=Tensor[(8, 7, 1), float32] */;
    (%367, %368)
  };
  %369(%var_4427, %var_4428) /* ty=(Tensor[(8, 7, 6), int64], Tensor[(8, 7, 1), float32]) */
}

def @func_2544() -> (uint16,) {
  %370 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %371 = %370.1;
  (%371,)
}

def @func_3280(%var_3278: Tensor[(1232), float64]) -> (uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) {
  @func_3277(%var_3278) /* ty=(uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) */
}

def @func_4685() -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) {
  @func_4683() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) */
}

def @func_5881() -> (Tensor[(450), int16], Tensor[(1764), bool], Tensor[(11, 14, 8), float64]) {
  @func_5879() /* ty=(Tensor[(450), int16], Tensor[(1764), bool], Tensor[(11, 14, 8), float64]) */
}

def @func_3648(%var_3628: Tensor[(1232), int32], %var_3629: uint64, %var_3643: Tensor[(720), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) {
  %372 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %373 = cast(%var_3628, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %374 = cast(%var_3629, dtype="uint64") /* ty=uint64 */;
  %375 = reshape(%373, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %376 = reshape(%374, newshape=[]) /* ty=uint64 */;
  %377 = @func_2187(%375, %376) /* ty=(Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) */;
  %378 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %379 = cast(%var_3643, dtype="float32") /* ty=Tensor[(720), float32] */;
  %380 = reshape(%379, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %381 = @func_2952(%380) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) */;
  %382 = @func_3127() /* ty=Tensor[(2, 3, 1), float64] */;
  %383 = %372.2;
  %384 = %377.1;
  %385 = %378.0;
  %386 = %381.2;
  (%382, %383, %384, %var_3628, %var_3629, %385, %386, %var_3643)
}

def @func_3870(%var_3782: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) {
  %387 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %388 = cast(meta[relay.Constant][18] /* ty=uint16 */, dtype="uint64") /* ty=uint64 */;
  %389 = cast(%var_3782, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %390 = reshape(%388, newshape=[]) /* ty=uint64 */;
  %391 = reshape(%389, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %392 = @func_589(%390, %391) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
  %393 = @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %396 = log(%395) /* ty=Tensor[(2, 3, 1), float32] */;
  %397 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %398 = %397.3;
  %399 = cast(%396, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %400 = cast(%398, dtype="float64") /* ty=Tensor[(672), float64] */;
  %401 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %402 = cast(meta[relay.Constant][18] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %403 = reshape(%401, newshape=[2, 3, 12]) /* ty=Tensor[(2, 3, 12), float64] */;
  %404 = reshape(%402, newshape=[]) /* ty=uint16 */;
  %405 = @func_2892(%403, %404) /* ty=(Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) */;
  %406 = @func_2683() /* ty=Tensor[(11, 14, 8), float64] */;
  %407 = %387.0;
  %408 = cast(%407, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %409 = cast(meta[relay.Constant][18] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %410 = reshape(%408, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %411 = reshape(%409, newshape=[]) /* ty=uint16 */;
  %412 = @func_463(%410, %411) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %415 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%406, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %418 = cast(%396, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %419 = sqrt(%418) /* ty=Tensor[(2, 3, 1), float64] */;
  %420 = cast(%396, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = logical_and(%422, %423) /* ty=Tensor[(2, 3, ?), bool] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(2, 3, ?), bool] */;
  %426 = cast(meta[relay.Constant][18] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %427 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %428 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %429 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %430 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
  %431 = %392.1;
  %432 = floor_divide(%399, %400) /* ty=Tensor[(2, 3, 672), float64] */;
  %433 = %405.4;
  %434 = bitwise_and(%416, %417) /* ty=Tensor[(11, 14, 8), uint64] */;
  %435 = less_equal(%425, %426) /* ty=Tensor[(2, 3, ?), bool] */;
  %436 = %427.0;
  %437 = %428.0;
  (%407, %429, %430, %431, %var_3782, %432, %433, meta[relay.Constant][19] /* ty=Tensor[(72), float64] */, %434, %435, %436, %437)
}

def @func_2638(%var_2635: Tensor[(5, 12, 8), int64], %var_2636: Tensor[(1, 252), uint64], %var_2637: Tensor[(1120), uint16]) -> (Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) {
  @func_2633(%var_2635, %var_2636, %var_2637) /* ty=(Tensor[(5, 12, 8), int64], Tensor[(3, 1, 2), float64], Tensor[(1, 252), uint64], Tensor[(9, 13, 12), bool], uint16, Tensor[(11, 14, 8), int32], Tensor[(840), uint64], Tensor[(1120), uint16], Tensor[(2, 3, 11), bool]) */
}

def @func_3653(%var_3650: Tensor[(1232), int32], %var_3651: uint64, %var_3652: Tensor[(720), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) {
  @func_3648(%var_3650, %var_3651, %var_3652) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) */
}

def @func_5965() -> Tensor[(14, 4, 16), float32] {
  %440 = fn () -> Tensor[(14, 4, 16), float32] {
    %438 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
    %439 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    power(%438, %439) /* ty=Tensor[(14, 4, 16), float32] */
  };
  %440() /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_970() -> Tensor[(2, 3, 1), float64] {
  @func_968() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_2698() -> (Tensor[(2, 3, 1), float64],) {
  %441 = @func_2490() /* ty=Tensor[(2, 3, 1), float64] */;
  (%441,)
}

def @func_2475() -> (Tensor[(11, 14, 8), float32],) {
  %442 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %444 = log2(%443) /* ty=Tensor[(11, 14, 8), float32] */;
  (%444,)
}

def @func_5261() -> Tensor[(2, 3, 1), float64] {
  %445 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %445.0
}

def @func_5477(%var_5475: Tensor[(252), uint64], %var_5476: Tensor[(1120), uint16]) -> (Tensor[(168, 4), uint32], Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(252), uint64], Tensor[(10, 16, 7), bool], Tensor[(1120), uint16]) {
  %458 = fn (%var_5453: Tensor[(252), uint64], %var_5472: Tensor[(1120), uint16]) -> (Tensor[(168, 4), uint32], Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(252), uint64], Tensor[(10, 16, 7), bool], Tensor[(1120), uint16]) {
    %446 = @func_4721() /* ty=(Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) */;
    %447 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %448 = cast(%var_5453, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %449 = reshape(%448, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %450 = @func_3870(%449) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) */;
    %451 = cast(%var_5472, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %452 = reshape(%451, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), uint16] */;
    %453 = @func_983(%452) /* ty=(Tensor[(10, 16, 7), bool],) */;
    %454 = %446.2;
    %455 = %447.0;
    %456 = %450.11;
    %457 = %453.0;
    (%454, %455, %456, %var_5453, %457, %var_5472)
  };
  %458(%var_5475, %var_5476) /* ty=(Tensor[(168, 4), uint32], Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(252), uint64], Tensor[(10, 16, 7), bool], Tensor[(1120), uint16]) */
}

def @func_5194(%var_5193: Tensor[(11, 14, 8), int32]) -> (Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16], uint16) {
  %476 = fn (%var_5123: Tensor[(11, 14, 8), int32]) -> (Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16], uint16) {
    %459 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %460 = %459.0;
    %461 = cast(%var_5123, dtype="int16") /* ty=Tensor[(11, 14, 8), int16] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="int16") /* ty=Tensor[(11, 14, 8), int16] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %465 = subtract(%463, %464) /* ty=Tensor[(11, 14, 8), int16] */;
    %466 = cast(%465, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %467 = cast(meta[relay.Constant][22] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
    %468 = cast(meta[relay.Constant][22] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
    %469 = reshape(%467, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
    %470 = reshape(%468, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
    %471 = @func_4457() /* ty=(uint16,) */;
    %472 = atanh(%466) /* ty=Tensor[(11, 14, 8), float64] */;
    %473 = @func_4010() /* ty=Tensor[(2, 3, 1), float64] */;
    %474 = @func_1809(%469, %470) /* ty=Tensor[(2, 15, 15), bool] */;
    %475 = %471.0;
    (%472, %473, %474, meta[relay.Constant][22] /* ty=Tensor[(450), int16] */, %475)
  };
  %476(%var_5193) /* ty=(Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16], uint16) */
}

def @func_5693() -> (Tensor[(672), uint32],) {
  %477 = @func_5561() /* ty=(Tensor[(672), uint32],) */;
  %478 = %477.0;
  (%478,)
}

def @func_2516() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) {
  %479 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %480 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), uint32] */, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %482 = reshape(%481, newshape=[672]) /* ty=Tensor[(672), uint32] */;
  %483 = @func_1856(%482) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) */;
  %484 = %479.0;
  %485 = %480.0;
  %486 = %483.1;
  (%484, %485, %486, meta[relay.Constant][23] /* ty=Tensor[(672), uint32] */)
}

def @func_2291() -> Tensor[(11, 14, 8), int32] {
  @func_2289() /* ty=Tensor[(11, 14, 8), int32] */
}

def @func_4365() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  %487 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %488 = @func_1724() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %489 = %487.0;
  %490 = %488.3;
  (%489, %490)
}

def @func_2251() -> (Tensor[(2, 3, 1), float64],) {
  @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */
}

def @func_5879() -> (Tensor[(450), int16], Tensor[(1764), bool], Tensor[(11, 14, 8), float64]) {
  %491 = cast(meta[relay.Constant][24] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %492 = reshape(%491, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %493 = @func_3694(%492) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */;
  %494 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %495 = %494.2;
  %496 = @func_4365() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
  %497 = %496.1;
  %498 = cast(%497, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %499 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%495, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = greater(%500, %501) /* ty=Tensor[(11, 14, 8), bool] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %504 = sigmoid(%503) /* ty=Tensor[(11, 14, 8), float32] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %506 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%502, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %509 = %493.2;
  %510 = floor_mod(%507, %508) /* ty=Tensor[(11, 14, 8), float64] */;
  (%509, meta[relay.Constant][24] /* ty=Tensor[(1764), bool] */, %510)
}

def @func_5943() -> (uint16, Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool]) {
  @func_5941() /* ty=(uint16, Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool]) */
}

def @func_835(%var_831: uint64, %var_832: Tensor[(252), uint64], %var_833: Tensor[(11, 14, 8), float64], %var_834: Tensor[(7, 8, 15), uint64]) -> (uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) {
  @func_829(%var_831, %var_832, %var_833, %var_834) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */
}

def @func_1583() -> (Tensor[(11, 14, 8), int32],) {
  @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_1110(%var_1108: Tensor[(252), uint64], %var_1109: Tensor[(1232), float64]) -> (int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) {
  %525 = fn (%var_1088: Tensor[(252), uint64], %var_1089: Tensor[(1232), float64]) -> (int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) {
    %511 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
    %512 = %511.3;
    %513 = cast(%512, dtype="uint64") /* ty=uint64 */;
    %514 = cast(%var_1088, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %515 = cast(%var_1089, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %516 = cast(meta[relay.Constant][25] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %517 = reshape(%513, newshape=[]) /* ty=uint64 */;
    %518 = reshape(%514, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %519 = reshape(%515, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), float64] */;
    %520 = reshape(%516, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), uint64] */;
    %521 = @func_829(%517, %518, %519, %520) /* ty=(uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) */;
    %522 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %523 = %521.2;
    %524 = %522.0;
    (%512, %523, %var_1088, %var_1089, meta[relay.Constant][25] /* ty=Tensor[(840), uint64] */, %524)
  };
  %525(%var_1108, %var_1109) /* ty=(int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) */
}

def @func_5251() -> (Tensor[(11, 14, 8), uint64],) {
  @func_5249() /* ty=(Tensor[(11, 14, 8), uint64],) */
}

def @func_5561() -> (Tensor[(672), uint32],) {
  %526 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %527 = %526.3;
  (%527,)
}

def @func_3109() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) {
  @func_3107() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */
}

def @func_3697(%var_3695: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  @func_3694(%var_3695) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) */
}

def @func_4011() -> Tensor[(2, 3, 1), float64] {
  %528 = fn () -> Tensor[(2, 3, 1), float64] {
    @func_2490() /* ty=Tensor[(2, 3, 1), float64] */
  };
  %528() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_5695() -> (Tensor[(672), uint32],) {
  @func_5693() /* ty=(Tensor[(672), uint32],) */
}

def @func_5941() -> (uint16, Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool]) {
  %529 = @func_5110() /* ty=(uint16,) */;
  %530 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %533 = %529.0;
  %534 = cast(%533, dtype="uint64") /* ty=uint64 */;
  %535 = reshape(%532, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %536 = reshape(%534, newshape=[]) /* ty=uint64 */;
  %537 = @func_2187(%535, %536) /* ty=(Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) */;
  %538 = %537.0;
  (%533, %531, %538)
}

def @func_4404(%var_4392: Tensor[(2, 252), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(2, 252), float64], Tensor[(2, 15, 15), bool], Tensor[(450), int16]) {
  %539 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %540 = cast(%var_4392, dtype="float64") /* ty=Tensor[(2, 252), float64] */;
  %541 = reshape(%540, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %542 = @func_3993(%541) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) */;
  %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %544 = cast(meta[relay.Constant][26] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %545 = reshape(%543, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %546 = reshape(%544, newshape=[2, 15, 15]) /* ty=Tensor[(2, 15, 15), int16] */;
  %547 = %539.0;
  %548 = %542.0;
  %549 = @func_1809(%545, %546) /* ty=Tensor[(2, 15, 15), bool] */;
  (%547, %548, %var_4392, %549, meta[relay.Constant][26] /* ty=Tensor[(450), int16] */)
}

def @func_2477() -> (Tensor[(11, 14, 8), float32],) {
  @func_2475() /* ty=(Tensor[(11, 14, 8), float32],) */
}

def @func_5528(%var_5527: Tensor[(11, 14, 8), float64]) -> Tensor[(11, 14, 8), uint8] {
  %556 = fn (%var_5520: Tensor[(11, 14, 8), float64]) -> Tensor[(11, 14, 8), uint8] {
    %550 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
    %551 = %550.0;
    %552 = cast(%var_5520, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%551, dtype="uint8") /* ty=Tensor[(11, 14, 8), uint8] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%554, %555) /* ty=Tensor[(11, 14, 8), uint8] */
  };
  %556(%var_5527) /* ty=Tensor[(11, 14, 8), uint8] */
}

def @func_3934() -> (Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %568 = fn () -> (Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
    %557 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
    %558 = cast(%557, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %559 = reshape(%558, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %560 = @func_3277(%559) /* ty=(uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) */;
    %561 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %562 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
    %563 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
    %564 = %560.0;
    %565 = %561.0;
    %566 = %562.0;
    %567 = %563.0;
    (%557, %564, %565, %566, %567)
  };
  %568() /* ty=(Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */
}

def @func_1856(%var_1841: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], int64, Tensor[(672), uint32]) {
  %569 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %570 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %573 = cast(%var_1841, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %574 = cast(%var_1841, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %575 = reshape(%573, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %576 = reshape(%574, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %577 = @func_910(%575, %576) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
  %578 = %569.1;
  %579 = exp(%572) /* ty=Tensor[(2, 3, 1), float64] */;
  %580 = %577.1;
  (%578, %579, %580, %var_1841)
}

def @func_1304() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) {
  @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */
}

def @func_1809(%var_1794: Tensor[(2, 15, 15), int16], %var_1795: Tensor[(2, 15, 15), int16]) -> Tensor[(2, 15, 15), bool] {
  %581 = cast(%var_1795, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %582 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_1794, dtype="bool") /* ty=Tensor[(2, 15, 15), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%583, %584) /* ty=Tensor[(2, 15, 15), bool] */
}

def @func_4969(%var_4962: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float64], Tensor[(672), bool]) {
  %585 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
  %586 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %587 = %586.3;
  %588 = cast(%var_4962, dtype="bool") /* ty=Tensor[(672), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(1), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(672), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?), bool] */;
  %592 = %585.0;
  %593 = logical_or(%590, %591) /* ty=Tensor[(672), bool] */;
  (%592, %593)
}

def @func_3243(%var_3241: Tensor[(4, 180), float32]) -> (Tensor[(11, 14, 8), int32], Tensor[(4, 180), float32], Tensor[(16, 5, 8), float64], Tensor[(640), float64], Tensor[(2, 3, ?), bool]) {
  @func_3240(%var_3241) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(4, 180), float32], Tensor[(16, 5, 8), float64], Tensor[(640), float64], Tensor[(2, 3, ?), bool]) */
}

def @func_2546() -> (uint16,) {
  @func_2544() /* ty=(uint16,) */
}

def @func_2684() -> Tensor[(11, 14, 8), float64] {
  %595 = fn () -> Tensor[(11, 14, 8), float64] {
    %594 = @func_1302() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) */;
    %594.0
  };
  %595() /* ty=Tensor[(11, 14, 8), float64] */
}

def @func_5224() -> (Tensor[(11, 14, 8), int32],) {
  %598 = fn () -> (Tensor[(11, 14, 8), int32],) {
    %596 = @func_3107() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32]) */;
    %597 = %596.1;
    (%597,)
  };
  %598() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_5007() -> Tensor[(672), uint32] {
  %600 = fn () -> Tensor[(672), uint32] {
    %599 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
    %599.3
  };
  %600() /* ty=Tensor[(672), uint32] */
}

def @func_3240(%var_3156: Tensor[(4, 180), float32]) -> (Tensor[(11, 14, 8), int32], Tensor[(4, 180), float32], Tensor[(16, 5, 8), float64], Tensor[(640), float64], Tensor[(2, 3, ?), bool]) {
  %601 = @func_2673() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %602 = cast(%var_3156, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %603 = cast(meta[relay.Constant][27] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %604 = reshape(%603, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float64] */;
  %605 = @func_1763(%604) /* ty=(Tensor[(16, 5, 8), float64],) */;
  %606 = cast(%var_3156, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %607 = reshape(%606, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %608 = @func_2952(%607) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
  %611 = sin(%610) /* ty=Tensor[(2, 3, 1), float32] */;
  %612 = cast(%609, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = %601.0;
  %617 = acosh(%602) /* ty=Tensor[(4, 180), float32] */;
  %618 = %605.0;
  %619 = logical_or(%614, %615) /* ty=Tensor[(2, 3, ?), bool] */;
  (%616, %617, %618, meta[relay.Constant][27] /* ty=Tensor[(640), float64] */, %619)
}

def @func_4734() -> (Tensor[(11, 14, 8), bool],) {
  @func_4732() /* ty=(Tensor[(11, 14, 8), bool],) */
}

def @func_1733() -> Tensor[(11, 14, 8), int32] {
  @func_1731() /* ty=Tensor[(11, 14, 8), int32] */
}

def @func_1332() -> Tensor[(11, 14, 8), int32] {
  @func_1330() /* ty=Tensor[(11, 14, 8), int32] */
}

def @func_4723() -> (Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) {
  @func_4721() /* ty=(Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) */
}

def @func_4849(%var_4847: Tensor[(4, 15, 9), float64], %var_4848: Tensor[(4, 15, 9), float64]) -> Tensor[(4, 15, 9), float64] {
  @func_4845(%var_4847, %var_4848) /* ty=Tensor[(4, 15, 9), float64] */
}

def @func_3128() -> Tensor[(2, 3, 1), float64] {
  %621 = fn () -> Tensor[(2, 3, 1), float64] {
    %620 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
    %620.0
  };
  %621() /* ty=Tensor[(2, 3, 1), float64] */
}

def @func_4561(%var_4560: uint64) -> (Tensor[(2, 3, 1), float64], Tensor[(672), uint32], Tensor[(616, 2), float64], Tensor[(2, 3, 1), float64], uint64, Tensor[(720), float32]) {
  %635 = fn (%var_4537: uint64) -> (Tensor[(2, 3, 1), float64], Tensor[(672), uint32], Tensor[(616, 2), float64], Tensor[(2, 3, 1), float64], uint64, Tensor[(720), float32]) {
    %622 = cast(meta[relay.Constant][28] /* ty=Tensor[(616, 2), float64] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
    %623 = reshape(%622, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %624 = @func_2984(%623) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
    %625 = cast(meta[relay.Constant][28] /* ty=Tensor[(616, 2), float64] */, dtype="int32") /* ty=Tensor[(616, 2), int32] */;
    %626 = cast(%var_4537, dtype="uint64") /* ty=uint64 */;
    %627 = cast(meta[relay.Constant][29] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %628 = reshape(%625, newshape=[1232]) /* ty=Tensor[(1232), int32] */;
    %629 = reshape(%626, newshape=[]) /* ty=uint64 */;
    %630 = reshape(%627, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %631 = @func_3648(%628, %629, %630) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(1232), int32], uint64, Tensor[(2, 3, 1), float64], Tensor[(10, 8, 9), float64], Tensor[(720), float32]) */;
    %632 = @func_4010() /* ty=Tensor[(2, 3, 1), float64] */;
    %633 = %624.0;
    %634 = %631.1;
    (%632, %633, meta[relay.Constant][28] /* ty=Tensor[(616, 2), float64] */, %634, %var_4537, meta[relay.Constant][29] /* ty=Tensor[(720), float32] */)
  };
  %635(%var_4560) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(672), uint32], Tensor[(616, 2), float64], Tensor[(2, 3, 1), float64], uint64, Tensor[(720), float32]) */
}

def @func_3596() -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
  %640 = fn () -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
    %636 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
    %637 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
    %638 = %636.0;
    %639 = %637.0;
    (%638, %639)
  };
  %640() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) */
}

def @func_4900() -> (uint16, Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %646 = fn () -> (uint16, Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
    %641 = @func_4457() /* ty=(uint16,) */;
    %642 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
    %643 = %641.0;
    %644 = %642.0;
    %645 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
    (%643, %644, %645)
  };
  %646() /* ty=(uint16, Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */
}

def @func_1562() -> (Tensor[(2, 3, 1), float64], int64) {
  @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */
}

def @func_3469() -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) {
  %647 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %648 = %647.0;
  %649 = @func_2683() /* ty=Tensor[(11, 14, 8), float64] */;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %651 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%648, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%649, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %655 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
  %656 = less(%652, %653) /* ty=Tensor[(11, 14, 8), bool] */;
  %657 = log10(%654) /* ty=Tensor[(11, 14, 8), float64] */;
  (%655, %656, %657)
}

def @func_3335() -> (Tensor[(11, 14, 8), int32],) {
  %659 = fn () -> (Tensor[(11, 14, 8), int32],) {
    %658 = @func_1731() /* ty=Tensor[(11, 14, 8), int32] */;
    (%658,)
  };
  %659() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_968() -> Tensor[(2, 3, 1), float64] {
  %660 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %660.0
}

def @func_1503(%var_1501: Tensor[(14, 3, 12), float64]) -> (Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) {
  @func_1500(%var_1501) /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) */
}

def @func_1442(%var_1441: uint16) -> (Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) {
  %698 = fn (%var_1373: uint16) -> (Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) {
    %661 = cast(%var_1373, dtype="uint16") /* ty=uint16 */;
    %662 = reshape(%661, newshape=[]) /* ty=uint16 */;
    %663 = @func_357(%662) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
    %664 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %665 = %664.0;
    %666 = cast(%665, dtype="float32") /* ty=Tensor[(2, 3, 1), float32] */;
    %667 = sinh(%666) /* ty=Tensor[(2, 3, 1), float32] */;
    %668 = cast(%667, dtype="int16") /* ty=Tensor[(2, 3, 1), int16] */;
    %669 = cast(%var_1373, dtype="int16") /* ty=int16 */;
    %670 = cast(%667, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %671 = cosh(%670) /* ty=Tensor[(2, 3, 1), float64] */;
    %672 = cast(%671, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
    %673 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 11), bool] */;
    %674 = cast(%var_1373, dtype="int64") /* ty=int64 */;
    %675 = reshape(%674, newshape=[]) /* ty=int64 */;
    %676 = @func_487(%675) /* ty=(Tensor[(7, 2, 8), bool], Tensor[(7, 2, 8), float32]) */;
    %677 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
    %678 = cast(%671, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %679 = asinh(%678) /* ty=Tensor[(2, 3, 1), float64] */;
    %680 = cast(%671, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %684 = cast(%679, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
    %685 = %677.1;
    %686 = cast(%685, dtype="uint64") /* ty=uint64 */;
    %687 = %663.1;
    %688 = cast(%687, dtype="uint64") /* ty=Tensor[(7, 4, 9), uint64] */;
    %689 = reshape(%686, newshape=[]) /* ty=uint64 */;
    %690 = reshape(%688, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), uint64] */;
    %691 = @func_137(%689, %690) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */;
    %692 = maximum(%668, %669) /* ty=Tensor[(2, 3, 1), int16] */;
    %693 = logical_and(%672, %673) /* ty=Tensor[(2, 3, 11), bool] */;
    %694 = %676.1;
    %695 = mod(%682, %683) /* ty=Tensor[(2, 3, ?), float64] */;
    %696 = asin(%684) /* ty=Tensor[(2, 3, 1), float64] */;
    %697 = %691.0;
    (%687, %692, %693, %694, %685, %695, %696, %697)
  };
  %698(%var_1441) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(2, 3, 1), int16], Tensor[(2, 3, 11), bool], Tensor[(7, 2, 8), float32], uint16, Tensor[(2, 3, ?), float64], Tensor[(2, 3, 1), float64], Tensor[(3, 12, 7), uint64]) */
}

def @func_3996(%var_3994: Tensor[(504), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) {
  @func_3993(%var_3994) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) */
}

def @func_359(%var_358: uint16) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) {
  %704 = fn (%var_335: uint16) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) {
    %699 = cast(%var_335, dtype="bool") /* ty=bool */;
    %700 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 4, 9), uint16] */, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
    %701 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 4, 9), uint16] */, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %702 = not_equal(%699, %700) /* ty=Tensor[(7, 4, 9), bool] */;
    %703 = sqrt(%701) /* ty=Tensor[(7, 4, 9), float32] */;
    (%702, %703)
  };
  %704(%var_358) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */
}

def @func_5111() -> (uint16,) {
  %707 = fn () -> (uint16,) {
    %705 = @func_4457() /* ty=(uint16,) */;
    %706 = %705.0;
    (%706,)
  };
  %707() /* ty=(uint16,) */
}

def @func_1766(%var_1764: Tensor[(16, 5, 8), float64]) -> (Tensor[(16, 5, 8), float64],) {
  @func_1763(%var_1764) /* ty=(Tensor[(16, 5, 8), float64],) */
}

def @func_5422() -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
  %711 = fn () -> (Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) {
    %708 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
    %709 = @func_2289() /* ty=Tensor[(11, 14, 8), int32] */;
    %710 = %708.0;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) */
}

def @func_5335(%var_5333: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float32], Tensor[(11, 14, 8), int32], Tensor[(672), uint32]) {
  @func_5332(%var_5333) /* ty=(Tensor[(11, 14, 8), float32], Tensor[(11, 14, 8), int32], Tensor[(672), uint32]) */
}

def @func_1560() -> (Tensor[(2, 3, 1), float64], int64) {
  %712 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %713 = @func_1028() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(7, 2, 8), bool], int64) */;
  %714 = %712.0;
  %715 = %713.3;
  (%714, %715)
}

def @func_5249() -> (Tensor[(11, 14, 8), uint64],) {
  %716 = @func_4785() /* ty=Tensor[(11, 14, 8), uint64] */;
  (%716,)
}

def @func_3277(%var_3261: Tensor[(1232), float64]) -> (uint16, Tensor[(1232), float64], Tensor[(2, 3, 1), float64], Tensor[(8, 252), uint64], Tensor[(8, 252), float32]) {
  %717 = @func_2544() /* ty=(uint16,) */;
  %718 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %719 = cast(%var_3261, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %720 = reshape(%719, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %721 = @func_2984(%720) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */;
  %722 = %721.2;
  %723 = cast(%722, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %724 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 252), uint64] */, dtype="uint64") /* ty=Tensor[(8, 252), uint64] */;
  %725 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 252), uint64] */, dtype="float32") /* ty=Tensor[(8, 252), float32] */;
  %726 = %717.0;
  %727 = %718.0;
  %728 = bitwise_xor(%723, %724) /* ty=Tensor[(8, 252), uint64] */;
  %729 = tan(%725) /* ty=Tensor[(8, 252), float32] */;
  (%726, %var_3261, %727, %728, %729)
}

def @func_1725() -> (Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %742 = fn () -> (Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
    %730 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
    %731 = %730.1;
    %732 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
    %733 = cast(%731, dtype="int8") /* ty=int8 */;
    %734 = cast(%732, dtype="int8") /* ty=Tensor[(11, 14, 8), int8] */;
    %735 = @func_1560() /* ty=(Tensor[(2, 3, 1), float64], int64) */;
    %736 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %737 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %738 = right_shift(%733, %734) /* ty=Tensor[(11, 14, 8), int8] */;
    %739 = %735.0;
    %740 = %736.0;
    %741 = %737.0;
    (%738, %739, %740, %741)
  };
  %742() /* ty=(Tensor[(11, 14, 8), int8], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */
}

def @func_466(%var_464: Tensor[(11, 14, 8), int32], %var_465: uint16) -> (Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) {
  %754 = fn (%var_441: Tensor[(11, 14, 8), int32], %var_449: uint16) -> (Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) {
    %743 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %744 = %743.0;
    %745 = cast(%var_441, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
    %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%744, dtype="uint64") /* ty=Tensor[(11, 14, 8), uint64] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %749 = cast(%var_449, dtype="uint16") /* ty=uint16 */;
    %750 = reshape(%749, newshape=[]) /* ty=uint16 */;
    %751 = @func_357(%750) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
    %752 = left_shift(%747, %748) /* ty=Tensor[(11, 14, 8), uint64] */;
    %753 = %751.0;
    (%752, %753, %var_449)
  };
  %754(%var_464, %var_465) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */
}

def @func_4721() -> (Tensor[(11, 14, 8), float32], Tensor[(7, 2, 8), float32], Tensor[(168, 4), uint32]) {
  %755 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %756 = %755.0;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(11, 14, 8), float32] */;
  %758 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 4), uint32] */, dtype="uint32") /* ty=Tensor[(168, 4), uint32] */;
  %759 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 4), uint32] */, dtype="uint32") /* ty=Tensor[(168, 4), uint32] */;
  %760 = reshape(%758, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %761 = reshape(%759, newshape=[8, 12, 7]) /* ty=Tensor[(8, 12, 7), uint32] */;
  %762 = @func_910(%760, %761) /* ty=(Tensor[(7, 2, 8), float32], int64, Tensor[(8, 12, 7), float32]) */;
  %763 = cosh(%757) /* ty=Tensor[(11, 14, 8), float32] */;
  %764 = %762.0;
  (%763, %764, meta[relay.Constant][33] /* ty=Tensor[(168, 4), uint32] */)
}

def @func_1302() -> (Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), int32]) {
  %765 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %766 = %765.0;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %768 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %769 = asinh(%767) /* ty=Tensor[(11, 14, 8), float64] */;
  %770 = %768.0;
  (%769, %770)
}

def @func_4845(%var_4836: Tensor[(4, 15, 9), float64], %var_4837: Tensor[(4, 15, 9), float64]) -> Tensor[(4, 15, 9), float64] {
  %771 = cast(%var_4837, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %772 = shape_of(%var_4836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%var_4836, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%773, %774) /* ty=Tensor[(4, 15, 9), float64] */
}

def @func_829(%var_775: uint64, %var_776: Tensor[(252), uint64], %var_783: Tensor[(11, 14, 8), float64], %var_796: Tensor[(7, 8, 15), uint64]) -> (uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), bool], uint16, Tensor[(7, 4, 9), float32], Tensor[(7, 8, 15), float64]) {
  %775 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %776 = %775.2;
  %777 = cast(%var_783, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="bool") /* ty=Tensor[(11, 14, 8), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %782 = cast(%var_775, dtype="uint64") /* ty=uint64 */;
  %783 = cast(%var_776, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %784 = reshape(%782, newshape=[]) /* ty=uint64 */;
  %785 = reshape(%783, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %786 = @func_589(%784, %785) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
  %787 = %786.2;
  %788 = cast(%787, dtype="uint16") /* ty=uint16 */;
  %789 = reshape(%788, newshape=[]) /* ty=uint16 */;
  %790 = @func_357(%789) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float32]) */;
  %791 = cast(%787, dtype="float64") /* ty=float64 */;
  %792 = cast(%var_796, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %793 = divide(%791, %792) /* ty=Tensor[(7, 8, 15), float64] */;
  %794 = cast(%793, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %795 = atan(%794) /* ty=Tensor[(7, 8, 15), float64] */;
  %796 = cast(%776, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %797 = cast(%787, dtype="uint16") /* ty=uint16 */;
  %798 = reshape(%796, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %799 = reshape(%797, newshape=[]) /* ty=uint16 */;
  %800 = @func_463(%798, %799) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %801 = %800.2;
  %802 = cast(%795, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %803 = cast(%801, dtype="float64") /* ty=float64 */;
  %804 = logical_and(%779, %780) /* ty=Tensor[(11, 14, 8), bool] */;
  %805 = %781.1;
  %806 = %790.1;
  %807 = floor_divide(%802, %803) /* ty=Tensor[(7, 8, 15), float64] */;
  (%var_775, %var_776, %804, %805, %806, %807)
}

def @func_4683() -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) {
  %808 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %809 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
  %810 = %808.0;
  %811 = %809.1;
  (%810, %811)
}

def @func_2952(%var_2917: Tensor[(10, 8, 9), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) {
  %812 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
  %813 = @func_1965() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
  %814 = cast(%var_2917, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
  %815 = sinh(%814) /* ty=Tensor[(10, 8, 9), float32] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %817 = %812.0;
  %818 = %813.1;
  %819 = sin(%816) /* ty=Tensor[(10, 8, 9), float64] */;
  (%817, %818, %819)
}

def @func_1013(%var_1011: uint64) -> (Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) {
  @func_1010(%var_1011) /* ty=(Tensor[(11, 14, 8), int32], uint64, uint64, Tensor[(252), uint64], Tensor[(840), uint64], Tensor[(11, 14, 8), int32]) */
}

def @func_960() -> (Tensor[(2, 3, 1), float64],) {
  %820 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 1), float64] */;
  %821 = acosh(%820) /* ty=Tensor[(2, 3, 1), float64] */;
  (%821,)
}

def @func_4972(%var_4970: Tensor[(672), uint32]) -> (Tensor[(11, 14, 8), float64], Tensor[(672), bool]) {
  @func_4969(%var_4970) /* ty=(Tensor[(11, 14, 8), float64], Tensor[(672), bool]) */
}

def @func_2191(%var_2189: Tensor[(11, 14, 8), int32], %var_2190: uint64) -> (Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) {
  @func_2187(%var_2189, %var_2190) /* ty=(Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), int32], uint64) */
}

def @func_2289() -> Tensor[(11, 14, 8), int32] {
  %822 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %822.0
}

def @func_1966() -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
  %826 = fn () -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) {
    %823 = @func_960() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %824 = %823.0;
    %825 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
    (%824, %825)
  };
  %826() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */
}

def @func_5734() -> Tensor[(11, 14, 8), float64] {
  %833 = fn () -> Tensor[(11, 14, 8), float64] {
    %827 = @func_5421() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64]) */;
    %828 = %827.0;
    %829 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 14, 8), int32] */, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%828, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%831, %832) /* ty=Tensor[(11, 14, 8), float64] */
  };
  %833() /* ty=Tensor[(11, 14, 8), float64] */
}

def @func_2986(%var_2985: Tensor[(1232), float64]) -> (Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) {
  %842 = fn (%var_2977: Tensor[(1232), float64]) -> (Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) {
    %834 = @func_2516() /* ty=(Tensor[(11, 14, 8), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, 1), float64], Tensor[(672), uint32]) */;
    %835 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 252), uint64] */, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
    %836 = cast(%var_2977, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %837 = reshape(%835, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %838 = reshape(%836, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %839 = @func_1107(%837, %838) /* ty=(int64, Tensor[(11, 14, 8), bool], Tensor[(252), uint64], Tensor[(1232), float64], Tensor[(840), uint64], Tensor[(2, 3, 1), float64]) */;
    %840 = %834.3;
    %841 = %839.4;
    (%840, %841, meta[relay.Constant][36] /* ty=Tensor[(1, 252), uint64] */, %var_2977)
  };
  %842(%var_2985) /* ty=(Tensor[(672), uint32], Tensor[(840), uint64], Tensor[(1, 252), uint64], Tensor[(1232), float64]) */
}

def @func_1731() -> Tensor[(11, 14, 8), int32] {
  %843 = @func_1581() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %843.0
}

def @func_608() -> (Tensor[(11, 14, 8), int32],) {
  %844 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %845 = %844.0;
  (%845,)
}

def @func_4048(%var_4040: Tensor[(2, 6, 14), float64]) -> (uint16, Tensor[(11, 14, 8), float64], Tensor[(72), float64], Tensor[(2, 6, 14), uint32]) {
  %846 = @func_695() /* ty=(Tensor[(11, 14, 8), uint64], uint16, Tensor[(11, 14, 8), float64]) */;
  %847 = cast(meta[relay.Constant][37] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %848 = %846.1;
  %849 = cast(%848, dtype="uint16") /* ty=uint16 */;
  %850 = reshape(%847, newshape=[2, 3, 12]) /* ty=Tensor[(2, 3, 12), float64] */;
  %851 = reshape(%849, newshape=[]) /* ty=uint16 */;
  %852 = @func_2892(%850, %851) /* ty=(Tensor[(2, 3, 13), bool], Tensor[(2, 3, 12), float32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), float64], Tensor[(2, 3, 1), int16], uint16, Tensor[(2, 3, 1), float32]) */;
  %853 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 14), float64] */;
  %854 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(2, 6, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 14), float64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %857 = floor_divide(%855, %856) /* ty=Tensor[(2, 6, 14), float64] */;
  %858 = cast(%var_4040, dtype="uint32") /* ty=Tensor[(2, 6, 14), uint32] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="uint32") /* ty=Tensor[(2, 6, 14), uint32] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %862 = %852.3;
  %863 = multiply(%860, %861) /* ty=Tensor[(2, 6, 14), uint32] */;
  (%848, %862, meta[relay.Constant][37] /* ty=Tensor[(72), float64] */, %863)
}

def @func_3993(%var_3973: Tensor[(504), float64]) -> (Tensor[(11, 14, 8), int32], Tensor[(14, 3, 12), float32], Tensor[(504), float64]) {
  %864 = @func_3334() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %865 = cast(%var_3973, dtype="float64") /* ty=Tensor[(504), float64] */;
  %866 = reshape(%865, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), float64] */;
  %867 = @func_1500(%866) /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, 3, 12), bool], Tensor[(14, 3, 12), bool]) */;
  %868 = %864.0;
  %869 = %867.0;
  (%868, %869, %var_3973)
}

def @func_5625(%var_5624: uint64) -> (Tensor[(2, 3, 1), float64], uint64, uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), int32]) {
  %880 = fn (%var_5616: uint64) -> (Tensor[(2, 3, 1), float64], uint64, uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), int32]) {
    %870 = @func_2249() /* ty=(Tensor[(2, 3, 1), float64],) */;
    %871 = cast(%var_5616, dtype="uint64") /* ty=uint64 */;
    %872 = cast(meta[relay.Constant][40] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %873 = reshape(%871, newshape=[]) /* ty=uint64 */;
    %874 = reshape(%872, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %875 = @func_589(%873, %874) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], uint64, Tensor[(252), uint64]) */;
    %876 = @func_3933() /* ty=(Tensor[(11, 14, 8), int32], uint16, Tensor[(11, 14, 8), int32], Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32]) */;
    %877 = %870.0;
    %878 = %875.2;
    %879 = %876.0;
    (%877, %878, %var_5616, meta[relay.Constant][40] /* ty=Tensor[(252), uint64] */, %879)
  };
  %880(%var_5624) /* ty=(Tensor[(2, 3, 1), float64], uint64, uint64, Tensor[(252), uint64], Tensor[(11, 14, 8), int32]) */
}

def @func_4732() -> (Tensor[(11, 14, 8), bool],) {
  %881 = @func_3469() /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), bool], Tensor[(11, 14, 8), float64]) */;
  %882 = %881.1;
  (%882,)
}

def @func_4786() -> Tensor[(11, 14, 8), uint64] {
  %884 = fn () -> Tensor[(11, 14, 8), uint64] {
    %883 = @func_4683() /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), uint64]) */;
    %883.1
  };
  %884() /* ty=Tensor[(11, 14, 8), uint64] */
}

def @func_141(%var_139: uint64, %var_140: Tensor[(3, 12, 7), uint64]) -> (Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) {
  @func_137(%var_139, %var_140) /* ty=(Tensor[(3, 12, 7), uint64], Tensor[(3, 12, 7), float32]) */
}

def @func_1330() -> Tensor[(11, 14, 8), int32] {
  %885 = @func_608() /* ty=(Tensor[(11, 14, 8), int32],) */;
  %885.0
}

def @func_2700() -> (Tensor[(2, 3, 1), float64],) {
  @func_2698() /* ty=(Tensor[(2, 3, 1), float64],) */
}

def @func_4457() -> (uint16,) {
  %886 = @func_2544() /* ty=(uint16,) */;
  %887 = %886.0;
  (%887,)
}

def @func_4623() -> (Tensor[(11, 14, 8), int32],) {
  %890 = fn () -> (Tensor[(11, 14, 8), int32],) {
    %888 = @func_426() /* ty=(Tensor[(11, 14, 8), int32],) */;
    %889 = %888.0;
    (%889,)
  };
  %890() /* ty=(Tensor[(11, 14, 8), int32],) */
}

def @func_3873(%var_3871: Tensor[(252), uint64]) -> (Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) {
  @func_3870(%var_3871) /* ty=(Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(11, 14, 8), int32], Tensor[(3, 12, 7), float32], Tensor[(252), uint64], Tensor[(2, 3, 672), float64], Tensor[(2, 3, 1), int16], Tensor[(72), float64], Tensor[(11, 14, 8), uint64], Tensor[(2, 3, ?), bool], Tensor[(2, 3, 1), float64], Tensor[(2, 3, 1), float64]) */
}

def @func_1581() -> (Tensor[(11, 14, 8), int32],) {
  %891 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  (%891,)
}

def @func_1617(%var_1613: uint16) -> (Tensor[(11, 14, 8), int32], Tensor[(7, 4, 9), bool], uint16) {
  %892 = @func_1330() /* ty=Tensor[(11, 14, 8), int32] */;
  %893 = cast(%892, dtype="int32") /* ty=Tensor[(11, 14, 8), int32] */;
  %894 = cast(%var_1613, dtype="uint16") /* ty=uint16 */;
  %895 = reshape(%893, newshape=[11, 14, 8]) /* ty=Tensor[(11, 14, 8), int32] */;
  %896 = reshape(%894, newshape=[]) /* ty=uint16 */;
  %897 = @func_463(%895, %896) /* ty=(Tensor[(11, 14, 8), uint64], Tensor[(7, 4, 9), bool], uint16) */;
  %898 = %897.1;
  (%892, %898, %var_1613)
}

def @func_4459() -> (uint16,) {
  @func_4457() /* ty=(uint16,) */
}

def @main(%var_6129: uint64, %var_6130: Tensor[(12, 1, 10), uint64]) -> (Tensor[(12, 1, 10), uint64], Tensor[(12, 1, 10), bool]) {
  %899 = cast(%var_6129, dtype="uint64") /* ty=uint64 */;
  %900 = cast(%var_6130, dtype="uint64") /* ty=Tensor[(12, 1, 10), uint64] */;
  %901 = cast(%var_6130, dtype="bool") /* ty=Tensor[(12, 1, 10), bool] */;
  %902 = cast(%var_6129, dtype="bool") /* ty=bool */;
  %903 = maximum(%899, %900) /* ty=Tensor[(12, 1, 10), uint64] */;
  %904 = not_equal(%901, %902) /* ty=Tensor[(12, 1, 10), bool] */;
  (%903, %904)
}

def @func_2955(%var_2953: Tensor[(10, 8, 9), float32]) -> (Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) {
  @func_2952(%var_2953) /* ty=(Tensor[(2, 3, 1), float64], Tensor[(11, 14, 8), int32], Tensor[(10, 8, 9), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen181/build/output.py:2265: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen181/build/output.py", line 2270, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_maximum_kernel0(uint64_t* __restrict__ T_maximum, uint64_t* __restrict__ placeholder, uint64_t* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(placeholder[(0)], placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_cast_cast_not_equal_kernel0(signed char* __restrict__ T_not_equal, uint64_t* __restrict__ placeholder, uint64_t* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(0)])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

