==========mod==========
#[version = "0.0.5"]
def @func_11272(%var_11265: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), uint64],) {
  %0 = cast(%var_11265, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
  %1 = tan(%0) /* ty=Tensor[(15, 12, 14), float32] */;
  %2 = cast(%var_11265, dtype="uint64") /* ty=Tensor[(15, 12, 14), uint64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint64") /* ty=Tensor[(15, 12, 14), uint64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %6 = maximum(%4, %5) /* ty=Tensor[(15, 12, 14), uint64] */;
  (%6,)
}

def @func_13371() -> (Tensor[(13, 12, 12), float32],) {
  %7 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %8 = %7.0;
  (%8,)
}

def @func_10225() -> Tensor[(13, 12, 12), float32] {
  %9 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %9.1
}

def @func_8922() -> Tensor[(1, 600), float32] {
  %10 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %10.1
}

def @func_9555() -> (Tensor[(13, 12, 12), float32],) {
  %11 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %12 = %11.0;
  (%12,)
}

def @func_11010(%var_10999: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %13 = @func_10594() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
  %14 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %15 = @func_10092() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %16 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %17 = cast(%var_10999, dtype="bool") /* ty=Tensor[(360), bool] */;
  %18 = reshape(%16, newshape=[]) /* ty=bool */;
  %19 = reshape(%17, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %20 = %13.0;
  %21 = %14.0;
  %22 = %15.0;
  %23 = @func_164(%18, %19) /* ty=Tensor[(6, 12, 5), bool] */;
  (%20, %21, %22, %23, False /* ty=bool */, %var_10999)
}

def @func_10129(%var_10123: Tensor[(12, 10, 14), float64]) -> (Tensor[(12, 10, 14), float64],) {
  %24 = cast(%var_10123, dtype="float64") /* ty=Tensor[(12, 10, 14), float64] */;
  %25 = sqrt(%24) /* ty=Tensor[(12, 10, 14), float64] */;
  (%25,)
}

def @func_965(%var_947: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) {
  %26 = cast(%var_947, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %28 = reshape(%27, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %29 = @func_397(%28) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %31 = reshape(%30, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %32 = @func_397(%31) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %33 = exp(%26) /* ty=Tensor[(3, 2, 13), float32] */;
  %34 = %29.3;
  %35 = %32.2;
  (%33, %34, meta[relay.Constant][0] /* ty=Tensor[(588), float32] */, %35)
}

def @func_13595() -> (Tensor[(13, 12, 12), float32],) {
  %36 = @func_5977() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) */;
  %37 = %36.1;
  (%37,)
}

def @func_7073(%var_7050: Tensor[(1001), float64], %var_7061: Tensor[(15, 14, 15), float32]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(15, 14, 15), bool]) {
  %38 = cast(-2.35423f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %39 = cast(%var_7050, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %40 = reshape(%38, newshape=[]) /* ty=float64 */;
  %41 = reshape(%39, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
  %42 = @func_4832(%40, %41) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 15), float32] */;
  %44 = asin(%43) /* ty=Tensor[(15, 14, 15), float32] */;
  %45 = cast(%var_7061, dtype="bool") /* ty=Tensor[(15, 14, 15), bool] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="bool") /* ty=Tensor[(15, 14, 15), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = %42.0;
  %50 = greater_equal(%47, %48) /* ty=Tensor[(15, 14, 15), bool] */;
  (%49, -2.35423f64 /* ty=float64 */, %var_7050, %50)
}

def @func_8436() -> Tensor[(13, 12, 12), float32] {
  @func_7275() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_4775() -> Tensor[(13, 12, 12), float32] {
  %51 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %51.0
}

def @func_5212(%var_5195: Tensor[(2, 7, 7), uint64], %var_5196: Tensor[(2, 7, 7), uint64]) -> (Tensor[(2, 7, 7), uint64],) {
  %52 = cast(%var_5196, dtype="uint64") /* ty=Tensor[(2, 7, 7), uint64] */;
  %53 = shape_of(%var_5195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%var_5195, dtype="uint64") /* ty=Tensor[(2, 7, 7), uint64] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %56 = right_shift(%54, %55) /* ty=Tensor[(2, 7, 7), uint64] */;
  (%56,)
}

def @func_10594() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  %57 = @func_9925() /* ty=(Tensor[(13, 12, 12), uint16],) */;
  %58 = %57.0;
  %59 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%58, %59)
}

def @func_11197() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %60 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %61 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %62 = %60.2;
  %63 = %61.0;
  (%62, %63)
}

def @func_11688(%var_11660: Tensor[(13, 13, 9), float32]) -> Tensor[(13, 13, 9), float32] {
  %64 = cast(%var_11660, dtype="float32") /* ty=Tensor[(13, 13, 9), float32] */;
  sinh(%64) /* ty=Tensor[(13, 13, 9), float32] */
}

def @func_9731() -> (Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %66 = reshape(%65, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
  %67 = @func_7695(%66) /* ty=(Tensor[(3, 5, 3), float32],) */;
  %68 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  %69 = %67.0;
  (%68, %69, meta[relay.Constant][2] /* ty=Tensor[(45), float32] */)
}

def @func_12169() -> Tensor[(13, 12, 12), float32] {
  %70 = @func_10883() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %70.0
}

def @func_11333(%var_11315: Tensor[(2, 14, 4), bool], %var_11329: bool) -> (Tensor[(2, 14, 4), bool], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool) {
  %71 = cast(%var_11315, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %72 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 14, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %75 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %76 = cast(%var_11329, dtype="bool") /* ty=bool */;
  %77 = reshape(%76, newshape=[]) /* ty=bool */;
  %78 = @func_4947(%77) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %79 = logical_or(%73, %74) /* ty=Tensor[(2, 14, 4), bool] */;
  %80 = %75.0;
  %81 = %78.1;
  (%79, %80, %81, %var_11329)
}

def @func_3837(%var_3825: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), int16] {
  %82 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %83 = %82.0;
  %84 = cast(%var_3825, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%86, %87) /* ty=Tensor[(13, 12, 12), int16] */
}

def @func_9846() -> Tensor[(13, 12, 12), float32] {
  @func_8436() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_12928(%var_12899: Tensor[(7, 14, 4), float64], %var_12900: Tensor[(7, 14, 4), float64], %var_12904: Tensor[(7, 14, 4), bool]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32]) {
  %88 = cast(%var_12900, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %89 = shape_of(%var_12899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_12899, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = greater_equal(%90, %91) /* ty=Tensor[(7, 14, 4), bool] */;
  %93 = cast(%var_12904, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = less(%95, %96) /* ty=Tensor[(7, 14, 4), bool] */;
  %98 = cast(%92, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %102 = cast(%92, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %103 = add(%100, %101) /* ty=Tensor[(7, 14, 4), uint64] */;
  %104 = log10(%102) /* ty=Tensor[(7, 14, 4), float32] */;
  (%103, %104)
}

def @func_7497(%var_7490: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
  %105 = cast(%var_7490, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %106 = cast(%var_7490, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %107 = reshape(%105, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %108 = reshape(%106, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %109 = @func_5212(%107, %108) /* ty=(Tensor[(2, 7, 7), uint64],) */;
  %110 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %111 = %109.0;
  (%110, %111, %var_7490)
}

def @func_5354(%var_5346: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), bool] {
  %112 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %113 = %112.1;
  %114 = cast(%var_5346, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%116, %117) /* ty=Tensor[(13, 12, 12), bool] */
}

def @func_7106() -> (Tensor[(13, 12, 12), float32],) {
  %118 = @func_6865() /* ty=Tensor[(13, 12, 12), float32] */;
  (%118,)
}

def @func_5780(%var_5763: Tensor[(10, 4, 9), float32], %var_5771: Tensor[(968), uint32]) -> (Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) {
  %119 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 28), float32] */, dtype="float32") /* ty=Tensor[(10, 28), float32] */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %122 = reshape(%120, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %123 = reshape(%121, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %124 = @func_2235(%122, %123) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
  %125 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %126 = cast(meta[relay.Constant][6] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %128 = reshape(%126, newshape=[]) /* ty=uint16 */;
  %129 = reshape(%127, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
  %130 = @func_4280(%128, %129) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
  %133 = asin(%132) /* ty=Tensor[(10, 4, 9), float32] */;
  %134 = cast(%var_5763, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %138 = cast(%var_5771, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %139 = cast(%var_5771, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %140 = reshape(%138, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %141 = reshape(%139, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %142 = @func_2521(%140, %141) /* ty=(Tensor[(11, 11, 8), bool],) */;
  %143 = %125.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %145 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 28), float32] */, dtype="float32") /* ty=Tensor[(10, 28), float32] */;
  %146 = reshape(%144, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %147 = reshape(%145, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %148 = @func_3914(%146, %147) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %149 = %119.2;
  %150 = %124.2;
  %151 = floor_mod(%136, %137) /* ty=Tensor[(10, 4, 9), float32] */;
  %152 = %142.0;
  %153 = %148.4;
  (%149, %150, meta[relay.Constant][4] /* ty=Tensor[(10, 28), float32] */, meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, meta[relay.Constant][6] /* ty=uint16 */, %143, %151, %152, %var_5771, %153)
}

def @func_6052(%var_6009: Tensor[(7, 11, 7), int32], %var_6010: Tensor[(7, 11, 7), int32], %var_6029: Tensor[(13, 12, 12), float32]) -> (Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) {
  %154 = cast(%var_6010, dtype="int32") /* ty=Tensor[(7, 11, 7), int32] */;
  %155 = shape_of(%var_6009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_6009, dtype="int32") /* ty=Tensor[(7, 11, 7), int32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %158 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %159 = cast(%var_6029, dtype="uint32") /* ty=Tensor[(13, 12, 12), uint32] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="uint32") /* ty=Tensor[(13, 12, 12), uint32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %163 = cast(%158, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %164 = right_shift(%156, %157) /* ty=Tensor[(7, 11, 7), int32] */;
  %165 = add(%161, %162) /* ty=Tensor[(13, 12, 12), uint32] */;
  %166 = atanh(%163) /* ty=Tensor[(13, 12, 12), float32] */;
  (%164, %165, %166)
}

def @func_4180(%var_4161: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
  %167 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %168 = %167.0;
  %169 = cast(%var_4161, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %173 = divide(%171, %172) /* ty=Tensor[(13, 12, 12), float64] */;
  %174 = cast(%173, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  tan(%174) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_10502() -> (Tensor[(13, 12, 12), bool],) {
  %175 = @func_8944() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %176 = %175.1;
  (%176,)
}

def @func_5288() -> (Tensor[(13, 12, 12), float64],) {
  %177 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %178 = %177.0;
  (%178,)
}

def @func_11500() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %179 = @func_11288() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) */;
  %180 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %181 = %179.0;
  %182 = %180.0;
  (%181, %182)
}

def @func_10154() -> (Tensor[(7, 4, 9), float32],) {
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %184 = sinh(%183) /* ty=Tensor[(7, 4, 9), float32] */;
  (%184,)
}

def @func_9593() -> (Tensor[(13, 12, 12), float32],) {
  %185 = @func_8436() /* ty=Tensor[(13, 12, 12), float32] */;
  (%185,)
}

def @func_9631() -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool]) {
  %186 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %187 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %188 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %189 = reshape(%187, newshape=[]) /* ty=bool */;
  %190 = reshape(%188, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %191 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %192 = %186.0;
  %193 = @func_164(%189, %190) /* ty=Tensor[(6, 12, 5), bool] */;
  %194 = %191.3;
  (%192, %193, True /* ty=bool */, meta[relay.Constant][8] /* ty=Tensor[(360), bool] */, %194)
}

def @func_10342() -> Tensor[(13, 12, 12), float32] {
  %195 = @func_7410() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %195.0
}

def @func_11721() -> Tensor[(13, 12, 12), float32] {
  %196 = @func_11500() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %196.0
}

def @func_5001(%var_4995: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), int16],) {
  %197 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %198 = cast(%var_4995, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %202 = maximum(%200, %201) /* ty=Tensor[(13, 12, 12), int16] */;
  (%202,)
}

def @func_7035(%var_7032: uint16) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], bool, uint16, Tensor[(78), float32]) {
  %203 = cast(%var_7032, dtype="uint16") /* ty=uint16 */;
  %204 = cast(meta[relay.Constant][9] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %205 = reshape(%203, newshape=[]) /* ty=uint16 */;
  %206 = reshape(%204, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
  %207 = @func_4280(%205, %206) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
  %208 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  %209 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %210 = %207.2;
  (%208, %209, %210, %var_7032, meta[relay.Constant][9] /* ty=Tensor[(78), float32] */)
}

def @func_11841() -> (Tensor[(13, 12, 12), float32],) {
  %211 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %212 = %211.0;
  (%212,)
}

def @func_11396(%var_11366: float64, %var_11388: Tensor[(1680), float64]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), bool], Tensor[(12, 10, 14), float64], Tensor[(1680), float64]) {
  %213 = @func_9041() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %214 = cast(%var_11366, dtype="float64") /* ty=float64 */;
  %215 = reshape(%214, newshape=[]) /* ty=float64 */;
  %216 = @func_4913(%215) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) */;
  %217 = %216.4;
  %218 = cast(meta[relay.Constant][10] /* ty=Tensor[(1001), float64] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), bool] */;
  %222 = cast(%var_11388, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %223 = reshape(%222, newshape=[12, 10, 14]) /* ty=Tensor[(12, 10, 14), float64] */;
  %224 = @func_10129(%223) /* ty=(Tensor[(12, 10, 14), float64],) */;
  %225 = %213.0;
  %226 = greater_equal(%220, %221) /* ty=Tensor[(1001), bool] */;
  %227 = %224.0;
  (%225, %var_11366, %226, %227, %var_11388)
}

def @func_12089() -> (Tensor[(13, 12, 12), float32],) {
  %228 = @func_11721() /* ty=Tensor[(13, 12, 12), float32] */;
  (%228,)
}

def @func_12520(%var_12498: Tensor[(4, 1, 12), int64], %var_12499: Tensor[(4, 16, 12), int64], %var_12508: float64) -> (Tensor[(4, 16, 12), int64], Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
  %229 = cast(%var_12498, dtype="int64") /* ty=Tensor[(4, 1, 12), int64] */;
  %230 = cast(%var_12499, dtype="int64") /* ty=Tensor[(4, 16, 12), int64] */;
  %231 = cast(%var_12508, dtype="float64") /* ty=float64 */;
  %232 = cast(meta[relay.Constant][11] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %233 = reshape(%231, newshape=[]) /* ty=float64 */;
  %234 = reshape(%232, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
  %235 = @func_4832(%233, %234) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
  %236 = cast(meta[relay.Constant][12] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %237 = reshape(%236, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
  %238 = @func_7695(%237) /* ty=(Tensor[(3, 5, 3), float32],) */;
  %239 = logical_xor(%229, %230) /* ty=Tensor[(4, 16, 12), int64] */;
  %240 = %235.0;
  %241 = %238.0;
  (%239, %240, %var_12508, meta[relay.Constant][11] /* ty=Tensor[(1001), float64] */, %241, meta[relay.Constant][12] /* ty=Tensor[(45), float32] */)
}

def @main() -> (Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), float32]) {
  %242 = @func_5690() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) */;
  %243 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %244 = %243.1;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(11, ?, 6), float32] */;
  %246 = %242.0;
  %247 = atanh(%245) /* ty=Tensor[(11, ?, 6), float32] */;
  (%246, %247)
}

def @func_13303(%var_13280: Tensor[(9, 5, 16), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(9, 5, 16), float64], Tensor[(13, 12, 12), float32]) {
  %248 = cast(%var_13280, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %249 = exp(%248) /* ty=Tensor[(9, 5, 16), float64] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %251 = @func_8009() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %252 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %253 = sinh(%250) /* ty=Tensor[(9, 5, 16), float64] */;
  %254 = %251.0;
  (%252, %253, %254)
}

def @func_6519(%var_6507: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(280), float32]) {
  %255 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %257 = cast(%var_6507, dtype="float32") /* ty=Tensor[(280), float32] */;
  %258 = reshape(%256, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %259 = reshape(%257, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %260 = @func_3914(%258, %259) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %261 = %260.1;
  (%255, %261, %var_6507)
}

def @func_10701(%var_10653: Tensor[(12, 30), float32], %var_10654: Tensor[(968), uint32], %var_10678: Tensor[(968), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], uint16, Tensor[(12, 30), float32], Tensor[(13, 12, 12), uint16], Tensor[(968), float64], Tensor[(968), float32]) {
  %262 = cast(%var_10653, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %263 = cast(%var_10654, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %264 = reshape(%262, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float32] */;
  %265 = reshape(%263, newshape=[968]) /* ty=Tensor[(968), uint32] */;
  %266 = @func_5780(%264, %265) /* ty=(Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) */;
  %267 = cast(%var_10654, dtype="float32") /* ty=Tensor[(968), float32] */;
  %268 = exp(%267) /* ty=Tensor[(968), float32] */;
  %269 = cast(%var_10678, dtype="float64") /* ty=Tensor[(968), float64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %271 = cast(%268, dtype="float64") /* ty=Tensor[(968), float64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), float64] */;
  %273 = cast(%268, dtype="float32") /* ty=Tensor[(968), float32] */;
  %274 = @func_10225() /* ty=Tensor[(13, 12, 12), float32] */;
  %275 = @func_10342() /* ty=Tensor[(13, 12, 12), float32] */;
  %276 = %266.4;
  %277 = @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */;
  %278 = divide(%271, %272) /* ty=Tensor[(968), float64] */;
  %279 = erf(%273) /* ty=Tensor[(968), float32] */;
  (%274, %275, %276, %var_10653, %277, %278, %279)
}

def @func_8608() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
  %280 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %281 = %280.1;
  %282 = @func_6865() /* ty=Tensor[(13, 12, 12), float32] */;
  (%281, %282)
}

def @func_9916(%var_9912: Tensor[(4, 252), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16], Tensor[(9, 7, 16), float64], Tensor[(4, 252), float64]) {
  %283 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %284 = cast(%var_9912, dtype="float64") /* ty=Tensor[(4, 252), float64] */;
  %285 = cast(%var_9912, dtype="float64") /* ty=Tensor[(4, 252), float64] */;
  %286 = reshape(%284, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %287 = reshape(%285, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %288 = @func_1476(%286, %287) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
  %289 = %283.0;
  %290 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  %291 = %288.0;
  (%289, %290, %291, %var_9912)
}

def @func_8944() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %292 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
  %293 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  %294 = %292.0;
  (%293, %294)
}

def @func_4913(%var_4869: float64) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) {
  %295 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %298 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %299 = cast(%var_4869, dtype="float64") /* ty=float64 */;
  %300 = cast(meta[relay.Constant][13] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %301 = reshape(%299, newshape=[]) /* ty=float64 */;
  %302 = reshape(%300, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
  %303 = @func_4832(%301, %302) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
  %304 = %298.0;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %306 = reshape(%305, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %307 = log10(%297) /* ty=Tensor[(13, 12, 12), float64] */;
  %308 = %303.1;
  %309 = @func_3837(%306) /* ty=Tensor[(13, 12, 12), int16] */;
  (%307, %304, %308, %var_4869, meta[relay.Constant][13] /* ty=Tensor[(1001), float64] */, %309)
}

def @func_7972(%var_7938: Tensor[(280), float32], %var_7939: Tensor[(1, 78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(280), float32], Tensor[(1, 78), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(588), float64], Tensor[(13, 12, 12), float32]) {
  %310 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %311 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %312 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %313 = cast(%var_7938, dtype="float32") /* ty=Tensor[(280), float32] */;
  %314 = cast(%var_7939, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
  %315 = reshape(%313, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %316 = reshape(%314, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %317 = @func_2235(%315, %316) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
  %318 = %317.1;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(588), float64] */;
  %320 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %321 = @func_4136() /* ty=Tensor[(13, 12, 12), float32] */;
  %322 = %310.0;
  %323 = %311.0;
  %324 = %312.0;
  %325 = acosh(%319) /* ty=Tensor[(588), float64] */;
  %326 = %320.0;
  (%321, %322, %var_7938, %var_7939, %323, %324, %325, %326)
}

def @func_6865() -> Tensor[(13, 12, 12), float32] {
  %327 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %327.1
}

def @func_5655() -> (Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) {
  %328 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %329 = cast(-0.663231f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %330 = reshape(%329, newshape=[]) /* ty=float64 */;
  %331 = @func_4913(%330) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) */;
  %332 = %328.0;
  %333 = %331.4;
  (%332, %333, -0.663231f64 /* ty=float64 */)
}

def @func_9881(%var_9876: Tensor[(6, 7, 8), float32]) -> Tensor[(6, 7, 8), float32] {
  %334 = cast(%var_9876, dtype="float32") /* ty=Tensor[(6, 7, 8), float32] */;
  asin(%334) /* ty=Tensor[(6, 7, 8), float32] */
}

def @func_12347() -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %335 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
  %336 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %337 = %335.2;
  %338 = %336.0;
  %339 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%337, %338, %339)
}

def @func_13703() -> (Tensor[(13, 12, 12), float32],) {
  %340 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %341 = %340.0;
  (%341,)
}

def @func_5917() -> Tensor[(13, 12, 12), float32] {
  %342 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %342.0
}

def @func_3723() -> (Tensor[(13, 12, 12), float32],) {
  %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %344 = erf(%343) /* ty=Tensor[(13, 12, 12), float64] */;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %346 = asin(%345) /* ty=Tensor[(13, 12, 12), float32] */;
  (%346,)
}

def @func_5802() -> (Tensor[(13, 12, 12), float32],) {
  %347 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %348 = %347.0;
  (%348,)
}

def @func_13275() -> Tensor[(5, 6, 15), float64] {
  %349 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
  tan(%349) /* ty=Tensor[(5, 6, 15), float64] */
}

def @func_13214() -> Tensor[(13, 12, 12), float32] {
  %350 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %350.0
}

def @func_9375() -> Tensor[(13, 12, 12), float32] {
  %351 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %351.0
}

def @func_7695(%var_7687: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), float32],) {
  %352 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 3), float32] */;
  %353 = cast(%var_7687, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %354 = power(%352, %353) /* ty=Tensor[(3, 5, 3), float32] */;
  (%354,)
}

def @func_10883() -> (Tensor[(13, 12, 12), float32],) {
  %355 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %356 = %355.0;
  (%356,)
}

def @func_10116() -> (Tensor[(9, 15, 14), uint32], Tensor[(1872), float32], Tensor[(280), float32], Tensor[(26, 3), float64]) {
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 15, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 15, 1), uint32] */;
  %358 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 14), uint32] */, dtype="uint32") /* ty=Tensor[(9, 15, 14), uint32] */;
  %359 = cast(meta[relay.Constant][19] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %360 = cast(meta[relay.Constant][20] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %361 = reshape(%359, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %362 = reshape(%360, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %363 = @func_3914(%361, %362) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %364 = %363.4;
  %365 = cast(meta[relay.Constant][21] /* ty=Tensor[(26, 3), float32] */, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(2), int32] */;
  %367 = cast(%364, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %369 = left_shift(%357, %358) /* ty=Tensor[(9, 15, 14), uint32] */;
  %370 = divide(%367, %368) /* ty=Tensor[(26, 3), float64] */;
  (%369, meta[relay.Constant][19] /* ty=Tensor[(1872), float32] */, meta[relay.Constant][20] /* ty=Tensor[(280), float32] */, %370)
}

def @func_4639() -> Tensor[(13, 12, 12), float32] {
  %371 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %371.0
}

def @func_3752() -> (Tensor[(13, 12, 12), float32],) {
  %372 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %373 = %372.0;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %375 = cos(%374) /* ty=Tensor[(13, 12, 12), float32] */;
  (%375,)
}

def @func_4457() -> (bool,) {
  %376 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %377 = %376.2;
  (%377,)
}

def @func_6774() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %378 = @func_4430() /* ty=Tensor[(13, 12, 12), float32] */;
  %379 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  (%378, %379)
}

def @func_8062() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
  %380 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %381 = %380.1;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %383 = reshape(%382, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %384 = @func_4180(%383) /* ty=Tensor[(13, 12, 12), float32] */;
  (%381, %384)
}

def @func_10024() -> Tensor[(13, 12, 12), float32] {
  @func_5917() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_2235(%var_2203: Tensor[(14, 5, 4), float32], %var_2220: Tensor[(26, 3), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) {
  %385 = cast(%var_2203, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %386 = cast(%var_2220, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %387 = reshape(%386, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %388 = @func_965(%387) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %389 = sinh(%385) /* ty=Tensor[(14, 5, 4), float32] */;
  %390 = %388.2;
  (%389, %390, %var_2220)
}

def @func_11552() -> (Tensor[(7, 4, 9), float32],) {
  %391 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_5093(%var_5090: Tensor[(16, 7, 9), float64]) -> Tensor[(16, 7, 9), float64] {
  %393 = cast(%var_5090, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  atanh(%393) /* ty=Tensor[(16, 7, 9), float64] */
}

def @func_397(%var_361: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) {
  %394 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
  %395 = shape_of(%var_361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%var_361, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %398 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %399 = cast(meta[relay.Constant][23] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %400 = reshape(%398, newshape=[]) /* ty=bool */;
  %401 = reshape(%399, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %402 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %403 = @func_164(%400, %401) /* ty=Tensor[(6, 12, 5), bool] */;
  %404 = cast(%403, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %405 = reshape(%402, newshape=[]) /* ty=bool */;
  %406 = reshape(%404, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %407 = power(%396, %397) /* ty=Tensor[(6, 14, 7), float32] */;
  %408 = @func_164(%405, %406) /* ty=Tensor[(6, 12, 5), bool] */;
  (%407, %403, True /* ty=bool */, meta[relay.Constant][23] /* ty=Tensor[(360), bool] */, %408)
}

def @func_10442() -> (Tensor[(13, 12, 12), float32],) {
  %409 = @func_10283() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %410 = %409.0;
  (%410,)
}

def @func_11028() -> (Tensor[(13, 12, 12), bool],) {
  %411 = @func_8062() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
  %412 = %411.0;
  (%412,)
}

def @func_4136() -> Tensor[(13, 12, 12), float32] {
  %413 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %413.0
}

def @func_8277(%var_8220: float64, %var_8221: Tensor[(11, 7, 11), float64]) -> (Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) {
  %414 = cast(%var_8220, dtype="float64") /* ty=float64 */;
  %415 = cast(%var_8221, dtype="float64") /* ty=Tensor[(11, 7, 11), float64] */;
  %416 = floor_divide(%414, %415) /* ty=Tensor[(11, 7, 11), float64] */;
  %417 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  (%416, %417)
}

def @func_11160() -> (Tensor[(13, 12, 12), float32],) {
  %418 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %419 = %418.0;
  (%419,)
}

def @func_13021() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(7, 4, 9), float64]) {
  %420 = @func_6774() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %421 = @func_8009() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %422 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %423 = %422.0;
  %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 4, 9), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %428 = %420.0;
  %429 = %421.0;
  %430 = mod(%426, %427) /* ty=Tensor[(7, 4, 9), float64] */;
  (%428, %429, %430)
}

def @func_11305() -> Tensor[(13, 12, 12), float32] {
  %431 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %431.1
}

def @func_8042() -> Tensor[(13, 12, 12), float32] {
  %432 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  cosh(%434) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_12874() -> Tensor[(13, 12, 12), float32] {
  %435 = @func_5977() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) */;
  %435.0
}

def @func_11899(%var_11853: Tensor[(13, 14, 7), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(13, 14, 7), float32], Tensor[(13, 12, 12), float32]) {
  %436 = cast(%var_11853, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %437 = sigmoid(%436) /* ty=Tensor[(13, 14, 7), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %439 = cast(%var_11853, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %440 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%437, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %443 = maximum(%441, %442) /* ty=Tensor[(13, 14, 7), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %445 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %446 = asin(%438) /* ty=Tensor[(13, 14, 7), float32] */;
  %447 = rsqrt(%444) /* ty=Tensor[(13, 14, 7), float32] */;
  %448 = %445.1;
  (%446, %447, %448)
}

def @func_4966() -> (Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) {
  %449 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
  %450 = erf(%449) /* ty=Tensor[(11, 1, 6), float32] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(11, 1, 6), int32] */;
  %452 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(11, 1, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 1, 6), float32] */, dtype="int32") /* ty=Tensor[(11, 1, 6), int32] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %455 = @func_4430() /* ty=Tensor[(13, 12, 12), float32] */;
  %456 = multiply(%453, %454) /* ty=Tensor[(11, ?, 6), int32] */;
  (%455, %456)
}

def @func_9131(%var_9124: Tensor[(5, 2, 15), int16], %var_9125: Tensor[(5, 2, 15), int16]) -> (Tensor[(5, 2, 15), bool],) {
  %457 = cast(%var_9125, dtype="bool") /* ty=Tensor[(5, 2, 15), bool] */;
  %458 = shape_of(%var_9124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_9124, dtype="bool") /* ty=Tensor[(5, 2, 15), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = greater_equal(%459, %460) /* ty=Tensor[(5, 2, 15), bool] */;
  (%461,)
}

def @func_12220(%var_12195: Tensor[(600), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
  %462 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %463 = cast(%var_12195, dtype="float32") /* ty=Tensor[(600), float32] */;
  %464 = reshape(%463, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %465 = %462.2;
  %466 = @func_784(%464) /* ty=Tensor[(6, 10, 10), float32] */;
  (%465, %466, %var_12195)
}

def @func_10392() -> (Tensor[(13, 12, 12), float64],) {
  %467 = @func_6332() /* ty=(Tensor[(13, 12, 12), float64],) */;
  %468 = %467.0;
  (%468,)
}

def @func_8071() -> (Tensor[(13, 12, 12), float32],) {
  %469 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %470 = %469.0;
  (%470,)
}

def @func_4226() -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %471 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %474 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %475 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %476 = reshape(%474, newshape=[]) /* ty=bool */;
  %477 = reshape(%475, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %478 = asinh(%473) /* ty=Tensor[(13, 12, 12), float64] */;
  %479 = @func_164(%476, %477) /* ty=Tensor[(6, 12, 5), bool] */;
  (%478, %479, True /* ty=bool */, meta[relay.Constant][26] /* ty=Tensor[(360), bool] */)
}

def @func_8812() -> Tensor[(13, 12, 12), uint16] {
  @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_13587() -> (Tensor[(13, 12, 12), float32],) {
  %480 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %481 = %480.1;
  (%481,)
}

def @func_11653() -> (Tensor[(13, 12, 12), bool],) {
  %482 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
  %483 = %482.0;
  (%483,)
}

def @func_6332() -> (Tensor[(13, 12, 12), float64],) {
  %484 = @func_5288() /* ty=(Tensor[(13, 12, 12), float64],) */;
  %485 = %484.0;
  (%485,)
}

def @func_4280(%var_4249: uint16, %var_4262: Tensor[(78, 1), float32]) -> (Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) {
  %486 = cast(%var_4249, dtype="bool") /* ty=bool */;
  %487 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="bool") /* ty=Tensor[(10, 4, 9), bool] */;
  %488 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
  %489 = cast(%var_4262, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %490 = reshape(%489, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %491 = @func_965(%490) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %492 = equal(%486, %487) /* ty=Tensor[(10, 4, 9), bool] */;
  %493 = exp(%488) /* ty=Tensor[(10, 4, 9), float32] */;
  %494 = %491.3;
  (%492, %493, %494, %var_4262)
}

def @func_4430() -> Tensor[(13, 12, 12), float32] {
  @func_4136() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5077() -> Tensor[(13, 12, 12), float32] {
  %495 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %495.0
}

def @func_9997() -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) {
  %496 = @func_8836() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) */;
  %497 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %498 = reshape(%497, newshape=[]) /* ty=bool */;
  %499 = @func_4947(%498) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %500 = %496.0;
  %501 = %499.1;
  (%500, %501, True /* ty=bool */)
}

def @func_12137(%var_12131: Tensor[(14, 98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(14, 98), int64]) {
  %502 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 98), uint64] */, dtype="uint64") /* ty=Tensor[(1, 98), uint64] */;
  %503 = reshape(%502, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %504 = @func_7497(%503) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */;
  %505 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 98), uint64] */, dtype="int64") /* ty=Tensor[(1, 98), int64] */;
  %506 = cast(%var_12131, dtype="int64") /* ty=Tensor[(14, 98), int64] */;
  %507 = @func_10225() /* ty=Tensor[(13, 12, 12), float32] */;
  %508 = %504.0;
  %509 = maximum(%505, %506) /* ty=Tensor[(14, 98), int64] */;
  (%507, %508, %509)
}

def @func_10183(%var_10175: Tensor[(12, 4, 11), float32]) -> (Tensor[(12, 4, 11), float32], Tensor[(12, 4, 11), float32]) {
  %510 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %511 = shape_of(%var_10175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_10175, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %515 = mod(%512, %513) /* ty=Tensor[(12, 4, 11), float32] */;
  %516 = erf(%514) /* ty=Tensor[(12, 4, 11), float32] */;
  (%515, %516)
}

def @func_7653() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %517 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %518 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  %519 = %517.1;
  (%518, %519)
}

def @func_7275() -> Tensor[(13, 12, 12), float32] {
  %520 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %520.0
}

def @func_9041() -> (Tensor[(13, 12, 12), float32],) {
  %521 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %522 = %521.0;
  (%522,)
}

def @func_4062() -> (Tensor[(13, 12, 12), float32],) {
  %523 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %524 = %523.0;
  (%524,)
}

def @func_12546() -> Tensor[(13, 12, 12), uint16] {
  @func_8812() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_13142() -> Tensor[(13, 12, 12), float64] {
  %525 = @func_8836() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) */;
  %525.0
}

def @func_6302(%var_6208: Tensor[(1008), float64], %var_6238: Tensor[(78), float32], %var_6260: Tensor[(280), float32], %var_6275: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
  %526 = cast(%var_6208, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %527 = cast(%var_6208, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %528 = reshape(%526, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %529 = reshape(%527, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %530 = @func_1476(%528, %529) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
  %531 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %532 = cast(%var_6238, dtype="float32") /* ty=Tensor[(78), float32] */;
  %533 = reshape(%532, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %534 = @func_965(%533) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %535 = cast(%var_6260, dtype="float32") /* ty=Tensor[(280), float32] */;
  %536 = reshape(%535, newshape=[140, 2]) /* ty=Tensor[(140, 2), float32] */;
  %537 = @func_5594(%536) /* ty=(Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) */;
  %538 = cast(%var_6275, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %539 = cast(%var_6275, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %540 = reshape(%538, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %541 = reshape(%539, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %542 = @func_5212(%540, %541) /* ty=(Tensor[(2, 7, 7), uint64],) */;
  %543 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  %544 = %530.9;
  %545 = %531.1;
  %546 = %534.0;
  %547 = %537.0;
  %548 = %542.0;
  (%543, %544, %var_6208, %545, %546, %var_6238, %547, %var_6260, %548, %var_6275)
}

def @func_11984() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(1001), float64]) {
  %549 = @func_10092() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %552 = reshape(%551, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %553 = @func_5655() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) */;
  %554 = @func_4180(%552) /* ty=Tensor[(13, 12, 12), float32] */;
  %555 = %553.1;
  (%550, %554, %555)
}

def @func_4533() -> (Tensor[(13, 12, 12), float64],) {
  %556 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %557 = %556.0;
  (%557,)
}

def @func_5510() -> Tensor[(13, 12, 12), uint16] {
  %558 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %559 = %558.0;
  %560 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 12, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 12, 12), uint16] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="uint16") /* ty=Tensor[(13, 12, 12), uint16] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%562, %563) /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_8134(%var_8112: uint64) -> (Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) {
  %564 = cast(%var_8112, dtype="uint64") /* ty=uint64 */;
  %565 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 7, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 10), uint64] */;
  %566 = @func_6943() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %567 = bitwise_or(%564, %565) /* ty=Tensor[(13, 7, 10), uint64] */;
  %568 = %566.0;
  (%567, %568)
}

def @func_12043() -> (Tensor[(13, 12, 12), float64], Tensor[(45), float32]) {
  %569 = @func_4533() /* ty=(Tensor[(13, 12, 12), float64],) */;
  %570 = %569.0;
  %571 = @func_11519() /* ty=Tensor[(45), float32] */;
  (%570, %571)
}

def @func_164(%var_141: bool, %var_142: Tensor[(6, 12, 5), bool]) -> Tensor[(6, 12, 5), bool] {
  %572 = cast(%var_141, dtype="bool") /* ty=bool */;
  %573 = cast(%var_142, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  logical_or(%572, %573) /* ty=Tensor[(6, 12, 5), bool] */
}

def @func_10092() -> (Tensor[(13, 12, 12), float32],) {
  %574 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %575 = %574.0;
  (%575,)
}

def @func_7707() -> (bool,) {
  %576 = @func_4457() /* ty=(bool,) */;
  %577 = %576.0;
  (%577,)
}

def @func_13123() -> Tensor[(13, 12, 12), bool] {
  %578 = @func_11653() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %578.0
}

def @func_7132(%var_7126: uint16, %var_7127: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) {
  %579 = cast(%var_7126, dtype="uint16") /* ty=uint16 */;
  %580 = cast(%var_7127, dtype="float32") /* ty=Tensor[(78), float32] */;
  %581 = reshape(%579, newshape=[]) /* ty=uint16 */;
  %582 = reshape(%580, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
  %583 = @func_4280(%581, %582) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
  %584 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %585 = %583.3;
  (%584, %585, %var_7126, %var_7127)
}

def @func_12470() -> Tensor[(13, 12, 12), float32] {
  %586 = @func_11841() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %586.0
}

def @func_1724(%var_1685: Tensor[(12, 2, 9), int8], %var_1686: Tensor[(12, 2, 9), int8]) -> (Tensor[(12, 2, 9), int8], Tensor[(12, 2, 9), float64], bool, Tensor[(588), float32], Tensor[(360), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
  %587 = cast(%var_1686, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %588 = shape_of(%var_1685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_1685, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %591 = cast(%var_1686, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %592 = cast(meta[relay.Constant][32] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %593 = reshape(%592, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %594 = @func_397(%593) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %595 = cast(meta[relay.Constant][32] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %596 = reshape(%595, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %597 = @func_397(%596) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %598 = cast(meta[relay.Constant][33] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %599 = reshape(%598, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %600 = bitwise_and(%589, %590) /* ty=Tensor[(12, 2, 9), int8] */;
  %601 = atan(%591) /* ty=Tensor[(12, 2, 9), float64] */;
  %602 = %594.2;
  %603 = %597.3;
  %604 = @func_784(%599) /* ty=Tensor[(6, 10, 10), float32] */;
  (%600, %601, %602, meta[relay.Constant][32] /* ty=Tensor[(588), float32] */, %603, %604, meta[relay.Constant][33] /* ty=Tensor[(600), float32] */)
}

def @func_6134() -> Tensor[(13, 12, 12), float64] {
  %605 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %605.0
}

def @func_9925() -> (Tensor[(13, 12, 12), uint16],) {
  %606 = @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */;
  (%606,)
}

def @func_10531(%var_10520: Tensor[(12, 2, 4), int64], %var_10521: Tensor[(12, 2, 4), int64]) -> Tensor[(12, 2, 4), int64] {
  %607 = cast(%var_10521, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
  %608 = shape_of(%var_10520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%var_10520, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%609, %610) /* ty=Tensor[(12, 2, 4), int64] */
}

def @func_5977() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) {
  %611 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %614 = cast(meta[relay.Constant][34] /* ty=Tensor[(140, 2), float32] */, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
  %615 = reshape(%613, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %616 = reshape(%614, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %617 = @func_3914(%615, %616) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %618 = %617.0;
  (%612, %618, meta[relay.Constant][34] /* ty=Tensor[(140, 2), float32] */)
}

def @func_4095() -> (Tensor[(13, 12, 12), float32],) {
  %619 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %620 = %619.0;
  (%620,)
}

def @func_3451(%var_3428: Tensor[(7, 13, 9), float64], %var_3444: Tensor[(1, 600), float32]) -> (Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) {
  %621 = cast(%var_3428, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %622 = cast(%var_3444, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %623 = reshape(%622, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %624 = acosh(%621) /* ty=Tensor[(7, 13, 9), float64] */;
  %625 = @func_784(%623) /* ty=Tensor[(6, 10, 10), float32] */;
  (%624, %625, %var_3444)
}

def @func_9268() -> Tensor[(13, 12, 12), float32] {
  %626 = @func_6774() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %626.1
}

def @func_10807() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %627 = @func_10283() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %628 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %629 = %627.1;
  (%628, %629)
}

def @func_10553() -> Tensor[(13, 12, 12), float64] {
  %630 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %630.0
}

def @func_4702() -> (Tensor[(13, 12, 12), float32],) {
  %631 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %634 = acosh(%633) /* ty=Tensor[(13, 12, 12), float32] */;
  (%634,)
}

def @func_5494() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) {
  %635 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %636 = %635.0;
  %637 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %642 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%636, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = logical_and(%639, %640) /* ty=Tensor[(13, 12, 12), bool] */;
  %646 = not_equal(%643, %644) /* ty=Tensor[(13, 12, 12), bool] */;
  (%645, %646)
}

def @func_13538() -> Tensor[(13, 12, 12), uint16] {
  %647 = @func_12655() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
  %647.0
}

def @func_7331(%var_7324: Tensor[(539), int32]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], Tensor[(588), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint32], Tensor[(539), int32]) {
  %648 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %649 = cast(meta[relay.Constant][36] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %650 = reshape(%649, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %651 = @func_397(%650) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %652 = cast(%var_7324, dtype="int32") /* ty=Tensor[(539), int32] */;
  %653 = cast(%var_7324, dtype="int32") /* ty=Tensor[(539), int32] */;
  %654 = @func_7275() /* ty=Tensor[(13, 12, 12), float32] */;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %656 = reshape(%652, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int32] */;
  %657 = reshape(%653, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int32] */;
  %658 = reshape(%655, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %659 = @func_6052(%656, %657, %658) /* ty=(Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) */;
  %660 = %648.1;
  %661 = %651.1;
  %662 = %659.1;
  (%660, %661, meta[relay.Constant][36] /* ty=Tensor[(588), float32] */, %654, %662, %var_7324)
}

def @func_4559() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) {
  %663 = @func_4136() /* ty=Tensor[(13, 12, 12), float32] */;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %665 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %666 = exp(%664) /* ty=Tensor[(13, 12, 12), float64] */;
  %667 = %665.0;
  (%666, %667)
}

def @func_5690() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) {
  %668 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %669 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %670 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %671 = reshape(%670, newshape=[]) /* ty=bool */;
  %672 = @func_4947(%671) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %673 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %674 = reshape(%673, newshape=[]) /* ty=bool */;
  %675 = @func_4947(%674) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %676 = %675.1;
  %677 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 12, 5), bool] */, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %681 = %668.0;
  %682 = %669.0;
  %683 = %672.0;
  %684 = divide(%679, %680) /* ty=Tensor[(6, 12, 5), float32] */;
  (%681, %682, %683, False /* ty=bool */, %684)
}

def @func_12839() -> Tensor[(45), float32] {
  @func_11519() /* ty=Tensor[(45), float32] */
}

def @func_3811() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %685 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %686 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %687 = %685.0;
  %688 = %686.0;
  (%687, %688)
}

def @func_5594(%var_5547: Tensor[(140, 2), float32]) -> (Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) {
  %689 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %692 = cast(%var_5547, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
  %693 = reshape(%691, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %694 = reshape(%692, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %695 = @func_3914(%693, %694) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %696 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %697 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%690, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = %695.5;
  %701 = greater_equal(%698, %699) /* ty=Tensor[(13, 12, 12), bool] */;
  (%700, %var_5547, %701)
}

def @func_10283() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %702 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %703 = %702.0;
  %704 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  (%703, %704)
}

def @func_11119() -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32]) {
  %705 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
  %706 = %705.2;
  %707 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  (%706, %707)
}

def @func_2521(%var_2511: Tensor[(11, 11, 8), uint32], %var_2512: Tensor[(11, 11, 8), uint32]) -> (Tensor[(11, 11, 8), bool],) {
  %708 = cast(%var_2512, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %709 = shape_of(%var_2511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_2511, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = greater_equal(%710, %711) /* ty=Tensor[(11, 11, 8), bool] */;
  (%712,)
}

def @func_8836() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) {
  %713 = @func_8812() /* ty=Tensor[(13, 12, 12), uint16] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %715 = cast(%713, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %716 = cast(meta[relay.Constant][39] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %717 = reshape(%715, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %718 = reshape(%716, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %719 = @func_3914(%717, %718) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %720 = acos(%714) /* ty=Tensor[(13, 12, 12), float64] */;
  %721 = %719.0;
  (%720, %721, meta[relay.Constant][39] /* ty=Tensor[(280), float32] */)
}

def @func_8211() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  %722 = @func_4533() /* ty=(Tensor[(13, 12, 12), float64],) */;
  %723 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %724 = %722.0;
  (%723, %724)
}

def @func_11595() -> (Tensor[(13, 12, 12), bool],) {
  %725 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %726 = %725.2;
  (%726,)
}

def @func_12241() -> (Tensor[(7, 4, 9), float32], bool, Tensor[(588), float32]) {
  %727 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %728 = cast(meta[relay.Constant][40] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %729 = reshape(%728, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %730 = @func_397(%729) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %731 = %727.0;
  %732 = %730.2;
  (%731, %732, meta[relay.Constant][40] /* ty=Tensor[(588), float32] */)
}

def @func_12655() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  %733 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
  %734 = @func_11160() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %735 = %733.0;
  %736 = %734.0;
  (%735, %736)
}

def @func_6943() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %737 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %739 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %740 = log(%738) /* ty=Tensor[(13, 12, 12), float32] */;
  %741 = %739.0;
  (%740, %741)
}

def @func_5369() -> Tensor[(13, 12, 12), float32] {
  @func_4136() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5307() -> (Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) {
  %742 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %743 = cast(meta[relay.Constant][41] /* ty=Tensor[(819), float64] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %744 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 600), float32] */, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %745 = reshape(%743, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
  %746 = reshape(%744, newshape=[1, 600]) /* ty=Tensor[(1, 600), float32] */;
  %747 = @func_3451(%745, %746) /* ty=(Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) */;
  %748 = %742.0;
  %749 = %747.2;
  (%748, %749, meta[relay.Constant][41] /* ty=Tensor[(819), float64] */, meta[relay.Constant][42] /* ty=Tensor[(1, 600), float32] */)
}

def @func_10793(%var_10762: Tensor[(15, 7, 16), float32]) -> (Tensor[(15, 7, 16), int64], Tensor[(13, 12, 12), float32]) {
  %750 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 16), float64] */;
  %751 = atan(%750) /* ty=Tensor[(15, 1, 16), float64] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(15, 1, 16), float32] */;
  %753 = sin(%752) /* ty=Tensor[(15, 1, 16), float32] */;
  %754 = cast(%753, dtype="bool") /* ty=Tensor[(15, 1, 16), bool] */;
  %755 = cast(%var_10762, dtype="bool") /* ty=Tensor[(15, 7, 16), bool] */;
  %756 = logical_and(%754, %755) /* ty=Tensor[(15, 7, 16), bool] */;
  %757 = cast(%751, dtype="int64") /* ty=Tensor[(15, 1, 16), int64] */;
  %758 = cast(%756, dtype="int64") /* ty=Tensor[(15, 7, 16), int64] */;
  %759 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %760 = bitwise_and(%757, %758) /* ty=Tensor[(15, 7, 16), int64] */;
  %761 = %759.0;
  (%760, %761)
}

def @func_6492(%var_6486: Tensor[(280), float32], %var_6487: Tensor[(98), uint64]) -> (Tensor[(13, 11, 11), float32], bool, Tensor[(280), float32], Tensor[(1008), float64], Tensor[(78), float32], Tensor[(280), float32], Tensor[(98), uint64]) {
  %762 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 11, 11), float32] */;
  %763 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %764 = cast(meta[relay.Constant][45] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %765 = cast(meta[relay.Constant][46] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %766 = cast(%var_6486, dtype="float32") /* ty=Tensor[(280), float32] */;
  %767 = cast(%var_6487, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %768 = reshape(%764, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %769 = reshape(%765, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %770 = reshape(%766, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %771 = reshape(%767, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %772 = @func_6302(%768, %769, %770, %771) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */;
  %773 = atanh(%762) /* ty=Tensor[(13, 11, 11), float32] */;
  %774 = %763.2;
  %775 = %772.6;
  (%773, %774, %775, meta[relay.Constant][45] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][46] /* ty=Tensor[(78), float32] */, %var_6486, %var_6487)
}

def @func_7178() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %776 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %777 = %776.0;
  %778 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  (%777, %778)
}

def @func_13236() -> (Tensor[(13, 12, 12), bool], Tensor[(7, 4, 9), float32]) {
  %779 = @func_11653() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %780 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %781 = %779.0;
  %782 = %780.0;
  (%781, %782)
}

def @func_7410() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %783 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %784 = %783.0;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %786 = reshape(%785, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %787 = @func_5354(%786) /* ty=Tensor[(13, 12, 12), bool] */;
  (%784, %787)
}

def @func_4832(%var_4811: float64, %var_4812: Tensor[(11, 7, 13), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) {
  %788 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %789 = cast(%var_4811, dtype="bool") /* ty=bool */;
  %790 = cast(%var_4812, dtype="bool") /* ty=Tensor[(11, 7, 13), bool] */;
  %791 = less_equal(%789, %790) /* ty=Tensor[(11, 7, 13), bool] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %793 = %788.0;
  %794 = sqrt(%792) /* ty=Tensor[(11, 7, 13), float32] */;
  %795 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  (%793, %794, %795)
}

def @func_8021() -> (Tensor[(13, 12, 12), float32],) {
  %796 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %797 = %796.0;
  (%797,)
}

def @func_8744() -> Tensor[(13, 12, 12), uint16] {
  @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_9505(%var_9476: Tensor[(4, 600), float64], %var_9484: Tensor[(12, 600), float64]) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], uint64, Tensor[(1, 600), float64], Tensor[(4, 600), float32], Tensor[(12, 600), bool], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), float32]) {
  %798 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %799 = cast(meta[relay.Constant][47] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %800 = reshape(%799, newshape=[]) /* ty=uint64 */;
  %801 = @func_8134(%800) /* ty=(Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) */;
  %802 = @func_8922() /* ty=Tensor[(1, 600), float32] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %804 = cast(%802, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %805 = atanh(%804) /* ty=Tensor[(1, 600), float64] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %807 = cast(%var_9476, dtype="float32") /* ty=Tensor[(4, 600), float32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %809 = cast(%var_9484, dtype="bool") /* ty=Tensor[(12, 600), bool] */;
  %810 = %798.0;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %812 = reshape(%811, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %813 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %814 = %801.1;
  %815 = cos(%803) /* ty=Tensor[(1, 600), float64] */;
  %816 = floor_mod(%806, %807) /* ty=Tensor[(4, 600), float32] */;
  %817 = less(%808, %809) /* ty=Tensor[(12, 600), bool] */;
  %818 = @func_3837(%812) /* ty=Tensor[(13, 12, 12), int16] */;
  %819 = %813.1;
  (%810, %814, meta[relay.Constant][47] /* ty=uint64 */, %815, %816, %817, %818, %819)
}

def @func_10244() -> (Tensor[(7, 4, 9), float32],) {
  %820 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %821 = %820.0;
  (%821,)
}

def @func_1476(%var_1404: Tensor[(9, 7, 16), float64], %var_1405: Tensor[(9, 7, 16), float64]) -> (Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) {
  %822 = cast(%var_1405, dtype="float64") /* ty=Tensor[(9, 7, 16), float64] */;
  %823 = shape_of(%var_1404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%var_1404, dtype="float64") /* ty=Tensor[(9, 7, 16), float64] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %826 = cast(meta[relay.Constant][48] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %827 = reshape(%826, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %828 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %829 = cast(meta[relay.Constant][49] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %830 = reshape(%828, newshape=[]) /* ty=bool */;
  %831 = reshape(%829, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %832 = cast(meta[relay.Constant][50] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %833 = reshape(%832, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %834 = @func_965(%833) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %835 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %836 = @func_164(%830, %831) /* ty=Tensor[(6, 12, 5), bool] */;
  %837 = cast(%836, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %838 = reshape(%835, newshape=[]) /* ty=bool */;
  %839 = reshape(%837, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %840 = @func_784(%827) /* ty=Tensor[(6, 10, 10), float32] */;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %842 = reshape(%841, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %843 = multiply(%824, %825) /* ty=Tensor[(9, 7, 16), float64] */;
  %844 = %834.1;
  %845 = @func_164(%838, %839) /* ty=Tensor[(6, 12, 5), bool] */;
  %846 = @func_784(%842) /* ty=Tensor[(6, 10, 10), float32] */;
  (%843, %840, meta[relay.Constant][48] /* ty=Tensor[(600), float32] */, %836, False /* ty=bool */, meta[relay.Constant][49] /* ty=Tensor[(360), bool] */, %844, meta[relay.Constant][50] /* ty=Tensor[(78), float32] */, %845, %846)
}

def @func_11288() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
  %847 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %848 = @func_10594() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
  %849 = %847.0;
  %850 = %848.0;
  (%849, %850)
}

def @func_784(%var_772: Tensor[(6, 10, 10), float32]) -> Tensor[(6, 10, 10), float32] {
  %851 = cast(%var_772, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  acos(%851) /* ty=Tensor[(6, 10, 10), float32] */
}

def @func_12689() -> Tensor[(13, 12, 12), bool] {
  %852 = @func_11633() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %852.0
}

def @func_3914(%var_3889: Tensor[(13, 12, 12), float32], %var_3905: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) {
  %853 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %854 = %853.1;
  %855 = cast(%var_3889, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %859 = cast(meta[relay.Constant][51] /* ty=Tensor[(968), uint32] */, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %860 = cast(meta[relay.Constant][51] /* ty=Tensor[(968), uint32] */, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %861 = reshape(%859, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %862 = reshape(%860, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %863 = @func_2521(%861, %862) /* ty=(Tensor[(11, 11, 8), bool],) */;
  %864 = cast(%var_3889, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %865 = cast(%var_3905, dtype="float32") /* ty=Tensor[(280), float32] */;
  %866 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %867 = reshape(%865, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %868 = reshape(%866, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %869 = @func_2235(%867, %868) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
  %870 = power(%857, %858) /* ty=Tensor[(13, 12, 12), float32] */;
  %871 = %863.0;
  %872 = sin(%864) /* ty=Tensor[(13, 12, 12), float32] */;
  %873 = %869.2;
  (%870, %871, meta[relay.Constant][51] /* ty=Tensor[(968), uint32] */, %872, %873, %var_3905, meta[relay.Constant][52] /* ty=Tensor[(13, 6), float32] */)
}

def @func_8357() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %874 = @func_5802() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %875 = @func_5369() /* ty=Tensor[(13, 12, 12), float32] */;
  %876 = cast(%875, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %877 = reshape(%876, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %878 = %874.0;
  %879 = @func_5354(%877) /* ty=Tensor[(13, 12, 12), bool] */;
  (%878, %875, %879)
}

def @func_11519() -> Tensor[(45), float32] {
  %880 = @func_11119() /* ty=(Tensor[(45), float32], Tensor[(13, 12, 12), float32]) */;
  %880.0
}

def @func_9661(%var_9647: Tensor[(6, 13, 11), uint16]) -> (Tensor[(6, 13, 11), uint16], Tensor[(13, 12, 12), float32], Tensor[(6, 13, 11), bool]) {
  %881 = cast(%var_9647, dtype="uint16") /* ty=Tensor[(6, 13, 11), uint16] */;
  %882 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="uint16") /* ty=Tensor[(6, 13, 11), uint16] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %885 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
  %886 = cast(%var_9647, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
  %887 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %890 = maximum(%883, %884) /* ty=Tensor[(6, 13, 11), uint16] */;
  %891 = %885.1;
  %892 = greater(%888, %889) /* ty=Tensor[(6, 13, 11), bool] */;
  (%890, %891, %892)
}

def @func_4947(%var_4937: bool) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %893 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %894 = cast(%var_4937, dtype="bool") /* ty=bool */;
  %895 = cast(meta[relay.Constant][54] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %896 = reshape(%894, newshape=[]) /* ty=bool */;
  %897 = reshape(%895, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %898 = %893.0;
  %899 = @func_164(%896, %897) /* ty=Tensor[(6, 12, 5), bool] */;
  (%898, %899, %var_4937, meta[relay.Constant][54] /* ty=Tensor[(360), bool] */)
}

def @func_5943(%var_5939: Tensor[(16, 12, 8), float32]) -> Tensor[(16, 12, 8), float32] {
  %900 = cast(%var_5939, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  sigmoid(%900) /* ty=Tensor[(16, 12, 8), float32] */
}

def @func_8516(%var_8480: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(78, 1), float32], uint16, Tensor[(78), float32], Tensor[(11, 7, 11), float64], Tensor[(847), float64], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %901 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %902 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %903 = cast(%var_8480, dtype="float32") /* ty=Tensor[(78), float32] */;
  %904 = reshape(%902, newshape=[]) /* ty=uint16 */;
  %905 = reshape(%903, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %906 = @func_7132(%904, %905) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) */;
  %907 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %908 = cast(meta[relay.Constant][56] /* ty=Tensor[(847), float64] */, dtype="float64") /* ty=Tensor[(847), float64] */;
  %909 = reshape(%907, newshape=[]) /* ty=float64 */;
  %910 = reshape(%908, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), float64] */;
  %911 = @func_8277(%909, %910) /* ty=(Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) */;
  %912 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %913 = @func_8211() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) */;
  %914 = %901.0;
  %915 = %906.1;
  %916 = %911.0;
  %917 = %912.0;
  %918 = %913.0;
  (%914, %915, meta[relay.Constant][55] /* ty=uint16 */, %var_8480, %916, meta[relay.Constant][56] /* ty=Tensor[(847), float64] */, %917, %918)
}

def @func_7506() -> (Tensor[(13, 12, 12), float32],) {
  %919 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %920 = %919.1;
  (%920,)
}

def @func_13521(%var_13500: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(13, 12, 12), bool]) {
  %921 = cast(%var_13500, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %922 = @func_11633() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %923 = exp(%921) /* ty=Tensor[(3, 14, 3), float64] */;
  %924 = %922.0;
  (%923, %924)
}

def @func_8657() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
  %925 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %926 = %925.0;
  %927 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  (%926, %927)
}

def @func_3962(%var_3940: Tensor[(1, 8, 10), int32], %var_3941: Tensor[(11, 8, 10), int32], %var_3958: Tensor[(504, 2), float64]) -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 10), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], Tensor[(504, 2), float64]) {
  %928 = cast(%var_3940, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
  %929 = cast(%var_3941, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %930 = cast(%var_3940, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
  %931 = cast(meta[relay.Constant][57] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %932 = reshape(%931, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %933 = cast(%var_3958, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %934 = cast(%var_3958, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %935 = reshape(%933, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %936 = reshape(%934, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %937 = @func_1476(%935, %936) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
  %938 = less_equal(%928, %929) /* ty=Tensor[(11, 8, 10), bool] */;
  %939 = cos(%930) /* ty=Tensor[(1, 8, 10), float64] */;
  %940 = @func_784(%932) /* ty=Tensor[(6, 10, 10), float32] */;
  %941 = %937.3;
  (%938, %939, %940, meta[relay.Constant][57] /* ty=Tensor[(600), float32] */, %941, %var_3958)
}

def @func_11465() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float64], Tensor[(?, 600), bool]) {
  %942 = @func_9997() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) */;
  %943 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %944 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 600), float32] */, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %945 = reshape(%944, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %946 = @func_784(%945) /* ty=Tensor[(6, 10, 10), float32] */;
  %947 = cast(%946, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %948 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(1, 600), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %949 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 600), float32] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %951 = %942.0;
  %952 = %943.0;
  %953 = logical_and(%949, %950) /* ty=Tensor[(?, 600), bool] */;
  (%951, %952, %953)
}

def @func_11633() -> (Tensor[(13, 12, 12), bool],) {
  %954 = @func_11595() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %955 = %954.0;
  (%955,)
}

def @func_6832() -> (Tensor[(13, 12, 12), float32],) {
  %956 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%956,)
}

def @func_6453(%var_6390: bool, %var_6391: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), float32], bool, Tensor[(360), bool], Tensor[(6, 12, 5), uint32], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), int16]) {
  %957 = cast(%var_6390, dtype="bool") /* ty=bool */;
  %958 = cast(%var_6391, dtype="bool") /* ty=Tensor[(360), bool] */;
  %959 = reshape(%957, newshape=[]) /* ty=bool */;
  %960 = reshape(%958, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %961 = @func_164(%959, %960) /* ty=Tensor[(6, 12, 5), bool] */;
  %962 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 12, 5), bool] */, dtype="uint32") /* ty=Tensor[(6, 12, 5), uint32] */;
  %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %964 = cast(%961, dtype="uint32") /* ty=Tensor[(6, 12, 5), uint32] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %966 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  %967 = cast(%966, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %968 = reshape(%967, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %969 = @func_5001(%968) /* ty=(Tensor[(13, 12, 12), int16],) */;
  %970 = %969.0;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %972 = reshape(%971, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %973 = @func_5001(%972) /* ty=(Tensor[(13, 12, 12), int16],) */;
  %974 = add(%964, %965) /* ty=Tensor[(6, 12, 5), uint32] */;
  %975 = %973.0;
  (%966, %var_6390, %var_6391, %974, %970, %975)
}

def @func_8009() -> (Tensor[(13, 12, 12), float32],) {
  %976 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  (%976,)
}

def @func_12603() -> (Tensor[(13, 12, 12), float32],) {
  %977 = @func_7653() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %978 = %977.0;
  (%978,)
}

def @func_11800() -> (Tensor[(13, 12, 12), float32],) {
  %979 = @func_9041() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %980 = %979.0;
  (%980,)
}

def @func_4808() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %981 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %982 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %983 = %981.0;
  %984 = %982.1;
  %985 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  (%983, %984, %985)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_787(%var_785: Tensor[(6, 10, 10), float32]) -> Tensor[(6, 10, 10), float32] {
  @func_784(%var_785) /* ty=Tensor[(6, 10, 10), float32] */
}

def @func_13124() -> Tensor[(13, 12, 12), bool] {
  %1 = fn () -> Tensor[(13, 12, 12), bool] {
    %0 = @func_11653() /* ty=(Tensor[(13, 12, 12), bool],) */;
    %0.0
  };
  %1() /* ty=Tensor[(13, 12, 12), bool] */
}

def @func_13215() -> Tensor[(13, 12, 12), float32] {
  %3 = fn () -> Tensor[(13, 12, 12), float32] {
    %2 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %2.0
  };
  %3() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_13144() -> Tensor[(13, 12, 12), float64] {
  @func_13142() /* ty=Tensor[(13, 12, 12), float64] */
}

def @func_9270() -> Tensor[(13, 12, 12), float32] {
  @func_9268() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_4283(%var_4281: uint16, %var_4282: Tensor[(78, 1), float32]) -> (Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) {
  %13 = fn (%var_4249: uint16, %var_4262: Tensor[(78, 1), float32]) -> (Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) {
    %4 = cast(%var_4249, dtype="bool") /* ty=bool */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="bool") /* ty=Tensor[(10, 4, 9), bool] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
    %7 = cast(%var_4262, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
    %8 = reshape(%7, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
    %9 = @func_965(%8) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
    %10 = equal(%4, %5) /* ty=Tensor[(10, 4, 9), bool] */;
    %11 = exp(%6) /* ty=Tensor[(10, 4, 9), float32] */;
    %12 = %9.3;
    (%10, %11, %12, %var_4262)
  };
  %13(%var_4281, %var_4282) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */
}

def @func_4561() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) {
  @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */
}

def @func_11010(%var_10999: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %14 = @func_10594() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
  %15 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %16 = @func_10092() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %17 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %18 = cast(%var_10999, dtype="bool") /* ty=Tensor[(360), bool] */;
  %19 = reshape(%17, newshape=[]) /* ty=bool */;
  %20 = reshape(%18, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %21 = %14.0;
  %22 = %15.0;
  %23 = %16.0;
  %24 = @func_164(%19, %20) /* ty=Tensor[(6, 12, 5), bool] */;
  (%21, %22, %23, %24, False /* ty=bool */, %var_10999)
}

def @func_12139(%var_12138: Tensor[(14, 98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(14, 98), int64]) {
  %33 = fn (%var_12131: Tensor[(14, 98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(14, 98), int64]) {
    %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 98), uint64] */, dtype="uint64") /* ty=Tensor[(1, 98), uint64] */;
    %26 = reshape(%25, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %27 = @func_7497(%26) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */;
    %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 98), uint64] */, dtype="int64") /* ty=Tensor[(1, 98), int64] */;
    %29 = cast(%var_12131, dtype="int64") /* ty=Tensor[(14, 98), int64] */;
    %30 = @func_10225() /* ty=Tensor[(13, 12, 12), float32] */;
    %31 = %27.0;
    %32 = maximum(%28, %29) /* ty=Tensor[(14, 98), int64] */;
    (%30, %31, %32)
  };
  %33(%var_12138) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(14, 98), int64]) */
}

def @func_13524(%var_13522: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(13, 12, 12), bool]) {
  @func_13521(%var_13522) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(13, 12, 12), bool]) */
}

def @func_11986() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(1001), float64]) {
  @func_11984() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(1001), float64]) */
}

def @func_4228() -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */
}

def @func_7135(%var_7133: uint16, %var_7134: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) {
  %41 = fn (%var_7126: uint16, %var_7127: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) {
    %34 = cast(%var_7126, dtype="uint16") /* ty=uint16 */;
    %35 = cast(%var_7127, dtype="float32") /* ty=Tensor[(78), float32] */;
    %36 = reshape(%34, newshape=[]) /* ty=uint16 */;
    %37 = reshape(%35, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
    %38 = @func_4280(%36, %37) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
    %39 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
    %40 = %38.3;
    (%39, %40, %var_7126, %var_7127)
  };
  %41(%var_7133, %var_7134) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) */
}

def @func_8608() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
  %42 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %43 = %42.1;
  %44 = @func_6865() /* ty=Tensor[(13, 12, 12), float32] */;
  (%43, %44)
}

def @func_5307() -> (Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) {
  %45 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(819), float64] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 600), float32] */, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %48 = reshape(%46, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
  %49 = reshape(%47, newshape=[1, 600]) /* ty=Tensor[(1, 600), float32] */;
  %50 = @func_3451(%48, %49) /* ty=(Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) */;
  %51 = %45.0;
  %52 = %50.2;
  (%51, %52, meta[relay.Constant][2] /* ty=Tensor[(819), float64] */, meta[relay.Constant][3] /* ty=Tensor[(1, 600), float32] */)
}

def @func_5977() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) {
  %53 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %54 = %53.0;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(140, 2), float32] */, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
  %57 = reshape(%55, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %58 = reshape(%56, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %59 = @func_3914(%57, %58) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %60 = %59.0;
  (%54, %60, meta[relay.Constant][4] /* ty=Tensor[(140, 2), float32] */)
}

def @func_10129(%var_10123: Tensor[(12, 10, 14), float64]) -> (Tensor[(12, 10, 14), float64],) {
  %61 = cast(%var_10123, dtype="float64") /* ty=Tensor[(12, 10, 14), float64] */;
  %62 = sqrt(%61) /* ty=Tensor[(12, 10, 14), float64] */;
  (%62,)
}

def @func_11275(%var_11273: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), uint64],) {
  @func_11272(%var_11273) /* ty=(Tensor[(15, 12, 14), uint64],) */
}

def @func_3752() -> (Tensor[(13, 12, 12), float32],) {
  %63 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %66 = cos(%65) /* ty=Tensor[(13, 12, 12), float32] */;
  (%66,)
}

def @func_10245() -> (Tensor[(7, 4, 9), float32],) {
  %69 = fn () -> (Tensor[(7, 4, 9), float32],) {
    %67 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %68 = %67.0;
    (%68,)
  };
  %69() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_7709() -> (bool,) {
  @func_7707() /* ty=(bool,) */
}

def @func_13703() -> (Tensor[(13, 12, 12), float32],) {
  %70 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %71 = %70.0;
  (%71,)
}

def @func_784(%var_772: Tensor[(6, 10, 10), float32]) -> Tensor[(6, 10, 10), float32] {
  %72 = cast(%var_772, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  acos(%72) /* ty=Tensor[(6, 10, 10), float32] */
}

def @func_5215(%var_5213: Tensor[(2, 7, 7), uint64], %var_5214: Tensor[(2, 7, 7), uint64]) -> (Tensor[(2, 7, 7), uint64],) {
  %78 = fn (%var_5195: Tensor[(2, 7, 7), uint64], %var_5196: Tensor[(2, 7, 7), uint64]) -> (Tensor[(2, 7, 7), uint64],) {
    %73 = cast(%var_5196, dtype="uint64") /* ty=Tensor[(2, 7, 7), uint64] */;
    %74 = shape_of(%var_5195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_5195, dtype="uint64") /* ty=Tensor[(2, 7, 7), uint64] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %77 = right_shift(%75, %76) /* ty=Tensor[(2, 7, 7), uint64] */;
    (%77,)
  };
  %78(%var_5213, %var_5214) /* ty=(Tensor[(2, 7, 7), uint64],) */
}

def @func_4950(%var_4948: bool) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  @func_4947(%var_4948) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */
}

def @func_7179() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %82 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %79 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %80 = %79.0;
    %81 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
    (%80, %81)
  };
  %82() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_6834() -> (Tensor[(13, 12, 12), float32],) {
  @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_5804() -> (Tensor[(13, 12, 12), float32],) {
  @func_5802() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_3454(%var_3452: Tensor[(7, 13, 9), float64], %var_3453: Tensor[(1, 600), float32]) -> (Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) {
  %88 = fn (%var_3428: Tensor[(7, 13, 9), float64], %var_3444: Tensor[(1, 600), float32]) -> (Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) {
    %83 = cast(%var_3428, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
    %84 = cast(%var_3444, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
    %85 = reshape(%84, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
    %86 = acosh(%83) /* ty=Tensor[(7, 13, 9), float64] */;
    %87 = @func_784(%85) /* ty=Tensor[(6, 10, 10), float32] */;
    (%86, %87, %var_3444)
  };
  %88(%var_3452, %var_3453) /* ty=(Tensor[(7, 13, 9), float64], Tensor[(6, 10, 10), float32], Tensor[(1, 600), float32]) */
}

def @func_9268() -> Tensor[(13, 12, 12), float32] {
  %89 = @func_6774() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %89.1
}

def @func_4913(%var_4869: float64) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) {
  %90 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %93 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %94 = cast(%var_4869, dtype="float64") /* ty=float64 */;
  %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %96 = reshape(%94, newshape=[]) /* ty=float64 */;
  %97 = reshape(%95, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
  %98 = @func_4832(%96, %97) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
  %99 = %93.0;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %101 = reshape(%100, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %102 = log10(%92) /* ty=Tensor[(13, 12, 12), float64] */;
  %103 = %98.1;
  %104 = @func_3837(%101) /* ty=Tensor[(13, 12, 12), int16] */;
  (%102, %99, %103, %var_4869, meta[relay.Constant][5] /* ty=Tensor[(1001), float64] */, %104)
}

def @func_9919(%var_9917: Tensor[(4, 252), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16], Tensor[(9, 7, 16), float64], Tensor[(4, 252), float64]) {
  @func_9916(%var_9917) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16], Tensor[(9, 7, 16), float64], Tensor[(4, 252), float64]) */
}

def @func_3754() -> (Tensor[(13, 12, 12), float32],) {
  @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_4062() -> (Tensor[(13, 12, 12), float32],) {
  %105 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %106 = %105.0;
  (%106,)
}

def @func_10534(%var_10532: Tensor[(12, 2, 4), int64], %var_10533: Tensor[(12, 2, 4), int64]) -> Tensor[(12, 2, 4), int64] {
  %111 = fn (%var_10520: Tensor[(12, 2, 4), int64], %var_10521: Tensor[(12, 2, 4), int64]) -> Tensor[(12, 2, 4), int64] {
    %107 = cast(%var_10521, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
    %108 = shape_of(%var_10520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%var_10520, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    subtract(%109, %110) /* ty=Tensor[(12, 2, 4), int64] */
  };
  %111(%var_10532, %var_10533) /* ty=Tensor[(12, 2, 4), int64] */
}

def @func_13595() -> (Tensor[(13, 12, 12), float32],) {
  %112 = @func_5977() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) */;
  %113 = %112.1;
  (%113,)
}

def @func_12347() -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %114 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
  %115 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %116 = %114.2;
  %117 = %115.0;
  %118 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%116, %117, %118)
}

def @func_5511() -> Tensor[(13, 12, 12), uint16] {
  %125 = fn () -> Tensor[(13, 12, 12), uint16] {
    %119 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
    %120 = %119.0;
    %121 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 12, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 12, 12), uint16] */;
    %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%120, dtype="uint16") /* ty=Tensor[(13, 12, 12), uint16] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    minimum(%123, %124) /* ty=Tensor[(13, 12, 12), uint16] */
  };
  %125() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_12603() -> (Tensor[(13, 12, 12), float32],) {
  %126 = @func_7653() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %127 = %126.0;
  (%127,)
}

def @func_13023() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(7, 4, 9), float64]) {
  @func_13021() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_10117() -> (Tensor[(9, 15, 14), uint32], Tensor[(1872), float32], Tensor[(280), float32], Tensor[(26, 3), float64]) {
  %142 = fn () -> (Tensor[(9, 15, 14), uint32], Tensor[(1872), float32], Tensor[(280), float32], Tensor[(26, 3), float64]) {
    %128 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 15, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 15, 1), uint32] */;
    %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 14), uint32] */, dtype="uint32") /* ty=Tensor[(9, 15, 14), uint32] */;
    %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %132 = reshape(%130, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %133 = reshape(%131, newshape=[280]) /* ty=Tensor[(280), float32] */;
    %134 = @func_3914(%132, %133) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
    %135 = %134.4;
    %136 = cast(meta[relay.Constant][11] /* ty=Tensor[(26, 3), float32] */, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
    %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(2), int32] */;
    %138 = cast(%135, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %140 = left_shift(%128, %129) /* ty=Tensor[(9, 15, 14), uint32] */;
    %141 = divide(%138, %139) /* ty=Tensor[(26, 3), float64] */;
    (%140, meta[relay.Constant][9] /* ty=Tensor[(1872), float32] */, meta[relay.Constant][10] /* ty=Tensor[(280), float32] */, %141)
  };
  %142() /* ty=(Tensor[(9, 15, 14), uint32], Tensor[(1872), float32], Tensor[(280), float32], Tensor[(26, 3), float64]) */
}

def @func_13589() -> (Tensor[(13, 12, 12), float32],) {
  @func_13587() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_7277() -> Tensor[(13, 12, 12), float32] {
  @func_7275() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_9043() -> (Tensor[(13, 12, 12), float32],) {
  @func_9041() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_4835(%var_4833: float64, %var_4834: Tensor[(11, 7, 13), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) {
  %151 = fn (%var_4811: float64, %var_4812: Tensor[(11, 7, 13), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) {
    %143 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %144 = cast(%var_4811, dtype="bool") /* ty=bool */;
    %145 = cast(%var_4812, dtype="bool") /* ty=Tensor[(11, 7, 13), bool] */;
    %146 = less_equal(%144, %145) /* ty=Tensor[(11, 7, 13), bool] */;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
    %148 = %143.0;
    %149 = sqrt(%147) /* ty=Tensor[(11, 7, 13), float32] */;
    %150 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
    (%148, %149, %150)
  };
  %151(%var_4833, %var_4834) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_11984() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(1001), float64]) {
  %152 = @func_10092() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %155 = reshape(%154, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %156 = @func_5655() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) */;
  %157 = @func_4180(%155) /* ty=Tensor[(13, 12, 12), float32] */;
  %158 = %156.1;
  (%153, %157, %158)
}

def @func_9846() -> Tensor[(13, 12, 12), float32] {
  @func_8436() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_13276() -> Tensor[(5, 6, 15), float64] {
  %160 = fn () -> Tensor[(5, 6, 15), float64] {
    %159 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
    tan(%159) /* ty=Tensor[(5, 6, 15), float64] */
  };
  %160() /* ty=Tensor[(5, 6, 15), float64] */
}

def @func_3813() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_9632() -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool]) {
  %170 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool]) {
    %161 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %162 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %163 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
    %164 = reshape(%162, newshape=[]) /* ty=bool */;
    %165 = reshape(%163, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %166 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %167 = %161.0;
    %168 = @func_164(%164, %165) /* ty=Tensor[(6, 12, 5), bool] */;
    %169 = %166.3;
    (%167, %168, True /* ty=bool */, meta[relay.Constant][13] /* ty=Tensor[(360), bool] */, %169)
  };
  %170() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool]) */
}

def @func_9595() -> (Tensor[(13, 12, 12), float32],) {
  @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_4641() -> Tensor[(13, 12, 12), float32] {
  @func_4639() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_4703() -> (Tensor[(13, 12, 12), float32],) {
  %175 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %171 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %172 = %171.0;
    %173 = cast(%172, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %174 = acosh(%173) /* ty=Tensor[(13, 12, 12), float32] */;
    (%174,)
  };
  %175() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_11013(%var_11011: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  @func_11010(%var_11011) /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */
}

def @func_4947(%var_4937: bool) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %176 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %177 = cast(%var_4937, dtype="bool") /* ty=bool */;
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %179 = reshape(%177, newshape=[]) /* ty=bool */;
  %180 = reshape(%178, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %181 = %176.0;
  %182 = @func_164(%179, %180) /* ty=Tensor[(6, 12, 5), bool] */;
  (%181, %182, %var_4937, meta[relay.Constant][14] /* ty=Tensor[(360), bool] */)
}

def @func_8610() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
  @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */
}

def @func_11553() -> (Tensor[(7, 4, 9), float32],) {
  %185 = fn () -> (Tensor[(7, 4, 9), float32],) {
    %183 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %184 = %183.0;
    (%184,)
  };
  %185() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_6774() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %186 = @func_4430() /* ty=Tensor[(13, 12, 12), float32] */;
  %187 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  (%186, %187)
}

def @func_10227() -> Tensor[(13, 12, 12), float32] {
  @func_10225() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_9916(%var_9912: Tensor[(4, 252), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16], Tensor[(9, 7, 16), float64], Tensor[(4, 252), float64]) {
  %188 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %189 = cast(%var_9912, dtype="float64") /* ty=Tensor[(4, 252), float64] */;
  %190 = cast(%var_9912, dtype="float64") /* ty=Tensor[(4, 252), float64] */;
  %191 = reshape(%189, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %192 = reshape(%190, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %193 = @func_1476(%191, %192) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
  %194 = %188.0;
  %195 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  %196 = %193.0;
  (%194, %195, %196, %var_9912)
}

def @func_4534() -> (Tensor[(13, 12, 12), float64],) {
  %199 = fn () -> (Tensor[(13, 12, 12), float64],) {
    %197 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %198 = %197.0;
    (%198,)
  };
  %199() /* ty=(Tensor[(13, 12, 12), float64],) */
}

def @func_5078() -> Tensor[(13, 12, 12), float32] {
  %201 = fn () -> Tensor[(13, 12, 12), float32] {
    %200 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %200.0
  };
  %201() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_8838() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) {
  @func_8836() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) */
}

def @func_3918(%var_3916: Tensor[(13, 12, 12), float32], %var_3917: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) {
  @func_3914(%var_3916, %var_3917) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */
}

def @func_6495(%var_6493: Tensor[(280), float32], %var_6494: Tensor[(98), uint64]) -> (Tensor[(13, 11, 11), float32], bool, Tensor[(280), float32], Tensor[(1008), float64], Tensor[(78), float32], Tensor[(280), float32], Tensor[(98), uint64]) {
  %216 = fn (%var_6486: Tensor[(280), float32], %var_6487: Tensor[(98), uint64]) -> (Tensor[(13, 11, 11), float32], bool, Tensor[(280), float32], Tensor[(1008), float64], Tensor[(78), float32], Tensor[(280), float32], Tensor[(98), uint64]) {
    %202 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 11, 11), float32] */;
    %203 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %204 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %205 = cast(meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %206 = cast(%var_6486, dtype="float32") /* ty=Tensor[(280), float32] */;
    %207 = cast(%var_6487, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %208 = reshape(%204, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
    %209 = reshape(%205, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %210 = reshape(%206, newshape=[280]) /* ty=Tensor[(280), float32] */;
    %211 = reshape(%207, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %212 = @func_6302(%208, %209, %210, %211) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */;
    %213 = atanh(%202) /* ty=Tensor[(13, 11, 11), float32] */;
    %214 = %203.2;
    %215 = %212.6;
    (%213, %214, %215, meta[relay.Constant][16] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, %var_6486, %var_6487)
  };
  %216(%var_6493, %var_6494) /* ty=(Tensor[(13, 11, 11), float32], bool, Tensor[(280), float32], Tensor[(1008), float64], Tensor[(78), float32], Tensor[(280), float32], Tensor[(98), uint64]) */
}

def @func_10594() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  %217 = @func_9925() /* ty=(Tensor[(13, 12, 12), uint16],) */;
  %218 = %217.0;
  %219 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%218, %219)
}

def @func_12171() -> Tensor[(13, 12, 12), float32] {
  @func_12169() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_8044() -> Tensor[(13, 12, 12), float32] {
  @func_8042() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_13597() -> (Tensor[(13, 12, 12), float32],) {
  @func_13595() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_5943(%var_5939: Tensor[(16, 12, 8), float32]) -> Tensor[(16, 12, 8), float32] {
  %220 = cast(%var_5939, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  sigmoid(%220) /* ty=Tensor[(16, 12, 8), float32] */
}

def @func_13705() -> (Tensor[(13, 12, 12), float32],) {
  @func_13703() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_6867() -> Tensor[(13, 12, 12), float32] {
  @func_6865() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_7976(%var_7974: Tensor[(280), float32], %var_7975: Tensor[(1, 78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(280), float32], Tensor[(1, 78), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(588), float64], Tensor[(13, 12, 12), float32]) {
  @func_7972(%var_7974, %var_7975) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(280), float32], Tensor[(1, 78), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(588), float64], Tensor[(13, 12, 12), float32]) */
}

def @func_3966(%var_3963: Tensor[(1, 8, 10), int32], %var_3964: Tensor[(11, 8, 10), int32], %var_3965: Tensor[(504, 2), float64]) -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 10), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], Tensor[(504, 2), float64]) {
  %235 = fn (%var_3940: Tensor[(1, 8, 10), int32], %var_3941: Tensor[(11, 8, 10), int32], %var_3958: Tensor[(504, 2), float64]) -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 10), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], Tensor[(504, 2), float64]) {
    %221 = cast(%var_3940, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
    %222 = cast(%var_3941, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
    %223 = cast(%var_3940, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
    %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %225 = reshape(%224, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
    %226 = cast(%var_3958, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
    %227 = cast(%var_3958, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
    %228 = reshape(%226, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
    %229 = reshape(%227, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
    %230 = @func_1476(%228, %229) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
    %231 = less_equal(%221, %222) /* ty=Tensor[(11, 8, 10), bool] */;
    %232 = cos(%223) /* ty=Tensor[(1, 8, 10), float64] */;
    %233 = @func_784(%225) /* ty=Tensor[(6, 10, 10), float32] */;
    %234 = %230.3;
    (%231, %232, %233, meta[relay.Constant][18] /* ty=Tensor[(600), float32] */, %234, %var_3958)
  };
  %235(%var_3963, %var_3964, %var_3965) /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 10), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], Tensor[(504, 2), float64]) */
}

def @func_8836() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) {
  %236 = @func_8812() /* ty=Tensor[(13, 12, 12), uint16] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %238 = cast(%236, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %240 = reshape(%238, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %241 = reshape(%239, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %242 = @func_3914(%240, %241) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %243 = acos(%237) /* ty=Tensor[(13, 12, 12), float64] */;
  %244 = %242.0;
  (%243, %244, meta[relay.Constant][19] /* ty=Tensor[(280), float32] */)
}

def @func_4775() -> Tensor[(13, 12, 12), float32] {
  %245 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %245.0
}

def @func_8134(%var_8112: uint64) -> (Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) {
  %246 = cast(%var_8112, dtype="uint64") /* ty=uint64 */;
  %247 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 7, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 10), uint64] */;
  %248 = @func_6943() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %249 = bitwise_or(%246, %247) /* ty=Tensor[(13, 7, 10), uint64] */;
  %250 = %248.0;
  (%249, %250)
}

def @func_10442() -> (Tensor[(13, 12, 12), float32],) {
  %251 = @func_10283() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %252 = %251.0;
  (%252,)
}

def @func_9731() -> (Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
  %253 = cast(meta[relay.Constant][21] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %254 = reshape(%253, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
  %255 = @func_7695(%254) /* ty=(Tensor[(3, 5, 3), float32],) */;
  %256 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  %257 = %255.0;
  (%256, %257, meta[relay.Constant][21] /* ty=Tensor[(45), float32] */)
}

def @func_11333(%var_11315: Tensor[(2, 14, 4), bool], %var_11329: bool) -> (Tensor[(2, 14, 4), bool], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool) {
  %258 = cast(%var_11315, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %259 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 14, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %263 = cast(%var_11329, dtype="bool") /* ty=bool */;
  %264 = reshape(%263, newshape=[]) /* ty=bool */;
  %265 = @func_4947(%264) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
  %266 = logical_or(%260, %261) /* ty=Tensor[(2, 14, 4), bool] */;
  %267 = %262.0;
  %268 = %265.1;
  (%266, %267, %268, %var_11329)
}

def @func_7275() -> Tensor[(13, 12, 12), float32] {
  %269 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %269.0
}

def @func_11722() -> Tensor[(13, 12, 12), float32] {
  %271 = fn () -> Tensor[(13, 12, 12), float32] {
    %270 = @func_11500() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %270.0
  };
  %271() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_9377() -> Tensor[(13, 12, 12), float32] {
  @func_9375() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_11899(%var_11853: Tensor[(13, 14, 7), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(13, 14, 7), float32], Tensor[(13, 12, 12), float32]) {
  %272 = cast(%var_11853, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %273 = sigmoid(%272) /* ty=Tensor[(13, 14, 7), float32] */;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %275 = cast(%var_11853, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %276 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%273, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %279 = maximum(%277, %278) /* ty=Tensor[(13, 14, 7), float32] */;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %281 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %282 = asin(%274) /* ty=Tensor[(13, 14, 7), float32] */;
  %283 = rsqrt(%280) /* ty=Tensor[(13, 14, 7), float32] */;
  %284 = %281.1;
  (%282, %283, %284)
}

def @func_10883() -> (Tensor[(13, 12, 12), float32],) {
  %285 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %286 = %285.0;
  (%286,)
}

def @func_12840() -> Tensor[(45), float32] {
  %287 = fn () -> Tensor[(45), float32] {
    @func_11519() /* ty=Tensor[(45), float32] */
  };
  %287() /* ty=Tensor[(45), float32] */
}

def @func_5979() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) {
  @func_5977() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) */
}

def @func_9555() -> (Tensor[(13, 12, 12), float32],) {
  %288 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %289 = %288.0;
  (%289,)
}

def @func_4182(%var_4181: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
  %298 = fn (%var_4161: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
    %290 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %291 = %290.0;
    %292 = cast(%var_4161, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%291, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %296 = divide(%294, %295) /* ty=Tensor[(13, 12, 12), float64] */;
    %297 = cast(%296, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    tan(%297) /* ty=Tensor[(13, 12, 12), float32] */
  };
  %298(%var_4181) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_9134(%var_9132: Tensor[(5, 2, 15), int16], %var_9133: Tensor[(5, 2, 15), int16]) -> (Tensor[(5, 2, 15), bool],) {
  %304 = fn (%var_9124: Tensor[(5, 2, 15), int16], %var_9125: Tensor[(5, 2, 15), int16]) -> (Tensor[(5, 2, 15), bool],) {
    %299 = cast(%var_9125, dtype="bool") /* ty=Tensor[(5, 2, 15), bool] */;
    %300 = shape_of(%var_9124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%var_9124, dtype="bool") /* ty=Tensor[(5, 2, 15), bool] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %303 = greater_equal(%301, %302) /* ty=Tensor[(5, 2, 15), bool] */;
    (%303,)
  };
  %304(%var_9132, %var_9133) /* ty=(Tensor[(5, 2, 15), bool],) */
}

def @func_10793(%var_10762: Tensor[(15, 7, 16), float32]) -> (Tensor[(15, 7, 16), int64], Tensor[(13, 12, 12), float32]) {
  %305 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 16), float64] */;
  %306 = atan(%305) /* ty=Tensor[(15, 1, 16), float64] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(15, 1, 16), float32] */;
  %308 = sin(%307) /* ty=Tensor[(15, 1, 16), float32] */;
  %309 = cast(%308, dtype="bool") /* ty=Tensor[(15, 1, 16), bool] */;
  %310 = cast(%var_10762, dtype="bool") /* ty=Tensor[(15, 7, 16), bool] */;
  %311 = logical_and(%309, %310) /* ty=Tensor[(15, 7, 16), bool] */;
  %312 = cast(%306, dtype="int64") /* ty=Tensor[(15, 1, 16), int64] */;
  %313 = cast(%311, dtype="int64") /* ty=Tensor[(15, 7, 16), int64] */;
  %314 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %315 = bitwise_and(%312, %313) /* ty=Tensor[(15, 7, 16), int64] */;
  %316 = %314.0;
  (%315, %316)
}

def @func_8211() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  %317 = @func_4533() /* ty=(Tensor[(13, 12, 12), float64],) */;
  %318 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %319 = %317.0;
  (%318, %319)
}

def @func_5596(%var_5595: Tensor[(140, 2), float32]) -> (Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) {
  %333 = fn (%var_5547: Tensor[(140, 2), float32]) -> (Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) {
    %320 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %321 = %320.0;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %323 = cast(%var_5547, dtype="float32") /* ty=Tensor[(140, 2), float32] */;
    %324 = reshape(%322, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %325 = reshape(%323, newshape=[280]) /* ty=Tensor[(280), float32] */;
    %326 = @func_3914(%324, %325) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
    %327 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
    %328 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%321, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %331 = %326.5;
    %332 = greater_equal(%329, %330) /* ty=Tensor[(13, 12, 12), bool] */;
    (%331, %var_5547, %332)
  };
  %333(%var_5595) /* ty=(Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) */
}

def @func_9593() -> (Tensor[(13, 12, 12), float32],) {
  %334 = @func_8436() /* ty=Tensor[(13, 12, 12), float32] */;
  (%334,)
}

def @func_10705(%var_10702: Tensor[(12, 30), float32], %var_10703: Tensor[(968), uint32], %var_10704: Tensor[(968), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], uint16, Tensor[(12, 30), float32], Tensor[(13, 12, 12), uint16], Tensor[(968), float64], Tensor[(968), float32]) {
  %353 = fn (%var_10653: Tensor[(12, 30), float32], %var_10654: Tensor[(968), uint32], %var_10678: Tensor[(968), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], uint16, Tensor[(12, 30), float32], Tensor[(13, 12, 12), uint16], Tensor[(968), float64], Tensor[(968), float32]) {
    %335 = cast(%var_10653, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
    %336 = cast(%var_10654, dtype="uint32") /* ty=Tensor[(968), uint32] */;
    %337 = reshape(%335, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float32] */;
    %338 = reshape(%336, newshape=[968]) /* ty=Tensor[(968), uint32] */;
    %339 = @func_5780(%337, %338) /* ty=(Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) */;
    %340 = cast(%var_10654, dtype="float32") /* ty=Tensor[(968), float32] */;
    %341 = exp(%340) /* ty=Tensor[(968), float32] */;
    %342 = cast(%var_10678, dtype="float64") /* ty=Tensor[(968), float64] */;
    %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(1), int32] */;
    %344 = cast(%341, dtype="float64") /* ty=Tensor[(968), float64] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), float64] */;
    %346 = cast(%341, dtype="float32") /* ty=Tensor[(968), float32] */;
    %347 = @func_10225() /* ty=Tensor[(13, 12, 12), float32] */;
    %348 = @func_10342() /* ty=Tensor[(13, 12, 12), float32] */;
    %349 = %339.4;
    %350 = @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */;
    %351 = divide(%344, %345) /* ty=Tensor[(968), float64] */;
    %352 = erf(%346) /* ty=Tensor[(968), float32] */;
    (%347, %348, %349, %var_10653, %350, %351, %352)
  };
  %353(%var_10702, %var_10703, %var_10704) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], uint16, Tensor[(12, 30), float32], Tensor[(13, 12, 12), uint16], Tensor[(968), float64], Tensor[(968), float32]) */
}

def @func_11502() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  @func_11500() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_12242() -> (Tensor[(7, 4, 9), float32], bool, Tensor[(588), float32]) {
  %360 = fn () -> (Tensor[(7, 4, 9), float32], bool, Tensor[(588), float32]) {
    %354 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %355 = cast(meta[relay.Constant][25] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %356 = reshape(%355, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
    %357 = @func_397(%356) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
    %358 = %354.0;
    %359 = %357.2;
    (%358, %359, meta[relay.Constant][25] /* ty=Tensor[(588), float32] */)
  };
  %360() /* ty=(Tensor[(7, 4, 9), float32], bool, Tensor[(588), float32]) */
}

def @func_5496() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) {
  @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */
}

def @func_10154() -> (Tensor[(7, 4, 9), float32],) {
  %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %362 = sinh(%361) /* ty=Tensor[(7, 4, 9), float32] */;
  (%362,)
}

def @func_10885() -> (Tensor[(13, 12, 12), float32],) {
  @func_10883() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_4810() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_7698(%var_7696: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), float32],) {
  @func_7695(%var_7696) /* ty=(Tensor[(3, 5, 3), float32],) */
}

def @func_7972(%var_7938: Tensor[(280), float32], %var_7939: Tensor[(1, 78), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(280), float32], Tensor[(1, 78), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(588), float64], Tensor[(13, 12, 12), float32]) {
  %363 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %364 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %365 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %366 = cast(%var_7938, dtype="float32") /* ty=Tensor[(280), float32] */;
  %367 = cast(%var_7939, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
  %368 = reshape(%366, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %369 = reshape(%367, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %370 = @func_2235(%368, %369) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(588), float64] */;
  %373 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %374 = @func_4136() /* ty=Tensor[(13, 12, 12), float32] */;
  %375 = %363.0;
  %376 = %364.0;
  %377 = %365.0;
  %378 = acosh(%372) /* ty=Tensor[(588), float64] */;
  %379 = %373.0;
  (%374, %375, %var_7938, %var_7939, %376, %377, %378, %379)
}

def @func_9375() -> Tensor[(13, 12, 12), float32] {
  %380 = @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %380.0
}

def @func_5802() -> (Tensor[(13, 12, 12), float32],) {
  %381 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %382 = %381.0;
  (%382,)
}

def @func_5003(%var_5002: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), int16],) {
  %389 = fn (%var_4995: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), int16],) {
    %383 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
    %384 = cast(%var_4995, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
    %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%383, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %388 = maximum(%386, %387) /* ty=Tensor[(13, 12, 12), int16] */;
    (%388,)
  };
  %389(%var_5002) /* ty=(Tensor[(13, 12, 12), int16],) */
}

def @func_8073() -> (Tensor[(13, 12, 12), float32],) {
  @func_8071() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_8011() -> (Tensor[(13, 12, 12), float32],) {
  @func_8009() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_5354(%var_5346: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), bool] {
  %390 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %391 = %390.1;
  %392 = cast(%var_5346, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%394, %395) /* ty=Tensor[(13, 12, 12), bool] */
}

def @func_13521(%var_13500: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(13, 12, 12), bool]) {
  %396 = cast(%var_13500, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %397 = @func_11633() /* ty=(Tensor[(13, 12, 12), bool],) */;
  %398 = exp(%396) /* ty=Tensor[(3, 14, 3), float64] */;
  %399 = %397.0;
  (%398, %399)
}

def @func_10502() -> (Tensor[(13, 12, 12), bool],) {
  %400 = @func_8944() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
  %401 = %400.1;
  (%401,)
}

def @func_12655() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  %402 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
  %403 = @func_11160() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %404 = %402.0;
  %405 = %403.0;
  (%404, %405)
}

def @func_11802() -> (Tensor[(13, 12, 12), float32],) {
  @func_11800() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_400(%var_398: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) {
  @func_397(%var_398) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */
}

def @func_9925() -> (Tensor[(13, 12, 12), uint16],) {
  %406 = @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */;
  (%406,)
}

def @func_7077(%var_7075: Tensor[(1001), float64], %var_7076: Tensor[(15, 14, 15), float32]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(15, 14, 15), bool]) {
  @func_7073(%var_7075, %var_7076) /* ty=(Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(15, 14, 15), bool]) */
}

def @func_8071() -> (Tensor[(13, 12, 12), float32],) {
  %407 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %408 = %407.0;
  (%408,)
}

def @func_4639() -> Tensor[(13, 12, 12), float32] {
  %409 = @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %409.0
}

def @func_7707() -> (bool,) {
  %410 = @func_4457() /* ty=(bool,) */;
  %411 = %410.0;
  (%411,)
}

def @func_10183(%var_10175: Tensor[(12, 4, 11), float32]) -> (Tensor[(12, 4, 11), float32], Tensor[(12, 4, 11), float32]) {
  %412 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %413 = shape_of(%var_10175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_10175, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 11), float32] */;
  %417 = mod(%414, %415) /* ty=Tensor[(12, 4, 11), float32] */;
  %418 = erf(%416) /* ty=Tensor[(12, 4, 11), float32] */;
  (%417, %418)
}

def @func_8659() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
  @func_8657() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) */
}

def @func_9041() -> (Tensor[(13, 12, 12), float32],) {
  %419 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %420 = %419.0;
  (%420,)
}

def @func_10504() -> (Tensor[(13, 12, 12), bool],) {
  @func_10502() /* ty=(Tensor[(13, 12, 12), bool],) */
}

def @func_12090() -> (Tensor[(13, 12, 12), float32],) {
  %422 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %421 = @func_11721() /* ty=Tensor[(13, 12, 12), float32] */;
    (%421,)
  };
  %422() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_3839(%var_3838: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), int16] {
  %429 = fn (%var_3825: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), int16] {
    %423 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %424 = %423.0;
    %425 = cast(%var_3825, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
    %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%424, dtype="int16") /* ty=Tensor[(13, 12, 12), int16] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%427, %428) /* ty=Tensor[(13, 12, 12), int16] */
  };
  %429(%var_3838) /* ty=Tensor[(13, 12, 12), int16] */
}

def @func_12044() -> (Tensor[(13, 12, 12), float64], Tensor[(45), float32]) {
  %433 = fn () -> (Tensor[(13, 12, 12), float64], Tensor[(45), float32]) {
    %430 = @func_4533() /* ty=(Tensor[(13, 12, 12), float64],) */;
    %431 = %430.0;
    %432 = @func_11519() /* ty=Tensor[(45), float32] */;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(45), float32]) */
}

def @func_1728(%var_1726: Tensor[(12, 2, 9), int8], %var_1727: Tensor[(12, 2, 9), int8]) -> (Tensor[(12, 2, 9), int8], Tensor[(12, 2, 9), float64], bool, Tensor[(588), float32], Tensor[(360), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
  @func_1724(%var_1726, %var_1727) /* ty=(Tensor[(12, 2, 9), int8], Tensor[(12, 2, 9), float64], bool, Tensor[(588), float32], Tensor[(360), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) */
}

def @func_168(%var_166: bool, %var_167: Tensor[(6, 12, 5), bool]) -> Tensor[(6, 12, 5), bool] {
  @func_164(%var_166, %var_167) /* ty=Tensor[(6, 12, 5), bool] */
}

def @func_4777() -> Tensor[(13, 12, 12), float32] {
  @func_4775() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5783(%var_5781: Tensor[(10, 4, 9), float32], %var_5782: Tensor[(968), uint32]) -> (Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) {
  %469 = fn (%var_5763: Tensor[(10, 4, 9), float32], %var_5771: Tensor[(968), uint32]) -> (Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) {
    %434 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
    %435 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 28), float32] */, dtype="float32") /* ty=Tensor[(10, 28), float32] */;
    %436 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %437 = reshape(%435, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
    %438 = reshape(%436, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
    %439 = @func_2235(%437, %438) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
    %440 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %441 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %442 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %443 = reshape(%441, newshape=[]) /* ty=uint16 */;
    %444 = reshape(%442, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
    %445 = @func_4280(%443, %444) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
    %446 = %445.0;
    %447 = cast(%446, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
    %448 = asin(%447) /* ty=Tensor[(10, 4, 9), float32] */;
    %449 = cast(%var_5763, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
    %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%448, dtype="float32") /* ty=Tensor[(10, 4, 9), float32] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %453 = cast(%var_5771, dtype="uint32") /* ty=Tensor[(968), uint32] */;
    %454 = cast(%var_5771, dtype="uint32") /* ty=Tensor[(968), uint32] */;
    %455 = reshape(%453, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
    %456 = reshape(%454, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
    %457 = @func_2521(%455, %456) /* ty=(Tensor[(11, 11, 8), bool],) */;
    %458 = %440.0;
    %459 = cast(%458, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %460 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 28), float32] */, dtype="float32") /* ty=Tensor[(10, 28), float32] */;
    %461 = reshape(%459, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %462 = reshape(%460, newshape=[280]) /* ty=Tensor[(280), float32] */;
    %463 = @func_3914(%461, %462) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
    %464 = %434.2;
    %465 = %439.2;
    %466 = floor_mod(%451, %452) /* ty=Tensor[(10, 4, 9), float32] */;
    %467 = %457.0;
    %468 = %463.4;
    (%464, %465, meta[relay.Constant][28] /* ty=Tensor[(10, 28), float32] */, meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, meta[relay.Constant][30] /* ty=uint16 */, %458, %466, %467, %var_5771, %468)
  };
  %469(%var_5781, %var_5782) /* ty=(Tensor[(819), float64], Tensor[(26, 3), float32], Tensor[(10, 28), float32], Tensor[(78), float32], uint16, Tensor[(13, 12, 12), float32], Tensor[(10, 4, 9), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(26, 3), float32]) */
}

def @func_10444() -> (Tensor[(13, 12, 12), float32],) {
  @func_10442() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_12349() -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  @func_12347() /* ty=(Tensor[(45), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_3724() -> (Tensor[(13, 12, 12), float32],) {
  %474 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %470 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
    %471 = erf(%470) /* ty=Tensor[(13, 12, 12), float64] */;
    %472 = cast(%471, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %473 = asin(%472) /* ty=Tensor[(13, 12, 12), float32] */;
    (%473,)
  };
  %474() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_10156() -> (Tensor[(7, 4, 9), float32],) {
  @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_12928(%var_12899: Tensor[(7, 14, 4), float64], %var_12900: Tensor[(7, 14, 4), float64], %var_12904: Tensor[(7, 14, 4), bool]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32]) {
  %475 = cast(%var_12900, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %476 = shape_of(%var_12899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_12899, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = greater_equal(%477, %478) /* ty=Tensor[(7, 14, 4), bool] */;
  %480 = cast(%var_12904, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %484 = less(%482, %483) /* ty=Tensor[(7, 14, 4), bool] */;
  %485 = cast(%479, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %489 = cast(%479, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %490 = add(%487, %488) /* ty=Tensor[(7, 14, 4), uint64] */;
  %491 = log10(%489) /* ty=Tensor[(7, 14, 4), float32] */;
  (%490, %491)
}

def @func_5095(%var_5094: Tensor[(16, 7, 9), float64]) -> Tensor[(16, 7, 9), float64] {
  %493 = fn (%var_5090: Tensor[(16, 7, 9), float64]) -> Tensor[(16, 7, 9), float64] {
    %492 = cast(%var_5090, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
    atanh(%492) /* ty=Tensor[(16, 7, 9), float64] */
  };
  %493(%var_5094) /* ty=Tensor[(16, 7, 9), float64] */
}

def @func_8137(%var_8135: uint64) -> (Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) {
  @func_8134(%var_8135) /* ty=(Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) */
}

def @func_11272(%var_11265: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), uint64],) {
  %494 = cast(%var_11265, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
  %495 = tan(%494) /* ty=Tensor[(15, 12, 14), float32] */;
  %496 = cast(%var_11265, dtype="uint64") /* ty=Tensor[(15, 12, 14), uint64] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="uint64") /* ty=Tensor[(15, 12, 14), uint64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %500 = maximum(%498, %499) /* ty=Tensor[(15, 12, 14), uint64] */;
  (%500,)
}

def @func_5289() -> (Tensor[(13, 12, 12), float64],) {
  %503 = fn () -> (Tensor[(13, 12, 12), float64],) {
    %501 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
    %502 = %501.0;
    (%502,)
  };
  %503() /* ty=(Tensor[(13, 12, 12), float64],) */
}

def @func_10796(%var_10794: Tensor[(15, 7, 16), float32]) -> (Tensor[(15, 7, 16), int64], Tensor[(13, 12, 12), float32]) {
  @func_10793(%var_10794) /* ty=(Tensor[(15, 7, 16), int64], Tensor[(13, 12, 12), float32]) */
}

def @func_6333() -> (Tensor[(13, 12, 12), float64],) {
  %506 = fn () -> (Tensor[(13, 12, 12), float64],) {
    %504 = @func_5288() /* ty=(Tensor[(13, 12, 12), float64],) */;
    %505 = %504.0;
    (%505,)
  };
  %506() /* ty=(Tensor[(13, 12, 12), float64],) */
}

def @func_11841() -> (Tensor[(13, 12, 12), float32],) {
  %507 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %508 = %507.0;
  (%508,)
}

def @func_10132(%var_10130: Tensor[(12, 10, 14), float64]) -> (Tensor[(12, 10, 14), float64],) {
  @func_10129(%var_10130) /* ty=(Tensor[(12, 10, 14), float64],) */
}

def @func_11030() -> (Tensor[(13, 12, 12), bool],) {
  @func_11028() /* ty=(Tensor[(13, 12, 12), bool],) */
}

def @func_12222(%var_12221: Tensor[(600), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
  %514 = fn (%var_12195: Tensor[(600), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
    %509 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
    %510 = cast(%var_12195, dtype="float32") /* ty=Tensor[(600), float32] */;
    %511 = reshape(%510, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
    %512 = %509.2;
    %513 = @func_784(%511) /* ty=Tensor[(6, 10, 10), float32] */;
    (%512, %513, %var_12195)
  };
  %514(%var_12221) /* ty=(Tensor[(13, 12, 12), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) */
}

def @func_7106() -> (Tensor[(13, 12, 12), float32],) {
  %515 = @func_6865() /* ty=Tensor[(13, 12, 12), float32] */;
  (%515,)
}

def @func_12524(%var_12521: Tensor[(4, 1, 12), int64], %var_12522: Tensor[(4, 16, 12), int64], %var_12523: float64) -> (Tensor[(4, 16, 12), int64], Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
  %529 = fn (%var_12498: Tensor[(4, 1, 12), int64], %var_12499: Tensor[(4, 16, 12), int64], %var_12508: float64) -> (Tensor[(4, 16, 12), int64], Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
    %516 = cast(%var_12498, dtype="int64") /* ty=Tensor[(4, 1, 12), int64] */;
    %517 = cast(%var_12499, dtype="int64") /* ty=Tensor[(4, 16, 12), int64] */;
    %518 = cast(%var_12508, dtype="float64") /* ty=float64 */;
    %519 = cast(meta[relay.Constant][32] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %520 = reshape(%518, newshape=[]) /* ty=float64 */;
    %521 = reshape(%519, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
    %522 = @func_4832(%520, %521) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
    %523 = cast(meta[relay.Constant][33] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %524 = reshape(%523, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
    %525 = @func_7695(%524) /* ty=(Tensor[(3, 5, 3), float32],) */;
    %526 = logical_xor(%516, %517) /* ty=Tensor[(4, 16, 12), int64] */;
    %527 = %522.0;
    %528 = %525.0;
    (%526, %527, %var_12508, meta[relay.Constant][32] /* ty=Tensor[(1001), float64] */, %528, meta[relay.Constant][33] /* ty=Tensor[(45), float32] */)
  };
  %529(%var_12521, %var_12522, %var_12523) /* ty=(Tensor[(4, 16, 12), int64], Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */
}

def @func_9663(%var_9662: Tensor[(6, 13, 11), uint16]) -> (Tensor[(6, 13, 11), uint16], Tensor[(13, 12, 12), float32], Tensor[(6, 13, 11), bool]) {
  %542 = fn (%var_9647: Tensor[(6, 13, 11), uint16]) -> (Tensor[(6, 13, 11), uint16], Tensor[(13, 12, 12), float32], Tensor[(6, 13, 11), bool]) {
    %530 = cast(%var_9647, dtype="uint16") /* ty=Tensor[(6, 13, 11), uint16] */;
    %531 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="uint16") /* ty=Tensor[(6, 13, 11), uint16] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %534 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
    %535 = cast(%var_9647, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
    %536 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = maximum(%532, %533) /* ty=Tensor[(6, 13, 11), uint16] */;
    %540 = %534.1;
    %541 = greater(%537, %538) /* ty=Tensor[(6, 13, 11), bool] */;
    (%539, %540, %541)
  };
  %542(%var_9662) /* ty=(Tensor[(6, 13, 11), uint16], Tensor[(13, 12, 12), float32], Tensor[(6, 13, 11), bool]) */
}

def @func_12933(%var_12930: Tensor[(7, 14, 4), float64], %var_12931: Tensor[(7, 14, 4), float64], %var_12932: Tensor[(7, 14, 4), bool]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32]) {
  @func_12928(%var_12930, %var_12931, %var_12932) /* ty=(Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32]) */
}

def @func_11634() -> (Tensor[(13, 12, 12), bool],) {
  %545 = fn () -> (Tensor[(13, 12, 12), bool],) {
    %543 = @func_11595() /* ty=(Tensor[(13, 12, 12), bool],) */;
    %544 = %543.0;
    (%544,)
  };
  %545() /* ty=(Tensor[(13, 12, 12), bool],) */
}

def @func_4097() -> (Tensor[(13, 12, 12), float32],) {
  @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_10596() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  @func_10594() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */
}

def @func_13303(%var_13280: Tensor[(9, 5, 16), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(9, 5, 16), float64], Tensor[(13, 12, 12), float32]) {
  %546 = cast(%var_13280, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %547 = exp(%546) /* ty=Tensor[(9, 5, 16), float64] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %549 = @func_8009() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %550 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %551 = sinh(%548) /* ty=Tensor[(9, 5, 16), float64] */;
  %552 = %549.0;
  (%550, %551, %552)
}

def @func_11843() -> (Tensor[(13, 12, 12), float32],) {
  @func_11841() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_6944() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %558 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %553 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
    %554 = cast(%553, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %555 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %556 = log(%554) /* ty=Tensor[(13, 12, 12), float32] */;
    %557 = %555.0;
    (%556, %557)
  };
  %558() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_11161() -> (Tensor[(13, 12, 12), float32],) {
  %561 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %559 = @func_6832() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %560 = %559.0;
    (%560,)
  };
  %561() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_9505(%var_9476: Tensor[(4, 600), float64], %var_9484: Tensor[(12, 600), float64]) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], uint64, Tensor[(1, 600), float64], Tensor[(4, 600), float32], Tensor[(12, 600), bool], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), float32]) {
  %562 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %563 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %564 = reshape(%563, newshape=[]) /* ty=uint64 */;
  %565 = @func_8134(%564) /* ty=(Tensor[(13, 7, 10), uint64], Tensor[(13, 12, 12), float32]) */;
  %566 = @func_8922() /* ty=Tensor[(1, 600), float32] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %568 = cast(%566, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %569 = atanh(%568) /* ty=Tensor[(1, 600), float64] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %571 = cast(%var_9476, dtype="float32") /* ty=Tensor[(4, 600), float32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %573 = cast(%var_9484, dtype="bool") /* ty=Tensor[(12, 600), bool] */;
  %574 = %562.0;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %576 = reshape(%575, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %577 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %578 = %565.1;
  %579 = cos(%567) /* ty=Tensor[(1, 600), float64] */;
  %580 = floor_mod(%570, %571) /* ty=Tensor[(4, 600), float32] */;
  %581 = less(%572, %573) /* ty=Tensor[(12, 600), bool] */;
  %582 = @func_3837(%576) /* ty=Tensor[(13, 12, 12), int16] */;
  %583 = %577.1;
  (%574, %578, meta[relay.Constant][35] /* ty=uint64 */, %579, %580, %581, %582, %583)
}

def @func_5691() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) {
  %601 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) {
    %584 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %585 = @func_4966() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
    %586 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %587 = reshape(%586, newshape=[]) /* ty=bool */;
    %588 = @func_4947(%587) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %589 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %590 = reshape(%589, newshape=[]) /* ty=bool */;
    %591 = @func_4947(%590) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %592 = %591.1;
    %593 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 12, 5), bool] */, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %597 = %584.0;
    %598 = %585.0;
    %599 = %588.0;
    %600 = divide(%595, %596) /* ty=Tensor[(6, 12, 5), float32] */;
    (%597, %598, %599, False /* ty=bool */, %600)
  };
  %601() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) */
}

def @func_5370() -> Tensor[(13, 12, 12), float32] {
  %602 = fn () -> Tensor[(13, 12, 12), float32] {
    @func_4136() /* ty=Tensor[(13, 12, 12), float32] */
  };
  %602() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_8213() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  @func_8211() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) */
}

def @func_13539() -> Tensor[(13, 12, 12), uint16] {
  %604 = fn () -> Tensor[(13, 12, 12), uint16] {
    %603 = @func_12655() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
    %603.0
  };
  %604() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_6302(%var_6208: Tensor[(1008), float64], %var_6238: Tensor[(78), float32], %var_6260: Tensor[(280), float32], %var_6275: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
  %605 = cast(%var_6208, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %606 = cast(%var_6208, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %607 = reshape(%605, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %608 = reshape(%606, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float64] */;
  %609 = @func_1476(%607, %608) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */;
  %610 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %611 = cast(%var_6238, dtype="float32") /* ty=Tensor[(78), float32] */;
  %612 = reshape(%611, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %613 = @func_965(%612) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %614 = cast(%var_6260, dtype="float32") /* ty=Tensor[(280), float32] */;
  %615 = reshape(%614, newshape=[140, 2]) /* ty=Tensor[(140, 2), float32] */;
  %616 = @func_5594(%615) /* ty=(Tensor[(280), float32], Tensor[(140, 2), float32], Tensor[(13, 12, 12), bool]) */;
  %617 = cast(%var_6275, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %618 = cast(%var_6275, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %619 = reshape(%617, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %620 = reshape(%618, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
  %621 = @func_5212(%619, %620) /* ty=(Tensor[(2, 7, 7), uint64],) */;
  %622 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  %623 = %609.9;
  %624 = %610.1;
  %625 = %613.0;
  %626 = %616.0;
  %627 = %621.0;
  (%622, %623, %var_6208, %624, %625, %var_6238, %626, %var_6260, %627, %var_6275)
}

def @func_13237() -> (Tensor[(13, 12, 12), bool], Tensor[(7, 4, 9), float32]) {
  %632 = fn () -> (Tensor[(13, 12, 12), bool], Tensor[(7, 4, 9), float32]) {
    %628 = @func_11653() /* ty=(Tensor[(13, 12, 12), bool],) */;
    %629 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %630 = %628.0;
    %631 = %629.0;
    (%630, %631)
  };
  %632() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(7, 4, 9), float32]) */
}

def @func_5309() -> (Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) {
  @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */
}

def @func_1476(%var_1404: Tensor[(9, 7, 16), float64], %var_1405: Tensor[(9, 7, 16), float64]) -> (Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) {
  %633 = cast(%var_1405, dtype="float64") /* ty=Tensor[(9, 7, 16), float64] */;
  %634 = shape_of(%var_1404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_1404, dtype="float64") /* ty=Tensor[(9, 7, 16), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %637 = cast(meta[relay.Constant][37] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %638 = reshape(%637, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %639 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %640 = cast(meta[relay.Constant][38] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %641 = reshape(%639, newshape=[]) /* ty=bool */;
  %642 = reshape(%640, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %643 = cast(meta[relay.Constant][39] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %644 = reshape(%643, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %645 = @func_965(%644) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
  %646 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %647 = @func_164(%641, %642) /* ty=Tensor[(6, 12, 5), bool] */;
  %648 = cast(%647, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %649 = reshape(%646, newshape=[]) /* ty=bool */;
  %650 = reshape(%648, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %651 = @func_784(%638) /* ty=Tensor[(6, 10, 10), float32] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %653 = reshape(%652, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %654 = multiply(%635, %636) /* ty=Tensor[(9, 7, 16), float64] */;
  %655 = %645.1;
  %656 = @func_164(%649, %650) /* ty=Tensor[(6, 12, 5), bool] */;
  %657 = @func_784(%653) /* ty=Tensor[(6, 10, 10), float32] */;
  (%654, %651, meta[relay.Constant][37] /* ty=Tensor[(600), float32] */, %647, False /* ty=bool */, meta[relay.Constant][38] /* ty=Tensor[(360), bool] */, %655, meta[relay.Constant][39] /* ty=Tensor[(78), float32] */, %656, %657)
}

def @func_4226() -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) {
  %658 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %661 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %662 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %663 = reshape(%661, newshape=[]) /* ty=bool */;
  %664 = reshape(%662, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %665 = asinh(%660) /* ty=Tensor[(13, 12, 12), float64] */;
  %666 = @func_164(%663, %664) /* ty=Tensor[(6, 12, 5), bool] */;
  (%665, %666, True /* ty=bool */, meta[relay.Constant][40] /* ty=Tensor[(360), bool] */)
}

def @func_1724(%var_1685: Tensor[(12, 2, 9), int8], %var_1686: Tensor[(12, 2, 9), int8]) -> (Tensor[(12, 2, 9), int8], Tensor[(12, 2, 9), float64], bool, Tensor[(588), float32], Tensor[(360), bool], Tensor[(6, 10, 10), float32], Tensor[(600), float32]) {
  %667 = cast(%var_1686, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %668 = shape_of(%var_1685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_1685, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %671 = cast(%var_1686, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %672 = cast(meta[relay.Constant][41] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %673 = reshape(%672, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %674 = @func_397(%673) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %675 = cast(meta[relay.Constant][41] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %676 = reshape(%675, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %677 = @func_397(%676) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
  %678 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %679 = reshape(%678, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %680 = bitwise_and(%669, %670) /* ty=Tensor[(12, 2, 9), int8] */;
  %681 = atan(%671) /* ty=Tensor[(12, 2, 9), float64] */;
  %682 = %674.2;
  %683 = %677.3;
  %684 = @func_784(%679) /* ty=Tensor[(6, 10, 10), float32] */;
  (%680, %681, %682, meta[relay.Constant][41] /* ty=Tensor[(588), float32] */, %683, %684, meta[relay.Constant][42] /* ty=Tensor[(600), float32] */)
}

def @func_11198() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %689 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %685 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %686 = @func_4702() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %687 = %685.2;
    %688 = %686.0;
    (%687, %688)
  };
  %689() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_397(%var_361: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) {
  %690 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
  %691 = shape_of(%var_361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_361, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %694 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %695 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %696 = reshape(%694, newshape=[]) /* ty=bool */;
  %697 = reshape(%695, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %698 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %699 = @func_164(%696, %697) /* ty=Tensor[(6, 12, 5), bool] */;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %701 = reshape(%698, newshape=[]) /* ty=bool */;
  %702 = reshape(%700, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %703 = power(%692, %693) /* ty=Tensor[(6, 14, 7), float32] */;
  %704 = @func_164(%701, %702) /* ty=Tensor[(6, 12, 5), bool] */;
  (%703, %699, True /* ty=bool */, meta[relay.Constant][44] /* ty=Tensor[(360), bool] */, %704)
}

def @func_6522(%var_6520: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(280), float32]) {
  @func_6519(%var_6520) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(280), float32]) */
}

def @func_8437() -> Tensor[(13, 12, 12), float32] {
  %705 = fn () -> Tensor[(13, 12, 12), float32] {
    @func_7275() /* ty=Tensor[(13, 12, 12), float32] */
  };
  %705() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5494() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) {
  %706 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %707 = %706.0;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %713 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%707, dtype="bool") /* ty=Tensor[(13, 12, 12), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = logical_and(%710, %711) /* ty=Tensor[(13, 12, 12), bool] */;
  %717 = not_equal(%714, %715) /* ty=Tensor[(13, 12, 12), bool] */;
  (%716, %717)
}

def @func_10025() -> Tensor[(13, 12, 12), float32] {
  %718 = fn () -> Tensor[(13, 12, 12), float32] {
    @func_5917() /* ty=Tensor[(13, 12, 12), float32] */
  };
  %718() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_7037(%var_7036: uint16) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], bool, uint16, Tensor[(78), float32]) {
  %727 = fn (%var_7032: uint16) -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], bool, uint16, Tensor[(78), float32]) {
    %719 = cast(%var_7032, dtype="uint16") /* ty=uint16 */;
    %720 = cast(meta[relay.Constant][46] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %721 = reshape(%719, newshape=[]) /* ty=uint16 */;
    %722 = reshape(%720, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
    %723 = @func_4280(%721, %722) /* ty=(Tensor[(10, 4, 9), bool], Tensor[(10, 4, 9), float32], bool, Tensor[(78, 1), float32]) */;
    %724 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
    %725 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
    %726 = %723.2;
    (%724, %725, %726, %var_7032, meta[relay.Constant][46] /* ty=Tensor[(78), float32] */)
  };
  %727(%var_7036) /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32], bool, uint16, Tensor[(78), float32]) */
}

def @func_4431() -> Tensor[(13, 12, 12), float32] {
  %728 = fn () -> Tensor[(13, 12, 12), float32] {
    @func_4136() /* ty=Tensor[(13, 12, 12), float32] */
  };
  %728() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_11307() -> Tensor[(13, 12, 12), float32] {
  @func_11305() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_11800() -> (Tensor[(13, 12, 12), float32],) {
  %729 = @func_9041() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %730 = %729.0;
  (%730,)
}

def @func_13142() -> Tensor[(13, 12, 12), float64] {
  %731 = @func_8836() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) */;
  %731.0
}

def @main() -> (Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), float32]) {
  %732 = @func_5691() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], bool, Tensor[(6, 12, 5), float32]) */;
  %733 = @func_4967() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */;
  %734 = %733.1;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(11, ?, 6), float32] */;
  %736 = %732.0;
  %737 = atanh(%735) /* ty=Tensor[(11, ?, 6), float32] */;
  (%736, %737)
}

def @func_8812() -> Tensor[(13, 12, 12), uint16] {
  @func_8744() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_4137() -> Tensor[(13, 12, 12), float32] {
  %739 = fn () -> Tensor[(13, 12, 12), float32] {
    %738 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %738.0
  };
  %739() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_6057(%var_6054: Tensor[(7, 11, 7), int32], %var_6055: Tensor[(7, 11, 7), int32], %var_6056: Tensor[(13, 12, 12), float32]) -> (Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) {
  @func_6052(%var_6054, %var_6055, %var_6056) /* ty=(Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) */
}

def @func_11337(%var_11335: Tensor[(2, 14, 4), bool], %var_11336: bool) -> (Tensor[(2, 14, 4), bool], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool) {
  @func_11333(%var_11335, %var_11336) /* ty=(Tensor[(2, 14, 4), bool], Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool) */
}

def @func_7333(%var_7332: Tensor[(539), int32]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], Tensor[(588), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint32], Tensor[(539), int32]) {
  %755 = fn (%var_7324: Tensor[(539), int32]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], Tensor[(588), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint32], Tensor[(539), int32]) {
    %740 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %741 = cast(meta[relay.Constant][47] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %742 = reshape(%741, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
    %743 = @func_397(%742) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
    %744 = cast(%var_7324, dtype="int32") /* ty=Tensor[(539), int32] */;
    %745 = cast(%var_7324, dtype="int32") /* ty=Tensor[(539), int32] */;
    %746 = @func_7275() /* ty=Tensor[(13, 12, 12), float32] */;
    %747 = cast(%746, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %748 = reshape(%744, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int32] */;
    %749 = reshape(%745, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int32] */;
    %750 = reshape(%747, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %751 = @func_6052(%748, %749, %750) /* ty=(Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) */;
    %752 = %740.1;
    %753 = %743.1;
    %754 = %751.1;
    (%752, %753, meta[relay.Constant][47] /* ty=Tensor[(588), float32] */, %746, %754, %var_7324)
  };
  %755(%var_7332) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], Tensor[(588), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint32], Tensor[(539), int32]) */
}

def @func_12169() -> Tensor[(13, 12, 12), float32] {
  %756 = @func_10883() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %756.0
}

def @func_13306(%var_13304: Tensor[(9, 5, 16), float64]) -> (Tensor[(13, 12, 12), float32], Tensor[(9, 5, 16), float64], Tensor[(13, 12, 12), float32]) {
  @func_13303(%var_13304) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(9, 5, 16), float64], Tensor[(13, 12, 12), float32]) */
}

def @func_2524(%var_2522: Tensor[(11, 11, 8), uint32], %var_2523: Tensor[(11, 11, 8), uint32]) -> (Tensor[(11, 11, 8), bool],) {
  %762 = fn (%var_2511: Tensor[(11, 11, 8), uint32], %var_2512: Tensor[(11, 11, 8), uint32]) -> (Tensor[(11, 11, 8), bool],) {
    %757 = cast(%var_2512, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %758 = shape_of(%var_2511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%var_2511, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %761 = greater_equal(%759, %760) /* ty=Tensor[(11, 11, 8), bool] */;
    (%761,)
  };
  %762(%var_2522, %var_2523) /* ty=(Tensor[(11, 11, 8), bool],) */
}

def @func_8945() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %766 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
    %763 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
    %764 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
    %765 = %763.0;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */
}

def @func_4458() -> (bool,) {
  %769 = fn () -> (bool,) {
    %767 = @func_4226() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %768 = %767.2;
    (%768,)
  };
  %769() /* ty=(bool,) */
}

def @func_9883(%var_9882: Tensor[(6, 7, 8), float32]) -> Tensor[(6, 7, 8), float32] {
  %771 = fn (%var_9876: Tensor[(6, 7, 8), float32]) -> Tensor[(6, 7, 8), float32] {
    %770 = cast(%var_9876, dtype="float32") /* ty=Tensor[(6, 7, 8), float32] */;
    asin(%770) /* ty=Tensor[(6, 7, 8), float32] */
  };
  %771(%var_9882) /* ty=Tensor[(6, 7, 8), float32] */
}

def @func_11465() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float64], Tensor[(?, 600), bool]) {
  %772 = @func_9997() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) */;
  %773 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %774 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 600), float32] */, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %775 = reshape(%774, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), float32] */;
  %776 = @func_784(%775) /* ty=Tensor[(6, 10, 10), float32] */;
  %777 = cast(%776, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %778 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(1, 600), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %779 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 600), float32] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %781 = %772.0;
  %782 = %773.0;
  %783 = logical_and(%779, %780) /* ty=Tensor[(?, 600), bool] */;
  (%781, %782, %783)
}

def @func_9998() -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) {
  %790 = fn () -> (Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) {
    %784 = @func_8836() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(280), float32]) */;
    %785 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %786 = reshape(%785, newshape=[]) /* ty=bool */;
    %787 = @func_4947(%786) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool]) */;
    %788 = %784.0;
    %789 = %787.1;
    (%788, %789, True /* ty=bool */)
  };
  %790() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(6, 12, 5), bool], bool) */
}

def @func_10553() -> Tensor[(13, 12, 12), float64] {
  %791 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %791.0
}

def @func_11690(%var_11689: Tensor[(13, 13, 9), float32]) -> Tensor[(13, 13, 9), float32] {
  %793 = fn (%var_11660: Tensor[(13, 13, 9), float32]) -> Tensor[(13, 13, 9), float32] {
    %792 = cast(%var_11660, dtype="float32") /* ty=Tensor[(13, 13, 9), float32] */;
    sinh(%792) /* ty=Tensor[(13, 13, 9), float32] */
  };
  %793(%var_11689) /* ty=Tensor[(13, 13, 9), float32] */
}

def @func_4967() -> (Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) {
  %802 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) {
    %794 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 6), float32] */;
    %795 = erf(%794) /* ty=Tensor[(11, 1, 6), float32] */;
    %796 = cast(%795, dtype="int32") /* ty=Tensor[(11, 1, 6), int32] */;
    %797 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(11, 1, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 1, 6), float32] */, dtype="int32") /* ty=Tensor[(11, 1, 6), int32] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %800 = @func_4430() /* ty=Tensor[(13, 12, 12), float32] */;
    %801 = multiply(%798, %799) /* ty=Tensor[(11, ?, 6), int32] */;
    (%800, %801)
  };
  %802() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, ?, 6), int32]) */
}

def @func_8657() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
  %803 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %804 = %803.0;
  %805 = @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */;
  (%804, %805)
}

def @func_12657() -> (Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) {
  @func_12655() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */
}

def @func_10225() -> Tensor[(13, 12, 12), float32] {
  %806 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %806.1
}

def @func_7499(%var_7498: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
  %814 = fn (%var_7490: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
    %807 = cast(%var_7490, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %808 = cast(%var_7490, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %809 = reshape(%807, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
    %810 = reshape(%808, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), uint64] */;
    %811 = @func_5212(%809, %810) /* ty=(Tensor[(2, 7, 7), uint64],) */;
    %812 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
    %813 = %811.0;
    (%812, %813, %var_7490)
  };
  %814(%var_7498) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */
}

def @func_10093() -> (Tensor[(13, 12, 12), float32],) {
  %817 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %815 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
    %816 = %815.0;
    (%816,)
  };
  %817() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_12547() -> Tensor[(13, 12, 12), uint16] {
  %818 = fn () -> Tensor[(13, 12, 12), uint16] {
    @func_8812() /* ty=Tensor[(13, 12, 12), uint16] */
  };
  %818() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_6519(%var_6507: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(280), float32]) {
  %819 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %821 = cast(%var_6507, dtype="float32") /* ty=Tensor[(280), float32] */;
  %822 = reshape(%820, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
  %823 = reshape(%821, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %824 = @func_3914(%822, %823) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) */;
  %825 = %824.1;
  (%819, %825, %var_6507)
}

def @func_12690() -> Tensor[(13, 12, 12), bool] {
  %827 = fn () -> Tensor[(13, 12, 12), bool] {
    %826 = @func_11633() /* ty=(Tensor[(13, 12, 12), bool],) */;
    %826.0
  };
  %827() /* ty=Tensor[(13, 12, 12), bool] */
}

def @func_12605() -> (Tensor[(13, 12, 12), float32],) {
  @func_12603() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_13372() -> (Tensor[(13, 12, 12), float32],) {
  %830 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %828 = @func_7506() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %829 = %828.0;
    (%829,)
  };
  %830() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_6865() -> Tensor[(13, 12, 12), float32] {
  %831 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %831.1
}

def @func_4095() -> (Tensor[(13, 12, 12), float32],) {
  %832 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %833 = %832.0;
  (%833,)
}

def @func_10284() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %837 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %834 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
    %835 = %834.0;
    %836 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
    (%835, %836)
  };
  %837() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_12876() -> Tensor[(13, 12, 12), float32] {
  @func_12874() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_9509(%var_9507: Tensor[(4, 600), float64], %var_9508: Tensor[(12, 600), float64]) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], uint64, Tensor[(1, 600), float64], Tensor[(4, 600), float32], Tensor[(12, 600), bool], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), float32]) {
  @func_9505(%var_9507, %var_9508) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], uint64, Tensor[(1, 600), float64], Tensor[(4, 600), float32], Tensor[(12, 600), bool], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), float32]) */
}

def @func_9848() -> Tensor[(13, 12, 12), float32] {
  @func_9846() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_8518(%var_8517: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(78, 1), float32], uint16, Tensor[(78), float32], Tensor[(11, 7, 11), float64], Tensor[(847), float64], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %856 = fn (%var_8480: Tensor[(78), float32]) -> (Tensor[(13, 12, 12), bool], Tensor[(78, 1), float32], uint16, Tensor[(78), float32], Tensor[(11, 7, 11), float64], Tensor[(847), float64], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %838 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
    %839 = cast(meta[relay.Constant][50] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %840 = cast(%var_8480, dtype="float32") /* ty=Tensor[(78), float32] */;
    %841 = reshape(%839, newshape=[]) /* ty=uint16 */;
    %842 = reshape(%840, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %843 = @func_7132(%841, %842) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(78, 1), float32], uint16, Tensor[(78), float32]) */;
    %844 = cast(meta[relay.Constant][50] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
    %845 = cast(meta[relay.Constant][51] /* ty=Tensor[(847), float64] */, dtype="float64") /* ty=Tensor[(847), float64] */;
    %846 = reshape(%844, newshape=[]) /* ty=float64 */;
    %847 = reshape(%845, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), float64] */;
    %848 = @func_8277(%846, %847) /* ty=(Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) */;
    %849 = @func_7178() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %850 = @func_8211() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) */;
    %851 = %838.0;
    %852 = %843.1;
    %853 = %848.0;
    %854 = %849.0;
    %855 = %850.0;
    (%851, %852, meta[relay.Constant][50] /* ty=uint16 */, %var_8480, %853, meta[relay.Constant][51] /* ty=Tensor[(847), float64] */, %854, %855)
  };
  %856(%var_8517) /* ty=(Tensor[(13, 12, 12), bool], Tensor[(78, 1), float32], uint16, Tensor[(78), float32], Tensor[(11, 7, 11), float64], Tensor[(847), float64], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_1480(%var_1478: Tensor[(9, 7, 16), float64], %var_1479: Tensor[(9, 7, 16), float64]) -> (Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) {
  @func_1476(%var_1478, %var_1479) /* ty=(Tensor[(9, 7, 16), float64], Tensor[(6, 10, 10), float32], Tensor[(600), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(360), bool], Tensor[(78), float32], Tensor[(6, 12, 5), bool], Tensor[(6, 10, 10), float32]) */
}

def @func_9733() -> (Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) {
  @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */
}

def @func_7654() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %860 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
    %857 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
    %858 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
    %859 = %857.1;
    (%858, %859)
  };
  %860() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */
}

def @func_8280(%var_8278: float64, %var_8279: Tensor[(11, 7, 11), float64]) -> (Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) {
  %865 = fn (%var_8220: float64, %var_8221: Tensor[(11, 7, 11), float64]) -> (Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) {
    %861 = cast(%var_8220, dtype="float64") /* ty=float64 */;
    %862 = cast(%var_8221, dtype="float64") /* ty=Tensor[(11, 7, 11), float64] */;
    %863 = floor_divide(%861, %862) /* ty=Tensor[(11, 7, 11), float64] */;
    %864 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
    (%863, %864)
  };
  %865(%var_8278, %var_8279) /* ty=(Tensor[(11, 7, 11), float64], Tensor[(13, 12, 12), float32]) */
}

def @func_967(%var_966: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) {
  %876 = fn (%var_947: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) {
    %866 = cast(%var_947, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
    %867 = cast(meta[relay.Constant][52] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %868 = reshape(%867, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
    %869 = @func_397(%868) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
    %870 = cast(meta[relay.Constant][52] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %871 = reshape(%870, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
    %872 = @func_397(%871) /* ty=(Tensor[(6, 14, 7), float32], Tensor[(6, 12, 5), bool], bool, Tensor[(360), bool], Tensor[(6, 12, 5), bool]) */;
    %873 = exp(%866) /* ty=Tensor[(3, 2, 13), float32] */;
    %874 = %869.3;
    %875 = %872.2;
    (%873, %874, meta[relay.Constant][52] /* ty=Tensor[(588), float32] */, %875)
  };
  %876(%var_966) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */
}

def @func_4916(%var_4914: float64) -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) {
  @func_4913(%var_4914) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) */
}

def @func_7073(%var_7050: Tensor[(1001), float64], %var_7061: Tensor[(15, 14, 15), float32]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), float64], Tensor[(15, 14, 15), bool]) {
  %877 = cast(-2.35423f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %878 = cast(%var_7050, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %879 = reshape(%877, newshape=[]) /* ty=float64 */;
  %880 = reshape(%878, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float64] */;
  %881 = @func_4832(%879, %880) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], Tensor[(13, 12, 12), float32]) */;
  %882 = cast(meta[relay.Constant][53] /* ty=Tensor[(15, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 15), float32] */;
  %883 = asin(%882) /* ty=Tensor[(15, 14, 15), float32] */;
  %884 = cast(%var_7061, dtype="bool") /* ty=Tensor[(15, 14, 15), bool] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="bool") /* ty=Tensor[(15, 14, 15), bool] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %888 = %881.0;
  %889 = greater_equal(%886, %887) /* ty=Tensor[(15, 14, 15), bool] */;
  (%888, -2.35423f64 /* ty=float64 */, %var_7050, %889)
}

def @func_4808() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %890 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %891 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %892 = %890.0;
  %893 = %891.1;
  %894 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
  (%892, %893, %894)
}

def @func_11902(%var_11900: Tensor[(13, 14, 7), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(13, 14, 7), float32], Tensor[(13, 12, 12), float32]) {
  @func_11899(%var_11900) /* ty=(Tensor[(13, 14, 7), float32], Tensor[(13, 14, 7), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_11289() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
  %899 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) {
    %895 = @func_4095() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %896 = @func_10594() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(13, 12, 12), float32]) */;
    %897 = %895.0;
    %898 = %896.0;
    (%897, %898)
  };
  %899() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) */
}

def @func_5946(%var_5944: Tensor[(16, 12, 8), float32]) -> Tensor[(16, 12, 8), float32] {
  @func_5943(%var_5944) /* ty=Tensor[(16, 12, 8), float32] */
}

def @func_7507() -> (Tensor[(13, 12, 12), float32],) {
  %902 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %900 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %901 = %900.1;
    (%901,)
  };
  %902() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_6135() -> Tensor[(13, 12, 12), float64] {
  %904 = fn () -> Tensor[(13, 12, 12), float64] {
    %903 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
    %903.0
  };
  %904() /* ty=Tensor[(13, 12, 12), float64] */
}

def @func_7108() -> (Tensor[(13, 12, 12), float32],) {
  @func_7106() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_3914(%var_3889: Tensor[(13, 12, 12), float32], %var_3905: Tensor[(280), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(11, 11, 8), bool], Tensor[(968), uint32], Tensor[(13, 12, 12), float32], Tensor[(26, 3), float32], Tensor[(280), float32], Tensor[(13, 6), float32]) {
  %905 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %906 = %905.1;
  %907 = cast(%var_3889, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %908 = shape_of(%906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%906, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %911 = cast(meta[relay.Constant][54] /* ty=Tensor[(968), uint32] */, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %912 = cast(meta[relay.Constant][54] /* ty=Tensor[(968), uint32] */, dtype="uint32") /* ty=Tensor[(968), uint32] */;
  %913 = reshape(%911, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %914 = reshape(%912, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), uint32] */;
  %915 = @func_2521(%913, %914) /* ty=(Tensor[(11, 11, 8), bool],) */;
  %916 = cast(%var_3889, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %917 = cast(%var_3905, dtype="float32") /* ty=Tensor[(280), float32] */;
  %918 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %919 = reshape(%917, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %920 = reshape(%918, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %921 = @func_2235(%919, %920) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */;
  %922 = power(%909, %910) /* ty=Tensor[(13, 12, 12), float32] */;
  %923 = %915.0;
  %924 = sin(%916) /* ty=Tensor[(13, 12, 12), float32] */;
  %925 = %921.2;
  (%922, %923, meta[relay.Constant][54] /* ty=Tensor[(968), uint32] */, %924, %925, %var_3905, meta[relay.Constant][55] /* ty=Tensor[(13, 6), float32] */)
}

def @func_6308(%var_6304: Tensor[(1008), float64], %var_6305: Tensor[(78), float32], %var_6306: Tensor[(280), float32], %var_6307: Tensor[(98), uint64]) -> (Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) {
  @func_6302(%var_6304, %var_6305, %var_6306, %var_6307) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(6, 10, 10), float32], Tensor[(1008), float64], Tensor[(1, 600), float32], Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(280), float32], Tensor[(280), float32], Tensor[(2, 7, 7), uint64], Tensor[(98), uint64]) */
}

def @func_7411() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %931 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
    %926 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %927 = %926.0;
    %928 = cast(%927, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %929 = reshape(%928, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %930 = @func_5354(%929) /* ty=Tensor[(13, 12, 12), bool] */;
    (%927, %930)
  };
  %931() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */
}

def @func_8924() -> Tensor[(1, 600), float32] {
  @func_8922() /* ty=Tensor[(1, 600), float32] */
}

def @func_10808() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %935 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
    %932 = @func_10283() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %933 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
    %934 = %932.1;
    (%933, %934)
  };
  %935() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_6052(%var_6009: Tensor[(7, 11, 7), int32], %var_6010: Tensor[(7, 11, 7), int32], %var_6029: Tensor[(13, 12, 12), float32]) -> (Tensor[(7, 11, 7), int32], Tensor[(13, 12, 12), uint32], Tensor[(13, 12, 12), float32]) {
  %936 = cast(%var_6010, dtype="int32") /* ty=Tensor[(7, 11, 7), int32] */;
  %937 = shape_of(%var_6009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%var_6009, dtype="int32") /* ty=Tensor[(7, 11, 7), int32] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %940 = @func_4639() /* ty=Tensor[(13, 12, 12), float32] */;
  %941 = cast(%var_6029, dtype="uint32") /* ty=Tensor[(13, 12, 12), uint32] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="uint32") /* ty=Tensor[(13, 12, 12), uint32] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %945 = cast(%940, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %946 = right_shift(%938, %939) /* ty=Tensor[(7, 11, 7), int32] */;
  %947 = add(%943, %944) /* ty=Tensor[(13, 12, 12), uint32] */;
  %948 = atanh(%945) /* ty=Tensor[(13, 12, 12), float32] */;
  (%946, %947, %948)
}

def @func_12471() -> Tensor[(13, 12, 12), float32] {
  %950 = fn () -> Tensor[(13, 12, 12), float32] {
    %949 = @func_11841() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %949.0
  };
  %950() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_4064() -> (Tensor[(13, 12, 12), float32],) {
  @func_4062() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_10555() -> Tensor[(13, 12, 12), float64] {
  @func_10553() /* ty=Tensor[(13, 12, 12), float64] */
}

def @func_8745() -> Tensor[(13, 12, 12), uint16] {
  %951 = fn () -> Tensor[(13, 12, 12), uint16] {
    @func_5510() /* ty=Tensor[(13, 12, 12), uint16] */
  };
  %951() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_9927() -> (Tensor[(13, 12, 12), uint16],) {
  @func_9925() /* ty=(Tensor[(13, 12, 12), uint16],) */
}

def @func_8358() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
  %958 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) {
    %952 = @func_5802() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %953 = @func_5369() /* ty=Tensor[(13, 12, 12), float32] */;
    %954 = cast(%953, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %955 = reshape(%954, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %956 = %952.0;
    %957 = @func_5354(%955) /* ty=Tensor[(13, 12, 12), bool] */;
    (%956, %953, %957)
  };
  %958() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */
}

def @func_7695(%var_7687: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), float32],) {
  %959 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 3), float32] */;
  %960 = cast(%var_7687, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %961 = power(%959, %960) /* ty=Tensor[(3, 5, 3), float32] */;
  (%961,)
}

def @func_8922() -> Tensor[(1, 600), float32] {
  %962 = @func_5307() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1, 600), float32], Tensor[(819), float64], Tensor[(1, 600), float32]) */;
  %962.1
}

def @func_4559() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) {
  %963 = @func_4136() /* ty=Tensor[(13, 12, 12), float32] */;
  %964 = cast(%963, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %965 = @func_3752() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %966 = exp(%964) /* ty=Tensor[(13, 12, 12), float64] */;
  %967 = %965.0;
  (%966, %967)
}

def @func_13021() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(7, 4, 9), float64]) {
  %968 = @func_6774() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %969 = @func_8009() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %970 = @func_10154() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %971 = %970.0;
  %972 = cast(meta[relay.Constant][57] /* ty=Tensor[(7, 4, 9), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %973 = shape_of(%971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %974 = cast(%971, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %976 = %968.0;
  %977 = %969.0;
  %978 = mod(%974, %975) /* ty=Tensor[(7, 4, 9), float64] */;
  (%976, %977, %978)
}

def @func_3811() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %979 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %980 = @func_3723() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %981 = %979.0;
  %982 = %980.0;
  (%981, %982)
}

def @func_13587() -> (Tensor[(13, 12, 12), float32],) {
  %983 = @func_4808() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
  %984 = %983.1;
  (%984,)
}

def @func_10343() -> Tensor[(13, 12, 12), float32] {
  %986 = fn () -> Tensor[(13, 12, 12), float32] {
    %985 = @func_7410() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
    %985.0
  };
  %986() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_11596() -> (Tensor[(13, 12, 12), bool],) {
  %989 = fn () -> (Tensor[(13, 12, 12), bool],) {
    %987 = @func_8357() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), bool]) */;
    %988 = %987.2;
    (%988,)
  };
  %989() /* ty=(Tensor[(13, 12, 12), bool],) */
}

def @func_8042() -> Tensor[(13, 12, 12), float32] {
  %990 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
  %991 = %990.0;
  %992 = cast(%991, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  cosh(%992) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_8009() -> (Tensor[(13, 12, 12), float32],) {
  %993 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
  (%993,)
}

def @func_5918() -> Tensor[(13, 12, 12), float32] {
  %995 = fn () -> Tensor[(13, 12, 12), float32] {
    %994 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %994.0
  };
  %995() /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_6832() -> (Tensor[(13, 12, 12), float32],) {
  %996 = @func_5917() /* ty=Tensor[(13, 12, 12), float32] */;
  (%996,)
}

def @func_5656() -> (Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) {
  %1003 = fn () -> (Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) {
    %997 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %998 = cast(-0.663231f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %999 = reshape(%998, newshape=[]) /* ty=float64 */;
    %1000 = @func_4913(%999) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) */;
    %1001 = %997.0;
    %1002 = %1000.4;
    (%1001, %1002, -0.663231f64 /* ty=float64 */)
  };
  %1003() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(1001), float64], float64) */
}

def @func_12874() -> Tensor[(13, 12, 12), float32] {
  %1004 = @func_5977() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32], Tensor[(140, 2), float32]) */;
  %1004.0
}

def @func_11467() -> (Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float64], Tensor[(?, 600), bool]) {
  @func_11465() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float64], Tensor[(?, 600), bool]) */
}

def @func_11305() -> Tensor[(13, 12, 12), float32] {
  %1005 = @func_4559() /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32]) */;
  %1005.1
}

def @func_6456(%var_6454: bool, %var_6455: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), float32], bool, Tensor[(360), bool], Tensor[(6, 12, 5), uint32], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), int16]) {
  %1025 = fn (%var_6390: bool, %var_6391: Tensor[(360), bool]) -> (Tensor[(13, 12, 12), float32], bool, Tensor[(360), bool], Tensor[(6, 12, 5), uint32], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), int16]) {
    %1006 = cast(%var_6390, dtype="bool") /* ty=bool */;
    %1007 = cast(%var_6391, dtype="bool") /* ty=Tensor[(360), bool] */;
    %1008 = reshape(%1006, newshape=[]) /* ty=bool */;
    %1009 = reshape(%1007, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %1010 = @func_164(%1008, %1009) /* ty=Tensor[(6, 12, 5), bool] */;
    %1011 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 12, 5), bool] */, dtype="uint32") /* ty=Tensor[(6, 12, 5), uint32] */;
    %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1013 = cast(%1010, dtype="uint32") /* ty=Tensor[(6, 12, 5), uint32] */;
    %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1015 = @func_5077() /* ty=Tensor[(13, 12, 12), float32] */;
    %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %1017 = reshape(%1016, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %1018 = @func_5001(%1017) /* ty=(Tensor[(13, 12, 12), int16],) */;
    %1019 = %1018.0;
    %1020 = cast(%1019, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %1021 = reshape(%1020, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %1022 = @func_5001(%1021) /* ty=(Tensor[(13, 12, 12), int16],) */;
    %1023 = add(%1013, %1014) /* ty=Tensor[(6, 12, 5), uint32] */;
    %1024 = %1022.0;
    (%1015, %var_6390, %var_6391, %1023, %1019, %1024)
  };
  %1025(%var_6454, %var_6455) /* ty=(Tensor[(13, 12, 12), float32], bool, Tensor[(360), bool], Tensor[(6, 12, 5), uint32], Tensor[(13, 12, 12), int16], Tensor[(13, 12, 12), int16]) */
}

def @func_11028() -> (Tensor[(13, 12, 12), bool],) {
  %1026 = @func_8062() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
  %1027 = %1026.0;
  (%1027,)
}

def @func_11654() -> (Tensor[(13, 12, 12), bool],) {
  %1030 = fn () -> (Tensor[(13, 12, 12), bool],) {
    %1028 = @func_8608() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */;
    %1029 = %1028.0;
    (%1029,)
  };
  %1030() /* ty=(Tensor[(13, 12, 12), bool],) */
}

def @func_10393() -> (Tensor[(13, 12, 12), float64],) {
  %1033 = fn () -> (Tensor[(13, 12, 12), float64],) {
    %1031 = @func_6332() /* ty=(Tensor[(13, 12, 12), float64],) */;
    %1032 = %1031.0;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(13, 12, 12), float64],) */
}

def @func_11399(%var_11397: float64, %var_11398: Tensor[(1680), float64]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), bool], Tensor[(12, 10, 14), float64], Tensor[(1680), float64]) {
  %1049 = fn (%var_11366: float64, %var_11388: Tensor[(1680), float64]) -> (Tensor[(13, 12, 12), float32], float64, Tensor[(1001), bool], Tensor[(12, 10, 14), float64], Tensor[(1680), float64]) {
    %1034 = @func_9041() /* ty=(Tensor[(13, 12, 12), float32],) */;
    %1035 = cast(%var_11366, dtype="float64") /* ty=float64 */;
    %1036 = reshape(%1035, newshape=[]) /* ty=float64 */;
    %1037 = @func_4913(%1036) /* ty=(Tensor[(13, 12, 12), float64], Tensor[(13, 12, 12), float32], Tensor[(11, 7, 13), float32], float64, Tensor[(1001), float64], Tensor[(13, 12, 12), int16]) */;
    %1038 = %1037.4;
    %1039 = cast(meta[relay.Constant][59] /* ty=Tensor[(1001), float64] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1041 = cast(%1038, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1043 = cast(%var_11388, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %1044 = reshape(%1043, newshape=[12, 10, 14]) /* ty=Tensor[(12, 10, 14), float64] */;
    %1045 = @func_10129(%1044) /* ty=(Tensor[(12, 10, 14), float64],) */;
    %1046 = %1034.0;
    %1047 = greater_equal(%1041, %1042) /* ty=Tensor[(1001), bool] */;
    %1048 = %1045.0;
    (%1046, %var_11366, %1047, %1048, %var_11388)
  };
  %1049(%var_11397, %var_11398) /* ty=(Tensor[(13, 12, 12), float32], float64, Tensor[(1001), bool], Tensor[(12, 10, 14), float64], Tensor[(1680), float64]) */
}

def @func_164(%var_141: bool, %var_142: Tensor[(6, 12, 5), bool]) -> Tensor[(6, 12, 5), bool] {
  %1050 = cast(%var_141, dtype="bool") /* ty=bool */;
  %1051 = cast(%var_142, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  logical_or(%1050, %1051) /* ty=Tensor[(6, 12, 5), bool] */
}

def @func_11120() -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32]) {
  %1055 = fn () -> (Tensor[(45), float32], Tensor[(13, 12, 12), float32]) {
    %1052 = @func_9731() /* ty=(Tensor[(13, 12, 12), uint16], Tensor[(3, 5, 3), float32], Tensor[(45), float32]) */;
    %1053 = %1052.2;
    %1054 = @func_4775() /* ty=Tensor[(13, 12, 12), float32] */;
    (%1053, %1054)
  };
  %1055() /* ty=(Tensor[(45), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_6776() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  @func_6774() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */
}

def @func_11520() -> Tensor[(45), float32] {
  %1057 = fn () -> Tensor[(45), float32] {
    %1056 = @func_11119() /* ty=(Tensor[(45), float32], Tensor[(13, 12, 12), float32]) */;
    %1056.0
  };
  %1057() /* ty=Tensor[(45), float32] */
}

def @func_10186(%var_10184: Tensor[(12, 4, 11), float32]) -> (Tensor[(12, 4, 11), float32], Tensor[(12, 4, 11), float32]) {
  @func_10183(%var_10184) /* ty=(Tensor[(12, 4, 11), float32], Tensor[(12, 4, 11), float32]) */
}

def @func_9557() -> (Tensor[(13, 12, 12), float32],) {
  @func_9555() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_11500() -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) {
  %1058 = @func_11288() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), uint16]) */;
  %1059 = @func_9593() /* ty=(Tensor[(13, 12, 12), float32],) */;
  %1060 = %1058.0;
  %1061 = %1059.0;
  (%1060, %1061)
}

def @func_8022() -> (Tensor[(13, 12, 12), float32],) {
  %1064 = fn () -> (Tensor[(13, 12, 12), float32],) {
    %1062 = @func_3811() /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float32]) */;
    %1063 = %1062.0;
    (%1063,)
  };
  %1064() /* ty=(Tensor[(13, 12, 12), float32],) */
}

def @func_8814() -> Tensor[(13, 12, 12), uint16] {
  @func_8812() /* ty=Tensor[(13, 12, 12), uint16] */
}

def @func_5357(%var_5355: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), bool] {
  @func_5354(%var_5355) /* ty=Tensor[(13, 12, 12), bool] */
}

def @func_2238(%var_2236: Tensor[(14, 5, 4), float32], %var_2237: Tensor[(26, 3), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) {
  %1071 = fn (%var_2203: Tensor[(14, 5, 4), float32], %var_2220: Tensor[(26, 3), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) {
    %1065 = cast(%var_2203, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
    %1066 = cast(%var_2220, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
    %1067 = reshape(%1066, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
    %1068 = @func_965(%1067) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(360), bool], Tensor[(588), float32], bool) */;
    %1069 = sinh(%1065) /* ty=Tensor[(14, 5, 4), float32] */;
    %1070 = %1068.2;
    (%1069, %1070, %var_2220)
  };
  %1071(%var_2236, %var_2237) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(588), float32], Tensor[(26, 3), float32]) */
}

def @func_8063() -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
  %1077 = fn () -> (Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) {
    %1072 = @func_5494() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), bool]) */;
    %1073 = %1072.1;
    %1074 = cast(%1073, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
    %1075 = reshape(%1074, newshape=[13, 12, 12]) /* ty=Tensor[(13, 12, 12), float32] */;
    %1076 = @func_4180(%1075) /* ty=Tensor[(13, 12, 12), float32] */;
    (%1073, %1076)
  };
  %1077() /* ty=(Tensor[(13, 12, 12), bool], Tensor[(13, 12, 12), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen516/build/output.py", line 3518, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:27:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

