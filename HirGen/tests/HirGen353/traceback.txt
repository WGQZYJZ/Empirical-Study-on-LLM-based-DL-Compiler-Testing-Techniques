==========mod==========
#[version = "0.0.5"]
def @func_8046(%var_8036: Tensor[(11, 5, 1100), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(90), bool], Tensor[(189), float64], Tensor[(11, 5, 1100), float32]) {
  %0 = @func_4316() /* ty=(Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %2 = reshape(%1, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %3 = @func_6236(%2) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) */;
  %4 = %3.2;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(189), float64] */;
  %6 = @func_7564() /* ty=(Tensor[(11, 5, 1100), bool],) */;
  %7 = %6.0;
  %8 = cast(%var_8036, dtype="float32") /* ty=Tensor[(11, 5, 1100), float32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="float32") /* ty=Tensor[(11, 5, 1100), float32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %12 = %0.1;
  %13 = sqrt(%5) /* ty=Tensor[(189), float64] */;
  %14 = power(%10, %11) /* ty=Tensor[(11, 5, 1100), float32] */;
  (%12, meta[relay.Constant][0] /* ty=Tensor[(90), bool] */, %13, %14)
}

def @func_1646() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %15 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %16 = %15.0;
  %17 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  (%16, %17)
}

def @func_3927(%var_3919: Tensor[(10, 11, 10), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
  %19 = reshape(%18, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %20 = @func_333(%19) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %21 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %22 = %21.1;
  %23 = cast(%var_3919, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %27 = %20.0;
  %28 = greater_equal(%25, %26) /* ty=Tensor[(10, 11, 10), bool] */;
  (%27, meta[relay.Constant][1] /* ty=Tensor[(392), int32] */, %28)
}

def @func_2225(%var_2208: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) {
  %29 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %30 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %31 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %32 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %33 = %32.2;
  %34 = cast(%var_2208, dtype="float32") /* ty=Tensor[(189), float32] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(1), int32] */;
  %36 = cast(%33, dtype="float32") /* ty=Tensor[(189), float32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?), float32] */;
  %38 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %39 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %40 = %29.3;
  %41 = %30.0;
  %42 = %31.0;
  %43 = floor_divide(%36, %37) /* ty=Tensor[(189), float32] */;
  %44 = %38.0;
  (%39, %40, %41, %42, %43, %44)
}

def @func_5889() -> Tensor[(392), int32] {
  %45 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %45.0
}

def @func_3483(%var_3446: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %46 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %47 = %46.0;
  %48 = cast(%var_3446, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %52 = minimum(%50, %51) /* ty=Tensor[(10, 11, 10), int16] */;
  %53 = @func_2078() /* ty=Tensor[(10, 11, 10), float64] */;
  %54 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  (%52, %53, %54)
}

def @func_6110() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %55 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %56 = %55.4;
  %57 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  (%56, %57)
}

def @func_5647() -> (Tensor[(3, 7, 9), float64],) {
  %58 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %59 = %58.6;
  (%59,)
}

def @func_5183() -> Tensor[(392), int32] {
  %60 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %60.1
}

def @func_333(%var_321: Tensor[(2, 14, 14), int32]) -> (Tensor[(2, 14, 14), float64],) {
  %61 = cast(3 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %62 = cast(%var_321, dtype="bool") /* ty=Tensor[(2, 14, 14), bool] */;
  %63 = not_equal(%61, %62) /* ty=Tensor[(2, 14, 14), bool] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(2, 14, 14), float64] */;
  %65 = sinh(%64) /* ty=Tensor[(2, 14, 14), float64] */;
  (%65,)
}

def @func_1023(%var_1007: Tensor[(135), int32], %var_1020: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) {
  %66 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
  %67 = cast(%var_1007, dtype="int32") /* ty=Tensor[(135), int32] */;
  %68 = reshape(%67, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), int32] */;
  %69 = cast(%var_1020, dtype="float32") /* ty=Tensor[(189), float32] */;
  %70 = reshape(%69, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %71 = @func_160(%70) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %72 = %66.1;
  %73 = @func_714(%68) /* ty=Tensor[(3, 3, 15), int32] */;
  %74 = %71.0;
  (%72, %73, %var_1007, %74, %var_1020)
}

def @func_6942(%var_6900: Tensor[(15, 13, 7), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(15, 13, 7), float32]) {
  %75 = cast(%var_6900, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %76 = exp(%75) /* ty=Tensor[(15, 13, 7), float64] */;
  %77 = cast(%var_6900, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %81 = bitwise_xor(%79, %80) /* ty=Tensor[(15, 13, 7), int8] */;
  %82 = cast(%76, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %86 = add(%84, %85) /* ty=Tensor[(15, 13, 7), int8] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %88 = shape_of(%var_6900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_6900, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %91 = @func_5955() /* ty=Tensor[(10, 11, 10), float32] */;
  %92 = mod(%89, %90) /* ty=Tensor[(15, 13, 7), float32] */;
  (%91, %92)
}

def @func_7399(%var_7345: Tensor[(5, 3, 7), float32], %var_7346: Tensor[(5, 3, 7), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(5, 3, 7), float32], Tensor[(5, 3, 7), bool]) {
  %93 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
  %94 = cast(%var_7346, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %95 = shape_of(%var_7345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_7345, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %98 = power(%96, %97) /* ty=Tensor[(5, 3, 7), float32] */;
  %99 = cast(%var_7346, dtype="uint8") /* ty=Tensor[(5, 3, 7), uint8] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="uint8") /* ty=Tensor[(5, 3, 7), uint8] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %103 = subtract(%101, %102) /* ty=Tensor[(5, 3, 7), uint8] */;
  %104 = cast(%var_7346, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %108 = cast(%103, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %109 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%98, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = %93.1;
  %113 = floor_divide(%106, %107) /* ty=Tensor[(5, 3, 7), float32] */;
  %114 = less_equal(%110, %111) /* ty=Tensor[(5, 3, 7), bool] */;
  (%112, %113, %114)
}

def @main(%var_8096: Tensor[(7, 1, 4), float64], %var_8115: Tensor[(7, 10, 4), float64]) -> (Tensor[(10, 11, 10), float64], Tensor[(7, 10, 4), float64]) {
  %115 = cast(%var_8096, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
  %116 = rsqrt(%115) /* ty=Tensor[(7, 1, 4), float64] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
  %118 = cast(%var_8115, dtype="float64") /* ty=Tensor[(7, 10, 4), float64] */;
  %119 = @func_4625() /* ty=Tensor[(10, 11, 10), float64] */;
  %120 = multiply(%117, %118) /* ty=Tensor[(7, 10, 4), float64] */;
  (%119, %120)
}

def @func_4220() -> (uint64,) {
  %121 = @func_3734() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) */;
  %122 = %121.2;
  (%122,)
}

def @func_5059() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %123 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %124 = %123.1;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %126 = reshape(%125, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %127 = @func_3927(%126) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %128 = %127.1;
  (%124, %128)
}

def @func_7319(%var_7297: Tensor[(4, 14, 13), bool], %var_7298: Tensor[(4, 14, 13), bool]) -> (Tensor[(4, 14, 13), bool], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(189), float32]) {
  %129 = cast(%var_7298, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %130 = shape_of(%var_7297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_7297, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %133 = cast(meta[relay.Constant][2] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %134 = cast(meta[relay.Constant][3] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %135 = reshape(%133, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %136 = reshape(%134, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %137 = @func_1023(%135, %136) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) */;
  %138 = logical_or(%131, %132) /* ty=Tensor[(4, 14, 13), bool] */;
  %139 = %137.1;
  (%138, %139, meta[relay.Constant][2] /* ty=Tensor[(135), int32] */, meta[relay.Constant][3] /* ty=Tensor[(189), float32] */)
}

def @func_5240() -> Tensor[(10, 11, 10), bool] {
  %140 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %140.1
}

def @func_6539() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) {
  %141 = @func_6146() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */;
  %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(392, 1), int32] */, dtype="int32") /* ty=Tensor[(392, 1), int32] */;
  %143 = reshape(%142, newshape=[392]) /* ty=Tensor[(392), int32] */;
  %144 = @func_3544(%143) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %145 = %141.0;
  %146 = %144.1;
  (%145, %146, meta[relay.Constant][4] /* ty=Tensor[(392, 1), int32] */)
}

def @func_7781() -> (Tensor[(10, 11, 10), float64], Tensor[(1100), float64]) {
  %147 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %148 = %147.7;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %150 = reshape(%149, newshape=[1100]) /* ty=Tensor[(1100), float64] */;
  %151 = @func_5167(%150) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) */;
  %152 = %151.1;
  (%148, %152)
}

def @func_6484() -> (Tensor[(10, 14, 9), float32],) {
  %153 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %154 = %153.1;
  (%154,)
}

def @func_4535(%var_4528: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int32],) {
  %155 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %156 = %155.0;
  %157 = cast(%var_4528, dtype="int32") /* ty=Tensor[(10, 11, 10), int32] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="int32") /* ty=Tensor[(10, 11, 10), int32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %161 = left_shift(%159, %160) /* ty=Tensor[(10, 11, 10), int32] */;
  (%161,)
}

def @func_4158(%var_4111: Tensor[(6, 13, 8), float32], %var_4115: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(6, 13, 8), float64]) {
  %162 = cast(%var_4115, dtype="float32") /* ty=Tensor[(189), float32] */;
  %163 = reshape(%162, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %164 = @func_2225(%163) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) */;
  %165 = cast(%var_4111, dtype="float32") /* ty=Tensor[(6, 13, 8), float32] */;
  %166 = sigmoid(%165) /* ty=Tensor[(6, 13, 8), float32] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(6, 13, 8), float64] */;
  %168 = %164.3;
  %169 = @func_2433() /* ty=Tensor[(10, 11, 10), float32] */;
  %170 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  %171 = log(%167) /* ty=Tensor[(6, 13, 8), float64] */;
  (%168, %var_4115, %169, %170, %171)
}

def @func_7564() -> (Tensor[(11, 5, 1100), bool],) {
  %172 = @func_7043() /* ty=(Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) */;
  %173 = %172.1;
  %174 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1100), float64] */, dtype="float64") /* ty=Tensor[(1, 1100), float64] */;
  %175 = reshape(%174, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %176 = @func_4535(%175) /* ty=(Tensor[(10, 11, 10), int32],) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %179 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(1, 1100), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %180 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1100), float64] */, dtype="float64") /* ty=Tensor[(1, 1100), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %182 = power(%180, %181) /* ty=Tensor[(?, 1100), float64] */;
  %183 = cast(%173, dtype="bool") /* ty=Tensor[(11, 5, 1), bool] */;
  %184 = cast(%182, dtype="bool") /* ty=Tensor[(?, 1100), bool] */;
  %185 = less(%183, %184) /* ty=Tensor[(11, 5, 1100), bool] */;
  (%185,)
}

def @func_2156() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) {
  %186 = @func_2109() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %187 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %188 = %186.0;
  %189 = %187.1;
  (%188, %189)
}

def @func_4393() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4933() -> (Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
  %190 = @func_4044() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) */;
  %191 = %190.2;
  %192 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  (%191, %192)
}

def @func_2380() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %193 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %194 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %195 = %193.0;
  %196 = %194.1;
  (%195, %196)
}

def @func_6439() -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32]) {
  %197 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %198 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %199 = %197.1;
  %200 = %198.3;
  (%199, %200)
}

def @func_6146() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
  %201 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
  %202 = @func_4905() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */;
  %203 = %201.0;
  %204 = %202.1;
  (%203, %204)
}

def @func_5805() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) {
  %205 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %206 = %205.0;
  %207 = @func_4202() /* ty=Tensor[(10, 14, 9), float32] */;
  %208 = @func_5183() /* ty=Tensor[(392), int32] */;
  (%206, %207, %208)
}

def @func_7811(%var_7790: Tensor[(6, 8, 14), int16], %var_7791: Tensor[(6, 8, 14), int16]) -> (Tensor[(6, 8, 14), int16], Tensor[(10, 11, 10), float64]) {
  %209 = cast(%var_7791, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %210 = shape_of(%var_7790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_7790, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = logical_xor(%211, %212) /* ty=Tensor[(6, 8, 14), int16] */;
  %214 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  (%213, %214)
}

def @func_7761() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %215 = @func_6987() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %218 = reshape(%217, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %219 = @func_6394(%218) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) */;
  %220 = @func_6801() /* ty=Tensor[(10, 11, 10), float64] */;
  %221 = %219.1;
  (%216, %220, %221)
}

def @func_246(%var_233: Tensor[(1, 189), float32], %var_240: Tensor[(10, 14, 9), float64]) -> (Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) {
  %222 = cast(%var_233, dtype="float32") /* ty=Tensor[(1, 189), float32] */;
  %223 = reshape(%222, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %224 = @func_160(%223) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %225 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %226 = cosh(%225) /* ty=Tensor[(10, 14, 9), float64] */;
  %227 = cast(%var_240, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %231 = %224.1;
  %232 = divide(%229, %230) /* ty=Tensor[(10, 14, 9), float32] */;
  (%231, %var_233, %232)
}

def @func_6236(%var_6189: Tensor[(90), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) {
  %233 = cast(meta[relay.Constant][7] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %234 = cast(meta[relay.Constant][8] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %235 = reshape(%233, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %236 = reshape(%234, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %237 = @func_246(%235, %236) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %238 = cast(%var_6189, dtype="bool") /* ty=Tensor[(90), bool] */;
  %239 = reshape(%238, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), bool] */;
  %240 = @func_4703(%239) /* ty=(Tensor[(2, 15, 3), uint16],) */;
  %241 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 28), float32] */, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %242 = reshape(%241, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
  %243 = @func_4023(%242) /* ty=(Tensor[(14, 2, 14), float32],) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
  %246 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(14, 28), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %247 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 28), float32] */, dtype="uint32") /* ty=Tensor[(14, 28), uint32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %249 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %250 = %249.2;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
  %252 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %253 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %254 = %237.0;
  %255 = %240.0;
  %256 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %257 = add(%247, %248) /* ty=Tensor[(14, 28), uint32] */;
  %258 = acos(%251) /* ty=Tensor[(189, 9), float64] */;
  %259 = %252.2;
  (%253, %254, meta[relay.Constant][7] /* ty=Tensor[(189), float32] */, meta[relay.Constant][8] /* ty=Tensor[(1260), float64] */, %255, %var_6189, %256, %257, %258, %259)
}

def @func_6716() -> Tensor[(320), float32] {
  %260 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %260.3
}

def @func_4107() -> (Tensor[(2, 15, 3), bool],) {
  %261 = cast(meta[relay.Constant][10] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 15, 3), uint8] */, dtype="bool") /* ty=Tensor[(2, 15, 3), bool] */;
  %263 = not_equal(%261, %262) /* ty=Tensor[(2, 15, 3), bool] */;
  (%263,)
}

def @func_3145() -> Tensor[(10, 11, 10), bool] {
  %264 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %264.1
}

def @func_7525() -> Tensor[(10, 11, 10), float64] {
  %265 = @func_4825() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) */;
  %265.4
}

def @func_3597() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %266 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %269 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %270 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  %271 = log10(%268) /* ty=Tensor[(10, 11, 10), float64] */;
  %272 = %269.1;
  (%270, %271, %272)
}

def @func_4291(%var_4285: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), float64],) {
  %273 = cast(%var_4285, dtype="float64") /* ty=Tensor[(10, 11, 16), float64] */;
  %274 = acos(%273) /* ty=Tensor[(10, 11, 16), float64] */;
  (%274,)
}

def @func_6468(%var_6459: Tensor[(392), int32]) -> (Tensor[(392), int32], Tensor[(392), uint8]) {
  %275 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %276 = %275.1;
  %277 = cast(%var_6459, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(%276, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %281 = @func_5183() /* ty=Tensor[(392), int32] */;
  %282 = subtract(%279, %280) /* ty=Tensor[(392), uint8] */;
  (%281, %282)
}

def @func_455(%var_394: Tensor[(3, 9, 1), uint8], %var_395: Tensor[(3, 9, 7), uint8], %var_403: Tensor[(1, 256), float64], %var_446: Tensor[(9, 140), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) {
  %283 = cast(%var_394, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
  %284 = cast(%var_395, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %285 = cast(%var_403, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %286 = reshape(%285, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
  %287 = @func_387(%286) /* ty=(Tensor[(8, 4, 8), bool],) */;
  %288 = cast(%var_403, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
  %289 = cast(%var_395, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %290 = reshape(%289, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %291 = @func_160(%290) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(3, 7, 9), float32] */;
  %294 = cast(%var_446, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %295 = reshape(%293, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %296 = reshape(%294, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %297 = @func_246(%295, %296) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %298 = cast(%var_403, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %299 = reshape(%298, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
  %300 = @func_387(%299) /* ty=(Tensor[(8, 4, 8), bool],) */;
  %301 = greater_equal(%283, %284) /* ty=Tensor[(3, 9, 7), bool] */;
  %302 = %287.0;
  %303 = atan(%288) /* ty=Tensor[(1, 256), float32] */;
  %304 = %297.2;
  %305 = %300.0;
  (%301, %302, %303, %292, %304, %var_446, %305)
}

def @func_3734() -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) {
  %306 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %307 = cast(meta[relay.Constant][12] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %308 = cast(meta[relay.Constant][13] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %309 = reshape(%307, newshape=[]) /* ty=uint64 */;
  %310 = reshape(%308, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), uint64] */;
  %311 = @func_2513(%309, %310) /* ty=(Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) */;
  %312 = %306.1;
  %313 = %311.1;
  %314 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  (%312, %313, meta[relay.Constant][12] /* ty=uint64 */, meta[relay.Constant][13] /* ty=Tensor[(273), uint64] */, %314)
}

def @func_1779() -> Tensor[(10, 11, 10), float64] {
  %315 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %315.0
}

def @func_1065() -> Tensor[(10, 11, 10), float64] {
  %316 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %316.0
}

def @func_4500(%var_4463: Tensor[(10, 14, 8), uint64], %var_4464: Tensor[(10, 14, 8), uint64], %var_4484: Tensor[(10, 14, 8), uint64]) -> (Tensor[(10, 14, 8), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 14, 8), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %317 = cast(%var_4464, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %318 = shape_of(%var_4463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_4463, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(%var_4484, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %322 = shape_of(%var_4463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_4463, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %325 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %326 = greater_equal(%319, %320) /* ty=Tensor[(10, 14, 8), bool] */;
  %327 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  %328 = power(%323, %324) /* ty=Tensor[(10, 14, 8), float64] */;
  %329 = %325.2;
  %330 = @func_4393() /* ty=Tensor[(10, 11, 10), float64] */;
  (%326, %327, %328, %329, %330)
}

def @func_2109() -> (Tensor[(10, 11, 10), float32],) {
  %331 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
  %332 = %331.1;
  (%332,)
}

def @func_4414() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4044() -> (Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) {
  %333 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
  %335 = reshape(%334, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %336 = @func_333(%335) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %337 = %333.0;
  %338 = %336.0;
  (%337, %338, meta[relay.Constant][14] /* ty=Tensor[(392), int32] */)
}

def @func_4784() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) {
  %339 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %340 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %341 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 63), float32] */, dtype="float32") /* ty=Tensor[(3, 63), float32] */;
  %342 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 63), float32] */, dtype="float32") /* ty=Tensor[(3, 63), float32] */;
  %343 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %344 = reshape(%340, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %345 = reshape(%341, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %346 = reshape(%342, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %347 = reshape(%343, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float64] */;
  %348 = @func_2030(%344, %345, %346, %347) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) */;
  %349 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  %350 = %339.2;
  %351 = %348.4;
  (%349, %350, %351, meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, meta[relay.Constant][16] /* ty=Tensor[(3, 63), float32] */)
}

def @func_3544(%var_3511: Tensor[(392), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %352 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %353 = cast(%var_3511, dtype="int32") /* ty=Tensor[(392), int32] */;
  %354 = reshape(%353, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %355 = @func_1175(%354) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %356 = %352.0;
  %357 = %355.1;
  (%356, %357, %var_3511)
}

def @func_5613(%var_5576: Tensor[(1, 273), uint64], %var_5592: Tensor[(1760), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), bool], uint64, Tensor[(1, 273), uint64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 16), float64], Tensor[(1760), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float32]) {
  %358 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %359 = cast(%var_5576, dtype="uint64") /* ty=Tensor[(1, 273), uint64] */;
  %360 = reshape(%358, newshape=[]) /* ty=uint64 */;
  %361 = reshape(%359, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), uint64] */;
  %362 = @func_2513(%360, %361) /* ty=(Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) */;
  %363 = cast(%var_5592, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %364 = reshape(%363, newshape=[10, 11, 16]) /* ty=Tensor[(10, 11, 16), float64] */;
  %365 = @func_4291(%364) /* ty=(Tensor[(10, 11, 16), float64],) */;
  %366 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %367 = @func_4044() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) */;
  %368 = @func_5073() /* ty=Tensor[(10, 11, 10), float32] */;
  %369 = %362.0;
  %370 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %371 = %365.0;
  %372 = %366.1;
  %373 = %367.0;
  (%368, %369, meta[relay.Constant][17] /* ty=uint64 */, %var_5576, %370, %371, %var_5592, %372, %373)
}

def @func_5122() -> Tensor[(10, 11, 10), float64] {
  @func_1065() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_5846(%var_5813: int8, %var_5814: Tensor[(11, 1, 12), int8]) -> (Tensor[(11, 1, 12), int8], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %374 = cast(%var_5813, dtype="int8") /* ty=int8 */;
  %375 = cast(%var_5814, dtype="int8") /* ty=Tensor[(11, 1, 12), int8] */;
  %376 = @func_5805() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) */;
  %377 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %378 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %379 = right_shift(%374, %375) /* ty=Tensor[(11, 1, 12), int8] */;
  %380 = %376.2;
  %381 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %382 = %377.0;
  %383 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  %384 = %378.3;
  (%379, %380, %381, %382, %383, %384)
}

def @func_7263(%var_7232: Tensor[(7, 9, 6), uint32], %var_7233: Tensor[(7, 9, 6), uint32], %var_7256: Tensor[(7, 9, 6), uint32]) -> (Tensor[(7, 9, 6), bool], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(7, 9, 6), uint8]) {
  %385 = cast(%var_7233, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %386 = shape_of(%var_7232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_7232, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %389 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %390 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %391 = cast(%var_7256, dtype="uint8") /* ty=Tensor[(7, 9, 6), uint8] */;
  %392 = shape_of(%var_7232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_7232, dtype="uint8") /* ty=Tensor[(7, 9, 6), uint8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %395 = greater_equal(%387, %388) /* ty=Tensor[(7, 9, 6), bool] */;
  %396 = %389.1;
  %397 = %390.0;
  %398 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %399 = add(%393, %394) /* ty=Tensor[(7, 9, 6), uint8] */;
  (%395, %396, %397, %398, %399)
}

def @func_1932() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %400 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %403 = sin(%402) /* ty=Tensor[(10, 11, 10), float32] */;
  %404 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %406 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%403, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %409 = cast(meta[relay.Constant][18] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
  %410 = reshape(%409, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %411 = @func_1175(%410) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %412 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %413 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %414 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %415 = power(%407, %408) /* ty=Tensor[(10, 11, 10), float64] */;
  %416 = %411.3;
  %417 = %412.1;
  %418 = %413.0;
  (%414, %415, %416, meta[relay.Constant][18] /* ty=Tensor[(392), int32] */, %417, %418)
}

def @func_5340(%var_5266: Tensor[(10, 14, 9), float32], %var_5293: Tensor[(189), uint8], %var_5307: Tensor[(90), bool]) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(8, 4, 8), float32], Tensor[(189), uint8], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float64]) {
  %419 = @func_4202() /* ty=Tensor[(10, 14, 9), float32] */;
  %420 = cast(%var_5266, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %424 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %425 = cast(%var_5293, dtype="uint8") /* ty=Tensor[(189), uint8] */;
  %426 = reshape(%425, newshape=[189]) /* ty=Tensor[(189), uint8] */;
  %427 = @func_3419(%426) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) */;
  %428 = cast(%var_5307, dtype="bool") /* ty=Tensor[(90), bool] */;
  %429 = reshape(%428, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), bool] */;
  %430 = @func_4703(%429) /* ty=(Tensor[(2, 15, 3), uint16],) */;
  %431 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %432 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %433 = mod(%422, %423) /* ty=Tensor[(10, 14, 9), float64] */;
  %434 = %424.0;
  %435 = %427.4;
  %436 = %430.0;
  %437 = %431.3;
  %438 = %432.0;
  (%433, %434, %435, %var_5293, %436, %var_5307, %437, %438)
}

def @func_4726(%var_4707: Tensor[(13, 14, 7), int8], %var_4708: Tensor[(13, 14, 7), int8]) -> (Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) {
  %439 = cast(%var_4708, dtype="int8") /* ty=Tensor[(13, 14, 7), int8] */;
  %440 = shape_of(%var_4707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_4707, dtype="int8") /* ty=Tensor[(13, 14, 7), int8] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %443 = cast(%var_4708, dtype="float64") /* ty=Tensor[(13, 14, 7), float64] */;
  %444 = right_shift(%441, %442) /* ty=Tensor[(13, 14, 7), int8] */;
  %445 = sin(%443) /* ty=Tensor[(13, 14, 7), float64] */;
  (%444, %445)
}

def @func_4023(%var_4017: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32],) {
  %446 = cast(%var_4017, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %447 = exp(%446) /* ty=Tensor[(14, 2, 14), float32] */;
  (%447,)
}

def @func_6394(%var_6342: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) {
  %448 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %449 = cast(%var_6342, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %454 = %453.0;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %456 = reshape(%455, newshape=[1100]) /* ty=Tensor[(1100), float64] */;
  %457 = @func_5167(%456) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) */;
  %458 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %459 = %458.2;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
  %461 = floor_divide(%451, %452) /* ty=Tensor[(10, 11, 10), float64] */;
  %462 = %457.1;
  %463 = log10(%460) /* ty=Tensor[(189, 9), float64] */;
  (%461, %454, %462, %463)
}

def @func_7829() -> (Tensor[(2, 15, 3), bool],) {
  %464 = @func_4230() /* ty=(Tensor[(2, 15, 3), bool],) */;
  %465 = %464.0;
  (%465,)
}

def @func_3682() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %466 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %467 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
  %468 = %466.0;
  %469 = %467.1;
  (%468, %469)
}

def @func_7845() -> (Tensor[(10, 11, 10), float64],) {
  %470 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %471 = %470.0;
  (%471,)
}

def @func_6884() -> Tensor[(10, 11, 10), float64] {
  %472 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %472.0
}

def @func_7043() -> (Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) {
  %473 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %474 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %475 = rsqrt(%473) /* ty=Tensor[(11, 5, 1), float32] */;
  %476 = acosh(%474) /* ty=Tensor[(11, 5, 1), float32] */;
  (%475, %476)
}

def @func_878() -> (Tensor[(10, 11, 10), float64],) {
  %477 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %478 = %477.0;
  (%478,)
}

def @func_7608() -> (Tensor[(10, 11, 10), float64],) {
  %479 = @func_6884() /* ty=Tensor[(10, 11, 10), float64] */;
  (%479,)
}

def @func_5167(%var_5145: Tensor[(1100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) {
  %480 = cast(%var_5145, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %481 = reshape(%480, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %482 = @func_3927(%481) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %483 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %484 = %483.1;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %486 = %482.0;
  %487 = sqrt(%485) /* ty=Tensor[(10, 14, 9), float32] */;
  (%486, %var_5145, %487)
}

def @func_3841() -> (Tensor[(10, 11, 10), float32],) {
  %488 = @func_2433() /* ty=Tensor[(10, 11, 10), float32] */;
  (%488,)
}

def @func_865() -> (Tensor[(10, 11, 10), float64],) {
  %489 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  (%489,)
}

def @func_2300(%var_2267: Tensor[(7, 3, 5), uint8], %var_2268: Tensor[(7, 3, 5), uint8]) -> (Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) {
  %490 = cast(%var_2268, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %491 = shape_of(%var_2267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_2267, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %495 = %494.1;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %497 = greater_equal(%492, %493) /* ty=Tensor[(7, 3, 5), bool] */;
  %498 = asinh(%496) /* ty=Tensor[(10, 11, 10), float32] */;
  (%497, %498)
}

def @func_2421(%var_2408: Tensor[(189, 1), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) {
  %499 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %500 = cast(%var_2408, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %501 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %502 = reshape(%500, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %503 = reshape(%501, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %504 = @func_246(%502, %503) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %505 = cast(%var_2408, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %506 = reshape(%505, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %507 = @func_2225(%506) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) */;
  %508 = %499.1;
  %509 = %504.1;
  %510 = %507.5;
  (%508, %509, %var_2408, meta[relay.Constant][20] /* ty=Tensor[(1260), float64] */, %510)
}

def @func_4703(%var_4685: Tensor[(2, 15, 3), bool]) -> (Tensor[(2, 15, 3), uint16],) {
  %511 = @func_4230() /* ty=(Tensor[(2, 15, 3), bool],) */;
  %512 = %511.0;
  %513 = cast(%var_4685, dtype="uint16") /* ty=Tensor[(2, 15, 3), uint16] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="uint16") /* ty=Tensor[(2, 15, 3), uint16] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %517 = right_shift(%515, %516) /* ty=Tensor[(2, 15, 3), uint16] */;
  (%517,)
}

def @func_963() -> (Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) {
  %518 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %519 = %518.0;
  %520 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 11, 10), float64] */, dtype="uint8") /* ty=Tensor[(10, 11, 10), uint8] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="uint8") /* ty=Tensor[(10, 11, 10), uint8] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %524 = cast(%519, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %525 = right_shift(%522, %523) /* ty=Tensor[(10, 11, 10), uint8] */;
  %526 = sqrt(%524) /* ty=Tensor[(10, 11, 10), float32] */;
  (%525, %526)
}

def @func_3193(%var_3172: Tensor[(10, 11, 10), bool]) -> (Tensor[(10, 11, 10), bool],) {
  %527 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %528 = %527.1;
  %529 = cast(%var_3172, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = logical_or(%531, %532) /* ty=Tensor[(10, 11, 10), bool] */;
  (%533,)
}

def @func_5093(%var_5087: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float32],) {
  %534 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %535 = cast(%var_5087, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %539 = mod(%537, %538) /* ty=Tensor[(10, 11, 10), float32] */;
  (%539,)
}

def @func_3810() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) {
  %540 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %543 = reshape(%542, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), bool] */;
  %544 = @func_3193(%543) /* ty=(Tensor[(10, 11, 10), bool],) */;
  %545 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %546 = reshape(%545, newshape=[1, 105]) /* ty=Tensor[(1, 105), uint8] */;
  %547 = @func_3005(%546) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) */;
  %548 = %544.0;
  %549 = cast(%548, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %550 = reshape(%549, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), bool] */;
  %551 = @func_3193(%550) /* ty=(Tensor[(10, 11, 10), bool],) */;
  %552 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %553 = %547.1;
  %554 = %551.0;
  (%541, %552, %548, %553, meta[relay.Constant][22] /* ty=Tensor[(105), uint8] */, %554)
}

def @func_1747() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) {
  %555 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %557 = cast(meta[relay.Constant][23] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %558 = cast(meta[relay.Constant][24] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %559 = reshape(%557, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %560 = reshape(%558, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %561 = @func_246(%559, %560) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %562 = tan(%556) /* ty=Tensor[(10, 11, 10), float64] */;
  %563 = %561.2;
  (%562, %563, meta[relay.Constant][23] /* ty=Tensor[(189), float32] */, meta[relay.Constant][24] /* ty=Tensor[(1260), float64] */)
}

def @func_4905() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
  %564 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
  %565 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %566 = %564.0;
  %567 = %565.1;
  (%566, %567)
}

def @func_4358(%var_4318: Tensor[(1, 13, 12), uint32], %var_4319: Tensor[(13, 13, 12), uint32], %var_4334: Tensor[(392), int32]) -> (Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %568 = cast(%var_4318, dtype="uint32") /* ty=Tensor[(1, 13, 12), uint32] */;
  %569 = cast(%var_4319, dtype="uint32") /* ty=Tensor[(13, 13, 12), uint32] */;
  %570 = cast(%var_4334, dtype="int32") /* ty=Tensor[(392), int32] */;
  %571 = reshape(%570, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %572 = @func_1175(%571) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %573 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %574 = @func_3734() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) */;
  %575 = multiply(%568, %569) /* ty=Tensor[(13, 13, 12), uint32] */;
  %576 = %572.1;
  %577 = %573.1;
  %578 = %574.0;
  (%575, %576, %var_4334, %577, %578)
}

def @func_387(%var_360: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
  %579 = cast(%var_360, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %580 = log10(%579) /* ty=Tensor[(8, 4, 8), float64] */;
  %581 = cast(%var_360, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = greater(%583, %584) /* ty=Tensor[(8, 4, 8), bool] */;
  (%585,)
}

def @func_1759() -> (Tensor[(10, 11, 10), float32],) {
  %586 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %587 = %586.1;
  (%587,)
}

def @func_7924() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %588 = @func_6539() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) */;
  %589 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %590 = %588.1;
  %591 = %589.0;
  (%590, %591)
}

def @func_6987() -> (Tensor[(10, 11, 10), float32],) {
  %592 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %593 = %592.0;
  %594 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%593, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %598 = divide(%596, %597) /* ty=Tensor[(10, 11, 10), float32] */;
  (%598,)
}

def @func_4316() -> (Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
  %599 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %600 = erf(%599) /* ty=Tensor[(5, 10, 15), float64] */;
  %601 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  (%600, %601)
}

def @func_1099() -> Tensor[(10, 11, 10), float64] {
  @func_676() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_5945() -> (Tensor[(10, 11, 10), float64],) {
  %602 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %604 = acos(%603) /* ty=Tensor[(10, 11, 10), float32] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %606 = exp(%605) /* ty=Tensor[(10, 11, 10), float64] */;
  (%606,)
}

def @func_7944() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_1616() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %607 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %609 = cast(%607, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %610 = atanh(%609) /* ty=Tensor[(10, 11, 10), float64] */;
  %611 = cast(%607, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = not_equal(%613, %614) /* ty=Tensor[(10, 11, 10), bool] */;
  %616 = cast(%610, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = sinh(%608) /* ty=Tensor[(10, 11, 10), float64] */;
  %621 = less(%618, %619) /* ty=Tensor[(10, 11, 10), bool] */;
  (%620, %621)
}

def @func_1826() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %622 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %623 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %624 = %623.0;
  %625 = cast(%624, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %626 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%622, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %630 = greater(%627, %628) /* ty=Tensor[(10, 11, 10), bool] */;
  (%629, %630)
}

def @func_815() -> (Tensor[(10, 11, 10), float64],) {
  %631 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  (%631,)
}

def @func_6509(%var_6496: Tensor[(1274), int8]) -> (Tensor[(10, 11, 10), float64], Tensor[(13, 14, 7), int8], Tensor[(1274), int8]) {
  %632 = @func_6110() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %633 = cast(%var_6496, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %634 = cast(%var_6496, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %635 = reshape(%633, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), int8] */;
  %636 = reshape(%634, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), int8] */;
  %637 = @func_4726(%635, %636) /* ty=(Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) */;
  %638 = %632.1;
  %639 = %637.0;
  (%638, %639, %var_6496)
}

def @func_2078() -> Tensor[(10, 11, 10), float64] {
  %640 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
  %641 = %640.0;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  log2(%642) /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3340() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %643 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %644 = %643.0;
  %645 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  (%644, %645)
}

def @func_6825() -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float32]) {
  %646 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %647 = @func_4996() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %648 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  %649 = @func_6716() /* ty=Tensor[(320), float32] */;
  %650 = %646.1;
  %651 = %647.0;
  (%648, %649, %650, %651)
}

def @func_5073() -> Tensor[(10, 11, 10), float32] {
  %652 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %652.0
}

def @func_5955() -> Tensor[(10, 11, 10), float32] {
  %653 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %653.1
}

def @func_2513(%var_2463: uint64, %var_2464: Tensor[(3, 13, 7), uint64]) -> (Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) {
  %654 = cast(%var_2463, dtype="bool") /* ty=bool */;
  %655 = cast(%var_2464, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %656 = greater_equal(%654, %655) /* ty=Tensor[(3, 13, 7), bool] */;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %658 = shape_of(%var_2464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_2464, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = cast(%var_2464, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %662 = not_equal(%659, %660) /* ty=Tensor[(3, 13, 7), bool] */;
  %663 = exp(%661) /* ty=Tensor[(3, 13, 7), float32] */;
  (%662, %663)
}

def @func_7704() -> (Tensor[(10, 11, 10), float64], Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
  %664 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %665 = @func_4825() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) */;
  %666 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %667 = %664.0;
  %668 = %665.2;
  %669 = %666.0;
  (%667, %668, %669)
}

def @func_4202() -> Tensor[(10, 14, 9), float32] {
  %670 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %670.1
}

def @func_2916() -> (Tensor[(10, 11, 10), float64],) {
  %671 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  (%671,)
}

def @func_6780() -> (Tensor[(10, 11, 10), float64],) {
  %672 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  (%672,)
}

def @func_7136() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %673 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %674 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %675 = %673.5;
  %676 = %674.1;
  (%675, %676)
}

def @func_4230() -> (Tensor[(2, 15, 3), bool],) {
  %677 = @func_4107() /* ty=(Tensor[(2, 15, 3), bool],) */;
  %678 = %677.0;
  (%678,)
}

def @func_2621() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  %679 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %680 = cast(meta[relay.Constant][27] /* ty=Tensor[(189, 1), float32] */, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %681 = reshape(%680, newshape=[189, 1]) /* ty=Tensor[(189, 1), float32] */;
  %682 = @func_2421(%681) /* ty=(Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) */;
  %683 = cast(meta[relay.Constant][27] /* ty=Tensor[(189, 1), float32] */, dtype="uint8") /* ty=Tensor[(189, 1), uint8] */;
  %684 = cast(meta[relay.Constant][28] /* ty=Tensor[(189, 9), float32] */, dtype="uint8") /* ty=Tensor[(189, 9), uint8] */;
  %685 = cast(meta[relay.Constant][28] /* ty=Tensor[(189, 9), float32] */, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
  %686 = cast(meta[relay.Constant][27] /* ty=Tensor[(189, 1), float32] */, dtype="float64") /* ty=Tensor[(189, 1), float64] */;
  %687 = cast(meta[relay.Constant][29] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %688 = cast(meta[relay.Constant][29] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %689 = reshape(%687, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %690 = reshape(%688, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %691 = @func_2300(%689, %690) /* ty=(Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) */;
  %692 = cast(meta[relay.Constant][27] /* ty=Tensor[(189, 1), float32] */, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %693 = reshape(%692, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %694 = @func_160(%693) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %695 = cast(meta[relay.Constant][30] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
  %696 = reshape(%695, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %697 = @func_1175(%696) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %698 = %679.1;
  %699 = %682.0;
  %700 = right_shift(%683, %684) /* ty=Tensor[(189, 9), uint8] */;
  %701 = floor_divide(%685, %686) /* ty=Tensor[(189, 9), float64] */;
  %702 = %691.1;
  %703 = %694.1;
  %704 = %697.1;
  %705 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  (%698, %699, %700, %701, %702, meta[relay.Constant][29] /* ty=Tensor[(105), uint8] */, %703, %704, meta[relay.Constant][30] /* ty=Tensor[(392), int32] */, %705)
}

def @func_5505() -> (Tensor[(10, 11, 10), float64],) {
  %706 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  (%706,)
}

def @func_714(%var_708: Tensor[(3, 3, 15), int32]) -> Tensor[(3, 3, 15), int32] {
  %707 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %708 = cast(%var_708, dtype="int32") /* ty=Tensor[(3, 3, 15), int32] */;
  add(%707, %708) /* ty=Tensor[(3, 3, 15), int32] */
}

def @func_4887(%var_4878: Tensor[(10, 11, 10), bool]) -> (Tensor[(98, 4), float32], Tensor[(98, 4), bool], Tensor[(10, 11, 10), uint64]) {
  %709 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %710 = %709.2;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
  %712 = cast(%710, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %713 = erf(%712) /* ty=Tensor[(98, 4), float64] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %715 = shape_of(%710, dtype="int32") /* ty=Tensor[(2), int32] */;
  %716 = cast(%710, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %718 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %719 = %718.1;
  %720 = cast(%var_4878, dtype="uint64") /* ty=Tensor[(10, 11, 10), uint64] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="uint64") /* ty=Tensor[(10, 11, 10), uint64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %724 = log(%711) /* ty=Tensor[(98, 4), float32] */;
  %725 = less(%716, %717) /* ty=Tensor[(98, 4), bool] */;
  %726 = subtract(%722, %723) /* ty=Tensor[(10, 11, 10), uint64] */;
  (%724, %725, %726)
}

def @func_4825() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) {
  %727 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %730 = reshape(%729, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %731 = @func_3483(%730) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %732 = @func_4316() /* ty=(Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */;
  %733 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %734 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %735 = %731.0;
  %736 = %732.0;
  %737 = %733.4;
  %738 = %734.2;
  (%728, %735, %736, %737, %738)
}

def @func_4958() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_7073(%var_7059: Tensor[(11, 12, 9), int16], %var_7060: Tensor[(11, 12, 9), int16]) -> (Tensor[(11, 12, 9), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %739 = cast(%var_7060, dtype="bool") /* ty=Tensor[(11, 12, 9), bool] */;
  %740 = shape_of(%var_7059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_7059, dtype="bool") /* ty=Tensor[(11, 12, 9), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = @func_6110() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %744 = greater(%741, %742) /* ty=Tensor[(11, 12, 9), bool] */;
  %745 = %743.1;
  %746 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  (%744, %745, %746)
}

def @func_4850() -> (Tensor[(10, 11, 10), float64],) {
  %747 = @func_4393() /* ty=Tensor[(10, 11, 10), float64] */;
  (%747,)
}

def @func_4625() -> Tensor[(10, 11, 10), float64] {
  @func_4393() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_6801() -> Tensor[(10, 11, 10), float64] {
  @func_4625() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3653(%var_3617: uint32, %var_3618: Tensor[(16, 16, 14), uint32], %var_3633: Tensor[(135), int32]) -> (Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) {
  %748 = cast(%var_3617, dtype="uint32") /* ty=uint32 */;
  %749 = cast(%var_3618, dtype="uint32") /* ty=Tensor[(16, 16, 14), uint32] */;
  %750 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %751 = cast(%var_3633, dtype="int32") /* ty=Tensor[(135), int32] */;
  %752 = reshape(%751, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), int32] */;
  %753 = subtract(%748, %749) /* ty=Tensor[(16, 16, 14), uint32] */;
  %754 = %750.0;
  %755 = @func_714(%752) /* ty=Tensor[(3, 3, 15), int32] */;
  (%753, %754, %755, %var_3633)
}

def @func_3005(%var_2991: Tensor[(1, 105), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) {
  %756 = cast(%var_2991, dtype="uint8") /* ty=Tensor[(1, 105), uint8] */;
  %757 = cast(%var_2991, dtype="uint8") /* ty=Tensor[(1, 105), uint8] */;
  %758 = reshape(%756, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %759 = reshape(%757, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %760 = @func_2300(%758, %759) /* ty=(Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) */;
  %761 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %763 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  %764 = %760.0;
  %765 = rsqrt(%762) /* ty=Tensor[(10, 11, 10), float64] */;
  (%763, %764, %var_2991, %765)
}

def @func_2805() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_160(%var_142: Tensor[(3, 7, 9), float32]) -> (Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) {
  %766 = cast(%var_142, dtype="float32") /* ty=Tensor[(3, 7, 9), float32] */;
  %767 = cast(%var_142, dtype="float64") /* ty=Tensor[(3, 7, 9), float64] */;
  %768 = cos(%766) /* ty=Tensor[(3, 7, 9), float32] */;
  %769 = sin(%767) /* ty=Tensor[(3, 7, 9), float64] */;
  (%768, %769)
}

def @func_2030(%var_1949: Tensor[(8, 8, 5), float32], %var_1994: Tensor[(189), float32], %var_2017: Tensor[(189), float32], %var_2024: Tensor[(8, 8, 5), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) {
  %770 = cast(meta[relay.Constant][31] /* ty=Tensor[(98, 4), int32] */, dtype="int32") /* ty=Tensor[(98, 4), int32] */;
  %771 = reshape(%770, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %772 = @func_333(%771) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %773 = cast(%var_1994, dtype="float32") /* ty=Tensor[(189), float32] */;
  %774 = cast(meta[relay.Constant][32] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %775 = reshape(%773, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %776 = reshape(%774, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %777 = @func_246(%775, %776) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %778 = cast(%var_2017, dtype="float64") /* ty=Tensor[(189), float64] */;
  %779 = shape_of(%var_1994, dtype="int32") /* ty=Tensor[(1), int32] */;
  %780 = cast(%var_1994, dtype="float64") /* ty=Tensor[(189), float64] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), float64] */;
  %782 = cast(%var_1949, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %783 = sinh(%782) /* ty=Tensor[(8, 8, 5), float32] */;
  %784 = cast(%783, dtype="int8") /* ty=Tensor[(8, 8, 5), int8] */;
  %785 = shape_of(%var_1949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%var_1949, dtype="int8") /* ty=Tensor[(8, 8, 5), int8] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %788 = left_shift(%786, %787) /* ty=Tensor[(8, 8, 5), int8] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(8, 8, 5), float64] */;
  %790 = asinh(%789) /* ty=Tensor[(8, 8, 5), float64] */;
  %791 = cast(%var_2024, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %795 = %772.0;
  %796 = %777.2;
  %797 = floor_mod(%780, %781) /* ty=Tensor[(189), float64] */;
  %798 = subtract(%793, %794) /* ty=Tensor[(8, 8, 5), uint32] */;
  (%795, meta[relay.Constant][31] /* ty=Tensor[(98, 4), int32] */, %796, meta[relay.Constant][32] /* ty=Tensor[(1260), float64] */, %797, %798)
}

def @func_4996() -> (Tensor[(10, 11, 10), float32],) {
  %799 = @func_2109() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_1512(%var_1475: Tensor[(10, 7, 5), float64], %var_1476: Tensor[(10, 7, 5), float64], %var_1499: Tensor[(392), int32]) -> (Tensor[(10, 7, 5), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  %801 = cast(%var_1476, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
  %802 = shape_of(%var_1475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%var_1475, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %805 = cast(%var_1499, dtype="int32") /* ty=Tensor[(392), int32] */;
  %806 = reshape(%805, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %807 = @func_333(%806) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %808 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %809 = floor_divide(%803, %804) /* ty=Tensor[(10, 7, 5), float64] */;
  %810 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %811 = %807.0;
  %812 = %808.0;
  (%809, %810, %811, %var_1499, %812)
}

def @func_2433() -> Tensor[(10, 11, 10), float32] {
  %813 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %813.0
}

def @func_7208() -> (Tensor[(10, 11, 10), float32],) {
  %814 = @func_4996() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %815 = %814.0;
  (%815,)
}

def @func_4675() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %816 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %817 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %818 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  %819 = %816.0;
  (%817, %818, %819)
}

def @func_3263(%var_3241: Tensor[(16, 7, 14), float32]) -> (Tensor[(16, 7, 14), float32], Tensor[(10, 11, 10), float64]) {
  %820 = cast(%var_3241, dtype="float32") /* ty=Tensor[(16, 7, 14), float32] */;
  %821 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %822 = erf(%820) /* ty=Tensor[(16, 7, 14), float32] */;
  %823 = %821.0;
  (%822, %823)
}

def @func_7709() -> Tensor[(10, 11, 10), float64] {
  %824 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %824.0
}

def @func_7449(%var_7439: uint32) -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(16, 16, 14), uint32], uint32, Tensor[(3584), uint32], Tensor[(15, 9), int32]) {
  %825 = @func_7208() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %826 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %827 = cast(%var_7439, dtype="uint32") /* ty=uint32 */;
  %828 = cast(meta[relay.Constant][33] /* ty=Tensor[(3584), uint32] */, dtype="uint32") /* ty=Tensor[(3584), uint32] */;
  %829 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 9), int32] */, dtype="int32") /* ty=Tensor[(15, 9), int32] */;
  %830 = reshape(%827, newshape=[]) /* ty=uint32 */;
  %831 = reshape(%828, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), uint32] */;
  %832 = reshape(%829, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %833 = @func_3653(%830, %831, %832) /* ty=(Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) */;
  %834 = %825.0;
  %835 = %826.1;
  %836 = %833.0;
  (%834, %835, %836, %var_7439, meta[relay.Constant][33] /* ty=Tensor[(3584), uint32] */, meta[relay.Constant][34] /* ty=Tensor[(15, 9), int32] */)
}

def @func_4592(%var_4582: Tensor[(2028), uint32], %var_4587: Tensor[(2, 15, 3), bool]) -> (Tensor[(10, 11, 10), bool], Tensor[(392), int32], Tensor[(14, 28), int32], Tensor[(392), int32], Tensor[(39, 4), uint32], Tensor[(2028), uint32], Tensor[(2, 15, 3), float64]) {
  %837 = @func_3014() /* ty=(Tensor[(10, 11, 10), bool],) */;
  %838 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 28), int32] */, dtype="int32") /* ty=Tensor[(14, 28), int32] */;
  %839 = reshape(%838, newshape=[392]) /* ty=Tensor[(392), int32] */;
  %840 = @func_3544(%839) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %841 = cast(meta[relay.Constant][36] /* ty=Tensor[(39, 4), uint32] */, dtype="uint32") /* ty=Tensor[(39, 4), uint32] */;
  %842 = cast(%var_4582, dtype="uint32") /* ty=Tensor[(2028), uint32] */;
  %843 = %840.2;
  %844 = cast(%843, dtype="int32") /* ty=Tensor[(392), int32] */;
  %845 = reshape(%841, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), uint32] */;
  %846 = reshape(%842, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint32] */;
  %847 = reshape(%844, newshape=[392]) /* ty=Tensor[(392), int32] */;
  %848 = @func_4358(%845, %846, %847) /* ty=(Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %849 = @func_4107() /* ty=(Tensor[(2, 15, 3), bool],) */;
  %850 = %849.0;
  %851 = cast(%var_4587, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%850, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %855 = %837.0;
  %856 = %848.2;
  %857 = add(%853, %854) /* ty=Tensor[(2, 15, 3), float64] */;
  (%855, %843, meta[relay.Constant][35] /* ty=Tensor[(14, 28), int32] */, %856, meta[relay.Constant][36] /* ty=Tensor[(39, 4), uint32] */, %var_4582, %857)
}

def @func_3419(%var_3373: Tensor[(189), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) {
  %858 = @func_2916() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %859 = @func_3340() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %860 = cast(meta[relay.Constant][37] /* ty=Tensor[(27), uint8] */, dtype="uint8") /* ty=Tensor[(27), uint8] */;
  %861 = cast(%var_3373, dtype="uint8") /* ty=Tensor[(189), uint8] */;
  %862 = cast(meta[relay.Constant][38] /* ty=Tensor[(256, 1), float64] */, dtype="float64") /* ty=Tensor[(256, 1), float64] */;
  %863 = cast(meta[relay.Constant][39] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %864 = reshape(%860, newshape=[3, 9, 1]) /* ty=Tensor[(3, 9, 1), uint8] */;
  %865 = reshape(%861, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), uint8] */;
  %866 = reshape(%862, newshape=[1, 256]) /* ty=Tensor[(1, 256), float64] */;
  %867 = reshape(%863, newshape=[9, 140]) /* ty=Tensor[(9, 140), float64] */;
  %868 = @func_455(%864, %865, %866, %867) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) */;
  %869 = %868.1;
  %870 = cast(meta[relay.Constant][38] /* ty=Tensor[(256, 1), float64] */, dtype="float32") /* ty=Tensor[(256, 1), float32] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%869, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %874 = cast(meta[relay.Constant][39] /* ty=Tensor[(1260), float64] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %875 = cast(meta[relay.Constant][38] /* ty=Tensor[(256, 1), float64] */, dtype="bool") /* ty=Tensor[(256, 1), bool] */;
  %876 = cast(%var_3373, dtype="float32") /* ty=Tensor[(189), float32] */;
  %877 = %858.0;
  %878 = %859.1;
  %879 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  %880 = floor_divide(%872, %873) /* ty=Tensor[(8, 4, 8), float32] */;
  %881 = not_equal(%874, %875) /* ty=Tensor[(256, 1260), bool] */;
  %882 = erf(%876) /* ty=Tensor[(189), float32] */;
  (%877, %878, meta[relay.Constant][37] /* ty=Tensor[(27), uint8] */, %879, %880, %881, %882)
}

def @func_1175(%var_1162: Tensor[(98, 4), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) {
  %883 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %884 = %883.0;
  %885 = cast(%884, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %886 = cast(%var_1162, dtype="int32") /* ty=Tensor[(98, 4), int32] */;
  %887 = reshape(%886, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %888 = @func_333(%887) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %889 = erf(%885) /* ty=Tensor[(10, 11, 10), float64] */;
  %890 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %891 = %888.0;
  (%889, %890, %891, %var_1162)
}

def @func_6677() -> Tensor[(10, 11, 10), float64] {
  %892 = @func_3682() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %892.0
}

def @func_676() -> Tensor[(10, 11, 10), float64] {
  %893 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  atan(%893) /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3014() -> (Tensor[(10, 11, 10), bool],) {
  %894 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %895 = %894.4;
  (%895,)
}

def @func_1250() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %896 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %897 = %896.0;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %899 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %900 = cos(%898) /* ty=Tensor[(10, 11, 10), float32] */;
  (%899, %900)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2433() -> Tensor[(10, 11, 10), float32] {
  %0 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %0.0
}

def @func_6147() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
  %5 = fn () -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
    %1 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
    %2 = @func_4905() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */;
    %3 = %1.0;
    %4 = %2.1;
    (%3, %4)
  };
  %5() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */
}

def @func_7045() -> (Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) {
  @func_7043() /* ty=(Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) */
}

def @func_4906() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
  %10 = fn () -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) {
    %6 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
    %7 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
    %8 = %6.0;
    %9 = %7.1;
    (%8, %9)
  };
  %10() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */
}

def @func_5957() -> Tensor[(10, 11, 10), float32] {
  @func_5955() /* ty=Tensor[(10, 11, 10), float32] */
}

def @func_1250() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %11 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %14 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %15 = cos(%13) /* ty=Tensor[(10, 11, 10), float32] */;
  (%14, %15)
}

def @func_7811(%var_7790: Tensor[(6, 8, 14), int16], %var_7791: Tensor[(6, 8, 14), int16]) -> (Tensor[(6, 8, 14), int16], Tensor[(10, 11, 10), float64]) {
  %16 = cast(%var_7791, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %17 = shape_of(%var_7790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_7790, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %20 = logical_xor(%18, %19) /* ty=Tensor[(6, 8, 14), int16] */;
  %21 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  (%20, %21)
}

def @func_2109() -> (Tensor[(10, 11, 10), float32],) {
  %22 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
  %23 = %22.1;
  (%23,)
}

def @func_2424(%var_2422: Tensor[(189, 1), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) {
  @func_2421(%var_2422) /* ty=(Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_3485(%var_3484: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %33 = fn (%var_3446: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
    %24 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
    %25 = %24.0;
    %26 = cast(%var_3446, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %30 = minimum(%28, %29) /* ty=Tensor[(10, 11, 10), int16] */;
    %31 = @func_2078() /* ty=Tensor[(10, 11, 10), float64] */;
    %32 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
    (%30, %31, %32)
  };
  %33(%var_3484) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_3544(%var_3511: Tensor[(392), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %34 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %35 = cast(%var_3511, dtype="int32") /* ty=Tensor[(392), int32] */;
  %36 = reshape(%35, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %37 = @func_1175(%36) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %38 = %34.0;
  %39 = %37.1;
  (%38, %39, %var_3511)
}

def @func_1175(%var_1162: Tensor[(98, 4), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) {
  %40 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %43 = cast(%var_1162, dtype="int32") /* ty=Tensor[(98, 4), int32] */;
  %44 = reshape(%43, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %45 = @func_333(%44) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %46 = erf(%42) /* ty=Tensor[(10, 11, 10), float64] */;
  %47 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %48 = %45.0;
  (%46, %47, %48, %var_1162)
}

def @func_1648() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_5505() -> (Tensor[(10, 11, 10), float64],) {
  %49 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  (%49,)
}

def @func_6885() -> Tensor[(10, 11, 10), float64] {
  %51 = fn () -> Tensor[(10, 11, 10), float64] {
    %50 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %50.0
  };
  %51() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3736() -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) {
  @func_3734() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) */
}

def @func_5807() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) {
  @func_5805() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) */
}

def @func_7608() -> (Tensor[(10, 11, 10), float64],) {
  %52 = @func_6884() /* ty=Tensor[(10, 11, 10), float64] */;
  (%52,)
}

def @func_2156() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) {
  %53 = @func_2109() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %54 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %55 = %53.0;
  %56 = %54.1;
  (%55, %56)
}

def @func_7709() -> Tensor[(10, 11, 10), float64] {
  %57 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %57.0
}

def @func_4415() -> Tensor[(10, 11, 10), float64] {
  %58 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %58() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_6484() -> (Tensor[(10, 14, 9), float32],) {
  %59 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
  %60 = %59.1;
  (%60,)
}

def @func_7610() -> (Tensor[(10, 11, 10), float64],) {
  @func_7608() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_5955() -> Tensor[(10, 11, 10), float32] {
  %61 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %61.1
}

def @func_3421(%var_3420: Tensor[(189), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) {
  %87 = fn (%var_3373: Tensor[(189), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) {
    %62 = @func_2916() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %63 = @func_3340() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
    %64 = cast(meta[relay.Constant][0] /* ty=Tensor[(27), uint8] */, dtype="uint8") /* ty=Tensor[(27), uint8] */;
    %65 = cast(%var_3373, dtype="uint8") /* ty=Tensor[(189), uint8] */;
    %66 = cast(meta[relay.Constant][1] /* ty=Tensor[(256, 1), float64] */, dtype="float64") /* ty=Tensor[(256, 1), float64] */;
    %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %68 = reshape(%64, newshape=[3, 9, 1]) /* ty=Tensor[(3, 9, 1), uint8] */;
    %69 = reshape(%65, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), uint8] */;
    %70 = reshape(%66, newshape=[1, 256]) /* ty=Tensor[(1, 256), float64] */;
    %71 = reshape(%67, newshape=[9, 140]) /* ty=Tensor[(9, 140), float64] */;
    %72 = @func_455(%68, %69, %70, %71) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) */;
    %73 = %72.1;
    %74 = cast(meta[relay.Constant][1] /* ty=Tensor[(256, 1), float64] */, dtype="float32") /* ty=Tensor[(256, 1), float32] */;
    %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%73, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float64] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(256, 1), float64] */, dtype="bool") /* ty=Tensor[(256, 1), bool] */;
    %80 = cast(%var_3373, dtype="float32") /* ty=Tensor[(189), float32] */;
    %81 = %62.0;
    %82 = %63.1;
    %83 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
    %84 = floor_divide(%76, %77) /* ty=Tensor[(8, 4, 8), float32] */;
    %85 = not_equal(%78, %79) /* ty=Tensor[(256, 1260), bool] */;
    %86 = erf(%80) /* ty=Tensor[(189), float32] */;
    (%81, %82, meta[relay.Constant][0] /* ty=Tensor[(27), uint8] */, %83, %84, %85, %86)
  };
  %87(%var_3420) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) */
}

def @func_5850(%var_5848: int8, %var_5849: Tensor[(11, 1, 12), int8]) -> (Tensor[(11, 1, 12), int8], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  @func_5846(%var_5848, %var_5849) /* ty=(Tensor[(11, 1, 12), int8], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */
}

def @func_3196(%var_3194: Tensor[(10, 11, 10), bool]) -> (Tensor[(10, 11, 10), bool],) {
  @func_3193(%var_3194) /* ty=(Tensor[(10, 11, 10), bool],) */
}

def @func_5889() -> Tensor[(392), int32] {
  %88 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %88.0
}

def @func_3734() -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) {
  %89 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %90 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %92 = reshape(%90, newshape=[]) /* ty=uint64 */;
  %93 = reshape(%91, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), uint64] */;
  %94 = @func_2513(%92, %93) /* ty=(Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) */;
  %95 = %89.1;
  %96 = %94.1;
  %97 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
  (%95, %96, meta[relay.Constant][3] /* ty=uint64 */, meta[relay.Constant][4] /* ty=Tensor[(273), uint64] */, %97)
}

def @func_1252() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */
}

def @func_7043() -> (Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) {
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %100 = rsqrt(%98) /* ty=Tensor[(11, 5, 1), float32] */;
  %101 = acosh(%99) /* ty=Tensor[(11, 5, 1), float32] */;
  (%100, %101)
}

def @func_249(%var_247: Tensor[(1, 189), float32], %var_248: Tensor[(10, 14, 9), float64]) -> (Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) {
  %113 = fn (%var_233: Tensor[(1, 189), float32], %var_240: Tensor[(10, 14, 9), float64]) -> (Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) {
    %102 = cast(%var_233, dtype="float32") /* ty=Tensor[(1, 189), float32] */;
    %103 = reshape(%102, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
    %104 = @func_160(%103) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
    %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
    %106 = cosh(%105) /* ty=Tensor[(10, 14, 9), float64] */;
    %107 = cast(%var_240, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%106, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %111 = %104.1;
    %112 = divide(%109, %110) /* ty=Tensor[(10, 14, 9), float32] */;
    (%111, %var_233, %112)
  };
  %113(%var_247, %var_248) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */
}

def @func_4959() -> Tensor[(10, 11, 10), float64] {
  %114 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %114() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3193(%var_3172: Tensor[(10, 11, 10), bool]) -> (Tensor[(10, 11, 10), bool],) {
  %115 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %116 = %115.1;
  %117 = cast(%var_3172, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = logical_or(%119, %120) /* ty=Tensor[(10, 11, 10), bool] */;
  (%121,)
}

def @func_7208() -> (Tensor[(10, 11, 10), float32],) {
  %122 = @func_4996() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %123 = %122.0;
  (%123,)
}

def @func_8046(%var_8036: Tensor[(11, 5, 1100), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(90), bool], Tensor[(189), float64], Tensor[(11, 5, 1100), float32]) {
  %124 = @func_4316() /* ty=(Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %126 = reshape(%125, newshape=[90]) /* ty=Tensor[(90), bool] */;
  %127 = @func_6236(%126) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) */;
  %128 = %127.2;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(189), float64] */;
  %130 = @func_7564() /* ty=(Tensor[(11, 5, 1100), bool],) */;
  %131 = %130.0;
  %132 = cast(%var_8036, dtype="float32") /* ty=Tensor[(11, 5, 1100), float32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="float32") /* ty=Tensor[(11, 5, 1100), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %136 = %124.1;
  %137 = sqrt(%129) /* ty=Tensor[(189), float64] */;
  %138 = power(%134, %135) /* ty=Tensor[(11, 5, 1100), float32] */;
  (%136, meta[relay.Constant][7] /* ty=Tensor[(90), bool] */, %137, %138)
}

def @func_6678() -> Tensor[(10, 11, 10), float64] {
  %140 = fn () -> Tensor[(10, 11, 10), float64] {
    %139 = @func_3682() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %139.0
  };
  %140() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_2381() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %145 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
    %141 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %142 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %143 = %141.0;
    %144 = %142.1;
    (%143, %144)
  };
  %145() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */
}

def @func_4108() -> (Tensor[(2, 15, 3), bool],) {
  %149 = fn () -> (Tensor[(2, 15, 3), bool],) {
    %146 = cast(meta[relay.Constant][8] /* ty=uint8 */, dtype="bool") /* ty=bool */;
    %147 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 15, 3), uint8] */, dtype="bool") /* ty=Tensor[(2, 15, 3), bool] */;
    %148 = not_equal(%146, %147) /* ty=Tensor[(2, 15, 3), bool] */;
    (%148,)
  };
  %149() /* ty=(Tensor[(2, 15, 3), bool],) */
}

def @main(%var_8096: Tensor[(7, 1, 4), float64], %var_8115: Tensor[(7, 10, 4), float64]) -> (Tensor[(10, 11, 10), float64], Tensor[(7, 10, 4), float64]) {
  %150 = cast(%var_8096, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
  %151 = rsqrt(%150) /* ty=Tensor[(7, 1, 4), float64] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
  %153 = cast(%var_8115, dtype="float64") /* ty=Tensor[(7, 10, 4), float64] */;
  %154 = @func_4625() /* ty=Tensor[(10, 11, 10), float64] */;
  %155 = multiply(%152, %153) /* ty=Tensor[(7, 10, 4), float64] */;
  (%154, %155)
}

def @func_4023(%var_4017: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32],) {
  %156 = cast(%var_4017, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %157 = exp(%156) /* ty=Tensor[(14, 2, 14), float32] */;
  (%157,)
}

def @func_5059() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %158 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %159 = %158.1;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %161 = reshape(%160, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
  %162 = @func_3927(%161) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %163 = %162.1;
  (%159, %163)
}

def @func_1517(%var_1514: Tensor[(10, 7, 5), float64], %var_1515: Tensor[(10, 7, 5), float64], %var_1516: Tensor[(392), int32]) -> (Tensor[(10, 7, 5), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  @func_1512(%var_1514, %var_1515, %var_1516) /* ty=(Tensor[(10, 7, 5), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */
}

def @func_3547(%var_3545: Tensor[(392), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  @func_3544(%var_3545) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */
}

def @func_4220() -> (uint64,) {
  %164 = @func_3734() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) */;
  %165 = %164.2;
  (%165,)
}

def @func_4505(%var_4502: Tensor[(10, 14, 8), uint64], %var_4503: Tensor[(10, 14, 8), uint64], %var_4504: Tensor[(10, 14, 8), uint64]) -> (Tensor[(10, 14, 8), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 14, 8), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  @func_4500(%var_4502, %var_4503, %var_4504) /* ty=(Tensor[(10, 14, 8), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 14, 8), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */
}

def @func_7526() -> Tensor[(10, 11, 10), float64] {
  %167 = fn () -> Tensor[(10, 11, 10), float64] {
    %166 = @func_4825() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) */;
    %166.4
  };
  %167() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3810() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) {
  %168 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %171 = reshape(%170, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), bool] */;
  %172 = @func_3193(%171) /* ty=(Tensor[(10, 11, 10), bool],) */;
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %174 = reshape(%173, newshape=[1, 105]) /* ty=Tensor[(1, 105), uint8] */;
  %175 = @func_3005(%174) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) */;
  %176 = %172.0;
  %177 = cast(%176, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
  %178 = reshape(%177, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), bool] */;
  %179 = @func_3193(%178) /* ty=(Tensor[(10, 11, 10), bool],) */;
  %180 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %181 = %175.1;
  %182 = %179.0;
  (%169, %180, %176, %181, meta[relay.Constant][10] /* ty=Tensor[(105), uint8] */, %182)
}

def @func_7136() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %183 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %184 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %185 = %183.5;
  %186 = %184.1;
  (%185, %186)
}

def @func_5947() -> (Tensor[(10, 11, 10), float64],) {
  @func_5945() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_7452(%var_7450: uint32) -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(16, 16, 14), uint32], uint32, Tensor[(3584), uint32], Tensor[(15, 9), int32]) {
  @func_7449(%var_7450) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(16, 16, 14), uint32], uint32, Tensor[(3584), uint32], Tensor[(15, 9), int32]) */
}

def @func_7449(%var_7439: uint32) -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(16, 16, 14), uint32], uint32, Tensor[(3584), uint32], Tensor[(15, 9), int32]) {
  %187 = @func_7208() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %188 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %189 = cast(%var_7439, dtype="uint32") /* ty=uint32 */;
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(3584), uint32] */, dtype="uint32") /* ty=Tensor[(3584), uint32] */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 9), int32] */, dtype="int32") /* ty=Tensor[(15, 9), int32] */;
  %192 = reshape(%189, newshape=[]) /* ty=uint32 */;
  %193 = reshape(%190, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), uint32] */;
  %194 = reshape(%191, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %195 = @func_3653(%192, %193, %194) /* ty=(Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) */;
  %196 = %187.0;
  %197 = %188.1;
  %198 = %195.0;
  (%196, %197, %198, %var_7439, meta[relay.Constant][11] /* ty=Tensor[(3584), uint32] */, meta[relay.Constant][12] /* ty=Tensor[(15, 9), int32] */)
}

def @func_1761() -> (Tensor[(10, 11, 10), float32],) {
  @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_6239(%var_6237: Tensor[(90), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) {
  @func_6236(%var_6237) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) */
}

def @func_4537(%var_4536: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int32],) {
  %206 = fn (%var_4528: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), int32],) {
    %199 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %200 = %199.0;
    %201 = cast(%var_4528, dtype="int32") /* ty=Tensor[(10, 11, 10), int32] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="int32") /* ty=Tensor[(10, 11, 10), int32] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %205 = left_shift(%203, %204) /* ty=Tensor[(10, 11, 10), int32] */;
    (%205,)
  };
  %206(%var_4536) /* ty=(Tensor[(10, 11, 10), int32],) */
}

def @func_5345(%var_5342: Tensor[(10, 14, 9), float32], %var_5343: Tensor[(189), uint8], %var_5344: Tensor[(90), bool]) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(8, 4, 8), float32], Tensor[(189), uint8], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float64]) {
  @func_5340(%var_5342, %var_5343, %var_5344) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(8, 4, 8), float32], Tensor[(189), uint8], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float64]) */
}

def @func_6718() -> Tensor[(320), float32] {
  @func_6716() /* ty=Tensor[(320), float32] */
}

def @func_1779() -> Tensor[(10, 11, 10), float64] {
  %207 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %207.0
}

def @func_4785() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) {
  %221 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) {
    %208 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
    %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %210 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 63), float32] */, dtype="float32") /* ty=Tensor[(3, 63), float32] */;
    %211 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 63), float32] */, dtype="float32") /* ty=Tensor[(3, 63), float32] */;
    %212 = cast(meta[relay.Constant][13] /* ty=Tensor[(320), float32] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %213 = reshape(%209, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
    %214 = reshape(%210, newshape=[189]) /* ty=Tensor[(189), float32] */;
    %215 = reshape(%211, newshape=[189]) /* ty=Tensor[(189), float32] */;
    %216 = reshape(%212, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float64] */;
    %217 = @func_2030(%213, %214, %215, %216) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) */;
    %218 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
    %219 = %208.2;
    %220 = %217.4;
    (%218, %219, %220, meta[relay.Constant][13] /* ty=Tensor[(320), float32] */, meta[relay.Constant][14] /* ty=Tensor[(3, 63), float32] */)
  };
  %221() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */
}

def @func_963() -> (Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) {
  %222 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %223 = %222.0;
  %224 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 10), float64] */, dtype="uint8") /* ty=Tensor[(10, 11, 10), uint8] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="uint8") /* ty=Tensor[(10, 11, 10), uint8] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %228 = cast(%223, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %229 = right_shift(%226, %227) /* ty=Tensor[(10, 11, 10), uint8] */;
  %230 = sqrt(%228) /* ty=Tensor[(10, 11, 10), float32] */;
  (%229, %230)
}

def @func_160(%var_142: Tensor[(3, 7, 9), float32]) -> (Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) {
  %231 = cast(%var_142, dtype="float32") /* ty=Tensor[(3, 7, 9), float32] */;
  %232 = cast(%var_142, dtype="float64") /* ty=Tensor[(3, 7, 9), float64] */;
  %233 = cos(%231) /* ty=Tensor[(3, 7, 9), float32] */;
  %234 = sin(%232) /* ty=Tensor[(3, 7, 9), float64] */;
  (%233, %234)
}

def @func_7830() -> (Tensor[(2, 15, 3), bool],) {
  %237 = fn () -> (Tensor[(2, 15, 3), bool],) {
    %235 = @func_4230() /* ty=(Tensor[(2, 15, 3), bool],) */;
    %236 = %235.0;
    (%236,)
  };
  %237() /* ty=(Tensor[(2, 15, 3), bool],) */
}

def @func_6486() -> (Tensor[(10, 14, 9), float32],) {
  @func_6484() /* ty=(Tensor[(10, 14, 9), float32],) */
}

def @func_6396(%var_6395: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) {
  %254 = fn (%var_6342: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) {
    %238 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    %239 = cast(%var_6342, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%238, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %243 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
    %244 = %243.0;
    %245 = cast(%244, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %246 = reshape(%245, newshape=[1100]) /* ty=Tensor[(1100), float64] */;
    %247 = @func_5167(%246) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) */;
    %248 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
    %249 = %248.2;
    %250 = cast(%249, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
    %251 = floor_divide(%241, %242) /* ty=Tensor[(10, 11, 10), float64] */;
    %252 = %247.1;
    %253 = log10(%250) /* ty=Tensor[(189, 9), float64] */;
    (%251, %244, %252, %253)
  };
  %254(%var_6395) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) */
}

def @func_717(%var_715: Tensor[(3, 3, 15), int32]) -> Tensor[(3, 3, 15), int32] {
  @func_714(%var_715) /* ty=Tensor[(3, 3, 15), int32] */
}

def @func_2158() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) {
  @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */
}

def @func_8049(%var_8047: Tensor[(11, 5, 1100), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(90), bool], Tensor[(189), float64], Tensor[(11, 5, 1100), float32]) {
  @func_8046(%var_8047) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(90), bool], Tensor[(189), float64], Tensor[(11, 5, 1100), float32]) */
}

def @func_866() -> (Tensor[(10, 11, 10), float64],) {
  %256 = fn () -> (Tensor[(10, 11, 10), float64],) {
    %255 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    (%255,)
  };
  %256() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_714(%var_708: Tensor[(3, 3, 15), int32]) -> Tensor[(3, 3, 15), int32] {
  %257 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %258 = cast(%var_708, dtype="int32") /* ty=Tensor[(3, 3, 15), int32] */;
  add(%257, %258) /* ty=Tensor[(3, 3, 15), int32] */
}

def @func_677() -> Tensor[(10, 11, 10), float64] {
  %260 = fn () -> Tensor[(10, 11, 10), float64] {
    %259 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    atan(%259) /* ty=Tensor[(10, 11, 10), float64] */
  };
  %260() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_2517(%var_2515: uint64, %var_2516: Tensor[(3, 13, 7), uint64]) -> (Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) {
  @func_2513(%var_2515, %var_2516) /* ty=(Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) */
}

def @func_2036(%var_2032: Tensor[(8, 8, 5), float32], %var_2033: Tensor[(189), float32], %var_2034: Tensor[(189), float32], %var_2035: Tensor[(8, 8, 5), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) {
  @func_2030(%var_2032, %var_2033, %var_2034, %var_2035) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) */
}

def @func_5891() -> Tensor[(392), int32] {
  @func_5889() /* ty=Tensor[(392), int32] */
}

def @func_2030(%var_1949: Tensor[(8, 8, 5), float32], %var_1994: Tensor[(189), float32], %var_2017: Tensor[(189), float32], %var_2024: Tensor[(8, 8, 5), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32], Tensor[(10, 14, 9), float32], Tensor[(1260), float64], Tensor[(189), float64], Tensor[(8, 8, 5), uint32]) {
  %261 = cast(meta[relay.Constant][17] /* ty=Tensor[(98, 4), int32] */, dtype="int32") /* ty=Tensor[(98, 4), int32] */;
  %262 = reshape(%261, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %263 = @func_333(%262) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %264 = cast(%var_1994, dtype="float32") /* ty=Tensor[(189), float32] */;
  %265 = cast(meta[relay.Constant][18] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %266 = reshape(%264, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %267 = reshape(%265, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %268 = @func_246(%266, %267) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %269 = cast(%var_2017, dtype="float64") /* ty=Tensor[(189), float64] */;
  %270 = shape_of(%var_1994, dtype="int32") /* ty=Tensor[(1), int32] */;
  %271 = cast(%var_1994, dtype="float64") /* ty=Tensor[(189), float64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), float64] */;
  %273 = cast(%var_1949, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %274 = sinh(%273) /* ty=Tensor[(8, 8, 5), float32] */;
  %275 = cast(%274, dtype="int8") /* ty=Tensor[(8, 8, 5), int8] */;
  %276 = shape_of(%var_1949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_1949, dtype="int8") /* ty=Tensor[(8, 8, 5), int8] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %279 = left_shift(%277, %278) /* ty=Tensor[(8, 8, 5), int8] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(8, 8, 5), float64] */;
  %281 = asinh(%280) /* ty=Tensor[(8, 8, 5), float64] */;
  %282 = cast(%var_2024, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %286 = %263.0;
  %287 = %268.2;
  %288 = floor_mod(%271, %272) /* ty=Tensor[(189), float64] */;
  %289 = subtract(%284, %285) /* ty=Tensor[(8, 8, 5), uint32] */;
  (%286, meta[relay.Constant][17] /* ty=Tensor[(98, 4), int32] */, %287, meta[relay.Constant][18] /* ty=Tensor[(1260), float64] */, %288, %289)
}

def @func_2111() -> (Tensor[(10, 11, 10), float32],) {
  @func_2109() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_5805() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) {
  %290 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %291 = %290.0;
  %292 = @func_4202() /* ty=Tensor[(10, 14, 9), float32] */;
  %293 = @func_5183() /* ty=Tensor[(392), int32] */;
  (%291, %292, %293)
}

def @func_6509(%var_6496: Tensor[(1274), int8]) -> (Tensor[(10, 11, 10), float64], Tensor[(13, 14, 7), int8], Tensor[(1274), int8]) {
  %294 = @func_6110() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %295 = cast(%var_6496, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %296 = cast(%var_6496, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %297 = reshape(%295, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), int8] */;
  %298 = reshape(%296, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), int8] */;
  %299 = @func_4726(%297, %298) /* ty=(Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) */;
  %300 = %294.1;
  %301 = %299.0;
  (%300, %301, %var_6496)
}

def @func_7322(%var_7320: Tensor[(4, 14, 13), bool], %var_7321: Tensor[(4, 14, 13), bool]) -> (Tensor[(4, 14, 13), bool], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(189), float32]) {
  %313 = fn (%var_7297: Tensor[(4, 14, 13), bool], %var_7298: Tensor[(4, 14, 13), bool]) -> (Tensor[(4, 14, 13), bool], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(189), float32]) {
    %302 = cast(%var_7298, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
    %303 = shape_of(%var_7297, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%var_7297, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %306 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
    %307 = cast(meta[relay.Constant][20] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %308 = reshape(%306, newshape=[135]) /* ty=Tensor[(135), int32] */;
    %309 = reshape(%307, newshape=[189]) /* ty=Tensor[(189), float32] */;
    %310 = @func_1023(%308, %309) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) */;
    %311 = logical_or(%304, %305) /* ty=Tensor[(4, 14, 13), bool] */;
    %312 = %310.1;
    (%311, %312, meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, meta[relay.Constant][20] /* ty=Tensor[(189), float32] */)
  };
  %313(%var_7320, %var_7321) /* ty=(Tensor[(4, 14, 13), bool], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(189), float32]) */
}

def @func_5240() -> Tensor[(10, 11, 10), bool] {
  %314 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %314.1
}

def @func_6781() -> (Tensor[(10, 11, 10), float64],) {
  %316 = fn () -> (Tensor[(10, 11, 10), float64],) {
    %315 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
    (%315,)
  };
  %316() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_7138() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_7706() -> (Tensor[(10, 11, 10), float64], Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
  @func_7704() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_7210() -> (Tensor[(10, 11, 10), float32],) {
  @func_7208() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_1100() -> Tensor[(10, 11, 10), float64] {
  %317 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_676() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %317() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_6987() -> (Tensor[(10, 11, 10), float32],) {
  %318 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %319 = %318.0;
  %320 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %324 = divide(%322, %323) /* ty=Tensor[(10, 11, 10), float32] */;
  (%324,)
}

def @func_4026(%var_4024: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32],) {
  @func_4023(%var_4024) /* ty=(Tensor[(14, 2, 14), float32],) */
}

def @func_6236(%var_6189: Tensor[(90), bool]) -> (Tensor[(10, 11, 10), float64], Tensor[(3, 7, 9), float64], Tensor[(189), float32], Tensor[(1260), float64], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(10, 11, 10), float64], Tensor[(14, 28), uint32], Tensor[(189, 9), float64], Tensor[(189, 9), uint8]) {
  %325 = cast(meta[relay.Constant][22] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %327 = reshape(%325, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %328 = reshape(%326, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %329 = @func_246(%327, %328) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %330 = cast(%var_6189, dtype="bool") /* ty=Tensor[(90), bool] */;
  %331 = reshape(%330, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), bool] */;
  %332 = @func_4703(%331) /* ty=(Tensor[(2, 15, 3), uint16],) */;
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 28), float32] */, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %334 = reshape(%333, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
  %335 = @func_4023(%334) /* ty=(Tensor[(14, 2, 14), float32],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
  %338 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 28), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %339 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 28), float32] */, dtype="uint32") /* ty=Tensor[(14, 28), uint32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %341 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %342 = %341.2;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
  %344 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %345 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %346 = %329.0;
  %347 = %332.0;
  %348 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %349 = add(%339, %340) /* ty=Tensor[(14, 28), uint32] */;
  %350 = acos(%343) /* ty=Tensor[(189, 9), float64] */;
  %351 = %344.2;
  (%345, %346, meta[relay.Constant][22] /* ty=Tensor[(189), float32] */, meta[relay.Constant][23] /* ty=Tensor[(1260), float64] */, %347, %var_6189, %348, %349, %350, %351)
}

def @func_5095(%var_5094: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float32],) {
  %358 = fn (%var_5087: Tensor[(10, 11, 10), float64]) -> (Tensor[(10, 11, 10), float32],) {
    %352 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
    %353 = cast(%var_5087, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
    %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%352, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %357 = mod(%355, %356) /* ty=Tensor[(10, 11, 10), float32] */;
    (%357,)
  };
  %358(%var_5094) /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_2421(%var_2408: Tensor[(189, 1), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) {
  %359 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %360 = cast(%var_2408, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %361 = cast(meta[relay.Constant][25] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %362 = reshape(%360, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %363 = reshape(%361, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %364 = @func_246(%362, %363) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %365 = cast(%var_2408, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %366 = reshape(%365, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %367 = @func_2225(%366) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) */;
  %368 = %359.1;
  %369 = %364.1;
  %370 = %367.5;
  (%368, %369, %var_2408, meta[relay.Constant][25] /* ty=Tensor[(1260), float64] */, %370)
}

def @func_3812() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) {
  @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */
}

def @func_4291(%var_4285: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), float64],) {
  %371 = cast(%var_4285, dtype="float64") /* ty=Tensor[(10, 11, 16), float64] */;
  %372 = acos(%371) /* ty=Tensor[(10, 11, 16), float64] */;
  (%372,)
}

def @func_4231() -> (Tensor[(2, 15, 3), bool],) {
  %375 = fn () -> (Tensor[(2, 15, 3), bool],) {
    %373 = @func_4107() /* ty=(Tensor[(2, 15, 3), bool],) */;
    %374 = %373.0;
    (%374,)
  };
  %375() /* ty=(Tensor[(2, 15, 3), bool],) */
}

def @func_4395() -> Tensor[(10, 11, 10), float64] {
  @func_4393() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_7815(%var_7813: Tensor[(6, 8, 14), int16], %var_7814: Tensor[(6, 8, 14), int16]) -> (Tensor[(6, 8, 14), int16], Tensor[(10, 11, 10), float64]) {
  @func_7811(%var_7813, %var_7814) /* ty=(Tensor[(6, 8, 14), int16], Tensor[(10, 11, 10), float64]) */
}

def @func_3146() -> Tensor[(10, 11, 10), bool] {
  %377 = fn () -> Tensor[(10, 11, 10), bool] {
    %376 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %376.1
  };
  %377() /* ty=Tensor[(10, 11, 10), bool] */
}

def @func_7711() -> Tensor[(10, 11, 10), float64] {
  @func_7709() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_7565() -> (Tensor[(11, 5, 1100), bool],) {
  %392 = fn () -> (Tensor[(11, 5, 1100), bool],) {
    %378 = @func_7043() /* ty=(Tensor[(11, 5, 1), float32], Tensor[(11, 5, 1), float32]) */;
    %379 = %378.1;
    %380 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1100), float64] */, dtype="float64") /* ty=Tensor[(1, 1100), float64] */;
    %381 = reshape(%380, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
    %382 = @func_4535(%381) /* ty=(Tensor[(10, 11, 10), int32],) */;
    %383 = %382.0;
    %384 = cast(%383, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %385 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1, 1100), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %386 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1100), float64] */, dtype="float64") /* ty=Tensor[(1, 1100), float64] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %388 = power(%386, %387) /* ty=Tensor[(?, 1100), float64] */;
    %389 = cast(%379, dtype="bool") /* ty=Tensor[(11, 5, 1), bool] */;
    %390 = cast(%388, dtype="bool") /* ty=Tensor[(?, 1100), bool] */;
    %391 = less(%389, %390) /* ty=Tensor[(11, 5, 1100), bool] */;
    (%391,)
  };
  %392() /* ty=(Tensor[(11, 5, 1100), bool],) */
}

def @func_3341() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %396 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
    %393 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %394 = %393.0;
    %395 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
    (%394, %395)
  };
  %396() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_3929(%var_3928: Tensor[(10, 11, 10), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
  %408 = fn (%var_3919: Tensor[(10, 11, 10), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
    %397 = cast(meta[relay.Constant][27] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
    %398 = reshape(%397, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
    %399 = @func_333(%398) /* ty=(Tensor[(2, 14, 14), float64],) */;
    %400 = @func_3597() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
    %401 = %400.1;
    %402 = cast(%var_3919, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %406 = %399.0;
    %407 = greater_equal(%404, %405) /* ty=Tensor[(10, 11, 10), bool] */;
    (%406, meta[relay.Constant][27] /* ty=Tensor[(392), int32] */, %407)
  };
  %408(%var_3928) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */
}

def @func_4362(%var_4359: Tensor[(1, 13, 12), uint32], %var_4360: Tensor[(13, 13, 12), uint32], %var_4361: Tensor[(392), int32]) -> (Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %420 = fn (%var_4318: Tensor[(1, 13, 12), uint32], %var_4319: Tensor[(13, 13, 12), uint32], %var_4334: Tensor[(392), int32]) -> (Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
    %409 = cast(%var_4318, dtype="uint32") /* ty=Tensor[(1, 13, 12), uint32] */;
    %410 = cast(%var_4319, dtype="uint32") /* ty=Tensor[(13, 13, 12), uint32] */;
    %411 = cast(%var_4334, dtype="int32") /* ty=Tensor[(392), int32] */;
    %412 = reshape(%411, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
    %413 = @func_1175(%412) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
    %414 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
    %415 = @func_3734() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), float32], uint64, Tensor[(273), uint64], Tensor[(10, 11, 10), float64]) */;
    %416 = multiply(%409, %410) /* ty=Tensor[(13, 13, 12), uint32] */;
    %417 = %413.1;
    %418 = %414.1;
    %419 = %415.0;
    (%416, %417, %var_4334, %418, %419)
  };
  %420(%var_4359, %var_4360, %var_4361) /* ty=(Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */
}

def @func_4045() -> (Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) {
  %427 = fn () -> (Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) {
    %421 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
    %422 = cast(meta[relay.Constant][28] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
    %423 = reshape(%422, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
    %424 = @func_333(%423) /* ty=(Tensor[(2, 14, 14), float64],) */;
    %425 = %421.0;
    %426 = %424.0;
    (%425, %426, meta[relay.Constant][28] /* ty=Tensor[(392), int32] */)
  };
  %427() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) */
}

def @func_1512(%var_1475: Tensor[(10, 7, 5), float64], %var_1476: Tensor[(10, 7, 5), float64], %var_1499: Tensor[(392), int32]) -> (Tensor[(10, 7, 5), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  %428 = cast(%var_1476, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
  %429 = shape_of(%var_1475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_1475, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = cast(%var_1499, dtype="int32") /* ty=Tensor[(392), int32] */;
  %433 = reshape(%432, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), int32] */;
  %434 = @func_333(%433) /* ty=(Tensor[(2, 14, 14), float64],) */;
  %435 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %436 = floor_divide(%430, %431) /* ty=Tensor[(10, 7, 5), float64] */;
  %437 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %438 = %434.0;
  %439 = %435.0;
  (%436, %437, %438, %var_1499, %439)
}

def @func_2916() -> (Tensor[(10, 11, 10), float64],) {
  %440 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  (%440,)
}

def @func_5242() -> Tensor[(10, 11, 10), bool] {
  @func_5240() /* ty=Tensor[(10, 11, 10), bool] */
}

def @func_3843() -> (Tensor[(10, 11, 10), float32],) {
  @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_7073(%var_7059: Tensor[(11, 12, 9), int16], %var_7060: Tensor[(11, 12, 9), int16]) -> (Tensor[(11, 12, 9), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %441 = cast(%var_7060, dtype="bool") /* ty=Tensor[(11, 12, 9), bool] */;
  %442 = shape_of(%var_7059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_7059, dtype="bool") /* ty=Tensor[(11, 12, 9), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = @func_6110() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %446 = greater(%443, %444) /* ty=Tensor[(11, 12, 9), bool] */;
  %447 = %445.1;
  %448 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  (%446, %447, %448)
}

def @func_5340(%var_5266: Tensor[(10, 14, 9), float32], %var_5293: Tensor[(189), uint8], %var_5307: Tensor[(90), bool]) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(8, 4, 8), float32], Tensor[(189), uint8], Tensor[(2, 15, 3), uint16], Tensor[(90), bool], Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float64]) {
  %449 = @func_4202() /* ty=Tensor[(10, 14, 9), float32] */;
  %450 = cast(%var_5266, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %454 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %455 = cast(%var_5293, dtype="uint8") /* ty=Tensor[(189), uint8] */;
  %456 = reshape(%455, newshape=[189]) /* ty=Tensor[(189), uint8] */;
  %457 = @func_3419(%456) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(27), uint8], Tensor[(10, 11, 10), float64], Tensor[(8, 4, 8), float32], Tensor[(256, 1260), bool], Tensor[(189), float32]) */;
  %458 = cast(%var_5307, dtype="bool") /* ty=Tensor[(90), bool] */;
  %459 = reshape(%458, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), bool] */;
  %460 = @func_4703(%459) /* ty=(Tensor[(2, 15, 3), uint16],) */;
  %461 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %462 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %463 = mod(%452, %453) /* ty=Tensor[(10, 14, 9), float64] */;
  %464 = %454.0;
  %465 = %457.4;
  %466 = %460.0;
  %467 = %461.3;
  %468 = %462.0;
  (%463, %464, %465, %var_5293, %466, %var_5307, %467, %468)
}

def @func_2806() -> Tensor[(10, 11, 10), float64] {
  %469 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %469() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_1781() -> Tensor[(10, 11, 10), float64] {
  @func_1779() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4675() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %470 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %471 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %472 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  %473 = %470.0;
  (%471, %472, %473)
}

def @func_6716() -> Tensor[(320), float32] {
  %474 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
  %474.3
}

def @func_4393() -> Tensor[(10, 11, 10), float64] {
  @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4317() -> (Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
  %478 = fn () -> (Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
    %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
    %476 = erf(%475) /* ty=Tensor[(5, 10, 15), float64] */;
    %477 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    (%476, %477)
  };
  %478() /* ty=(Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_4729(%var_4727: Tensor[(13, 14, 7), int8], %var_4728: Tensor[(13, 14, 7), int8]) -> (Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) {
  %486 = fn (%var_4707: Tensor[(13, 14, 7), int8], %var_4708: Tensor[(13, 14, 7), int8]) -> (Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) {
    %479 = cast(%var_4708, dtype="int8") /* ty=Tensor[(13, 14, 7), int8] */;
    %480 = shape_of(%var_4707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_4707, dtype="int8") /* ty=Tensor[(13, 14, 7), int8] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %483 = cast(%var_4708, dtype="float64") /* ty=Tensor[(13, 14, 7), float64] */;
    %484 = right_shift(%481, %482) /* ty=Tensor[(13, 14, 7), int8] */;
    %485 = sin(%483) /* ty=Tensor[(13, 14, 7), float64] */;
    (%484, %485)
  };
  %486(%var_4727, %var_4728) /* ty=(Tensor[(13, 14, 7), int8], Tensor[(13, 14, 7), float64]) */
}

def @func_816() -> (Tensor[(10, 11, 10), float64],) {
  %488 = fn () -> (Tensor[(10, 11, 10), float64],) {
    %487 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    (%487,)
  };
  %488() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_7926() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  @func_7924() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */
}

def @func_6440() -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32]) {
  %493 = fn () -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32]) {
    %489 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %490 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
    %491 = %489.1;
    %492 = %490.3;
    (%491, %492)
  };
  %493() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(320), float32]) */
}

def @func_2079() -> Tensor[(10, 11, 10), float64] {
  %497 = fn () -> Tensor[(10, 11, 10), float64] {
    %494 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
    %495 = %494.0;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    log2(%496) /* ty=Tensor[(10, 11, 10), float64] */
  };
  %497() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3682() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %498 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %499 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
  %500 = %498.0;
  %501 = %499.1;
  (%500, %501)
}

def @func_3841() -> (Tensor[(10, 11, 10), float32],) {
  %502 = @func_2433() /* ty=Tensor[(10, 11, 10), float32] */;
  (%502,)
}

def @func_4826() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) {
  %515 = fn () -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) {
    %503 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %506 = reshape(%505, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
    %507 = @func_3483(%506) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
    %508 = @func_4316() /* ty=(Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) */;
    %509 = @func_4784() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32], Tensor[(189), float64], Tensor[(320), float32], Tensor[(3, 63), float32]) */;
    %510 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
    %511 = %507.0;
    %512 = %508.0;
    %513 = %509.4;
    %514 = %510.2;
    (%504, %511, %512, %513, %514)
  };
  %515() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) */
}

def @func_5649() -> (Tensor[(3, 7, 9), float64],) {
  @func_5647() /* ty=(Tensor[(3, 7, 9), float64],) */
}

def @func_965() -> (Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) {
  @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */
}

def @func_5075() -> Tensor[(10, 11, 10), float32] {
  @func_5073() /* ty=Tensor[(10, 11, 10), float32] */
}

def @func_1178(%var_1176: Tensor[(98, 4), int32]) -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) {
  @func_1175(%var_1176) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */
}

def @func_2227(%var_2226: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) {
  %532 = fn (%var_2208: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) {
    %516 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
    %517 = @func_1759() /* ty=(Tensor[(10, 11, 10), float32],) */;
    %518 = @func_865() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %519 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
    %520 = %519.2;
    %521 = cast(%var_2208, dtype="float32") /* ty=Tensor[(189), float32] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(1), int32] */;
    %523 = cast(%520, dtype="float32") /* ty=Tensor[(189), float32] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?), float32] */;
    %525 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %526 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    %527 = %516.3;
    %528 = %517.0;
    %529 = %518.0;
    %530 = floor_divide(%523, %524) /* ty=Tensor[(189), float32] */;
    %531 = %525.0;
    (%526, %527, %528, %529, %530, %531)
  };
  %532(%var_2226) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) */
}

def @func_3598() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
  %540 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) {
    %533 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %534 = %533.0;
    %535 = cast(%534, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %536 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
    %537 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
    %538 = log10(%535) /* ty=Tensor[(10, 11, 10), float64] */;
    %539 = %536.1;
    (%537, %538, %539)
  };
  %540() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */
}

def @func_4592(%var_4582: Tensor[(2028), uint32], %var_4587: Tensor[(2, 15, 3), bool]) -> (Tensor[(10, 11, 10), bool], Tensor[(392), int32], Tensor[(14, 28), int32], Tensor[(392), int32], Tensor[(39, 4), uint32], Tensor[(2028), uint32], Tensor[(2, 15, 3), float64]) {
  %541 = @func_3014() /* ty=(Tensor[(10, 11, 10), bool],) */;
  %542 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 28), int32] */, dtype="int32") /* ty=Tensor[(14, 28), int32] */;
  %543 = reshape(%542, newshape=[392]) /* ty=Tensor[(392), int32] */;
  %544 = @func_3544(%543) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(39, 4), uint32] */, dtype="uint32") /* ty=Tensor[(39, 4), uint32] */;
  %546 = cast(%var_4582, dtype="uint32") /* ty=Tensor[(2028), uint32] */;
  %547 = %544.2;
  %548 = cast(%547, dtype="int32") /* ty=Tensor[(392), int32] */;
  %549 = reshape(%545, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), uint32] */;
  %550 = reshape(%546, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint32] */;
  %551 = reshape(%548, newshape=[392]) /* ty=Tensor[(392), int32] */;
  %552 = @func_4358(%549, %550, %551) /* ty=(Tensor[(13, 13, 12), uint32], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %553 = @func_4107() /* ty=(Tensor[(2, 15, 3), bool],) */;
  %554 = %553.0;
  %555 = cast(%var_4587, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %559 = %541.0;
  %560 = %552.2;
  %561 = add(%557, %558) /* ty=Tensor[(2, 15, 3), float64] */;
  (%559, %547, meta[relay.Constant][30] /* ty=Tensor[(14, 28), int32] */, %560, meta[relay.Constant][31] /* ty=Tensor[(39, 4), uint32] */, %var_4582, %561)
}

def @func_5507() -> (Tensor[(10, 11, 10), float64],) {
  @func_5505() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_5945() -> (Tensor[(10, 11, 10), float64],) {
  %562 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %564 = acos(%563) /* ty=Tensor[(10, 11, 10), float32] */;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %566 = exp(%565) /* ty=Tensor[(10, 11, 10), float64] */;
  (%566,)
}

def @func_1933() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %586 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
    %567 = @func_1646() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
    %568 = %567.0;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
    %570 = sin(%569) /* ty=Tensor[(10, 11, 10), float32] */;
    %571 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
    %572 = cast(%571, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %573 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%570, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %576 = cast(meta[relay.Constant][32] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
    %577 = reshape(%576, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
    %578 = @func_1175(%577) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
    %579 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %580 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %581 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
    %582 = power(%574, %575) /* ty=Tensor[(10, 11, 10), float64] */;
    %583 = %578.3;
    %584 = %579.1;
    %585 = %580.0;
    (%581, %582, %583, meta[relay.Constant][32] /* ty=Tensor[(392), int32] */, %584, %585)
  };
  %586() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */
}

def @func_7704() -> (Tensor[(10, 11, 10), float64], Tensor[(5, 10, 15), float64], Tensor[(10, 11, 10), float64]) {
  %587 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %588 = @func_4825() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), int16], Tensor[(5, 10, 15), float64], Tensor[(3, 63), float32], Tensor[(10, 11, 10), float64]) */;
  %589 = @func_7136() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */;
  %590 = %587.0;
  %591 = %588.2;
  %592 = %589.0;
  (%590, %591, %592)
}

def @func_3657(%var_3654: uint32, %var_3655: Tensor[(16, 16, 14), uint32], %var_3656: Tensor[(135), int32]) -> (Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) {
  %601 = fn (%var_3617: uint32, %var_3618: Tensor[(16, 16, 14), uint32], %var_3633: Tensor[(135), int32]) -> (Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) {
    %593 = cast(%var_3617, dtype="uint32") /* ty=uint32 */;
    %594 = cast(%var_3618, dtype="uint32") /* ty=Tensor[(16, 16, 14), uint32] */;
    %595 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
    %596 = cast(%var_3633, dtype="int32") /* ty=Tensor[(135), int32] */;
    %597 = reshape(%596, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), int32] */;
    %598 = subtract(%593, %594) /* ty=Tensor[(16, 16, 14), uint32] */;
    %599 = %595.0;
    %600 = @func_714(%597) /* ty=Tensor[(3, 3, 15), int32] */;
    (%598, %599, %600, %var_3633)
  };
  %601(%var_3654, %var_3655, %var_3656) /* ty=(Tensor[(16, 16, 14), uint32], Tensor[(10, 11, 10), float64], Tensor[(3, 3, 15), int32], Tensor[(135), int32]) */
}

def @func_3265(%var_3264: Tensor[(16, 7, 14), float32]) -> (Tensor[(16, 7, 14), float32], Tensor[(10, 11, 10), float64]) {
  %606 = fn (%var_3241: Tensor[(16, 7, 14), float32]) -> (Tensor[(16, 7, 14), float32], Tensor[(10, 11, 10), float64]) {
    %602 = cast(%var_3241, dtype="float32") /* ty=Tensor[(16, 7, 14), float32] */;
    %603 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %604 = erf(%602) /* ty=Tensor[(16, 7, 14), float32] */;
    %605 = %603.0;
    (%604, %605)
  };
  %606(%var_3264) /* ty=(Tensor[(16, 7, 14), float32], Tensor[(10, 11, 10), float64]) */
}

def @func_7267(%var_7264: Tensor[(7, 9, 6), uint32], %var_7265: Tensor[(7, 9, 6), uint32], %var_7266: Tensor[(7, 9, 6), uint32]) -> (Tensor[(7, 9, 6), bool], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(7, 9, 6), uint8]) {
  %622 = fn (%var_7232: Tensor[(7, 9, 6), uint32], %var_7233: Tensor[(7, 9, 6), uint32], %var_7256: Tensor[(7, 9, 6), uint32]) -> (Tensor[(7, 9, 6), bool], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(7, 9, 6), uint8]) {
    %607 = cast(%var_7233, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %608 = shape_of(%var_7232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%var_7232, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %611 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
    %612 = @func_878() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %613 = cast(%var_7256, dtype="uint8") /* ty=Tensor[(7, 9, 6), uint8] */;
    %614 = shape_of(%var_7232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%var_7232, dtype="uint8") /* ty=Tensor[(7, 9, 6), uint8] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %617 = greater_equal(%609, %610) /* ty=Tensor[(7, 9, 6), bool] */;
    %618 = %611.1;
    %619 = %612.0;
    %620 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
    %621 = add(%615, %616) /* ty=Tensor[(7, 9, 6), uint8] */;
    (%617, %618, %619, %620, %621)
  };
  %622(%var_7264, %var_7265, %var_7266) /* ty=(Tensor[(7, 9, 6), bool], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(7, 9, 6), uint8]) */
}

def @func_5061() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */
}

def @func_5185() -> Tensor[(392), int32] {
  @func_5183() /* ty=Tensor[(392), int32] */
}

def @func_1067() -> Tensor[(10, 11, 10), float64] {
  @func_1065() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_1759() -> (Tensor[(10, 11, 10), float32],) {
  %623 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %624 = %623.1;
  (%624,)
}

def @func_7924() -> (Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %625 = @func_6539() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) */;
  %626 = @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
  %627 = %625.1;
  %628 = %626.0;
  (%627, %628)
}

def @func_1027(%var_1025: Tensor[(135), int32], %var_1026: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) {
  @func_1023(%var_1025, %var_1026) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) */
}

def @func_1617() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %644 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
    %629 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
    %630 = cast(%629, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %631 = cast(%629, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %632 = atanh(%631) /* ty=Tensor[(10, 11, 10), float64] */;
    %633 = cast(%629, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %637 = not_equal(%635, %636) /* ty=Tensor[(10, 11, 10), bool] */;
    %638 = cast(%632, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %640 = cast(%637, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %642 = sinh(%630) /* ty=Tensor[(10, 11, 10), float64] */;
    %643 = less(%640, %641) /* ty=Tensor[(10, 11, 10), bool] */;
    (%642, %643)
  };
  %644() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */
}

def @func_7762() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %652 = fn () -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
    %645 = @func_6987() /* ty=(Tensor[(10, 11, 10), float32],) */;
    %646 = %645.0;
    %647 = cast(%646, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %648 = reshape(%647, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
    %649 = @func_6394(%648) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(1100), float64], Tensor[(189, 9), float64]) */;
    %650 = @func_6801() /* ty=Tensor[(10, 11, 10), float64] */;
    %651 = %649.1;
    (%646, %650, %651)
  };
  %652() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_7402(%var_7400: Tensor[(5, 3, 7), float32], %var_7401: Tensor[(5, 3, 7), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(5, 3, 7), float32], Tensor[(5, 3, 7), bool]) {
  %675 = fn (%var_7345: Tensor[(5, 3, 7), float32], %var_7346: Tensor[(5, 3, 7), float32]) -> (Tensor[(10, 11, 10), bool], Tensor[(5, 3, 7), float32], Tensor[(5, 3, 7), bool]) {
    %653 = @func_2156() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), bool]) */;
    %654 = cast(%var_7346, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
    %655 = shape_of(%var_7345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%var_7345, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %658 = power(%656, %657) /* ty=Tensor[(5, 3, 7), float32] */;
    %659 = cast(%var_7346, dtype="uint8") /* ty=Tensor[(5, 3, 7), uint8] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="uint8") /* ty=Tensor[(5, 3, 7), uint8] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %663 = subtract(%661, %662) /* ty=Tensor[(5, 3, 7), uint8] */;
    %664 = cast(%var_7346, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
    %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%663, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %668 = cast(%663, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
    %669 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%658, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %672 = %653.1;
    %673 = floor_divide(%666, %667) /* ty=Tensor[(5, 3, 7), float32] */;
    %674 = less_equal(%670, %671) /* ty=Tensor[(5, 3, 7), bool] */;
    (%672, %673, %674)
  };
  %675(%var_7400, %var_7401) /* ty=(Tensor[(10, 11, 10), bool], Tensor[(5, 3, 7), float32], Tensor[(5, 3, 7), bool]) */
}

def @func_1023(%var_1007: Tensor[(135), int32], %var_1020: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 3, 15), int32], Tensor[(135), int32], Tensor[(3, 7, 9), float32], Tensor[(189), float32]) {
  %676 = @func_963() /* ty=(Tensor[(10, 11, 10), uint8], Tensor[(10, 11, 10), float32]) */;
  %677 = cast(%var_1007, dtype="int32") /* ty=Tensor[(135), int32] */;
  %678 = reshape(%677, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), int32] */;
  %679 = cast(%var_1020, dtype="float32") /* ty=Tensor[(189), float32] */;
  %680 = reshape(%679, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %681 = @func_160(%680) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %682 = %676.1;
  %683 = @func_714(%678) /* ty=Tensor[(3, 3, 15), int32] */;
  %684 = %681.0;
  (%682, %683, %var_1007, %684, %var_1020)
}

def @func_5647() -> (Tensor[(3, 7, 9), float64],) {
  %685 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
  %686 = %685.6;
  (%686,)
}

def @func_1065() -> Tensor[(10, 11, 10), float64] {
  %687 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %687.0
}

def @func_6942(%var_6900: Tensor[(15, 13, 7), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(15, 13, 7), float32]) {
  %688 = cast(%var_6900, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %689 = exp(%688) /* ty=Tensor[(15, 13, 7), float64] */;
  %690 = cast(%var_6900, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %694 = bitwise_xor(%692, %693) /* ty=Tensor[(15, 13, 7), int8] */;
  %695 = cast(%689, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="int8") /* ty=Tensor[(15, 13, 7), int8] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %699 = add(%697, %698) /* ty=Tensor[(15, 13, 7), int8] */;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %701 = shape_of(%var_6900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_6900, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %704 = @func_5955() /* ty=Tensor[(10, 11, 10), float32] */;
  %705 = mod(%702, %703) /* ty=Tensor[(15, 13, 7), float32] */;
  (%704, %705)
}

def @func_2918() -> (Tensor[(10, 11, 10), float64],) {
  @func_2916() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_3015() -> (Tensor[(10, 11, 10), bool],) {
  %708 = fn () -> (Tensor[(10, 11, 10), bool],) {
    %706 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
    %707 = %706.4;
    (%707,)
  };
  %708() /* ty=(Tensor[(10, 11, 10), bool],) */
}

def @func_4161(%var_4159: Tensor[(6, 13, 8), float32], %var_4160: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(6, 13, 8), float64]) {
  %719 = fn (%var_4111: Tensor[(6, 13, 8), float32], %var_4115: Tensor[(189), float32]) -> (Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(6, 13, 8), float64]) {
    %709 = cast(%var_4115, dtype="float32") /* ty=Tensor[(189), float32] */;
    %710 = reshape(%709, newshape=[189]) /* ty=Tensor[(189), float32] */;
    %711 = @func_2225(%710) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1260), float64], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float64]) */;
    %712 = cast(%var_4111, dtype="float32") /* ty=Tensor[(6, 13, 8), float32] */;
    %713 = sigmoid(%712) /* ty=Tensor[(6, 13, 8), float32] */;
    %714 = cast(%713, dtype="float64") /* ty=Tensor[(6, 13, 8), float64] */;
    %715 = %711.3;
    %716 = @func_2433() /* ty=Tensor[(10, 11, 10), float32] */;
    %717 = @func_2805() /* ty=Tensor[(10, 11, 10), float64] */;
    %718 = log(%714) /* ty=Tensor[(6, 13, 8), float64] */;
    (%715, %var_4115, %716, %717, %718)
  };
  %719(%var_4159, %var_4160) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(189), float32], Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(6, 13, 8), float64]) */
}

def @func_6989() -> (Tensor[(10, 11, 10), float32],) {
  @func_6987() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_4500(%var_4463: Tensor[(10, 14, 8), uint64], %var_4464: Tensor[(10, 14, 8), uint64], %var_4484: Tensor[(10, 14, 8), uint64]) -> (Tensor[(10, 14, 8), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 14, 8), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %720 = cast(%var_4464, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %721 = shape_of(%var_4463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_4463, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = cast(%var_4484, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %725 = shape_of(%var_4463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%var_4463, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %728 = @func_3810() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(7, 3, 5), bool], Tensor[(105), uint8], Tensor[(10, 11, 10), bool]) */;
  %729 = greater_equal(%722, %723) /* ty=Tensor[(10, 14, 8), bool] */;
  %730 = @func_4414() /* ty=Tensor[(10, 11, 10), float64] */;
  %731 = power(%726, %727) /* ty=Tensor[(10, 14, 8), float64] */;
  %732 = %728.2;
  %733 = @func_4393() /* ty=Tensor[(10, 11, 10), float64] */;
  (%729, %730, %731, %732, %733)
}

def @func_4294(%var_4292: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), float64],) {
  @func_4291(%var_4292) /* ty=(Tensor[(10, 11, 16), float64],) */
}

def @func_6801() -> Tensor[(10, 11, 10), float64] {
  @func_4625() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4935() -> (Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
  @func_4933() /* ty=(Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */
}

def @func_4996() -> (Tensor[(10, 11, 10), float32],) {
  %734 = @func_2109() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %735 = %734.0;
  (%735,)
}

def @func_6803() -> Tensor[(10, 11, 10), float64] {
  @func_6801() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_6470(%var_6469: Tensor[(392), int32]) -> (Tensor[(392), int32], Tensor[(392), uint8]) {
  %744 = fn (%var_6459: Tensor[(392), int32]) -> (Tensor[(392), int32], Tensor[(392), uint8]) {
    %736 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
    %737 = %736.1;
    %738 = cast(%var_6459, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(1), int32] */;
    %740 = cast(%737, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %742 = @func_5183() /* ty=Tensor[(392), int32] */;
    %743 = subtract(%740, %741) /* ty=Tensor[(392), uint8] */;
    (%742, %743)
  };
  %744(%var_6469) /* ty=(Tensor[(392), int32], Tensor[(392), uint8]) */
}

def @func_879() -> (Tensor[(10, 11, 10), float64],) {
  %747 = fn () -> (Tensor[(10, 11, 10), float64],) {
    %745 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
    %746 = %745.0;
    (%746,)
  };
  %747() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_4222() -> (uint64,) {
  @func_4220() /* ty=(uint64,) */
}

def @func_163(%var_161: Tensor[(3, 7, 9), float32]) -> (Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) {
  @func_160(%var_161) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */
}

def @func_4677() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */
}

def @func_2623() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */
}

def @func_2513(%var_2463: uint64, %var_2464: Tensor[(3, 13, 7), uint64]) -> (Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) {
  %748 = cast(%var_2463, dtype="bool") /* ty=bool */;
  %749 = cast(%var_2464, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %750 = greater_equal(%748, %749) /* ty=Tensor[(3, 13, 7), bool] */;
  %751 = cast(%750, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %752 = shape_of(%var_2464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_2464, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %755 = cast(%var_2464, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %756 = not_equal(%753, %754) /* ty=Tensor[(3, 13, 7), bool] */;
  %757 = exp(%755) /* ty=Tensor[(3, 13, 7), float32] */;
  (%756, %757)
}

def @func_6825() -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float32]) {
  %758 = @func_4675() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %759 = @func_4996() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %760 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  %761 = @func_6716() /* ty=Tensor[(320), float32] */;
  %762 = %758.1;
  %763 = %759.0;
  (%760, %761, %762, %763)
}

def @func_4933() -> (Tensor[(392), int32], Tensor[(10, 11, 10), bool]) {
  %764 = @func_4044() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) */;
  %765 = %764.2;
  %766 = @func_3145() /* ty=Tensor[(10, 11, 10), bool] */;
  (%765, %766)
}

def @func_7077(%var_7075: Tensor[(11, 12, 9), int16], %var_7076: Tensor[(11, 12, 9), int16]) -> (Tensor[(11, 12, 9), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  @func_7073(%var_7075, %var_7076) /* ty=(Tensor[(11, 12, 9), bool], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) */
}

def @func_7845() -> (Tensor[(10, 11, 10), float64],) {
  %767 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
  %768 = %767.0;
  (%768,)
}

def @func_4705(%var_4704: Tensor[(2, 15, 3), bool]) -> (Tensor[(2, 15, 3), uint16],) {
  %776 = fn (%var_4685: Tensor[(2, 15, 3), bool]) -> (Tensor[(2, 15, 3), uint16],) {
    %769 = @func_4230() /* ty=(Tensor[(2, 15, 3), bool],) */;
    %770 = %769.0;
    %771 = cast(%var_4685, dtype="uint16") /* ty=Tensor[(2, 15, 3), uint16] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="uint16") /* ty=Tensor[(2, 15, 3), uint16] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %775 = right_shift(%773, %774) /* ty=Tensor[(2, 15, 3), uint16] */;
    (%775,)
  };
  %776(%var_4704) /* ty=(Tensor[(2, 15, 3), uint16],) */
}

def @func_6512(%var_6510: Tensor[(1274), int8]) -> (Tensor[(10, 11, 10), float64], Tensor[(13, 14, 7), int8], Tensor[(1274), int8]) {
  @func_6509(%var_6510) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(13, 14, 7), int8], Tensor[(1274), int8]) */
}

def @func_5616(%var_5614: Tensor[(1, 273), uint64], %var_5615: Tensor[(1760), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), bool], uint64, Tensor[(1, 273), uint64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 16), float64], Tensor[(1760), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float32]) {
  %793 = fn (%var_5576: Tensor[(1, 273), uint64], %var_5592: Tensor[(1760), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), bool], uint64, Tensor[(1, 273), uint64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 16), float64], Tensor[(1760), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float32]) {
    %777 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %778 = cast(%var_5576, dtype="uint64") /* ty=Tensor[(1, 273), uint64] */;
    %779 = reshape(%777, newshape=[]) /* ty=uint64 */;
    %780 = reshape(%778, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), uint64] */;
    %781 = @func_2513(%779, %780) /* ty=(Tensor[(3, 13, 7), bool], Tensor[(3, 13, 7), float32]) */;
    %782 = cast(%var_5592, dtype="float64") /* ty=Tensor[(1760), float64] */;
    %783 = reshape(%782, newshape=[10, 11, 16]) /* ty=Tensor[(10, 11, 16), float64] */;
    %784 = @func_4291(%783) /* ty=(Tensor[(10, 11, 16), float64],) */;
    %785 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
    %786 = @func_4044() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 14, 14), float64], Tensor[(392), int32]) */;
    %787 = @func_5073() /* ty=Tensor[(10, 11, 10), float32] */;
    %788 = %781.0;
    %789 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
    %790 = %784.0;
    %791 = %785.1;
    %792 = %786.0;
    (%787, %788, meta[relay.Constant][33] /* ty=uint64 */, %var_5576, %789, %790, %var_5592, %791, %792)
  };
  %793(%var_5614, %var_5615) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(3, 13, 7), bool], uint64, Tensor[(1, 273), uint64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 16), float64], Tensor[(1760), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float32]) */
}

def @func_6540() -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) {
  %800 = fn () -> (Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) {
    %794 = @func_6146() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64]) */;
    %795 = cast(meta[relay.Constant][34] /* ty=Tensor[(392, 1), int32] */, dtype="int32") /* ty=Tensor[(392, 1), int32] */;
    %796 = reshape(%795, newshape=[392]) /* ty=Tensor[(392), int32] */;
    %797 = @func_3544(%796) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
    %798 = %794.0;
    %799 = %797.1;
    (%798, %799, meta[relay.Constant][34] /* ty=Tensor[(392, 1), int32] */)
  };
  %800() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 11, 10), float64], Tensor[(392, 1), int32]) */
}

def @func_6110() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  %801 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %802 = %801.4;
  %803 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  (%802, %803)
}

def @func_5169(%var_5168: Tensor[(1100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) {
  %812 = fn (%var_5145: Tensor[(1100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) {
    %804 = cast(%var_5145, dtype="float64") /* ty=Tensor[(1100), float64] */;
    %805 = reshape(%804, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float64] */;
    %806 = @func_3927(%805) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(392), int32], Tensor[(10, 11, 10), bool]) */;
    %807 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
    %808 = %807.1;
    %809 = cast(%808, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %810 = %806.0;
    %811 = sqrt(%809) /* ty=Tensor[(10, 14, 9), float32] */;
    (%810, %var_5145, %811)
  };
  %812(%var_5168) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) */
}

def @func_4626() -> Tensor[(10, 11, 10), float64] {
  %813 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_4393() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %813() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_7782() -> (Tensor[(10, 11, 10), float64], Tensor[(1100), float64]) {
  %820 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(1100), float64]) {
    %814 = @func_2621() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) */;
    %815 = %814.7;
    %816 = cast(%815, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
    %817 = reshape(%816, newshape=[1100]) /* ty=Tensor[(1100), float64] */;
    %818 = @func_5167(%817) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(1100), float64], Tensor[(10, 14, 9), float32]) */;
    %819 = %818.1;
    (%815, %819)
  };
  %820() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(1100), float64]) */
}

def @func_4998() -> (Tensor[(10, 11, 10), float32],) {
  @func_4996() /* ty=(Tensor[(10, 11, 10), float32],) */
}

def @func_5123() -> Tensor[(10, 11, 10), float64] {
  %821 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_1065() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %821() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_3008(%var_3006: Tensor[(1, 105), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) {
  @func_3005(%var_3006) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) */
}

def @func_6945(%var_6943: Tensor[(15, 13, 7), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(15, 13, 7), float32]) {
  @func_6942(%var_6943) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(15, 13, 7), float32]) */
}

def @func_6827() -> (Tensor[(10, 11, 10), bool], Tensor[(320), float32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float32]) {
  @func_6825() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(320), float32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float32]) */
}

def @func_1749() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) {
  @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */
}

def @func_5073() -> Tensor[(10, 11, 10), float32] {
  %822 = @func_3841() /* ty=(Tensor[(10, 11, 10), float32],) */;
  %822.0
}

def @func_5846(%var_5813: int8, %var_5814: Tensor[(11, 1, 12), int8]) -> (Tensor[(11, 1, 12), int8], Tensor[(392), int32], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32]) {
  %823 = cast(%var_5813, dtype="int8") /* ty=int8 */;
  %824 = cast(%var_5814, dtype="int8") /* ty=Tensor[(11, 1, 12), int8] */;
  %825 = @func_5805() /* ty=(Tensor[(10, 11, 10), float32], Tensor[(10, 14, 9), float32], Tensor[(392), int32]) */;
  %826 = @func_815() /* ty=(Tensor[(10, 11, 10), float64],) */;
  %827 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
  %828 = right_shift(%823, %824) /* ty=Tensor[(11, 1, 12), int8] */;
  %829 = %825.2;
  %830 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %831 = %826.0;
  %832 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  %833 = %827.3;
  (%828, %829, %830, %831, %832, %833)
}

def @func_2435() -> Tensor[(10, 11, 10), float32] {
  @func_2433() /* ty=Tensor[(10, 11, 10), float32] */
}

def @func_335(%var_334: Tensor[(2, 14, 14), int32]) -> (Tensor[(2, 14, 14), float64],) {
  %839 = fn (%var_321: Tensor[(2, 14, 14), int32]) -> (Tensor[(2, 14, 14), float64],) {
    %834 = cast(3 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %835 = cast(%var_321, dtype="bool") /* ty=Tensor[(2, 14, 14), bool] */;
    %836 = not_equal(%834, %835) /* ty=Tensor[(2, 14, 14), bool] */;
    %837 = cast(%836, dtype="float64") /* ty=Tensor[(2, 14, 14), float64] */;
    %838 = sinh(%837) /* ty=Tensor[(2, 14, 14), float64] */;
    (%838,)
  };
  %839(%var_334) /* ty=(Tensor[(2, 14, 14), float64],) */
}

def @func_1747() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) {
  %840 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
  %841 = cast(%840, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %842 = cast(meta[relay.Constant][35] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %843 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %844 = reshape(%842, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
  %845 = reshape(%843, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %846 = @func_246(%844, %845) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
  %847 = tan(%841) /* ty=Tensor[(10, 11, 10), float64] */;
  %848 = %846.2;
  (%847, %848, meta[relay.Constant][35] /* ty=Tensor[(189), float32] */, meta[relay.Constant][36] /* ty=Tensor[(1260), float64] */)
}

def @func_389(%var_388: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
  %856 = fn (%var_360: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
    %849 = cast(%var_360, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
    %850 = log10(%849) /* ty=Tensor[(8, 4, 8), float64] */;
    %851 = cast(%var_360, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
    %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%850, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %855 = greater(%853, %854) /* ty=Tensor[(8, 4, 8), bool] */;
    (%855,)
  };
  %856(%var_388) /* ty=(Tensor[(8, 4, 8), bool],) */
}

def @func_4889(%var_4888: Tensor[(10, 11, 10), bool]) -> (Tensor[(98, 4), float32], Tensor[(98, 4), bool], Tensor[(10, 11, 10), uint64]) {
  %875 = fn (%var_4878: Tensor[(10, 11, 10), bool]) -> (Tensor[(98, 4), float32], Tensor[(98, 4), bool], Tensor[(10, 11, 10), uint64]) {
    %857 = @func_1932() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(98, 4), int32], Tensor[(392), int32], Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */;
    %858 = %857.2;
    %859 = cast(%858, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
    %860 = cast(%858, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
    %861 = erf(%860) /* ty=Tensor[(98, 4), float64] */;
    %862 = cast(%861, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
    %863 = shape_of(%858, dtype="int32") /* ty=Tensor[(2), int32] */;
    %864 = cast(%858, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %866 = @func_1826() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %867 = %866.1;
    %868 = cast(%var_4878, dtype="uint64") /* ty=Tensor[(10, 11, 10), uint64] */;
    %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%867, dtype="uint64") /* ty=Tensor[(10, 11, 10), uint64] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %872 = log(%859) /* ty=Tensor[(98, 4), float32] */;
    %873 = less(%864, %865) /* ty=Tensor[(98, 4), bool] */;
    %874 = subtract(%870, %871) /* ty=Tensor[(10, 11, 10), uint64] */;
    (%872, %873, %874)
  };
  %875(%var_4888) /* ty=(Tensor[(98, 4), float32], Tensor[(98, 4), bool], Tensor[(10, 11, 10), uint64]) */
}

def @func_3005(%var_2991: Tensor[(1, 105), uint8]) -> (Tensor[(10, 11, 10), float64], Tensor[(7, 3, 5), bool], Tensor[(1, 105), uint8], Tensor[(10, 11, 10), float64]) {
  %876 = cast(%var_2991, dtype="uint8") /* ty=Tensor[(1, 105), uint8] */;
  %877 = cast(%var_2991, dtype="uint8") /* ty=Tensor[(1, 105), uint8] */;
  %878 = reshape(%876, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %879 = reshape(%877, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %880 = @func_2300(%878, %879) /* ty=(Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) */;
  %881 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  %882 = cast(%881, dtype="float64") /* ty=Tensor[(10, 11, 10), float64] */;
  %883 = @func_1779() /* ty=Tensor[(10, 11, 10), float64] */;
  %884 = %880.0;
  %885 = rsqrt(%882) /* ty=Tensor[(10, 11, 10), float64] */;
  (%883, %884, %var_2991, %885)
}

def @func_7847() -> (Tensor[(10, 11, 10), float64],) {
  @func_7845() /* ty=(Tensor[(10, 11, 10), float64],) */
}

def @func_4203() -> Tensor[(10, 14, 9), float32] {
  %887 = fn () -> Tensor[(10, 14, 9), float32] {
    %886 = @func_1747() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 14, 9), float32], Tensor[(189), float32], Tensor[(1260), float64]) */;
    %886.1
  };
  %887() /* ty=Tensor[(10, 14, 9), float32] */
}

def @func_2303(%var_2301: Tensor[(7, 3, 5), uint8], %var_2302: Tensor[(7, 3, 5), uint8]) -> (Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) {
  %897 = fn (%var_2267: Tensor[(7, 3, 5), uint8], %var_2268: Tensor[(7, 3, 5), uint8]) -> (Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) {
    %888 = cast(%var_2268, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
    %889 = shape_of(%var_2267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %890 = cast(%var_2267, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
    %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %892 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
    %893 = %892.1;
    %894 = cast(%893, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
    %895 = greater_equal(%890, %891) /* ty=Tensor[(7, 3, 5), bool] */;
    %896 = asinh(%894) /* ty=Tensor[(10, 11, 10), float32] */;
    (%895, %896)
  };
  %897(%var_2301, %var_2302) /* ty=(Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) */
}

def @func_460(%var_456: Tensor[(3, 9, 1), uint8], %var_457: Tensor[(3, 9, 7), uint8], %var_458: Tensor[(1, 256), float64], %var_459: Tensor[(9, 140), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) {
  %921 = fn (%var_394: Tensor[(3, 9, 1), uint8], %var_395: Tensor[(3, 9, 7), uint8], %var_403: Tensor[(1, 256), float64], %var_446: Tensor[(9, 140), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) {
    %898 = cast(%var_394, dtype="bool") /* ty=Tensor[(3, 9, 1), bool] */;
    %899 = cast(%var_395, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
    %900 = cast(%var_403, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %901 = reshape(%900, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
    %902 = @func_387(%901) /* ty=(Tensor[(8, 4, 8), bool],) */;
    %903 = cast(%var_403, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
    %904 = cast(%var_395, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %905 = reshape(%904, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
    %906 = @func_160(%905) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
    %907 = %906.0;
    %908 = cast(%907, dtype="float32") /* ty=Tensor[(3, 7, 9), float32] */;
    %909 = cast(%var_446, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %910 = reshape(%908, newshape=[1, 189]) /* ty=Tensor[(1, 189), float32] */;
    %911 = reshape(%909, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
    %912 = @func_246(%910, %911) /* ty=(Tensor[(3, 7, 9), float64], Tensor[(1, 189), float32], Tensor[(10, 14, 9), float32]) */;
    %913 = cast(%var_403, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %914 = reshape(%913, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
    %915 = @func_387(%914) /* ty=(Tensor[(8, 4, 8), bool],) */;
    %916 = greater_equal(%898, %899) /* ty=Tensor[(3, 9, 7), bool] */;
    %917 = %902.0;
    %918 = atan(%903) /* ty=Tensor[(1, 256), float32] */;
    %919 = %912.2;
    %920 = %915.0;
    (%916, %917, %918, %907, %919, %var_446, %920)
  };
  %921(%var_456, %var_457, %var_458, %var_459) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(3, 7, 9), float32], Tensor[(10, 14, 9), float32], Tensor[(9, 140), float64], Tensor[(8, 4, 8), bool]) */
}

def @func_3684() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  @func_3682() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */
}

def @func_1827() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
  %931 = fn () -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) {
    %922 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
    %923 = @func_1250() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float32]) */;
    %924 = %923.0;
    %925 = cast(%924, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %926 = shape_of(%922, dtype="int32") /* ty=Tensor[(3), int32] */;
    %927 = cast(%922, dtype="bool") /* ty=Tensor[(10, 11, 10), bool] */;
    %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %929 = @func_1099() /* ty=Tensor[(10, 11, 10), float64] */;
    %930 = greater(%927, %928) /* ty=Tensor[(10, 11, 10), bool] */;
    (%929, %930)
  };
  %931() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */
}

def @func_2621() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), bool], Tensor[(189, 9), uint8], Tensor[(189, 9), float64], Tensor[(10, 11, 10), float32], Tensor[(105), uint8], Tensor[(3, 7, 9), float64], Tensor[(10, 11, 10), float64], Tensor[(392), int32], Tensor[(10, 11, 10), float64]) {
  %932 = @func_2380() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %933 = cast(meta[relay.Constant][37] /* ty=Tensor[(189, 1), float32] */, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %934 = reshape(%933, newshape=[189, 1]) /* ty=Tensor[(189, 1), float32] */;
  %935 = @func_2421(%934) /* ty=(Tensor[(10, 11, 10), bool], Tensor[(1, 189), float32], Tensor[(189, 1), float32], Tensor[(1260), float64], Tensor[(10, 11, 10), float64]) */;
  %936 = cast(meta[relay.Constant][37] /* ty=Tensor[(189, 1), float32] */, dtype="uint8") /* ty=Tensor[(189, 1), uint8] */;
  %937 = cast(meta[relay.Constant][38] /* ty=Tensor[(189, 9), float32] */, dtype="uint8") /* ty=Tensor[(189, 9), uint8] */;
  %938 = cast(meta[relay.Constant][38] /* ty=Tensor[(189, 9), float32] */, dtype="float64") /* ty=Tensor[(189, 9), float64] */;
  %939 = cast(meta[relay.Constant][37] /* ty=Tensor[(189, 1), float32] */, dtype="float64") /* ty=Tensor[(189, 1), float64] */;
  %940 = cast(meta[relay.Constant][39] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %941 = cast(meta[relay.Constant][39] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %942 = reshape(%940, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %943 = reshape(%941, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint8] */;
  %944 = @func_2300(%942, %943) /* ty=(Tensor[(7, 3, 5), bool], Tensor[(10, 11, 10), float32]) */;
  %945 = cast(meta[relay.Constant][37] /* ty=Tensor[(189, 1), float32] */, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %946 = reshape(%945, newshape=[3, 7, 9]) /* ty=Tensor[(3, 7, 9), float32] */;
  %947 = @func_160(%946) /* ty=(Tensor[(3, 7, 9), float32], Tensor[(3, 7, 9), float64]) */;
  %948 = cast(meta[relay.Constant][40] /* ty=Tensor[(392), int32] */, dtype="int32") /* ty=Tensor[(392), int32] */;
  %949 = reshape(%948, newshape=[98, 4]) /* ty=Tensor[(98, 4), int32] */;
  %950 = @func_1175(%949) /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64], Tensor[(2, 14, 14), float64], Tensor[(98, 4), int32]) */;
  %951 = %932.1;
  %952 = %935.0;
  %953 = right_shift(%936, %937) /* ty=Tensor[(189, 9), uint8] */;
  %954 = floor_divide(%938, %939) /* ty=Tensor[(189, 9), float64] */;
  %955 = %944.1;
  %956 = %947.1;
  %957 = %950.1;
  %958 = @func_1065() /* ty=Tensor[(10, 11, 10), float64] */;
  (%951, %952, %953, %954, %955, meta[relay.Constant][39] /* ty=Tensor[(105), uint8] */, %956, %957, meta[relay.Constant][40] /* ty=Tensor[(392), int32] */, %958)
}

def @func_7945() -> Tensor[(10, 11, 10), float64] {
  %959 = fn () -> Tensor[(10, 11, 10), float64] {
    @func_2078() /* ty=Tensor[(10, 11, 10), float64] */
  };
  %959() /* ty=Tensor[(10, 11, 10), float64] */
}

def @func_4596(%var_4594: Tensor[(2028), uint32], %var_4595: Tensor[(2, 15, 3), bool]) -> (Tensor[(10, 11, 10), bool], Tensor[(392), int32], Tensor[(14, 28), int32], Tensor[(392), int32], Tensor[(39, 4), uint32], Tensor[(2028), uint32], Tensor[(2, 15, 3), float64]) {
  @func_4592(%var_4594, %var_4595) /* ty=(Tensor[(10, 11, 10), bool], Tensor[(392), int32], Tensor[(14, 28), int32], Tensor[(392), int32], Tensor[(39, 4), uint32], Tensor[(2028), uint32], Tensor[(2, 15, 3), float64]) */
}

def @func_5183() -> Tensor[(392), int32] {
  %960 = @func_5059() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(392), int32]) */;
  %960.1
}

def @func_1646() -> (Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), float64]) {
  %961 = @func_1616() /* ty=(Tensor[(10, 11, 10), float64], Tensor[(10, 11, 10), bool]) */;
  %962 = %961.0;
  %963 = @func_676() /* ty=Tensor[(10, 11, 10), float64] */;
  (%962, %963)
}

def @func_6112() -> (Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) {
  @func_6110() /* ty=(Tensor[(10, 11, 10), bool], Tensor[(10, 11, 10), float64]) */
}

def @func_4851() -> (Tensor[(10, 11, 10), float64],) {
  %965 = fn () -> (Tensor[(10, 11, 10), float64],) {
    %964 = @func_4393() /* ty=Tensor[(10, 11, 10), float64] */;
    (%964,)
  };
  %965() /* ty=(Tensor[(10, 11, 10), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen353/build/output.py", line 2852, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:09:33] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

