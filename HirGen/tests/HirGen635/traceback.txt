==========mod==========
#[version = "0.0.5"]
def @func_5679() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %0 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %1 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_8304() -> (Tensor[(6, 9, 4), float64],) {
  %4 = @func_6069() /* ty=Tensor[(6, 9, 4), float64] */;
  (%4,)
}

def @func_7944() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) {
  %5 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %7 = reshape(%6, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %8 = @func_3911(%7) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %9 = %5.0;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %11 = reshape(%10, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %12 = @func_2992(%11) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %13 = %8.0;
  %14 = %12.0;
  (%9, %13, meta[relay.Constant][0] /* ty=Tensor[(72), uint16] */, %14)
}

def @func_9627(%var_9615: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) {
  %15 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %16 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %17 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %18 = %15.1;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %20 = reshape(%19, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %21 = @func_4661(%20) /* ty=(Tensor[(6, 9, 4), float32],) */;
  %22 = @func_9473() /* ty=(Tensor[(392), uint64],) */;
  %23 = %22.0;
  %24 = cast(%var_9615, dtype="float64") /* ty=Tensor[(392), float64] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %26 = cast(%23, dtype="float64") /* ty=Tensor[(392), float64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?), float64] */;
  %28 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %29 = %16.1;
  %30 = %17.0;
  %31 = %21.0;
  %32 = power(%26, %27) /* ty=Tensor[(392), float64] */;
  %33 = %28.0;
  (%18, %29, %30, %31, %32, %33)
}

def @func_11472() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %34 = @func_9473() /* ty=(Tensor[(392), uint64],) */;
  %35 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %36 = %34.0;
  %37 = %35.1;
  (%36, %37)
}

def @func_7809() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) {
  %38 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %39 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %42 = reshape(%41, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %43 = @func_6798(%42) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %44 = cast(%40, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %45 = reshape(%44, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %46 = @func_6798(%45) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %47 = %38.0;
  %48 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %49 = %43.1;
  %50 = %46.0;
  (%47, %40, %48, %49, %50)
}

def @func_16127() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %51 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %52 = @func_13304() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %53 = @func_16029() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %54 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %55 = @func_9434() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %56 = @func_10054() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %57 = @func_10054() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %58 = %51.0;
  %59 = %52.0;
  %60 = %53.0;
  %61 = %54.0;
  %62 = %55.1;
  %63 = %56.1;
  %64 = %57.1;
  (%58, %59, %60, %61, %62, %63, %64)
}

def @func_4380() -> (Tensor[(6, 9, 4), float32],) {
  %65 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%65,)
}

def @func_10054() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %66 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %67 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %68 = %66.0;
  %69 = %67.0;
  (%68, %69)
}

def @func_8944(%var_8923: Tensor[(9, 14, 3), int8], %var_8940: Tensor[(72), uint16]) -> (Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) {
  %70 = cast(%var_8923, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %71 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(9, 14, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 14, 3), int8] */, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %74 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 14, 3), int8] */, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %75 = shape_of(%var_8923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_8923, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = cast(%var_8940, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %79 = reshape(%78, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %80 = @func_3911(%79) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %81 = add(%72, %73) /* ty=Tensor[(9, 14, 3), int8] */;
  %82 = equal(%76, %77) /* ty=Tensor[(9, 14, 3), bool] */;
  %83 = %80.2;
  (%81, %82, %83, %var_8940)
}

def @func_16816() -> (Tensor[(6, 9, 4), float32],) {
  %84 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %85 = %84.0;
  (%85,)
}

def @func_3425() -> Tensor[(6, 9, 4), float32] {
  @func_3412() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_11604() -> Tensor[(6, 9, 4), float32] {
  %86 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %86.0
}

def @func_6926() -> Tensor[(6, 9, 4), float32] {
  %87 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %87.1
}

def @func_16255() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16]) {
  %88 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %89 = @func_10916() /* ty=Tensor[(6, 9, 4), float32] */;
  %90 = %88.0;
  (%89, %90)
}

def @func_11836() -> Tensor[(6, 9, 4), float32] {
  %91 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %91.1
}

def @func_11449() -> (Tensor[(6, 9, 4), float64],) {
  %92 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
  %93 = %92.1;
  (%93,)
}

def @func_3021() -> (Tensor[(6, 9, 4), float32],) {
  %94 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %95 = %94.0;
  (%95,)
}

def @func_4457() -> Tensor[(6, 9, 4), float64] {
  @func_3779() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_14110() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 12), uint16], Tensor[(16, 16, 15), float64]) {
  %96 = @func_7200() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
  %97 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %98 = @func_6341() /* ty=Tensor[(6, 9, 4), float32] */;
  %99 = %96.3;
  %100 = %97.1;
  (%98, %99, %100)
}

def @func_4128() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %101 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %102 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %103 = %101.0;
  %104 = %102.0;
  (%103, %104)
}

def @func_6882() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %105 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %108 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %109 = atan(%107) /* ty=Tensor[(6, 9, 4), float64] */;
  %110 = %108.1;
  (%109, %110)
}

def @func_15679() -> Tensor[(6, 9, 4), float32] {
  %111 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %111.0
}

def @func_5134() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) {
  %112 = @func_4583() /* ty=Tensor[(392), uint64] */;
  %113 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  (%112, %113)
}

def @func_8288() -> (Tensor[(9, 8, 16), uint16],) {
  %114 = @func_7200() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
  %115 = %114.2;
  (%115,)
}

def @func_16029() -> (Tensor[(6, 9, 4), float32],) {
  %116 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  (%116,)
}

def @func_6048() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %117 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %120 = reshape(%119, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
  %121 = @func_5311(%120) /* ty=Tensor[(6, 9, 4), uint8] */;
  (%118, %121)
}

def @func_2229(%var_2226: Tensor[(1, 1, 15), float32]) -> (Tensor[(1, 1, 15), float32],) {
  %122 = cast(%var_2226, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %123 = sqrt(%122) /* ty=Tensor[(1, 1, 15), float32] */;
  (%123,)
}

def @func_10627() -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) {
  %124 = @func_7579() /* ty=(Tensor[(6, 9, 4), bool],) */;
  %125 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %126 = %124.0;
  %127 = %125.1;
  (%126, %127)
}

def @func_13592(%var_13581: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool]) {
  %128 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %129 = cast(meta[relay.Constant][2] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %130 = reshape(%129, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %131 = @func_3911(%130) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %132 = @func_9745() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %133 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %134 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %135 = %134.2;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(392), float64] */;
  %137 = @func_7491() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %138 = cast(%135, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %139 = cast(%var_13581, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %140 = reshape(%138, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %141 = reshape(%139, newshape=[1680]) /* ty=Tensor[(1680), bool] */;
  %142 = @func_12666(%140, %141) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) */;
  %143 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  %144 = %128.1;
  %145 = %131.1;
  %146 = %132.0;
  %147 = %133.0;
  %148 = acosh(%136) /* ty=Tensor[(392), float64] */;
  %149 = %137.1;
  %150 = @func_13385() /* ty=Tensor[(392), uint64] */;
  %151 = %142.3;
  (%143, %144, %145, meta[relay.Constant][2] /* ty=Tensor[(72), uint16] */, %146, %147, %148, %149, %150, %151, %var_13581)
}

def @func_17447() -> Tensor[(6, 9, 4), float64] {
  %152 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %152.0
}

def @func_12412() -> Tensor[(6, 9, 4), uint16] {
  %153 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
  %153.0
}

def @func_2079(%var_2070: Tensor[(7, 56), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) {
  %154 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %155 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 14, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %159 = cast(%var_2070, dtype="uint64") /* ty=Tensor[(7, 56), uint64] */;
  %160 = reshape(%158, newshape=[]) /* ty=uint64 */;
  %161 = reshape(%159, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %162 = @func_475(%160, %161) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %163 = greater_equal(%156, %157) /* ty=Tensor[(10, 14, 12), bool] */;
  %164 = %162.0;
  (%163, %164, meta[relay.Constant][5] /* ty=uint64 */, %var_2070)
}

def @func_9352(%var_9318: Tensor[(13, 1, 5), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) {
  %165 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %166 = cast(%var_9318, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %167 = log(%166) /* ty=Tensor[(13, 1, 5), float32] */;
  %168 = cast(%var_9318, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = greater_equal(%170, %171) /* ty=Tensor[(13, ?, 5), bool] */;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(13, ?, 5), float64] */;
  %174 = @func_6341() /* ty=Tensor[(6, 9, 4), float32] */;
  %175 = %165.0;
  %176 = atan(%173) /* ty=Tensor[(13, ?, 5), float64] */;
  (%174, %175, %176)
}

def @func_9473() -> (Tensor[(392), uint64],) {
  %177 = @func_4583() /* ty=Tensor[(392), uint64] */;
  (%177,)
}

def @func_8875(%var_8725: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(15), float32], Tensor[(10, 14, 12), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(5, 3, 392), int32], Tensor[(6, 9, 4), float32], Tensor[(392), int64]) {
  %178 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %179 = %178.2;
  %180 = cast(%179, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %181 = reshape(%180, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %182 = @func_2858(%181) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %183 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %184 = cast(%var_8725, dtype="float32") /* ty=Tensor[(15), float32] */;
  %185 = reshape(%184, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
  %186 = @func_4023(%185) /* ty=(Tensor[(5, 3, 1), float32],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %189 = reshape(%188, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %190 = @func_8055(%189) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
  %191 = cast(%179, dtype="int32") /* ty=Tensor[(392), int32] */;
  %192 = cast(%187, dtype="int32") /* ty=Tensor[(5, 3, 1), int32] */;
  %193 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %194 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %195 = %194.0;
  %196 = cast(meta[relay.Constant][6] /* ty=Tensor[(392), uint64] */, dtype="int64") /* ty=Tensor[(392), int64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(1), int32] */;
  %198 = cast(%195, dtype="int64") /* ty=Tensor[(392), int64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?), int64] */;
  %200 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
  %201 = %182.1;
  %202 = %183.0;
  %203 = %190.0;
  %204 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %205 = logical_xor(%191, %192) /* ty=Tensor[(5, 3, 392), int32] */;
  %206 = %193.0;
  %207 = bitwise_or(%198, %199) /* ty=Tensor[(392), int64] */;
  (%200, %var_8725, %201, %202, %203, %204, %205, %206, %207)
}

def @func_14239() -> (Tensor[(6, 9, 4), float64],) {
  %208 = @func_5134() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) */;
  %209 = %208.1;
  (%209,)
}

def @func_6284(%var_6258: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %210 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %211 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %212 = %211.0;
  %213 = cast(%var_6258, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %217 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %218 = %210.0;
  %219 = divide(%215, %216) /* ty=Tensor[(6, 9, 4), float64] */;
  %220 = %217.0;
  (%218, %219, %220)
}

def @func_6814() -> Tensor[(392), uint64] {
  %221 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %221.0
}

def @func_14445() -> Tensor[(6, 9, 4), float64] {
  %222 = @func_10365() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %222.0
}

def @func_10235() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(?, 2288), float64]) {
  %223 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %224 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %225 = cast(meta[relay.Constant][7] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %226 = reshape(%225, newshape=[1, 2288]) /* ty=Tensor[(1, 2288), uint16] */;
  %227 = @func_4930(%226) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */;
  %228 = %227.5;
  %229 = cast(meta[relay.Constant][7] /* ty=Tensor[(2288, 1), uint16] */, dtype="float64") /* ty=Tensor[(2288, 1), float64] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %231 = cast(%228, dtype="float64") /* ty=Tensor[(1, 2288), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %233 = %223.0;
  %234 = @func_7997() /* ty=Tensor[(6, 9, 4), float32] */;
  %235 = %224.0;
  %236 = power(%231, %232) /* ty=Tensor[(?, 2288), float64] */;
  (%233, %234, %235, %236)
}

def @func_8546() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) {
  %237 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %238 = @func_4128() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %239 = %237.0;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %241 = reshape(%240, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %242 = %238.0;
  %243 = @func_4357(%241) /* ty=Tensor[(6, 9, 4), uint16] */;
  (%239, %242, %243)
}

def @func_11294() -> Tensor[(6, 9, 4), float64] {
  %244 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %244.1
}

def @func_6351() -> Tensor[(6, 9, 4), float32] {
  %245 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %245.1
}

def @func_8439() -> Tensor[(6, 9, 4), float32] {
  %246 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %246.2
}

def @func_6341() -> Tensor[(6, 9, 4), float32] {
  %247 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %247.0
}

def @func_13208() -> Tensor[(6, 9, 4), float32] {
  @func_6010() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_15003() -> Tensor[(16, 16, 15), float64] {
  %248 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %248.0
}

def @func_5218() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %249 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %250 = cast(meta[relay.Constant][8] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %251 = reshape(%250, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %252 = @func_2229(%251) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %253 = %249.0;
  %254 = %252.0;
  (%253, %254, meta[relay.Constant][8] /* ty=Tensor[(15), float32] */)
}

def @func_7359() -> (Tensor[(6, 9, 4), float64], Tensor[(392), float64]) {
  %255 = @func_6814() /* ty=Tensor[(392), uint64] */;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(392), float64] */;
  %257 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %258 = sin(%256) /* ty=Tensor[(392), float64] */;
  (%257, %258)
}

def @func_11133(%var_11102: Tensor[(11, 13, 3), float64], %var_11103: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %259 = cast(%var_11103, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %260 = shape_of(%var_11102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_11102, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %263 = cast(%var_11102, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %264 = @func_9188() /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) */;
  %265 = multiply(%261, %262) /* ty=Tensor[(11, 13, 3), float64] */;
  %266 = erf(%263) /* ty=Tensor[(11, 13, 3), float64] */;
  %267 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
  %268 = %264.0;
  (%265, %266, %267, %268)
}

def @func_8097() -> (Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) {
  %269 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %270 = @func_6926() /* ty=Tensor[(6, 9, 4), float32] */;
  %271 = %269.0;
  (%270, %271)
}

def @func_15447() -> (Tensor[(6, 9, 4), float32],) {
  %272 = @func_12722() /* ty=Tensor[(6, 9, 4), float32] */;
  (%272,)
}

def @func_17132() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %273 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
  %274 = @func_11604() /* ty=Tensor[(6, 9, 4), float32] */;
  (%273, %274)
}

def @func_15631() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) {
  %275 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %276 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
  %277 = %275.0;
  %278 = %276.0;
  (%277, %278)
}

def @func_11393() -> (Tensor[(6, 9, 4), float32],) {
  %279 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%279,)
}

def @func_10316() -> Tensor[(392), float64] {
  %280 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
  %280.1
}

def @func_14548() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint16]) {
  %281 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
  %282 = @func_11604() /* ty=Tensor[(6, 9, 4), float32] */;
  %283 = %281.0;
  (%282, %283)
}

def @func_12608(%var_12567: Tensor[(196, 2), uint64], %var_12583: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), bool], Tensor[(196, 2), float64], Tensor[(10, 14, 12), float32]) {
  %284 = @func_7944() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) */;
  %285 = cast(%var_12583, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %286 = shape_of(%var_12567, dtype="int32") /* ty=Tensor[(2), int32] */;
  %287 = cast(%var_12567, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %289 = cast(%var_12567, dtype="uint64") /* ty=Tensor[(196, 2), uint64] */;
  %290 = reshape(%289, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %291 = @func_2858(%290) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %292 = %291.1;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %294 = rsqrt(%293) /* ty=Tensor[(10, 14, 12), float64] */;
  %295 = cast(%292, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %299 = %284.3;
  %300 = divide(%287, %288) /* ty=Tensor[(196, 2), float64] */;
  %301 = mod(%297, %298) /* ty=Tensor[(10, 14, 12), float32] */;
  (%299, %300, %301)
}

def @func_14690() -> (Tensor[(6, 9, 4), float64],) {
  %302 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %303 = %302.1;
  (%303,)
}

def @func_8258() -> Tensor[(6, 9, 4), float64] {
  @func_6069() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_11221(%var_11217: Tensor[(11, 16, 6), int64]) -> (Tensor[(11, 16, 6), int64],) {
  %304 = cast(%var_11217, dtype="int64") /* ty=Tensor[(11, 16, 6), int64] */;
  %305 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 16, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 16, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 16, 6), int64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %308 = subtract(%306, %307) /* ty=Tensor[(11, 16, 6), int64] */;
  (%308,)
}

def @func_13158() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %309 = @func_12207() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %310 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %311 = %309.0;
  (%310, %311)
}

def @func_4357(%var_4345: Tensor[(6, 9, 4), float32]) -> Tensor[(6, 9, 4), uint16] {
  %312 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %313 = cast(%var_4345, dtype="uint16") /* ty=Tensor[(6, 9, 4), uint16] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="uint16") /* ty=Tensor[(6, 9, 4), uint16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%315, %316) /* ty=Tensor[(6, 9, 4), uint16] */
}

def @func_14433(%var_14427: Tensor[(9, 8, 16), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) {
  %317 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 14), float64] */, dtype="float64") /* ty=Tensor[(13, 14), float64] */;
  %318 = reshape(%317, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), float64] */;
  %319 = @func_5986(%318) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) */;
  %320 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %321 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %322 = %321.0;
  %323 = cast(%var_14427, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = %319.0;
  %328 = %320.0;
  %329 = not_equal(%325, %326) /* ty=Tensor[(9, 8, 16), bool] */;
  (%327, meta[relay.Constant][10] /* ty=Tensor[(13, 14), float64] */, %328, %329)
}

def @func_8351() -> Tensor[(6, 9, 4), float32] {
  %330 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %330.1
}

def @func_16475() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %331 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
  %332 = @func_11060() /* ty=Tensor[(6, 9, 4), float32] */;
  %333 = %331.0;
  %334 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%332, %333, %334)
}

def @func_3158() -> Tensor[(6, 9, 4), float32] {
  @func_2657() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_3779() -> Tensor[(6, 9, 4), float64] {
  %335 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %335.0
}

def @func_11900() -> (Tensor[(6, 9, 4), float32], Tensor[(11, 16, 6), int64], Tensor[(1056), int64], Tensor[(6, 9, 4), float64], Tensor[(1200), float32], Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(72), uint16]) {
  %336 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %337 = cast(meta[relay.Constant][11] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %338 = reshape(%337, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int64] */;
  %339 = @func_11221(%338) /* ty=(Tensor[(11, 16, 6), int64],) */;
  %340 = cast(meta[relay.Constant][12] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %341 = reshape(%340, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
  %342 = @func_5827(%341) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) */;
  %343 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %344 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %345 = %343.0;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %347 = cast(meta[relay.Constant][13] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %348 = reshape(%346, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
  %349 = reshape(%347, newshape=[6, 12]) /* ty=Tensor[(6, 12), uint16] */;
  %350 = @func_6582(%348, %349) /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
  %351 = %336.0;
  %352 = %339.0;
  %353 = %342.1;
  %354 = %344.0;
  %355 = %350.1;
  (%351, %352, meta[relay.Constant][11] /* ty=Tensor[(1056), int64] */, %353, meta[relay.Constant][12] /* ty=Tensor[(1200), float32] */, %345, %354, %355, meta[relay.Constant][13] /* ty=Tensor[(72), uint16] */)
}

def @func_8609() -> (Tensor[(5, 3, 15), bool], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %356 = @func_5170() /* ty=(Tensor[(5, 3, 15), bool],) */;
  %357 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %358 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %359 = %356.0;
  %360 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
  %361 = %357.0;
  %362 = %358.0;
  (%359, %360, %361, %362)
}

def @func_17427(%var_17410: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64) {
  %363 = @func_15540() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) */;
  %364 = cast(%var_17410, dtype="uint64") /* ty=uint64 */;
  %365 = reshape(%364, newshape=[]) /* ty=uint64 */;
  %366 = @func_4749(%365) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %367 = %363.1;
  %368 = %366.1;
  (%367, %368, %var_17410)
}

def @func_6582(%var_6533: Tensor[(6, 9, 4), float64], %var_6560: Tensor[(6, 12), uint16]) -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
  %369 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %370 = %369.0;
  %371 = cast(%var_6533, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %376 = cast(%var_6560, dtype="uint16") /* ty=Tensor[(6, 12), uint16] */;
  %377 = reshape(%376, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %378 = @func_3911(%377) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %379 = logical_or(%373, %374) /* ty=Tensor[(6, 9, 4), bool] */;
  %380 = %375.0;
  %381 = @func_6069() /* ty=Tensor[(6, 9, 4), float64] */;
  %382 = %378.0;
  (%379, %380, %381, %382, %var_6560)
}

def @func_13100() -> Tensor[(?, ?, 15), bool] {
  %383 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %384 = %383.0;
  %385 = @func_6999() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) */;
  %386 = %385.3;
  %387 = cast(%386, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %388 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%384, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%389, %390) /* ty=Tensor[(?, ?, 15), bool] */
}

def @func_6645() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %391 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %392 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %393 = %391.1;
  %394 = %392.0;
  (%393, %394)
}

def @func_11624() -> (Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) {
  %395 = cast(meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %396 = reshape(%395, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
  %397 = @func_2810(%396) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
  %398 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %399 = %397.2;
  (%398, %399, meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */)
}

def @func_16517() -> (Tensor[(6, 9, 4), float64],) {
  %400 = @func_16392() /* ty=Tensor[(6, 9, 4), float64] */;
  (%400,)
}

def @func_15864() -> Tensor[(1, 1, 15), float32] {
  @func_5034() /* ty=Tensor[(1, 1, 15), float32] */
}

def @func_16995(%var_16987: Tensor[(14, 8, 12), int32], %var_16988: Tensor[(14, 8, 12), int32]) -> Tensor[(14, 8, 12), int32] {
  %401 = cast(%var_16988, dtype="int32") /* ty=Tensor[(14, 8, 12), int32] */;
  %402 = shape_of(%var_16987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_16987, dtype="int32") /* ty=Tensor[(14, 8, 12), int32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%403, %404) /* ty=Tensor[(14, 8, 12), int32] */
}

def @func_11185() -> (Tensor[(5, 3, 15), int64],) {
  %405 = @func_5170() /* ty=(Tensor[(5, 3, 15), bool],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
  %408 = atan(%407) /* ty=Tensor[(5, 3, 15), float64] */;
  %409 = cast(%408, dtype="int64") /* ty=Tensor[(5, 3, 15), int64] */;
  %410 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%406, dtype="int64") /* ty=Tensor[(5, 3, 15), int64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %413 = subtract(%411, %412) /* ty=Tensor[(5, 3, 15), int64] */;
  (%413,)
}

def @func_11541() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), bool]) {
  %414 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %416 = reshape(%415, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %417 = @func_2992(%416) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %418 = %417.0;
  (%414, %418)
}

def @func_6836() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %419 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %420 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %421 = %419.0;
  (%420, %421)
}

def @func_12962() -> (Tensor[(392), uint64],) {
  %422 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %423 = %422.2;
  (%423,)
}

def @func_9287(%var_9279: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32]) {
  %424 = cast(%var_9279, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %425 = reshape(%424, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
  %426 = @func_4023(%425) /* ty=(Tensor[(5, 3, 1), float32],) */;
  %427 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  %428 = %426.0;
  (%427, %428, %var_9279)
}

def @func_5986(%var_5962: Tensor[(14, 13, 1), float64]) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) {
  %429 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %430 = cast(%var_5962, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %431 = log(%430) /* ty=Tensor[(14, 13, 1), float64] */;
  %432 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float32") /* ty=Tensor[(14, 13, 1), float32] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="float32") /* ty=Tensor[(14, 13, 1), float32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %436 = divide(%434, %435) /* ty=Tensor[(14, 13, ?), float32] */;
  %437 = cast(%431, dtype="uint16") /* ty=Tensor[(14, 13, 1), uint16] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint16") /* ty=Tensor[(14, 13, ?), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %441 = %429.0;
  %442 = bitwise_or(%439, %440) /* ty=Tensor[(14, 13, ?), uint16] */;
  (%441, %442)
}

def @func_2810(%var_2789: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) {
  %443 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %444 = cast(%var_2789, dtype="uint64") /* ty=Tensor[(196, 2), uint64] */;
  %445 = reshape(%444, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %446 = @func_2079(%445) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %447 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %448 = %443.0;
  %449 = %446.2;
  %450 = %447.0;
  (%448, %449, %var_2789, %450)
}

def @func_16709() -> (Tensor[(6, 9, 4), float64],) {
  %451 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
  %452 = %451.2;
  (%452,)
}

def @func_15413() -> (Tensor[(6, 9, 4), float64], Tensor[(11, 16, 6), int64], Tensor[(1056), int64]) {
  %453 = cast(meta[relay.Constant][16] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %454 = reshape(%453, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int64] */;
  %455 = @func_11221(%454) /* ty=(Tensor[(11, 16, 6), int64],) */;
  %456 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %457 = %455.0;
  (%456, %457, meta[relay.Constant][16] /* ty=Tensor[(1056), int64] */)
}

def @func_10691(%var_10673: Tensor[(12, 2, 14), bool]) -> (Tensor[(12, 2, 14), bool], Tensor[(12, 2, 14), uint64]) {
  %458 = cast(%var_10673, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %459 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(12, 2, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 2, 14), bool] */, dtype="uint64") /* ty=Tensor[(12, 2, 14), uint64] */;
  %463 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(12, 2, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 2, 14), bool] */, dtype="uint64") /* ty=Tensor[(12, 2, 14), uint64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %466 = logical_or(%460, %461) /* ty=Tensor[(12, 2, 14), bool] */;
  %467 = add(%464, %465) /* ty=Tensor[(12, 2, 14), uint64] */;
  (%466, %467)
}

def @func_7133(%var_7076: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
  %468 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %469 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %470 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %471 = reshape(%470, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %472 = @func_2079(%471) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %475 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %476 = %468.0;
  %477 = %469.0;
  %478 = log10(%474) /* ty=Tensor[(10, 14, 12), float32] */;
  %479 = %475.0;
  %480 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  (%476, %var_7076, %477, %478, %479, %480)
}

def @func_4250() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %481 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %482 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %483 = %481.0;
  %484 = %482.1;
  (%483, %484)
}

def @func_17114() -> Tensor[(6, 9, 4), float32] {
  @func_6508() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_16392() -> Tensor[(6, 9, 4), float64] {
  %485 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %485.0
}

def @func_3286() -> (Tensor[(6, 9, 4), float32],) {
  %486 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%486,)
}

def @func_17153() -> Tensor[(6, 9, 4), float32] {
  @func_14672() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_12552() -> (Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
  %487 = @func_6178() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %488 = @func_7393() /* ty=(Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
  %489 = %487.0;
  %490 = %488.0;
  (%489, %490)
}

def @func_13914() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint16]) {
  %491 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %492 = @func_9993() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */;
  %493 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %494 = %492.3;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %496 = reshape(%495, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %497 = %491.0;
  %498 = %493.0;
  %499 = @func_4357(%496) /* ty=Tensor[(6, 9, 4), uint16] */;
  (%497, %494, %498, %499)
}

def @func_14809() -> Tensor[(392), uint64] {
  %500 = @func_11624() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) */;
  %500.2
}

def @func_15043(%var_15029: Tensor[(7, 4, 6), int64]) -> Tensor[(7, 4, 6), bool] {
  %501 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 4, 6), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %502 = shape_of(%var_15029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_15029, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%503, %504) /* ty=Tensor[(7, 4, 6), bool] */
}

def @func_9434() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %505 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
  %506 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %507 = %505.0;
  (%506, %507)
}

def @func_16294() -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) {
  %508 = @func_12962() /* ty=(Tensor[(392), uint64],) */;
  %509 = @func_14632() /* ty=(Tensor[(6, 9, 4), uint8],) */;
  %510 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
  %511 = %508.0;
  %512 = %509.0;
  (%510, %511, %512)
}

def @func_4930(%var_4899: Tensor[(1, 2288), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
  %513 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %514 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %515 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %516 = cast(%var_4899, dtype="uint16") /* ty=Tensor[(1, 2288), uint16] */;
  %517 = reshape(%516, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
  %518 = @func_3700(%517) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
  %519 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %520 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %521 = @func_4583() /* ty=Tensor[(392), uint64] */;
  %522 = %513.0;
  %523 = %514.0;
  %524 = %515.0;
  %525 = %518.3;
  %526 = %519.0;
  %527 = %520.0;
  (%521, %522, %523, %524, %525, %var_4899, %526, %527)
}

def @func_12666(%var_12623: Tensor[(392), uint64], %var_12634: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) {
  %528 = cast(%var_12623, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %529 = reshape(%528, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %530 = @func_9627(%529) /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) */;
  %531 = cast(%var_12634, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %532 = reshape(%531, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
  %533 = @func_4421(%532) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
  %534 = @func_7491() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %535 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %536 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %537 = cast(%var_12623, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %538 = reshape(%537, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
  %539 = @func_2810(%538) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
  %540 = @func_12449() /* ty=Tensor[(6, 9, 4), float64] */;
  %541 = %530.5;
  %542 = %533.0;
  %543 = %534.0;
  %544 = %535.0;
  %545 = %536.0;
  %546 = %539.1;
  (%540, %541, %var_12623, %542, %var_12634, %543, %544, %545, %546)
}

def @func_14977() -> (Tensor[(9, 8, 16), uint16],) {
  %547 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %548 = %547.0;
  (%548,)
}

def @func_10721() -> (Tensor[(6, 9, 4), float32],) {
  %549 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %550 = %549.0;
  (%550,)
}

def @func_3412() -> Tensor[(6, 9, 4), float32] {
  @func_3158() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_10638() -> (Tensor[(6, 9, 4), uint16],) {
  %551 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
  %552 = %551.0;
  (%552,)
}

def @func_14491(%var_14449: Tensor[(6, 12, 8), float32], %var_14475: Tensor[(72), uint16]) -> (Tensor[(6, 12, 8), float32], Tensor[(6, 12, 8), float32], Tensor[(9, 14, 3), bool], Tensor[(378), int8], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16]) {
  %553 = cast(%var_14449, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %554 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %557 = cast(%var_14449, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %558 = cast(meta[relay.Constant][21] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %559 = cast(%var_14475, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %560 = reshape(%558, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), int8] */;
  %561 = reshape(%559, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %562 = @func_8944(%560, %561) /* ty=(Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) */;
  %563 = cast(meta[relay.Constant][22] /* ty=Tensor[(2288), uint16] */, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %564 = reshape(%563, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
  %565 = @func_3700(%564) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
  %566 = floor_divide(%555, %556) /* ty=Tensor[(6, 12, 8), float32] */;
  %567 = acos(%557) /* ty=Tensor[(6, 12, 8), float32] */;
  %568 = %562.1;
  %569 = %565.0;
  (%566, %567, %568, meta[relay.Constant][21] /* ty=Tensor[(378), int8] */, %var_14475, %569, meta[relay.Constant][22] /* ty=Tensor[(2288), uint16] */)
}

def @func_4023(%var_4018: Tensor[(5, 3, 1), float32]) -> (Tensor[(5, 3, 1), float32],) {
  %570 = cast(%var_4018, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %571 = acosh(%570) /* ty=Tensor[(5, 3, 1), float32] */;
  (%571,)
}

def @func_3911(%var_3813: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) {
  %572 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(9, 8, 1), uint16] */;
  %573 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 8, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 8, 16), uint16] */;
  %574 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %575 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 8, 16), uint16] */, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %576 = cast(%var_3813, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %577 = log(%576) /* ty=Tensor[(9, 8, 1), float32] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %579 = right_shift(%572, %573) /* ty=Tensor[(9, 8, 16), uint16] */;
  %580 = %574.0;
  %581 = log(%575) /* ty=Tensor[(9, 8, 16), float32] */;
  %582 = log2(%578) /* ty=Tensor[(9, 8, 1), float64] */;
  (%579, %580, %581, %582)
}

def @func_12207() -> (Tensor[(6, 9, 4), float64],) {
  %583 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %584 = %583.0;
  (%584,)
}

def @func_12449() -> Tensor[(6, 9, 4), float64] {
  %585 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %585.0
}

def @func_5408() -> (Tensor[(6, 9, 4), float64],) {
  %586 = @func_3779() /* ty=Tensor[(6, 9, 4), float64] */;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %588 = log2(%587) /* ty=Tensor[(6, 9, 4), float64] */;
  (%588,)
}

def @func_6725() -> (Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) {
  %589 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %590 = cast(meta[relay.Constant][25] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %591 = reshape(%589, newshape=[]) /* ty=uint64 */;
  %592 = reshape(%590, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %593 = @func_475(%591, %592) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %594 = %593.0;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %596 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  %597 = tan(%595) /* ty=Tensor[(14, 2, 14), float64] */;
  %598 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%596, meta[relay.Constant][24] /* ty=uint64 */, meta[relay.Constant][25] /* ty=Tensor[(392), uint64] */, %597, %598)
}

def @func_6010() -> Tensor[(6, 9, 4), float32] {
  %599 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %599.0
}

def @func_8680() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %600 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %601 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %602 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %603 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %604 = reshape(%603, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
  %605 = @func_2810(%604) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
  %606 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %607 = %600.0;
  %608 = %601.0;
  %609 = %602.0;
  %610 = %605.0;
  %611 = %606.0;
  (%607, %608, %609, %610, meta[relay.Constant][26] /* ty=Tensor[(392), uint64] */, %611)
}

def @func_5570(%var_5566: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %612 = cast(%var_5566, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %613 = reshape(%612, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %614 = @func_2858(%613) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %615 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
  %616 = %614.2;
  %617 = @func_3412() /* ty=Tensor[(6, 9, 4), float32] */;
  (%615, %616, %var_5566, %617)
}

def @func_5421() -> (Tensor[(6, 9, 4), float32],) {
  %618 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %619 = %618.0;
  (%619,)
}

def @func_14872(%var_14855: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %620 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %621 = cast(%var_14855, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %622 = reshape(%621, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %623 = @func_9859(%622) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) */;
  %624 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %625 = %624.0;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %627 = reshape(%626, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %628 = @func_6284(%627) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %629 = %620.0;
  %630 = %623.1;
  %631 = @func_6814() /* ty=Tensor[(392), uint64] */;
  %632 = %628.2;
  (%629, %630, %var_14855, %625, %631, %632)
}

def @func_1434(%var_1417: uint16) -> Tensor[(4, 12, 1), uint16] {
  %633 = cast(%var_1417, dtype="uint16") /* ty=uint16 */;
  %634 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 1), uint16] */;
  bitwise_or(%633, %634) /* ty=Tensor[(4, 12, 1), uint16] */
}

def @func_10661() -> (Tensor[(6, 9, 4), float32],) {
  %635 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %636 = %635.0;
  (%636,)
}

def @func_5497(%var_5467: uint16) -> (Tensor[(6, 9, 4), float32], Tensor[(4, 12, 1), uint16], uint16, Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %637 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %638 = cast(%var_5467, dtype="uint16") /* ty=uint16 */;
  %639 = reshape(%638, newshape=[]) /* ty=uint16 */;
  %640 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %641 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %642 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %643 = %637.3;
  %644 = @func_1434(%639) /* ty=Tensor[(4, 12, 1), uint16] */;
  %645 = %640.0;
  %646 = %641.0;
  %647 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %648 = %642.0;
  (%643, %644, %var_5467, %645, %646, %647, %648)
}

def @func_2858(%var_2855: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) {
  %649 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %650 = cast(%var_2855, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %651 = reshape(%650, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %652 = @func_2079(%651) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %653 = %649.0;
  %654 = %652.0;
  (%653, %654, %var_2855)
}

def @func_4988(%var_4977: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %655 = cast(%var_4977, dtype="uint64") /* ty=uint64 */;
  %656 = cast(meta[relay.Constant][28] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %657 = reshape(%655, newshape=[]) /* ty=uint64 */;
  %658 = reshape(%656, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %659 = @func_475(%657, %658) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %660 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %661 = %659.0;
  (%660, %661, %var_4977, meta[relay.Constant][28] /* ty=Tensor[(392), uint64] */)
}

def @func_3086() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
  %662 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %664 = cast(meta[relay.Constant][29] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %665 = reshape(%664, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %666 = @func_2858(%665) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %667 = rsqrt(%663) /* ty=Tensor[(6, 9, 4), float64] */;
  %668 = %666.0;
  (%667, %668, meta[relay.Constant][29] /* ty=Tensor[(392), uint64] */)
}

def @func_7058() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) {
  %669 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
  %670 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="uint32") /* ty=Tensor[(6, 9, 4), uint32] */;
  %673 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%669, dtype="uint32") /* ty=Tensor[(6, 9, 4), uint32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %676 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %677 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  %678 = minimum(%674, %675) /* ty=Tensor[(6, 9, 4), uint32] */;
  (%676, %677, %678)
}

def @func_7310() -> (Tensor[(6, 9, 4), float64],) {
  %679 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %680 = %679.1;
  (%680,)
}

def @func_14589() -> (Tensor[(392), uint64],) {
  %681 = @func_5134() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) */;
  %682 = %681.0;
  (%682,)
}

def @func_13402() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
  %683 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %684 = @func_6645() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %685 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %686 = %683.1;
  %687 = %684.1;
  %688 = %685.0;
  (%686, %687, %688)
}

def @func_475(%var_454: uint64, %var_455: Tensor[(14, 2, 14), uint64]) -> (Tensor[(14, 2, 14), float64],) {
  %689 = cast(%var_454, dtype="uint64") /* ty=uint64 */;
  %690 = cast(%var_455, dtype="uint64") /* ty=Tensor[(14, 2, 14), uint64] */;
  %691 = left_shift(%689, %690) /* ty=Tensor[(14, 2, 14), uint64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %693 = cos(%692) /* ty=Tensor[(14, 2, 14), float64] */;
  (%693,)
}

def @func_12500() -> (Tensor[(6, 9, 4), float32],) {
  %694 = @func_7058() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) */;
  %695 = %694.0;
  (%695,)
}

def @func_15608() -> (Tensor[(6, 9, 4), float32],) {
  %696 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %697 = %696.0;
  (%697,)
}

def @func_15974() -> (Tensor[(6, 9, 4), float64],) {
  %698 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %699 = %698.0;
  (%699,)
}

def @func_12392() -> Tensor[(6, 9, 4), float32] {
  @func_8439() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_4698() -> (Tensor[(1, 1, 15), float32],) {
  %700 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %701 = %700.1;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %703 = cos(%702) /* ty=Tensor[(1, 1, 15), float32] */;
  (%703,)
}

def @func_16919(%var_16905: Tensor[(12, 16, 6), int32]) -> (Tensor[(12, 16, 6), bool], Tensor[(6, 9, 4), float32]) {
  %704 = cast(%var_16905, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
  %705 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(12, 16, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 16, 6), int32] */, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %708 = greater_equal(%706, %707) /* ty=Tensor[(12, 16, 6), bool] */;
  %709 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%708, %709)
}

def @func_9481() -> (Tensor[(6, 9, 4), float64],) {
  %710 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %711 = %710.0;
  (%711,)
}

def @func_10881() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %712 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %713 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
  %714 = %712.0;
  %715 = %713.1;
  (%714, %715)
}

def @func_1615(%var_1548: Tensor[(15, 6, 15), float64], %var_1565: Tensor[(78, 2), float32]) -> (uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) {
  %716 = cast(%var_1565, dtype="float32") /* ty=Tensor[(78, 2), float32] */;
  %717 = cast(meta[relay.Constant][31] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %718 = reshape(%716, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %719 = reshape(%717, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %720 = @func_1128(%718, %719) /* ty=(Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %721 = cast(%var_1548, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %722 = acosh(%721) /* ty=Tensor[(15, 6, 15), float64] */;
  %723 = cast(%var_1548, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %724 = erf(%723) /* ty=Tensor[(15, 6, 15), float64] */;
  %725 = cast(%724, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %726 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%722, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = %720.2;
  %730 = equal(%727, %728) /* ty=Tensor[(15, 6, 15), bool] */;
  (%729, %var_1565, meta[relay.Constant][31] /* ty=Tensor[(392), uint64] */, %730)
}

def @func_9188() -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) {
  %731 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %732 = %731.1;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %734 = reshape(%733, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
  %735 = @func_5311(%734) /* ty=Tensor[(6, 9, 4), uint8] */;
  (%732, %735)
}

def @func_13982() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float64]) {
  %736 = @func_7058() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) */;
  %737 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %738 = %736.1;
  %739 = %737.0;
  (%738, %739)
}

def @func_5930(%var_5923: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %740 = cast(%var_5923, dtype="float32") /* ty=Tensor[(15), float32] */;
  %741 = reshape(%740, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %742 = @func_2229(%741) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %743 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %744 = %742.0;
  (%743, %744, %var_5923)
}

def @func_10365() -> (Tensor[(6, 9, 4), float64],) {
  %745 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %746 = %745.1;
  (%746,)
}

def @func_3275() -> (Tensor[(6, 9, 4), float64],) {
  %747 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %748 = %747.1;
  %749 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %751 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%748, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %754 = floor_mod(%752, %753) /* ty=Tensor[(6, 9, 4), float64] */;
  (%754,)
}

def @func_15540() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) {
  %755 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %756 = @func_15447() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %757 = %755.0;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %759 = reshape(%758, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %760 = @func_6798(%759) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %761 = %756.0;
  %762 = %760.1;
  %763 = @func_8152() /* ty=Tensor[(6, 9, 4), float64] */;
  (%757, %761, %762, %763)
}

def @func_6198() -> (Tensor[(6, 9, 4), float32],) {
  %764 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %765 = %764.1;
  (%765,)
}

def @func_15201(%var_15069: Tensor[(16, 16, 15), float64], %var_15113: Tensor[(2288), uint16], %var_15150: Tensor[(168), int64], %var_15180: Tensor[(429), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(13, 5), float32], Tensor[(15, 6, 15), bool], Tensor[(1350), float64], Tensor[(156), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(7, 4, 6), bool], Tensor[(168), int64], Tensor[(11, 13, 3), float64], Tensor[(429), float64]) {
  %766 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %767 = %766.1;
  %768 = cast(%var_15069, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %772 = @func_12334() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) */;
  %773 = cast(meta[relay.Constant][32] /* ty=Tensor[(1350), float64] */, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %774 = cast(meta[relay.Constant][33] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %775 = reshape(%773, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float64] */;
  %776 = reshape(%774, newshape=[78, 2]) /* ty=Tensor[(78, 2), float32] */;
  %777 = @func_1615(%775, %776) /* ty=(uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) */;
  %778 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %779 = cast(%var_15113, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %780 = reshape(%779, newshape=[2288, 1]) /* ty=Tensor[(2288, 1), uint16] */;
  %781 = @func_9137(%780) /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) */;
  %782 = cast(%var_15150, dtype="int64") /* ty=Tensor[(168), int64] */;
  %783 = reshape(%782, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int64] */;
  %784 = cast(%var_15180, dtype="float64") /* ty=Tensor[(429), float64] */;
  %785 = cast(%var_15180, dtype="float64") /* ty=Tensor[(429), float64] */;
  %786 = reshape(%784, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %787 = reshape(%785, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %788 = @func_11133(%786, %787) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %789 = left_shift(%770, %771) /* ty=Tensor[(16, 16, 15), int8] */;
  %790 = %772.3;
  %791 = %777.3;
  %792 = %778.0;
  %793 = %781.1;
  %794 = @func_15043(%783) /* ty=Tensor[(7, 4, 6), bool] */;
  %795 = %788.1;
  (%789, %790, %791, meta[relay.Constant][32] /* ty=Tensor[(1350), float64] */, meta[relay.Constant][33] /* ty=Tensor[(156), float32] */, %792, %793, %var_15113, %794, %var_15150, %795, %var_15180)
}

def @func_6178() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %796 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %797 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %800 = %796.0;
  %801 = sin(%799) /* ty=Tensor[(6, 9, 4), float32] */;
  (%800, %801)
}

def @func_5034() -> Tensor[(1, 1, 15), float32] {
  %802 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %802.0
}

def @func_2728() -> (Tensor[(6, 9, 4), float32],) {
  %803 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%803,)
}

def @func_11060() -> Tensor[(6, 9, 4), float32] {
  %804 = @func_9707() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %804.1
}

def @func_14901() -> Tensor[(5, 3, 15), int64] {
  %805 = @func_13656() /* ty=(Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) */;
  %805.0
}

def @func_7491() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %806 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %809 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %810 = log(%808) /* ty=Tensor[(6, 9, 4), float32] */;
  %811 = %809.0;
  (%810, %811)
}

def @func_3718() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %812 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %813 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %814 = %812.0;
  (%813, %814)
}

def @func_14795(%var_14789: float32) -> (Tensor[(6, 9, 4), float32], Tensor[(11, 6, 2), bool], float32, Tensor[(6, 9, 4), float32]) {
  %815 = cast(%var_14789, dtype="float32") /* ty=float32 */;
  %816 = reshape(%815, newshape=[]) /* ty=float32 */;
  %817 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %818 = @func_8439() /* ty=Tensor[(6, 9, 4), float32] */;
  %819 = @func_14206(%816) /* ty=Tensor[(11, 6, 2), bool] */;
  %820 = %817.1;
  (%818, %819, %var_14789, %820)
}

def @func_8152() -> Tensor[(6, 9, 4), float64] {
  @func_7960() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_5858() -> Tensor[(6, 9, 4), float32] {
  @func_3194() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_11930() -> Tensor[(6, 9, 4), float32] {
  %821 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %821.0
}

def @func_14339() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %822 = @func_6999() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) */;
  %823 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %824 = %822.0;
  %825 = %823.0;
  (%824, %825)
}

def @func_15358() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
  %826 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
  %827 = @func_11998() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %828 = @func_6814() /* ty=Tensor[(392), uint64] */;
  %829 = %826.0;
  %830 = %827.0;
  (%828, %829, %830)
}

def @func_16635() -> Tensor[(6, 9, 4), bool] {
  %831 = @func_15631() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) */;
  %831.1
}

def @func_17200() -> Tensor[(6, 9, 4), float32] {
  @func_6010() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_4421(%var_4414: Tensor[(10, 14, 12), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) {
  %832 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %833 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %834 = %833.1;
  %835 = cast(%var_4414, dtype="uint64") /* ty=Tensor[(10, 14, 12), uint64] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="uint64") /* ty=Tensor[(10, 14, 12), uint64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %839 = %832.0;
  %840 = bitwise_and(%837, %838) /* ty=Tensor[(10, 14, 12), uint64] */;
  (%839, %840)
}

def @func_13385() -> Tensor[(392), uint64] {
  @func_4583() /* ty=Tensor[(392), uint64] */
}

def @func_5914() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %841 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %842 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %843 = %842.1;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %845 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %846 = %841.0;
  %847 = log10(%844) /* ty=Tensor[(6, 9, 4), float32] */;
  %848 = %845.0;
  (%846, %847, %848)
}

def @func_15878() -> (Tensor[(6, 9, 4), float64],) {
  %849 = @func_14690() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %850 = %849.0;
  (%850,)
}

def @func_6303() -> (Tensor[(6, 9, 4), float32],) {
  %851 = @func_6010() /* ty=Tensor[(6, 9, 4), float32] */;
  (%851,)
}

def @func_15424(%var_15421: Tensor[(2, 14, 3), float32]) -> Tensor[(2, 14, 3), float32] {
  %852 = cast(%var_15421, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  log10(%852) /* ty=Tensor[(2, 14, 3), float32] */
}

def @func_3400(%var_3381: Tensor[(13, 16, 11), uint16], %var_3382: Tensor[(13, 16, 11), uint16]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) {
  %853 = cast(%var_3382, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %854 = shape_of(%var_3381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%var_3381, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %857 = greater_equal(%855, %856) /* ty=Tensor[(13, 16, 11), bool] */;
  %858 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%857, %858)
}

def @func_6999() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) {
  %859 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %860 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %861 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %862 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %863 = %859.0;
  %864 = %860.3;
  %865 = %861.4;
  %866 = %862.1;
  (%863, %864, %865, %866)
}

def @func_2992(%var_2968: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), bool],) {
  %867 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  %868 = cast(%var_2968, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = greater(%870, %871) /* ty=Tensor[(6, 9, 4), bool] */;
  (%872,)
}

def @func_2657() -> Tensor[(6, 9, 4), float32] {
  %873 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  sqrt(%873) /* ty=Tensor[(6, 9, 4), float32] */
}

def @main(%var_17471: Tensor[(9, 8, 16), uint16]) -> Tensor[(9, 8, 16), bool] {
  %874 = @func_14977() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %875 = %874.0;
  %876 = cast(%var_17471, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%878, %879) /* ty=Tensor[(9, 8, 16), bool] */
}

def @func_13656() -> (Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) {
  %880 = @func_11185() /* ty=(Tensor[(5, 3, 15), int64],) */;
  %881 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %882 = %880.0;
  %883 = %881.0;
  (%882, %883)
}

def @func_10839(%var_10786: Tensor[(1200), float32], %var_10832: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(12, 10, 10), uint32], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32]) {
  %884 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %885 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %886 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %887 = cast(%var_10786, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %888 = reshape(%887, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
  %889 = @func_5827(%888) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) */;
  %890 = %889.0;
  %891 = cast(%var_10786, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="uint32") /* ty=Tensor[(12, 10, 10), uint32] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %895 = cast(%var_10832, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %896 = reshape(%895, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
  %897 = @func_4421(%896) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
  %898 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
  %899 = %884.0;
  %900 = %885.0;
  %901 = %886.1;
  %902 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  %903 = bitwise_and(%893, %894) /* ty=Tensor[(12, 10, 10), uint32] */;
  %904 = %897.0;
  %905 = %898.1;
  (%899, %900, %901, %902, %903, %904, %var_10832, %905)
}

def @func_6104() -> (Tensor[(6, 9, 4), float64],) {
  %906 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %907 = %906.0;
  (%907,)
}

def @func_9011() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %908 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %909 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %910 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %911 = %908.0;
  %912 = @func_3779() /* ty=Tensor[(6, 9, 4), float64] */;
  %913 = %909.0;
  %914 = %910.2;
  (%911, %912, %913, %914)
}

def @func_13772() -> (Tensor[(6, 9, 4), float64], Tensor[(?, ?, 15), uint16]) {
  %915 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %916 = @func_13100() /* ty=Tensor[(?, ?, 15), bool] */;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(?, ?, 15), float64] */;
  %918 = log(%917) /* ty=Tensor[(?, ?, 15), float64] */;
  %919 = cast(%918, dtype="float64") /* ty=Tensor[(?, ?, 15), float64] */;
  %920 = cosh(%919) /* ty=Tensor[(?, ?, 15), float64] */;
  %921 = cast(%918, dtype="uint16") /* ty=Tensor[(?, ?, 15), uint16] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %923 = cast(%920, dtype="uint16") /* ty=Tensor[(?, ?, 15), uint16] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %925 = %915.1;
  %926 = bitwise_and(%923, %924) /* ty=Tensor[(?, ?, 15), uint16] */;
  (%925, %926)
}

def @func_17052() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), bool]) {
  %927 = @func_6178() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %928 = %927.1;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %930 = reshape(%929, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %931 = @func_2992(%930) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %932 = @func_7579() /* ty=(Tensor[(6, 9, 4), bool],) */;
  %933 = %931.0;
  %934 = %932.0;
  (%928, %933, %934)
}

def @func_4393() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %935 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %936 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %937 = %935.1;
  %938 = %936.0;
  (%937, %938)
}

def @func_12334() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) {
  %939 = @func_10721() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %940 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %941 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %942 = reshape(%941, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
  %943 = @func_9352(%942) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) */;
  %944 = %939.0;
  %945 = %940.0;
  %946 = %943.1;
  (%944, %945, %946, meta[relay.Constant][35] /* ty=Tensor[(13, 5), float32] */)
}

def @func_10916() -> Tensor[(6, 9, 4), float32] {
  %947 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %947.1
}

def @func_6086() -> (Tensor[(6, 9, 4), float32],) {
  %948 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%948,)
}

def @func_17250() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(14, 8, 12), float32]) {
  %949 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
  %950 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %951 = cast(meta[relay.Constant][36] /* ty=Tensor[(672, 2), int32] */, dtype="int32") /* ty=Tensor[(672, 2), int32] */;
  %952 = cast(meta[relay.Constant][36] /* ty=Tensor[(672, 2), int32] */, dtype="int32") /* ty=Tensor[(672, 2), int32] */;
  %953 = reshape(%951, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), int32] */;
  %954 = reshape(%952, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), int32] */;
  %955 = @func_16995(%953, %954) /* ty=Tensor[(14, 8, 12), int32] */;
  %956 = cast(meta[relay.Constant][36] /* ty=Tensor[(672, 2), int32] */, dtype="float32") /* ty=Tensor[(672, 2), float32] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="float32") /* ty=Tensor[(14, 8, 12), float32] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %960 = %949.2;
  %961 = %950.1;
  %962 = floor_divide(%958, %959) /* ty=Tensor[(14, 8, 12), float32] */;
  (%960, %961, %962)
}

def @func_9541(%var_9538: Tensor[(88, 26), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(13, 16, 11), bool], Tensor[(88, 26), uint16]) {
  %963 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %964 = @func_4128() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %965 = cast(%var_9538, dtype="uint16") /* ty=Tensor[(88, 26), uint16] */;
  %966 = reshape(%965, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
  %967 = @func_3700(%966) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
  %968 = %963.0;
  %969 = %964.1;
  %970 = %967.2;
  (%968, %969, %970, %var_9538)
}

def @func_5170() -> (Tensor[(5, 3, 15), bool],) {
  %971 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %972 = %971.0;
  %973 = cast(%972, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %974 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 3, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 3, 15), bool] */;
  %975 = greater(%973, %974) /* ty=Tensor[(5, 3, 15), bool] */;
  (%975,)
}

def @func_14133() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %976 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %977 = @func_9745() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %978 = %976.0;
  %979 = %977.1;
  (%978, %979)
}

def @func_8055(%var_8044: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  %980 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %981 = cast(%var_8044, dtype="float32") /* ty=Tensor[(15), float32] */;
  %982 = reshape(%981, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %983 = @func_2229(%982) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %984 = %980.1;
  %985 = %983.0;
  %986 = @func_3412() /* ty=Tensor[(6, 9, 4), float32] */;
  (%984, %985, %var_8044, %986)
}

def @func_12931() -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(6, 9, 4), float32]) {
  %987 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %988 = reshape(%987, newshape=[]) /* ty=uint64 */;
  %989 = @func_4988(%988) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %990 = @func_8546() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) */;
  %991 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  %992 = %989.1;
  %993 = %990.0;
  (%991, %992, meta[relay.Constant][38] /* ty=uint64 */, %993)
}

def @func_5827(%var_5780: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) {
  %994 = cast(%var_5780, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %995 = log(%994) /* ty=Tensor[(12, 10, 10), float32] */;
  %996 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  (%995, %996)
}

def @func_5110() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %997 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %998 = cast(%997, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %999 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %1000 = atanh(%998) /* ty=Tensor[(6, 9, 4), float64] */;
  (%999, %1000)
}

def @func_8277() -> (Tensor[(6, 9, 4), float32],) {
  %1001 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1001,)
}

def @func_3700(%var_3695: Tensor[(2288), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) {
  %1002 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1003 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1004 = %1003.0;
  %1005 = cast(%1004, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %1006 = asin(%1005) /* ty=Tensor[(6, 9, 4), float64] */;
  %1007 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 9, 4), float64] */, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1011 = cast(%var_3695, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %1012 = cast(%var_3695, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %1013 = reshape(%1011, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %1014 = reshape(%1012, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %1015 = @func_3400(%1013, %1014) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) */;
  %1016 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %1017 = %1002.0;
  %1018 = logical_xor(%1009, %1010) /* ty=Tensor[(6, 9, 4), uint8] */;
  %1019 = %1015.0;
  %1020 = acosh(%1016) /* ty=Tensor[(6, 9, 4), float64] */;
  (%1017, %1018, %1019, %var_3695, %1020)
}

def @func_14287() -> (Tensor[(6, 9, 4), float32],) {
  %1021 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1021,)
}

def @func_15509() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64]) {
  %1022 = @func_11998() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1023 = cast(meta[relay.Constant][40] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1024 = reshape(%1023, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1025 = @func_9627(%1024) /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) */;
  %1026 = %1022.0;
  %1027 = %1025.5;
  (%1026, %1027, meta[relay.Constant][40] /* ty=Tensor[(392), uint64] */)
}

def @func_6733() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %1028 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1029 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %1030 = %1028.0;
  %1031 = %1029.1;
  (%1030, %1031)
}

def @func_7200() -> (Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
  %1032 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1033 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 12), uint16] */, dtype="uint16") /* ty=Tensor[(6, 12), uint16] */;
  %1034 = reshape(%1033, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %1035 = @func_3911(%1034) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %1036 = %1032.0;
  %1037 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  %1038 = %1035.0;
  (%1036, %1037, %1038, meta[relay.Constant][41] /* ty=Tensor[(6, 12), uint16] */)
}

def @func_4749(%var_4742: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %1039 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1040 = cast(%var_4742, dtype="uint64") /* ty=uint64 */;
  %1041 = cast(meta[relay.Constant][42] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1042 = reshape(%1040, newshape=[]) /* ty=uint64 */;
  %1043 = reshape(%1041, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %1044 = @func_475(%1042, %1043) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %1045 = %1039.0;
  %1046 = %1044.0;
  (%1045, %1046, %var_4742, meta[relay.Constant][42] /* ty=Tensor[(392), uint64] */)
}

def @func_9993() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %1047 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1048 = @func_6048() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */;
  %1049 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1050 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1051 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1052 = %1047.0;
  %1053 = %1048.0;
  %1054 = %1049.0;
  %1055 = %1050.0;
  %1056 = %1051.1;
  (%1052, %1053, %1054, %1055, %1056)
}

def @func_7997() -> Tensor[(6, 9, 4), float32] {
  %1057 = @func_6725() /* ty=(Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) */;
  %1057.4
}

def @func_12838(%var_12832: Tensor[(15), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
  %1058 = @func_12334() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) */;
  %1059 = cast(%var_12832, dtype="float32") /* ty=Tensor[(15), float32] */;
  %1060 = reshape(%1059, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1061 = @func_8055(%1060) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
  %1062 = %1058.2;
  %1063 = %1061.0;
  (%1062, %1063, %var_12832)
}

def @func_15585() -> (Tensor[(6, 9, 4), float32],) {
  %1064 = @func_8439() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1064,)
}

def @func_16320() -> (Tensor[(6, 9, 4), bool], Tensor[(1, 1, 15), float32]) {
  %1065 = @func_7809() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) */;
  %1066 = %1065.3;
  %1067 = @func_15864() /* ty=Tensor[(1, 1, 15), float32] */;
  (%1066, %1067)
}

def @func_13673() -> Tensor[(6, 9, 4), float32] {
  %1068 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %1068.0
}

def @func_6508() -> Tensor[(6, 9, 4), float32] {
  %1069 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1069.0
}

def @func_15788(%var_15703: Tensor[(15), float32]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 392), float64], Tensor[(2288, 15), bool]) {
  %1070 = cast(meta[relay.Constant][43] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %1071 = cast(meta[relay.Constant][43] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %1072 = reshape(%1070, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %1073 = reshape(%1071, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %1074 = @func_3400(%1072, %1073) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) */;
  %1075 = cast(%var_15703, dtype="float32") /* ty=Tensor[(15), float32] */;
  %1076 = reshape(%1075, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1077 = @func_12838(%1076) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) */;
  %1078 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1079 = @func_14809() /* ty=Tensor[(392), uint64] */;
  %1080 = cast(%1079, dtype="float64") /* ty=Tensor[(392), float64] */;
  %1081 = cast(meta[relay.Constant][43] /* ty=Tensor[(2288, 1), uint16] */, dtype="float64") /* ty=Tensor[(2288, 1), float64] */;
  %1082 = cast(%var_15703, dtype="bool") /* ty=Tensor[(15), bool] */;
  %1083 = cast(meta[relay.Constant][43] /* ty=Tensor[(2288, 1), uint16] */, dtype="bool") /* ty=Tensor[(2288, 1), bool] */;
  %1084 = less(%1082, %1083) /* ty=Tensor[(2288, 15), bool] */;
  %1085 = cast(%1084, dtype="float32") /* ty=Tensor[(2288, 15), float32] */;
  %1086 = cosh(%1085) /* ty=Tensor[(2288, 15), float32] */;
  %1087 = cast(%1086, dtype="bool") /* ty=Tensor[(2288, 15), bool] */;
  %1088 = cast(%var_15703, dtype="bool") /* ty=Tensor[(15), bool] */;
  %1089 = %1074.0;
  %1090 = %1077.1;
  %1091 = %1078.0;
  %1092 = @func_11060() /* ty=Tensor[(6, 9, 4), float32] */;
  %1093 = power(%1080, %1081) /* ty=Tensor[(2288, 392), float64] */;
  %1094 = logical_and(%1087, %1088) /* ty=Tensor[(2288, 15), bool] */;
  (%1089, %1090, %1091, %1092, %1093, %1094)
}

def @func_13304() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %1095 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1096 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1097 = %1095.0;
  %1098 = %1096.0;
  %1099 = @func_6926() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1097, %1098, %1099)
}

def @func_5311(%var_5306: Tensor[(6, 9, 4), float64]) -> Tensor[(6, 9, 4), uint8] {
  %1100 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %1101 = cast(%var_5306, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %1102 = shape_of(%1100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1103 = cast(%1100, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%1103, %1104) /* ty=Tensor[(6, 9, 4), uint8] */
}

def @func_7960() -> Tensor[(6, 9, 4), float64] {
  %1105 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1105.0
}

def @func_6441() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %1106 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1107 = %1106.0;
  %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %1109 = reshape(%1108, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
  %1110 = @func_5311(%1109) /* ty=Tensor[(6, 9, 4), uint8] */;
  (%1107, %1110)
}

def @func_16542() -> (Tensor[(6, 9, 4), float32],) {
  %1111 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1112 = %1111.0;
  (%1112,)
}

def @func_8912() -> (Tensor[(6, 9, 4), float32],) {
  %1113 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1113,)
}

def @func_10264() -> (Tensor[(6, 9, 4), uint16],) {
  %1114 = @func_8546() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) */;
  %1115 = %1114.2;
  (%1115,)
}

def @func_17099(%var_17096: Tensor[(14, 10, 4), float64]) -> Tensor[(14, 10, 4), float64] {
  %1116 = cast(%var_17096, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
  tan(%1116) /* ty=Tensor[(14, 10, 4), float64] */
}

def @func_11749(%var_11723: Tensor[(7, 15, 15), float64], %var_11734: Tensor[(1680), bool]) -> (Tensor[(7, 15, 15), float64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float64]) {
  %1117 = cast(%var_11723, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
  %1118 = cast(%var_11734, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %1119 = reshape(%1118, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
  %1120 = @func_4421(%1119) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
  %1121 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1122 = log(%1117) /* ty=Tensor[(7, 15, 15), float64] */;
  %1123 = %1120.0;
  %1124 = %1121.1;
  (%1122, %1123, %var_11734, %1124)
}

def @func_11998() -> (Tensor[(6, 9, 4), float32],) {
  %1125 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1125,)
}

def @func_7579() -> (Tensor[(6, 9, 4), bool],) {
  %1126 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1127 = %1126.0;
  %1128 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 9, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %1129 = shape_of(%1127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1130 = cast(%1127, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1132 = equal(%1130, %1131) /* ty=Tensor[(6, 9, 4), bool] */;
  (%1132,)
}

def @func_3194() -> Tensor[(6, 9, 4), float32] {
  %1133 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1133.0
}

def @func_14265() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %1134 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1135 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1136 = %1134.0;
  %1137 = %1135.0;
  (%1136, %1137)
}

def @func_16652() -> (Tensor[(6, 9, 4), float32],) {
  %1138 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1138,)
}

def @func_9213() -> (Tensor[(1, 1, 15), float32],) {
  %1139 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  (%1139,)
}

def @func_4323() -> (Tensor[(6, 9, 4), float32],) {
  %1140 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1141 = %1140.0;
  (%1141,)
}

def @func_13939(%var_13924: bool, %var_13925: Tensor[(13, 13, 15), bool]) -> (Tensor[(13, 13, 15), bool],) {
  %1142 = cast(%var_13924, dtype="bool") /* ty=bool */;
  %1143 = cast(%var_13925, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %1144 = logical_or(%1142, %1143) /* ty=Tensor[(13, 13, 15), bool] */;
  (%1144,)
}

def @func_1128(%var_1089: Tensor[(13, 3, 4), float32], %var_1116: Tensor[(392), uint64]) -> (Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %1145 = cast(%var_1089, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %1146 = sin(%1145) /* ty=Tensor[(13, 3, 4), float32] */;
  %1147 = cast(%var_1089, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
  %1148 = shape_of(%1146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1149 = cast(%1146, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
  %1150 = dyn.reshape(%1147, %1148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1151 = cast(meta[relay.Constant][45] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1152 = cast(%var_1116, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1153 = reshape(%1151, newshape=[]) /* ty=uint64 */;
  %1154 = reshape(%1152, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %1155 = @func_475(%1153, %1154) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %1156 = not_equal(%1149, %1150) /* ty=Tensor[(13, 3, 4), bool] */;
  %1157 = %1155.0;
  (%1156, %1157, meta[relay.Constant][45] /* ty=uint64 */, %var_1116)
}

def @func_4661(%var_4651: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  %1158 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1159 = %1158.0;
  %1160 = cast(%var_4651, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1161 = shape_of(%1159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1162 = cast(%1159, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1164 = power(%1162, %1163) /* ty=Tensor[(6, 9, 4), float32] */;
  (%1164,)
}

def @func_16224() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %1165 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1166 = @func_16029() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1167 = %1165.0;
  %1168 = %1166.0;
  (%1167, %1168)
}

def @func_9859(%var_9813: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) {
  %1169 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1170 = cast(meta[relay.Constant][46] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %1171 = cast(%var_9813, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1172 = reshape(%1170, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %1173 = reshape(%1171, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1174 = @func_1128(%1172, %1173) /* ty=(Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %1175 = %1174.0;
  %1176 = cast(meta[relay.Constant][46] /* ty=Tensor[(156), float32] */, dtype="uint64") /* ty=Tensor[(156), uint64] */;
  %1177 = shape_of(%1175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1178 = cast(%1175, dtype="uint64") /* ty=Tensor[(13, 3, 4), uint64] */;
  %1179 = dyn.reshape(%1176, %1177, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1180 = cast(meta[relay.Constant][46] /* ty=Tensor[(156), float32] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %1181 = %1169.3;
  %1182 = multiply(%1178, %1179) /* ty=Tensor[(13, 3, 4), uint64] */;
  %1183 = log10(%1180) /* ty=Tensor[(156), float64] */;
  (%1181, %var_9813, %1182, %1183)
}

def @func_14672() -> Tensor[(6, 9, 4), float32] {
  %1184 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1184.0
}

def @func_14206(%var_14197: float32) -> Tensor[(11, 6, 2), bool] {
  %1185 = cast(%var_14197, dtype="bool") /* ty=bool */;
  %1186 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 6, 2), float32] */, dtype="bool") /* ty=Tensor[(11, 6, 2), bool] */;
  less_equal(%1185, %1186) /* ty=Tensor[(11, 6, 2), bool] */
}

def @func_16307() -> Tensor[(6, 9, 4), float64] {
  %1187 = @func_9481() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1187.0
}

def @func_4079() -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) {
  %1188 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1189 = cast(meta[relay.Constant][48] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1190 = reshape(%1189, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1191 = @func_2858(%1190) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %1192 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1193 = cast(meta[relay.Constant][48] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1194 = reshape(%1193, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %1195 = @func_2079(%1194) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %1196 = %1188.0;
  %1197 = %1191.1;
  %1198 = %1192.0;
  %1199 = %1195.3;
  (%1196, %1197, meta[relay.Constant][48] /* ty=Tensor[(392), uint64] */, %1198, %1199)
}

def @func_12175() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32]) {
  %1200 = @func_10365() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1201 = @func_9707() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %1202 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1203 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1204 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1205 = %1200.0;
  %1206 = %1201.1;
  %1207 = %1202.0;
  %1208 = %1203.1;
  %1209 = %1204.1;
  %1210 = @func_6010() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1205, %1206, %1207, %1208, %1209, %1210)
}

def @func_5253() -> (Tensor[(392), uint64],) {
  %1211 = @func_4583() /* ty=Tensor[(392), uint64] */;
  (%1211,)
}

def @func_7393() -> (Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  %1212 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %1213 = %1212.2;
  %1214 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1213, %1214)
}

def @func_9137(%var_9079: Tensor[(2288, 1), uint16]) -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) {
  %1215 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %1216 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %1217 = cast(%var_9079, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %1218 = reshape(%1217, newshape=[1, 2288]) /* ty=Tensor[(1, 2288), uint16] */;
  %1219 = @func_4930(%1218) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */;
  %1220 = %1219.0;
  %1221 = cast(%1220, dtype="float64") /* ty=Tensor[(392), float64] */;
  %1222 = %1215.1;
  %1223 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %1224 = %1216.0;
  %1225 = log2(%1221) /* ty=Tensor[(392), float64] */;
  %1226 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1222, %1223, %var_9079, %1224, %1225, %1226)
}

def @func_4583() -> Tensor[(392), uint64] {
  %1227 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %1227.2
}

def @func_16584(%var_16570: Tensor[(1152), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(1152), uint16], Tensor[(6, 9, 4), uint8]) {
  %1228 = @func_14690() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1229 = @func_16475() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1230 = cast(%var_16570, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %1231 = reshape(%1230, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint16] */;
  %1232 = @func_14433(%1231) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) */;
  %1233 = @func_16294() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) */;
  %1234 = @func_14809() /* ty=Tensor[(392), uint64] */;
  %1235 = %1228.0;
  %1236 = %1229.2;
  %1237 = %1232.2;
  %1238 = %1233.2;
  (%1234, %1235, %1236, %1237, %var_16570, %1238)
}

def @func_10760() -> Tensor[(6, 9, 4), float32] {
  %1239 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %1239.0
}

def @func_7418() -> (Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
  %1240 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %1241 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1242 = cosh(%1240) /* ty=Tensor[(16, 16, 15), float64] */;
  %1243 = %1241.2;
  (%1242, %1243)
}

def @func_3811() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %1244 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %1245 = cast(meta[relay.Constant][50] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %1246 = reshape(%1245, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %1247 = @func_2229(%1246) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %1248 = %1244.1;
  %1249 = %1247.0;
  (%1248, %1249, meta[relay.Constant][50] /* ty=Tensor[(15), float32] */)
}

def @func_14632() -> (Tensor[(6, 9, 4), uint8],) {
  %1250 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1251 = %1250.1;
  (%1251,)
}

def @func_16607() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %1252 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %1253 = @func_9188() /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) */;
  %1254 = %1252.0;
  %1255 = %1253.0;
  (%1254, %1255)
}

def @func_11018(%var_10963: Tensor[(8, 9, 7), uint32], %var_10964: Tensor[(8, 9, 7), uint32], %var_10983: Tensor[(216), float32]) -> (Tensor[(8, 9, 7), uint32], Tensor[(6, 9, 4), float32], Tensor[(216), float32], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
  %1256 = cast(%var_10964, dtype="uint32") /* ty=Tensor[(8, 9, 7), uint32] */;
  %1257 = shape_of(%var_10963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1258 = cast(%var_10963, dtype="uint32") /* ty=Tensor[(8, 9, 7), uint32] */;
  %1259 = dyn.reshape(%1256, %1257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1260 = cast(%var_10983, dtype="float32") /* ty=Tensor[(216), float32] */;
  %1261 = reshape(%1260, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1262 = @func_4661(%1261) /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1263 = cast(%var_10983, dtype="float32") /* ty=Tensor[(216), float32] */;
  %1264 = reshape(%1263, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1265 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1266 = right_shift(%1258, %1259) /* ty=Tensor[(8, 9, 7), uint32] */;
  %1267 = %1262.0;
  %1268 = @func_4357(%1264) /* ty=Tensor[(6, 9, 4), uint16] */;
  %1269 = %1265.0;
  (%1266, %1267, %var_10983, %1268, %1269)
}

def @func_15848() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %1270 = @func_11836() /* ty=Tensor[(6, 9, 4), float32] */;
  %1271 = @func_10916() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1270, %1271)
}

def @func_9745() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %1272 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1273 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1274 = %1273.0;
  %1275 = cast(%1274, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1276 = reshape(%1275, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1277 = @func_6284(%1276) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1278 = %1272.0;
  %1279 = %1277.2;
  (%1278, %1274, %1279)
}

def @func_6069() -> Tensor[(6, 9, 4), float64] {
  %1280 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1280.0
}

def @func_16197() -> Tensor[(392), uint64] {
  %1281 = @func_12962() /* ty=(Tensor[(392), uint64],) */;
  %1281.0
}

def @func_3616() -> (Tensor[(6, 9, 4), float32],) {
  %1282 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1282,)
}

def @func_13862(%var_13807: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), float64]) {
  %1283 = @func_13304() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1284 = cast(%var_13807, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %1285 = reshape(%1284, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
  %1286 = @func_4023(%1285) /* ty=(Tensor[(5, 3, 1), float32],) */;
  %1287 = @func_9434() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %1288 = @func_10661() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1289 = %1283.1;
  %1290 = %1286.0;
  %1291 = %1287.1;
  %1292 = %1288.0;
  %1293 = @func_10316() /* ty=Tensor[(392), float64] */;
  (%1289, %1290, %var_13807, %1291, %1292, %1293)
}

def @func_17291() -> (Tensor[(6, 9, 4), float64],) {
  %1294 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1295 = %1294.0;
  (%1295,)
}

def @func_6798(%var_6778: Tensor[(6, 9, 4), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) {
  %1296 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %1297 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %1298 = cast(%var_6778, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %1299 = shape_of(%1297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1300 = cast(%1297, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %1301 = dyn.reshape(%1298, %1299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1302 = %1296.2;
  %1303 = greater_equal(%1300, %1301) /* ty=Tensor[(6, 9, 4), bool] */;
  (%1302, %1303)
}

def @func_3437() -> Tensor[(6, 9, 4), float32] {
  %1304 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1304.0
}

def @func_16834() -> Tensor[(6, 9, 4), float32] {
  %1305 = @func_16224() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1305.0
}

def @func_8639(%var_8634: Tensor[(5, 14, 7), int16], %var_8635: Tensor[(5, 14, 7), int16]) -> (Tensor[(5, 14, 7), int16],) {
  %1306 = cast(%var_8635, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
  %1307 = shape_of(%var_8634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1308 = cast(%var_8634, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
  %1309 = dyn.reshape(%1306, %1307, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1310 = multiply(%1308, %1309) /* ty=Tensor[(5, 14, 7), int16] */;
  (%1310,)
}

def @func_16790() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %1311 = @func_11624() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) */;
  %1312 = @func_16127() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1313 = %1311.2;
  %1314 = %1312.1;
  (%1313, %1314)
}

def @func_9707() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
  %1315 = @func_6725() /* ty=(Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) */;
  %1316 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1317 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %1318 = %1317.0;
  %1319 = cast(%1318, dtype="int64") /* ty=Tensor[(1, 1, 15), int64] */;
  %1320 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 16, 15), float32] */, dtype="int64") /* ty=Tensor[(1, 16, 15), int64] */;
  %1321 = bitwise_xor(%1319, %1320) /* ty=Tensor[(1, 16, 15), int64] */;
  %1322 = cast(%1318, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %1323 = cast(%1321, dtype="bool") /* ty=Tensor[(1, 16, 15), bool] */;
  %1324 = cast(%1321, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
  %1325 = sinh(%1324) /* ty=Tensor[(1, 16, 15), float32] */;
  %1326 = cast(%1325, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %1327 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1328 = %1315.0;
  %1329 = %1316.0;
  %1330 = less(%1322, %1323) /* ty=Tensor[(1, 16, 15), bool] */;
  %1331 = log10(%1326) /* ty=Tensor[(1, 16, 15), float64] */;
  %1332 = %1327.0;
  (%1328, %1329, %1330, %1331, %1332)
}

def @func_12722() -> Tensor[(6, 9, 4), float32] {
  @func_3437() /* ty=Tensor[(6, 9, 4), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6508() -> Tensor[(6, 9, 4), float32] {
  %0 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %0.0
}

def @func_5915() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %9 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %1 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %2 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %3 = %2.1;
    %4 = cast(%3, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %5 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %6 = %1.0;
    %7 = log10(%4) /* ty=Tensor[(6, 9, 4), float32] */;
    %8 = %5.0;
    (%6, %7, %8)
  };
  %9() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_10054() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %10 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %11 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %12 = %10.0;
  %13 = %11.0;
  (%12, %13)
}

def @func_11393() -> (Tensor[(6, 9, 4), float32],) {
  %14 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%14,)
}

def @func_8441() -> Tensor[(6, 9, 4), float32] {
  @func_8439() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_17115() -> Tensor[(6, 9, 4), float32] {
  %15 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_6508() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %15() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_16818() -> (Tensor[(6, 9, 4), float32],) {
  @func_16816() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_4423(%var_4422: Tensor[(10, 14, 12), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) {
  %25 = fn (%var_4414: Tensor[(10, 14, 12), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) {
    %16 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %17 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
    %18 = %17.1;
    %19 = cast(%var_4414, dtype="uint64") /* ty=Tensor[(10, 14, 12), uint64] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%18, dtype="uint64") /* ty=Tensor[(10, 14, 12), uint64] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %23 = %16.0;
    %24 = bitwise_and(%21, %22) /* ty=Tensor[(10, 14, 12), uint64] */;
    (%23, %24)
  };
  %25(%var_4422) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */
}

def @func_4664(%var_4662: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  @func_4661(%var_4662) /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_16791() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %30 = fn () -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
    %26 = @func_11624() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) */;
    %27 = @func_16127() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %28 = %26.2;
    %29 = %27.1;
    (%28, %29)
  };
  %30() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_15864() -> Tensor[(1, 1, 15), float32] {
  @func_5034() /* ty=Tensor[(1, 1, 15), float32] */
}

def @func_6071() -> Tensor[(6, 9, 4), float64] {
  @func_6069() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_6048() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %31 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %34 = reshape(%33, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
  %35 = @func_5311(%34) /* ty=Tensor[(6, 9, 4), uint8] */;
  (%32, %35)
}

def @func_10663() -> (Tensor[(6, 9, 4), float32],) {
  @func_10661() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_8279() -> (Tensor[(6, 9, 4), float32],) {
  @func_8277() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_14674() -> Tensor[(6, 9, 4), float32] {
  @func_14672() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_16477() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  @func_16475() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_16518() -> (Tensor[(6, 9, 4), float64],) {
  %37 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %36 = @func_16392() /* ty=Tensor[(6, 9, 4), float64] */;
    (%36,)
  };
  %37() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_6585(%var_6583: Tensor[(6, 9, 4), float64], %var_6584: Tensor[(6, 12), uint16]) -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
  %52 = fn (%var_6533: Tensor[(6, 9, 4), float64], %var_6560: Tensor[(6, 12), uint16]) -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
    %38 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
    %39 = %38.0;
    %40 = cast(%var_6533, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%39, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %44 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %45 = cast(%var_6560, dtype="uint16") /* ty=Tensor[(6, 12), uint16] */;
    %46 = reshape(%45, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
    %47 = @func_3911(%46) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
    %48 = logical_or(%42, %43) /* ty=Tensor[(6, 9, 4), bool] */;
    %49 = %44.0;
    %50 = @func_6069() /* ty=Tensor[(6, 9, 4), float64] */;
    %51 = %47.0;
    (%48, %49, %50, %51, %var_6560)
  };
  %52(%var_6583, %var_6584) /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */
}

def @func_4394() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %57 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %53 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %54 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %55 = %53.1;
    %56 = %54.0;
    (%55, %56)
  };
  %57() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_13915() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint16]) {
  %67 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint16]) {
    %58 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %59 = @func_9993() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */;
    %60 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
    %61 = %59.3;
    %62 = cast(%61, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %63 = reshape(%62, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %64 = %58.0;
    %65 = %60.0;
    %66 = @func_4357(%63) /* ty=Tensor[(6, 9, 4), uint16] */;
    (%64, %61, %65, %66)
  };
  %67() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint16]) */
}

def @func_2657() -> Tensor[(6, 9, 4), float32] {
  %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  sqrt(%68) /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_10265() -> (Tensor[(6, 9, 4), uint16],) {
  %71 = fn () -> (Tensor[(6, 9, 4), uint16],) {
    %69 = @func_8546() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) */;
    %70 = %69.2;
    (%70,)
  };
  %71() /* ty=(Tensor[(6, 9, 4), uint16],) */
}

def @func_7811() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) {
  @func_7809() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) */
}

def @func_16320() -> (Tensor[(6, 9, 4), bool], Tensor[(1, 1, 15), float32]) {
  %72 = @func_7809() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) */;
  %73 = %72.3;
  %74 = @func_15864() /* ty=Tensor[(1, 1, 15), float32] */;
  (%73, %74)
}

def @func_14495(%var_14493: Tensor[(6, 12, 8), float32], %var_14494: Tensor[(72), uint16]) -> (Tensor[(6, 12, 8), float32], Tensor[(6, 12, 8), float32], Tensor[(9, 14, 3), bool], Tensor[(378), int8], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16]) {
  @func_14491(%var_14493, %var_14494) /* ty=(Tensor[(6, 12, 8), float32], Tensor[(6, 12, 8), float32], Tensor[(9, 14, 3), bool], Tensor[(378), int8], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16]) */
}

def @func_2812(%var_2811: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) {
  %83 = fn (%var_2789: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) {
    %75 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %76 = cast(%var_2789, dtype="uint64") /* ty=Tensor[(196, 2), uint64] */;
    %77 = reshape(%76, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
    %78 = @func_2079(%77) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
    %79 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %80 = %75.0;
    %81 = %78.2;
    %82 = %79.0;
    (%80, %81, %var_2789, %82)
  };
  %83(%var_2811) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_9481() -> (Tensor[(6, 9, 4), float64],) {
  %84 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %85 = %84.0;
  (%85,)
}

def @func_3700(%var_3695: Tensor[(2288), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) {
  %86 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %87 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %90 = asin(%89) /* ty=Tensor[(6, 9, 4), float64] */;
  %91 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 4), float64] */, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %95 = cast(%var_3695, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %96 = cast(%var_3695, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %97 = reshape(%95, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %98 = reshape(%96, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %99 = @func_3400(%97, %98) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) */;
  %100 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %101 = %86.0;
  %102 = logical_xor(%93, %94) /* ty=Tensor[(6, 9, 4), uint8] */;
  %103 = %99.0;
  %104 = acosh(%100) /* ty=Tensor[(6, 9, 4), float64] */;
  (%101, %102, %103, %var_3695, %104)
}

def @func_16309() -> Tensor[(6, 9, 4), float64] {
  @func_16307() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_4129() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %109 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
    %105 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %106 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %107 = %105.0;
    %108 = %106.0;
    (%107, %108)
  };
  %109() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_11604() -> Tensor[(6, 9, 4), float32] {
  %110 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %110.0
}

def @func_3703(%var_3701: Tensor[(2288), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) {
  @func_3700(%var_3701) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */
}

def @func_13386() -> Tensor[(392), uint64] {
  %111 = fn () -> Tensor[(392), uint64] {
    @func_4583() /* ty=Tensor[(392), uint64] */
  };
  %111() /* ty=Tensor[(392), uint64] */
}

def @func_10056() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  @func_10054() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_15866() -> Tensor[(1, 1, 15), float32] {
  @func_15864() /* ty=Tensor[(1, 1, 15), float32] */
}

def @func_15878() -> (Tensor[(6, 9, 4), float64],) {
  %112 = @func_14690() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %113 = %112.0;
  (%113,)
}

def @func_16608() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %118 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
    %114 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %115 = @func_9188() /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) */;
    %116 = %114.0;
    %117 = %115.0;
    (%116, %117)
  };
  %118() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */
}

def @func_11137(%var_11135: Tensor[(11, 13, 3), float64], %var_11136: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  @func_11133(%var_11135, %var_11136) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */
}

def @func_10694(%var_10692: Tensor[(12, 2, 14), bool]) -> (Tensor[(12, 2, 14), bool], Tensor[(12, 2, 14), uint64]) {
  @func_10691(%var_10692) /* ty=(Tensor[(12, 2, 14), bool], Tensor[(12, 2, 14), uint64]) */
}

def @func_14811() -> Tensor[(392), uint64] {
  @func_14809() /* ty=Tensor[(392), uint64] */
}

def @func_15788(%var_15703: Tensor[(15), float32]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 392), float64], Tensor[(2288, 15), bool]) {
  %119 = cast(meta[relay.Constant][2] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %120 = cast(meta[relay.Constant][2] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %121 = reshape(%119, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %122 = reshape(%120, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), uint16] */;
  %123 = @func_3400(%121, %122) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) */;
  %124 = cast(%var_15703, dtype="float32") /* ty=Tensor[(15), float32] */;
  %125 = reshape(%124, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %126 = @func_12838(%125) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) */;
  %127 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %128 = @func_14809() /* ty=Tensor[(392), uint64] */;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(392), float64] */;
  %130 = cast(meta[relay.Constant][2] /* ty=Tensor[(2288, 1), uint16] */, dtype="float64") /* ty=Tensor[(2288, 1), float64] */;
  %131 = cast(%var_15703, dtype="bool") /* ty=Tensor[(15), bool] */;
  %132 = cast(meta[relay.Constant][2] /* ty=Tensor[(2288, 1), uint16] */, dtype="bool") /* ty=Tensor[(2288, 1), bool] */;
  %133 = less(%131, %132) /* ty=Tensor[(2288, 15), bool] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(2288, 15), float32] */;
  %135 = cosh(%134) /* ty=Tensor[(2288, 15), float32] */;
  %136 = cast(%135, dtype="bool") /* ty=Tensor[(2288, 15), bool] */;
  %137 = cast(%var_15703, dtype="bool") /* ty=Tensor[(15), bool] */;
  %138 = %123.0;
  %139 = %126.1;
  %140 = %127.0;
  %141 = @func_11060() /* ty=Tensor[(6, 9, 4), float32] */;
  %142 = power(%129, %130) /* ty=Tensor[(2288, 392), float64] */;
  %143 = logical_and(%136, %137) /* ty=Tensor[(2288, 15), bool] */;
  (%138, %139, %140, %141, %142, %143)
}

def @func_16127() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %144 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %145 = @func_13304() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %146 = @func_16029() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %147 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %148 = @func_9434() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %149 = @func_10054() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %150 = @func_10054() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %151 = %144.0;
  %152 = %145.0;
  %153 = %146.0;
  %154 = %147.0;
  %155 = %148.1;
  %156 = %149.1;
  %157 = %150.1;
  (%151, %152, %153, %154, %155, %156, %157)
}

def @func_2858(%var_2855: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) {
  %158 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %159 = cast(%var_2855, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %160 = reshape(%159, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %161 = @func_2079(%160) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %162 = %158.0;
  %163 = %161.0;
  (%162, %163, %var_2855)
}

def @func_14901() -> Tensor[(5, 3, 15), int64] {
  %164 = @func_13656() /* ty=(Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) */;
  %164.0
}

def @func_6200() -> (Tensor[(6, 9, 4), float32],) {
  @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_10760() -> Tensor[(6, 9, 4), float32] {
  %165 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %165.0
}

def @func_13158() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %166 = @func_12207() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %167 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %168 = %166.0;
  (%167, %168)
}

def @func_1619(%var_1617: Tensor[(15, 6, 15), float64], %var_1618: Tensor[(78, 2), float32]) -> (uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) {
  @func_1615(%var_1617, %var_1618) /* ty=(uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) */
}

def @func_4991(%var_4989: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  @func_4988(%var_4989) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */
}

def @func_8058(%var_8056: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  @func_8055(%var_8056) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_8912() -> (Tensor[(6, 9, 4), float32],) {
  %169 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  (%169,)
}

def @func_8277() -> (Tensor[(6, 9, 4), float32],) {
  %170 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%170,)
}

def @func_15585() -> (Tensor[(6, 9, 4), float32],) {
  %171 = @func_8439() /* ty=Tensor[(6, 9, 4), float32] */;
  (%171,)
}

def @func_4380() -> (Tensor[(6, 9, 4), float32],) {
  %172 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%172,)
}

def @func_15447() -> (Tensor[(6, 9, 4), float32],) {
  %173 = @func_12722() /* ty=Tensor[(6, 9, 4), float32] */;
  (%173,)
}

def @func_11450() -> (Tensor[(6, 9, 4), float64],) {
  %176 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %174 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
    %175 = %174.1;
    (%175,)
  };
  %176() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_11930() -> Tensor[(6, 9, 4), float32] {
  %177 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %177.0
}

def @func_13100() -> Tensor[(?, ?, 15), bool] {
  %178 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %179 = %178.0;
  %180 = @func_6999() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) */;
  %181 = %180.3;
  %182 = cast(%181, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%179, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%184, %185) /* ty=Tensor[(?, ?, 15), bool] */
}

def @func_4360(%var_4358: Tensor[(6, 9, 4), float32]) -> Tensor[(6, 9, 4), uint16] {
  @func_4357(%var_4358) /* ty=Tensor[(6, 9, 4), uint16] */
}

def @func_15791(%var_15789: Tensor[(15), float32]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 392), float64], Tensor[(2288, 15), bool]) {
  @func_15788(%var_15789) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 392), float64], Tensor[(2288, 15), bool]) */
}

def @func_3812() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %192 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
    %186 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
    %187 = cast(meta[relay.Constant][3] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %188 = reshape(%187, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
    %189 = @func_2229(%188) /* ty=(Tensor[(1, 1, 15), float32],) */;
    %190 = %186.1;
    %191 = %189.0;
    (%190, %191, meta[relay.Constant][3] /* ty=Tensor[(15), float32] */)
  };
  %192() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */
}

def @func_5219() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %199 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
    %193 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %194 = cast(meta[relay.Constant][4] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %195 = reshape(%194, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
    %196 = @func_2229(%195) /* ty=(Tensor[(1, 1, 15), float32],) */;
    %197 = %193.0;
    %198 = %196.0;
    (%197, %198, meta[relay.Constant][4] /* ty=Tensor[(15), float32] */)
  };
  %199() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */
}

def @func_14436(%var_14434: Tensor[(9, 8, 16), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) {
  @func_14433(%var_14434) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) */
}

def @func_9215() -> (Tensor[(1, 1, 15), float32],) {
  @func_9213() /* ty=(Tensor[(1, 1, 15), float32],) */
}

def @func_9012() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %207 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %200 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %201 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %202 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %203 = %200.0;
    %204 = @func_3779() /* ty=Tensor[(6, 9, 4), float64] */;
    %205 = %201.0;
    %206 = %202.2;
    (%203, %204, %205, %206)
  };
  %207() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_9543(%var_9542: Tensor[(88, 26), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(13, 16, 11), bool], Tensor[(88, 26), uint16]) {
  %216 = fn (%var_9538: Tensor[(88, 26), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(13, 16, 11), bool], Tensor[(88, 26), uint16]) {
    %208 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %209 = @func_4128() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %210 = cast(%var_9538, dtype="uint16") /* ty=Tensor[(88, 26), uint16] */;
    %211 = reshape(%210, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
    %212 = @func_3700(%211) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
    %213 = %208.0;
    %214 = %209.1;
    %215 = %212.2;
    (%213, %214, %215, %var_9538)
  };
  %216(%var_9542) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(13, 16, 11), bool], Tensor[(88, 26), uint16]) */
}

def @func_9435() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %220 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
    %217 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
    %218 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
    %219 = %217.0;
    (%218, %219)
  };
  %220() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_5933(%var_5931: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  @func_5930(%var_5931) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */
}

def @func_7419() -> (Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
  %225 = fn () -> (Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
    %221 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    %222 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %223 = cosh(%221) /* ty=Tensor[(16, 16, 15), float64] */;
    %224 = %222.2;
    (%223, %224)
  };
  %225() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_2232(%var_2230: Tensor[(1, 1, 15), float32]) -> (Tensor[(1, 1, 15), float32],) {
  @func_2229(%var_2230) /* ty=(Tensor[(1, 1, 15), float32],) */
}

def @func_12932() -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(6, 9, 4), float32]) {
  %233 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(6, 9, 4), float32]) {
    %226 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %227 = reshape(%226, newshape=[]) /* ty=uint64 */;
    %228 = @func_4988(%227) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
    %229 = @func_8546() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) */;
    %230 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
    %231 = %228.1;
    %232 = %229.0;
    (%230, %231, meta[relay.Constant][6] /* ty=uint64 */, %232)
  };
  %233() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(6, 9, 4), float32]) */
}

def @func_14240() -> (Tensor[(6, 9, 4), float64],) {
  %236 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %234 = @func_5134() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) */;
    %235 = %234.1;
    (%235,)
  };
  %236() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_2659() -> Tensor[(6, 9, 4), float32] {
  @func_2657() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_7000() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) {
  %245 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) {
    %237 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %238 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
    %239 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
    %240 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
    %241 = %237.0;
    %242 = %238.3;
    %243 = %239.4;
    %244 = %240.1;
    (%241, %242, %243, %244)
  };
  %245() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) */
}

def @func_17101(%var_17100: Tensor[(14, 10, 4), float64]) -> Tensor[(14, 10, 4), float64] {
  %247 = fn (%var_17096: Tensor[(14, 10, 4), float64]) -> Tensor[(14, 10, 4), float64] {
    %246 = cast(%var_17096, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
    tan(%246) /* ty=Tensor[(14, 10, 4), float64] */
  };
  %247(%var_17100) /* ty=Tensor[(14, 10, 4), float64] */
}

def @func_6800(%var_6799: Tensor[(6, 9, 4), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) {
  %256 = fn (%var_6778: Tensor[(6, 9, 4), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) {
    %248 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
    %249 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
    %250 = cast(%var_6778, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%249, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = %248.2;
    %255 = greater_equal(%252, %253) /* ty=Tensor[(6, 9, 4), bool] */;
    (%254, %255)
  };
  %256(%var_6799) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */
}

def @func_11837() -> Tensor[(6, 9, 4), float32] {
  %258 = fn () -> Tensor[(6, 9, 4), float32] {
    %257 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %257.1
  };
  %258() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_5988(%var_5987: Tensor[(14, 13, 1), float64]) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) {
  %273 = fn (%var_5962: Tensor[(14, 13, 1), float64]) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) {
    %259 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %260 = cast(%var_5962, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
    %261 = log(%260) /* ty=Tensor[(14, 13, 1), float64] */;
    %262 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float32") /* ty=Tensor[(14, 13, 1), float32] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%261, dtype="float32") /* ty=Tensor[(14, 13, 1), float32] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %266 = divide(%264, %265) /* ty=Tensor[(14, 13, ?), float32] */;
    %267 = cast(%261, dtype="uint16") /* ty=Tensor[(14, 13, 1), uint16] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="uint16") /* ty=Tensor[(14, 13, ?), uint16] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %271 = %259.0;
    %272 = bitwise_or(%269, %270) /* ty=Tensor[(14, 13, ?), uint16] */;
    (%271, %272)
  };
  %273(%var_5987) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) */
}

def @func_10882() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %278 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %274 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %275 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
    %276 = %274.0;
    %277 = %275.1;
    (%276, %277)
  };
  %278() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_3913(%var_3912: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) {
  %290 = fn (%var_3813: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) {
    %279 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(9, 8, 1), uint16] */;
    %280 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 8, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 8, 16), uint16] */;
    %281 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %282 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 8, 16), uint16] */, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
    %283 = cast(%var_3813, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
    %284 = log(%283) /* ty=Tensor[(9, 8, 1), float32] */;
    %285 = cast(%284, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
    %286 = right_shift(%279, %280) /* ty=Tensor[(9, 8, 16), uint16] */;
    %287 = %281.0;
    %288 = log(%282) /* ty=Tensor[(9, 8, 16), float32] */;
    %289 = log2(%285) /* ty=Tensor[(9, 8, 1), float64] */;
    (%286, %287, %288, %289)
  };
  %290(%var_3912) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */
}

def @func_6050() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  @func_6048() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */
}

def @func_7310() -> (Tensor[(6, 9, 4), float64],) {
  %291 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %292 = %291.1;
  (%292,)
}

def @func_10691(%var_10673: Tensor[(12, 2, 14), bool]) -> (Tensor[(12, 2, 14), bool], Tensor[(12, 2, 14), uint64]) {
  %293 = cast(%var_10673, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %294 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(12, 2, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 2, 14), bool] */, dtype="uint64") /* ty=Tensor[(12, 2, 14), uint64] */;
  %298 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(12, 2, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 2, 14), bool] */, dtype="uint64") /* ty=Tensor[(12, 2, 14), uint64] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %301 = logical_or(%295, %296) /* ty=Tensor[(12, 2, 14), bool] */;
  %302 = add(%299, %300) /* ty=Tensor[(12, 2, 14), uint64] */;
  (%301, %302)
}

def @func_15043(%var_15029: Tensor[(7, 4, 6), int64]) -> Tensor[(7, 4, 6), bool] {
  %303 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 4, 6), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %304 = shape_of(%var_15029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_15029, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%305, %306) /* ty=Tensor[(7, 4, 6), bool] */
}

def @func_6341() -> Tensor[(6, 9, 4), float32] {
  %307 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %307.0
}

def @func_16295() -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) {
  %313 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) {
    %308 = @func_12962() /* ty=(Tensor[(392), uint64],) */;
    %309 = @func_14632() /* ty=(Tensor[(6, 9, 4), uint8],) */;
    %310 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
    %311 = %308.0;
    %312 = %309.0;
    (%310, %311, %312)
  };
  %313() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) */
}

def @func_16816() -> (Tensor[(6, 9, 4), float32],) {
  %314 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %315 = %314.0;
  (%315,)
}

def @func_3277() -> (Tensor[(6, 9, 4), float64],) {
  @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_8259() -> Tensor[(6, 9, 4), float64] {
  %316 = fn () -> Tensor[(6, 9, 4), float64] {
    @func_6069() /* ty=Tensor[(6, 9, 4), float64] */
  };
  %316() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_6836() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %317 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %318 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %319 = %317.0;
  (%318, %319)
}

def @func_6286(%var_6285: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %331 = fn (%var_6258: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
    %320 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %321 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %322 = %321.0;
    %323 = cast(%var_6258, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%322, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %327 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %328 = %320.0;
    %329 = divide(%325, %326) /* ty=Tensor[(6, 9, 4), float64] */;
    %330 = %327.0;
    (%328, %329, %330)
  };
  %331(%var_6285) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_13939(%var_13924: bool, %var_13925: Tensor[(13, 13, 15), bool]) -> (Tensor[(13, 13, 15), bool],) {
  %332 = cast(%var_13924, dtype="bool") /* ty=bool */;
  %333 = cast(%var_13925, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %334 = logical_or(%332, %333) /* ty=Tensor[(13, 13, 15), bool] */;
  (%334,)
}

def @func_16635() -> Tensor[(6, 9, 4), bool] {
  %335 = @func_15631() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) */;
  %335.1
}

def @func_1434(%var_1417: uint16) -> Tensor[(4, 12, 1), uint16] {
  %336 = cast(%var_1417, dtype="uint16") /* ty=uint16 */;
  %337 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 1), uint16] */;
  bitwise_or(%336, %337) /* ty=Tensor[(4, 12, 1), uint16] */
}

def @func_8642(%var_8640: Tensor[(5, 14, 7), int16], %var_8641: Tensor[(5, 14, 7), int16]) -> (Tensor[(5, 14, 7), int16],) {
  %343 = fn (%var_8634: Tensor[(5, 14, 7), int16], %var_8635: Tensor[(5, 14, 7), int16]) -> (Tensor[(5, 14, 7), int16],) {
    %338 = cast(%var_8635, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
    %339 = shape_of(%var_8634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%var_8634, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %342 = multiply(%340, %341) /* ty=Tensor[(5, 14, 7), int16] */;
    (%342,)
  };
  %343(%var_8640, %var_8641) /* ty=(Tensor[(5, 14, 7), int16],) */
}

def @func_6726() -> (Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) {
  %354 = fn () -> (Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) {
    %344 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %345 = cast(meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %346 = reshape(%344, newshape=[]) /* ty=uint64 */;
    %347 = reshape(%345, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
    %348 = @func_475(%346, %347) /* ty=(Tensor[(14, 2, 14), float64],) */;
    %349 = %348.0;
    %350 = cast(%349, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
    %351 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
    %352 = tan(%350) /* ty=Tensor[(14, 2, 14), float64] */;
    %353 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
    (%351, meta[relay.Constant][13] /* ty=uint64 */, meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */, %352, %353)
  };
  %354() /* ty=(Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_15004() -> Tensor[(16, 16, 15), float64] {
  %356 = fn () -> Tensor[(16, 16, 15), float64] {
    %355 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
    %355.0
  };
  %356() /* ty=Tensor[(16, 16, 15), float64] */
}

def @func_17252() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(14, 8, 12), float32]) {
  @func_17250() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(14, 8, 12), float32]) */
}

def @func_7946() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) {
  @func_7944() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) */
}

def @func_16921(%var_16920: Tensor[(12, 16, 6), int32]) -> (Tensor[(12, 16, 6), bool], Tensor[(6, 9, 4), float32]) {
  %363 = fn (%var_16905: Tensor[(12, 16, 6), int32]) -> (Tensor[(12, 16, 6), bool], Tensor[(6, 9, 4), float32]) {
    %357 = cast(%var_16905, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
    %358 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 16, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 16, 6), int32] */, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = greater_equal(%359, %360) /* ty=Tensor[(12, 16, 6), bool] */;
    %362 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
    (%361, %362)
  };
  %363(%var_16920) /* ty=(Tensor[(12, 16, 6), bool], Tensor[(6, 9, 4), float32]) */
}

def @func_6106() -> (Tensor[(6, 9, 4), float64],) {
  @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_14110() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 12), uint16], Tensor[(16, 16, 15), float64]) {
  %364 = @func_7200() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
  %365 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %366 = @func_6341() /* ty=Tensor[(6, 9, 4), float32] */;
  %367 = %364.3;
  %368 = %365.1;
  (%366, %367, %368)
}

def @func_9140(%var_9138: Tensor[(2288, 1), uint16]) -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) {
  @func_9137(%var_9138) /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_10762() -> Tensor[(6, 9, 4), float32] {
  @func_10760() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_16835() -> Tensor[(6, 9, 4), float32] {
  %370 = fn () -> Tensor[(6, 9, 4), float32] {
    %369 = @func_16224() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %369.0
  };
  %370() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_3426() -> Tensor[(6, 9, 4), float32] {
  %371 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_3412() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %371() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_17132() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %372 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
  %373 = @func_11604() /* ty=Tensor[(6, 9, 4), float32] */;
  (%372, %373)
}

def @func_13102() -> Tensor[(?, ?, 15), bool] {
  @func_13100() /* ty=Tensor[(?, ?, 15), bool] */
}

def @func_7393() -> (Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  %374 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %375 = %374.2;
  %376 = @func_6351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%375, %376)
}

def @func_14978() -> (Tensor[(9, 8, 16), uint16],) {
  %379 = fn () -> (Tensor[(9, 8, 16), uint16],) {
    %377 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
    %378 = %377.0;
    (%378,)
  };
  %379() /* ty=(Tensor[(9, 8, 16), uint16],) */
}

def @func_8304() -> (Tensor[(6, 9, 4), float64],) {
  %380 = @func_6069() /* ty=Tensor[(6, 9, 4), float64] */;
  (%380,)
}

def @func_16587(%var_16585: Tensor[(1152), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(1152), uint16], Tensor[(6, 9, 4), uint8]) {
  @func_16584(%var_16585) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(1152), uint16], Tensor[(6, 9, 4), uint8]) */
}

def @func_14341() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  @func_14339() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_4457() -> Tensor[(6, 9, 4), float64] {
  @func_3779() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_6510() -> Tensor[(6, 9, 4), float32] {
  @func_6508() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_8055(%var_8044: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  %381 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %382 = cast(%var_8044, dtype="float32") /* ty=Tensor[(15), float32] */;
  %383 = reshape(%382, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %384 = @func_2229(%383) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %385 = %381.1;
  %386 = %384.0;
  %387 = @func_3412() /* ty=Tensor[(6, 9, 4), float32] */;
  (%385, %386, %var_8044, %387)
}

def @func_10640() -> (Tensor[(6, 9, 4), uint16],) {
  @func_10638() /* ty=(Tensor[(6, 9, 4), uint16],) */
}

def @func_13402() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
  %388 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %389 = @func_6645() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %390 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %391 = %388.1;
  %392 = %389.1;
  %393 = %390.0;
  (%391, %392, %393)
}

def @func_3781() -> Tensor[(6, 9, 4), float64] {
  @func_3779() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_3403(%var_3401: Tensor[(13, 16, 11), uint16], %var_3402: Tensor[(13, 16, 11), uint16]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) {
  %400 = fn (%var_3381: Tensor[(13, 16, 11), uint16], %var_3382: Tensor[(13, 16, 11), uint16]) -> (Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) {
    %394 = cast(%var_3382, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
    %395 = shape_of(%var_3381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%var_3381, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %398 = greater_equal(%396, %397) /* ty=Tensor[(13, 16, 11), bool] */;
    %399 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
    (%398, %399)
  };
  %400(%var_3401, %var_3402) /* ty=(Tensor[(13, 16, 11), bool], Tensor[(6, 9, 4), float32]) */
}

def @func_1437(%var_1435: uint16) -> Tensor[(4, 12, 1), uint16] {
  @func_1434(%var_1435) /* ty=Tensor[(4, 12, 1), uint16] */
}

def @func_5171() -> (Tensor[(5, 3, 15), bool],) {
  %406 = fn () -> (Tensor[(5, 3, 15), bool],) {
    %401 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
    %402 = %401.0;
    %403 = cast(%402, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
    %404 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 3, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 3, 15), bool] */;
    %405 = greater(%403, %404) /* ty=Tensor[(5, 3, 15), bool] */;
    (%405,)
  };
  %406() /* ty=(Tensor[(5, 3, 15), bool],) */
}

def @func_7962() -> Tensor[(6, 9, 4), float64] {
  @func_7960() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_8098() -> (Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) {
  %410 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) {
    %407 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
    %408 = @func_6926() /* ty=Tensor[(6, 9, 4), float32] */;
    %409 = %407.0;
    (%408, %409)
  };
  %410() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */
}

def @func_3195() -> Tensor[(6, 9, 4), float32] {
  %412 = fn () -> Tensor[(6, 9, 4), float32] {
    %411 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %411.0
  };
  %412() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_14112() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 12), uint16], Tensor[(16, 16, 15), float64]) {
  @func_14110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 12), uint16], Tensor[(16, 16, 15), float64]) */
}

def @func_5035() -> Tensor[(1, 1, 15), float32] {
  %414 = fn () -> Tensor[(1, 1, 15), float32] {
    %413 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
    %413.0
  };
  %414() /* ty=Tensor[(1, 1, 15), float32] */
}

def @func_13983() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float64]) {
  %419 = fn () -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float64]) {
    %415 = @func_7058() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) */;
    %416 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
    %417 = %415.1;
    %418 = %416.0;
    (%417, %418)
  };
  %419() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_9474() -> (Tensor[(392), uint64],) {
  %421 = fn () -> (Tensor[(392), uint64],) {
    %420 = @func_4583() /* ty=Tensor[(392), uint64] */;
    (%420,)
  };
  %421() /* ty=(Tensor[(392), uint64],) */
}

def @func_2861(%var_2859: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) {
  @func_2858(%var_2859) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */
}

def @func_16653() -> (Tensor[(6, 9, 4), float32],) {
  %423 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %422 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
    (%422,)
  };
  %423() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_13305() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %429 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
    %424 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %425 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %426 = %424.0;
    %427 = %425.0;
    %428 = @func_6926() /* ty=Tensor[(6, 9, 4), float32] */;
    (%426, %427, %428)
  };
  %429() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_14447() -> Tensor[(6, 9, 4), float64] {
  @func_14445() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_4026(%var_4024: Tensor[(5, 3, 1), float32]) -> (Tensor[(5, 3, 1), float32],) {
  @func_4023(%var_4024) /* ty=(Tensor[(5, 3, 1), float32],) */
}

def @func_14589() -> (Tensor[(392), uint64],) {
  %430 = @func_5134() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) */;
  %431 = %430.0;
  (%431,)
}

def @func_14591() -> (Tensor[(392), uint64],) {
  @func_14589() /* ty=(Tensor[(392), uint64],) */
}

def @func_16198() -> Tensor[(392), uint64] {
  %433 = fn () -> Tensor[(392), uint64] {
    %432 = @func_12962() /* ty=(Tensor[(392), uint64],) */;
    %432.0
  };
  %433() /* ty=Tensor[(392), uint64] */
}

def @func_5860() -> Tensor[(6, 9, 4), float32] {
  @func_5858() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_7395() -> (Tensor[(15), float32], Tensor[(6, 9, 4), float32]) {
  @func_7393() /* ty=(Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_5409() -> (Tensor[(6, 9, 4), float64],) {
  %437 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %434 = @func_3779() /* ty=Tensor[(6, 9, 4), float64] */;
    %435 = cast(%434, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %436 = log2(%435) /* ty=Tensor[(6, 9, 4), float64] */;
    (%436,)
  };
  %437() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_10317() -> Tensor[(392), float64] {
  %439 = fn () -> Tensor[(392), float64] {
    %438 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
    %438.1
  };
  %439() /* ty=Tensor[(392), float64] */
}

def @func_10661() -> (Tensor[(6, 9, 4), float32],) {
  %440 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %441 = %440.0;
  (%441,)
}

def @func_14549() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint16]) {
  %445 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint16]) {
    %442 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
    %443 = @func_11604() /* ty=Tensor[(6, 9, 4), float32] */;
    %444 = %442.0;
    (%443, %444)
  };
  %445() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint16]) */
}

def @func_15680() -> Tensor[(6, 9, 4), float32] {
  %447 = fn () -> Tensor[(6, 9, 4), float32] {
    %446 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
    %446.0
  };
  %447() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_3159() -> Tensor[(6, 9, 4), float32] {
  %448 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_2657() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %448() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_7312() -> (Tensor[(6, 9, 4), float64],) {
  @func_7310() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_6442() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %454 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
    %449 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %450 = %449.0;
    %451 = cast(%450, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %452 = reshape(%451, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
    %453 = @func_5311(%452) /* ty=Tensor[(6, 9, 4), uint8] */;
    (%450, %453)
  };
  %454() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */
}

def @func_8610() -> (Tensor[(5, 3, 15), bool], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %462 = fn () -> (Tensor[(5, 3, 15), bool], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %455 = @func_5170() /* ty=(Tensor[(5, 3, 15), bool],) */;
    %456 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %457 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %458 = %455.0;
    %459 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
    %460 = %456.0;
    %461 = %457.0;
    (%458, %459, %460, %461)
  };
  %462() /* ty=(Tensor[(5, 3, 15), bool], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_7059() -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) {
  %473 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) {
    %463 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
    %464 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %465 = %464.0;
    %466 = cast(%465, dtype="uint32") /* ty=Tensor[(6, 9, 4), uint32] */;
    %467 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%463, dtype="uint32") /* ty=Tensor[(6, 9, 4), uint32] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %470 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
    %471 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
    %472 = minimum(%468, %469) /* ty=Tensor[(6, 9, 4), uint32] */;
    (%470, %471, %472)
  };
  %473() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) */
}

def @func_15426(%var_15425: Tensor[(2, 14, 3), float32]) -> Tensor[(2, 14, 3), float32] {
  %475 = fn (%var_15421: Tensor[(2, 14, 3), float32]) -> Tensor[(2, 14, 3), float32] {
    %474 = cast(%var_15421, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
    log10(%474) /* ty=Tensor[(2, 14, 3), float32] */
  };
  %475(%var_15425) /* ty=Tensor[(2, 14, 3), float32] */
}

def @func_11753(%var_11751: Tensor[(7, 15, 15), float64], %var_11752: Tensor[(1680), bool]) -> (Tensor[(7, 15, 15), float64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float64]) {
  @func_11749(%var_11751, %var_11752) /* ty=(Tensor[(7, 15, 15), float64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float64]) */
}

def @func_16256() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16]) {
  %479 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16]) {
    %476 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
    %477 = @func_10916() /* ty=Tensor[(6, 9, 4), float32] */;
    %478 = %476.0;
    (%477, %478)
  };
  %479() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16]) */
}

def @func_16394() -> Tensor[(6, 9, 4), float64] {
  @func_16392() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_11901() -> (Tensor[(6, 9, 4), float32], Tensor[(11, 16, 6), int64], Tensor[(1056), int64], Tensor[(6, 9, 4), float64], Tensor[(1200), float32], Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(72), uint16]) {
  %500 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(11, 16, 6), int64], Tensor[(1056), int64], Tensor[(6, 9, 4), float64], Tensor[(1200), float32], Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(72), uint16]) {
    %480 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
    %481 = cast(meta[relay.Constant][17] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
    %482 = reshape(%481, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int64] */;
    %483 = @func_11221(%482) /* ty=(Tensor[(11, 16, 6), int64],) */;
    %484 = cast(meta[relay.Constant][18] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %485 = reshape(%484, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
    %486 = @func_5827(%485) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) */;
    %487 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %488 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
    %489 = %487.0;
    %490 = cast(%489, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %491 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
    %492 = reshape(%490, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
    %493 = reshape(%491, newshape=[6, 12]) /* ty=Tensor[(6, 12), uint16] */;
    %494 = @func_6582(%492, %493) /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
    %495 = %480.0;
    %496 = %483.0;
    %497 = %486.1;
    %498 = %488.0;
    %499 = %494.1;
    (%495, %496, meta[relay.Constant][17] /* ty=Tensor[(1056), int64] */, %497, meta[relay.Constant][18] /* ty=Tensor[(1200), float32] */, %489, %498, %499, meta[relay.Constant][19] /* ty=Tensor[(72), uint16] */)
  };
  %500() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(11, 16, 6), int64], Tensor[(1056), int64], Tensor[(6, 9, 4), float64], Tensor[(1200), float32], Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(72), uint16]) */
}

def @func_9746() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %509 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
    %501 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %502 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %503 = %502.0;
    %504 = cast(%503, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %505 = reshape(%504, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %506 = @func_6284(%505) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %507 = %501.0;
    %508 = %506.2;
    (%507, %503, %508)
  };
  %509() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_6734() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %514 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
    %510 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %511 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %512 = %510.0;
    %513 = %511.1;
    (%512, %513)
  };
  %514() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_13773() -> (Tensor[(6, 9, 4), float64], Tensor[(?, ?, 15), uint16]) {
  %527 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(?, ?, 15), uint16]) {
    %515 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %516 = @func_13100() /* ty=Tensor[(?, ?, 15), bool] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(?, ?, 15), float64] */;
    %518 = log(%517) /* ty=Tensor[(?, ?, 15), float64] */;
    %519 = cast(%518, dtype="float64") /* ty=Tensor[(?, ?, 15), float64] */;
    %520 = cosh(%519) /* ty=Tensor[(?, ?, 15), float64] */;
    %521 = cast(%518, dtype="uint16") /* ty=Tensor[(?, ?, 15), uint16] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%520, dtype="uint16") /* ty=Tensor[(?, ?, 15), uint16] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %525 = %515.1;
    %526 = bitwise_and(%523, %524) /* ty=Tensor[(?, ?, 15), uint16] */;
    (%525, %526)
  };
  %527() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(?, ?, 15), uint16]) */
}

def @func_14795(%var_14789: float32) -> (Tensor[(6, 9, 4), float32], Tensor[(11, 6, 2), bool], float32, Tensor[(6, 9, 4), float32]) {
  %528 = cast(%var_14789, dtype="float32") /* ty=float32 */;
  %529 = reshape(%528, newshape=[]) /* ty=float32 */;
  %530 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %531 = @func_8439() /* ty=Tensor[(6, 9, 4), float32] */;
  %532 = @func_14206(%529) /* ty=Tensor[(11, 6, 2), bool] */;
  %533 = %530.1;
  (%531, %532, %var_14789, %533)
}

def @func_12723() -> Tensor[(6, 9, 4), float32] {
  %534 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_3437() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %534() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_15359() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
  %540 = fn () -> (Tensor[(392), uint64], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
    %535 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
    %536 = @func_11998() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %537 = @func_6814() /* ty=Tensor[(392), uint64] */;
    %538 = %535.0;
    %539 = %536.0;
    (%537, %538, %539)
  };
  %540() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) */
}

def @func_2079(%var_2070: Tensor[(7, 56), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) {
  %541 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %542 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 14, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 12), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %545 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %546 = cast(%var_2070, dtype="uint64") /* ty=Tensor[(7, 56), uint64] */;
  %547 = reshape(%545, newshape=[]) /* ty=uint64 */;
  %548 = reshape(%546, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %549 = @func_475(%547, %548) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %550 = greater_equal(%543, %544) /* ty=Tensor[(10, 14, 12), bool] */;
  %551 = %549.0;
  (%550, %551, meta[relay.Constant][22] /* ty=uint64 */, %var_2070)
}

def @func_4930(%var_4899: Tensor[(1, 2288), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
  %552 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %553 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %554 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %555 = cast(%var_4899, dtype="uint16") /* ty=Tensor[(1, 2288), uint16] */;
  %556 = reshape(%555, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
  %557 = @func_3700(%556) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
  %558 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %559 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %560 = @func_4583() /* ty=Tensor[(392), uint64] */;
  %561 = %552.0;
  %562 = %553.0;
  %563 = %554.0;
  %564 = %557.3;
  %565 = %558.0;
  %566 = %559.0;
  (%560, %561, %562, %563, %564, %var_4899, %565, %566)
}

def @func_4251() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %571 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %567 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %568 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
    %569 = %567.0;
    %570 = %568.1;
    (%569, %570)
  };
  %571() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_15880() -> (Tensor[(6, 9, 4), float64],) {
  @func_15878() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_6928() -> Tensor[(6, 9, 4), float32] {
  @func_6926() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_4357(%var_4345: Tensor[(6, 9, 4), float32]) -> Tensor[(6, 9, 4), uint16] {
  %572 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
  %573 = cast(%var_4345, dtype="uint16") /* ty=Tensor[(6, 9, 4), uint16] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="uint16") /* ty=Tensor[(6, 9, 4), uint16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%575, %576) /* ty=Tensor[(6, 9, 4), uint16] */
}

def @func_13864(%var_13863: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), float64]) {
  %588 = fn (%var_13807: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), float64]) {
    %577 = @func_13304() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %578 = cast(%var_13807, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
    %579 = reshape(%578, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
    %580 = @func_4023(%579) /* ty=(Tensor[(5, 3, 1), float32],) */;
    %581 = @func_9434() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %582 = @func_10661() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %583 = %577.1;
    %584 = %580.0;
    %585 = %581.1;
    %586 = %582.0;
    %587 = @func_10316() /* ty=Tensor[(392), float64] */;
    (%583, %584, %var_13807, %585, %586, %587)
  };
  %588(%var_13863) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), float64]) */
}

def @func_16475() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %589 = @func_7359() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */;
  %590 = @func_11060() /* ty=Tensor[(6, 9, 4), float32] */;
  %591 = %589.0;
  %592 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%590, %591, %592)
}

def @func_7492() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %599 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %593 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %594 = %593.0;
    %595 = cast(%594, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %596 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %597 = log(%595) /* ty=Tensor[(6, 9, 4), float32] */;
    %598 = %596.0;
    (%597, %598)
  };
  %599() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_11749(%var_11723: Tensor[(7, 15, 15), float64], %var_11734: Tensor[(1680), bool]) -> (Tensor[(7, 15, 15), float64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float64]) {
  %600 = cast(%var_11723, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
  %601 = cast(%var_11734, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %602 = reshape(%601, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
  %603 = @func_4421(%602) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
  %604 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %605 = log(%600) /* ty=Tensor[(7, 15, 15), float64] */;
  %606 = %603.0;
  %607 = %604.1;
  (%605, %606, %var_11734, %607)
}

def @func_8289() -> (Tensor[(9, 8, 16), uint16],) {
  %610 = fn () -> (Tensor[(9, 8, 16), uint16],) {
    %608 = @func_7200() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */;
    %609 = %608.2;
    (%609,)
  };
  %610() /* ty=(Tensor[(9, 8, 16), uint16],) */
}

def @func_17200() -> Tensor[(6, 9, 4), float32] {
  @func_6010() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_15540() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) {
  %611 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %612 = @func_15447() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %613 = %611.0;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %615 = reshape(%614, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %616 = @func_6798(%615) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %617 = %612.0;
  %618 = %616.1;
  %619 = @func_8152() /* ty=Tensor[(6, 9, 4), float64] */;
  (%613, %617, %618, %619)
}

def @func_17202() -> Tensor[(6, 9, 4), float32] {
  @func_17200() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_12962() -> (Tensor[(392), uint64],) {
  %620 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %621 = %620.2;
  (%621,)
}

def @func_14798(%var_14796: float32) -> (Tensor[(6, 9, 4), float32], Tensor[(11, 6, 2), bool], float32, Tensor[(6, 9, 4), float32]) {
  @func_14795(%var_14796) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(11, 6, 2), bool], float32, Tensor[(6, 9, 4), float32]) */
}

def @func_6646() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %626 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %622 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %623 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %624 = %622.1;
    %625 = %623.0;
    (%624, %625)
  };
  %626() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_11625() -> (Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) {
  %632 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) {
    %627 = cast(meta[relay.Constant][23] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %628 = reshape(%627, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
    %629 = @func_2810(%628) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
    %630 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
    %631 = %629.2;
    (%630, %631, meta[relay.Constant][23] /* ty=Tensor[(392), uint64] */)
  };
  %632() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) */
}

def @func_9627(%var_9615: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) {
  %633 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %634 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %635 = @func_5110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %636 = %633.1;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %638 = reshape(%637, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %639 = @func_4661(%638) /* ty=(Tensor[(6, 9, 4), float32],) */;
  %640 = @func_9473() /* ty=(Tensor[(392), uint64],) */;
  %641 = %640.0;
  %642 = cast(%var_9615, dtype="float64") /* ty=Tensor[(392), float64] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
  %644 = cast(%641, dtype="float64") /* ty=Tensor[(392), float64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), float64] */;
  %646 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %647 = %634.1;
  %648 = %635.0;
  %649 = %639.0;
  %650 = power(%644, %645) /* ty=Tensor[(392), float64] */;
  %651 = %646.0;
  (%636, %647, %648, %649, %650, %651)
}

def @func_13595(%var_13593: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool]) {
  @func_13592(%var_13593) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool]) */
}

def @func_4933(%var_4931: Tensor[(1, 2288), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
  @func_4930(%var_4931) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */
}

def @func_12413() -> Tensor[(6, 9, 4), uint16] {
  %653 = fn () -> Tensor[(6, 9, 4), uint16] {
    %652 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
    %652.0
  };
  %653() /* ty=Tensor[(6, 9, 4), uint16] */
}

def @func_9189() -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) {
  %659 = fn () -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) {
    %654 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
    %655 = %654.1;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %657 = reshape(%656, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float64] */;
    %658 = @func_5311(%657) /* ty=Tensor[(6, 9, 4), uint8] */;
    (%655, %658)
  };
  %659() /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) */
}

def @func_5422() -> (Tensor[(6, 9, 4), float32],) {
  %662 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %660 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %661 = %660.0;
    (%661,)
  };
  %662() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_10627() -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) {
  %663 = @func_7579() /* ty=(Tensor[(6, 9, 4), bool],) */;
  %664 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %665 = %663.0;
  %666 = %664.1;
  (%665, %666)
}

def @func_5497(%var_5467: uint16) -> (Tensor[(6, 9, 4), float32], Tensor[(4, 12, 1), uint16], uint16, Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %667 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %668 = cast(%var_5467, dtype="uint16") /* ty=uint16 */;
  %669 = reshape(%668, newshape=[]) /* ty=uint16 */;
  %670 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %671 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
  %672 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %673 = %667.3;
  %674 = @func_1434(%669) /* ty=Tensor[(4, 12, 1), uint16] */;
  %675 = %670.0;
  %676 = %671.0;
  %677 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %678 = %672.0;
  (%673, %674, %var_5467, %675, %676, %677, %678)
}

def @func_10638() -> (Tensor[(6, 9, 4), uint16],) {
  %679 = @func_10264() /* ty=(Tensor[(6, 9, 4), uint16],) */;
  %680 = %679.0;
  (%680,)
}

def @func_11606() -> Tensor[(6, 9, 4), float32] {
  @func_11604() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_12177() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32]) {
  @func_12175() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32]) */
}

def @func_14433(%var_14427: Tensor[(9, 8, 16), uint16]) -> (Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) {
  %681 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 14), float64] */, dtype="float64") /* ty=Tensor[(13, 14), float64] */;
  %682 = reshape(%681, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), float64] */;
  %683 = @func_5986(%682) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 13, ?), uint16]) */;
  %684 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %685 = @func_8288() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %686 = %685.0;
  %687 = cast(%var_14427, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = %683.0;
  %692 = %684.0;
  %693 = not_equal(%689, %690) /* ty=Tensor[(9, 8, 16), bool] */;
  (%691, meta[relay.Constant][24] /* ty=Tensor[(13, 14), float64] */, %692, %693)
}

def @func_14267() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  @func_14265() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_12393() -> Tensor[(6, 9, 4), float32] {
  %694 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_8439() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %694() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_2229(%var_2226: Tensor[(1, 1, 15), float32]) -> (Tensor[(1, 1, 15), float32],) {
  %695 = cast(%var_2226, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %696 = sqrt(%695) /* ty=Tensor[(1, 1, 15), float32] */;
  (%696,)
}

def @func_13943(%var_13941: bool, %var_13942: Tensor[(13, 13, 15), bool]) -> (Tensor[(13, 13, 15), bool],) {
  @func_13939(%var_13941, %var_13942) /* ty=(Tensor[(13, 13, 15), bool],) */
}

def @func_4585() -> Tensor[(392), uint64] {
  @func_4583() /* ty=Tensor[(392), uint64] */
}

def @func_12335() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) {
  %705 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) {
    %697 = @func_10721() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %698 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %699 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
    %700 = reshape(%699, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
    %701 = @func_9352(%700) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) */;
    %702 = %697.0;
    %703 = %698.0;
    %704 = %701.1;
    (%702, %703, %704, meta[relay.Constant][25] /* ty=Tensor[(13, 5), float32] */)
  };
  %705() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) */
}

def @func_6926() -> Tensor[(6, 9, 4), float32] {
  %706 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %706.1
}

def @func_5679() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  %707 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %708 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %709 = %707.0;
  %710 = %708.0;
  (%709, %710)
}

def @func_14874(%var_14873: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %724 = fn (%var_14855: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
    %711 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %712 = cast(%var_14855, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %713 = reshape(%712, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %714 = @func_9859(%713) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) */;
    %715 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %716 = %715.0;
    %717 = cast(%716, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %718 = reshape(%717, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %719 = @func_6284(%718) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %720 = %711.0;
    %721 = %714.1;
    %722 = @func_6814() /* ty=Tensor[(392), uint64] */;
    %723 = %719.2;
    (%720, %721, %var_14855, %716, %722, %723)
  };
  %724(%var_14873) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_6198() -> (Tensor[(6, 9, 4), float32],) {
  %725 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %726 = %725.1;
  (%726,)
}

def @func_11296() -> Tensor[(6, 9, 4), float64] {
  @func_11294() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_11395() -> (Tensor[(6, 9, 4), float32],) {
  @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_16999(%var_16997: Tensor[(14, 8, 12), int32], %var_16998: Tensor[(14, 8, 12), int32]) -> Tensor[(14, 8, 12), int32] {
  @func_16995(%var_16997, %var_16998) /* ty=Tensor[(14, 8, 12), int32] */
}

def @func_14265() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %727 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %728 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %729 = %727.0;
  %730 = %728.0;
  (%729, %730)
}

def @func_14691() -> (Tensor[(6, 9, 4), float64],) {
  %733 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %731 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %732 = %731.1;
    (%732,)
  };
  %733() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_14809() -> Tensor[(392), uint64] {
  %734 = @func_11624() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(196, 2), uint64], Tensor[(392), uint64]) */;
  %734.2
}

def @func_4700() -> (Tensor[(1, 1, 15), float32],) {
  @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */
}

def @func_15207(%var_15203: Tensor[(16, 16, 15), float64], %var_15204: Tensor[(2288), uint16], %var_15205: Tensor[(168), int64], %var_15206: Tensor[(429), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(13, 5), float32], Tensor[(15, 6, 15), bool], Tensor[(1350), float64], Tensor[(156), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(7, 4, 6), bool], Tensor[(168), int64], Tensor[(11, 13, 3), float64], Tensor[(429), float64]) {
  @func_15201(%var_15203, %var_15204, %var_15205, %var_15206) /* ty=(Tensor[(16, 16, 15), int8], Tensor[(13, 5), float32], Tensor[(15, 6, 15), bool], Tensor[(1350), float64], Tensor[(156), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(7, 4, 6), bool], Tensor[(168), int64], Tensor[(11, 13, 3), float64], Tensor[(429), float64]) */
}

def @func_14289() -> (Tensor[(6, 9, 4), float32],) {
  @func_14287() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_6305() -> (Tensor[(6, 9, 4), float32],) {
  @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_2992(%var_2968: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), bool],) {
  %735 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  %736 = cast(%var_2968, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = greater(%738, %739) /* ty=Tensor[(6, 9, 4), bool] */;
  (%740,)
}

def @func_6069() -> Tensor[(6, 9, 4), float64] {
  %741 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %741.0
}

def @func_8153() -> Tensor[(6, 9, 4), float64] {
  %742 = fn () -> Tensor[(6, 9, 4), float64] {
    @func_7960() /* ty=Tensor[(6, 9, 4), float64] */
  };
  %742() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_16030() -> (Tensor[(6, 9, 4), float32],) {
  %744 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %743 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
    (%743,)
  };
  %744() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_9995() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  @func_9993() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */
}

def @func_11133(%var_11102: Tensor[(11, 13, 3), float64], %var_11103: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %745 = cast(%var_11103, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %746 = shape_of(%var_11102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_11102, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %749 = cast(%var_11102, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %750 = @func_9188() /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8]) */;
  %751 = multiply(%747, %748) /* ty=Tensor[(11, 13, 3), float64] */;
  %752 = erf(%749) /* ty=Tensor[(11, 13, 3), float64] */;
  %753 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
  %754 = %750.0;
  (%751, %752, %753, %754)
}

def @func_14135() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  @func_14133() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_4583() -> Tensor[(392), uint64] {
  %755 = @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */;
  %755.2
}

def @func_14445() -> Tensor[(6, 9, 4), float64] {
  %756 = @func_10365() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %756.0
}

def @func_5681() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) {
  @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_14672() -> Tensor[(6, 9, 4), float32] {
  %757 = @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %757.0
}

def @func_17427(%var_17410: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64) {
  %758 = @func_15540() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) */;
  %759 = cast(%var_17410, dtype="uint64") /* ty=uint64 */;
  %760 = reshape(%759, newshape=[]) /* ty=uint64 */;
  %761 = @func_4749(%760) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %762 = %758.1;
  %763 = %761.1;
  (%762, %763, %var_17410)
}

def @func_12000() -> (Tensor[(6, 9, 4), float32],) {
  @func_11998() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_12501() -> (Tensor[(6, 9, 4), float32],) {
  %766 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %764 = @func_7058() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), uint32]) */;
    %765 = %764.0;
    (%765,)
  };
  %766() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_6011() -> Tensor[(6, 9, 4), float32] {
  %768 = fn () -> Tensor[(6, 9, 4), float32] {
    %767 = @func_5218() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
    %767.0
  };
  %768() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_17134() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  @func_17132() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_3437() -> Tensor[(6, 9, 4), float32] {
  %769 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %769.0
}

def @func_3719() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %773 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %770 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %771 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
    %772 = %770.0;
    (%771, %772)
  };
  %773() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_9708() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
  %792 = fn () -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) {
    %774 = @func_6725() /* ty=(Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) */;
    %775 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %776 = @func_4698() /* ty=(Tensor[(1, 1, 15), float32],) */;
    %777 = %776.0;
    %778 = cast(%777, dtype="int64") /* ty=Tensor[(1, 1, 15), int64] */;
    %779 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 16, 15), float32] */, dtype="int64") /* ty=Tensor[(1, 16, 15), int64] */;
    %780 = bitwise_xor(%778, %779) /* ty=Tensor[(1, 16, 15), int64] */;
    %781 = cast(%777, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
    %782 = cast(%780, dtype="bool") /* ty=Tensor[(1, 16, 15), bool] */;
    %783 = cast(%780, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
    %784 = sinh(%783) /* ty=Tensor[(1, 16, 15), float32] */;
    %785 = cast(%784, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
    %786 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %787 = %774.0;
    %788 = %775.0;
    %789 = less(%781, %782) /* ty=Tensor[(1, 16, 15), bool] */;
    %790 = log10(%785) /* ty=Tensor[(1, 16, 15), float64] */;
    %791 = %786.0;
    (%787, %788, %789, %790, %791)
  };
  %792() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) */
}

def @func_12449() -> Tensor[(6, 9, 4), float64] {
  %793 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %793.0
}

def @func_5254() -> (Tensor[(392), uint64],) {
  %795 = fn () -> (Tensor[(392), uint64],) {
    %794 = @func_4583() /* ty=Tensor[(392), uint64] */;
    (%794,)
  };
  %795() /* ty=(Tensor[(392), uint64],) */
}

def @func_8547() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) {
  %803 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) {
    %796 = @func_3021() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %797 = @func_4128() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %798 = %796.0;
    %799 = cast(%798, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %800 = reshape(%799, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %801 = %797.0;
    %802 = @func_4357(%800) /* ty=Tensor[(6, 9, 4), uint16] */;
    (%798, %801, %802)
  };
  %803() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint16]) */
}

def @func_4459() -> Tensor[(6, 9, 4), float64] {
  @func_4457() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_17053() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), bool]) {
  %812 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), bool]) {
    %804 = @func_6178() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %805 = %804.1;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %807 = reshape(%806, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %808 = @func_2992(%807) /* ty=(Tensor[(6, 9, 4), bool],) */;
    %809 = @func_7579() /* ty=(Tensor[(6, 9, 4), bool],) */;
    %810 = %808.0;
    %811 = %809.0;
    (%805, %810, %811)
  };
  %812() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), bool]) */
}

def @func_5858() -> Tensor[(6, 9, 4), float32] {
  @func_3194() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_5111() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %817 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
    %813 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %815 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
    %816 = atanh(%814) /* ty=Tensor[(6, 9, 4), float64] */;
    (%815, %816)
  };
  %817() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_16709() -> (Tensor[(6, 9, 4), float64],) {
  %818 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
  %819 = %818.2;
  (%819,)
}

def @func_14903() -> Tensor[(5, 3, 15), int64] {
  @func_14901() /* ty=Tensor[(5, 3, 15), int64] */
}

def @func_4749(%var_4742: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %820 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %821 = cast(%var_4742, dtype="uint64") /* ty=uint64 */;
  %822 = cast(meta[relay.Constant][27] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %823 = reshape(%821, newshape=[]) /* ty=uint64 */;
  %824 = reshape(%822, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %825 = @func_475(%823, %824) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %826 = %820.0;
  %827 = %825.0;
  (%826, %827, %var_4742, meta[relay.Constant][27] /* ty=Tensor[(392), uint64] */)
}

def @func_11474() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  @func_11472() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_15610() -> (Tensor[(6, 9, 4), float32],) {
  @func_15608() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_17448() -> Tensor[(6, 9, 4), float64] {
  %829 = fn () -> Tensor[(6, 9, 4), float64] {
    %828 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %828.0
  };
  %829() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_14287() -> (Tensor[(6, 9, 4), float32],) {
  %830 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  (%830,)
}

def @func_9861(%var_9860: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) {
  %846 = fn (%var_9813: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) {
    %831 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %832 = cast(meta[relay.Constant][28] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %833 = cast(%var_9813, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %834 = reshape(%832, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
    %835 = reshape(%833, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %836 = @func_1128(%834, %835) /* ty=(Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
    %837 = %836.0;
    %838 = cast(meta[relay.Constant][28] /* ty=Tensor[(156), float32] */, dtype="uint64") /* ty=Tensor[(156), uint64] */;
    %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%837, dtype="uint64") /* ty=Tensor[(13, 3, 4), uint64] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %842 = cast(meta[relay.Constant][28] /* ty=Tensor[(156), float32] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %843 = %831.3;
    %844 = multiply(%840, %841) /* ty=Tensor[(13, 3, 4), uint64] */;
    %845 = log10(%842) /* ty=Tensor[(156), float64] */;
    (%843, %var_9813, %844, %845)
  };
  %846(%var_9860) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 3, 4), uint64], Tensor[(156), float64]) */
}

def @func_17154() -> Tensor[(6, 9, 4), float32] {
  %847 = fn () -> Tensor[(6, 9, 4), float32] {
    @func_14672() /* ty=Tensor[(6, 9, 4), float32] */
  };
  %847() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_16637() -> Tensor[(6, 9, 4), bool] {
  @func_16635() /* ty=Tensor[(6, 9, 4), bool] */
}

def @func_15510() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64]) {
  %854 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64]) {
    %848 = @func_11998() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %849 = cast(meta[relay.Constant][29] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %850 = reshape(%849, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %851 = @func_9627(%850) /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) */;
    %852 = %848.0;
    %853 = %851.5;
    (%852, %853, meta[relay.Constant][29] /* ty=Tensor[(392), uint64] */)
  };
  %854() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64]) */
}

def @func_3616() -> (Tensor[(6, 9, 4), float32],) {
  %855 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%855,)
}

def @func_10917() -> Tensor[(6, 9, 4), float32] {
  %857 = fn () -> Tensor[(6, 9, 4), float32] {
    %856 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %856.1
  };
  %857() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_6838() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_12964() -> (Tensor[(392), uint64],) {
  @func_12962() /* ty=(Tensor[(392), uint64],) */
}

def @func_7998() -> Tensor[(6, 9, 4), float32] {
  %859 = fn () -> Tensor[(6, 9, 4), float32] {
    %858 = @func_6725() /* ty=(Tensor[(1, 1, 15), float32], uint64, Tensor[(392), uint64], Tensor[(14, 2, 14), float64], Tensor[(6, 9, 4), float32]) */;
    %858.4
  };
  %859() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_2995(%var_2993: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), bool],) {
  @func_2992(%var_2993) /* ty=(Tensor[(6, 9, 4), bool],) */
}

def @func_11061() -> Tensor[(6, 9, 4), float32] {
  %861 = fn () -> Tensor[(6, 9, 4), float32] {
    %860 = @func_9707() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
    %860.1
  };
  %861() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_12553() -> (Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
  %866 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
    %862 = @func_6178() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %863 = @func_7393() /* ty=(Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
    %864 = %862.0;
    %865 = %863.0;
    (%864, %865)
  };
  %866() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(15), float32]) */
}

def @func_4382() -> (Tensor[(6, 9, 4), float32],) {
  @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_5500(%var_5498: uint16) -> (Tensor[(6, 9, 4), float32], Tensor[(4, 12, 1), uint16], uint16, Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  @func_5497(%var_5498) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(4, 12, 1), uint16], uint16, Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_7360() -> (Tensor[(6, 9, 4), float64], Tensor[(392), float64]) {
  %871 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(392), float64]) {
    %867 = @func_6814() /* ty=Tensor[(392), uint64] */;
    %868 = cast(%867, dtype="float64") /* ty=Tensor[(392), float64] */;
    %869 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
    %870 = sin(%868) /* ty=Tensor[(392), float64] */;
    (%869, %870)
  };
  %871() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(392), float64]) */
}

def @func_17292() -> (Tensor[(6, 9, 4), float64],) {
  %874 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %872 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %873 = %872.0;
    (%873,)
  };
  %874() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_7135(%var_7134: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
  %888 = fn (%var_7076: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) {
    %875 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %876 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %877 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %878 = reshape(%877, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
    %879 = @func_2079(%878) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
    %880 = %879.0;
    %881 = cast(%880, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
    %882 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %883 = %875.0;
    %884 = %876.0;
    %885 = log10(%881) /* ty=Tensor[(10, 14, 12), float32] */;
    %886 = %882.0;
    %887 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
    (%883, %var_7076, %884, %885, %886, %887)
  };
  %888(%var_7134) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */
}

def @func_4661(%var_4651: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  %889 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %890 = %889.0;
  %891 = cast(%var_4651, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %895 = power(%893, %894) /* ty=Tensor[(6, 9, 4), float32] */;
  (%895,)
}

def @func_14491(%var_14449: Tensor[(6, 12, 8), float32], %var_14475: Tensor[(72), uint16]) -> (Tensor[(6, 12, 8), float32], Tensor[(6, 12, 8), float32], Tensor[(9, 14, 3), bool], Tensor[(378), int8], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16]) {
  %896 = cast(%var_14449, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %897 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(6, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %900 = cast(%var_14449, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %901 = cast(meta[relay.Constant][31] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %902 = cast(%var_14475, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %903 = reshape(%901, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), int8] */;
  %904 = reshape(%902, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %905 = @func_8944(%903, %904) /* ty=(Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) */;
  %906 = cast(meta[relay.Constant][32] /* ty=Tensor[(2288), uint16] */, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %907 = reshape(%906, newshape=[2288]) /* ty=Tensor[(2288), uint16] */;
  %908 = @func_3700(%907) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(13, 16, 11), bool], Tensor[(2288), uint16], Tensor[(6, 9, 4), float64]) */;
  %909 = floor_divide(%898, %899) /* ty=Tensor[(6, 12, 8), float32] */;
  %910 = acos(%900) /* ty=Tensor[(6, 12, 8), float32] */;
  %911 = %905.1;
  %912 = %908.0;
  (%909, %910, %911, meta[relay.Constant][31] /* ty=Tensor[(378), int8] */, %var_14475, %912, meta[relay.Constant][32] /* ty=Tensor[(2288), uint16] */)
}

def @func_6088() -> (Tensor[(6, 9, 4), float32],) {
  @func_6086() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_15413() -> (Tensor[(6, 9, 4), float64], Tensor[(11, 16, 6), int64], Tensor[(1056), int64]) {
  %913 = cast(meta[relay.Constant][33] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %914 = reshape(%913, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int64] */;
  %915 = @func_11221(%914) /* ty=(Tensor[(11, 16, 6), int64],) */;
  %916 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %917 = %915.0;
  (%916, %917, meta[relay.Constant][33] /* ty=Tensor[(1056), int64] */)
}

def @func_9483() -> (Tensor[(6, 9, 4), float64],) {
  @func_9481() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_11472() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %918 = @func_9473() /* ty=(Tensor[(392), uint64],) */;
  %919 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %920 = %918.0;
  %921 = %919.1;
  (%920, %921)
}

def @func_16307() -> Tensor[(6, 9, 4), float64] {
  %922 = @func_9481() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %922.0
}

def @func_9290(%var_9288: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32]) {
  @func_9287(%var_9288) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32]) */
}

def @func_13673() -> Tensor[(6, 9, 4), float32] {
  %923 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %923.0
}

def @func_9355(%var_9353: Tensor[(13, 1, 5), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) {
  @func_9352(%var_9353) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) */
}

def @func_12612(%var_12610: Tensor[(196, 2), uint64], %var_12611: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), bool], Tensor[(196, 2), float64], Tensor[(10, 14, 12), float32]) {
  @func_12608(%var_12610, %var_12611) /* ty=(Tensor[(6, 9, 4), bool], Tensor[(196, 2), float64], Tensor[(10, 14, 12), float32]) */
}

def @func_8352() -> Tensor[(6, 9, 4), float32] {
  %925 = fn () -> Tensor[(6, 9, 4), float32] {
    %924 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %924.1
  };
  %925() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_11543() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), bool]) {
  @func_11541() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), bool]) */
}

def @func_5570(%var_5566: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %926 = cast(%var_5566, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %927 = reshape(%926, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %928 = @func_2858(%927) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %929 = @func_3425() /* ty=Tensor[(6, 9, 4), float32] */;
  %930 = %928.2;
  %931 = @func_3412() /* ty=Tensor[(6, 9, 4), float32] */;
  (%929, %930, %var_5566, %931)
}

def @func_3779() -> Tensor[(6, 9, 4), float64] {
  %932 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %932.0
}

def @func_13675() -> Tensor[(6, 9, 4), float32] {
  @func_13673() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_14339() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %933 = @func_6999() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64], Tensor[(1, 1, 15), float32]) */;
  %934 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %935 = %933.0;
  %936 = %934.0;
  (%935, %936)
}

def @func_8944(%var_8923: Tensor[(9, 14, 3), int8], %var_8940: Tensor[(72), uint16]) -> (Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) {
  %937 = cast(%var_8923, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %938 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(9, 14, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 14, 3), int8] */, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %941 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 14, 3), int8] */, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %942 = shape_of(%var_8923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_8923, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(%var_8940, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %946 = reshape(%945, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %947 = @func_3911(%946) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %948 = add(%939, %940) /* ty=Tensor[(9, 14, 3), int8] */;
  %949 = equal(%943, %944) /* ty=Tensor[(9, 14, 3), bool] */;
  %950 = %947.2;
  (%948, %949, %950, %var_8940)
}

def @func_6303() -> (Tensor[(6, 9, 4), float32],) {
  %951 = @func_6010() /* ty=Tensor[(6, 9, 4), float32] */;
  (%951,)
}

def @func_2082(%var_2080: Tensor[(7, 56), uint64]) -> (Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) {
  @func_2079(%var_2080) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */
}

def @func_14133() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  %952 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %953 = @func_9745() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %954 = %952.0;
  %955 = %953.1;
  (%954, %955)
}

def @func_15046(%var_15044: Tensor[(7, 4, 6), int64]) -> Tensor[(7, 4, 6), bool] {
  @func_15043(%var_15044) /* ty=Tensor[(7, 4, 6), bool] */
}

def @func_2729() -> (Tensor[(6, 9, 4), float32],) {
  %957 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %956 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
    (%956,)
  };
  %957() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_9630(%var_9628: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) {
  @func_9627(%var_9628) /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) */
}

def @func_6343() -> Tensor[(6, 9, 4), float32] {
  @func_6341() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_1131(%var_1129: Tensor[(13, 3, 4), float32], %var_1130: Tensor[(392), uint64]) -> (Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %971 = fn (%var_1089: Tensor[(13, 3, 4), float32], %var_1116: Tensor[(392), uint64]) -> (Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
    %958 = cast(%var_1089, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %959 = sin(%958) /* ty=Tensor[(13, 3, 4), float32] */;
    %960 = cast(%var_1089, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
    %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
    %962 = cast(%959, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %964 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %965 = cast(%var_1116, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %966 = reshape(%964, newshape=[]) /* ty=uint64 */;
    %967 = reshape(%965, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
    %968 = @func_475(%966, %967) /* ty=(Tensor[(14, 2, 14), float64],) */;
    %969 = not_equal(%962, %963) /* ty=Tensor[(13, 3, 4), bool] */;
    %970 = %968.0;
    (%969, %970, meta[relay.Constant][35] /* ty=uint64 */, %var_1116)
  };
  %971(%var_1129, %var_1130) /* ty=(Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */
}

def @func_4698() -> (Tensor[(1, 1, 15), float32],) {
  %972 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %973 = %972.1;
  %974 = cast(%973, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %975 = cos(%974) /* ty=Tensor[(1, 1, 15), float32] */;
  (%975,)
}

def @func_9137(%var_9079: Tensor[(2288, 1), uint16]) -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) {
  %976 = @func_3811() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) */;
  %977 = @func_7418() /* ty=(Tensor[(16, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %978 = cast(%var_9079, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
  %979 = reshape(%978, newshape=[1, 2288]) /* ty=Tensor[(1, 2288), uint16] */;
  %980 = @func_4930(%979) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */;
  %981 = %980.0;
  %982 = cast(%981, dtype="float64") /* ty=Tensor[(392), float64] */;
  %983 = %976.1;
  %984 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %985 = %977.0;
  %986 = log2(%982) /* ty=Tensor[(392), float64] */;
  %987 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%983, %984, %var_9079, %985, %986, %987)
}

def @func_5930(%var_5923: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32]) {
  %988 = cast(%var_5923, dtype="float32") /* ty=Tensor[(15), float32] */;
  %989 = reshape(%988, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), float32] */;
  %990 = @func_2229(%989) /* ty=(Tensor[(1, 1, 15), float32],) */;
  %991 = @func_5858() /* ty=Tensor[(6, 9, 4), float32] */;
  %992 = %990.0;
  (%991, %992, %var_5923)
}

def @func_7580() -> (Tensor[(6, 9, 4), bool],) {
  %1000 = fn () -> (Tensor[(6, 9, 4), bool],) {
    %993 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %994 = %993.0;
    %995 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 9, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%994, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %999 = equal(%997, %998) /* ty=Tensor[(6, 9, 4), bool] */;
    (%999,)
  };
  %1000() /* ty=(Tensor[(6, 9, 4), bool],) */
}

def @func_6351() -> Tensor[(6, 9, 4), float32] {
  %1001 = @func_4393() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1001.1
}

def @func_11932() -> Tensor[(6, 9, 4), float32] {
  @func_11930() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_1615(%var_1548: Tensor[(15, 6, 15), float64], %var_1565: Tensor[(78, 2), float32]) -> (uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) {
  %1002 = cast(%var_1565, dtype="float32") /* ty=Tensor[(78, 2), float32] */;
  %1003 = cast(meta[relay.Constant][37] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1004 = reshape(%1002, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %1005 = reshape(%1003, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1006 = @func_1128(%1004, %1005) /* ty=(Tensor[(13, 3, 4), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */;
  %1007 = cast(%var_1548, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %1008 = acosh(%1007) /* ty=Tensor[(15, 6, 15), float64] */;
  %1009 = cast(%var_1548, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %1010 = erf(%1009) /* ty=Tensor[(15, 6, 15), float64] */;
  %1011 = cast(%1010, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %1012 = shape_of(%1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%1008, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1015 = %1006.2;
  %1016 = equal(%1013, %1014) /* ty=Tensor[(15, 6, 15), bool] */;
  (%1015, %var_1565, meta[relay.Constant][37] /* ty=Tensor[(392), uint64] */, %1016)
}

def @func_11022(%var_11019: Tensor[(8, 9, 7), uint32], %var_11020: Tensor[(8, 9, 7), uint32], %var_11021: Tensor[(216), float32]) -> (Tensor[(8, 9, 7), uint32], Tensor[(6, 9, 4), float32], Tensor[(216), float32], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
  %1031 = fn (%var_10963: Tensor[(8, 9, 7), uint32], %var_10964: Tensor[(8, 9, 7), uint32], %var_10983: Tensor[(216), float32]) -> (Tensor[(8, 9, 7), uint32], Tensor[(6, 9, 4), float32], Tensor[(216), float32], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) {
    %1017 = cast(%var_10964, dtype="uint32") /* ty=Tensor[(8, 9, 7), uint32] */;
    %1018 = shape_of(%var_10963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1019 = cast(%var_10963, dtype="uint32") /* ty=Tensor[(8, 9, 7), uint32] */;
    %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1021 = cast(%var_10983, dtype="float32") /* ty=Tensor[(216), float32] */;
    %1022 = reshape(%1021, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %1023 = @func_4661(%1022) /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1024 = cast(%var_10983, dtype="float32") /* ty=Tensor[(216), float32] */;
    %1025 = reshape(%1024, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
    %1026 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1027 = right_shift(%1019, %1020) /* ty=Tensor[(8, 9, 7), uint32] */;
    %1028 = %1023.0;
    %1029 = @func_4357(%1025) /* ty=Tensor[(6, 9, 4), uint16] */;
    %1030 = %1026.0;
    (%1027, %1028, %var_10983, %1029, %1030)
  };
  %1031(%var_11019, %var_11020, %var_11021) /* ty=(Tensor[(8, 9, 7), uint32], Tensor[(6, 9, 4), float32], Tensor[(216), float32], Tensor[(6, 9, 4), uint16], Tensor[(6, 9, 4), float32]) */
}

def @func_4752(%var_4750: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  @func_4749(%var_4750) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) */
}

def @func_3288() -> (Tensor[(6, 9, 4), float32],) {
  @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_6883() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
  %1038 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) {
    %1032 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1033 = %1032.0;
    %1034 = cast(%1033, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %1035 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
    %1036 = atan(%1034) /* ty=Tensor[(6, 9, 4), float64] */;
    %1037 = %1035.1;
    (%1036, %1037)
  };
  %1038() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */
}

def @func_15632() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) {
  %1043 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) {
    %1039 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1040 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
    %1041 = %1039.0;
    %1042 = %1040.0;
    (%1041, %1042)
  };
  %1043() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool]) */
}

def @func_16392() -> Tensor[(6, 9, 4), float64] {
  %1044 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1044.0
}

def @func_7809() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(392), uint64]) {
  %1045 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1046 = @func_6104() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1047 = %1046.0;
  %1048 = cast(%1047, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1049 = reshape(%1048, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1050 = @func_6798(%1049) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %1051 = cast(%1047, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1052 = reshape(%1051, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1053 = @func_6798(%1052) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), bool]) */;
  %1054 = %1045.0;
  %1055 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %1056 = %1050.1;
  %1057 = %1053.0;
  (%1054, %1047, %1055, %1056, %1057)
}

def @func_12666(%var_12623: Tensor[(392), uint64], %var_12634: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) {
  %1058 = cast(%var_12623, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1059 = reshape(%1058, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1060 = @func_9627(%1059) /* ty=(Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(9, 8, 16), uint16]) */;
  %1061 = cast(%var_12634, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %1062 = reshape(%1061, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
  %1063 = @func_4421(%1062) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
  %1064 = @func_7491() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1065 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %1066 = @func_11393() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1067 = cast(%var_12623, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1068 = reshape(%1067, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
  %1069 = @func_2810(%1068) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
  %1070 = @func_12449() /* ty=Tensor[(6, 9, 4), float64] */;
  %1071 = %1060.5;
  %1072 = %1063.0;
  %1073 = %1064.0;
  %1074 = %1065.0;
  %1075 = %1066.0;
  %1076 = %1069.1;
  (%1070, %1071, %var_12623, %1072, %var_12634, %1073, %1074, %1075, %1076)
}

def @func_10366() -> (Tensor[(6, 9, 4), float64],) {
  %1079 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %1077 = @func_9011() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1078 = %1077.1;
    (%1078,)
  };
  %1079() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_13404() -> (Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
  @func_13402() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */
}

def @func_11223(%var_11222: Tensor[(11, 16, 6), int64]) -> (Tensor[(11, 16, 6), int64],) {
  %1085 = fn (%var_11217: Tensor[(11, 16, 6), int64]) -> (Tensor[(11, 16, 6), int64],) {
    %1080 = cast(%var_11217, dtype="int64") /* ty=Tensor[(11, 16, 6), int64] */;
    %1081 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 16, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1082 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 16, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 16, 6), int64] */;
    %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1084 = subtract(%1082, %1083) /* ty=Tensor[(11, 16, 6), int64] */;
    (%1084,)
  };
  %1085(%var_11222) /* ty=(Tensor[(11, 16, 6), int64],) */
}

def @func_8681() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  %1098 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
    %1086 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1087 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %1088 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
    %1089 = cast(meta[relay.Constant][39] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %1090 = reshape(%1089, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint64] */;
    %1091 = @func_2810(%1090) /* ty=(Tensor[(6, 9, 4), float32], uint64, Tensor[(196, 2), uint64], Tensor[(6, 9, 4), float32]) */;
    %1092 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
    %1093 = %1086.0;
    %1094 = %1087.0;
    %1095 = %1088.0;
    %1096 = %1091.0;
    %1097 = %1092.0;
    (%1093, %1094, %1095, %1096, meta[relay.Constant][39] /* ty=Tensor[(392), uint64] */, %1097)
  };
  %1098() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_4988(%var_4977: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64, Tensor[(392), uint64]) {
  %1099 = cast(%var_4977, dtype="uint64") /* ty=uint64 */;
  %1100 = cast(meta[relay.Constant][40] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1101 = reshape(%1099, newshape=[]) /* ty=uint64 */;
  %1102 = reshape(%1100, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint64] */;
  %1103 = @func_475(%1101, %1102) /* ty=(Tensor[(14, 2, 14), float64],) */;
  %1104 = @func_3158() /* ty=Tensor[(6, 9, 4), float32] */;
  %1105 = %1103.0;
  (%1104, %1105, %var_4977, meta[relay.Constant][40] /* ty=Tensor[(392), uint64] */)
}

def @func_16225() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %1110 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %1106 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1107 = @func_16029() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1108 = %1106.0;
    %1109 = %1107.0;
    (%1108, %1109)
  };
  %1110() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_12608(%var_12567: Tensor[(196, 2), uint64], %var_12583: Tensor[(196, 2), uint64]) -> (Tensor[(6, 9, 4), bool], Tensor[(196, 2), float64], Tensor[(10, 14, 12), float32]) {
  %1111 = @func_7944() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) */;
  %1112 = cast(%var_12583, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %1113 = shape_of(%var_12567, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1114 = cast(%var_12567, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %1115 = dyn.reshape(%1112, %1113, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1116 = cast(%var_12567, dtype="uint64") /* ty=Tensor[(196, 2), uint64] */;
  %1117 = reshape(%1116, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1118 = @func_2858(%1117) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %1119 = %1118.1;
  %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %1121 = rsqrt(%1120) /* ty=Tensor[(10, 14, 12), float64] */;
  %1122 = cast(%1119, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1124 = cast(%1121, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1126 = %1111.3;
  %1127 = divide(%1114, %1115) /* ty=Tensor[(196, 2), float64] */;
  %1128 = mod(%1124, %1125) /* ty=Tensor[(10, 14, 12), float32] */;
  (%1126, %1127, %1128)
}

def @func_15542() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) {
  @func_15540() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float64]) */
}

def @func_14634() -> (Tensor[(6, 9, 4), uint8],) {
  @func_14632() /* ty=(Tensor[(6, 9, 4), uint8],) */
}

def @func_8306() -> (Tensor[(6, 9, 4), float64],) {
  @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_3286() -> (Tensor[(6, 9, 4), float32],) {
  %1129 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1129,)
}

def @func_3275() -> (Tensor[(6, 9, 4), float64],) {
  %1130 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %1131 = %1130.1;
  %1132 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %1134 = shape_of(%1131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1135 = cast(%1131, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1137 = floor_mod(%1135, %1136) /* ty=Tensor[(6, 9, 4), float64] */;
  (%1137,)
}

def @func_5313(%var_5312: Tensor[(6, 9, 4), float64]) -> Tensor[(6, 9, 4), uint8] {
  %1143 = fn (%var_5306: Tensor[(6, 9, 4), float64]) -> Tensor[(6, 9, 4), uint8] {
    %1138 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
    %1139 = cast(%var_5306, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
    %1140 = shape_of(%1138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1141 = cast(%1138, dtype="uint8") /* ty=Tensor[(6, 9, 4), uint8] */;
    %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%1141, %1142) /* ty=Tensor[(6, 9, 4), uint8] */
  };
  %1143(%var_5312) /* ty=Tensor[(6, 9, 4), uint8] */
}

def @func_15849() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %1146 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %1144 = @func_11836() /* ty=Tensor[(6, 9, 4), float32] */;
    %1145 = @func_10916() /* ty=Tensor[(6, 9, 4), float32] */;
    (%1144, %1145)
  };
  %1146() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_4324() -> (Tensor[(6, 9, 4), float32],) {
  %1149 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %1147 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1148 = %1147.0;
    (%1148,)
  };
  %1149() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_14632() -> (Tensor[(6, 9, 4), uint8],) {
  %1150 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1151 = %1150.1;
  (%1151,)
}

def @func_12175() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32]) {
  %1152 = @func_10365() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1153 = @func_9707() /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(1, 16, 15), bool], Tensor[(1, 16, 15), float64], Tensor[(6, 9, 4), float32]) */;
  %1154 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1155 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1156 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1157 = %1152.0;
  %1158 = %1153.1;
  %1159 = %1154.0;
  %1160 = %1155.1;
  %1161 = %1156.1;
  %1162 = @func_6010() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1157, %1158, %1159, %1160, %1161, %1162)
}

def @func_478(%var_476: uint64, %var_477: Tensor[(14, 2, 14), uint64]) -> (Tensor[(14, 2, 14), float64],) {
  %1168 = fn (%var_454: uint64, %var_455: Tensor[(14, 2, 14), uint64]) -> (Tensor[(14, 2, 14), float64],) {
    %1163 = cast(%var_454, dtype="uint64") /* ty=uint64 */;
    %1164 = cast(%var_455, dtype="uint64") /* ty=Tensor[(14, 2, 14), uint64] */;
    %1165 = left_shift(%1163, %1164) /* ty=Tensor[(14, 2, 14), uint64] */;
    %1166 = cast(%1165, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
    %1167 = cos(%1166) /* ty=Tensor[(14, 2, 14), float64] */;
    (%1167,)
  };
  %1168(%var_476, %var_477) /* ty=(Tensor[(14, 2, 14), float64],) */
}

def @func_6104() -> (Tensor[(6, 9, 4), float64],) {
  %1169 = @func_5679() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_8914() -> (Tensor[(6, 9, 4), float32],) {
  @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_12208() -> (Tensor[(6, 9, 4), float64],) {
  %1173 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %1171 = @func_11449() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %1172 = %1171.0;
    (%1172,)
  };
  %1173() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_5573(%var_5571: Tensor[(392), uint64]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) {
  @func_5570(%var_5571) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */
}

def @func_6179() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  %1180 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
    %1174 = @func_4323() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1175 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1176 = %1175.0;
    %1177 = cast(%1176, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
    %1178 = %1174.0;
    %1179 = sin(%1177) /* ty=Tensor[(6, 9, 4), float32] */;
    (%1178, %1179)
  };
  %1180() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_13210() -> Tensor[(6, 9, 4), float32] {
  @func_13208() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_4081() -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) {
  @func_4079() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) */
}

def @func_15415() -> (Tensor[(6, 9, 4), float64], Tensor[(11, 16, 6), int64], Tensor[(1056), int64]) {
  @func_15413() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(11, 16, 6), int64], Tensor[(1056), int64]) */
}

def @func_12451() -> Tensor[(6, 9, 4), float64] {
  @func_12449() /* ty=Tensor[(6, 9, 4), float64] */
}

def @func_3022() -> (Tensor[(6, 9, 4), float32],) {
  %1183 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %1181 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1182 = %1181.0;
    (%1182,)
  };
  %1183() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_15449() -> (Tensor[(6, 9, 4), float32],) {
  @func_15447() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_16584(%var_16570: Tensor[(1152), uint16]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(1152), uint16], Tensor[(6, 9, 4), uint8]) {
  %1184 = @func_14690() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1185 = @func_16475() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1186 = cast(%var_16570, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %1187 = reshape(%1186, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint16] */;
  %1188 = @func_14433(%1187) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(13, 14), float64], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), bool]) */;
  %1189 = @func_16294() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), uint8]) */;
  %1190 = @func_14809() /* ty=Tensor[(392), uint64] */;
  %1191 = %1184.0;
  %1192 = %1185.2;
  %1193 = %1188.2;
  %1194 = %1189.2;
  (%1190, %1191, %1192, %1193, %var_16570, %1194)
}

def @func_6086() -> (Tensor[(6, 9, 4), float32],) {
  %1195 = @func_3194() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1195,)
}

def @func_15608() -> (Tensor[(6, 9, 4), float32],) {
  %1196 = @func_2728() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1197 = %1196.0;
  (%1197,)
}

def @func_12840(%var_12839: Tensor[(15), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
  %1204 = fn (%var_12832: Tensor[(15), float32]) -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) {
    %1198 = @func_12334() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) */;
    %1199 = cast(%var_12832, dtype="float32") /* ty=Tensor[(15), float32] */;
    %1200 = reshape(%1199, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %1201 = @func_8055(%1200) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
    %1202 = %1198.2;
    %1203 = %1201.0;
    (%1202, %1203, %var_12832)
  };
  %1204(%var_12839) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(15), float32]) */
}

def @func_7960() -> Tensor[(6, 9, 4), float64] {
  %1205 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1205.0
}

def @func_16711() -> (Tensor[(6, 9, 4), float64],) {
  @func_16709() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_10629() -> (Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) {
  @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */
}

def @func_17430(%var_17428: uint64) -> (Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64) {
  @func_17427(%var_17428) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(14, 2, 14), float64], uint64) */
}

def @func_9993() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) {
  %1206 = @func_3275() /* ty=(Tensor[(6, 9, 4), float64],) */;
  %1207 = @func_6048() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8]) */;
  %1208 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1209 = @func_6198() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1210 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1211 = %1206.0;
  %1212 = %1207.0;
  %1213 = %1208.0;
  %1214 = %1209.0;
  %1215 = %1210.1;
  (%1211, %1212, %1213, %1214, %1215)
}

def @func_16322() -> (Tensor[(6, 9, 4), bool], Tensor[(1, 1, 15), float32]) {
  @func_16320() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(1, 1, 15), float32]) */
}

def @func_11998() -> (Tensor[(6, 9, 4), float32],) {
  %1216 = @func_8351() /* ty=Tensor[(6, 9, 4), float32] */;
  (%1216,)
}

def @func_3618() -> (Tensor[(6, 9, 4), float32],) {
  @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_11294() -> Tensor[(6, 9, 4), float64] {
  %1217 = @func_6733() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */;
  %1217.1
}

def @func_15975() -> (Tensor[(6, 9, 4), float64],) {
  %1220 = fn () -> (Tensor[(6, 9, 4), float64],) {
    %1218 = @func_8304() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %1219 = %1218.0;
    (%1219,)
  };
  %1220() /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_12670(%var_12668: Tensor[(392), uint64], %var_12669: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) {
  @func_12666(%var_12668, %var_12669) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) */
}

def @func_6816() -> Tensor[(392), uint64] {
  @func_6814() /* ty=Tensor[(392), uint64] */
}

def @func_9213() -> (Tensor[(1, 1, 15), float32],) {
  %1221 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
  (%1221,)
}

def @func_13592(%var_13581: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), uint8], Tensor[(6, 9, 4), float32], Tensor[(72), uint16], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool]) {
  %1222 = @func_6441() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1223 = cast(meta[relay.Constant][41] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %1224 = reshape(%1223, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %1225 = @func_3911(%1224) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %1226 = @func_9745() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32]) */;
  %1227 = @func_3616() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1228 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
  %1229 = %1228.2;
  %1230 = cast(%1229, dtype="float64") /* ty=Tensor[(392), float64] */;
  %1231 = @func_7491() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1232 = cast(%1229, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1233 = cast(%var_13581, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %1234 = reshape(%1232, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1235 = reshape(%1233, newshape=[1680]) /* ty=Tensor[(1680), bool] */;
  %1236 = @func_12666(%1234, %1235) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(9, 8, 16), uint16], Tensor[(392), uint64], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], uint64) */;
  %1237 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  %1238 = %1222.1;
  %1239 = %1225.1;
  %1240 = %1226.0;
  %1241 = %1227.0;
  %1242 = acosh(%1230) /* ty=Tensor[(392), float64] */;
  %1243 = %1231.1;
  %1244 = @func_13385() /* ty=Tensor[(392), uint64] */;
  %1245 = %1236.3;
  (%1237, %1238, %1239, meta[relay.Constant][41] /* ty=Tensor[(72), uint16] */, %1240, %1241, %1242, %1243, %1244, %1245, %var_13581)
}

def @func_16995(%var_16987: Tensor[(14, 8, 12), int32], %var_16988: Tensor[(14, 8, 12), int32]) -> Tensor[(14, 8, 12), int32] {
  %1246 = cast(%var_16988, dtype="int32") /* ty=Tensor[(14, 8, 12), int32] */;
  %1247 = shape_of(%var_16987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1248 = cast(%var_16987, dtype="int32") /* ty=Tensor[(14, 8, 12), int32] */;
  %1249 = dyn.reshape(%1246, %1247, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%1248, %1249) /* ty=Tensor[(14, 8, 12), int32] */
}

def @func_13208() -> Tensor[(6, 9, 4), float32] {
  @func_6010() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_11186() -> (Tensor[(5, 3, 15), int64],) {
  %1259 = fn () -> (Tensor[(5, 3, 15), int64],) {
    %1250 = @func_5170() /* ty=(Tensor[(5, 3, 15), bool],) */;
    %1251 = %1250.0;
    %1252 = cast(%1251, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
    %1253 = atan(%1252) /* ty=Tensor[(5, 3, 15), float64] */;
    %1254 = cast(%1253, dtype="int64") /* ty=Tensor[(5, 3, 15), int64] */;
    %1255 = shape_of(%1251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1256 = cast(%1251, dtype="int64") /* ty=Tensor[(5, 3, 15), int64] */;
    %1257 = dyn.reshape(%1254, %1255, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1258 = subtract(%1256, %1257) /* ty=Tensor[(5, 3, 15), int64] */;
    (%1258,)
  };
  %1259() /* ty=(Tensor[(5, 3, 15), int64],) */
}

def @func_8439() -> Tensor[(6, 9, 4), float32] {
  %1260 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1260.2
}

def @func_6814() -> Tensor[(392), uint64] {
  %1261 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %1261.0
}

def @func_10236() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(?, 2288), float64]) {
  %1276 = fn () -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(?, 2288), float64]) {
    %1262 = @func_6836() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1263 = @func_4380() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1264 = cast(meta[relay.Constant][42] /* ty=Tensor[(2288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2288, 1), uint16] */;
    %1265 = reshape(%1264, newshape=[1, 2288]) /* ty=Tensor[(1, 2288), uint16] */;
    %1266 = @func_4930(%1265) /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(1, 2288), uint16], Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32]) */;
    %1267 = %1266.5;
    %1268 = cast(meta[relay.Constant][42] /* ty=Tensor[(2288, 1), uint16] */, dtype="float64") /* ty=Tensor[(2288, 1), float64] */;
    %1269 = shape_of(%1267, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1270 = cast(%1267, dtype="float64") /* ty=Tensor[(1, 2288), float64] */;
    %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1272 = %1262.0;
    %1273 = @func_7997() /* ty=Tensor[(6, 9, 4), float32] */;
    %1274 = %1263.0;
    %1275 = power(%1270, %1271) /* ty=Tensor[(?, 2288), float64] */;
    (%1272, %1273, %1274, %1275)
  };
  %1276() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(?, 2288), float64]) */
}

def @func_9287(%var_9279: Tensor[(15, 1), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(5, 3, 1), float32], Tensor[(15, 1), float32]) {
  %1277 = cast(%var_9279, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %1278 = reshape(%1277, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
  %1279 = @func_4023(%1278) /* ty=(Tensor[(5, 3, 1), float32],) */;
  %1280 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
  %1281 = %1279.0;
  (%1280, %1281, %var_9279)
}

def @func_4079() -> (Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64], Tensor[(6, 9, 4), float32], Tensor[(7, 56), uint64]) {
  %1282 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1283 = cast(meta[relay.Constant][43] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1284 = reshape(%1283, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1285 = @func_2858(%1284) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
  %1286 = @func_3286() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1287 = cast(meta[relay.Constant][43] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1288 = reshape(%1287, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint64] */;
  %1289 = @func_2079(%1288) /* ty=(Tensor[(10, 14, 12), bool], Tensor[(14, 2, 14), float64], uint64, Tensor[(7, 56), uint64]) */;
  %1290 = %1282.0;
  %1291 = %1285.1;
  %1292 = %1286.0;
  %1293 = %1289.3;
  (%1290, %1291, meta[relay.Constant][43] /* ty=Tensor[(392), uint64] */, %1292, %1293)
}

def @func_8948(%var_8946: Tensor[(9, 14, 3), int8], %var_8947: Tensor[(72), uint16]) -> (Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) {
  @func_8944(%var_8946, %var_8947) /* ty=(Tensor[(9, 14, 3), int8], Tensor[(9, 14, 3), bool], Tensor[(9, 8, 16), float32], Tensor[(72), uint16]) */
}

def @func_15201(%var_15069: Tensor[(16, 16, 15), float64], %var_15113: Tensor[(2288), uint16], %var_15150: Tensor[(168), int64], %var_15180: Tensor[(429), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(13, 5), float32], Tensor[(15, 6, 15), bool], Tensor[(1350), float64], Tensor[(156), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(2288), uint16], Tensor[(7, 4, 6), bool], Tensor[(168), int64], Tensor[(11, 13, 3), float64], Tensor[(429), float64]) {
  %1294 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %1295 = %1294.1;
  %1296 = cast(%var_15069, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %1297 = shape_of(%1295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1298 = cast(%1295, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %1299 = dyn.reshape(%1296, %1297, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1300 = @func_12334() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, 5), float32]) */;
  %1301 = cast(meta[relay.Constant][44] /* ty=Tensor[(1350), float64] */, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %1302 = cast(meta[relay.Constant][45] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %1303 = reshape(%1301, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float64] */;
  %1304 = reshape(%1302, newshape=[78, 2]) /* ty=Tensor[(78, 2), float32] */;
  %1305 = @func_1615(%1303, %1304) /* ty=(uint64, Tensor[(78, 2), float32], Tensor[(392), uint64], Tensor[(15, 6, 15), bool]) */;
  %1306 = @func_8097() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(16, 16, 15), float64]) */;
  %1307 = cast(%var_15113, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %1308 = reshape(%1307, newshape=[2288, 1]) /* ty=Tensor[(2288, 1), uint16] */;
  %1309 = @func_9137(%1308) /* ty=(Tensor[(1, 1, 15), float32], Tensor[(6, 9, 4), float32], Tensor[(2288, 1), uint16], Tensor[(16, 16, 15), float64], Tensor[(392), float64], Tensor[(6, 9, 4), float32]) */;
  %1310 = cast(%var_15150, dtype="int64") /* ty=Tensor[(168), int64] */;
  %1311 = reshape(%1310, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int64] */;
  %1312 = cast(%var_15180, dtype="float64") /* ty=Tensor[(429), float64] */;
  %1313 = cast(%var_15180, dtype="float64") /* ty=Tensor[(429), float64] */;
  %1314 = reshape(%1312, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %1315 = reshape(%1313, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %1316 = @func_11133(%1314, %1315) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
  %1317 = left_shift(%1298, %1299) /* ty=Tensor[(16, 16, 15), int8] */;
  %1318 = %1300.3;
  %1319 = %1305.3;
  %1320 = %1306.0;
  %1321 = %1309.1;
  %1322 = @func_15043(%1311) /* ty=Tensor[(7, 4, 6), bool] */;
  %1323 = %1316.1;
  (%1317, %1318, %1319, meta[relay.Constant][44] /* ty=Tensor[(1350), float64] */, meta[relay.Constant][45] /* ty=Tensor[(156), float32] */, %1320, %1321, %var_15113, %1322, %var_15150, %1323, %var_15180)
}

def @func_3412() -> Tensor[(6, 9, 4), float32] {
  @func_3158() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_6353() -> Tensor[(6, 9, 4), float32] {
  @func_6351() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_4023(%var_4018: Tensor[(5, 3, 1), float32]) -> (Tensor[(5, 3, 1), float32],) {
  %1324 = cast(%var_4018, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %1325 = acosh(%1324) /* ty=Tensor[(5, 3, 1), float32] */;
  (%1325,)
}

def @func_13160() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) {
  @func_13158() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_3087() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
  %1333 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) {
    %1326 = @func_2657() /* ty=Tensor[(6, 9, 4), float32] */;
    %1327 = cast(%1326, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
    %1328 = cast(meta[relay.Constant][46] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %1329 = reshape(%1328, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %1330 = @func_2858(%1329) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
    %1331 = rsqrt(%1327) /* ty=Tensor[(6, 9, 4), float64] */;
    %1332 = %1330.0;
    (%1331, %1332, meta[relay.Constant][46] /* ty=Tensor[(392), uint64] */)
  };
  %1333() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */
}

def @func_7201() -> (Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
  %1341 = fn () -> (Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) {
    %1334 = @func_5408() /* ty=(Tensor[(6, 9, 4), float64],) */;
    %1335 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 12), uint16] */, dtype="uint16") /* ty=Tensor[(6, 12), uint16] */;
    %1336 = reshape(%1335, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
    %1337 = @func_3911(%1336) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
    %1338 = %1334.0;
    %1339 = @func_5034() /* ty=Tensor[(1, 1, 15), float32] */;
    %1340 = %1337.0;
    (%1338, %1339, %1340, meta[relay.Constant][47] /* ty=Tensor[(6, 12), uint16] */)
  };
  %1341() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(1, 1, 15), float32], Tensor[(9, 8, 16), uint16], Tensor[(6, 12), uint16]) */
}

def @func_9352(%var_9318: Tensor[(13, 1, 5), float32]) -> (Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(13, ?, 5), float64]) {
  %1342 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
  %1343 = cast(%var_9318, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %1344 = log(%1343) /* ty=Tensor[(13, 1, 5), float32] */;
  %1345 = cast(%var_9318, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %1346 = shape_of(%1344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1347 = cast(%1344, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %1348 = dyn.reshape(%1345, %1346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1349 = greater_equal(%1347, %1348) /* ty=Tensor[(13, ?, 5), bool] */;
  %1350 = cast(%1349, dtype="float64") /* ty=Tensor[(13, ?, 5), float64] */;
  %1351 = @func_6341() /* ty=Tensor[(6, 9, 4), float32] */;
  %1352 = %1342.0;
  %1353 = atan(%1350) /* ty=Tensor[(13, ?, 5), float64] */;
  (%1351, %1352, %1353)
}

def @func_11541() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), bool]) {
  %1354 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
  %1355 = cast(%1354, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1356 = reshape(%1355, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1357 = @func_2992(%1356) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %1358 = %1357.0;
  (%1354, %1358)
}

def @func_15587() -> (Tensor[(6, 9, 4), float32],) {
  @func_15585() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_14208(%var_14207: float32) -> Tensor[(11, 6, 2), bool] {
  %1361 = fn (%var_14197: float32) -> Tensor[(11, 6, 2), bool] {
    %1359 = cast(%var_14197, dtype="bool") /* ty=bool */;
    %1360 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 6, 2), float32] */, dtype="bool") /* ty=Tensor[(11, 6, 2), bool] */;
    less_equal(%1359, %1360) /* ty=Tensor[(11, 6, 2), bool] */
  };
  %1361(%var_14207) /* ty=Tensor[(11, 6, 2), bool] */
}

def @func_16129() -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) {
  @func_16127() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */
}

def @func_10842(%var_10840: Tensor[(1200), float32], %var_10841: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(12, 10, 10), uint32], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32]) {
  %1384 = fn (%var_10786: Tensor[(1200), float32], %var_10832: Tensor[(1680), bool]) -> (Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(12, 10, 10), uint32], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32]) {
    %1362 = @func_5421() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1363 = @func_6882() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), uint8]) */;
    %1364 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1365 = cast(%var_10786, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %1366 = reshape(%1365, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
    %1367 = @func_5827(%1366) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) */;
    %1368 = %1367.0;
    %1369 = cast(%var_10786, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
    %1370 = shape_of(%1368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1371 = cast(%1368, dtype="uint32") /* ty=Tensor[(12, 10, 10), uint32] */;
    %1372 = dyn.reshape(%1369, %1370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1373 = cast(%var_10832, dtype="bool") /* ty=Tensor[(1680), bool] */;
    %1374 = reshape(%1373, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), bool] */;
    %1375 = @func_4421(%1374) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(10, 14, 12), uint64]) */;
    %1376 = @func_10627() /* ty=(Tensor[(6, 9, 4), bool], Tensor[(6, 9, 4), float32]) */;
    %1377 = %1362.0;
    %1378 = %1363.0;
    %1379 = %1364.1;
    %1380 = @func_6508() /* ty=Tensor[(6, 9, 4), float32] */;
    %1381 = bitwise_and(%1371, %1372) /* ty=Tensor[(12, 10, 10), uint32] */;
    %1382 = %1375.0;
    %1383 = %1376.1;
    (%1377, %1378, %1379, %1380, %1381, %1382, %var_10832, %1383)
  };
  %1384(%var_10840, %var_10841) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(12, 10, 10), uint32], Tensor[(6, 9, 4), float64], Tensor[(1680), bool], Tensor[(6, 9, 4), float32]) */
}

def @func_16543() -> (Tensor[(6, 9, 4), float32],) {
  %1387 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %1385 = @func_4250() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1386 = %1385.0;
    (%1386,)
  };
  %1387() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_5829(%var_5828: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) {
  %1391 = fn (%var_5780: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) {
    %1388 = cast(%var_5780, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
    %1389 = log(%1388) /* ty=Tensor[(12, 10, 10), float32] */;
    %1390 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
    (%1389, %1390)
  };
  %1391(%var_5828) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 9, 4), float64]) */
}

def @func_17250() -> (Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(14, 8, 12), float32]) {
  %1392 = @func_8680() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64], Tensor[(6, 9, 4), float32]) */;
  %1393 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
  %1394 = cast(meta[relay.Constant][49] /* ty=Tensor[(672, 2), int32] */, dtype="int32") /* ty=Tensor[(672, 2), int32] */;
  %1395 = cast(meta[relay.Constant][49] /* ty=Tensor[(672, 2), int32] */, dtype="int32") /* ty=Tensor[(672, 2), int32] */;
  %1396 = reshape(%1394, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), int32] */;
  %1397 = reshape(%1395, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), int32] */;
  %1398 = @func_16995(%1396, %1397) /* ty=Tensor[(14, 8, 12), int32] */;
  %1399 = cast(meta[relay.Constant][49] /* ty=Tensor[(672, 2), int32] */, dtype="float32") /* ty=Tensor[(672, 2), float32] */;
  %1400 = shape_of(%1398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1401 = cast(%1398, dtype="float32") /* ty=Tensor[(14, 8, 12), float32] */;
  %1402 = dyn.reshape(%1399, %1400, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1403 = %1392.2;
  %1404 = %1393.1;
  %1405 = floor_divide(%1401, %1402) /* ty=Tensor[(14, 8, 12), float32] */;
  (%1403, %1404, %1405)
}

def @main(%var_17471: Tensor[(9, 8, 16), uint16]) -> Tensor[(9, 8, 16), bool] {
  %1406 = @func_14978() /* ty=(Tensor[(9, 8, 16), uint16],) */;
  %1407 = %1406.0;
  %1408 = cast(%var_17471, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %1409 = shape_of(%1407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1410 = cast(%1407, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %1411 = dyn.reshape(%1408, %1409, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%1410, %1411) /* ty=Tensor[(9, 8, 16), bool] */
}

def @func_10722() -> (Tensor[(6, 9, 4), float32],) {
  %1414 = fn () -> (Tensor[(6, 9, 4), float32],) {
    %1412 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1413 = %1412.0;
    (%1413,)
  };
  %1414() /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_7944() -> (Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), uint16], Tensor[(72), uint16], Tensor[(6, 9, 4), bool]) {
  %1415 = @func_6303() /* ty=(Tensor[(6, 9, 4), float32],) */;
  %1416 = cast(meta[relay.Constant][50] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %1417 = reshape(%1416, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint16] */;
  %1418 = @func_3911(%1417) /* ty=(Tensor[(9, 8, 16), uint16], Tensor[(6, 9, 4), float32], Tensor[(9, 8, 16), float32], Tensor[(9, 8, 1), float64]) */;
  %1419 = %1415.0;
  %1420 = cast(%1419, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %1421 = reshape(%1420, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), float32] */;
  %1422 = @func_2992(%1421) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %1423 = %1418.0;
  %1424 = %1422.0;
  (%1419, %1423, meta[relay.Constant][50] /* ty=Tensor[(72), uint16] */, %1424)
}

def @func_3414() -> Tensor[(6, 9, 4), float32] {
  @func_3412() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_3439() -> Tensor[(6, 9, 4), float32] {
  @func_3437() /* ty=Tensor[(6, 9, 4), float32] */
}

def @func_5135() -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) {
  %1427 = fn () -> (Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) {
    %1425 = @func_4583() /* ty=Tensor[(392), uint64] */;
    %1426 = @func_4457() /* ty=Tensor[(6, 9, 4), float64] */;
    (%1425, %1426)
  };
  %1427() /* ty=(Tensor[(392), uint64], Tensor[(6, 9, 4), float64]) */
}

def @func_8877(%var_8876: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(15), float32], Tensor[(10, 14, 12), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(5, 3, 392), int32], Tensor[(6, 9, 4), float32], Tensor[(392), int64]) {
  %1458 = fn (%var_8725: Tensor[(15), float32]) -> (Tensor[(6, 9, 4), float64], Tensor[(15), float32], Tensor[(10, 14, 12), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(5, 3, 392), int32], Tensor[(6, 9, 4), float32], Tensor[(392), int64]) {
    %1428 = @func_3086() /* ty=(Tensor[(6, 9, 4), float64], Tensor[(6, 9, 4), float32], Tensor[(392), uint64]) */;
    %1429 = %1428.2;
    %1430 = cast(%1429, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %1431 = reshape(%1430, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %1432 = @func_2858(%1431) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(10, 14, 12), bool], Tensor[(392), uint64]) */;
    %1433 = @func_5914() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1434 = cast(%var_8725, dtype="float32") /* ty=Tensor[(15), float32] */;
    %1435 = reshape(%1434, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
    %1436 = @func_4023(%1435) /* ty=(Tensor[(5, 3, 1), float32],) */;
    %1437 = %1436.0;
    %1438 = cast(%1437, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
    %1439 = reshape(%1438, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %1440 = @func_8055(%1439) /* ty=(Tensor[(6, 9, 4), float32], Tensor[(1, 1, 15), float32], Tensor[(15), float32], Tensor[(6, 9, 4), float32]) */;
    %1441 = cast(%1429, dtype="int32") /* ty=Tensor[(392), int32] */;
    %1442 = cast(%1437, dtype="int32") /* ty=Tensor[(5, 3, 1), int32] */;
    %1443 = @func_3718() /* ty=(Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32]) */;
    %1444 = @func_5253() /* ty=(Tensor[(392), uint64],) */;
    %1445 = %1444.0;
    %1446 = cast(meta[relay.Constant][51] /* ty=Tensor[(392), uint64] */, dtype="int64") /* ty=Tensor[(392), int64] */;
    %1447 = shape_of(%1445, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1448 = cast(%1445, dtype="int64") /* ty=Tensor[(392), int64] */;
    %1449 = dyn.reshape(%1446, %1447, newshape=[]) /* ty=Tensor[(?), int64] */;
    %1450 = @func_7960() /* ty=Tensor[(6, 9, 4), float64] */;
    %1451 = %1432.1;
    %1452 = %1433.0;
    %1453 = %1440.0;
    %1454 = @func_3437() /* ty=Tensor[(6, 9, 4), float32] */;
    %1455 = logical_xor(%1441, %1442) /* ty=Tensor[(5, 3, 392), int32] */;
    %1456 = %1443.0;
    %1457 = bitwise_or(%1448, %1449) /* ty=Tensor[(392), int64] */;
    (%1450, %var_8725, %1451, %1452, %1453, %1454, %1455, %1456, %1457)
  };
  %1458(%var_8876) /* ty=(Tensor[(6, 9, 4), float64], Tensor[(15), float32], Tensor[(10, 14, 12), bool], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(6, 9, 4), float32], Tensor[(5, 3, 392), int32], Tensor[(6, 9, 4), float32], Tensor[(392), int64]) */
}

def @func_13657() -> (Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) {
  %1463 = fn () -> (Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) {
    %1459 = @func_11185() /* ty=(Tensor[(5, 3, 15), int64],) */;
    %1460 = @func_8912() /* ty=(Tensor[(6, 9, 4), float32],) */;
    %1461 = %1459.0;
    %1462 = %1460.0;
    (%1461, %1462)
  };
  %1463() /* ty=(Tensor[(5, 3, 15), int64], Tensor[(6, 9, 4), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen635/build/output.py", line 5159, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:43:05] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

