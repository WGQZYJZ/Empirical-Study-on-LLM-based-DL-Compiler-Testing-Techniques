==========mod==========
#[version = "0.0.5"]
def @func_920(%var_898: Tensor[(1365, 1), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) {
  %0 = cast(%var_898, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
  %1 = reshape(%0, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %2 = @func_74(%1) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %3 = cast(%var_898, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
  %4 = reshape(%3, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %5 = @func_74(%4) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %6 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %7 = cast(%6, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %8 = erf(%7) /* ty=Tensor[(10, 14, 2), float64] */;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %10 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %11 = %2.0;
  %12 = %5.0;
  %13 = log10(%9) /* ty=Tensor[(10, 14, 2), float64] */;
  (%10, %11, %var_898, %12, %13)
}

def @func_1895() -> Tensor[(10, 14, 2), float32] {
  %14 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %14.1
}

def @func_3443(%var_3429: Tensor[(455, 3), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32], Tensor[(455, 3), float32], Tensor[(10, 14, 2), float32]) {
  %15 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %16 = @func_3054() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %17 = cast(%var_3429, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
  %18 = reshape(%17, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %19 = @func_218(%18) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %20 = @func_2191() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) */;
  %21 = %15.0;
  %22 = %16.0;
  %23 = %19.2;
  %24 = %20.1;
  (%21, %22, %23, %var_3429, %24)
}

def @func_6220(%var_6218: Tensor[(660), float64]) -> (Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(168), uint32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
  %25 = @func_740() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %26 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %29 = cast(%var_6218, dtype="float64") /* ty=Tensor[(660), float64] */;
  %30 = reshape(%27, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %31 = reshape(%28, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %32 = reshape(%29, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
  %33 = @func_2974(%30, %31, %32) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
  %34 = %25.2;
  %35 = %26.3;
  %36 = %33.2;
  (%34, %35, %36, meta[relay.Constant][0] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][1] /* ty=Tensor[(600), uint8] */, %var_6218)
}

def @func_6118() -> (Tensor[(10, 14, 2), float32],) {
  %37 = @func_4415() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) */;
  %38 = %37.1;
  (%38,)
}

def @func_1683() -> Tensor[(10, 14, 2), float32] {
  %39 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %39.8
}

def @func_740() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %41 = reshape(%40, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %42 = @func_218(%41) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %44 = reshape(%43, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %45 = @func_637(%44) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %46 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %47 = %42.1;
  %48 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %49 = %45.0;
  (%46, %47, meta[relay.Constant][2] /* ty=Tensor[(1365), float32] */, %48, %49)
}

def @func_3779(%var_3764: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) {
  %50 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
  %55 = reshape(%51, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %56 = reshape(%52, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %57 = reshape(%53, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %58 = reshape(%54, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %59 = @func_2090(%55, %56, %57, %58) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %60 = %59.1;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = cast(%var_3764, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %66 = cast(%var_3764, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %67 = reshape(%65, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %68 = reshape(%66, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %69 = @func_3376(%67, %68) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %70 = @func_2862() /* ty=Tensor[(10, 14, 2), float32] */;
  %71 = %50.0;
  %72 = less_equal(%63, %64) /* ty=Tensor[(5, 10, 12), bool] */;
  %73 = %69.1;
  (%70, %71, meta[relay.Constant][3] /* ty=Tensor[(6, 100), uint8] */, %72, %73, %var_3764)
}

def @func_7171() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), int32], Tensor[(8, 9, 2), float64], Tensor[(144), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
  %74 = @func_6935() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %76 = reshape(%75, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), float64] */;
  %77 = @func_2840(%76) /* ty=(Tensor[(8, 9, 2), float64],) */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %81 = reshape(%78, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %82 = reshape(%79, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %83 = reshape(%80, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %84 = @func_1306(%81, %82, %83) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
  %85 = %74.1;
  %86 = @func_4485() /* ty=Tensor[(10, 14, 2), int32] */;
  %87 = %77.0;
  %88 = %84.1;
  (%85, %86, %87, meta[relay.Constant][5] /* ty=Tensor[(144), float64] */, %88, meta[relay.Constant][6] /* ty=Tensor[(660), float64] */, meta[relay.Constant][7] /* ty=Tensor[(1365), float32] */)
}

def @func_218(%var_209: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 4), float64] */;
  %90 = cast(%var_209, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %91 = reshape(%90, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %92 = @func_74(%91) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %93 = cosh(%89) /* ty=Tensor[(12, 1, 4), float64] */;
  %94 = %92.0;
  (%93, %94, %var_209)
}

def @func_2248() -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  %95 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %96 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  %97 = %95.1;
  (%96, %97)
}

def @func_5170(%var_5095: Tensor[(9, 12, 10), float32], %var_5121: Tensor[(9, 12, 10), float32], %var_5161: Tensor[(576), float64]) -> (Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) {
  %98 = cast(%var_5095, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %99 = cosh(%98) /* ty=Tensor[(9, 12, 10), float32] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %101 = log10(%100) /* ty=Tensor[(9, 12, 10), float32] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %103 = cast(%var_5121, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %104 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%101, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = cast(%101, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %108 = cast(%var_5161, dtype="float64") /* ty=Tensor[(576), float64] */;
  %109 = reshape(%108, newshape=[12, 12, 4]) /* ty=Tensor[(12, 12, 4), float64] */;
  %110 = @func_3933(%109) /* ty=(Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) */;
  %111 = @func_4378() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %112 = tan(%102) /* ty=Tensor[(9, 12, 10), float32] */;
  %113 = not_equal(%105, %106) /* ty=Tensor[(9, 12, 10), bool] */;
  %114 = rsqrt(%107) /* ty=Tensor[(9, 12, 10), float32] */;
  %115 = %110.2;
  %116 = %111.1;
  (%112, %113, %114, %115, %var_5161, %116)
}

def @func_2749(%var_2728: Tensor[(600), uint8], %var_2744: Tensor[(660, 1), float64], %var_2745: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) {
  %117 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %118 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %119 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %120 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %121 = reshape(%117, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %122 = reshape(%118, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %123 = reshape(%119, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %124 = reshape(%120, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %125 = @func_2090(%121, %122, %123, %124) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %126 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %127 = cast(%var_2744, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %128 = cast(%var_2745, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %129 = cast(%var_2745, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %130 = reshape(%127, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %131 = reshape(%128, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %132 = reshape(%129, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %133 = @func_1306(%130, %131, %132) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
  %134 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %135 = %125.1;
  %136 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %137 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %138 = %126.1;
  %139 = %133.4;
  (%134, %135, %var_2728, %136, %137, %138, %139, %var_2744, %var_2745)
}

def @func_2687() -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) {
  %140 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %141 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %143 = reshape(%142, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %144 = @func_637(%143) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %145 = cast(meta[relay.Constant][9] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %146 = %140.6;
  %147 = %141.1;
  %148 = %144.0;
  %149 = log10(%145) /* ty=Tensor[(1365), float32] */;
  (%146, %147, %148, %149)
}

def @func_5435() -> (Tensor[(10, 14, 2), float32],) {
  %150 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  (%150,)
}

def @func_2890(%var_2880: Tensor[(16, 9), float32]) -> (Tensor[(16, 9), float32],) {
  %151 = cast(%var_2880, dtype="float32") /* ty=Tensor[(16, 9), float32] */;
  %152 = atanh(%151) /* ty=Tensor[(16, 9), float32] */;
  (%152,)
}

def @func_6060() -> Tensor[(10, 14, 2), float32] {
  %153 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %153.0
}

def @func_1384(%var_1346: Tensor[(12, 5, 4), float64]) -> (Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
  %154 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
  %155 = cast(%154, dtype="bool") /* ty=Tensor[(12, 1, 4), bool] */;
  %156 = cast(%var_1346, dtype="bool") /* ty=Tensor[(12, 5, 4), bool] */;
  %157 = cast(%var_1346, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %158 = logical_and(%155, %156) /* ty=Tensor[(12, 5, 4), bool] */;
  %159 = log2(%157) /* ty=Tensor[(12, 5, 4), float32] */;
  (%158, %159)
}

def @func_7715() -> (Tensor[(10, 14, 2), float64], Tensor[(5, 15, 2), float32]) {
  %160 = @func_5605() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %163 = @func_6549() /* ty=Tensor[(10, 14, 2), float64] */;
  %164 = log(%162) /* ty=Tensor[(5, 15, 2), float32] */;
  (%163, %164)
}

def @func_960() -> Tensor[(10, 14, 2), float64] {
  %165 = @func_740() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %166 = %165.4;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  asinh(%167) /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_1473() -> Tensor[(10, 14, 2), float32] {
  %168 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %168.0
}

def @func_4415() -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) {
  %169 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %170 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
  %171 = %169.0;
  %172 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %173 = %170.1;
  (%171, %172, %173)
}

def @func_2328() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %174 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  %175 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  (%174, %175)
}

def @func_707() -> Tensor[(10, 14, 2), float32] {
  @func_584() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_3933(%var_3859: Tensor[(12, 12, 4), float64]) -> (Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) {
  %176 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(12, 1, 4), float64] */;
  %179 = cast(%var_3859, dtype="float64") /* ty=Tensor[(12, 12, 4), float64] */;
  %180 = @func_1677() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %182 = reshape(%181, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %183 = @func_2506(%182) /* ty=(Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) */;
  %184 = floor_mod(%178, %179) /* ty=Tensor[(12, 12, 4), float64] */;
  %185 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  %186 = %180.1;
  %187 = %183.3;
  (%184, %185, %186, %187, meta[relay.Constant][10] /* ty=Tensor[(600), uint8] */)
}

def @func_3008() -> (Tensor[(10, 14, 2), float64],) {
  %188 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %190 = acosh(%189) /* ty=Tensor[(10, 14, 2), float64] */;
  (%190,)
}

def @func_5687(%var_5665: Tensor[(12, 11, 4), float64]) -> (Tensor[(12, 11, 4), float64],) {
  %191 = cast(%var_5665, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
  %192 = atanh(%191) /* ty=Tensor[(12, 11, 4), float64] */;
  (%192,)
}

def @func_5800() -> (Tensor[(10, 14, 2), float32],) {
  %193 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  (%193,)
}

def @func_6961() -> (Tensor[(10, 14, 2), float32],) {
  %194 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %195 = %194.0;
  (%195,)
}

def @func_7580(%var_7532: Tensor[(360, 4), int32], %var_7548: Tensor[(1365), float32], %var_7556: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(360, 4), int32], Tensor[(270, 4), float32], Tensor[(1365), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float64]) {
  %196 = @func_5435() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %197 = cast(%var_7532, dtype="int32") /* ty=Tensor[(360, 4), int32] */;
  %198 = cast(%var_7532, dtype="int32") /* ty=Tensor[(360, 4), int32] */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(270, 4), float32] */, dtype="float32") /* ty=Tensor[(270, 4), float32] */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %201 = reshape(%197, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %202 = reshape(%198, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %203 = reshape(%199, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %204 = reshape(%200, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %205 = @func_5298(%201, %202, %203, %204) /* ty=(Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) */;
  %206 = cast(%var_7548, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %207 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(1365), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(1365), float32] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?), bool] */;
  %210 = cast(%var_7556, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %211 = cast(%var_7556, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %212 = reshape(%210, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %213 = reshape(%211, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %214 = @func_3376(%212, %213) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %215 = %196.0;
  %216 = %205.0;
  %217 = less_equal(%208, %209) /* ty=Tensor[(1365), bool] */;
  %218 = %214.4;
  %219 = @func_4848() /* ty=Tensor[(10, 14, 2), float64] */;
  (%215, %216, %var_7532, meta[relay.Constant][11] /* ty=Tensor[(270, 4), float32] */, %217, %218, %var_7556, %219)
}

def @func_7946(%var_7930: Tensor[(600), uint8]) -> (Tensor[(6, 11, 11), float64], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 11), float64] */;
  %221 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %222 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %223 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %224 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %225 = reshape(%221, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %226 = reshape(%222, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %227 = reshape(%223, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %228 = reshape(%224, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %229 = @func_2090(%225, %226, %227, %228) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %230 = cos(%220) /* ty=Tensor[(6, 11, 11), float64] */;
  %231 = %229.1;
  (%230, %231, %var_7930)
}

def @func_5631(%var_5617: Tensor[(600), uint8], %var_5619: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
  %232 = cast(%var_5617, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %233 = cast(meta[relay.Constant][14] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %234 = cast(%var_5619, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %235 = reshape(%232, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %236 = reshape(%233, newshape=[660, 1]) /* ty=Tensor[(660, 1), float64] */;
  %237 = reshape(%234, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %238 = @func_2749(%235, %236, %237) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) */;
  %239 = @func_5502() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %240 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %241 = @func_5517() /* ty=Tensor[(10, 14, 2), float32] */;
  %242 = %238.0;
  %243 = %239.0;
  %244 = %240.7;
  (%241, %242, %var_5617, meta[relay.Constant][14] /* ty=Tensor[(660), float64] */, %var_5619, %243, %244)
}

def @func_7375() -> (Tensor[(10, 14, 2), float32],) {
  %245 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %246 = %245.0;
  (%246,)
}

def @func_6696() -> (Tensor[(10, 14, 2), float32],) {
  %247 = @func_5800() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %248 = %247.0;
  (%248,)
}

def @func_7153() -> Tensor[(10, 14, 2), float32] {
  %249 = @func_6961() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %249.0
}

def @func_3376(%var_3339: Tensor[(8, 14, 14), int64], %var_3340: Tensor[(8, 14, 14), int64]) -> (Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %250 = cast(%var_3340, dtype="int64") /* ty=Tensor[(8, 14, 14), int64] */;
  %251 = shape_of(%var_3339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_3339, dtype="int64") /* ty=Tensor[(8, 14, 14), int64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %254 = left_shift(%252, %253) /* ty=Tensor[(8, 14, 14), int64] */;
  %255 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %256 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %257 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %258 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  (%254, %255, %256, %257, %258)
}

def @func_3510(%var_3492: Tensor[(600), uint8], %var_3503: Tensor[(10, 14, 2), float32]) -> (Tensor[(1365), float32], Tensor[(600), uint8], Tensor[(600), uint8], Tensor[(10, 14, 2), bool]) {
  %259 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %260 = cast(%var_3492, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %261 = reshape(%260, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %262 = @func_3089(%261) /* ty=(Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
  %263 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %264 = cast(%var_3503, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = %259.3;
  %269 = %262.2;
  %270 = equal(%266, %267) /* ty=Tensor[(10, 14, 2), bool] */;
  (%268, %269, %var_3492, %270)
}

def @func_4816(%var_4788: Tensor[(660), float64], %var_4789: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
  %271 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %272 = cast(%var_4788, dtype="float64") /* ty=Tensor[(660), float64] */;
  %273 = cast(%var_4789, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %274 = cast(%var_4789, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %275 = reshape(%272, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %276 = reshape(%273, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %277 = reshape(%274, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %278 = @func_1306(%275, %276, %277) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
  %279 = %271.1;
  %280 = %278.1;
  (%279, %280, %var_4788, %var_4789)
}

def @func_4258() -> (Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) {
  %281 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1365), float32] */, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
  %282 = reshape(%281, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %283 = @func_637(%282) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %284 = cast(meta[relay.Constant][16] /* ty=Tensor[(392, 4), int64] */, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %285 = cast(meta[relay.Constant][16] /* ty=Tensor[(392, 4), int64] */, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %286 = reshape(%284, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %287 = reshape(%285, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
  %288 = @func_3376(%286, %287) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %289 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %292 = %283.0;
  %293 = %288.2;
  %294 = log(%291) /* ty=Tensor[(10, 14, 2), float64] */;
  (%292, meta[relay.Constant][15] /* ty=Tensor[(1, 1365), float32] */, %293, meta[relay.Constant][16] /* ty=Tensor[(392, 4), int64] */, %294)
}

def @func_6409() -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) {
  %295 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %296 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %299 = %295.1;
  %300 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
  %301 = cosh(%298) /* ty=Tensor[(12, 5, 4), float32] */;
  (%299, %300, %301)
}

def @func_5363() -> (Tensor[(10, 14, 2), float32],) {
  %302 = @func_4703() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
  %303 = %302.0;
  (%303,)
}

def @func_7491(%var_7475: Tensor[(9, 11, 4), float32], %var_7484: Tensor[(1365), float32]) -> (Tensor[(9, 11, 4), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %304 = cast(%var_7475, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  %305 = cast(%var_7484, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %306 = reshape(%305, newshape=[1365, 1]) /* ty=Tensor[(1365, 1), float32] */;
  %307 = @func_920(%306) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) */;
  %308 = log2(%304) /* ty=Tensor[(9, 11, 4), float32] */;
  %309 = %307.3;
  (%308, %309, %var_7484)
}

def @func_7322() -> (Tensor[(1568), int64],) {
  %310 = @func_5486() /* ty=Tensor[(1568), int64] */;
  (%310,)
}

def @func_3822() -> (Tensor[(15, 7, 9), float64], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
  %311 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
  %312 = asinh(%311) /* ty=Tensor[(15, 7, 9), float32] */;
  %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(15, 7, 9), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(15, 7, 9), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = logical_or(%315, %316) /* ty=Tensor[(15, 7, 9), bool] */;
  %318 = cast(%312, dtype="float64") /* ty=Tensor[(15, 7, 9), float64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float64") /* ty=Tensor[(15, 7, 9), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(meta[relay.Constant][18] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %323 = reshape(%322, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float32] */;
  %324 = @func_2551(%323) /* ty=(Tensor[(11, 11, 15), float32],) */;
  %325 = divide(%320, %321) /* ty=Tensor[(15, 7, 9), float64] */;
  %326 = %324.0;
  (%325, %326, meta[relay.Constant][18] /* ty=Tensor[(1815), float32] */)
}

def @func_8056() -> (Tensor[(10, 14, 2), float32],) {
  %327 = @func_6060() /* ty=Tensor[(10, 14, 2), float32] */;
  (%327,)
}

def @func_1677() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %329 = reshape(%328, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %330 = @func_74(%329) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %331 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %332 = %330.0;
  (%331, %332, meta[relay.Constant][19] /* ty=Tensor[(1365), float32] */)
}

def @func_1176(%var_1135: Tensor[(4, 12, 12), float32]) -> (Tensor[(4, 12, 12), uint64],) {
  %333 = cast(%var_1135, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %334 = sinh(%333) /* ty=Tensor[(4, 12, 12), float32] */;
  %335 = cast(%var_1135, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %339 = logical_xor(%337, %338) /* ty=Tensor[(4, 12, 12), uint8] */;
  %340 = cast(%339, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %341 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%334, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %344 = multiply(%342, %343) /* ty=Tensor[(4, 12, 12), uint64] */;
  (%344,)
}

def @func_3992(%var_3966: uint32, %var_3967: Tensor[(16, 3, 10), uint32]) -> (Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
  %345 = cast(%var_3966, dtype="uint32") /* ty=uint32 */;
  %346 = cast(%var_3967, dtype="uint32") /* ty=Tensor[(16, 3, 10), uint32] */;
  %347 = cast(meta[relay.Constant][20] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %348 = reshape(%347, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float32] */;
  %349 = @func_2551(%348) /* ty=(Tensor[(11, 11, 15), float32],) */;
  %350 = right_shift(%345, %346) /* ty=Tensor[(16, 3, 10), uint32] */;
  %351 = %349.0;
  (%350, %351, meta[relay.Constant][20] /* ty=Tensor[(1815), float32] */)
}

def @func_637(%var_627: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %352 = cast(%var_627, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %353 = reshape(%352, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %354 = @func_74(%353) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %355 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %356 = %354.0;
  (%355, %356, %var_627)
}

def @func_5528() -> Tensor[(10, 14, 2), float32] {
  %357 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %357.0
}

def @func_2782() -> (Tensor[(10, 14, 2), float64],) {
  %358 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %360 = asin(%359) /* ty=Tensor[(10, 14, 2), float64] */;
  (%360,)
}

def @func_7333() -> Tensor[(12, 1, 4), float64] {
  %361 = @func_6409() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) */;
  %361.1
}

def @func_7276() -> Tensor[(392, 4), float32] {
  %362 = @func_4258() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) */;
  %363 = %362.3;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(392, 4), float32] */;
  acosh(%364) /* ty=Tensor[(392, 4), float32] */
}

def @func_2191() -> (Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) {
  %365 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
  %366 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %367 = %365.1;
  %368 = %366.0;
  (%367, %368)
}

def @func_6853(%var_6822: Tensor[(1080), float32], %var_6823: Tensor[(7, 195), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(2, 720), int32], Tensor[(1080), float32], Tensor[(7, 195), float32]) {
  %369 = @func_6052() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %370 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 720), int32] */, dtype="int32") /* ty=Tensor[(2, 720), int32] */;
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 720), int32] */, dtype="int32") /* ty=Tensor[(2, 720), int32] */;
  %372 = cast(%var_6822, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %373 = cast(%var_6823, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %374 = reshape(%370, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %375 = reshape(%371, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %376 = reshape(%372, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %377 = reshape(%373, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %378 = @func_5298(%374, %375, %376, %377) /* ty=(Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) */;
  %379 = %369.1;
  %380 = %378.0;
  (%379, %380, meta[relay.Constant][21] /* ty=Tensor[(2, 720), int32] */, %var_6822, %var_6823)
}

def @func_74(%var_63: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), float32],) {
  %381 = cast(%var_63, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %382 = atan(%381) /* ty=Tensor[(15, 13, 7), float32] */;
  (%382,)
}

def @func_2840(%var_2832: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
  %383 = cast(%var_2832, dtype="float64") /* ty=Tensor[(8, 9, 2), float64] */;
  %384 = sinh(%383) /* ty=Tensor[(8, 9, 2), float64] */;
  (%384,)
}

def @func_6797() -> (Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) {
  %385 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 13), float32] */;
  %386 = cast(meta[relay.Constant][23] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %387 = reshape(%386, newshape=[10, 14, 2]) /* ty=Tensor[(10, 14, 2), float32] */;
  %388 = erf(%385) /* ty=Tensor[(7, 13), float32] */;
  %389 = @func_4205(%387) /* ty=Tensor[(10, 14, 2), bool] */;
  (%388, %389, meta[relay.Constant][23] /* ty=Tensor[(280), float32] */)
}

def @func_1088() -> (Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  %390 = cast(meta[relay.Constant][24] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %391 = reshape(%390, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %392 = @func_218(%391) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %393 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %395 = acos(%394) /* ty=Tensor[(10, 14, 2), float64] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %397 = cos(%396) /* ty=Tensor[(10, 14, 2), float64] */;
  %398 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(10, 14, 2), int32] */;
  %400 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%397, dtype="int32") /* ty=Tensor[(10, 14, 2), int32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %403 = cast(meta[relay.Constant][24] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %404 = reshape(%403, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %405 = @func_74(%404) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %406 = cast(%398, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %407 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%397, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = cast(meta[relay.Constant][24] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %411 = reshape(%410, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %412 = @func_637(%411) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %413 = cast(%393, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %414 = %392.0;
  %415 = logical_xor(%401, %402) /* ty=Tensor[(10, 14, 2), int32] */;
  %416 = %405.0;
  %417 = logical_and(%408, %409) /* ty=Tensor[(10, 14, 2), bool] */;
  %418 = %412.0;
  %419 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %420 = sinh(%413) /* ty=Tensor[(10, 14, 2), float64] */;
  %421 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%414, meta[relay.Constant][24] /* ty=Tensor[(1365), float32] */, %415, %416, %417, %418, %419, %420, %421)
}

def @func_3620(%var_3612: Tensor[(10, 14, 2), float32]) -> (Tensor[(10, 14, 2), int64],) {
  %422 = @func_1895() /* ty=Tensor[(10, 14, 2), float32] */;
  %423 = cast(%var_3612, dtype="int64") /* ty=Tensor[(10, 14, 2), int64] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="int64") /* ty=Tensor[(10, 14, 2), int64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %427 = right_shift(%425, %426) /* ty=Tensor[(10, 14, 2), int64] */;
  (%427,)
}

def @func_3089(%var_3076: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %428 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %429 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %430 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %431 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %432 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %433 = reshape(%429, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %434 = reshape(%430, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %435 = reshape(%431, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %436 = reshape(%432, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %437 = @func_2090(%433, %434, %435, %436) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %438 = %428.4;
  %439 = %437.1;
  (%438, %439, %var_3076)
}

def @func_7457() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %440 = @func_5363() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %441 = %440.0;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %443 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %444 = sin(%442) /* ty=Tensor[(10, 14, 2), float32] */;
  %445 = %443.0;
  (%444, %445)
}

def @func_4133() -> (Tensor[(12, 1, 4), float64],) {
  %446 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
  (%446,)
}

def @func_1211() -> Tensor[(12, 1, 4), float64] {
  %447 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %447.0
}

def @func_5298(%var_5184: Tensor[(15, 6, 16), int32], %var_5185: Tensor[(15, 6, 16), int32], %var_5192: Tensor[(1080), float32], %var_5272: Tensor[(1365), float32]) -> (Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) {
  %448 = cast(%var_5192, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %449 = cast(%var_5192, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %450 = cast(meta[relay.Constant][25] /* ty=Tensor[(288, 2), float64] */, dtype="float64") /* ty=Tensor[(288, 2), float64] */;
  %451 = reshape(%448, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
  %452 = reshape(%449, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
  %453 = reshape(%450, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %454 = @func_5170(%451, %452, %453) /* ty=(Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) */;
  %455 = cast(%var_5185, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
  %456 = shape_of(%var_5184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_5184, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %459 = subtract(%457, %458) /* ty=Tensor[(15, 6, 16), int32] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
  %461 = acosh(%460) /* ty=Tensor[(15, 6, 16), float32] */;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %463 = tan(%462) /* ty=Tensor[(15, 6, 16), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
  %465 = log10(%464) /* ty=Tensor[(15, 6, 16), float32] */;
  %466 = cast(%var_5184, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %470 = cast(%459, dtype="int8") /* ty=Tensor[(15, 6, 16), int8] */;
  %471 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%461, dtype="int8") /* ty=Tensor[(15, 6, 16), int8] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %474 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %475 = cast(%463, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %476 = cast(%var_5272, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %477 = reshape(%476, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %478 = @func_74(%477) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %479 = %454.1;
  %480 = bitwise_or(%468, %469) /* ty=Tensor[(15, 6, 16), int32] */;
  %481 = multiply(%472, %473) /* ty=Tensor[(15, 6, 16), int8] */;
  %482 = %474.0;
  %483 = asin(%475) /* ty=Tensor[(15, 6, 16), float64] */;
  %484 = %478.0;
  %485 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  (%479, %var_5192, meta[relay.Constant][25] /* ty=Tensor[(288, 2), float64] */, %480, %481, %482, %483, %484, %var_5272, %485)
}

def @func_1199() -> (Tensor[(10, 14, 2), float32],) {
  %486 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%486,)
}

def @func_4205(%var_4180: Tensor[(10, 14, 2), float32]) -> Tensor[(10, 14, 2), bool] {
  %487 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %488 = cast(%var_4180, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%490, %491) /* ty=Tensor[(10, 14, 2), bool] */
}

def @func_7857(%var_7854: Tensor[(2, 10, 1), float32]) -> Tensor[(2, 10, 1), float32] {
  %492 = cast(%var_7854, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
  exp(%492) /* ty=Tensor[(2, 10, 1), float32] */
}

def @func_1952() -> Tensor[(10, 14, 2), float32] {
  @func_707() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_2279() -> Tensor[(10, 14, 2), float32] {
  @func_1473() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_3630(%var_3627: Tensor[(3, 1, 12), float64]) -> Tensor[(3, 1, 12), float64] {
  %493 = cast(%var_3627, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  acos(%493) /* ty=Tensor[(3, 1, 12), float64] */
}

def @func_4703() -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %494 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %496 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %497 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %498 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %499 = reshape(%495, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %500 = reshape(%496, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %501 = reshape(%497, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %502 = reshape(%498, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %503 = @func_2090(%499, %500, %501, %502) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %504 = %494.0;
  %505 = %503.1;
  (%504, %505, meta[relay.Constant][26] /* ty=Tensor[(600), uint8] */)
}

def @func_5948() -> (Tensor[(1568), float64], uint32, Tensor[(480), uint32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(11, 11, 15), float64]) {
  %506 = @func_5486() /* ty=Tensor[(1568), int64] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %508 = @func_1677() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %509 = @func_4258() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) */;
  %510 = @func_4378() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %511 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %512 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %513 = reshape(%511, newshape=[]) /* ty=uint32 */;
  %514 = reshape(%512, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint32] */;
  %515 = @func_3992(%513, %514) /* ty=(Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */;
  %516 = %515.1;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %518 = sigmoid(%507) /* ty=Tensor[(1568), float64] */;
  %519 = %508.0;
  %520 = %509.0;
  %521 = %510.1;
  %522 = sqrt(%517) /* ty=Tensor[(11, 11, 15), float64] */;
  (%518, meta[relay.Constant][27] /* ty=uint32 */, meta[relay.Constant][28] /* ty=Tensor[(480), uint32] */, %519, %520, %521, %522)
}

def @func_7607() -> (Tensor[(12, 1, 4), float64],) {
  %523 = @func_7333() /* ty=Tensor[(12, 1, 4), float64] */;
  (%523,)
}

def @func_4485() -> Tensor[(10, 14, 2), int32] {
  %524 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %524.2
}

def @func_5081(%var_5044: Tensor[(6, 11, 13), float64], %var_5052: Tensor[(144), float32], %var_5075: Tensor[(6, 11, 13), float64]) -> (Tensor[(16, 9), float32], Tensor[(144), float32], Tensor[(8, 9, 2), float64], Tensor[(6, 11, 13), float32]) {
  %525 = cast(%var_5052, dtype="float32") /* ty=Tensor[(144), float32] */;
  %526 = reshape(%525, newshape=[16, 9]) /* ty=Tensor[(16, 9), float32] */;
  %527 = @func_2890(%526) /* ty=(Tensor[(16, 9), float32],) */;
  %528 = cast(%var_5052, dtype="float64") /* ty=Tensor[(144), float64] */;
  %529 = reshape(%528, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), float64] */;
  %530 = @func_2840(%529) /* ty=(Tensor[(8, 9, 2), float64],) */;
  %531 = cast(%var_5044, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %532 = log(%531) /* ty=Tensor[(6, 11, 13), float64] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %534 = sqrt(%533) /* ty=Tensor[(6, 11, 13), float64] */;
  %535 = cast(%var_5075, dtype="float32") /* ty=Tensor[(6, 11, 13), float32] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="float32") /* ty=Tensor[(6, 11, 13), float32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %539 = %527.0;
  %540 = %530.0;
  %541 = divide(%537, %538) /* ty=Tensor[(6, 11, 13), float32] */;
  (%539, %var_5052, %540, %541)
}

def @func_6549() -> Tensor[(10, 14, 2), float64] {
  @func_5567() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_4980(%var_4923: Tensor[(6, 28), uint32], %var_4925: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %542 = @func_3054() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %543 = cast(%var_4923, dtype="uint32") /* ty=Tensor[(6, 28), uint32] */;
  %544 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %545 = cast(%var_4925, dtype="float64") /* ty=Tensor[(660), float64] */;
  %546 = reshape(%543, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %547 = reshape(%544, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %548 = reshape(%545, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
  %549 = @func_2974(%546, %547, %548) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
  %550 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %551 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %552 = %542.0;
  %553 = %549.4;
  %554 = %550.0;
  %555 = %551.3;
  (%552, %553, %var_4923, meta[relay.Constant][29] /* ty=Tensor[(600), uint8] */, %var_4925, %554, %555)
}

def @func_4378() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %556 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %557 = %556.0;
  %558 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  (%557, %558)
}

def @func_5517() -> Tensor[(10, 14, 2), float32] {
  %559 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %559.5
}

def @func_8070() -> Tensor[(10, 14, 2), float32] {
  @func_6060() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_4600() -> Tensor[(240), float64] {
  %560 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %560.2
}

def @func_4320() -> (Tensor[(10, 14, 2), float64],) {
  %561 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  (%561,)
}

def @func_2141() -> (Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) {
  %562 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 1), float64] */;
  %563 = sin(%562) /* ty=Tensor[(14, 5, 1), float64] */;
  %564 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
  (%563, %564)
}

def @func_5567() -> Tensor[(10, 14, 2), float64] {
  %565 = @func_2782() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %565.0
}

def @func_6052() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %566 = @func_5800() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %567 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %568 = %566.0;
  %569 = %567.0;
  (%568, %569)
}

def @func_4848() -> Tensor[(10, 14, 2), float64] {
  %570 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %570.0
}

def @func_1524() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %571 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %572 = %571.0;
  %573 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  (%572, %573)
}

def @func_2974(%var_2904: Tensor[(168), uint32], %var_2911: Tensor[(600), uint8], %var_2921: Tensor[(10, 66), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) {
  %574 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %575 = cast(%var_2904, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %576 = cast(%var_2904, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %577 = cast(%var_2904, dtype="float64") /* ty=Tensor[(168), float64] */;
  %578 = reshape(%575, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint32] */;
  %579 = reshape(%576, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint32] */;
  %580 = reshape(%577, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), float64] */;
  %581 = @func_1641(%578, %579, %580) /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) */;
  %582 = @func_2191() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) */;
  %583 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %584 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %585 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %586 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %587 = reshape(%583, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %588 = reshape(%584, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %589 = reshape(%585, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %590 = reshape(%586, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %591 = @func_2090(%587, %588, %589, %590) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %592 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %593 = cast(%var_2921, dtype="float64") /* ty=Tensor[(10, 66), float64] */;
  %594 = cast(meta[relay.Constant][31] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %595 = cast(meta[relay.Constant][31] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %596 = reshape(%593, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %597 = reshape(%594, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %598 = reshape(%595, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %599 = @func_1306(%596, %597, %598) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
  %600 = %599.1;
  %601 = cast(meta[relay.Constant][31] /* ty=Tensor[(1365), float32] */, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="int16") /* ty=Tensor[(15, 13, 7), int16] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %605 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %606 = %574.3;
  %607 = %581.0;
  %608 = %582.0;
  %609 = %591.0;
  %610 = %592.0;
  %611 = multiply(%603, %604) /* ty=Tensor[(15, 13, 7), int16] */;
  %612 = %605.0;
  (%606, %607, %var_2904, %608, %609, %var_2911, %610, %var_2921, %611, %612)
}

def @main() -> (Tensor[(1568), float32],) {
  %613 = @func_5486() /* ty=Tensor[(1568), int64] */;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %615 = log2(%614) /* ty=Tensor[(1568), float32] */;
  %616 = cast(%613, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(1), int32] */;
  %618 = cast(%615, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?), float32] */;
  %620 = minimum(%618, %619) /* ty=Tensor[(1568), float32] */;
  (%620,)
}

def @func_1306(%var_1233: Tensor[(10, 6, 11), float64], %var_1247: Tensor[(1365), float32], %var_1266: Tensor[(15, 13, 7), float32]) -> (Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) {
  %621 = cast(%var_1247, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %622 = reshape(%621, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %623 = @func_218(%622) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %624 = cast(%var_1247, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %625 = reshape(%624, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %626 = @func_74(%625) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %627 = %626.0;
  %628 = cast(%var_1266, dtype="int32") /* ty=Tensor[(15, 13, 7), int32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="int32") /* ty=Tensor[(15, 13, 7), int32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %632 = cast(%var_1233, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %633 = acos(%632) /* ty=Tensor[(10, 6, 11), float64] */;
  %634 = cast(%var_1233, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = %623.1;
  %639 = logical_xor(%630, %631) /* ty=Tensor[(15, 13, 7), int32] */;
  %640 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %641 = divide(%636, %637) /* ty=Tensor[(10, 6, 11), float64] */;
  (%var_1247, %638, %639, %640, %641)
}

def @func_2090(%var_2029: Tensor[(5, 10, 12), uint8], %var_2030: Tensor[(5, 10, 12), uint8], %var_2034: Tensor[(5, 10, 12), uint8], %var_2076: Tensor[(5, 10, 12), uint8]) -> (Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) {
  %642 = cast(%var_2030, dtype="uint8") /* ty=Tensor[(5, 10, 12), uint8] */;
  %643 = shape_of(%var_2029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_2029, dtype="uint8") /* ty=Tensor[(5, 10, 12), uint8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %646 = bitwise_xor(%644, %645) /* ty=Tensor[(5, 10, 12), uint8] */;
  %647 = cast(%var_2034, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %651 = cast(%646, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %652 = acos(%651) /* ty=Tensor[(5, 10, 12), float32] */;
  %653 = cast(%var_2029, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %657 = cast(%var_2076, dtype="float64") /* ty=Tensor[(5, 10, 12), float64] */;
  %658 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%646, dtype="float64") /* ty=Tensor[(5, 10, 12), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %661 = divide(%649, %650) /* ty=Tensor[(5, 10, 12), float32] */;
  %662 = less(%655, %656) /* ty=Tensor[(5, 10, 12), bool] */;
  %663 = subtract(%659, %660) /* ty=Tensor[(5, 10, 12), float64] */;
  (%661, %662, %663)
}

def @func_1913() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %664 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %665 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%664, %665)
}

def @func_584() -> Tensor[(10, 14, 2), float32] {
  %666 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %667 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 14, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%668, %669) /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_2506(%var_2500: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) {
  %670 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %671 = %670.1;
  %672 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 14, 2), float64] */, dtype="int8") /* ty=Tensor[(10, 14, 2), int8] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="int8") /* ty=Tensor[(10, 14, 2), int8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %676 = cast(%671, dtype="uint64") /* ty=Tensor[(10, 14, 2), uint64] */;
  %677 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 14, 2), float64] */, dtype="uint64") /* ty=Tensor[(10, 14, 2), uint64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %680 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %681 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %682 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %683 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %684 = reshape(%680, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %685 = reshape(%681, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %686 = reshape(%682, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %687 = reshape(%683, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %688 = @func_2090(%684, %685, %686, %687) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %689 = multiply(%674, %675) /* ty=Tensor[(10, 14, 2), int8] */;
  %690 = subtract(%678, %679) /* ty=Tensor[(10, 14, 2), uint64] */;
  %691 = %688.2;
  (%689, %690, %691, %var_2500)
}

def @func_5662() -> (Tensor[(10, 14, 2), float32], Tensor[(240), float64]) {
  %692 = @func_1895() /* ty=Tensor[(10, 14, 2), float32] */;
  %693 = @func_4600() /* ty=Tensor[(240), float64] */;
  (%692, %693)
}

def @func_4142() -> (Tensor[(10, 14, 2), float32],) {
  %694 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %695 = %694.0;
  (%695,)
}

def @func_5731() -> Tensor[(10, 14, 2), float32] {
  %696 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %696.0
}

def @func_3695(%var_3690: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
  %697 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %698 = cast(meta[relay.Constant][35] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %699 = cast(meta[relay.Constant][36] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %700 = cast(%var_3690, dtype="float64") /* ty=Tensor[(660), float64] */;
  %701 = reshape(%698, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %702 = reshape(%699, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %703 = reshape(%700, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
  %704 = @func_2974(%701, %702, %703) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
  %705 = %697.0;
  %706 = %704.6;
  (%705, %706, meta[relay.Constant][35] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][36] /* ty=Tensor[(600), uint8] */, %var_3690)
}

def @func_6302() -> Tensor[(10, 14, 2), float32] {
  %707 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %707.0
}

def @func_5997(%var_5975: Tensor[(168), uint32], %var_5988: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) {
  %708 = cast(%var_5975, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %709 = cast(meta[relay.Constant][37] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %710 = reshape(%708, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint32] */;
  %711 = reshape(%709, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %712 = @func_4980(%710, %711) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %713 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
  %714 = %713.0;
  %715 = cast(%var_5988, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %719 = %712.1;
  %720 = greater(%717, %718) /* ty=Tensor[(5, 15, 2), bool] */;
  (%719, %var_5975, meta[relay.Constant][37] /* ty=Tensor[(660), float64] */, %720)
}

def @func_5486() -> Tensor[(1568), int64] {
  %721 = @func_4584() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %721.2
}

def @func_6261(%var_6257: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  %722 = cast(%var_6257, dtype="float32") /* ty=Tensor[(9, 10, 6), float32] */;
  %723 = erf(%722) /* ty=Tensor[(9, 10, 6), float32] */;
  (%723,)
}

def @func_1444() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
  %724 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %725 = %724.0;
  %726 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  (%725, %726)
}

def @func_6770() -> Tensor[(10, 14, 2), float32] {
  %727 = @func_5502() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %727.2
}

def @func_7869(%var_7862: Tensor[(7, 13, 6), float64]) -> Tensor[(7, 13, 6), float64] {
  %728 = cast(%var_7862, dtype="float64") /* ty=Tensor[(7, 13, 6), float64] */;
  sinh(%728) /* ty=Tensor[(7, 13, 6), float64] */
}

def @func_2551(%var_2546: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32],) {
  %729 = cast(%var_2546, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
  %730 = acos(%729) /* ty=Tensor[(11, 11, 15), float32] */;
  (%730,)
}

def @func_7258(%var_7252: Tensor[(1365), float32], %var_7256: Tensor[(936), bool]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(6, 12, 13), bool], Tensor[(936), bool]) {
  %731 = cast(%var_7252, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %732 = reshape(%731, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %733 = @func_74(%732) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %734 = cast(%var_7256, dtype="bool") /* ty=Tensor[(936), bool] */;
  %735 = cast(%var_7256, dtype="bool") /* ty=Tensor[(936), bool] */;
  %736 = reshape(%734, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), bool] */;
  %737 = reshape(%735, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), bool] */;
  %738 = @func_3462(%736, %737) /* ty=(Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) */;
  %739 = @func_6060() /* ty=Tensor[(10, 14, 2), float32] */;
  %740 = %733.0;
  %741 = %738.0;
  (%739, %740, %var_7252, %741, %var_7256)
}

def @func_3290() -> Tensor[(10, 14, 2), float64] {
  %742 = @func_2328() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  log2(%744) /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_6510(%var_6484: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 14, 2), float32]) {
  %745 = cast(%var_6484, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %746 = rsqrt(%745) /* ty=Tensor[(7, 15, 16), float32] */;
  %747 = cast(%var_6484, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %751 = bitwise_or(%749, %750) /* ty=Tensor[(7, 15, 16), uint16] */;
  %752 = cast(%751, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %753 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%746, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %757 = greater(%754, %755) /* ty=Tensor[(7, 15, 16), bool] */;
  %758 = %756.0;
  (%757, %758)
}

def @func_7220(%var_7212: Tensor[(16, 8, 5), bool], %var_7213: Tensor[(16, 8, 5), bool]) -> Tensor[(16, 8, 5), bool] {
  %759 = cast(%var_7213, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %760 = shape_of(%var_7212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%var_7212, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%761, %762) /* ty=Tensor[(16, 8, 5), bool] */
}

def @func_6676() -> Tensor[(10, 14, 2), float32] {
  %763 = @func_2328() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %763.1
}

def @func_3054() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %764 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %765 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %766 = %764.1;
  %767 = %765.1;
  (%766, %767)
}

def @func_3583(%var_3556: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 15, 2), uint16], Tensor[(5, 15, 2), float32]) {
  %768 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
  %769 = %768.0;
  %770 = cast(%var_3556, dtype="uint16") /* ty=Tensor[(5, 15, 2), uint16] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="uint16") /* ty=Tensor[(5, 15, 2), uint16] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %774 = cast(%var_3556, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %775 = bitwise_and(%772, %773) /* ty=Tensor[(5, 15, 2), uint16] */;
  %776 = exp(%774) /* ty=Tensor[(5, 15, 2), float32] */;
  (%775, %776)
}

def @func_6572() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %777 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %778 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %779 = %777.1;
  %780 = %778.0;
  (%779, %780)
}

def @func_6935() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %781 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %782 = @func_6355() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %783 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %784 = %781.8;
  %785 = %782.0;
  (%783, %784, %785)
}

def @func_2452() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %786 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %787 = cast(%786, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %788 = exp(%787) /* ty=Tensor[(10, 14, 2), float64] */;
  %789 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  %790 = cast(%789, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %791 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%788, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = greater_equal(%792, %793) /* ty=Tensor[(10, 14, 2), bool] */;
  %795 = cast(%788, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %799 = floor_divide(%797, %798) /* ty=Tensor[(10, 14, 2), float32] */;
  %800 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  (%799, %800)
}

def @func_3228(%var_3177: int64, %var_3178: Tensor[(16, 5, 7), int64], %var_3198: Tensor[(1365), float32]) -> (Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(16, 5, 7), uint16], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %801 = cast(%var_3198, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %802 = reshape(%801, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %803 = @func_74(%802) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %804 = cast(%var_3177, dtype="bool") /* ty=bool */;
  %805 = cast(%var_3178, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %806 = less_equal(%804, %805) /* ty=Tensor[(16, 5, 7), bool] */;
  %807 = cast(%var_3178, dtype="uint64") /* ty=Tensor[(16, 5, 7), uint64] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="uint64") /* ty=Tensor[(16, 5, 7), uint64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %811 = minimum(%809, %810) /* ty=Tensor[(16, 5, 7), uint64] */;
  %812 = cast(%var_3178, dtype="uint16") /* ty=Tensor[(16, 5, 7), uint16] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%811, dtype="uint16") /* ty=Tensor[(16, 5, 7), uint16] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %816 = %803.0;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %818 = reshape(%817, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %819 = @func_637(%818) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %820 = maximum(%814, %815) /* ty=Tensor[(16, 5, 7), uint16] */;
  %821 = %819.0;
  %822 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  (%816, %var_3198, %820, %821, %822)
}

def @func_3525() -> (Tensor[(5, 15, 2), float32],) {
  %823 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %824 = acosh(%823) /* ty=Tensor[(5, 15, 2), float32] */;
  (%824,)
}

def @func_5605() -> (Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) {
  %825 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
  %826 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %827 = cast(meta[relay.Constant][40] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %828 = reshape(%826, newshape=[]) /* ty=uint32 */;
  %829 = reshape(%827, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint32] */;
  %830 = @func_3992(%828, %829) /* ty=(Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */;
  %831 = %825.0;
  %832 = %830.1;
  (%831, %832, meta[relay.Constant][39] /* ty=uint32 */, meta[relay.Constant][40] /* ty=Tensor[(480), uint32] */)
}

def @func_7771(%var_7745: Tensor[(150), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(660), float64], Tensor[(168), uint32], Tensor[(150), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32]) {
  %833 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %834 = cast(meta[relay.Constant][41] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %835 = cast(%var_7745, dtype="float32") /* ty=Tensor[(150), float32] */;
  %836 = reshape(%834, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %837 = reshape(%835, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float32] */;
  %838 = @func_5997(%836, %837) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) */;
  %839 = @func_6797() /* ty=(Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) */;
  %840 = @func_7375() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %841 = %833.0;
  %842 = %838.2;
  %843 = %839.1;
  %844 = %840.0;
  (%841, %842, meta[relay.Constant][41] /* ty=Tensor[(168), uint32] */, %var_7745, %843, %844)
}

def @func_1641(%var_1591: Tensor[(8, 7, 3), uint32], %var_1592: Tensor[(8, 7, 3), uint32], %var_1637: Tensor[(8, 7, 3), float64]) -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) {
  %845 = cast(%var_1592, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %846 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_1591, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %849 = cast(%var_1592, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %850 = exp(%849) /* ty=Tensor[(8, 7, 3), float64] */;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
  %852 = cast(%850, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  %853 = acos(%852) /* ty=Tensor[(8, 7, 3), float64] */;
  %854 = cast(%var_1637, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = not_equal(%847, %848) /* ty=Tensor[(8, 7, 3), bool] */;
  %859 = log2(%851) /* ty=Tensor[(8, 7, 3), float32] */;
  %860 = less_equal(%856, %857) /* ty=Tensor[(8, 7, 3), bool] */;
  (%858, %859, %860)
}

def @func_7110() -> Tensor[(10, 14, 2), float32] {
  %861 = @func_5363() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %861.0
}

def @func_2862() -> Tensor[(10, 14, 2), float32] {
  %862 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %862.0
}

def @func_3126() -> (Tensor[(10, 14, 2), float32],) {
  %863 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %864 = %863.8;
  (%864,)
}

def @func_5502() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %865 = @func_4703() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
  %866 = @func_1913() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %867 = %865.0;
  %868 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  %869 = %866.1;
  (%867, %868, %869)
}

def @func_1758() -> (Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %870 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %871 = cast(%870, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %872 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %873 = reshape(%872, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float64] */;
  %874 = @func_1384(%873) /* ty=(Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %875 = cosh(%871) /* ty=Tensor[(10, 14, 2), float64] */;
  %876 = %874.0;
  %877 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %878 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%875, %876, meta[relay.Constant][42] /* ty=Tensor[(240), float64] */, %877, %878)
}

def @func_6355() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %879 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %880 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %881 = %879.0;
  (%880, %881)
}

def @func_4584() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %882 = cast(meta[relay.Constant][43] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %883 = reshape(%882, newshape=[1568]) /* ty=Tensor[(1568), int64] */;
  %884 = @func_3779(%883) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) */;
  %885 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %886 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %887 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %889 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %890 = %884.0;
  %891 = %885.0;
  %892 = %886.1;
  %893 = rsqrt(%888) /* ty=Tensor[(10, 14, 2), float32] */;
  (%889, %890, meta[relay.Constant][43] /* ty=Tensor[(1568), int64] */, %891, %892, %893)
}

def @func_3462(%var_3454: Tensor[(6, 12, 13), bool], %var_3455: Tensor[(6, 12, 13), bool]) -> (Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) {
  %894 = cast(%var_3455, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %895 = shape_of(%var_3454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%var_3454, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %898 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %899 = logical_and(%896, %897) /* ty=Tensor[(6, 12, 13), bool] */;
  %900 = %898.1;
  (%899, %900)
}

def @func_2578() -> (Tensor[(10, 14, 2), float32],) {
  %901 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %902 = %901.1;
  (%902,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2328() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %0 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  %1 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  (%0, %1)
}

def @func_6261(%var_6257: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  %2 = cast(%var_6257, dtype="float32") /* ty=Tensor[(9, 10, 6), float32] */;
  %3 = erf(%2) /* ty=Tensor[(9, 10, 6), float32] */;
  (%3,)
}

def @func_7946(%var_7930: Tensor[(600), uint8]) -> (Tensor[(6, 11, 11), float64], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 11), float64] */;
  %5 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %6 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %7 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %8 = cast(%var_7930, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %9 = reshape(%5, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %10 = reshape(%6, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %11 = reshape(%7, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %12 = reshape(%8, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %13 = @func_2090(%9, %10, %11, %12) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %14 = cos(%4) /* ty=Tensor[(6, 11, 11), float64] */;
  %15 = %13.1;
  (%14, %15, %var_7930)
}

def @func_3622(%var_3621: Tensor[(10, 14, 2), float32]) -> (Tensor[(10, 14, 2), int64],) {
  %22 = fn (%var_3612: Tensor[(10, 14, 2), float32]) -> (Tensor[(10, 14, 2), int64],) {
    %16 = @func_1895() /* ty=Tensor[(10, 14, 2), float32] */;
    %17 = cast(%var_3612, dtype="int64") /* ty=Tensor[(10, 14, 2), int64] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="int64") /* ty=Tensor[(10, 14, 2), int64] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %21 = right_shift(%19, %20) /* ty=Tensor[(10, 14, 2), int64] */;
    (%21,)
  };
  %22(%var_3621) /* ty=(Tensor[(10, 14, 2), int64],) */
}

def @func_2506(%var_2500: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) {
  %23 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %24 = %23.1;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 14, 2), float64] */, dtype="int8") /* ty=Tensor[(10, 14, 2), int8] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="int8") /* ty=Tensor[(10, 14, 2), int8] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %29 = cast(%24, dtype="uint64") /* ty=Tensor[(10, 14, 2), uint64] */;
  %30 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(10, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 14, 2), float64] */, dtype="uint64") /* ty=Tensor[(10, 14, 2), uint64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %33 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %34 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %35 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %36 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %37 = reshape(%33, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %38 = reshape(%34, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %39 = reshape(%35, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %40 = reshape(%36, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %41 = @func_2090(%37, %38, %39, %40) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %42 = multiply(%27, %28) /* ty=Tensor[(10, 14, 2), int8] */;
  %43 = subtract(%31, %32) /* ty=Tensor[(10, 14, 2), uint64] */;
  %44 = %41.2;
  (%42, %43, %44, %var_2500)
}

def @func_3445(%var_3444: Tensor[(455, 3), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32], Tensor[(455, 3), float32], Tensor[(10, 14, 2), float32]) {
  %55 = fn (%var_3429: Tensor[(455, 3), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32], Tensor[(455, 3), float32], Tensor[(10, 14, 2), float32]) {
    %45 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %46 = @func_3054() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %47 = cast(%var_3429, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
    %48 = reshape(%47, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %49 = @func_218(%48) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
    %50 = @func_2191() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) */;
    %51 = %45.0;
    %52 = %46.0;
    %53 = %49.2;
    %54 = %50.1;
    (%51, %52, %53, %var_3429, %54)
  };
  %55(%var_3444) /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32], Tensor[(455, 3), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_2143() -> (Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) {
  @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */
}

def @func_4378() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %56 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %57 = %56.0;
  %58 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  (%57, %58)
}

def @func_5690(%var_5688: Tensor[(12, 11, 4), float64]) -> (Tensor[(12, 11, 4), float64],) {
  @func_5687(%var_5688) /* ty=(Tensor[(12, 11, 4), float64],) */
}

def @func_5802() -> (Tensor[(10, 14, 2), float32],) {
  @func_5800() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_5949() -> (Tensor[(1568), float64], uint32, Tensor[(480), uint32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(11, 11, 15), float64]) {
  %76 = fn () -> (Tensor[(1568), float64], uint32, Tensor[(480), uint32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(11, 11, 15), float64]) {
    %59 = @func_5486() /* ty=Tensor[(1568), int64] */;
    %60 = cast(%59, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %61 = @func_1677() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
    %62 = @func_4258() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) */;
    %63 = @func_4378() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %64 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %66 = reshape(%64, newshape=[]) /* ty=uint32 */;
    %67 = reshape(%65, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint32] */;
    %68 = @func_3992(%66, %67) /* ty=(Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */;
    %69 = %68.1;
    %70 = cast(%69, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
    %71 = sigmoid(%60) /* ty=Tensor[(1568), float64] */;
    %72 = %61.0;
    %73 = %62.0;
    %74 = %63.1;
    %75 = sqrt(%70) /* ty=Tensor[(11, 11, 15), float64] */;
    (%71, meta[relay.Constant][2] /* ty=uint32 */, meta[relay.Constant][3] /* ty=Tensor[(480), uint32] */, %72, %73, %74, %75)
  };
  %76() /* ty=(Tensor[(1568), float64], uint32, Tensor[(480), uint32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(11, 11, 15), float64]) */
}

def @func_7155() -> Tensor[(10, 14, 2), float32] {
  @func_7153() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_6770() -> Tensor[(10, 14, 2), float32] {
  %77 = @func_5502() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %77.2
}

def @func_3510(%var_3492: Tensor[(600), uint8], %var_3503: Tensor[(10, 14, 2), float32]) -> (Tensor[(1365), float32], Tensor[(600), uint8], Tensor[(600), uint8], Tensor[(10, 14, 2), bool]) {
  %78 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %79 = cast(%var_3492, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %80 = reshape(%79, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %81 = @func_3089(%80) /* ty=(Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
  %82 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %83 = cast(%var_3503, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = %78.3;
  %88 = %81.2;
  %89 = equal(%85, %86) /* ty=Tensor[(10, 14, 2), bool] */;
  (%87, %88, %var_3492, %89)
}

def @func_4208(%var_4206: Tensor[(10, 14, 2), float32]) -> Tensor[(10, 14, 2), bool] {
  @func_4205(%var_4206) /* ty=Tensor[(10, 14, 2), bool] */
}

def @func_7277() -> Tensor[(392, 4), float32] {
  %93 = fn () -> Tensor[(392, 4), float32] {
    %90 = @func_4258() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) */;
    %91 = %90.3;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(392, 4), float32] */;
    acosh(%92) /* ty=Tensor[(392, 4), float32] */
  };
  %93() /* ty=Tensor[(392, 4), float32] */
}

def @func_6857(%var_6855: Tensor[(1080), float32], %var_6856: Tensor[(7, 195), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(2, 720), int32], Tensor[(1080), float32], Tensor[(7, 195), float32]) {
  @func_6853(%var_6855, %var_6856) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(2, 720), int32], Tensor[(1080), float32], Tensor[(7, 195), float32]) */
}

def @func_7334() -> Tensor[(12, 1, 4), float64] {
  %95 = fn () -> Tensor[(12, 1, 4), float64] {
    %94 = @func_6409() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) */;
    %94.1
  };
  %95() /* ty=Tensor[(12, 1, 4), float64] */
}

def @func_8071() -> Tensor[(10, 14, 2), float32] {
  %96 = fn () -> Tensor[(10, 14, 2), float32] {
    @func_6060() /* ty=Tensor[(10, 14, 2), float32] */
  };
  %96() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_2579() -> (Tensor[(10, 14, 2), float32],) {
  %99 = fn () -> (Tensor[(10, 14, 2), float32],) {
    %97 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %98 = %97.1;
    (%98,)
  };
  %99() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_2890(%var_2880: Tensor[(16, 9), float32]) -> (Tensor[(16, 9), float32],) {
  %100 = cast(%var_2880, dtype="float32") /* ty=Tensor[(16, 9), float32] */;
  %101 = atanh(%100) /* ty=Tensor[(16, 9), float32] */;
  (%101,)
}

def @func_1526() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_3055() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %106 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %102 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %103 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %104 = %102.1;
    %105 = %103.1;
    (%104, %105)
  };
  %106() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_1386(%var_1385: Tensor[(12, 5, 4), float64]) -> (Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
  %113 = fn (%var_1346: Tensor[(12, 5, 4), float64]) -> (Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
    %107 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
    %108 = cast(%107, dtype="bool") /* ty=Tensor[(12, 1, 4), bool] */;
    %109 = cast(%var_1346, dtype="bool") /* ty=Tensor[(12, 5, 4), bool] */;
    %110 = cast(%var_1346, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
    %111 = logical_and(%108, %109) /* ty=Tensor[(12, 5, 4), bool] */;
    %112 = log2(%110) /* ty=Tensor[(12, 5, 4), float32] */;
    (%111, %112)
  };
  %113(%var_1385) /* ty=(Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) */
}

def @func_5175(%var_5172: Tensor[(9, 12, 10), float32], %var_5173: Tensor[(9, 12, 10), float32], %var_5174: Tensor[(576), float64]) -> (Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) {
  @func_5170(%var_5172, %var_5173, %var_5174) /* ty=(Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) */
}

def @func_4259() -> (Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) {
  %128 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) {
    %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1365), float32] */, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
    %115 = reshape(%114, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %116 = @func_637(%115) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
    %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(392, 4), int64] */, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
    %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(392, 4), int64] */, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
    %119 = reshape(%117, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %120 = reshape(%118, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %121 = @func_3376(%119, %120) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %122 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %123 = %122.0;
    %124 = cast(%123, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %125 = %116.0;
    %126 = %121.2;
    %127 = log(%124) /* ty=Tensor[(10, 14, 2), float64] */;
    (%125, meta[relay.Constant][4] /* ty=Tensor[(1, 1365), float32] */, %126, meta[relay.Constant][5] /* ty=Tensor[(392, 4), int64] */, %127)
  };
  %128() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(1, 1365), float32], Tensor[(10, 14, 2), float32], Tensor[(392, 4), int64], Tensor[(10, 14, 2), float64]) */
}

def @func_5170(%var_5095: Tensor[(9, 12, 10), float32], %var_5121: Tensor[(9, 12, 10), float32], %var_5161: Tensor[(576), float64]) -> (Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) {
  %129 = cast(%var_5095, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %130 = cosh(%129) /* ty=Tensor[(9, 12, 10), float32] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %132 = log10(%131) /* ty=Tensor[(9, 12, 10), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %134 = cast(%var_5121, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %135 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%132, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%132, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %139 = cast(%var_5161, dtype="float64") /* ty=Tensor[(576), float64] */;
  %140 = reshape(%139, newshape=[12, 12, 4]) /* ty=Tensor[(12, 12, 4), float64] */;
  %141 = @func_3933(%140) /* ty=(Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) */;
  %142 = @func_4378() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %143 = tan(%133) /* ty=Tensor[(9, 12, 10), float32] */;
  %144 = not_equal(%136, %137) /* ty=Tensor[(9, 12, 10), bool] */;
  %145 = rsqrt(%138) /* ty=Tensor[(9, 12, 10), float32] */;
  %146 = %141.2;
  %147 = %142.1;
  (%143, %144, %145, %146, %var_5161, %147)
}

def @func_4584() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %148 = cast(meta[relay.Constant][6] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %149 = reshape(%148, newshape=[1568]) /* ty=Tensor[(1568), int64] */;
  %150 = @func_3779(%149) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) */;
  %151 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %152 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %153 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %155 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %156 = %150.0;
  %157 = %151.0;
  %158 = %152.1;
  %159 = rsqrt(%154) /* ty=Tensor[(10, 14, 2), float32] */;
  (%155, %156, meta[relay.Constant][6] /* ty=Tensor[(1568), int64] */, %157, %158, %159)
}

def @func_708() -> Tensor[(10, 14, 2), float32] {
  %160 = fn () -> Tensor[(10, 14, 2), float32] {
    @func_584() /* ty=Tensor[(10, 14, 2), float32] */
  };
  %160() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_5518() -> Tensor[(10, 14, 2), float32] {
  %162 = fn () -> Tensor[(10, 14, 2), float32] {
    %161 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %161.5
  };
  %162() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_6303() -> Tensor[(10, 14, 2), float32] {
  %164 = fn () -> Tensor[(10, 14, 2), float32] {
    %163 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %163.0
  };
  %164() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_5605() -> (Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) {
  %165 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
  %166 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %168 = reshape(%166, newshape=[]) /* ty=uint32 */;
  %169 = reshape(%167, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint32] */;
  %170 = @func_3992(%168, %169) /* ty=(Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */;
  %171 = %165.0;
  %172 = %170.1;
  (%171, %172, meta[relay.Constant][7] /* ty=uint32 */, meta[relay.Constant][8] /* ty=Tensor[(480), uint32] */)
}

def @func_6697() -> (Tensor[(10, 14, 2), float32],) {
  %175 = fn () -> (Tensor[(10, 14, 2), float32],) {
    %173 = @func_5800() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %174 = %173.0;
    (%174,)
  };
  %175() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_2250() -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */
}

def @func_7224(%var_7222: Tensor[(16, 8, 5), bool], %var_7223: Tensor[(16, 8, 5), bool]) -> Tensor[(16, 8, 5), bool] {
  @func_7220(%var_7222, %var_7223) /* ty=Tensor[(16, 8, 5), bool] */
}

def @func_218(%var_209: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 4), float64] */;
  %177 = cast(%var_209, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %178 = reshape(%177, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %179 = @func_74(%178) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %180 = cosh(%176) /* ty=Tensor[(12, 1, 4), float64] */;
  %181 = %179.0;
  (%180, %181, %var_209)
}

def @func_1475() -> Tensor[(10, 14, 2), float32] {
  @func_1473() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_1199() -> (Tensor[(10, 14, 2), float32],) {
  %182 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%182,)
}

def @func_6357() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_6355() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_742() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_740() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_1684() -> Tensor[(10, 14, 2), float32] {
  %184 = fn () -> Tensor[(10, 14, 2), float32] {
    %183 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %183.8
  };
  %184() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_3128() -> (Tensor[(10, 14, 2), float32],) {
  @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_6355() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %185 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %186 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %187 = %185.0;
  (%186, %187)
}

def @func_3089(%var_3076: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %188 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %189 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %190 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %191 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %192 = cast(%var_3076, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %193 = reshape(%189, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %194 = reshape(%190, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %195 = reshape(%191, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %196 = reshape(%192, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %197 = @func_2090(%193, %194, %195, %196) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %198 = %188.4;
  %199 = %197.1;
  (%198, %199, %var_3076)
}

def @func_7860(%var_7858: Tensor[(2, 10, 1), float32]) -> Tensor[(2, 10, 1), float32] {
  @func_7857(%var_7858) /* ty=Tensor[(2, 10, 1), float32] */
}

def @func_6853(%var_6822: Tensor[(1080), float32], %var_6823: Tensor[(7, 195), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(2, 720), int32], Tensor[(1080), float32], Tensor[(7, 195), float32]) {
  %200 = @func_6052() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 720), int32] */, dtype="int32") /* ty=Tensor[(2, 720), int32] */;
  %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 720), int32] */, dtype="int32") /* ty=Tensor[(2, 720), int32] */;
  %203 = cast(%var_6822, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %204 = cast(%var_6823, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %205 = reshape(%201, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %206 = reshape(%202, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
  %207 = reshape(%203, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %208 = reshape(%204, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %209 = @func_5298(%205, %206, %207, %208) /* ty=(Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) */;
  %210 = %200.1;
  %211 = %209.0;
  (%210, %211, meta[relay.Constant][10] /* ty=Tensor[(2, 720), int32] */, %var_6822, %var_6823)
}

def @func_1524() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %212 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %213 = %212.0;
  %214 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  (%213, %214)
}

def @func_7458() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %221 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %215 = @func_5363() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %216 = %215.0;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
    %218 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %219 = sin(%217) /* ty=Tensor[(10, 14, 2), float32] */;
    %220 = %218.0;
    (%219, %220)
  };
  %221() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_2191() -> (Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) {
  %222 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
  %223 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %224 = %222.1;
  %225 = %223.0;
  (%224, %225)
}

def @func_1758() -> (Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %226 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %229 = reshape(%228, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float64] */;
  %230 = @func_1384(%229) /* ty=(Tensor[(12, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %231 = cosh(%227) /* ty=Tensor[(10, 14, 2), float64] */;
  %232 = %230.0;
  %233 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %234 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%231, %232, meta[relay.Constant][11] /* ty=Tensor[(240), float64] */, %233, %234)
}

def @func_4143() -> (Tensor[(10, 14, 2), float32],) {
  %237 = fn () -> (Tensor[(10, 14, 2), float32],) {
    %235 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
    %236 = %235.0;
    (%236,)
  };
  %237() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_7220(%var_7212: Tensor[(16, 8, 5), bool], %var_7213: Tensor[(16, 8, 5), bool]) -> Tensor[(16, 8, 5), bool] {
  %238 = cast(%var_7213, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %239 = shape_of(%var_7212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_7212, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%240, %241) /* ty=Tensor[(16, 8, 5), bool] */
}

def @func_5364() -> (Tensor[(10, 14, 2), float32],) {
  %244 = fn () -> (Tensor[(10, 14, 2), float32],) {
    %242 = @func_4703() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
    %243 = %242.0;
    (%243,)
  };
  %244() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_1677() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %245 = cast(meta[relay.Constant][12] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %246 = reshape(%245, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %247 = @func_74(%246) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %248 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %249 = %247.0;
  (%248, %249, meta[relay.Constant][12] /* ty=Tensor[(1365), float32] */)
}

def @func_5664() -> (Tensor[(10, 14, 2), float32], Tensor[(240), float64]) {
  @func_5662() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(240), float64]) */
}

def @func_4586() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_4584() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_6963() -> (Tensor[(10, 14, 2), float32],) {
  @func_6961() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_6573() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %254 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %250 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %251 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %252 = %250.1;
    %253 = %251.0;
    (%252, %253)
  };
  %254() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_7773(%var_7772: Tensor[(150), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(660), float64], Tensor[(168), uint32], Tensor[(150), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32]) {
  %267 = fn (%var_7745: Tensor[(150), float32]) -> (Tensor[(10, 14, 2), float64], Tensor[(660), float64], Tensor[(168), uint32], Tensor[(150), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32]) {
    %255 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
    %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %257 = cast(%var_7745, dtype="float32") /* ty=Tensor[(150), float32] */;
    %258 = reshape(%256, newshape=[168]) /* ty=Tensor[(168), uint32] */;
    %259 = reshape(%257, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float32] */;
    %260 = @func_5997(%258, %259) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) */;
    %261 = @func_6797() /* ty=(Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) */;
    %262 = @func_7375() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %263 = %255.0;
    %264 = %260.2;
    %265 = %261.1;
    %266 = %262.0;
    (%263, %264, meta[relay.Constant][13] /* ty=Tensor[(168), uint32] */, %var_7745, %265, %266)
  };
  %267(%var_7772) /* ty=(Tensor[(10, 14, 2), float64], Tensor[(660), float64], Tensor[(168), uint32], Tensor[(150), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32]) */
}

def @func_2978(%var_2975: Tensor[(168), uint32], %var_2976: Tensor[(600), uint8], %var_2977: Tensor[(10, 66), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) {
  %307 = fn (%var_2904: Tensor[(168), uint32], %var_2911: Tensor[(600), uint8], %var_2921: Tensor[(10, 66), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) {
    %268 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %269 = cast(%var_2904, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %270 = cast(%var_2904, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %271 = cast(%var_2904, dtype="float64") /* ty=Tensor[(168), float64] */;
    %272 = reshape(%269, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint32] */;
    %273 = reshape(%270, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint32] */;
    %274 = reshape(%271, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), float64] */;
    %275 = @func_1641(%272, %273, %274) /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) */;
    %276 = @func_2191() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) */;
    %277 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %278 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %279 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %280 = cast(%var_2911, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %281 = reshape(%277, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %282 = reshape(%278, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %283 = reshape(%279, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %284 = reshape(%280, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %285 = @func_2090(%281, %282, %283, %284) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
    %286 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %287 = cast(%var_2921, dtype="float64") /* ty=Tensor[(10, 66), float64] */;
    %288 = cast(meta[relay.Constant][14] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %289 = cast(meta[relay.Constant][14] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %290 = reshape(%287, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %291 = reshape(%288, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %292 = reshape(%289, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %293 = @func_1306(%290, %291, %292) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
    %294 = %293.1;
    %295 = cast(meta[relay.Constant][14] /* ty=Tensor[(1365), float32] */, dtype="int16") /* ty=Tensor[(1365), int16] */;
    %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%294, dtype="int16") /* ty=Tensor[(15, 13, 7), int16] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %299 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %300 = %268.3;
    %301 = %275.0;
    %302 = %276.0;
    %303 = %285.0;
    %304 = %286.0;
    %305 = multiply(%297, %298) /* ty=Tensor[(15, 13, 7), int16] */;
    %306 = %299.0;
    (%300, %301, %var_2904, %302, %303, %var_2911, %304, %var_2921, %305, %306)
  };
  %307(%var_2975, %var_2976, %var_2977) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */
}

def @func_4487() -> Tensor[(10, 14, 2), int32] {
  @func_4485() /* ty=Tensor[(10, 14, 2), int32] */
}

def @func_3514(%var_3512: Tensor[(600), uint8], %var_3513: Tensor[(10, 14, 2), float32]) -> (Tensor[(1365), float32], Tensor[(600), uint8], Tensor[(600), uint8], Tensor[(10, 14, 2), bool]) {
  @func_3510(%var_3512, %var_3513) /* ty=(Tensor[(1365), float32], Tensor[(600), uint8], Tensor[(600), uint8], Tensor[(10, 14, 2), bool]) */
}

def @func_221(%var_219: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  @func_218(%var_219) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */
}

def @func_3009() -> (Tensor[(10, 14, 2), float64],) {
  %311 = fn () -> (Tensor[(10, 14, 2), float64],) {
    %308 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
    %309 = cast(%308, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %310 = acosh(%309) /* ty=Tensor[(10, 14, 2), float64] */;
    (%310,)
  };
  %311() /* ty=(Tensor[(10, 14, 2), float64],) */
}

def @func_4705() -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  @func_4703() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */
}

def @func_2842(%var_2841: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
  %314 = fn (%var_2832: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
    %312 = cast(%var_2832, dtype="float64") /* ty=Tensor[(8, 9, 2), float64] */;
    %313 = sinh(%312) /* ty=Tensor[(8, 9, 2), float64] */;
    (%313,)
  };
  %314(%var_2841) /* ty=(Tensor[(8, 9, 2), float64],) */
}

def @func_4134() -> (Tensor[(12, 1, 4), float64],) {
  %316 = fn () -> (Tensor[(12, 1, 4), float64],) {
    %315 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
    (%315,)
  };
  %316() /* ty=(Tensor[(12, 1, 4), float64],) */
}

def @func_6772() -> Tensor[(10, 14, 2), float32] {
  @func_6770() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_639(%var_638: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %322 = fn (%var_627: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
    %317 = cast(%var_627, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %318 = reshape(%317, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %319 = @func_74(%318) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %320 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
    %321 = %319.0;
    (%320, %321, %var_627)
  };
  %322(%var_638) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */
}

def @func_6410() -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) {
  %330 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) {
    %323 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %324 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %325 = %324.1;
    %326 = cast(%325, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
    %327 = %323.1;
    %328 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
    %329 = cosh(%326) /* ty=Tensor[(12, 5, 4), float32] */;
    (%327, %328, %329)
  };
  %330() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(12, 5, 4), float32]) */
}

def @func_586() -> Tensor[(10, 14, 2), float32] {
  @func_584() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_584() -> Tensor[(10, 14, 2), float32] {
  %331 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %332 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 14, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%333, %334) /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_6510(%var_6484: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 14, 2), float32]) {
  %335 = cast(%var_6484, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %336 = rsqrt(%335) /* ty=Tensor[(7, 15, 16), float32] */;
  %337 = cast(%var_6484, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %341 = bitwise_or(%339, %340) /* ty=Tensor[(7, 15, 16), uint16] */;
  %342 = cast(%341, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %343 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%336, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %347 = greater(%344, %345) /* ty=Tensor[(7, 15, 16), bool] */;
  %348 = %346.0;
  (%347, %348)
}

def @func_2893(%var_2891: Tensor[(16, 9), float32]) -> (Tensor[(16, 9), float32],) {
  @func_2890(%var_2891) /* ty=(Tensor[(16, 9), float32],) */
}

def @func_4601() -> Tensor[(240), float64] {
  %350 = fn () -> Tensor[(240), float64] {
    %349 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %349.2
  };
  %350() /* ty=Tensor[(240), float64] */
}

def @func_3632(%var_3631: Tensor[(3, 1, 12), float64]) -> Tensor[(3, 1, 12), float64] {
  %352 = fn (%var_3627: Tensor[(3, 1, 12), float64]) -> Tensor[(3, 1, 12), float64] {
    %351 = cast(%var_3627, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
    acos(%351) /* ty=Tensor[(3, 1, 12), float64] */
  };
  %352(%var_3631) /* ty=Tensor[(3, 1, 12), float64] */
}

def @func_2509(%var_2507: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) {
  @func_2506(%var_2507) /* ty=(Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) */
}

def @func_5568() -> Tensor[(10, 14, 2), float64] {
  %354 = fn () -> Tensor[(10, 14, 2), float64] {
    %353 = @func_2782() /* ty=(Tensor[(10, 14, 2), float64],) */;
    %353.0
  };
  %354() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_2754(%var_2751: Tensor[(600), uint8], %var_2752: Tensor[(660, 1), float64], %var_2753: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) {
  @func_2749(%var_2751, %var_2752, %var_2753) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) */
}

def @func_4819(%var_4817: Tensor[(660), float64], %var_4818: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
  %365 = fn (%var_4788: Tensor[(660), float64], %var_4789: Tensor[(1365), float32]) -> (Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
    %355 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
    %356 = cast(%var_4788, dtype="float64") /* ty=Tensor[(660), float64] */;
    %357 = cast(%var_4789, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %358 = cast(%var_4789, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %359 = reshape(%356, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %360 = reshape(%357, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %361 = reshape(%358, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %362 = @func_1306(%359, %360, %361) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
    %363 = %355.1;
    %364 = %362.1;
    (%363, %364, %var_4788, %var_4789)
  };
  %365(%var_4817, %var_4818) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) */
}

def @func_3698(%var_3696: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
  @func_3695(%var_3696) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) */
}

def @func_4416() -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) {
  %371 = fn () -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) {
    %366 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
    %367 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
    %368 = %366.0;
    %369 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
    %370 = %367.1;
    (%368, %369, %370)
  };
  %371() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) */
}

def @func_7375() -> (Tensor[(10, 14, 2), float32],) {
  %372 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %373 = %372.0;
  (%373,)
}

def @func_4320() -> (Tensor[(10, 14, 2), float64],) {
  %374 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  (%374,)
}

def @func_6264(%var_6262: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  @func_6261(%var_6262) /* ty=(Tensor[(9, 10, 6), float32],) */
}

def @func_6052() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %375 = @func_5800() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %376 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %377 = %375.0;
  %378 = %376.0;
  (%377, %378)
}

def @func_2141() -> (Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) {
  %379 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 1), float64] */;
  %380 = sin(%379) /* ty=Tensor[(14, 5, 1), float64] */;
  %381 = @func_1211() /* ty=Tensor[(12, 1, 4), float64] */;
  (%380, %381)
}

def @func_3583(%var_3556: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 15, 2), uint16], Tensor[(5, 15, 2), float32]) {
  %382 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
  %383 = %382.0;
  %384 = cast(%var_3556, dtype="uint16") /* ty=Tensor[(5, 15, 2), uint16] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="uint16") /* ty=Tensor[(5, 15, 2), uint16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %388 = cast(%var_3556, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %389 = bitwise_and(%386, %387) /* ty=Tensor[(5, 15, 2), uint16] */;
  %390 = exp(%388) /* ty=Tensor[(5, 15, 2), float32] */;
  (%389, %390)
}

def @func_6513(%var_6511: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 14, 2), float32]) {
  @func_6510(%var_6511) /* ty=(Tensor[(7, 15, 16), bool], Tensor[(10, 14, 2), float32]) */
}

def @func_2330() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_2328() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_6550() -> Tensor[(10, 14, 2), float64] {
  %391 = fn () -> Tensor[(10, 14, 2), float64] {
    @func_5567() /* ty=Tensor[(10, 14, 2), float64] */
  };
  %391() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_7494(%var_7492: Tensor[(9, 11, 4), float32], %var_7493: Tensor[(1365), float32]) -> (Tensor[(9, 11, 4), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  %398 = fn (%var_7475: Tensor[(9, 11, 4), float32], %var_7484: Tensor[(1365), float32]) -> (Tensor[(9, 11, 4), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
    %392 = cast(%var_7475, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
    %393 = cast(%var_7484, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %394 = reshape(%393, newshape=[1365, 1]) /* ty=Tensor[(1365, 1), float32] */;
    %395 = @func_920(%394) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) */;
    %396 = log2(%392) /* ty=Tensor[(9, 11, 4), float32] */;
    %397 = %395.3;
    (%396, %397, %var_7484)
  };
  %398(%var_7492, %var_7493) /* ty=(Tensor[(9, 11, 4), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */
}

def @func_1179(%var_1177: Tensor[(4, 12, 12), float32]) -> (Tensor[(4, 12, 12), uint64],) {
  @func_1176(%var_1177) /* ty=(Tensor[(4, 12, 12), uint64],) */
}

def @func_2689() -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) {
  @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */
}

def @func_6061() -> Tensor[(10, 14, 2), float32] {
  %400 = fn () -> Tensor[(10, 14, 2), float32] {
    %399 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %399.0
  };
  %400() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_7715() -> (Tensor[(10, 14, 2), float64], Tensor[(5, 15, 2), float32]) {
  %401 = @func_5605() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %404 = @func_6549() /* ty=Tensor[(10, 14, 2), float64] */;
  %405 = log(%403) /* ty=Tensor[(5, 15, 2), float32] */;
  (%404, %405)
}

def @func_2783() -> (Tensor[(10, 14, 2), float64],) {
  %409 = fn () -> (Tensor[(10, 14, 2), float64],) {
    %406 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
    %407 = cast(%406, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %408 = asin(%407) /* ty=Tensor[(10, 14, 2), float64] */;
    (%408,)
  };
  %409() /* ty=(Tensor[(10, 14, 2), float64],) */
}

def @func_7869(%var_7862: Tensor[(7, 13, 6), float64]) -> Tensor[(7, 13, 6), float64] {
  %410 = cast(%var_7862, dtype="float64") /* ty=Tensor[(7, 13, 6), float64] */;
  sinh(%410) /* ty=Tensor[(7, 13, 6), float64] */
}

def @func_6799() -> (Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) {
  @func_6797() /* ty=(Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) */
}

def @func_1896() -> Tensor[(10, 14, 2), float32] {
  %412 = fn () -> Tensor[(10, 14, 2), float32] {
    %411 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %411.1
  };
  %412() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_1953() -> Tensor[(10, 14, 2), float32] {
  %413 = fn () -> Tensor[(10, 14, 2), float32] {
    @func_707() /* ty=Tensor[(10, 14, 2), float32] */
  };
  %413() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_6797() -> (Tensor[(7, 13), float32], Tensor[(10, 14, 2), bool], Tensor[(280), float32]) {
  %414 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 13), float32] */;
  %415 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %416 = reshape(%415, newshape=[10, 14, 2]) /* ty=Tensor[(10, 14, 2), float32] */;
  %417 = erf(%414) /* ty=Tensor[(7, 13), float32] */;
  %418 = @func_4205(%416) /* ty=Tensor[(10, 14, 2), bool] */;
  (%417, %418, meta[relay.Constant][19] /* ty=Tensor[(280), float32] */)
}

def @func_3995(%var_3993: uint32, %var_3994: Tensor[(16, 3, 10), uint32]) -> (Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
  %426 = fn (%var_3966: uint32, %var_3967: Tensor[(16, 3, 10), uint32]) -> (Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
    %419 = cast(%var_3966, dtype="uint32") /* ty=uint32 */;
    %420 = cast(%var_3967, dtype="uint32") /* ty=Tensor[(16, 3, 10), uint32] */;
    %421 = cast(meta[relay.Constant][20] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %422 = reshape(%421, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float32] */;
    %423 = @func_2551(%422) /* ty=(Tensor[(11, 11, 15), float32],) */;
    %424 = right_shift(%419, %420) /* ty=Tensor[(16, 3, 10), uint32] */;
    %425 = %423.0;
    (%424, %425, meta[relay.Constant][20] /* ty=Tensor[(1815), float32] */)
  };
  %426(%var_3993, %var_3994) /* ty=(Tensor[(16, 3, 10), uint32], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */
}

def @func_2248() -> (Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  %427 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %428 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  %429 = %427.1;
  (%428, %429)
}

def @func_2862() -> Tensor[(10, 14, 2), float32] {
  %430 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %430.0
}

def @func_1645(%var_1642: Tensor[(8, 7, 3), uint32], %var_1643: Tensor[(8, 7, 3), uint32], %var_1644: Tensor[(8, 7, 3), float64]) -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) {
  %447 = fn (%var_1591: Tensor[(8, 7, 3), uint32], %var_1592: Tensor[(8, 7, 3), uint32], %var_1637: Tensor[(8, 7, 3), float64]) -> (Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) {
    %431 = cast(%var_1592, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
    %432 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%var_1591, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %435 = cast(%var_1592, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
    %436 = exp(%435) /* ty=Tensor[(8, 7, 3), float64] */;
    %437 = cast(%436, dtype="float32") /* ty=Tensor[(8, 7, 3), float32] */;
    %438 = cast(%436, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
    %439 = acos(%438) /* ty=Tensor[(8, 7, 3), float64] */;
    %440 = cast(%var_1637, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
    %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%439, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %444 = not_equal(%433, %434) /* ty=Tensor[(8, 7, 3), bool] */;
    %445 = log2(%437) /* ty=Tensor[(8, 7, 3), float32] */;
    %446 = less_equal(%442, %443) /* ty=Tensor[(8, 7, 3), bool] */;
    (%444, %445, %446)
  };
  %447(%var_1642, %var_1643, %var_1644) /* ty=(Tensor[(8, 7, 3), bool], Tensor[(8, 7, 3), float32], Tensor[(8, 7, 3), bool]) */
}

def @func_3233(%var_3230: int64, %var_3231: Tensor[(16, 5, 7), int64], %var_3232: Tensor[(1365), float32]) -> (Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(16, 5, 7), uint16], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_3228(%var_3230, %var_3231, %var_3232) /* ty=(Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(16, 5, 7), uint16], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_4380() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_4378() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_2453() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %463 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %448 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
    %449 = cast(%448, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %450 = exp(%449) /* ty=Tensor[(10, 14, 2), float64] */;
    %451 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
    %452 = cast(%451, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
    %453 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
    %454 = cast(%450, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %456 = greater_equal(%454, %455) /* ty=Tensor[(10, 14, 2), bool] */;
    %457 = cast(%450, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
    %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%456, dtype="float32") /* ty=Tensor[(10, 14, 2), float32] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %461 = floor_divide(%459, %460) /* ty=Tensor[(10, 14, 2), float32] */;
    %462 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
    (%461, %462)
  };
  %463() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_4850() -> Tensor[(10, 14, 2), float64] {
  @func_4848() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_7949(%var_7947: Tensor[(600), uint8]) -> (Tensor[(6, 11, 11), float64], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  @func_7946(%var_7947) /* ty=(Tensor[(6, 11, 11), float64], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */
}

def @func_5503() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %469 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %464 = @func_4703() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */;
    %465 = @func_1913() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %466 = %464.0;
    %467 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
    %468 = %465.1;
    (%466, %467, %468)
  };
  %469() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_5800() -> (Tensor[(10, 14, 2), float32],) {
  %470 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  (%470,)
}

def @func_2280() -> Tensor[(10, 14, 2), float32] {
  %471 = fn () -> Tensor[(10, 14, 2), float32] {
    @func_1473() /* ty=Tensor[(10, 14, 2), float32] */
  };
  %471() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_6120() -> (Tensor[(10, 14, 2), float32],) {
  @func_6118() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_2687() -> (Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) {
  %472 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %473 = @func_2141() /* ty=(Tensor[(14, 5, 1), float64], Tensor[(12, 1, 4), float64]) */;
  %474 = cast(meta[relay.Constant][21] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %475 = reshape(%474, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %476 = @func_637(%475) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %477 = cast(meta[relay.Constant][21] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %478 = %472.6;
  %479 = %473.1;
  %480 = %476.0;
  %481 = log10(%477) /* ty=Tensor[(1365), float32] */;
  (%478, %479, %480, %481)
}

def @func_2553(%var_2552: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32],) {
  %484 = fn (%var_2546: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32],) {
    %482 = cast(%var_2546, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
    %483 = acos(%482) /* ty=Tensor[(11, 11, 15), float32] */;
    (%483,)
  };
  %484(%var_2552) /* ty=(Tensor[(11, 11, 15), float32],) */
}

def @func_3526() -> (Tensor[(5, 15, 2), float32],) {
  %487 = fn () -> (Tensor[(5, 15, 2), float32],) {
    %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
    %486 = acosh(%485) /* ty=Tensor[(5, 15, 2), float32] */;
    (%486,)
  };
  %487() /* ty=(Tensor[(5, 15, 2), float32],) */
}

def @func_7608() -> (Tensor[(12, 1, 4), float64],) {
  %489 = fn () -> (Tensor[(12, 1, 4), float64],) {
    %488 = @func_7333() /* ty=Tensor[(12, 1, 4), float64] */;
    (%488,)
  };
  %489() /* ty=(Tensor[(12, 1, 4), float64],) */
}

def @func_4848() -> Tensor[(10, 14, 2), float64] {
  %490 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
  %490.0
}

def @func_6000(%var_5998: Tensor[(168), uint32], %var_5999: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) {
  %504 = fn (%var_5975: Tensor[(168), uint32], %var_5988: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) {
    %491 = cast(%var_5975, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
    %493 = reshape(%491, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint32] */;
    %494 = reshape(%492, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %495 = @func_4980(%493, %494) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %496 = @func_3525() /* ty=(Tensor[(5, 15, 2), float32],) */;
    %497 = %496.0;
    %498 = cast(%var_5988, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
    %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%497, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %502 = %495.1;
    %503 = greater(%500, %501) /* ty=Tensor[(5, 15, 2), bool] */;
    (%502, %var_5975, meta[relay.Constant][23] /* ty=Tensor[(660), float64] */, %503)
  };
  %504(%var_5998, %var_5999) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(168), uint32], Tensor[(660), float64], Tensor[(5, 15, 2), bool]) */
}

def @func_961() -> Tensor[(10, 14, 2), float64] {
  %508 = fn () -> Tensor[(10, 14, 2), float64] {
    %505 = @func_740() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %506 = %505.4;
    %507 = cast(%506, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    asinh(%507) /* ty=Tensor[(10, 14, 2), float64] */
  };
  %508() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_3823() -> (Tensor[(15, 7, 9), float64], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
  %525 = fn () -> (Tensor[(15, 7, 9), float64], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) {
    %509 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
    %510 = asinh(%509) /* ty=Tensor[(15, 7, 9), float32] */;
    %511 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(15, 7, 9), bool] */;
    %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%510, dtype="bool") /* ty=Tensor[(15, 7, 9), bool] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %515 = logical_or(%513, %514) /* ty=Tensor[(15, 7, 9), bool] */;
    %516 = cast(%510, dtype="float64") /* ty=Tensor[(15, 7, 9), float64] */;
    %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%515, dtype="float64") /* ty=Tensor[(15, 7, 9), float64] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %520 = cast(meta[relay.Constant][25] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %521 = reshape(%520, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float32] */;
    %522 = @func_2551(%521) /* ty=(Tensor[(11, 11, 15), float32],) */;
    %523 = divide(%518, %519) /* ty=Tensor[(15, 7, 9), float64] */;
    %524 = %522.0;
    (%523, %524, meta[relay.Constant][25] /* ty=Tensor[(1815), float32] */)
  };
  %525() /* ty=(Tensor[(15, 7, 9), float64], Tensor[(11, 11, 15), float32], Tensor[(1815), float32]) */
}

def @func_4322() -> (Tensor[(10, 14, 2), float64],) {
  @func_4320() /* ty=(Tensor[(10, 14, 2), float64],) */
}

def @func_77(%var_75: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), float32],) {
  @func_74(%var_75) /* ty=(Tensor[(15, 13, 7), float32],) */
}

def @func_3465(%var_3463: Tensor[(6, 12, 13), bool], %var_3464: Tensor[(6, 12, 13), bool]) -> (Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) {
  %533 = fn (%var_3454: Tensor[(6, 12, 13), bool], %var_3455: Tensor[(6, 12, 13), bool]) -> (Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) {
    %526 = cast(%var_3455, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
    %527 = shape_of(%var_3454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%var_3454, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %530 = @func_1524() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %531 = logical_and(%528, %529) /* ty=Tensor[(6, 12, 13), bool] */;
    %532 = %530.1;
    (%531, %532)
  };
  %533(%var_3463, %var_3464) /* ty=(Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) */
}

def @func_3586(%var_3584: Tensor[(5, 15, 2), float32]) -> (Tensor[(5, 15, 2), uint16], Tensor[(5, 15, 2), float32]) {
  @func_3583(%var_3584) /* ty=(Tensor[(5, 15, 2), uint16], Tensor[(5, 15, 2), float32]) */
}

def @func_7153() -> Tensor[(10, 14, 2), float32] {
  %534 = @func_6961() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %534.0
}

def @func_6937() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_6935() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_922(%var_921: Tensor[(1365, 1), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) {
  %549 = fn (%var_898: Tensor[(1365, 1), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) {
    %535 = cast(%var_898, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
    %536 = reshape(%535, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %537 = @func_74(%536) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %538 = cast(%var_898, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
    %539 = reshape(%538, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %540 = @func_74(%539) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %541 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
    %542 = cast(%541, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %543 = erf(%542) /* ty=Tensor[(10, 14, 2), float64] */;
    %544 = cast(%543, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    %545 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
    %546 = %537.0;
    %547 = %540.0;
    %548 = log10(%544) /* ty=Tensor[(10, 14, 2), float64] */;
    (%545, %546, %var_898, %547, %548)
  };
  %549(%var_921) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365, 1), float32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), float64]) */
}

def @func_1445() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
  %553 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
    %550 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %551 = %550.0;
    %552 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */
}

def @func_6961() -> (Tensor[(10, 14, 2), float32],) {
  %554 = @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %555 = %554.0;
  (%555,)
}

def @func_6935() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %556 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %557 = @func_6355() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
  %558 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %559 = %556.8;
  %560 = %557.0;
  (%558, %559, %560)
}

def @func_7584(%var_7581: Tensor[(360, 4), int32], %var_7582: Tensor[(1365), float32], %var_7583: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(360, 4), int32], Tensor[(270, 4), float32], Tensor[(1365), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float64]) {
  %585 = fn (%var_7532: Tensor[(360, 4), int32], %var_7548: Tensor[(1365), float32], %var_7556: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(360, 4), int32], Tensor[(270, 4), float32], Tensor[(1365), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float64]) {
    %561 = @func_5435() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %562 = cast(%var_7532, dtype="int32") /* ty=Tensor[(360, 4), int32] */;
    %563 = cast(%var_7532, dtype="int32") /* ty=Tensor[(360, 4), int32] */;
    %564 = cast(meta[relay.Constant][26] /* ty=Tensor[(270, 4), float32] */, dtype="float32") /* ty=Tensor[(270, 4), float32] */;
    %565 = cast(meta[relay.Constant][27] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %566 = reshape(%562, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
    %567 = reshape(%563, newshape=[15, 6, 16]) /* ty=Tensor[(15, 6, 16), int32] */;
    %568 = reshape(%564, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
    %569 = reshape(%565, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %570 = @func_5298(%566, %567, %568, %569) /* ty=(Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) */;
    %571 = cast(%var_7548, dtype="bool") /* ty=Tensor[(1365), bool] */;
    %572 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(1365), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %573 = cast(meta[relay.Constant][27] /* ty=Tensor[(1365), float32] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), bool] */;
    %575 = cast(%var_7556, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %576 = cast(%var_7556, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %577 = reshape(%575, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %578 = reshape(%576, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %579 = @func_3376(%577, %578) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %580 = %561.0;
    %581 = %570.0;
    %582 = less_equal(%573, %574) /* ty=Tensor[(1365), bool] */;
    %583 = %579.4;
    %584 = @func_4848() /* ty=Tensor[(10, 14, 2), float64] */;
    (%580, %581, %var_7532, meta[relay.Constant][26] /* ty=Tensor[(270, 4), float32] */, %582, %583, %var_7556, %584)
  };
  %585(%var_7581, %var_7582, %var_7583) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(9, 12, 10), bool], Tensor[(360, 4), int32], Tensor[(270, 4), float32], Tensor[(1365), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float64]) */
}

def @func_6118() -> (Tensor[(10, 14, 2), float32],) {
  %586 = @func_4415() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64]) */;
  %587 = %586.1;
  (%587,)
}

def @func_2193() -> (Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) {
  @func_2191() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32]) */
}

def @main() -> (Tensor[(1568), float32],) {
  %588 = @func_5486() /* ty=Tensor[(1568), int64] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %590 = log2(%589) /* ty=Tensor[(1568), float32] */;
  %591 = cast(%588, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(1), int32] */;
  %593 = cast(%590, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?), float32] */;
  %595 = minimum(%593, %594) /* ty=Tensor[(1568), float32] */;
  (%595,)
}

def @func_1915() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_1913() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_4205(%var_4180: Tensor[(10, 14, 2), float32]) -> Tensor[(10, 14, 2), bool] {
  %596 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  %597 = cast(%var_4180, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%599, %600) /* ty=Tensor[(10, 14, 2), bool] */
}

def @func_1088() -> (Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  %601 = cast(meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %602 = reshape(%601, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %603 = @func_218(%602) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %604 = @func_960() /* ty=Tensor[(10, 14, 2), float64] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %606 = acos(%605) /* ty=Tensor[(10, 14, 2), float64] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %608 = cos(%607) /* ty=Tensor[(10, 14, 2), float64] */;
  %609 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %610 = cast(%609, dtype="int32") /* ty=Tensor[(10, 14, 2), int32] */;
  %611 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%608, dtype="int32") /* ty=Tensor[(10, 14, 2), int32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %614 = cast(meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %615 = reshape(%614, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %616 = @func_74(%615) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %617 = cast(%609, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %618 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%608, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %622 = reshape(%621, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %623 = @func_637(%622) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %624 = cast(%604, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
  %625 = %603.0;
  %626 = logical_xor(%612, %613) /* ty=Tensor[(10, 14, 2), int32] */;
  %627 = %616.0;
  %628 = logical_and(%619, %620) /* ty=Tensor[(10, 14, 2), bool] */;
  %629 = %623.0;
  %630 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %631 = sinh(%624) /* ty=Tensor[(10, 14, 2), float64] */;
  %632 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%625, meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, %626, %627, %628, %629, %630, %631, %632)
}

def @func_3380(%var_3378: Tensor[(8, 14, 14), int64], %var_3379: Tensor[(8, 14, 14), int64]) -> (Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_3376(%var_3378, %var_3379) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_2864() -> Tensor[(10, 14, 2), float32] {
  @func_2862() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_5529() -> Tensor[(10, 14, 2), float32] {
  %634 = fn () -> Tensor[(10, 14, 2), float32] {
    %633 = @func_2452() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %633.0
  };
  %634() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_2095(%var_2091: Tensor[(5, 10, 12), uint8], %var_2092: Tensor[(5, 10, 12), uint8], %var_2093: Tensor[(5, 10, 12), uint8], %var_2094: Tensor[(5, 10, 12), uint8]) -> (Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) {
  %657 = fn (%var_2029: Tensor[(5, 10, 12), uint8], %var_2030: Tensor[(5, 10, 12), uint8], %var_2034: Tensor[(5, 10, 12), uint8], %var_2076: Tensor[(5, 10, 12), uint8]) -> (Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) {
    %635 = cast(%var_2030, dtype="uint8") /* ty=Tensor[(5, 10, 12), uint8] */;
    %636 = shape_of(%var_2029, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%var_2029, dtype="uint8") /* ty=Tensor[(5, 10, 12), uint8] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %639 = bitwise_xor(%637, %638) /* ty=Tensor[(5, 10, 12), uint8] */;
    %640 = cast(%var_2034, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%639, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %644 = cast(%639, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
    %645 = acos(%644) /* ty=Tensor[(5, 10, 12), float32] */;
    %646 = cast(%var_2029, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
    %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(%645, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %650 = cast(%var_2076, dtype="float64") /* ty=Tensor[(5, 10, 12), float64] */;
    %651 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(%639, dtype="float64") /* ty=Tensor[(5, 10, 12), float64] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %654 = divide(%642, %643) /* ty=Tensor[(5, 10, 12), float32] */;
    %655 = less(%648, %649) /* ty=Tensor[(5, 10, 12), bool] */;
    %656 = subtract(%652, %653) /* ty=Tensor[(5, 10, 12), float64] */;
    (%654, %655, %656)
  };
  %657(%var_2091, %var_2092, %var_2093, %var_2094) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */
}

def @func_5687(%var_5665: Tensor[(12, 11, 4), float64]) -> (Tensor[(12, 11, 4), float64],) {
  %658 = cast(%var_5665, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
  %659 = atanh(%658) /* ty=Tensor[(12, 11, 4), float64] */;
  (%659,)
}

def @func_3781(%var_3780: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) {
  %684 = fn (%var_3764: Tensor[(1568), int64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) {
    %660 = @func_3008() /* ty=(Tensor[(10, 14, 2), float64],) */;
    %661 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
    %662 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
    %663 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
    %664 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 100), uint8] */, dtype="uint8") /* ty=Tensor[(6, 100), uint8] */;
    %665 = reshape(%661, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %666 = reshape(%662, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %667 = reshape(%663, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %668 = reshape(%664, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
    %669 = @func_2090(%665, %666, %667, %668) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
    %670 = %669.1;
    %671 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
    %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%670, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %675 = cast(%var_3764, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %676 = cast(%var_3764, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %677 = reshape(%675, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %678 = reshape(%676, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int64] */;
    %679 = @func_3376(%677, %678) /* ty=(Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %680 = @func_2862() /* ty=Tensor[(10, 14, 2), float32] */;
    %681 = %660.0;
    %682 = less_equal(%673, %674) /* ty=Tensor[(5, 10, 12), bool] */;
    %683 = %679.1;
    (%680, %681, meta[relay.Constant][29] /* ty=Tensor[(6, 100), uint8] */, %682, %683, %var_3764)
  };
  %684(%var_3780) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(6, 100), uint8], Tensor[(5, 10, 12), bool], Tensor[(10, 14, 2), float32], Tensor[(1568), int64]) */
}

def @func_3376(%var_3339: Tensor[(8, 14, 14), int64], %var_3340: Tensor[(8, 14, 14), int64]) -> (Tensor[(8, 14, 14), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %685 = cast(%var_3340, dtype="int64") /* ty=Tensor[(8, 14, 14), int64] */;
  %686 = shape_of(%var_3339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_3339, dtype="int64") /* ty=Tensor[(8, 14, 14), int64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %689 = left_shift(%687, %688) /* ty=Tensor[(8, 14, 14), int64] */;
  %690 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %691 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %692 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  %693 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
  (%689, %690, %691, %692, %693)
}

def @func_5731() -> Tensor[(10, 14, 2), float32] {
  %694 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %694.0
}

def @func_6222(%var_6221: Tensor[(660), float64]) -> (Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(168), uint32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
  %707 = fn (%var_6218: Tensor[(660), float64]) -> (Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(168), uint32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
    %695 = @func_740() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %696 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
    %697 = cast(meta[relay.Constant][31] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %698 = cast(meta[relay.Constant][32] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %699 = cast(%var_6218, dtype="float64") /* ty=Tensor[(660), float64] */;
    %700 = reshape(%697, newshape=[168]) /* ty=Tensor[(168), uint32] */;
    %701 = reshape(%698, newshape=[600]) /* ty=Tensor[(600), uint8] */;
    %702 = reshape(%699, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
    %703 = @func_2974(%700, %701, %702) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
    %704 = %695.2;
    %705 = %696.3;
    %706 = %703.2;
    (%704, %705, %706, meta[relay.Constant][31] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][32] /* ty=Tensor[(600), uint8] */, %var_6218)
  };
  %707(%var_6221) /* ty=(Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(168), uint32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) */
}

def @func_7261(%var_7259: Tensor[(1365), float32], %var_7260: Tensor[(936), bool]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(6, 12, 13), bool], Tensor[(936), bool]) {
  %719 = fn (%var_7252: Tensor[(1365), float32], %var_7256: Tensor[(936), bool]) -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(6, 12, 13), bool], Tensor[(936), bool]) {
    %708 = cast(%var_7252, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %709 = reshape(%708, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %710 = @func_74(%709) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %711 = cast(%var_7256, dtype="bool") /* ty=Tensor[(936), bool] */;
    %712 = cast(%var_7256, dtype="bool") /* ty=Tensor[(936), bool] */;
    %713 = reshape(%711, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), bool] */;
    %714 = reshape(%712, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), bool] */;
    %715 = @func_3462(%713, %714) /* ty=(Tensor[(6, 12, 13), bool], Tensor[(10, 14, 2), float32]) */;
    %716 = @func_6060() /* ty=Tensor[(10, 14, 2), float32] */;
    %717 = %710.0;
    %718 = %715.0;
    (%716, %717, %var_7252, %718, %var_7256)
  };
  %719(%var_7259, %var_7260) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(6, 12, 13), bool], Tensor[(936), bool]) */
}

def @func_5436() -> (Tensor[(10, 14, 2), float32],) {
  %721 = fn () -> (Tensor[(10, 14, 2), float32],) {
    %720 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
    (%720,)
  };
  %721() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_1760() -> (Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_1913() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %722 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %723 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
  (%722, %723)
}

def @func_7323() -> (Tensor[(1568), int64],) {
  %725 = fn () -> (Tensor[(1568), int64],) {
    %724 = @func_5486() /* ty=Tensor[(1568), int64] */;
    (%724,)
  };
  %725() /* ty=(Tensor[(1568), int64],) */
}

def @func_1310(%var_1307: Tensor[(10, 6, 11), float64], %var_1308: Tensor[(1365), float32], %var_1309: Tensor[(15, 13, 7), float32]) -> (Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) {
  %747 = fn (%var_1233: Tensor[(10, 6, 11), float64], %var_1247: Tensor[(1365), float32], %var_1266: Tensor[(15, 13, 7), float32]) -> (Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) {
    %726 = cast(%var_1247, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %727 = reshape(%726, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %728 = @func_218(%727) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
    %729 = cast(%var_1247, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %730 = reshape(%729, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %731 = @func_74(%730) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %732 = %731.0;
    %733 = cast(%var_1266, dtype="int32") /* ty=Tensor[(15, 13, 7), int32] */;
    %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%732, dtype="int32") /* ty=Tensor[(15, 13, 7), int32] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %737 = cast(%var_1233, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
    %738 = acos(%737) /* ty=Tensor[(10, 6, 11), float64] */;
    %739 = cast(%var_1233, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
    %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%738, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %743 = %728.1;
    %744 = logical_xor(%735, %736) /* ty=Tensor[(15, 13, 7), int32] */;
    %745 = @func_584() /* ty=Tensor[(10, 14, 2), float32] */;
    %746 = divide(%741, %742) /* ty=Tensor[(10, 6, 11), float64] */;
    (%var_1247, %743, %744, %745, %746)
  };
  %747(%var_1307, %var_1308, %var_1309) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */
}

def @func_74(%var_63: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), float32],) {
  %748 = cast(%var_63, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %749 = atan(%748) /* ty=Tensor[(15, 13, 7), float32] */;
  (%749,)
}

def @func_2749(%var_2728: Tensor[(600), uint8], %var_2744: Tensor[(660, 1), float64], %var_2745: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) {
  %750 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %751 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %752 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %753 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %754 = reshape(%750, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %755 = reshape(%751, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %756 = reshape(%752, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %757 = reshape(%753, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %758 = @func_2090(%754, %755, %756, %757) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %759 = @func_2248() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %760 = cast(%var_2744, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %761 = cast(%var_2745, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %762 = cast(%var_2745, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %763 = reshape(%760, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %764 = reshape(%761, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %765 = reshape(%762, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %766 = @func_1306(%763, %764, %765) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
  %767 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %768 = %758.1;
  %769 = @func_1683() /* ty=Tensor[(10, 14, 2), float32] */;
  %770 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  %771 = %759.1;
  %772 = %766.4;
  (%767, %768, %var_2728, %769, %770, %771, %772, %var_2744, %var_2745)
}

def @func_7172() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), int32], Tensor[(8, 9, 2), float64], Tensor[(144), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
  %788 = fn () -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), int32], Tensor[(8, 9, 2), float64], Tensor[(144), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) {
    %773 = @func_6935() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %774 = cast(meta[relay.Constant][33] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %775 = reshape(%774, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), float64] */;
    %776 = @func_2840(%775) /* ty=(Tensor[(8, 9, 2), float64],) */;
    %777 = cast(meta[relay.Constant][34] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
    %778 = cast(meta[relay.Constant][35] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %779 = cast(meta[relay.Constant][35] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %780 = reshape(%777, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %781 = reshape(%778, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %782 = reshape(%779, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %783 = @func_1306(%780, %781, %782) /* ty=(Tensor[(1365), float32], Tensor[(15, 13, 7), float32], Tensor[(15, 13, 7), int32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64]) */;
    %784 = %773.1;
    %785 = @func_4485() /* ty=Tensor[(10, 14, 2), int32] */;
    %786 = %776.0;
    %787 = %783.1;
    (%784, %785, %786, meta[relay.Constant][33] /* ty=Tensor[(144), float64] */, %787, meta[relay.Constant][34] /* ty=Tensor[(660), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1365), float32] */)
  };
  %788() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), int32], Tensor[(8, 9, 2), float64], Tensor[(144), float64], Tensor[(15, 13, 7), float32], Tensor[(660), float64], Tensor[(1365), float32]) */
}

def @func_3695(%var_3690: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(168), uint32], Tensor[(600), uint8], Tensor[(660), float64]) {
  %789 = @func_2687() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(12, 1, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(1365), float32]) */;
  %790 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %791 = cast(meta[relay.Constant][37] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %792 = cast(%var_3690, dtype="float64") /* ty=Tensor[(660), float64] */;
  %793 = reshape(%790, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %794 = reshape(%791, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %795 = reshape(%792, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
  %796 = @func_2974(%793, %794, %795) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
  %797 = %789.0;
  %798 = %796.6;
  (%797, %798, meta[relay.Constant][36] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][37] /* ty=Tensor[(600), uint8] */, %var_3690)
}

def @func_1211() -> Tensor[(12, 1, 4), float64] {
  %799 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %799.0
}

def @func_7717() -> (Tensor[(10, 14, 2), float64], Tensor[(5, 15, 2), float32]) {
  @func_7715() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(5, 15, 2), float32]) */
}

def @func_4983(%var_4981: Tensor[(6, 28), uint32], %var_4982: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %814 = fn (%var_4923: Tensor[(6, 28), uint32], %var_4925: Tensor[(660), float64]) -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
    %800 = @func_3054() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %801 = cast(%var_4923, dtype="uint32") /* ty=Tensor[(6, 28), uint32] */;
    %802 = cast(meta[relay.Constant][38] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %803 = cast(%var_4925, dtype="float64") /* ty=Tensor[(660), float64] */;
    %804 = reshape(%801, newshape=[168]) /* ty=Tensor[(168), uint32] */;
    %805 = reshape(%802, newshape=[600]) /* ty=Tensor[(600), uint8] */;
    %806 = reshape(%803, newshape=[10, 66]) /* ty=Tensor[(10, 66), float64] */;
    %807 = @func_2974(%804, %805, %806) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(8, 7, 3), bool], Tensor[(168), uint32], Tensor[(12, 1, 4), float64], Tensor[(5, 10, 12), float32], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 66), float64], Tensor[(15, 13, 7), int16], Tensor[(10, 14, 2), float32]) */;
    %808 = @func_2578() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %809 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %810 = %800.0;
    %811 = %807.4;
    %812 = %808.0;
    %813 = %809.3;
    (%810, %811, %var_4923, meta[relay.Constant][38] /* ty=Tensor[(600), uint8] */, %var_4925, %812, %813)
  };
  %814(%var_4981, %var_4982) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), float32], Tensor[(6, 28), uint32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_6677() -> Tensor[(10, 14, 2), float32] {
  %816 = fn () -> Tensor[(10, 14, 2), float32] {
    %815 = @func_2328() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %815.1
  };
  %816() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_1090() -> (Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) {
  @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */
}

def @func_5085(%var_5082: Tensor[(6, 11, 13), float64], %var_5083: Tensor[(144), float32], %var_5084: Tensor[(6, 11, 13), float64]) -> (Tensor[(16, 9), float32], Tensor[(144), float32], Tensor[(8, 9, 2), float64], Tensor[(6, 11, 13), float32]) {
  %834 = fn (%var_5044: Tensor[(6, 11, 13), float64], %var_5052: Tensor[(144), float32], %var_5075: Tensor[(6, 11, 13), float64]) -> (Tensor[(16, 9), float32], Tensor[(144), float32], Tensor[(8, 9, 2), float64], Tensor[(6, 11, 13), float32]) {
    %817 = cast(%var_5052, dtype="float32") /* ty=Tensor[(144), float32] */;
    %818 = reshape(%817, newshape=[16, 9]) /* ty=Tensor[(16, 9), float32] */;
    %819 = @func_2890(%818) /* ty=(Tensor[(16, 9), float32],) */;
    %820 = cast(%var_5052, dtype="float64") /* ty=Tensor[(144), float64] */;
    %821 = reshape(%820, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), float64] */;
    %822 = @func_2840(%821) /* ty=(Tensor[(8, 9, 2), float64],) */;
    %823 = cast(%var_5044, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
    %824 = log(%823) /* ty=Tensor[(6, 11, 13), float64] */;
    %825 = cast(%824, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
    %826 = sqrt(%825) /* ty=Tensor[(6, 11, 13), float64] */;
    %827 = cast(%var_5075, dtype="float32") /* ty=Tensor[(6, 11, 13), float32] */;
    %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
    %829 = cast(%826, dtype="float32") /* ty=Tensor[(6, 11, 13), float32] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %831 = %819.0;
    %832 = %822.0;
    %833 = divide(%829, %830) /* ty=Tensor[(6, 11, 13), float32] */;
    (%831, %var_5052, %832, %833)
  };
  %834(%var_5082, %var_5083, %var_5084) /* ty=(Tensor[(16, 9), float32], Tensor[(144), float32], Tensor[(8, 9, 2), float64], Tensor[(6, 11, 13), float32]) */
}

def @func_3126() -> (Tensor[(10, 14, 2), float32],) {
  %835 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %836 = %835.8;
  (%836,)
}

def @func_740() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %837 = cast(meta[relay.Constant][39] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %838 = reshape(%837, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %839 = @func_218(%838) /* ty=(Tensor[(12, 1, 4), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %840 = cast(meta[relay.Constant][39] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %841 = reshape(%840, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %842 = @func_637(%841) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %843 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %844 = %839.1;
  %845 = @func_707() /* ty=Tensor[(10, 14, 2), float32] */;
  %846 = %842.0;
  (%843, %844, meta[relay.Constant][39] /* ty=Tensor[(1365), float32] */, %845, %846)
}

def @func_7111() -> Tensor[(10, 14, 2), float32] {
  %848 = fn () -> Tensor[(10, 14, 2), float32] {
    %847 = @func_5363() /* ty=(Tensor[(10, 14, 2), float32],) */;
    %847.0
  };
  %848() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_1473() -> Tensor[(10, 14, 2), float32] {
  %849 = @func_1444() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */;
  %849.0
}

def @func_3291() -> Tensor[(10, 14, 2), float64] {
  %853 = fn () -> Tensor[(10, 14, 2), float64] {
    %850 = @func_2328() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %851 = %850.0;
    %852 = cast(%851, dtype="float64") /* ty=Tensor[(10, 14, 2), float64] */;
    log2(%852) /* ty=Tensor[(10, 14, 2), float64] */
  };
  %853() /* ty=Tensor[(10, 14, 2), float64] */
}

def @func_3933(%var_3859: Tensor[(12, 12, 4), float64]) -> (Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) {
  %854 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %855 = %854.0;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(12, 1, 4), float64] */;
  %857 = cast(%var_3859, dtype="float64") /* ty=Tensor[(12, 12, 4), float64] */;
  %858 = @func_1677() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %859 = cast(meta[relay.Constant][40] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %860 = reshape(%859, newshape=[600]) /* ty=Tensor[(600), uint8] */;
  %861 = @func_2506(%860) /* ty=(Tensor[(10, 14, 2), int8], Tensor[(10, 14, 2), uint64], Tensor[(5, 10, 12), float64], Tensor[(600), uint8]) */;
  %862 = floor_mod(%856, %857) /* ty=Tensor[(12, 12, 4), float64] */;
  %863 = @func_2279() /* ty=Tensor[(10, 14, 2), float32] */;
  %864 = %858.1;
  %865 = %861.3;
  (%862, %863, %864, %865, meta[relay.Constant][40] /* ty=Tensor[(600), uint8] */)
}

def @func_3092(%var_3090: Tensor[(600), uint8]) -> (Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  @func_3089(%var_3090) /* ty=(Tensor[(10, 14, 2), bool], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) */
}

def @func_4485() -> Tensor[(10, 14, 2), int32] {
  %866 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
  %866.2
}

def @func_5733() -> Tensor[(10, 14, 2), float32] {
  @func_5731() /* ty=Tensor[(10, 14, 2), float32] */
}

def @func_8058() -> (Tensor[(10, 14, 2), float32],) {
  @func_8056() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_5607() -> (Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) {
  @func_5605() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(11, 11, 15), float32], uint32, Tensor[(480), uint32]) */
}

def @func_5634(%var_5632: Tensor[(600), uint8], %var_5633: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
  %880 = fn (%var_5617: Tensor[(600), uint8], %var_5619: Tensor[(1365), float32]) -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) {
    %867 = cast(%var_5617, dtype="uint8") /* ty=Tensor[(600), uint8] */;
    %868 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
    %869 = cast(%var_5619, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %870 = reshape(%867, newshape=[600]) /* ty=Tensor[(600), uint8] */;
    %871 = reshape(%868, newshape=[660, 1]) /* ty=Tensor[(660, 1), float64] */;
    %872 = reshape(%869, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %873 = @func_2749(%870, %871, %872) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 6, 11), float64], Tensor[(660, 1), float64], Tensor[(1365), float32]) */;
    %874 = @func_5502() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %875 = @func_1088() /* ty=(Tensor[(12, 1, 4), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), int32], Tensor[(15, 13, 7), float32], Tensor[(10, 14, 2), bool], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64], Tensor[(10, 14, 2), float32]) */;
    %876 = @func_5517() /* ty=Tensor[(10, 14, 2), float32] */;
    %877 = %873.0;
    %878 = %874.0;
    %879 = %875.7;
    (%876, %877, %var_5617, meta[relay.Constant][41] /* ty=Tensor[(660), float64] */, %var_5619, %878, %879)
  };
  %880(%var_5632, %var_5633) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(600), uint8], Tensor[(660), float64], Tensor[(1365), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float64]) */
}

def @func_7857(%var_7854: Tensor[(2, 10, 1), float32]) -> Tensor[(2, 10, 1), float32] {
  %881 = cast(%var_7854, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
  exp(%881) /* ty=Tensor[(2, 10, 1), float32] */
}

def @func_7872(%var_7870: Tensor[(7, 13, 6), float64]) -> Tensor[(7, 13, 6), float64] {
  @func_7869(%var_7870) /* ty=Tensor[(7, 13, 6), float64] */
}

def @func_1176(%var_1135: Tensor[(4, 12, 12), float32]) -> (Tensor[(4, 12, 12), uint64],) {
  %882 = cast(%var_1135, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %883 = sinh(%882) /* ty=Tensor[(4, 12, 12), float32] */;
  %884 = cast(%var_1135, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %888 = logical_xor(%886, %887) /* ty=Tensor[(4, 12, 12), uint8] */;
  %889 = cast(%888, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %890 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%883, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %893 = multiply(%891, %892) /* ty=Tensor[(4, 12, 12), uint64] */;
  (%893,)
}

def @func_3228(%var_3177: int64, %var_3178: Tensor[(16, 5, 7), int64], %var_3198: Tensor[(1365), float32]) -> (Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(16, 5, 7), uint16], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  %894 = cast(%var_3198, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %895 = reshape(%894, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %896 = @func_74(%895) /* ty=(Tensor[(15, 13, 7), float32],) */;
  %897 = cast(%var_3177, dtype="bool") /* ty=bool */;
  %898 = cast(%var_3178, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %899 = less_equal(%897, %898) /* ty=Tensor[(16, 5, 7), bool] */;
  %900 = cast(%var_3178, dtype="uint64") /* ty=Tensor[(16, 5, 7), uint64] */;
  %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%899, dtype="uint64") /* ty=Tensor[(16, 5, 7), uint64] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %904 = minimum(%902, %903) /* ty=Tensor[(16, 5, 7), uint64] */;
  %905 = cast(%var_3178, dtype="uint16") /* ty=Tensor[(16, 5, 7), uint16] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="uint16") /* ty=Tensor[(16, 5, 7), uint16] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %909 = %896.0;
  %910 = cast(%909, dtype="float32") /* ty=Tensor[(15, 13, 7), float32] */;
  %911 = reshape(%910, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %912 = @func_637(%911) /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */;
  %913 = maximum(%907, %908) /* ty=Tensor[(16, 5, 7), uint16] */;
  %914 = %912.0;
  %915 = @func_1952() /* ty=Tensor[(10, 14, 2), float32] */;
  (%909, %var_3198, %913, %914, %915)
}

def @func_1213() -> Tensor[(12, 1, 4), float64] {
  @func_1211() /* ty=Tensor[(12, 1, 4), float64] */
}

def @func_6054() -> (Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) {
  @func_6052() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_7377() -> (Tensor[(10, 14, 2), float32],) {
  @func_7375() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_4703() -> (Tensor[(10, 14, 2), float32], Tensor[(5, 10, 12), bool], Tensor[(600), uint8]) {
  %916 = @func_3126() /* ty=(Tensor[(10, 14, 2), float32],) */;
  %917 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %918 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %919 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %920 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), uint8] */, dtype="uint8") /* ty=Tensor[(600), uint8] */;
  %921 = reshape(%917, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %922 = reshape(%918, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %923 = reshape(%919, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %924 = reshape(%920, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint8] */;
  %925 = @func_2090(%921, %922, %923, %924) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(5, 10, 12), bool], Tensor[(5, 10, 12), float64]) */;
  %926 = %916.0;
  %927 = %925.1;
  (%926, %927, meta[relay.Constant][42] /* ty=Tensor[(600), uint8] */)
}

def @func_5662() -> (Tensor[(10, 14, 2), float32], Tensor[(240), float64]) {
  %928 = @func_1895() /* ty=Tensor[(10, 14, 2), float32] */;
  %929 = @func_4600() /* ty=Tensor[(240), float64] */;
  (%928, %929)
}

def @func_1679() -> (Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) {
  @func_1677() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(1365), float32]) */
}

def @func_8056() -> (Tensor[(10, 14, 2), float32],) {
  %930 = @func_6060() /* ty=Tensor[(10, 14, 2), float32] */;
  (%930,)
}

def @func_1201() -> (Tensor[(10, 14, 2), float32],) {
  @func_1199() /* ty=(Tensor[(10, 14, 2), float32],) */
}

def @func_5487() -> Tensor[(1568), int64] {
  %932 = fn () -> Tensor[(1568), int64] {
    %931 = @func_4584() /* ty=(Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(1568), int64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %931.2
  };
  %932() /* ty=Tensor[(1568), int64] */
}

def @func_5303(%var_5299: Tensor[(15, 6, 16), int32], %var_5300: Tensor[(15, 6, 16), int32], %var_5301: Tensor[(1080), float32], %var_5302: Tensor[(1365), float32]) -> (Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) {
  %971 = fn (%var_5184: Tensor[(15, 6, 16), int32], %var_5185: Tensor[(15, 6, 16), int32], %var_5192: Tensor[(1080), float32], %var_5272: Tensor[(1365), float32]) -> (Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) {
    %933 = cast(%var_5192, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %934 = cast(%var_5192, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %935 = cast(meta[relay.Constant][43] /* ty=Tensor[(288, 2), float64] */, dtype="float64") /* ty=Tensor[(288, 2), float64] */;
    %936 = reshape(%933, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
    %937 = reshape(%934, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
    %938 = reshape(%935, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %939 = @func_5170(%936, %937, %938) /* ty=(Tensor[(9, 12, 10), float32], Tensor[(9, 12, 10), bool], Tensor[(9, 12, 10), float32], Tensor[(15, 13, 7), float32], Tensor[(576), float64], Tensor[(10, 14, 2), float32]) */;
    %940 = cast(%var_5185, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
    %941 = shape_of(%var_5184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %942 = cast(%var_5184, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
    %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %944 = subtract(%942, %943) /* ty=Tensor[(15, 6, 16), int32] */;
    %945 = cast(%944, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
    %946 = acosh(%945) /* ty=Tensor[(15, 6, 16), float32] */;
    %947 = cast(%946, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
    %948 = tan(%947) /* ty=Tensor[(15, 6, 16), float64] */;
    %949 = cast(%948, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
    %950 = log10(%949) /* ty=Tensor[(15, 6, 16), float32] */;
    %951 = cast(%var_5184, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
    %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
    %953 = cast(%950, dtype="int32") /* ty=Tensor[(15, 6, 16), int32] */;
    %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %955 = cast(%944, dtype="int8") /* ty=Tensor[(15, 6, 16), int8] */;
    %956 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%946, dtype="int8") /* ty=Tensor[(15, 6, 16), int8] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %959 = @func_1758() /* ty=(Tensor[(10, 14, 2), float64], Tensor[(12, 5, 4), bool], Tensor[(240), float64], Tensor[(10, 14, 2), float32], Tensor[(10, 14, 2), float32]) */;
    %960 = cast(%948, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
    %961 = cast(%var_5272, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %962 = reshape(%961, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %963 = @func_74(%962) /* ty=(Tensor[(15, 13, 7), float32],) */;
    %964 = %939.1;
    %965 = bitwise_or(%953, %954) /* ty=Tensor[(15, 6, 16), int32] */;
    %966 = multiply(%957, %958) /* ty=Tensor[(15, 6, 16), int8] */;
    %967 = %959.0;
    %968 = asin(%960) /* ty=Tensor[(15, 6, 16), float64] */;
    %969 = %963.0;
    %970 = @func_1473() /* ty=Tensor[(10, 14, 2), float32] */;
    (%964, %var_5192, meta[relay.Constant][43] /* ty=Tensor[(288, 2), float64] */, %965, %966, %967, %968, %969, %var_5272, %970)
  };
  %971(%var_5299, %var_5300, %var_5301, %var_5302) /* ty=(Tensor[(9, 12, 10), bool], Tensor[(1080), float32], Tensor[(288, 2), float64], Tensor[(15, 6, 16), int32], Tensor[(15, 6, 16), int8], Tensor[(10, 14, 2), float64], Tensor[(15, 6, 16), float64], Tensor[(15, 13, 7), float32], Tensor[(1365), float32], Tensor[(10, 14, 2), float32]) */
}

def @func_3936(%var_3934: Tensor[(12, 12, 4), float64]) -> (Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) {
  @func_3933(%var_3934) /* ty=(Tensor[(12, 12, 4), float64], Tensor[(10, 14, 2), float32], Tensor[(15, 13, 7), float32], Tensor[(600), uint8], Tensor[(600), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen208/build/output.py", line 2703, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:32] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

