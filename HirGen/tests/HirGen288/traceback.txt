==========mod==========
#[version = "0.0.5"]
def @func_7287() -> Tensor[(11, 10, 3), float64] {
  @func_2161() /* ty=Tensor[(11, 10, 3), float64] */
}

def @func_6899() -> (Tensor[(11, 10, 3), float32],) {
  %0 = @func_3845() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_7528() -> Tensor[(11, 10, 3), float32] {
  %2 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %2.0
}

def @func_2382() -> Tensor[(9, 12, 4), bool] {
  %3 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %3.1
}

def @func_4000(%var_3989: Tensor[(33, 3), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(33, 3), bool]) {
  %4 = cast(%var_3989, dtype="bool") /* ty=Tensor[(33, 3), bool] */;
  %5 = reshape(%4, newshape=[11, 9]) /* ty=Tensor[(11, 9), bool] */;
  %6 = @func_3912(%5) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) */;
  %7 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  %8 = %6.0;
  (%7, %8, %var_3989)
}

def @func_6451(%var_6408: Tensor[(1, 1, 3), int16], %var_6409: Tensor[(10, 13, 3), int16], %var_6444: Tensor[(432), bool]) -> (Tensor[(10, 13, 3), int16], Tensor[(15, 2, 3), int64], Tensor[(9, 12, 4), bool], Tensor[(132), float32], Tensor[(432), bool]) {
  %9 = cast(%var_6408, dtype="int16") /* ty=Tensor[(1, 1, 3), int16] */;
  %10 = cast(%var_6409, dtype="int16") /* ty=Tensor[(10, 13, 3), int16] */;
  %11 = cast(%var_6408, dtype="int64") /* ty=Tensor[(1, 1, 3), int64] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 2, 3), int16] */, dtype="int64") /* ty=Tensor[(15, 2, 3), int64] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %14 = cast(%var_6444, dtype="bool") /* ty=Tensor[(432), bool] */;
  %15 = reshape(%13, newshape=[11, 12]) /* ty=Tensor[(11, 12), float32] */;
  %16 = reshape(%14, newshape=[2, 216]) /* ty=Tensor[(2, 216), bool] */;
  %17 = @func_1316(%15, %16) /* ty=(Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) */;
  %18 = add(%9, %10) /* ty=Tensor[(10, 13, 3), int16] */;
  %19 = minimum(%11, %12) /* ty=Tensor[(15, 2, 3), int64] */;
  %20 = %17.1;
  (%18, %19, %20, meta[relay.Constant][1] /* ty=Tensor[(132), float32] */, %var_6444)
}

def @func_1924(%var_1908: Tensor[(315, 1), float64], %var_1912: Tensor[(240), uint64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) {
  %21 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %22 = cast(-3.3576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %23 = cast(%var_1908, dtype="float64") /* ty=Tensor[(315, 1), float64] */;
  %24 = reshape(%22, newshape=[]) /* ty=float64 */;
  %25 = reshape(%23, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %26 = cast(%var_1912, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %27 = cast(%var_1912, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %28 = cast(-3.3576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %29 = reshape(%26, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %30 = reshape(%27, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %31 = reshape(%28, newshape=[]) /* ty=float64 */;
  %32 = @func_444(%29, %30, %31) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %33 = %21.0;
  %34 = @func_228(%24, %25) /* ty=Tensor[(7, 3, 15), float32] */;
  %35 = %32.0;
  (%33, %34, -3.3576f64 /* ty=float64 */, %var_1908, %35, %var_1912)
}

def @func_4583() -> (Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) {
  %36 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 66), float64] */, dtype="float64") /* ty=Tensor[(14, 66), float64] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 66), float64] */, dtype="float64") /* ty=Tensor[(14, 66), float64] */;
  %39 = reshape(%37, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %40 = reshape(%38, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %41 = @func_1272(%39, %40) /* ty=(Tensor[(7, 11, 12), float64],) */;
  %42 = %36.2;
  %43 = %41.0;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(14, 66), float64] */)
}

def @func_5759(%var_5743: Tensor[(15, 8, 16), bool], %var_5744: Tensor[(15, 8, 16), bool], %var_5757: Tensor[(99), bool]) -> (Tensor[(15, 8, 16), bool], Tensor[(11, 10, 3), float32], Tensor[(99), bool]) {
  %44 = cast(%var_5744, dtype="bool") /* ty=Tensor[(15, 8, 16), bool] */;
  %45 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_5743, dtype="bool") /* ty=Tensor[(15, 8, 16), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(%var_5757, dtype="bool") /* ty=Tensor[(99), bool] */;
  %49 = reshape(%48, newshape=[11, 9]) /* ty=Tensor[(11, 9), bool] */;
  %50 = @func_3912(%49) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) */;
  %51 = logical_or(%46, %47) /* ty=Tensor[(15, 8, 16), bool] */;
  %52 = %50.0;
  (%51, %52, %var_5757)
}

def @func_3572() -> Tensor[(11, 10, 3), float32] {
  @func_2853() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7950() -> (Tensor[(11, 10, 3), float32],) {
  %53 = @func_7528() /* ty=Tensor[(11, 10, 3), float32] */;
  (%53,)
}

def @func_3318(%var_3300: Tensor[(99), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool]) {
  %54 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %55 = cast(%var_3300, dtype="bool") /* ty=Tensor[(99), bool] */;
  %56 = reshape(%55, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
  %57 = @func_2512(%56) /* ty=(Tensor[(11, 3, 3), bool],) */;
  %58 = %54.0;
  %59 = %57.0;
  (%58, %59, %var_3300)
}

def @func_6195() -> (Tensor[(11, 10, 3), float32],) {
  %60 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %61 = %60.0;
  (%61,)
}

def @func_3912(%var_3908: Tensor[(11, 9), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) {
  %62 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %63 = cast(%var_3908, dtype="bool") /* ty=Tensor[(11, 9), bool] */;
  %64 = reshape(%63, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
  %65 = @func_2512(%64) /* ty=(Tensor[(11, 3, 3), bool],) */;
  %66 = %62.0;
  %67 = %65.0;
  (%66, %67, %var_3908)
}

def @func_7760(%var_7749: Tensor[(7, 7, 2), uint16]) -> (Tensor[(7, 7, 2), uint8],) {
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %69 = shape_of(%var_7749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_7749, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %72 = add(%70, %71) /* ty=Tensor[(7, 7, 2), uint16] */;
  %73 = cast(%72, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
  %74 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %77 = bitwise_and(%75, %76) /* ty=Tensor[(7, 7, 2), uint8] */;
  (%77,)
}

def @func_7973() -> (Tensor[(4, 12, 8), float32],) {
  %78 = @func_6546() /* ty=Tensor[(4, 12, 8), float32] */;
  (%78,)
}

def @func_228(%var_199: float64, %var_200: Tensor[(7, 3, 15), float64]) -> Tensor[(7, 3, 15), float32] {
  %79 = cast(%var_199, dtype="float64") /* ty=float64 */;
  %80 = cast(%var_200, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %81 = power(%79, %80) /* ty=Tensor[(7, 3, 15), float64] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  log(%82) /* ty=Tensor[(7, 3, 15), float32] */
}

def @func_4041(%var_4030: float64) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64]) {
  %83 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %84 = cast(%var_4030, dtype="float64") /* ty=float64 */;
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %86 = reshape(%84, newshape=[]) /* ty=float64 */;
  %87 = reshape(%85, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %88 = %83.0;
  %89 = @func_228(%86, %87) /* ty=Tensor[(7, 3, 15), float32] */;
  (%88, %89, %var_4030, meta[relay.Constant][4] /* ty=Tensor[(315), float64] */)
}

def @func_3975(%var_3949: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) {
  %90 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %91 = %90.0;
  %92 = cast(%var_3949, dtype="int32") /* ty=Tensor[(11, 10, 3), int32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="int32") /* ty=Tensor[(11, 10, 3), int32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %97 = reshape(%96, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %98 = @func_2253(%97) /* ty=(Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) */;
  %99 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %100 = right_shift(%94, %95) /* ty=Tensor[(11, 10, 3), int32] */;
  %101 = %98.1;
  %102 = %99.0;
  (%100, %101, meta[relay.Constant][5] /* ty=Tensor[(240), bool] */, %102)
}

def @func_4963() -> (Tensor[(11, 10, 3), float32],) {
  %103 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %104 = %103.0;
  (%104,)
}

def @func_444(%var_385: Tensor[(16, 5, 3), uint64], %var_386: Tensor[(16, 5, 3), uint64], %var_400: float64) -> (float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) {
  %105 = cast(%var_400, dtype="float64") /* ty=float64 */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %107 = reshape(%105, newshape=[]) /* ty=float64 */;
  %108 = reshape(%106, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %109 = @func_228(%107, %108) /* ty=Tensor[(7, 3, 15), float32] */;
  %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = cast(%var_400, dtype="float64") /* ty=float64 */;
  %115 = cast(%109, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %116 = reshape(%114, newshape=[]) /* ty=float64 */;
  %117 = reshape(%115, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %118 = cast(%var_386, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %119 = shape_of(%var_385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_385, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = greater(%120, %121) /* ty=Tensor[(16, 5, 3), bool] */;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %124 = shape_of(%var_385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_385, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = cast(%var_400, dtype="float64") /* ty=float64 */;
  %128 = @func_228(%116, %117) /* ty=Tensor[(7, 3, 15), float32] */;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %130 = reshape(%127, newshape=[]) /* ty=float64 */;
  %131 = reshape(%129, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %132 = floor_divide(%112, %113) /* ty=Tensor[(7, 3, 15), float64] */;
  %133 = less(%125, %126) /* ty=Tensor[(16, 5, 3), bool] */;
  %134 = @func_228(%130, %131) /* ty=Tensor[(7, 3, 15), float32] */;
  (%var_400, %132, %128, %133, %134)
}

def @func_6546() -> Tensor[(4, 12, 8), float32] {
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  asinh(%135) /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_5612() -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 6, 13), float32], Tensor[(546), uint8]) {
  %136 = @func_4963() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(546), uint8] */, dtype="uint8") /* ty=Tensor[(546), uint8] */;
  %138 = cast(meta[relay.Constant][8] /* ty=Tensor[(546), uint8] */, dtype="uint8") /* ty=Tensor[(546), uint8] */;
  %139 = reshape(%137, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint8] */;
  %140 = reshape(%138, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint8] */;
  %141 = @func_3805(%139, %140) /* ty=(Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) */;
  %142 = %136.0;
  %143 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
  %144 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
  %145 = %141.1;
  (%142, %143, %144, %145, meta[relay.Constant][8] /* ty=Tensor[(546), uint8] */)
}

def @func_3805(%var_3789: Tensor[(7, 6, 13), uint8], %var_3790: Tensor[(7, 6, 13), uint8]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
  %146 = cast(%var_3789, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
  %147 = cast(%var_3790, dtype="uint8") /* ty=Tensor[(7, 6, 13), uint8] */;
  %148 = shape_of(%var_3789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_3789, dtype="uint8") /* ty=Tensor[(7, 6, 13), uint8] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %151 = minimum(%149, %150) /* ty=Tensor[(7, 6, 13), uint8] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %153 = rsqrt(%146) /* ty=Tensor[(7, 6, 13), float64] */;
  %154 = log(%152) /* ty=Tensor[(7, 6, 13), float32] */;
  (%153, %154)
}

def @func_5937() -> (Tensor[(11, 10, 3), float32],) {
  %155 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
  (%155,)
}

def @func_3375() -> Tensor[(11, 10, 3), float32] {
  %156 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %156.0
}

def @func_6766() -> (Tensor[(11, 10, 3), float32], Tensor[(14, 66), float64]) {
  %157 = @func_3561() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %158 = @func_4583() /* ty=(Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) */;
  %159 = %157.0;
  %160 = %158.2;
  (%159, %160)
}

def @func_2059() -> Tensor[(11, 10, 3), float32] {
  %161 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %161.0
}

def @func_5796(%var_5785: Tensor[(750), float64]) -> (Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) {
  %162 = @func_3542() /* ty=(Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) */;
  %163 = %162.3;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %165 = reshape(%164, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %166 = @func_5660(%165) /* ty=(Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) */;
  %167 = cast(%var_5785, dtype="float64") /* ty=Tensor[(750), float64] */;
  %168 = reshape(%167, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %169 = @func_5437(%168) /* ty=(Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) */;
  %170 = %169.4;
  %171 = cast(%var_5785, dtype="bool") /* ty=Tensor[(750), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(750), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), bool] */;
  %175 = %166.0;
  %176 = logical_or(%173, %174) /* ty=Tensor[(750), bool] */;
  (%163, %175, %176)
}

def @func_2161() -> Tensor[(11, 10, 3), float64] {
  %177 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  log(%178) /* ty=Tensor[(11, 10, 3), float64] */
}

def @func_6327() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %179 = @func_3572() /* ty=Tensor[(11, 10, 3), float32] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %181 = acosh(%180) /* ty=Tensor[(11, 10, 3), float32] */;
  %182 = @func_5162() /* ty=Tensor[(11, 10, 3), float32] */;
  (%181, %182)
}

def @func_8268(%var_8263: Tensor[(1, 1200), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(10, 12, 10), bool], Tensor[(1, 1200), float64]) {
  %183 = @func_6195() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %184 = cast(%var_8263, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
  %185 = reshape(%184, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %186 = @func_4259(%185) /* ty=(Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) */;
  %187 = @func_7528() /* ty=Tensor[(11, 10, 3), float32] */;
  %188 = %183.0;
  %189 = %186.0;
  (%187, %188, %189, %var_8263)
}

def @func_987(%var_972: Tensor[(9, 12, 4), bool], %var_973: Tensor[(9, 12, 4), bool]) -> (Tensor[(9, 12, 4), bool],) {
  %190 = cast(%var_973, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %191 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = logical_and(%192, %193) /* ty=Tensor[(9, 12, 4), bool] */;
  %195 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = less_equal(%197, %198) /* ty=Tensor[(9, 12, 4), bool] */;
  (%199,)
}

def @func_8113() -> (Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32]) {
  %200 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
  %201 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  (%200, %201)
}

def @func_2410() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %202 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %203 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  (%202, %203)
}

def @func_4866() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_8244() -> (Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  %204 = @func_4478() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) */;
  %205 = @func_3845() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %206 = %204.1;
  %207 = %205.0;
  (%206, %207)
}

def @func_6840(%var_6829: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
  %208 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %209 = %208.0;
  %210 = cast(%var_6829, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %214 = mod(%212, %213) /* ty=Tensor[(11, 10, 3), float64] */;
  (%214,)
}

def @func_1668() -> Tensor[(11, 10, 3), float32] {
  %215 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %215.0
}

def @func_2604() -> (Tensor[(11, 10, 3), float32],) {
  %216 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  (%216,)
}

def @func_5202(%var_5183: Tensor[(4, 11, 12), float32]) -> (Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
  %217 = cast(%var_5183, dtype="float32") /* ty=Tensor[(4, 11, 12), float32] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %219 = reshape(%218, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %220 = @func_3693(%219) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */;
  %221 = sinh(%217) /* ty=Tensor[(4, 11, 12), float32] */;
  %222 = %220.1;
  (%221, %222, meta[relay.Constant][9] /* ty=Tensor[(924), float64] */)
}

def @func_2253(%var_2236: Tensor[(8, 30), bool]) -> (Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) {
  %223 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), uint8] */, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %224 = reshape(%223, newshape=[840]) /* ty=Tensor[(840), uint8] */;
  %225 = @func_2117(%224) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) */;
  %226 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %227 = %226.0;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %229 = asinh(%228) /* ty=Tensor[(11, 10, 3), float32] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %231 = cast(%var_2236, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %232 = reshape(%231, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %233 = @func_1825(%232) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %236 = %225.3;
  %237 = cosh(%230) /* ty=Tensor[(11, 10, 3), float64] */;
  %238 = log2(%235) /* ty=Tensor[(7, 3, 15), float64] */;
  (%236, meta[relay.Constant][10] /* ty=Tensor[(840), uint8] */, %var_2236, %237, %238)
}

def @func_5437(%var_5432: Tensor[(750), float64]) -> (Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) {
  %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
  %240 = reshape(%239, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %241 = @func_1825(%240) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
  %242 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %243 = %242.0;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %245 = cast(%var_5432, dtype="float64") /* ty=Tensor[(750), float64] */;
  %246 = %241.7;
  %247 = cast(%246, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %248 = reshape(%245, newshape=[15, 10, 5]) /* ty=Tensor[(15, 10, 5), float64] */;
  %249 = reshape(%247, newshape=[240]) /* ty=Tensor[(240), bool] */;
  %250 = @func_2713(%248, %249) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) */;
  %251 = cast(meta[relay.Constant][12] /* ty=Tensor[(420, 2), uint8] */, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
  %252 = reshape(%251, newshape=[840]) /* ty=Tensor[(840), uint8] */;
  %253 = @func_1963(%252) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) */;
  %254 = sinh(%244) /* ty=Tensor[(11, 10, 3), float32] */;
  %255 = %250.3;
  %256 = %253.0;
  (%246, meta[relay.Constant][11] /* ty=Tensor[(240, 1), bool] */, %254, %255, %var_5432, %256, meta[relay.Constant][12] /* ty=Tensor[(420, 2), uint8] */)
}

def @func_7091(%var_7032: Tensor[(5, 4, 9), float32], %var_7066: Tensor[(11, 10, 3), float32]) -> (Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) {
  %257 = cast(%var_7032, dtype="float32") /* ty=Tensor[(5, 4, 9), float32] */;
  %258 = sinh(%257) /* ty=Tensor[(5, 4, 9), float32] */;
  %259 = cast(%var_7032, dtype="uint64") /* ty=Tensor[(5, 4, 9), uint64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="uint64") /* ty=Tensor[(5, 4, 9), uint64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %263 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %264 = %263.0;
  %265 = cast(%var_7066, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = subtract(%261, %262) /* ty=Tensor[(5, 4, 9), uint64] */;
  %270 = minimum(%267, %268) /* ty=Tensor[(11, 10, 3), float32] */;
  (%269, %270)
}

def @func_7382(%var_7366: Tensor[(1, 750), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(8, 9, 16), int8], Tensor[(11, 10, 3), int8], Tensor[(1, 750), float64], Tensor[(8, 9, 16), float64]) {
  %271 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
  %272 = asin(%271) /* ty=Tensor[(8, 9, 16), float64] */;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(8, 9, 16), float32] */;
  %274 = rsqrt(%273) /* ty=Tensor[(8, 9, 16), float32] */;
  %275 = cast(%274, dtype="uint16") /* ty=Tensor[(8, 9, 16), uint16] */;
  %276 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%272, dtype="uint16") /* ty=Tensor[(8, 9, 16), uint16] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %279 = logical_xor(%277, %278) /* ty=Tensor[(8, 9, 16), uint16] */;
  %280 = cast(%272, dtype="int8") /* ty=Tensor[(8, 9, 16), int8] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="int8") /* ty=Tensor[(8, 9, 16), int8] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %284 = cast(%var_7366, dtype="float64") /* ty=Tensor[(1, 750), float64] */;
  %285 = reshape(%284, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %286 = @func_5796(%285) /* ty=(Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) */;
  %287 = cast(%279, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
  %288 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %289 = minimum(%282, %283) /* ty=Tensor[(8, 9, 16), int8] */;
  %290 = %286.0;
  %291 = exp(%287) /* ty=Tensor[(8, 9, 16), float64] */;
  (%288, %289, %290, %var_7366, %291)
}

def @func_5127(%var_5080: Tensor[(4, 12, 2), float64], %var_5081: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) {
  %292 = cast(%var_5080, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %293 = cast(%var_5081, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %294 = exp(%293) /* ty=Tensor[(4, 12, 2), float64] */;
  %295 = cast(%var_5081, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %296 = shape_of(%var_5080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_5080, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %299 = floor_divide(%297, %298) /* ty=Tensor[(4, 12, 2), float64] */;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %301 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%294, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %304 = cast(%var_5081, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %305 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%294, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = greater(%306, %307) /* ty=Tensor[(4, 12, 2), bool] */;
  %309 = cast(%294, dtype="int64") /* ty=Tensor[(4, 12, 2), int64] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="int64") /* ty=Tensor[(4, 12, 2), int64] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %313 = cast(%299, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %314 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%308, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %317 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %318 = asin(%292) /* ty=Tensor[(4, 12, 2), float64] */;
  %319 = divide(%302, %303) /* ty=Tensor[(4, 12, 2), float64] */;
  %320 = bitwise_xor(%311, %312) /* ty=Tensor[(4, 12, 2), int64] */;
  %321 = maximum(%315, %316) /* ty=Tensor[(4, 12, 2), float32] */;
  %322 = %317.2;
  (%318, %319, %320, %321, %322)
}

def @func_8125(%var_8123: Tensor[(7, 132), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 132), float64]) {
  %323 = @func_5519() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) */;
  %324 = cast(%var_8123, dtype="float64") /* ty=Tensor[(7, 132), float64] */;
  %325 = reshape(%324, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %326 = @func_3277(%325) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %327 = %323.1;
  %328 = %326.4;
  (%327, %328, %var_8123)
}

def @func_7172(%var_7156: Tensor[(40), int64]) -> (Tensor[(5, 4, 2), float64], Tensor[(11, 10, 3), float32]) {
  %329 = cast(%var_7156, dtype="int64") /* ty=Tensor[(40), int64] */;
  %330 = reshape(%329, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), int64] */;
  %331 = @func_4609(%330) /* ty=Tensor[(5, 4, 2), float32] */;
  %332 = cast(%var_7156, dtype="float64") /* ty=Tensor[(40), float64] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = @func_4536() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %339 = mod(%334, %335) /* ty=Tensor[(5, 4, 2), float64] */;
  %340 = sqrt(%338) /* ty=Tensor[(11, 10, 3), float32] */;
  (%339, %340)
}

def @func_5660(%var_5638: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  %341 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
  %342 = cast(%var_5638, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %347 = logical_and(%344, %345) /* ty=Tensor[(11, 10, 3), bool] */;
  %348 = @func_2161() /* ty=Tensor[(11, 10, 3), float64] */;
  %349 = %346.0;
  (%347, %348, %349)
}

def @func_5770() -> (Tensor[(11, 10, 3), float32],) {
  %350 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  (%350,)
}

def @func_4543(%var_4538: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), float64] {
  %351 = cast(%var_4538, dtype="float64") /* ty=Tensor[(7, 1, 13), float64] */;
  erf(%351) /* ty=Tensor[(7, 1, 13), float64] */
}

def @func_7628() -> Tensor[(11, 10, 3), float32] {
  %352 = @func_5563() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %352.1
}

def @func_8056(%var_8051: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float64], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  %353 = cast(%var_8051, dtype="float64") /* ty=Tensor[(91), float64] */;
  %354 = reshape(%353, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %355 = @func_7287() /* ty=Tensor[(11, 10, 3), float64] */;
  %356 = @func_4543(%354) /* ty=Tensor[(7, 1, 13), float64] */;
  (%355, %356, %var_8051)
}

def @func_3099(%var_3077: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
  %357 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
  %358 = cast(%var_3077, dtype="uint32") /* ty=Tensor[(11, 10, 3), uint32] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="uint32") /* ty=Tensor[(11, 10, 3), uint32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %362 = maximum(%360, %361) /* ty=Tensor[(11, 10, 3), uint32] */;
  %363 = cast(%var_3077, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %367 = divide(%365, %366) /* ty=Tensor[(11, 10, 3), float64] */;
  (%367,)
}

def @func_6136() -> Tensor[(11, 10, 3), float32] {
  @func_2853() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_3845() -> (Tensor[(11, 10, 3), float32],) {
  %368 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  (%368,)
}

def @func_1418(%var_1407: Tensor[(4, 15, 14), uint8]) -> Tensor[(4, 15, 14), bool] {
  %369 = cast(%var_1407, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %370 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%371, %372) /* ty=Tensor[(4, 15, 14), bool] */
}

def @func_3043() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_6481() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %373 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %376 = reshape(%375, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %377 = @func_3975(%376) /* ty=(Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) */;
  %378 = %377.3;
  (%374, %378)
}

def @func_1272(%var_1264: Tensor[(7, 11, 12), float64], %var_1265: Tensor[(7, 11, 12), float64]) -> (Tensor[(7, 11, 12), float64],) {
  %379 = cast(%var_1265, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %380 = shape_of(%var_1264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_1264, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %383 = power(%381, %382) /* ty=Tensor[(7, 11, 12), float64] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %385 = acosh(%384) /* ty=Tensor[(7, 11, 12), float64] */;
  (%385,)
}

def @func_6718(%var_6692: Tensor[(11, 13, 10), bool]) -> (Tensor[(11, 13, 10), int8], Tensor[(11, 13, 10), float64]) {
  %386 = @func_5715() /* ty=Tensor[(11, 13, 10), bool] */;
  %387 = cast(%var_6692, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %391 = left_shift(%389, %390) /* ty=Tensor[(11, 13, 10), uint8] */;
  %392 = cast(%391, dtype="int8") /* ty=Tensor[(11, 13, 10), int8] */;
  %393 = shape_of(%var_6692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_6692, dtype="int8") /* ty=Tensor[(11, 13, 10), int8] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %396 = cast(%386, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %397 = cos(%396) /* ty=Tensor[(11, 13, 10), float64] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %399 = right_shift(%394, %395) /* ty=Tensor[(11, 13, 10), int8] */;
  %400 = acosh(%398) /* ty=Tensor[(11, 13, 10), float64] */;
  (%399, %400)
}

def @func_7745() -> (Tensor[(11, 10, 3), float32],) {
  %401 = @func_3542() /* ty=(Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) */;
  %402 = %401.2;
  (%402,)
}

def @func_2027() -> Tensor[(11, 10, 3), float32] {
  %403 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %403.0
}

def @func_7912() -> (Tensor[(11, 10, 3), float32],) {
  %404 = @func_7628() /* ty=Tensor[(11, 10, 3), float32] */;
  (%404,)
}

def @func_5734(%var_5719: Tensor[(6, 1, 11), int16]) -> (Tensor[(6, 1, 11), int16],) {
  %405 = cast(meta[relay.Constant][15] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %406 = cast(%var_5719, dtype="int16") /* ty=Tensor[(6, 1, 11), int16] */;
  %407 = logical_xor(%405, %406) /* ty=Tensor[(6, 1, 11), int16] */;
  (%407,)
}

def @func_2274(%var_2267: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64], Tensor[(240), bool], Tensor[(4, 15, 14), bool], Tensor[(840), uint8]) {
  %408 = cast(%var_2267, dtype="bool") /* ty=Tensor[(240), bool] */;
  %409 = reshape(%408, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %410 = @func_2253(%409) /* ty=(Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) */;
  %411 = cast(meta[relay.Constant][16] /* ty=Tensor[(840), uint8] */, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %412 = reshape(%411, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
  %413 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %414 = %410.3;
  %415 = @func_1418(%412) /* ty=Tensor[(4, 15, 14), bool] */;
  (%413, %414, %var_2267, %415, meta[relay.Constant][16] /* ty=Tensor[(840), uint8] */)
}

def @func_2948() -> Tensor[(11, 10, 3), float32] {
  %416 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %416.0
}

def @func_2431() -> (Tensor[(11, 10, 3), float32],) {
  %417 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  (%417,)
}

def @func_2713(%var_2701: Tensor[(15, 10, 5), float64], %var_2707: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) {
  %418 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %419 = atanh(%418) /* ty=Tensor[(15, 10, 5), float32] */;
  %420 = cast(%419, dtype="bool") /* ty=Tensor[(15, 10, 5), bool] */;
  %421 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 10, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 10, 5), float32] */, dtype="bool") /* ty=Tensor[(15, 10, 5), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = equal(%422, %423) /* ty=Tensor[(15, 10, 5), bool] */;
  %425 = cast(%419, dtype="uint8") /* ty=Tensor[(15, 10, 5), uint8] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="uint8") /* ty=Tensor[(15, 10, 5), uint8] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %429 = bitwise_xor(%427, %428) /* ty=Tensor[(15, 10, 5), uint8] */;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %431 = erf(%430) /* ty=Tensor[(15, 10, 5), float32] */;
  %432 = cast(%424, dtype="float64") /* ty=Tensor[(15, 10, 5), float64] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="float64") /* ty=Tensor[(15, 10, 5), float64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %436 = mod(%434, %435) /* ty=Tensor[(15, 10, 5), float64] */;
  %437 = cast(%var_2701, dtype="uint16") /* ty=Tensor[(15, 10, 5), uint16] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint16") /* ty=Tensor[(15, 10, 5), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %441 = cast(%var_2707, dtype="bool") /* ty=Tensor[(240), bool] */;
  %442 = reshape(%441, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %443 = @func_1825(%442) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
  %444 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  %445 = right_shift(%439, %440) /* ty=Tensor[(15, 10, 5), uint16] */;
  %446 = %443.7;
  (%444, %445, %446, %var_2707)
}

def @func_5264() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %447 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %449 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
  %450 = atan(%448) /* ty=Tensor[(11, 10, 3), float32] */;
  (%449, %450)
}

def @func_1864() -> (Tensor[(11, 10, 3), float32],) {
  %451 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  (%451,)
}

def @func_2117(%var_2095: Tensor[(840), uint8]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) {
  %452 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %453 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %454 = reshape(%453, newshape=[840]) /* ty=Tensor[(840), uint8] */;
  %455 = @func_1963(%454) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) */;
  %456 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %457 = reshape(%456, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
  %458 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %459 = cast(%var_2095, dtype="float32") /* ty=Tensor[(840), float32] */;
  %460 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %461 = %452.0;
  %462 = %455.3;
  %463 = @func_1418(%457) /* ty=Tensor[(4, 15, 14), bool] */;
  %464 = %458.0;
  %465 = sqrt(%459) /* ty=Tensor[(840), float32] */;
  (%460, %461, %462, %463, %464, %465)
}

def @func_3693(%var_3677: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
  %466 = cast(%var_3677, dtype="float64") /* ty=Tensor[(924), float64] */;
  %467 = reshape(%466, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %468 = @func_3277(%467) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %469 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
  %470 = %468.1;
  (%469, %470, %var_3677)
}

def @func_5240(%var_5238: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) {
  %471 = cast(%var_5238, dtype="float32") /* ty=Tensor[(528), float32] */;
  %472 = reshape(%471, newshape=[4, 11, 12]) /* ty=Tensor[(4, 11, 12), float32] */;
  %473 = @func_5202(%472) /* ty=(Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */;
  %474 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  %475 = %473.0;
  (%474, %475, %var_5238)
}

def @func_4259(%var_4222: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) {
  %476 = cast(%var_4222, dtype="bool") /* ty=Tensor[(10, 12, 10), bool] */;
  %477 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 12, 10), float64] */, dtype="bool") /* ty=Tensor[(10, 12, 10), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %481 = reshape(%480, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %482 = @func_2365(%481) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) */;
  %483 = %482.5;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %485 = less(%478, %479) /* ty=Tensor[(10, 12, 10), bool] */;
  %486 = sinh(%484) /* ty=Tensor[(24, 10), float32] */;
  (%485, meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, %486)
}

def @func_5343() -> (Tensor[(11, 10, 3), float32],) {
  %487 = @func_4745() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %488 = %487.0;
  %489 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %493 = floor_mod(%491, %492) /* ty=Tensor[(11, 10, 3), float32] */;
  (%493,)
}

def @func_6921(%var_6905: Tensor[(10, 1, 10), float64], %var_6911: Tensor[(96), float64]) -> (Tensor[(10, 5, 10), float64], Tensor[(4, 12, 2), int64], Tensor[(96), float64]) {
  %494 = cast(%var_6905, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %495 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 10), float64] */;
  %496 = cast(%var_6911, dtype="float64") /* ty=Tensor[(96), float64] */;
  %497 = cast(%var_6911, dtype="float64") /* ty=Tensor[(96), float64] */;
  %498 = reshape(%496, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %499 = reshape(%497, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %500 = @func_5127(%498, %499) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) */;
  %501 = power(%494, %495) /* ty=Tensor[(10, 5, 10), float64] */;
  %502 = %500.2;
  (%501, %502, %var_6911)
}

def @func_4318() -> (Tensor[(11, 10, 3), float32],) {
  %503 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
  (%503,)
}

def @func_6626() -> Tensor[(11, 10, 3), float32] {
  %504 = @func_6481() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %504.0
}

def @func_7189(%var_7182: Tensor[(13, 15, 13), float64]) -> (Tensor[(13, 15, 13), float64],) {
  %505 = cast(%var_7182, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %506 = acos(%505) /* ty=Tensor[(13, 15, 13), float64] */;
  (%506,)
}

def @func_7217(%var_7201: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 10, 3), float32], Tensor[(924), float64]) {
  %507 = @func_5937() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %508 = cast(%var_7201, dtype="float32") /* ty=Tensor[(528), float32] */;
  %509 = reshape(%508, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %510 = @func_5240(%509) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) */;
  %511 = cast(meta[relay.Constant][22] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %512 = %507.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %514 = reshape(%511, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %515 = reshape(%513, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %516 = @func_3224(%514, %515) /* ty=(Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) */;
  %517 = %510.2;
  %518 = %516.3;
  (%512, %517, %var_7201, %518, meta[relay.Constant][22] /* ty=Tensor[(924), float64] */)
}

def @func_7683(%var_7639: Tensor[(11, 13, 14), float64], %var_7661: Tensor[(91, 1), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(7, ?, 13), float64], Tensor[(91, 1), float64]) {
  %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %520 = shape_of(%var_7639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_7639, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %523 = floor_divide(%521, %522) /* ty=Tensor[(11, 13, 14), float64] */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = cast(%var_7661, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %529 = reshape(%528, newshape=[91]) /* ty=Tensor[(91), float64] */;
  %530 = @func_5061(%529) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) */;
  %531 = power(%526, %527) /* ty=Tensor[(11, 13, 14), float64] */;
  %532 = %530.3;
  (%531, %532, %var_7661)
}

def @func_3561() -> (Tensor[(11, 10, 3), float32],) {
  %533 = @func_3375() /* ty=Tensor[(11, 10, 3), float32] */;
  (%533,)
}

def @func_7312() -> (Tensor[(11, 10, 3), float32],) {
  %534 = @func_5563() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %535 = %534.0;
  (%535,)
}

def @func_5519() -> (Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) {
  %536 = @func_4745() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %537 = @func_4583() /* ty=(Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) */;
  %538 = %536.0;
  %539 = %537.0;
  %540 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  (%538, %539, %540)
}

def @func_4424(%var_4397: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), uint64], Tensor[(11, 10, 3), float32]) {
  %541 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %542 = %541.0;
  %543 = cast(%var_4397, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %547 = bitwise_or(%545, %546) /* ty=Tensor[(11, 10, 3), uint64] */;
  %548 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  (%547, %548)
}

def @func_8206() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
  %549 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %550 = @func_7745() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %553 = %549.0;
  %554 = acos(%552) /* ty=Tensor[(11, 10, 3), float64] */;
  (%553, %554)
}

def @func_2495() -> Tensor[(11, 10, 3), float32] {
  %555 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %555.0
}

def @func_2982(%var_2962: Tensor[(9, 8, 16), int8], %var_2963: Tensor[(9, 8, 16), int8]) -> Tensor[(9, 8, 16), float32] {
  %556 = cast(%var_2963, dtype="int8") /* ty=Tensor[(9, 8, 16), int8] */;
  %557 = shape_of(%var_2962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_2962, dtype="int8") /* ty=Tensor[(9, 8, 16), int8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %560 = bitwise_or(%558, %559) /* ty=Tensor[(9, 8, 16), int8] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %562 = shape_of(%var_2963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_2963, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%563, %564) /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_5563() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %565 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %566 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  %567 = %565.0;
  (%566, %567)
}

def @func_1316(%var_1292: Tensor[(11, 12), float32], %var_1304: Tensor[(2, 216), bool]) -> (Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) {
  %568 = cast(%var_1292, dtype="float32") /* ty=Tensor[(11, 12), float32] */;
  %569 = cast(%var_1304, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %570 = cast(%var_1304, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %571 = reshape(%569, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %572 = reshape(%570, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %573 = @func_987(%571, %572) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %574 = atan(%568) /* ty=Tensor[(11, 12), float32] */;
  %575 = %573.0;
  (%574, %575, %var_1304)
}

def @func_7504() -> (Tensor[(11, 13, 10), float64],) {
  %576 = @func_5715() /* ty=Tensor[(11, 13, 10), bool] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %578 = asin(%577) /* ty=Tensor[(11, 13, 10), float64] */;
  (%578,)
}

def @func_7589(%var_7577: Tensor[(315), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64], Tensor[(5, 4, 9), uint64], Tensor[(180), float32]) {
  %579 = @func_5519() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) */;
  %580 = cast(1.62936f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %581 = cast(%var_7577, dtype="float64") /* ty=Tensor[(315), float64] */;
  %582 = reshape(%580, newshape=[]) /* ty=float64 */;
  %583 = reshape(%581, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %584 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %585 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %587 = reshape(%584, newshape=[5, 4, 9]) /* ty=Tensor[(5, 4, 9), float32] */;
  %588 = reshape(%586, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %589 = @func_7091(%587, %588) /* ty=(Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) */;
  %590 = %579.1;
  %591 = @func_228(%582, %583) /* ty=Tensor[(7, 3, 15), float32] */;
  %592 = %589.0;
  (%590, %585, %591, 1.62936f64 /* ty=float64 */, %var_7577, %592, meta[relay.Constant][24] /* ty=Tensor[(180), float32] */)
}

def @func_4536() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %593 = @func_3561() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %594 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %595 = %593.0;
  %596 = %594.0;
  (%595, %596)
}

def @func_4827(%var_4790: Tensor[(1200), float64], %var_4812: Tensor[(24, 10), float32]) -> (Tensor[(432), bool], Tensor[(1200), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int32], Tensor[(24, 10), uint16], Tensor[(24, 10), float64]) {
  %597 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %598 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %601 = reshape(%600, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %602 = @func_3975(%601) /* ty=(Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) */;
  %603 = cast(%var_4790, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %604 = reshape(%603, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %605 = @func_4259(%604) /* ty=(Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) */;
  %606 = %605.2;
  %607 = cast(%var_4812, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(2), int32] */;
  %609 = cast(%606, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %611 = power(%609, %610) /* ty=Tensor[(24, 10), float64] */;
  %612 = cast(%606, dtype="uint16") /* ty=Tensor[(24, 10), uint16] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(2), int32] */;
  %614 = cast(%611, dtype="uint16") /* ty=Tensor[(24, 10), uint16] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %616 = cast(%606, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %617 = %597.2;
  %618 = %602.0;
  %619 = minimum(%614, %615) /* ty=Tensor[(24, 10), uint16] */;
  %620 = atanh(%616) /* ty=Tensor[(24, 10), float64] */;
  (%617, %var_4790, %599, %618, %619, %620)
}

def @func_3224(%var_3133: Tensor[(924), float64], %var_3177: Tensor[(11, 10, 3), float32]) -> (Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) {
  %621 = cast(%var_3133, dtype="float64") /* ty=Tensor[(924), float64] */;
  %622 = cast(%var_3133, dtype="float64") /* ty=Tensor[(924), float64] */;
  %623 = reshape(%621, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %624 = reshape(%622, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %625 = @func_1272(%623, %624) /* ty=(Tensor[(7, 11, 12), float64],) */;
  %626 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  %627 = cast(%var_3177, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %632 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %633 = %625.0;
  %634 = not_equal(%629, %630) /* ty=Tensor[(11, 10, 3), bool] */;
  %635 = %631.0;
  %636 = %632.2;
  (%633, %var_3133, %634, %635, %636)
}

def @func_2218() -> (Tensor[(11, 10, 3), float32],) {
  %637 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %638 = %637.0;
  (%638,)
}

def @func_4745() -> (Tensor[(11, 10, 3), float32],) {
  %639 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %640 = %639.0;
  (%640,)
}

def @func_3277(%var_3245: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %641 = cast(%var_3245, dtype="float64") /* ty=Tensor[(924), float64] */;
  %642 = cast(%var_3245, dtype="float64") /* ty=Tensor[(924), float64] */;
  %643 = reshape(%641, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %644 = reshape(%642, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %645 = @func_1272(%643, %644) /* ty=(Tensor[(7, 11, 12), float64],) */;
  %646 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %647 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %648 = %645.0;
  %649 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %650 = %646.0;
  (%647, %648, %var_3245, %649, %650)
}

def @func_7611() -> Tensor[(11, 10, 3), float32] {
  %651 = @func_5770() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %651.0
}

def @func_3476() -> (Tensor[(11, 10, 3), float64],) {
  %652 = @func_2161() /* ty=Tensor[(11, 10, 3), float64] */;
  (%652,)
}

def @func_7855() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  %653 = @func_7312() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %654 = cast(meta[relay.Constant][25] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %655 = reshape(%654, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %656 = %653.0;
  %657 = @func_4543(%655) /* ty=Tensor[(7, 1, 13), float64] */;
  (%656, %657, meta[relay.Constant][25] /* ty=Tensor[(91), float64] */)
}

def @func_3542() -> (Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) {
  %658 = @func_3476() /* ty=(Tensor[(11, 10, 3), float64],) */;
  %659 = %658.0;
  %660 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
  %661 = cast(%660, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %662 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%659, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %666 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %667 = cast(%660, dtype="int8") /* ty=Tensor[(11, 10, 3), int8] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="int8") /* ty=Tensor[(11, 10, 3), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %671 = less(%663, %664) /* ty=Tensor[(11, 10, 3), bool] */;
  %672 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
  %673 = %665.0;
  %674 = bitwise_and(%669, %670) /* ty=Tensor[(11, 10, 3), int8] */;
  (%671, %672, %673, %674)
}

def @func_5715() -> Tensor[(11, 13, 10), bool] {
  %675 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 13, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %676 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(11, 13, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 13, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%677, %678) /* ty=Tensor[(11, 13, 10), bool] */
}

def @func_1963(%var_1955: Tensor[(840), uint8]) -> (Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) {
  %679 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %680 = cast(%var_1955, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %681 = reshape(%680, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
  %682 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %683 = %679.1;
  %684 = @func_1418(%681) /* ty=Tensor[(4, 15, 14), bool] */;
  %685 = %682.0;
  (%683, %684, %var_1955, %685)
}

def @func_7410() -> (Tensor[(11, 10, 3), float32],) {
  %686 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  (%686,)
}

def @func_4889(%var_4883: Tensor[(5, 3, 3), float32]) -> (Tensor[(5, 3, 3), float32],) {
  %687 = cast(%var_4883, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %688 = rsqrt(%687) /* ty=Tensor[(5, 3, 3), float32] */;
  (%688,)
}

def @func_8136() -> Tensor[(11, 10, 3), float32] {
  @func_2578() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_4609(%var_4599: Tensor[(5, 4, 2), int64]) -> Tensor[(5, 4, 2), float32] {
  %689 = cast(%var_4599, dtype="int64") /* ty=Tensor[(5, 4, 2), int64] */;
  %690 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 4, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 2), int64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %693 = bitwise_and(%691, %692) /* ty=Tensor[(5, 4, 2), int64] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
  atanh(%694) /* ty=Tensor[(5, 4, 2), float32] */
}

def @func_1626() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) {
  %695 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %696 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %697 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %698 = cast(0.475677f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %699 = reshape(%696, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %700 = reshape(%697, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %701 = reshape(%698, newshape=[]) /* ty=float64 */;
  %702 = @func_444(%699, %700, %701) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %703 = rsqrt(%695) /* ty=Tensor[(11, 10, 3), float32] */;
  %704 = %702.2;
  (%703, %704, meta[relay.Constant][30] /* ty=Tensor[(8, 30), uint64] */, 0.475677f64 /* ty=float64 */)
}

def @func_4478() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
  %705 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %708 = @func_3375() /* ty=Tensor[(11, 10, 3), float32] */;
  %709 = tan(%707) /* ty=Tensor[(11, 10, 3), float64] */;
  (%708, %709)
}

def @func_1892() -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) {
  %710 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %712 = cast(meta[relay.Constant][31] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %713 = cast(meta[relay.Constant][31] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %714 = reshape(%712, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %715 = reshape(%713, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %716 = @func_987(%714, %715) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %717 = exp(%711) /* ty=Tensor[(11, 10, 3), float32] */;
  %718 = %716.0;
  (%717, %718, meta[relay.Constant][31] /* ty=Tensor[(432), bool] */)
}

def @main(%var_8405: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), uint16],) {
  %719 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %720 = %719.0;
  %721 = cast(%var_8405, dtype="uint16") /* ty=Tensor[(11, 10, 3), uint16] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="uint16") /* ty=Tensor[(11, 10, 3), uint16] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %725 = bitwise_xor(%723, %724) /* ty=Tensor[(11, 10, 3), uint16] */;
  (%725,)
}

def @func_6030() -> (Tensor[(11, 10, 3), float32],) {
  %726 = @func_5770() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %727 = %726.0;
  (%727,)
}

def @func_2365(%var_2324: Tensor[(24, 10), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) {
  %728 = cast(meta[relay.Constant][32] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %729 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 10), uint64] */, dtype="uint64") /* ty=Tensor[(24, 10), uint64] */;
  %730 = reshape(%728, newshape=[315, 1]) /* ty=Tensor[(315, 1), float64] */;
  %731 = reshape(%729, newshape=[240]) /* ty=Tensor[(240), uint64] */;
  %732 = @func_1924(%730, %731) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) */;
  %733 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %734 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 10), uint64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %735 = log(%734) /* ty=Tensor[(24, 10), float64] */;
  %736 = cast(%var_2324, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(2), int32] */;
  %738 = cast(%735, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %740 = mod(%738, %739) /* ty=Tensor[(24, 10), float64] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %742 = cosh(%741) /* ty=Tensor[(24, 10), float64] */;
  %743 = cast(%740, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(2), int32] */;
  %745 = cast(%742, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %747 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %748 = %732.1;
  %749 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %750 = %733.2;
  %751 = maximum(%745, %746) /* ty=Tensor[(24, 10), float64] */;
  (%747, %748, meta[relay.Constant][32] /* ty=Tensor[(315), float64] */, %749, %750, %751)
}

def @func_5061(%var_5032: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) {
  %752 = cast(meta[relay.Constant][34] /* ty=Tensor[(99), bool] */, dtype="bool") /* ty=Tensor[(99), bool] */;
  %753 = reshape(%752, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
  %754 = @func_2512(%753) /* ty=(Tensor[(11, 3, 3), bool],) */;
  %755 = cast(%var_5032, dtype="float64") /* ty=Tensor[(91), float64] */;
  %756 = reshape(%755, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %757 = @func_4543(%756) /* ty=Tensor[(7, 1, 13), float64] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  %759 = log2(%758) /* ty=Tensor[(7, 1, 13), float32] */;
  %760 = cast(%var_5032, dtype="float64") /* ty=Tensor[(91), float64] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="float64") /* ty=Tensor[(7, 1, 13), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %764 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  %765 = %754.0;
  %766 = floor_divide(%762, %763) /* ty=Tensor[(7, ?, 13), float64] */;
  %767 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
  (%764, %765, meta[relay.Constant][34] /* ty=Tensor[(99), bool] */, %766, %767)
}

def @func_3611() -> (Tensor[(11, 10, 3), float32],) {
  %768 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
  (%768,)
}

def @func_2853() -> Tensor[(11, 10, 3), float32] {
  %769 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %769.0
}

def @func_2512(%var_2502: Tensor[(11, 3, 3), bool]) -> (Tensor[(11, 3, 3), bool],) {
  %770 = cast(%var_2502, dtype="bool") /* ty=Tensor[(11, 3, 3), bool] */;
  %771 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(11, 3, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 3, 3), bool] */, dtype="bool") /* ty=Tensor[(11, 3, 3), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = logical_and(%772, %773) /* ty=Tensor[(11, 3, 3), bool] */;
  (%774,)
}

def @func_1825(%var_1818: Tensor[(8, 30), bool]) -> (Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) {
  %775 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %776 = %775.2;
  %777 = cast(%776, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %778 = cast(%776, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %779 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %780 = reshape(%777, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %781 = reshape(%778, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %782 = reshape(%779, newshape=[]) /* ty=float64 */;
  %783 = @func_444(%780, %781, %782) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %784 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %785 = %783.2;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %787 = reshape(%784, newshape=[]) /* ty=float64 */;
  %788 = reshape(%786, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %789 = cast(meta[relay.Constant][36] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %790 = cast(meta[relay.Constant][36] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %791 = reshape(%789, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %792 = reshape(%790, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %793 = @func_987(%791, %792) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %794 = %793.0;
  %795 = cast(%794, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %796 = cast(meta[relay.Constant][36] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %797 = reshape(%795, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %798 = reshape(%796, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %799 = @func_987(%797, %798) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %800 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %801 = cast(%785, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %802 = reshape(%800, newshape=[]) /* ty=float64 */;
  %803 = reshape(%801, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %804 = cast(-1.21974f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %805 = cast(%776, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %806 = less(%804, %805) /* ty=Tensor[(8, 30), bool] */;
  %807 = cast(%var_1818, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(2), int32] */;
  %809 = cast(%806, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %811 = cast(%var_1818, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %812 = @func_228(%787, %788) /* ty=Tensor[(7, 3, 15), float32] */;
  %813 = %799.0;
  %814 = @func_228(%802, %803) /* ty=Tensor[(7, 3, 15), float32] */;
  %815 = logical_and(%809, %810) /* ty=Tensor[(8, 30), bool] */;
  %816 = acosh(%811) /* ty=Tensor[(8, 30), float32] */;
  (%785, %812, %794, meta[relay.Constant][36] /* ty=Tensor[(36, 12), bool] */, %813, %814, %815, %816)
}

def @func_5162() -> Tensor[(11, 10, 3), float32] {
  @func_1668() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_2578() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_6668() -> Tensor[(11, 10, 3), float32] {
  %817 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %817.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2495() -> Tensor[(11, 10, 3), float32] {
  %0 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %0.0
}

def @func_5770() -> (Tensor[(11, 10, 3), float32],) {
  %1 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  (%1,)
}

def @func_1276(%var_1274: Tensor[(7, 11, 12), float64], %var_1275: Tensor[(7, 11, 12), float64]) -> (Tensor[(7, 11, 12), float64],) {
  @func_1272(%var_1274, %var_1275) /* ty=(Tensor[(7, 11, 12), float64],) */
}

def @func_2117(%var_2095: Tensor[(840), uint8]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) {
  %2 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %3 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %4 = reshape(%3, newshape=[840]) /* ty=Tensor[(840), uint8] */;
  %5 = @func_1963(%4) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) */;
  %6 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(840), uint8] */;
  %7 = reshape(%6, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
  %8 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %9 = cast(%var_2095, dtype="float32") /* ty=Tensor[(840), float32] */;
  %10 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %11 = %2.0;
  %12 = %5.3;
  %13 = @func_1418(%7) /* ty=Tensor[(4, 15, 14), bool] */;
  %14 = %8.0;
  %15 = sqrt(%9) /* ty=Tensor[(840), float32] */;
  (%10, %11, %12, %13, %14, %15)
}

def @func_6901() -> (Tensor[(11, 10, 3), float32],) {
  @func_6899() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_1928(%var_1926: Tensor[(315, 1), float64], %var_1927: Tensor[(240), uint64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) {
  @func_1924(%var_1926, %var_1927) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) */
}

def @func_8271(%var_8269: Tensor[(1, 1200), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(10, 12, 10), bool], Tensor[(1, 1200), float64]) {
  @func_8268(%var_8269) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(10, 12, 10), bool], Tensor[(1, 1200), float64]) */
}

def @func_7686(%var_7684: Tensor[(11, 13, 14), float64], %var_7685: Tensor[(91, 1), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(7, ?, 13), float64], Tensor[(91, 1), float64]) {
  %30 = fn (%var_7639: Tensor[(11, 13, 14), float64], %var_7661: Tensor[(91, 1), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(7, ?, 13), float64], Tensor[(91, 1), float64]) {
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %17 = shape_of(%var_7639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%var_7639, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %20 = floor_divide(%18, %19) /* ty=Tensor[(11, 13, 14), float64] */;
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%20, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %25 = cast(%var_7661, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
    %26 = reshape(%25, newshape=[91]) /* ty=Tensor[(91), float64] */;
    %27 = @func_5061(%26) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) */;
    %28 = power(%23, %24) /* ty=Tensor[(11, 13, 14), float64] */;
    %29 = %27.3;
    (%28, %29, %var_7661)
  };
  %30(%var_7684, %var_7685) /* ty=(Tensor[(11, 13, 14), float64], Tensor[(7, ?, 13), float64], Tensor[(91, 1), float64]) */
}

def @func_5613() -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 6, 13), float32], Tensor[(546), uint8]) {
  %41 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 6, 13), float32], Tensor[(546), uint8]) {
    %31 = @func_4963() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(546), uint8] */, dtype="uint8") /* ty=Tensor[(546), uint8] */;
    %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(546), uint8] */, dtype="uint8") /* ty=Tensor[(546), uint8] */;
    %34 = reshape(%32, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint8] */;
    %35 = reshape(%33, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint8] */;
    %36 = @func_3805(%34, %35) /* ty=(Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) */;
    %37 = %31.0;
    %38 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
    %39 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
    %40 = %36.1;
    (%37, %38, %39, %40, meta[relay.Constant][1] /* ty=Tensor[(546), uint8] */)
  };
  %41() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 6, 13), float32], Tensor[(546), uint8]) */
}

def @func_7629() -> Tensor[(11, 10, 3), float32] {
  %43 = fn () -> Tensor[(11, 10, 3), float32] {
    %42 = @func_5563() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %42.1
  };
  %43() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_3478() -> (Tensor[(11, 10, 3), float64],) {
  @func_3476() /* ty=(Tensor[(11, 10, 3), float64],) */
}

def @func_4261(%var_4260: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) {
  %55 = fn (%var_4222: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) {
    %44 = cast(%var_4222, dtype="bool") /* ty=Tensor[(10, 12, 10), bool] */;
    %45 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(10, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 12, 10), float64] */, dtype="bool") /* ty=Tensor[(10, 12, 10), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %49 = reshape(%48, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
    %50 = @func_2365(%49) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) */;
    %51 = %50.5;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
    %53 = less(%46, %47) /* ty=Tensor[(10, 12, 10), bool] */;
    %54 = sinh(%52) /* ty=Tensor[(24, 10), float32] */;
    (%53, meta[relay.Constant][3] /* ty=Tensor[(240), float64] */, %54)
  };
  %55(%var_4260) /* ty=(Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) */
}

def @func_5715() -> Tensor[(11, 13, 10), bool] {
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 13, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %57 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(11, 13, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 13, 10), int64] */, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%58, %59) /* ty=Tensor[(11, 13, 10), bool] */
}

def @func_4868() -> Tensor[(11, 10, 3), float32] {
  @func_4866() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_2059() -> Tensor[(11, 10, 3), float32] {
  %60 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %60.0
}

def @main(%var_8405: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), uint16],) {
  %61 = @func_2433() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %62 = %61.0;
  %63 = cast(%var_8405, dtype="uint16") /* ty=Tensor[(11, 10, 3), uint16] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="uint16") /* ty=Tensor[(11, 10, 3), uint16] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %67 = bitwise_xor(%65, %66) /* ty=Tensor[(11, 10, 3), uint16] */;
  (%67,)
}

def @func_3101(%var_3100: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
  %79 = fn (%var_3077: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
    %68 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
    %69 = cast(%var_3077, dtype="uint32") /* ty=Tensor[(11, 10, 3), uint32] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%68, dtype="uint32") /* ty=Tensor[(11, 10, 3), uint32] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %73 = maximum(%71, %72) /* ty=Tensor[(11, 10, 3), uint32] */;
    %74 = cast(%var_3077, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
    %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%73, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %78 = divide(%76, %77) /* ty=Tensor[(11, 10, 3), float64] */;
    (%78,)
  };
  %79(%var_3100) /* ty=(Tensor[(11, 10, 3), float64],) */
}

def @func_2497() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_4043(%var_4042: float64) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64]) {
  %87 = fn (%var_4030: float64) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64]) {
    %80 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %81 = cast(%var_4030, dtype="float64") /* ty=float64 */;
    %82 = cast(meta[relay.Constant][6] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %83 = reshape(%81, newshape=[]) /* ty=float64 */;
    %84 = reshape(%82, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %85 = %80.0;
    %86 = @func_228(%83, %84) /* ty=Tensor[(7, 3, 15), float32] */;
    (%85, %86, %var_4030, meta[relay.Constant][6] /* ty=Tensor[(315), float64] */)
  };
  %87(%var_4042) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64]) */
}

def @func_3228(%var_3226: Tensor[(924), float64], %var_3227: Tensor[(11, 10, 3), float32]) -> (Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) {
  @func_3224(%var_3226, %var_3227) /* ty=(Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) */
}

def @func_5663(%var_5661: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  @func_5660(%var_5661) /* ty=(Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) */
}

def @func_5772() -> (Tensor[(11, 10, 3), float32],) {
  @func_5770() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_4543(%var_4538: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), float64] {
  %88 = cast(%var_4538, dtype="float64") /* ty=Tensor[(7, 1, 13), float64] */;
  erf(%88) /* ty=Tensor[(7, 1, 13), float64] */
}

def @func_6137() -> Tensor[(11, 10, 3), float32] {
  %89 = fn () -> Tensor[(11, 10, 3), float32] {
    @func_2853() /* ty=Tensor[(11, 10, 3), float32] */
  };
  %89() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_5202(%var_5183: Tensor[(4, 11, 12), float32]) -> (Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
  %90 = cast(%var_5183, dtype="float32") /* ty=Tensor[(4, 11, 12), float32] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %92 = reshape(%91, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %93 = @func_3693(%92) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */;
  %94 = sinh(%90) /* ty=Tensor[(4, 11, 12), float32] */;
  %95 = %93.1;
  (%94, %95, meta[relay.Constant][7] /* ty=Tensor[(924), float64] */)
}

def @func_6670() -> Tensor[(11, 10, 3), float32] {
  @func_6668() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7613() -> Tensor[(11, 10, 3), float32] {
  @func_7611() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_3542() -> (Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) {
  %96 = @func_3476() /* ty=(Tensor[(11, 10, 3), float64],) */;
  %97 = %96.0;
  %98 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
  %99 = cast(%98, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %100 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%97, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %104 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %105 = cast(%98, dtype="int8") /* ty=Tensor[(11, 10, 3), int8] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="int8") /* ty=Tensor[(11, 10, 3), int8] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %109 = less(%101, %102) /* ty=Tensor[(11, 10, 3), bool] */;
  %110 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
  %111 = %103.0;
  %112 = bitwise_and(%107, %108) /* ty=Tensor[(11, 10, 3), int8] */;
  (%109, %110, %111, %112)
}

def @func_4831(%var_4829: Tensor[(1200), float64], %var_4830: Tensor[(24, 10), float32]) -> (Tensor[(432), bool], Tensor[(1200), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int32], Tensor[(24, 10), uint16], Tensor[(24, 10), float64]) {
  @func_4827(%var_4829, %var_4830) /* ty=(Tensor[(432), bool], Tensor[(1200), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int32], Tensor[(24, 10), uint16], Tensor[(24, 10), float64]) */
}

def @func_5798(%var_5797: Tensor[(750), float64]) -> (Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) {
  %128 = fn (%var_5785: Tensor[(750), float64]) -> (Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) {
    %113 = @func_3542() /* ty=(Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) */;
    %114 = %113.3;
    %115 = cast(%114, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %116 = reshape(%115, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
    %117 = @func_5660(%116) /* ty=(Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) */;
    %118 = cast(%var_5785, dtype="float64") /* ty=Tensor[(750), float64] */;
    %119 = reshape(%118, newshape=[750]) /* ty=Tensor[(750), float64] */;
    %120 = @func_5437(%119) /* ty=(Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) */;
    %121 = %120.4;
    %122 = cast(%var_5785, dtype="bool") /* ty=Tensor[(750), bool] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(1), int32] */;
    %124 = cast(%121, dtype="bool") /* ty=Tensor[(750), bool] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), bool] */;
    %126 = %117.0;
    %127 = logical_or(%124, %125) /* ty=Tensor[(750), bool] */;
    (%114, %126, %127)
  };
  %128(%var_5797) /* ty=(Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) */
}

def @func_6718(%var_6692: Tensor[(11, 13, 10), bool]) -> (Tensor[(11, 13, 10), int8], Tensor[(11, 13, 10), float64]) {
  %129 = @func_5715() /* ty=Tensor[(11, 13, 10), bool] */;
  %130 = cast(%var_6692, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint8") /* ty=Tensor[(11, 13, 10), uint8] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %134 = left_shift(%132, %133) /* ty=Tensor[(11, 13, 10), uint8] */;
  %135 = cast(%134, dtype="int8") /* ty=Tensor[(11, 13, 10), int8] */;
  %136 = shape_of(%var_6692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_6692, dtype="int8") /* ty=Tensor[(11, 13, 10), int8] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %139 = cast(%129, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %140 = cos(%139) /* ty=Tensor[(11, 13, 10), float64] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %142 = right_shift(%137, %138) /* ty=Tensor[(11, 13, 10), int8] */;
  %143 = acosh(%141) /* ty=Tensor[(11, 13, 10), float64] */;
  (%142, %143)
}

def @func_4546(%var_4544: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), float64] {
  @func_4543(%var_4544) /* ty=Tensor[(7, 1, 13), float64] */
}

def @func_4747() -> (Tensor[(11, 10, 3), float32],) {
  @func_4745() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_4891(%var_4890: Tensor[(5, 3, 3), float32]) -> (Tensor[(5, 3, 3), float32],) {
  %146 = fn (%var_4883: Tensor[(5, 3, 3), float32]) -> (Tensor[(5, 3, 3), float32],) {
    %144 = cast(%var_4883, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
    %145 = rsqrt(%144) /* ty=Tensor[(5, 3, 3), float32] */;
    (%145,)
  };
  %146(%var_4890) /* ty=(Tensor[(5, 3, 3), float32],) */
}

def @func_5736(%var_5735: Tensor[(6, 1, 11), int16]) -> (Tensor[(6, 1, 11), int16],) {
  %150 = fn (%var_5719: Tensor[(6, 1, 11), int16]) -> (Tensor[(6, 1, 11), int16],) {
    %147 = cast(meta[relay.Constant][8] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %148 = cast(%var_5719, dtype="int16") /* ty=Tensor[(6, 1, 11), int16] */;
    %149 = logical_xor(%147, %148) /* ty=Tensor[(6, 1, 11), int16] */;
    (%149,)
  };
  %150(%var_5735) /* ty=(Tensor[(6, 1, 11), int16],) */
}

def @func_6197() -> (Tensor[(11, 10, 3), float32],) {
  @func_6195() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_7857() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  @func_7855() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) */
}

def @func_3279(%var_3278: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %161 = fn (%var_3245: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %151 = cast(%var_3245, dtype="float64") /* ty=Tensor[(924), float64] */;
    %152 = cast(%var_3245, dtype="float64") /* ty=Tensor[(924), float64] */;
    %153 = reshape(%151, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %154 = reshape(%152, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %155 = @func_1272(%153, %154) /* ty=(Tensor[(7, 11, 12), float64],) */;
    %156 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %157 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    %158 = %155.0;
    %159 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
    %160 = %156.0;
    (%157, %158, %var_3245, %159, %160)
  };
  %161(%var_3278) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_2512(%var_2502: Tensor[(11, 3, 3), bool]) -> (Tensor[(11, 3, 3), bool],) {
  %162 = cast(%var_2502, dtype="bool") /* ty=Tensor[(11, 3, 3), bool] */;
  %163 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 3, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 3, 3), bool] */, dtype="bool") /* ty=Tensor[(11, 3, 3), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = logical_and(%164, %165) /* ty=Tensor[(11, 3, 3), bool] */;
  (%166,)
}

def @func_6925(%var_6923: Tensor[(10, 1, 10), float64], %var_6924: Tensor[(96), float64]) -> (Tensor[(10, 5, 10), float64], Tensor[(4, 12, 2), int64], Tensor[(96), float64]) {
  @func_6921(%var_6923, %var_6924) /* ty=(Tensor[(10, 5, 10), float64], Tensor[(4, 12, 2), int64], Tensor[(96), float64]) */
}

def @func_1272(%var_1264: Tensor[(7, 11, 12), float64], %var_1265: Tensor[(7, 11, 12), float64]) -> (Tensor[(7, 11, 12), float64],) {
  %167 = cast(%var_1265, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %168 = shape_of(%var_1264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_1264, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %171 = power(%169, %170) /* ty=Tensor[(7, 11, 12), float64] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %173 = acosh(%172) /* ty=Tensor[(7, 11, 12), float64] */;
  (%173,)
}

def @func_1421(%var_1419: Tensor[(4, 15, 14), uint8]) -> Tensor[(4, 15, 14), bool] {
  @func_1418(%var_1419) /* ty=Tensor[(4, 15, 14), bool] */
}

def @func_6921(%var_6905: Tensor[(10, 1, 10), float64], %var_6911: Tensor[(96), float64]) -> (Tensor[(10, 5, 10), float64], Tensor[(4, 12, 2), int64], Tensor[(96), float64]) {
  %174 = cast(%var_6905, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 10), float64] */;
  %176 = cast(%var_6911, dtype="float64") /* ty=Tensor[(96), float64] */;
  %177 = cast(%var_6911, dtype="float64") /* ty=Tensor[(96), float64] */;
  %178 = reshape(%176, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %179 = reshape(%177, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %180 = @func_5127(%178, %179) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) */;
  %181 = power(%174, %175) /* ty=Tensor[(10, 5, 10), float64] */;
  %182 = %180.2;
  (%181, %182, %var_6911)
}

def @func_6031() -> (Tensor[(11, 10, 3), float32],) {
  %185 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %183 = @func_5770() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %184 = %183.0;
    (%184,)
  };
  %185() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_5717() -> Tensor[(11, 13, 10), bool] {
  @func_5715() /* ty=Tensor[(11, 13, 10), bool] */
}

def @func_6843(%var_6841: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
  @func_6840(%var_6841) /* ty=(Tensor[(11, 10, 3), float64],) */
}

def @func_7382(%var_7366: Tensor[(1, 750), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(8, 9, 16), int8], Tensor[(11, 10, 3), int8], Tensor[(1, 750), float64], Tensor[(8, 9, 16), float64]) {
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
  %187 = asin(%186) /* ty=Tensor[(8, 9, 16), float64] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(8, 9, 16), float32] */;
  %189 = rsqrt(%188) /* ty=Tensor[(8, 9, 16), float32] */;
  %190 = cast(%189, dtype="uint16") /* ty=Tensor[(8, 9, 16), uint16] */;
  %191 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%187, dtype="uint16") /* ty=Tensor[(8, 9, 16), uint16] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %194 = logical_xor(%192, %193) /* ty=Tensor[(8, 9, 16), uint16] */;
  %195 = cast(%187, dtype="int8") /* ty=Tensor[(8, 9, 16), int8] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="int8") /* ty=Tensor[(8, 9, 16), int8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %199 = cast(%var_7366, dtype="float64") /* ty=Tensor[(1, 750), float64] */;
  %200 = reshape(%199, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %201 = @func_5796(%200) /* ty=(Tensor[(11, 10, 3), int8], Tensor[(11, 10, 3), bool], Tensor[(750), bool]) */;
  %202 = cast(%194, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
  %203 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  %204 = minimum(%197, %198) /* ty=Tensor[(8, 9, 16), int8] */;
  %205 = %201.0;
  %206 = exp(%202) /* ty=Tensor[(8, 9, 16), float64] */;
  (%203, %204, %205, %var_7366, %206)
}

def @func_8244() -> (Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  %207 = @func_4478() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) */;
  %208 = @func_3845() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %209 = %207.1;
  %210 = %208.0;
  (%209, %210)
}

def @func_7913() -> (Tensor[(11, 10, 3), float32],) {
  %212 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %211 = @func_7628() /* ty=Tensor[(11, 10, 3), float32] */;
    (%211,)
  };
  %212() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_7529() -> Tensor[(11, 10, 3), float32] {
  %214 = fn () -> Tensor[(11, 10, 3), float32] {
    %213 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %213.0
  };
  %214() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_5130(%var_5128: Tensor[(4, 12, 2), float64], %var_5129: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) {
  %246 = fn (%var_5080: Tensor[(4, 12, 2), float64], %var_5081: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) {
    %215 = cast(%var_5080, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %216 = cast(%var_5081, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %217 = exp(%216) /* ty=Tensor[(4, 12, 2), float64] */;
    %218 = cast(%var_5081, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %219 = shape_of(%var_5080, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%var_5080, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %222 = floor_divide(%220, %221) /* ty=Tensor[(4, 12, 2), float64] */;
    %223 = cast(%222, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %224 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %225 = cast(%217, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %227 = cast(%var_5081, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
    %228 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%217, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %231 = greater(%229, %230) /* ty=Tensor[(4, 12, 2), bool] */;
    %232 = cast(%217, dtype="int64") /* ty=Tensor[(4, 12, 2), int64] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%231, dtype="int64") /* ty=Tensor[(4, 12, 2), int64] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %236 = cast(%222, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
    %237 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%231, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %240 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
    %241 = asin(%215) /* ty=Tensor[(4, 12, 2), float64] */;
    %242 = divide(%225, %226) /* ty=Tensor[(4, 12, 2), float64] */;
    %243 = bitwise_xor(%234, %235) /* ty=Tensor[(4, 12, 2), int64] */;
    %244 = maximum(%238, %239) /* ty=Tensor[(4, 12, 2), float32] */;
    %245 = %240.2;
    (%241, %242, %243, %244, %245)
  };
  %246(%var_5128, %var_5129) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), float64], Tensor[(4, 12, 2), int64], Tensor[(4, 12, 2), float32], Tensor[(432), bool]) */
}

def @func_1965(%var_1964: Tensor[(840), uint8]) -> (Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) {
  %254 = fn (%var_1955: Tensor[(840), uint8]) -> (Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) {
    %247 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
    %248 = cast(%var_1955, dtype="uint8") /* ty=Tensor[(840), uint8] */;
    %249 = reshape(%248, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
    %250 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %251 = %247.1;
    %252 = @func_1418(%249) /* ty=Tensor[(4, 15, 14), bool] */;
    %253 = %250.0;
    (%251, %252, %var_1955, %253)
  };
  %254(%var_1964) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) */
}

def @func_8056(%var_8051: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float64], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  %255 = cast(%var_8051, dtype="float64") /* ty=Tensor[(91), float64] */;
  %256 = reshape(%255, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %257 = @func_7287() /* ty=Tensor[(11, 10, 3), float64] */;
  %258 = @func_4543(%256) /* ty=Tensor[(7, 1, 13), float64] */;
  (%257, %258, %var_8051)
}

def @func_2061() -> Tensor[(11, 10, 3), float32] {
  @func_2059() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_231(%var_229: float64, %var_230: Tensor[(7, 3, 15), float64]) -> Tensor[(7, 3, 15), float32] {
  %263 = fn (%var_199: float64, %var_200: Tensor[(7, 3, 15), float64]) -> Tensor[(7, 3, 15), float32] {
    %259 = cast(%var_199, dtype="float64") /* ty=float64 */;
    %260 = cast(%var_200, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %261 = power(%259, %260) /* ty=Tensor[(7, 3, 15), float64] */;
    %262 = cast(%261, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
    log(%262) /* ty=Tensor[(7, 3, 15), float32] */
  };
  %263(%var_229, %var_230) /* ty=Tensor[(7, 3, 15), float32] */
}

def @func_3805(%var_3789: Tensor[(7, 6, 13), uint8], %var_3790: Tensor[(7, 6, 13), uint8]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
  %264 = cast(%var_3789, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
  %265 = cast(%var_3790, dtype="uint8") /* ty=Tensor[(7, 6, 13), uint8] */;
  %266 = shape_of(%var_3789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_3789, dtype="uint8") /* ty=Tensor[(7, 6, 13), uint8] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %269 = minimum(%267, %268) /* ty=Tensor[(7, 6, 13), uint8] */;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %271 = rsqrt(%264) /* ty=Tensor[(7, 6, 13), float64] */;
  %272 = log(%270) /* ty=Tensor[(7, 6, 13), float32] */;
  (%271, %272)
}

def @func_6546() -> Tensor[(4, 12, 8), float32] {
  %273 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  asinh(%273) /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_2162() -> Tensor[(11, 10, 3), float64] {
  %276 = fn () -> Tensor[(11, 10, 3), float64] {
    %274 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
    %275 = cast(%274, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
    log(%275) /* ty=Tensor[(11, 10, 3), float64] */
  };
  %276() /* ty=Tensor[(11, 10, 3), float64] */
}

def @func_3809(%var_3807: Tensor[(7, 6, 13), uint8], %var_3808: Tensor[(7, 6, 13), uint8]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
  @func_3805(%var_3807, %var_3808) /* ty=(Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) */
}

def @func_2604() -> (Tensor[(11, 10, 3), float32],) {
  %277 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  (%277,)
}

def @func_8268(%var_8263: Tensor[(1, 1200), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(10, 12, 10), bool], Tensor[(1, 1200), float64]) {
  %278 = @func_6195() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %279 = cast(%var_8263, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
  %280 = reshape(%279, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %281 = @func_4259(%280) /* ty=(Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) */;
  %282 = @func_7528() /* ty=Tensor[(11, 10, 3), float32] */;
  %283 = %278.0;
  %284 = %281.0;
  (%282, %283, %284, %var_8263)
}

def @func_3377() -> Tensor[(11, 10, 3), float32] {
  @func_3375() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_3562() -> (Tensor[(11, 10, 3), float32],) {
  %286 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %285 = @func_3375() /* ty=Tensor[(11, 10, 3), float32] */;
    (%285,)
  };
  %286() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_8208() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
  @func_8206() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) */
}

def @func_4584() -> (Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) {
  %295 = fn () -> (Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) {
    %287 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
    %288 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 66), float64] */, dtype="float64") /* ty=Tensor[(14, 66), float64] */;
    %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 66), float64] */, dtype="float64") /* ty=Tensor[(14, 66), float64] */;
    %290 = reshape(%288, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %291 = reshape(%289, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %292 = @func_1272(%290, %291) /* ty=(Tensor[(7, 11, 12), float64],) */;
    %293 = %287.2;
    %294 = %292.0;
    (%293, %294, meta[relay.Constant][13] /* ty=Tensor[(14, 66), float64] */)
  };
  %295() /* ty=(Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) */
}

def @func_5064(%var_5062: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) {
  @func_5061(%var_5062) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) */
}

def @func_7219(%var_7218: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 10, 3), float32], Tensor[(924), float64]) {
  %308 = fn (%var_7201: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 10, 3), float32], Tensor[(924), float64]) {
    %296 = @func_5937() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %297 = cast(%var_7201, dtype="float32") /* ty=Tensor[(528), float32] */;
    %298 = reshape(%297, newshape=[528]) /* ty=Tensor[(528), float32] */;
    %299 = @func_5240(%298) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) */;
    %300 = cast(meta[relay.Constant][14] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
    %301 = %296.0;
    %302 = cast(%301, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %303 = reshape(%300, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %304 = reshape(%302, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
    %305 = @func_3224(%303, %304) /* ty=(Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) */;
    %306 = %299.2;
    %307 = %305.3;
    (%301, %306, %var_7201, %307, meta[relay.Constant][14] /* ty=Tensor[(924), float64] */)
  };
  %308(%var_7218) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 10, 3), float32], Tensor[(924), float64]) */
}

def @func_7385(%var_7383: Tensor[(1, 750), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(8, 9, 16), int8], Tensor[(11, 10, 3), int8], Tensor[(1, 750), float64], Tensor[(8, 9, 16), float64]) {
  @func_7382(%var_7383) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(8, 9, 16), int8], Tensor[(11, 10, 3), int8], Tensor[(1, 750), float64], Tensor[(8, 9, 16), float64]) */
}

def @func_5938() -> (Tensor[(11, 10, 3), float32],) {
  %310 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %309 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
    (%309,)
  };
  %310() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_5660(%var_5638: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  %311 = @func_2578() /* ty=Tensor[(11, 10, 3), float32] */;
  %312 = cast(%var_5638, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %317 = logical_and(%314, %315) /* ty=Tensor[(11, 10, 3), bool] */;
  %318 = @func_2161() /* ty=Tensor[(11, 10, 3), float64] */;
  %319 = %316.0;
  (%317, %318, %319)
}

def @func_6548() -> Tensor[(4, 12, 8), float32] {
  @func_6546() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_3695(%var_3694: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
  %325 = fn (%var_3677: Tensor[(924), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
    %320 = cast(%var_3677, dtype="float64") /* ty=Tensor[(924), float64] */;
    %321 = reshape(%320, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %322 = @func_3277(%321) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %323 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
    %324 = %322.1;
    (%323, %324, %var_3677)
  };
  %325(%var_3694) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */
}

def @func_1670() -> Tensor[(11, 10, 3), float32] {
  @func_1668() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7611() -> Tensor[(11, 10, 3), float32] {
  %326 = @func_5770() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %326.0
}

def @func_7763(%var_7761: Tensor[(7, 7, 2), uint16]) -> (Tensor[(7, 7, 2), uint8],) {
  @func_7760(%var_7761) /* ty=(Tensor[(7, 7, 2), uint8],) */
}

def @func_1894() -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) {
  @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */
}

def @func_7174(%var_7173: Tensor[(40), int64]) -> (Tensor[(5, 4, 2), float64], Tensor[(11, 10, 3), float32]) {
  %339 = fn (%var_7156: Tensor[(40), int64]) -> (Tensor[(5, 4, 2), float64], Tensor[(11, 10, 3), float32]) {
    %327 = cast(%var_7156, dtype="int64") /* ty=Tensor[(40), int64] */;
    %328 = reshape(%327, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), int64] */;
    %329 = @func_4609(%328) /* ty=Tensor[(5, 4, 2), float32] */;
    %330 = cast(%var_7156, dtype="float64") /* ty=Tensor[(40), float64] */;
    %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%329, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %334 = @func_4536() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %335 = %334.0;
    %336 = cast(%335, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %337 = mod(%332, %333) /* ty=Tensor[(5, 4, 2), float64] */;
    %338 = sqrt(%336) /* ty=Tensor[(11, 10, 3), float32] */;
    (%337, %338)
  };
  %339(%var_7173) /* ty=(Tensor[(5, 4, 2), float64], Tensor[(11, 10, 3), float32]) */
}

def @func_2384() -> Tensor[(9, 12, 4), bool] {
  @func_2382() /* ty=Tensor[(9, 12, 4), bool] */
}

def @func_7506() -> (Tensor[(11, 13, 10), float64],) {
  @func_7504() /* ty=(Tensor[(11, 13, 10), float64],) */
}

def @func_8138() -> Tensor[(11, 10, 3), float32] {
  @func_8136() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7855() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  %340 = @func_7312() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %341 = cast(meta[relay.Constant][15] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %342 = reshape(%341, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %343 = %340.0;
  %344 = @func_4543(%342) /* ty=Tensor[(7, 1, 13), float64] */;
  (%343, %344, meta[relay.Constant][15] /* ty=Tensor[(91), float64] */)
}

def @func_5205(%var_5203: Tensor[(4, 11, 12), float32]) -> (Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) {
  @func_5202(%var_5203) /* ty=(Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */
}

def @func_2433() -> (Tensor[(11, 10, 3), float32],) {
  @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_5265() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %349 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %345 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    %346 = cast(%345, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %347 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
    %348 = atan(%346) /* ty=Tensor[(11, 10, 3), float32] */;
    (%347, %348)
  };
  %349() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_2255(%var_2254: Tensor[(8, 30), bool]) -> (Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) {
  %366 = fn (%var_2236: Tensor[(8, 30), bool]) -> (Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) {
    %350 = cast(meta[relay.Constant][16] /* ty=Tensor[(840), uint8] */, dtype="uint8") /* ty=Tensor[(840), uint8] */;
    %351 = reshape(%350, newshape=[840]) /* ty=Tensor[(840), uint8] */;
    %352 = @func_2117(%351) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) */;
    %353 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
    %354 = %353.0;
    %355 = cast(%354, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %356 = asinh(%355) /* ty=Tensor[(11, 10, 3), float32] */;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
    %358 = cast(%var_2236, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
    %359 = reshape(%358, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
    %360 = @func_1825(%359) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
    %361 = %360.0;
    %362 = cast(%361, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %363 = %352.3;
    %364 = cosh(%357) /* ty=Tensor[(11, 10, 3), float64] */;
    %365 = log2(%362) /* ty=Tensor[(7, 3, 15), float64] */;
    (%363, meta[relay.Constant][16] /* ty=Tensor[(840), uint8] */, %var_2236, %364, %365)
  };
  %366(%var_2254) /* ty=(Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) */
}

def @func_7760(%var_7749: Tensor[(7, 7, 2), uint16]) -> (Tensor[(7, 7, 2), uint8],) {
  %367 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %368 = shape_of(%var_7749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_7749, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %371 = add(%369, %370) /* ty=Tensor[(7, 7, 2), uint16] */;
  %372 = cast(%371, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
  %373 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 7, 2), uint16] */, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %376 = bitwise_and(%374, %375) /* ty=Tensor[(7, 7, 2), uint8] */;
  (%376,)
}

def @func_990(%var_988: Tensor[(9, 12, 4), bool], %var_989: Tensor[(9, 12, 4), bool]) -> (Tensor[(9, 12, 4), bool],) {
  %387 = fn (%var_972: Tensor[(9, 12, 4), bool], %var_973: Tensor[(9, 12, 4), bool]) -> (Tensor[(9, 12, 4), bool],) {
    %377 = cast(%var_973, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
    %378 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %381 = logical_and(%379, %380) /* ty=Tensor[(9, 12, 4), bool] */;
    %382 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
    %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%381, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %386 = less_equal(%384, %385) /* ty=Tensor[(9, 12, 4), bool] */;
    (%386,)
  };
  %387(%var_988, %var_989) /* ty=(Tensor[(9, 12, 4), bool],) */
}

def @func_5344() -> (Tensor[(11, 10, 3), float32],) {
  %395 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %388 = @func_4745() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %389 = %388.0;
    %390 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %394 = floor_mod(%392, %393) /* ty=Tensor[(11, 10, 3), float32] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_4426(%var_4425: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), uint64], Tensor[(11, 10, 3), float32]) {
  %404 = fn (%var_4397: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), uint64], Tensor[(11, 10, 3), float32]) {
    %396 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %397 = %396.0;
    %398 = cast(%var_4397, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%397, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %402 = bitwise_or(%400, %401) /* ty=Tensor[(11, 10, 3), uint64] */;
    %403 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
    (%402, %403)
  };
  %404(%var_4425) /* ty=(Tensor[(11, 10, 3), uint64], Tensor[(11, 10, 3), float32]) */
}

def @func_3476() -> (Tensor[(11, 10, 3), float64],) {
  %405 = @func_2161() /* ty=Tensor[(11, 10, 3), float64] */;
  (%405,)
}

def @func_3914(%var_3913: Tensor[(11, 9), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) {
  %412 = fn (%var_3908: Tensor[(11, 9), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) {
    %406 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %407 = cast(%var_3908, dtype="bool") /* ty=Tensor[(11, 9), bool] */;
    %408 = reshape(%407, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
    %409 = @func_2512(%408) /* ty=(Tensor[(11, 3, 3), bool],) */;
    %410 = %406.0;
    %411 = %409.0;
    (%410, %411, %var_3908)
  };
  %412(%var_3913) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) */
}

def @func_6721(%var_6719: Tensor[(11, 13, 10), bool]) -> (Tensor[(11, 13, 10), int8], Tensor[(11, 13, 10), float64]) {
  @func_6718(%var_6719) /* ty=(Tensor[(11, 13, 10), int8], Tensor[(11, 13, 10), float64]) */
}

def @func_7095(%var_7093: Tensor[(5, 4, 9), float32], %var_7094: Tensor[(11, 10, 3), float32]) -> (Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) {
  @func_7091(%var_7093, %var_7094) /* ty=(Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) */
}

def @func_8127(%var_8126: Tensor[(7, 132), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 132), float64]) {
  %419 = fn (%var_8123: Tensor[(7, 132), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 132), float64]) {
    %413 = @func_5519() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) */;
    %414 = cast(%var_8123, dtype="float64") /* ty=Tensor[(7, 132), float64] */;
    %415 = reshape(%414, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %416 = @func_3277(%415) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %417 = %413.1;
    %418 = %416.4;
    (%417, %418, %var_8123)
  };
  %419(%var_8126) /* ty=(Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 132), float64]) */
}

def @func_8136() -> Tensor[(11, 10, 3), float32] {
  @func_2578() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_5164() -> Tensor[(11, 10, 3), float32] {
  @func_5162() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_8246() -> (Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) {
  @func_8244() /* ty=(Tensor[(11, 10, 3), float64], Tensor[(11, 10, 3), float32]) */
}

def @func_2713(%var_2701: Tensor[(15, 10, 5), float64], %var_2707: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) {
  %420 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %421 = atanh(%420) /* ty=Tensor[(15, 10, 5), float32] */;
  %422 = cast(%421, dtype="bool") /* ty=Tensor[(15, 10, 5), bool] */;
  %423 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(15, 10, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 10, 5), float32] */, dtype="bool") /* ty=Tensor[(15, 10, 5), bool] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %426 = equal(%424, %425) /* ty=Tensor[(15, 10, 5), bool] */;
  %427 = cast(%421, dtype="uint8") /* ty=Tensor[(15, 10, 5), uint8] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="uint8") /* ty=Tensor[(15, 10, 5), uint8] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %431 = bitwise_xor(%429, %430) /* ty=Tensor[(15, 10, 5), uint8] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %433 = erf(%432) /* ty=Tensor[(15, 10, 5), float32] */;
  %434 = cast(%426, dtype="float64") /* ty=Tensor[(15, 10, 5), float64] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="float64") /* ty=Tensor[(15, 10, 5), float64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %438 = mod(%436, %437) /* ty=Tensor[(15, 10, 5), float64] */;
  %439 = cast(%var_2701, dtype="uint16") /* ty=Tensor[(15, 10, 5), uint16] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="uint16") /* ty=Tensor[(15, 10, 5), uint16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %443 = cast(%var_2707, dtype="bool") /* ty=Tensor[(240), bool] */;
  %444 = reshape(%443, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %445 = @func_1825(%444) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
  %446 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  %447 = right_shift(%441, %442) /* ty=Tensor[(15, 10, 5), uint16] */;
  %448 = %445.7;
  (%446, %447, %448, %var_2707)
}

def @func_2120(%var_2118: Tensor[(840), uint8]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) {
  @func_2117(%var_2118) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(4, 15, 14), bool], Tensor[(11, 10, 3), float32], Tensor[(840), float32]) */
}

def @func_6451(%var_6408: Tensor[(1, 1, 3), int16], %var_6409: Tensor[(10, 13, 3), int16], %var_6444: Tensor[(432), bool]) -> (Tensor[(10, 13, 3), int16], Tensor[(15, 2, 3), int64], Tensor[(9, 12, 4), bool], Tensor[(132), float32], Tensor[(432), bool]) {
  %449 = cast(%var_6408, dtype="int16") /* ty=Tensor[(1, 1, 3), int16] */;
  %450 = cast(%var_6409, dtype="int16") /* ty=Tensor[(10, 13, 3), int16] */;
  %451 = cast(%var_6408, dtype="int64") /* ty=Tensor[(1, 1, 3), int64] */;
  %452 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 2, 3), int16] */, dtype="int64") /* ty=Tensor[(15, 2, 3), int64] */;
  %453 = cast(meta[relay.Constant][21] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %454 = cast(%var_6444, dtype="bool") /* ty=Tensor[(432), bool] */;
  %455 = reshape(%453, newshape=[11, 12]) /* ty=Tensor[(11, 12), float32] */;
  %456 = reshape(%454, newshape=[2, 216]) /* ty=Tensor[(2, 216), bool] */;
  %457 = @func_1316(%455, %456) /* ty=(Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) */;
  %458 = add(%449, %450) /* ty=Tensor[(10, 13, 3), int16] */;
  %459 = minimum(%451, %452) /* ty=Tensor[(15, 2, 3), int64] */;
  %460 = %457.1;
  (%458, %459, %460, meta[relay.Constant][21] /* ty=Tensor[(132), float32] */, %var_6444)
}

def @func_4866() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_5520() -> (Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) {
  %466 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) {
    %461 = @func_4745() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %462 = @func_4583() /* ty=(Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) */;
    %463 = %461.0;
    %464 = %462.0;
    %465 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
    (%463, %464, %465)
  };
  %466() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) */
}

def @func_7952() -> (Tensor[(11, 10, 3), float32],) {
  @func_7950() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_1626() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) {
  %467 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %468 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %469 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %470 = cast(0.475677f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %471 = reshape(%468, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %472 = reshape(%469, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %473 = reshape(%470, newshape=[]) /* ty=float64 */;
  %474 = @func_444(%471, %472, %473) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %475 = rsqrt(%467) /* ty=Tensor[(11, 10, 3), float32] */;
  %476 = %474.2;
  (%475, %476, meta[relay.Constant][23] /* ty=Tensor[(8, 30), uint64] */, 0.475677f64 /* ty=float64 */)
}

def @func_8059(%var_8057: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float64], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) {
  @func_8056(%var_8057) /* ty=(Tensor[(11, 10, 3), float64], Tensor[(7, 1, 13), float64], Tensor[(91), float64]) */
}

def @func_1418(%var_1407: Tensor[(4, 15, 14), uint8]) -> Tensor[(4, 15, 14), bool] {
  %477 = cast(%var_1407, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %478 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%479, %480) /* ty=Tensor[(4, 15, 14), bool] */
}

def @func_5162() -> Tensor[(11, 10, 3), float32] {
  @func_1668() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_2431() -> (Tensor[(11, 10, 3), float32],) {
  %481 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
  (%481,)
}

def @func_4320() -> (Tensor[(11, 10, 3), float32],) {
  @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_7746() -> (Tensor[(11, 10, 3), float32],) {
  %484 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %482 = @func_3542() /* ty=(Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) */;
    %483 = %482.2;
    (%483,)
  };
  %484() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_8114() -> (Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32]) {
  %487 = fn () -> (Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32]) {
    %485 = @func_2382() /* ty=Tensor[(9, 12, 4), bool] */;
    %486 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    (%485, %486)
  };
  %487() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32]) */
}

def @func_2515(%var_2513: Tensor[(11, 3, 3), bool]) -> (Tensor[(11, 3, 3), bool],) {
  @func_2512(%var_2513) /* ty=(Tensor[(11, 3, 3), bool],) */
}

def @func_3847() -> (Tensor[(11, 10, 3), float32],) {
  @func_3845() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_7091(%var_7032: Tensor[(5, 4, 9), float32], %var_7066: Tensor[(11, 10, 3), float32]) -> (Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) {
  %488 = cast(%var_7032, dtype="float32") /* ty=Tensor[(5, 4, 9), float32] */;
  %489 = sinh(%488) /* ty=Tensor[(5, 4, 9), float32] */;
  %490 = cast(%var_7032, dtype="uint64") /* ty=Tensor[(5, 4, 9), uint64] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="uint64") /* ty=Tensor[(5, 4, 9), uint64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %494 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %495 = %494.0;
  %496 = cast(%var_7066, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %500 = subtract(%492, %493) /* ty=Tensor[(5, 4, 9), uint64] */;
  %501 = minimum(%498, %499) /* ty=Tensor[(11, 10, 3), float32] */;
  (%500, %501)
}

def @func_7411() -> (Tensor[(11, 10, 3), float32],) {
  %503 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %502 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
    (%502,)
  };
  %503() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_3045() -> Tensor[(11, 10, 3), float32] {
  @func_3043() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_4479() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
  %509 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
    %504 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %505 = %504.0;
    %506 = cast(%505, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
    %507 = @func_3375() /* ty=Tensor[(11, 10, 3), float32] */;
    %508 = tan(%506) /* ty=Tensor[(11, 10, 3), float64] */;
    (%507, %508)
  };
  %509() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) */
}

def @func_1628() -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) {
  @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */
}

def @func_4827(%var_4790: Tensor[(1200), float64], %var_4812: Tensor[(24, 10), float32]) -> (Tensor[(432), bool], Tensor[(1200), float64], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int32], Tensor[(24, 10), uint16], Tensor[(24, 10), float64]) {
  %510 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %511 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %514 = reshape(%513, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
  %515 = @func_3975(%514) /* ty=(Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) */;
  %516 = cast(%var_4790, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %517 = reshape(%516, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %518 = @func_4259(%517) /* ty=(Tensor[(10, 12, 10), bool], Tensor[(240), float64], Tensor[(24, 10), float32]) */;
  %519 = %518.2;
  %520 = cast(%var_4812, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %524 = power(%522, %523) /* ty=Tensor[(24, 10), float64] */;
  %525 = cast(%519, dtype="uint16") /* ty=Tensor[(24, 10), uint16] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(2), int32] */;
  %527 = cast(%524, dtype="uint16") /* ty=Tensor[(24, 10), uint16] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %529 = cast(%519, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %530 = %510.2;
  %531 = %515.0;
  %532 = minimum(%527, %528) /* ty=Tensor[(24, 10), uint16] */;
  %533 = atanh(%529) /* ty=Tensor[(24, 10), float64] */;
  (%530, %var_4790, %512, %531, %532, %533)
}

def @func_4611(%var_4610: Tensor[(5, 4, 2), int64]) -> Tensor[(5, 4, 2), float32] {
  %540 = fn (%var_4599: Tensor[(5, 4, 2), int64]) -> Tensor[(5, 4, 2), float32] {
    %534 = cast(%var_4599, dtype="int64") /* ty=Tensor[(5, 4, 2), int64] */;
    %535 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(5, 4, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 2), int64] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %538 = bitwise_and(%536, %537) /* ty=Tensor[(5, 4, 2), int64] */;
    %539 = cast(%538, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
    atanh(%539) /* ty=Tensor[(5, 4, 2), float32] */
  };
  %540(%var_4610) /* ty=Tensor[(5, 4, 2), float32] */
}

def @func_7313() -> (Tensor[(11, 10, 3), float32],) {
  %543 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %541 = @func_5563() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %542 = %541.0;
    (%542,)
  };
  %543() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_3043() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_1320(%var_1318: Tensor[(11, 12), float32], %var_1319: Tensor[(2, 216), bool]) -> (Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) {
  @func_1316(%var_1318, %var_1319) /* ty=(Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) */
}

def @func_3978(%var_3976: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) {
  @func_3975(%var_3976) /* ty=(Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) */
}

def @func_8206() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64]) {
  %544 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %545 = @func_7745() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %546 = %545.0;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %548 = %544.0;
  %549 = acos(%547) /* ty=Tensor[(11, 10, 3), float64] */;
  (%548, %549)
}

def @func_3612() -> (Tensor[(11, 10, 3), float32],) {
  %551 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %550 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
    (%550,)
  };
  %551() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_3224(%var_3133: Tensor[(924), float64], %var_3177: Tensor[(11, 10, 3), float32]) -> (Tensor[(7, 11, 12), float64], Tensor[(924), float64], Tensor[(11, 10, 3), bool], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64]) {
  %552 = cast(%var_3133, dtype="float64") /* ty=Tensor[(924), float64] */;
  %553 = cast(%var_3133, dtype="float64") /* ty=Tensor[(924), float64] */;
  %554 = reshape(%552, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %555 = reshape(%553, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %556 = @func_1272(%554, %555) /* ty=(Tensor[(7, 11, 12), float64],) */;
  %557 = @func_2027() /* ty=Tensor[(11, 10, 3), float32] */;
  %558 = cast(%var_3177, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(11, 10, 3), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %563 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %564 = %556.0;
  %565 = not_equal(%560, %561) /* ty=Tensor[(11, 10, 3), bool] */;
  %566 = %562.0;
  %567 = %563.2;
  (%564, %var_3133, %565, %566, %567)
}

def @func_2028() -> Tensor[(11, 10, 3), float32] {
  %569 = fn () -> Tensor[(11, 10, 3), float32] {
    %568 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %568.0
  };
  %569() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_6456(%var_6453: Tensor[(1, 1, 3), int16], %var_6454: Tensor[(10, 13, 3), int16], %var_6455: Tensor[(432), bool]) -> (Tensor[(10, 13, 3), int16], Tensor[(15, 2, 3), int64], Tensor[(9, 12, 4), bool], Tensor[(132), float32], Tensor[(432), bool]) {
  @func_6451(%var_6453, %var_6454, %var_6455) /* ty=(Tensor[(10, 13, 3), int16], Tensor[(15, 2, 3), int64], Tensor[(9, 12, 4), bool], Tensor[(132), float32], Tensor[(432), bool]) */
}

def @func_1892() -> (Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) {
  %570 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %572 = cast(meta[relay.Constant][26] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %573 = cast(meta[relay.Constant][26] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %574 = reshape(%572, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %575 = reshape(%573, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %576 = @func_987(%574, %575) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %577 = exp(%571) /* ty=Tensor[(11, 10, 3), float32] */;
  %578 = %576.0;
  (%577, %578, meta[relay.Constant][26] /* ty=Tensor[(432), bool] */)
}

def @func_2367(%var_2366: Tensor[(24, 10), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) {
  %603 = fn (%var_2324: Tensor[(24, 10), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) {
    %579 = cast(meta[relay.Constant][27] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %580 = cast(meta[relay.Constant][28] /* ty=Tensor[(24, 10), uint64] */, dtype="uint64") /* ty=Tensor[(24, 10), uint64] */;
    %581 = reshape(%579, newshape=[315, 1]) /* ty=Tensor[(315, 1), float64] */;
    %582 = reshape(%580, newshape=[240]) /* ty=Tensor[(240), uint64] */;
    %583 = @func_1924(%581, %582) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) */;
    %584 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
    %585 = cast(meta[relay.Constant][28] /* ty=Tensor[(24, 10), uint64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %586 = log(%585) /* ty=Tensor[(24, 10), float64] */;
    %587 = cast(%var_2324, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(2), int32] */;
    %589 = cast(%586, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %591 = mod(%589, %590) /* ty=Tensor[(24, 10), float64] */;
    %592 = cast(%591, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %593 = cosh(%592) /* ty=Tensor[(24, 10), float64] */;
    %594 = cast(%591, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(2), int32] */;
    %596 = cast(%593, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %598 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
    %599 = %583.1;
    %600 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    %601 = %584.2;
    %602 = maximum(%596, %597) /* ty=Tensor[(24, 10), float64] */;
    (%598, %599, meta[relay.Constant][27] /* ty=Tensor[(315), float64] */, %600, %601, %602)
  };
  %603(%var_2366) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(315), float64], Tensor[(11, 10, 3), float32], Tensor[(8, 30), uint64], Tensor[(24, 10), float64]) */
}

def @func_5061(%var_5032: Tensor[(91), float64]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool], Tensor[(7, ?, 13), float64], Tensor[(11, 10, 3), float32]) {
  %604 = cast(meta[relay.Constant][29] /* ty=Tensor[(99), bool] */, dtype="bool") /* ty=Tensor[(99), bool] */;
  %605 = reshape(%604, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
  %606 = @func_2512(%605) /* ty=(Tensor[(11, 3, 3), bool],) */;
  %607 = cast(%var_5032, dtype="float64") /* ty=Tensor[(91), float64] */;
  %608 = reshape(%607, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %609 = @func_4543(%608) /* ty=Tensor[(7, 1, 13), float64] */;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  %611 = log2(%610) /* ty=Tensor[(7, 1, 13), float32] */;
  %612 = cast(%var_5032, dtype="float64") /* ty=Tensor[(91), float64] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="float64") /* ty=Tensor[(7, 1, 13), float64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %616 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  %617 = %606.0;
  %618 = floor_divide(%614, %615) /* ty=Tensor[(7, ?, 13), float64] */;
  %619 = @func_3043() /* ty=Tensor[(11, 10, 3), float32] */;
  (%616, %617, meta[relay.Constant][29] /* ty=Tensor[(99), bool] */, %618, %619)
}

def @func_2717(%var_2715: Tensor[(15, 10, 5), float64], %var_2716: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) {
  @func_2713(%var_2715, %var_2716) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) */
}

def @func_6328() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %624 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %620 = @func_3572() /* ty=Tensor[(11, 10, 3), float32] */;
    %621 = cast(%620, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %622 = acosh(%621) /* ty=Tensor[(11, 10, 3), float32] */;
    %623 = @func_5162() /* ty=Tensor[(11, 10, 3), float32] */;
    (%622, %623)
  };
  %624() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_2220() -> (Tensor[(11, 10, 3), float32],) {
  @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_2985(%var_2983: Tensor[(9, 8, 16), int8], %var_2984: Tensor[(9, 8, 16), int8]) -> Tensor[(9, 8, 16), float32] {
  %634 = fn (%var_2962: Tensor[(9, 8, 16), int8], %var_2963: Tensor[(9, 8, 16), int8]) -> Tensor[(9, 8, 16), float32] {
    %625 = cast(%var_2963, dtype="int8") /* ty=Tensor[(9, 8, 16), int8] */;
    %626 = shape_of(%var_2962, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%var_2962, dtype="int8") /* ty=Tensor[(9, 8, 16), int8] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %629 = bitwise_or(%627, %628) /* ty=Tensor[(9, 8, 16), int8] */;
    %630 = cast(%629, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
    %631 = shape_of(%var_2963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%var_2963, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    subtract(%632, %633) /* ty=Tensor[(9, 8, 16), float32] */
  };
  %634(%var_2983, %var_2984) /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_1825(%var_1818: Tensor[(8, 30), bool]) -> (Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) {
  %635 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %636 = %635.2;
  %637 = cast(%636, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %638 = cast(%636, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %639 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %640 = reshape(%637, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %641 = reshape(%638, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %642 = reshape(%639, newshape=[]) /* ty=float64 */;
  %643 = @func_444(%640, %641, %642) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %644 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %645 = %643.2;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %647 = reshape(%644, newshape=[]) /* ty=float64 */;
  %648 = reshape(%646, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %649 = cast(meta[relay.Constant][30] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %650 = cast(meta[relay.Constant][30] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %651 = reshape(%649, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %652 = reshape(%650, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %653 = @func_987(%651, %652) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %656 = cast(meta[relay.Constant][30] /* ty=Tensor[(36, 12), bool] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %657 = reshape(%655, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %658 = reshape(%656, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %659 = @func_987(%657, %658) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %660 = cast(-1.21974f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %661 = cast(%645, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %662 = reshape(%660, newshape=[]) /* ty=float64 */;
  %663 = reshape(%661, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %664 = cast(-1.21974f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %665 = cast(%636, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %666 = less(%664, %665) /* ty=Tensor[(8, 30), bool] */;
  %667 = cast(%var_1818, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(2), int32] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %671 = cast(%var_1818, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %672 = @func_228(%647, %648) /* ty=Tensor[(7, 3, 15), float32] */;
  %673 = %659.0;
  %674 = @func_228(%662, %663) /* ty=Tensor[(7, 3, 15), float32] */;
  %675 = logical_and(%669, %670) /* ty=Tensor[(8, 30), bool] */;
  %676 = acosh(%671) /* ty=Tensor[(8, 30), float32] */;
  (%645, %672, %654, meta[relay.Constant][30] /* ty=Tensor[(36, 12), bool] */, %673, %674, %675, %676)
}

def @func_3845() -> (Tensor[(11, 10, 3), float32],) {
  %677 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
  (%677,)
}

def @func_7504() -> (Tensor[(11, 13, 10), float64],) {
  %678 = @func_5715() /* ty=Tensor[(11, 13, 10), bool] */;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %680 = asin(%679) /* ty=Tensor[(11, 13, 10), float64] */;
  (%680,)
}

def @func_2276(%var_2275: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64], Tensor[(240), bool], Tensor[(4, 15, 14), bool], Tensor[(840), uint8]) {
  %689 = fn (%var_2267: Tensor[(240), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64], Tensor[(240), bool], Tensor[(4, 15, 14), bool], Tensor[(840), uint8]) {
    %681 = cast(%var_2267, dtype="bool") /* ty=Tensor[(240), bool] */;
    %682 = reshape(%681, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
    %683 = @func_2253(%682) /* ty=(Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) */;
    %684 = cast(meta[relay.Constant][31] /* ty=Tensor[(840), uint8] */, dtype="uint8") /* ty=Tensor[(840), uint8] */;
    %685 = reshape(%684, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), uint8] */;
    %686 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
    %687 = %683.3;
    %688 = @func_1418(%685) /* ty=Tensor[(4, 15, 14), bool] */;
    (%686, %687, %var_2267, %688, meta[relay.Constant][31] /* ty=Tensor[(840), uint8] */)
  };
  %689(%var_2275) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float64], Tensor[(240), bool], Tensor[(4, 15, 14), bool], Tensor[(840), uint8]) */
}

def @func_7287() -> Tensor[(11, 10, 3), float64] {
  @func_2161() /* ty=Tensor[(11, 10, 3), float64] */
}

def @func_7974() -> (Tensor[(4, 12, 8), float32],) {
  %691 = fn () -> (Tensor[(4, 12, 8), float32],) {
    %690 = @func_6546() /* ty=Tensor[(4, 12, 8), float32] */;
    (%690,)
  };
  %691() /* ty=(Tensor[(4, 12, 8), float32],) */
}

def @func_6628() -> Tensor[(11, 10, 3), float32] {
  @func_6626() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7189(%var_7182: Tensor[(13, 15, 13), float64]) -> (Tensor[(13, 15, 13), float64],) {
  %692 = cast(%var_7182, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %693 = acos(%692) /* ty=Tensor[(13, 15, 13), float64] */;
  (%693,)
}

def @func_1316(%var_1292: Tensor[(11, 12), float32], %var_1304: Tensor[(2, 216), bool]) -> (Tensor[(11, 12), float32], Tensor[(9, 12, 4), bool], Tensor[(2, 216), bool]) {
  %694 = cast(%var_1292, dtype="float32") /* ty=Tensor[(11, 12), float32] */;
  %695 = cast(%var_1304, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %696 = cast(%var_1304, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %697 = reshape(%695, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %698 = reshape(%696, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), bool] */;
  %699 = @func_987(%697, %698) /* ty=(Tensor[(9, 12, 4), bool],) */;
  %700 = atan(%694) /* ty=Tensor[(11, 12), float32] */;
  %701 = %699.0;
  (%700, %701, %var_1304)
}

def @func_1924(%var_1908: Tensor[(315, 1), float64], %var_1912: Tensor[(240), uint64]) -> (Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315, 1), float64], float64, Tensor[(240), uint64]) {
  %702 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %703 = cast(-3.3576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %704 = cast(%var_1908, dtype="float64") /* ty=Tensor[(315, 1), float64] */;
  %705 = reshape(%703, newshape=[]) /* ty=float64 */;
  %706 = reshape(%704, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %707 = cast(%var_1912, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %708 = cast(%var_1912, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %709 = cast(-3.3576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %710 = reshape(%707, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %711 = reshape(%708, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint64] */;
  %712 = reshape(%709, newshape=[]) /* ty=float64 */;
  %713 = @func_444(%710, %711, %712) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */;
  %714 = %702.0;
  %715 = @func_228(%705, %706) /* ty=Tensor[(7, 3, 15), float32] */;
  %716 = %713.0;
  (%714, %715, -3.3576f64 /* ty=float64 */, %var_1908, %716, %var_1912)
}

def @func_5565() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  @func_5563() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_6899() -> (Tensor[(11, 10, 3), float32],) {
  %717 = @func_3845() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %718 = %717.0;
  (%718,)
}

def @func_7192(%var_7190: Tensor[(13, 15, 13), float64]) -> (Tensor[(13, 15, 13), float64],) {
  @func_7189(%var_7190) /* ty=(Tensor[(13, 15, 13), float64],) */
}

def @func_5563() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %719 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %720 = @func_2495() /* ty=Tensor[(11, 10, 3), float32] */;
  %721 = %719.0;
  (%720, %721)
}

def @func_6668() -> Tensor[(11, 10, 3), float32] {
  %722 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %722.0
}

def @func_1668() -> Tensor[(11, 10, 3), float32] {
  %723 = @func_1626() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 30), uint64], float64) */;
  %723.0
}

def @func_2382() -> Tensor[(9, 12, 4), bool] {
  %724 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %724.1
}

def @func_7289() -> Tensor[(11, 10, 3), float64] {
  @func_7287() /* ty=Tensor[(11, 10, 3), float64] */
}

def @func_448(%var_445: Tensor[(16, 5, 3), uint64], %var_446: Tensor[(16, 5, 3), uint64], %var_447: float64) -> (float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) {
  %755 = fn (%var_385: Tensor[(16, 5, 3), uint64], %var_386: Tensor[(16, 5, 3), uint64], %var_400: float64) -> (float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) {
    %725 = cast(%var_400, dtype="float64") /* ty=float64 */;
    %726 = cast(meta[relay.Constant][32] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %727 = reshape(%725, newshape=[]) /* ty=float64 */;
    %728 = reshape(%726, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %729 = @func_228(%727, %728) /* ty=Tensor[(7, 3, 15), float32] */;
    %730 = cast(meta[relay.Constant][32] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%729, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %734 = cast(%var_400, dtype="float64") /* ty=float64 */;
    %735 = cast(%729, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %736 = reshape(%734, newshape=[]) /* ty=float64 */;
    %737 = reshape(%735, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %738 = cast(%var_386, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
    %739 = shape_of(%var_385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%var_385, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %742 = greater(%740, %741) /* ty=Tensor[(16, 5, 3), bool] */;
    %743 = cast(%742, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
    %744 = shape_of(%var_385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%var_385, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %747 = cast(%var_400, dtype="float64") /* ty=float64 */;
    %748 = @func_228(%736, %737) /* ty=Tensor[(7, 3, 15), float32] */;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %750 = reshape(%747, newshape=[]) /* ty=float64 */;
    %751 = reshape(%749, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %752 = floor_divide(%732, %733) /* ty=Tensor[(7, 3, 15), float64] */;
    %753 = less(%745, %746) /* ty=Tensor[(16, 5, 3), bool] */;
    %754 = @func_228(%750, %751) /* ty=Tensor[(7, 3, 15), float32] */;
    (%var_400, %752, %748, %753, %754)
  };
  %755(%var_445, %var_446, %var_447) /* ty=(float64, Tensor[(7, 3, 15), float64], Tensor[(7, 3, 15), float32], Tensor[(16, 5, 3), bool], Tensor[(7, 3, 15), float32]) */
}

def @func_2854() -> Tensor[(11, 10, 3), float32] {
  %757 = fn () -> Tensor[(11, 10, 3), float32] {
    %756 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %756.0
  };
  %757() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_6626() -> Tensor[(11, 10, 3), float32] {
  %758 = @func_6481() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %758.0
}

def @func_3544() -> (Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) {
  @func_3542() /* ty=(Tensor[(11, 10, 3), bool], Tensor[(9, 12, 4), bool], Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), int8]) */
}

def @func_2218() -> (Tensor[(11, 10, 3), float32],) {
  %759 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
  %760 = %759.0;
  (%760,)
}

def @func_2411() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %763 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %761 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    %762 = @func_2059() /* ty=Tensor[(11, 10, 3), float32] */;
    (%761, %762)
  };
  %763() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_6767() -> (Tensor[(11, 10, 3), float32], Tensor[(14, 66), float64]) {
  %768 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(14, 66), float64]) {
    %764 = @func_3561() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %765 = @func_4583() /* ty=(Tensor[(432), bool], Tensor[(7, 11, 12), float64], Tensor[(14, 66), float64]) */;
    %766 = %764.0;
    %767 = %765.2;
    (%766, %767)
  };
  %768() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(14, 66), float64]) */
}

def @func_3572() -> Tensor[(11, 10, 3), float32] {
  @func_2853() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_5242(%var_5241: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) {
  %774 = fn (%var_5238: Tensor[(528), float32]) -> (Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) {
    %769 = cast(%var_5238, dtype="float32") /* ty=Tensor[(528), float32] */;
    %770 = reshape(%769, newshape=[4, 11, 12]) /* ty=Tensor[(4, 11, 12), float32] */;
    %771 = @func_5202(%770) /* ty=(Tensor[(4, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(924), float64]) */;
    %772 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
    %773 = %771.0;
    (%772, %773, %var_5238)
  };
  %774(%var_5241) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(4, 11, 12), float32], Tensor[(528), float32]) */
}

def @func_6840(%var_6829: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), float64],) {
  %775 = @func_4318() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %776 = %775.0;
  %777 = cast(%var_6829, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %781 = mod(%779, %780) /* ty=Tensor[(11, 10, 3), float64] */;
  (%781,)
}

def @func_7950() -> (Tensor[(11, 10, 3), float32],) {
  %782 = @func_7528() /* ty=Tensor[(11, 10, 3), float32] */;
  (%782,)
}

def @func_3320(%var_3319: Tensor[(99), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool]) {
  %789 = fn (%var_3300: Tensor[(99), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool]) {
    %783 = @func_1892() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(9, 12, 4), bool], Tensor[(432), bool]) */;
    %784 = cast(%var_3300, dtype="bool") /* ty=Tensor[(99), bool] */;
    %785 = reshape(%784, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), bool] */;
    %786 = @func_2512(%785) /* ty=(Tensor[(11, 3, 3), bool],) */;
    %787 = %783.0;
    %788 = %786.0;
    (%787, %788, %var_3300)
  };
  %789(%var_3319) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(99), bool]) */
}

def @func_3975(%var_3949: Tensor[(11, 10, 3), float32]) -> (Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) {
  %790 = @func_2218() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %791 = %790.0;
  %792 = cast(%var_3949, dtype="int32") /* ty=Tensor[(11, 10, 3), int32] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="int32") /* ty=Tensor[(11, 10, 3), int32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %796 = cast(meta[relay.Constant][33] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %797 = reshape(%796, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
  %798 = @func_2253(%797) /* ty=(Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(8, 30), bool], Tensor[(11, 10, 3), float64], Tensor[(7, 3, 15), float64]) */;
  %799 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %800 = right_shift(%794, %795) /* ty=Tensor[(11, 10, 3), int32] */;
  %801 = %798.1;
  %802 = %799.0;
  (%800, %801, meta[relay.Constant][33] /* ty=Tensor[(240), bool] */, %802)
}

def @func_4745() -> (Tensor[(11, 10, 3), float32],) {
  %803 = @func_3611() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %804 = %803.0;
  (%804,)
}

def @func_4964() -> (Tensor[(11, 10, 3), float32],) {
  %807 = fn () -> (Tensor[(11, 10, 3), float32],) {
    %805 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %806 = %805.0;
    (%806,)
  };
  %807() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_4318() -> (Tensor[(11, 10, 3), float32],) {
  %808 = @func_2948() /* ty=Tensor[(11, 10, 3), float32] */;
  (%808,)
}

def @func_3375() -> Tensor[(11, 10, 3), float32] {
  %809 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
  %809.0
}

def @func_4002(%var_4001: Tensor[(33, 3), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(33, 3), bool]) {
  %815 = fn (%var_3989: Tensor[(33, 3), bool]) -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(33, 3), bool]) {
    %810 = cast(%var_3989, dtype="bool") /* ty=Tensor[(33, 3), bool] */;
    %811 = reshape(%810, newshape=[11, 9]) /* ty=Tensor[(11, 9), bool] */;
    %812 = @func_3912(%811) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) */;
    %813 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
    %814 = %812.0;
    (%813, %814, %var_3989)
  };
  %815(%var_4001) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32], Tensor[(33, 3), bool]) */
}

def @func_6482() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %822 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %816 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %817 = %816.0;
    %818 = cast(%817, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %819 = reshape(%818, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
    %820 = @func_3975(%819) /* ty=(Tensor[(11, 10, 3), int32], Tensor[(840), uint8], Tensor[(240), bool], Tensor[(11, 10, 3), float32]) */;
    %821 = %820.3;
    (%817, %821)
  };
  %822() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_6195() -> (Tensor[(11, 10, 3), float32],) {
  %823 = @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */;
  %824 = %823.0;
  (%824,)
}

def @func_2578() -> Tensor[(11, 10, 3), float32] {
  @func_2495() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_2606() -> (Tensor[(11, 10, 3), float32],) {
  @func_2604() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_5439(%var_5438: Tensor[(750), float64]) -> (Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) {
  %843 = fn (%var_5432: Tensor[(750), float64]) -> (Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) {
    %825 = cast(meta[relay.Constant][34] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
    %826 = reshape(%825, newshape=[8, 30]) /* ty=Tensor[(8, 30), bool] */;
    %827 = @func_1825(%826) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */;
    %828 = @func_5343() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %829 = %828.0;
    %830 = cast(%829, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %831 = cast(%var_5432, dtype="float64") /* ty=Tensor[(750), float64] */;
    %832 = %827.7;
    %833 = cast(%832, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
    %834 = reshape(%831, newshape=[15, 10, 5]) /* ty=Tensor[(15, 10, 5), float64] */;
    %835 = reshape(%833, newshape=[240]) /* ty=Tensor[(240), bool] */;
    %836 = @func_2713(%834, %835) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(15, 10, 5), uint16], Tensor[(8, 30), float32], Tensor[(240), bool]) */;
    %837 = cast(meta[relay.Constant][35] /* ty=Tensor[(420, 2), uint8] */, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
    %838 = reshape(%837, newshape=[840]) /* ty=Tensor[(840), uint8] */;
    %839 = @func_1963(%838) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(4, 15, 14), bool], Tensor[(840), uint8], Tensor[(11, 10, 3), float32]) */;
    %840 = sinh(%830) /* ty=Tensor[(11, 10, 3), float32] */;
    %841 = %836.3;
    %842 = %839.0;
    (%832, meta[relay.Constant][34] /* ty=Tensor[(240, 1), bool] */, %840, %841, %var_5432, %842, meta[relay.Constant][35] /* ty=Tensor[(420, 2), uint8] */)
  };
  %843(%var_5438) /* ty=(Tensor[(8, 30), float32], Tensor[(240, 1), bool], Tensor[(11, 10, 3), float32], Tensor[(240), bool], Tensor[(750), float64], Tensor[(7, 3, 15), float32], Tensor[(420, 2), uint8]) */
}

def @func_2580() -> Tensor[(11, 10, 3), float32] {
  @func_2578() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_4537() -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
  %848 = fn () -> (Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) {
    %844 = @func_3561() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %845 = @func_2410() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */;
    %846 = %844.0;
    %847 = %845.0;
    (%846, %847)
  };
  %848() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 10, 3), float32]) */
}

def @func_5763(%var_5760: Tensor[(15, 8, 16), bool], %var_5761: Tensor[(15, 8, 16), bool], %var_5762: Tensor[(99), bool]) -> (Tensor[(15, 8, 16), bool], Tensor[(11, 10, 3), float32], Tensor[(99), bool]) {
  %858 = fn (%var_5743: Tensor[(15, 8, 16), bool], %var_5744: Tensor[(15, 8, 16), bool], %var_5757: Tensor[(99), bool]) -> (Tensor[(15, 8, 16), bool], Tensor[(11, 10, 3), float32], Tensor[(99), bool]) {
    %849 = cast(%var_5744, dtype="bool") /* ty=Tensor[(15, 8, 16), bool] */;
    %850 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%var_5743, dtype="bool") /* ty=Tensor[(15, 8, 16), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %853 = cast(%var_5757, dtype="bool") /* ty=Tensor[(99), bool] */;
    %854 = reshape(%853, newshape=[11, 9]) /* ty=Tensor[(11, 9), bool] */;
    %855 = @func_3912(%854) /* ty=(Tensor[(11, 10, 3), float32], Tensor[(11, 3, 3), bool], Tensor[(11, 9), bool]) */;
    %856 = logical_or(%851, %852) /* ty=Tensor[(15, 8, 16), bool] */;
    %857 = %855.0;
    (%856, %857, %var_5757)
  };
  %858(%var_5760, %var_5761, %var_5762) /* ty=(Tensor[(15, 8, 16), bool], Tensor[(11, 10, 3), float32], Tensor[(99), bool]) */
}

def @func_1828(%var_1826: Tensor[(8, 30), bool]) -> (Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) {
  @func_1825(%var_1826) /* ty=(Tensor[(7, 3, 15), float32], Tensor[(7, 3, 15), float32], Tensor[(9, 12, 4), bool], Tensor[(36, 12), bool], Tensor[(9, 12, 4), bool], Tensor[(7, 3, 15), float32], Tensor[(8, 30), bool], Tensor[(8, 30), float32]) */
}

def @func_1864() -> (Tensor[(11, 10, 3), float32],) {
  %859 = @func_1668() /* ty=Tensor[(11, 10, 3), float32] */;
  (%859,)
}

def @func_1866() -> (Tensor[(11, 10, 3), float32],) {
  @func_1864() /* ty=(Tensor[(11, 10, 3), float32],) */
}

def @func_2949() -> Tensor[(11, 10, 3), float32] {
  %861 = fn () -> Tensor[(11, 10, 3), float32] {
    %860 = @func_2431() /* ty=(Tensor[(11, 10, 3), float32],) */;
    %860.0
  };
  %861() /* ty=Tensor[(11, 10, 3), float32] */
}

def @func_7591(%var_7590: Tensor[(315), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64], Tensor[(5, 4, 9), uint64], Tensor[(180), float32]) {
  %876 = fn (%var_7577: Tensor[(315), float64]) -> (Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64], Tensor[(5, 4, 9), uint64], Tensor[(180), float32]) {
    %862 = @func_5519() /* ty=(Tensor[(11, 10, 3), float32], Tensor[(432), bool], Tensor[(11, 10, 3), float32]) */;
    %863 = cast(1.62936f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %864 = cast(%var_7577, dtype="float64") /* ty=Tensor[(315), float64] */;
    %865 = reshape(%863, newshape=[]) /* ty=float64 */;
    %866 = reshape(%864, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %867 = cast(meta[relay.Constant][36] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %868 = @func_2853() /* ty=Tensor[(11, 10, 3), float32] */;
    %869 = cast(%868, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
    %870 = reshape(%867, newshape=[5, 4, 9]) /* ty=Tensor[(5, 4, 9), float32] */;
    %871 = reshape(%869, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), float32] */;
    %872 = @func_7091(%870, %871) /* ty=(Tensor[(5, 4, 9), uint64], Tensor[(11, 10, 3), float32]) */;
    %873 = %862.1;
    %874 = @func_228(%865, %866) /* ty=Tensor[(7, 3, 15), float32] */;
    %875 = %872.0;
    (%873, %868, %874, 1.62936f64 /* ty=float64 */, %var_7577, %875, meta[relay.Constant][36] /* ty=Tensor[(180), float32] */)
  };
  %876(%var_7590) /* ty=(Tensor[(432), bool], Tensor[(11, 10, 3), float32], Tensor[(7, 3, 15), float32], float64, Tensor[(315), float64], Tensor[(5, 4, 9), uint64], Tensor[(180), float32]) */
}

def @func_3574() -> Tensor[(11, 10, 3), float32] {
  @func_3572() /* ty=Tensor[(11, 10, 3), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen288/build/output.py", line 2477, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

