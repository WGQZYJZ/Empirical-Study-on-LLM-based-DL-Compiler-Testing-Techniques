==========mod==========
#[version = "0.0.5"]
def @func_6746() -> Tensor[(6, 4, 2), float32] {
  @func_5853() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_5356(%var_5303: Tensor[(1521), float64], %var_5304: Tensor[(660), int16], %var_5305: Tensor[(9240), int16], %var_5306: Tensor[(576), int8], %var_5312: Tensor[(90), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(13, 13, 9), bool], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(6, 4, 2), bool]) {
  %0 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %1 = cast(%var_5303, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %2 = cast(%var_5304, dtype="int16") /* ty=Tensor[(660), int16] */;
  %3 = cast(%var_5305, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %4 = cast(%var_5306, dtype="int8") /* ty=Tensor[(576), int8] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %6 = cast(%var_5303, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %7 = reshape(%1, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %8 = reshape(%2, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %9 = reshape(%3, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
  %10 = reshape(%4, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
  %11 = reshape(%5, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %12 = reshape(%6, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %13 = @func_3711(%7, %8, %9, %10, %11, %12) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
  %14 = cast(%var_5312, dtype="float64") /* ty=Tensor[(90), float64] */;
  %15 = reshape(%14, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %16 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %19 = atan(%18) /* ty=Tensor[(6, 4, 2), float32] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 4, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = %0.0;
  %25 = %13.6;
  %26 = @func_1534(%15) /* ty=Tensor[(15, 3, 2), float64] */;
  %27 = less(%22, %23) /* ty=Tensor[(6, 4, 2), bool] */;
  (%24, %25, %var_5303, %var_5304, %var_5305, %var_5306, meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, %26, %var_5312, %27)
}

def @func_1562(%var_1556: Tensor[(7, 16, 10), int8]) -> (Tensor[(7, 16, 10), int8],) {
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 16, 10), int8] */, dtype="int8") /* ty=Tensor[(7, 16, 10), int8] */;
  %29 = shape_of(%var_1556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_1556, dtype="int8") /* ty=Tensor[(7, 16, 10), int8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %32 = bitwise_and(%30, %31) /* ty=Tensor[(7, 16, 10), int8] */;
  (%32,)
}

def @func_5853() -> Tensor[(6, 4, 2), float32] {
  @func_5222() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_5946(%var_5934: Tensor[(6, 4, 2), float32]) -> Tensor[(6, 4, 2), int16] {
  %33 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  %34 = cast(%var_5934, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%36, %37) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_6896() -> Tensor[(6, 4, 2), float32] {
  @func_6746() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_6290(%var_6123: Tensor[(14, 12, 9), int32], %var_6128: Tensor[(14, 12, 9), int32], %var_6163: Tensor[(48), float32], %var_6222: Tensor[(308), float64], %var_6255: Tensor[(660), int16]) -> (Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64], Tensor[(6, 4, 2), int16], Tensor[(48), float32], Tensor[(14, 12, 9), int8], Tensor[(6, 4, 2), bool], Tensor[(11, 4, 7), bool], Tensor[(308), float64], Tensor[(16), float64], Tensor[(8, 16, 9), uint64], Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(660), int16], Tensor[(14, 12, 9), float64], Tensor[(6, 4, 2), int16]) {
  %38 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %40 = reshape(%38, newshape=[]) /* ty=uint64 */;
  %41 = reshape(%39, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
  %42 = @func_1209(%40, %41) /* ty=(Tensor[(8, 16, 9), uint64],) */;
  %43 = cast(%var_6163, dtype="float32") /* ty=Tensor[(48), float32] */;
  %44 = reshape(%43, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float32] */;
  %45 = cast(%var_6128, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %46 = cos(%45) /* ty=Tensor[(14, 12, 9), float64] */;
  %47 = cast(%var_6123, dtype="int8") /* ty=Tensor[(14, 12, 9), int8] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int8") /* ty=Tensor[(14, 12, 9), int8] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %51 = cast(%var_6222, dtype="float64") /* ty=Tensor[(308), float64] */;
  %52 = cast(%var_6222, dtype="float64") /* ty=Tensor[(308), float64] */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %54 = reshape(%51, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
  %55 = reshape(%52, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
  %56 = reshape(%53, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %57 = @func_6117(%54, %55, %56) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) */;
  %58 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %59 = %42.0;
  %60 = cast(%59, dtype="uint64") /* ty=Tensor[(8, 16, 9), uint64] */;
  %61 = reshape(%58, newshape=[]) /* ty=uint64 */;
  %62 = reshape(%60, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
  %63 = @func_1209(%61, %62) /* ty=(Tensor[(8, 16, 9), uint64],) */;
  %64 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %65 = cast(%var_6255, dtype="int16") /* ty=Tensor[(660), int16] */;
  %66 = reshape(%65, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %67 = @func_2428(%66) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %68 = cast(%46, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %69 = acos(%68) /* ty=Tensor[(14, 12, 9), float64] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
  %71 = log10(%70) /* ty=Tensor[(14, 12, 9), float32] */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(14, 12, 9), int32] */;
  %73 = shape_of(%var_6123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_6123, dtype="int32") /* ty=Tensor[(14, 12, 9), int32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %76 = bitwise_and(%74, %75) /* ty=Tensor[(14, 12, 9), int32] */;
  %77 = cast(%var_6128, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %81 = mod(%79, %80) /* ty=Tensor[(14, 12, 9), float32] */;
  %82 = cast(%81, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %83 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%71, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = less(%84, %85) /* ty=Tensor[(14, 12, 9), bool] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %88 = cast(%var_6163, dtype="bool") /* ty=Tensor[(48), bool] */;
  %89 = reshape(%88, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
  %90 = @func_5946(%44) /* ty=Tensor[(6, 4, 2), int16] */;
  %91 = minimum(%49, %50) /* ty=Tensor[(14, 12, 9), int8] */;
  %92 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %93 = %57.0;
  %94 = %63.0;
  %95 = %64.0;
  %96 = %67.1;
  %97 = atanh(%87) /* ty=Tensor[(14, 12, 9), float64] */;
  %98 = @func_5886(%89) /* ty=Tensor[(6, 4, 2), int16] */;
  (%59, meta[relay.Constant][3] /* ty=uint64 */, meta[relay.Constant][4] /* ty=Tensor[(1152), uint64] */, %90, %var_6163, %91, %92, %93, %var_6222, meta[relay.Constant][5] /* ty=Tensor[(16), float64] */, %94, %95, %96, %var_6255, %97, %98)
}

def @func_7962() -> (Tensor[(6, 4, 2), float32],) {
  %99 = @func_6896() /* ty=Tensor[(6, 4, 2), float32] */;
  (%99,)
}

def @func_197(%var_180: Tensor[(1, 12, 1), float64]) -> Tensor[(1, 12, 1), float64] {
  %100 = cast(%var_180, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %101 = exp(%100) /* ty=Tensor[(1, 12, 1), float64] */;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  sinh(%102) /* ty=Tensor[(1, 12, 1), float64] */
}

def @func_1209(%var_1204: uint64, %var_1205: Tensor[(8, 16, 9), uint64]) -> (Tensor[(8, 16, 9), uint64],) {
  %103 = cast(%var_1204, dtype="uint64") /* ty=uint64 */;
  %104 = cast(%var_1205, dtype="uint64") /* ty=Tensor[(8, 16, 9), uint64] */;
  %105 = maximum(%103, %104) /* ty=Tensor[(8, 16, 9), uint64] */;
  (%105,)
}

def @func_6599() -> (Tensor[(6, 4, 2), float64], Tensor[(13, 12, 6), float32], Tensor[(1, 936), float32], Tensor[(6, 4, 2), float32], Tensor[(12), float64]) {
  %106 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 936), float32] */, dtype="float32") /* ty=Tensor[(1, 936), float32] */;
  %110 = reshape(%109, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float32] */;
  %111 = @func_4108(%110) /* ty=(Tensor[(13, 12, 6), float32],) */;
  %112 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %113 = atanh(%108) /* ty=Tensor[(6, 4, 2), float64] */;
  %114 = %111.0;
  %115 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  %116 = %112.3;
  (%113, %114, meta[relay.Constant][7] /* ty=Tensor[(1, 936), float32] */, %115, %116)
}

def @func_2834(%var_2827: Tensor[(1, 6, 1), int64], %var_2828: Tensor[(4, 6, 6), int64]) -> (Tensor[(4, 6, 6), int64],) {
  %117 = cast(%var_2827, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %118 = cast(%var_2828, dtype="int64") /* ty=Tensor[(4, 6, 6), int64] */;
  %119 = minimum(%117, %118) /* ty=Tensor[(4, 6, 6), int64] */;
  (%119,)
}

def @func_4108(%var_4105: Tensor[(13, 12, 6), float32]) -> (Tensor[(13, 12, 6), float32],) {
  %120 = cast(%var_4105, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %121 = asinh(%120) /* ty=Tensor[(13, 12, 6), float32] */;
  (%121,)
}

def @func_7117() -> (Tensor[(6, 4, 2), float32],) {
  %122 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  (%122,)
}

def @func_4513() -> (Tensor[(6, 4, 2), bool],) {
  %123 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %124 = %123.0;
  (%124,)
}

def @func_2428(%var_2403: Tensor[(5, 132), int16]) -> (Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
  %126 = cast(%var_2403, dtype="int16") /* ty=Tensor[(5, 132), int16] */;
  %127 = reshape(%126, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), int16] */;
  %128 = @func_1992(%127) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
  %131 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %132 = reshape(%131, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %133 = log10(%125) /* ty=Tensor[(2, 15, 1), float64] */;
  %134 = log10(%130) /* ty=Tensor[(6, 10, 11), float64] */;
  %135 = @func_1534(%132) /* ty=Tensor[(15, 3, 2), float64] */;
  (%133, %var_2403, %134, %135, meta[relay.Constant][9] /* ty=Tensor[(90), float64] */)
}

def @func_4991() -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  %136 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %138 = reshape(%137, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %139 = %136.0;
  %140 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %141 = @func_197(%138) /* ty=Tensor[(1, 12, 1), float64] */;
  (%139, %140, %141, meta[relay.Constant][10] /* ty=Tensor[(12), float64] */)
}

def @func_7945(%var_7911: Tensor[(308), float64], %var_7912: Tensor[(16), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(5, 16, 2), bool], Tensor[(308), float64], Tensor[(16), float64]) {
  %142 = cast(%var_7911, dtype="float64") /* ty=Tensor[(308), float64] */;
  %143 = cast(%var_7911, dtype="float64") /* ty=Tensor[(308), float64] */;
  %144 = cast(%var_7912, dtype="float64") /* ty=Tensor[(16), float64] */;
  %145 = reshape(%142, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
  %146 = reshape(%143, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
  %147 = reshape(%144, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %148 = @func_6117(%145, %146, %147) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) */;
  %149 = @func_6447() /* ty=Tensor[(6, 4, 2), float64] */;
  %150 = %148.4;
  (%149, %150, %var_7911, %var_7912)
}

def @func_7271() -> Tensor[(6, 4, 2), float64] {
  %151 = @func_6319() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  sigmoid(%153) /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_5222() -> Tensor[(6, 4, 2), float32] {
  %154 = @func_4599() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %154.0
}

def @func_4808(%var_4796: Tensor[(660), int16], %var_4798: Tensor[(576), int8], %var_4799: Tensor[(1120), int8]) -> (Tensor[(6, 4, 2), float32], Tensor[(13, 13, 9), uint32], Tensor[(169, 9), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
  %155 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(169, 9), float64] */, dtype="float64") /* ty=Tensor[(169, 9), float64] */;
  %159 = cast(%var_4796, dtype="int16") /* ty=Tensor[(660), int16] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(9240), int16] */, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %161 = cast(%var_4798, dtype="int8") /* ty=Tensor[(576), int8] */;
  %162 = cast(%var_4799, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %163 = cast(meta[relay.Constant][11] /* ty=Tensor[(169, 9), float64] */, dtype="float64") /* ty=Tensor[(169, 9), float64] */;
  %164 = reshape(%158, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %165 = reshape(%159, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %166 = reshape(%160, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
  %167 = reshape(%161, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
  %168 = reshape(%162, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %169 = reshape(%163, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %170 = @func_3711(%164, %165, %166, %167, %168, %169) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %172 = reshape(%171, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %173 = cos(%157) /* ty=Tensor[(6, 4, 2), float32] */;
  %174 = %170.7;
  %175 = @func_1534(%172) /* ty=Tensor[(15, 3, 2), float64] */;
  (%173, %174, meta[relay.Constant][11] /* ty=Tensor[(169, 9), float64] */, %var_4796, meta[relay.Constant][12] /* ty=Tensor[(9240), int16] */, %var_4798, %var_4799, %175, meta[relay.Constant][13] /* ty=Tensor[(90), float64] */)
}

def @func_5886(%var_5877: Tensor[(6, 4, 2), bool]) -> Tensor[(6, 4, 2), int16] {
  %176 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %177 = %176.0;
  %178 = cast(%var_5877, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%180, %181) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_5564() -> Tensor[(6, 4, 2), float64] {
  %182 = @func_5049() /* ty=(Tensor[(6, 4, 2), float64],) */;
  %182.0
}

def @func_5074() -> (Tensor[(6, 4, 2), bool],) {
  %183 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %184 = %183.0;
  (%184,)
}

def @func_1799(%var_1791: uint64, %var_1792: Tensor[(12, 14, 7), uint64]) -> (Tensor[(12, 14, 7), uint64],) {
  %185 = cast(%var_1791, dtype="uint64") /* ty=uint64 */;
  %186 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(12, 14, 7), uint64] */;
  %187 = bitwise_and(%185, %186) /* ty=Tensor[(12, 14, 7), uint64] */;
  (%187,)
}

def @func_2487(%var_2433: Tensor[(1, 12, 16), float64]) -> (Tensor[(180), bool], Tensor[(15, 4, 3), float32], Tensor[(?, 12, 16), bool], Tensor[(?, 12, 16), float32]) {
  %188 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %189 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %190 = reshape(%188, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %191 = reshape(%189, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %192 = @func_1378(%190, %191) /* ty=Tensor[(15, 4, 3), bool] */;
  %193 = cast(-4.63502f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %194 = cast(%192, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %195 = cast(-4.63502f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %196 = cast(%var_2433, dtype="float64") /* ty=Tensor[(1, 12, 16), float64] */;
  %197 = mod(%195, %196) /* ty=Tensor[(1, 12, 16), float64] */;
  %198 = cast(%197, dtype="uint64") /* ty=Tensor[(1, 12, 16), uint64] */;
  %199 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_2433, dtype="uint64") /* ty=Tensor[(1, 12, 16), uint64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %202 = right_shift(%200, %201) /* ty=Tensor[(?, 12, 16), uint64] */;
  %203 = cast(-4.63502f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %204 = cast(%202, dtype="bool") /* ty=Tensor[(?, 12, 16), bool] */;
  %205 = cast(%var_2433, dtype="float32") /* ty=Tensor[(1, 12, 16), float32] */;
  %206 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%202, dtype="float32") /* ty=Tensor[(?, 12, 16), float32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %209 = power(%193, %194) /* ty=Tensor[(15, 4, 3), float32] */;
  %210 = logical_and(%203, %204) /* ty=Tensor[(?, 12, 16), bool] */;
  %211 = divide(%207, %208) /* ty=Tensor[(?, 12, 16), float32] */;
  (meta[relay.Constant][14] /* ty=Tensor[(180), bool] */, %209, %210, %211)
}

def @func_4360() -> Tensor[(6, 4, 2), bool] {
  %212 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %213 = log10(%212) /* ty=Tensor[(6, 4, 2), float32] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %215 = sinh(%214) /* ty=Tensor[(6, 4, 2), float64] */;
  %216 = cast(%215, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %217 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%213, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%218, %219) /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_7350(%var_7308: Tensor[(16), float64], %var_7309: Tensor[(160), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(160), float64], Tensor[(6, 4, 2), bool]) {
  %220 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %221 = cast(%var_7308, dtype="float64") /* ty=Tensor[(16), float64] */;
  %222 = cast(%var_7309, dtype="float64") /* ty=Tensor[(160), float64] */;
  %223 = reshape(%221, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
  %224 = reshape(%222, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %225 = @func_4272(%223, %224) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
  %226 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %227 = %220.0;
  %228 = %225.1;
  %229 = %226.0;
  (%227, %228, %var_7308, %var_7309, %229)
}

def @func_6117(%var_6089: Tensor[(11, 4, 7), float64], %var_6090: Tensor[(11, 4, 7), float64], %var_6097: Tensor[(16), float64]) -> (Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) {
  %230 = cast(%var_6090, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %231 = shape_of(%var_6089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_6089, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = cast(%var_6097, dtype="float64") /* ty=Tensor[(16), float64] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %236 = reshape(%234, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
  %237 = reshape(%235, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %238 = @func_4272(%236, %237) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %241 = reshape(%240, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %242 = greater_equal(%232, %233) /* ty=Tensor[(11, 4, 7), bool] */;
  %243 = @func_1154(%241) /* ty=Tensor[(5, 16, 2), bool] */;
  (%242, %239, %var_6097, meta[relay.Constant][16] /* ty=Tensor[(160), float64] */, %243)
}

def @func_1378(%var_1365: Tensor[(15, 4, 3), bool], %var_1366: Tensor[(15, 4, 3), bool]) -> Tensor[(15, 4, 3), bool] {
  %244 = cast(%var_1366, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %245 = shape_of(%var_1365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_1365, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = logical_and(%246, %247) /* ty=Tensor[(15, 4, 3), bool] */;
  %249 = cast(%var_1365, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%251, %252) /* ty=Tensor[(15, 4, 3), bool] */
}

def @func_1992(%var_1969: Tensor[(6, 10, 11), int16]) -> (Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) {
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 10, 11), int16] */, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %254 = shape_of(%var_1969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_1969, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = cast(%var_1969, dtype="int64") /* ty=Tensor[(6, 10, 11), int64] */;
  %258 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(6, 10, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 10, 11), int16] */, dtype="int64") /* ty=Tensor[(6, 10, 11), int64] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %261 = less_equal(%255, %256) /* ty=Tensor[(6, 10, 11), bool] */;
  %262 = bitwise_xor(%259, %260) /* ty=Tensor[(6, 10, 11), int64] */;
  (%261, %262)
}

def @func_5535() -> (Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  %263 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 1, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %264 = cast(meta[relay.Constant][19] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %265 = reshape(%264, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %266 = atan(%263) /* ty=Tensor[(10, 1, 10), float64] */;
  %267 = @func_197(%265) /* ty=Tensor[(1, 12, 1), float64] */;
  (%266, %267, meta[relay.Constant][19] /* ty=Tensor[(12), float64] */)
}

def @func_7399() -> (Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) {
  %268 = @func_4599() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %269 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %270 = reshape(%269, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %271 = @func_1950(%270) /* ty=(Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) */;
  %272 = %268.0;
  %273 = %271.2;
  %274 = @func_6746() /* ty=Tensor[(6, 4, 2), float32] */;
  (%272, %273, meta[relay.Constant][20] /* ty=Tensor[(180), bool] */, %274)
}

def @func_6816() -> (Tensor[(6, 4, 2), float32],) {
  %275 = @func_6319() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %276 = %275.0;
  (%276,)
}

def @func_7474() -> (Tensor[(6, 4, 2), bool],) {
  %277 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %278 = %277.1;
  (%278,)
}

def @func_3711(%var_3620: Tensor[(13, 13, 9), float64], %var_3645: Tensor[(660), int16], %var_3646: Tensor[(9240), int16], %var_3647: Tensor[(288, 2), int8], %var_3648: Tensor[(1120), int8], %var_3653: Tensor[(13, 13, 9), float64]) -> (Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) {
  %279 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %280 = shape_of(%var_3620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_3620, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(%var_3645, dtype="int16") /* ty=Tensor[(660), int16] */;
  %284 = cast(%var_3646, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %285 = cast(%var_3647, dtype="int8") /* ty=Tensor[(288, 2), int8] */;
  %286 = cast(%var_3648, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %287 = reshape(%283, newshape=[1, 660]) /* ty=Tensor[(1, 660), int16] */;
  %288 = reshape(%284, newshape=[14, 660]) /* ty=Tensor[(14, 660), int16] */;
  %289 = reshape(%285, newshape=[576, 1]) /* ty=Tensor[(576, 1), int8] */;
  %290 = reshape(%286, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %291 = @func_3006(%287, %288, %289, %290) /* ty=(Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) */;
  %292 = cast(%var_3620, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %293 = log(%292) /* ty=Tensor[(13, 13, 9), float64] */;
  %294 = cast(%var_3653, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %299 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%293, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = floor_divide(%300, %301) /* ty=Tensor[(13, 13, 9), float64] */;
  %303 = cast(%var_3620, dtype="float32") /* ty=Tensor[(13, 13, 9), float32] */;
  %304 = cosh(%303) /* ty=Tensor[(13, 13, 9), float32] */;
  %305 = cast(%304, dtype="uint32") /* ty=Tensor[(13, 13, 9), uint32] */;
  %306 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%302, dtype="uint32") /* ty=Tensor[(13, 13, 9), uint32] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %309 = logical_and(%281, %282) /* ty=Tensor[(13, 13, 9), bool] */;
  %310 = %291.0;
  %311 = logical_or(%296, %297) /* ty=Tensor[(13, 13, 9), bool] */;
  %312 = subtract(%307, %308) /* ty=Tensor[(13, 13, 9), uint32] */;
  (%309, %310, %var_3645, %var_3646, %var_3647, %var_3648, %311, %312)
}

def @func_6697(%var_6695: Tensor[(160), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  %313 = cast(%var_6695, dtype="bool") /* ty=Tensor[(160), bool] */;
  %314 = reshape(%313, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %315 = @func_5666() /* ty=Tensor[(6, 4, 2), bool] */;
  %316 = @func_1154(%314) /* ty=Tensor[(5, 16, 2), bool] */;
  (%315, %316, %var_6695)
}

def @func_4482(%var_4402: bool, %var_4403: Tensor[(11, 6, 16), bool], %var_4436: Tensor[(160), bool], %var_4474: Tensor[(576), int8], %var_4475: Tensor[(3600), float32], %var_4477: Tensor[(480), float32]) -> (Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) {
  %317 = cast(%var_4436, dtype="bool") /* ty=Tensor[(160), bool] */;
  %318 = reshape(%317, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %319 = cast(%var_4402, dtype="bool") /* ty=bool */;
  %320 = cast(%var_4403, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %321 = logical_or(%319, %320) /* ty=Tensor[(11, 6, 16), bool] */;
  %322 = cast(%var_4402, dtype="float32") /* ty=float32 */;
  %323 = cast(%321, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %324 = cast(meta[relay.Constant][22] /* ty=Tensor[(660), int16] */, dtype="int16") /* ty=Tensor[(660), int16] */;
  %325 = reshape(%324, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), int16] */;
  %326 = @func_1992(%325) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) */;
  %327 = cast(%var_4403, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %328 = sqrt(%327) /* ty=Tensor[(11, 6, 16), float32] */;
  %329 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %334 = reshape(%333, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %335 = cast(%var_4474, dtype="int8") /* ty=Tensor[(576), int8] */;
  %336 = cast(%var_4475, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %337 = cast(meta[relay.Constant][25] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %338 = cast(%var_4477, dtype="float32") /* ty=Tensor[(480), float32] */;
  %339 = reshape(%335, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), int8] */;
  %340 = reshape(%336, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %341 = reshape(%337, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %342 = reshape(%338, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %343 = @func_2296(%339, %340, %341, %342) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) */;
  %344 = @func_1154(%318) /* ty=Tensor[(5, 16, 2), bool] */;
  %345 = minimum(%322, %323) /* ty=Tensor[(11, 6, 16), float32] */;
  %346 = %326.0;
  %347 = power(%331, %332) /* ty=Tensor[(11, 6, 16), float32] */;
  %348 = @func_1534(%334) /* ty=Tensor[(15, 3, 2), float64] */;
  %349 = %343.5;
  (%344, %var_4436, %345, %346, meta[relay.Constant][22] /* ty=Tensor[(660), int16] */, %347, %348, meta[relay.Constant][24] /* ty=Tensor[(90), float64] */, %349, %var_4474, %var_4475, meta[relay.Constant][25] /* ty=Tensor[(1120), int8] */, %var_4477)
}

def @func_5201(%var_5197: Tensor[(240), int8]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 10, 4), float64], Tensor[(240), int8]) {
  %350 = @func_5074() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %351 = cast(%var_5197, dtype="int8") /* ty=Tensor[(240), int8] */;
  %352 = reshape(%351, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int8] */;
  %353 = @func_3266(%352) /* ty=(Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) */;
  %354 = %350.0;
  %355 = %353.1;
  (%354, %355, %var_5197)
}

def @func_2682(%var_2639: Tensor[(16, 16, 12), uint16], %var_2640: Tensor[(16, 16, 12), uint16], %var_2648: Tensor[(480), float32], %var_2673: Tensor[(12), float64]) -> (Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) {
  %356 = cast(%var_2648, dtype="float32") /* ty=Tensor[(480), float32] */;
  %357 = reshape(%356, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %358 = @func_1516(%357) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %359 = cast(%var_2640, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %360 = shape_of(%var_2639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_2639, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = less(%361, %362) /* ty=Tensor[(16, 16, 12), bool] */;
  %364 = cast(%var_2640, dtype="uint16") /* ty=Tensor[(16, 16, 12), uint16] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="uint16") /* ty=Tensor[(16, 16, 12), uint16] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %368 = cast(meta[relay.Constant][26] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %369 = cast(%var_2673, dtype="float64") /* ty=Tensor[(12), float64] */;
  %370 = cast(meta[relay.Constant][26] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %371 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %372 = reshape(%368, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %373 = reshape(%369, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %374 = reshape(%370, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %375 = reshape(%371, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), float32] */;
  %376 = @func_1038(%372, %373, %374, %375) /* ty=(Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) */;
  %377 = %358.0;
  %378 = right_shift(%366, %367) /* ty=Tensor[(16, 16, 12), uint16] */;
  %379 = %376.3;
  (%377, %var_2648, %378, %379, meta[relay.Constant][26] /* ty=Tensor[(308), float32] */, %var_2673, meta[relay.Constant][27] /* ty=Tensor[(168), float32] */)
}

def @func_1950(%var_1930: Tensor[(6, 30), bool]) -> (Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) {
  %380 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %381 = cast(%var_1930, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %382 = cast(%var_1930, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %383 = reshape(%381, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %384 = reshape(%382, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %385 = atan(%380) /* ty=Tensor[(6, 8, 14), float32] */;
  %386 = @func_1378(%383, %384) /* ty=Tensor[(15, 4, 3), bool] */;
  (%385, %386, %var_1930)
}

def @func_1516(%var_1489: Tensor[(5, 12, 8), float32]) -> (Tensor[(5, 12, 8), float64],) {
  %387 = cast(0.349317f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %388 = cast(%var_1489, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %389 = mod(%387, %388) /* ty=Tensor[(5, 12, 8), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
  %391 = erf(%390) /* ty=Tensor[(5, 12, 8), float64] */;
  (%391,)
}

def @func_5732(%var_5705: Tensor[(330, 2), int16]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(330, 2), int16], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  %392 = cast(%var_5705, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %393 = reshape(%392, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %394 = @func_2428(%393) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %395 = cast(meta[relay.Constant][29] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %396 = reshape(%395, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %397 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %398 = %394.1;
  %399 = @func_1154(%396) /* ty=Tensor[(5, 16, 2), bool] */;
  (%397, %398, %var_5705, %399, meta[relay.Constant][29] /* ty=Tensor[(160), bool] */)
}

def @func_7699() -> (Tensor[(6, 4, 2), float32],) {
  %400 = @func_6816() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %401 = %400.0;
  (%401,)
}

def @func_4599() -> (Tensor[(6, 4, 2), float32],) {
  %402 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %405 = acosh(%404) /* ty=Tensor[(6, 4, 2), float32] */;
  (%405,)
}

def @func_5049() -> (Tensor[(6, 4, 2), float64],) {
  %406 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %407 = %406.0;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %409 = cosh(%408) /* ty=Tensor[(6, 4, 2), float64] */;
  (%409,)
}

def @func_6017(%var_5969: Tensor[(96, 12), uint64], %var_5975: Tensor[(480), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) {
  %410 = @func_5127() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %411 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %412 = cast(meta[relay.Constant][31] /* ty=Tensor[(96, 12), uint64] */, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %413 = reshape(%411, newshape=[]) /* ty=uint64 */;
  %414 = reshape(%412, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
  %415 = @func_1209(%413, %414) /* ty=(Tensor[(8, 16, 9), uint64],) */;
  %416 = cast(meta[relay.Constant][32] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %417 = cast(meta[relay.Constant][32] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %418 = cast(%var_5975, dtype="float32") /* ty=Tensor[(480), float32] */;
  %419 = cast(meta[relay.Constant][33] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %420 = reshape(%416, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), uint16] */;
  %421 = reshape(%417, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), uint16] */;
  %422 = reshape(%418, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %423 = reshape(%419, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %424 = @func_2682(%420, %421, %422, %423) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) */;
  %425 = %424.4;
  %426 = cast(%425, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %427 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint32") /* ty=uint32 */;
  %428 = %410.0;
  %429 = cast(%428, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %430 = reshape(%429, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
  %431 = cast(%var_5969, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %432 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(96, 12), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(meta[relay.Constant][31] /* ty=Tensor[(96, 12), uint64] */, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %435 = minimum(%433, %434) /* ty=Tensor[(96, 12), uint64] */;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(96, 12), float64] */;
  %437 = cast(meta[relay.Constant][33] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %438 = reshape(%437, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %439 = %415.0;
  %440 = add(%426, %427) /* ty=Tensor[(308), uint32] */;
  %441 = @func_5886(%430) /* ty=Tensor[(6, 4, 2), int16] */;
  %442 = acosh(%436) /* ty=Tensor[(96, 12), float64] */;
  %443 = @func_197(%438) /* ty=Tensor[(1, 12, 1), float64] */;
  (%428, %439, meta[relay.Constant][32] /* ty=Tensor[(3072), uint16] */, %var_5975, meta[relay.Constant][33] /* ty=Tensor[(12), float64] */, %440, %441, %442, %443)
}

def @func_7003() -> Tensor[(6, 4, 2), bool] {
  %444 = @func_5074() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %444.0
}

def @func_6437(%var_6427: Tensor[(1800, 2), float32], %var_6428: Tensor[(480), float32]) -> (Tensor[(10, 1, 10), float64], Tensor[(14, 9, 5), bool], Tensor[(630), int64], Tensor[(6, 4, 2), float64], Tensor[(3600), float32], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(1800, 2), float32], Tensor[(480), float32]) {
  %445 = @func_5535() /* ty=(Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %446 = cast(meta[relay.Constant][34] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %447 = reshape(%446, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), int64] */;
  %448 = @func_5557(%447) /* ty=(Tensor[(14, 9, 5), bool],) */;
  %449 = @func_5049() /* ty=(Tensor[(6, 4, 2), float64],) */;
  %450 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %451 = cast(meta[relay.Constant][35] /* ty=Tensor[(1056), bool] */, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %452 = cast(meta[relay.Constant][36] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %453 = cast(meta[relay.Constant][37] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %454 = cast(%var_6427, dtype="float32") /* ty=Tensor[(1800, 2), float32] */;
  %455 = cast(%var_6428, dtype="float32") /* ty=Tensor[(480), float32] */;
  %456 = reshape(%450, newshape=[]) /* ty=bool */;
  %457 = reshape(%451, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %458 = reshape(%452, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %459 = reshape(%453, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %460 = reshape(%454, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %461 = reshape(%455, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %462 = @func_4482(%456, %457, %458, %459, %460, %461) /* ty=(Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) */;
  %463 = %445.0;
  %464 = %448.0;
  %465 = %449.0;
  %466 = %462.10;
  (%463, %464, meta[relay.Constant][34] /* ty=Tensor[(630), int64] */, %465, %466, False /* ty=bool */, meta[relay.Constant][35] /* ty=Tensor[(1056), bool] */, meta[relay.Constant][36] /* ty=Tensor[(160), bool] */, meta[relay.Constant][37] /* ty=Tensor[(576), int8] */, %var_6427, %var_6428)
}

def @func_7887(%var_7854: Tensor[(6), int64]) -> (Tensor[(2, 14, 10), bool], Tensor[(6), int64], Tensor[(5, 132), int16], Tensor[(576), int8], Tensor[(6), int64], Tensor[(144), int64], Tensor[(2, 14, 10), uint16], Tensor[(2, 14, 10), float64]) {
  %467 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %468 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 132), int16] */, dtype="int16") /* ty=Tensor[(5, 132), int16] */;
  %472 = cast(meta[relay.Constant][41] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %473 = cast(%var_7854, dtype="int64") /* ty=Tensor[(6), int64] */;
  %474 = cast(meta[relay.Constant][42] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %475 = reshape(%471, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %476 = reshape(%472, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %477 = reshape(%473, newshape=[6]) /* ty=Tensor[(6), int64] */;
  %478 = reshape(%474, newshape=[2, 72]) /* ty=Tensor[(2, 72), int64] */;
  %479 = @func_4886(%475, %476, %477, %478) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) */;
  %480 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
  %481 = log2(%480) /* ty=Tensor[(2, 14, 10), float64] */;
  %482 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %483 = sin(%482) /* ty=Tensor[(2, 14, 10), float32] */;
  %484 = cast(%483, dtype="uint16") /* ty=Tensor[(2, 14, 10), uint16] */;
  %485 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%481, dtype="uint16") /* ty=Tensor[(2, 14, 10), uint16] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %488 = cast(%483, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
  %489 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%481, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %492 = equal(%469, %470) /* ty=Tensor[(2, 14, 10), bool] */;
  %493 = %479.7;
  %494 = logical_xor(%486, %487) /* ty=Tensor[(2, 14, 10), uint16] */;
  %495 = mod(%490, %491) /* ty=Tensor[(2, 14, 10), float64] */;
  (%492, %493, meta[relay.Constant][40] /* ty=Tensor[(5, 132), int16] */, meta[relay.Constant][41] /* ty=Tensor[(576), int8] */, %var_7854, meta[relay.Constant][42] /* ty=Tensor[(144), int64] */, %494, %495)
}

def @func_5774() -> Tensor[(6, 4, 2), bool] {
  @func_4656() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_7283() -> Tensor[(6, 4, 2), float32] {
  @func_5853() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_6447() -> Tensor[(6, 4, 2), float64] {
  @func_5564() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_6513() -> Tensor[(12), float64] {
  %496 = @func_5651() /* ty=(Tensor[(12), float64],) */;
  %496.0
}

def @func_4656() -> Tensor[(6, 4, 2), bool] {
  @func_4360() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_7789(%var_7752: Tensor[(6), int64], %var_7753: Tensor[(144), int64], %var_7771: Tensor[(660), int16], %var_7772: Tensor[(9240, 1), int16], %var_7786: Tensor[(4, 40), float64]) -> (Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) {
  %497 = @func_7399() /* ty=(Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) */;
  %498 = %497.3;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %500 = cast(%var_7752, dtype="int64") /* ty=Tensor[(6), int64] */;
  %501 = cast(%var_7753, dtype="int64") /* ty=Tensor[(144), int64] */;
  %502 = reshape(%500, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), int64] */;
  %503 = reshape(%501, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), int64] */;
  %504 = @func_2834(%502, %503) /* ty=(Tensor[(4, 6, 6), int64],) */;
  %505 = cast(meta[relay.Constant][43] /* ty=Tensor[(1521), float64] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %506 = cast(%var_7771, dtype="int16") /* ty=Tensor[(660), int16] */;
  %507 = cast(%var_7772, dtype="int16") /* ty=Tensor[(9240, 1), int16] */;
  %508 = cast(meta[relay.Constant][44] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %509 = cast(meta[relay.Constant][45] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %510 = cast(meta[relay.Constant][43] /* ty=Tensor[(1521), float64] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %511 = reshape(%505, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %512 = reshape(%506, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %513 = reshape(%507, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
  %514 = reshape(%508, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
  %515 = reshape(%509, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %516 = reshape(%510, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %517 = @func_3711(%511, %512, %513, %514, %515, %516) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
  %518 = cast(meta[relay.Constant][46] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %519 = cast(%var_7786, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
  %520 = reshape(%518, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
  %521 = reshape(%519, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %522 = @func_4272(%520, %521) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
  %523 = log2(%499) /* ty=Tensor[(6, 4, 2), float32] */;
  %524 = %504.0;
  %525 = %517.2;
  %526 = %522.1;
  (%523, %524, %var_7752, %var_7753, %525, meta[relay.Constant][43] /* ty=Tensor[(1521), float64] */, %var_7771, %var_7772, meta[relay.Constant][44] /* ty=Tensor[(576), int8] */, meta[relay.Constant][45] /* ty=Tensor[(1120), int8] */, %526, meta[relay.Constant][46] /* ty=Tensor[(16), float64] */, %var_7786)
}

def @func_4272(%var_4254: Tensor[(1, 2, 8), float64], %var_4255: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) {
  %527 = cast(%var_4254, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %528 = cast(%var_4255, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
  %529 = cast(%var_4255, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %530 = divide(%527, %528) /* ty=Tensor[(10, 2, 8), float64] */;
  %531 = rsqrt(%529) /* ty=Tensor[(10, 2, 8), float32] */;
  (%530, %531)
}

def @func_4386() -> (Tensor[(6, 4, 2), bool],) {
  %532 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
  (%532,)
}

def @func_1534(%var_1525: Tensor[(15, 3, 2), float64]) -> Tensor[(15, 3, 2), float64] {
  %533 = cast(%var_1525, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  cosh(%533) /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_5651() -> (Tensor[(12), float64],) {
  %534 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %535 = %534.3;
  (%535,)
}

def @func_3266(%var_3241: Tensor[(6, 10, 4), int8]) -> (Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) {
  %536 = cast(%var_3241, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %537 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(6, 10, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 10, 4), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %540 = cast(%var_3241, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %541 = bitwise_xor(%538, %539) /* ty=Tensor[(6, 10, 4), int8] */;
  %542 = atanh(%540) /* ty=Tensor[(6, 10, 4), float64] */;
  (%541, %542)
}

def @func_4886(%var_4857: Tensor[(660), int16], %var_4859: Tensor[(576), int8], %var_4879: Tensor[(6), int64], %var_4880: Tensor[(2, 72), int64]) -> (Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) {
  %543 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %546 = erf(%545) /* ty=Tensor[(6, 4, 2), float64] */;
  %547 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 4, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %551 = cast(%var_4857, dtype="int16") /* ty=Tensor[(660), int16] */;
  %552 = cast(meta[relay.Constant][49] /* ty=Tensor[(9240, 1), int16] */, dtype="int16") /* ty=Tensor[(9240, 1), int16] */;
  %553 = cast(%var_4859, dtype="int8") /* ty=Tensor[(576), int8] */;
  %554 = cast(meta[relay.Constant][50] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %555 = reshape(%551, newshape=[1, 660]) /* ty=Tensor[(1, 660), int16] */;
  %556 = reshape(%552, newshape=[14, 660]) /* ty=Tensor[(14, 660), int16] */;
  %557 = reshape(%553, newshape=[576, 1]) /* ty=Tensor[(576, 1), int8] */;
  %558 = reshape(%554, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %559 = @func_3006(%555, %556, %557, %558) /* ty=(Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) */;
  %560 = cast(%var_4879, dtype="int64") /* ty=Tensor[(6), int64] */;
  %561 = cast(%var_4880, dtype="int64") /* ty=Tensor[(2, 72), int64] */;
  %562 = reshape(%560, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), int64] */;
  %563 = reshape(%561, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), int64] */;
  %564 = @func_2834(%562, %563) /* ty=(Tensor[(4, 6, 6), int64],) */;
  %565 = divide(%549, %550) /* ty=Tensor[(6, 4, 2), float32] */;
  %566 = %559.4;
  %567 = %564.0;
  (%565, %566, %var_4857, meta[relay.Constant][49] /* ty=Tensor[(9240, 1), int16] */, %var_4859, meta[relay.Constant][50] /* ty=Tensor[(1120), int8] */, %567, %var_4879, %var_4880)
}

def @main(%var_7995: Tensor[(6), int64], %var_7996: Tensor[(144), int64], %var_7997: Tensor[(660), int16], %var_7999: Tensor[(160), float64]) -> (Tensor[(660), int16], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(160), float64], Tensor[(1, 10, 10), float32], Tensor[(1, 10, 10), float64], Tensor[(?, 10, 10), bool]) {
  %568 = cast(%var_7995, dtype="int64") /* ty=Tensor[(6), int64] */;
  %569 = cast(%var_7996, dtype="int64") /* ty=Tensor[(144), int64] */;
  %570 = cast(%var_7997, dtype="int16") /* ty=Tensor[(660), int16] */;
  %571 = cast(meta[relay.Constant][51] /* ty=Tensor[(9240), int16] */, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %572 = cast(%var_7999, dtype="float64") /* ty=Tensor[(160), float64] */;
  %573 = reshape(%568, newshape=[6]) /* ty=Tensor[(6), int64] */;
  %574 = reshape(%569, newshape=[144]) /* ty=Tensor[(144), int64] */;
  %575 = reshape(%570, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %576 = reshape(%571, newshape=[9240, 1]) /* ty=Tensor[(9240, 1), int16] */;
  %577 = reshape(%572, newshape=[4, 40]) /* ty=Tensor[(4, 40), float64] */;
  %578 = @func_7789(%573, %574, %575, %576, %577) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) */;
  %579 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %580 = sin(%579) /* ty=Tensor[(1, 10, 10), float64] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %582 = atan(%581) /* ty=Tensor[(1, 10, 10), float64] */;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %584 = cast(%582, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %585 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 10, 10), float64] */, dtype="bool") /* ty=Tensor[(1, 10, 10), bool] */;
  %586 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%582, dtype="bool") /* ty=Tensor[(1, 10, 10), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = %578.6;
  %590 = asinh(%583) /* ty=Tensor[(1, 10, 10), float32] */;
  %591 = acosh(%584) /* ty=Tensor[(1, 10, 10), float64] */;
  %592 = logical_and(%587, %588) /* ty=Tensor[(?, 10, 10), bool] */;
  (%589, %var_7995, %var_7996, %var_7997, meta[relay.Constant][51] /* ty=Tensor[(9240), int16] */, %var_7999, %590, %591, %592)
}

def @func_5127() -> (Tensor[(6, 4, 2), bool],) {
  %593 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
  (%593,)
}

def @func_6476() -> Tensor[(6, 4, 2), float64] {
  %594 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  tan(%595) /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_7053(%var_7050: uint64) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64]) {
  %596 = cast(%var_7050, dtype="uint64") /* ty=uint64 */;
  %597 = cast(meta[relay.Constant][53] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %598 = reshape(%596, newshape=[]) /* ty=uint64 */;
  %599 = reshape(%597, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
  %600 = @func_1209(%598, %599) /* ty=(Tensor[(8, 16, 9), uint64],) */;
  %601 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %602 = %600.0;
  (%601, %602, %var_7050, meta[relay.Constant][53] /* ty=Tensor[(1152), uint64] */)
}

def @func_6319() -> (Tensor[(6, 4, 2), float32],) {
  %603 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  (%603,)
}

def @func_5666() -> Tensor[(6, 4, 2), bool] {
  @func_4360() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_3006(%var_2953: Tensor[(1, 660), int16], %var_2983: Tensor[(14, 660), int16], %var_2997: Tensor[(576, 1), int8], %var_2999: Tensor[(1120), int8]) -> (Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) {
  %604 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %605 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = cast(%var_2953, dtype="int16") /* ty=Tensor[(1, 660), int16] */;
  %609 = reshape(%608, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %610 = @func_2428(%609) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %611 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %612 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = not_equal(%613, %614) /* ty=Tensor[(4, 16, 12), bool] */;
  %616 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 16, 12), bool] */, dtype="int16") /* ty=Tensor[(4, 16, 12), int16] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="int16") /* ty=Tensor[(4, 16, 12), int16] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %620 = cast(%var_2953, dtype="bool") /* ty=Tensor[(1, 660), bool] */;
  %621 = cast(%var_2983, dtype="bool") /* ty=Tensor[(14, 660), bool] */;
  %622 = cast(%var_2997, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %623 = cast(meta[relay.Constant][57] /* ty=Tensor[(3600), float32] */, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %624 = cast(%var_2999, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %625 = cast(meta[relay.Constant][58] /* ty=Tensor[(480, 1), float32] */, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
  %626 = reshape(%622, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), int8] */;
  %627 = reshape(%623, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %628 = reshape(%624, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %629 = reshape(%625, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %630 = @func_2296(%626, %627, %628, %629) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) */;
  %631 = less(%606, %607) /* ty=Tensor[(4, 16, 12), bool] */;
  %632 = %610.3;
  %633 = multiply(%618, %619) /* ty=Tensor[(4, 16, 12), int16] */;
  %634 = equal(%620, %621) /* ty=Tensor[(14, 660), bool] */;
  %635 = %630.2;
  (%631, %632, %633, %634, %635, %var_2997, meta[relay.Constant][57] /* ty=Tensor[(3600), float32] */, %var_2999, meta[relay.Constant][58] /* ty=Tensor[(480, 1), float32] */)
}

def @func_1680(%var_1619: Tensor[(1, 16, 15), float32], %var_1620: Tensor[(15, 16, 15), float32], %var_1647: Tensor[(1120), int8], %var_1670: Tensor[(480), float32]) -> (Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) {
  %636 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %637 = reshape(%636, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %638 = cast(%var_1647, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %639 = reshape(%638, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), int8] */;
  %640 = @func_1562(%639) /* ty=(Tensor[(7, 16, 10), int8],) */;
  %641 = %640.0;
  %642 = cast(%641, dtype="bool") /* ty=Tensor[(7, 16, 10), bool] */;
  %643 = shape_of(%var_1647, dtype="int32") /* ty=Tensor[(1), int32] */;
  %644 = cast(%var_1647, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), bool] */;
  %646 = cast(%var_1619, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
  %647 = cast(%var_1620, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
  %648 = divide(%646, %647) /* ty=Tensor[(15, 16, 15), float32] */;
  %649 = cast(%var_1619, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
  %650 = cast(%648, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
  %651 = cast(%var_1670, dtype="float32") /* ty=Tensor[(480), float32] */;
  %652 = reshape(%651, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %653 = @func_1516(%652) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %654 = @func_1534(%637) /* ty=Tensor[(15, 3, 2), float64] */;
  %655 = logical_or(%644, %645) /* ty=Tensor[(1120), bool] */;
  %656 = power(%649, %650) /* ty=Tensor[(15, 16, 15), float32] */;
  %657 = %653.0;
  (%654, meta[relay.Constant][59] /* ty=Tensor[(1, 90), float64] */, %655, %656, %657, %var_1670)
}

def @func_7561(%var_7538: Tensor[(1056), bool], %var_7539: Tensor[(160), bool], %var_7540: Tensor[(576), int8], %var_7541: Tensor[(3600), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(12), float64], Tensor[(15, 3, 2), float64], Tensor[(660), int16], Tensor[(90), float64], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(480), float32]) {
  %658 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %659 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %660 = cast(meta[relay.Constant][60] /* ty=Tensor[(660), int16] */, dtype="int16") /* ty=Tensor[(660), int16] */;
  %661 = reshape(%660, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %662 = @func_2428(%661) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %663 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %664 = cast(%var_7538, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %665 = cast(%var_7539, dtype="bool") /* ty=Tensor[(160), bool] */;
  %666 = cast(%var_7540, dtype="int8") /* ty=Tensor[(576), int8] */;
  %667 = cast(%var_7541, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %668 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %669 = reshape(%663, newshape=[]) /* ty=bool */;
  %670 = reshape(%664, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %671 = reshape(%665, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %672 = reshape(%666, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %673 = reshape(%667, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %674 = reshape(%668, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %675 = @func_4482(%669, %670, %671, %672, %673, %674) /* ty=(Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) */;
  %676 = %658.0;
  %677 = %659.0;
  %678 = @func_6513() /* ty=Tensor[(12), float64] */;
  %679 = %662.3;
  %680 = %675.7;
  (%676, %677, %678, %679, meta[relay.Constant][60] /* ty=Tensor[(660), int16] */, %680, True /* ty=bool */, %var_7538, %var_7539, %var_7540, %var_7541, meta[relay.Constant][61] /* ty=Tensor[(480), float32] */)
}

def @func_6804(%var_6756: Tensor[(6, 4, 2), bool], %var_6770: Tensor[(160), bool], %var_6788: Tensor[(5, 16, 2), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(160), bool], Tensor[(5, 16, 2), uint8]) {
  %681 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
  %682 = cast(%var_6756, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = cast(%var_6770, dtype="bool") /* ty=Tensor[(160), bool] */;
  %687 = reshape(%686, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %688 = @func_1154(%687) /* ty=Tensor[(5, 16, 2), bool] */;
  %689 = cast(%var_6788, dtype="uint8") /* ty=Tensor[(5, 16, 2), uint8] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="uint8") /* ty=Tensor[(5, 16, 2), uint8] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %693 = logical_or(%684, %685) /* ty=Tensor[(6, 4, 2), bool] */;
  %694 = bitwise_and(%691, %692) /* ty=Tensor[(5, 16, 2), uint8] */;
  (%693, %var_6770, %694)
}

def @func_2296(%var_2232: Tensor[(12, 8, 6), int8], %var_2254: Tensor[(3600), float32], %var_2255: Tensor[(1120), int8], %var_2256: Tensor[(480), float32]) -> (Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) {
  %695 = cast(meta[relay.Constant][62] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %696 = cast(%var_2254, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %697 = cast(%var_2255, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %698 = cast(%var_2256, dtype="float32") /* ty=Tensor[(480), float32] */;
  %699 = reshape(%695, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), float32] */;
  %700 = reshape(%696, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
  %701 = reshape(%697, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %702 = reshape(%698, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %703 = @func_1680(%699, %700, %701, %702) /* ty=(Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) */;
  %704 = cast(%var_2255, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %705 = reshape(%704, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), int8] */;
  %706 = @func_1562(%705) /* ty=(Tensor[(7, 16, 10), int8],) */;
  %707 = cast(meta[relay.Constant][63] /* ty=Tensor[(12, 8, 1), int8] */, dtype="float32") /* ty=Tensor[(12, 8, 1), float32] */;
  %708 = acosh(%707) /* ty=Tensor[(12, 8, 1), float32] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(12, 8, 1), float64] */;
  %710 = cos(%709) /* ty=Tensor[(12, 8, 1), float64] */;
  %711 = cast(meta[relay.Constant][63] /* ty=Tensor[(12, 8, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 8, 1), int8] */;
  %712 = cast(%var_2232, dtype="int8") /* ty=Tensor[(12, 8, 6), int8] */;
  %713 = bitwise_or(%711, %712) /* ty=Tensor[(12, 8, 6), int8] */;
  %714 = cast(%710, dtype="float64") /* ty=Tensor[(12, 8, 1), float64] */;
  %715 = cast(%713, dtype="float64") /* ty=Tensor[(12, 8, 6), float64] */;
  %716 = divide(%714, %715) /* ty=Tensor[(12, 8, 6), float64] */;
  %717 = cast(%716, dtype="int8") /* ty=Tensor[(12, 8, 6), int8] */;
  %718 = cast(%708, dtype="int8") /* ty=Tensor[(12, 8, 1), int8] */;
  %719 = %703.4;
  %720 = %706.0;
  %721 = maximum(%717, %718) /* ty=Tensor[(12, 8, 6), int8] */;
  (%719, meta[relay.Constant][62] /* ty=Tensor[(240), float32] */, %var_2254, %var_2255, %var_2256, %720, %721)
}

def @func_7667() -> (Tensor[(6, 4, 2), float32], Tensor[(6, 4, 2), float64]) {
  %722 = @func_5222() /* ty=Tensor[(6, 4, 2), float32] */;
  %723 = @func_7271() /* ty=Tensor[(6, 4, 2), float64] */;
  (%722, %723)
}

def @func_1154(%var_1149: Tensor[(5, 16, 2), bool]) -> Tensor[(5, 16, 2), bool] {
  %724 = cast(%var_1149, dtype="bool") /* ty=Tensor[(5, 16, 2), bool] */;
  %725 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(5, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][64] /* ty=Tensor[(5, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(5, 16, 2), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%726, %727) /* ty=Tensor[(5, 16, 2), bool] */
}

def @func_6376(%var_6353: Tensor[(48), bool]) -> (Tensor[(12), float64], Tensor[(6, 4, 2), int16], Tensor[(48), bool], Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(6, 4, 2), bool]) {
  %728 = @func_5651() /* ty=(Tensor[(12), float64],) */;
  %729 = cast(%var_6353, dtype="bool") /* ty=Tensor[(48), bool] */;
  %730 = reshape(%729, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
  %731 = cast(meta[relay.Constant][65] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %732 = reshape(%731, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %733 = @func_1516(%732) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %734 = %728.0;
  %735 = @func_5886(%730) /* ty=Tensor[(6, 4, 2), int16] */;
  %736 = %733.0;
  %737 = @func_5774() /* ty=Tensor[(6, 4, 2), bool] */;
  (%734, %735, %var_6353, %736, meta[relay.Constant][65] /* ty=Tensor[(480), float32] */, %737)
}

def @func_1038(%var_969: Tensor[(11, 14, 2), float32], %var_980: Tensor[(12), float64], %var_982: Tensor[(11, 14, 2), float32], %var_1029: Tensor[(14, 12, 1), float32]) -> (Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) {
  %738 = cast(%var_969, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %739 = erf(%738) /* ty=Tensor[(11, 14, 2), float32] */;
  %740 = cast(%var_982, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %744 = cast(%var_980, dtype="float64") /* ty=Tensor[(12), float64] */;
  %745 = reshape(%744, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %746 = @func_197(%745) /* ty=Tensor[(1, 12, 1), float64] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(1, 12, 1), float32] */;
  %748 = log10(%747) /* ty=Tensor[(1, 12, 1), float32] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %750 = reshape(%749, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %751 = cast(%748, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %752 = cast(%var_1029, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
  %753 = floor_divide(%742, %743) /* ty=Tensor[(11, 14, 2), float32] */;
  %754 = @func_197(%750) /* ty=Tensor[(1, 12, 1), float64] */;
  %755 = less_equal(%751, %752) /* ty=Tensor[(14, 12, 1), bool] */;
  (%var_980, %753, %754, %755)
}

def @func_6080(%var_6033: Tensor[(8, 5, 8), float32], %var_6034: Tensor[(8, 5, 8), float32], %var_6068: Tensor[(480), float32]) -> (Tensor[(1, 12, 1), float64], Tensor[(3072), uint16], Tensor[(1152), uint64], Tensor[(480), float32], Tensor[(8, 5, 8), bool]) {
  %756 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %757 = cast(meta[relay.Constant][66] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %758 = cast(%var_6068, dtype="float32") /* ty=Tensor[(480), float32] */;
  %759 = reshape(%757, newshape=[96, 12]) /* ty=Tensor[(96, 12), uint64] */;
  %760 = reshape(%758, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %761 = @func_6017(%759, %760) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) */;
  %762 = cast(%var_6033, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %763 = acos(%762) /* ty=Tensor[(8, 5, 8), float32] */;
  %764 = cast(%var_6034, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %765 = shape_of(%var_6033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%var_6033, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %768 = power(%766, %767) /* ty=Tensor[(8, 5, 8), float32] */;
  %769 = cast(%768, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %770 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%763, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = %756.2;
  %774 = %761.2;
  %775 = logical_or(%771, %772) /* ty=Tensor[(8, 5, 8), bool] */;
  (%773, %774, meta[relay.Constant][66] /* ty=Tensor[(1152), uint64] */, %var_6068, %775)
}

def @func_6337(%var_6330: Tensor[(6, 2), float64], %var_6331: Tensor[(42, 4), float32]) -> (Tensor[(6, 4, 2), float32], Tensor[(12), float64], Tensor[(308), float32], Tensor[(6, 2), float64], Tensor[(42, 4), float32]) {
  %776 = cast(meta[relay.Constant][67] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %777 = cast(%var_6330, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %778 = cast(meta[relay.Constant][67] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %779 = cast(%var_6331, dtype="float32") /* ty=Tensor[(42, 4), float32] */;
  %780 = reshape(%776, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %781 = reshape(%777, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %782 = reshape(%778, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %783 = reshape(%779, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), float32] */;
  %784 = @func_1038(%780, %781, %782, %783) /* ty=(Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) */;
  %785 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  %786 = %784.0;
  (%785, %786, meta[relay.Constant][67] /* ty=Tensor[(308), float32] */, %var_6330, %var_6331)
}

def @func_5557(%var_5550: Tensor[(14, 9, 5), int64]) -> (Tensor[(14, 9, 5), bool],) {
  %787 = cast(%var_5550, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %788 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(14, 9, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(meta[relay.Constant][68] /* ty=Tensor[(14, 9, 5), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %791 = greater(%789, %790) /* ty=Tensor[(14, 9, 5), bool] */;
  (%791,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1518(%var_1517: Tensor[(5, 12, 8), float32]) -> (Tensor[(5, 12, 8), float64],) {
  %5 = fn (%var_1489: Tensor[(5, 12, 8), float32]) -> (Tensor[(5, 12, 8), float64],) {
    %0 = cast(0.349317f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1 = cast(%var_1489, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
    %2 = mod(%0, %1) /* ty=Tensor[(5, 12, 8), float32] */;
    %3 = cast(%2, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
    %4 = erf(%3) /* ty=Tensor[(5, 12, 8), float64] */;
    (%4,)
  };
  %5(%var_1517) /* ty=(Tensor[(5, 12, 8), float64],) */
}

def @func_3268(%var_3267: Tensor[(6, 10, 4), int8]) -> (Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) {
  %13 = fn (%var_3241: Tensor[(6, 10, 4), int8]) -> (Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) {
    %6 = cast(%var_3241, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
    %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 10, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 10, 4), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %10 = cast(%var_3241, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
    %11 = bitwise_xor(%8, %9) /* ty=Tensor[(6, 10, 4), int8] */;
    %12 = atanh(%10) /* ty=Tensor[(6, 10, 4), float64] */;
    (%11, %12)
  };
  %13(%var_3267) /* ty=(Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) */
}

def @func_6376(%var_6353: Tensor[(48), bool]) -> (Tensor[(12), float64], Tensor[(6, 4, 2), int16], Tensor[(48), bool], Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(6, 4, 2), bool]) {
  %14 = @func_5651() /* ty=(Tensor[(12), float64],) */;
  %15 = cast(%var_6353, dtype="bool") /* ty=Tensor[(48), bool] */;
  %16 = reshape(%15, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %18 = reshape(%17, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %19 = @func_1516(%18) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %20 = %14.0;
  %21 = @func_5886(%16) /* ty=Tensor[(6, 4, 2), int16] */;
  %22 = %19.0;
  %23 = @func_5774() /* ty=Tensor[(6, 4, 2), bool] */;
  (%20, %21, %var_6353, %22, meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, %23)
}

def @func_7350(%var_7308: Tensor[(16), float64], %var_7309: Tensor[(160), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(160), float64], Tensor[(6, 4, 2), bool]) {
  %24 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %25 = cast(%var_7308, dtype="float64") /* ty=Tensor[(16), float64] */;
  %26 = cast(%var_7309, dtype="float64") /* ty=Tensor[(160), float64] */;
  %27 = reshape(%25, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
  %28 = reshape(%26, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %29 = @func_4272(%27, %28) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
  %30 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %31 = %24.0;
  %32 = %29.1;
  %33 = %30.0;
  (%31, %32, %var_7308, %var_7309, %33)
}

def @func_7948(%var_7946: Tensor[(308), float64], %var_7947: Tensor[(16), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(5, 16, 2), bool], Tensor[(308), float64], Tensor[(16), float64]) {
  %43 = fn (%var_7911: Tensor[(308), float64], %var_7912: Tensor[(16), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(5, 16, 2), bool], Tensor[(308), float64], Tensor[(16), float64]) {
    %34 = cast(%var_7911, dtype="float64") /* ty=Tensor[(308), float64] */;
    %35 = cast(%var_7911, dtype="float64") /* ty=Tensor[(308), float64] */;
    %36 = cast(%var_7912, dtype="float64") /* ty=Tensor[(16), float64] */;
    %37 = reshape(%34, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
    %38 = reshape(%35, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
    %39 = reshape(%36, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %40 = @func_6117(%37, %38, %39) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) */;
    %41 = @func_6447() /* ty=Tensor[(6, 4, 2), float64] */;
    %42 = %40.4;
    (%41, %42, %var_7911, %var_7912)
  };
  %43(%var_7946, %var_7947) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(5, 16, 2), bool], Tensor[(308), float64], Tensor[(16), float64]) */
}

def @func_7889(%var_7888: Tensor[(6), int64]) -> (Tensor[(2, 14, 10), bool], Tensor[(6), int64], Tensor[(5, 132), int16], Tensor[(576), int8], Tensor[(6), int64], Tensor[(144), int64], Tensor[(2, 14, 10), uint16], Tensor[(2, 14, 10), float64]) {
  %73 = fn (%var_7854: Tensor[(6), int64]) -> (Tensor[(2, 14, 10), bool], Tensor[(6), int64], Tensor[(5, 132), int16], Tensor[(576), int8], Tensor[(6), int64], Tensor[(144), int64], Tensor[(2, 14, 10), uint16], Tensor[(2, 14, 10), float64]) {
    %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %45 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 132), int16] */, dtype="int16") /* ty=Tensor[(5, 132), int16] */;
    %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
    %50 = cast(%var_7854, dtype="int64") /* ty=Tensor[(6), int64] */;
    %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %52 = reshape(%48, newshape=[660]) /* ty=Tensor[(660), int16] */;
    %53 = reshape(%49, newshape=[576]) /* ty=Tensor[(576), int8] */;
    %54 = reshape(%50, newshape=[6]) /* ty=Tensor[(6), int64] */;
    %55 = reshape(%51, newshape=[2, 72]) /* ty=Tensor[(2, 72), int64] */;
    %56 = @func_4886(%52, %53, %54, %55) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) */;
    %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
    %58 = log2(%57) /* ty=Tensor[(2, 14, 10), float64] */;
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 14, 10), uint16] */, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
    %60 = sin(%59) /* ty=Tensor[(2, 14, 10), float32] */;
    %61 = cast(%60, dtype="uint16") /* ty=Tensor[(2, 14, 10), uint16] */;
    %62 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%58, dtype="uint16") /* ty=Tensor[(2, 14, 10), uint16] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %65 = cast(%60, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
    %66 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%58, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %69 = equal(%46, %47) /* ty=Tensor[(2, 14, 10), bool] */;
    %70 = %56.7;
    %71 = logical_xor(%63, %64) /* ty=Tensor[(2, 14, 10), uint16] */;
    %72 = mod(%67, %68) /* ty=Tensor[(2, 14, 10), float64] */;
    (%69, %70, meta[relay.Constant][4] /* ty=Tensor[(5, 132), int16] */, meta[relay.Constant][5] /* ty=Tensor[(576), int8] */, %var_7854, meta[relay.Constant][6] /* ty=Tensor[(144), int64] */, %71, %72)
  };
  %73(%var_7888) /* ty=(Tensor[(2, 14, 10), bool], Tensor[(6), int64], Tensor[(5, 132), int16], Tensor[(576), int8], Tensor[(6), int64], Tensor[(144), int64], Tensor[(2, 14, 10), uint16], Tensor[(2, 14, 10), float64]) */
}

def @func_4886(%var_4857: Tensor[(660), int16], %var_4859: Tensor[(576), int8], %var_4879: Tensor[(6), int64], %var_4880: Tensor[(2, 72), int64]) -> (Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) {
  %74 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %75 = %74.0;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %77 = erf(%76) /* ty=Tensor[(6, 4, 2), float64] */;
  %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 4, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %82 = cast(%var_4857, dtype="int16") /* ty=Tensor[(660), int16] */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(9240, 1), int16] */, dtype="int16") /* ty=Tensor[(9240, 1), int16] */;
  %84 = cast(%var_4859, dtype="int8") /* ty=Tensor[(576), int8] */;
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %86 = reshape(%82, newshape=[1, 660]) /* ty=Tensor[(1, 660), int16] */;
  %87 = reshape(%83, newshape=[14, 660]) /* ty=Tensor[(14, 660), int16] */;
  %88 = reshape(%84, newshape=[576, 1]) /* ty=Tensor[(576, 1), int8] */;
  %89 = reshape(%85, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %90 = @func_3006(%86, %87, %88, %89) /* ty=(Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) */;
  %91 = cast(%var_4879, dtype="int64") /* ty=Tensor[(6), int64] */;
  %92 = cast(%var_4880, dtype="int64") /* ty=Tensor[(2, 72), int64] */;
  %93 = reshape(%91, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), int64] */;
  %94 = reshape(%92, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), int64] */;
  %95 = @func_2834(%93, %94) /* ty=(Tensor[(4, 6, 6), int64],) */;
  %96 = divide(%80, %81) /* ty=Tensor[(6, 4, 2), float32] */;
  %97 = %90.4;
  %98 = %95.0;
  (%96, %97, %var_4857, meta[relay.Constant][8] /* ty=Tensor[(9240, 1), int16] */, %var_4859, meta[relay.Constant][9] /* ty=Tensor[(1120), int8] */, %98, %var_4879, %var_4880)
}

def @func_5129() -> (Tensor[(6, 4, 2), bool],) {
  @func_5127() /* ty=(Tensor[(6, 4, 2), bool],) */
}

def @func_5853() -> Tensor[(6, 4, 2), float32] {
  @func_5222() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_6477() -> Tensor[(6, 4, 2), float64] {
  %101 = fn () -> Tensor[(6, 4, 2), float64] {
    %99 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
    %100 = cast(%99, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
    tan(%100) /* ty=Tensor[(6, 4, 2), float64] */
  };
  %101() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_7963() -> (Tensor[(6, 4, 2), float32],) {
  %103 = fn () -> (Tensor[(6, 4, 2), float32],) {
    %102 = @func_6896() /* ty=Tensor[(6, 4, 2), float32] */;
    (%102,)
  };
  %103() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_6447() -> Tensor[(6, 4, 2), float64] {
  @func_5564() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_1212(%var_1210: uint64, %var_1211: Tensor[(8, 16, 9), uint64]) -> (Tensor[(8, 16, 9), uint64],) {
  %107 = fn (%var_1204: uint64, %var_1205: Tensor[(8, 16, 9), uint64]) -> (Tensor[(8, 16, 9), uint64],) {
    %104 = cast(%var_1204, dtype="uint64") /* ty=uint64 */;
    %105 = cast(%var_1205, dtype="uint64") /* ty=Tensor[(8, 16, 9), uint64] */;
    %106 = maximum(%104, %105) /* ty=Tensor[(8, 16, 9), uint64] */;
    (%106,)
  };
  %107(%var_1210, %var_1211) /* ty=(Tensor[(8, 16, 9), uint64],) */
}

def @func_4489(%var_4483: bool, %var_4484: Tensor[(11, 6, 16), bool], %var_4485: Tensor[(160), bool], %var_4486: Tensor[(576), int8], %var_4487: Tensor[(3600), float32], %var_4488: Tensor[(480), float32]) -> (Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) {
  %141 = fn (%var_4402: bool, %var_4403: Tensor[(11, 6, 16), bool], %var_4436: Tensor[(160), bool], %var_4474: Tensor[(576), int8], %var_4475: Tensor[(3600), float32], %var_4477: Tensor[(480), float32]) -> (Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) {
    %108 = cast(%var_4436, dtype="bool") /* ty=Tensor[(160), bool] */;
    %109 = reshape(%108, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
    %110 = cast(%var_4402, dtype="bool") /* ty=bool */;
    %111 = cast(%var_4403, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
    %112 = logical_or(%110, %111) /* ty=Tensor[(11, 6, 16), bool] */;
    %113 = cast(%var_4402, dtype="float32") /* ty=float32 */;
    %114 = cast(%112, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(660), int16] */, dtype="int16") /* ty=Tensor[(660), int16] */;
    %116 = reshape(%115, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), int16] */;
    %117 = @func_1992(%116) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) */;
    %118 = cast(%var_4403, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %119 = sqrt(%118) /* ty=Tensor[(11, 6, 16), float32] */;
    %120 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
    %122 = cast(%119, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %124 = cast(meta[relay.Constant][12] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %125 = reshape(%124, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
    %126 = cast(%var_4474, dtype="int8") /* ty=Tensor[(576), int8] */;
    %127 = cast(%var_4475, dtype="float32") /* ty=Tensor[(3600), float32] */;
    %128 = cast(meta[relay.Constant][13] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %129 = cast(%var_4477, dtype="float32") /* ty=Tensor[(480), float32] */;
    %130 = reshape(%126, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), int8] */;
    %131 = reshape(%127, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
    %132 = reshape(%128, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %133 = reshape(%129, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %134 = @func_2296(%130, %131, %132, %133) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) */;
    %135 = @func_1154(%109) /* ty=Tensor[(5, 16, 2), bool] */;
    %136 = minimum(%113, %114) /* ty=Tensor[(11, 6, 16), float32] */;
    %137 = %117.0;
    %138 = power(%122, %123) /* ty=Tensor[(11, 6, 16), float32] */;
    %139 = @func_1534(%125) /* ty=Tensor[(15, 3, 2), float64] */;
    %140 = %134.5;
    (%135, %var_4436, %136, %137, meta[relay.Constant][10] /* ty=Tensor[(660), int16] */, %138, %139, meta[relay.Constant][12] /* ty=Tensor[(90), float64] */, %140, %var_4474, %var_4475, meta[relay.Constant][13] /* ty=Tensor[(1120), int8] */, %var_4477)
  };
  %141(%var_4483, %var_4484, %var_4485, %var_4486, %var_4487, %var_4488) /* ty=(Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) */
}

def @func_1680(%var_1619: Tensor[(1, 16, 15), float32], %var_1620: Tensor[(15, 16, 15), float32], %var_1647: Tensor[(1120), int8], %var_1670: Tensor[(480), float32]) -> (Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) {
  %142 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %143 = reshape(%142, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %144 = cast(%var_1647, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %145 = reshape(%144, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), int8] */;
  %146 = @func_1562(%145) /* ty=(Tensor[(7, 16, 10), int8],) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(7, 16, 10), bool] */;
  %149 = shape_of(%var_1647, dtype="int32") /* ty=Tensor[(1), int32] */;
  %150 = cast(%var_1647, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?), bool] */;
  %152 = cast(%var_1619, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
  %153 = cast(%var_1620, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
  %154 = divide(%152, %153) /* ty=Tensor[(15, 16, 15), float32] */;
  %155 = cast(%var_1619, dtype="float32") /* ty=Tensor[(1, 16, 15), float32] */;
  %156 = cast(%154, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
  %157 = cast(%var_1670, dtype="float32") /* ty=Tensor[(480), float32] */;
  %158 = reshape(%157, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %159 = @func_1516(%158) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %160 = @func_1534(%143) /* ty=Tensor[(15, 3, 2), float64] */;
  %161 = logical_or(%150, %151) /* ty=Tensor[(1120), bool] */;
  %162 = power(%155, %156) /* ty=Tensor[(15, 16, 15), float32] */;
  %163 = %159.0;
  (%160, meta[relay.Constant][14] /* ty=Tensor[(1, 90), float64] */, %161, %162, %163, %var_1670)
}

def @func_2301(%var_2297: Tensor[(12, 8, 6), int8], %var_2298: Tensor[(3600), float32], %var_2299: Tensor[(1120), int8], %var_2300: Tensor[(480), float32]) -> (Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) {
  %191 = fn (%var_2232: Tensor[(12, 8, 6), int8], %var_2254: Tensor[(3600), float32], %var_2255: Tensor[(1120), int8], %var_2256: Tensor[(480), float32]) -> (Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) {
    %164 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %165 = cast(%var_2254, dtype="float32") /* ty=Tensor[(3600), float32] */;
    %166 = cast(%var_2255, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %167 = cast(%var_2256, dtype="float32") /* ty=Tensor[(480), float32] */;
    %168 = reshape(%164, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), float32] */;
    %169 = reshape(%165, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
    %170 = reshape(%166, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %171 = reshape(%167, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %172 = @func_1680(%168, %169, %170, %171) /* ty=(Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) */;
    %173 = cast(%var_2255, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %174 = reshape(%173, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), int8] */;
    %175 = @func_1562(%174) /* ty=(Tensor[(7, 16, 10), int8],) */;
    %176 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 8, 1), int8] */, dtype="float32") /* ty=Tensor[(12, 8, 1), float32] */;
    %177 = acosh(%176) /* ty=Tensor[(12, 8, 1), float32] */;
    %178 = cast(%177, dtype="float64") /* ty=Tensor[(12, 8, 1), float64] */;
    %179 = cos(%178) /* ty=Tensor[(12, 8, 1), float64] */;
    %180 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 8, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 8, 1), int8] */;
    %181 = cast(%var_2232, dtype="int8") /* ty=Tensor[(12, 8, 6), int8] */;
    %182 = bitwise_or(%180, %181) /* ty=Tensor[(12, 8, 6), int8] */;
    %183 = cast(%179, dtype="float64") /* ty=Tensor[(12, 8, 1), float64] */;
    %184 = cast(%182, dtype="float64") /* ty=Tensor[(12, 8, 6), float64] */;
    %185 = divide(%183, %184) /* ty=Tensor[(12, 8, 6), float64] */;
    %186 = cast(%185, dtype="int8") /* ty=Tensor[(12, 8, 6), int8] */;
    %187 = cast(%177, dtype="int8") /* ty=Tensor[(12, 8, 1), int8] */;
    %188 = %172.4;
    %189 = %175.0;
    %190 = maximum(%186, %187) /* ty=Tensor[(12, 8, 6), int8] */;
    (%188, meta[relay.Constant][15] /* ty=Tensor[(240), float32] */, %var_2254, %var_2255, %var_2256, %189, %190)
  };
  %191(%var_2297, %var_2298, %var_2299, %var_2300) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) */
}

def @func_6021(%var_6019: Tensor[(96, 12), uint64], %var_6020: Tensor[(480), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) {
  @func_6017(%var_6019, %var_6020) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) */
}

def @func_6379(%var_6377: Tensor[(48), bool]) -> (Tensor[(12), float64], Tensor[(6, 4, 2), int16], Tensor[(48), bool], Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(6, 4, 2), bool]) {
  @func_6376(%var_6377) /* ty=(Tensor[(12), float64], Tensor[(6, 4, 2), int16], Tensor[(48), bool], Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(6, 4, 2), bool]) */
}

def @func_5776() -> Tensor[(6, 4, 2), bool] {
  @func_5774() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_7699() -> (Tensor[(6, 4, 2), float32],) {
  %192 = @func_6816() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %193 = %192.0;
  (%193,)
}

def @func_5127() -> (Tensor[(6, 4, 2), bool],) {
  %194 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
  (%194,)
}

def @func_1803(%var_1801: uint64, %var_1802: Tensor[(12, 14, 7), uint64]) -> (Tensor[(12, 14, 7), uint64],) {
  @func_1799(%var_1801, %var_1802) /* ty=(Tensor[(12, 14, 7), uint64],) */
}

def @func_5855() -> Tensor[(6, 4, 2), float32] {
  @func_5853() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_4272(%var_4254: Tensor[(1, 2, 8), float64], %var_4255: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) {
  %195 = cast(%var_4254, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %196 = cast(%var_4255, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
  %197 = cast(%var_4255, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %198 = divide(%195, %196) /* ty=Tensor[(10, 2, 8), float64] */;
  %199 = rsqrt(%197) /* ty=Tensor[(10, 2, 8), float32] */;
  (%198, %199)
}

def @func_4656() -> Tensor[(6, 4, 2), bool] {
  @func_4360() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_5535() -> (Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 1, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %201 = cast(meta[relay.Constant][18] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %202 = reshape(%201, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %203 = atan(%200) /* ty=Tensor[(10, 1, 10), float64] */;
  %204 = @func_197(%202) /* ty=Tensor[(1, 12, 1), float64] */;
  (%203, %204, meta[relay.Constant][18] /* ty=Tensor[(12), float64] */)
}

def @func_6515() -> Tensor[(12), float64] {
  @func_6513() /* ty=Tensor[(12), float64] */
}

def @func_7284() -> Tensor[(6, 4, 2), float32] {
  %205 = fn () -> Tensor[(6, 4, 2), float32] {
    @func_5853() /* ty=Tensor[(6, 4, 2), float32] */
  };
  %205() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_7667() -> (Tensor[(6, 4, 2), float32], Tensor[(6, 4, 2), float64]) {
  %206 = @func_5222() /* ty=Tensor[(6, 4, 2), float32] */;
  %207 = @func_7271() /* ty=Tensor[(6, 4, 2), float64] */;
  (%206, %207)
}

def @func_1038(%var_969: Tensor[(11, 14, 2), float32], %var_980: Tensor[(12), float64], %var_982: Tensor[(11, 14, 2), float32], %var_1029: Tensor[(14, 12, 1), float32]) -> (Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) {
  %208 = cast(%var_969, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %209 = erf(%208) /* ty=Tensor[(11, 14, 2), float32] */;
  %210 = cast(%var_982, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %214 = cast(%var_980, dtype="float64") /* ty=Tensor[(12), float64] */;
  %215 = reshape(%214, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %216 = @func_197(%215) /* ty=Tensor[(1, 12, 1), float64] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(1, 12, 1), float32] */;
  %218 = log10(%217) /* ty=Tensor[(1, 12, 1), float32] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %220 = reshape(%219, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %222 = cast(%var_1029, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
  %223 = floor_divide(%212, %213) /* ty=Tensor[(11, 14, 2), float32] */;
  %224 = @func_197(%220) /* ty=Tensor[(1, 12, 1), float64] */;
  %225 = less_equal(%221, %222) /* ty=Tensor[(14, 12, 1), bool] */;
  (%var_980, %223, %224, %225)
}

def @func_6600() -> (Tensor[(6, 4, 2), float64], Tensor[(13, 12, 6), float32], Tensor[(1, 936), float32], Tensor[(6, 4, 2), float32], Tensor[(12), float64]) {
  %237 = fn () -> (Tensor[(6, 4, 2), float64], Tensor[(13, 12, 6), float32], Tensor[(1, 936), float32], Tensor[(6, 4, 2), float32], Tensor[(12), float64]) {
    %226 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
    %227 = %226.0;
    %228 = cast(%227, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
    %229 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 936), float32] */, dtype="float32") /* ty=Tensor[(1, 936), float32] */;
    %230 = reshape(%229, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float32] */;
    %231 = @func_4108(%230) /* ty=(Tensor[(13, 12, 6), float32],) */;
    %232 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
    %233 = atanh(%228) /* ty=Tensor[(6, 4, 2), float64] */;
    %234 = %231.0;
    %235 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
    %236 = %232.3;
    (%233, %234, meta[relay.Constant][19] /* ty=Tensor[(1, 936), float32] */, %235, %236)
  };
  %237() /* ty=(Tensor[(6, 4, 2), float64], Tensor[(13, 12, 6), float32], Tensor[(1, 936), float32], Tensor[(6, 4, 2), float32], Tensor[(12), float64]) */
}

def @func_4601() -> (Tensor[(6, 4, 2), float32],) {
  @func_4599() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_1992(%var_1969: Tensor[(6, 10, 11), int16]) -> (Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) {
  %238 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 10, 11), int16] */, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %239 = shape_of(%var_1969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_1969, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = cast(%var_1969, dtype="int64") /* ty=Tensor[(6, 10, 11), int64] */;
  %243 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 10, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 10, 11), int16] */, dtype="int64") /* ty=Tensor[(6, 10, 11), int64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %246 = less_equal(%240, %241) /* ty=Tensor[(6, 10, 11), bool] */;
  %247 = bitwise_xor(%244, %245) /* ty=Tensor[(6, 10, 11), int64] */;
  (%246, %247)
}

def @func_1953(%var_1951: Tensor[(6, 30), bool]) -> (Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) {
  @func_1950(%var_1951) /* ty=(Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) */
}

def @func_1995(%var_1993: Tensor[(6, 10, 11), int16]) -> (Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) {
  @func_1992(%var_1993) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) */
}

def @func_1382(%var_1380: Tensor[(15, 4, 3), bool], %var_1381: Tensor[(15, 4, 3), bool]) -> Tensor[(15, 4, 3), bool] {
  @func_1378(%var_1380, %var_1381) /* ty=Tensor[(15, 4, 3), bool] */
}

def @func_7055(%var_7054: uint64) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64]) {
  %255 = fn (%var_7050: uint64) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64]) {
    %248 = cast(%var_7050, dtype="uint64") /* ty=uint64 */;
    %249 = cast(meta[relay.Constant][21] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
    %250 = reshape(%248, newshape=[]) /* ty=uint64 */;
    %251 = reshape(%249, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
    %252 = @func_1209(%250, %251) /* ty=(Tensor[(8, 16, 9), uint64],) */;
    %253 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
    %254 = %252.0;
    (%253, %254, %var_7050, meta[relay.Constant][21] /* ty=Tensor[(1152), uint64] */)
  };
  %255(%var_7054) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64]) */
}

def @func_6321() -> (Tensor[(6, 4, 2), float32],) {
  @func_6319() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_4599() -> (Tensor[(6, 4, 2), float32],) {
  %256 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %259 = acosh(%258) /* ty=Tensor[(6, 4, 2), float32] */;
  (%259,)
}

def @func_7354(%var_7352: Tensor[(16), float64], %var_7353: Tensor[(160), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(160), float64], Tensor[(6, 4, 2), bool]) {
  @func_7350(%var_7352, %var_7353) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(160), float64], Tensor[(6, 4, 2), bool]) */
}

def @main(%var_7995: Tensor[(6), int64], %var_7996: Tensor[(144), int64], %var_7997: Tensor[(660), int16], %var_7999: Tensor[(160), float64]) -> (Tensor[(660), int16], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(160), float64], Tensor[(1, 10, 10), float32], Tensor[(1, 10, 10), float64], Tensor[(?, 10, 10), bool]) {
  %260 = cast(%var_7995, dtype="int64") /* ty=Tensor[(6), int64] */;
  %261 = cast(%var_7996, dtype="int64") /* ty=Tensor[(144), int64] */;
  %262 = cast(%var_7997, dtype="int16") /* ty=Tensor[(660), int16] */;
  %263 = cast(meta[relay.Constant][22] /* ty=Tensor[(9240), int16] */, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %264 = cast(%var_7999, dtype="float64") /* ty=Tensor[(160), float64] */;
  %265 = reshape(%260, newshape=[6]) /* ty=Tensor[(6), int64] */;
  %266 = reshape(%261, newshape=[144]) /* ty=Tensor[(144), int64] */;
  %267 = reshape(%262, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %268 = reshape(%263, newshape=[9240, 1]) /* ty=Tensor[(9240, 1), int16] */;
  %269 = reshape(%264, newshape=[4, 40]) /* ty=Tensor[(4, 40), float64] */;
  %270 = @func_7795(%265, %266, %267, %268, %269) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) */;
  %271 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %272 = sin(%271) /* ty=Tensor[(1, 10, 10), float64] */;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %274 = atan(%273) /* ty=Tensor[(1, 10, 10), float64] */;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %276 = cast(%274, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %277 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 10, 10), float64] */, dtype="bool") /* ty=Tensor[(1, 10, 10), bool] */;
  %278 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%274, dtype="bool") /* ty=Tensor[(1, 10, 10), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = %270.6;
  %282 = asinh(%275) /* ty=Tensor[(1, 10, 10), float32] */;
  %283 = acosh(%276) /* ty=Tensor[(1, 10, 10), float64] */;
  %284 = logical_and(%279, %280) /* ty=Tensor[(?, 10, 10), bool] */;
  (%281, %var_7995, %var_7996, %var_7997, meta[relay.Constant][22] /* ty=Tensor[(9240), int16] */, %var_7999, %282, %283, %284)
}

def @func_7400() -> (Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) {
  %292 = fn () -> (Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) {
    %285 = @func_4599() /* ty=(Tensor[(6, 4, 2), float32],) */;
    %286 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
    %287 = reshape(%286, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
    %288 = @func_1950(%287) /* ty=(Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) */;
    %289 = %285.0;
    %290 = %288.2;
    %291 = @func_6746() /* ty=Tensor[(6, 4, 2), float32] */;
    (%289, %290, meta[relay.Constant][24] /* ty=Tensor[(180), bool] */, %291)
  };
  %292() /* ty=(Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) */
}

def @func_4388() -> (Tensor[(6, 4, 2), bool],) {
  @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */
}

def @func_200(%var_198: Tensor[(1, 12, 1), float64]) -> Tensor[(1, 12, 1), float64] {
  @func_197(%var_198) /* ty=Tensor[(1, 12, 1), float64] */
}

def @func_5946(%var_5934: Tensor[(6, 4, 2), float32]) -> Tensor[(6, 4, 2), int16] {
  %293 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  %294 = cast(%var_5934, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%296, %297) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_5363(%var_5358: Tensor[(1521), float64], %var_5359: Tensor[(660), int16], %var_5360: Tensor[(9240), int16], %var_5361: Tensor[(576), int8], %var_5362: Tensor[(90), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(13, 13, 9), bool], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(6, 4, 2), bool]) {
  @func_5356(%var_5358, %var_5359, %var_5360, %var_5361, %var_5362) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(13, 13, 9), bool], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(6, 4, 2), bool]) */
}

def @func_6513() -> Tensor[(12), float64] {
  %298 = @func_5651() /* ty=(Tensor[(12), float64],) */;
  %298.0
}

def @func_7795(%var_7790: Tensor[(6), int64], %var_7791: Tensor[(144), int64], %var_7792: Tensor[(660), int16], %var_7793: Tensor[(9240, 1), int16], %var_7794: Tensor[(4, 40), float64]) -> (Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) {
  %329 = fn (%var_7752: Tensor[(6), int64], %var_7753: Tensor[(144), int64], %var_7771: Tensor[(660), int16], %var_7772: Tensor[(9240, 1), int16], %var_7786: Tensor[(4, 40), float64]) -> (Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) {
    %299 = @func_7399() /* ty=(Tensor[(6, 4, 2), float32], Tensor[(6, 30), bool], Tensor[(180), bool], Tensor[(6, 4, 2), float32]) */;
    %300 = %299.3;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
    %302 = cast(%var_7752, dtype="int64") /* ty=Tensor[(6), int64] */;
    %303 = cast(%var_7753, dtype="int64") /* ty=Tensor[(144), int64] */;
    %304 = reshape(%302, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), int64] */;
    %305 = reshape(%303, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), int64] */;
    %306 = @func_2834(%304, %305) /* ty=(Tensor[(4, 6, 6), int64],) */;
    %307 = cast(meta[relay.Constant][25] /* ty=Tensor[(1521), float64] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %308 = cast(%var_7771, dtype="int16") /* ty=Tensor[(660), int16] */;
    %309 = cast(%var_7772, dtype="int16") /* ty=Tensor[(9240, 1), int16] */;
    %310 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
    %311 = cast(meta[relay.Constant][27] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(1521), float64] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %313 = reshape(%307, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
    %314 = reshape(%308, newshape=[660]) /* ty=Tensor[(660), int16] */;
    %315 = reshape(%309, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
    %316 = reshape(%310, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
    %317 = reshape(%311, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %318 = reshape(%312, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
    %319 = @func_3711(%313, %314, %315, %316, %317, %318) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
    %320 = cast(meta[relay.Constant][28] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %321 = cast(%var_7786, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
    %322 = reshape(%320, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
    %323 = reshape(%321, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
    %324 = @func_4272(%322, %323) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
    %325 = log2(%301) /* ty=Tensor[(6, 4, 2), float32] */;
    %326 = %306.0;
    %327 = %319.2;
    %328 = %324.1;
    (%325, %326, %var_7752, %var_7753, %327, meta[relay.Constant][25] /* ty=Tensor[(1521), float64] */, %var_7771, %var_7772, meta[relay.Constant][26] /* ty=Tensor[(576), int8] */, meta[relay.Constant][27] /* ty=Tensor[(1120), int8] */, %328, meta[relay.Constant][28] /* ty=Tensor[(16), float64] */, %var_7786)
  };
  %329(%var_7790, %var_7791, %var_7792, %var_7793, %var_7794) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(144), int64], Tensor[(660), int16], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(10, 2, 8), float32], Tensor[(16), float64], Tensor[(4, 40), float64]) */
}

def @func_7566(%var_7562: Tensor[(1056), bool], %var_7563: Tensor[(160), bool], %var_7564: Tensor[(576), int8], %var_7565: Tensor[(3600), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(12), float64], Tensor[(15, 3, 2), float64], Tensor[(660), int16], Tensor[(90), float64], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(480), float32]) {
  %353 = fn (%var_7538: Tensor[(1056), bool], %var_7539: Tensor[(160), bool], %var_7540: Tensor[(576), int8], %var_7541: Tensor[(3600), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(12), float64], Tensor[(15, 3, 2), float64], Tensor[(660), int16], Tensor[(90), float64], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(480), float32]) {
    %330 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %331 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %332 = cast(meta[relay.Constant][29] /* ty=Tensor[(660), int16] */, dtype="int16") /* ty=Tensor[(660), int16] */;
    %333 = reshape(%332, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
    %334 = @func_2428(%333) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
    %335 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %336 = cast(%var_7538, dtype="bool") /* ty=Tensor[(1056), bool] */;
    %337 = cast(%var_7539, dtype="bool") /* ty=Tensor[(160), bool] */;
    %338 = cast(%var_7540, dtype="int8") /* ty=Tensor[(576), int8] */;
    %339 = cast(%var_7541, dtype="float32") /* ty=Tensor[(3600), float32] */;
    %340 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %341 = reshape(%335, newshape=[]) /* ty=bool */;
    %342 = reshape(%336, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
    %343 = reshape(%337, newshape=[160]) /* ty=Tensor[(160), bool] */;
    %344 = reshape(%338, newshape=[576]) /* ty=Tensor[(576), int8] */;
    %345 = reshape(%339, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
    %346 = reshape(%340, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %347 = @func_4482(%341, %342, %343, %344, %345, %346) /* ty=(Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) */;
    %348 = %330.0;
    %349 = %331.0;
    %350 = @func_6513() /* ty=Tensor[(12), float64] */;
    %351 = %334.3;
    %352 = %347.7;
    (%348, %349, %350, %351, meta[relay.Constant][29] /* ty=Tensor[(660), int16] */, %352, True /* ty=bool */, %var_7538, %var_7539, %var_7540, %var_7541, meta[relay.Constant][30] /* ty=Tensor[(480), float32] */)
  };
  %353(%var_7562, %var_7563, %var_7564, %var_7565) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(12), float64], Tensor[(15, 3, 2), float64], Tensor[(660), int16], Tensor[(90), float64], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(480), float32]) */
}

def @func_5735(%var_5733: Tensor[(330, 2), int16]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(330, 2), int16], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  @func_5732(%var_5733) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(330, 2), int16], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) */
}

def @func_4808(%var_4796: Tensor[(660), int16], %var_4798: Tensor[(576), int8], %var_4799: Tensor[(1120), int8]) -> (Tensor[(6, 4, 2), float32], Tensor[(13, 13, 9), uint32], Tensor[(169, 9), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
  %354 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %357 = cast(meta[relay.Constant][31] /* ty=Tensor[(169, 9), float64] */, dtype="float64") /* ty=Tensor[(169, 9), float64] */;
  %358 = cast(%var_4796, dtype="int16") /* ty=Tensor[(660), int16] */;
  %359 = cast(meta[relay.Constant][32] /* ty=Tensor[(9240), int16] */, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %360 = cast(%var_4798, dtype="int8") /* ty=Tensor[(576), int8] */;
  %361 = cast(%var_4799, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %362 = cast(meta[relay.Constant][31] /* ty=Tensor[(169, 9), float64] */, dtype="float64") /* ty=Tensor[(169, 9), float64] */;
  %363 = reshape(%357, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %364 = reshape(%358, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %365 = reshape(%359, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
  %366 = reshape(%360, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
  %367 = reshape(%361, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %368 = reshape(%362, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %369 = @func_3711(%363, %364, %365, %366, %367, %368) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
  %370 = cast(meta[relay.Constant][33] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %371 = reshape(%370, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %372 = cos(%356) /* ty=Tensor[(6, 4, 2), float32] */;
  %373 = %369.7;
  %374 = @func_1534(%371) /* ty=Tensor[(15, 3, 2), float64] */;
  (%372, %373, meta[relay.Constant][31] /* ty=Tensor[(169, 9), float64] */, %var_4796, meta[relay.Constant][32] /* ty=Tensor[(9240), int16] */, %var_4798, %var_4799, %374, meta[relay.Constant][33] /* ty=Tensor[(90), float64] */)
}

def @func_7004() -> Tensor[(6, 4, 2), bool] {
  %376 = fn () -> Tensor[(6, 4, 2), bool] {
    %375 = @func_5074() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %375.0
  };
  %376() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_4110(%var_4109: Tensor[(13, 12, 6), float32]) -> (Tensor[(13, 12, 6), float32],) {
  %379 = fn (%var_4105: Tensor[(13, 12, 6), float32]) -> (Tensor[(13, 12, 6), float32],) {
    %377 = cast(%var_4105, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %378 = asinh(%377) /* ty=Tensor[(13, 12, 6), float32] */;
    (%378,)
  };
  %379(%var_4109) /* ty=(Tensor[(13, 12, 6), float32],) */
}

def @func_5075() -> (Tensor[(6, 4, 2), bool],) {
  %382 = fn () -> (Tensor[(6, 4, 2), bool],) {
    %380 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %381 = %380.0;
    (%381,)
  };
  %382() /* ty=(Tensor[(6, 4, 2), bool],) */
}

def @func_4276(%var_4274: Tensor[(1, 2, 8), float64], %var_4275: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) {
  @func_4272(%var_4274, %var_4275) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */
}

def @func_3012(%var_3008: Tensor[(1, 660), int16], %var_3009: Tensor[(14, 660), int16], %var_3010: Tensor[(576, 1), int8], %var_3011: Tensor[(1120), int8]) -> (Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) {
  @func_3006(%var_3008, %var_3009, %var_3010, %var_3011) /* ty=(Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) */
}

def @func_6017(%var_5969: Tensor[(96, 12), uint64], %var_5975: Tensor[(480), float32]) -> (Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) {
  %383 = @func_5127() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %384 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %385 = cast(meta[relay.Constant][35] /* ty=Tensor[(96, 12), uint64] */, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %386 = reshape(%384, newshape=[]) /* ty=uint64 */;
  %387 = reshape(%385, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
  %388 = @func_1209(%386, %387) /* ty=(Tensor[(8, 16, 9), uint64],) */;
  %389 = cast(meta[relay.Constant][36] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %390 = cast(meta[relay.Constant][36] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %391 = cast(%var_5975, dtype="float32") /* ty=Tensor[(480), float32] */;
  %392 = cast(meta[relay.Constant][37] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %393 = reshape(%389, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), uint16] */;
  %394 = reshape(%390, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), uint16] */;
  %395 = reshape(%391, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %396 = reshape(%392, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %397 = @func_2682(%393, %394, %395, %396) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) */;
  %398 = %397.4;
  %399 = cast(%398, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %400 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint32") /* ty=uint32 */;
  %401 = %383.0;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %403 = reshape(%402, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
  %404 = cast(%var_5969, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %405 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(96, 12), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(meta[relay.Constant][35] /* ty=Tensor[(96, 12), uint64] */, dtype="uint64") /* ty=Tensor[(96, 12), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %408 = minimum(%406, %407) /* ty=Tensor[(96, 12), uint64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(96, 12), float64] */;
  %410 = cast(meta[relay.Constant][37] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %411 = reshape(%410, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %412 = %388.0;
  %413 = add(%399, %400) /* ty=Tensor[(308), uint32] */;
  %414 = @func_5886(%403) /* ty=Tensor[(6, 4, 2), int16] */;
  %415 = acosh(%409) /* ty=Tensor[(96, 12), float64] */;
  %416 = @func_197(%411) /* ty=Tensor[(1, 12, 1), float64] */;
  (%401, %412, meta[relay.Constant][36] /* ty=Tensor[(3072), uint16] */, %var_5975, meta[relay.Constant][37] /* ty=Tensor[(12), float64] */, %413, %414, %415, %416)
}

def @func_5557(%var_5550: Tensor[(14, 9, 5), int64]) -> (Tensor[(14, 9, 5), bool],) {
  %417 = cast(%var_5550, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %418 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(14, 9, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 9, 5), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = greater(%419, %420) /* ty=Tensor[(14, 9, 5), bool] */;
  (%421,)
}

def @func_5949(%var_5947: Tensor[(6, 4, 2), float32]) -> Tensor[(6, 4, 2), int16] {
  @func_5946(%var_5947) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_7272() -> Tensor[(6, 4, 2), float64] {
  %425 = fn () -> Tensor[(6, 4, 2), float64] {
    %422 = @func_6319() /* ty=(Tensor[(6, 4, 2), float32],) */;
    %423 = %422.0;
    %424 = cast(%423, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
    sigmoid(%424) /* ty=Tensor[(6, 4, 2), float64] */
  };
  %425() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_6437(%var_6427: Tensor[(1800, 2), float32], %var_6428: Tensor[(480), float32]) -> (Tensor[(10, 1, 10), float64], Tensor[(14, 9, 5), bool], Tensor[(630), int64], Tensor[(6, 4, 2), float64], Tensor[(3600), float32], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(1800, 2), float32], Tensor[(480), float32]) {
  %426 = @func_5535() /* ty=(Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %427 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %428 = reshape(%427, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), int64] */;
  %429 = @func_5557(%428) /* ty=(Tensor[(14, 9, 5), bool],) */;
  %430 = @func_5049() /* ty=(Tensor[(6, 4, 2), float64],) */;
  %431 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %432 = cast(meta[relay.Constant][40] /* ty=Tensor[(1056), bool] */, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %433 = cast(meta[relay.Constant][41] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %434 = cast(meta[relay.Constant][42] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %435 = cast(%var_6427, dtype="float32") /* ty=Tensor[(1800, 2), float32] */;
  %436 = cast(%var_6428, dtype="float32") /* ty=Tensor[(480), float32] */;
  %437 = reshape(%431, newshape=[]) /* ty=bool */;
  %438 = reshape(%432, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %439 = reshape(%433, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %440 = reshape(%434, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %441 = reshape(%435, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %442 = reshape(%436, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %443 = @func_4482(%437, %438, %439, %440, %441, %442) /* ty=(Tensor[(5, 16, 2), bool], Tensor[(160), bool], Tensor[(11, 6, 16), float32], Tensor[(6, 10, 11), bool], Tensor[(660), int16], Tensor[(11, 6, 16), float32], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(7, 16, 10), int8], Tensor[(576), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32]) */;
  %444 = %426.0;
  %445 = %429.0;
  %446 = %430.0;
  %447 = %443.10;
  (%444, %445, meta[relay.Constant][39] /* ty=Tensor[(630), int64] */, %446, %447, False /* ty=bool */, meta[relay.Constant][40] /* ty=Tensor[(1056), bool] */, meta[relay.Constant][41] /* ty=Tensor[(160), bool] */, meta[relay.Constant][42] /* ty=Tensor[(576), int8] */, %var_6427, %var_6428)
}

def @func_4361() -> Tensor[(6, 4, 2), bool] {
  %456 = fn () -> Tensor[(6, 4, 2), bool] {
    %448 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
    %449 = log10(%448) /* ty=Tensor[(6, 4, 2), float32] */;
    %450 = cast(%449, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
    %451 = sinh(%450) /* ty=Tensor[(6, 4, 2), float64] */;
    %452 = cast(%451, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
    %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %454 = cast(%449, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%454, %455) /* ty=Tensor[(6, 4, 2), bool] */
  };
  %456() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_6080(%var_6033: Tensor[(8, 5, 8), float32], %var_6034: Tensor[(8, 5, 8), float32], %var_6068: Tensor[(480), float32]) -> (Tensor[(1, 12, 1), float64], Tensor[(3072), uint16], Tensor[(1152), uint64], Tensor[(480), float32], Tensor[(8, 5, 8), bool]) {
  %457 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %458 = cast(meta[relay.Constant][44] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %459 = cast(%var_6068, dtype="float32") /* ty=Tensor[(480), float32] */;
  %460 = reshape(%458, newshape=[96, 12]) /* ty=Tensor[(96, 12), uint64] */;
  %461 = reshape(%459, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %462 = @func_6017(%460, %461) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(8, 16, 9), uint64], Tensor[(3072), uint16], Tensor[(480), float32], Tensor[(12), float64], Tensor[(308), uint32], Tensor[(6, 4, 2), int16], Tensor[(96, 12), float64], Tensor[(1, 12, 1), float64]) */;
  %463 = cast(%var_6033, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %464 = acos(%463) /* ty=Tensor[(8, 5, 8), float32] */;
  %465 = cast(%var_6034, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %466 = shape_of(%var_6033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%var_6033, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %469 = power(%467, %468) /* ty=Tensor[(8, 5, 8), float32] */;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %471 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%464, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = %457.2;
  %475 = %462.2;
  %476 = logical_or(%472, %473) /* ty=Tensor[(8, 5, 8), bool] */;
  (%474, %475, meta[relay.Constant][44] /* ty=Tensor[(1152), uint64] */, %var_6068, %476)
}

def @func_2688(%var_2684: Tensor[(16, 16, 12), uint16], %var_2685: Tensor[(16, 16, 12), uint16], %var_2686: Tensor[(480), float32], %var_2687: Tensor[(12), float64]) -> (Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) {
  @func_2682(%var_2684, %var_2685, %var_2686, %var_2687) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) */
}

def @func_5774() -> Tensor[(6, 4, 2), bool] {
  @func_4656() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_3719(%var_3713: Tensor[(13, 13, 9), float64], %var_3714: Tensor[(660), int16], %var_3715: Tensor[(9240), int16], %var_3716: Tensor[(288, 2), int8], %var_3717: Tensor[(1120), int8], %var_3718: Tensor[(13, 13, 9), float64]) -> (Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) {
  @func_3711(%var_3713, %var_3714, %var_3715, %var_3716, %var_3717, %var_3718) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */
}

def @func_6746() -> Tensor[(6, 4, 2), float32] {
  @func_5853() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_6337(%var_6330: Tensor[(6, 2), float64], %var_6331: Tensor[(42, 4), float32]) -> (Tensor[(6, 4, 2), float32], Tensor[(12), float64], Tensor[(308), float32], Tensor[(6, 2), float64], Tensor[(42, 4), float32]) {
  %477 = cast(meta[relay.Constant][45] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %478 = cast(%var_6330, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %479 = cast(meta[relay.Constant][45] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %480 = cast(%var_6331, dtype="float32") /* ty=Tensor[(42, 4), float32] */;
  %481 = reshape(%477, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %482 = reshape(%478, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %483 = reshape(%479, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %484 = reshape(%480, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), float32] */;
  %485 = @func_1038(%481, %482, %483, %484) /* ty=(Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) */;
  %486 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  %487 = %485.0;
  (%486, %487, meta[relay.Constant][45] /* ty=Tensor[(308), float32] */, %var_6330, %var_6331)
}

def @func_3006(%var_2953: Tensor[(1, 660), int16], %var_2983: Tensor[(14, 660), int16], %var_2997: Tensor[(576, 1), int8], %var_2999: Tensor[(1120), int8]) -> (Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) {
  %488 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %489 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = cast(%var_2953, dtype="int16") /* ty=Tensor[(1, 660), int16] */;
  %493 = reshape(%492, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %494 = @func_2428(%493) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %495 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %496 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 16, 12), uint8] */, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = not_equal(%497, %498) /* ty=Tensor[(4, 16, 12), bool] */;
  %500 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 16, 12), bool] */, dtype="int16") /* ty=Tensor[(4, 16, 12), int16] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="int16") /* ty=Tensor[(4, 16, 12), int16] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %504 = cast(%var_2953, dtype="bool") /* ty=Tensor[(1, 660), bool] */;
  %505 = cast(%var_2983, dtype="bool") /* ty=Tensor[(14, 660), bool] */;
  %506 = cast(%var_2997, dtype="int8") /* ty=Tensor[(576, 1), int8] */;
  %507 = cast(meta[relay.Constant][49] /* ty=Tensor[(3600), float32] */, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %508 = cast(%var_2999, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %509 = cast(meta[relay.Constant][50] /* ty=Tensor[(480, 1), float32] */, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
  %510 = reshape(%506, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), int8] */;
  %511 = reshape(%507, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %512 = reshape(%508, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %513 = reshape(%509, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %514 = @func_2296(%510, %511, %512, %513) /* ty=(Tensor[(5, 12, 8), float64], Tensor[(240), float32], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480), float32], Tensor[(7, 16, 10), int8], Tensor[(12, 8, 6), int8]) */;
  %515 = less(%490, %491) /* ty=Tensor[(4, 16, 12), bool] */;
  %516 = %494.3;
  %517 = multiply(%502, %503) /* ty=Tensor[(4, 16, 12), int16] */;
  %518 = equal(%504, %505) /* ty=Tensor[(14, 660), bool] */;
  %519 = %514.2;
  (%515, %516, %517, %518, %519, %var_2997, meta[relay.Constant][49] /* ty=Tensor[(3600), float32] */, %var_2999, meta[relay.Constant][50] /* ty=Tensor[(480, 1), float32] */)
}

def @func_6441(%var_6439: Tensor[(1800, 2), float32], %var_6440: Tensor[(480), float32]) -> (Tensor[(10, 1, 10), float64], Tensor[(14, 9, 5), bool], Tensor[(630), int64], Tensor[(6, 4, 2), float64], Tensor[(3600), float32], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(1800, 2), float32], Tensor[(480), float32]) {
  @func_6437(%var_6439, %var_6440) /* ty=(Tensor[(10, 1, 10), float64], Tensor[(14, 9, 5), bool], Tensor[(630), int64], Tensor[(6, 4, 2), float64], Tensor[(3600), float32], bool, Tensor[(1056), bool], Tensor[(160), bool], Tensor[(576), int8], Tensor[(1800, 2), float32], Tensor[(480), float32]) */
}

def @func_4386() -> (Tensor[(6, 4, 2), bool],) {
  %520 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
  (%520,)
}

def @func_197(%var_180: Tensor[(1, 12, 1), float64]) -> Tensor[(1, 12, 1), float64] {
  %521 = cast(%var_180, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %522 = exp(%521) /* ty=Tensor[(1, 12, 1), float64] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  sinh(%523) /* ty=Tensor[(1, 12, 1), float64] */
}

def @func_5889(%var_5887: Tensor[(6, 4, 2), bool]) -> Tensor[(6, 4, 2), int16] {
  @func_5886(%var_5887) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_5051() -> (Tensor[(6, 4, 2), float64],) {
  @func_5049() /* ty=(Tensor[(6, 4, 2), float64],) */
}

def @func_2430(%var_2429: Tensor[(5, 132), int16]) -> (Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
  %535 = fn (%var_2403: Tensor[(5, 132), int16]) -> (Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
    %524 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
    %525 = cast(%var_2403, dtype="int16") /* ty=Tensor[(5, 132), int16] */;
    %526 = reshape(%525, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), int16] */;
    %527 = @func_1992(%526) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(6, 10, 11), int64]) */;
    %528 = %527.0;
    %529 = cast(%528, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
    %530 = cast(meta[relay.Constant][52] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %531 = reshape(%530, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
    %532 = log10(%524) /* ty=Tensor[(2, 15, 1), float64] */;
    %533 = log10(%529) /* ty=Tensor[(6, 10, 11), float64] */;
    %534 = @func_1534(%531) /* ty=Tensor[(15, 3, 2), float64] */;
    (%532, %var_2403, %533, %534, meta[relay.Constant][52] /* ty=Tensor[(90), float64] */)
  };
  %535(%var_2429) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */
}

def @func_6700(%var_6698: Tensor[(160), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  @func_6697(%var_6698) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) */
}

def @func_4514() -> (Tensor[(6, 4, 2), bool],) {
  %538 = fn () -> (Tensor[(6, 4, 2), bool],) {
    %536 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %537 = %536.0;
    (%537,)
  };
  %538() /* ty=(Tensor[(6, 4, 2), bool],) */
}

def @func_5049() -> (Tensor[(6, 4, 2), float64],) {
  %539 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %542 = cosh(%541) /* ty=Tensor[(6, 4, 2), float64] */;
  (%542,)
}

def @func_6808(%var_6805: Tensor[(6, 4, 2), bool], %var_6806: Tensor[(160), bool], %var_6807: Tensor[(5, 16, 2), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(160), bool], Tensor[(5, 16, 2), uint8]) {
  %557 = fn (%var_6756: Tensor[(6, 4, 2), bool], %var_6770: Tensor[(160), bool], %var_6788: Tensor[(5, 16, 2), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(160), bool], Tensor[(5, 16, 2), uint8]) {
    %543 = @func_4360() /* ty=Tensor[(6, 4, 2), bool] */;
    %544 = cast(%var_6756, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = cast(%var_6770, dtype="bool") /* ty=Tensor[(160), bool] */;
    %549 = reshape(%548, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
    %550 = @func_1154(%549) /* ty=Tensor[(5, 16, 2), bool] */;
    %551 = cast(%var_6788, dtype="uint8") /* ty=Tensor[(5, 16, 2), uint8] */;
    %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%550, dtype="uint8") /* ty=Tensor[(5, 16, 2), uint8] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %555 = logical_or(%546, %547) /* ty=Tensor[(6, 4, 2), bool] */;
    %556 = bitwise_and(%553, %554) /* ty=Tensor[(5, 16, 2), uint8] */;
    (%555, %var_6770, %556)
  };
  %557(%var_6805, %var_6806, %var_6807) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(160), bool], Tensor[(5, 16, 2), uint8]) */
}

def @func_4993() -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */
}

def @func_5224() -> Tensor[(6, 4, 2), float32] {
  @func_5222() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_7118() -> (Tensor[(6, 4, 2), float32],) {
  %559 = fn () -> (Tensor[(6, 4, 2), float32],) {
    %558 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_7669() -> (Tensor[(6, 4, 2), float32], Tensor[(6, 4, 2), float64]) {
  @func_7667() /* ty=(Tensor[(6, 4, 2), float32], Tensor[(6, 4, 2), float64]) */
}

def @func_4813(%var_4810: Tensor[(660), int16], %var_4811: Tensor[(576), int8], %var_4812: Tensor[(1120), int8]) -> (Tensor[(6, 4, 2), float32], Tensor[(13, 13, 9), uint32], Tensor[(169, 9), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) {
  @func_4808(%var_4810, %var_4811, %var_4812) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(13, 13, 9), uint32], Tensor[(169, 9), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */
}

def @func_6748() -> Tensor[(6, 4, 2), float32] {
  @func_6746() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_3711(%var_3620: Tensor[(13, 13, 9), float64], %var_3645: Tensor[(660), int16], %var_3646: Tensor[(9240), int16], %var_3647: Tensor[(288, 2), int8], %var_3648: Tensor[(1120), int8], %var_3653: Tensor[(13, 13, 9), float64]) -> (Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) {
  %560 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %561 = shape_of(%var_3620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_3620, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(%var_3645, dtype="int16") /* ty=Tensor[(660), int16] */;
  %565 = cast(%var_3646, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %566 = cast(%var_3647, dtype="int8") /* ty=Tensor[(288, 2), int8] */;
  %567 = cast(%var_3648, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %568 = reshape(%564, newshape=[1, 660]) /* ty=Tensor[(1, 660), int16] */;
  %569 = reshape(%565, newshape=[14, 660]) /* ty=Tensor[(14, 660), int16] */;
  %570 = reshape(%566, newshape=[576, 1]) /* ty=Tensor[(576, 1), int8] */;
  %571 = reshape(%567, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %572 = @func_3006(%568, %569, %570, %571) /* ty=(Tensor[(4, 16, 12), bool], Tensor[(15, 3, 2), float64], Tensor[(4, 16, 12), int16], Tensor[(14, 660), bool], Tensor[(3600), float32], Tensor[(576, 1), int8], Tensor[(3600), float32], Tensor[(1120), int8], Tensor[(480, 1), float32]) */;
  %573 = cast(%var_3620, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %574 = log(%573) /* ty=Tensor[(13, 13, 9), float64] */;
  %575 = cast(%var_3653, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(13, 13, 9), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %580 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%574, dtype="float64") /* ty=Tensor[(13, 13, 9), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = floor_divide(%581, %582) /* ty=Tensor[(13, 13, 9), float64] */;
  %584 = cast(%var_3620, dtype="float32") /* ty=Tensor[(13, 13, 9), float32] */;
  %585 = cosh(%584) /* ty=Tensor[(13, 13, 9), float32] */;
  %586 = cast(%585, dtype="uint32") /* ty=Tensor[(13, 13, 9), uint32] */;
  %587 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%583, dtype="uint32") /* ty=Tensor[(13, 13, 9), uint32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %590 = logical_and(%562, %563) /* ty=Tensor[(13, 13, 9), bool] */;
  %591 = %572.0;
  %592 = logical_or(%577, %578) /* ty=Tensor[(13, 13, 9), bool] */;
  %593 = subtract(%588, %589) /* ty=Tensor[(13, 13, 9), uint32] */;
  (%590, %591, %var_3645, %var_3646, %var_3647, %var_3648, %592, %593)
}

def @func_4892(%var_4888: Tensor[(660), int16], %var_4889: Tensor[(576), int8], %var_4890: Tensor[(6), int64], %var_4891: Tensor[(2, 72), int64]) -> (Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) {
  @func_4886(%var_4888, %var_4889, %var_4890, %var_4891) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(3600), float32], Tensor[(660), int16], Tensor[(9240, 1), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(4, 6, 6), int64], Tensor[(6), int64], Tensor[(2, 72), int64]) */
}

def @func_6897() -> Tensor[(6, 4, 2), float32] {
  %594 = fn () -> Tensor[(6, 4, 2), float32] {
    @func_6746() /* ty=Tensor[(6, 4, 2), float32] */
  };
  %594() /* ty=Tensor[(6, 4, 2), float32] */
}

def @func_5732(%var_5705: Tensor[(330, 2), int16]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(330, 2), int16], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  %595 = cast(%var_5705, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %596 = reshape(%595, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
  %597 = @func_2428(%596) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
  %598 = cast(meta[relay.Constant][54] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %599 = reshape(%598, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %600 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %601 = %597.1;
  %602 = @func_1154(%599) /* ty=Tensor[(5, 16, 2), bool] */;
  (%600, %601, %var_5705, %602, meta[relay.Constant][54] /* ty=Tensor[(160), bool] */)
}

def @func_2490(%var_2488: Tensor[(1, 12, 16), float64]) -> (Tensor[(180), bool], Tensor[(15, 4, 3), float32], Tensor[(?, 12, 16), bool], Tensor[(?, 12, 16), float32]) {
  @func_2487(%var_2488) /* ty=(Tensor[(180), bool], Tensor[(15, 4, 3), float32], Tensor[(?, 12, 16), bool], Tensor[(?, 12, 16), float32]) */
}

def @func_1950(%var_1930: Tensor[(6, 30), bool]) -> (Tensor[(6, 8, 14), float32], Tensor[(15, 4, 3), bool], Tensor[(6, 30), bool]) {
  %603 = cast(meta[relay.Constant][55] /* ty=Tensor[(6, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %604 = cast(%var_1930, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %605 = cast(%var_1930, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %606 = reshape(%604, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %607 = reshape(%605, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %608 = atan(%603) /* ty=Tensor[(6, 8, 14), float32] */;
  %609 = @func_1378(%606, %607) /* ty=Tensor[(15, 4, 3), bool] */;
  (%608, %609, %var_1930)
}

def @func_2837(%var_2835: Tensor[(1, 6, 1), int64], %var_2836: Tensor[(4, 6, 6), int64]) -> (Tensor[(4, 6, 6), int64],) {
  %613 = fn (%var_2827: Tensor[(1, 6, 1), int64], %var_2828: Tensor[(4, 6, 6), int64]) -> (Tensor[(4, 6, 6), int64],) {
    %610 = cast(%var_2827, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
    %611 = cast(%var_2828, dtype="int64") /* ty=Tensor[(4, 6, 6), int64] */;
    %612 = minimum(%610, %611) /* ty=Tensor[(4, 6, 6), int64] */;
    (%612,)
  };
  %613(%var_2835, %var_2836) /* ty=(Tensor[(4, 6, 6), int64],) */
}

def @func_2682(%var_2639: Tensor[(16, 16, 12), uint16], %var_2640: Tensor[(16, 16, 12), uint16], %var_2648: Tensor[(480), float32], %var_2673: Tensor[(12), float64]) -> (Tensor[(5, 12, 8), float64], Tensor[(480), float32], Tensor[(16, 16, 12), uint16], Tensor[(14, 12, 1), bool], Tensor[(308), float32], Tensor[(12), float64], Tensor[(168), float32]) {
  %614 = cast(%var_2648, dtype="float32") /* ty=Tensor[(480), float32] */;
  %615 = reshape(%614, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %616 = @func_1516(%615) /* ty=(Tensor[(5, 12, 8), float64],) */;
  %617 = cast(%var_2640, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %618 = shape_of(%var_2639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_2639, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = less(%619, %620) /* ty=Tensor[(16, 16, 12), bool] */;
  %622 = cast(%var_2640, dtype="uint16") /* ty=Tensor[(16, 16, 12), uint16] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="uint16") /* ty=Tensor[(16, 16, 12), uint16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %626 = cast(meta[relay.Constant][56] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %627 = cast(%var_2673, dtype="float64") /* ty=Tensor[(12), float64] */;
  %628 = cast(meta[relay.Constant][56] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %629 = cast(meta[relay.Constant][57] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %630 = reshape(%626, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %631 = reshape(%627, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %632 = reshape(%628, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), float32] */;
  %633 = reshape(%629, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), float32] */;
  %634 = @func_1038(%630, %631, %632, %633) /* ty=(Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) */;
  %635 = %616.0;
  %636 = right_shift(%624, %625) /* ty=Tensor[(16, 16, 12), uint16] */;
  %637 = %634.3;
  (%635, %var_2648, %636, %637, meta[relay.Constant][56] /* ty=Tensor[(308), float32] */, %var_2673, meta[relay.Constant][57] /* ty=Tensor[(168), float32] */)
}

def @func_7701() -> (Tensor[(6, 4, 2), float32],) {
  @func_7699() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_5222() -> Tensor[(6, 4, 2), float32] {
  %638 = @func_4599() /* ty=(Tensor[(6, 4, 2), float32],) */;
  %638.0
}

def @func_1534(%var_1525: Tensor[(15, 3, 2), float64]) -> Tensor[(15, 3, 2), float64] {
  %639 = cast(%var_1525, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  cosh(%639) /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_6817() -> (Tensor[(6, 4, 2), float32],) {
  %642 = fn () -> (Tensor[(6, 4, 2), float32],) {
    %640 = @func_6319() /* ty=(Tensor[(6, 4, 2), float32],) */;
    %641 = %640.0;
    (%641,)
  };
  %642() /* ty=(Tensor[(6, 4, 2), float32],) */
}

def @func_1564(%var_1563: Tensor[(7, 16, 10), int8]) -> (Tensor[(7, 16, 10), int8],) {
  %648 = fn (%var_1556: Tensor[(7, 16, 10), int8]) -> (Tensor[(7, 16, 10), int8],) {
    %643 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 16, 10), int8] */, dtype="int8") /* ty=Tensor[(7, 16, 10), int8] */;
    %644 = shape_of(%var_1556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_1556, dtype="int8") /* ty=Tensor[(7, 16, 10), int8] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %647 = bitwise_and(%645, %646) /* ty=Tensor[(7, 16, 10), int8] */;
    (%647,)
  };
  %648(%var_1563) /* ty=(Tensor[(7, 16, 10), int8],) */
}

def @func_1044(%var_1040: Tensor[(11, 14, 2), float32], %var_1041: Tensor[(12), float64], %var_1042: Tensor[(11, 14, 2), float32], %var_1043: Tensor[(14, 12, 1), float32]) -> (Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) {
  @func_1038(%var_1040, %var_1041, %var_1042, %var_1043) /* ty=(Tensor[(12), float64], Tensor[(11, 14, 2), float32], Tensor[(1, 12, 1), float64], Tensor[(14, 12, 1), bool]) */
}

def @func_5201(%var_5197: Tensor[(240), int8]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 10, 4), float64], Tensor[(240), int8]) {
  %649 = @func_5074() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %650 = cast(%var_5197, dtype="int8") /* ty=Tensor[(240), int8] */;
  %651 = reshape(%650, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int8] */;
  %652 = @func_3266(%651) /* ty=(Tensor[(6, 10, 4), int8], Tensor[(6, 10, 4), float64]) */;
  %653 = %649.0;
  %654 = %652.1;
  (%653, %654, %var_5197)
}

def @func_5204(%var_5202: Tensor[(240), int8]) -> (Tensor[(6, 4, 2), bool], Tensor[(6, 10, 4), float64], Tensor[(240), int8]) {
  @func_5201(%var_5202) /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 10, 4), float64], Tensor[(240), int8]) */
}

def @func_1378(%var_1365: Tensor[(15, 4, 3), bool], %var_1366: Tensor[(15, 4, 3), bool]) -> Tensor[(15, 4, 3), bool] {
  %655 = cast(%var_1366, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %656 = shape_of(%var_1365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_1365, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = logical_and(%657, %658) /* ty=Tensor[(15, 4, 3), bool] */;
  %660 = cast(%var_1365, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%662, %663) /* ty=Tensor[(15, 4, 3), bool] */
}

def @func_1537(%var_1535: Tensor[(15, 3, 2), float64]) -> Tensor[(15, 3, 2), float64] {
  @func_1534(%var_1535) /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_6121(%var_6118: Tensor[(11, 4, 7), float64], %var_6119: Tensor[(11, 4, 7), float64], %var_6120: Tensor[(16), float64]) -> (Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) {
  %678 = fn (%var_6089: Tensor[(11, 4, 7), float64], %var_6090: Tensor[(11, 4, 7), float64], %var_6097: Tensor[(16), float64]) -> (Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) {
    %664 = cast(%var_6090, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
    %665 = shape_of(%var_6089, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%var_6089, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %668 = cast(%var_6097, dtype="float64") /* ty=Tensor[(16), float64] */;
    %669 = cast(meta[relay.Constant][59] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %670 = reshape(%668, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float64] */;
    %671 = reshape(%669, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
    %672 = @func_4272(%670, %671) /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), float32]) */;
    %673 = %672.0;
    %674 = cast(%673, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
    %675 = reshape(%674, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
    %676 = greater_equal(%666, %667) /* ty=Tensor[(11, 4, 7), bool] */;
    %677 = @func_1154(%675) /* ty=Tensor[(5, 16, 2), bool] */;
    (%676, %673, %var_6097, meta[relay.Constant][59] /* ty=Tensor[(160), float64] */, %677)
  };
  %678(%var_6118, %var_6119, %var_6120) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) */
}

def @func_6319() -> (Tensor[(6, 4, 2), float32],) {
  %679 = @func_5853() /* ty=Tensor[(6, 4, 2), float32] */;
  (%679,)
}

def @func_5667() -> Tensor[(6, 4, 2), bool] {
  %680 = fn () -> Tensor[(6, 4, 2), bool] {
    @func_4360() /* ty=Tensor[(6, 4, 2), bool] */
  };
  %680() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_5537() -> (Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  @func_5535() /* ty=(Tensor[(10, 1, 10), float64], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */
}

def @func_6341(%var_6339: Tensor[(6, 2), float64], %var_6340: Tensor[(42, 4), float32]) -> (Tensor[(6, 4, 2), float32], Tensor[(12), float64], Tensor[(308), float32], Tensor[(6, 2), float64], Tensor[(42, 4), float32]) {
  @func_6337(%var_6339, %var_6340) /* ty=(Tensor[(6, 4, 2), float32], Tensor[(12), float64], Tensor[(308), float32], Tensor[(6, 2), float64], Tensor[(42, 4), float32]) */
}

def @func_5565() -> Tensor[(6, 4, 2), float64] {
  %682 = fn () -> Tensor[(6, 4, 2), float64] {
    %681 = @func_5049() /* ty=(Tensor[(6, 4, 2), float64],) */;
    %681.0
  };
  %682() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_2487(%var_2433: Tensor[(1, 12, 16), float64]) -> (Tensor[(180), bool], Tensor[(15, 4, 3), float32], Tensor[(?, 12, 16), bool], Tensor[(?, 12, 16), float32]) {
  %683 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %684 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %685 = reshape(%683, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %686 = reshape(%684, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), bool] */;
  %687 = @func_1378(%685, %686) /* ty=Tensor[(15, 4, 3), bool] */;
  %688 = cast(-4.63502f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %689 = cast(%687, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %690 = cast(-4.63502f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %691 = cast(%var_2433, dtype="float64") /* ty=Tensor[(1, 12, 16), float64] */;
  %692 = mod(%690, %691) /* ty=Tensor[(1, 12, 16), float64] */;
  %693 = cast(%692, dtype="uint64") /* ty=Tensor[(1, 12, 16), uint64] */;
  %694 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_2433, dtype="uint64") /* ty=Tensor[(1, 12, 16), uint64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %697 = right_shift(%695, %696) /* ty=Tensor[(?, 12, 16), uint64] */;
  %698 = cast(-4.63502f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %699 = cast(%697, dtype="bool") /* ty=Tensor[(?, 12, 16), bool] */;
  %700 = cast(%var_2433, dtype="float32") /* ty=Tensor[(1, 12, 16), float32] */;
  %701 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%697, dtype="float32") /* ty=Tensor[(?, 12, 16), float32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %704 = power(%688, %689) /* ty=Tensor[(15, 4, 3), float32] */;
  %705 = logical_and(%698, %699) /* ty=Tensor[(?, 12, 16), bool] */;
  %706 = divide(%702, %703) /* ty=Tensor[(?, 12, 16), float32] */;
  (meta[relay.Constant][60] /* ty=Tensor[(180), bool] */, %704, %705, %706)
}

def @func_4658() -> Tensor[(6, 4, 2), bool] {
  @func_4656() /* ty=Tensor[(6, 4, 2), bool] */
}

def @func_5653() -> (Tensor[(12), float64],) {
  @func_5651() /* ty=(Tensor[(12), float64],) */
}

def @func_5651() -> (Tensor[(12), float64],) {
  %707 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
  %708 = %707.3;
  (%708,)
}

def @func_4991() -> (Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) {
  %709 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %710 = cast(meta[relay.Constant][61] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %711 = reshape(%710, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %712 = %709.0;
  %713 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
  %714 = @func_197(%711) /* ty=Tensor[(1, 12, 1), float64] */;
  (%712, %713, %714, meta[relay.Constant][61] /* ty=Tensor[(12), float64] */)
}

def @func_6296(%var_6291: Tensor[(14, 12, 9), int32], %var_6292: Tensor[(14, 12, 9), int32], %var_6293: Tensor[(48), float32], %var_6294: Tensor[(308), float64], %var_6295: Tensor[(660), int16]) -> (Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64], Tensor[(6, 4, 2), int16], Tensor[(48), float32], Tensor[(14, 12, 9), int8], Tensor[(6, 4, 2), bool], Tensor[(11, 4, 7), bool], Tensor[(308), float64], Tensor[(16), float64], Tensor[(8, 16, 9), uint64], Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(660), int16], Tensor[(14, 12, 9), float64], Tensor[(6, 4, 2), int16]) {
  %776 = fn (%var_6123: Tensor[(14, 12, 9), int32], %var_6128: Tensor[(14, 12, 9), int32], %var_6163: Tensor[(48), float32], %var_6222: Tensor[(308), float64], %var_6255: Tensor[(660), int16]) -> (Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64], Tensor[(6, 4, 2), int16], Tensor[(48), float32], Tensor[(14, 12, 9), int8], Tensor[(6, 4, 2), bool], Tensor[(11, 4, 7), bool], Tensor[(308), float64], Tensor[(16), float64], Tensor[(8, 16, 9), uint64], Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(660), int16], Tensor[(14, 12, 9), float64], Tensor[(6, 4, 2), int16]) {
    %715 = cast(meta[relay.Constant][62] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %716 = cast(meta[relay.Constant][63] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
    %717 = reshape(%715, newshape=[]) /* ty=uint64 */;
    %718 = reshape(%716, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
    %719 = @func_1209(%717, %718) /* ty=(Tensor[(8, 16, 9), uint64],) */;
    %720 = cast(%var_6163, dtype="float32") /* ty=Tensor[(48), float32] */;
    %721 = reshape(%720, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float32] */;
    %722 = cast(%var_6128, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
    %723 = cos(%722) /* ty=Tensor[(14, 12, 9), float64] */;
    %724 = cast(%var_6123, dtype="int8") /* ty=Tensor[(14, 12, 9), int8] */;
    %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%723, dtype="int8") /* ty=Tensor[(14, 12, 9), int8] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %728 = cast(%var_6222, dtype="float64") /* ty=Tensor[(308), float64] */;
    %729 = cast(%var_6222, dtype="float64") /* ty=Tensor[(308), float64] */;
    %730 = cast(meta[relay.Constant][64] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %731 = reshape(%728, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
    %732 = reshape(%729, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float64] */;
    %733 = reshape(%730, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %734 = @func_6117(%731, %732, %733) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(10, 2, 8), float64], Tensor[(16), float64], Tensor[(160), float64], Tensor[(5, 16, 2), bool]) */;
    %735 = cast(meta[relay.Constant][62] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %736 = %719.0;
    %737 = cast(%736, dtype="uint64") /* ty=Tensor[(8, 16, 9), uint64] */;
    %738 = reshape(%735, newshape=[]) /* ty=uint64 */;
    %739 = reshape(%737, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), uint64] */;
    %740 = @func_1209(%738, %739) /* ty=(Tensor[(8, 16, 9), uint64],) */;
    %741 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
    %742 = cast(%var_6255, dtype="int16") /* ty=Tensor[(660), int16] */;
    %743 = reshape(%742, newshape=[5, 132]) /* ty=Tensor[(5, 132), int16] */;
    %744 = @func_2428(%743) /* ty=(Tensor[(2, 15, 1), float64], Tensor[(5, 132), int16], Tensor[(6, 10, 11), float64], Tensor[(15, 3, 2), float64], Tensor[(90), float64]) */;
    %745 = cast(%723, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
    %746 = acos(%745) /* ty=Tensor[(14, 12, 9), float64] */;
    %747 = cast(%746, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
    %748 = log10(%747) /* ty=Tensor[(14, 12, 9), float32] */;
    %749 = cast(meta[relay.Constant][65] /* ty=Tensor[(14, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(14, 12, 9), int32] */;
    %750 = shape_of(%var_6123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%var_6123, dtype="int32") /* ty=Tensor[(14, 12, 9), int32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %753 = bitwise_and(%751, %752) /* ty=Tensor[(14, 12, 9), int32] */;
    %754 = cast(%var_6128, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %758 = mod(%756, %757) /* ty=Tensor[(14, 12, 9), float32] */;
    %759 = cast(%758, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %760 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%748, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %763 = less(%761, %762) /* ty=Tensor[(14, 12, 9), bool] */;
    %764 = cast(%763, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
    %765 = cast(%var_6163, dtype="bool") /* ty=Tensor[(48), bool] */;
    %766 = reshape(%765, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), bool] */;
    %767 = @func_5946(%721) /* ty=Tensor[(6, 4, 2), int16] */;
    %768 = minimum(%726, %727) /* ty=Tensor[(14, 12, 9), int8] */;
    %769 = @func_4656() /* ty=Tensor[(6, 4, 2), bool] */;
    %770 = %734.0;
    %771 = %740.0;
    %772 = %741.0;
    %773 = %744.1;
    %774 = atanh(%764) /* ty=Tensor[(14, 12, 9), float64] */;
    %775 = @func_5886(%766) /* ty=Tensor[(6, 4, 2), int16] */;
    (%736, meta[relay.Constant][62] /* ty=uint64 */, meta[relay.Constant][63] /* ty=Tensor[(1152), uint64] */, %767, %var_6163, %768, %769, %770, %var_6222, meta[relay.Constant][64] /* ty=Tensor[(16), float64] */, %771, %772, %773, %var_6255, %774, %775)
  };
  %776(%var_6291, %var_6292, %var_6293, %var_6294, %var_6295) /* ty=(Tensor[(8, 16, 9), uint64], uint64, Tensor[(1152), uint64], Tensor[(6, 4, 2), int16], Tensor[(48), float32], Tensor[(14, 12, 9), int8], Tensor[(6, 4, 2), bool], Tensor[(11, 4, 7), bool], Tensor[(308), float64], Tensor[(16), float64], Tensor[(8, 16, 9), uint64], Tensor[(6, 4, 2), bool], Tensor[(5, 132), int16], Tensor[(660), int16], Tensor[(14, 12, 9), float64], Tensor[(6, 4, 2), int16]) */
}

def @func_6697(%var_6695: Tensor[(160), bool]) -> (Tensor[(6, 4, 2), bool], Tensor[(5, 16, 2), bool], Tensor[(160), bool]) {
  %777 = cast(%var_6695, dtype="bool") /* ty=Tensor[(160), bool] */;
  %778 = reshape(%777, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), bool] */;
  %779 = @func_5666() /* ty=Tensor[(6, 4, 2), bool] */;
  %780 = @func_1154(%778) /* ty=Tensor[(5, 16, 2), bool] */;
  (%779, %780, %var_6695)
}

def @func_1686(%var_1682: Tensor[(1, 16, 15), float32], %var_1683: Tensor[(15, 16, 15), float32], %var_1684: Tensor[(1120), int8], %var_1685: Tensor[(480), float32]) -> (Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) {
  @func_1680(%var_1682, %var_1683, %var_1684, %var_1685) /* ty=(Tensor[(15, 3, 2), float64], Tensor[(1, 90), float64], Tensor[(1120), bool], Tensor[(15, 16, 15), float32], Tensor[(5, 12, 8), float64], Tensor[(480), float32]) */
}

def @func_5356(%var_5303: Tensor[(1521), float64], %var_5304: Tensor[(660), int16], %var_5305: Tensor[(9240), int16], %var_5306: Tensor[(576), int8], %var_5312: Tensor[(90), float64]) -> (Tensor[(6, 4, 2), bool], Tensor[(13, 13, 9), bool], Tensor[(1521), float64], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(576), int8], Tensor[(1120), int8], Tensor[(15, 3, 2), float64], Tensor[(90), float64], Tensor[(6, 4, 2), bool]) {
  %781 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %782 = cast(%var_5303, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %783 = cast(%var_5304, dtype="int16") /* ty=Tensor[(660), int16] */;
  %784 = cast(%var_5305, dtype="int16") /* ty=Tensor[(9240), int16] */;
  %785 = cast(%var_5306, dtype="int8") /* ty=Tensor[(576), int8] */;
  %786 = cast(meta[relay.Constant][66] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %787 = cast(%var_5303, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %788 = reshape(%782, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %789 = reshape(%783, newshape=[660]) /* ty=Tensor[(660), int16] */;
  %790 = reshape(%784, newshape=[9240]) /* ty=Tensor[(9240), int16] */;
  %791 = reshape(%785, newshape=[288, 2]) /* ty=Tensor[(288, 2), int8] */;
  %792 = reshape(%786, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %793 = reshape(%787, newshape=[13, 13, 9]) /* ty=Tensor[(13, 13, 9), float64] */;
  %794 = @func_3711(%788, %789, %790, %791, %792, %793) /* ty=(Tensor[(13, 13, 9), bool], Tensor[(4, 16, 12), bool], Tensor[(660), int16], Tensor[(9240), int16], Tensor[(288, 2), int8], Tensor[(1120), int8], Tensor[(13, 13, 9), bool], Tensor[(13, 13, 9), uint32]) */;
  %795 = cast(%var_5312, dtype="float64") /* ty=Tensor[(90), float64] */;
  %796 = reshape(%795, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float64] */;
  %797 = @func_4386() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(6, 4, 2), float32] */;
  %800 = atan(%799) /* ty=Tensor[(6, 4, 2), float32] */;
  %801 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 4, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %805 = %781.0;
  %806 = %794.6;
  %807 = @func_1534(%796) /* ty=Tensor[(15, 3, 2), float64] */;
  %808 = less(%803, %804) /* ty=Tensor[(6, 4, 2), bool] */;
  (%805, %806, %var_5303, %var_5304, %var_5305, %var_5306, meta[relay.Constant][66] /* ty=Tensor[(1120), int8] */, %807, %var_5312, %808)
}

def @func_5560(%var_5558: Tensor[(14, 9, 5), int64]) -> (Tensor[(14, 9, 5), bool],) {
  @func_5557(%var_5558) /* ty=(Tensor[(14, 9, 5), bool],) */
}

def @func_1799(%var_1791: uint64, %var_1792: Tensor[(12, 14, 7), uint64]) -> (Tensor[(12, 14, 7), uint64],) {
  %809 = cast(%var_1791, dtype="uint64") /* ty=uint64 */;
  %810 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(12, 14, 7), uint64] */;
  %811 = bitwise_and(%809, %810) /* ty=Tensor[(12, 14, 7), uint64] */;
  (%811,)
}

def @func_5886(%var_5877: Tensor[(6, 4, 2), bool]) -> Tensor[(6, 4, 2), int16] {
  %812 = @func_4513() /* ty=(Tensor[(6, 4, 2), bool],) */;
  %813 = %812.0;
  %814 = cast(%var_5877, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="int16") /* ty=Tensor[(6, 4, 2), int16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%816, %817) /* ty=Tensor[(6, 4, 2), int16] */
}

def @func_6449() -> Tensor[(6, 4, 2), float64] {
  @func_6447() /* ty=Tensor[(6, 4, 2), float64] */
}

def @func_1156(%var_1155: Tensor[(5, 16, 2), bool]) -> Tensor[(5, 16, 2), bool] {
  %822 = fn (%var_1149: Tensor[(5, 16, 2), bool]) -> Tensor[(5, 16, 2), bool] {
    %818 = cast(%var_1149, dtype="bool") /* ty=Tensor[(5, 16, 2), bool] */;
    %819 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(5, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(meta[relay.Constant][68] /* ty=Tensor[(5, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(5, 16, 2), bool] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%820, %821) /* ty=Tensor[(5, 16, 2), bool] */
  };
  %822(%var_1155) /* ty=Tensor[(5, 16, 2), bool] */
}

def @func_6085(%var_6082: Tensor[(8, 5, 8), float32], %var_6083: Tensor[(8, 5, 8), float32], %var_6084: Tensor[(480), float32]) -> (Tensor[(1, 12, 1), float64], Tensor[(3072), uint16], Tensor[(1152), uint64], Tensor[(480), float32], Tensor[(8, 5, 8), bool]) {
  @func_6080(%var_6082, %var_6083, %var_6084) /* ty=(Tensor[(1, 12, 1), float64], Tensor[(3072), uint16], Tensor[(1152), uint64], Tensor[(480), float32], Tensor[(8, 5, 8), bool]) */
}

def @func_7475() -> (Tensor[(6, 4, 2), bool],) {
  %825 = fn () -> (Tensor[(6, 4, 2), bool],) {
    %823 = @func_4991() /* ty=(Tensor[(6, 4, 2), bool], Tensor[(6, 4, 2), bool], Tensor[(1, 12, 1), float64], Tensor[(12), float64]) */;
    %824 = %823.1;
    (%824,)
  };
  %825() /* ty=(Tensor[(6, 4, 2), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen281/build/output.py", line 1829, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

