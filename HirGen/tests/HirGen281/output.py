import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_180 = relay.var("var_180", dtype = "float64", shape = (1, 12, 1))#candidate|180|(1, 12, 1)|var|float64
uop_181 = relay.exp(var_180.astype('float64')) # shape=(1, 12, 1)
uop_185 = relay.sinh(uop_181.astype('float64')) # shape=(1, 12, 1)
output = uop_185
output2 = uop_185
func_197 = relay.Function([var_180,], output)
mod['func_197'] = func_197
mod = relay.transform.InferType()(mod)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
var_198 = relay.var("var_198", dtype = "float64", shape = (1, 12, 1))#candidate|198|(1, 12, 1)|var|float64
func_197_call = mutated_mod.get_global_var('func_197')
call_199 = func_197_call(var_198)
output = call_199
func_200 = relay.Function([var_198], output)
mutated_mod['func_200'] = func_200
mutated_mod = relay.transform.InferType()(mutated_mod)
var_969 = relay.var("var_969", dtype = "float32", shape = (11, 14, 2))#candidate|969|(11, 14, 2)|var|float32
uop_970 = relay.erf(var_969.astype('float32')) # shape=(11, 14, 2)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
var_980 = relay.var("var_980", dtype = "float64", shape = (12,))#candidate|980|(12,)|var|float64
call_979 = func_197_call(relay.reshape(var_980.astype('float64'), [1, 12, 1]))
call_981 = func_197_call(relay.reshape(var_980.astype('float64'), [1, 12, 1]))
var_982 = relay.var("var_982", dtype = "float32", shape = (11, 14, 2))#candidate|982|(11, 14, 2)|var|float32
bop_983 = relay.floor_divide(uop_970.astype('float32'), relay.reshape(var_982.astype('float32'), relay.shape_of(uop_970))) # shape=(11, 14, 2)
uop_1003 = relay.log10(call_979.astype('float32')) # shape=(1, 12, 1)
uop_1005 = relay.log10(call_981.astype('float32')) # shape=(1, 12, 1)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
call_1011 = func_197_call(relay.reshape(uop_1003.astype('float64'), [1, 12, 1]))
call_1012 = func_197_call(relay.reshape(uop_1003.astype('float64'), [1, 12, 1]))
var_1029 = relay.var("var_1029", dtype = "float32", shape = (14, 12, 1))#candidate|1029|(14, 12, 1)|var|float32
bop_1030 = relay.less_equal(uop_1003.astype('bool'), var_1029.astype('bool')) # shape=(14, 12, 1)
bop_1033 = relay.less_equal(uop_1005.astype('bool'), var_1029.astype('bool')) # shape=(14, 12, 1)
output = relay.Tuple([var_980,bop_983,call_1011,bop_1030,])
output2 = relay.Tuple([var_980,bop_983,call_1012,bop_1033,])
func_1038 = relay.Function([var_969,var_980,var_982,var_1029,], output)
mod['func_1038'] = func_1038
mod = relay.transform.InferType()(mod)
mutated_mod['func_1038'] = func_1038
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1038_call = mutated_mod.get_global_var('func_1038')
var_1040 = relay.var("var_1040", dtype = "float32", shape = (11, 14, 2))#candidate|1040|(11, 14, 2)|var|float32
var_1041 = relay.var("var_1041", dtype = "float64", shape = (12,))#candidate|1041|(12,)|var|float64
var_1042 = relay.var("var_1042", dtype = "float32", shape = (11, 14, 2))#candidate|1042|(11, 14, 2)|var|float32
var_1043 = relay.var("var_1043", dtype = "float32", shape = (14, 12, 1))#candidate|1043|(14, 12, 1)|var|float32
call_1039 = func_1038_call(var_1040,var_1041,var_1042,var_1043,)
output = call_1039
func_1044 = relay.Function([var_1040,var_1041,var_1042,var_1043,], output)
mutated_mod['func_1044'] = func_1044
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1148 = relay.const([[[True,True],[True,True],[True,True],[True,False],[True,False],[True,True],[False,False],[True,True],[True,True],[True,True],[False,True],[False,True],[False,True],[False,False],[False,True],[True,True]],[[False,False],[True,True],[True,False],[True,False],[False,False],[True,True],[False,True],[False,True],[False,True],[False,False],[True,True],[True,True],[False,True],[False,True],[False,True],[False,False]],[[True,True],[True,False],[True,False],[True,False],[False,False],[True,False],[True,True],[True,True],[False,True],[True,True],[False,False],[True,True],[True,True],[False,True],[False,False],[True,True]],[[False,False],[True,True],[False,False],[True,False],[True,False],[False,False],[True,True],[False,False],[True,True],[True,True],[False,False],[False,True],[True,False],[True,True],[True,False],[False,True]],[[True,False],[False,True],[False,False],[False,True],[False,False],[False,False],[False,False],[False,True],[True,True],[False,True],[False,True],[True,True],[True,False],[True,False],[False,True],[True,True]]], dtype = "bool")#candidate|1148|(5, 16, 2)|const|bool
var_1149 = relay.var("var_1149", dtype = "bool", shape = (5, 16, 2))#candidate|1149|(5, 16, 2)|var|bool
bop_1150 = relay.logical_and(const_1148.astype('bool'), relay.reshape(var_1149.astype('bool'), relay.shape_of(const_1148))) # shape=(5, 16, 2)
output = bop_1150
output2 = bop_1150
func_1154 = relay.Function([var_1149,], output)
mod['func_1154'] = func_1154
mod = relay.transform.InferType()(mod)
var_1155 = relay.var("var_1155", dtype = "bool", shape = (5, 16, 2))#candidate|1155|(5, 16, 2)|var|bool
output = func_1154(var_1155)
func_1156 = relay.Function([var_1155], output)
mutated_mod['func_1156'] = func_1156
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1204 = relay.var("var_1204", dtype = "uint64", shape = ())#candidate|1204|()|var|uint64
var_1205 = relay.var("var_1205", dtype = "uint64", shape = (8, 16, 9))#candidate|1205|(8, 16, 9)|var|uint64
bop_1206 = relay.maximum(var_1204.astype('uint64'), var_1205.astype('uint64')) # shape=(8, 16, 9)
output = relay.Tuple([bop_1206,])
output2 = relay.Tuple([bop_1206,])
func_1209 = relay.Function([var_1204,var_1205,], output)
mod['func_1209'] = func_1209
mod = relay.transform.InferType()(mod)
var_1210 = relay.var("var_1210", dtype = "uint64", shape = ())#candidate|1210|()|var|uint64
var_1211 = relay.var("var_1211", dtype = "uint64", shape = (8, 16, 9))#candidate|1211|(8, 16, 9)|var|uint64
output = func_1209(var_1210,var_1211,)
func_1212 = relay.Function([var_1210,var_1211,], output)
mutated_mod['func_1212'] = func_1212
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1365 = relay.var("var_1365", dtype = "bool", shape = (15, 4, 3))#candidate|1365|(15, 4, 3)|var|bool
var_1366 = relay.var("var_1366", dtype = "bool", shape = (15, 4, 3))#candidate|1366|(15, 4, 3)|var|bool
bop_1367 = relay.logical_and(var_1365.astype('bool'), relay.reshape(var_1366.astype('bool'), relay.shape_of(var_1365))) # shape=(15, 4, 3)
bop_1371 = relay.equal(bop_1367.astype('bool'), relay.reshape(var_1365.astype('bool'), relay.shape_of(bop_1367))) # shape=(15, 4, 3)
output = bop_1371
output2 = bop_1371
func_1378 = relay.Function([var_1365,var_1366,], output)
mod['func_1378'] = func_1378
mod = relay.transform.InferType()(mod)
mutated_mod['func_1378'] = func_1378
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1378_call = mutated_mod.get_global_var('func_1378')
var_1380 = relay.var("var_1380", dtype = "bool", shape = (15, 4, 3))#candidate|1380|(15, 4, 3)|var|bool
var_1381 = relay.var("var_1381", dtype = "bool", shape = (15, 4, 3))#candidate|1381|(15, 4, 3)|var|bool
call_1379 = func_1378_call(var_1380,var_1381,)
output = call_1379
func_1382 = relay.Function([var_1380,var_1381,], output)
mutated_mod['func_1382'] = func_1382
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1488 = relay.const(0.349317, dtype = "float32")#candidate|1488|()|const|float32
var_1489 = relay.var("var_1489", dtype = "float32", shape = (5, 12, 8))#candidate|1489|(5, 12, 8)|var|float32
bop_1490 = relay.mod(const_1488.astype('float32'), var_1489.astype('float32')) # shape=(5, 12, 8)
uop_1509 = relay.erf(bop_1490.astype('float64')) # shape=(5, 12, 8)
output = relay.Tuple([uop_1509,])
output2 = relay.Tuple([uop_1509,])
func_1516 = relay.Function([var_1489,], output)
mod['func_1516'] = func_1516
mod = relay.transform.InferType()(mod)
var_1517 = relay.var("var_1517", dtype = "float32", shape = (5, 12, 8))#candidate|1517|(5, 12, 8)|var|float32
output = func_1516(var_1517)
func_1518 = relay.Function([var_1517], output)
mutated_mod['func_1518'] = func_1518
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1525 = relay.var("var_1525", dtype = "float64", shape = (15, 3, 2))#candidate|1525|(15, 3, 2)|var|float64
uop_1526 = relay.cosh(var_1525.astype('float64')) # shape=(15, 3, 2)
output = uop_1526
output2 = uop_1526
func_1534 = relay.Function([var_1525,], output)
mod['func_1534'] = func_1534
mod = relay.transform.InferType()(mod)
mutated_mod['func_1534'] = func_1534
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1535 = relay.var("var_1535", dtype = "float64", shape = (15, 3, 2))#candidate|1535|(15, 3, 2)|var|float64
func_1534_call = mutated_mod.get_global_var('func_1534')
call_1536 = func_1534_call(var_1535)
output = call_1536
func_1537 = relay.Function([var_1535], output)
mutated_mod['func_1537'] = func_1537
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1556 = relay.var("var_1556", dtype = "int8", shape = (7, 16, 10))#candidate|1556|(7, 16, 10)|var|int8
const_1557 = relay.const([[[-4,3,9,-1,-7,-9,-9,7,-5,-3],[-7,-3,-10,4,-5,10,-3,-7,1,3],[5,4,-2,2,-7,-10,-5,7,-4,-3],[-3,-10,-6,-9,5,4,-7,3,-1,-7],[-2,-5,1,-2,2,-8,8,3,5,10],[-7,-1,3,2,-9,-4,-7,7,10,5],[-3,-9,10,-5,-6,-6,-9,5,-3,8],[9,4,-1,-6,-8,-3,5,-4,-3,-2],[3,-2,-9,8,8,-3,-8,-3,-7,7],[3,8,3,-4,10,7,-6,-8,8,6],[-2,10,-7,6,-5,7,5,5,7,6],[5,-1,-2,7,-4,3,1,5,-10,2],[-6,-1,-6,10,-6,-9,10,4,-10,2],[-4,-8,-10,-5,-4,4,-7,2,3,-7],[10,2,7,-2,8,8,8,-9,1,-7],[-2,-6,5,-4,-1,9,-6,-1,-8,-7]],[[8,-8,-5,3,4,10,10,-7,-3,-5],[-10,6,-5,1,2,10,5,-6,-7,-6],[-8,7,2,7,4,10,6,4,-6,7],[-2,10,4,-8,5,-4,-10,-5,6,8],[3,6,5,-3,2,1,-6,1,-6,-3],[-3,-6,-9,-3,-10,-6,8,-2,-3,-6],[-2,1,7,-8,-1,6,9,6,10,4],[2,-4,-2,-5,-1,2,-9,1,-2,-1],[-3,8,-8,1,-6,1,-5,-8,9,-3],[-4,6,-7,1,8,-6,-8,5,1,-5],[3,4,-1,6,-6,2,8,-5,-5,-6],[-8,-3,7,4,4,-2,7,4,8,10],[2,6,-8,-5,-7,5,1,4,8,3],[-1,-8,3,-6,5,-7,-8,7,3,-8],[-10,6,2,9,-9,-1,-9,9,-2,-7],[1,-2,-6,-6,10,1,-8,3,-6,10]],[[-7,6,-10,10,-9,9,-10,10,1,-6],[9,-2,4,-9,-10,-8,1,-4,6,-5],[2,7,-4,-7,3,7,-3,-1,6,9],[-8,-6,-10,2,-6,-3,10,8,4,-10],[-1,9,7,10,9,-1,6,-7,-8,2],[-5,-10,-4,-10,8,-5,8,2,5,9],[1,2,7,-6,10,9,-5,-2,-1,-7],[-6,-7,-8,10,-3,9,8,3,-3,-2],[-7,10,-4,-10,9,-6,-4,7,-2,-7],[-5,8,8,-1,-10,-5,8,10,-10,-8],[2,1,-7,-7,-5,-3,-1,-6,-4,-1],[1,-3,1,-2,-8,9,-6,-5,1,1],[6,-8,5,-7,10,5,-4,-2,-4,8],[-9,-3,7,6,-9,6,1,2,8,6],[7,-1,10,8,10,-7,2,1,-7,1],[-6,-9,9,-4,1,4,3,-9,-9,-8]],[[-2,9,6,-7,-9,-9,3,5,-1,8],[-10,8,-6,-6,-1,-5,9,8,5,6],[-2,-10,-5,7,-3,6,5,-7,-10,-7],[5,-7,-7,-10,8,8,-1,5,3,-1],[-4,2,-2,2,1,-4,-5,-1,-6,7],[-6,-4,-3,-4,10,7,-2,-5,7,6],[-9,4,-3,-6,-7,5,-10,-4,-9,-3],[6,4,8,-4,-9,3,-5,1,6,-7],[2,8,-10,-7,1,-9,-8,6,-4,-3],[1,8,4,5,7,-5,-5,-1,3,5],[5,-10,-7,-1,7,2,9,-5,9,5],[2,-5,2,2,-3,9,1,5,8,-10],[7,4,-4,-2,-10,1,6,-1,-3,4],[-1,5,4,3,5,8,5,-9,4,-4],[-10,-8,-8,-5,-1,-8,-3,8,3,9],[3,2,-1,9,-4,-10,5,-1,7,5]],[[-6,-2,-7,6,2,-10,3,4,-4,-9],[-7,3,7,6,-1,-1,7,-5,4,6],[7,2,7,5,-1,2,-3,10,8,-3],[-1,5,10,2,-9,1,-4,5,-8,-5],[-5,7,-3,-10,-4,-1,7,-5,-5,-2],[-5,10,3,1,6,-10,-4,-10,3,7],[3,4,-3,9,-6,-2,-6,-10,-8,2],[-8,6,7,-8,-6,-10,4,-2,-5,-3],[-4,3,7,-8,-6,-10,3,8,-4,2],[3,10,8,-2,-3,-3,2,-8,9,4],[6,-2,2,1,-6,5,-7,-5,-8,-7],[4,9,-7,-4,3,-4,4,10,-3,1],[3,9,2,4,-2,1,10,9,7,4],[1,-10,3,10,-2,5,6,5,7,8],[-10,-5,-10,-8,10,-8,-9,8,2,-7],[-9,-10,-6,5,-6,-5,3,-7,-6,2]],[[6,-9,-10,-6,-4,-7,-5,2,-3,9],[1,6,-3,10,9,-7,4,9,-2,-8],[-9,-3,-1,-8,-1,4,8,-9,2,-2],[1,-5,5,1,-2,-6,-4,-5,-4,-9],[-9,-9,4,10,7,-8,-3,-3,10,10],[3,-3,4,3,-1,5,7,9,-1,-9],[2,7,10,-8,8,-2,-3,-7,3,7],[2,3,5,3,10,-4,-9,2,5,-10],[7,3,7,10,-9,3,8,-5,8,9],[-7,-4,8,-6,7,5,9,5,7,7],[4,-1,6,5,1,-5,1,-7,-5,-9],[10,-6,1,9,9,-5,-4,5,-2,7],[6,-4,-9,-5,3,-7,-9,3,6,-9],[-6,10,-3,-3,5,8,9,-10,2,-5],[1,-7,-6,-10,2,1,-6,-9,6,-3],[1,-4,-5,1,2,-10,9,-3,8,1]],[[-3,-10,-3,-9,3,10,7,-6,-10,8],[4,-7,7,-10,-3,7,-5,-8,-7,7],[-9,6,3,-8,1,-7,8,-8,5,-2],[-10,6,-7,4,-1,6,10,-8,3,5],[4,9,-7,-6,6,1,-6,-1,-3,-7],[-8,6,4,-10,-2,3,7,7,-8,6],[-3,-9,-6,-4,-7,-5,5,-4,7,-7],[9,6,-3,-9,8,-4,4,9,-6,-9],[5,10,5,-8,8,-1,7,-2,-10,1],[8,-8,1,-2,-2,9,-3,9,5,-10],[5,9,-9,-4,3,9,-3,6,6,-10],[-7,10,-10,-9,6,-7,3,5,-10,-2],[-6,-6,8,4,8,-6,5,-6,-3,-9],[6,-10,-3,-2,-3,5,5,-8,-3,-9],[-8,-5,-9,7,8,10,1,5,-2,4],[1,-5,-1,1,7,5,5,8,5,-7]]], dtype = "int8")#candidate|1557|(7, 16, 10)|const|int8
bop_1558 = relay.bitwise_and(var_1556.astype('int8'), relay.reshape(const_1557.astype('int8'), relay.shape_of(var_1556))) # shape=(7, 16, 10)
output = relay.Tuple([bop_1558,])
output2 = relay.Tuple([bop_1558,])
func_1562 = relay.Function([var_1556,], output)
mod['func_1562'] = func_1562
mod = relay.transform.InferType()(mod)
var_1563 = relay.var("var_1563", dtype = "int8", shape = (7, 16, 10))#candidate|1563|(7, 16, 10)|var|int8
output = func_1562(var_1563)
func_1564 = relay.Function([var_1563], output)
mutated_mod['func_1564'] = func_1564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1619 = relay.var("var_1619", dtype = "float32", shape = (1, 16, 15))#candidate|1619|(1, 16, 15)|var|float32
var_1620 = relay.var("var_1620", dtype = "float32", shape = (15, 16, 15))#candidate|1620|(15, 16, 15)|var|float32
bop_1621 = relay.divide(var_1619.astype('float32'), var_1620.astype('float32')) # shape=(15, 16, 15)
func_1534_call = mod.get_global_var('func_1534')
func_1537_call = mutated_mod.get_global_var('func_1537')
const_1628 = relay.const([[0.974617,1.958359,-3.532418,-4.871570,-5.210681,6.434488,4.545493,-0.774031,-5.877801,-8.871124,-5.520809,9.764565,8.153159,-9.096362,0.604159,-2.205234,-7.553952,6.031598,7.951140,-7.980903,-3.556526,2.919984,-2.172019,-2.201459,-0.216479,9.843569,7.387890,-1.074153,8.852702,-9.522588,-9.779789,8.998346,-7.123824,-6.010302,0.047285,4.217665,-9.386578,1.174885,-0.764795,-5.387721,-3.724193,7.242522,-8.330046,2.717850,7.455423,-0.868797,-0.610673,-3.816105,2.931520,4.822100,-9.848065,-3.788092,5.955899,4.893873,7.716128,-0.935720,3.516745,9.037720,0.679976,-0.811289,-4.855762,9.378764,-1.297187,6.969411,-5.298006,-7.083498,8.401281,0.959066,6.869316,-2.029788,-3.972568,-6.660979,7.019168,4.218229,-6.303959,5.856500,5.195111,-6.442946,-5.894490,7.362516,-5.713925,3.990325,-2.815508,-5.197023,9.229647,-3.546142,3.092213,-3.587302,-5.737362,0.443660]], dtype = "float64")#candidate|1628|(1, 90)|const|float64
call_1627 = func_1534_call(relay.reshape(const_1628.astype('float64'), [15, 3, 2]))
call_1629 = func_1534_call(relay.reshape(const_1628.astype('float64'), [15, 3, 2]))
func_1562_call = mod.get_global_var('func_1562')
func_1564_call = mutated_mod.get_global_var('func_1564')
var_1647 = relay.var("var_1647", dtype = "int8", shape = (1120,))#candidate|1647|(1120,)|var|int8
call_1646 = relay.TupleGetItem(func_1562_call(relay.reshape(var_1647.astype('int8'), [7, 16, 10])), 0)
call_1648 = relay.TupleGetItem(func_1564_call(relay.reshape(var_1647.astype('int8'), [7, 16, 10])), 0)
bop_1657 = relay.logical_or(var_1647.astype('bool'), relay.reshape(call_1646.astype('bool'), relay.shape_of(var_1647))) # shape=(1120,)
bop_1660 = relay.logical_or(var_1647.astype('bool'), relay.reshape(call_1648.astype('bool'), relay.shape_of(var_1647))) # shape=(1120,)
bop_1661 = relay.power(var_1619.astype('float32'), bop_1621.astype('float32')) # shape=(15, 16, 15)
func_1516_call = mod.get_global_var('func_1516')
func_1518_call = mutated_mod.get_global_var('func_1518')
var_1670 = relay.var("var_1670", dtype = "float32", shape = (480,))#candidate|1670|(480,)|var|float32
call_1669 = relay.TupleGetItem(func_1516_call(relay.reshape(var_1670.astype('float32'), [5, 12, 8])), 0)
call_1671 = relay.TupleGetItem(func_1518_call(relay.reshape(var_1670.astype('float32'), [5, 12, 8])), 0)
output = relay.Tuple([call_1627,const_1628,bop_1657,bop_1661,call_1669,var_1670,])
output2 = relay.Tuple([call_1629,const_1628,bop_1660,bop_1661,call_1671,var_1670,])
func_1680 = relay.Function([var_1619,var_1620,var_1647,var_1670,], output)
mod['func_1680'] = func_1680
mod = relay.transform.InferType()(mod)
mutated_mod['func_1680'] = func_1680
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1680_call = mutated_mod.get_global_var('func_1680')
var_1682 = relay.var("var_1682", dtype = "float32", shape = (1, 16, 15))#candidate|1682|(1, 16, 15)|var|float32
var_1683 = relay.var("var_1683", dtype = "float32", shape = (15, 16, 15))#candidate|1683|(15, 16, 15)|var|float32
var_1684 = relay.var("var_1684", dtype = "int8", shape = (1120,))#candidate|1684|(1120,)|var|int8
var_1685 = relay.var("var_1685", dtype = "float32", shape = (480,))#candidate|1685|(480,)|var|float32
call_1681 = func_1680_call(var_1682,var_1683,var_1684,var_1685,)
output = call_1681
func_1686 = relay.Function([var_1682,var_1683,var_1684,var_1685,], output)
mutated_mod['func_1686'] = func_1686
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1791 = relay.var("var_1791", dtype = "uint64", shape = ())#candidate|1791|()|var|uint64
var_1792 = relay.var("var_1792", dtype = "uint64", shape = (12, 14, 7))#candidate|1792|(12, 14, 7)|var|uint64
bop_1793 = relay.bitwise_and(var_1791.astype('uint64'), var_1792.astype('uint64')) # shape=(12, 14, 7)
output = relay.Tuple([bop_1793,])
output2 = relay.Tuple([bop_1793,])
func_1799 = relay.Function([var_1791,var_1792,], output)
mod['func_1799'] = func_1799
mod = relay.transform.InferType()(mod)
mutated_mod['func_1799'] = func_1799
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1799_call = mutated_mod.get_global_var('func_1799')
var_1801 = relay.var("var_1801", dtype = "uint64", shape = ())#candidate|1801|()|var|uint64
var_1802 = relay.var("var_1802", dtype = "uint64", shape = (12, 14, 7))#candidate|1802|(12, 14, 7)|var|uint64
call_1800 = func_1799_call(var_1801,var_1802,)
output = call_1800
func_1803 = relay.Function([var_1801,var_1802,], output)
mutated_mod['func_1803'] = func_1803
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1924 = relay.const([[[5.068714,2.564977,-7.520050,-7.527669,9.382788,-8.617257,-8.332444,-6.197971,3.601537,9.503128,-4.322429,2.900655,5.947149,-5.129585],[-1.108119,-6.986469,8.326106,-3.551954,7.900394,-0.671027,1.698347,-1.707237,2.376417,-7.793745,4.997323,-3.555920,1.779340,-2.420027],[1.995246,1.363319,5.257741,9.924252,8.546592,-9.504259,-1.741387,1.801593,3.145350,7.213795,4.491723,-1.437158,-5.440063,-8.946923],[-3.387263,-3.640337,8.746791,4.414607,-7.181091,5.439668,1.582829,-4.747282,-6.271059,5.039032,-4.425695,8.559128,-9.979618,-4.305390],[-1.693667,-0.713542,7.001248,0.209594,-3.241460,6.909889,7.165827,-4.004854,9.451705,4.315764,6.155941,7.754844,9.169721,6.355119],[-3.028459,-0.482498,-6.586248,-1.002056,-3.035261,-7.729678,-9.731790,8.791197,5.316462,-4.763182,-6.401883,-5.470094,-7.870668,0.575511],[-6.299809,2.657444,-4.244809,-0.353512,3.522163,6.894769,-9.822859,-0.160305,9.713655,-7.526253,-7.254551,9.993479,-5.971118,-8.731785],[-7.450257,0.308113,-2.193354,8.758546,-5.157911,8.891682,-8.528439,9.660939,-7.565826,-2.781862,0.511780,-3.281188,5.980500,0.122717]],[[-0.850803,2.884155,3.379247,4.920610,4.628093,6.899117,-8.855089,9.158353,5.431926,3.702654,5.690987,5.113528,1.876409,-4.926382],[-1.362691,-1.431187,8.439804,7.814282,-9.939457,-6.687656,0.449863,-7.946609,-4.695190,2.055545,-2.551815,0.121182,-1.533105,9.043595],[0.825134,-1.995372,3.367620,-2.122066,-9.205430,6.846974,-4.279873,9.510660,6.966299,-4.927187,5.980269,1.471554,-5.609920,7.870844],[-0.386652,-0.972209,-2.419976,1.817890,-5.364001,-7.872991,2.466737,3.179699,1.211064,0.062044,-0.798227,-0.647109,3.100683,-1.542378],[4.820739,-3.589304,-4.714243,1.505057,-5.885187,-3.486114,-3.475453,5.333136,-2.547579,9.725730,5.668077,1.551583,-8.418225,-4.604425],[1.749326,-2.685055,-7.526204,-8.495301,2.310180,-5.557116,-0.812431,-0.125375,5.098141,-2.530033,4.486735,-2.990369,2.762124,-7.782375],[1.940192,5.738829,0.159414,6.524350,9.455675,-0.432630,5.404054,-8.488754,1.963520,-1.260406,-2.933259,8.167599,4.986601,4.214138],[7.481548,-1.713226,-5.292152,2.078714,1.082995,5.094115,5.611087,-0.135308,-7.088672,-6.834938,0.390331,3.114309,-9.523658,7.369081]],[[-7.880043,-4.579215,4.581557,-5.335324,-4.351598,3.920403,4.514690,-1.699093,2.289641,1.326530,3.770560,0.675482,3.035536,6.839293],[1.255429,6.181556,8.779831,8.191847,-6.088287,-8.509229,-2.852192,0.053642,-1.820879,-9.656490,-1.581916,-2.622429,1.156006,-8.507183],[-8.556582,-6.943905,5.858590,5.857167,5.564948,4.651088,-1.799764,2.114047,9.530372,-8.497596,-8.933643,1.422767,9.284444,7.475805],[-6.285169,2.309508,0.417143,-1.679558,2.789931,8.865344,1.720972,-8.821857,-3.362165,-2.295939,-7.203261,1.950526,2.750973,1.155746],[-2.008762,6.484376,3.867395,4.958911,0.981441,4.251497,9.584242,9.726118,6.915710,6.988259,3.531717,3.556833,-2.340424,6.102052],[-1.032984,-1.612342,0.685671,0.146506,-8.625807,2.408520,-7.114840,-8.120776,1.067698,-5.396237,-5.339125,-1.031122,0.431633,4.209738],[-6.164765,5.575793,-5.664758,-8.259940,-6.640717,-4.520731,-1.352343,-4.040148,-0.005711,3.364658,-7.303278,-6.778540,7.499206,2.479358],[-2.041810,-2.664976,5.543358,2.377482,-6.482693,4.458610,2.457075,1.973643,5.093269,4.832862,5.170229,1.468632,-0.028088,-1.093700]],[[-9.008495,9.232221,-6.728070,5.344572,6.493547,7.228915,-2.695127,-7.774641,-0.799892,-5.141393,4.572325,1.604494,-6.677516,1.126748],[-8.033826,-5.070648,7.752948,-0.026739,1.105283,0.045947,-2.902306,-2.823730,9.905161,3.755445,9.209370,7.579645,3.821935,4.308240],[4.501492,-5.363309,-7.144811,-6.223451,-4.806433,1.835979,-5.102914,9.528597,-1.399663,-0.599096,-2.832595,6.540719,4.202006,5.277543],[-7.177248,-4.084647,2.151856,8.655463,2.318182,4.190538,-5.383178,0.444106,2.989772,-9.082816,5.862213,8.180776,-8.461156,7.370004],[5.738420,-7.908703,3.789248,6.110986,8.583281,-2.161522,-4.216297,1.098977,-4.794960,0.046592,1.379824,3.743943,-1.239209,-4.185286],[-0.141541,-5.585250,-3.150885,8.610586,5.150000,-4.145835,2.046670,6.441640,-9.423825,2.853771,-7.008156,-6.451210,-4.591913,-3.124355],[-4.673124,1.691044,-3.870152,-3.991299,-4.384734,-1.722067,-8.882373,-5.444075,0.461304,1.741181,-9.516809,-7.361688,-5.587785,-0.834874],[6.877201,5.054661,-2.836718,-3.482834,7.231165,7.501078,-1.602768,5.314261,8.283660,-9.140659,-3.287131,-0.151141,-9.461598,6.485363]],[[-2.694650,4.545748,-9.553940,3.612399,0.346603,1.283307,4.183505,-3.603502,-4.517395,-4.605843,-5.158445,-0.982937,5.898269,2.131767],[3.107000,-0.779919,0.307252,7.775112,-0.586285,-7.682071,-1.369504,-3.363887,-1.688390,5.317439,5.938710,-3.628456,3.143521,-6.249153],[-7.936471,-5.651635,-8.847756,2.395342,5.455877,3.424626,8.551845,4.441927,8.119730,2.948107,0.237746,-1.654200,7.545507,-0.142059],[7.353724,4.813514,-7.374251,4.103293,-5.315810,-4.039828,-8.946199,6.441136,9.239622,1.622813,2.848624,2.722782,-0.763049,7.683995],[-7.143378,-5.184204,-2.668893,7.858032,1.328817,9.133818,3.689832,7.677484,9.173620,-5.402515,-8.564148,2.021976,-2.616592,-7.519768],[-6.748516,-7.016971,4.690325,-5.837820,-9.070491,-6.524856,-5.490783,3.475340,-1.215149,0.636184,-8.657704,-1.056529,-6.833624,-1.479180],[-1.676118,5.618801,-8.113287,-0.454576,-4.918691,5.129278,-0.275813,-7.221543,1.628653,6.972270,2.131560,8.538439,-8.395696,-1.816547],[0.566868,4.719120,9.020100,-6.693172,8.025678,1.651252,6.405083,-7.019618,-0.339272,-2.795380,5.616817,8.999476,5.246010,-1.071923]],[[0.440329,-2.788924,2.331257,-9.879684,-0.835591,-7.671862,8.935535,9.804810,-3.200175,9.864183,-3.075147,-4.311453,7.676352,-4.134603],[-5.522609,-8.209845,9.830315,-2.346712,-2.993841,5.087622,9.776561,-9.349523,9.265909,4.223903,-1.985238,0.008982,-8.848894,-8.200919],[4.314986,-5.899719,8.544648,5.573850,7.330834,5.934170,5.667690,-9.145208,-7.513576,2.874739,-0.148818,5.843118,0.111044,-2.152224],[-7.504553,0.509217,8.120668,1.123384,-6.209945,-0.247491,-5.181977,-5.399592,-8.308182,-9.134260,3.227205,8.374182,-4.303300,-5.699227],[5.180343,7.503633,6.633254,0.195266,1.564078,3.279959,-4.150001,6.203026,7.704683,-5.712287,9.776817,-7.432167,-2.742039,-3.457792],[-8.641997,5.644916,9.936394,0.274222,2.650029,-6.703281,8.665415,6.524486,9.948096,-7.415615,-4.266083,-5.165573,1.212109,-5.050932],[-3.443769,-5.590259,-2.242283,-3.972797,0.314968,-0.217543,7.580363,7.477314,5.988356,-8.133106,5.669170,3.909831,6.976672,6.415380],[4.935487,-1.993349,7.335533,-0.790973,-3.994267,2.781198,4.356599,1.916959,-8.442275,5.785463,4.813253,-0.569192,4.332720,-1.739159]]], dtype = "float32")#candidate|1924|(6, 8, 14)|const|float32
uop_1925 = relay.atan(const_1924.astype('float32')) # shape=(6, 8, 14)
func_1378_call = mod.get_global_var('func_1378')
func_1382_call = mutated_mod.get_global_var('func_1382')
var_1930 = relay.var("var_1930", dtype = "bool", shape = (6, 30))#candidate|1930|(6, 30)|var|bool
call_1929 = func_1378_call(relay.reshape(var_1930.astype('bool'), [15, 4, 3]), relay.reshape(var_1930.astype('bool'), [15, 4, 3]), )
call_1931 = func_1378_call(relay.reshape(var_1930.astype('bool'), [15, 4, 3]), relay.reshape(var_1930.astype('bool'), [15, 4, 3]), )
output = relay.Tuple([uop_1925,call_1929,var_1930,])
output2 = relay.Tuple([uop_1925,call_1931,var_1930,])
func_1950 = relay.Function([var_1930,], output)
mod['func_1950'] = func_1950
mod = relay.transform.InferType()(mod)
mutated_mod['func_1950'] = func_1950
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1951 = relay.var("var_1951", dtype = "bool", shape = (6, 30))#candidate|1951|(6, 30)|var|bool
func_1950_call = mutated_mod.get_global_var('func_1950')
call_1952 = func_1950_call(var_1951)
output = call_1952
func_1953 = relay.Function([var_1951], output)
mutated_mod['func_1953'] = func_1953
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1969 = relay.var("var_1969", dtype = "int16", shape = (6, 10, 11))#candidate|1969|(6, 10, 11)|var|int16
const_1970 = relay.const([[[6,-2,6,-2,5,1,2,-8,1,-4,8],[7,-8,2,8,3,-1,-2,-6,-4,-4,6],[10,-10,-7,-6,-4,4,-9,-6,-10,2,-6],[6,9,-3,-7,-8,-5,10,1,-7,-8,-7],[-7,5,-1,-7,-1,1,5,2,-4,-10,9],[1,7,-6,-8,3,7,-1,5,7,4,-6],[1,2,-10,-4,-4,2,-10,-8,3,-2,-9],[9,4,8,4,-7,-5,10,-3,8,-7,3],[-1,8,2,4,-4,3,-1,-5,8,9,3],[1,-4,-7,9,2,9,-6,9,-2,5,2]],[[10,-10,-9,2,-10,2,-1,-9,-7,10,9],[10,-8,-1,-10,8,2,8,8,-5,-4,4],[-4,-6,2,-10,4,10,-2,4,6,2,1],[-9,-10,9,1,-9,-6,9,-3,-10,-9,-8],[1,-3,-3,5,4,4,8,10,-7,-6,6],[-1,-4,-7,-9,-6,-6,-7,5,-4,6,5],[-1,3,5,-1,3,-3,2,2,6,4,-8],[-2,5,-3,4,-4,4,5,7,2,7,-8],[7,2,7,-5,7,9,-5,-2,2,-8,-3],[8,8,-9,7,-5,5,-8,-5,1,-2,3]],[[-5,-10,1,5,-10,4,-5,4,8,6,9],[8,-9,-6,-1,10,-6,-5,8,-2,5,6],[-9,-1,10,-2,1,2,1,3,-9,-8,-5],[5,-2,-4,5,6,2,10,-5,2,-2,-10],[-4,-5,-7,-9,5,-8,3,6,3,1,-1],[7,3,4,4,8,-6,-3,5,5,-10,-7],[-4,10,-6,3,1,-3,-9,-10,2,3,3],[1,1,-8,-1,-3,-9,-4,-3,-2,7,1],[-2,-9,10,-2,-1,1,-9,5,5,6,-3],[8,-5,2,-6,8,-3,2,-10,-6,-7,6]],[[-5,7,9,3,2,-9,2,1,-4,7,7],[-1,-4,-9,-4,-9,6,-9,9,-8,-3,-2],[-10,-4,1,2,-1,-6,-9,-9,9,-10,-6],[-1,-8,8,10,8,-2,-4,6,-2,8,3],[2,-8,2,8,-6,-4,2,8,3,-1,10],[9,-3,2,-10,1,-1,-5,-9,-10,5,-3],[-8,-8,9,-8,-5,7,-10,9,6,-4,-9],[9,-5,4,2,7,-10,-1,-2,-10,-7,-5],[5,-7,-6,-9,1,4,8,-3,7,2,-5],[-8,3,-6,-4,7,6,4,6,-8,3,2]],[[4,-2,7,10,-7,9,-6,-10,5,-2,1],[5,-9,-4,-7,-4,2,-1,9,9,10,6],[2,-8,1,-1,6,-10,9,9,-8,6,-8],[9,8,1,-7,-6,3,7,6,8,4,-8],[2,8,2,-2,-2,-6,-8,-2,6,-3,2],[4,-9,-1,-10,5,-8,-2,8,-9,-4,5],[-1,-6,-5,-5,2,-4,-2,2,-5,6,10],[4,-1,-10,-9,8,10,-7,4,1,-3,-6],[3,9,-3,-1,-2,-2,-9,9,-7,-8,-2],[3,8,3,-10,-8,-5,1,1,-4,7,7]],[[8,4,2,2,6,9,9,5,1,4,-10],[5,-7,6,4,-9,-9,8,2,7,-5,-2],[-8,-6,10,-4,-5,4,9,5,1,-4,7],[-4,-1,-9,-7,3,-7,6,-10,-10,1,-6],[-3,-4,3,7,-9,10,-1,-8,-9,-8,1],[8,4,6,-1,8,3,10,-1,7,7,-1],[6,1,-2,4,2,-7,-9,4,7,-3,5],[8,10,5,3,-10,-5,6,9,-3,1,7],[-2,9,-4,-2,8,4,-5,7,-3,9,-9],[9,5,9,1,6,-7,-5,-9,-10,4,7]]], dtype = "int16")#candidate|1970|(6, 10, 11)|const|int16
bop_1971 = relay.less_equal(var_1969.astype('bool'), relay.reshape(const_1970.astype('bool'), relay.shape_of(var_1969))) # shape=(6, 10, 11)
bop_1976 = relay.bitwise_xor(const_1970.astype('int64'), relay.reshape(var_1969.astype('int64'), relay.shape_of(const_1970))) # shape=(6, 10, 11)
output = relay.Tuple([bop_1971,bop_1976,])
output2 = relay.Tuple([bop_1971,bop_1976,])
func_1992 = relay.Function([var_1969,], output)
mod['func_1992'] = func_1992
mod = relay.transform.InferType()(mod)
mutated_mod['func_1992'] = func_1992
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1993 = relay.var("var_1993", dtype = "int16", shape = (6, 10, 11))#candidate|1993|(6, 10, 11)|var|int16
func_1992_call = mutated_mod.get_global_var('func_1992')
call_1994 = func_1992_call(var_1993)
output = call_1994
func_1995 = relay.Function([var_1993], output)
mutated_mod['func_1995'] = func_1995
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2231 = relay.const([[[-6],[-10],[-9],[9],[-9],[-8],[9],[-4]],[[3],[-10],[-2],[-9],[9],[-7],[-4],[6]],[[9],[6],[-4],[-7],[2],[-8],[9],[2]],[[9],[-9],[1],[5],[-3],[-4],[7],[8]],[[-6],[5],[1],[-5],[-9],[-8],[4],[-2]],[[-1],[3],[-10],[-1],[-3],[9],[5],[-7]],[[2],[-2],[-5],[-8],[7],[-5],[-5],[3]],[[-10],[8],[-7],[3],[4],[-9],[9],[-9]],[[-9],[6],[6],[-8],[-9],[6],[-2],[1]],[[-9],[9],[8],[3],[4],[-2],[-9],[6]],[[1],[-2],[5],[4],[5],[-9],[2],[6]],[[-9],[-5],[-9],[-10],[4],[7],[-2],[-3]]], dtype = "int8")#candidate|2231|(12, 8, 1)|const|int8
var_2232 = relay.var("var_2232", dtype = "int8", shape = (12, 8, 6))#candidate|2232|(12, 8, 6)|var|int8
bop_2233 = relay.bitwise_or(const_2231.astype('int8'), var_2232.astype('int8')) # shape=(12, 8, 6)
uop_2242 = relay.acosh(const_2231.astype('float32')) # shape=(12, 8, 1)
func_1680_call = mod.get_global_var('func_1680')
func_1686_call = mutated_mod.get_global_var('func_1686')
const_2253 = relay.const([7.771530,-1.265445,-4.697027,1.944140,-4.765809,-5.516564,-6.544985,9.942038,-1.525179,-7.773344,3.118684,-2.520603,-9.957499,-9.764922,-3.649365,3.430980,-2.999778,-4.228719,-8.035514,-9.917056,-6.321443,-9.297759,6.530155,3.971088,3.317247,2.892598,-9.079846,-2.771471,1.294169,-4.099919,9.243697,4.273628,2.353206,-7.017604,6.187483,-4.556828,4.104885,4.652522,7.950822,-3.754940,-1.407728,1.917442,-9.906091,3.669975,-3.165025,2.764487,-3.727753,-7.690818,-3.354619,9.385448,1.380109,7.622596,-0.040596,-5.264083,-2.816614,-9.819721,-4.403613,5.322654,9.449001,-7.588637,-3.281386,1.937779,-6.909360,-4.966500,0.313142,5.332389,0.331828,8.927722,2.862243,8.866665,4.817793,-4.533236,-7.614619,-4.149498,-9.847734,3.371085,-5.783623,9.265558,-6.073029,8.275940,2.083361,7.226599,7.543686,-6.588865,-0.395076,-3.051847,-9.552110,6.306743,-8.465771,-5.886739,-4.477687,3.676198,0.857201,8.894796,-2.195201,5.466813,9.560670,4.804581,1.851441,4.341637,4.370831,1.486546,-4.119960,-7.379518,-8.554381,-5.972139,3.582983,3.384881,-3.825410,-4.731955,8.359091,5.286301,-5.801501,-8.193822,-9.728634,1.572371,5.348403,3.889622,5.813773,2.183290,0.151438,-3.127809,4.662095,6.575479,4.028449,0.543057,1.248688,4.864932,1.500415,1.098803,-2.822015,2.373705,-8.830639,0.552237,4.003337,6.086006,-8.053490,9.724278,-3.907477,-8.389069,-3.171709,-0.109768,-3.169895,-4.141987,2.643761,7.155573,-6.361694,-7.816300,-7.859416,0.145682,-4.234363,-7.381883,-0.365139,-6.522706,-6.683858,-6.410866,-3.706554,-7.190840,2.620173,-5.234432,-7.788208,-1.677741,8.782101,2.231788,-3.719859,3.448215,-2.470858,-4.106946,1.193401,6.663196,2.806743,-1.109313,-7.280539,-2.808525,9.493246,9.244153,-1.017724,8.916189,-2.444234,5.309193,9.582154,9.934648,-7.718859,-5.932213,-8.344670,7.148579,-6.413854,-5.103753,-3.130728,-1.997944,1.469803,-7.208983,0.512578,1.911212,-8.009343,-1.431487,4.182505,1.032572,5.732110,0.705696,1.103331,4.364949,0.774402,0.972464,-4.809649,9.423917,5.802625,-2.337547,2.626135,-0.985378,-8.616415,7.216508,-6.916072,-4.162733,8.570650,6.186547,-2.302499,-8.587170,-7.474310,-5.324541,5.495061,3.409020,7.445067,6.352252,3.087290,-0.326098,-7.377633,-4.075441,6.698512,7.315222,-5.465387,1.732987,5.234166,-2.444661,5.887497,9.019413,9.306363,1.180790,-3.629368,8.928772], dtype = "float32")#candidate|2253|(240,)|const|float32
var_2254 = relay.var("var_2254", dtype = "float32", shape = (3600,))#candidate|2254|(3600,)|var|float32
var_2255 = relay.var("var_2255", dtype = "int8", shape = (1120,))#candidate|2255|(1120,)|var|int8
var_2256 = relay.var("var_2256", dtype = "float32", shape = (480,))#candidate|2256|(480,)|var|float32
call_2252 = relay.TupleGetItem(func_1680_call(relay.reshape(const_2253.astype('float32'), [1, 16, 15]), relay.reshape(var_2254.astype('float32'), [15, 16, 15]), relay.reshape(var_2255.astype('int8'), [1120,]), relay.reshape(var_2256.astype('float32'), [480,]), ), 4)
call_2257 = relay.TupleGetItem(func_1686_call(relay.reshape(const_2253.astype('float32'), [1, 16, 15]), relay.reshape(var_2254.astype('float32'), [15, 16, 15]), relay.reshape(var_2255.astype('int8'), [1120,]), relay.reshape(var_2256.astype('float32'), [480,]), ), 4)
uop_2260 = relay.cos(uop_2242.astype('float64')) # shape=(12, 8, 1)
func_1562_call = mod.get_global_var('func_1562')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_2271 = relay.TupleGetItem(func_1562_call(relay.reshape(var_2255.astype('int8'), [7, 16, 10])), 0)
call_2272 = relay.TupleGetItem(func_1564_call(relay.reshape(var_2255.astype('int8'), [7, 16, 10])), 0)
bop_2274 = relay.divide(uop_2260.astype('float64'), bop_2233.astype('float64')) # shape=(12, 8, 6)
bop_2289 = relay.maximum(bop_2274.astype('int8'), uop_2242.astype('int8')) # shape=(12, 8, 6)
output = relay.Tuple([call_2252,const_2253,var_2254,var_2255,var_2256,call_2271,bop_2289,])
output2 = relay.Tuple([call_2257,const_2253,var_2254,var_2255,var_2256,call_2272,bop_2289,])
func_2296 = relay.Function([var_2232,var_2254,var_2255,var_2256,], output)
mod['func_2296'] = func_2296
mod = relay.transform.InferType()(mod)
var_2297 = relay.var("var_2297", dtype = "int8", shape = (12, 8, 6))#candidate|2297|(12, 8, 6)|var|int8
var_2298 = relay.var("var_2298", dtype = "float32", shape = (3600,))#candidate|2298|(3600,)|var|float32
var_2299 = relay.var("var_2299", dtype = "int8", shape = (1120,))#candidate|2299|(1120,)|var|int8
var_2300 = relay.var("var_2300", dtype = "float32", shape = (480,))#candidate|2300|(480,)|var|float32
output = func_2296(var_2297,var_2298,var_2299,var_2300,)
func_2301 = relay.Function([var_2297,var_2298,var_2299,var_2300,], output)
mutated_mod['func_2301'] = func_2301
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2384 = relay.const([[[-6.089861],[9.045251],[2.928839],[-2.111492],[2.594637],[-5.072304],[-8.813754],[-3.746671],[-4.134955],[-1.837674],[-8.278930],[-1.007206],[7.912953],[-6.363707],[4.323672]],[[-3.968383],[-1.202160],[-0.556624],[-8.920780],[-4.848459],[-9.551906],[-5.605995],[0.389322],[-3.700625],[9.050521],[1.250767],[9.294035],[-7.044936],[2.310537],[-2.539284]]], dtype = "float64")#candidate|2384|(2, 15, 1)|const|float64
uop_2385 = relay.log10(const_2384.astype('float64')) # shape=(2, 15, 1)
func_1992_call = mod.get_global_var('func_1992')
func_1995_call = mutated_mod.get_global_var('func_1995')
var_2403 = relay.var("var_2403", dtype = "int16", shape = (5, 132))#candidate|2403|(5, 132)|var|int16
call_2402 = relay.TupleGetItem(func_1992_call(relay.reshape(var_2403.astype('int16'), [6, 10, 11])), 0)
call_2404 = relay.TupleGetItem(func_1995_call(relay.reshape(var_2403.astype('int16'), [6, 10, 11])), 0)
uop_2413 = relay.log10(call_2402.astype('float64')) # shape=(6, 10, 11)
uop_2415 = relay.log10(call_2404.astype('float64')) # shape=(6, 10, 11)
func_1534_call = mod.get_global_var('func_1534')
func_1537_call = mutated_mod.get_global_var('func_1537')
const_2420 = relay.const([-9.678167,5.598992,7.986155,6.447481,7.321377,-2.147189,9.431692,5.662797,9.282672,6.405717,-8.453188,4.252458,6.943054,9.402183,8.332437,4.704604,1.326561,-1.032427,6.643664,9.618803,4.972701,-2.158978,8.936828,1.679162,9.354299,-3.781983,9.750167,-4.431926,4.005089,9.878121,-7.269655,2.500312,-3.880857,-2.492937,8.507437,-8.837765,-6.791989,0.487547,-3.123737,-5.244132,-4.159608,-5.312204,-0.771857,-1.875384,-0.166709,-0.937946,9.424285,-9.596049,0.884746,7.255999,-4.478197,-4.958045,9.728260,-0.322225,-6.936972,6.342156,9.396688,-1.312087,2.144452,-0.078848,5.563283,-1.105418,-0.616918,-1.114815,-8.292059,-3.089441,0.924409,0.503112,-5.624402,-4.535812,-2.617567,9.823154,6.292890,4.771776,5.287556,3.914405,-5.624019,2.442750,-3.808547,-6.521971,3.145354,-9.065792,9.619128,0.331516,3.666947,4.467002,-2.097448,-8.410439,-0.231738,-8.113338], dtype = "float64")#candidate|2420|(90,)|const|float64
call_2419 = func_1534_call(relay.reshape(const_2420.astype('float64'), [15, 3, 2]))
call_2421 = func_1534_call(relay.reshape(const_2420.astype('float64'), [15, 3, 2]))
output = relay.Tuple([uop_2385,var_2403,uop_2413,call_2419,const_2420,])
output2 = relay.Tuple([uop_2385,var_2403,uop_2415,call_2421,const_2420,])
func_2428 = relay.Function([var_2403,], output)
mod['func_2428'] = func_2428
mod = relay.transform.InferType()(mod)
var_2429 = relay.var("var_2429", dtype = "int16", shape = (5, 132))#candidate|2429|(5, 132)|var|int16
output = func_2428(var_2429)
func_2430 = relay.Function([var_2429], output)
mutated_mod['func_2430'] = func_2430
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2432 = relay.const(-4.635020, dtype = "float64")#candidate|2432|()|const|float64
var_2433 = relay.var("var_2433", dtype = "float64", shape = (1, 12, 16))#candidate|2433|(1, 12, 16)|var|float64
bop_2434 = relay.mod(const_2432.astype('float64'), var_2433.astype('float64')) # shape=(1, 12, 16)
func_1378_call = mod.get_global_var('func_1378')
func_1382_call = mutated_mod.get_global_var('func_1382')
const_2438 = relay.const([False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True], dtype = "bool")#candidate|2438|(180,)|const|bool
call_2437 = func_1378_call(relay.reshape(const_2438.astype('bool'), [15, 4, 3]), relay.reshape(const_2438.astype('bool'), [15, 4, 3]), )
call_2439 = func_1378_call(relay.reshape(const_2438.astype('bool'), [15, 4, 3]), relay.reshape(const_2438.astype('bool'), [15, 4, 3]), )
bop_2447 = relay.power(const_2432.astype('float32'), call_2437.astype('float32')) # shape=(15, 4, 3)
bop_2450 = relay.power(const_2432.astype('float32'), call_2439.astype('float32')) # shape=(15, 4, 3)
bop_2459 = relay.right_shift(var_2433.astype('uint64'), relay.reshape(bop_2434.astype('uint64'), relay.shape_of(var_2433))) # shape=(1, 12, 16)
bop_2464 = relay.logical_and(const_2432.astype('bool'), bop_2459.astype('bool')) # shape=(1, 12, 16)
bop_2468 = relay.divide(bop_2459.astype('float32'), relay.reshape(var_2433.astype('float32'), relay.shape_of(bop_2459))) # shape=(1, 12, 16)
output = relay.Tuple([const_2438,bop_2447,bop_2464,bop_2468,])
output2 = relay.Tuple([const_2438,bop_2450,bop_2464,bop_2468,])
func_2487 = relay.Function([var_2433,], output)
mod['func_2487'] = func_2487
mod = relay.transform.InferType()(mod)
mutated_mod['func_2487'] = func_2487
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2488 = relay.var("var_2488", dtype = "float64", shape = (1, 12, 16))#candidate|2488|(1, 12, 16)|var|float64
func_2487_call = mutated_mod.get_global_var('func_2487')
call_2489 = func_2487_call(var_2488)
output = call_2489
func_2490 = relay.Function([var_2488], output)
mutated_mod['func_2490'] = func_2490
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2639 = relay.var("var_2639", dtype = "uint16", shape = (16, 16, 12))#candidate|2639|(16, 16, 12)|var|uint16
var_2640 = relay.var("var_2640", dtype = "uint16", shape = (16, 16, 12))#candidate|2640|(16, 16, 12)|var|uint16
bop_2641 = relay.less(var_2639.astype('bool'), relay.reshape(var_2640.astype('bool'), relay.shape_of(var_2639))) # shape=(16, 16, 12)
func_1516_call = mod.get_global_var('func_1516')
func_1518_call = mutated_mod.get_global_var('func_1518')
var_2648 = relay.var("var_2648", dtype = "float32", shape = (480,))#candidate|2648|(480,)|var|float32
call_2647 = relay.TupleGetItem(func_1516_call(relay.reshape(var_2648.astype('float32'), [5, 12, 8])), 0)
call_2649 = relay.TupleGetItem(func_1518_call(relay.reshape(var_2648.astype('float32'), [5, 12, 8])), 0)
bop_2658 = relay.right_shift(bop_2641.astype('uint16'), relay.reshape(var_2640.astype('uint16'), relay.shape_of(bop_2641))) # shape=(16, 16, 12)
func_1038_call = mod.get_global_var('func_1038')
func_1044_call = mutated_mod.get_global_var('func_1044')
const_2672 = relay.const([-1.047518,8.597556,-9.263543,-3.555973,9.435791,-7.047743,-5.930889,-7.488296,3.758827,-3.677088,-7.518009,7.899165,6.211192,-0.883157,0.806832,-0.995722,9.088574,-2.651065,-4.299192,-7.877894,-0.989546,0.989498,-1.476074,3.468144,1.628163,1.932030,-8.955003,1.582860,-3.910403,-4.562913,-9.463056,8.952962,8.142012,9.323524,-3.344362,1.973037,8.446323,-2.993864,2.144979,6.920836,3.385265,-1.036123,7.401432,6.908762,7.095035,3.460685,5.375849,-8.924128,9.673768,-2.667520,7.144114,-2.300805,-1.438352,-8.961260,2.654505,-1.679672,5.649402,-5.074706,-8.635468,-0.335925,-0.713911,8.246125,7.997401,-4.455842,-1.732533,-7.313191,-0.946120,-6.116672,3.179199,-4.614006,-6.334833,4.524252,-8.846978,3.856200,-2.187600,-6.905137,2.253387,-1.033018,3.953324,7.832843,9.050062,1.011522,9.908860,9.874254,1.611136,0.453036,-0.230207,4.975230,-1.844236,-7.248439,-7.308558,3.888762,-8.563084,-7.568289,-2.578137,2.279005,-2.536396,-6.137564,-3.034759,-9.382830,3.606341,-3.781946,5.417420,-4.545972,-2.058285,-8.073826,-1.730280,-3.210944,2.658231,-3.045588,8.869673,0.562922,7.285480,4.869145,3.609624,2.395769,7.071467,1.647974,3.950109,-7.864405,-6.508191,-8.294981,4.013672,1.086746,-6.984193,-0.015469,-5.162558,0.904248,5.888938,9.911280,-4.224390,-8.105014,-7.988561,-1.312753,0.809182,7.032172,3.237885,-3.255544,2.609079,2.356908,-2.832689,2.362504,-7.982175,-3.630295,5.543641,-4.689024,-3.178638,7.044697,-9.566586,-2.988767,-1.532745,2.285401,7.761321,-8.421966,-4.974596,-9.555376,-2.944928,8.857842,-7.456688,-0.608747,6.602791,-4.612903,7.366665,1.304995,6.776991,-3.972138,3.258118,-4.971140,0.684038,0.914178,-3.298121,-4.534367,7.156729,1.361571,2.848927,5.100690,0.718487,-2.657228,0.848466,-5.644442,5.942814,4.739445,3.527576,-8.033891,-6.422406,-4.863037,2.451959,1.856385,-0.018289,8.629352,5.458129,-7.475497,-9.043754,3.097653,-1.403064,-8.353716,-6.152748,4.889588,3.021776,1.561417,4.313711,8.905183,-4.910769,-8.263906,4.670455,3.490699,-8.863252,7.042060,-6.788840,5.260818,6.802185,4.639356,2.116589,3.962420,-0.760993,-8.628500,-7.032887,-6.158262,6.251013,3.752513,-0.328938,2.588831,-3.264274,7.163984,9.315588,-2.435614,3.126977,9.725258,-3.700613,9.691936,0.676275,-9.656803,7.845392,-7.367377,5.762821,-0.294507,-0.559139,5.579751,-3.536146,-9.214586,7.218053,-5.595415,-7.022143,3.268284,-8.273435,0.641111,-1.658879,9.042138,-8.268434,-3.202471,1.476363,-8.991019,-8.185977,1.076551,-0.790793,5.138089,-5.486309,-8.042773,3.569934,4.978482,7.980660,8.938640,-2.588573,2.509904,-5.995101,2.580577,-7.257392,-2.189338,4.663592,-6.909946,1.354503,3.238034,1.747344,-9.069701,2.125676,2.165009,-5.590599,-9.394600,5.379848,9.345627,-2.765645,-0.593537,-9.507488,7.683989,-8.957070,-4.353186,2.830038,4.810644,5.272081,4.440433,4.756033,8.124960,8.925054,-5.839659,-9.709482,4.425944,-0.149077,1.432002,-7.221107,-6.953764,-0.261285,-3.020506,-8.814215,5.910855,0.332733,-1.363525,0.430628,-5.540869], dtype = "float32")#candidate|2672|(308,)|const|float32
var_2673 = relay.var("var_2673", dtype = "float64", shape = (12,))#candidate|2673|(12,)|var|float64
const_2674 = relay.const([-8.868043,7.344719,5.149456,7.823890,-1.262162,5.819629,6.769168,-8.542498,2.546341,-0.434335,1.369475,3.400919,2.435025,9.043108,-9.087978,7.058056,-0.491207,-8.177679,3.969608,4.513207,9.162429,5.303419,2.047293,8.223773,2.120935,-7.131709,-4.525081,0.673038,6.935752,-6.131725,6.619640,-6.999847,-7.724493,7.094138,-3.773921,2.084032,-9.276733,3.688281,7.592096,-3.642101,-5.457512,8.593016,-6.388382,-3.926197,9.165671,-8.954263,-6.067261,-8.776400,3.801988,-4.741177,-2.640101,4.281500,-9.307464,-4.227683,6.698480,-9.693926,6.754603,-8.805092,1.385852,6.769832,0.015471,1.896567,5.695596,6.832068,3.432127,-9.714054,7.924014,-9.617705,-6.535988,3.522434,-3.959402,1.217583,4.133450,7.735943,-8.518593,7.182617,-0.142218,-3.850154,-0.103463,-1.325528,3.792863,2.100808,6.077612,5.213423,-4.620701,0.151618,-7.733563,-9.225586,5.916409,-4.330358,1.944889,5.826282,-1.651661,9.231935,3.103906,1.919859,-7.618927,-0.074216,-2.994722,-9.848973,-4.035589,8.352263,-5.324898,2.984479,-1.216172,-0.513574,5.964515,3.837829,1.177976,4.199560,9.419215,5.892424,0.191555,1.649276,9.987573,8.718521,9.822647,8.675892,-0.774697,2.483527,-5.705086,-5.624655,-7.905198,-4.274583,-9.642957,-9.241207,-4.620671,-7.497350,4.089688,1.540944,2.547988,4.260641,-7.407476,-7.088857,5.178210,9.292406,9.355751,2.042089,8.700172,5.612431,2.223958,2.380568,-9.871870,-2.461143,4.920524,-8.578946,-8.303298,-7.883535,-7.808650,1.650029,-5.990604,-1.979426,2.663327,6.029624,1.084021,-5.135705,5.377954,-7.128328,2.637425,3.453141,-6.631862,5.464668,1.651519,9.898342,1.274319,7.407182,3.839183,7.284241], dtype = "float32")#candidate|2674|(168,)|const|float32
call_2671 = relay.TupleGetItem(func_1038_call(relay.reshape(const_2672.astype('float32'), [11, 14, 2]), relay.reshape(var_2673.astype('float64'), [12,]), relay.reshape(const_2672.astype('float32'), [11, 14, 2]), relay.reshape(const_2674.astype('float32'), [14, 12, 1]), ), 3)
call_2675 = relay.TupleGetItem(func_1044_call(relay.reshape(const_2672.astype('float32'), [11, 14, 2]), relay.reshape(var_2673.astype('float64'), [12,]), relay.reshape(const_2672.astype('float32'), [11, 14, 2]), relay.reshape(const_2674.astype('float32'), [14, 12, 1]), ), 3)
output = relay.Tuple([call_2647,var_2648,bop_2658,call_2671,const_2672,var_2673,const_2674,])
output2 = relay.Tuple([call_2649,var_2648,bop_2658,call_2675,const_2672,var_2673,const_2674,])
func_2682 = relay.Function([var_2639,var_2640,var_2648,var_2673,], output)
mod['func_2682'] = func_2682
mod = relay.transform.InferType()(mod)
mutated_mod['func_2682'] = func_2682
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2682_call = mutated_mod.get_global_var('func_2682')
var_2684 = relay.var("var_2684", dtype = "uint16", shape = (16, 16, 12))#candidate|2684|(16, 16, 12)|var|uint16
var_2685 = relay.var("var_2685", dtype = "uint16", shape = (16, 16, 12))#candidate|2685|(16, 16, 12)|var|uint16
var_2686 = relay.var("var_2686", dtype = "float32", shape = (480,))#candidate|2686|(480,)|var|float32
var_2687 = relay.var("var_2687", dtype = "float64", shape = (12,))#candidate|2687|(12,)|var|float64
call_2683 = func_2682_call(var_2684,var_2685,var_2686,var_2687,)
output = call_2683
func_2688 = relay.Function([var_2684,var_2685,var_2686,var_2687,], output)
mutated_mod['func_2688'] = func_2688
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2827 = relay.var("var_2827", dtype = "int64", shape = (1, 6, 1))#candidate|2827|(1, 6, 1)|var|int64
var_2828 = relay.var("var_2828", dtype = "int64", shape = (4, 6, 6))#candidate|2828|(4, 6, 6)|var|int64
bop_2829 = relay.minimum(var_2827.astype('int64'), var_2828.astype('int64')) # shape=(4, 6, 6)
output = relay.Tuple([bop_2829,])
output2 = relay.Tuple([bop_2829,])
func_2834 = relay.Function([var_2827,var_2828,], output)
mod['func_2834'] = func_2834
mod = relay.transform.InferType()(mod)
var_2835 = relay.var("var_2835", dtype = "int64", shape = (1, 6, 1))#candidate|2835|(1, 6, 1)|var|int64
var_2836 = relay.var("var_2836", dtype = "int64", shape = (4, 6, 6))#candidate|2836|(4, 6, 6)|var|int64
output = func_2834(var_2835,var_2836,)
func_2837 = relay.Function([var_2835,var_2836,], output)
mutated_mod['func_2837'] = func_2837
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2933 = relay.const([[[-6,3,6,3,-8,-3,-5,6,1,-6,-6,8],[3,10,6,7,3,-4,-9,-8,-7,-10,3,10],[-9,-1,-3,4,-5,-9,10,-5,-4,-5,-5,-10],[3,-7,-7,-10,-3,3,8,-2,-4,5,7,-7],[8,5,-5,6,-6,2,-9,-2,-3,-8,2,5],[-1,10,-8,-8,-10,-2,8,1,-10,-9,-7,-1],[6,3,-9,6,9,-5,-4,5,-6,9,4,9],[-4,5,1,-4,-7,-7,-3,6,10,9,6,7],[1,-7,-5,1,7,1,-1,-5,1,-5,-6,8],[-6,-9,3,6,4,-8,-2,-8,-4,6,-3,-6],[-2,1,-3,3,6,-4,2,2,5,-4,-9,-7],[3,-10,4,-3,6,4,10,3,-3,-2,8,8],[-4,-10,7,7,1,-6,-3,1,10,-3,5,4],[-2,1,-2,1,3,10,1,10,7,4,3,-1],[3,5,9,-5,8,1,9,6,5,2,5,7],[7,4,-1,5,1,1,9,-1,4,-9,-5,-4]],[[2,8,7,-9,-1,6,-10,-3,3,8,-1,-1],[2,7,4,10,7,-3,-5,9,-7,-5,8,-7],[5,-4,-6,-1,-4,8,8,-6,-3,-9,5,-4],[5,-9,-1,-5,-2,1,2,8,8,8,3,-3],[4,7,-10,-10,-2,1,7,-8,-2,9,-10,-4],[5,8,-5,-6,-1,-6,4,9,9,7,-3,-5],[5,3,-2,-6,6,-7,-5,9,6,8,-3,7],[-6,-6,-1,-7,6,4,4,7,3,10,8,3],[-5,5,-1,-8,9,7,-6,8,4,-9,1,-8],[-9,4,10,-3,-10,4,3,8,5,-1,2,2],[1,-4,-7,-9,-5,-4,-10,-1,-5,4,7,9],[-9,-5,-10,-7,-8,5,5,2,5,-6,-2,7],[-4,-5,-1,4,-5,-1,8,9,-10,9,-6,-5],[6,-8,-10,8,-4,-4,-7,6,-9,-10,8,-3],[2,4,-5,-1,-2,-1,-1,-6,-2,-1,1,3],[-8,-9,10,3,-5,2,-9,3,9,6,3,-7]],[[4,-3,7,7,1,-10,-7,5,-3,2,-9,3],[-8,-9,3,-3,-6,-4,-4,-8,6,-8,-4,-4],[9,9,10,-7,3,7,-2,2,9,-2,-6,10],[10,-4,-10,-1,6,-6,-4,-5,8,2,4,-9],[10,8,2,8,7,-8,2,-5,-3,-7,5,-3],[-5,5,9,-2,5,-4,9,3,-6,2,-2,8],[-9,2,8,7,10,-3,-5,-9,7,9,5,-4],[3,-9,-3,8,-4,6,-6,3,4,-9,1,9],[-9,-5,-2,-5,3,10,1,-9,-10,6,9,-4],[-7,4,-10,7,-3,4,-9,8,3,9,-8,10],[5,-4,7,-9,-2,4,6,-9,-4,-4,-2,-7],[2,8,6,8,5,-8,-1,-9,-10,4,4,6],[-10,9,5,-6,1,7,-3,-1,-8,-1,7,-3],[-2,-6,-4,-2,-3,6,-6,4,-8,9,5,-10],[-10,-3,10,8,5,-6,-6,-3,1,8,-2,7],[3,-1,-7,-1,-1,-7,-2,-3,-1,-6,-9,-10]],[[8,10,-8,10,-4,-10,-2,-1,7,6,-5,6],[1,-4,1,-3,-10,1,-9,-1,-1,-5,2,-6],[3,8,-2,-3,6,-3,1,-8,-6,-3,9,9],[5,-3,-9,-7,2,2,10,4,5,3,-5,9],[7,8,7,5,3,-10,6,7,-3,-1,4,-8],[-5,5,1,1,9,5,-9,8,8,-4,-5,2],[10,2,-9,5,3,-5,-5,4,6,-9,-10,6],[-5,10,-1,-10,6,-7,4,2,-1,4,3,-9],[7,-5,5,3,-2,-7,-7,-4,-9,-9,-2,-10],[8,-8,-2,-10,-4,-4,-4,6,9,-9,-2,-1],[-5,-6,1,-9,-2,8,5,-10,2,-10,2,2],[-1,10,-3,6,1,-6,-8,3,-1,3,-8,-7],[-9,-7,-4,4,2,-3,-5,5,-9,-2,6,-6],[-6,-5,3,7,10,3,-4,3,3,1,3,5],[6,10,3,-9,8,-1,5,-1,1,10,2,-1],[9,2,7,5,-7,3,4,6,5,1,7,-6]]], dtype = "uint8")#candidate|2933|(4, 16, 12)|const|uint8
const_2934 = relay.const([[[-8,-8,-6,2,5,7,9,1,4,-10,7,1],[3,1,-9,-1,-7,1,-3,-5,6,2,2,1],[-3,2,-2,-3,-7,10,-7,-4,-10,-10,-5,1],[6,7,7,3,8,-10,-8,-7,1,-10,6,5],[-8,1,1,-5,7,3,9,-4,3,9,-8,6],[-4,8,-2,-10,-9,2,-4,4,-10,-5,-5,7],[-4,-9,5,-4,6,8,6,-6,8,-4,8,4],[-7,4,8,1,-10,-6,10,3,-3,-1,1,-3],[-9,3,-7,3,6,7,1,-7,2,5,5,-5],[-10,-7,-8,-10,-9,4,10,1,5,9,8,8],[-1,-2,-2,3,5,-3,-2,10,5,-9,-1,10],[-10,3,-7,10,5,-2,-10,9,7,-10,2,-2],[4,-4,4,3,5,6,9,1,9,-1,10,-4],[-1,-8,4,1,-3,-5,1,5,-5,9,6,-10],[-3,3,10,-10,10,3,8,-4,-9,10,-6,-7],[5,-7,-5,-5,7,-2,5,-7,10,1,-5,10]],[[1,-5,4,-9,7,-9,4,-9,-4,-7,2,6],[-7,-9,9,8,9,8,-5,-4,7,-3,9,-10],[-4,4,5,10,-6,-4,-8,6,6,-3,-4,-3],[10,10,9,-6,10,-1,-1,-5,-9,3,-1,-7],[4,-10,-8,-9,-7,10,2,-1,8,-5,10,-8],[-1,8,-2,1,-6,-6,1,3,-6,-8,-8,9],[10,5,-6,-10,-3,-10,-3,3,-1,-2,-4,-4],[9,-1,8,5,5,-9,4,-9,8,-4,-10,8],[5,6,8,-2,-2,4,-4,-10,-10,4,-6,10],[2,-5,-8,6,5,-3,-3,-10,9,-5,-2,5],[-1,5,-2,3,7,-8,1,10,-5,-10,9,3],[3,-4,10,8,-8,1,6,-4,10,-1,6,-8],[6,1,-6,-5,10,-6,1,-2,-7,-9,-6,7],[6,6,9,5,10,1,10,-6,7,3,-8,-7],[9,-9,2,9,-3,-10,-7,-10,-10,-6,10,3],[6,5,10,-10,-9,-1,4,-7,-7,1,-3,-2]],[[5,5,9,-1,3,-10,10,-1,-8,8,-6,-1],[3,6,7,2,5,-5,7,-1,4,5,-3,2],[1,-7,4,-10,2,-6,-4,-8,6,-5,-1,-5],[-10,-8,-7,6,10,-6,1,-5,10,1,8,2],[5,10,6,1,-6,-8,-1,10,10,-10,-2,6],[-4,5,-6,-9,6,7,5,-7,8,1,-2,3],[-8,4,7,1,9,-5,-5,-8,-6,-5,4,9],[7,-3,2,10,-10,2,-6,-1,1,2,2,8],[-4,6,-5,9,-4,1,-10,-8,7,8,-2,-10],[4,-8,-1,-4,-9,2,7,4,-6,9,-5,-8],[8,-8,6,-3,2,-9,-8,-8,5,-1,-5,-6],[-1,9,-4,10,3,-2,8,9,9,-2,3,5],[2,-2,2,-10,-3,-7,-3,6,-7,-7,4,-4],[6,-9,6,6,-2,6,6,-5,4,5,10,-5],[10,1,-8,6,-1,-2,10,6,8,-4,-10,5],[-2,1,-10,9,8,3,-5,1,-7,-2,3,-9]],[[-1,-7,-3,-3,1,-6,-2,-2,-7,8,5,7],[-2,-8,-10,-8,-1,10,-7,8,-8,-10,1,1],[-6,-9,8,-2,-8,7,-9,-7,-10,-4,-1,-5],[-9,1,7,-8,-3,-4,3,-3,-8,9,5,-8],[2,-4,-6,-5,-5,5,-8,-3,-9,2,-4,-5],[5,-2,9,-7,-3,5,9,-4,-6,-6,-3,-7],[-7,6,-6,-8,6,-3,-1,7,1,-3,4,7],[-10,8,2,-8,6,4,9,-5,3,10,-8,8],[-1,-10,-2,-6,-7,-6,10,2,9,10,-8,-1],[-2,-3,-9,10,3,4,-4,-6,5,-2,7,10],[7,-2,-6,-6,-5,1,-1,4,10,9,-10,-6],[10,-7,1,-3,-1,5,-9,8,-1,9,-1,-8],[-5,-6,4,8,-8,-1,4,7,-8,-3,-3,-2],[-1,8,6,-4,5,-3,-9,-4,-6,6,-8,5],[5,-4,8,-7,-7,-10,3,5,1,-8,1,-7],[-9,-8,6,-5,-1,3,5,8,-5,8,-2,5]]], dtype = "uint8")#candidate|2934|(4, 16, 12)|const|uint8
bop_2935 = relay.less(const_2933.astype('bool'), relay.reshape(const_2934.astype('bool'), relay.shape_of(const_2933))) # shape=(4, 16, 12)
bop_2941 = relay.not_equal(const_2933.astype('bool'), relay.reshape(const_2934.astype('bool'), relay.shape_of(const_2933))) # shape=(4, 16, 12)
func_2428_call = mod.get_global_var('func_2428')
func_2430_call = mutated_mod.get_global_var('func_2430')
var_2953 = relay.var("var_2953", dtype = "int16", shape = (1, 660))#candidate|2953|(1, 660)|var|int16
call_2952 = relay.TupleGetItem(func_2428_call(relay.reshape(var_2953.astype('int16'), [5, 132])), 3)
call_2954 = relay.TupleGetItem(func_2430_call(relay.reshape(var_2953.astype('int16'), [5, 132])), 3)
const_2978 = relay.const([[[True,False,True,False,True,False,False,True,True,True,True,True],[False,True,False,True,False,False,True,True,True,False,True,False],[True,True,False,False,True,False,True,False,False,False,True,True],[False,True,False,True,False,False,True,False,True,True,True,True],[True,True,False,False,True,True,False,False,True,True,True,False],[True,False,False,True,False,True,False,False,False,False,True,True],[False,False,True,True,True,True,True,True,False,True,True,True],[True,False,True,False,True,False,False,False,False,False,True,False],[False,True,False,False,True,False,True,False,False,True,True,False],[False,False,True,False,False,False,True,True,False,False,True,True],[True,True,True,True,True,False,False,True,True,False,False,True],[False,True,True,True,False,False,True,False,True,False,False,True],[False,True,False,True,False,True,False,True,False,False,False,True],[False,False,True,False,True,True,True,True,False,False,False,True],[False,True,True,True,True,False,False,False,True,False,True,True],[True,True,False,True,True,True,True,False,True,False,False,False]],[[True,True,False,True,True,False,False,True,False,False,True,True],[False,True,True,True,False,False,True,True,False,True,True,True],[False,False,True,False,False,True,False,True,False,False,False,True],[True,True,True,True,True,False,False,True,True,False,False,True],[False,True,True,False,True,False,False,True,False,True,True,False],[True,False,True,True,False,True,True,True,False,False,False,True],[False,True,False,True,True,True,True,True,False,False,False,True],[False,False,True,False,True,False,False,False,False,True,False,True],[False,True,False,True,True,True,False,True,False,True,False,True],[False,True,False,False,True,False,False,True,False,True,True,False],[True,True,False,False,False,False,True,True,True,True,False,False],[False,False,True,False,True,False,True,True,True,False,False,True],[False,False,False,True,True,False,True,False,True,True,False,False],[False,True,True,True,True,True,False,True,True,True,False,True],[True,True,False,True,True,False,False,False,False,False,True,True],[False,False,False,False,True,False,False,True,False,True,True,True]],[[False,True,False,True,False,False,False,False,False,True,True,True],[True,True,True,False,True,False,True,False,False,True,False,False],[False,False,True,False,True,False,True,True,True,True,False,False],[False,True,False,False,False,True,True,True,False,True,True,True],[True,True,True,False,False,True,False,False,True,True,False,False],[False,True,True,True,True,False,True,True,True,True,True,True],[False,False,False,False,True,False,False,True,True,True,True,True],[True,True,False,False,False,False,True,False,False,False,False,True],[False,True,False,True,True,True,False,True,True,True,False,True],[True,False,False,False,True,True,True,False,False,True,True,False],[False,False,True,False,False,True,True,True,False,True,False,True],[False,True,True,True,False,True,False,True,True,False,True,False],[True,False,True,True,False,False,False,False,False,True,False,False],[False,True,True,False,False,False,False,False,True,True,True,True],[False,False,False,True,False,True,True,False,True,False,True,True],[False,True,True,False,False,True,True,False,False,False,True,False]],[[False,True,False,True,False,False,False,False,False,False,True,False],[True,False,False,True,True,False,False,True,True,False,False,False],[True,True,False,False,True,True,False,False,False,True,True,False],[True,False,False,True,False,True,True,False,False,False,True,True],[False,True,False,True,True,False,True,True,True,False,True,True],[True,True,True,False,False,False,False,True,False,True,False,True],[False,False,True,False,False,False,True,False,True,False,True,True],[False,True,False,False,True,True,True,False,False,False,False,True],[False,True,False,True,False,True,False,False,True,True,True,True],[True,False,True,False,False,False,True,True,True,True,True,False],[False,False,True,True,False,True,False,False,False,False,True,False],[True,True,True,False,False,False,True,True,False,False,False,True],[True,True,False,False,True,True,True,True,True,False,False,True],[True,False,True,False,True,True,False,False,False,True,True,True],[True,False,False,False,True,False,True,False,False,True,False,True],[False,True,False,True,True,True,False,True,True,True,True,False]]], dtype = "bool")#candidate|2978|(4, 16, 12)|const|bool
bop_2979 = relay.multiply(bop_2941.astype('int16'), relay.reshape(const_2978.astype('int16'), relay.shape_of(bop_2941))) # shape=(4, 16, 12)
var_2983 = relay.var("var_2983", dtype = "int16", shape = (14, 660))#candidate|2983|(14, 660)|var|int16
bop_2984 = relay.equal(var_2953.astype('bool'), var_2983.astype('bool')) # shape=(14, 660)
func_2296_call = mod.get_global_var('func_2296')
func_2301_call = mutated_mod.get_global_var('func_2301')
var_2997 = relay.var("var_2997", dtype = "int8", shape = (576, 1))#candidate|2997|(576, 1)|var|int8
const_2998 = relay.const([-7.266374,1.746891,-0.614013,-1.804045,-9.979033,-3.436258,-3.950271,4.524685,-4.093520,-0.277225,2.046813,-8.433014,-7.214244,-7.318772,-6.547508,-4.668807,8.360867,-4.960152,2.642568,-3.453120,9.872971,4.125642,-5.059025,6.603850,-1.766840,-7.331009,-3.686789,1.586584,-5.671943,-5.940726,8.092880,-7.375526,-4.318743,1.658666,8.140055,2.108460,-3.642465,9.608023,-6.273546,7.365786,-3.654178,-8.071387,-0.047616,8.734996,-4.106553,-8.486567,4.817233,-0.875651,2.068846,9.101534,9.089091,2.942532,-6.254335,-2.031877,5.360627,1.091343,6.222576,2.234312,6.849079,-2.733447,-6.066961,6.573308,0.808689,-6.447583,5.625873,-7.998746,-4.260510,-8.839704,-7.655521,1.961610,-3.343172,8.479293,6.888626,-6.882726,5.878788,-9.828135,3.538680,6.497931,8.820838,6.674057,-8.429644,7.816329,4.279780,4.799273,-9.675270,2.490155,5.111978,-9.429173,6.860423,6.598307,5.192599,6.264156,0.503258,-0.777187,-6.725273,-7.198264,2.276434,2.405836,0.906819,-5.231710,-7.452937,7.441065,-7.292184,-4.275611,-8.645554,-7.638036,6.767581,-2.192039,0.936922,0.793432,-3.143833,-9.514521,6.154080,-6.478145,-3.392532,-2.738023,-7.011958,-6.400147,1.757688,0.535094,-4.975370,9.930648,1.142207,-7.486367,-4.875654,-6.222944,6.519273,-1.061960,-0.084601,-3.557594,8.247135,1.990497,-2.557419,-7.308477,-3.261612,2.183515,-5.359951,-6.562438,-7.940574,-9.708470,-5.093296,2.791257,0.018095,-8.452047,-0.984368,-2.754126,8.903300,2.950121,0.296549,2.726782,9.306874,-1.369165,-8.707484,5.451405,6.264206,1.687508,-6.532122,-5.926632,2.339239,-6.909853,5.866777,7.885072,-3.822683,-8.333794,6.189899,-1.182662,-9.173026,-9.131965,0.532206,0.804927,2.906469,7.548232,7.199909,6.400499,-9.381134,-8.634169,-7.619808,0.328327,-1.206441,-6.860580,5.736590,1.185648,8.346413,-4.273344,2.683258,1.552465,1.305565,0.433644,-2.174521,4.641325,-9.529295,-5.668765,4.910277,2.319793,7.309248,8.022295,-2.607171,-7.392606,-1.576408,9.202905,-9.513271,-5.324037,1.491137,-3.276032,-6.691414,-5.384569,7.340828,0.550265,-0.649960,0.637395,-1.019050,7.333586,3.299793,-4.766317,-4.290744,3.835283,7.613520,-4.944007,0.520338,-6.278942,-4.341973,-0.422254,-0.585348,2.143506,0.161993,-0.066482,9.339175,-9.193169,-7.639827,2.495939,-3.615906,2.714117,-0.267854,-6.351907,7.503736,-8.613157,-7.376231,0.065101,-6.244418,9.725661,6.006112,-6.251663,5.477126,0.622563,1.560869,0.616744,-4.306805,7.652883,-3.439476,-8.261115,7.395155,-5.997782,-5.036869,-4.564835,-3.159755,-9.331812,5.539872,-9.769986,1.109451,-2.843015,-5.002963,4.238985,6.535053,-5.738258,-7.059699,5.754600,2.420638,9.322747,7.188973,-3.467207,-8.224007,-6.933270,7.620690,-1.702978,-9.302221,-6.436026,-3.612111,2.339308,-2.988028,-1.756910,8.905256,-0.819054,4.028500,-9.414178,7.431450,-6.342498,5.247175,-2.018815,6.052850,0.096554,5.287731,4.558138,2.705908,0.292721,-0.528206,0.774826,5.457459,-2.316762,9.140014,-6.330110,9.000039,-8.040661,1.601122,-8.491366,-4.426456,-3.882223,2.060836,5.012950,4.563493,-6.762639,-8.870954,5.139637,-3.319584,-6.209113,-5.418516,-5.234719,0.970116,-7.262342,2.173665,-1.848592,-5.751094,-1.656609,-5.606259,0.341281,-0.987199,2.159061,9.967543,1.537138,-5.884367,8.820419,-8.341644,-2.105410,9.900516,-4.714167,2.942147,-5.465789,1.457459,5.066027,-3.910261,4.269951,9.020055,-9.712056,9.600852,-1.831770,9.205140,-6.870510,3.810196,-7.343586,6.250580,-9.109869,3.621629,6.352497,9.801540,-3.587017,8.436918,-3.127442,-4.540304,1.915612,-2.701780,9.630450,7.679473,8.009423,-0.007209,7.488675,-9.972002,3.198177,-2.416953,5.263972,9.857597,-2.257348,1.818963,4.233765,7.591533,-1.167541,-7.098424,5.392893,8.886559,3.153882,-5.046639,-6.328585,-6.483314,-7.240428,-7.899291,-0.719880,3.108769,-7.386384,9.140613,-1.433585,-6.394190,9.133111,-5.251334,-8.387612,0.525389,-7.346307,0.970171,3.795029,-0.919045,-5.508044,4.121107,-4.646349,4.470703,4.470651,6.859042,7.714555,-4.501045,-0.789933,-7.230962,7.035974,-9.669696,5.175007,-4.056110,6.357398,1.849535,4.449385,-4.049254,3.614725,-0.568056,5.442873,4.846800,7.935484,5.507730,-8.532401,-3.826276,3.576984,3.690097,-1.593515,4.124243,-7.191795,-2.665888,3.059805,-1.821398,-3.643838,-8.587440,-9.223431,1.176123,6.545333,4.680730,-1.261362,2.434991,5.029550,-7.476702,-6.696627,7.469937,-9.572709,-5.470223,8.587630,2.326675,2.420723,7.239766,0.716743,2.428451,1.157795,-9.824409,0.094431,9.157802,9.039732,-8.613639,-5.795783,-8.527676,9.711969,-1.205059,6.617448,6.414409,7.012575,-0.948420,8.733540,-8.494024,5.607163,-6.343886,-7.274902,7.911976,2.572505,-0.094830,1.590840,9.303226,9.692395,4.370227,9.576828,-4.697981,1.913545,0.377033,-2.945475,9.071243,-6.942102,-6.199678,-1.342555,-5.182781,-9.091198,1.587730,-2.748850,-2.945542,-2.443402,-0.695233,-1.497235,5.789598,-3.624676,-7.596304,-9.042598,-7.054461,1.218820,8.414941,-3.200298,-8.775579,-4.233675,-5.008664,-9.748388,2.628605,1.514478,-0.791186,-9.865860,3.284284,-5.761014,9.627690,-3.324861,1.799228,2.493348,4.941162,7.139161,-6.498243,0.179147,-2.171722,8.573504,-8.439563,9.029262,1.839968,-0.945782,-5.067086,-7.872544,8.570899,7.658487,5.217698,-2.026117,-4.837411,-3.443493,3.126317,-6.979601,3.683207,5.453108,-1.360108,-8.585684,-7.314809,-6.635195,6.470228,8.889408,6.779664,6.838742,9.578170,1.470452,2.165172,-0.683036,8.069375,-2.673245,-9.406568,7.990743,3.069958,-3.575281,-2.502444,-5.958035,-5.537046,3.309784,4.865694,-8.119013,-3.410675,-4.239813,2.051364,-2.438819,0.778543,6.426938,1.287788,-0.102012,-6.066999,-1.446363,-4.432141,-6.199281,-1.983241,-5.051122,-9.336197,-9.600258,4.904331,9.164802,6.041088,6.344217,-8.341961,5.252722,8.449725,-0.340576,-3.104636,3.177596,-8.986322,9.445156,9.951644,-4.725287,-4.584159,-6.098921,5.185711,-0.337682,7.293456,-6.740260,-9.876421,2.760203,7.796093,1.546330,4.847918,-4.023709,-5.255687,-9.744352,-2.932708,-6.129725,-7.370880,-5.068687,-8.259202,-7.398429,-7.221606,3.587775,-8.442128,4.145243,9.360037,-7.836696,0.742312,-5.460104,-5.726616,4.270200,8.416752,-6.569705,-2.768823,5.607759,9.982744,-7.465456,-4.092969,5.339309,7.610253,8.299644,0.289994,8.590011,-9.979346,3.997720,-8.478121,0.076542,-3.352619,6.770746,-4.921022,6.503467,4.684864,-3.863302,0.424925,-7.176941,-5.239953,3.136995,3.961548,-3.344517,-3.037910,9.341663,-6.110647,-5.885836,-7.351392,7.438647,8.144996,-3.778979,-2.807666,-6.339122,-2.084665,-1.462839,-0.819842,3.910861,-5.958218,-6.584002,6.311316,-8.901240,-4.694559,-7.343113,-4.727811,-5.955215,-2.841414,-8.975321,6.074543,-4.945620,-5.533781,-7.477463,7.130897,-5.414106,9.535523,-1.128852,-3.701878,-6.703174,-7.180294,7.323987,-9.316185,-1.327321,2.818337,3.949800,9.518536,-1.337246,8.895663,9.804336,-2.833675,-5.935001,-9.577243,-0.666282,6.602775,0.216971,5.101354,1.653240,-9.361239,-8.183898,-5.726025,-0.481890,-0.537061,0.132670,7.895434,-0.802369,1.694096,4.480075,5.416978,-7.061072,-7.076537,-3.029731,0.396435,8.380811,7.611361,9.769001,-8.288148,-2.831698,-7.985479,-4.723604,-3.326184,-0.342599,1.268488,4.883270,3.607220,-2.096365,9.253516,-3.681042,-4.960889,8.710225,1.112074,2.061315,-6.361437,-2.292144,-3.917350,9.412555,3.644452,-4.220692,2.162930,-2.026028,8.082402,0.389571,1.157499,0.080083,6.223825,-9.544464,7.704320,-1.886537,9.566989,0.904093,2.698700,-3.718771,-8.265278,-7.521127,-9.570144,-4.885811,2.876839,-4.054443,0.619634,-9.381424,-3.103054,-0.044235,-6.928812,-9.694828,4.651810,7.917539,-7.556852,-0.655777,-9.174938,-2.284200,2.584371,7.848652,-9.584129,5.611666,1.587327,1.865929,-8.126484,-9.588727,-5.457307,-4.344149,-9.394325,0.781000,8.276440,0.900877,-2.117711,-3.524484,-2.992346,-9.810186,-7.266955,4.649592,4.601300,0.757454,-7.035631,-2.937218,-4.341619,-0.330626,7.048220,7.715564,3.659867,-2.925900,7.308225,9.827030,-3.442553,-7.090831,-1.208580,5.961105,-1.619879,1.424393,-5.996542,-0.980073,8.559007,9.405074,-5.273578,1.289612,0.043736,5.058923,9.779252,-7.198091,-0.239520,-5.201494,-8.905245,-1.753601,-9.558747,1.918858,3.881188,-0.564222,3.049457,7.434084,-6.066118,6.666930,0.942163,-1.527227,-2.056815,-4.776753,-5.710038,2.901632,-8.916842,8.163010,9.832647,8.724077,-5.699008,7.281866,4.268917,5.353443,-2.758373,3.704013,0.984322,-4.227023,1.196192,-4.877254,9.075333,-6.981211,7.900723,-5.267519,6.396152,-6.355084,8.437614,8.142434,-1.062087,6.856134,2.100460,-1.999717,-5.577515,-1.818315,-4.853265,4.665403,-9.449188,7.077477,-6.074676,0.351356,-1.781859,0.200762,6.606575,-2.515928,-2.260650,-4.116985,9.901148,-1.628375,5.120991,3.552581,-9.614001,3.345660,-2.007225,-5.133054,9.554449,-1.869845,4.252165,0.631775,-7.689746,6.400784,6.991484,5.844016,-8.304649,1.835602,-9.418132,1.277724,0.176704,-0.700410,-4.658545,-4.166365,-6.577084,8.754587,1.360648,-4.645919,-3.939819,-5.728384,-3.982279,-5.777369,7.403553,-0.272050,-7.840076,-4.474827,0.283301,-4.237453,-3.710657,9.563241,3.879202,-3.615241,9.837206,6.771494,-7.341092,-4.297286,5.083214,-0.700279,-5.612055,-5.272176,-6.332952,-4.795236,2.690129,8.412196,-3.807594,-0.226608,9.098476,-8.282743,-0.508802,3.967658,2.960691,0.285213,-9.877194,2.888792,-7.690986,-5.072857,3.032177,-3.888202,8.107398,-9.238552,-9.921428,0.151672,0.824615,7.794918,6.697021,9.655587,-1.597338,4.423564,-9.202496,9.446884,7.362771,6.288688,-4.113401,9.871819,-8.509386,3.209206,1.162747,-4.110327,-5.168626,-5.641978,-9.914797,-6.088665,-4.173961,-8.383079,4.796114,4.012549,3.086253,3.952693,4.650280,9.340847,-5.223844,-3.641318,6.236866,-1.774633,-5.325855,-5.653326,-7.901123,0.973628,-6.490598,1.618778,3.576502,-9.601969,-0.012976,6.333498,0.706866,4.355142,7.892395,4.615376,-4.865893,0.186358,-9.629747,-6.523010,-7.173055,1.635551,4.006832,-6.634893,3.157882,9.923170,-4.690742,6.561892,6.258150,5.326475,3.117161,2.350837,3.683314,-3.689361,-1.928870,-8.014124,8.955108,-9.381763,9.155714,9.514745,4.080518,-8.856840,6.414429,4.936641,-0.015125,-9.448765,3.346803,3.749305,-6.070676,-7.077301,-0.686008,2.397557,-2.762521,-1.030985,1.518155,7.327108,-0.428112,-2.533990,9.076216,-6.787249,2.026092,7.770828,2.030008,4.510649,8.016015,-3.424421,-7.465175,3.501976,2.794871,-0.579024,9.568698,-0.569653,4.066842,-9.265592,-4.615443,-1.451467,3.657914,0.127008,0.615987,-7.091524,-6.568674,-7.952778,-5.241634,-9.488885,-8.398909,-0.569185,-0.992237,7.490815,-3.050745,-9.875149,8.286431,-1.807127,9.007463,5.763286,-8.437165,3.975111,-1.246972,9.496764,7.446656,6.003595,7.132789,1.554804,-6.234032,4.779282,-7.658243,2.700905,1.593898,-2.657102,1.888445,7.461824,8.297050,1.697861,-6.436266,1.240562,-1.991587,7.629061,-0.379455,5.659793,-9.625799,7.481156,-5.825897,-2.120284,-8.690036,-0.644454,-0.991751,0.184194,-0.985036,8.326861,-1.781680,-6.664896,9.828297,-7.226595,9.198383,-9.665592,-0.073755,-6.852205,9.634388,-8.414550,-0.962145,7.822106,-4.232458,-9.966637,6.265908,-6.566437,-5.014963,-8.208864,-7.412742,-8.353186,-2.552695,9.200257,-2.853412,-0.573873,-8.471231,-8.934425,4.948950,6.793491,-8.746949,8.702292,-2.677351,9.718345,-9.088773,-1.793282,-2.844338,-5.738175,-5.151192,-2.802248,-3.542354,-5.857246,0.470144,3.068163,-5.521907,0.196003,-0.124044,3.510840,-8.961338,-8.250837,-1.247020,2.147748,0.075264,-9.621939,-7.973129,-3.047758,1.397448,0.494783,1.892109,8.949233,-9.021347,3.650156,9.357222,1.806503,4.744065,3.181832,-3.116212,2.118066,-1.274649,5.785491,-7.211676,9.827249,-6.621205,-4.283083,1.458047,-6.439912,-1.865314,0.042379,-8.705592,8.105886,-3.394668,4.092792,-5.732106,-1.395166,-5.164934,1.014812,2.996188,-2.289248,7.645033,-4.307994,7.225666,-7.281757,-2.834643,5.615890,-8.839683,-0.109274,3.998079,-1.793596,-7.047557,8.719330,-9.924550,6.706662,5.329901,-4.122378,1.321606,-8.571742,9.573497,-6.855417,-6.354837,-9.347309,3.525992,8.777185,-8.518679,-1.866653,-4.672594,-0.043412,-2.178095,-8.748661,8.088271,-4.858899,9.117346,7.560597,-1.241510,-5.571040,-7.889608,3.686621,-7.863621,-3.572795,-5.590939,4.534588,-6.953568,-7.028643,-2.112448,2.136680,2.485768,-4.635962,-2.782278,4.106319,5.318458,7.577259,-0.290679,9.371211,9.617552,6.262891,-4.417834,-7.255747,-4.163184,2.854306,1.772220,4.556073,5.543405,-9.508906,8.495212,-6.496446,1.293994,-7.462963,-6.812012,-8.165812,-0.261581,-8.881346,7.002120,5.771350,6.305719,-8.881426,8.530279,5.468686,6.347011,-5.671633,6.413423,1.383663,-2.188380,-7.527131,-9.510417,-3.963034,-6.406279,2.875399,8.512172,-4.941792,-7.916918,-6.473990,-1.040195,-5.823216,2.018259,-8.177250,0.049510,0.673811,-4.735644,-9.619440,9.946550,6.414221,9.191367,2.434018,1.187728,2.174020,-5.572893,-5.205778,5.482886,-2.036945,4.580283,7.577898,-7.613352,6.857272,-2.168713,3.136600,-7.904282,-9.257717,-2.928854,0.536233,2.121992,4.818107,-7.602686,-5.336759,-0.024871,-9.066577,8.262086,-1.715799,-7.902732,-8.157552,4.018593,-0.248986,-3.834496,-6.000592,-2.175515,3.735492,-5.849539,3.752538,-1.188566,5.340756,-0.077956,-7.971869,0.994125,-2.369027,-8.980035,7.188957,-7.241787,-4.512720,-4.534840,7.220792,-5.723012,-2.549065,4.774706,1.585095,3.386056,-5.026890,-3.135604,3.235973,6.406283,6.465775,5.439387,-1.111183,7.758122,-7.394321,8.984533,-8.034962,-0.155363,-6.032452,3.100708,4.583497,-6.719218,-7.851930,8.684330,8.010698,0.388716,-2.435269,2.648086,7.196808,4.831668,-7.896756,0.746021,-9.535327,4.381236,-9.304536,-5.127096,2.947829,2.204600,3.805874,1.330798,-5.783601,-8.658438,9.367523,5.191383,-5.430763,7.240113,8.120837,0.203441,-1.432214,-2.461968,1.091526,6.276948,-0.435408,5.095363,0.520239,-3.435726,8.085731,-0.286442,-4.155251,6.592507,1.244093,0.578941,-9.931507,-9.551776,1.998813,7.735041,-5.616896,8.349131,7.350556,-8.852611,0.855125,-0.355556,5.224024,-9.489725,-5.368951,-9.685963,-6.431167,-0.396181,2.916249,2.654777,-1.833882,0.786952,4.286051,2.272254,7.274944,5.921724,-1.336832,-7.854004,1.475611,7.517711,-8.259364,5.966923,8.919508,9.980419,-6.804580,9.796098,0.794046,9.160314,3.553447,-0.945683,2.582242,8.795084,9.355157,4.990041,-3.357491,8.723360,9.288333,8.398903,-3.380614,4.936559,-1.565843,5.654858,6.714017,-8.646837,6.815230,-4.432306,4.479750,-5.413484,7.772557,3.841308,-2.339592,-3.939767,4.252707,-6.082579,8.630910,-0.364082,-4.065690,9.273390,3.282582,-5.419852,-8.243986,0.550774,6.227008,9.843016,7.671035,-8.798548,8.345493,5.587266,8.361300,-9.078623,5.359532,-6.148675,9.299685,-6.830410,0.579976,2.533142,1.810835,1.334795,6.977167,7.860912,0.362411,-1.273234,-6.696113,0.511892,-3.219458,-0.611590,9.820076,2.999457,0.798409,0.207321,1.084964,-3.044957,9.230651,4.514190,-1.175582,2.759767,-5.661133,-8.438531,-3.188225,-8.553523,-7.981384,-0.332388,7.257702,-1.004332,0.534335,-8.557401,-4.494950,5.812813,-9.509391,-8.983602,0.003510,5.718104,-8.572520,0.439660,6.225396,8.178706,-7.912281,5.995362,0.919255,-9.438093,6.022015,4.479558,-5.477739,7.945271,2.783993,4.139483,-3.000071,0.080042,1.813475,3.332676,-8.004116,-7.678933,-8.316481,7.560995,5.959380,3.421472,-2.791410,-1.019172,1.554242,4.007349,-5.749480,-1.008584,4.405531,7.112709,-6.473206,-0.741601,6.722911,6.587607,-0.134068,4.237934,8.197021,7.752997,-9.356991,-5.262327,7.897976,-4.111071,-3.174639,-6.968442,-2.827477,-6.852902,-4.624047,-1.986742,7.092329,-4.796804,-0.657720,8.405186,-5.636341,4.041365,8.196444,-7.492278,3.194900,-6.074637,9.338220,-6.890890,-8.977099,-3.443376,4.725810,-8.765636,8.283987,-9.914794,-0.180403,4.065849,-1.503480,1.073768,-7.267206,1.489654,8.542040,0.622901,-8.163656,-7.998739,4.529144,-9.564076,2.934980,3.893153,2.777371,-9.544138,-7.859044,-6.256012,-2.808057,-2.366445,1.711848,4.464912,6.328766,-0.110503,-1.973686,-0.889282,0.680139,-8.730120,6.565140,0.216947,9.416321,-9.725933,2.544780,5.247572,4.920543,-8.565237,6.714602,9.962659,9.073219,-9.945171,-3.212833,0.179741,5.270162,3.419542,3.128035,0.784641,-1.629731,-5.386530,-0.489214,-7.148195,9.244975,9.515007,-0.284676,3.940128,-9.727826,8.488060,-2.200028,-2.044516,-0.445256,-4.286154,4.025407,-8.795034,-7.482578,2.569987,-2.841356,-0.177020,3.367634,-4.996099,-4.847416,0.213331,-7.073808,4.553803,5.975228,-5.065125,9.605278,7.705250,4.669643,1.793858,3.908952,-9.298195,-6.593252,4.527729,-5.301439,6.896990,-1.514847,6.840457,4.477688,0.534153,5.113803,-4.226724,6.813499,0.503141,7.653532,-5.792371,9.605852,5.728702,9.934279,1.571304,-9.663892,-4.553505,2.541858,8.592226,-5.364496,5.914522,7.402227,8.089717,-2.465242,9.485214,4.930265,-1.232241,-4.740099,-3.448463,-8.961723,-4.610093,-3.310444,7.063930,-6.293379,-5.593900,-0.531805,-0.234495,9.040430,-7.625141,-1.224773,1.721041,1.932980,5.422661,8.640159,9.859496,8.567128,7.607774,-4.243925,-8.912573,7.390115,5.294274,-7.552827,4.992369,1.728925,3.968841,3.191787,8.441443,-9.407352,8.869282,-5.193428,-2.554418,-0.071843,8.587556,-4.052982,2.586682,-6.531807,8.223267,5.769964,-3.358953,-5.828756,-8.596362,2.047120,-5.366684,-9.785516,0.098628,-0.535681,4.312147,8.608957,3.334640,-6.146376,-1.866810,-9.043351,3.737027,-2.998677,-5.660086,-8.018305,4.700535,6.703533,0.136303,4.238540,-6.045579,-7.558083,-7.101597,5.395378,-3.947498,-9.323790,-2.596236,-0.105073,-2.341241,-3.395466,-9.801700,-7.244891,-5.570792,1.298672,0.248387,-4.244535,9.207566,0.117707,6.090379,5.557150,-8.618588,-8.709312,-1.756778,1.225424,3.621483,-4.772590,-6.641318,0.959076,-0.053271,-0.817912,9.214510,8.517812,-0.652609,-4.222223,7.260126,3.015690,-5.313683,1.590466,-1.178933,6.222369,-0.593031,8.357512,-3.854195,0.006352,-7.385335,7.997695,-7.188996,-1.572611,1.441302,-2.357006,-8.953490,8.779061,8.914665,-0.213616,2.472324,-4.054210,9.875088,-3.457692,-3.163446,-9.093460,5.886334,6.915976,-9.006666,-4.411239,-9.590332,0.379920,-9.203696,4.087526,8.174886,-1.147804,-9.999306,-4.775953,-5.204363,2.432557,-6.757332,2.476776,9.200982,1.261829,-8.779617,-5.280050,5.791386,-9.055136,-0.430143,5.995659,9.445082,-5.045399,-5.560387,8.849134,0.494120,-0.600043,-4.520008,5.233182,-4.500626,0.174904,6.519882,7.804312,8.667807,-8.002011,-0.291481,2.200955,4.562664,7.258188,-0.536239,5.761580,8.117664,5.696373,4.537341,-6.862652,-5.252362,8.657562,0.985426,-6.157915,-9.101802,-5.931746,-8.105373,-3.745804,1.904266,-4.250984,-1.255827,1.782110,4.459114,6.159167,9.669160,-1.371250,6.221319,8.713741,-9.618932,-6.411735,2.127519,0.345797,-4.450973,3.063176,2.176849,-1.148639,1.219590,-4.364067,-1.291547,-8.578018,7.464311,5.425586,-3.407923,2.621243,-9.187466,1.865281,-4.597015,-9.136809,-6.546524,-2.277842,7.782095,9.986389,-0.524717,6.520707,2.340597,-9.521484,-3.950231,1.131673,8.056905,4.565278,-4.282844,9.231090,-4.105254,-7.408850,0.393765,-7.442402,4.729511,-9.777767,2.040478,-7.645373,0.196242,7.317470,8.037319,-6.549175,6.137073,-1.390751,-5.893151,-8.925255,5.568706,9.412026,2.403917,7.768904,3.062621,-2.385822,2.233982,3.681264,-0.953475,-1.510149,0.917788,-5.511047,3.708237,5.577764,-0.569868,-9.096676,-5.396110,-0.778205,1.055878,-1.684850,5.571930,-3.984939,7.574708,6.304307,-0.521135,8.180509,-5.584012,8.022306,8.415098,3.366124,-0.335098,8.069900,0.706607,7.199506,-5.137122,3.514947,-5.986782,-9.374858,3.650363,3.380415,-4.363877,-5.549460,-4.343051,-5.409353,-1.197602,9.036865,9.601082,9.969830,9.477464,2.194948,-1.359411,7.908005,-1.697577,-2.429845,-7.601841,-9.424859,0.726958,9.127158,-9.466157,6.044090,-6.385486,3.642125,6.132696,-6.205744,6.681264,-0.284574,1.542159,1.741741,-9.643818,9.832098,7.414268,6.663390,-4.089237,1.769084,-8.857394,1.058521,3.802580,-4.988801,2.882307,0.765306,-8.165938,-0.208109,-4.714894,-9.479768,-8.192162,5.074610,0.327781,-6.536910,0.653742,-4.957648,-8.572453,-3.592942,-5.013840,-1.995828,-9.660747,4.988442,-5.454852,-5.342263,0.053639,4.841053,-2.272776,5.574116,9.052536,-5.990942,1.071154,-3.066305,-0.338044,-9.439089,0.668082,1.559901,-1.677992,-9.401211,-4.229253,7.372889,5.137046,2.595767,2.743436,3.261723,-9.766128,-6.616672,-0.070603,4.527787,3.383579,-8.710603,3.308062,-2.168049,-1.540558,-0.605370,6.841909,-2.007294,-9.116055,0.196304,-1.418107,-0.772363,-0.508190,8.071713,1.383780,3.696348,-7.707799,1.849647,1.365791,4.350940,-3.474713,0.988119,-1.367530,8.192063,3.545867,-0.249341,7.268771,7.077762,7.680915,6.177036,6.589519,-7.973434,-3.953474,0.303214,2.799584,3.852396,-1.660844,-8.845695,-9.565152,9.118843,-1.975140,0.671623,-2.067233,7.983819,6.082382,-3.576004,3.892887,-9.957169,-4.471625,-7.975035,1.182166,-0.050138,-4.642746,-2.523171,-5.057677,-0.710680,8.979923,-6.464851,-6.450109,-1.336092,-9.037229,8.759908,4.403710,5.749801,5.911294,0.406866,3.255302,2.199275,-4.198426,-4.540168,0.462199,9.222315,0.684215,7.685376,2.152847,8.764922,-0.672264,-1.740174,7.450831,-0.401705,6.314187,5.531262,5.028044,-7.064735,-8.911706,-6.644102,6.813261,-4.205805,2.971306,5.135678,6.767446,1.028538,0.584119,9.960700,0.694769,2.039919,-6.179820,-6.002069,1.182085,4.210550,9.977919,-1.896760,-3.861806,3.911776,-2.278082,-0.421408,-8.767778,9.708460,5.374542,-6.141831,-9.137715,7.465999,-5.525666,-3.950490,-6.324264,2.803679,5.299140,9.677519,-2.978385,-9.874719,8.381534,0.223402,-4.960921,6.312636,8.538231,-6.932587,6.254030,-9.229332,4.584978,-3.705086,7.181943,-5.670059,2.641569,-8.386040,-7.626325,-9.128554,3.331106,1.514953,-1.101648,-3.532913,-0.477561,-2.712425,-5.577138,3.816950,5.462331,-0.718403,1.850006,-6.580249,-9.355984,4.273247,8.033742,-4.508974,1.642806,-9.013646,-4.747739,8.408080,5.445246,-3.912540,0.535997,-1.220630,2.902959,2.771185,7.618212,9.019020,-1.280606,-6.413405,-3.904176,-9.596096,2.805907,-0.586823,5.071070,-9.163874,1.305297,1.605633,6.741025,9.781313,-6.562074,2.027509,-3.257041,6.113447,0.566031,-7.982776,-0.034366,7.752735,3.447764,8.540724,-9.166250,-8.172155,-3.818548,-1.927374,8.457130,8.196577,-6.119903,8.253476,9.337576,1.575439,-8.259328,1.660877,-9.470156,-1.729455,-6.315892,4.668980,-7.917451,-2.313547,4.815006,-9.104276,-4.404194,-3.982368,-8.866322,-4.860182,-3.847608,7.845586,8.785050,9.686642,8.110231,-5.375452,4.057565,-5.098301,2.731896,-3.581099,7.929864,1.722692,-2.262992,-1.394459,3.269432,3.810756,-4.593584,-4.240029,2.627517,-8.207972,-3.059311,-7.043316,-0.130617,7.524624,2.248103,-7.742092,-6.848392,-8.434736,0.413002,7.084862,1.784248,-6.876733,4.394904,-6.886069,-2.552819,-9.586028,8.644252,-7.196466,9.962000,6.912567,8.012620,-1.429957,1.255346,1.988794,2.995208,0.998765,8.473108,1.011217,-5.537991,4.164272,-0.048982,9.664928,-1.850880,0.965139,9.732658,-5.467488,-2.408737,-7.036588,3.265779,-2.387275,0.161399,-4.729919,7.423785,4.347804,5.991914,-1.801643,-9.243915,8.902860,9.494635,8.855121,7.156374,1.152738,-5.718298,2.655864,1.379741,-2.273630,8.734157,3.635949,-8.319784,-4.035403,5.118357,4.680530,9.912076,-0.637595,9.823914,8.005840,3.858122,-0.380696,1.995909,-4.799721,6.654913,5.217022,4.608628,6.895044,5.133976,8.882688,-3.034384,9.575194,5.117612,-9.426505,2.117447,0.434799,6.847937,-8.270376,3.537538,0.219971,5.303621,5.271618,-5.616264,1.479136,-9.863664,-7.120616,5.218456,-4.477346,-4.777786,-4.229195,2.957191,-4.704560,7.803134,4.558173,0.708193,-2.490039,7.929403,8.537799,-9.559618,7.529959,0.382568,-5.936761,7.874779,6.567314,2.521192,9.452602,4.549195,7.792726,-6.739284,5.698000,-5.274864,2.920265,1.860850,0.898120,8.070671,9.497802,-3.755916,7.119442,-6.469030,8.916075,-1.383582,-4.399306,4.698854,4.612071,-0.665430,0.083465,-0.093886,-3.438365,-3.367152,4.405472,1.600125,-1.346922,-9.201629,1.031483,3.809051,7.040737,-1.209144,3.580968,5.178786,7.876957,-4.214428,-3.396801,0.063471,-9.462756,-1.185915,8.285557,-1.431833,-5.232285,-1.419188,-4.615467,-6.640920,5.567525,6.720698,-1.232224,2.478044,0.363217,3.817671,-5.009578,-0.123558,-1.715598,7.840376,-3.800712,7.851523,-1.819917,8.176924,4.507703,-4.704851,-8.920969,-0.695691,7.225985,-1.329566,2.089951,-9.054283,1.695759,-4.794323,-9.880097,0.737138,-0.481885,5.654279,-9.148084,4.119093,-0.398954,0.266065,5.290567,-1.917031,8.135978,0.158864,-1.784076,2.221600,9.054252,8.727145,6.288591,-1.655864,2.554715,-1.316310,-5.548081,-6.931163,-8.833771,1.077538,0.646998,-4.741071,4.973541,6.752331,3.775859,2.969927,-5.995029,-8.329944,7.047023,8.076280,-6.762723,3.839563,1.251234,-3.784587,0.628404,-8.973963,5.545904,0.527703,-0.017855,-2.012896,8.129077,-7.078682,-5.042619,8.892621,-3.766205,-6.155033,7.940706,1.040941,0.160146,-7.054684,-7.636337,8.660779,4.673322,-7.370380,5.491648,0.807029,-0.769626,3.030842,6.619759,-9.411869,1.305006,-2.552322,-8.237244,-4.674701,4.294180,-9.062478,4.485625,5.974855,7.698147,-8.589953,-2.559588,8.887677,-9.475555,5.182020,-2.835491,0.351672,4.632861,-0.810392,6.623985,3.374767,4.608163,-7.461908,-6.760534,1.870119,0.511651,-5.565728,6.036087,-6.645280,-0.681096,9.059599,-8.819322,3.783022,0.342002,3.373030,-9.350737,5.747369,8.945343,-3.891238,-1.932258,3.114408,5.402092,4.478676,3.593979,-2.587771,-6.447572,-6.084357,-2.590845,-0.180300,4.453264,5.034008,-9.672252,3.625766,-2.977889,3.008342,5.940506,9.128963,6.570076,-3.065714,-2.530229,-8.016417,-5.475102,4.587839,-3.283758,-4.908990,-9.791062,0.873866,6.430276,-7.139405,-2.729876,-8.217410,-8.877335,5.283114,-0.512522,-7.691717,-1.036878,6.840610,-4.291271,-1.560661,-9.874849,-8.365431,-1.348586,-8.209546,8.577345,4.284279,-5.235057,6.656769,3.389818,-6.471284,-6.893800,0.774258,-9.645140,-3.510627,3.081840,2.823561,9.845744,-8.971238,-1.441616,4.004908,7.192230,4.738120,-1.769504,-0.926603,8.787819,-7.318222,-1.552943,1.090108,-0.349541,2.601076,-3.854937,-2.989260,-3.149780,3.346947,0.343921,-5.591109,8.894727,-1.327856,5.771825,-8.117079,-7.776541,-6.950864,-2.693845,8.842907,4.961005,-5.013284,6.971418,-7.390903,-2.699135,-4.180043,-5.519222,-0.065881,8.958636,-0.578901,-7.037557,8.274954,4.068876,8.205367,3.680354,-9.973711,2.299450,-5.716846,7.254535,-0.922869,-4.445762,7.082684,-4.280518,9.258322,3.923440,-6.749578,-4.711110,-6.059537,4.164378,0.468840,-2.362959,-7.474272,-1.971251,-4.628524,8.078739,0.528822,-4.410402,-2.992924,0.665069,-2.964908,1.325955,-7.960515,-9.040493,9.160316,-9.033813,5.352105,5.996498,-7.002700,-8.366010,0.809634,6.515299,-2.779224,-6.507046,-9.285172,-5.276742,-9.168075,8.897466,3.182951,6.676962,-7.467305,6.674472,-7.691279,2.492080,-9.482825,9.123142,9.733250,6.087332,-8.896364,-2.894279,0.446623,6.823549,4.074988,-1.221323,4.887297,4.284363,9.628113,8.340889,1.003374,-5.638264,-6.013989,-8.845826,-5.972445,9.782065,0.838406,-4.126569,-8.342726,-1.883899,-4.433958,-4.962345,-1.329805,4.483516,-4.800260,1.005315,8.219143,-7.476539,7.822496,8.314371,-2.156860,1.196738,3.512165,-4.219079,6.763721,1.827627,0.202457,1.771117,6.261358,1.522616,7.855394,-9.249534,-6.364878,6.210477,7.706289,1.994904,2.230175,7.537554,-2.811343,3.972867,-9.627163,-4.500685,-6.602902,8.535631,-9.737568,-0.751081,7.109161,7.953715,4.198432,6.897279,3.167028,-2.064504,9.560244,7.770967,5.534600,-5.887336,6.153974,5.480872,-5.826878,-4.948845,5.571656,3.530944,8.043092,-9.304429,0.442987,0.451738,-1.922772,0.686854,6.789204,-1.967516,7.998703,-4.357583,7.866189,1.320744,-3.135134,-2.201089,-4.604357,-6.906277,-3.278475,-1.577683,-7.311766,2.855130,6.180726,1.435376,7.527111,8.477170,-6.540079,-3.871384,2.567094,8.717888,1.263812,4.004311,5.683669,3.306542,-8.844522,3.530929,6.724170,0.916062,-8.030155,8.463384,-6.954972,-7.113503,-4.537765,-3.069827,-2.822797,1.747324,-6.207853,6.270358,-1.710952,4.297425,-3.863160,5.475112,8.833973,-6.716805,4.825444,-8.875293,-1.815677,-4.009523,2.384730,-2.315962,9.996271,8.632568,-5.156428,3.401591,4.218142,6.260157,-0.472489,3.408748,-9.994677,9.369549,3.722743,6.519714,-0.413697,-5.567351,7.329550,-1.666426,-2.248688,-9.445762,-7.088698,5.136549,-9.948102,-1.960711,6.311229,2.309654,8.040465,-4.652335,-2.665409,6.658143,5.766647,-2.226993,-4.317265,7.719196,-7.595023,-9.832035,-7.286354,-1.258542,-1.328048,8.150914,-3.466314,7.383831,3.072123,-1.417576,-7.055382,-7.010722,7.375133,-1.443809,2.621027,-5.890899,6.200157,7.640168,-5.037222,-8.851021,-2.616358,-1.320042,-4.005632,-1.826498,1.035218,0.539545,-3.710695,-4.517218,-2.989571,-9.099820,-4.786169,8.859375,1.665320,3.606275,-7.427816,-9.137230,0.181868,4.874201,9.398613,3.456438,-8.802788,-2.542079,2.581174,-6.110543,1.764935,7.668250,4.768025,8.200350,5.507601,-9.306147,-8.735538,-3.012674,-0.776889,-6.248132,-3.728023,-8.547483,-1.432189,7.262501,2.126501,-5.316442,-2.745961,7.931234,-7.501233,-6.766053,5.271155,-3.314990,-0.687994,-2.617691,-1.849734,-1.525917,-1.044965,-9.830154,0.524696,-6.485135,0.883283,2.120796,6.835413,-1.953341,9.486598,7.042365,7.781335,-6.580065,5.105745,-2.427585,7.690688,-6.069015,-5.656479,0.649747,-7.132308,-1.631854,-7.614804,-9.727556,-3.580301,1.674030,5.152159,8.114459,-1.811324,-0.093942,-7.168269,-5.791927,1.812371,9.850836,0.861928,0.729872,3.413173,9.763327,3.697250,4.517559,-0.234045,6.684645,0.650484,1.137045,9.927508,0.991193,-0.823067,2.740253,-0.366037,1.613285,3.226919,-8.467057,5.868297,-2.928583,1.421874,-4.727283,4.153708,5.416347,-9.857668,-3.176123,3.501545,8.446272,5.452712,1.286395,-1.940999,7.150876,-3.140507,-4.353165,-7.294052,-1.697409,-2.448165,7.725673,0.616301,-8.132876,8.824487,5.707227,1.956050,7.253427,4.956607,-6.586188,4.445581,-3.735785,9.272540,8.610201,7.491432,0.718999,1.809604,9.357744,-2.561774,-7.468727,1.504333,-5.441565,5.362958,6.393961,-8.336321,-1.972916,-2.693010,6.100927,2.476414,2.008912,7.785968,-0.325636,0.439333,1.914747,2.035260,-3.283156,4.263743,3.894443,-1.648693,2.153757,3.251967,-2.782190,-5.878265,8.207950,2.613813,8.237526,-8.960886,2.088565,4.835692,4.455909,-5.772917,4.418640,-9.914543,-8.625177,-8.528325,4.657789,7.504859,5.376745,-1.921236,1.732981,0.325033,-1.909916,-7.099737,2.625239,-1.016417,8.744130,-0.189134,-0.181471,8.289337,0.299302,-9.092884,9.089549,4.920402,-8.401275,-4.870098,7.073399,-3.242266,8.885659,4.025487,-4.453583,3.728752,-0.706204,5.828741,-7.805919,-3.710637,-3.606915,-4.211550,-3.397204,-8.942531,2.730905,0.410861,-6.432150,-5.437530,-3.116100,-8.601420,2.655449,-7.730381,-7.431067,-2.755671,2.370539,-5.066743,-3.564885,5.521912,-5.415732,4.731528,-5.484757,-3.899431,-8.235263,-1.364696,-1.209487,7.066038,-7.337059,-1.575853,8.529871,3.949456,1.314179,-8.279125,4.331255,-1.706226,8.705839,4.813968,-1.309234,-8.189401,2.682209,-5.395537,-6.242632,8.414280,3.456000,2.992256,6.421736,6.582866,-9.904996,-1.346605,-0.807551,-4.301794,-5.745838,3.363431,7.696385,3.839117,3.285254,3.425178,5.943322,-5.303126,-6.898622,-8.759942,9.111603,-3.227187,3.082781,9.261433,6.182167,-3.671852,0.745360,2.497342,2.574681,6.887327,-8.402990,-9.340126,-8.730154,-0.124118,-7.976038,-8.100127,5.571923,-7.985704,6.756446,-3.031141,4.086976,-2.893862,-9.727745,8.055039,-4.942895,-2.003539,9.203196,-6.063957,-6.004800,-2.735210,0.843920,-8.684579,0.492269,-4.610348,-1.342083,-0.374557,8.907025,-2.552102,-0.384481,9.373251,4.395157,2.942907,7.380339,-4.637464,-1.098959,-2.416187,3.671605,-8.559168,7.359268,0.514684,2.200486,0.521582,-6.594594,3.827991,-0.926988,4.389045,-4.249151,-3.896204,-6.808462,9.476795,-9.615191,0.708395,-8.398734,-1.071174,-8.646885,8.048848,2.330836,-7.737496,1.099978,-6.633623,-3.385800,0.664313,-6.617251,-1.214984,-4.346578,-7.892550,-5.346057,-3.047448,1.189423,-4.027269,-7.548019,-8.028396,7.935322,4.599071,-4.804934,-9.017729,7.605488,8.652763,1.269910,-7.035713,-4.105319,-2.411554,-2.930720,2.573433,-8.514638,6.806127,-9.747317,-4.128525,-5.355017,-9.305383,-1.951309,-5.926984,-7.852521,8.755828,6.289968,7.974163,-7.153917,-2.244248,-7.266230,4.999688,-7.506188,6.726892,-6.552795,-1.695826,9.445152,2.870224,3.780940,3.592270,5.976105,7.798274,-5.940656,-7.112845,1.134523,-4.887782,7.519647,-7.771426,-4.155483,-3.365394,9.036080,-1.093730,6.220802,-0.224718,1.586810,-5.681840,8.779169,4.434296,-8.328104,-9.586828,5.116264,9.078452,-1.605619,-5.563114,5.801662,1.487101,1.858372,5.615017,1.863358,0.378611,1.946058,-1.752183,0.106935,-9.396019,6.530388,6.847796,7.803095,3.244514,-9.959448,8.755056,-9.113738,8.409392,-9.316814,-8.284456,-2.034295,-1.855739,7.423291,-0.192630,-0.163773,-3.442441,-3.745932,-8.022305,-7.157466,2.187796,5.828670,-0.277275,-3.146692,2.101684,-4.487054,-2.878778,9.444134,-5.576226,1.396815,-9.071042,-7.958917,-7.894512,-8.190834,-5.930000,-3.352695,-8.564515,-9.747388,-7.002600,-1.731523,1.183393,0.651294,8.535105,-4.305571,-0.850681,4.021652,-3.364670,9.849504,-2.084230,0.157775,7.100361,-6.119267,-3.818095,-2.972021,4.299044,-4.636267,-5.895630,8.524808,6.543343,1.196890,1.557457,-4.882760,-8.113597,-7.066217,1.771183,-3.452196,-6.059132,-9.253598,5.281280,6.830760,5.536024,-9.216848,2.321028,-1.973114,9.085978,-2.096188,-1.569112,-8.209400,6.812635,7.226868,2.958197,0.706949,-1.177371,-8.016218,-2.068012,0.988880,8.219206,2.396708,4.812765,5.571690,-0.285976,1.929482,-3.819740,5.347137,2.074742,2.041612,-6.831906,-3.067938,-2.503329,9.005782,-7.083243,4.003659,-4.545592,-5.555730,-3.342693,-4.825237,-9.360643,7.598194,-2.811900,-3.107426,3.769816,-5.014381,-2.501476,-6.015806,1.281130,0.721261,-9.107462,4.271948,-0.800194,-8.239217,-1.312316,1.552311,1.933223,7.772913,2.763844,8.163098,7.315601,3.955057,-6.015490,8.666692,8.109846,0.089341,0.271398,-9.229384,-0.101022,-0.687984,2.239861,7.631901,-3.650754,-6.909148,-7.999659,-8.380289,1.013189,0.762350,7.567829,5.482387,-9.259927,7.478218,-4.661573,3.856305,-0.724223,1.622218,5.222313,-2.630178,7.061313,4.156869,-3.288158,-0.153086,0.515090,1.582983,-4.314233,3.786326,8.160250,-5.632894,-6.731921,6.269109,6.690672,3.146029,2.240429,-1.630130,-9.027110,8.487518,6.117203,0.410220,7.012613,0.292903,2.372405,-0.356967,5.032598,-9.592318,-8.062610,0.442358,-7.486851,-6.083218,-6.476314,0.791786,9.623237,-4.215320,-3.908176,7.867104,-2.199042,8.381732,-3.710785,9.476134,-7.520330,8.624246,1.429910,-7.767300,8.358749,0.435485,3.176502,8.123315,0.224640,4.674241,4.807711,-8.757078,5.471661,6.290062,7.973784,-1.349500,0.234952,9.715484,-3.628987,-6.616576,-6.906060,9.853177,-7.272634,-4.333493,-8.786758,7.661316,0.814589,-8.483113,2.366337,-3.250315,-7.640244,-3.938493,-3.787053,-2.708712,0.054311,2.561793,-8.387994,5.855551,3.887342,4.044166,5.732454,0.219748,-8.069510,-4.181807,7.119702,-3.558889,9.809883,1.678041,-9.540749,-8.109050,9.004760,-1.959264,-6.548131,-1.416504,7.258888,-3.662497,9.367722,5.978674,9.518662,7.342465,-1.284973,-7.349522,6.510451,-4.845654,2.001717,6.495425,-1.026726,-5.384070,-1.556064,-8.223207,-4.554651,-1.313464,-8.140325,5.915619,6.245225,-9.648823,3.267628,6.703709,3.814975,-5.608870], dtype = "float32")#candidate|2998|(3600,)|const|float32
var_2999 = relay.var("var_2999", dtype = "int8", shape = (1120,))#candidate|2999|(1120,)|var|int8
const_3000 = relay.const([[-6.655224],[0.241207],[-8.068255],[-6.577645],[9.277210],[0.798800],[-4.804394],[-6.530021],[0.583767],[6.048851],[-0.079616],[7.914619],[-0.534550],[6.501180],[-3.479338],[4.701580],[9.004887],[-5.601604],[-7.465593],[4.275366],[-9.768459],[2.432508],[3.999184],[5.107297],[9.635171],[1.813950],[-1.330124],[2.815848],[2.848360],[9.837619],[4.229578],[-4.052858],[9.595405],[-8.906272],[-9.553275],[9.319676],[-3.936247],[5.403752],[-4.202076],[-8.758171],[8.734881],[8.724860],[2.013063],[-9.815726],[-3.194560],[-5.591934],[-1.766867],[-9.069385],[3.066367],[3.377046],[-1.206696],[7.966209],[6.727688],[2.126312],[1.434016],[-6.527645],[0.030965],[-4.268748],[-5.147900],[8.503754],[7.597170],[-3.123532],[9.275080],[6.308016],[-7.553877],[-5.884154],[-9.357169],[6.295769],[-8.836215],[9.058069],[5.329627],[-1.904551],[-1.748851],[2.605469],[2.434874],[2.601857],[-8.291428],[-9.785598],[-0.562390],[6.818852],[-6.902872],[7.242943],[5.864557],[-1.438753],[3.822863],[9.259059],[7.857726],[1.812691],[-6.008818],[6.644755],[-9.590249],[-6.678114],[-7.277294],[-7.936424],[0.934280],[8.774826],[4.296700],[-8.184947],[-0.461671],[-2.197151],[-6.191950],[-1.678625],[3.921338],[5.282232],[-7.083769],[0.833069],[7.256691],[9.124374],[-1.917072],[-7.442999],[3.802812],[6.234202],[6.400520],[6.687368],[-7.585304],[4.363198],[7.265095],[1.401277],[-9.625031],[9.724191],[0.391202],[3.976097],[-5.405883],[-7.556009],[-9.441899],[-9.629876],[6.608159],[-9.745561],[3.982658],[-8.991871],[8.237916],[9.089216],[3.212011],[1.964796],[0.358170],[-9.463329],[8.240155],[-7.751215],[-1.344217],[-9.342523],[1.256019],[2.164215],[-9.603665],[0.410692],[0.952803],[6.783762],[-9.932702],[-2.613238],[6.174294],[3.326902],[-6.470441],[2.329558],[3.556569],[5.047531],[0.488005],[-8.379081],[7.622399],[0.849997],[1.182117],[2.388686],[-5.937677],[9.053803],[7.679312],[-2.234286],[6.654290],[-8.143103],[9.072008],[6.779173],[3.322669],[-9.081753],[-8.149905],[4.177412],[-8.619114],[0.150711],[-3.534402],[4.270813],[4.943916],[0.352951],[-2.323023],[-4.013571],[6.534711],[0.483104],[-3.826851],[7.380986],[9.673011],[-9.163270],[-6.709379],[9.366531],[-4.622771],[-4.136915],[-8.886024],[1.895200],[-0.619799],[-8.702331],[-7.623497],[-3.926639],[2.735612],[-2.132358],[-9.971004],[9.028657],[-0.518199],[4.939861],[-2.946288],[8.150784],[5.645513],[4.953463],[8.204154],[2.178859],[6.387116],[-1.610326],[-8.225208],[5.151453],[-7.316253],[-4.900700],[0.335409],[9.790799],[0.223831],[-1.202559],[7.885823],[0.087100],[9.496072],[-9.883201],[8.468106],[-2.551138],[-5.050971],[0.556228],[7.888120],[-5.551031],[-5.304082],[-1.839977],[5.595298],[0.001183],[-9.150653],[-3.872297],[-4.514543],[-8.921874],[-9.577205],[-7.748050],[-7.180850],[-3.921517],[-5.623105],[-7.051889],[-9.273404],[4.012617],[5.621403],[-4.719389],[5.926367],[8.534110],[0.449076],[-0.713306],[4.823674],[9.365291],[9.693640],[-0.693490],[-8.178437],[-7.183605],[-6.418979],[-7.103239],[-3.714454],[4.370780],[9.526324],[-6.900784],[-7.333016],[-5.244183],[7.093704],[2.609208],[3.693436],[-6.909688],[-5.138432],[-9.619392],[5.940410],[4.818634],[5.322543],[-7.243320],[-9.302013],[3.890415],[3.059065],[-2.725396],[-6.609045],[1.216575],[4.601214],[-6.954846],[8.266290],[-1.924998],[1.310962],[-5.116617],[2.106261],[-5.611407],[1.559596],[-2.831562],[4.305332],[3.920060],[8.716604],[-7.706782],[-4.783228],[7.087502],[-4.471828],[-6.303577],[-2.968218],[2.849561],[2.822284],[-2.621714],[-1.170472],[-8.975335],[3.331329],[0.377799],[-6.759298],[2.920905],[-4.007135],[0.665672],[4.344044],[3.061563],[2.655426],[7.333736],[-1.728984],[3.589298],[-9.659965],[-1.501909],[4.008184],[-1.302036],[-2.499667],[3.673165],[-9.869456],[-3.567204],[-9.534378],[6.503399],[8.267464],[1.351583],[-6.291305],[-2.231850],[8.244814],[6.313355],[-4.514004],[-3.694588],[-8.104436],[-8.698488],[-5.746357],[3.448184],[6.197960],[-8.415245],[-1.584946],[0.352997],[-6.131412],[-7.812628],[-0.932253],[1.041013],[-2.100429],[8.864754],[-9.541894],[-5.762600],[1.349967],[1.270077],[-4.524413],[-6.537066],[6.247935],[3.701161],[6.270557],[3.392404],[9.759658],[-8.918600],[-2.317082],[-2.927943],[-0.211513],[5.367804],[7.384562],[1.531867],[8.264158],[2.885604],[-6.662316],[7.310361],[-2.688572],[5.804896],[4.678174],[7.491518],[-3.913021],[-7.429886],[5.125959],[8.875632],[0.275831],[-4.658296],[8.372760],[7.713000],[2.787381],[-5.146901],[-5.320376],[5.546363],[7.977491],[-1.019133],[5.939381],[1.813346],[-6.131173],[-8.321423],[-6.708745],[2.721226],[4.369642],[8.763784],[-6.592615],[6.093614],[7.881159],[3.594035],[8.274943],[-0.886463],[9.877186],[3.242033],[-9.582415],[-2.480813],[9.627732],[-4.349884],[-7.931991],[1.985160],[6.322533],[-6.103080],[7.918852],[4.854342],[-2.351340],[-1.114185],[8.680553],[-0.682864],[-3.197651],[1.335704],[-5.678122],[8.610546],[2.323373],[-7.482154],[9.255251],[1.156007],[-2.804286],[-6.232749],[0.462622],[-5.915092],[-4.322691],[3.960785],[6.009826],[-4.423661],[3.726963],[-8.194875],[2.076422],[6.869289],[1.479369],[1.084557],[5.731457],[6.000830],[-2.462513],[9.449918],[-2.778225],[0.437921],[5.102452],[-7.496639],[-4.434165],[-2.026800],[8.707130],[-2.164737],[-8.857771],[9.998174],[1.542029],[-4.120946],[6.025482],[-4.325315],[-2.141897],[3.872746],[9.151922],[4.499708],[3.149660],[6.608582],[9.836775],[9.620015],[-0.498130],[5.048698],[-1.814720],[-9.830340],[5.740679],[-5.291396],[-7.642532],[2.840346],[7.026997],[1.183257],[5.992124],[1.093901],[4.978431],[7.754299]], dtype = "float32")#candidate|3000|(480, 1)|const|float32
call_2996 = relay.TupleGetItem(func_2296_call(relay.reshape(var_2997.astype('int8'), [12, 8, 6]), relay.reshape(const_2998.astype('float32'), [3600,]), relay.reshape(var_2999.astype('int8'), [1120,]), relay.reshape(const_3000.astype('float32'), [480,]), ), 2)
call_3001 = relay.TupleGetItem(func_2301_call(relay.reshape(var_2997.astype('int8'), [12, 8, 6]), relay.reshape(const_2998.astype('float32'), [3600,]), relay.reshape(var_2999.astype('int8'), [1120,]), relay.reshape(const_3000.astype('float32'), [480,]), ), 2)
output = relay.Tuple([bop_2935,call_2952,bop_2979,bop_2984,call_2996,var_2997,const_2998,var_2999,const_3000,])
output2 = relay.Tuple([bop_2935,call_2954,bop_2979,bop_2984,call_3001,var_2997,const_2998,var_2999,const_3000,])
func_3006 = relay.Function([var_2953,var_2983,var_2997,var_2999,], output)
mod['func_3006'] = func_3006
mod = relay.transform.InferType()(mod)
mutated_mod['func_3006'] = func_3006
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3006_call = mutated_mod.get_global_var('func_3006')
var_3008 = relay.var("var_3008", dtype = "int16", shape = (1, 660))#candidate|3008|(1, 660)|var|int16
var_3009 = relay.var("var_3009", dtype = "int16", shape = (14, 660))#candidate|3009|(14, 660)|var|int16
var_3010 = relay.var("var_3010", dtype = "int8", shape = (576, 1))#candidate|3010|(576, 1)|var|int8
var_3011 = relay.var("var_3011", dtype = "int8", shape = (1120,))#candidate|3011|(1120,)|var|int8
call_3007 = func_3006_call(var_3008,var_3009,var_3010,var_3011,)
output = call_3007
func_3012 = relay.Function([var_3008,var_3009,var_3010,var_3011,], output)
mutated_mod['func_3012'] = func_3012
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3240 = relay.const([[[-10,-3,-10,-6],[10,-3,-7,4],[8,-4,3,-9],[-9,-3,-3,4],[-3,-6,-1,-7],[-8,-7,-1,-8],[-4,-1,-10,-3],[-5,1,5,-3],[2,9,-2,4],[5,4,-4,-4]],[[3,-5,-8,-2],[-9,2,6,-10],[5,-2,8,-8],[7,8,2,-2],[-1,-8,7,3],[2,-8,3,7],[-1,-4,4,1],[-1,5,-5,10],[3,-5,7,4],[3,8,-4,-1]],[[-5,-4,-8,2],[-6,-5,-3,-6],[-3,5,-7,9],[-3,-6,-3,1],[-6,7,-10,3],[6,-6,3,5],[3,5,-1,1],[-1,-2,-6,2],[-10,5,-8,7],[-8,-4,4,-6]],[[9,6,4,-7],[-2,7,4,9],[-8,3,5,-1],[2,2,5,1],[-7,-6,-4,-6],[-2,6,2,-9],[2,-8,1,-7],[-3,8,-9,1],[-8,9,-10,10],[-7,7,4,2]],[[9,2,-7,2],[10,-7,-1,-4],[-7,-2,-7,-10],[-1,-6,4,-10],[7,-2,2,6],[6,-2,-4,-9],[-9,-10,5,3],[-1,-8,6,-8],[3,7,6,9],[7,-8,-10,-3]],[[-7,-7,7,6],[-6,2,6,5],[2,5,3,7],[-7,-2,3,6],[-10,-2,-1,-2],[-7,-1,6,2],[-5,-3,3,10],[-6,-7,-6,1],[-5,3,-3,7],[1,5,-3,5]]], dtype = "int8")#candidate|3240|(6, 10, 4)|const|int8
var_3241 = relay.var("var_3241", dtype = "int8", shape = (6, 10, 4))#candidate|3241|(6, 10, 4)|var|int8
bop_3242 = relay.bitwise_xor(const_3240.astype('int8'), relay.reshape(var_3241.astype('int8'), relay.shape_of(const_3240))) # shape=(6, 10, 4)
uop_3246 = relay.atanh(var_3241.astype('float64')) # shape=(6, 10, 4)
output = relay.Tuple([bop_3242,uop_3246,])
output2 = relay.Tuple([bop_3242,uop_3246,])
func_3266 = relay.Function([var_3241,], output)
mod['func_3266'] = func_3266
mod = relay.transform.InferType()(mod)
var_3267 = relay.var("var_3267", dtype = "int8", shape = (6, 10, 4))#candidate|3267|(6, 10, 4)|var|int8
output = func_3266(var_3267)
func_3268 = relay.Function([var_3267], output)
mutated_mod['func_3268'] = func_3268
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3620 = relay.var("var_3620", dtype = "float64", shape = (13, 13, 9))#candidate|3620|(13, 13, 9)|var|float64
uop_3621 = relay.log(var_3620.astype('float64')) # shape=(13, 13, 9)
const_3628 = relay.const([[[2.323777,-1.566484,3.326912,8.896910,1.620460,1.514554,9.817649,7.510717,-1.838264],[-4.436153,7.434360,4.621692,-2.292670,5.731509,5.937231,-9.048705,-1.893126,-8.784012],[3.528367,6.487138,7.933225,-3.969884,6.849309,-0.617352,7.591830,5.667483,7.227454],[-0.739782,2.432057,0.841326,-6.796203,-1.988534,-4.973671,2.863422,-1.503980,-5.004115],[4.989750,-0.411867,9.024613,9.376191,-9.984415,6.679643,9.983372,5.710278,-9.678979],[0.844621,8.526019,7.015073,-1.909745,9.711918,0.530099,4.798773,-1.904209,-0.510052],[-5.167461,6.398060,-6.193307,6.480735,-3.862224,-3.226463,0.912844,-6.688764,3.654197],[-7.636876,-6.000324,1.429396,-7.858650,-5.313732,-0.137548,-8.002257,-6.719368,8.927573],[-0.828628,-8.728547,-0.379894,5.303188,9.457709,-2.176112,-9.070925,-0.120050,-6.250007],[-2.229593,-0.857344,1.642995,0.161142,-3.936089,0.767154,-1.173708,-2.926329,6.774446],[-3.932833,-3.178801,-7.285077,-0.940702,1.216806,0.188820,-6.510794,-1.379050,-4.700983],[-1.764827,5.861418,-0.433800,-2.205719,0.016599,3.583841,8.106137,4.250658,0.910393],[-5.693939,-3.309546,6.112463,7.561599,-9.017118,-2.013181,-4.307539,-8.516664,2.973691]],[[-6.838673,-9.579758,-3.803882,-6.439213,8.421436,5.828756,1.665492,-1.248302,-2.490458],[2.677302,-3.627953,4.874014,7.594222,9.109529,-9.791785,-4.409062,-2.974814,-6.704527],[-7.933814,7.815425,-5.948452,2.934906,-4.526932,-6.889246,6.353921,7.922105,3.125445],[-9.180329,-4.217840,-8.690947,1.261944,5.659468,3.591881,-0.822785,6.139952,4.947202],[8.405237,1.333848,3.664082,-8.433173,-6.731564,-9.117733,-7.663919,-1.059658,-1.200263],[9.824710,7.778064,6.188000,-7.471575,-8.613840,9.277555,-4.699356,-0.658511,2.031666],[2.145822,-5.400350,4.461139,6.005385,-9.291837,-7.029761,-3.575268,-4.616612,-9.073012],[0.349951,0.969435,-5.877749,7.325699,4.735038,7.172333,7.250864,-8.196941,-7.804802],[-6.404271,-7.919216,4.701408,7.394370,-4.280028,6.800262,-5.056111,-8.394320,-2.030020],[-1.421871,7.286372,-8.240696,-9.753532,9.693082,7.483854,-7.966415,8.996914,-7.568410],[0.859409,-1.382735,4.753527,1.638466,-4.107045,-7.708351,-1.999825,8.707267,-5.920701],[-2.247624,9.825568,-1.460718,0.458797,1.651151,8.582761,7.502248,5.583937,-5.316064],[2.263899,-3.064372,8.467733,4.753091,-5.167607,8.382694,-6.424474,4.065533,0.919227]],[[-2.146337,1.122623,2.451595,-9.058415,7.112107,5.910155,-4.456378,2.658468,-4.301857],[1.135564,8.076362,-9.572828,1.398989,-0.650309,3.874257,-7.567732,9.375606,6.669952],[-0.718237,1.092449,8.478686,2.375649,-4.827139,6.536561,-0.993016,-5.015459,-3.693157],[-9.852146,6.276875,-3.426630,4.524962,-3.416799,-6.857419,0.075012,0.200538,3.488642],[2.590885,8.654362,5.674703,6.466156,9.291919,8.321372,-1.097406,3.353655,4.955436],[-3.385769,-0.071403,4.830641,-5.957293,5.289061,4.536238,9.308505,-1.885293,-4.256219],[8.977201,8.482270,0.162756,-7.234250,-4.321182,1.223725,7.049871,-5.017852,4.079472],[6.617458,8.525565,5.373594,8.261456,8.717760,9.298459,8.596911,1.419641,-5.047430],[-7.382572,4.822086,-4.801873,-6.922369,-0.344962,-5.832783,-4.449988,-1.067093,-5.278618],[-3.183461,-2.663925,2.711367,-7.612833,-4.014368,4.886063,-5.063131,8.394627,2.112689],[4.323818,7.541141,-9.508006,6.323073,0.188420,-7.096721,9.216922,6.322316,7.383344],[-3.029346,-1.982200,8.359261,3.548884,9.634744,7.979483,-4.044164,-2.415882,1.691813],[9.596173,9.470828,-7.290877,7.012983,-4.048964,7.113444,1.577859,8.811746,-6.801231]],[[-0.840027,4.172143,-3.687035,-4.294185,6.928834,-3.179595,7.963908,9.653623,2.708473],[5.553819,7.047137,5.139349,8.358052,-8.098064,-0.291160,0.802546,-5.628124,-4.365473],[-0.726087,-0.972376,9.710152,-5.679878,-3.738761,7.428930,6.848243,-1.335320,4.246970],[1.414323,4.220036,8.606785,-8.752285,-0.816638,6.952892,7.405742,4.321155,6.252377],[-1.517330,5.487032,4.869349,-3.064886,2.040857,-6.271685,5.543196,3.073062,8.441319],[-9.711891,-5.830896,4.892509,-5.376560,5.727250,-0.967361,-3.205269,-0.610955,6.896130],[9.779518,-3.747292,4.323064,4.179099,-0.667142,3.331354,8.335481,0.227422,-3.156353],[-8.463197,4.412841,-6.557485,-7.146941,-3.729789,-7.066607,8.032151,-4.671508,5.207756],[-8.484279,-2.363702,9.701052,-2.856394,6.891746,-8.705704,-1.920020,-7.904162,-3.149935],[2.953611,-4.352754,7.567903,-9.321144,-7.273354,-8.394668,-7.340316,-4.208279,9.164294],[-5.416357,-4.114222,2.784944,8.790665,3.446843,2.733970,-6.548326,1.585696,7.239639],[2.577786,1.874924,-0.620167,3.874546,-7.839582,2.106417,-6.425853,0.137701,5.425820],[1.994832,4.885937,1.392969,7.439962,9.505338,-6.841272,1.837584,-8.775314,5.839334]],[[7.854744,3.214098,-2.056466,8.591837,-4.033193,6.438943,-7.918402,-4.769780,-3.889532],[-3.084352,9.345940,-7.118913,-1.270547,-4.257612,-8.555143,7.556216,-6.470324,7.466845],[0.513835,8.326741,5.300016,-0.994325,-6.798187,6.749911,-9.943057,-9.522293,-3.381710],[5.657129,-1.178880,9.218047,7.913454,-5.660601,-6.514496,-8.464485,6.126758,7.525193],[-4.003919,-6.483076,1.274971,0.062970,5.549473,9.746874,-8.952228,3.330165,-7.927948],[2.529387,6.977268,-7.495312,9.629765,-6.809745,-8.667323,-3.783507,7.209811,6.395567],[-6.616931,-8.668999,-2.866215,2.477112,-7.076297,-4.506414,-3.585023,-7.761738,9.156780],[4.357668,5.853294,1.565597,8.702282,-7.374318,-6.571885,8.429208,0.635993,3.736369],[-8.861259,-8.530379,8.785598,5.345498,5.126999,3.996619,-4.939085,0.562009,-1.633984],[-3.217639,-4.158996,-5.544471,-3.924029,-0.226588,5.400604,-0.020151,-0.687112,-3.664156],[8.674919,3.564600,2.218212,7.337075,1.417270,0.615235,-3.892514,-3.297998,2.353121],[1.618935,-5.949612,6.138932,4.555553,9.236216,-1.798855,9.316953,-0.497977,-4.839608],[-2.863830,7.273804,6.416298,4.634872,-5.032262,-2.245274,5.850846,-9.803911,0.804810]],[[4.609114,1.078125,2.011369,4.866475,4.641185,3.548488,1.346016,8.146255,-2.165956],[-9.871311,-0.196902,0.933281,-1.609538,8.210040,-2.051458,-7.690389,8.879977,5.438529],[1.291580,-7.730312,-1.719570,4.302240,5.878352,-4.749651,7.401411,6.473263,-0.583477],[-7.288881,0.217328,8.294622,7.646508,-7.706720,9.162281,4.150844,-3.725443,0.754172],[0.610279,-4.899405,6.549579,-0.951301,7.469751,6.436913,-2.598304,-1.112701,1.575937],[-3.175752,1.344370,1.869469,-2.048865,-5.869229,-7.621443,7.987211,-7.119706,-6.506626],[-4.776472,-3.855075,8.410334,0.667077,8.299288,4.545964,9.354788,8.094704,-5.866000],[6.343710,3.082071,0.579825,3.731199,-6.919738,0.865317,-9.153472,7.391343,7.972301],[-3.670761,3.241445,1.673494,-0.669043,-1.041735,2.143776,-2.384541,8.420227,-4.292307],[-4.009815,3.093583,8.668510,2.656652,-5.218880,-3.441892,6.430279,9.114019,2.124210],[-0.527417,4.176187,8.646272,4.052370,-8.984706,-6.711559,-2.287385,-6.512247,8.498214],[-9.187895,0.472167,1.540958,-8.302624,-7.829782,5.405684,-4.196864,1.405467,-5.488610],[0.909380,3.909050,-0.184829,-3.138941,-9.447240,-1.351055,4.454424,-2.256730,-2.203814]],[[-2.674628,0.007626,-1.086179,-4.763931,-3.776975,-8.194071,0.192819,-7.473217,2.829443],[-2.504497,1.616237,4.061561,-0.200437,-0.903284,4.871778,-9.304553,-4.279901,1.075476],[0.758936,1.540387,0.563999,-3.633400,3.008752,4.452629,-1.956555,3.421652,-5.587113],[5.695001,6.747445,-5.277269,-1.333949,-4.267622,-1.704643,1.469724,-0.859791,0.955317],[9.889085,-7.249784,-5.023430,5.548297,8.411696,7.295161,0.033511,-9.631744,-0.097761],[-2.477031,1.838679,4.335118,-3.009858,1.097101,-6.004043,-3.562789,7.299620,-7.332525],[6.229199,-6.306091,-6.743963,-2.478771,-2.931943,-9.798185,6.140525,-7.719367,-0.022668],[-0.165794,-0.047793,2.860382,-8.447252,-4.291461,-7.696418,-2.980527,6.210046,-3.664875],[-7.509787,0.395423,0.082233,6.053413,-4.986292,4.665328,-3.664263,0.656352,-8.048356],[7.774445,6.322156,-8.026645,-0.788386,4.114583,0.069078,-6.337345,-9.318568,-0.024627],[9.002497,6.063857,6.055210,-8.334196,-0.573901,1.241536,-2.356332,-4.202488,-4.966892],[1.396808,7.620783,-9.982865,-5.191637,-9.091410,9.752869,-0.354163,-6.461158,-0.580099],[1.285981,7.754489,6.195369,-1.686804,0.369226,8.283457,9.788252,7.759650,0.259132]],[[8.837584,-2.375437,-6.794402,-5.932361,-7.018291,-0.387578,3.440093,-4.455001,-0.229283],[2.364372,5.966682,1.904333,-4.732935,-3.845039,5.597340,-6.309551,6.071911,-0.028074],[-0.362948,5.045265,5.153203,1.234997,9.067499,-0.492367,8.660842,-6.114282,-7.708925],[1.946196,-8.851588,-6.521761,7.273251,-0.271224,1.726504,6.624785,8.728911,9.132613],[-7.800749,1.014314,-4.991904,5.418075,9.983827,-7.807307,2.506337,3.446049,3.469037],[2.566348,-1.370973,-0.556336,-5.061610,8.804994,-1.066455,5.228048,3.593643,-6.914113],[-5.065946,-7.872382,1.407745,8.670754,-4.149526,-0.334433,3.058570,4.381431,3.582205],[0.323390,5.502052,1.763862,7.620444,-4.103293,-5.518050,-0.008578,5.395626,-3.900761],[-5.508929,9.880165,-1.083618,-6.808199,-1.226854,2.532517,6.268032,3.276040,0.525994],[-8.228360,7.607841,-6.206171,3.742769,-7.432612,8.189858,7.272616,8.391912,-1.509723],[-9.881714,9.256089,-4.034319,-3.132267,8.833564,-3.820923,7.818963,-4.724626,-2.048273],[-9.802403,1.860665,-7.623383,1.669390,-9.069321,-8.153682,8.728751,-9.580251,8.722836],[7.279982,-9.619184,-1.893050,-2.818337,-4.390062,-9.711598,9.827473,-8.441203,-6.753264]],[[4.717577,5.621296,-0.053172,-2.314033,-9.134003,-6.867211,-6.253244,-4.910891,-2.384575],[2.231425,-9.825284,4.494087,-6.410706,4.743237,-4.255931,0.209801,2.487563,4.776760],[9.608850,8.929542,-7.761051,5.689000,-6.179401,-3.529867,-4.664939,8.182654,1.142701],[-9.947790,4.146465,-5.319641,0.739119,3.597657,-4.819589,-6.007724,-3.213547,-0.941453],[5.762478,4.183967,7.156333,-1.483987,-3.163251,-2.560797,0.329279,3.344550,-7.276918],[-5.882195,-2.911875,-6.026645,-0.995184,-8.900516,6.970420,-3.621796,-8.433507,-5.834801],[8.151693,-1.657063,-8.171950,5.499477,2.961846,-7.647787,-8.662392,1.567806,-6.505525],[-8.937063,-3.338637,6.034550,5.154748,-6.274606,-9.157570,2.009488,8.281739,5.413433],[-1.176777,4.456757,7.788210,3.407266,-0.428557,-5.076183,-1.612236,-0.743527,3.164948],[-9.221597,9.274036,0.740626,6.393475,1.649768,-4.167021,-3.794146,9.117592,-1.821598],[5.187128,-9.502588,-8.790182,-6.665470,1.495031,8.874556,5.184207,7.350316,-1.929768],[-8.306011,8.543778,-5.012448,-3.012992,-6.384299,1.880627,-1.683628,-5.489085,-9.134169],[-6.254655,-1.073652,6.963392,-1.680525,6.983404,6.466755,-6.854014,-0.621571,6.824624]],[[3.836294,0.503741,6.297874,-8.068778,-4.223578,9.058882,7.586525,7.138944,4.118890],[0.038005,1.200561,-4.106864,-2.123442,-1.799350,-6.970067,-7.102550,0.050203,-0.896056],[-4.010447,5.805837,2.815854,6.972124,-8.400797,-1.660930,-7.205068,1.686494,7.223276],[-4.111372,5.715156,-8.168140,9.815500,8.576080,-4.687022,8.786216,2.526190,3.161992],[2.622369,9.332311,-7.963690,-3.360804,-8.236687,-2.324147,6.428496,7.049949,-2.397420],[-2.219436,-9.252211,-5.950350,5.060233,9.667746,-3.337700,-3.463317,-3.175319,4.557843],[2.074270,8.411087,-3.326738,0.582110,-2.079687,-3.105500,-8.915335,-2.918328,-0.726495],[-2.592974,7.581648,-2.859647,-2.744308,8.944160,0.931525,8.446416,-0.329650,-1.061837],[9.482566,-5.250270,-6.584361,-5.819013,-4.425789,-5.793134,8.076681,-6.198166,-1.928487],[0.586117,0.898548,0.399975,6.503623,-7.244363,5.233122,-6.159814,-8.138521,5.717416],[1.252685,-4.590064,-1.168207,0.033604,5.904837,-0.846428,-9.880866,-5.766594,5.862852],[-0.069746,8.520268,-1.298550,7.833926,4.121152,-8.987016,2.828434,-2.150003,4.936889],[-8.518209,-9.974224,-0.441279,2.472892,-0.772289,4.262314,-5.973159,9.549733,-7.412391]],[[-9.650608,-0.377658,2.851552,-3.176956,5.228314,-5.057951,-8.355080,6.538587,-9.529134],[2.182053,-6.110000,-4.126631,0.730278,-4.008028,-6.709959,4.605377,-0.145636,-3.646846],[-7.852642,-2.915999,9.966393,-4.125543,1.936639,-8.463477,1.712899,-7.869818,-4.860280],[3.782197,2.756068,-4.863977,-3.471755,-3.183230,7.394087,0.165106,-2.991663,0.824635],[-1.926182,8.915460,3.392303,-3.414599,4.588936,6.484526,4.091763,-3.049218,-4.649290],[-3.805492,-7.243702,4.711603,3.759943,4.680938,0.475530,9.057371,-3.333194,3.927296],[-4.813617,-4.995110,-9.394542,6.564247,8.993714,-3.772768,-0.644385,-9.212083,-1.582867],[4.374793,-2.161261,1.188894,3.509102,-1.784610,7.204274,-3.432528,7.121346,9.044624],[-1.179674,4.450521,-2.122438,8.467377,-7.641650,8.387859,9.847119,-7.682988,7.642751],[5.087069,-5.894209,-8.964572,-5.048224,7.548993,-9.090113,7.361450,-3.540728,-1.483563],[4.122519,9.631006,0.109628,-5.739604,1.789716,6.751432,-3.670473,-5.948277,-7.142344],[-6.117798,4.543050,-9.253279,-3.443505,-7.166610,-0.237807,-1.853868,-8.317552,6.435172],[-9.319493,-5.795045,-1.400889,1.736501,3.769200,6.510785,-2.291203,-7.264986,4.767297]],[[3.434115,-1.341515,-2.941733,-2.263695,-0.263931,0.682527,4.906761,0.096528,4.592960],[9.784338,-4.630840,-5.966027,-7.179882,9.409542,-5.549667,3.111301,3.364763,8.090550],[-8.410042,-2.398537,-8.981253,-1.104727,0.627655,-6.443039,4.648494,2.868270,-6.651622],[8.397845,1.643911,9.592825,6.254588,8.557931,-9.887739,8.103624,8.018611,-1.270545],[5.736068,8.525838,-8.153338,8.167747,2.305387,-8.418474,4.812689,-4.213976,-3.593840],[-8.345486,-4.378084,-2.347403,8.634550,1.097375,6.471485,-9.889330,-8.895977,-1.183618],[3.786875,-1.700384,-3.889833,-9.869100,-1.950210,-6.746762,-9.270555,-0.417921,5.083767],[-8.908147,-6.943905,4.942618,8.483097,-0.117819,8.939997,-6.635716,0.304626,4.299406],[5.830436,9.914380,-4.907743,9.376185,-7.388031,7.177952,-7.250062,-7.092744,5.709400],[0.112390,-3.991206,-1.932437,-3.090709,-3.283634,7.313092,1.229606,-7.889188,-9.357773],[5.660199,0.306226,3.837743,3.527861,-9.865006,5.137259,9.134841,-2.615325,-3.259696],[9.275560,-5.223354,-8.524085,1.542870,-4.274144,-7.664252,-2.417289,-2.071841,-5.276634],[-3.918697,-3.598895,2.011078,-5.953745,-4.517195,-5.240786,7.453041,9.860172,-6.948097]],[[8.453943,2.187874,6.960469,-7.289847,6.706503,9.409745,-0.852674,0.717300,4.657709],[-9.634655,0.343737,-5.581388,-7.495396,1.011012,7.954949,4.989741,4.141981,3.201759],[1.303630,-0.640219,-0.470438,-4.842903,7.999462,8.185307,-4.185020,-8.163632,-6.931329],[-9.281792,-8.569812,-3.834111,5.788599,-1.318360,6.985206,5.635701,3.801600,9.165302],[2.109978,0.406444,-0.232912,1.907415,-7.282697,-9.837607,5.176980,3.293345,6.713495],[5.087020,-7.714978,5.216978,2.364598,-1.896880,2.919080,1.952369,7.038972,3.200397],[3.596925,-0.849121,3.497564,2.160145,2.312148,-7.254072,-9.675978,3.128464,-1.270677],[-2.725249,0.918782,-5.776843,8.546534,-7.069298,-0.801349,-4.140271,-8.237204,-7.886349],[9.637566,-0.037998,-5.909403,7.647707,7.017470,3.350101,-0.802137,3.695491,-9.622429],[-2.183432,4.411576,-3.953173,-1.935868,-7.295167,-5.263143,-7.295207,-7.623296,-5.618445],[-6.935751,5.700284,1.432801,5.136922,0.310209,1.594018,-4.041512,7.141135,-4.146894],[-9.830976,-7.753870,-0.707321,8.102767,-7.838905,0.120074,-5.307258,7.714246,6.992709],[0.542598,-2.439068,-3.273242,-4.171572,6.348988,-6.096056,-8.844333,-9.574774,5.484864]]], dtype = "float64")#candidate|3628|(13, 13, 9)|const|float64
bop_3629 = relay.logical_and(var_3620.astype('bool'), relay.reshape(const_3628.astype('bool'), relay.shape_of(var_3620))) # shape=(13, 13, 9)
bop_3635 = relay.floor_divide(uop_3621.astype('float64'), relay.reshape(const_3628.astype('float64'), relay.shape_of(uop_3621))) # shape=(13, 13, 9)
func_3006_call = mod.get_global_var('func_3006')
func_3012_call = mutated_mod.get_global_var('func_3012')
var_3645 = relay.var("var_3645", dtype = "int16", shape = (660,))#candidate|3645|(660,)|var|int16
var_3646 = relay.var("var_3646", dtype = "int16", shape = (9240,))#candidate|3646|(9240,)|var|int16
var_3647 = relay.var("var_3647", dtype = "int8", shape = (288, 2))#candidate|3647|(288, 2)|var|int8
var_3648 = relay.var("var_3648", dtype = "int8", shape = (1120,))#candidate|3648|(1120,)|var|int8
call_3644 = relay.TupleGetItem(func_3006_call(relay.reshape(var_3645.astype('int16'), [1, 660]), relay.reshape(var_3646.astype('int16'), [14, 660]), relay.reshape(var_3647.astype('int8'), [576, 1]), relay.reshape(var_3648.astype('int8'), [1120,]), ), 0)
call_3649 = relay.TupleGetItem(func_3012_call(relay.reshape(var_3645.astype('int16'), [1, 660]), relay.reshape(var_3646.astype('int16'), [14, 660]), relay.reshape(var_3647.astype('int8'), [576, 1]), relay.reshape(var_3648.astype('int8'), [1120,]), ), 0)
var_3653 = relay.var("var_3653", dtype = "float64", shape = (13, 13, 9))#candidate|3653|(13, 13, 9)|var|float64
bop_3654 = relay.logical_or(uop_3621.astype('bool'), relay.reshape(var_3653.astype('bool'), relay.shape_of(uop_3621))) # shape=(13, 13, 9)
uop_3657 = relay.cosh(var_3620.astype('float32')) # shape=(13, 13, 9)
bop_3692 = relay.subtract(bop_3635.astype('uint32'), relay.reshape(uop_3657.astype('uint32'), relay.shape_of(bop_3635))) # shape=(13, 13, 9)
output = relay.Tuple([bop_3629,call_3644,var_3645,var_3646,var_3647,var_3648,bop_3654,bop_3692,])
output2 = relay.Tuple([bop_3629,call_3649,var_3645,var_3646,var_3647,var_3648,bop_3654,bop_3692,])
func_3711 = relay.Function([var_3620,var_3645,var_3646,var_3647,var_3648,var_3653,], output)
mod['func_3711'] = func_3711
mod = relay.transform.InferType()(mod)
mutated_mod['func_3711'] = func_3711
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3711_call = mutated_mod.get_global_var('func_3711')
var_3713 = relay.var("var_3713", dtype = "float64", shape = (13, 13, 9))#candidate|3713|(13, 13, 9)|var|float64
var_3714 = relay.var("var_3714", dtype = "int16", shape = (660,))#candidate|3714|(660,)|var|int16
var_3715 = relay.var("var_3715", dtype = "int16", shape = (9240,))#candidate|3715|(9240,)|var|int16
var_3716 = relay.var("var_3716", dtype = "int8", shape = (288, 2))#candidate|3716|(288, 2)|var|int8
var_3717 = relay.var("var_3717", dtype = "int8", shape = (1120,))#candidate|3717|(1120,)|var|int8
var_3718 = relay.var("var_3718", dtype = "float64", shape = (13, 13, 9))#candidate|3718|(13, 13, 9)|var|float64
call_3712 = func_3711_call(var_3713,var_3714,var_3715,var_3716,var_3717,var_3718,)
output = call_3712
func_3719 = relay.Function([var_3713,var_3714,var_3715,var_3716,var_3717,var_3718,], output)
mutated_mod['func_3719'] = func_3719
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4105 = relay.var("var_4105", dtype = "float32", shape = (13, 12, 6))#candidate|4105|(13, 12, 6)|var|float32
uop_4106 = relay.asinh(var_4105.astype('float32')) # shape=(13, 12, 6)
output = relay.Tuple([uop_4106,])
output2 = relay.Tuple([uop_4106,])
func_4108 = relay.Function([var_4105,], output)
mod['func_4108'] = func_4108
mod = relay.transform.InferType()(mod)
var_4109 = relay.var("var_4109", dtype = "float32", shape = (13, 12, 6))#candidate|4109|(13, 12, 6)|var|float32
output = func_4108(var_4109)
func_4110 = relay.Function([var_4109], output)
mutated_mod['func_4110'] = func_4110
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4254 = relay.var("var_4254", dtype = "float64", shape = (1, 2, 8))#candidate|4254|(1, 2, 8)|var|float64
var_4255 = relay.var("var_4255", dtype = "float64", shape = (10, 2, 8))#candidate|4255|(10, 2, 8)|var|float64
bop_4256 = relay.divide(var_4254.astype('float64'), var_4255.astype('float64')) # shape=(10, 2, 8)
uop_4264 = relay.rsqrt(var_4255.astype('float32')) # shape=(10, 2, 8)
output = relay.Tuple([bop_4256,uop_4264,])
output2 = relay.Tuple([bop_4256,uop_4264,])
func_4272 = relay.Function([var_4254,var_4255,], output)
mod['func_4272'] = func_4272
mod = relay.transform.InferType()(mod)
mutated_mod['func_4272'] = func_4272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4272_call = mutated_mod.get_global_var('func_4272')
var_4274 = relay.var("var_4274", dtype = "float64", shape = (1, 2, 8))#candidate|4274|(1, 2, 8)|var|float64
var_4275 = relay.var("var_4275", dtype = "float64", shape = (10, 2, 8))#candidate|4275|(10, 2, 8)|var|float64
call_4273 = func_4272_call(var_4274,var_4275,)
output = call_4273
func_4276 = relay.Function([var_4274,var_4275,], output)
mutated_mod['func_4276'] = func_4276
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4330 = relay.const([[[2.000752,-2.637321],[-2.839740,-5.588153],[7.705595,-6.543919],[-7.722929,-6.381651]],[[-2.955490,1.089177],[-6.224418,-5.302441],[-0.182379,-7.698893],[1.633217,8.934417]],[[5.428290,5.521201],[-9.243651,-1.396447],[-7.263485,-4.779847],[7.970886,6.470873]],[[7.573499,-3.559481],[4.585271,-6.127173],[1.241825,-2.646519],[-2.578713,-0.615562]],[[1.187376,-7.279229],[3.560328,-5.411025],[4.141019,-1.082843],[6.662442,-0.724707]],[[-7.072703,-4.149613],[0.568448,0.194138],[4.938327,-7.542928],[0.549211,1.741059]]], dtype = "float32")#candidate|4330|(6, 4, 2)|const|float32
uop_4331 = relay.log10(const_4330.astype('float32')) # shape=(6, 4, 2)
uop_4349 = relay.sinh(uop_4331.astype('float64')) # shape=(6, 4, 2)
bop_4356 = relay.greater_equal(uop_4331.astype('bool'), relay.reshape(uop_4349.astype('bool'), relay.shape_of(uop_4331))) # shape=(6, 4, 2)
output = bop_4356
output2 = bop_4356
func_4360 = relay.Function([], output)
mod['func_4360'] = func_4360
mod = relay.transform.InferType()(mod)
output = func_4360()
func_4361 = relay.Function([], output)
mutated_mod['func_4361'] = func_4361
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4360_call = mod.get_global_var('func_4360')
func_4361_call = mutated_mod.get_global_var('func_4361')
call_4379 = func_4360_call()
call_4380 = func_4360_call()
output = relay.Tuple([call_4379,])
output2 = relay.Tuple([call_4380,])
func_4386 = relay.Function([], output)
mod['func_4386'] = func_4386
mod = relay.transform.InferType()(mod)
mutated_mod['func_4386'] = func_4386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mutated_mod.get_global_var('func_4386')
call_4387 = func_4386_call()
output = call_4387
func_4388 = relay.Function([], output)
mutated_mod['func_4388'] = func_4388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4402 = relay.var("var_4402", dtype = "bool", shape = ())#candidate|4402|()|var|bool
var_4403 = relay.var("var_4403", dtype = "bool", shape = (11, 6, 16))#candidate|4403|(11, 6, 16)|var|bool
bop_4404 = relay.logical_or(var_4402.astype('bool'), var_4403.astype('bool')) # shape=(11, 6, 16)
uop_4415 = relay.sqrt(var_4403.astype('float32')) # shape=(11, 6, 16)
func_1154_call = mod.get_global_var('func_1154')
func_1156_call = mutated_mod.get_global_var('func_1156')
var_4436 = relay.var("var_4436", dtype = "bool", shape = (160,))#candidate|4436|(160,)|var|bool
call_4435 = func_1154_call(relay.reshape(var_4436.astype('bool'), [5, 16, 2]))
call_4437 = func_1154_call(relay.reshape(var_4436.astype('bool'), [5, 16, 2]))
bop_4442 = relay.minimum(var_4402.astype('float32'), bop_4404.astype('float32')) # shape=(11, 6, 16)
func_1992_call = mod.get_global_var('func_1992')
func_1995_call = mutated_mod.get_global_var('func_1995')
const_4452 = relay.const([10,-8,-9,-5,3,8,5,6,9,-9,-9,-1,6,6,-7,6,8,4,-6,6,6,-3,-5,4,6,9,4,4,6,-1,-7,-2,10,-2,7,-8,-9,4,1,10,-3,-3,-10,8,9,1,-8,-8,-9,7,-6,10,7,1,-2,-5,9,4,7,5,1,9,-9,8,-5,5,-1,9,9,-5,-3,7,-10,-3,-1,10,-4,-3,-6,-2,-7,4,-4,-5,-5,5,5,-1,-1,2,3,-7,-5,-10,3,-3,9,-10,4,-5,8,-8,1,7,-4,-5,-5,3,-5,10,-7,8,-2,-8,-4,7,2,-2,-5,-5,10,-7,4,-4,7,7,-8,-7,-3,-9,7,-8,1,1,1,-8,-10,7,-9,3,8,9,6,8,-2,-6,-5,7,6,-6,8,1,9,3,2,3,7,6,9,-3,-5,7,5,7,-5,-2,5,10,3,5,9,-5,-1,10,-7,8,-3,-3,2,-4,1,8,9,-3,3,-8,-7,1,-6,-5,-5,6,-9,-10,6,-7,-10,-6,-5,3,-6,-2,-4,8,-3,2,9,10,6,10,4,1,-4,-4,6,9,-8,5,-2,-3,-10,-5,-4,7,-4,2,-4,-1,9,-7,5,-9,7,-9,8,5,7,-7,4,-1,-2,-6,5,7,5,1,2,-6,-3,-7,7,1,10,6,-5,-2,-9,5,8,-10,-8,6,2,-6,-5,7,4,7,-7,10,8,-1,2,3,-10,4,5,-7,-2,-1,7,-10,-6,-5,-7,-7,6,-4,-3,-8,-1,10,-4,2,-9,4,10,7,10,1,6,4,3,10,-4,-9,-1,-8,4,-9,-2,-1,7,-10,-1,-4,-6,-8,-6,-7,7,3,2,10,-3,1,4,-10,3,9,9,-10,2,6,-8,-8,8,10,-5,8,-3,-3,-2,-9,-3,8,2,8,9,1,8,10,-1,6,3,3,-4,5,1,10,4,7,9,1,-9,5,4,-3,-8,-2,-4,8,-5,-3,-9,-2,4,-3,5,1,8,3,-1,-8,7,9,9,1,-2,-10,-1,6,-2,-8,-2,-10,7,4,-2,-7,6,-10,3,7,-8,-8,9,-4,-4,-5,3,9,-1,-8,-7,1,10,8,-5,-1,-2,-1,5,-10,-10,-5,2,-3,-7,3,-5,-7,6,-10,-10,5,2,-3,-1,-3,-9,2,-2,-4,7,1,2,8,-5,10,-1,-9,10,9,-4,2,3,-5,-10,-2,-6,8,-4,7,-5,5,3,1,6,5,-4,-3,3,-4,7,-10,10,3,4,-3,9,7,4,5,9,9,-9,4,4,-4,1,-4,-4,7,6,-7,2,7,3,5,4,-7,10,-6,9,-5,-6,3,5,7,2,8,-9,9,9,-6,-9,9,-6,2,-4,6,-6,-9,-1,-6,-10,8,-9,5,-2,-4,-8,10,7,9,-9,-1,-8,-9,7,-3,-10,-10,9,-1,-6,1,8,-8,-3,6,6,10,2,-4,-5,-7,7,7,3,-6,-3,-5,-10,5,1,-7,3,-2,7,3,10,-10,-1,6,3,5,1,-6,-2,-4,6,-10,9,3,8,9,-10,-9,-3,5,7,3,-9,-8,-4,3,-2,-9,5,-6,-10,2,-3,2,-4,-6,-6,-10,2,5,-8,5,1,2,6,10,-4,-9,-3,-7,-6,9,-3,-9,7,-10,10,9,-9,-9,1,-4,-4,-4,-2,6,-5,3,6,-5,-6,9,2,9,-9,8,-8,6,3,-8,2,-6,1,-7,9,-9,8,-1], dtype = "int16")#candidate|4452|(660,)|const|int16
call_4451 = relay.TupleGetItem(func_1992_call(relay.reshape(const_4452.astype('int16'), [6, 10, 11])), 0)
call_4453 = relay.TupleGetItem(func_1995_call(relay.reshape(const_4452.astype('int16'), [6, 10, 11])), 0)
const_4456 = relay.const([[[5.709042,-8.029770,4.572845,-8.535387,8.845647,0.537243,-4.822483,2.627195,5.827289,-6.562287,5.324280,-3.146083,-8.134924,5.915841,-4.210457,-3.321052],[-1.169816,1.863460,-2.894637,0.277598,-8.113328,-4.959256,-4.585091,6.489591,-9.933921,6.041262,-0.683505,-8.975767,-7.377179,-8.413548,9.907223,-2.093449],[4.866948,3.518252,-1.778832,-0.194486,4.653379,0.748645,-4.719775,-4.036605,-2.238983,-2.096625,2.487400,6.443498,-4.387120,6.780584,-9.283880,3.016840],[6.470937,6.372035,-0.334425,-5.239763,4.133850,1.156920,-2.782713,-3.253952,3.995326,6.401630,5.431719,0.917372,-4.429918,9.821366,-6.176829,2.862962],[7.445393,2.276113,-0.786187,-1.169940,6.333240,7.395544,5.880954,-1.871934,-6.277824,7.014718,2.266531,6.505106,4.048587,-2.206548,4.848650,6.845881],[5.340569,-2.924709,-5.517182,4.788222,4.400591,3.819460,-0.241325,8.756036,8.511659,-3.547910,7.445983,9.195729,4.023549,3.359265,0.038394,8.656114]],[[5.016862,-3.688866,-3.453884,-8.594773,-7.426930,-8.227152,1.623925,1.763184,8.259389,3.967216,1.165061,3.459271,5.205882,6.938467,-9.294822,1.089361],[1.638600,2.331198,6.344247,0.846101,-5.005186,-7.572357,8.264037,-0.089516,1.339098,-0.091692,-8.167104,4.596093,-3.049713,-6.159309,-5.127602,-7.724937],[3.023185,6.370719,7.672765,-4.039900,6.986128,-6.540050,-4.350499,4.662481,-2.759962,-4.245781,4.895788,-1.556328,4.891837,-5.147502,-8.273977,5.597469],[6.469348,-9.801145,2.017162,-5.293530,1.906588,7.892150,5.076917,-7.309226,-1.616050,6.505991,-7.862646,6.328010,-4.375190,2.068246,2.756285,7.992971],[-6.204627,1.185966,-8.629390,-9.260131,-9.455932,-5.812187,-5.236082,-7.513864,9.338883,-2.871279,9.580655,8.495567,-1.681201,7.918458,1.868072,-4.395369],[-6.125861,3.003900,2.975511,2.205048,-5.935406,4.364971,-4.806349,6.652668,4.355597,6.785640,-5.687757,1.673824,-0.020805,-5.984257,3.415272,9.721001]],[[-5.430568,-6.503437,-4.423750,-0.506930,7.173150,5.047189,1.500778,-8.024811,-5.707105,2.404750,-7.009281,9.822849,3.477762,6.248269,-8.328484,5.375246],[3.398500,-3.856015,9.772937,-9.435577,7.412427,-4.051689,9.104118,6.387744,-0.501588,-7.444740,1.146529,3.165573,3.609195,2.853409,8.188809,-5.658032],[6.243051,-2.465096,1.947085,1.844266,-7.191121,6.509890,-2.683891,-0.223027,-0.818367,-5.931784,-2.764737,-9.238338,-0.276577,-8.313562,-8.885453,-1.075219],[1.777537,-5.784629,-7.500928,3.732261,2.318867,-7.923873,-8.673286,3.406737,7.291165,-2.976491,3.314716,2.011839,2.992667,-7.713325,-9.897328,5.230106],[6.907981,6.673015,4.871947,4.970985,5.781897,8.854537,-0.469391,-2.726798,-9.701804,7.285444,-0.568424,0.076015,-4.763159,9.295877,-6.517957,4.617088],[3.247000,6.303570,8.586563,9.570425,-9.131603,-8.047370,9.274628,-8.681809,-2.806226,-4.457156,-6.433020,-2.705834,4.992883,-5.219056,-1.407002,4.343722]],[[-4.494597,-9.172806,6.557936,-6.897332,-5.130129,-9.859880,-2.572652,5.387422,8.028147,0.425594,4.127559,-5.857463,7.185067,9.581498,-9.970427,4.987919],[4.204821,6.878547,-5.416001,0.597916,-2.107064,-0.581153,-6.059415,9.881903,9.600517,-3.741066,-1.370573,6.882841,1.389554,1.641441,-1.249449,-2.789368],[7.617844,-8.216723,6.146531,-6.106968,-2.474900,-1.154978,4.138234,-0.146901,-3.789781,9.016791,7.856004,5.902627,0.798758,8.944185,7.994388,-3.134336],[6.751437,-0.469330,-6.059936,-0.115606,-6.757966,3.324299,6.794204,-0.295497,-1.733668,-6.679375,4.729193,-1.358593,1.972397,-4.765847,8.196727,9.576212],[7.901999,-3.498758,-8.743887,-1.046377,1.548542,-3.846459,9.897567,6.569399,9.838271,-8.688100,4.998825,0.667068,-6.899686,9.686558,-3.543014,-7.063818],[4.020841,4.770314,3.420230,-4.330127,-1.228899,6.270451,2.058861,2.738209,1.962729,2.373132,4.129260,0.890341,-1.297419,7.737082,3.616297,4.486906]],[[-7.809408,-1.978195,-4.314202,0.815488,-7.032555,1.857999,8.477142,-4.402959,-3.898947,3.781897,-2.183241,9.843860,9.584135,-8.288616,-1.943305,7.244556],[-2.206209,-0.389109,-1.707334,3.424562,6.241705,2.529119,-0.056095,3.923128,1.553281,-3.628584,8.423400,2.127951,-4.018271,4.384775,7.289835,-3.667856],[-2.245980,-6.113510,-4.448297,0.619808,-3.773027,-6.357508,-5.337254,9.132889,-4.066296,-1.920095,5.108930,-8.355692,1.178148,-9.139440,8.375652,-1.063683],[-2.515147,-4.684400,1.537152,-8.927743,-9.041152,-4.516024,-3.111151,5.419073,9.531881,-4.354079,8.484228,-2.326830,-8.541422,2.946019,0.866502,7.906811],[-0.374785,-6.544614,-4.601637,-9.586488,9.535484,4.368522,-2.725128,-4.240404,-2.199291,8.875390,-0.072416,-6.724653,-9.247065,-2.824198,-7.589764,6.847535],[1.676397,-5.527397,-8.283259,0.358610,4.742858,3.250853,3.961779,1.972206,-7.931041,1.289937,-2.146826,6.316309,0.514899,2.570061,-6.691693,-7.017406]],[[-4.513708,0.513362,9.165432,8.025053,8.510577,8.552439,-0.693904,1.117575,6.273603,9.064764,-7.023340,-1.196642,-9.242473,4.127763,1.019514,5.268778],[-1.773961,-3.788614,4.684777,-2.042775,2.483755,5.945965,-2.457465,-5.594571,5.509503,-6.594556,8.981361,0.488685,-4.598707,-8.846981,-8.457516,3.330932],[-5.354050,3.436231,4.863971,-3.817861,7.175554,7.783461,-4.369729,7.170924,1.631005,-0.857389,-8.968467,0.991106,-0.055556,-2.745179,6.505121,-9.902469],[-7.967408,5.573415,1.150523,-5.067010,0.200335,1.586616,2.370154,8.992101,-5.945723,0.806366,7.684120,4.337942,-7.044498,-4.867404,1.547364,6.942097],[-0.462878,-6.471041,7.336463,-7.379501,-2.892949,-8.464469,-5.654186,-8.614002,3.220089,-1.518615,-7.796333,4.229233,4.580040,-7.330546,-7.773605,-0.946505],[-5.154096,-9.001898,3.126780,-8.614962,-1.981600,-7.904616,-6.711199,1.956509,-6.487024,-9.962868,6.343468,-0.003903,-7.986798,-9.080320,-7.264773,1.531255]],[[6.237761,-8.493114,2.136428,-6.307854,-1.062452,-3.902283,5.384276,-8.100198,9.218012,5.394209,-6.646456,-3.042823,-8.991344,4.467453,4.882300,-8.956503],[8.265153,-2.955877,4.586768,-1.636364,1.708421,8.465037,2.893770,-3.254869,-4.567701,4.845806,5.925127,6.907089,-5.959373,4.003201,-0.245740,-3.262748],[-9.347229,-8.361670,1.144062,3.533082,7.569555,-1.311594,7.939942,-7.084194,-7.020196,-6.930019,8.299047,3.734062,5.576914,5.959497,-1.146427,1.048143],[-1.537433,0.275585,-2.747976,-0.791922,9.674585,-4.599171,-4.984228,-4.998247,4.951817,-9.369423,1.685275,-3.943782,-4.846293,-1.403836,-2.434012,-0.675736],[8.747928,-3.346259,-2.384796,8.086683,1.524796,-6.511764,-9.879322,-3.403767,-1.101011,-7.373192,2.551017,-3.337358,4.501397,-2.945847,-1.551373,-3.406479],[-2.855240,0.986345,-9.361808,-5.542061,1.530902,4.486332,-2.822547,2.729096,-0.078356,-6.750527,-2.747874,-3.781416,8.478997,9.532691,9.926007,3.058376]],[[4.636262,-7.848662,6.151880,2.564790,-2.991932,4.673764,5.088588,6.015148,-2.522478,4.815794,-3.280291,-4.063400,-3.410027,1.351723,-8.640525,-3.777799],[3.549862,6.230905,1.194099,6.831042,6.470707,-3.786855,6.180639,-1.055676,8.775392,6.303409,9.264605,8.078465,3.127621,0.303101,0.846740,5.008275],[3.811427,-5.894995,-3.355665,-8.813582,-6.784956,-6.409699,-2.248122,1.696090,-0.101253,8.417429,4.161118,7.113703,9.545296,-0.973565,-4.473558,3.642910],[-9.052691,2.290337,-0.378177,-4.172385,-6.764495,-2.961714,8.047562,3.121259,-7.403366,-2.301863,8.353950,3.334259,-3.544492,-9.002855,3.128472,-6.235871],[6.818100,-7.899314,7.548647,-4.279245,4.680585,-5.474489,-9.658150,-3.916849,-6.307322,-6.497916,2.034400,-6.490855,5.446600,-1.316224,8.934435,-5.718779],[-1.814356,-4.768524,9.432046,-7.833624,4.519151,-7.741996,-6.417506,7.967754,3.128958,-6.942317,8.906872,-1.248805,3.606043,4.335416,-5.552731,0.431880]],[[3.287401,-2.459742,-9.589372,0.520762,-7.128601,-1.603790,1.675873,8.627517,2.908924,9.286198,9.860841,-7.772037,-2.390532,1.606174,8.854415,-9.974880],[-0.878028,-0.390750,7.327388,-2.758483,3.028449,-8.611321,-5.680978,6.330232,1.566307,-4.625343,-0.589963,-8.680684,4.180841,3.578438,-4.484210,0.185766],[7.553725,-7.181742,9.286660,-3.046779,5.643466,5.311520,-8.635110,4.908425,8.048045,-6.411216,-0.269032,1.340087,-2.011188,7.930828,-8.693160,0.869361],[-0.005371,-0.322197,7.237159,-7.290436,3.027157,-8.606817,-1.390929,1.103762,-0.026231,0.215463,-8.327091,-7.824660,-3.052796,-0.451534,-1.997213,-7.254342],[5.265947,-7.207269,7.391757,5.761151,8.435796,-7.946795,5.689271,6.531816,-2.700657,3.420381,7.405347,4.996375,7.082423,-2.819361,-1.034862,-7.269495],[7.156632,-2.679564,3.158921,9.740226,2.620269,-5.053068,-6.305359,-9.389946,-8.417723,4.040077,4.907292,0.676178,-1.479772,-3.549227,-9.373142,-5.811196]],[[-4.846477,-0.467215,-5.789575,-1.288359,-3.431659,0.622215,-1.790025,8.184173,1.951511,1.722826,1.491566,5.330559,-0.171210,-1.044747,-7.448562,5.921387],[2.445067,-5.499961,7.526361,-1.724204,6.453134,-5.517668,6.271518,-5.490827,3.617560,-0.042342,3.144040,-7.652430,2.268218,-0.424320,-2.476492,-7.321868],[-0.398192,1.422727,1.218188,3.286959,9.943324,7.264904,9.294546,2.498926,9.669490,8.375653,3.529886,-7.008436,2.041010,-8.745009,-5.535169,8.466266],[4.285182,4.069029,-4.076600,1.502772,-4.332958,8.469295,0.109670,-9.352947,-8.547138,2.921061,-6.246997,-9.860041,-7.370212,1.536843,-0.806077,9.352326],[2.966881,-1.516240,3.669261,-6.633342,-9.784753,3.249077,-1.974310,-8.896506,-4.910392,2.867346,-0.067372,-2.389830,-6.713239,7.017674,-4.535590,9.007566],[2.946044,-2.043730,3.833548,9.650861,-2.136623,2.620716,-2.795060,8.423480,8.706414,4.009541,-6.293426,4.807799,8.352672,7.320439,4.318176,-1.785918]],[[1.531880,-9.581331,1.964114,-1.131547,-4.546658,-4.858428,-3.259363,8.954293,-3.403171,6.617424,-8.274553,-1.675721,0.459344,-6.650005,-8.011623,-2.945014],[4.579341,-6.961686,-7.830609,-5.669685,1.724989,6.379434,-0.355710,7.687929,-3.404904,9.964281,9.626934,-5.569613,-8.301132,-1.687257,8.864123,-0.272577],[3.329308,3.543428,7.119408,-9.251208,3.636754,-7.250853,1.404633,-5.481016,-0.232203,-6.827014,9.798615,8.378551,8.781111,-8.740948,-5.990583,5.339303],[-4.153644,8.617883,-8.251867,-7.441446,7.041034,8.342479,-5.745179,-3.268910,-9.173341,2.354039,-1.639720,4.710397,-8.563072,-7.850142,-9.034392,-6.541458],[8.848362,-0.086046,0.023656,1.664418,-3.044476,6.140807,-6.487408,5.268171,5.751445,0.448407,2.793839,3.130245,-1.162810,-8.341354,-2.245475,8.562398],[-1.107431,2.691993,-4.303415,2.031214,-5.481435,-4.151661,-7.351065,3.667317,-6.587350,9.999471,7.816017,6.801898,0.812568,-1.690073,-7.413085,8.723122]]], dtype = "float32")#candidate|4456|(11, 6, 16)|const|float32
bop_4457 = relay.power(uop_4415.astype('float32'), relay.reshape(const_4456.astype('float32'), relay.shape_of(uop_4415))) # shape=(11, 6, 16)
func_1534_call = mod.get_global_var('func_1534')
func_1537_call = mutated_mod.get_global_var('func_1537')
const_4470 = relay.const([5.838202,-8.446280,-0.580328,5.559403,-2.538094,5.454132,-9.857753,5.548325,2.082448,1.886684,-4.915644,-4.160134,8.775465,6.409558,1.505345,-7.611564,3.666952,6.204115,-3.965096,-8.529776,-7.010069,9.185150,-0.675931,-5.187858,-1.868555,-0.152076,3.041783,4.491355,-5.793521,9.132028,-6.471727,3.586667,8.597288,4.728077,7.725483,-4.202257,6.038849,-6.239840,1.774506,2.261429,3.684860,-5.727488,-0.684177,2.385798,1.186008,-7.130898,-7.290110,6.355354,-0.904917,3.968703,-2.980953,-2.366812,-8.787474,6.871153,8.496789,2.363164,-5.453304,9.242670,7.325193,-3.251095,-0.028427,9.304618,-4.489248,-8.950931,8.314688,-0.172529,2.518114,-5.246472,8.971837,0.083143,-7.923088,2.726738,0.226414,-5.186135,3.144677,3.924528,0.128417,2.913678,1.165543,0.472804,2.361940,3.586326,-2.354284,-2.236763,2.350587,-7.180241,5.666206,8.346374,-0.582138,0.868293], dtype = "float64")#candidate|4470|(90,)|const|float64
call_4469 = func_1534_call(relay.reshape(const_4470.astype('float64'), [15, 3, 2]))
call_4471 = func_1534_call(relay.reshape(const_4470.astype('float64'), [15, 3, 2]))
func_2296_call = mod.get_global_var('func_2296')
func_2301_call = mutated_mod.get_global_var('func_2301')
var_4474 = relay.var("var_4474", dtype = "int8", shape = (576,))#candidate|4474|(576,)|var|int8
var_4475 = relay.var("var_4475", dtype = "float32", shape = (3600,))#candidate|4475|(3600,)|var|float32
const_4476 = relay.const([9,2,-2,-10,3,-10,-7,-1,-3,10,5,2,-3,10,-6,-5,-5,-1,-7,9,-2,8,4,-2,10,-7,-8,-9,-1,-6,3,6,-8,4,-7,-5,2,10,3,-4,-6,9,2,-4,-6,2,2,7,4,-7,-4,1,8,-3,5,-5,10,4,-2,5,-9,-5,-6,4,4,4,-6,6,-6,4,-6,-2,-2,8,-5,2,-1,-6,1,-10,1,-3,-7,-10,7,6,-2,-2,5,2,5,3,-3,5,-6,7,9,4,-10,-10,-8,-2,5,7,-6,-9,3,8,-10,7,8,-3,7,-4,2,6,10,-10,-4,6,-6,-10,8,4,-3,-4,-7,9,-6,1,-4,-6,6,9,3,-1,-10,-7,-1,6,1,4,-9,-10,-3,-3,-9,-3,-4,-7,8,7,9,6,-4,3,-2,-1,-7,6,-3,8,9,-9,4,2,-3,1,3,-3,2,10,2,-7,-4,10,-3,1,8,4,5,-5,5,2,3,-4,-1,9,8,4,-10,-3,-1,-4,4,4,-6,-8,2,10,7,-2,-10,4,8,4,-10,-2,1,3,-6,5,-3,6,4,3,-1,2,6,3,-3,4,4,-6,2,2,-6,3,-1,7,6,-7,-6,10,4,-8,10,10,-5,-1,-8,6,-10,-5,7,-8,-3,2,5,-3,-5,6,2,1,4,4,-7,-6,-9,-9,3,1,-4,9,-5,10,3,7,-4,5,-2,-10,1,-5,-6,-9,4,9,5,9,10,1,-9,-1,7,-1,-4,8,-8,8,-7,-5,8,-1,1,2,1,-5,2,-3,1,-1,-6,2,2,-8,-8,-2,-4,-1,2,6,-9,-4,-6,-3,1,-4,3,-1,-8,5,-9,-4,7,9,1,1,-6,-4,-1,1,-10,-1,3,-7,-8,-8,-9,-1,10,-6,-5,2,3,6,-4,8,-4,-9,8,9,-10,4,-9,-6,6,1,-8,-5,-10,6,9,-8,-10,1,4,-5,-9,2,5,7,9,-3,1,-9,-10,-5,-7,-2,-1,-9,3,7,-5,9,8,-3,6,-7,5,-7,1,2,6,-8,-6,-10,-1,2,8,7,-9,-5,8,9,-8,-6,10,-8,1,3,-1,6,-10,9,10,-5,8,-4,-2,8,1,10,2,-8,-1,10,-4,5,7,-3,2,7,-10,6,4,-3,-8,6,10,-2,-7,-3,1,6,-2,8,-8,1,6,9,1,-4,-4,10,-8,-5,7,7,-5,-9,-3,8,9,-9,-7,4,-2,-9,-1,-10,-3,4,-4,9,4,-4,-4,8,2,-10,-4,10,-5,2,-10,-4,1,5,1,-5,-2,1,1,-1,5,-5,8,-6,-6,8,5,9,2,-1,7,-7,5,9,9,1,3,-4,-1,1,-3,3,1,-3,-7,-7,2,-7,3,-3,6,-6,-7,-8,-3,6,-8,-3,3,3,4,-6,5,1,9,-2,-7,-4,1,5,-2,1,1,10,-1,6,6,-2,-7,-1,-9,1,-1,10,-6,-7,5,-10,-3,-10,7,2,8,-4,-6,-1,-6,-1,-7,1,8,-6,8,-9,8,5,-5,-9,-10,-10,-8,3,3,-4,-9,-6,5,-9,-7,3,-8,-3,7,8,6,6,-8,1,7,4,10,-10,-1,7,-9,-5,1,2,9,7,-9,-3,-4,-10,8,6,3,5,6,2,-4,-2,5,3,7,1,-3,-5,-9,-9,-7,6,-10,4,3,-1,2,-2,-9,-1,4,-2,-6,-7,2,-1,10,8,8,-6,-7,8,10,4,-4,8,9,-9,7,-10,-2,9,-10,-2,1,1,-2,-7,8,4,8,-4,-1,4,8,8,-8,-2,6,-7,1,-4,7,-7,-5,-9,-2,2,5,-1,1,-5,-8,7,2,-10,-4,-5,-6,-5,3,7,-8,-9,6,-10,-1,8,-3,-5,1,-7,10,5,4,8,-8,3,6,3,-1,-1,-7,4,-5,2,-4,2,-10,-9,-1,-2,-2,4,-6,-1,7,1,-2,3,-6,7,3,4,-8,-6,10,5,4,1,8,8,6,9,-8,7,-7,-4,4,2,10,1,9,-5,9,2,10,3,1,3,-6,3,-5,-4,6,-2,-5,8,3,6,9,-9,7,-4,6,8,-8,-5,-10,3,-4,-4,-10,-4,6,-6,7,-4,7,-3,-5,-5,3,-7,9,-9,-5,-6,7,-9,-10,-8,10,9,1,-10,-4,1,-7,10,-6,-10,6,-7,8,6,3,-2,7,10,-5,6,5,9,-4,9,10,3,7,-6,8,-10,-5,3,6,-2,4,-2,-5,-3,8,1,1,-3,-5,-1,3,5,-4,2,10,10,-1,-4,-1,-7,1,8,-3,-10,4,-3,-5,-4,5,-10,9,-10,2,7,5,6,-2,-5,7,-3,-9,5,3,2,5,-4,1,5,1,9,-7,-1,-9,-4,-4,-9,-3,4,6,-7,-7,7,8,1,5,-5,-5,1,-3,-2,2,-9,-8,5,10,-4,5,-2,3,-10,3,1,4,-4,7,-5,9,-5,8,10,-4,-2,8,-9,7,-1,7,-10,4,-7,4,-1,7,-10,8,10,6,8,-5,-7,8,-5,-10,5,3,-8,-5,9,-4,6,1,-1,-7,-1,6,5,5,-9,8,-2,8,-7,-6,-7,-7,2,7,5,4,6,-5,6,-2,-7,-10,1,-7,-3,5,5,10,-10,-3,-1,-2,-1,-10,6,-1,-2,4,-9,2,-5,-9,-10,10,-8,-4,3,7,-2,-8,-9,-3,-2,-4,7,-4,-6,-5,-3,-6,-9,1,-8,-4,7,9,5,-9,-1,1,-3,-10,-7,5,1,3,2,2,6,10,-1,1,5,6,-5,3,9,4,10,8,-1,-3,-6,-4,-2,6,-7,3,9,5,-4,1,-4,9,-6,-5,-5,1,3,4,4,-1,8,-1,3,2,-6,9,8,4,-5,3,7,-3,-3,-8,-8,-6,-4,3,6,-3,8,2,1,2,-3,6,-10,2,8,10,2,-2,4], dtype = "int8")#candidate|4476|(1120,)|const|int8
var_4477 = relay.var("var_4477", dtype = "float32", shape = (480,))#candidate|4477|(480,)|var|float32
call_4473 = relay.TupleGetItem(func_2296_call(relay.reshape(var_4474.astype('int8'), [12, 8, 6]), relay.reshape(var_4475.astype('float32'), [3600,]), relay.reshape(const_4476.astype('int8'), [1120,]), relay.reshape(var_4477.astype('float32'), [480,]), ), 5)
call_4478 = relay.TupleGetItem(func_2301_call(relay.reshape(var_4474.astype('int8'), [12, 8, 6]), relay.reshape(var_4475.astype('float32'), [3600,]), relay.reshape(const_4476.astype('int8'), [1120,]), relay.reshape(var_4477.astype('float32'), [480,]), ), 5)
output = relay.Tuple([call_4435,var_4436,bop_4442,call_4451,const_4452,bop_4457,call_4469,const_4470,call_4473,var_4474,var_4475,const_4476,var_4477,])
output2 = relay.Tuple([call_4437,var_4436,bop_4442,call_4453,const_4452,bop_4457,call_4471,const_4470,call_4478,var_4474,var_4475,const_4476,var_4477,])
func_4482 = relay.Function([var_4402,var_4403,var_4436,var_4474,var_4475,var_4477,], output)
mod['func_4482'] = func_4482
mod = relay.transform.InferType()(mod)
var_4483 = relay.var("var_4483", dtype = "bool", shape = ())#candidate|4483|()|var|bool
var_4484 = relay.var("var_4484", dtype = "bool", shape = (11, 6, 16))#candidate|4484|(11, 6, 16)|var|bool
var_4485 = relay.var("var_4485", dtype = "bool", shape = (160,))#candidate|4485|(160,)|var|bool
var_4486 = relay.var("var_4486", dtype = "int8", shape = (576,))#candidate|4486|(576,)|var|int8
var_4487 = relay.var("var_4487", dtype = "float32", shape = (3600,))#candidate|4487|(3600,)|var|float32
var_4488 = relay.var("var_4488", dtype = "float32", shape = (480,))#candidate|4488|(480,)|var|float32
output = func_4482(var_4483,var_4484,var_4485,var_4486,var_4487,var_4488,)
func_4489 = relay.Function([var_4483,var_4484,var_4485,var_4486,var_4487,var_4488,], output)
mutated_mod['func_4489'] = func_4489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_4509 = relay.TupleGetItem(func_4386_call(), 0)
call_4510 = relay.TupleGetItem(func_4388_call(), 0)
output = relay.Tuple([call_4509,])
output2 = relay.Tuple([call_4510,])
func_4513 = relay.Function([], output)
mod['func_4513'] = func_4513
mod = relay.transform.InferType()(mod)
output = func_4513()
func_4514 = relay.Function([], output)
mutated_mod['func_4514'] = func_4514
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_4536 = relay.TupleGetItem(func_4386_call(), 0)
call_4537 = relay.TupleGetItem(func_4388_call(), 0)
uop_4577 = relay.acosh(call_4536.astype('float32')) # shape=(6, 4, 2)
uop_4579 = relay.acosh(call_4537.astype('float32')) # shape=(6, 4, 2)
output = relay.Tuple([uop_4577,])
output2 = relay.Tuple([uop_4579,])
func_4599 = relay.Function([], output)
mod['func_4599'] = func_4599
mod = relay.transform.InferType()(mod)
mutated_mod['func_4599'] = func_4599
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4599_call = mutated_mod.get_global_var('func_4599')
call_4600 = func_4599_call()
output = call_4600
func_4601 = relay.Function([], output)
mutated_mod['func_4601'] = func_4601
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4360_call = mod.get_global_var('func_4360')
func_4361_call = mutated_mod.get_global_var('func_4361')
call_4639 = func_4360_call()
call_4640 = func_4360_call()
output = call_4639
output2 = call_4640
func_4656 = relay.Function([], output)
mod['func_4656'] = func_4656
mod = relay.transform.InferType()(mod)
mutated_mod['func_4656'] = func_4656
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4656_call = mutated_mod.get_global_var('func_4656')
call_4657 = func_4656_call()
output = call_4657
func_4658 = relay.Function([], output)
mutated_mod['func_4658'] = func_4658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_4730 = relay.TupleGetItem(func_4513_call(), 0)
call_4731 = relay.TupleGetItem(func_4514_call(), 0)
uop_4767 = relay.cos(call_4730.astype('float32')) # shape=(6, 4, 2)
uop_4769 = relay.cos(call_4731.astype('float32')) # shape=(6, 4, 2)
func_3711_call = mod.get_global_var('func_3711')
func_3719_call = mutated_mod.get_global_var('func_3719')
const_4795 = relay.const([[-8.040515,3.309851,-5.609967,1.011312,2.551658,9.876843,-9.576270,-8.436235,-1.625998],[7.319688,8.800971,-2.183737,-3.052741,-1.630740,-5.714106,3.478020,-7.795880,9.356758],[-8.815223,5.640318,7.218649,3.337867,5.293035,-2.469534,-4.372763,5.591854,5.896612],[3.989771,0.504624,-2.471471,-6.009716,-4.767083,5.977791,1.152805,-6.945168,1.933761],[5.237590,0.469654,-3.172021,6.794569,1.931119,8.273727,-3.286275,9.299955,-2.669492],[-2.647321,5.893983,3.463780,-8.539728,9.104559,4.364143,-3.888675,0.568830,3.774106],[9.499956,-0.957152,8.210759,0.128442,-6.906639,7.378300,-2.624987,7.814110,-2.607226],[-4.878215,-2.733117,-1.308614,-1.364417,-0.225347,-9.412027,-6.625746,-6.281104,3.037617],[-8.777697,-2.228366,4.918835,7.488755,3.777366,3.902572,1.741070,-9.972614,7.595371],[0.004637,6.298415,-4.584579,-6.111545,2.679688,3.906619,-5.682971,7.858057,2.266777],[8.650146,-8.850215,3.387255,-9.598654,-1.332274,-4.084557,3.176825,0.691691,-0.602192],[9.080133,-6.392619,0.419376,9.680268,1.766802,-0.921355,6.874515,0.209124,-5.638499],[0.938812,1.270829,4.624582,-7.255675,-1.597382,6.438187,6.343012,7.354143,8.390251],[5.348073,-6.874377,7.075443,2.672772,-9.178441,1.718232,-5.232807,-2.567373,-4.712199],[6.192845,-3.249221,-9.363368,-6.805547,-2.541167,-6.855124,5.849189,-4.377100,-6.791905],[-0.692434,-7.421689,6.059634,-8.777290,1.693387,8.454632,-9.220912,-3.651249,-4.783731],[1.852181,-2.012010,-2.411543,5.589820,-4.591239,-9.344173,-7.084276,4.322474,6.701471],[-6.739299,-6.098283,-6.593419,9.700536,-9.761828,-7.448491,-0.898491,-4.774838,9.002478],[7.510652,-2.607335,3.762847,5.296286,4.083492,-2.226588,5.732040,-5.145663,-0.920440],[1.929115,-6.963286,9.644816,4.266330,-0.943327,-4.316883,-3.343632,-1.633355,-3.700570],[5.710472,0.760548,-8.716140,-1.374246,-0.501455,2.336011,5.032028,-4.261786,-3.048636],[-6.988063,-3.385510,8.200215,8.319498,-3.017793,-9.146039,9.434244,-7.075023,6.000531],[-8.498402,-2.131798,-3.895650,-1.638622,6.391442,1.815637,-3.523221,5.659280,-4.357973],[-9.729322,-5.706056,-2.458162,3.519260,7.364977,-7.447453,-6.423842,-0.483233,-3.096264],[-7.209814,-8.954834,5.810492,4.132611,-4.115324,-1.841795,-2.644405,-9.283761,-4.738255],[3.152005,-6.029572,2.242395,7.726597,3.498216,7.059360,0.267059,-5.407529,3.313946],[4.785025,-4.594491,3.135462,9.738045,0.621960,-0.683145,-8.948090,5.441006,-3.431085],[1.313377,-2.070304,0.991331,-1.765639,4.754354,1.260676,7.285201,6.016484,-3.700815],[-0.922129,-5.192050,8.193266,3.844333,0.535239,-1.349545,-4.650063,6.361623,-5.634481],[-8.330026,7.039906,-0.698253,-6.487219,-3.101547,1.922688,-5.541015,-5.575909,9.408591],[1.165368,0.782418,6.608174,6.802788,3.442392,-2.130690,6.020342,3.228740,-4.880055],[1.960436,8.642030,-7.012837,-2.976700,-8.806578,-8.887233,-2.215921,4.381255,-0.163219],[6.073215,-2.159793,-5.629274,7.596123,3.152009,3.884283,-4.582806,-1.425566,-4.783191],[-2.349071,9.878769,0.176969,-6.072745,0.264701,0.420121,-1.985241,7.058020,7.144282],[9.607654,-5.349586,7.584793,-1.467409,-6.956841,2.011873,1.694743,-1.288143,5.838767],[-6.655961,9.768192,3.250816,3.049198,-6.182439,-0.118056,4.391327,-0.557699,-6.581535],[8.327302,7.015917,4.584513,-1.447322,-0.298756,4.212401,-3.535220,8.797934,4.262840],[-8.746205,-2.215701,-2.749917,-7.667712,-8.321622,5.494018,9.551260,7.005757,-4.008624],[3.710953,1.061721,4.041901,4.727313,3.964907,-0.283677,1.366886,0.672394,8.322138],[-9.421559,5.921398,-3.600371,9.987126,7.091804,-5.189754,8.252969,-1.901941,9.616993],[2.370108,1.269528,0.940670,-9.325415,-1.372762,-0.032841,4.163375,-8.210913,2.012958],[1.315469,-5.801718,2.290313,-4.020502,-1.390056,3.070967,1.295608,6.174307,1.791355],[-7.128767,0.884580,-3.928291,-5.759582,6.456964,-7.016338,0.296677,2.663786,1.224689],[-3.692356,-5.031052,-9.273321,-9.542777,-6.254526,3.416603,-7.314892,2.914699,-5.230383],[9.966321,9.826668,1.625886,7.565908,1.747624,-9.092809,0.300522,7.968533,-1.738153],[8.301183,7.527435,-5.644914,-6.383017,-3.424681,-3.887226,9.564646,9.558672,-1.938561],[-8.153916,5.219709,4.366599,-7.684435,-8.561462,-8.403008,-1.054570,1.912125,9.255188],[-0.703030,-7.635310,-1.305778,0.296783,-6.347677,-0.920893,-5.898177,-8.332557,0.251548],[9.996986,-3.639982,7.905279,-8.858113,-9.715924,9.596739,2.740880,7.451201,-4.891910],[5.833034,3.296442,-3.122580,-3.050773,3.829123,-9.964251,-5.754968,-1.709568,7.813638],[5.722124,2.355853,6.436250,-1.213375,-3.953396,-1.439370,8.230581,0.445803,1.421812],[-8.269721,-7.426270,-9.279180,-0.291726,-7.617250,8.816563,-5.084269,-5.643562,-0.770806],[-6.071393,-2.569297,3.776735,8.232878,-8.498682,8.828434,-2.019296,-3.124346,3.625447],[3.856748,5.374859,4.625374,2.531530,-5.236097,0.354799,8.540290,6.322289,4.114668],[-0.587883,2.371755,1.315122,-4.999856,-7.029312,-5.491144,3.199835,-3.538470,8.007861],[1.631813,8.007825,-1.458122,4.980522,6.936464,-4.770560,9.027620,0.576242,9.903832],[3.476252,3.279723,-1.867744,-0.043637,4.396131,1.104761,-6.783274,-5.379762,-8.552605],[-1.458696,-1.877836,-8.213912,-8.265505,-7.488294,-8.269635,-6.440617,6.363156,8.597543],[5.384912,-8.378885,-9.993272,-6.495209,-0.103398,1.875846,4.703297,-3.665347,7.783375],[-6.654298,-3.563860,8.560069,7.592576,2.117298,2.829316,-5.934690,-1.836518,-3.711485],[-2.675642,5.103554,5.607866,6.222168,-7.520164,-6.457363,-9.882906,-3.608386,2.448318],[7.241946,8.567646,-2.846113,-2.890951,-6.021950,4.183706,7.664639,5.057336,-8.080396],[5.965757,4.011473,-5.127334,3.073916,5.892045,2.265059,-4.821350,5.927858,8.734324],[-4.269904,-7.664425,-8.222032,5.400372,-7.886131,-5.554093,6.226328,-0.577818,-9.495397],[7.326962,-7.522025,0.880591,1.729657,-3.380275,6.649041,-2.964642,4.080915,-3.949658],[-6.402412,-2.293947,-1.630858,-5.888814,-3.735608,8.711747,3.659969,7.567719,7.197538],[4.124182,-2.627993,2.385491,-8.506366,2.559545,-8.993563,3.767765,-6.403745,1.924767],[6.450781,-8.915689,8.692664,-9.768756,-8.484167,-5.312554,-8.678556,3.342308,1.187233],[-3.371534,-6.408713,-2.883953,-3.697010,-7.500448,6.760436,3.317049,8.026496,-5.088907],[0.260044,9.747467,-8.950200,4.009250,4.082442,9.869390,3.828082,-6.900027,-5.734772],[9.281618,9.005573,5.178615,7.772308,9.455796,-7.491992,4.279583,-1.970380,-1.492129],[-4.270505,4.359768,-7.559666,6.599367,-8.267693,1.230223,-6.687971,0.600390,-5.102553],[-4.811064,-5.615401,-7.920475,4.600487,-1.595593,-3.474248,4.440738,0.327843,2.167753],[1.602389,6.343385,-8.174865,-2.551030,4.411156,-3.640364,-1.699571,-4.947415,-9.283259],[-9.749354,-1.976163,8.056789,7.230343,-4.624063,9.064117,-2.329125,-9.851836,8.227371],[-4.907285,9.172738,6.010903,-9.861214,-5.376037,-1.386007,8.817663,-3.631679,-9.932841],[9.082717,-8.418260,-1.753031,6.279383,8.797375,-5.000494,-7.849568,-3.619167,8.094749],[-4.818548,-3.485238,-8.095822,8.981205,2.884656,3.451530,-8.574410,9.257347,-1.288239],[-1.154453,-4.051771,0.843168,-6.702758,6.513486,7.586959,9.868921,-7.274957,-1.714354],[-1.698519,9.977567,-8.645916,0.067044,8.877748,0.942879,-1.662981,4.363054,8.843903],[-4.749482,-6.084844,6.107057,-5.794771,4.176681,-5.093134,3.314118,-6.820888,-7.715350],[9.196703,2.270702,-7.983742,4.297373,-6.459092,9.096019,1.548879,-2.310920,6.786182],[-8.054549,-3.161580,2.690822,4.713221,7.010434,0.482550,-4.937858,-0.284944,4.746798],[7.113260,4.440060,5.473757,2.954378,-1.062791,-4.261343,0.806141,5.406783,9.942977],[-5.770770,9.847109,-6.407197,9.302073,-0.090275,-1.318720,-8.296294,-9.217833,7.390018],[-2.539372,-7.834886,-5.290345,9.431241,6.527187,2.134170,3.881878,-3.889798,-8.376976],[8.332828,5.346639,5.696036,5.178739,0.279515,5.449087,6.696139,-0.307328,9.721982],[-3.039738,-2.815453,9.256915,-5.696595,-0.836213,-9.976221,2.947809,-5.405997,5.426819],[-2.627823,-4.095605,-8.649756,3.448092,8.677646,6.518939,-0.388316,0.429623,-0.623310],[7.163012,7.800828,9.744693,-8.666148,7.269457,8.212992,-0.539237,4.898162,-4.866942],[-2.522471,3.183837,7.975418,-7.081097,0.348178,-2.888610,7.114667,-7.678556,0.216778],[-9.152729,1.811307,7.748176,-6.703329,-7.493675,-0.007992,5.358729,-8.034102,-5.451724],[9.489116,-0.388267,1.714917,-9.364027,-9.093954,0.867873,-8.034895,3.687161,-7.565006],[9.598889,-8.997875,-0.440129,-6.457874,2.075330,2.192556,-1.966215,1.063762,6.686569],[9.400307,2.281533,-0.807587,-5.037672,-5.371300,-1.703003,-1.450086,3.072390,-3.550151],[4.953049,1.421886,7.847057,-6.692362,9.864035,-0.235419,-3.706883,2.189397,1.183168],[4.488191,-9.266010,6.310241,-8.288305,-9.374395,-2.099794,2.840815,5.012775,0.517446],[3.016929,-5.628984,6.754367,8.300706,9.948889,2.337746,4.475756,-9.084552,-8.875983],[-1.403235,1.797725,-8.656813,9.750104,9.322373,-8.396807,-2.078690,-6.465904,-5.395415],[8.744591,-3.911019,-4.654567,-8.148509,-9.639671,-5.680144,-9.618473,5.059726,0.416617],[-2.058935,5.331112,-9.938820,-4.801794,-2.863610,0.378768,-0.217424,-2.162692,5.660778],[-6.024632,-2.302703,-5.786301,4.224563,-0.495218,-0.682916,-1.962305,-4.808577,-0.486409],[0.046062,2.117936,-8.611687,-6.962872,-4.300702,6.163101,-8.246581,8.041973,-4.159007],[0.973779,-4.710455,-1.517206,0.731018,8.253443,-2.427481,-2.886973,-8.559711,7.451342],[0.395524,0.835151,0.466654,4.271088,-2.066572,-0.376971,2.537893,-9.049316,9.530135],[-0.965726,1.232214,4.185732,-8.893343,8.839233,5.504201,0.107936,3.574891,-6.357695],[7.150139,-7.342260,-3.867272,-4.473269,-8.866661,-2.985367,5.912655,-9.331503,-6.986448],[-5.759668,-7.568614,-4.721914,0.439058,-1.555951,-2.248694,8.367678,-8.199029,-6.496542],[-8.620901,-2.223033,0.234725,4.609801,-4.595730,-9.887437,7.558458,7.752118,-2.724164],[8.960832,8.131178,-1.245924,7.734479,3.011035,4.178707,-9.352040,-2.761994,-3.999574],[0.006780,-9.957907,-7.819592,7.606172,2.965403,1.852384,-9.893447,6.561277,-0.875158],[3.149451,8.191721,1.090789,-9.893061,9.452701,5.227084,2.902206,7.571146,-4.165346],[-9.612991,6.964708,-7.831601,2.960609,4.145766,-8.763908,0.777340,7.620012,-8.466298],[5.435505,1.214674,1.861968,5.174447,7.985194,-9.963165,-8.842342,4.948546,-0.809043],[-8.598135,-5.389184,7.544013,3.582667,3.725779,7.019609,5.150569,-9.187933,0.827436],[1.958284,-3.318346,2.017675,-2.384926,9.989208,3.384076,2.267863,-2.727770,-5.007118],[-8.887061,-6.282040,-2.374390,1.822806,-4.078574,-9.917518,1.920145,-7.888205,6.569109],[-0.691303,7.575352,2.469350,-1.265113,-8.492842,6.424025,-1.547381,-8.861941,5.674291],[-9.284776,2.661480,-0.197456,9.335745,0.343208,-6.775613,0.916078,2.966318,-6.209947],[-2.311907,0.203393,7.097770,4.926208,7.646316,-1.719621,-1.634505,7.964983,-7.594947],[-7.666771,-2.299076,6.079541,-2.156910,2.375034,-9.858778,-8.727531,-3.820617,9.335413],[-3.986620,0.385702,2.358136,-2.588280,1.249712,2.910181,-2.529730,0.236621,4.590474],[3.527578,1.779317,9.575054,-3.945994,-4.514199,-2.906076,3.492655,-8.179001,-3.842247],[-4.480823,-6.745525,-8.421285,6.294596,1.052312,5.341973,-6.773124,-6.836980,-6.369542],[6.227443,5.044479,0.995122,1.317937,9.931913,-6.831171,6.352473,-5.615199,-0.738383],[6.098031,8.720780,-5.039963,-7.681043,6.402524,-6.541232,-3.039412,4.573886,-7.506277],[1.248424,6.601629,7.608886,-1.929823,-6.622510,-7.929030,-3.068778,7.002959,-9.704533],[-2.978099,-4.658644,4.762703,8.536157,-1.179644,-8.159524,-2.121124,-0.800429,-9.966537],[6.102375,3.526913,1.669165,-9.972877,7.271215,-5.329795,6.662135,-5.230059,-4.838142],[-1.138314,-8.443440,-5.039781,9.928072,-4.625017,-9.799657,-1.604235,-5.844592,-1.019555],[0.594633,3.788193,-2.621104,7.134402,-7.282700,4.256436,2.254353,1.293857,-7.081213],[-7.695623,-4.489026,4.014811,5.957298,-8.053838,8.547986,-8.830001,0.079382,-5.948405],[8.338091,4.309611,6.054214,-1.647788,-5.866521,-7.409231,-6.899635,0.822623,-8.169434],[3.590542,-8.137819,3.957526,-2.605323,-9.904216,4.057277,9.449142,-4.493182,-3.683662],[9.794298,8.582132,-0.257034,-2.369045,-1.218104,8.812600,8.443566,3.587187,-0.702727],[9.369670,-4.970085,-2.009054,-3.399280,-6.025532,-3.770011,5.784416,9.351422,-4.254650],[-8.487250,-0.251945,-7.299363,2.062857,6.773598,0.433461,4.469047,-3.767375,-7.566495],[5.725999,5.678924,-6.117455,0.635212,5.901367,-5.070669,-9.108208,5.783934,3.126442],[9.615915,2.639346,3.230952,-3.816340,5.570010,-7.057724,-5.047631,7.397245,2.049117],[6.398589,5.421556,-5.256898,-5.225616,-8.107558,0.414038,0.620074,6.145166,1.118598],[6.507068,1.221669,9.101823,2.165525,-0.599070,6.685104,-1.714018,-2.778378,6.181423],[4.152069,9.560600,8.831239,8.068753,3.426394,8.285598,-2.743249,1.887714,-4.524416],[5.540954,-6.303430,-8.739807,-5.329739,-8.652095,-2.501284,4.635474,-5.842384,8.624962],[1.495064,-9.127068,9.207840,-3.432339,5.497733,-3.195041,-0.972672,0.111268,6.313145],[-8.972507,-9.165250,-1.043082,-9.705774,-1.714934,-2.481110,6.942894,-4.968699,5.385984],[1.130362,3.623525,4.854375,-1.347415,-5.571805,-0.678836,9.558751,6.587354,3.367265],[-0.477556,1.074882,-5.727739,7.810100,9.684598,-3.537170,0.356951,-0.965827,-3.992700],[-9.851912,3.372839,-2.256320,-9.637516,-6.835558,8.462420,7.601226,-4.181211,-3.687290],[9.791968,-9.215461,6.101386,2.265040,-9.034759,-0.926341,0.225942,-0.986851,3.152070],[-0.355483,-6.037826,1.063671,-3.828689,-4.576561,3.977647,-3.572694,-7.324025,2.539040],[0.816062,-0.553192,6.699405,-0.103318,-9.330604,8.166551,5.484633,3.464997,1.305343],[0.644310,-1.503436,-1.504440,-2.425995,-0.280436,5.159761,-1.483037,-6.829365,-8.613648],[2.938248,-9.289018,0.292796,8.761697,3.932427,4.992101,6.541880,-6.195225,-6.479817],[3.321186,7.126915,6.572073,-7.787727,0.002181,-8.786827,-7.971002,-6.611723,9.908492],[-5.005574,-5.433497,-3.868355,-3.244671,-6.966082,4.300629,4.548029,0.243459,-5.150803],[1.957933,6.917862,4.631298,5.926435,5.616811,-1.335517,9.571727,-2.161318,-2.646068],[8.095514,-1.280634,2.655181,-5.389629,3.742554,-4.879637,-1.211500,-6.536468,-3.354585],[-9.598651,8.419134,-1.664691,-3.958917,-7.054293,2.141231,6.545335,-0.799457,4.723990],[6.644593,-1.753671,4.631811,-1.335955,4.792740,0.282357,-2.353828,0.098330,-2.628787],[1.514754,0.583299,5.273324,-4.514024,-9.579058,-2.533107,3.304386,7.826697,-6.550345],[-7.369726,4.266979,3.695813,5.286326,-3.234187,9.806499,-5.077895,7.128115,4.965164],[8.914445,-4.856074,-5.560474,4.707273,-2.335347,9.387059,4.416899,-9.196969,0.177743],[-1.046295,9.635893,9.241227,4.518636,-4.542561,-2.217371,8.783619,5.838992,5.552744],[-4.360019,1.850375,5.795928,-6.771087,-2.030541,9.346786,-6.369538,6.054997,-8.219425],[7.758015,-5.610703,7.034798,0.133501,-6.874410,-8.308049,-4.223133,-5.484734,5.713957],[-6.551492,4.116236,-5.502927,9.375183,-0.463791,7.694611,1.793267,-9.435308,-9.587701],[-3.357709,-8.032623,-3.381867,-3.863961,5.520152,0.921647,8.346402,-5.537605,-3.139521],[6.766178,-1.061829,-3.443878,7.381680,-6.288430,-8.392433,0.567338,-0.296451,4.641497],[-8.296079,0.321264,3.864958,-1.229106,-9.072799,1.933125,-6.225394,-6.436432,-6.701721]], dtype = "float64")#candidate|4795|(169, 9)|const|float64
var_4796 = relay.var("var_4796", dtype = "int16", shape = (660,))#candidate|4796|(660,)|var|int16
const_4797 = relay.const([-4,-6,-4,-6,-4,3,-8,-6,9,3,3,4,-8,4,-4,5,-3,-8,6,7,3,-9,2,-10,-5,2,-8,3,-5,-3,5,8,-9,-6,8,-6,-5,2,10,-6,-6,-4,-5,2,3,8,3,7,2,-8,9,1,-1,-1,4,-8,6,-7,-9,2,6,2,-7,1,2,-10,-5,5,4,5,-3,-10,-4,-3,-6,5,-6,1,-5,3,-4,-10,-3,-3,1,7,-2,5,2,9,3,-9,-2,-2,-5,-6,-9,-5,1,1,7,-6,-5,-5,10,-6,-7,-2,7,5,3,10,8,-6,5,-1,-7,1,9,-10,9,2,3,6,9,4,5,-4,9,-3,7,-9,2,-6,-6,-10,2,-3,-7,7,-10,-8,4,7,-1,-10,-6,-3,-8,1,-5,1,4,-4,-10,-7,-1,5,-8,-9,-5,-7,9,-1,-9,1,7,1,5,-2,-6,7,-5,-3,9,2,-4,-6,9,9,4,-3,-3,2,-10,5,5,-5,6,-3,-1,-10,-4,-7,-8,10,-6,2,-7,-7,9,5,4,6,6,-7,-2,4,-5,-8,5,4,-3,1,1,7,10,5,1,-7,1,-6,3,9,-8,3,-7,7,3,9,7,-7,-9,-4,4,-7,-7,7,2,-10,-3,6,-9,-9,4,-8,6,-2,10,5,-7,-8,-5,4,3,8,6,7,8,8,5,-4,3,-6,-2,-6,5,-3,1,6,3,1,7,-3,-3,8,10,1,-8,6,-9,-8,6,-3,-1,10,-4,-3,8,-7,-10,-1,6,4,8,-1,10,-1,3,5,4,9,-8,-8,-2,-7,9,3,-9,-7,-4,-4,-10,-5,9,-6,-5,1,-9,10,-6,-4,-7,10,1,-5,-8,1,3,8,6,-5,10,6,6,1,-5,5,-9,9,2,6,2,5,-3,-7,8,-2,7,8,-4,-3,1,4,-3,-1,-7,-5,4,4,5,-6,3,-1,-6,4,-7,2,7,9,10,-6,-7,-8,3,10,-3,-10,6,5,-2,5,-5,1,-4,-1,2,-1,-8,-2,1,8,-10,-8,-2,2,3,-7,-6,-2,9,-5,3,-10,3,2,5,7,10,4,10,8,-3,6,1,10,-1,1,-8,-5,-2,-6,8,-4,1,-10,4,-8,3,6,2,-4,-10,-9,5,-1,2,5,5,6,-7,-8,-4,-8,10,1,-2,7,1,2,1,-2,-3,4,-8,3,-9,-8,9,10,-2,5,7,7,9,3,-3,6,-3,3,3,9,-10,4,3,-1,8,-10,-10,-2,-6,-1,-1,-2,-7,8,-4,-1,1,4,-3,10,2,4,-9,-1,3,-2,10,9,-3,-7,-1,1,-6,-10,3,8,-2,-7,3,5,-1,10,-5,9,7,2,6,2,10,3,-3,-1,7,7,-8,-8,3,2,-9,3,1,-4,1,-1,7,6,-6,7,5,-5,-8,3,9,7,-8,-3,-8,-6,-2,-1,2,1,4,-1,-1,1,-7,1,10,5,-8,7,-5,6,9,-8,-5,-6,6,8,-6,-7,3,-3,5,3,8,1,10,-1,-5,9,-8,8,4,1,5,7,5,-3,9,8,-5,-1,8,-5,2,2,-8,-4,-6,-4,-3,1,8,10,1,5,9,-2,-9,-8,8,3,-10,-8,-9,9,1,10,5,9,10,-3,-1,3,-1,-2,-3,-5,-1,-1,-3,-2,2,8,-6,7,-2,-6,-5,-4,2,-5,3,9,-1,6,-3,-10,4,6,4,5,-4,-8,10,5,-2,-8,-8,-8,-7,5,-3,-7,-5,-7,6,5,-5,-9,9,-8,4,-3,-2,3,7,1,5,9,3,-8,-7,1,8,-8,3,5,1,2,-10,3,3,9,2,-7,-3,-3,10,4,-5,-4,-8,8,8,3,4,-7,-9,-6,-4,5,-10,8,4,7,-4,-8,1,-4,-5,-8,2,-8,4,10,-1,-7,-3,10,-9,-7,-9,7,-8,-8,5,-3,-3,-8,7,7,2,8,1,5,6,-4,6,2,2,8,-5,-6,4,-5,1,10,6,-3,7,-8,9,-5,-3,10,8,-3,-8,9,-3,2,6,9,9,10,9,8,-10,-4,1,-8,-9,2,-10,-1,5,6,5,-5,7,-2,-5,-6,-5,-8,4,7,-9,-5,10,-3,-9,-10,4,1,-1,2,5,-1,-10,-9,8,-2,-5,-5,10,3,7,-6,-7,4,1,-5,6,1,8,-10,7,1,-6,-8,4,-8,3,4,2,-9,6,3,2,7,3,-6,9,2,-6,4,2,-3,-7,-4,-6,3,-8,5,-10,2,8,-4,7,-4,6,5,1,2,6,8,8,-6,-8,6,3,-1,-8,-8,1,-8,-2,-7,-2,3,-5,-1,-2,9,10,-8,-5,-4,4,-8,5,-5,10,10,-1,1,3,10,1,-7,-9,3,-4,9,-8,2,-4,10,9,7,2,9,-1,3,10,-4,3,-3,4,-4,8,8,2,-7,8,2,-3,5,10,8,8,-9,9,7,-3,-6,6,2,-1,-9,-2,-1,4,10,6,5,2,-4,-5,4,1,-8,5,-4,-10,7,6,8,-6,3,10,5,-2,-3,-9,7,-7,6,9,-8,3,-1,-5,-8,-9,4,-8,9,9,1,9,9,-6,-5,7,2,-1,8,1,-1,-6,8,-6,-6,-1,7,4,3,3,5,-5,9,-9,4,-2,10,9,-1,-9,4,-3,-9,6,-7,1,-10,-8,-4,5,-8,-2,2,8,-8,10,4,-2,-10,-4,9,10,4,8,6,-6,2,-3,-1,8,6,1,1,3,-4,-10,-4,4,-8,-6,8,9,9,-4,2,10,-2,-10,-6,6,-1,5,-7,-5,-1,-1,2,1,-3,2,1,-5,-4,-7,9,-10,-2,-6,-4,-5,-2,8,-6,7,-5,9,2,-8,9,9,-1,-8,4,1,7,-2,10,-4,8,10,-10,-9,2,-1,5,1,-8,8,-5,9,2,-2,3,1,-7,9,9,-2,-7,2,-4,7,-3,6,-1,9,-10,8,-7,9,1,1,-5,-10,7,-4,6,5,-6,7,-7,1,-7,1,9,8,-7,9,-2,-4,-5,-10,-10,10,5,3,6,-9,4,-9,-1,4,-3,-10,4,-4,4,9,10,-2,-9,-8,3,-9,9,-2,4,8,9,-4,6,9,3,-6,9,9,4,-4,7,4,3,4,-1,7,-2,10,-3,8,9,1,3,-6,9,6,5,-2,5,6,-10,-6,7,10,7,6,-1,1,-8,3,-9,5,-8,-10,3,-10,2,5,4,-9,-3,-4,-3,2,-6,-1,3,-6,-5,5,6,-10,3,-8,-3,5,-4,-4,-8,10,-1,-8,9,7,-4,-1,-8,-9,-10,-8,-3,-1,-6,6,3,-7,-7,1,2,-1,8,5,6,-9,-10,-1,1,-2,9,10,-3,6,-3,7,5,-10,-3,1,10,6,-8,-4,9,6,3,-9,3,8,4,-1,-5,-4,-9,-8,8,8,-2,-4,10,8,6,-10,7,-4,3,-2,8,9,-2,4,-2,5,-7,-5,-1,-10,4,-5,-10,-4,4,-5,1,-8,10,2,-6,-8,-7,2,5,2,-4,10,6,8,9,10,5,4,2,1,-6,3,-1,-9,8,8,10,5,4,-6,7,5,-6,1,-7,-7,1,-6,6,-1,-9,-6,8,5,-5,3,10,5,-8,-5,-1,10,4,-4,-1,3,-3,9,10,-1,6,10,3,4,-4,-8,3,6,-2,-8,-7,-3,1,2,-7,-10,-1,10,6,7,3,4,1,-3,-2,8,-3,-10,4,-6,6,-3,-6,1,7,3,-3,-5,-9,-9,-1,-8,9,-9,-9,1,2,-2,-7,10,3,3,2,-2,8,10,10,4,-8,-10,9,-4,-7,9,3,7,5,-4,8,6,9,3,-7,-7,-9,4,10,9,4,3,-7,5,-8,9,-5,10,-2,-3,4,-4,7,-1,5,8,9,-9,10,8,-3,4,1,-3,-10,4,6,-7,7,2,9,3,9,-4,-8,-9,-1,-10,-8,7,-9,10,-10,-8,6,-1,2,-4,-8,2,-1,8,3,-4,2,8,4,-7,-6,3,9,-8,-8,1,-1,1,-5,3,8,2,-3,-1,10,-1,-5,2,-8,2,-3,1,10,-7,2,7,-9,10,-9,9,9,8,8,-7,-10,-2,5,-8,-9,2,-5,3,-7,-8,-4,-8,10,-6,-3,3,-3,8,-10,3,-9,1,5,10,7,-8,4,3,-1,-2,-3,10,2,1,4,1,8,-9,-8,-5,-6,7,1,6,2,-6,3,-8,-4,6,3,-1,-1,-4,-9,7,3,5,-5,-4,9,9,-8,6,8,-9,-1,-3,-1,3,-7,-5,-6,6,1,8,2,1,-6,1,1,6,10,-6,8,1,2,8,6,9,6,7,-7,-7,5,7,-5,10,2,-6,-9,-8,1,-1,1,-4,7,2,-8,-7,6,3,-8,-7,-10,3,-8,-10,-6,-5,1,4,1,-2,-7,-3,4,4,-8,-2,-2,8,5,-10,-9,10,6,-7,-9,5,-7,-7,-6,-1,-2,3,-8,-5,-8,-4,3,6,7,6,2,2,-2,10,-9,-2,-6,6,-5,8,9,-2,-5,10,10,8,9,-1,8,-9,-6,10,8,-7,9,8,-9,-10,7,-6,8,-10,3,-8,-7,-8,9,-5,7,10,9,-6,8,-3,-6,3,3,2,7,7,-8,6,-4,-6,5,9,-4,2,-8,7,4,-9,3,2,-3,5,5,-3,-2,-10,-5,-3,-3,-10,-2,7,9,4,9,-4,-7,6,-10,-1,-7,9,9,10,-7,-2,-9,4,5,2,5,6,4,-2,-2,7,3,1,8,-3,-4,-3,-4,-3,-6,-2,-2,1,-4,-2,-5,8,-7,-9,2,1,8,3,2,2,-2,10,-7,-1,5,7,-2,-7,4,3,9,4,-9,-1,4,10,-10,-9,1,-5,-3,8,9,-6,3,-9,-5,-2,-1,-5,6,10,-6,-10,10,5,10,-3,-9,2,-10,4,7,10,-9,-4,10,1,-4,5,8,9,1,7,-1,-10,1,8,2,-5,-5,-5,2,3,7,-1,-5,-1,2,-6,8,-6,4,6,-4,-4,-1,-5,5,2,-7,-4,-3,1,-4,2,5,-2,4,4,2,-8,-6,-7,-3,2,-2,-2,-3,2,-10,-1,2,5,-3,3,-6,10,4,-3,-6,4,-3,-3,-9,-4,-9,3,10,7,-6,3,-3,-2,-10,-3,1,-4,-4,-1,-4,-2,-1,4,5,-9,6,-1,-4,-6,-1,1,-8,8,-2,7,-3,-8,-5,8,-8,9,10,2,2,-6,-9,-4,-2,1,1,-1,-6,-1,-3,-9,7,-2,-7,-10,-4,-3,-3,-10,-1,-10,-8,9,10,-6,-10,-4,2,-3,-2,-1,9,-7,-1,7,9,-6,-8,2,-2,1,-3,8,-10,-8,4,-9,3,7,-5,8,4,3,-7,-10,-3,-3,-7,-4,4,9,1,-2,4,-8,4,4,-10,-9,-2,-7,1,1,-3,-5,9,4,2,4,-5,-6,8,6,7,-6,4,5,-3,3,3,2,2,2,2,-3,-8,-8,10,-4,-1,7,-4,-3,9,5,-4,6,3,-1,3,3,-6,10,5,5,4,3,4,-9,2,9,-10,-1,4,-7,-9,-10,1,8,-4,4,-7,-8,-3,-8,-10,8,-1,-3,4,-1,8,5,-1,-7,-8,-5,-8,-7,-1,-5,-1,10,-3,-8,3,-9,3,2,6,1,10,10,8,-2,-4,1,-1,1,4,-2,-9,7,2,-7,9,-6,-3,-1,-6,1,10,-7,-3,-5,-8,-3,6,2,-9,10,-5,1,1,-1,2,8,4,-3,4,3,4,2,5,-10,10,-6,-4,-5,8,-3,7,-4,-7,-5,2,-4,3,-6,7,-7,-6,4,-10,7,6,-8,-9,2,-9,6,7,10,5,2,-4,1,-4,9,7,-1,6,-5,-4,-3,-6,-4,1,4,-10,10,-7,-3,9,4,8,8,-5,-2,-10,9,6,-8,7,-4,10,8,-8,-8,-3,-2,8,-8,1,-1,3,-6,5,-5,-7,1,5,-7,-2,-10,7,-7,-10,-7,3,1,-2,-6,-10,-1,-1,4,-2,9,-6,-9,8,10,-1,10,-7,-3,-7,-7,-1,4,3,-8,-1,-10,-7,-1,-7,5,-10,-3,6,-7,6,-10,2,-8,3,9,6,-10,8,-10,-2,2,-9,-8,-4,10,7,-6,-3,4,-4,-8,4,-3,-9,7,9,-1,6,-5,-2,-10,-4,-10,3,-3,-8,-7,-8,5,5,-7,1,5,9,10,5,-2,6,-8,-7,6,-9,-10,-3,-4,-8,3,1,9,-7,3,6,-3,-9,-1,-9,6,10,-8,-2,1,5,9,1,-6,-4,-10,-4,5,3,2,5,-3,3,-7,-4,-2,2,5,-9,10,9,8,-5,9,-10,-4,-8,-1,-8,5,-7,-1,10,10,6,-3,-2,-2,-3,-6,1,-2,-7,-9,1,7,1,-7,-3,-10,-1,-5,3,9,-6,3,-7,8,7,-8,-9,6,-4,-3,-4,-5,-6,-5,6,9,2,-1,6,-2,-7,3,7,8,-4,8,3,-2,-4,10,-2,-5,-10,3,8,-10,6,-2,5,-4,-2,9,-8,4,8,3,2,6,4,9,7,-6,-5,7,8,-10,-6,4,8,5,2,7,5,6,-5,1,4,-4,-6,8,-2,2,5,-9,6,2,1,-3,-3,8,-2,7,-6,5,-1,6,1,-1,-8,1,6,3,3,8,3,-3,4,-2,-2,-2,10,-6,10,7,-10,1,4,-7,-9,2,-8,-8,-6,3,-7,-10,-5,-8,-6,2,-7,-5,-8,-7,-7,9,-5,-8,-9,-8,-7,5,-7,-8,2,-2,-4,10,-9,-7,6,-4,6,2,4,-4,-10,-7,-6,1,-7,-6,10,-3,3,-7,-9,-1,-4,2,5,-1,7,-2,-4,-2,6,4,-4,-4,10,-7,2,-3,1,4,-1,10,4,-2,5,-3,-4,6,5,-6,-3,3,-8,-2,2,-4,-5,-3,-4,-9,-1,-1,-1,-2,7,1,-8,5,-3,-7,-7,1,3,10,9,8,2,-4,4,-1,-1,-3,9,6,-7,8,-2,-5,-3,4,-4,3,-10,1,10,-7,4,-1,-9,6,2,1,3,10,-1,-9,5,-5,8,10,-9,8,-8,8,-7,-5,-10,-2,-2,-10,-5,2,-10,4,4,-5,-3,-8,-1,-8,5,-7,10,8,2,-7,-9,-8,5,-7,7,3,5,9,-2,-6,2,1,-3,-4,-9,1,-1,6,-2,-6,-5,7,2,7,4,-10,7,8,10,-6,-4,-6,-7,-10,7,5,7,-3,-9,5,-4,-2,6,-2,4,5,4,-3,-6,-7,1,7,4,-8,-2,8,8,6,10,10,5,-1,7,-7,9,5,8,7,-4,4,-10,2,2,1,8,-7,-5,10,-4,-6,-3,-4,-5,-2,8,6,8,-5,6,4,7,4,2,7,-5,1,-4,-8,6,9,-5,3,3,-6,5,-2,3,-8,2,-1,6,4,8,10,-3,9,4,-3,-1,-5,-1,9,-4,9,2,-4,3,-10,-1,7,1,-4,-8,-3,10,-3,4,-4,-1,-6,-4,-3,10,10,-8,-5,-2,4,-8,9,5,-8,8,-9,7,-3,-8,2,2,9,-8,8,5,-10,-1,2,2,4,6,-8,9,-5,-10,4,8,1,-8,-6,3,8,6,7,-2,8,6,-10,-7,-1,2,8,-9,-4,8,-9,-7,-4,-7,-10,3,6,2,-6,2,6,5,2,3,-8,-7,3,-4,-8,9,1,-6,3,4,8,9,8,8,-5,-7,1,1,-1,-2,-9,6,6,8,1,1,8,5,-1,7,5,2,-1,1,-2,-10,5,1,-8,-3,1,-2,3,6,-2,1,-10,-3,-7,-2,7,-10,-7,-6,-9,6,2,-10,7,8,-2,9,3,2,6,9,-3,-10,9,5,-4,8,3,10,6,1,8,-10,2,2,-4,-3,-9,9,-8,6,9,7,-1,-2,-8,7,-3,-8,-6,2,1,-1,8,-10,6,8,9,-5,-4,-1,2,-8,-2,-9,-7,2,-6,-10,-3,-1,-6,4,4,-10,-8,3,-9,-4,-7,1,4,10,6,-6,-10,-8,8,4,3,2,-4,-1,4,-4,-8,5,-6,-6,6,-1,-1,-5,-3,10,-2,9,-7,-9,-8,4,-7,10,3,-8,-7,7,10,-6,-10,10,1,10,-2,9,-3,3,-9,5,-10,2,2,7,1,6,2,-5,-7,-8,-5,6,9,10,-4,-9,6,2,-1,9,-2,3,-2,8,-3,-8,-5,-8,6,2,1,-4,3,4,-7,-5,-1,-5,-5,2,-9,-8,-7,-9,-4,-2,-2,-3,-4,-10,3,2,-4,-7,-9,-8,-1,5,5,-10,-4,-6,-9,-1,6,-6,7,-3,4,-1,-10,3,5,1,3,9,-2,-2,-3,-7,-4,-8,-2,3,2,1,3,3,-4,-10,-6,2,3,2,-9,-7,-2,6,-5,-10,-3,8,6,5,-8,7,-3,3,-7,4,-3,-8,5,9,-5,8,3,-5,9,-1,3,2,-8,-4,9,-10,-8,-7,4,-6,8,-10,-1,-10,-3,9,8,3,-8,3,-4,2,-3,8,7,-8,-5,-6,3,7,4,1,-9,1,3,7,-7,1,7,7,1,-9,-6,-5,10,5,9,-7,2,8,-2,-3,3,10,3,-4,-5,-5,9,-9,3,2,-2,2,6,9,4,-8,-6,-7,-8,-7,5,5,1,10,10,8,10,3,-10,6,4,1,4,1,10,-4,-8,-8,5,-5,-1,-6,-2,8,1,8,-8,7,8,4,4,4,9,2,-1,10,9,2,4,5,-4,5,3,-5,-10,8,7,7,-3,3,-8,-5,-8,10,9,-9,8,6,-6,2,-10,-9,2,6,-8,9,-9,-5,-3,10,10,-6,3,-10,3,-4,-2,-1,-10,-2,-3,4,-7,-10,4,4,-9,-4,4,-1,4,9,8,-2,6,-7,-5,4,8,4,-6,-7,3,-9,-3,-4,-8,7,-5,-4,-1,2,2,9,2,3,6,-4,9,-3,-4,3,10,-7,9,5,-4,7,7,-5,1,-8,6,-5,-5,-1,-7,-8,6,-1,-9,-4,-7,7,7,4,10,7,4,-4,2,8,2,6,3,3,-6,-3,8,-7,-3,-4,-3,-10,-5,-5,-8,4,-1,7,8,6,-7,-6,-10,-1,-4,-8,6,-3,10,7,5,9,-4,9,-8,-7,-3,-9,8,8,5,-8,-1,1,10,-1,-9,-10,9,-4,-4,10,-6,2,9,3,-5,-6,-3,-10,-4,10,1,6,-1,5,-3,-5,-7,10,-7,1,-7,8,1,5,-9,9,-6,10,-7,-5,3,1,6,-6,-6,5,-2,-3,3,10,-4,-1,-6,-10,-7,7,-2,10,10,3,2,1,-2,-9,-4,-6,2,1,-10,2,5,-9,-10,8,-4,-7,-8,-2,-5,-7,2,9,3,-1,-2,-4,6,7,2,-5,-4,-3,-1,5,6,4,5,1,5,3,-8,-6,10,-10,9,-9,8,-7,6,2,2,-9,9,-7,5,2,8,-10,1,1,5,-3,1,-1,-10,7,9,10,-10,-4,8,-10,4,-5,2,-3,3,10,-3,-10,-4,-6,-5,-2,-7,1,2,2,-5,-9,2,-4,7,10,6,7,-7,4,-1,-10,-3,-4,6,1,4,6,1,4,5,1,3,9,1,5,-10,-10,8,7,1,-3,7,2,1,-9,-1,-6,-6,-6,10,9,-6,2,5,8,-9,-5,-2,8,5,10,6,8,-10,-9,6,10,-8,-8,6,-3,8,-3,4,-4,9,-5,-9,-6,-9,-1,4,-9,-6,9,2,6,9,2,1,4,-1,6,2,-9,9,-8,-1,-9,-3,-8,-2,4,-2,-7,-2,4,2,3,1,6,4,-5,8,-4,4,-5,4,8,-8,2,7,-3,-5,-2,-10,6,-2,-1,-9,-3,-6,-9,-10,10,-3,-7,-6,1,9,-8,2,5,9,4,10,10,8,10,-6,5,1,-2,-6,-8,6,6,-2,-2,6,8,7,-5,7,10,-4,-5,-1,-1,1,2,7,-7,-10,3,-9,3,1,9,-3,-3,6,-1,-6,3,-4,-7,4,4,-3,9,10,-5,2,-8,3,-4,-9,5,7,-5,3,-6,3,1,6,7,-6,6,-8,-4,6,-1,3,2,-4,-3,-8,7,8,1,-10,2,3,-5,-4,2,-9,7,-9,-1,6,3,4,7,-8,10,7,5,1,10,10,-7,5,10,1,-8,-7,2,10,5,-8,-5,6,6,3,5,10,-4,-4,-10,8,-3,-10,8,6,6,-8,-2,5,4,-6,3,10,2,2,10,-3,-6,-10,10,8,2,1,2,2,5,-4,-5,-6,10,-10,-9,-7,-5,-1,-5,-5,7,-2,1,5,-3,4,7,4,9,10,-8,-7,6,-10,-9,1,-10,-4,-9,8,-2,-8,4,6,8,3,5,-1,-8,-3,7,-2,6,-9,-9,-5,-1,7,6,1,1,2,-6,6,-7,2,2,-10,-1,3,7,-8,2,-8,-1,6,4,8,4,-5,-5,-2,10,7,-2,9,10,-2,7,5,-8,1,-9,-4,-5,2,8,6,10,9,-4,3,-8,-8,-2,2,-2,-4,2,-3,-10,6,1,-6,-5,-4,5,-3,-2,-7,-2,6,4,4,-1,2,2,-9,-7,-5,-10,-1,6,-8,-3,-5,-8,8,3,7,-8,3,-4,-6,-7,-5,-10,4,10,-6,-10,7,-2,-7,8,-8,2,10,-6,-9,7,-4,10,-7,-9,-3,-4,7,9,2,10,6,5,-8,-2,6,2,-10,-7,3,10,4,-10,1,-7,-7,-4,6,10,-2,2,-4,7,7,9,-9,7,4,-6,-7,7,-9,6,2,-1,8,2,8,-4,-3,-4,-3,-8,8,-1,7,8,10,-3,-10,9,-8,10,2,2,8,-8,8,-7,9,3,5,-4,-5,-1,3,-3,-3,-8,6,10,5,6,-5,-10,-10,-2,4,1,-5,4,-4,-9,-1,-2,7,2,4,-5,-10,3,10,4,1,1,8,2,-4,9,-7,4,-4,6,-4,-7,6,4,-5,-7,-2,2,6,3,4,7,2,-5,-8,6,-10,8,-5,1,1,-6,-10,4,-2,-8,-9,-10,-6,9,8,10,2,-5,2,-7,-7,5,-3,3,-6,-4,6,5,-2,10,4,7,9,1,9,-4,2,2,-10,1,-6,2,10,7,-4,2,-6,3,1,7,-3,6,10,-1,3,-6,-8,4,-8,9,-6,1,10,-7,10,-2,-3,-10,-4,-3,2,9,-8,9,-2,9,1,-9,-3,-3,10,-8,2,6,-1,-7,8,5,7,-3,2,8,-1,-6,5,9,-3,-8,7,2,-3,-4,-5,7,3,-4,2,-10,-10,9,-6,-1,-5,5,-3,3,8,-6,-6,-8,5,-6,3,-1,-2,6,-7,6,-6,-8,-10,4,6,-2,3,3,-1,6,-5,-6,-5,7,-1,-8,8,5,-6,-7,-7,5,8,-7,-7,4,9,-2,-2,8,4,2,1,9,6,-10,-4,2,-4,-2,3,-2,-5,7,-3,-3,-3,10,-2,-3,-4,3,9,1,-6,2,-8,10,-1,3,1,3,-10,-10,-2,5,6,-4,-3,6,-8,1,-7,9,9,3,7,6,9,-4,-6,6,6,7,-5,-1,5,8,2,-9,-9,-2,8,-6,3,7,8,3,5,3,5,2,-5,-2,-10,-9,3,7,-7,-6,4,10,-9,6,-5,4,3,9,-8,5,4,-9,5,-6,-3,-5,-8,-9,-9,8,3,3,-10,4,-7,-8,-4,6,6,-4,-4,4,-3,8,-7,6,-10,4,5,-8,8,3,-4,1,-1,-7,-1,9,-5,8,3,1,-6,3,-4,6,-8,2,-8,-10,-8,-7,1,5,-3,7,6,1,-3,-3,-9,7,-8,7,-3,-6,-7,2,-9,1,9,-9,-6,-6,9,3,8,3,-10,1,-1,-4,10,-6,2,-2,-7,-5,3,9,-9,-8,-2,-3,3,-4,1,-5,-6,1,-8,1,3,-6,5,6,8,3,7,2,9,6,-6,10,-10,3,1,-5,10,-1,-9,-3,5,6,-3,1,4,2,8,5,-3,8,-4,10,-6,-9,10,-3,9,6,-8,3,-6,-6,-5,4,1,3,9,-9,4,10,-1,10,2,1,-7,-6,7,9,4,1,-9,1,8,1,-10,-10,5,1,8,-9,-6,9,-6,-7,-4,-8,-5,-1,10,8,4,-1,8,6,3,2,-10,-3,9,-7,-10,-8,-5,-1,2,5,5,-6,-7,10,8,9,3,4,-4,7,-7,1,5,-9,9,-4,9,9,2,7,-1,10,10,6,-9,8,-1,10,-2,2,10,-8,-5,8,-6,9,-3,1,-5,9,-3,9,-7,7,-7,-3,-4,7,-7,7,10,-3,5,8,3,5,6,8,-3,3,6,7,8,-7,1,-10,-10,-5,7,4,-1,-5,-2,-10,-10,7,10,3,-1,3,-4,10,8,-8,1,4,-2,-8,-2,3,3,5,5,-3,10,-6,-1,-10,-4,-3,-2,-6,3,-1,4,4,-4,-5,7,-5,4,-3,2,3,2,10,10,-10,-1,10,7,-5,3,1,-7,-8,10,5,7,-7,-5,-4,-4,-10,7,2,-3,4,6,9,2,4,1,3,1,-6,6,1,-6,4,-10,7,3,1,-9,-5,-10,-2,-2,8,4,8,-3,9,-2,3,9,-7,-3,6,-1,-2,1,1,-10,7,-10,-5,5,-4,-9,1,9,4,10,-6,10,1,6,7,8,2,-10,-3,-3,4,-4,-1,4,-6,3,5,-2,7,8,-3,-9,-6,-4,-5,-6,10,-5,4,6,6,-4,5,9,5,7,4,7,-6,-9,-9,-10,-6,9,6,1,-5,5,2,-3,9,-7,7,-3,4,-1,-6,1,8,1,3,8,-9,-9,4,10,-1,8,-2,10,2,8,-4,9,8,8,6,-9,-6,7,-10,5,5,-9,6,-4,1,-8,10,-9,-9,-10,-2,9,-9,1,-3,-1,2,7,9,8,-5,9,4,-6,4,10,-6,7,7,-3,4,1,3,-6,1,-4,-8,4,10,7,-5,-3,7,-6,-6,3,2,8,3,-8,5,3,-7,-7,6,-3,10,1,6,10,-4,-3,-8,-2,4,9,5,7,8,9,6,2,9,-3,-1,-6,7,-3,-10,-10,-6,8,-1,-3,6,1,-7,-10,-8,-1,8,-6,-7,-2,4,5,-10,-1,-7,10,-10,9,-7,4,-4,6,2,-8,9,-6,-3,2,4,-4,10,6,8,7,-4,3,-6,1,9,7,-1,-10,3,-8,5,-8,8,7,1,3,5,-5,-3,10,-6,-1,-9,-1,-2,9,-1,-4,-3,6,5,9,-5,4,1,-1,1,5,-2,-10,5,6,8,-6,-1,7,4,-7,-2,-7,4,-1,-10,3,-3,8,4,-4,4,-7,4,2,-2,5,1,-9,9,-8,-6,-3,-5,7,-7,-4,-10,-7,-5,-10,-9,10,-8,4,9,-8,-4,4,-6,-9,-3,-3,5,7,10,-6,-4,-10,9,2,6,5,-3,-7,1,1,2,6,5,-7,1,-5,-4,-9,-8,1,3,4,-4,-6,-9,-8,2,-8,7,3,3,-7,4,1,9,6,7,-1,-10,-7,-5,-2,1,5,7,8,-5,-8,2,-10,1,-6,-3,1,-5,2,5,8,-4,-6,8,-3,-10,3,2,5,-9,-2,-8,-8,1,-3,-4,4,4,10,-3,-9,8,5,7,-1,-10,1,-6,-3,8,5,8,9,7,-6,-6,3,6,2,-7,10,-8,7,7,-2,7,7,7,9,-9,6,7,9,-9,-7,-6,6,-5,9,-5,8,-10,-9,-5,5,-3,-9,-2,4,-1,-6,7,2,-6,-7,-4,5,2,-5,4,2,10,-8,10,-2,2,-10,3,-2,-3,-10,-3,-2,-10,-3,6,-10,7,-9,-9,-9,-10,-1,-1,1,-9,10,7,9,9,-2,7,1,1,2,2,2,-2,-6,3,6,10,5,10,-5,-6,-3,-10,-9,-6,-2,4,-10,-6,-7,4,2,-1,-1,1,-9,-4,9,9,-6,1,-3,3,-1,-10,9,-4,-5,-8,-4,-4,-5,7,2,-4,-3,8,9,-9,-10,1,-2,10,1,-6,8,-10,-6,-9,-5,9,-9,3,-6,-10,-1,4,7,-3,-4,3,-6,-5,2,-3,6,-4,-6,-4,-9,-9,-5,-6,-10,3,5,-4,-1,-5,2,9,-9,4,7,-2,-2,9,-5,-2,-1,9,-2,-8,1,-5,3,-2,4,10,3,2,-4,-5,-5,3,3,-3,-4,-10,-6,9,-9,-2,8,8,5,-9,8,-7,2,-10,-4,1,-6,7,6,-1,-9,-7,6,-2,-5,9,6,8,-10,4,3,-3,4,1,6,-2,5,-3,7,4,-8,-5,3,-4,-2,-4,-2,6,-7,-6,8,-7,1,8,9,10,-6,-4,10,9,-8,9,-2,-8,1,-1,3,-4,9,-4,3,-6,1,-8,-1,5,2,9,-8,-4,-10,9,-2,-2,4,-1,-2,-8,10,3,4,9,1,-3,-7,-9,-1,-2,1,6,-10,6,6,4,-1,5,7,5,-4,-1,5,-7,8,9,-5,-7,-4,8,7,3,-3,5,-2,1,9,6,2,10,5,9,6,7,-7,7,-9,3,-9,-1,1,9,-4,3,8,-5,-5,-3,10,-1,4,-2,10,-4,-6,-4,-9,-6,-7,8,-4,-10,-7,2,-4,-4,-2,-3,4,3,-6,-6,9,-7,-10,-4,10,-5,-1,-6,-9,5,-9,-4,-10,2,4,-1,9,-9,-7,-5,-1,5,7,-6,2,-8,2,3,-10,5,2,-7,6,-9,-3,9,7,3,-5,-2,10,9,5,3,-6,9,6,6,4,-4,-2,-10,-9,4,-3,3,10,5,-4,3,9,-6,10,7,-9,-2,6,-1,4,-10,-6,10,5,-3,6,-6,8,1,6,-1,-1,-8,-2,3,-6,4,-6,-10,-10,9,-9,-2,-9,-4,-3,1,-7,-2,-10,6,9,-2,4,7,6,-1,-3,1,-8,-8,-9,4,2,4,2,-1,-2,8,-4,-10,-1,5,-6,5,-1,-6,5,-6,-7,-10,2,1,-4,-8,4,-1,10,8,-10,1,-9,2,8,-1,-10,-5,-2,-6,7,-7,3,5,-1,9,-7,5,-7,10,-6,-2,1,9,-6,-4,-1,6,-8,-7,-6,-4,-7,9,-7,1,9,10,-1,-7,-5,1,-9,-8,-10,8,3,10,-3,6,-9,5,-8,-10,-7,-5,-6,-6,5,-4,1,2,-5,4,3,-10,-6,-10,4,-3,-5,-1,7,5,-3,7,-2,6,3,-7,-9,-7,-6,9,-7,10,3,10,-1,3,4,6,3,3,-1,10,-9,-4,6,-4,-8,-4,8,-4,-8,10,9,8,-9,7,3,-1,6,9,1,-6,10,1,-1,6,3,3,-4,-5,-4,-5,10,1,-1,10,4,2,-6,-3,-1,-8,6,8,10,3,6,1,3,-3,-2,8,-1,-1,7,-3,10,-1,-3,-6,-2,9,8,5,-1,6,3,1,-6,10,4,-10,-5,3,-1,10,-2,3,-8,1,-9,7,3,-8,8,-2,1,9,6,5,2,3,6,-4,-8,-6,-2,-1,-10,-5,4,3,1,3,-5,-5,6,1,-7,6,1,-4,-6,-9,-1,7,2,-3,1,10,-6,2,-6,4,9,-1,-6,3,-8,-10,-7,-6,-4,-1,7,-10,-8,-5,-7,-10,-2,9,5,-2,6,-4,7,-3,-9,8,8,6,-4,2,3,10,-2,3,-2,-2,7,1,-6,-8,1,-10,6,6,-9,3,-10,-9,-1,10,7,2,-8,9,9,10,3,-8,-5,1,5,-8,-7,7,-9,-3,-9,-2,10,-2,9,9,-1,5,3,10,1,1,6,8,-5,2,8,4,7,4,-9,2,-10,-5,-4,-1,4,-3,-1,6,3,-3,-5,-8,-4,-10,5,-2,10,10,-4,-9,6,-1,-6,-5,8,-2,5,-5,2,2,9,4,3,3,8,8,-5,-1,7,-10,1,7,-1,5,-10,-3,-10,10,3,-1,-7,-5,7,3,-9,8,-6,8,-7,-3,9,-6,2,-4,-9,-8,-5,1,6,-7,-9,-8,10,-4,-8,-4,10,-8,7,-7,-1,7,7,-10,-1,1,4,5,-3,10,6,10,7,-8,4,-5,2,2,7,4,1,-8,-3,8,1,-9,4,-5,-7,-7,10,-5,1,4,9,6,1,6,6,-10,-2,8,-8,6,5,6,3,-2,1,4,1,-2,3,-6,10,10,7,-9,-8,-2,-8,2,2,-10,7,-2,4,-3,-10,8,7,3,5,-8,-6,-9,9,-10,3,-3,-1,-1,9,-4,2,-10,-3,2,-6,2,-3,8,10,4,-5,-6,-3,5,-8,10,2,-9,-4,2,3,4,3,-9,-10,-8,1,-5,-8,6,-9,6,-8,-6,-3,-4,2,-2,2,10,4,10,10,10,6,-4,4,-6,-2,-5,-3,-3,9,-10,7,-4,7,-8,1,-5,-6,2,10,2,-2,-8,8,-2,7,9,-3,6,-10,9,6,8,4,4,10,5,-3,-9,-4,-9,4,-6,-4,6,-1,-5,8,9,-3,-5,8,-7,3,-3,8,8,1,-6,8,-1,9,-4,-1,-9,7,-9,4,-6,-3,-3,-1,10,7,-1,2,-4,9,-7,4,-7,2,5,-4,-4,-8,-8,2,-2,-6,5,-4,8,-8,6,-3,-2,8,4,8,9,-8,6,-4,6,3,7,-2,-3,-2,-4,-1,-3,-6,1,6,10,6,2,8,2,-1,1,6,4,4,-4,-4,3,5,-4,3,-4,3,1,-8,-3,3,-4,1,-8,6,9,10,-2,8,-5,9,2,-7,-3,7,6,3,1,-8,8,-3,-5,-3,-10,-10,-1,-8,3,7,2,4,-6,-6,9,-5,9,8,-5,-9,-9,1,2,-3,5,-10,6,3,-9,8,-4,-6,5,6,-4,-4,-6,3,2,-2,7,-4,-4,-4,7,-10,7,3,-10,1,-4,7,7,9,-7,8,10,9,-10,-6,7,7,4,7,9,-7,2,-4,-3,2,-1,-6,-4,-7,-9,9,-1,-3,6,-8,-9,-7,-9,2,5,6,6,-9,8,-3,8,-5,8,-1,-10,-9,-4,-2,1,-8,9,2,-5,-6,-6,-10,-10,-5,-2,3,7,-1,-2,5,6,-8,7,-10,9,-5,-4,-1,-9,1,3,1,7,1,2,3,-9,-5,-10,-1,1,-6,-1,7,3,1,-5,-6,-4,-4,-2,6,-5,-8,-6,-4,4,-1,-6,7,8,5,-8,-8,5,1,-6,-9,-6,7,-7,-10,-10,-6,-9,8,-10,-3,-4,-3,2,6,-8,10,-3,7,-8,1,-8,-6,1,-6,-9,-9,9,-1,3,10,4,7,-5,-9,3,-2,-6,-8,4,-8,-3,5,-9,5,-4,7,-5,9,-1,4,6,-3,-6,-1,-6,-3,-8,-3,5,-2,4,-10,4,-2,6,6,-4,6,3,2,8,8,-6,-2,-2,-1,-4,7,8,10,5,-10,9,9,-5,1,8,9,2,-2,-8,3,4,9,-1,-10,6,-7,5,-9,7,-6,-9,9,-10,8,-6,9,10,3,-6,-8,-10,9,1,10,8,-4,-2,-10,6,10,8,-3,7,2,7,-8,-6,-6,7,-6,-3,3,7,-8,3,6,-7,-2,3,10,3,-10,-6,-6,2,1,-6,9,-2,-6,-4,6,1,6,1,5,5,-3,-2,6,-4,-7,3,-6,6,-10,6,2,6,-3,-5,1,4,10,6,9,-7,2,6,-7,-2,3,-4,5,-6,-7,7,-10,5,-8,-10,-2,-7,6,-4,8,-9,2,-7,-3,7,5,-9,6,6,4,-3,2,-3,-5,-9,-1,-3,2,-1,-4,-5,2,-5,8,4,-9,10,-9,8,-10,-7,7,-5,2,4,-6,-7,6,9,-3,-8,2,-4,3,-6,-8,3,3,-6,5,10,-10,-2,-9,10,5,-6,8,-9,1,3,8,-7,-3,5,3,-9,-4,-1,1,-7,-1,-3,-3,9,8,3,7,7,3,8,-9,8,8,-8,-3,7,-2,-3,5,-8,6,-8,-3,3,-7,1,7,-3,1,6,-8,7,5,4,-4,2,-6,-2,-5,5,5,-2,-5,7,-6,-9,-8,-6,-6,3,-7,-9,5,-3,6,4,4,-4,-1,-5,6,5,10,-4,-6,-6,4,-5,7,-1,6,8,3,8,-3,-3,7,-2,1,-3,5,-9,3,7,-2,6,-4,-5,-6,-1,6,-9,-5,-9,-9,3,-2,-2,-6,8,5,-5,8,-6,-3,-7,-2,-5,9,5,-8,1,-1,-4,2,-5,6,8,10,-2,10,5,8,-10,3,5,4,-1,9,-3,7,-9,-10,1,-10,4,-2,5,8,-5,3,-2,7,3,9,6,6,1,2,-5,-4,-2,9,-6,-3,9,2,2,-7,3,2,3,9,-5,7,3,10,-8,5,5,-5,-3,-8,-6,1,-10,-1,3,1,10,8,1,-9,7,5,1,8,8,-2,-10,4,-9,7,6,10,5,-9,5,7,3,6,3,1,-10,4,7,-2,-2,8,4,-3,-3,-9,-2,2,10,9,-2,3,-5,-1,-4,9,-9,-3,3,4,-8,-6,-1,6,-4,3,7,-7,-2,3,9,-1,6,-3,-1,7,-2,-2,9,2,-2,9,-10,10,-3,7,6,2,3,-3,4,6,10,7,-3,-5,4,4,10,-6,-10,7,-3,10,-6,-2,2,4,-5,3,2,5,-2,1,-5,-5,2,-1,-2,-2,-3,-9,-10,6,6,3,7,-3,7,9,1,-8,-9,-9,-1,1,3,6,-3,-1,2,-6,-2,-8,-4,-4,2,-9,3,1,-7,6,2,-5,8,3,-2,1,-9,4,5,-8,9,7,5,4,2,-4,-5,9,-7,-3,1,-2,2,-2,5,3,9,-6,2,10,3,6,5,1,-8,-10,10,-9,-9,7,-3,7,-2,8,-4,-8,2,-3,1,-8,10,-8,-9,1,8,-1,-10,-2,-1,8,7,-10,-2,-6,1,-4,2,-1,10,9,2,8,-8,6,-3,3,-2,10,8,-9,-10,9,-4,4,-2,2,3,-8,4,-10,-2,-6,-8,10,-4,6,-3,-7,5,3,-4,-3,-6,-10,5,-7,5,-1,2,8,2,10,-8,2,-8,-3,9,1,-7,8,-3,10,2,10,5,-2,3,-2,-10,-6,-1,-3,7,8,7,7,-2,-9,-10,-10,6,-2,3,1,2,2,-8,-2,10,-8,-7,-8,-2,3,5,-7,-5,-1,-6,-4,10,10,2,1,-3,9,-6,8,6,-1,5,4,-8,-10,7,-1,-1,-3,2,-5,6,4,2,1,-3,1,-8,-2,9,-1,8,-3,2,2,-3,10,10,1,-5,-2,-3,-10,7,9,6,4,1,-2,5,-6,10,8,-9,-2,9,7,-6,-5,1,-10,-6,-10,4,-10,6,9,-2,-4,4,-7,1,-9,3,1,-9,-10,7,-4,1,-10,-9,-1,-6,4,-4,-6,-7,3,8,3,-4,4,2,-2,1,-10,-3,-1,-9,-10,10,-7,9,-8,-3,-6,-5,-8,-8,1,-4,-10,-3,5,-10,4,-1,6,2,-8,-4,-4,9,-7,4,-8,9,5,-1,-4,7,8,9,-7,7,-6,4,-9,3,9,1,6,-5,2,3,-4,3,6,7,5,-1,-2,-2,-5,4,10,3,-7,-7,2,-6,10,-2,5,10,-1,2,5,4,-7,-5,-8,-5,7,-6,3,7,5,-8,9,10,-8,-5,6,-4,-2,2,-9,4,8,-5,6,-4,3,1,1,-4,-6,3,-10,5,-8,-9,3,-3,7,-3,1,-2,-1,-8,8,1,-1,-6,-5,-1,9,2,-7,-2,-2,-5,-4,9,4,6,-9,6,5,-3,2,-3,-5,-2,7,-7,10,-4,-9,-8,10,4,2,9,9,-8,-5,-3,-4,-5,10,-2,1,3,-10,-4,-6,8,-6,7,-1,10,4,8,-10,-10,4,9,1,9,2,10,2,7,-8,-5,7,-5,-1,-10,-8,1,6,9,-1,-7,-2,2,6,1,-2,-3,6,-2,4,7,-6,-6,-8,10,-5,-2,-5,-2,2,4,-4,4,6,-6,-10,4,1,6,7,7,-2,-3,-5,-9,8,2,-2,-1,-4,1,-8,-10,5,8,-4,7,6,-5,5,-8,7,7,8,-10,-3,-6,5,1,2,3,-6,3,10,-3,-2,-10,-2,-10,2,-3,-8,7,-3,-3,-10,2,-9,-8,-5,-6,5,-5,10,7,5,9,7,7,6,8,10,-4,6,-10,4,-7,-1,-5,-10,-4,-10,-8,-1,-8,9,-5,-5,8,2,4,3,4,-6,4,1,10,-3,10,-5,2,-4,5,-7,-5,-10,-4,2,8,1,3,3,3,4,-9,4,5,10,1,2,6,-5,-6,2,-5,9,5,3,-8,-3,-6,-10,-7,10,8,4,-3,-8,-5,4,-3,8,-4,6,-8,1,-6,-6,9,-10,5,5,-2,8,3,-7,-6,2,8,4,-7,-3,-3,-9,-4,-3,3,-6,1,4,7,-10,-8,2,10,-3,2,3,4,10,-1,6,3,10,-7,7,6,6,-10,2,-8,-9,3,-4,4,-5,-8,-8,5,4,10,8,9,-2,4,-10,-8,-1,-3,-8,-2,1,-3,1,-6,-2,8,-4,3,5,7,10,-6,-6,9,-3,4,2,-2,-7,-10,5,-6,5,5,9,-5,9,3,8,7,4,7,1,9,-10,-7,-8,-5,2,-3,4,-1,9,8,5,-3,9,3,3,-9,4,9,-9,-3,6,4,-3,-3,-7,4,-6,-9,8,8,7,-2,3,10,-6,5,-10,2,-3,8,7,2,-8,10,-6,-7,8,-3,-1,-7,8,10,10,-3,-6,3,-4,9,-7,-10,-9,-5,8,-10,-10,7,8,8,-9,2,-4,1,1,4,8,10,-2,-6,2,-9,-4,2,2,-1,1,-6,-8,4,6,-7,1,4,2,-4,-8,7,-7,-6,-9,10,10,-6,5,-8,-8,-7,-4,-4,3,-3,9,4,8,-7,-7,-8,4,-5,-4,10,-2,4,-10,-4,-6,-3,-6,-3,7,3,6,10,5,-1,-2,2,-9,-10,5,-1,9,-8,-3,1,-10,3,-6,-7,2,-10,8,6,8,-6,10,-4,3,3,-2,5,1,-9,3,-9,-4,9,3,-1,1,-4,7,9,-9,-6,-9,2,-9,8,-6,8,8,-4,-3,3,-4,-5,6,-1,-8,-5,-7,10,7,1,7,-5,-9,7,8,7,1,-3,8,2,-10,-7,-4,-5,5,6,5,6,-4,5,-6,-2,-6,2,10,2,-10,8,-3,7,-7,9,-6,-6,-9,2,5,10,10,3,-7,1,1,-3,10,-4,3,-1,-8,1,9,-3,-7,4,-9,9,-2,-5,-10,9,8,-7,7,-2,-4,-4,-6,7,-4,-1,6,10,10,2,4,10,-7,5,-6,10,-9,4,5,-9,10,3,3,5,7,-5,-9,4,-3,-1,-7,-10,-9,-4,-6,3,-6,-4,-10,-2,6,-9,-2,2,-4,-4,-6,-7,-9,-9,-5,-10,1,-8,3,-7,9,6,10,7,-3,-5,3,5,-5,6,-9,9,-10,-8,-10,4,2,9,9,6,-6,4,4,-1,4,-9,4,10,6,7,-4,3,10,-7,-9,1,-3,5,4,8,-1,-2,2,9,1,-6,-6,8,3,4,-8,7,2,1,-8,-6,4,6,-10,-8,10,4,2,-1,-9,9,10,9,8,7,-10,6,1,-4,6,9,-3,-1,7,2,-9,-3,6,10,-3,3,2,-9,-1,3,4,-3,-9,4,10,-1,-6,7,-8,10,-6,9,2,4,-1,-1,10,-2,2,-4,1,-9,-2,2,3,-5,5,-10,2,-2,-10,-7,-9,-7,4,-3,-9,-3,1,2,7,7,-1,-3,-1,-7,-8,-1,-3,9,-10,-4,7,9,-5,5,8,6,-9,4,3,-10,6,-7,-10,8,-9,10,-10,-5,9,6,4,-9,-2,4,6,6,7,-3,-8,-8,3,-2,-6,9,8,5,9,4,8,-9,-2,-8,-6,6,2,-10,4,10,-10,-5,4,8,-3,7,10,8,10,-1,-7,-2,-2,5,-6,-6,-2,3,-3,1,5,9,-5,5,3,2,4,-8,-6,-4,6,7,3,5,-2,3,-4,1,9,5,-6,9,-10,-8,-10,9,4,-5,9,-2,8,-8,-8,-4,-9,-7,5,-6,-5,-3,9,-2,-1,10,8,-1,-9,-9,-2,-4,-1,5,-10,-2,5,1,-9,-7,-9,10,-2,2,-4,8,5,4,-4,-1,-9,-9,-10,8,-3,-2,3,8,7,-7,-4,-4,9,-4,-8,-9,-9,3,1,1,-10,4,6,-9,5,-3,-2,-7,-6,8,-5,-3,7,6,-1,10,9,-5,10,-10,-3,-6,-2,8,4,-4,-2,7,-4,7,-7,7,3,-3,-7,7,-9,-6,6,1,-9,2,3,-3,10,4,-7,5,4,-4,-4,2,-6,4,-2,3,-9,5,4,-1,-7,4,-6,5,-9,-3,-2,6,-5,9,5,-9,8,-6,-3,9,-2,8,-3,7,4,5,-7,1,1,-9,3,-1,-5,1,4,10,2,3,10,7,2,-9,3,2,1,10,-1,-3,6,4,6,5,9,5,-7,-3,-4,-9,2,3,-3,7,2,10,-8,1,8,3,-5,9,9,-3,4,-4,-3,2,-9,-2,1,-10,-8,-2,-6,-6,-3,3,8,-9,-9,-1,-7,10,5,7,-6,6,8,10,3,5,2,-10,-3,5,1,4,-2,-3,6,3,-9,-6,7,10,-4,7,-2,-8,-7,9,-10,5,-7,7,2,-7,-6,-7,9,-4,10,-8,-10,9,9,5,-3,9,3,-5,-7,6,-5,8,-10,-4,-4,5,1,1,-2,-9,-9,6,8,6,4,-9,-5,-1,-7,-5,1,5,4,4,-10,-2,3,10,-9,-7,8,-4,-10,6,-1,-8,-1,-6,9,-4,3,10,5,-7,6,-9,-9,7,-7,-7,-6,-3,-10,-5,-9,7,-4,-7,-7,-5,-10,7,-7,-9,7,-5,2,1,8,-2,4,6,8,-9,10,8,-10,7,9,-4,-3,1,-10,9,10,-5,-3,-2,-6,6,5,-4,-8,2,7,6,-6,7,-3,4,-10,-6,9,3,-9,9,-10,-10,-6,-8,10,-4,2,4,8,7,-6,10,-10,-3,2,4,-7,-2,7,-7,-3,5,2,9,9,9,-8,3,4,7,-9,9,5,8,-1,-3,6,8,-9,-8,-4,4,-6,1,2,-7,1,7,-7,-10,-2,1,-10,5,-7,-8,10,4,-8,9,5,10,-9,-3,-4,5,7,3,6,-9,-1,-5,-8,10,-5,5,-2,-7,-4,9,5,-3,9,-2,-3,9,7,-4,6,10,-2,3,-1,-5,3,4,-8,-2,2,4,-4,-9,1,-3,-9,8,7,-3,4,-7,2,6,-10,-8,4,-10,-7,7,-2,4,-5,-3,6,3,4,8,1,7,-4,-6,7,5,2,-3,-4,10,-1,-4,-8,8,6,9,2,1,-1,4,-2,3,3,-2,2,8,2,-2,-8,-2,8,6,-9,8,5,-1,5,2,-9,6,-6,-5,-8,-9,-7,5,-6,7,-9,7,-1,2,2,3,-8,-1,5,3,2,2,-4,-7,5,6,-3,9,-1,9,2,-3,10,3,1,-1,-7,-4,-7,1,-7,7,2,-3,4,6,-1,-6,-4,-8,-6,-10,9,6,-5,7,4,1,7,-8,-3,7,-5,6,-4,6,3,-5,-10,-10,7,-6,-1,-8,-10,-1,3,8,5,-9,10,10,-1,-8,5,-7,-5,-5,9,-7,2,-1,-10,-4,3,-3,-1,6,8,-5,2,-5,-5,5,4,5,4,2,5,6,-1,2,-1,-6,-6,2,-2,-7,7,-5,6,6,5,1,-4,-1,7,7,-4,9,-3,-8,-7,-4,-6,3,8,-1,7,-7,10,-6,-1,-7,3,7,-6,-2,1,-7,-6,1,2,-9,6,10,3,-3,8,-3,7,-8,6,-7,-8,6,-7,-10,-10,9,-6,-10,-4,7,-6,-4,10,-7,4,5,-8,-5,-9,5,-7,-3,-3,4,-9,-1,1,7,7,-10,-10,2,8,-5,4,4,4,4,2,7,1,6,3,-5,-9,-3,10,7,5,-4,-1,2,-8,5,6,-1,9,-9,3,5,7,-1,5,6,9,9,-10,5,7,10,-9,-10,-10,-3,1,5,9,-8,3,4,-5,9,-4,-5,-4,6,-8,4,-5,1,8,-5,-3,9,8,5,6,1,10,-5,-3,-10,9,-10,-2,2,8,-4,2,-4,-9,-4,-7,-7,4,-3,-4,9,6,10,10,-7,9,7,7,2,4,-10,-4,10,-2,-7,6,2,5,10,-3,-2,-8,-6,4,-8,-7,-1,-9,10,-6,6,3,1,-9,1], dtype = "int16")#candidate|4797|(9240,)|const|int16
var_4798 = relay.var("var_4798", dtype = "int8", shape = (576,))#candidate|4798|(576,)|var|int8
var_4799 = relay.var("var_4799", dtype = "int8", shape = (1120,))#candidate|4799|(1120,)|var|int8
call_4794 = relay.TupleGetItem(func_3711_call(relay.reshape(const_4795.astype('float64'), [13, 13, 9]), relay.reshape(var_4796.astype('int16'), [660,]), relay.reshape(const_4797.astype('int16'), [9240,]), relay.reshape(var_4798.astype('int8'), [288, 2]), relay.reshape(var_4799.astype('int8'), [1120,]), relay.reshape(const_4795.astype('float64'), [13, 13, 9]), ), 7)
call_4800 = relay.TupleGetItem(func_3719_call(relay.reshape(const_4795.astype('float64'), [13, 13, 9]), relay.reshape(var_4796.astype('int16'), [660,]), relay.reshape(const_4797.astype('int16'), [9240,]), relay.reshape(var_4798.astype('int8'), [288, 2]), relay.reshape(var_4799.astype('int8'), [1120,]), relay.reshape(const_4795.astype('float64'), [13, 13, 9]), ), 7)
func_1534_call = mod.get_global_var('func_1534')
func_1537_call = mutated_mod.get_global_var('func_1537')
const_4804 = relay.const([3.699327,5.991936,5.342968,-4.453075,-9.719848,9.388216,4.252142,-0.603287,9.335232,-2.719998,-7.777076,8.484643,6.946902,9.685278,7.680072,8.878235,6.356156,-7.063969,-6.443687,8.209388,-4.228094,9.697158,3.372079,-5.590225,-0.075887,-6.118246,4.770265,9.658556,1.717812,5.703202,9.017840,0.465787,-1.380210,2.866508,-5.601255,8.448170,4.773085,7.343298,-9.510643,4.888962,-7.532613,4.826622,7.176712,-4.458840,3.994177,-4.078922,-9.130721,-7.739841,3.536179,-6.437351,-6.970467,-3.443257,-1.973621,-4.066036,9.663318,0.143007,2.902749,0.223567,3.216944,2.973326,-7.611450,8.674970,-3.829082,5.080023,9.853271,6.623958,7.581198,2.355237,0.759951,-2.913692,3.423414,1.949682,4.900412,-5.624741,-7.838895,6.112815,6.599180,-3.264711,-8.447498,8.397389,5.085642,9.421761,-1.287628,-8.093355,-7.792870,7.685157,-6.255080,5.176463,8.793516,-0.434078], dtype = "float64")#candidate|4804|(90,)|const|float64
call_4803 = func_1534_call(relay.reshape(const_4804.astype('float64'), [15, 3, 2]))
call_4805 = func_1534_call(relay.reshape(const_4804.astype('float64'), [15, 3, 2]))
output = relay.Tuple([uop_4767,call_4794,const_4795,var_4796,const_4797,var_4798,var_4799,call_4803,const_4804,])
output2 = relay.Tuple([uop_4769,call_4800,const_4795,var_4796,const_4797,var_4798,var_4799,call_4805,const_4804,])
func_4808 = relay.Function([var_4796,var_4798,var_4799,], output)
mod['func_4808'] = func_4808
mod = relay.transform.InferType()(mod)
mutated_mod['func_4808'] = func_4808
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4808_call = mutated_mod.get_global_var('func_4808')
var_4810 = relay.var("var_4810", dtype = "int16", shape = (660,))#candidate|4810|(660,)|var|int16
var_4811 = relay.var("var_4811", dtype = "int8", shape = (576,))#candidate|4811|(576,)|var|int8
var_4812 = relay.var("var_4812", dtype = "int8", shape = (1120,))#candidate|4812|(1120,)|var|int8
call_4809 = func_4808_call(var_4810,var_4811,var_4812,)
output = call_4809
func_4813 = relay.Function([var_4810,var_4811,var_4812,], output)
mutated_mod['func_4813'] = func_4813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_4820 = relay.TupleGetItem(func_4513_call(), 0)
call_4821 = relay.TupleGetItem(func_4514_call(), 0)
uop_4839 = relay.erf(call_4820.astype('float64')) # shape=(6, 4, 2)
uop_4841 = relay.erf(call_4821.astype('float64')) # shape=(6, 4, 2)
const_4851 = relay.const([[[7.521314,-6.002471],[6.980556,-6.129181],[8.028322,-6.123949],[7.150944,5.013937]],[[-3.154756,-0.852227],[-8.731840,-4.219831],[8.864200,6.745719],[-6.060951,-6.550328]],[[4.588980,6.783086],[1.290808,7.779463],[9.055661,-1.146160],[6.664733,-5.569965]],[[6.124649,0.328584],[-0.469694,-0.002774],[-5.338355,8.403163],[-3.934668,-0.157086]],[[-7.880301,1.448196],[7.166887,-7.504366],[-0.587316,2.393406],[-6.892200,6.652894]],[[-8.719172,5.707413],[-6.329182,-6.697458],[3.603284,8.340679],[6.590947,4.510344]]], dtype = "float64")#candidate|4851|(6, 4, 2)|const|float64
bop_4852 = relay.divide(uop_4839.astype('float32'), relay.reshape(const_4851.astype('float32'), relay.shape_of(uop_4839))) # shape=(6, 4, 2)
bop_4855 = relay.divide(uop_4841.astype('float32'), relay.reshape(const_4851.astype('float32'), relay.shape_of(uop_4841))) # shape=(6, 4, 2)
func_3006_call = mod.get_global_var('func_3006')
func_3012_call = mutated_mod.get_global_var('func_3012')
var_4857 = relay.var("var_4857", dtype = "int16", shape = (660,))#candidate|4857|(660,)|var|int16
const_4858 = relay.const([[4],[-7],[-5],[3],[-8],[-4],[-1],[7],[-3],[-6],[-6],[-6],[5],[-9],[-4],[7],[9],[1],[10],[5],[-9],[2],[-7],[10],[7],[-10],[-10],[3],[4],[8],[3],[4],[-1],[7],[10],[-1],[8],[-9],[-2],[4],[-2],[6],[3],[-9],[1],[5],[-3],[7],[5],[-5],[-5],[-6],[-2],[9],[1],[-5],[2],[-6],[1],[3],[5],[8],[-8],[-3],[-9],[10],[7],[-9],[8],[-2],[3],[-3],[-9],[9],[-8],[-3],[-10],[-10],[8],[-1],[-4],[-2],[-6],[9],[-9],[2],[-8],[-9],[6],[6],[10],[-7],[-2],[9],[2],[6],[-3],[-8],[-9],[3],[-8],[2],[-2],[3],[-8],[-1],[10],[-9],[7],[-2],[-7],[7],[-7],[9],[10],[6],[4],[3],[8],[3],[-5],[-4],[-6],[-7],[10],[2],[-8],[-7],[3],[-2],[7],[2],[5],[-9],[-3],[9],[-9],[-3],[6],[8],[1],[-5],[-2],[-5],[10],[10],[5],[-9],[9],[-5],[10],[-10],[-9],[-6],[7],[2],[7],[-7],[10],[3],[-9],[-7],[7],[9],[4],[6],[-10],[-5],[-1],[3],[-6],[-6],[-4],[3],[4],[6],[-9],[2],[-9],[-1],[4],[6],[-6],[-2],[-3],[-5],[-2],[3],[3],[-2],[2],[-2],[10],[-6],[-2],[-1],[6],[10],[-10],[9],[7],[-2],[6],[-7],[-1],[-5],[4],[3],[-1],[3],[8],[2],[3],[8],[-6],[9],[-2],[4],[-8],[6],[-9],[-2],[10],[7],[8],[7],[-5],[-2],[2],[-4],[-6],[4],[3],[5],[-9],[1],[-5],[9],[2],[-7],[7],[8],[4],[10],[9],[-6],[4],[4],[-6],[-1],[3],[-2],[-8],[-4],[-8],[-1],[-4],[7],[-1],[5],[1],[-7],[-9],[-4],[-4],[-1],[8],[-5],[-6],[-5],[9],[-9],[6],[-2],[3],[7],[9],[10],[-6],[7],[9],[7],[1],[2],[-1],[2],[-4],[5],[-7],[7],[6],[-5],[-7],[-5],[7],[-5],[9],[-4],[5],[10],[2],[6],[-10],[-5],[7],[8],[-5],[10],[-8],[-7],[8],[3],[-5],[10],[2],[8],[9],[-1],[-6],[-10],[10],[8],[-3],[-9],[3],[7],[-9],[9],[-9],[6],[8],[-9],[-9],[-7],[-1],[-9],[5],[8],[6],[-10],[-3],[-10],[-9],[-10],[7],[-2],[-1],[1],[-3],[4],[5],[7],[-1],[-9],[-2],[7],[6],[-10],[6],[5],[-6],[-10],[2],[-7],[-2],[-9],[4],[-1],[10],[-3],[-9],[-8],[8],[1],[-7],[-1],[7],[-2],[-5],[-4],[-9],[7],[10],[8],[8],[-10],[4],[3],[7],[-7],[-2],[9],[-2],[-8],[9],[-5],[6],[2],[2],[6],[3],[-6],[-6],[-8],[2],[-9],[-6],[6],[9],[-4],[-8],[7],[-4],[10],[8],[3],[-1],[-8],[-7],[10],[-6],[8],[7],[-9],[-9],[-7],[5],[-1],[-2],[3],[4],[-3],[7],[2],[2],[7],[-8],[9],[8],[4],[-4],[-6],[-4],[7],[7],[-9],[-8],[-6],[6],[10],[9],[-5],[2],[-4],[5],[-10],[8],[7],[3],[9],[-4],[3],[-1],[-6],[8],[-6],[-3],[7],[6],[-6],[1],[9],[3],[1],[-9],[-8],[-7],[4],[1],[-4],[6],[-7],[10],[4],[7],[-6],[-7],[-6],[-10],[-8],[5],[10],[6],[-9],[-6],[5],[4],[10],[-6],[-9],[-8],[9],[-9],[-8],[2],[-8],[2],[1],[3],[-7],[7],[-10],[-4],[3],[7],[-2],[9],[10],[8],[7],[-4],[9],[2],[-7],[3],[4],[4],[1],[4],[-7],[-5],[6],[10],[-2],[-4],[10],[-3],[-5],[10],[3],[-4],[5],[1],[-7],[9],[-6],[2],[-8],[5],[-3],[-10],[-6],[-2],[1],[-3],[-9],[-1],[8],[-10],[5],[-8],[4],[10],[-4],[-6],[6],[10],[1],[5],[5],[-6],[8],[9],[-7],[10],[8],[4],[9],[6],[1],[-2],[7],[10],[-5],[-10],[6],[7],[5],[-9],[-6],[-6],[-6],[8],[6],[-1],[-5],[-5],[9],[10],[4],[-6],[-10],[-4],[2],[-7],[2],[-5],[-8],[6],[-9],[3],[3],[6],[-5],[6],[10],[10],[9],[-5],[7],[1],[9],[-8],[1],[1],[4],[-3],[1],[-9],[-8],[8],[8],[-10],[-1],[-8],[-8],[8],[5],[4],[-1],[-5],[6],[1],[7],[-8],[4],[-7],[-5],[9],[-3],[-4],[4],[-8],[-7],[4],[-5],[4],[8],[1],[-7],[4],[-6],[-4],[-7],[6],[-10],[1],[-4],[2],[1],[-1],[8],[2],[-1],[1],[3],[-9],[-6],[9],[-8],[3],[7],[1],[-3],[3],[10],[2],[9],[3],[-8],[-8],[-2],[9],[4],[9],[-3],[9],[6],[-1],[4],[5],[-8],[-3],[3],[-9],[-2],[2],[-5],[-10],[-9],[10],[-3],[3],[-2],[10],[-10],[1],[2],[-7],[2],[3],[-2],[-8],[6],[-6],[10],[10],[-7],[-5],[-7],[5],[8],[7],[2],[4],[-7],[-7],[-4],[6],[4],[-6],[9],[10],[-8],[7],[9],[-5],[9],[-8],[6],[-4],[1],[-6],[8],[-4],[5],[9],[-5],[-10],[-5],[10],[-10],[-5],[-9],[-10],[7],[1],[-5],[10],[8],[-8],[-5],[7],[-5],[4],[-5],[-3],[3],[3],[-1],[8],[7],[5],[-6],[-5],[-2],[-7],[9],[8],[10],[-3],[-10],[9],[-6],[-5],[5],[6],[-3],[-4],[-7],[-5],[-4],[-5],[-8],[-7],[7],[-3],[-8],[-10],[5],[3],[9],[2],[2],[2],[6],[8],[10],[3],[8],[-6],[9],[4],[4],[-4],[-9],[10],[6],[-9],[9],[6],[7],[-7],[1],[6],[-9],[-6],[4],[10],[4],[-8],[8],[-1],[2],[-1],[-9],[8],[4],[4],[-7],[-3],[-3],[-7],[-9],[-4],[8],[5],[9],[-10],[-4],[-4],[9],[9],[-9],[-7],[3],[3],[10],[-2],[8],[3],[-9],[-3],[6],[1],[-4],[5],[9],[9],[8],[4],[-9],[-7],[8],[10],[-7],[-3],[-3],[5],[8],[9],[3],[9],[7],[1],[5],[7],[4],[-3],[-5],[-10],[5],[-9],[8],[6],[-1],[1],[-9],[5],[-8],[3],[2],[7],[8],[-10],[-2],[7],[4],[6],[1],[-1],[6],[-6],[2],[-5],[8],[6],[-2],[7],[5],[-2],[10],[4],[5],[-9],[1],[9],[-1],[4],[-8],[8],[1],[-7],[-8],[-2],[6],[2],[1],[-3],[6],[-5],[1],[6],[-10],[-7],[-1],[6],[10],[-6],[2],[1],[-10],[-3],[9],[-1],[7],[3],[7],[1],[-2],[-8],[5],[7],[-9],[-4],[-9],[-6],[-10],[-3],[-4],[-5],[8],[8],[9],[-7],[-8],[-4],[-8],[8],[1],[6],[-9],[-2],[3],[9],[10],[10],[-3],[-7],[10],[1],[-6],[-2],[-5],[-10],[2],[-8],[-2],[9],[6],[5],[-1],[-5],[-5],[-7],[6],[-4],[-5],[5],[-7],[-8],[-4],[-2],[-9],[-2],[-1],[4],[-3],[-8],[-3],[3],[5],[10],[-4],[-3],[3],[-1],[-2],[-3],[-6],[-7],[-1],[-8],[-1],[-3],[3],[4],[5],[-9],[-10],[-9],[-6],[1],[-3],[-8],[-9],[-5],[9],[5],[2],[-4],[7],[-3],[1],[-3],[-6],[5],[-3],[1],[-1],[7],[5],[10],[-5],[-4],[6],[2],[-6],[-8],[-8],[-2],[-3],[8],[5],[4],[-8],[6],[4],[9],[-5],[-8],[3],[-6],[4],[-7],[-3],[7],[-6],[-4],[4],[-7],[-10],[8],[-2],[-3],[2],[-8],[1],[3],[8],[-8],[-9],[-6],[1],[7],[7],[-2],[8],[-9],[8],[7],[-5],[-2],[-1],[-2],[7],[7],[-6],[-2],[-3],[6],[3],[-7],[9],[9],[-1],[-5],[1],[3],[-4],[-10],[-6],[6],[2],[-2],[-7],[6],[-8],[10],[10],[5],[6],[-8],[-9],[1],[-7],[-4],[-8],[8],[8],[-6],[10],[-6],[-5],[-6],[-6],[6],[10],[10],[-6],[-5],[-4],[7],[-9],[3],[-7],[-4],[-8],[-7],[-5],[-8],[5],[2],[8],[7],[7],[-7],[10],[2],[-9],[9],[-5],[-4],[3],[8],[8],[10],[9],[-9],[8],[-1],[9],[-5],[-1],[10],[-3],[9],[4],[-10],[7],[-9],[-3],[-8],[-3],[-9],[4],[-5],[7],[-4],[8],[-2],[5],[-8],[5],[5],[8],[-6],[-3],[3],[-1],[8],[-2],[10],[4],[10],[10],[-2],[3],[3],[9],[-9],[2],[-8],[-8],[-4],[5],[6],[-6],[9],[-2],[3],[-2],[6],[-4],[-3],[-7],[-2],[8],[7],[-2],[6],[-2],[5],[9],[-9],[4],[3],[-6],[1],[-8],[-4],[9],[-7],[5],[4],[2],[3],[2],[-3],[3],[-2],[-5],[-2],[3],[-2],[10],[-7],[10],[-7],[-7],[-2],[-8],[-2],[-4],[-1],[-8],[-3],[7],[-3],[-1],[-3],[-1],[-1],[6],[5],[6],[10],[-4],[-6],[9],[7],[-10],[10],[8],[-10],[-10],[-9],[5],[9],[-5],[-3],[-4],[6],[-7],[-10],[10],[6],[8],[9],[-3],[4],[-2],[-2],[2],[-8],[-10],[1],[-4],[-3],[9],[-1],[-1],[-1],[5],[6],[9],[-1],[4],[9],[7],[-6],[-8],[10],[-3],[-5],[6],[-1],[3],[7],[-2],[-7],[-2],[5],[4],[-3],[-3],[5],[-5],[-3],[9],[1],[4],[-2],[6],[8],[-2],[-10],[-5],[-4],[10],[7],[8],[3],[8],[4],[-6],[3],[-8],[10],[6],[-3],[-2],[7],[-9],[4],[8],[-3],[5],[2],[3],[-1],[2],[2],[10],[-6],[-9],[9],[4],[-1],[-4],[-4],[-8],[1],[-4],[7],[10],[10],[-3],[-1],[-4],[3],[6],[7],[5],[4],[-2],[-4],[-7],[4],[-9],[-9],[-10],[-10],[-3],[7],[-6],[3],[2],[1],[-7],[-9],[-5],[-1],[-9],[2],[-7],[-8],[1],[-1],[-8],[2],[-1],[-7],[4],[-2],[-5],[3],[-5],[10],[1],[-3],[-4],[9],[-10],[-10],[3],[4],[8],[8],[-1],[6],[-1],[-4],[5],[-2],[6],[7],[8],[-7],[-8],[-1],[-10],[4],[-8],[1],[-3],[3],[-6],[-2],[-3],[-7],[10],[10],[4],[8],[-4],[-3],[-4],[4],[1],[1],[-2],[10],[3],[9],[6],[6],[-2],[4],[2],[7],[1],[-2],[-7],[8],[2],[2],[4],[-2],[-5],[5],[-6],[7],[-7],[-1],[-5],[7],[-8],[-2],[5],[-5],[-9],[-1],[-2],[-10],[-1],[-8],[7],[-3],[10],[-5],[4],[-2],[3],[1],[6],[-5],[4],[6],[8],[-3],[-2],[-3],[8],[-5],[-4],[3],[4],[-4],[1],[-5],[1],[10],[7],[-1],[3],[-3],[7],[-5],[-4],[3],[-1],[-7],[2],[-10],[-7],[10],[8],[-5],[-5],[9],[2],[-2],[-7],[-6],[-7],[10],[5],[-1],[-1],[2],[9],[-7],[-9],[9],[1],[-1],[-7],[4],[9],[-5],[-8],[4],[-4],[-2],[9],[4],[5],[2],[-6],[-7],[8],[-1],[-10],[9],[4],[-8],[10],[-6],[9],[9],[2],[-4],[7],[-1],[7],[-9],[8],[2],[-7],[-9],[-6],[3],[-1],[2],[5],[-7],[-7],[3],[9],[6],[-4],[4],[8],[-7],[-6],[6],[-5],[10],[6],[-5],[-5],[9],[7],[7],[-8],[5],[9],[1],[5],[2],[6],[5],[-7],[-7],[-9],[5],[9],[6],[-7],[-4],[-6],[-6],[-6],[4],[-7],[-5],[6],[-6],[7],[5],[8],[-9],[-5],[-4],[10],[9],[5],[-4],[-4],[-4],[-7],[-4],[9],[6],[-5],[-1],[1],[1],[7],[-8],[1],[4],[5],[-1],[-8],[-10],[4],[-8],[5],[-8],[-2],[-3],[-10],[-9],[-2],[-5],[-6],[-1],[9],[-10],[6],[2],[3],[4],[3],[-8],[2],[-10],[-8],[9],[-9],[4],[-7],[8],[6],[-5],[-7],[4],[-8],[-8],[2],[-7],[-7],[-7],[9],[-6],[-2],[4],[5],[7],[8],[-6],[8],[7],[-2],[-8],[10],[9],[4],[4],[-3],[10],[3],[7],[5],[-1],[-6],[10],[-9],[-10],[1],[-5],[3],[8],[-1],[-1],[-5],[4],[-6],[-5],[-4],[4],[5],[4],[10],[-5],[1],[-1],[6],[-4],[-4],[-3],[-9],[-10],[-7],[5],[-3],[-3],[-6],[10],[-10],[8],[7],[-8],[1],[-9],[-8],[-5],[-7],[-1],[9],[-8],[-9],[-1],[-8],[1],[-8],[-1],[-8],[-7],[10],[3],[10],[4],[-4],[4],[3],[8],[-10],[6],[-9],[-6],[-4],[1],[6],[9],[6],[4],[2],[5],[-7],[9],[-8],[-3],[-5],[-8],[4],[9],[-1],[-9],[8],[10],[2],[2],[-4],[-9],[-4],[2],[-7],[-2],[-1],[-5],[4],[-10],[4],[-9],[7],[-10],[5],[-4],[9],[-1],[-4],[-6],[-5],[-1],[9],[-1],[2],[8],[-3],[2],[-6],[1],[-4],[-2],[8],[3],[6],[1],[8],[-10],[-2],[1],[-2],[-1],[6],[7],[4],[5],[2],[-1],[3],[-10],[-3],[-2],[7],[-9],[-5],[-2],[-9],[-4],[-6],[7],[8],[10],[-9],[8],[-4],[1],[-1],[10],[7],[8],[10],[-8],[5],[-4],[-2],[3],[-10],[8],[5],[-1],[6],[6],[-7],[7],[8],[7],[-5],[8],[7],[-1],[10],[-1],[-8],[-2],[-6],[-9],[7],[2],[-6],[9],[6],[3],[-2],[-1],[3],[-10],[-7],[-7],[-9],[-7],[-4],[-9],[-4],[6],[-2],[5],[2],[1],[-8],[-3],[-6],[8],[-3],[8],[4],[6],[2],[6],[6],[7],[8],[8],[-9],[-1],[1],[10],[6],[-1],[-10],[2],[-4],[1],[-4],[1],[10],[10],[1],[5],[-6],[7],[-10],[-5],[4],[9],[4],[-10],[-10],[2],[8],[5],[-5],[-4],[-4],[-4],[-7],[8],[-9],[-6],[-6],[7],[-6],[8],[-5],[-9],[-8],[-1],[-1],[7],[5],[-6],[2],[10],[6],[4],[-10],[-3],[9],[-2],[4],[9],[8],[-2],[4],[6],[1],[-2],[7],[-6],[-7],[-6],[3],[-5],[3],[-7],[9],[-6],[6],[7],[9],[9],[-7],[-5],[-2],[-9],[1],[-8],[-7],[5],[10],[-6],[7],[-7],[-3],[-3],[10],[-2],[-5],[-3],[-8],[-6],[2],[-1],[6],[-10],[9],[-7],[-9],[9],[3],[-4],[-4],[-1],[-3],[-5],[-1],[-10],[-2],[-1],[-9],[5],[8],[-2],[8],[-10],[-3],[-3],[-1],[7],[-1],[5],[-3],[2],[-5],[6],[-5],[-2],[4],[-1],[-7],[-3],[-5],[7],[-3],[2],[-9],[3],[-3],[9],[-9],[4],[5],[8],[-1],[-2],[-7],[-7],[3],[8],[10],[-9],[8],[-1],[6],[-9],[-5],[8],[10],[-9],[-4],[7],[8],[-4],[8],[9],[6],[9],[10],[5],[9],[1],[-8],[4],[-7],[-6],[6],[2],[7],[-6],[-2],[5],[5],[-9],[5],[10],[-7],[-8],[2],[-2],[-4],[9],[2],[-3],[9],[-6],[-8],[-6],[6],[-7],[1],[-4],[2],[5],[3],[4],[6],[9],[-7],[8],[4],[7],[-6],[5],[2],[2],[-1],[2],[-10],[7],[2],[3],[5],[7],[4],[9],[9],[10],[-3],[-9],[6],[6],[10],[1],[3],[-3],[9],[5],[8],[7],[-7],[-10],[4],[-4],[-2],[2],[6],[7],[8],[-6],[-4],[-7],[9],[-9],[4],[-8],[2],[-1],[-7],[-5],[-10],[9],[7],[-2],[2],[5],[10],[-10],[-4],[3],[5],[-10],[1],[-5],[-8],[7],[9],[4],[2],[10],[-5],[-3],[-7],[-2],[-2],[-10],[10],[5],[-1],[8],[-1],[7],[-3],[-6],[6],[-2],[-3],[4],[9],[-10],[4],[-9],[-9],[-4],[5],[2],[-8],[-5],[-10],[7],[-9],[7],[-3],[-1],[-10],[3],[-10],[-8],[7],[9],[-3],[5],[10],[2],[5],[7],[8],[5],[4],[2],[-8],[8],[7],[6],[8],[-3],[8],[2],[-2],[-9],[-6],[10],[-8],[-3],[-2],[6],[2],[-7],[-10],[3],[8],[-8],[-8],[4],[7],[-6],[8],[4],[2],[10],[-4],[5],[2],[7],[2],[-9],[7],[-7],[-10],[-6],[4],[1],[-1],[-10],[4],[-8],[-8],[-6],[-4],[-4],[2],[7],[3],[-6],[-6],[-1],[6],[2],[6],[-10],[-2],[1],[-3],[2],[-8],[4],[-10],[-1],[6],[5],[10],[2],[-5],[-3],[6],[1],[4],[-8],[9],[-2],[6],[8],[8],[6],[-7],[-6],[6],[-2],[10],[-4],[-1],[-4],[9],[1],[4],[4],[1],[6],[1],[1],[-5],[-4],[-5],[-4],[6],[-3],[2],[-3],[3],[-8],[9],[-7],[-4],[-8],[-6],[-3],[-8],[-4],[5],[-9],[-5],[-7],[2],[-8],[4],[-2],[-8],[1],[-3],[-8],[-10],[2],[2],[-4],[-3],[8],[-5],[-6],[5],[-10],[2],[1],[-10],[-3],[-3],[-3],[-4],[4],[10],[-2],[9],[2],[-7],[3],[-2],[2],[-4],[3],[7],[-10],[-9],[-3],[8],[10],[5],[5],[-4],[-10],[-3],[4],[7],[-9],[-10],[6],[8],[-6],[-8],[9],[-8],[6],[-1],[-9],[-7],[-7],[-3],[8],[-6],[10],[1],[3],[-1],[8],[2],[7],[-6],[-5],[-3],[-5],[5],[-3],[-2],[10],[-9],[-6],[-8],[2],[10],[1],[7],[1],[-1],[4],[3],[6],[-9],[8],[-9],[-1],[-9],[-1],[-6],[6],[-2],[7],[5],[5],[-6],[-1],[8],[9],[-6],[9],[5],[6],[-7],[-1],[-1],[-8],[-4],[-2],[-2],[-4],[-8],[9],[2],[-1],[5],[4],[2],[-4],[-8],[-1],[-1],[-1],[1],[-3],[-2],[5],[-4],[6],[-2],[-2],[9],[-9],[-9],[-9],[7],[7],[-6],[-5],[6],[3],[-7],[-8],[5],[-6],[-10],[-6],[-8],[1],[5],[4],[9],[-1],[2],[5],[-4],[-5],[-7],[3],[-8],[-10],[7],[1],[-8],[-3],[-2],[8],[2],[8],[5],[-1],[-2],[-1],[3],[2],[3],[2],[-8],[7],[5],[3],[-9],[-3],[-8],[5],[4],[2],[6],[6],[9],[1],[-10],[6],[-5],[-5],[3],[2],[-7],[-2],[-3],[10],[-5],[-5],[8],[-10],[-1],[-1],[-5],[-10],[9],[3],[-3],[5],[7],[7],[-6],[-1],[-9],[-2],[8],[-6],[-5],[10],[5],[10],[-5],[-8],[-9],[10],[-10],[-8],[-6],[-9],[-5],[-4],[5],[2],[10],[-9],[1],[-10],[6],[7],[-3],[-1],[-8],[1],[-10],[-10],[1],[10],[5],[-7],[-3],[3],[8],[2],[-3],[9],[-8],[9],[3],[-9],[-8],[10],[3],[5],[-9],[5],[1],[-5],[1],[-4],[6],[10],[-6],[-1],[9],[-2],[1],[8],[1],[1],[8],[-1],[6],[-7],[-5],[3],[4],[9],[-2],[-9],[-2],[-8],[4],[-6],[9],[-4],[-5],[-3],[2],[10],[-1],[-3],[6],[-5],[2],[-9],[-6],[7],[3],[4],[1],[1],[2],[9],[-6],[-5],[3],[1],[10],[8],[-9],[-6],[6],[-4],[7],[2],[-3],[-5],[9],[-3],[4],[1],[6],[5],[-8],[-7],[1],[-10],[9],[5],[2],[-5],[10],[-2],[-6],[3],[2],[5],[6],[3],[-4],[10],[6],[-10],[6],[2],[-3],[-10],[10],[4],[-6],[-4],[-1],[-6],[1],[-2],[8],[10],[-2],[10],[6],[-5],[-2],[3],[-9],[-6],[4],[-3],[10],[-3],[-7],[-8],[6],[10],[10],[9],[3],[-6],[9],[6],[8],[4],[3],[8],[-7],[6],[9],[10],[4],[7],[-1],[2],[8],[-10],[1],[8],[-8],[-3],[10],[-4],[-4],[2],[6],[1],[3],[4],[2],[-9],[-5],[-1],[4],[6],[-2],[1],[-10],[-10],[5],[10],[-3],[1],[-8],[-9],[2],[5],[8],[4],[5],[-4],[-10],[-10],[9],[-7],[-9],[6],[-1],[-7],[2],[1],[7],[-1],[-2],[-5],[-8],[-4],[3],[9],[2],[-6],[4],[-5],[1],[-3],[-2],[-6],[10],[2],[-6],[-9],[-7],[3],[8],[1],[7],[-3],[3],[7],[1],[-6],[-6],[-10],[4],[10],[-10],[-6],[-3],[6],[-10],[-1],[8],[9],[3],[-5],[8],[5],[-6],[10],[-8],[1],[1],[-4],[4],[-6],[-9],[-1],[-3],[8],[8],[8],[7],[-8],[10],[-2],[-10],[8],[-10],[-4],[2],[-9],[8],[-8],[2],[-5],[-1],[4],[8],[-10],[2],[9],[-7],[-1],[-9],[1],[6],[-2],[2],[5],[8],[-4],[-5],[-7],[-2],[3],[3],[6],[-1],[8],[2],[1],[1],[-6],[3],[-7],[-3],[10],[-9],[1],[7],[5],[-6],[-1],[8],[6],[1],[9],[1],[9],[7],[7],[-6],[8],[-7],[9],[2],[6],[-5],[-6],[-8],[-2],[-10],[-3],[8],[-8],[-7],[-7],[-5],[2],[-1],[-6],[7],[3],[-8],[-6],[1],[-5],[10],[-5],[9],[7],[10],[1],[-6],[-5],[-6],[-2],[-4],[-4],[1],[-9],[9],[-5],[-4],[-9],[-4],[1],[10],[-7],[-6],[5],[-7],[4],[9],[-6],[-1],[5],[8],[9],[10],[7],[4],[-8],[-9],[-1],[9],[-9],[-3],[8],[5],[6],[-8],[4],[-3],[-10],[-2],[-9],[-2],[-3],[1],[-9],[1],[7],[-5],[8],[8],[5],[-5],[1],[-3],[10],[-7],[-4],[-5],[-3],[-2],[-7],[2],[-7],[-8],[6],[6],[-1],[2],[8],[-5],[3],[-9],[-1],[5],[-9],[6],[-9],[9],[-5],[10],[-2],[-5],[-9],[4],[-6],[-8],[-1],[7],[9],[7],[8],[3],[4],[-3],[8],[2],[-10],[-10],[-6],[6],[5],[1],[1],[9],[-2],[8],[-2],[7],[-3],[-4],[-6],[1],[-5],[-6],[-9],[-3],[8],[-2],[3],[-9],[-10],[7],[7],[7],[-6],[5],[9],[-7],[6],[7],[6],[2],[5],[-3],[7],[-5],[8],[-8],[-6],[9],[10],[-4],[-7],[-5],[-4],[10],[2],[6],[-8],[-8],[-10],[2],[7],[-4],[-9],[-6],[6],[-7],[-3],[-8],[5],[-9],[-2],[6],[5],[-4],[1],[4],[10],[-2],[3],[-7],[10],[-2],[6],[-9],[9],[-10],[4],[-2],[-4],[-5],[-4],[2],[9],[4],[-3],[-8],[3],[-3],[-9],[-2],[2],[-1],[1],[-7],[-2],[9],[-1],[2],[6],[9],[5],[10],[7],[-10],[8],[5],[5],[-6],[9],[-3],[-6],[-9],[-5],[7],[6],[-1],[-3],[-2],[-6],[7],[4],[4],[7],[-8],[-5],[-9],[3],[-8],[-10],[-10],[-10],[7],[1],[2],[-2],[1],[-10],[-7],[-7],[5],[-8],[-3],[-4],[-9],[-5],[-1],[9],[-8],[9],[-10],[-10],[7],[8],[-7],[1],[-8],[-10],[-9],[-3],[1],[7],[-3],[-1],[-9],[-3],[-1],[1],[-3],[4],[-7],[3],[3],[8],[10],[-10],[1],[2],[-8],[-7],[1],[-7],[2],[-2],[9],[4],[10],[-1],[3],[-5],[-1],[3],[-4],[6],[-7],[-10],[-2],[3],[-5],[9],[-1],[-7],[-2],[-2],[-8],[-9],[3],[2],[6],[1],[2],[4],[-6],[-10],[-1],[2],[9],[3],[-10],[6],[3],[8],[7],[3],[-10],[9],[-6],[8],[1],[3],[-6],[-6],[-6],[6],[-7],[3],[-10],[-7],[-3],[-2],[-5],[-6],[7],[2],[-1],[-10],[2],[2],[6],[-4],[-4],[4],[-2],[-3],[-1],[7],[-10],[-8],[-7],[3],[-7],[-7],[-10],[7],[-8],[-10],[1],[-8],[-2],[7],[6],[1],[7],[2],[-10],[-3],[9],[-6],[-8],[-6],[7],[1],[-7],[1],[10],[5],[2],[-3],[-5],[-2],[-10],[-4],[5],[-10],[6],[-9],[2],[-10],[-9],[-10],[-9],[-6],[-1],[9],[-1],[-3],[-7],[2],[8],[3],[7],[-4],[2],[-10],[5],[1],[-7],[4],[-3],[5],[5],[7],[-4],[4],[-8],[-3],[-10],[4],[1],[4],[-5],[9],[-1],[1],[-3],[2],[-4],[-9],[-7],[-10],[9],[1],[-2],[-3],[10],[10],[-4],[9],[-1],[1],[-7],[-3],[-1],[1],[5],[-4],[7],[-6],[-2],[-4],[6],[-10],[-3],[8],[-7],[8],[-2],[-7],[3],[-1],[-9],[3],[-10],[-5],[-9],[5],[-4],[-8],[1],[-9],[-4],[4],[-7],[-9],[7],[9],[4],[-2],[-2],[-7],[9],[-8],[6],[-8],[-1],[7],[5],[1],[10],[-4],[-9],[5],[-6],[10],[-7],[1],[-8],[6],[7],[2],[2],[-3],[-3],[-3],[-2],[2],[-2],[7],[-3],[8],[-1],[-5],[-9],[6],[5],[-2],[-9],[6],[-9],[5],[-5],[-5],[3],[5],[-6],[-5],[3],[9],[-10],[-6],[2],[2],[4],[1],[8],[-5],[2],[-10],[-1],[-10],[-9],[5],[4],[-3],[-6],[7],[-8],[-9],[-8],[6],[-6],[-1],[-10],[-3],[7],[7],[8],[-9],[5],[-7],[3],[-8],[7],[-3],[-8],[3],[1],[-4],[4],[-3],[3],[-8],[-1],[5],[10],[-6],[-8],[-6],[-10],[1],[10],[-1],[5],[-2],[-5],[1],[-5],[8],[7],[2],[7],[-2],[10],[1],[-7],[-7],[-4],[7],[-6],[-10],[4],[-6],[10],[4],[7],[-7],[-4],[9],[-7],[6],[-3],[-10],[-3],[-8],[-6],[7],[-10],[8],[9],[9],[10],[10],[7],[7],[-2],[-9],[-8],[-1],[5],[-10],[-10],[10],[2],[-1],[-2],[6],[-8],[-5],[10],[10],[-7],[-6],[-7],[-3],[-8],[3],[2],[7],[-3],[-4],[1],[-8],[-8],[6],[5],[9],[-5],[6],[-2],[4],[4],[8],[-3],[9],[-5],[3],[-2],[-7],[-4],[-6],[10],[-2],[10],[9],[-8],[4],[10],[-7],[10],[9],[8],[-1],[4],[1],[-4],[-6],[4],[-3],[7],[10],[5],[-9],[-7],[10],[-4],[-3],[2],[5],[6],[4],[4],[-6],[10],[-7],[-1],[4],[3],[3],[-10],[7],[1],[-8],[-6],[8],[10],[-3],[4],[5],[9],[2],[-10],[-6],[-10],[3],[9],[3],[2],[4],[4],[-1],[4],[9],[1],[3],[-7],[-10],[1],[-8],[-6],[-10],[10],[6],[7],[-1],[1],[-5],[4],[-4],[-1],[9],[-4],[-5],[-6],[6],[5],[-6],[1],[9],[1],[9],[2],[7],[-10],[-4],[-10],[9],[1],[-8],[10],[-6],[2],[-3],[3],[1],[4],[6],[-3],[-3],[-5],[-4],[-8],[-8],[-10],[6],[10],[6],[-6],[-5],[3],[-5],[-5],[4],[-5],[3],[-1],[-5],[-3],[-10],[9],[2],[7],[-3],[8],[-4],[-5],[7],[-9],[10],[-7],[-3],[1],[9],[-3],[6],[4],[3],[-7],[-6],[6],[6],[-8],[-9],[-6],[-10],[3],[1],[-3],[7],[-9],[8],[-2],[-7],[-9],[4],[3],[-5],[2],[8],[5],[1],[3],[-2],[-2],[2],[6],[7],[1],[7],[-6],[-5],[10],[8],[6],[-2],[-7],[-10],[4],[-7],[-3],[-8],[-9],[6],[-10],[1],[-3],[-3],[-6],[7],[-10],[-4],[-1],[-7],[6],[-9],[-5],[9],[5],[-5],[10],[1],[2],[-6],[-8],[2],[-1],[4],[9],[-5],[7],[6],[-5],[7],[2],[-5],[10],[6],[1],[-10],[-7],[6],[9],[10],[-1],[-4],[2],[-2],[7],[-9],[1],[-1],[-1],[3],[-1],[2],[7],[7],[-9],[-3],[3],[1],[-9],[4],[-2],[7],[8],[-4],[-7],[2],[2],[-7],[3],[-5],[1],[5],[9],[-9],[8],[-4],[-6],[-6],[9],[3],[7],[-5],[1],[-9],[5],[9],[6],[-10],[-9],[-1],[4],[-9],[-8],[-5],[5],[4],[-5],[-2],[-2],[3],[7],[-3],[-5],[7],[-4],[2],[6],[8],[-8],[-3],[-3],[6],[6],[6],[-1],[7],[-8],[-10],[-5],[-8],[-7],[-7],[-6],[9],[8],[-9],[-8],[8],[-3],[4],[-1],[1],[-1],[-6],[-9],[-5],[7],[-1],[7],[-6],[-3],[5],[-10],[-7],[-7],[-8],[-2],[-2],[1],[1],[-2],[-10],[10],[-9],[3],[-1],[10],[10],[-9],[2],[8],[6],[8],[-6],[6],[3],[-6],[5],[4],[3],[9],[6],[2],[-9],[10],[6],[-1],[9],[2],[10],[-3],[-6],[-6],[6],[-4],[9],[-5],[-3],[8],[-7],[-3],[-8],[7],[4],[5],[7],[-1],[-8],[3],[8],[7],[3],[10],[-10],[-7],[-1],[-1],[-5],[-8],[-8],[-6],[-10],[10],[-3],[6],[-2],[-7],[-4],[10],[9],[10],[-8],[-9],[-9],[-5],[-10],[4],[8],[-2],[8],[-2],[-8],[5],[10],[-5],[-3],[-9],[5],[-5],[4],[3],[-10],[6],[2],[-9],[-3],[-1],[2],[4],[-1],[8],[-5],[4],[-4],[-6],[8],[-2],[8],[-6],[-3],[3],[6],[8],[9],[-7],[-10],[-4],[-2],[9],[-9],[4],[-6],[-6],[2],[7],[7],[-3],[3],[8],[-1],[2],[-1],[-8],[-5],[1],[-2],[1],[-3],[4],[-1],[3],[2],[-10],[5],[-7],[-4],[-10],[3],[10],[-5],[-2],[-9],[-8],[-10],[-8],[-5],[8],[4],[10],[-7],[-8],[6],[-7],[-5],[7],[-1],[-8],[-1],[-1],[-9],[3],[-9],[-1],[10],[-6],[8],[9],[-9],[-3],[5],[-4],[-10],[-7],[9],[6],[-8],[-1],[-10],[1],[6],[9],[9],[-8],[-4],[5],[-4],[8],[-3],[8],[2],[9],[-3],[-6],[-7],[-4],[-6],[6],[1],[-6],[-6],[6],[1],[-5],[8],[6],[5],[1],[-10],[-10],[-6],[7],[-7],[9],[-7],[-5],[-7],[-3],[3],[-3],[-1],[-3],[6],[6],[-1],[-10],[-3],[8],[2],[-10],[-2],[1],[5],[8],[-4],[-1],[9],[3],[5],[1],[8],[-4],[-10],[10],[2],[10],[6],[5],[-9],[-9],[3],[-10],[-3],[-8],[-4],[6],[-2],[-2],[-5],[-4],[-4],[-10],[10],[-2],[-8],[2],[1],[6],[6],[-4],[-4],[-2],[-1],[7],[-7],[-10],[9],[-3],[-5],[6],[6],[-5],[-1],[-2],[-4],[7],[5],[2],[-4],[-1],[-4],[-5],[-2],[2],[3],[-1],[7],[7],[4],[2],[4],[-5],[1],[-4],[-8],[7],[7],[-5],[-10],[6],[-4],[-2],[2],[8],[7],[-5],[-1],[9],[-10],[8],[-1],[2],[-9],[-6],[-3],[-2],[-1],[9],[-4],[-9],[-8],[3],[7],[-3],[8],[-4],[8],[-8],[4],[-6],[8],[5],[6],[3],[2],[-2],[-8],[-10],[-10],[1],[4],[-6],[3],[9],[-10],[4],[7],[-7],[7],[3],[-4],[10],[2],[7],[4],[-10],[5],[-3],[2],[6],[9],[9],[-1],[-8],[-8],[8],[8],[4],[-1],[-1],[-2],[5],[1],[-8],[2],[-6],[-5],[-8],[3],[5],[-9],[-3],[-10],[-4],[-9],[5],[-10],[-1],[-10],[5],[-2],[-6],[7],[-3],[2],[-2],[-10],[7],[-4],[-2],[7],[-6],[-10],[7],[3],[-6],[4],[4],[-6],[2],[5],[-8],[-8],[7],[-5],[7],[-6],[9],[10],[-8],[10],[10],[3],[-3],[-10],[-6],[8],[-2],[-6],[-10],[-5],[3],[2],[7],[-9],[-4],[8],[3],[9],[10],[-3],[-6],[10],[-9],[6],[9],[8],[3],[3],[-9],[7],[-1],[1],[-6],[-2],[-2],[5],[-5],[-8],[5],[-4],[5],[4],[2],[-10],[-2],[-6],[1],[9],[-8],[6],[-3],[7],[-9],[-4],[1],[7],[-10],[6],[10],[4],[-2],[-5],[8],[2],[4],[-7],[2],[6],[-1],[6],[-8],[7],[-5],[1],[10],[7],[6],[7],[-5],[-1],[9],[-5],[3],[10],[2],[7],[-8],[8],[-7],[9],[4],[9],[10],[-5],[5],[4],[-7],[-2],[-4],[6],[10],[-6],[8],[-4],[-4],[-10],[10],[2],[7],[5],[-5],[-5],[1],[5],[-4],[9],[-4],[2],[10],[-5],[-8],[-5],[-8],[8],[-6],[7],[-3],[-6],[-2],[8],[-1],[9],[4],[5],[9],[2],[-9],[-6],[6],[2],[7],[3],[-2],[4],[7],[-9],[1],[-2],[-9],[-2],[-1],[6],[1],[-6],[-9],[7],[8],[8],[9],[3],[4],[-4],[1],[-3],[-7],[9],[-9],[-7],[-10],[-7],[1],[-5],[-6],[-8],[-4],[10],[-4],[4],[-2],[-6],[-10],[-6],[-1],[-9],[-6],[-9],[10],[6],[8],[-10],[-7],[-10],[-7],[-6],[9],[-8],[8],[-10],[-7],[-1],[-5],[9],[-8],[-3],[9],[7],[-4],[-6],[-1],[-9],[-6],[-9],[-3],[5],[-10],[-2],[-1],[-2],[4],[-5],[9],[-8],[1],[5],[8],[-10],[3],[9],[10],[5],[-2],[-5],[-5],[-2],[-4],[-3],[-1],[7],[5],[-1],[8],[-7],[5],[-6],[-10],[7],[7],[5],[-10],[-1],[3],[7],[-5],[3],[-10],[4],[8],[-10],[7],[-7],[8],[-9],[5],[7],[8],[-2],[-3],[3],[5],[9],[2],[5],[5],[2],[3],[9],[5],[-4],[-1],[-8],[8],[9],[8],[1],[-10],[1],[6],[-2],[1],[-4],[-5],[-6],[10],[-1],[-1],[-9],[-8],[2],[2],[9],[4],[4],[8],[-10],[1],[-3],[-5],[-7],[9],[8],[-6],[10],[-7],[9],[-4],[9],[-10],[7],[-10],[7],[8],[-8],[-9],[2],[4],[9],[-6],[3],[9],[-3],[4],[-2],[-5],[-2],[-3],[6],[1],[6],[10],[9],[7],[3],[4],[9],[2],[8],[-1],[10],[-9],[-3],[-3],[4],[5],[-5],[8],[-1],[1],[8],[-2],[1],[-8],[9],[9],[-7],[2],[-1],[-1],[9],[4],[4],[-8],[-9],[-9],[-4],[-6],[6],[-4],[-3],[-6],[9],[2],[-3],[4],[-2],[-7],[-4],[-9],[2],[2],[10],[1],[-1],[-3],[-5],[-7],[-7],[6],[-6],[5],[1],[-2],[5],[-8],[1],[4],[-7],[9],[9],[-2],[-1],[1],[-10],[1],[9],[1],[7],[5],[-7],[10],[-2],[-9],[-9],[-6],[-10],[-3],[7],[-10],[-10],[2],[8],[9],[9],[7],[8],[1],[-2],[-10],[-1],[-7],[3],[2],[3],[9],[-5],[-3],[4],[-8],[8],[8],[3],[-8],[2],[-5],[-2],[-3],[-2],[9],[9],[9],[8],[-8],[-5],[-7],[4],[-1],[-7],[-1],[6],[-1],[8],[-5],[1],[6],[-1],[5],[-8],[-2],[-3],[-10],[-6],[-3],[9],[-1],[2],[5],[-8],[-10],[4],[8],[-4],[5],[-7],[-7],[-7],[7],[-7],[4],[4],[2],[9],[-6],[10],[3],[-6],[9],[5],[-2],[-2],[5],[5],[3],[-2],[-7],[-4],[4],[8],[8],[10],[2],[-4],[5],[-7],[-4],[-5],[8],[-10],[-9],[10],[1],[-7],[-7],[7],[-3],[-9],[-2],[-5],[4],[6],[-1],[-8],[-1],[4],[3],[8],[-9],[-10],[-1],[4],[-5],[-8],[7],[6],[5],[1],[4],[-9],[-8],[-7],[-8],[-6],[1],[5],[-5],[6],[1],[-7],[-7],[-10],[-6],[10],[-8],[5],[3],[-8],[8],[-10],[-10],[-2],[2],[-2],[-10],[-1],[-3],[-9],[4],[1],[2],[10],[9],[-8],[2],[7],[-1],[-4],[7],[-7],[-7],[5],[-3],[-1],[8],[9],[-9],[5],[8],[4],[-1],[9],[-1],[6],[1],[4],[4],[-9],[6],[4],[-3],[3],[-3],[-9],[-2],[-1],[5],[-7],[-3],[4],[-8],[1],[10],[1],[-2],[-9],[9],[9],[2],[4],[-3],[9],[3],[4],[-10],[-9],[9],[-4],[-9],[-4],[-9],[8],[-6],[-1],[4],[-4],[-8],[-5],[-10],[-8],[-9],[1],[-6],[6],[10],[-8],[6],[-9],[2],[-3],[-5],[3],[10],[4],[-1],[2],[-9],[10],[10],[3],[-8],[10],[-9],[-8],[-9],[9],[-8],[7],[2],[-9],[4],[-5],[-6],[8],[-2],[7],[2],[-6],[6],[-3],[-5],[-9],[5],[-2],[-7],[-2],[-6],[-6],[3],[-10],[7],[-7],[-3],[-1],[6],[-4],[-4],[-5],[-8],[8],[2],[8],[8],[-2],[-2],[-5],[8],[-9],[2],[-1],[-3],[1],[-7],[10],[5],[-1],[-7],[-5],[-5],[-5],[-9],[-5],[10],[-9],[-5],[5],[3],[-7],[2],[6],[-5],[-6],[-7],[7],[-8],[-10],[-3],[-4],[-10],[-7],[3],[-3],[8],[7],[-7],[-9],[1],[5],[8],[4],[6],[-5],[-1],[-2],[-3],[-6],[-1],[-3],[8],[8],[4],[-8],[-5],[-6],[6],[-1],[8],[-1],[-6],[-9],[-2],[-5],[3],[1],[-9],[-7],[-8],[-1],[7],[-10],[-9],[-5],[-6],[5],[-9],[-2],[3],[-3],[7],[-8],[-3],[-1],[-9],[8],[2],[-10],[6],[10],[-2],[-7],[-1],[-2],[-8],[3],[-7],[2],[-7],[2],[5],[-3],[-7],[-10],[8],[8],[-4],[3],[-4],[2],[-7],[7],[-5],[5],[2],[-7],[9],[-6],[2],[-9],[5],[-4],[-2],[6],[9],[-8],[-2],[-2],[4],[8],[-7],[4],[4],[-2],[5],[1],[-1],[-9],[-10],[-9],[-3],[-9],[3],[-4],[1],[4],[-9],[-5],[10],[1],[3],[5],[7],[-6],[-1],[9],[-3],[-10],[10],[-3],[6],[-10],[-6],[9],[-6],[-3],[-4],[-2],[-4],[-9],[-5],[-8],[-7],[-3],[10],[7],[-5],[-2],[5],[7],[2],[10],[-8],[-9],[3],[7],[6],[-6],[-2],[9],[7],[10],[2],[3],[3],[-9],[-1],[3],[3],[4],[-9],[4],[6],[8],[9],[2],[3],[7],[5],[-3],[1],[-7],[2],[2],[1],[-3],[-6],[-6],[7],[10],[1],[-3],[5],[-2],[-10],[-3],[8],[1],[-10],[-7],[-10],[-1],[-9],[9],[-3],[3],[5],[10],[6],[2],[-6],[6],[5],[-6],[-2],[-5],[-5],[-9],[7],[10],[8],[-6],[9],[-3],[-8],[2],[-2],[-2],[6],[3],[4],[10],[-6],[4],[4],[-3],[-1],[-3],[7],[-7],[3],[-10],[8],[1],[1],[1],[1],[5],[-8],[-1],[6],[7],[3],[8],[-8],[-4],[6],[3],[8],[-7],[-7],[4],[-10],[5],[9],[2],[-10],[-5],[-1],[-2],[9],[9],[3],[-9],[-7],[2],[5],[-9],[-7],[6],[-10],[3],[9],[4],[10],[8],[-3],[-7],[8],[-7],[-2],[-8],[5],[3],[2],[9],[-8],[-4],[10],[-7],[-6],[-2],[-2],[5],[-4],[-5],[-1],[3],[-10],[7],[-8],[8],[9],[-4],[-1],[-3],[-8],[6],[-5],[9],[3],[-6],[-7],[-2],[7],[-1],[-6],[-4],[-10],[-7],[-1],[-8],[7],[-8],[4],[10],[3],[4],[6],[9],[5],[-10],[-10],[9],[-7],[10],[9],[9],[-1],[6],[6],[5],[-3],[1],[4],[3],[-1],[-2],[1],[2],[-10],[-6],[-10],[4],[-3],[9],[8],[9],[2],[3],[2],[-5],[2],[6],[1],[-1],[-10],[-9],[-3],[-6],[-5],[6],[-8],[7],[6],[5],[-7],[-3],[-10],[-4],[6],[-1],[2],[1],[-4],[2],[9],[-5],[4],[8],[-3],[10],[-3],[-10],[-3],[-5],[10],[9],[7],[7],[-4],[-3],[8],[1],[-9],[6],[2],[-3],[-10],[-10],[-9],[-1],[-1],[1],[10],[-1],[9],[-9],[-9],[3],[-1],[-1],[4],[10],[7],[4],[-4],[-5],[7],[5],[3],[2],[-10],[-3],[5],[-9],[4],[9],[-2],[-9],[-8],[-6],[-1],[-7],[6],[8],[8],[3],[2],[6],[-9],[-4],[-5],[-10],[-2],[9],[-5],[-2],[6],[5],[-9],[-1],[-2],[2],[-8],[3],[-5],[2],[-10],[8],[-3],[-3],[2],[3],[3],[9],[-2],[9],[-3],[-9],[-1],[-10],[-7],[-8],[-7],[10],[1],[-8],[-9],[10],[10],[3],[8],[-5],[-5],[5],[7],[4],[-10],[-3],[-7],[8],[-8],[-1],[-7],[6],[10],[1],[-3],[10],[1],[4],[3],[-3],[8],[-1],[-9],[-5],[3],[-4],[6],[-2],[-1],[-4],[-9],[2],[4],[-9],[-4],[9],[8],[-9],[8],[6],[9],[-4],[9],[-1],[6],[7],[-4],[7],[-5],[-4],[-9],[-10],[-4],[4],[2],[-1],[-7],[4],[-8],[-8],[-4],[2],[-4],[-5],[-7],[7],[-1],[-3],[-6],[5],[6],[-9],[-3],[-10],[-9],[7],[-3],[-1],[-10],[-5],[3],[-3],[1],[-9],[10],[4],[-2],[-8],[7],[-5],[-8],[10],[-5],[-10],[5],[-2],[-9],[3],[8],[6],[-6],[5],[-5],[-2],[-2],[-9],[-3],[-4],[9],[-3],[-1],[-3],[9],[-2],[-7],[-6],[-3],[2],[5],[10],[-3],[10],[7],[-4],[9],[-1],[10],[3],[-9],[8],[-3],[1],[-7],[-4],[9],[2],[5],[9],[7],[8],[-1],[-6],[-2],[-2],[-2],[-7],[5],[1],[-2],[-4],[10],[-4],[7],[7],[-7],[10],[6],[8],[-5],[-1],[1],[3],[7],[-5],[10],[-10],[5],[-3],[7],[6],[5],[-1],[2],[-8],[-10],[-5],[6],[-6],[-2],[2],[10],[2],[7],[-6],[3],[10],[8],[8],[-1],[-8],[-5],[3],[-10],[6],[7],[6],[3],[-3],[-1],[-7],[-2],[4],[-8],[-1],[-1],[9],[3],[1],[8],[5],[-7],[-5],[9],[3],[8],[6],[-6],[-10],[-5],[1],[-2],[-5],[-4],[-8],[6],[-10],[-4],[-5],[4],[3],[-7],[1],[-1],[8],[-4],[5],[-3],[2],[-7],[-10],[4],[7],[-6],[3],[10],[3],[6],[5],[-7],[-7],[-3],[-10],[3],[4],[2],[4],[-5],[-6],[-5],[2],[-6],[5],[8],[-1],[-4],[-5],[-1],[5],[-7],[-5],[-4],[-5],[-1],[-1],[-1],[-2],[-5],[8],[8],[8],[2],[-8],[8],[-8],[-4],[-6],[-3],[9],[-3],[2],[3],[-10],[2],[2],[1],[-1],[3],[5],[-7],[-8],[5],[1],[-4],[-4],[3],[10],[10],[6],[8],[-4],[-8],[-2],[-8],[-4],[-8],[-6],[-8],[-5],[-9],[1],[4],[10],[1],[-8],[4],[10],[6],[-2],[-6],[9],[-9],[-1],[2],[-1],[-4],[5],[-4],[-2],[10],[6],[1],[-3],[5],[-3],[-2],[-5],[7],[-9],[-1],[-2],[-3],[-10],[1],[-9],[-1],[3],[10],[-9],[3],[-4],[-4],[7],[-6],[-2],[7],[1],[-10],[-4],[-5],[10],[-10],[10],[-10],[3],[-2],[-8],[9],[-10],[2],[-3],[6],[8],[6],[-7],[-6],[9],[-1],[-8],[-7],[-2],[-9],[7],[-6],[4],[-1],[-6],[2],[2],[-7],[-9],[5],[1],[-8],[-7],[-9],[5],[-9],[-7],[-1],[2],[9],[-8],[-1],[10],[-1],[-1],[8],[2],[-10],[-10],[8],[-10],[-10],[-2],[9],[3],[-2],[-10],[3],[-1],[1],[-1],[-5],[-5],[-4],[5],[-10],[10],[1],[1],[8],[9],[-6],[4],[-8],[-4],[-8],[-8],[-9],[-7],[5],[6],[-6],[-7],[2],[6],[-3],[1],[3],[1],[-2],[-2],[9],[5],[-10],[3],[-6],[-5],[9],[9],[2],[-1],[-10],[6],[-10],[7],[-9],[4],[7],[-8],[-4],[4],[-3],[-10],[1],[-2],[-5],[-7],[5],[-8],[-8],[7],[-2],[-7],[-10],[5],[7],[-4],[10],[-3],[-3],[1],[-7],[-5],[-2],[7],[6],[9],[-7],[-8],[-1],[-3],[-4],[-1],[10],[5],[-8],[-5],[7],[-9],[-1],[-10],[2],[-8],[6],[-8],[-8],[-9],[7],[-9],[1],[-2],[2],[-4],[-7],[9],[9],[6],[9],[-10],[9],[5],[-8],[-2],[-2],[2],[6],[-4],[1],[-7],[-3],[6],[-8],[-3],[6],[3],[3],[5],[-10],[-6],[1],[-10],[2],[-5],[-4],[-3],[3],[-8],[4],[5],[7],[7],[5],[3],[10],[-2],[7],[-8],[-5],[-6],[-9],[3],[10],[10],[-3],[6],[-4],[1],[-5],[-7],[-4],[-8],[8],[-4],[10],[2],[-8],[-9],[4],[-2],[4],[-6],[1],[8],[-4],[2],[3],[-10],[5],[5],[-3],[3],[10],[10],[1],[3],[-10],[-4],[8],[6],[8],[-9],[10],[-3],[1],[-10],[-5],[-6],[9],[10],[-7],[-5],[-4],[7],[-2],[4],[-3],[-10],[-10],[7],[3],[8],[2],[-2],[1],[1],[7],[-7],[7],[-2],[7],[1],[-7],[-10],[-4],[-10],[4],[-4],[1],[7],[1],[2],[-6],[-8],[-10],[-3],[6],[-6],[5],[-10],[3],[-7],[-8],[-5],[-8],[-3],[-2],[7],[-1],[-10],[5],[8],[7],[4],[10],[-10],[-6],[1],[-7],[-4],[-9],[-4],[-9],[9],[-7],[-3],[-2],[6],[6],[1],[6],[10],[8],[5],[-6],[-10],[4],[-3],[6],[5],[1],[-8],[8],[2],[3],[-2],[5],[-8],[-1],[-6],[-2],[1],[-2],[-8],[-6],[-4],[10],[2],[5],[4],[7],[7],[-7],[-5],[-10],[5],[-9],[7],[-1],[-2],[10],[8],[9],[2],[3],[-1],[1],[4],[-5],[-6],[10],[-6],[-10],[-2],[7],[-9],[-3],[9],[-4],[5],[-6],[-10],[8],[-6],[-3],[-9],[-8],[3],[7],[-8],[-1],[-3],[4],[4],[2],[7],[-10],[8],[-3],[1],[1],[-8],[-3],[4],[6],[6],[8],[10],[3],[10],[-7],[-7],[6],[-3],[2],[-4],[3],[9],[-2],[-8],[4],[6],[5],[-4],[1],[-4],[-2],[3],[6],[6],[1],[-10],[-3],[10],[1],[-4],[2],[-7],[-5],[5],[-4],[4],[2],[2],[7],[-6],[10],[-3],[-3],[6],[3],[-1],[1],[3],[-6],[4],[7],[-5],[-9],[-7],[-5],[-5],[8],[-7],[4],[-7],[5],[-3],[-5],[-4],[5],[2],[-8],[-1],[4],[-3],[10],[3],[7],[1],[5],[-8],[7],[7],[-8],[-4],[1],[-4],[-10],[7],[-2],[2],[-8],[4],[-7],[9],[-4],[-2],[-10],[2],[4],[-10],[-1],[-5],[1],[7],[-10],[-9],[-6],[-6],[-7],[-6],[-1],[1],[-1],[-9],[8],[-1],[6],[-2],[-8],[4],[7],[-8],[4],[9],[6],[2],[8],[-9],[6],[-6],[-9],[-3],[-1],[-4],[5],[-6],[-1],[7],[-8],[-9],[-2],[4],[-2],[-8],[2],[3],[1],[6],[5],[2],[10],[-10],[4],[-8],[-4],[7],[-8],[7],[-5],[-8],[-1],[6],[-1],[3],[-6],[3],[4],[-9],[-3],[-9],[4],[4],[-8],[-1],[7],[9],[2],[-9],[10],[8],[8],[-2],[-7],[9],[9],[-6],[7],[-4],[2],[-7],[7],[-7],[1],[-4],[10],[9],[-3],[2],[-3],[9],[-2],[-5],[-6],[3],[6],[-7],[6],[-6],[1],[-2],[-3],[-1],[-1],[8],[6],[7],[2],[-5],[3],[-6],[-8],[4],[8],[4],[9],[10],[-6],[-10],[-6],[2],[6],[9],[1],[10],[-4],[3],[-1],[9],[-6],[-7],[-9],[-10],[-8],[2],[1],[-5],[3],[-6],[-10],[8],[-5],[7],[9],[-3],[6],[-1],[9],[-10],[2],[-2],[-7],[-9],[-2],[5],[-3],[7],[6],[-4],[-7],[10],[-9],[10],[4],[4],[3],[-8],[-2],[1],[6],[-8],[-10],[9],[-9],[1],[-9],[1],[3],[3],[-1],[-3],[2],[7],[10],[10],[3],[-5],[2],[-1],[4],[-7],[2],[-1],[9],[-2],[3],[-7],[7],[-1],[-1],[3],[8],[8],[-1],[-3],[10],[9],[7],[-9],[-4],[-9],[6],[-1],[9],[2],[-2],[3],[-2],[-4],[-2],[7],[8],[-4],[-4],[3],[3],[6],[-5],[4],[1],[-3],[2],[5],[-9],[-4],[-5],[-2],[7],[-7],[-10],[2],[2],[5],[-8],[-3],[-7],[-4],[-2],[-3],[-9],[1],[10],[-8],[-9],[1],[-7],[3],[2],[1],[8],[-9],[-10],[-6],[-3],[5],[-7],[-7],[-2],[-5],[9],[-10],[-6],[8],[-10],[-8],[-2],[-7],[-9],[7],[1],[-3],[2],[5],[-4],[-5],[-6],[-1],[-6],[2],[7],[8],[6],[-4],[-6],[6],[-6],[-8],[-10],[10],[-5],[9],[10],[4],[9],[3],[6],[7],[-5],[-7],[-3],[10],[4],[6],[3],[8],[-3],[-9],[-6],[-8],[-1],[-5],[2],[-10],[-5],[10],[2],[5],[-10],[-1],[-9],[10],[7],[4],[2],[-10],[-2],[-1],[9],[1],[-8],[9],[-3],[-5],[-5],[7],[-5],[-5],[-6],[-6],[10],[-3],[-3],[5],[4],[5],[9],[2],[-8],[6],[-1],[-9],[-1],[9],[-5],[10],[-10],[-6],[-7],[-6],[-8],[-5],[-3],[-10],[1],[-6],[2],[1],[2],[-3],[-2],[2],[5],[-7],[-10],[-3],[4],[-9],[4],[9],[7],[10],[-3],[-3],[10],[1],[8],[-5],[1],[3],[-7],[-4],[-6],[-9],[2],[8],[5],[9],[10],[2],[7],[-1],[9],[5],[-2],[-3],[-7],[-9],[8],[5],[-7],[-9],[2],[8],[-9],[1],[6],[-8],[10],[4],[2],[-10],[-4],[1],[-8],[-4],[-9],[5],[1],[3],[-6],[4],[8],[6],[7],[-9],[-9],[9],[-7],[-7],[-9],[10],[-4],[-9],[-2],[4],[9],[-1],[-2],[-5],[9],[8],[-3],[3],[-9],[7],[-3],[-4],[-5],[1],[7],[5],[-3],[-3],[3],[4],[1],[2],[-8],[4],[-5],[-5],[-7],[5],[-4],[-9],[-4],[-9],[9],[2],[9],[6],[7],[-2],[2],[4],[6],[-8],[-8],[6],[1],[-5],[8],[-2],[5],[10],[9],[3],[-3],[2],[-10],[5],[-6],[10],[-5],[-6],[-2],[3],[-4],[-8],[10],[-2],[-4],[-6],[-10],[4],[-5],[-8],[9],[-4],[2],[5],[2],[5],[-5],[-6],[1],[-6],[3],[-5],[10],[-2],[6],[5],[6],[4],[-9],[4],[-8],[-9],[2],[-8],[3],[1],[5],[6],[-3],[8],[8],[7],[-3],[4],[9],[-5],[-8],[10],[2],[-6],[-1],[9],[-3],[1],[5],[7],[5],[7],[-2],[-1],[-2],[-8],[3],[-2],[-5],[9],[7],[3],[-5],[8],[-8],[-3],[-7],[-10],[-3],[4],[7],[6],[9],[4],[8],[9],[3],[5],[-10],[8],[-8],[-8],[3],[-7],[-9],[4],[10],[-8],[9],[2],[-7],[-5],[7],[-10],[5],[-5],[-1],[9],[3],[2],[5],[-9],[-7],[-6],[1],[6],[-1],[8],[-2],[-4],[-8],[-1],[2],[-3],[-4],[-8],[-3],[7],[-4],[-6],[3],[2],[-4],[-3],[-1],[-5],[-8],[8],[-4],[6],[7],[8],[10],[10],[8],[-8],[-8],[4],[-3],[8],[4],[2],[10],[3],[-2],[2],[10],[1],[-5],[6],[7],[-2],[-4],[-8],[-3],[-10],[-2],[10],[-2],[-5],[-9],[-4],[-9],[1],[-6],[-7],[10],[-9],[-6],[-9],[5],[-8],[2],[8],[1],[8],[2],[-1],[1],[-7],[8],[1],[3],[-2],[8],[10],[3],[-10],[-5],[8],[-4],[6],[-2],[-9],[8],[1],[9],[-3],[3],[3],[-7],[5],[-10],[4],[3],[-1],[-10],[-5],[1],[-7],[-1],[4],[10],[4],[1],[5],[2],[-7],[-4],[8],[-2],[-6],[-6],[-9],[4],[-6],[4],[-7],[-5],[10],[-10],[-3],[4],[7],[-10],[-5],[3],[-7],[2],[-6],[1],[3],[9],[-2],[3],[-2],[6],[7],[7],[7],[-8],[2],[-4],[10],[6],[-2],[7],[-6],[5],[3],[-1],[-3],[2],[6],[6],[7],[-6],[7],[1],[-5],[5],[-5],[3],[3],[9],[-10],[-2],[-9],[4],[4],[-9],[-6],[-1],[6],[-2],[8],[-8],[-2],[-4],[1],[-10],[6],[-5],[-6],[2],[-1],[-2],[-7],[-1],[4],[2],[1],[-5],[-3],[7],[-4],[6],[-10],[-7],[-9],[8],[-10],[-8],[3],[10],[3],[9],[3],[4],[-5],[-9],[-7],[-1],[5],[-5],[8],[6],[-4],[-5],[-4],[-4],[8],[-10],[9],[7],[6],[-5],[3],[1],[-5],[-4],[-10],[1],[5],[-2],[-2],[5],[-2],[-10],[-10],[7],[5],[8],[-7],[7],[5],[-4],[-4],[-2],[-10],[7],[3],[-1],[8],[5],[10],[-1],[-3],[6],[7],[-1],[7],[-1],[8],[-9],[6],[-2],[9],[-3],[9],[-2],[-2],[-6],[3],[5],[7],[6],[9],[6],[-9],[-8],[10],[-3],[5],[5],[-5],[-3],[-1],[2],[-2],[6],[2],[5],[9],[1],[-6],[-4],[-10],[5],[-4],[1],[9],[-6],[4],[-4],[4],[-6],[-4],[-10],[-2],[-3],[-1],[-5],[4],[8],[2],[5],[3],[2],[1],[4],[10],[4],[2],[-8],[-4],[-3],[6],[7],[1],[5],[-7],[7],[-4],[-7],[-6],[10],[2],[-9],[5],[-1],[8],[5],[-3],[3],[-10],[-9],[1],[-6],[4],[-9],[6],[-6],[3],[-5],[5],[-9],[-9],[7],[9],[-7],[-8],[-5],[-4],[-5],[-6],[-1],[-4],[-5],[4],[-7],[-5],[2],[-3],[7],[6],[-10],[-2],[-5],[-7],[9],[5],[-10],[-8],[-5],[-4],[-3],[-9],[2],[-3],[3],[-2],[-6],[-7],[3],[1],[9],[-1],[-6],[3],[-3],[-4],[-5],[-1],[-4],[-5],[4],[7],[4],[-2],[9],[-10],[-1],[9],[-1],[-9],[-9],[-3],[5],[-1],[-8],[3],[6],[3],[7],[6],[9],[4],[6],[-7],[6],[-1],[6],[-9],[-8],[9],[9],[-10],[-3],[4],[10],[-6],[5],[-1],[5],[-9],[-4],[4],[-4],[3],[5],[8],[6],[-8],[2],[-1],[-1],[3],[6],[8],[2],[2],[8],[7],[1],[2],[2],[10],[9],[-8],[-8],[-7],[-3],[7],[-4],[3],[-2],[1],[-3],[2],[8],[9],[-5],[7],[9],[-6],[2],[7],[4],[9],[9],[-4],[-6],[-1],[-5],[4],[6],[-3],[-4],[-4],[6],[1],[-3],[-5],[2],[-5],[-5],[2],[-5],[-4],[-5],[-4],[-2],[1],[-7],[-9],[4],[1],[8],[-4],[-2],[-1],[-7],[-2],[-7],[3],[-3],[-2],[-3],[-10],[-9],[3],[1],[-1],[-2],[9],[-4],[-2],[-5],[-5],[1],[6],[-4],[10],[3],[-8],[-1],[6],[-7],[-10],[1],[-4],[2],[-8],[-2],[-1],[1],[-10],[6],[-2],[4],[-1],[-3],[6],[3],[-8],[7],[-1],[-1],[10],[-2],[-10],[-8],[7],[2],[5],[9],[10],[5],[1],[-2],[-2],[2],[10],[4],[9],[-2],[-8],[9],[6],[-5],[7],[9],[6],[-3],[-1],[8],[6],[9],[-5],[7],[-9],[-1],[9],[2],[-1],[-8],[-1],[-4],[-2],[5],[-2],[9],[5],[5],[10],[-2],[-8],[4],[10],[5],[-3],[10],[4],[2],[-10],[9],[2],[-9],[5],[4],[5],[4],[8],[-3],[6],[-2],[2],[4],[5],[-2],[-4],[7],[1],[2],[-10],[-1],[2],[-8],[-3],[-1],[-8],[-7],[-4],[-6],[6],[-3],[9],[6],[-6],[7],[-5],[-8],[-4],[-7],[9],[8],[-10],[10],[6],[2],[4],[-4],[-5],[-4],[-9],[4],[-1],[-10],[3],[2],[7],[9],[-4],[3],[5],[-6],[1],[5],[-10],[-7],[-1],[-2],[-7],[5],[-2],[-10],[-8],[-6],[10],[-6],[5],[5],[2],[3],[8],[-1],[-3],[1],[-9],[-8],[5],[10],[10],[10],[7],[4],[-6],[1],[-8],[9],[4],[-7],[7],[7],[-4],[9],[-4],[5],[-6],[4],[10],[7],[-9],[-5],[-3],[-5],[6],[-6],[-7],[1],[9],[-1],[8],[8],[10],[9],[-2],[-8],[-7],[7],[7],[8],[1],[-10],[-6],[-10],[-10],[9],[6],[4],[-9],[-7],[-3],[1],[-8],[-9],[10],[10],[-1],[2],[1],[4],[2],[1],[-9],[7],[2],[-1],[9],[-5],[2],[-3],[1],[-6],[4],[-2],[9],[-8],[7],[2],[-6],[6],[-2],[-3],[8],[-9],[-1],[-3],[-6],[5],[-8],[-6],[-2],[9],[-4],[7],[-1],[-8],[-9],[6],[-10],[-10],[-9],[-3],[5],[-4],[-6],[-9],[5],[-8],[-2],[-6],[8],[-5],[-6],[8],[6],[-7],[2],[-10],[8],[7],[4],[-2],[7],[-5],[7],[-9],[-7],[3],[5],[-9],[9],[6],[6],[6],[9],[9],[3],[-4],[3],[7],[-3],[4],[3],[7],[-9],[9],[-4],[9],[10],[-3],[-1],[4],[-4],[-2],[8],[-7],[-10],[-4],[8],[-2],[-8],[5],[7],[-2],[-9],[8],[7],[-4],[10],[10],[-9],[-2],[-5],[3],[8],[10],[-8],[7],[-1],[2],[4],[-2],[4],[6],[5],[-4],[10],[-5],[-2],[10],[-4],[5],[-9],[7],[3],[-2],[1],[-2],[1],[9],[-1],[-2],[10],[-9],[6],[2],[4],[-9],[-2],[-3],[-8],[-4],[8],[-4],[-1],[8],[-7],[-6],[-6],[9],[4],[1],[1],[-1],[8],[9],[-8],[5],[-8],[-6],[3],[2],[4],[8],[3],[-3],[1],[5],[4],[6],[-9],[-10],[-10],[4],[3],[7],[-5],[7],[-7],[9],[-4],[-6],[-6],[8],[8],[-4],[1],[-5],[-8],[-8],[-10],[10],[-6],[-5],[3],[4],[8],[-2],[-3],[-4],[4],[-2],[-3],[-3],[8],[3],[-8],[5],[9],[-8],[6],[10],[4],[-8],[-2],[-9],[-2],[1],[-10],[8],[8],[7],[-4],[2],[4],[8],[2],[6],[1],[2],[-6],[-2],[-4],[6],[7],[-3],[5],[3],[-4],[-5],[-4],[10],[2],[-1],[-8],[8],[6],[4],[1],[3],[4],[-5],[5],[10],[-2],[8],[7],[-2],[-2],[4],[6],[5],[10],[-1],[1],[-8],[-1],[6],[2],[5],[-9],[8],[1],[-9],[-2],[4],[-2],[9],[10],[4],[-5],[6],[7],[2],[-6],[-3],[-10],[-4],[-2],[-3],[-5],[10],[7],[1],[9],[-7],[-8],[-10],[5],[-4],[7],[-7],[-10],[-9],[4],[-7],[-10],[-8],[8],[4],[-3],[-2],[4],[-7],[4],[-1],[1],[-9],[10],[1],[1],[-5],[-7],[-9],[2],[-2],[4],[7],[-6],[8],[-6],[-10],[-8],[-7],[-8],[-4],[-8],[-1],[4],[8],[3],[1],[4],[7],[2],[9],[-6],[-6],[7],[-5],[-4],[5],[10],[7],[-5],[-9],[6],[8],[-10],[9],[10],[-2],[4],[-1],[5],[-7],[6],[3],[7],[-9],[-8],[5],[-10],[2],[-7],[2],[9],[-6],[-5],[-6],[-4],[9],[5],[6],[-3],[-6],[-5],[5],[-3],[-7],[-9],[2],[4],[1],[-8],[10],[-1],[1],[-5],[10],[6],[-9],[7],[8],[2],[-2],[4],[-7],[1],[-10],[6],[-10],[10],[-7],[-2],[3],[4],[-9],[-7],[-1],[-10],[-7],[9],[5],[-5],[-1],[-6],[10],[-4],[-3],[5],[-4],[-9],[8],[-8],[6],[-5],[6],[-1],[4],[-5],[-7],[-5],[9],[3],[8],[7],[6],[5],[-5],[-4],[2],[-5],[3],[-9],[-10],[-1],[-5],[3],[8],[3],[5],[-7],[7],[5],[-4],[-2],[10],[5],[1],[-2],[10],[7],[10],[9],[-7],[3],[4],[3],[2],[5],[8],[-4],[-5],[6],[5],[-9],[1],[-8],[8],[-10],[-2],[7],[5],[-9],[-9],[-4],[-4],[-7],[-7],[6],[-1],[5],[-1],[-3],[-2],[3],[8],[-2],[-1],[9],[-7],[-7],[9],[-1],[9],[8],[-2],[-3],[6],[3],[-9],[-4],[8],[9],[4],[9],[10],[4],[4],[-6],[1],[-4],[-7],[-10],[-3],[2],[1],[10],[-9],[9],[8],[7],[-6],[7],[-4],[-4],[7],[2],[4],[-8],[6],[2],[4],[-7],[2],[6],[-7],[-6],[-4],[4],[8],[-7],[-5],[10],[10],[10],[-5],[-5],[4],[-2],[9],[-6],[3],[-9],[7],[-8],[-1],[-9],[-3],[-10],[6],[-1],[2],[-2],[8],[-3],[-3],[5],[-1],[6],[-10],[-2],[-9],[-9],[-1],[-7],[9],[-9],[-4],[7],[4],[10],[1],[5],[2],[1],[-6],[-2],[5],[7],[-10],[-2],[-2],[10],[-2],[7],[7],[5],[-3],[-9],[4],[6],[2],[-6],[1],[2],[8],[2],[6],[6],[-9],[6],[-10],[-5],[3],[-9],[-5],[-10],[-3],[5],[-10],[5],[2],[5],[-9],[6],[4],[7],[4],[9],[5],[6],[-1],[8],[-3],[-7],[-1],[-10],[-2],[-9],[-8],[1],[8],[7],[10],[-1],[4],[-7],[-4],[-10],[-10],[-1],[-1],[-2],[-5],[-6],[-9],[-4],[6],[8],[5],[-3],[7],[-5],[-4],[9],[2],[-5],[-10],[-8],[1],[6],[10],[6],[1],[-4],[-5],[7],[-4],[4],[-7],[-6],[-4],[4],[9],[7],[-3],[-7],[-4],[10],[6],[6],[-8],[5],[5],[-4],[2],[-3],[-10],[-10],[-6],[-6],[-3],[3],[5],[-5],[-7],[4],[3],[-1],[-9],[-3],[4],[9],[3],[-2],[8],[10],[-10],[-9],[10],[8],[6],[-5],[3],[9],[1],[-3],[8],[-9],[-1],[1],[-9],[-1],[8],[6],[5],[-5],[7],[-9],[-8],[-10],[-8],[5],[7],[8],[7],[7],[2],[6],[9],[6],[-5],[-2],[3],[-1],[-8],[9],[6],[-4],[10],[-10],[3],[2],[7],[-5],[-10],[-10],[-4],[-7],[4],[7],[3],[-1],[-1],[-3],[-9],[7],[-2],[7],[-7],[-8],[3],[-3],[-10],[5],[10],[-7],[-1],[-1],[3],[1],[-7],[-2],[-9],[2],[1],[-4],[6],[3],[-8],[2],[-4],[9],[7],[-6],[-6],[-10],[7],[-3],[3],[2],[-5],[-8],[4],[9],[-2],[9],[9],[-1],[-10],[5],[-6],[-10],[-9],[1],[8],[5],[2],[6],[-5],[-9],[7],[-4],[6],[3],[2],[3],[-4],[-3],[5],[6],[7],[-9],[-3],[4],[-2],[-6],[1],[-5],[5],[4],[-5],[5],[7],[4],[-10],[-5],[2],[-8],[9],[-4],[5],[1],[-9],[-2],[4],[2],[-10],[-9],[-5],[-8],[3],[-3],[-9],[9],[-3],[10],[2],[1],[-10],[8],[8],[3],[4],[-6],[5],[5],[-1],[-3],[9],[8],[-7],[-7],[2],[2],[2],[3],[-9],[1],[-10],[-4],[3],[5],[8],[-2],[-1],[7],[1],[-7],[-6],[4],[-9],[10],[-5],[3],[8],[-2],[-5],[-4],[-4],[9],[1],[1],[2],[4],[9],[5],[-6],[5],[-6],[9],[-6],[-6],[6],[3],[8],[-5],[-8],[10],[4],[-5],[3],[10],[5],[-1],[6],[6],[10],[2],[-1],[6],[-6],[8],[-7],[3],[2],[4],[-8],[-5],[2],[5],[-5],[-7],[-2],[-1],[-3],[-2],[-5],[-3],[9],[-4],[6],[4],[-4],[8],[-4],[-3],[3],[-6],[-10],[-7],[3],[2],[-10],[-2],[2],[7],[6],[1],[-2],[-8],[-1],[7],[-5],[-10],[1],[8],[7],[-4],[6],[5],[2],[8],[-5],[1],[-10],[-8],[-2],[-9],[-10],[-9],[-4],[-5],[-8],[7],[4],[6],[4],[-7],[-4],[10],[5],[-9],[3],[-3],[-4],[-3],[1],[1],[-6],[-5],[-2],[8],[4],[-9],[-2],[-4],[-7],[6],[-10],[-4],[-3],[-7],[7],[-4],[-8],[-3],[10],[8],[-7],[-2],[-6],[-7],[-9],[4],[4],[-6],[-6],[-1],[-10],[-6],[-6],[9],[-2],[-9],[6],[9],[-8],[-6],[1],[-6],[9],[-4],[-2],[-10],[4],[1],[6],[-5],[8],[1],[-5],[-5],[-7],[10],[2],[-5],[-8],[8],[5],[-2],[-5],[-8],[-4],[-3],[-5],[6],[3],[3],[-4],[-9],[8],[7],[-4],[6],[6],[-10],[-5],[-4],[-9],[1],[1],[6],[-1],[-5],[-1],[-1],[-2],[-5],[-7],[8],[10],[-6],[6],[4],[-7],[1],[-6],[-4],[-7]], dtype = "int16")#candidate|4858|(9240, 1)|const|int16
var_4859 = relay.var("var_4859", dtype = "int8", shape = (576,))#candidate|4859|(576,)|var|int8
const_4860 = relay.const([9,5,-4,6,8,1,3,-4,-3,3,10,5,8,3,2,-7,5,-4,6,2,5,6,1,4,10,1,7,-4,-8,7,4,8,7,6,-1,7,-2,-4,2,8,-5,6,3,-9,4,10,1,7,9,1,-4,5,-1,8,7,9,-4,-6,-4,7,-2,-8,-6,-10,8,6,2,-7,-10,-10,2,-9,-4,-1,-1,-8,7,5,-1,-8,-10,1,6,7,-5,-3,6,-1,-8,-1,-3,1,7,3,2,-6,-6,4,-7,7,8,6,5,-6,-2,-3,8,-6,1,2,1,-6,5,8,-3,-3,-7,4,-10,5,7,-8,-2,-9,-6,-6,9,5,-4,-5,9,7,-10,-8,-1,-2,-2,5,-7,-7,-5,1,7,-7,10,-9,1,7,-6,2,1,-8,-6,-7,7,-7,8,-6,5,-5,5,-6,-9,8,9,5,-5,2,-7,-4,2,-7,-9,-5,-6,9,-6,8,9,3,9,7,2,-5,8,-3,3,1,5,-8,8,-2,4,10,-7,1,-10,10,-10,10,6,-10,-7,3,-9,-5,-8,-1,-9,6,-1,-4,9,-2,-8,-7,-6,-5,8,-5,1,-3,-6,-3,-5,-3,-10,-9,10,6,-4,4,9,-2,-9,5,-8,-1,3,1,5,-8,2,1,-9,-10,1,-4,5,-9,-5,-6,-3,1,-1,7,8,-10,-3,2,2,-6,8,-5,-7,7,9,9,10,-9,2,-8,1,1,-3,-7,-5,-9,-4,5,-1,5,8,1,2,3,-5,-4,-1,10,8,-10,-10,-5,3,6,-4,3,5,-2,-5,-2,-3,7,-1,-1,-4,-3,10,-9,-10,9,5,8,8,-8,-2,-3,7,1,7,-1,3,-5,6,9,8,1,-10,3,6,10,4,-5,5,2,-9,3,9,-6,2,2,-3,-3,-2,2,-10,10,-6,-6,10,-3,1,3,-3,-6,6,5,2,2,-4,4,7,-9,-8,3,3,8,-3,-7,-10,3,10,5,6,6,2,-6,-5,-1,10,-10,4,-8,-9,-5,-7,-6,8,10,9,-6,7,9,6,6,7,-10,4,-8,-2,-5,-1,7,2,-3,-3,-3,10,-4,-5,-4,-6,3,-2,-6,-2,-3,-2,10,6,-7,2,-1,4,-3,-6,3,-3,4,5,-8,-9,-10,1,-6,-5,8,-3,-4,-4,7,-5,-10,7,2,3,1,-2,4,-2,2,3,7,-9,-4,7,1,-2,-10,8,-10,-3,5,-1,1,-1,-3,5,10,-2,-8,-6,2,-3,-6,4,10,-7,3,5,-3,8,-1,-7,-10,-5,-9,7,-8,6,1,-10,-5,7,-6,3,9,7,-8,-10,7,-5,6,-10,4,8,5,-6,6,-10,6,-4,-9,-4,9,-3,1,3,-2,2,10,-1,10,5,1,-8,3,9,-3,6,8,8,-9,-7,-5,-7,10,10,-5,6,4,-2,-6,-8,-5,2,-6,-3,3,-6,-10,3,-4,2,8,7,3,-9,-10,1,3,-9,6,-4,3,-7,-6,6,3,-1,-7,-5,8,3,-10,3,8,4,5,4,1,-2,-2,-9,6,8,-6,6,-6,2,-3,-1,9,6,-3,-4,2,1,6,-10,10,8,8,2,4,2,-10,-10,-8,5,-9,-6,-6,-6,9,-5,-4,4,8,8,9,9,2,-8,-6,-2,1,5,-6,-10,-6,3,7,-2,5,-6,9,-6,5,-9,-7,5,8,-5,-10,1,-1,6,6,-4,-9,7,-6,-10,7,1,10,-1,-5,-7,3,-10,2,2,-7,1,7,-5,1,5,5,-1,3,7,8,2,2,4,2,-4,-10,-5,2,-1,7,10,-3,9,1,-5,-2,10,1,-7,-10,1,5,9,8,-10,-8,-7,9,1,5,-1,-3,8,7,-8,-8,8,-7,-3,-9,-1,3,-1,5,-4,-6,-7,10,-4,3,-3,-10,-6,-8,-3,-2,-7,2,9,8,8,-10,6,10,-6,-1,-6,10,10,-3,-6,-5,9,-8,5,-4,3,-9,6,6,-4,1,-10,4,-6,4,1,2,9,10,10,-8,-8,10,6,-5,5,-2,4,8,10,-1,-1,3,-7,-3,-7,-7,-8,8,-5,6,-9,-6,2,-3,5,-7,9,6,3,2,-2,6,8,-6,8,-2,10,-10,-3,9,6,-6,-6,-2,4,10,5,-6,3,-3,-3,8,4,-8,-8,4,-2,1,-5,-6,9,4,3,6,-9,-7,-5,-6,2,7,-10,5,3,8,1,6,-2,-3,-8,1,9,10,2,6,-1,-3,3,-10,6,-6,-4,6,-3,-10,-9,8,8,3,-7,3,1,6,-6,2,-8,8,1,5,2,-4,-6,-8,-4,4,9,7,7,-5,4,6,8,-4,-5,-4,4,-7,-2,-5,-5,6,-10,5,-10,2,-2,8,2,10,8,-6,3,5,8,10,2,-9,-2,-2,7,-10,4,-10,7,6,5,10,-7,3,-6,9,2,-2,2,-9,-8,7,-5,8,8,-7,-8,-1,3,-10,-9,-9,-9,-5,5,-10,-3,4,-6,1,-6,7,9,-9,-3,3,10,-1,5,9,-2,-4,10,4,-2,-1,7,-2,-7,-9,2,10,-6,-2,-9,-4,2,7,-7,9,7,-8,8,-9,3,-3,9,-10,6,-9,-4,7,10,7,4,7,-6,8,-4,-8,6,-5,-7,-2,-6,-10,-4,4,1,-1,9,-8,2,-8,-2,5,-10,-5,-3,1,-7,-8,8,-3,7,-3,2,1,7,10,8,9,4,-4,-10,6,6,6,-10,-2,-5,-3,-8,10,-6,7,6,3,-10,8,-1,-5,10,2,4,-7,1,-5,6,4,-4,7,9,-9,-6,8,1,8,-7,-5,4,-10,-4,6,8,4,-3,1,1,-10,9,6,-1,3,-5,-9,-10,6,1,4,3,3,-8,-7,-6,-8,5,5,8,-6,-6,-4,3,2,3,5,-3,2,-5,-8,6,-6,-10,6,10,-5,-6,-5], dtype = "int8")#candidate|4860|(1120,)|const|int8
call_4856 = relay.TupleGetItem(func_3006_call(relay.reshape(var_4857.astype('int16'), [1, 660]), relay.reshape(const_4858.astype('int16'), [14, 660]), relay.reshape(var_4859.astype('int8'), [576, 1]), relay.reshape(const_4860.astype('int8'), [1120,]), ), 4)
call_4861 = relay.TupleGetItem(func_3012_call(relay.reshape(var_4857.astype('int16'), [1, 660]), relay.reshape(const_4858.astype('int16'), [14, 660]), relay.reshape(var_4859.astype('int8'), [576, 1]), relay.reshape(const_4860.astype('int8'), [1120,]), ), 4)
func_2834_call = mod.get_global_var('func_2834')
func_2837_call = mutated_mod.get_global_var('func_2837')
var_4879 = relay.var("var_4879", dtype = "int64", shape = (6,))#candidate|4879|(6,)|var|int64
var_4880 = relay.var("var_4880", dtype = "int64", shape = (2, 72))#candidate|4880|(2, 72)|var|int64
call_4878 = relay.TupleGetItem(func_2834_call(relay.reshape(var_4879.astype('int64'), [1, 6, 1]), relay.reshape(var_4880.astype('int64'), [4, 6, 6]), ), 0)
call_4881 = relay.TupleGetItem(func_2837_call(relay.reshape(var_4879.astype('int64'), [1, 6, 1]), relay.reshape(var_4880.astype('int64'), [4, 6, 6]), ), 0)
output = relay.Tuple([bop_4852,call_4856,var_4857,const_4858,var_4859,const_4860,call_4878,var_4879,var_4880,])
output2 = relay.Tuple([bop_4855,call_4861,var_4857,const_4858,var_4859,const_4860,call_4881,var_4879,var_4880,])
func_4886 = relay.Function([var_4857,var_4859,var_4879,var_4880,], output)
mod['func_4886'] = func_4886
mod = relay.transform.InferType()(mod)
mutated_mod['func_4886'] = func_4886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4886_call = mutated_mod.get_global_var('func_4886')
var_4888 = relay.var("var_4888", dtype = "int16", shape = (660,))#candidate|4888|(660,)|var|int16
var_4889 = relay.var("var_4889", dtype = "int8", shape = (576,))#candidate|4889|(576,)|var|int8
var_4890 = relay.var("var_4890", dtype = "int64", shape = (6,))#candidate|4890|(6,)|var|int64
var_4891 = relay.var("var_4891", dtype = "int64", shape = (2, 72))#candidate|4891|(2, 72)|var|int64
call_4887 = func_4886_call(var_4888,var_4889,var_4890,var_4891,)
output = call_4887
func_4892 = relay.Function([var_4888,var_4889,var_4890,var_4891,], output)
mutated_mod['func_4892'] = func_4892
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_4908 = relay.TupleGetItem(func_4513_call(), 0)
call_4909 = relay.TupleGetItem(func_4514_call(), 0)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_4917 = func_4656_call()
call_4918 = func_4656_call()
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
const_4941 = relay.const([-7.263184,3.218487,-6.150966,5.689815,-5.328437,6.750882,-2.131134,-4.864803,-5.691384,-8.964526,8.020977,-8.181667], dtype = "float64")#candidate|4941|(12,)|const|float64
call_4940 = func_197_call(relay.reshape(const_4941.astype('float64'), [1, 12, 1]))
call_4942 = func_197_call(relay.reshape(const_4941.astype('float64'), [1, 12, 1]))
output = relay.Tuple([call_4908,call_4917,call_4940,const_4941,])
output2 = relay.Tuple([call_4909,call_4918,call_4942,const_4941,])
func_4991 = relay.Function([], output)
mod['func_4991'] = func_4991
mod = relay.transform.InferType()(mod)
mutated_mod['func_4991'] = func_4991
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4991_call = mutated_mod.get_global_var('func_4991')
call_4992 = func_4991_call()
output = call_4992
func_4993 = relay.Function([], output)
mutated_mod['func_4993'] = func_4993
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_5026 = relay.TupleGetItem(func_4386_call(), 0)
call_5027 = relay.TupleGetItem(func_4388_call(), 0)
uop_5046 = relay.cosh(call_5026.astype('float64')) # shape=(6, 4, 2)
uop_5048 = relay.cosh(call_5027.astype('float64')) # shape=(6, 4, 2)
output = relay.Tuple([uop_5046,])
output2 = relay.Tuple([uop_5048,])
func_5049 = relay.Function([], output)
mod['func_5049'] = func_5049
mod = relay.transform.InferType()(mod)
mutated_mod['func_5049'] = func_5049
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5049_call = mutated_mod.get_global_var('func_5049')
call_5050 = func_5049_call()
output = call_5050
func_5051 = relay.Function([], output)
mutated_mod['func_5051'] = func_5051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_5070 = relay.TupleGetItem(func_4513_call(), 0)
call_5071 = relay.TupleGetItem(func_4514_call(), 0)
output = relay.Tuple([call_5070,])
output2 = relay.Tuple([call_5071,])
func_5074 = relay.Function([], output)
mod['func_5074'] = func_5074
mod = relay.transform.InferType()(mod)
output = func_5074()
func_5075 = relay.Function([], output)
mutated_mod['func_5075'] = func_5075
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4360_call = mod.get_global_var('func_4360')
func_4361_call = mutated_mod.get_global_var('func_4361')
call_5081 = func_4360_call()
call_5082 = func_4360_call()
output = relay.Tuple([call_5081,])
output2 = relay.Tuple([call_5082,])
func_5127 = relay.Function([], output)
mod['func_5127'] = func_5127
mod = relay.transform.InferType()(mod)
mutated_mod['func_5127'] = func_5127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5127_call = mutated_mod.get_global_var('func_5127')
call_5128 = func_5127_call()
output = call_5128
func_5129 = relay.Function([], output)
mutated_mod['func_5129'] = func_5129
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5074_call = mod.get_global_var('func_5074')
func_5075_call = mutated_mod.get_global_var('func_5075')
call_5173 = relay.TupleGetItem(func_5074_call(), 0)
call_5174 = relay.TupleGetItem(func_5075_call(), 0)
func_3266_call = mod.get_global_var('func_3266')
func_3268_call = mutated_mod.get_global_var('func_3268')
var_5197 = relay.var("var_5197", dtype = "int8", shape = (240,))#candidate|5197|(240,)|var|int8
call_5196 = relay.TupleGetItem(func_3266_call(relay.reshape(var_5197.astype('int8'), [6, 10, 4])), 1)
call_5198 = relay.TupleGetItem(func_3268_call(relay.reshape(var_5197.astype('int8'), [6, 10, 4])), 1)
output = relay.Tuple([call_5173,call_5196,var_5197,])
output2 = relay.Tuple([call_5174,call_5198,var_5197,])
func_5201 = relay.Function([var_5197,], output)
mod['func_5201'] = func_5201
mod = relay.transform.InferType()(mod)
mutated_mod['func_5201'] = func_5201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5202 = relay.var("var_5202", dtype = "int8", shape = (240,))#candidate|5202|(240,)|var|int8
func_5201_call = mutated_mod.get_global_var('func_5201')
call_5203 = func_5201_call(var_5202)
output = call_5203
func_5204 = relay.Function([var_5202], output)
mutated_mod['func_5204'] = func_5204
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4599_call = mod.get_global_var('func_4599')
func_4601_call = mutated_mod.get_global_var('func_4601')
call_5220 = relay.TupleGetItem(func_4599_call(), 0)
call_5221 = relay.TupleGetItem(func_4601_call(), 0)
output = call_5220
output2 = call_5221
func_5222 = relay.Function([], output)
mod['func_5222'] = func_5222
mod = relay.transform.InferType()(mod)
mutated_mod['func_5222'] = func_5222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5222_call = mutated_mod.get_global_var('func_5222')
call_5223 = func_5222_call()
output = call_5223
func_5224 = relay.Function([], output)
mutated_mod['func_5224'] = func_5224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_5256 = relay.TupleGetItem(func_4386_call(), 0)
call_5257 = relay.TupleGetItem(func_4388_call(), 0)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_5259 = relay.TupleGetItem(func_4386_call(), 0)
call_5260 = relay.TupleGetItem(func_4388_call(), 0)
uop_5261 = relay.atan(call_5256.astype('float32')) # shape=(6, 4, 2)
uop_5263 = relay.atan(call_5257.astype('float32')) # shape=(6, 4, 2)
func_3711_call = mod.get_global_var('func_3711')
func_3719_call = mutated_mod.get_global_var('func_3719')
var_5303 = relay.var("var_5303", dtype = "float64", shape = (1521,))#candidate|5303|(1521,)|var|float64
var_5304 = relay.var("var_5304", dtype = "int16", shape = (660,))#candidate|5304|(660,)|var|int16
var_5305 = relay.var("var_5305", dtype = "int16", shape = (9240,))#candidate|5305|(9240,)|var|int16
var_5306 = relay.var("var_5306", dtype = "int8", shape = (576,))#candidate|5306|(576,)|var|int8
const_5307 = relay.const([4,-3,5,-5,1,1,5,-2,6,8,1,5,-10,-10,-9,-9,10,-1,6,-1,-6,-6,8,5,3,-3,3,6,5,8,-1,-8,8,6,-5,-1,-1,1,-7,7,-2,-6,8,-10,6,-6,-2,-7,-2,-6,-4,-8,-6,-6,7,-6,-2,6,2,3,-2,6,3,-6,-8,4,9,-9,-2,1,8,8,8,2,-10,10,3,-7,9,3,-6,-1,8,-4,-5,-10,10,3,-2,10,9,5,5,-10,5,-4,-10,-10,7,9,-6,-2,-6,6,1,1,5,-2,8,-5,-3,8,5,2,-1,-1,9,-5,2,5,7,-1,-4,3,5,8,8,-3,-3,5,7,1,3,3,9,-7,3,-1,3,10,-1,-5,-4,3,5,-1,8,-8,-10,-6,-8,5,3,10,-9,3,1,-10,8,2,3,-6,5,-2,7,-4,-3,8,-7,1,3,6,5,8,-1,-7,-4,-3,-10,-4,3,2,8,-1,2,-1,-9,8,-4,7,7,-8,-8,-9,-8,-5,-4,-6,-1,-7,2,-6,4,-4,10,-2,5,7,-2,4,-1,10,10,-8,-6,3,-1,-10,-5,-1,-6,-2,-2,-6,5,-4,-1,-2,10,-9,4,-6,-3,10,-9,-10,6,5,1,4,-9,2,3,-10,-5,3,3,6,4,-1,-9,-7,5,6,-1,-9,1,2,-7,-10,3,2,1,-1,4,-7,5,1,-5,-5,7,1,-9,-5,5,-9,-9,4,8,6,-7,6,-6,-3,4,-9,6,-1,3,1,1,8,-8,-1,-10,-10,-7,-1,3,-8,-6,8,-9,6,6,1,7,9,-6,4,5,-4,-10,7,-3,-8,4,-10,6,-4,-5,-10,-6,10,9,-9,7,7,8,-9,-1,-9,-5,-5,-9,5,-3,8,4,-3,-1,-7,6,6,-10,-7,5,7,7,3,2,-9,3,-6,5,-1,-4,9,-2,3,1,4,-6,-8,-2,6,-8,-9,-4,7,-6,10,-7,-9,-3,3,-2,1,-8,10,9,4,-5,-8,1,10,6,-9,-6,-1,3,-4,1,-5,-6,8,3,5,-6,6,-8,7,6,-6,4,-3,1,2,-5,-10,-1,10,-10,-3,6,4,-8,8,6,-8,1,-5,-1,6,-3,-10,-3,-10,3,-9,-3,-5,-5,6,-8,2,-8,-6,4,-6,6,-1,6,2,-5,10,-6,-10,9,4,2,1,-3,-10,6,-5,-4,3,-8,-1,6,2,8,6,-9,7,6,-5,4,9,-3,-4,1,-9,2,3,-3,1,8,-1,8,2,7,-7,3,2,-10,-3,6,3,3,-6,-2,10,-4,1,-8,-10,-10,-7,-2,-7,7,-5,-3,1,-6,-2,3,10,-2,1,-2,8,-7,5,6,-2,-1,8,-5,9,3,10,5,5,-9,-1,7,-4,-4,4,8,-5,-10,4,1,7,-9,1,-6,-3,-5,7,4,6,10,-10,-3,9,7,1,1,3,6,3,-2,-9,3,-9,-7,6,5,6,-8,-3,2,-2,-5,-10,1,-5,2,-10,-9,-1,-3,4,1,-8,-8,-6,9,1,5,7,7,-8,5,3,8,10,2,-1,-5,4,4,-4,-7,8,-8,-9,8,-3,7,9,-1,9,5,6,1,-5,-7,-9,-6,8,2,9,5,5,10,-7,2,-4,-8,-9,10,3,3,-4,8,2,-9,2,-7,-8,-10,7,3,-9,2,9,3,9,-3,-6,-7,3,-1,10,1,-4,2,-2,-3,-5,10,8,3,9,2,-9,4,-5,-6,-3,-2,5,-8,-9,10,7,8,-1,-5,-9,6,4,-9,-4,-3,-1,4,10,-4,5,3,-2,-7,3,3,-9,-9,8,-3,2,-9,-2,8,-7,9,6,1,-6,-1,2,-1,5,-5,10,5,-3,-5,-9,5,5,5,-9,-9,9,-3,6,-4,-4,1,-7,5,3,7,5,8,-9,3,-3,4,-2,5,-1,-6,7,10,-8,-6,-5,2,6,-1,-5,4,5,-2,-6,-5,-3,3,-2,6,10,-8,-6,6,-2,-8,9,7,-1,-1,5,6,-8,-9,-4,8,-8,8,9,-7,-10,10,-8,-3,5,10,1,7,4,10,3,-1,-6,-5,4,-10,9,-4,-8,-8,1,2,-3,-1,-8,-5,1,-10,-9,-6,8,-9,-5,-4,10,-5,-1,4,9,-10,-6,-6,3,4,2,6,3,7,-10,10,-2,-2,-5,6,10,10,1,3,-5,-7,-6,-9,10,-8,6,10,-6,-2,7,-4,1,4,-4,-7,1,-8,-9,-7,-4,9,2,9,-10,-8,8,-5,-8,3,6,-2,6,-6,-8,3,-6,1,10,8,10,10,-8,9,5,-7,-1,-8,9,-1,-6,9,5,-2,10,8,3,-8,-4,-8,-8,-10,6,-8,-1,-1,1,9,-10,4,10,-9,-1,-8,3,-6,1,-2,3,1,8,2,-4,9,3,-3,7,-10,7,3,-1,3,-4,-8,-6,2,-3,-5,-7,-2,-10,-5,-4,-5,-10,3,9,5,4,2,-4,-5,-9,7,-7,-6,1,3,-6,-8,-7,2,-8,1,2,-1,-8,-5,-7,4,-1,-10,-4,8,9,8,7,-4,-9,-7,8,7,-4,-2,-7,4,9,-10,9,2,-6,-6,4,-9,4,-2,-6,8,-1,1,-9,6,3,10,6,9,-6,-6,-6,-1,-5,-5,-4,-10,-5,5,-10,-1,-6,4,-7,-5,-8,3,-10,-6,-9,-5,-4,-8,-6,5,1,-8,9,3,4,8,1,-8,6,-5,7,-6,4,9,6,-7,-2,-5,6,-6,6,-6,7,-9,10,-8,3,-7,9,-7,2,1,9,-4,4,9,7,-8,-9,-7,-2,-5,10,-1,8,3,2,-3,-2,9,-8,-9,-4,-9,-5,-2,-1,1,9,-2,2,8,-1,-6,-9,-2,-3,-1,-7,10,7,8,-10,-1,1,-9,-1,8,7,7,-10,2,8,-10,4,-7,-3,10,4,-4,7,9,-8], dtype = "int8")#candidate|5307|(1120,)|const|int8
call_5302 = relay.TupleGetItem(func_3711_call(relay.reshape(var_5303.astype('float64'), [13, 13, 9]), relay.reshape(var_5304.astype('int16'), [660,]), relay.reshape(var_5305.astype('int16'), [9240,]), relay.reshape(var_5306.astype('int8'), [288, 2]), relay.reshape(const_5307.astype('int8'), [1120,]), relay.reshape(var_5303.astype('float64'), [13, 13, 9]), ), 6)
call_5308 = relay.TupleGetItem(func_3719_call(relay.reshape(var_5303.astype('float64'), [13, 13, 9]), relay.reshape(var_5304.astype('int16'), [660,]), relay.reshape(var_5305.astype('int16'), [9240,]), relay.reshape(var_5306.astype('int8'), [288, 2]), relay.reshape(const_5307.astype('int8'), [1120,]), relay.reshape(var_5303.astype('float64'), [13, 13, 9]), ), 6)
func_1534_call = mod.get_global_var('func_1534')
func_1537_call = mutated_mod.get_global_var('func_1537')
var_5312 = relay.var("var_5312", dtype = "float64", shape = (90,))#candidate|5312|(90,)|var|float64
call_5311 = func_1534_call(relay.reshape(var_5312.astype('float64'), [15, 3, 2]))
call_5313 = func_1534_call(relay.reshape(var_5312.astype('float64'), [15, 3, 2]))
const_5316 = relay.const([[[9.217787,-8.071142],[5.466458,-8.228672],[0.686003,0.566310],[7.894270,9.067065]],[[5.916047,1.122159],[1.870872,5.464176],[-2.750289,-1.925267],[2.751449,-4.961076]],[[2.980232,-7.119065],[-7.231511,0.349453],[-0.723028,5.887116],[9.217223,-4.891771]],[[-9.896492,-0.981127],[2.355145,5.508378],[-1.481722,8.608574],[1.160997,-8.438556]],[[-9.206598,2.446187],[6.047539,-9.806495],[9.545855,8.791994],[2.463684,-0.639184]],[[-3.397939,6.558850],[-8.133618,5.705532],[6.194597,0.854322],[-6.719224,1.140973]]], dtype = "float32")#candidate|5316|(6, 4, 2)|const|float32
bop_5317 = relay.less(uop_5261.astype('bool'), relay.reshape(const_5316.astype('bool'), relay.shape_of(uop_5261))) # shape=(6, 4, 2)
bop_5320 = relay.less(uop_5263.astype('bool'), relay.reshape(const_5316.astype('bool'), relay.shape_of(uop_5263))) # shape=(6, 4, 2)
output = relay.Tuple([call_5259,call_5302,var_5303,var_5304,var_5305,var_5306,const_5307,call_5311,var_5312,bop_5317,])
output2 = relay.Tuple([call_5260,call_5308,var_5303,var_5304,var_5305,var_5306,const_5307,call_5313,var_5312,bop_5320,])
func_5356 = relay.Function([var_5303,var_5304,var_5305,var_5306,var_5312,], output)
mod['func_5356'] = func_5356
mod = relay.transform.InferType()(mod)
mutated_mod['func_5356'] = func_5356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5356_call = mutated_mod.get_global_var('func_5356')
var_5358 = relay.var("var_5358", dtype = "float64", shape = (1521,))#candidate|5358|(1521,)|var|float64
var_5359 = relay.var("var_5359", dtype = "int16", shape = (660,))#candidate|5359|(660,)|var|int16
var_5360 = relay.var("var_5360", dtype = "int16", shape = (9240,))#candidate|5360|(9240,)|var|int16
var_5361 = relay.var("var_5361", dtype = "int8", shape = (576,))#candidate|5361|(576,)|var|int8
var_5362 = relay.var("var_5362", dtype = "float64", shape = (90,))#candidate|5362|(90,)|var|float64
call_5357 = func_5356_call(var_5358,var_5359,var_5360,var_5361,var_5362,)
output = call_5357
func_5363 = relay.Function([var_5358,var_5359,var_5360,var_5361,var_5362,], output)
mutated_mod['func_5363'] = func_5363
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5510 = relay.const([[[-8.786625,9.241176,-5.925395,8.257530,-8.978092,7.559156,2.053962,-3.413647,-6.528316,9.248725]],[[-8.570272,9.920064,-1.406067,-6.421024,6.420422,9.864664,0.610374,7.231979,6.778362,-5.260040]],[[-2.261602,4.471767,-6.139982,5.752310,-5.202356,-2.418256,-5.135032,5.653659,-5.007924,-1.385612]],[[3.640966,5.873223,-3.901790,-3.588634,3.116767,2.906888,-5.406327,-7.790314,9.528212,-3.435023]],[[-7.579343,-6.698548,-3.960503,-4.396847,5.836115,-7.434591,-1.417629,9.862951,-0.040524,-8.674989]],[[1.787125,6.716066,-2.712800,-1.853813,0.432604,6.632070,2.920884,9.797562,9.818738,3.047812]],[[-0.952630,3.350372,6.221820,1.416388,-3.246932,-5.129367,4.312451,8.406149,0.266023,2.752319]],[[-1.251363,-2.668020,-7.362516,8.813850,2.014266,-4.115298,-0.925696,-9.489652,8.827656,-5.137915]],[[8.654609,9.074353,-2.089328,-9.824873,-2.499663,3.781132,-9.227177,-9.233018,7.815170,-7.680531]],[[-4.466447,-6.275605,-9.167979,6.933373,-8.728135,7.768326,-8.815534,-4.356164,-0.467936,-9.871524]]], dtype = "float64")#candidate|5510|(10, 1, 10)|const|float64
uop_5511 = relay.atan(const_5510.astype('float64')) # shape=(10, 1, 10)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
const_5523 = relay.const([-7.122988,7.820367,-8.348967,1.729785,-3.525927,4.688998,-9.521079,-7.488070,-6.692095,3.226764,-6.991208,8.630078], dtype = "float64")#candidate|5523|(12,)|const|float64
call_5522 = func_197_call(relay.reshape(const_5523.astype('float64'), [1, 12, 1]))
call_5524 = func_197_call(relay.reshape(const_5523.astype('float64'), [1, 12, 1]))
output = relay.Tuple([uop_5511,call_5522,const_5523,])
output2 = relay.Tuple([uop_5511,call_5524,const_5523,])
func_5535 = relay.Function([], output)
mod['func_5535'] = func_5535
mod = relay.transform.InferType()(mod)
mutated_mod['func_5535'] = func_5535
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5535_call = mutated_mod.get_global_var('func_5535')
call_5536 = func_5535_call()
output = call_5536
func_5537 = relay.Function([], output)
mutated_mod['func_5537'] = func_5537
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5549 = relay.const([[[-1,-10,-1,-6,-6],[-8,-7,5,8,8],[-6,7,-7,-5,6],[-4,-5,3,-9,-2],[-8,-9,5,4,10],[5,-4,-10,-9,-8],[4,-4,-8,-7,-4],[3,9,-8,4,10],[-5,-9,-7,1,-5]],[[3,-3,-8,-1,-10],[-6,-8,3,-1,-7],[2,-8,-2,2,-1],[4,-8,-10,-6,3],[-10,8,-6,-6,-9],[-2,7,-4,4,-2],[-6,-10,3,-3,3],[-6,-7,-2,7,-1],[-3,9,-2,-8,-2]],[[-3,9,3,5,3],[-5,2,-3,-6,4],[-9,10,-4,-3,-1],[5,3,9,-5,5],[-4,-7,2,-3,-2],[-6,2,9,10,-10],[-8,9,6,9,-4],[-9,5,-7,6,3],[-6,9,7,-6,1]],[[-10,-9,-10,8,-8],[6,-3,3,-7,-1],[-7,1,7,-3,5],[-8,-4,-5,-6,6],[5,1,-4,-7,3],[3,-5,5,4,-6],[5,5,3,-2,3],[10,3,-6,-6,-7],[-3,9,9,-1,-6]],[[-2,-10,-8,7,1],[1,7,-5,-10,8],[-9,10,-8,-6,9],[-5,-2,-8,-10,-2],[4,-2,-5,6,7],[-3,-2,8,3,10],[-5,5,-1,-10,9],[-10,3,-5,-9,6],[-2,4,-3,5,-6]],[[7,1,-1,-4,-1],[-2,5,-5,6,1],[9,10,-9,-8,6],[-1,-9,5,-5,2],[-4,-9,10,1,-7],[7,-6,-1,-9,-9],[-5,7,3,4,5],[-5,8,7,-7,5],[1,-10,-8,-1,-2]],[[-1,-1,10,4,-3],[8,7,-2,-6,-3],[3,-3,-10,-7,-10],[-1,5,3,9,7],[-6,2,5,-6,-4],[-3,4,1,-9,-6],[7,-9,-1,-8,-10],[4,2,-9,-1,7],[5,-4,6,-4,-4]],[[-3,8,-3,-6,1],[6,4,-1,-6,-8],[-10,4,4,9,-6],[-8,4,-3,-5,8],[5,-1,-3,-1,-7],[-3,-2,8,7,-3],[10,2,-7,3,-3],[8,-8,-8,1,9],[8,2,-8,-7,-2]],[[6,4,-8,-2,-3],[-5,-5,-9,-3,10],[-8,-3,-8,3,-6],[6,6,1,-10,-8],[-7,5,-3,3,-5],[-7,3,5,3,-5],[-2,-10,-2,6,-5],[7,5,-4,-8,-6],[1,-6,-5,6,-9]],[[-6,3,-3,8,-8],[-4,-5,-7,-1,7],[8,1,2,6,-6],[10,-8,-10,9,2],[3,2,-7,6,-6],[5,2,-9,-6,4],[-2,5,-9,-2,-3],[6,2,-3,-9,-9],[3,-10,-4,1,5]],[[-1,10,-8,-1,7],[-7,-1,3,8,-4],[-8,10,3,-8,-3],[10,2,10,-8,2],[-4,-8,-8,10,2],[4,2,-7,-10,-9],[-10,9,-8,-3,9],[-2,6,9,-3,-1],[-4,5,9,-2,9]],[[-1,10,-10,-8,-5],[-10,-1,8,-10,10],[6,-4,-9,6,-3],[-3,-3,-6,-3,10],[3,-6,-4,-6,-7],[-6,10,5,5,3],[8,4,-10,8,5],[3,6,2,-6,-6],[5,-6,-2,-4,-4]],[[-6,-4,-6,3,10],[-2,7,2,9,10],[-9,-7,-9,7,9],[2,-4,8,-1,-5],[-10,-3,4,8,3],[1,2,8,1,7],[-5,-5,-7,2,-3],[-10,2,2,9,1],[10,6,2,-5,7]],[[2,3,4,10,8],[1,-10,1,2,2],[6,7,-3,-5,-3],[2,-6,-5,-7,-6],[-10,-4,3,2,7],[-9,5,-4,9,9],[-2,9,8,-10,-9],[-9,-7,-9,8,6],[-7,-8,-4,-3,10]]], dtype = "int64")#candidate|5549|(14, 9, 5)|const|int64
var_5550 = relay.var("var_5550", dtype = "int64", shape = (14, 9, 5))#candidate|5550|(14, 9, 5)|var|int64
bop_5551 = relay.greater(const_5549.astype('bool'), relay.reshape(var_5550.astype('bool'), relay.shape_of(const_5549))) # shape=(14, 9, 5)
output = relay.Tuple([bop_5551,])
output2 = relay.Tuple([bop_5551,])
func_5557 = relay.Function([var_5550,], output)
mod['func_5557'] = func_5557
mod = relay.transform.InferType()(mod)
mutated_mod['func_5557'] = func_5557
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5558 = relay.var("var_5558", dtype = "int64", shape = (14, 9, 5))#candidate|5558|(14, 9, 5)|var|int64
func_5557_call = mutated_mod.get_global_var('func_5557')
call_5559 = func_5557_call(var_5558)
output = call_5559
func_5560 = relay.Function([var_5558], output)
mutated_mod['func_5560'] = func_5560
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5049_call = mod.get_global_var('func_5049')
func_5051_call = mutated_mod.get_global_var('func_5051')
call_5562 = relay.TupleGetItem(func_5049_call(), 0)
call_5563 = relay.TupleGetItem(func_5051_call(), 0)
output = call_5562
output2 = call_5563
func_5564 = relay.Function([], output)
mod['func_5564'] = func_5564
mod = relay.transform.InferType()(mod)
output = func_5564()
func_5565 = relay.Function([], output)
mutated_mod['func_5565'] = func_5565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_5639 = relay.TupleGetItem(func_4991_call(), 3)
call_5640 = relay.TupleGetItem(func_4993_call(), 3)
output = relay.Tuple([call_5639,])
output2 = relay.Tuple([call_5640,])
func_5651 = relay.Function([], output)
mod['func_5651'] = func_5651
mod = relay.transform.InferType()(mod)
mutated_mod['func_5651'] = func_5651
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5651_call = mutated_mod.get_global_var('func_5651')
call_5652 = func_5651_call()
output = call_5652
func_5653 = relay.Function([], output)
mutated_mod['func_5653'] = func_5653
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4360_call = mod.get_global_var('func_4360')
func_4361_call = mutated_mod.get_global_var('func_4361')
call_5657 = func_4360_call()
call_5658 = func_4360_call()
output = call_5657
output2 = call_5658
func_5666 = relay.Function([], output)
mod['func_5666'] = func_5666
mod = relay.transform.InferType()(mod)
output = func_5666()
func_5667 = relay.Function([], output)
mutated_mod['func_5667'] = func_5667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_5682 = func_4656_call()
call_5683 = func_4656_call()
func_2428_call = mod.get_global_var('func_2428')
func_2430_call = mutated_mod.get_global_var('func_2430')
var_5705 = relay.var("var_5705", dtype = "int16", shape = (330, 2))#candidate|5705|(330, 2)|var|int16
call_5704 = relay.TupleGetItem(func_2428_call(relay.reshape(var_5705.astype('int16'), [5, 132])), 1)
call_5706 = relay.TupleGetItem(func_2430_call(relay.reshape(var_5705.astype('int16'), [5, 132])), 1)
func_1154_call = mod.get_global_var('func_1154')
func_1156_call = mutated_mod.get_global_var('func_1156')
const_5730 = relay.const([False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False], dtype = "bool")#candidate|5730|(160,)|const|bool
call_5729 = func_1154_call(relay.reshape(const_5730.astype('bool'), [5, 16, 2]))
call_5731 = func_1154_call(relay.reshape(const_5730.astype('bool'), [5, 16, 2]))
output = relay.Tuple([call_5682,call_5704,var_5705,call_5729,const_5730,])
output2 = relay.Tuple([call_5683,call_5706,var_5705,call_5731,const_5730,])
func_5732 = relay.Function([var_5705,], output)
mod['func_5732'] = func_5732
mod = relay.transform.InferType()(mod)
mutated_mod['func_5732'] = func_5732
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5733 = relay.var("var_5733", dtype = "int16", shape = (330, 2))#candidate|5733|(330, 2)|var|int16
func_5732_call = mutated_mod.get_global_var('func_5732')
call_5734 = func_5732_call(var_5733)
output = call_5734
func_5735 = relay.Function([var_5733], output)
mutated_mod['func_5735'] = func_5735
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_5768 = func_4656_call()
call_5769 = func_4656_call()
output = call_5768
output2 = call_5769
func_5774 = relay.Function([], output)
mod['func_5774'] = func_5774
mod = relay.transform.InferType()(mod)
mutated_mod['func_5774'] = func_5774
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5774_call = mutated_mod.get_global_var('func_5774')
call_5775 = func_5774_call()
output = call_5775
func_5776 = relay.Function([], output)
mutated_mod['func_5776'] = func_5776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5222_call = mod.get_global_var('func_5222')
func_5224_call = mutated_mod.get_global_var('func_5224')
call_5851 = func_5222_call()
call_5852 = func_5222_call()
output = call_5851
output2 = call_5852
func_5853 = relay.Function([], output)
mod['func_5853'] = func_5853
mod = relay.transform.InferType()(mod)
mutated_mod['func_5853'] = func_5853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mutated_mod.get_global_var('func_5853')
call_5854 = func_5853_call()
output = call_5854
func_5855 = relay.Function([], output)
mutated_mod['func_5855'] = func_5855
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_5874 = relay.TupleGetItem(func_4513_call(), 0)
call_5875 = relay.TupleGetItem(func_4514_call(), 0)
var_5877 = relay.var("var_5877", dtype = "bool", shape = (6, 4, 2))#candidate|5877|(6, 4, 2)|var|bool
bop_5878 = relay.bitwise_or(call_5874.astype('int16'), relay.reshape(var_5877.astype('int16'), relay.shape_of(call_5874))) # shape=(6, 4, 2)
bop_5881 = relay.bitwise_or(call_5875.astype('int16'), relay.reshape(var_5877.astype('int16'), relay.shape_of(call_5875))) # shape=(6, 4, 2)
output = bop_5878
output2 = bop_5881
func_5886 = relay.Function([var_5877,], output)
mod['func_5886'] = func_5886
mod = relay.transform.InferType()(mod)
mutated_mod['func_5886'] = func_5886
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5887 = relay.var("var_5887", dtype = "bool", shape = (6, 4, 2))#candidate|5887|(6, 4, 2)|var|bool
func_5886_call = mutated_mod.get_global_var('func_5886')
call_5888 = func_5886_call(var_5887)
output = call_5888
func_5889 = relay.Function([var_5887], output)
mutated_mod['func_5889'] = func_5889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_5929 = func_5853_call()
call_5930 = func_5853_call()
var_5934 = relay.var("var_5934", dtype = "float32", shape = (6, 4, 2))#candidate|5934|(6, 4, 2)|var|float32
bop_5935 = relay.subtract(call_5929.astype('int16'), relay.reshape(var_5934.astype('int16'), relay.shape_of(call_5929))) # shape=(6, 4, 2)
bop_5938 = relay.subtract(call_5930.astype('int16'), relay.reshape(var_5934.astype('int16'), relay.shape_of(call_5930))) # shape=(6, 4, 2)
output = bop_5935
output2 = bop_5938
func_5946 = relay.Function([var_5934,], output)
mod['func_5946'] = func_5946
mod = relay.transform.InferType()(mod)
mutated_mod['func_5946'] = func_5946
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5947 = relay.var("var_5947", dtype = "float32", shape = (6, 4, 2))#candidate|5947|(6, 4, 2)|var|float32
func_5946_call = mutated_mod.get_global_var('func_5946')
call_5948 = func_5946_call(var_5947)
output = call_5948
func_5949 = relay.Function([var_5947], output)
mutated_mod['func_5949'] = func_5949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5127_call = mod.get_global_var('func_5127')
func_5129_call = mutated_mod.get_global_var('func_5129')
call_5954 = relay.TupleGetItem(func_5127_call(), 0)
call_5955 = relay.TupleGetItem(func_5129_call(), 0)
func_1209_call = mod.get_global_var('func_1209')
func_1212_call = mutated_mod.get_global_var('func_1212')
const_5963 = relay.const(-9, dtype = "uint64")#candidate|5963|()|const|uint64
const_5964 = relay.const([[9,4,-4,4,-6,-2,5,5,-6,6,3,3],[10,6,1,2,2,7,-2,1,8,-2,-3,2],[-2,-3,10,10,3,5,-2,3,-4,9,1,-6],[1,-4,7,-6,-4,5,-6,-5,-3,-4,-7,10],[-9,-9,-6,1,-3,4,1,-8,-8,1,1,4],[6,8,6,7,6,-6,-1,2,2,-3,-7,-1],[7,10,6,10,3,-7,8,4,2,-8,7,-8],[-7,5,3,10,6,7,-5,5,-7,-7,-8,10],[-3,2,10,10,-2,-1,10,4,1,-9,-8,-4],[-7,-1,6,-5,-2,8,1,-1,-4,6,4,-2],[-1,3,5,6,2,9,1,-6,4,-6,5,-6],[10,5,-3,-2,5,-4,5,-4,-7,5,-6,-2],[-7,5,-6,1,2,1,-2,-10,10,-9,3,-4],[-6,-10,-1,3,1,-2,-7,-2,-10,4,7,10],[9,-2,3,-5,-4,1,7,5,-2,-4,1,-9],[10,2,-9,-7,-2,-3,7,-3,-4,8,8,1],[2,10,1,6,-7,3,3,-6,-10,-1,8,-10],[8,-4,-5,8,-10,3,-2,-7,1,6,-9,-10],[-1,8,5,-2,9,-3,2,-2,-2,6,-7,-2],[2,-2,-10,3,-5,1,-10,5,8,4,9,-4],[4,-6,2,9,6,8,6,-9,2,-3,2,4],[5,-2,5,-7,6,9,-1,-6,2,5,7,10],[-4,4,10,8,5,4,-7,-8,-6,3,-7,-6],[-4,6,-5,-1,-1,6,4,-1,-5,-10,5,5],[4,9,-10,-10,-6,-6,-5,1,-3,-7,1,5],[-2,6,2,9,3,9,4,8,8,-10,-2,-8],[8,-1,5,4,-2,7,6,-1,-5,-10,10,9],[-1,-10,2,7,7,-10,5,-2,-6,2,4,-9],[-4,5,7,3,-3,-9,2,6,6,-4,9,8],[2,7,3,-4,-5,10,-5,7,5,4,4,9],[-5,10,8,9,-8,-7,-2,-8,1,8,1,5],[-3,-7,10,-6,-10,9,4,9,4,-5,-6,3],[10,-5,-9,9,3,1,-4,8,-3,2,-7,-1],[7,-9,-8,-4,6,-1,2,-6,-8,8,-6,-3],[-5,6,8,-3,3,9,6,10,-3,-4,-3,-7],[9,-10,-4,-4,2,1,9,-4,-7,4,4,-3],[4,-9,-2,-7,-4,6,2,6,-1,-3,-10,3],[-7,1,10,8,3,-1,8,6,5,-9,-3,10],[-2,4,-9,1,1,-9,6,-5,7,-4,1,6],[-3,2,9,-1,6,-5,10,3,6,2,-9,2],[2,10,7,9,10,7,-7,2,-2,10,-1,-5],[5,10,4,-10,10,-10,-4,9,2,5,4,3],[-6,-2,-8,-5,-4,-6,1,-7,-6,7,9,7],[-4,1,2,6,8,5,4,-8,-9,1,2,10],[-8,-9,-5,-8,-1,-8,4,-10,-3,10,-7,8],[-5,-5,-8,7,1,10,-6,-6,-7,7,10,6],[4,-3,-6,-8,-1,-2,-9,-4,6,-8,-2,9],[-1,-3,-6,6,-4,-3,-1,3,-6,-10,3,5],[8,6,-10,-1,1,-3,2,-7,10,9,10,5],[9,1,1,-5,-1,-9,4,-3,-4,2,-6,4],[-6,7,-9,2,-8,-1,-8,8,-7,-2,8,8],[10,2,8,1,-1,9,-9,-7,3,7,-6,1],[-5,6,8,9,-3,-3,-5,4,1,5,4,10],[-1,9,4,-1,-4,-4,1,10,2,-7,-6,-6],[-6,-10,4,8,-8,3,8,3,-2,-2,-10,-1],[6,3,8,-10,10,-5,-1,-10,-9,-1,8,8],[-10,-7,3,-7,3,-10,9,5,1,4,4,-8],[-8,9,2,-7,8,-5,1,9,-9,-7,10,-8],[4,2,5,-1,9,-10,-9,-3,3,9,7,-8],[-8,7,-6,8,4,-8,-8,-3,-2,7,-9,10],[10,6,9,6,-8,3,7,-6,9,-1,4,5],[-4,-9,5,-5,-1,2,4,5,-10,-5,-10,-9],[6,10,-3,-8,-9,2,-6,-9,-7,-7,1,-4],[-2,10,-2,3,-9,6,7,-1,-10,-2,-9,5],[4,-8,6,7,-2,10,-8,-10,7,10,-1,-2],[-3,9,-5,-9,-8,5,-10,-4,3,-4,8,-9],[1,10,-2,3,7,7,-10,-3,3,4,4,6],[1,-8,6,-3,1,-1,4,-8,9,4,-4,-8],[7,-2,10,-8,-10,10,-8,-6,-6,1,10,2],[-7,-9,-3,7,10,3,-9,-3,-9,-8,-7,7],[-9,3,8,-1,2,-5,6,7,3,-6,-10,3],[1,10,4,-1,-6,6,-10,10,-6,8,-8,8],[2,-6,-2,-6,8,10,3,-7,-6,2,10,9],[-8,-10,2,2,1,-8,4,-7,-10,-4,-2,2],[6,5,8,1,-1,-6,10,-8,-3,5,2,2],[3,-5,-9,-3,10,10,-2,-6,4,7,-10,-5],[3,2,4,-5,10,-1,6,-3,-2,4,3,-10],[-2,9,3,-4,-3,-10,-10,3,-7,-10,-8,9],[3,-5,-5,-3,3,-10,-5,-3,-3,-5,-7,7],[-5,-7,8,-7,1,-7,-9,5,2,8,-4,-6],[-3,-3,3,4,-5,-3,7,5,-3,4,5,-4],[9,-4,5,3,5,10,-4,-6,-7,3,8,-2],[4,-3,-7,6,2,-10,-4,-7,-9,-4,3,-3],[10,4,7,9,2,-10,10,7,-8,9,2,-10],[4,5,6,6,7,4,-6,5,6,8,-1,-9],[6,10,5,8,-6,5,-2,-7,-2,2,5,-5],[3,8,10,1,-7,-3,-5,-4,-5,-4,-1,-7],[4,-3,7,10,3,1,9,-7,-7,1,-1,-2],[3,5,-6,8,-10,-7,-9,6,-6,5,-1,2],[-3,7,-7,2,2,5,-8,6,-4,-6,1,-6],[10,-2,4,-8,-8,-4,-3,-8,-4,5,-6,1],[-5,6,10,4,-3,-1,-2,-7,4,-9,8,2],[-10,3,7,7,-2,9,-5,1,7,7,1,-2],[-3,-1,-8,-2,-9,4,10,9,4,-5,-1,7],[8,-9,-7,-3,-4,1,9,-10,-8,-6,6,10],[5,3,2,6,-3,1,6,10,10,1,3,-8]], dtype = "uint64")#candidate|5964|(96, 12)|const|uint64
call_5962 = relay.TupleGetItem(func_1209_call(relay.reshape(const_5963.astype('uint64'), []), relay.reshape(const_5964.astype('uint64'), [8, 16, 9]), ), 0)
call_5965 = relay.TupleGetItem(func_1212_call(relay.reshape(const_5963.astype('uint64'), []), relay.reshape(const_5964.astype('uint64'), [8, 16, 9]), ), 0)
var_5969 = relay.var("var_5969", dtype = "uint64", shape = (96, 12))#candidate|5969|(96, 12)|var|uint64
bop_5970 = relay.minimum(const_5964.astype('uint64'), relay.reshape(var_5969.astype('uint64'), relay.shape_of(const_5964))) # shape=(96, 12)
func_2682_call = mod.get_global_var('func_2682')
func_2688_call = mutated_mod.get_global_var('func_2688')
const_5974 = relay.const([9,-3,7,8,2,-1,-5,7,2,1,-10,9,5,5,-2,8,10,-6,9,-3,4,-10,-1,-2,4,-2,6,6,-5,-5,-3,-10,4,10,-2,4,8,-4,2,-3,9,3,-9,1,9,-2,-8,-5,-8,8,9,5,-6,8,5,6,-7,1,7,-1,-7,1,3,10,3,1,-9,-1,5,5,-1,6,-8,-5,9,3,8,1,-10,-3,8,4,2,2,-3,7,-8,3,2,-2,5,-6,9,-6,-8,-1,5,-4,9,4,5,-7,8,10,7,8,-7,-6,-4,5,-1,10,10,-5,-2,-2,-2,-9,-8,-10,-10,8,5,-4,-4,2,-5,-3,8,3,-9,-8,-3,-3,7,5,-2,-7,-5,-7,-1,-6,3,9,-9,3,9,-9,8,3,-5,-5,3,3,2,-9,-1,7,-6,7,-3,3,2,6,4,-5,10,-4,-1,-1,9,4,-4,-3,-1,4,-9,-6,9,-10,1,-1,-7,-4,-6,-9,-4,4,-6,-6,7,9,-9,8,-6,10,-6,-8,8,9,-6,8,1,-6,8,6,-4,-3,1,-10,8,4,-2,6,4,-5,-2,-10,6,-2,10,10,-2,-6,4,9,7,-7,6,1,7,-2,-1,-3,-8,1,-4,1,-6,10,2,-2,-5,-6,-10,-2,-4,-5,-7,-2,-5,3,6,5,9,-9,-5,8,8,2,4,5,8,-3,-10,10,-7,-5,4,-2,5,4,2,1,-9,-10,-7,-8,-6,-10,7,-4,-2,7,8,9,-3,-7,-6,-7,-3,7,-3,-5,-8,-7,-4,9,-9,1,10,-5,4,9,2,6,-2,-3,10,6,-2,4,4,-1,-2,2,-2,-6,-1,-6,-1,-6,5,-10,9,2,-8,9,-2,7,-5,-7,-8,-3,7,1,4,-1,-7,4,6,7,-4,6,-9,1,3,-10,2,1,-5,-5,8,-7,-6,10,9,-8,6,-1,8,-10,4,4,-5,3,-7,-10,6,-9,10,-6,1,-4,-7,-3,-10,8,2,8,-6,9,1,6,9,-10,9,10,10,-6,-2,4,1,-4,1,-2,4,10,-3,3,-4,-2,10,2,9,-9,-6,-1,-4,-9,8,3,3,7,2,7,-2,-10,3,4,-1,-1,9,-3,8,9,-3,9,-8,1,6,-9,-7,3,-2,-9,4,-7,3,-6,-3,-8,9,-2,4,8,-9,8,-5,-5,-10,7,6,6,5,-2,-5,5,-10,3,-8,3,6,-3,-4,8,-5,-7,1,2,-5,4,-7,-6,-6,10,-7,-1,-6,-6,5,4,10,-10,-7,7,-7,2,2,2,4,-1,-4,-6,9,1,-5,-3,-8,-6,-5,5,-5,-7,-2,6,10,-8,2,-7,3,4,-2,-3,-9,-3,3,8,4,7,-2,-3,4,7,5,-6,1,-8,-6,3,-1,2,6,-4,-3,8,5,10,-5,7,2,-10,-5,5,-3,-1,-7,-10,2,1,4,5,-3,1,1,-7,3,-5,8,-4,-10,-5,7,-8,-7,6,-2,-3,3,2,3,-6,-9,-7,-1,-7,-3,8,8,-8,-8,-8,-3,-3,4,2,-7,4,-9,2,-1,3,-3,-7,-10,6,9,-8,5,-3,-9,6,3,-1,-2,-4,-3,-10,-9,-7,-2,-7,-9,5,6,-2,-3,10,-10,-8,-5,-9,1,-9,6,9,1,1,1,-5,-6,-10,7,2,-3,2,-5,8,-2,-6,3,8,-3,5,7,-9,-6,9,-10,-1,-3,3,-5,4,10,-6,9,-8,-5,4,-4,2,-3,5,5,-6,-10,8,10,3,-4,-2,4,-5,4,8,2,9,-4,1,-10,-8,8,6,-8,9,-7,-6,2,8,1,-5,8,10,-8,-1,-10,7,-5,-5,1,6,6,8,1,5,4,5,-3,5,-6,8,-7,3,9,2,1,-7,-10,-4,-3,-3,8,-2,-4,2,5,-7,6,-2,-9,4,-4,6,8,-5,10,1,-7,-9,-9,-5,3,-9,-4,-6,9,5,-5,-7,3,-7,9,1,8,-1,2,-5,9,-8,5,8,-5,7,-3,4,-6,9,6,3,9,-5,9,-8,2,-3,-9,2,1,-6,4,2,-1,-7,-10,-3,4,4,5,-4,-7,5,8,-1,-9,-5,7,6,8,-4,-4,1,-4,3,-6,-10,4,10,5,10,8,-10,3,-2,-7,-3,-5,1,9,3,-3,-10,-10,-8,2,10,5,5,-4,-1,5,-4,-8,4,-8,-3,-1,9,-3,-4,-5,3,2,10,-6,9,-4,-4,5,-2,-6,-6,-7,-6,-2,-5,5,-8,7,5,10,-5,-6,-9,-8,5,-5,8,-6,4,5,6,9,-8,-2,2,-10,6,-7,-6,5,6,4,4,8,-9,-5,-2,-9,-3,-7,4,-1,3,7,-2,1,-2,3,5,4,-4,-9,5,1,10,2,-7,-4,10,8,-4,9,-5,4,4,6,-6,6,-6,1,5,9,4,-10,5,-8,10,6,2,7,-7,3,9,-7,6,-10,9,3,-3,2,3,-6,7,-10,2,-4,10,4,-9,-6,-9,4,-8,-3,-9,10,5,7,-9,-1,-4,-10,4,-6,5,6,2,1,-8,-10,9,1,5,-8,-4,-5,-5,3,-1,2,4,-7,1,-6,-4,8,-6,9,-8,8,-3,-10,-8,-8,5,4,-10,-6,10,-10,10,-8,-6,10,2,-7,8,5,-2,6,5,-9,-2,-5,-8,-7,-4,5,-1,-5,-2,10,-10,10,10,-1,8,9,4,-2,-1,-1,3,-5,10,5,-2,1,-2,6,-7,-4,-7,-4,-8,-5,7,-4,-1,-3,8,-2,5,-2,6,-6,3,9,4,4,2,-3,-5,-9,5,-9,2,-3,7,-3,-1,8,-2,7,2,9,1,3,8,-2,4,8,-3,2,-6,4,7,-3,-1,-4,-2,-9,7,-6,-5,-10,2,-6,6,-6,4,-10,-6,-9,-5,-1,8,-9,1,-9,-6,7,6,-2,3,5,-9,-8,9,-3,-10,1,-4,2,6,4,-2,-9,-4,1,10,-5,-10,-6,-10,-3,-1,10,-3,-1,-6,10,-7,8,-9,-1,6,7,-8,-7,2,-1,-4,-8,-3,-5,-5,-1,-3,4,-10,8,10,4,-8,8,-2,-3,-10,-3,-2,-4,-5,-9,-5,-8,-7,-3,-4,7,-9,-4,-6,7,-7,-8,1,6,-6,4,-8,-8,-3,-4,-7,8,7,-7,8,8,-6,-6,10,-7,-9,-10,7,5,-7,4,-1,-2,-6,-1,6,-2,6,1,2,-4,1,9,2,-6,3,4,4,-2,8,-7,-1,-7,4,4,-8,-6,-4,6,9,4,-2,5,6,-8,-1,1,1,10,7,-3,4,-3,6,-4,-9,-8,7,-1,-3,1,4,-5,-9,-4,10,-9,-9,-5,-2,-10,7,4,-3,1,3,-9,2,-6,8,-5,-7,7,9,-1,-10,3,-8,3,1,-7,-4,5,-10,-8,1,1,10,-6,-1,-1,5,-10,1,6,5,-8,10,6,-6,-10,-10,7,-10,-10,-7,2,2,-6,-3,-7,-6,9,10,-7,2,3,2,-1,-10,-3,-1,-8,-5,8,-7,-8,9,10,-5,-4,-8,-8,-5,-3,9,4,9,2,6,-5,2,7,-3,1,-8,6,9,6,-2,-3,-5,8,6,-9,10,9,-7,3,5,-9,-6,9,-6,3,4,-8,10,-4,-6,3,6,7,-8,5,-4,-6,-9,8,-2,3,9,-4,9,-7,10,10,10,3,-8,3,3,2,6,7,-5,3,-4,-2,4,8,7,-2,-5,-7,3,5,-1,10,-1,3,-9,-9,-3,4,10,3,-9,-8,-10,-9,7,1,-5,3,-5,-3,5,7,-2,-7,-4,2,7,-10,-5,2,-3,9,-1,3,3,2,7,-7,-2,-3,-7,10,7,1,-6,-5,5,6,-8,-1,2,-8,5,-10,-10,-1,-10,-10,-10,-8,-3,7,6,-3,-2,-7,10,-7,-1,-1,-8,9,-3,4,10,-4,-4,3,6,-6,10,5,1,6,7,-4,-8,-4,1,-8,9,-6,-3,-4,-4,-7,6,-6,-4,-10,8,9,-8,-10,-2,-2,10,-5,-8,2,-1,-6,-3,-5,-5,-9,10,2,4,9,-10,-8,-8,5,-3,-7,8,-5,-6,-7,7,5,-7,-7,6,-6,4,9,10,-9,-5,-9,-10,3,5,6,-7,1,-5,-6,2,-9,7,-10,6,-9,-8,1,3,3,-5,1,-1,7,-9,-8,4,-9,7,-7,3,-1,4,-8,-7,6,3,3,10,-9,-2,1,-4,6,-4,-6,9,-7,-1,-2,7,2,5,-1,7,5,-6,-7,9,-4,8,-1,7,-10,2,-9,-9,-10,-6,1,-2,5,5,10,7,8,-4,-10,6,1,5,-8,1,-1,8,2,-8,-7,9,6,1,-9,2,8,-3,-5,-9,3,8,6,-5,5,-5,4,-10,-10,-4,-8,10,2,6,-2,-10,-2,-6,-6,7,4,-6,6,9,-10,4,-9,5,8,9,-4,-2,9,9,10,-7,-7,-3,10,8,-6,8,-7,-7,4,-4,4,7,7,-9,1,3,10,3,-9,9,-3,9,2,6,1,-4,-7,10,-8,-1,6,9,10,-7,-2,4,-5,-7,8,-3,-5,-4,10,6,-3,-7,1,-5,7,-1,10,6,8,-2,-1,5,-2,8,-1,9,1,2,-3,6,1,-9,-3,-8,-2,-7,-7,-7,-1,2,9,-5,9,-6,-6,-10,-10,-2,8,5,-2,3,5,10,-6,10,-6,-8,4,-5,6,1,-6,6,3,-4,-4,-6,-8,6,1,-9,-3,-9,-3,-9,-2,3,-1,4,2,1,-4,8,-3,5,-2,-10,3,10,-6,3,9,-5,-6,-6,-6,6,-4,-3,-9,-9,-3,4,10,4,-4,1,-4,6,5,8,-1,-1,-9,9,3,8,9,-5,-7,3,5,-7,-2,9,-8,-9,1,3,-6,-7,2,-6,7,-10,-10,6,-10,-2,-7,-10,-8,-4,-10,-1,9,5,3,-4,5,-5,-10,-8,-5,3,-3,-8,1,-10,-9,7,-8,1,6,-2,-1,5,1,10,-6,-9,-5,10,1,6,10,9,-6,1,-8,-2,-1,8,10,7,2,-7,-5,4,-8,7,4,7,-8,1,-1,-5,-9,4,3,-9,9,6,4,1,2,9,-4,7,7,10,-2,10,-7,3,6,-7,-8,9,2,-4,-8,10,1,5,-5,8,7,-1,2,4,-7,-5,3,9,-3,-10,7,-2,9,-8,2,4,-4,6,10,-8,-3,4,-4,-3,-5,8,5,10,-9,10,6,3,-8,8,10,-5,-8,9,1,10,7,7,8,-7,8,10,-1,4,3,9,9,-4,-4,-8,7,10,6,5,7,-2,-9,-10,7,-2,-7,4,7,-2,3,6,8,1,5,9,-9,-8,-3,-9,-4,1,-3,9,4,-1,-1,-6,-6,2,-4,5,2,-2,-4,5,1,1,-2,-6,-2,-3,5,-2,6,-2,5,-4,3,-1,-4,-6,4,-10,10,3,2,-4,5,10,2,-2,1,1,1,-2,-8,-1,-6,1,9,-7,-1,-10,9,-10,1,-7,7,6,-9,2,-7,-2,-5,10,-10,-3,-1,9,-2,-2,-10,-5,4,4,2,-1,-8,5,-9,-5,3,9,-2,6,9,7,5,-6,-5,-2,-6,-5,9,8,-4,-4,5,-3,-4,-3,4,-2,-3,-10,9,-3,-7,9,-10,-2,4,-3,3,-5,4,-2,9,-9,-2,-9,1,8,-2,-3,-6,7,3,8,-6,3,-3,10,10,-4,-6,-5,-7,-4,2,1,2,-9,-10,1,9,7,10,4,5,-2,3,10,2,8,9,3,9,-6,-6,8,4,9,-3,4,3,2,7,3,-4,-3,-2,6,-8,-2,-1,2,-8,-1,-4,-2,5,2,-4,9,-7,4,-1,-1,-3,1,-5,-1,-4,7,-9,6,1,-4,-4,-6,7,8,-10,-7,4,-9,3,-4,-4,4,10,-7,-7,-7,-8,-9,2,-5,8,5,9,3,-6,6,7,-5,-9,7,7,-8,10,-10,-7,-7,4,-7,8,3,-6,-7,-1,2,-7,10,7,-9,-5,9,3,-7,10,9,5,-3,5,5,-2,-7,-8,-3,5,9,-10,-10,-6,9,4,-3,4,-9,4,4,-3,-5,10,-5,1,-2,4,-5,2,6,5,-4,-3,-5,-9,5,2,2,-9,6,10,-2,-4,7,-2,-2,2,6,-9,4,-2,9,-8,-7,-7,-6,4,3,6,4,5,-5,-3,2,-1,-9,5,8,-8,-10,-9,2,-6,-1,-7,10,-2,10,-5,-9,-9,9,6,-9,4,9,-6,5,8,-4,-1,-10,1,-10,10,-3,10,7,3,10,5,-9,2,5,-1,8,5,-9,-6,5,10,9,1,-4,1,-2,-5,7,6,-9,3,1,3,-6,-8,-7,6,6,9,4,8,-6,6,2,5,8,-1,4,6,-5,1,-3,-5,6,1,-5,5,-3,5,2,-9,6,7,3,1,8,-9,9,-9,1,-7,8,8,-3,-7,2,3,-5,9,-6,6,-4,-4,-3,10,-3,-10,8,-2,-2,-6,-4,-4,1,-7,-8,10,1,5,-7,6,1,-2,-6,4,3,6,-10,6,-6,8,-7,-5,4,-2,4,-2,-6,8,1,1,1,-3,8,2,-4,9,1,-2,6,8,2,9,-6,-9,8,-1,9,-9,3,2,-4,-1,-7,-1,-6,4,-9,-3,7,-2,-4,-5,-6,10,6,9,5,6,-6,6,6,-10,-1,1,-7,-7,5,3,-4,1,7,1,-3,-5,-2,10,10,-4,-3,3,6,-10,-9,2,-8,-5,-6,-8,-1,-9,5,-2,7,8,-1,-9,-8,-9,2,2,6,-4,4,-3,-6,-10,10,-5,-10,-9,5,-9,7,-2,7,10,9,-8,-5,-10,1,-1,5,-10,-3,5,6,-1,-2,-3,-4,4,4,-10,1,3,9,-5,-2,-9,-5,-2,-10,6,-5,3,-10,7,-9,7,7,3,4,10,4,-2,6,2,9,8,-6,7,7,10,-1,5,-4,3,8,-5,-3,-3,-3,4,4,-7,-2,4,8,-3,-10,-8,9,-6,5,9,-8,-6,9,4,4,4,6,5,-4,7,-1,2,-6,-4,8,10,8,-9,-8,2,4,9,-6,8,-5,7,9,5,-8,6,-4,3,2,9,-7,-3,-9,-5,-9,6,-5,1,2,9,4,-5,-2,8,-2,-8,-2,-2,-3,7,-7,5,7,7,-1,9,-2,2,3,-9,-1,-6,8,-5,2,-5,8,-10,-6,-4,3,-2,10,-10,8,-9,-6,1,10,7,9,-10,3,-1,9,8,1,-9,-6,3,10,-2,-9,-2,-8,-3,-2,3,5,4,9,9,2,10,-9,-1,-9,5,5,-6,-8,-1,2,-6,7,-2,-4,8,-9,7,3,6,2,-7,9,-1,2,9,-7,2,9,-2,-5,10,-9,3,-4,4,-10,-2,-6,-8,-6,-6,-6,-6,-2,-7,-1,2,-3,-1,-4,4,8,3,-8,6,-1,-6,1,-9,2,-10,4,-2,7,-5,-10,4,-4,4,1,-7,-4,-9,-7,-6,4,-4,9,7,-9,8,-1,9,-3,-7,-5,-7,7,4,4,-5,-7,9,2,4,8,3,6,3,7,2,-6,10,4,-7,3,7,8,-8,1,4,-3,7,8,-9,-1,6,-1,-1,2,1,10,7,-5,-10,4,6,-10,-7,4,-3,6,-4,-8,1,-3,-7,-2,2,-9,4,6,-3,2,5,7,-2,-7,-9,1,7,4,-8,-8,4,3,-1,9,-3,5,6,8,-4,-6,2,-4,-5,2,-3,-4,-8,-6,-5,-2,-5,-8,8,2,-1,-4,8,-3,-4,-6,5,-7,-8,1,-9,4,1,-6,-8,-10,9,-3,4,9,8,9,9,6,1,1,-2,4,6,4,-2,-2,-10,7,-8,-4,-4,-2,8,-10,-7,9,-5,5,-4,-3,3,7,-10,-9,-1,-7,-5,9,6,2,-2,5,5,9,8,8,-9,7,9,8,-9,8,3,-9,7,-4,-6,6,-8,-1,-9,8,-3,-9,-10,-2,-3,7,8,-7,-1,5,2,7,8,-8,8,-9,10,-3,5,3,8,6,-6,-2,-5,-4,-2,-9,-2,9,3,-3,6,-5,-3,-10,8,8,10,3,-1,-4,-10,3,-10,-2,-2,7], dtype = "uint16")#candidate|5974|(3072,)|const|uint16
var_5975 = relay.var("var_5975", dtype = "float32", shape = (480,))#candidate|5975|(480,)|var|float32
const_5976 = relay.const([-4.971276,-8.909967,-3.836712,-8.431773,-7.833550,4.001190,-9.147636,-8.651310,9.358637,-9.494143,-9.696663,-6.560230], dtype = "float64")#candidate|5976|(12,)|const|float64
call_5973 = relay.TupleGetItem(func_2682_call(relay.reshape(const_5974.astype('uint16'), [16, 16, 12]), relay.reshape(const_5974.astype('uint16'), [16, 16, 12]), relay.reshape(var_5975.astype('float32'), [480,]), relay.reshape(const_5976.astype('float64'), [12,]), ), 4)
call_5977 = relay.TupleGetItem(func_2688_call(relay.reshape(const_5974.astype('uint16'), [16, 16, 12]), relay.reshape(const_5974.astype('uint16'), [16, 16, 12]), relay.reshape(var_5975.astype('float32'), [480,]), relay.reshape(const_5976.astype('float64'), [12,]), ), 4)
bop_5994 = relay.add(call_5973.astype('uint32'), const_5963.astype('uint32')) # shape=(308,)
bop_5997 = relay.add(call_5977.astype('uint32'), const_5963.astype('uint32')) # shape=(308,)
func_5886_call = mod.get_global_var('func_5886')
func_5889_call = mutated_mod.get_global_var('func_5889')
call_5998 = func_5886_call(relay.reshape(call_5954.astype('bool'), [6, 4, 2]))
call_5999 = func_5886_call(relay.reshape(call_5954.astype('bool'), [6, 4, 2]))
uop_6010 = relay.acosh(bop_5970.astype('float64')) # shape=(96, 12)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
call_6012 = func_197_call(relay.reshape(const_5976.astype('float64'), [1, 12, 1]))
call_6013 = func_197_call(relay.reshape(const_5976.astype('float64'), [1, 12, 1]))
output = relay.Tuple([call_5954,call_5962,const_5974,var_5975,const_5976,bop_5994,call_5998,uop_6010,call_6012,])
output2 = relay.Tuple([call_5955,call_5965,const_5974,var_5975,const_5976,bop_5997,call_5999,uop_6010,call_6013,])
func_6017 = relay.Function([var_5969,var_5975,], output)
mod['func_6017'] = func_6017
mod = relay.transform.InferType()(mod)
mutated_mod['func_6017'] = func_6017
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6017_call = mutated_mod.get_global_var('func_6017')
var_6019 = relay.var("var_6019", dtype = "uint64", shape = (96, 12))#candidate|6019|(96, 12)|var|uint64
var_6020 = relay.var("var_6020", dtype = "float32", shape = (480,))#candidate|6020|(480,)|var|float32
call_6018 = func_6017_call(var_6019,var_6020,)
output = call_6018
func_6021 = relay.Function([var_6019,var_6020,], output)
mutated_mod['func_6021'] = func_6021
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6033 = relay.var("var_6033", dtype = "float32", shape = (8, 5, 8))#candidate|6033|(8, 5, 8)|var|float32
var_6034 = relay.var("var_6034", dtype = "float32", shape = (8, 5, 8))#candidate|6034|(8, 5, 8)|var|float32
bop_6035 = relay.power(var_6033.astype('float32'), relay.reshape(var_6034.astype('float32'), relay.shape_of(var_6033))) # shape=(8, 5, 8)
uop_6043 = relay.acos(var_6033.astype('float32')) # shape=(8, 5, 8)
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_6059 = relay.TupleGetItem(func_4991_call(), 2)
call_6060 = relay.TupleGetItem(func_4993_call(), 2)
func_6017_call = mod.get_global_var('func_6017')
func_6021_call = mutated_mod.get_global_var('func_6021')
const_6067 = relay.const([3,5,1,3,1,-4,-1,10,4,4,10,-1,2,-1,6,4,-2,-1,8,-6,6,-9,8,-2,9,10,-2,2,-10,2,4,5,4,8,10,2,3,2,3,4,1,-3,-4,7,-9,9,-3,-9,10,3,-3,-5,-6,-8,2,1,9,-6,-3,6,-10,-5,-9,3,4,-9,-9,-3,-1,6,-6,-7,-4,-7,-6,9,8,-10,-10,8,7,3,2,-4,1,-8,-8,-2,-10,9,2,1,-4,8,-3,2,-6,7,2,-4,-3,8,9,-6,-8,4,-7,-1,5,-6,8,10,4,-3,-1,9,-9,-7,-8,-7,10,-6,10,7,-7,-6,3,-8,-3,5,-5,-6,-1,5,6,4,5,2,-7,3,-3,8,2,5,6,7,-2,8,-8,3,-6,1,-8,9,1,9,8,10,-3,5,-2,-3,-7,-10,-5,-2,-9,-2,-5,2,10,8,9,8,-4,3,7,-2,6,-3,4,-2,6,2,3,-7,-7,3,-4,10,-5,-4,9,-1,8,8,7,7,-1,7,4,1,9,-7,-4,-1,-10,-5,2,5,-8,-4,-2,10,-1,-9,1,6,3,-6,-10,8,-1,2,7,-5,-10,-1,9,6,-10,-7,-5,4,-6,-5,-7,-10,-5,2,-10,10,6,-2,5,-9,5,8,8,-7,2,3,-6,8,5,-7,6,5,-7,9,7,6,3,-3,6,5,4,5,-1,1,-2,-1,4,-4,-4,-4,2,-4,-6,4,-9,-9,-7,10,9,3,2,2,9,8,9,-4,-3,-6,7,10,8,-6,-6,-2,10,6,9,-7,-4,-10,8,-5,-4,2,10,-5,5,-5,10,6,5,1,2,10,4,10,-6,4,4,9,-2,-4,10,6,9,1,5,-7,1,-2,7,-8,5,-3,10,6,-10,6,2,-9,7,-6,-1,7,2,6,1,4,-6,6,-1,-7,-5,-9,9,9,-8,-8,9,1,-5,3,-3,-4,4,-4,-4,-5,5,5,4,10,10,4,-3,3,4,-6,2,3,-1,4,9,4,5,-8,3,2,-5,-5,1,-8,3,-1,5,-5,-4,-2,8,7,-5,-2,-4,-4,-3,9,6,-1,3,-7,10,7,-1,-5,4,2,-6,10,1,10,4,9,7,2,-6,2,-1,7,9,2,-5,-5,-9,2,-10,5,2,-3,-6,10,-3,7,1,-7,10,-4,-2,-8,3,-2,-4,6,-2,4,-3,1,7,2,-6,10,8,2,4,-10,2,1,-8,-2,5,8,10,-6,9,-9,-6,-10,-5,-4,-10,8,-8,-10,4,-9,-7,7,-8,6,-10,10,-4,-10,-1,-7,-1,-7,-4,5,8,-6,-3,-2,-7,-6,-3,-5,-7,3,-1,2,-7,-1,5,-8,-2,-8,9,-5,8,3,10,-6,5,6,2,-10,-7,10,10,5,-4,6,4,-10,-3,-4,3,9,-3,-5,-4,-6,7,5,7,9,4,5,-9,10,1,4,-8,-3,-9,-8,5,-6,-1,10,-2,9,6,-3,2,4,1,-7,-2,-10,9,6,1,6,4,9,-7,-3,4,-6,3,-10,-2,1,-5,7,-8,-8,6,10,4,-7,10,3,-9,-2,1,-5,7,6,-9,-8,5,-4,1,-10,-5,-5,-8,1,-7,10,-5,2,-2,-5,-1,-8,8,7,7,-6,6,-9,10,-4,3,9,-10,9,9,-5,-5,-7,4,-4,-9,7,-2,10,6,-2,-7,-6,-2,-10,-9,1,5,-8,-10,-4,-3,-6,5,8,1,10,-3,-6,-3,5,-9,-7,2,7,-10,-3,-2,-9,-7,10,-8,-6,9,5,-8,4,-5,-4,-8,1,2,4,-2,-2,-1,7,-5,2,6,-5,-8,-10,2,1,4,2,7,9,9,10,-6,-3,1,4,-3,-10,10,5,5,-1,-10,-5,9,6,-7,-9,-3,-3,-8,-10,6,3,1,5,5,-2,-1,4,1,7,6,1,8,6,9,-8,-7,10,-2,1,-4,-4,10,-4,-8,10,-9,-5,-5,5,-6,-10,6,10,-6,5,4,5,-9,-6,2,-1,7,1,9,-5,-1,-10,4,6,9,-9,3,6,5,-9,5,1,7,1,8,-3,-10,7,-10,-3,-4,-1,-8,-9,8,1,9,5,-4,4,-4,-10,-7,-8,9,8,-4,2,-6,7,10,-7,-10,7,-1,-5,-7,9,3,2,9,-5,1,-6,-10,-10,9,-9,4,-2,-6,-1,-3,6,-8,-9,-10,-1,-4,5,10,-2,7,-9,-9,7,1,8,-8,1,5,-6,-4,4,-4,2,8,-4,-7,-7,7,2,2,1,6,-8,1,6,1,-3,-10,-10,9,3,-8,-2,4,2,-8,6,4,-7,-9,10,2,6,8,-8,1,-5,-4,3,-5,-4,7,-6,-7,4,5,-6,7,9,-8,-4,-10,10,-8,-2,8,-5,-9,6,6,-1,-5,-8,-1,-10,3,9,-5,-7,-2,7,6,-6,6,10,3,-1,-10,-1,-5,9,-6,-1,-7,-7,5,8,-7,6,-8,5,2,8,-6,-3,1,-9,2,10,-8,6,-3,7,-1,-3,-3,-8,6,-5,8,-5,1,6,4,3,-2,-5,5,5,7,5,-8,-3,1,-9,9,8,8,5,9,-3,-9,8,-4,-10,-2,-1,9,7,3,1,-9,-3,-2,-8,6,-5,-2,1,-5,7,7,8,-1,6,-10,-9,3,-4,10,-9,3,-3,7,3,4,-7,-7,7,-9,-5,7,6,3,6,-1,-2,-8,-1,9,-7,3,6,-9,9,3,5,-5,-9,-10,-4,1,-9,-10,-6,-6,2,4,-9,-8,-1,2,10,-6,8,7,8,7,-6,8,6,4,-3,-7,-3,3,-7,-7,-2,7,8,-3,1,-4,9,-1,-7,-2,-5,-3,3,10,10,-8,-2,-4,10,-7,-1,1,6,-4,7,3,6,-10,-3,10,2,8,4,4,-1,-6,3,-2,-9,10,-2,-10,1,7,4,7,-5,10,7,5,5,10,-1,7,-7,-8,1,7,-1,6,-2,-3,-8,-8,7,2,-9,1,7,1,-6,4,8,9,-6,5,8], dtype = "uint64")#candidate|6067|(1152,)|const|uint64
var_6068 = relay.var("var_6068", dtype = "float32", shape = (480,))#candidate|6068|(480,)|var|float32
call_6066 = relay.TupleGetItem(func_6017_call(relay.reshape(const_6067.astype('uint64'), [96, 12]), relay.reshape(var_6068.astype('float32'), [480,]), ), 2)
call_6069 = relay.TupleGetItem(func_6021_call(relay.reshape(const_6067.astype('uint64'), [96, 12]), relay.reshape(var_6068.astype('float32'), [480,]), ), 2)
bop_6071 = relay.logical_or(uop_6043.astype('bool'), relay.reshape(bop_6035.astype('bool'), relay.shape_of(uop_6043))) # shape=(8, 5, 8)
output = relay.Tuple([call_6059,call_6066,const_6067,var_6068,bop_6071,])
output2 = relay.Tuple([call_6060,call_6069,const_6067,var_6068,bop_6071,])
func_6080 = relay.Function([var_6033,var_6034,var_6068,], output)
mod['func_6080'] = func_6080
mod = relay.transform.InferType()(mod)
mutated_mod['func_6080'] = func_6080
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mutated_mod.get_global_var('func_6080')
var_6082 = relay.var("var_6082", dtype = "float32", shape = (8, 5, 8))#candidate|6082|(8, 5, 8)|var|float32
var_6083 = relay.var("var_6083", dtype = "float32", shape = (8, 5, 8))#candidate|6083|(8, 5, 8)|var|float32
var_6084 = relay.var("var_6084", dtype = "float32", shape = (480,))#candidate|6084|(480,)|var|float32
call_6081 = func_6080_call(var_6082,var_6083,var_6084,)
output = call_6081
func_6085 = relay.Function([var_6082,var_6083,var_6084,], output)
mutated_mod['func_6085'] = func_6085
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6089 = relay.var("var_6089", dtype = "float64", shape = (11, 4, 7))#candidate|6089|(11, 4, 7)|var|float64
var_6090 = relay.var("var_6090", dtype = "float64", shape = (11, 4, 7))#candidate|6090|(11, 4, 7)|var|float64
bop_6091 = relay.greater_equal(var_6089.astype('bool'), relay.reshape(var_6090.astype('bool'), relay.shape_of(var_6089))) # shape=(11, 4, 7)
func_4272_call = mod.get_global_var('func_4272')
func_4276_call = mutated_mod.get_global_var('func_4276')
var_6097 = relay.var("var_6097", dtype = "float64", shape = (16,))#candidate|6097|(16,)|var|float64
const_6098 = relay.const([3.896457,-3.880835,2.338996,1.405861,1.096125,2.611862,7.629942,-1.188693,2.163310,-7.298117,-0.868323,-1.034400,-7.057823,3.396242,2.495899,-0.765881,-0.936031,8.726898,-1.637404,-6.207734,3.941959,-9.316035,1.466994,4.368487,-3.770967,-9.007996,1.435796,2.006894,9.361561,5.781417,-9.250948,1.665393,-2.002831,4.083019,4.074164,-0.717665,6.544062,-6.302680,-6.210886,7.995011,2.127131,1.204579,9.612401,-9.321897,4.868749,1.387185,-3.140246,9.540085,9.363307,4.871936,-3.097017,3.862594,-6.711945,-3.896098,3.281180,3.765696,9.210683,4.288699,9.556569,-3.494774,1.757212,2.324578,-3.493030,4.720691,8.005306,0.910904,-0.522232,0.938342,-9.050515,4.430957,0.389390,-2.795063,4.388873,6.752135,-0.410163,-8.708569,4.384565,1.038262,-0.084999,3.325564,4.305827,6.150167,-8.586813,-1.430058,-0.747820,-0.375301,8.631402,-9.639353,0.860816,5.600771,4.751249,4.496061,2.441577,2.506986,8.540404,5.565403,7.316013,7.537338,8.268969,-9.391373,5.604581,-5.900075,3.667451,-3.180267,-6.011158,-4.515570,2.842616,6.443112,-5.086017,-0.457264,8.989747,-5.037658,-9.168386,-1.331059,-5.843419,8.238829,-6.664824,-1.524549,-7.191248,-4.750097,-9.002197,5.633851,-4.926560,7.310225,6.588719,2.365798,7.254346,6.649418,5.775861,-3.754725,-0.487311,9.528983,3.685531,-8.857871,-7.446471,-2.375961,-0.438705,-4.027446,-9.930570,5.937837,4.789010,3.914572,2.830424,-6.462696,-8.318445,-2.480894,-8.394967,4.594639,4.501804,-6.116113,-1.392649,-4.164029,-3.060573,-3.940176,-6.093198,-2.634602,-4.423119,1.979518,-1.027783,-7.029808], dtype = "float64")#candidate|6098|(160,)|const|float64
call_6096 = relay.TupleGetItem(func_4272_call(relay.reshape(var_6097.astype('float64'), [1, 2, 8]), relay.reshape(const_6098.astype('float64'), [10, 2, 8]), ), 0)
call_6099 = relay.TupleGetItem(func_4276_call(relay.reshape(var_6097.astype('float64'), [1, 2, 8]), relay.reshape(const_6098.astype('float64'), [10, 2, 8]), ), 0)
func_1154_call = mod.get_global_var('func_1154')
func_1156_call = mutated_mod.get_global_var('func_1156')
call_6109 = func_1154_call(relay.reshape(call_6096.astype('bool'), [5, 16, 2]))
call_6110 = func_1154_call(relay.reshape(call_6096.astype('bool'), [5, 16, 2]))
output = relay.Tuple([bop_6091,call_6096,var_6097,const_6098,call_6109,])
output2 = relay.Tuple([bop_6091,call_6099,var_6097,const_6098,call_6110,])
func_6117 = relay.Function([var_6089,var_6090,var_6097,], output)
mod['func_6117'] = func_6117
mod = relay.transform.InferType()(mod)
var_6118 = relay.var("var_6118", dtype = "float64", shape = (11, 4, 7))#candidate|6118|(11, 4, 7)|var|float64
var_6119 = relay.var("var_6119", dtype = "float64", shape = (11, 4, 7))#candidate|6119|(11, 4, 7)|var|float64
var_6120 = relay.var("var_6120", dtype = "float64", shape = (16,))#candidate|6120|(16,)|var|float64
output = func_6117(var_6118,var_6119,var_6120,)
func_6121 = relay.Function([var_6118,var_6119,var_6120,], output)
mutated_mod['func_6121'] = func_6121
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6123 = relay.var("var_6123", dtype = "int32", shape = (14, 12, 9))#candidate|6123|(14, 12, 9)|var|int32
const_6124 = relay.const([[[-8,-3,4,-1,-10,2,9,-8,-4],[-10,5,-1,-7,-8,8,10,-1,-9],[2,7,-4,-3,-1,-1,-4,-1,7],[5,-9,-7,-5,3,2,10,-3,8],[-4,-4,2,3,6,-6,-5,7,6],[-3,2,6,9,10,2,1,10,4],[-1,-9,-10,10,-8,1,10,4,9],[8,7,-10,-7,-9,-6,-9,10,6],[5,-5,-2,6,10,5,-1,5,-10],[-8,-6,4,-10,3,-2,-9,-4,9],[-3,-9,4,-2,7,-10,-4,6,5],[-6,-6,6,7,-5,4,-8,-9,-9]],[[10,-6,1,-6,6,7,-5,-8,-1],[8,-2,10,7,2,-4,6,4,-3],[-10,10,-4,-7,9,9,-2,7,-2],[-9,-4,4,3,3,4,2,6,9],[-10,-8,-4,10,-6,9,5,-6,10],[-6,3,-10,-5,2,8,-1,8,9],[8,7,6,3,-1,-10,-10,3,6],[-10,-10,2,4,6,5,-5,5,-9],[5,4,-9,-8,-1,-2,-6,7,7],[-2,5,4,-3,2,-10,-1,-3,10],[7,2,-8,-4,9,10,3,8,2],[-9,-2,5,4,-4,10,10,3,-7]],[[6,-7,5,4,1,-9,3,-10,-10],[6,2,2,5,1,-2,1,2,-7],[-5,-6,-1,9,-2,1,-5,-8,9],[1,2,4,-2,3,2,10,9,4],[-2,5,4,-10,7,8,-9,-1,-10],[-4,1,6,-5,1,-6,-5,-7,-4],[10,-8,1,-2,4,9,10,8,-1],[5,5,-2,-10,-7,7,6,5,-2],[-1,-5,10,2,-7,3,7,4,5],[-10,2,2,1,7,-5,10,-5,-2],[9,9,4,-6,2,-10,-7,-2,10],[-8,-3,4,-6,-3,-9,8,-8,-8]],[[8,3,7,7,-6,4,-6,-6,9],[-8,-4,8,7,-5,-4,9,-6,-2],[-8,8,-1,-9,-5,7,-4,-9,-7],[4,-2,2,10,7,-6,1,-9,7],[1,8,-2,10,-9,4,5,-1,7],[-2,-5,-4,-10,-4,-6,-3,-8,5],[-6,-5,3,1,7,4,5,10,-8],[2,3,-9,8,8,-10,5,-7,1],[10,-7,-5,-3,-8,4,-9,-4,-2],[-3,-4,6,5,2,-2,9,6,-10],[-6,5,6,-2,6,7,-8,8,-3],[-7,-8,8,3,-3,-5,2,-8,9]],[[-8,10,6,4,10,-7,-8,9,5],[-5,9,9,-3,-7,-2,6,5,4],[3,-5,-9,6,-9,3,-6,-4,8],[-9,6,3,-2,8,5,1,9,3],[-8,-7,-5,3,-9,-6,-2,-8,-1],[-6,10,-10,-5,2,-9,-4,-5,-6],[-9,4,5,5,-5,6,3,-8,-6],[-7,1,7,-6,7,-1,-4,1,10],[-7,5,-7,-7,5,-5,-4,-1,4],[5,10,3,-4,-2,4,4,7,3],[-2,-6,4,5,-6,4,-8,-9,-10],[8,9,2,-1,5,6,2,6,5]],[[3,-9,8,-6,2,-5,-8,-8,-4],[-10,-5,-3,-1,-10,-6,9,5,-6],[-1,1,10,8,10,6,-4,-9,1],[3,8,1,8,-1,9,-8,-2,6],[7,-1,-9,3,5,-4,5,-8,-1],[-6,10,4,5,-2,10,-8,-3,8],[-5,-5,4,-7,-7,3,-6,6,6],[-7,-1,9,-8,-10,5,-3,10,3],[7,2,-6,1,4,10,-7,-5,10],[2,1,1,2,10,-9,-6,4,-10],[5,-4,9,2,-3,-4,1,2,-8],[1,4,1,-6,-2,7,1,-3,2]],[[1,8,1,8,8,5,1,-5,7],[10,5,6,-6,-3,-3,9,-8,-9],[-8,10,-9,1,1,6,-4,-1,-10],[10,-3,-5,9,-2,10,6,8,-4],[-1,8,-3,-9,-1,-7,-7,-9,3],[9,-9,-8,2,-8,10,-9,9,10],[-2,-10,-9,-5,7,1,9,1,-2],[-6,-3,-7,8,-1,-3,-10,1,-7],[-8,-1,8,6,-1,-5,8,-9,8],[3,2,-5,-6,-2,-5,-7,3,2],[9,1,7,-5,9,-5,10,7,1],[-10,4,-3,-1,4,10,7,3,3]],[[6,-6,-2,4,-10,-7,-10,9,-9],[7,-5,-7,-6,-6,4,1,-7,-5],[-10,4,-9,-1,8,-6,-10,-8,-3],[-2,9,2,-7,-1,9,-5,6,-7],[8,5,7,2,6,4,5,10,4],[-7,-4,5,-6,-2,-8,9,-6,4],[8,3,-8,-1,3,-8,3,5,-6],[1,-1,-6,2,6,10,3,8,9],[-3,8,4,-10,-3,-6,-7,1,-2],[8,-10,3,-4,5,-4,-7,-7,-10],[5,1,9,5,6,8,10,-3,-10],[-10,3,-8,4,-4,4,-3,6,-5]],[[3,2,5,-9,-6,7,7,4,-7],[-8,10,1,6,3,9,-8,9,4],[-2,8,3,5,5,3,2,10,-3],[-5,8,-2,7,1,-4,9,8,-3],[3,3,9,-9,-7,-2,1,-1,7],[-7,-5,-10,3,-2,-7,2,-7,9],[2,7,-6,-2,-6,7,6,10,2],[8,-1,6,9,9,4,-2,-3,-8],[7,7,2,-7,-8,10,8,5,10],[9,-9,7,-6,10,9,-10,7,-10],[-3,-9,-7,-1,7,-4,7,-10,2],[10,10,7,9,6,7,6,6,-1]],[[4,-7,9,-10,5,-3,-9,4,6],[-9,-1,2,4,7,5,4,-9,-2],[4,-5,4,-7,2,2,-5,4,5],[-3,7,-8,8,-6,3,-5,2,6],[-7,-8,-4,-10,1,-4,-1,-5,9],[-5,-7,3,-8,9,-8,5,9,6],[-4,-4,-10,1,-7,4,-4,-4,9],[-5,8,5,10,-3,3,-2,-6,2],[-7,1,-3,-2,3,10,-5,-7,8],[9,1,-4,-1,-1,-7,5,8,-9],[-9,8,9,2,-2,7,2,-7,-5],[-7,-1,3,1,-9,-2,-10,1,2]],[[7,-4,-4,8,-6,-9,7,-7,-4],[4,8,6,4,-2,-5,7,-10,-10],[5,-10,-4,1,-3,-10,1,-4,-1],[-1,-8,2,-9,7,3,4,7,8],[-3,5,-9,4,-2,1,1,-8,6],[6,2,-7,-1,4,6,-1,1,6],[-2,-2,-3,6,6,4,-8,9,4],[-7,-8,-4,3,5,9,3,-4,-6],[7,-10,7,-5,6,7,2,4,-4],[-4,2,-10,3,-6,8,3,-3,-8],[-8,-9,7,-4,-9,8,-7,-10,-2],[-3,4,1,1,-7,8,9,8,-2]],[[-2,-3,5,4,-4,4,-5,-2,-6],[2,10,4,-5,-5,8,8,-2,-3],[-4,2,3,7,-2,-10,-3,-8,2],[-10,2,9,-3,-4,-10,3,-7,-2],[-10,10,-10,-10,3,-6,9,-1,3],[3,-9,-2,-5,2,1,-2,-5,-3],[-3,7,-3,10,-3,5,2,-4,4],[-1,3,10,-1,7,5,10,6,-3],[-4,-3,5,-7,-5,-10,-8,-7,-4],[7,9,1,5,-1,3,-2,-8,-8],[-2,-10,5,-3,10,-4,-8,2,-6],[-1,-6,-3,-6,-10,1,-7,-10,-7]],[[8,-7,-3,3,-3,-9,9,1,-2],[-6,1,-3,3,-3,-9,-7,-2,5],[5,-7,4,7,-5,9,-3,6,-1],[4,10,-9,10,6,-2,5,1,-8],[-7,-6,-5,10,10,-4,4,8,-7],[-5,-5,-9,3,4,8,-9,-9,7],[-2,4,2,4,7,-2,-9,3,9],[10,-8,6,-8,-10,9,-3,-4,-4],[8,-4,2,-1,-4,-6,8,5,-10],[-9,5,9,7,-7,-10,7,9,-5],[9,3,-2,-6,-2,-4,1,3,1],[2,-6,8,9,6,-1,10,-6,-3]],[[9,7,-8,6,-2,-5,-2,2,-7],[-4,10,-6,-8,10,9,-2,-1,-2],[8,10,10,5,-2,10,1,-8,3],[-3,2,6,-5,2,5,-6,-5,-5],[2,6,10,5,-1,4,7,-6,-9],[10,1,3,-9,3,7,-8,-7,-5],[10,10,-3,5,2,-8,-6,-6,-4],[4,-9,-7,4,-5,10,10,10,-1],[-4,10,8,6,8,-2,2,6,-5],[-10,-8,2,5,-8,-1,5,-5,-1],[4,-8,1,5,-6,-7,-3,9,-3],[1,-10,10,-10,-9,1,10,9,-10]]], dtype = "int32")#candidate|6124|(14, 12, 9)|const|int32
bop_6125 = relay.bitwise_and(var_6123.astype('int32'), relay.reshape(const_6124.astype('int32'), relay.shape_of(var_6123))) # shape=(14, 12, 9)
var_6128 = relay.var("var_6128", dtype = "int32", shape = (14, 12, 9))#candidate|6128|(14, 12, 9)|var|int32
bop_6129 = relay.mod(bop_6125.astype('float32'), relay.reshape(var_6128.astype('float32'), relay.shape_of(bop_6125))) # shape=(14, 12, 9)
func_1209_call = mod.get_global_var('func_1209')
func_1212_call = mutated_mod.get_global_var('func_1212')
const_6138 = relay.const(-9, dtype = "uint64")#candidate|6138|()|const|uint64
const_6139 = relay.const([-4,6,-5,2,7,5,-10,-2,-2,-3,-8,-4,10,-10,4,10,4,-6,7,4,9,7,6,8,-10,10,-4,10,-8,2,-10,1,-10,-2,4,8,7,-5,-9,-5,-6,6,-9,-5,-7,-2,9,10,10,-4,-9,-8,-2,-3,7,-1,-3,2,-5,1,-4,-10,6,-4,-3,-3,-5,-1,5,9,10,-5,-8,6,-6,5,2,4,-5,-6,-7,3,9,8,-7,-6,-8,1,1,-7,-4,6,-10,-6,7,5,1,5,-1,-4,3,-7,-4,-4,4,10,6,6,4,-2,3,4,-5,-4,5,5,1,-8,-10,7,-6,4,1,-9,-3,8,8,2,3,10,-5,8,8,-10,-8,2,2,-9,7,1,-9,-8,1,2,7,3,-8,-9,-9,-5,-3,-3,5,1,-10,-4,9,9,1,5,-3,9,1,8,-6,-7,1,6,-1,-8,9,-3,-3,8,2,-1,4,-6,7,-7,8,1,-5,3,-4,-9,2,-1,4,10,-5,-1,-10,-5,5,-1,-5,2,9,-8,-8,-8,-8,-7,10,-8,-6,-7,-8,-5,-4,5,9,1,-5,-5,-5,3,-3,4,8,2,3,-2,10,5,4,-7,-9,2,-7,-5,1,-6,10,8,3,4,9,-8,-5,-5,3,3,2,4,-4,4,8,-10,1,6,9,-2,8,-7,3,4,-6,7,-6,-7,-9,6,2,-6,3,1,-4,10,2,-4,9,-10,9,-1,8,5,-1,-7,-6,-8,-6,3,-1,-1,10,8,5,2,-5,9,3,3,5,-6,2,4,-2,-8,-1,6,6,9,-3,-7,4,-6,-10,-10,8,9,-2,9,-1,-7,-8,2,-8,-7,-3,-1,-10,5,-5,-6,3,-4,8,8,-2,2,7,-6,-8,-8,-9,10,-6,-1,2,-6,3,-1,-5,4,6,-9,-1,-10,10,-10,6,8,6,5,-7,6,-2,4,-8,5,4,8,9,-4,7,9,7,7,7,3,4,-7,-8,2,-9,1,8,-9,-1,-7,-1,2,-4,-9,-1,-6,-4,9,-3,-8,-5,8,-2,2,1,10,6,8,-10,-2,1,-4,-2,-9,-4,-9,-7,6,-3,-3,-10,6,4,7,-3,3,-8,1,1,-4,8,-6,2,4,-10,2,9,-7,2,-7,4,10,-8,-1,2,4,1,-5,-3,8,8,-5,-8,10,-6,-4,6,2,5,-10,9,5,5,-2,-10,2,-10,5,-9,5,-9,-8,3,8,5,2,-2,-5,6,-5,-8,4,-4,-6,-3,8,4,-8,6,-2,4,5,3,-4,7,-7,6,5,-10,1,-5,-7,5,-5,-1,-1,3,2,-8,-4,8,10,-3,-4,-7,8,5,3,3,2,3,1,-1,-1,-9,-4,6,-3,-10,-4,3,10,-1,2,9,8,-7,-9,1,-7,-4,-9,4,1,-10,-2,-1,3,-5,4,8,7,2,-6,-7,7,-6,2,-10,-4,10,-3,8,10,2,-9,-9,-10,4,6,-8,3,-9,4,9,-10,-5,9,1,-9,5,-7,-8,-5,-10,-4,-4,-4,5,2,9,-3,5,10,-3,-2,8,-5,4,-9,-1,-7,-3,7,3,1,1,6,8,-5,6,-3,7,-1,8,-7,4,-3,9,2,-1,-3,9,-10,5,9,-3,6,-10,2,6,6,-5,6,1,5,-2,-4,-8,-9,-2,-4,3,-6,6,1,-9,-3,-8,-10,8,-2,-6,3,-3,-6,-1,3,-10,-6,-8,10,6,4,2,-4,3,-1,4,-10,-6,-3,9,-10,-4,-7,5,-2,3,-4,3,-3,6,3,8,7,2,-1,-8,1,-9,-6,10,-5,5,-5,-7,-5,2,3,1,-4,-9,-5,-5,-9,-7,-9,5,9,3,-8,-2,-3,1,6,5,-7,2,3,8,-2,-9,3,4,5,4,8,-6,-2,-9,1,8,-8,9,10,5,4,2,7,-7,-5,-6,9,-6,-1,1,8,-1,4,10,-9,5,-7,1,4,6,1,2,8,-4,2,-2,-7,-9,-2,2,-1,5,5,-4,5,8,-4,7,10,-10,7,5,4,2,2,-7,2,-1,-7,-7,4,8,8,9,-7,4,-2,5,-4,4,-4,7,5,4,-2,6,-6,4,-10,-6,2,10,-1,-10,3,-1,6,-2,7,-3,-8,-2,3,-10,9,-1,-8,-2,5,5,5,6,5,2,-5,8,-6,-8,8,-4,-6,5,4,-2,-1,-9,-3,10,3,8,9,-1,-10,-3,-7,-5,-10,6,10,-4,-4,-9,-8,-3,-3,10,10,-4,-8,-9,2,9,-4,5,-10,-7,4,1,7,2,8,-9,-3,9,9,-8,1,4,-2,-3,10,9,8,-5,-6,4,-10,2,-7,5,-8,9,-2,-7,4,7,10,7,5,-4,8,5,-10,-1,6,2,-1,-3,6,7,10,1,1,-9,-7,-7,10,2,7,-6,1,6,1,-7,1,-4,-10,-4,-2,-7,-5,-7,-4,-4,4,3,10,-7,3,7,-8,7,-7,-8,4,-1,8,6,8,-3,4,6,-9,6,-5,-6,-5,10,3,-4,-1,-8,4,1,7,-4,1,-6,5,10,4,-2,8,4,9,-10,4,1,5,-2,5,-5,8,-7,-1,2,3,-6,-7,4,-10,-10,6,6,3,-4,-4,5,10,4,8,-7,-9,6,7,5,6,-4,5,4,8,6,-6,-3,-2,-8,-4,-3,-1,-10,-9,-6,10,-7,-7,-5,-8,-8,-2,1,-9,-6,5,5,-8,-2,2,4,-7,-7,2,1,2,6,-10,8,7,2,5,8,4,10,8,-6,-5,-9,-4,10,-8,10,5,-9,5,-4,9,-2,2,7,-8,-2,7,-1,-2,8,7,-9,-9,-7,-10,-3,-5,-3,8,6,4,-8,-9,-3,10,-2,1,-9,10,5,7,2,-4,8,5,-10,1,-2,-9,-1,8,7,-5,-2,-4,-8,6,2,4,-5,-3,-10,5,5,8,-4,-1,8,9,4,8,4,-1,5,8,4,5,8,-7,5,-10,4,1,-9,5,-4,5,-6,-4,-2,10,-6,2,-4,-8,8,9,-1,-7], dtype = "uint64")#candidate|6139|(1152,)|const|uint64
call_6137 = relay.TupleGetItem(func_1209_call(relay.reshape(const_6138.astype('uint64'), []), relay.reshape(const_6139.astype('uint64'), [8, 16, 9]), ), 0)
call_6140 = relay.TupleGetItem(func_1212_call(relay.reshape(const_6138.astype('uint64'), []), relay.reshape(const_6139.astype('uint64'), [8, 16, 9]), ), 0)
func_5946_call = mod.get_global_var('func_5946')
func_5949_call = mutated_mod.get_global_var('func_5949')
var_6163 = relay.var("var_6163", dtype = "float32", shape = (48,))#candidate|6163|(48,)|var|float32
call_6162 = func_5946_call(relay.reshape(var_6163.astype('float32'), [6, 4, 2]))
call_6164 = func_5946_call(relay.reshape(var_6163.astype('float32'), [6, 4, 2]))
uop_6171 = relay.cos(var_6128.astype('float64')) # shape=(14, 12, 9)
bop_6184 = relay.minimum(uop_6171.astype('int8'), relay.reshape(var_6123.astype('int8'), relay.shape_of(uop_6171))) # shape=(14, 12, 9)
uop_6206 = relay.acos(uop_6171.astype('float64')) # shape=(14, 12, 9)
uop_6209 = relay.log10(uop_6206.astype('float32')) # shape=(14, 12, 9)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_6214 = func_4656_call()
call_6215 = func_4656_call()
func_6117_call = mod.get_global_var('func_6117')
func_6121_call = mutated_mod.get_global_var('func_6121')
var_6222 = relay.var("var_6222", dtype = "float64", shape = (308,))#candidate|6222|(308,)|var|float64
const_6223 = relay.const([-7.770996,-4.970142,-1.840075,-7.795137,-3.134543,9.761832,-8.702758,8.201395,0.446286,-4.488085,-3.978735,3.724696,1.073679,-5.898091,4.425899,-2.991064], dtype = "float64")#candidate|6223|(16,)|const|float64
call_6221 = relay.TupleGetItem(func_6117_call(relay.reshape(var_6222.astype('float64'), [11, 4, 7]), relay.reshape(var_6222.astype('float64'), [11, 4, 7]), relay.reshape(const_6223.astype('float64'), [16,]), ), 0)
call_6224 = relay.TupleGetItem(func_6121_call(relay.reshape(var_6222.astype('float64'), [11, 4, 7]), relay.reshape(var_6222.astype('float64'), [11, 4, 7]), relay.reshape(const_6223.astype('float64'), [16,]), ), 0)
func_1209_call = mod.get_global_var('func_1209')
func_1212_call = mutated_mod.get_global_var('func_1212')
call_6227 = relay.TupleGetItem(func_1209_call(relay.reshape(const_6138.astype('uint64'), []), relay.reshape(call_6137.astype('uint64'), [8, 16, 9]), ), 0)
call_6228 = relay.TupleGetItem(func_1212_call(relay.reshape(const_6138.astype('uint64'), []), relay.reshape(call_6137.astype('uint64'), [8, 16, 9]), ), 0)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_6233 = relay.TupleGetItem(func_4513_call(), 0)
call_6234 = relay.TupleGetItem(func_4514_call(), 0)
bop_6244 = relay.less(uop_6209.astype('bool'), relay.reshape(bop_6129.astype('bool'), relay.shape_of(uop_6209))) # shape=(14, 12, 9)
func_2428_call = mod.get_global_var('func_2428')
func_2430_call = mutated_mod.get_global_var('func_2430')
var_6255 = relay.var("var_6255", dtype = "int16", shape = (660,))#candidate|6255|(660,)|var|int16
call_6254 = relay.TupleGetItem(func_2428_call(relay.reshape(var_6255.astype('int16'), [5, 132])), 1)
call_6256 = relay.TupleGetItem(func_2430_call(relay.reshape(var_6255.astype('int16'), [5, 132])), 1)
uop_6268 = relay.atanh(bop_6244.astype('float64')) # shape=(14, 12, 9)
func_5886_call = mod.get_global_var('func_5886')
func_5889_call = mutated_mod.get_global_var('func_5889')
call_6276 = func_5886_call(relay.reshape(var_6163.astype('bool'), [6, 4, 2]))
call_6277 = func_5886_call(relay.reshape(var_6163.astype('bool'), [6, 4, 2]))
output = relay.Tuple([call_6137,const_6138,const_6139,call_6162,var_6163,bop_6184,call_6214,call_6221,var_6222,const_6223,call_6227,call_6233,call_6254,var_6255,uop_6268,call_6276,])
output2 = relay.Tuple([call_6140,const_6138,const_6139,call_6164,var_6163,bop_6184,call_6215,call_6224,var_6222,const_6223,call_6228,call_6234,call_6256,var_6255,uop_6268,call_6277,])
func_6290 = relay.Function([var_6123,var_6128,var_6163,var_6222,var_6255,], output)
mod['func_6290'] = func_6290
mod = relay.transform.InferType()(mod)
var_6291 = relay.var("var_6291", dtype = "int32", shape = (14, 12, 9))#candidate|6291|(14, 12, 9)|var|int32
var_6292 = relay.var("var_6292", dtype = "int32", shape = (14, 12, 9))#candidate|6292|(14, 12, 9)|var|int32
var_6293 = relay.var("var_6293", dtype = "float32", shape = (48,))#candidate|6293|(48,)|var|float32
var_6294 = relay.var("var_6294", dtype = "float64", shape = (308,))#candidate|6294|(308,)|var|float64
var_6295 = relay.var("var_6295", dtype = "int16", shape = (660,))#candidate|6295|(660,)|var|int16
output = func_6290(var_6291,var_6292,var_6293,var_6294,var_6295,)
func_6296 = relay.Function([var_6291,var_6292,var_6293,var_6294,var_6295,], output)
mutated_mod['func_6296'] = func_6296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_6308 = func_5853_call()
call_6309 = func_5853_call()
output = relay.Tuple([call_6308,])
output2 = relay.Tuple([call_6309,])
func_6319 = relay.Function([], output)
mod['func_6319'] = func_6319
mod = relay.transform.InferType()(mod)
mutated_mod['func_6319'] = func_6319
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6319_call = mutated_mod.get_global_var('func_6319')
call_6320 = func_6319_call()
output = call_6320
func_6321 = relay.Function([], output)
mutated_mod['func_6321'] = func_6321
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_6322 = func_5853_call()
call_6323 = func_5853_call()
func_1038_call = mod.get_global_var('func_1038')
func_1044_call = mutated_mod.get_global_var('func_1044')
const_6329 = relay.const([7.696800,-7.478032,-2.670558,5.993617,-6.950123,4.896494,7.789247,-0.909598,2.435398,3.268961,7.970037,-8.120235,9.049612,-6.989522,-9.725186,-4.420980,7.800219,-2.487126,2.765895,3.544065,7.370026,9.732287,7.212880,-7.842473,-7.485949,5.879936,8.218972,0.418715,-1.101737,8.721154,9.822652,-4.744649,-2.201896,-9.125207,7.473546,-5.889838,-8.704002,3.210493,9.358815,-9.450184,3.178651,8.345159,1.273777,9.855424,2.863907,6.848804,5.305170,1.882258,-9.782965,3.657658,7.866509,-7.560887,6.392761,-1.353478,-9.544471,-7.242779,-9.381941,-9.444153,8.273533,7.450217,-7.716225,3.496676,3.218654,4.269681,5.426928,4.884037,-9.733899,-5.549568,4.052433,-2.021316,-4.367876,6.975253,0.459880,-9.071168,7.511256,5.524773,-8.999584,6.893321,2.845578,2.218551,-9.977632,3.618918,9.657264,-0.632707,-4.592799,-3.825779,-6.930760,-4.540324,7.917400,-7.548841,-2.636986,-0.960204,-1.204831,-0.922782,-5.237882,-9.208007,-9.819419,-3.610514,-8.086167,-1.068308,7.987648,1.500620,-0.132964,7.630906,-1.924452,7.039901,7.250565,-0.645278,9.064593,8.503809,-9.743791,-2.698721,-9.659955,-0.612756,-0.027777,3.175340,6.765005,9.807070,-0.711880,2.427507,-2.889102,-1.707304,-9.989783,7.517647,0.678067,-7.917191,3.666449,5.452476,9.966350,-2.934829,-2.294662,7.148928,-5.780032,-2.240514,-7.415190,0.185002,-9.046931,-0.856793,-4.743311,-8.602969,5.670284,-0.902869,-1.290949,-1.298465,6.363568,7.045196,-7.784695,-5.348091,6.281507,-5.187283,-0.737036,-2.670228,7.348665,-7.895483,-1.125413,1.353869,0.135246,-7.738844,0.177655,3.917839,8.689132,2.224553,8.453392,-1.805480,-5.151914,-7.623828,5.859253,9.178949,-2.280377,-8.927193,-1.520084,-4.039285,2.516167,1.383862,8.534945,-0.768201,4.295207,-7.294413,8.221780,7.847436,8.261653,-5.455280,-7.799514,7.090901,5.514643,-0.400633,-8.247198,0.043042,9.637316,-9.245737,4.163845,-5.809996,-6.666057,-8.020873,9.076339,3.949582,8.825198,5.180624,7.372241,-4.859954,7.977975,1.630588,0.514512,4.355584,3.106479,6.200867,-3.265214,-2.721525,3.894011,-3.114552,-2.761059,3.851429,-1.901913,-2.079481,-0.534785,-4.152455,6.421947,3.741724,5.191875,0.684050,-2.311276,4.366511,-0.158230,-7.842192,-4.014029,5.293195,-1.140723,7.585386,4.554718,4.004295,-8.750378,6.735128,0.236949,5.405259,-2.347371,5.694797,3.210856,6.972886,-9.935183,4.722923,1.241030,-9.322995,-2.861996,-9.814888,1.740850,3.994984,7.037044,1.826836,5.082890,7.332475,2.413596,-6.069202,-9.494809,2.730926,2.720480,8.225057,2.088198,9.341527,8.117680,1.976575,4.367976,7.412380,-9.751313,5.331476,9.798508,5.797177,9.187208,5.279395,8.635765,9.750994,-4.733835,2.189132,-5.199424,4.231603,-1.182083,-8.439077,9.705718,1.680898,-3.653098,0.049920,4.419455,-7.714929,-0.507807,-0.882138,-5.357375,5.372992,7.223134,-4.728738,4.604438,3.850978,2.649637,0.461054,7.059727,-8.362163,9.100203,6.922630,-9.478990,3.197068,-6.516068,-6.151119,5.174952,8.277550,7.270578,-0.965408,9.300677,-6.113538,2.963942,9.923366], dtype = "float32")#candidate|6329|(308,)|const|float32
var_6330 = relay.var("var_6330", dtype = "float64", shape = (6, 2))#candidate|6330|(6, 2)|var|float64
var_6331 = relay.var("var_6331", dtype = "float32", shape = (42, 4))#candidate|6331|(42, 4)|var|float32
call_6328 = relay.TupleGetItem(func_1038_call(relay.reshape(const_6329.astype('float32'), [11, 14, 2]), relay.reshape(var_6330.astype('float64'), [12,]), relay.reshape(const_6329.astype('float32'), [11, 14, 2]), relay.reshape(var_6331.astype('float32'), [14, 12, 1]), ), 0)
call_6332 = relay.TupleGetItem(func_1044_call(relay.reshape(const_6329.astype('float32'), [11, 14, 2]), relay.reshape(var_6330.astype('float64'), [12,]), relay.reshape(const_6329.astype('float32'), [11, 14, 2]), relay.reshape(var_6331.astype('float32'), [14, 12, 1]), ), 0)
output = relay.Tuple([call_6322,call_6328,const_6329,var_6330,var_6331,])
output2 = relay.Tuple([call_6323,call_6332,const_6329,var_6330,var_6331,])
func_6337 = relay.Function([var_6330,var_6331,], output)
mod['func_6337'] = func_6337
mod = relay.transform.InferType()(mod)
mutated_mod['func_6337'] = func_6337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6337_call = mutated_mod.get_global_var('func_6337')
var_6339 = relay.var("var_6339", dtype = "float64", shape = (6, 2))#candidate|6339|(6, 2)|var|float64
var_6340 = relay.var("var_6340", dtype = "float32", shape = (42, 4))#candidate|6340|(42, 4)|var|float32
call_6338 = func_6337_call(var_6339,var_6340,)
output = call_6338
func_6341 = relay.Function([var_6339,var_6340,], output)
mutated_mod['func_6341'] = func_6341
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5651_call = mod.get_global_var('func_5651')
func_5653_call = mutated_mod.get_global_var('func_5653')
call_6343 = relay.TupleGetItem(func_5651_call(), 0)
call_6344 = relay.TupleGetItem(func_5653_call(), 0)
func_5886_call = mod.get_global_var('func_5886')
func_5889_call = mutated_mod.get_global_var('func_5889')
var_6353 = relay.var("var_6353", dtype = "bool", shape = (48,))#candidate|6353|(48,)|var|bool
call_6352 = func_5886_call(relay.reshape(var_6353.astype('bool'), [6, 4, 2]))
call_6354 = func_5886_call(relay.reshape(var_6353.astype('bool'), [6, 4, 2]))
func_1516_call = mod.get_global_var('func_1516')
func_1518_call = mutated_mod.get_global_var('func_1518')
const_6356 = relay.const([-6.303152,-4.503751,6.985022,-0.310746,-2.052702,-6.797397,-7.671326,4.232792,1.558158,4.489636,9.396124,0.554053,5.288710,3.880924,-3.458163,-1.177538,-0.915171,-9.486715,1.231340,-7.930204,-3.892298,-4.250868,0.841706,-1.488123,8.713319,-7.954293,-9.162292,-3.079339,4.287111,1.934847,9.231416,-3.941848,-2.138606,-2.334583,-1.832750,5.365991,2.126959,4.760691,-8.000932,2.738675,8.863867,-9.398598,4.968696,-6.769811,-6.284237,7.233834,0.311940,0.431842,-5.682007,-0.213404,-3.547941,5.382010,3.086021,2.473616,-8.315158,-2.720817,-6.206577,3.931044,7.626339,-8.475875,5.012036,-4.648520,1.325586,8.558989,3.339429,-7.772432,8.087656,7.906007,-5.408164,-3.180947,-6.608773,2.481047,1.421639,-1.850961,-0.805942,6.064435,-0.051651,-8.070638,8.087169,1.756187,8.255820,1.654795,9.676233,-9.234179,6.923830,-3.577807,1.563302,-7.290367,5.948378,4.793969,2.322552,1.069227,-6.043631,9.357238,0.703606,-0.869362,8.680255,-3.594076,9.252376,-8.435520,2.603188,-6.900430,-9.693521,-1.078077,8.824626,7.903408,-9.442546,4.526043,9.593279,-0.623438,3.067589,8.997563,-8.514902,-1.247347,-8.991963,-7.769595,9.619621,-8.509681,5.245354,9.785002,0.152579,2.168416,-2.080077,-0.100586,-1.836338,-5.381663,-3.418199,-4.296889,8.966669,-8.516635,4.903964,-7.968024,8.705283,5.489289,5.947274,4.320825,3.213143,-7.184563,9.856384,6.923187,3.230824,-0.243841,-8.476881,6.597683,5.162714,1.481798,-3.947078,2.355274,4.024171,9.872127,-5.494378,4.237627,7.922663,7.152325,-0.091544,-4.618306,-3.535773,3.381314,5.440310,3.636952,-7.321045,-4.780984,-5.126652,-1.958819,-5.710987,-7.267613,9.627301,-2.503989,6.399288,1.864782,6.587872,3.620774,-3.520036,-3.215040,4.456695,-1.585510,-4.483638,8.126900,2.296712,-8.146726,5.090706,-1.946236,-6.378653,5.240121,-9.484167,-4.571303,9.279694,3.161983,-0.176042,3.028218,4.480568,-2.342381,-6.431674,-1.960888,4.687171,7.241641,8.625871,7.861131,4.313922,0.116983,-8.654742,8.207717,-9.957965,1.879466,-8.008796,-2.241043,6.160912,1.507773,-1.824646,5.723127,4.174422,-3.341354,-8.295639,-3.074583,1.080307,2.908211,4.183403,1.391479,4.428879,2.138179,1.914419,-6.789551,-2.326102,4.907514,6.837271,-4.493155,0.289933,-0.696245,0.248429,8.172423,-5.558344,-8.437943,6.910947,5.205661,-7.379441,-8.575006,1.319758,-5.174553,0.240377,-9.814144,-1.419504,4.291078,-6.993108,1.753143,-4.349915,-7.972836,3.106405,1.233148,-9.309735,-4.342729,8.544950,-5.615051,7.700819,-7.430574,-7.268251,8.973754,8.252153,9.516050,-4.640744,8.681024,6.217511,-7.891592,-0.448785,-1.088458,-2.159717,-0.623392,3.632336,-7.149746,1.383802,4.501610,-6.198141,5.963891,0.226885,2.234184,0.357064,7.439140,-0.080421,-8.433682,8.413951,6.565904,2.918288,4.325026,-0.715907,2.045318,-7.525690,-0.020907,1.280873,-9.897499,-6.334942,4.490124,4.802921,-8.904010,-9.714924,-5.727314,3.211270,9.240094,0.600389,-3.875929,0.195906,-9.080414,-4.580962,-1.168476,-7.812072,5.115890,-5.891292,-2.629241,4.768432,7.315193,3.471138,8.363906,1.475474,9.588169,3.748290,-9.730158,7.634985,-2.062268,6.945301,-0.572372,8.038665,-7.023110,-4.464622,9.943922,-7.179464,3.975354,2.707300,-6.332273,1.143451,6.331742,1.564382,5.588945,-2.172558,7.886447,-4.445379,9.181938,6.211102,5.679454,1.959739,4.325268,3.178196,5.799317,4.687976,2.174196,-0.204380,5.786123,7.734916,-4.749996,-9.550340,3.132299,2.929650,-0.282364,3.680489,-2.149674,7.552344,-8.625647,-4.450261,3.753252,6.033504,1.361832,3.311669,-4.259634,6.834366,0.008409,-0.938396,4.833023,4.498330,-1.837244,8.041626,8.420453,-3.493067,-1.296649,-8.304044,-4.486451,-1.412227,3.401878,-1.907251,-0.988752,-0.234884,7.200411,7.373819,6.254464,-5.436276,3.962592,-1.534476,-1.338047,-5.247038,-7.695869,-4.682583,-5.795027,-4.871124,1.275890,4.868383,-6.504364,8.537115,-4.600487,-0.266706,5.631891,0.855463,8.035617,-9.619750,-7.878199,-6.407030,1.072361,3.459484,9.355361,2.765509,-0.496339,1.141264,-8.334346,-2.335895,3.354931,-7.704104,-8.501951,8.046396,-8.524746,4.294264,-4.663164,7.251408,0.121699,1.399567,-6.184567,7.954368,-7.734539,9.866431,1.378705,1.953356,9.343190,6.503486,-3.672258,2.759328,-7.012332,9.402192,-4.517692,-0.918850,-9.578871,-7.201321,-4.830535,5.256535,-9.592099,-6.165796,9.458253,-5.188080,7.052991,-1.953941,-1.346720,-0.659050,-3.549700,3.516682,-1.185719,-7.386824,-5.694845,9.184429,-2.880458,4.783005,-7.063267,-1.838776,8.332656,-7.104314,7.994519,-0.540325,-9.408130,-7.942937,3.428039,4.841833,-1.790074,-9.873686,-1.923862,2.254049,-7.605110,-2.116299,-1.939531,-7.946109,3.158754,3.912720,0.564204,9.391344,-1.804620,9.229893,4.891287,-6.895382,-0.195769], dtype = "float32")#candidate|6356|(480,)|const|float32
call_6355 = relay.TupleGetItem(func_1516_call(relay.reshape(const_6356.astype('float32'), [5, 12, 8])), 0)
call_6357 = relay.TupleGetItem(func_1518_call(relay.reshape(const_6356.astype('float32'), [5, 12, 8])), 0)
func_5774_call = mod.get_global_var('func_5774')
func_5776_call = mutated_mod.get_global_var('func_5776')
call_6362 = func_5774_call()
call_6363 = func_5774_call()
output = relay.Tuple([call_6343,call_6352,var_6353,call_6355,const_6356,call_6362,])
output2 = relay.Tuple([call_6344,call_6354,var_6353,call_6357,const_6356,call_6363,])
func_6376 = relay.Function([var_6353,], output)
mod['func_6376'] = func_6376
mod = relay.transform.InferType()(mod)
mutated_mod['func_6376'] = func_6376
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6377 = relay.var("var_6377", dtype = "bool", shape = (48,))#candidate|6377|(48,)|var|bool
func_6376_call = mutated_mod.get_global_var('func_6376')
call_6378 = func_6376_call(var_6377)
output = call_6378
func_6379 = relay.Function([var_6377], output)
mutated_mod['func_6379'] = func_6379
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5535_call = mod.get_global_var('func_5535')
func_5537_call = mutated_mod.get_global_var('func_5537')
call_6388 = relay.TupleGetItem(func_5535_call(), 0)
call_6389 = relay.TupleGetItem(func_5537_call(), 0)
func_5557_call = mod.get_global_var('func_5557')
func_5560_call = mutated_mod.get_global_var('func_5560')
const_6410 = relay.const([-6,-6,-1,-1,-3,-7,-7,10,-7,-5,-3,-8,1,2,-2,5,-1,2,3,6,-10,-6,-5,8,-3,1,-7,-3,-1,-10,-10,-10,8,-3,-5,5,-2,-4,-9,9,7,-10,-10,-3,-9,-5,-8,2,-7,6,-5,-7,4,-6,-6,-9,-6,5,3,9,1,-5,-7,8,3,5,-7,-9,-6,7,1,-4,4,-4,-9,1,7,10,4,-9,2,-8,-8,1,1,7,4,8,-1,7,7,2,3,-7,10,5,-2,2,-8,-8,-10,1,-4,-2,-5,-7,-6,-4,10,7,1,-3,-4,7,-7,3,7,3,-4,8,-5,-2,3,1,1,-5,-1,5,3,-9,6,2,-7,5,-10,-3,-10,-6,-10,10,7,4,-6,-5,-3,-1,-8,2,-6,7,2,10,2,8,-3,5,-4,1,-2,-8,3,-3,2,6,-4,7,2,9,3,8,-4,7,-6,7,-7,2,-6,-10,-2,-8,9,2,3,7,-9,-4,-10,2,-9,3,-5,5,1,10,4,-10,5,6,5,6,8,10,8,7,2,5,-6,1,-8,3,-10,6,-6,5,-4,7,8,-4,-9,8,-1,-1,5,-4,-2,6,-1,1,-3,-9,7,2,5,-6,7,8,-8,4,-10,8,-7,-7,-5,6,-5,6,2,1,-4,-2,2,-8,10,4,2,5,4,-10,10,-6,10,9,10,1,-9,-4,4,1,-5,3,7,-9,-10,2,4,7,2,5,-7,7,-1,7,4,-7,-5,8,-8,4,5,-8,-6,2,2,-1,6,-7,2,10,1,4,-10,9,9,-8,9,-3,2,4,-5,-2,-6,5,2,3,5,-1,-10,-4,2,-5,-7,-8,4,-10,-9,-9,1,3,1,9,3,-2,-8,4,-8,5,-9,-2,-6,-3,7,2,-6,-1,10,5,-10,6,5,2,-1,7,-9,-3,3,2,6,8,-10,10,-9,-3,4,-8,3,10,-6,-4,-8,-4,2,1,-1,-1,9,10,8,8,-7,9,-8,-4,8,3,-4,6,-2,-4,-5,-3,8,-2,-9,8,-9,-5,-6,3,-6,9,-3,6,10,-8,8,-9,3,3,-4,-7,8,9,-3,-7,1,9,-10,9,6,7,7,10,-9,-3,4,5,-3,7,1,5,9,-5,-10,9,4,-1,1,-2,-6,5,-6,-3,7,7,3,9,7,-1,2,4,-5,8,8,-10,6,6,6,-3,9,-2,-3,4,-8,-4,6,-6,-4,-1,-6,-7,-6,6,-10,6,10,-2,10,-10,3,-9,-3,2,-9,10,-3,8,9,1,3,-1,-5,4,10,-2,-10,-4,5,-10,10,-10,8,2,1,9,1,5,-2,9,-4,7,-1,-7,-8,1,-9,-2,-10,-4,-8,-3,2,4,10,8,-6,8,-7,-6,-3,4,9,-9,-8,7,8,6,-9,-4,6,3,-8,-9,-7,1,-1,2,-8,-8,7,-6,-5,-5,-3,-5,2,10,10,-6,-4,7,-9,-7,3,7,1,5,6,-10,10,7,-3,1,-6,-10,-3,10,-5,2,2,-8,-3,-9,-2,7,6,3,2,-3,-2,-3,-10,-8,7,3,-9,2,-3,-10,-2,6,-4,-5,4,7,1,-2,10,-7,9,-8,-10,-8,-1,-9,-7,9,5,-6,-4,-6,2,7,7,-10,-4,3,-9,1,1,-5], dtype = "int64")#candidate|6410|(630,)|const|int64
call_6409 = relay.TupleGetItem(func_5557_call(relay.reshape(const_6410.astype('int64'), [14, 9, 5])), 0)
call_6411 = relay.TupleGetItem(func_5560_call(relay.reshape(const_6410.astype('int64'), [14, 9, 5])), 0)
func_5049_call = mod.get_global_var('func_5049')
func_5051_call = mutated_mod.get_global_var('func_5051')
call_6413 = relay.TupleGetItem(func_5049_call(), 0)
call_6414 = relay.TupleGetItem(func_5051_call(), 0)
func_4482_call = mod.get_global_var('func_4482')
func_4489_call = mutated_mod.get_global_var('func_4489')
const_6423 = relay.const(False, dtype = "bool")#candidate|6423|()|const|bool
const_6424 = relay.const([False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False], dtype = "bool")#candidate|6424|(1056,)|const|bool
const_6425 = relay.const([True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True], dtype = "bool")#candidate|6425|(160,)|const|bool
const_6426 = relay.const([5,-6,4,10,-3,-9,-7,-6,3,-7,-2,9,4,7,1,3,-3,8,8,9,2,-2,6,-7,-3,-4,-3,-5,5,8,-5,-3,-1,10,-2,-5,-8,-5,-4,-7,-7,4,-8,-9,-10,-10,-10,-5,-7,-2,-5,5,-3,-10,-3,6,2,1,8,2,7,-2,6,-9,2,1,-10,1,-7,2,1,-9,7,-10,10,-2,-3,-5,10,1,-5,1,9,9,-4,7,1,8,-5,-5,-4,3,9,-8,2,-3,2,-2,-6,6,-4,-7,8,-4,-8,2,-4,-9,3,-2,-5,-1,8,7,-6,4,-5,-6,-8,9,-9,-8,-6,-8,4,-5,6,7,3,8,6,-1,6,-7,-2,-2,7,-6,9,-5,3,-4,-10,-4,3,-2,7,2,-5,-10,5,-7,-2,-7,-6,-5,-2,9,8,-5,-7,-9,-2,-10,10,-3,-9,-7,-3,5,-7,-8,7,-1,3,5,-2,-6,7,-3,-3,-2,-7,7,-5,7,1,1,3,3,9,-5,4,7,-5,-8,5,3,1,1,-2,-8,-6,-3,10,-6,-5,1,-2,1,-7,10,-1,5,2,-7,-4,7,3,-8,5,-3,-5,-10,-1,8,9,1,8,-1,-3,5,3,-9,10,-9,-1,5,-7,7,-7,-7,3,-8,7,3,8,-9,-10,7,-6,-6,1,7,8,9,8,-4,7,2,-1,-3,-3,-10,-9,-4,7,3,3,7,1,9,-1,10,6,1,-7,6,7,4,7,2,-7,-2,-3,6,-5,5,9,-6,-7,2,-1,3,-6,-5,-6,7,-2,-6,7,10,6,-10,1,9,4,2,-2,5,-4,3,7,-5,-8,-3,2,1,-1,4,8,1,-7,-7,-10,6,-3,7,-10,9,3,7,9,5,8,3,-3,5,-7,-8,3,4,7,-5,2,-7,8,-2,9,-7,7,10,-4,9,-7,2,-4,-7,-8,8,-10,6,-6,-7,4,-3,-3,10,-9,-1,-9,-8,9,-2,10,6,-4,8,-9,-8,-8,-5,-3,10,-5,8,-4,-6,2,10,9,-9,-8,-4,1,-3,2,-2,4,-7,-3,-4,-1,-3,-10,4,9,-2,-2,6,-10,-6,9,-7,10,-4,1,3,8,-9,-9,8,8,-6,10,-8,3,3,2,2,8,-6,-4,2,-4,-2,4,10,-2,4,8,-2,-6,10,-7,-9,-10,3,-5,-8,10,4,10,7,10,-5,3,-7,4,-8,-4,7,3,10,9,-9,-7,-2,-6,-10,10,5,5,-4,-1,-2,-9,-9,-9,4,-6,-6,5,10,4,-8,-7,8,4,1,-4,2,-9,10,7,-7,-7,6,8,-7,-9,-9,-9,8,-10,-1,-1,-10,4,-8,3,6,8,-4,-1,3,6,-6,-8,10,-3,-2,4,5,-9,-8,10,-4,7,9,9,-6,3,-1,8,8,-2,8,-2,3,7,6,7,-8,-8,-10,8,-3,10,1,-7,1,-1,7,-1,-7,-4,-8,2,5,2,8,-3,-2,-9,3,3,-7,-5,10,-5,-6,1,-1,-9,-5], dtype = "int8")#candidate|6426|(576,)|const|int8
var_6427 = relay.var("var_6427", dtype = "float32", shape = (1800, 2))#candidate|6427|(1800, 2)|var|float32
var_6428 = relay.var("var_6428", dtype = "float32", shape = (480,))#candidate|6428|(480,)|var|float32
call_6422 = relay.TupleGetItem(func_4482_call(relay.reshape(const_6423.astype('bool'), []), relay.reshape(const_6424.astype('bool'), [11, 6, 16]), relay.reshape(const_6425.astype('bool'), [160,]), relay.reshape(const_6426.astype('int8'), [576,]), relay.reshape(var_6427.astype('float32'), [3600,]), relay.reshape(var_6428.astype('float32'), [480,]), ), 10)
call_6429 = relay.TupleGetItem(func_4489_call(relay.reshape(const_6423.astype('bool'), []), relay.reshape(const_6424.astype('bool'), [11, 6, 16]), relay.reshape(const_6425.astype('bool'), [160,]), relay.reshape(const_6426.astype('int8'), [576,]), relay.reshape(var_6427.astype('float32'), [3600,]), relay.reshape(var_6428.astype('float32'), [480,]), ), 10)
output = relay.Tuple([call_6388,call_6409,const_6410,call_6413,call_6422,const_6423,const_6424,const_6425,const_6426,var_6427,var_6428,])
output2 = relay.Tuple([call_6389,call_6411,const_6410,call_6414,call_6429,const_6423,const_6424,const_6425,const_6426,var_6427,var_6428,])
func_6437 = relay.Function([var_6427,var_6428,], output)
mod['func_6437'] = func_6437
mod = relay.transform.InferType()(mod)
mutated_mod['func_6437'] = func_6437
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6437_call = mutated_mod.get_global_var('func_6437')
var_6439 = relay.var("var_6439", dtype = "float32", shape = (1800, 2))#candidate|6439|(1800, 2)|var|float32
var_6440 = relay.var("var_6440", dtype = "float32", shape = (480,))#candidate|6440|(480,)|var|float32
call_6438 = func_6437_call(var_6439,var_6440,)
output = call_6438
func_6441 = relay.Function([var_6439,var_6440,], output)
mutated_mod['func_6441'] = func_6441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5564_call = mod.get_global_var('func_5564')
func_5565_call = mutated_mod.get_global_var('func_5565')
call_6443 = func_5564_call()
call_6444 = func_5564_call()
output = call_6443
output2 = call_6444
func_6447 = relay.Function([], output)
mod['func_6447'] = func_6447
mod = relay.transform.InferType()(mod)
mutated_mod['func_6447'] = func_6447
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6447_call = mutated_mod.get_global_var('func_6447')
call_6448 = func_6447_call()
output = call_6448
func_6449 = relay.Function([], output)
mutated_mod['func_6449'] = func_6449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_6470 = func_4656_call()
call_6471 = func_4656_call()
uop_6472 = relay.tan(call_6470.astype('float64')) # shape=(6, 4, 2)
uop_6474 = relay.tan(call_6471.astype('float64')) # shape=(6, 4, 2)
output = uop_6472
output2 = uop_6474
func_6476 = relay.Function([], output)
mod['func_6476'] = func_6476
mod = relay.transform.InferType()(mod)
output = func_6476()
func_6477 = relay.Function([], output)
mutated_mod['func_6477'] = func_6477
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5651_call = mod.get_global_var('func_5651')
func_5653_call = mutated_mod.get_global_var('func_5653')
call_6482 = relay.TupleGetItem(func_5651_call(), 0)
call_6483 = relay.TupleGetItem(func_5653_call(), 0)
output = call_6482
output2 = call_6483
func_6513 = relay.Function([], output)
mod['func_6513'] = func_6513
mod = relay.transform.InferType()(mod)
mutated_mod['func_6513'] = func_6513
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6513_call = mutated_mod.get_global_var('func_6513')
call_6514 = func_6513_call()
output = call_6514
func_6515 = relay.Function([], output)
mutated_mod['func_6515'] = func_6515
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_6535 = relay.TupleGetItem(func_4991_call(), 0)
call_6536 = relay.TupleGetItem(func_4993_call(), 0)
uop_6576 = relay.atanh(call_6535.astype('float64')) # shape=(6, 4, 2)
uop_6578 = relay.atanh(call_6536.astype('float64')) # shape=(6, 4, 2)
func_4108_call = mod.get_global_var('func_4108')
func_4110_call = mutated_mod.get_global_var('func_4110')
const_6586 = relay.const([[-5.647127,9.607293,-7.178350,-0.033866,5.611469,-5.018618,-3.398002,5.305672,-7.270801,7.950281,-8.933390,-9.169126,-3.392494,-2.083486,-7.531067,-8.967669,7.851630,-0.793374,-6.099578,-6.711655,1.811776,5.494698,6.654066,-4.583906,-1.367653,-2.722510,-2.867151,-6.470551,-1.799288,-2.413632,2.247235,-6.959339,-2.258527,6.337175,6.207069,-6.948003,-1.819227,-2.901794,-4.284363,5.277376,-2.767453,0.610049,9.836404,-6.389482,-7.506874,-7.056996,7.794972,6.637037,8.639186,2.006473,-5.842680,5.618622,9.752856,-4.001494,-4.299542,-8.400979,6.566066,-7.458450,9.017460,4.998491,0.731029,-4.988386,-7.902060,-7.167019,-5.566180,-1.119401,4.532308,9.380105,2.461061,-3.857995,1.871078,1.534663,-2.276319,3.061872,-1.544267,-3.791456,5.003861,-8.999970,-4.298656,3.201844,-3.532457,4.320547,-1.988954,-7.058552,-5.384199,8.982788,-7.760567,8.404329,-2.165153,-1.397940,7.446245,-6.214560,2.018652,-1.797794,7.898546,-8.547053,4.292561,7.309755,-7.487132,7.804420,-4.299218,9.433392,0.836756,-3.434890,7.012690,-2.628785,9.894421,0.651030,-4.716581,-5.304793,-2.088104,1.550500,-6.681028,9.915792,0.886213,4.141721,8.944272,-3.752154,4.179466,8.561649,1.646380,8.536321,-2.188919,-8.862917,-1.297711,5.148597,3.512365,-3.294857,0.042828,5.338456,8.707891,7.736133,3.642828,4.481920,-5.436684,3.267858,2.040041,-7.940923,-9.615873,-3.105471,8.783259,3.531133,-0.270711,-6.832786,2.272741,-6.240177,-7.270579,1.989415,2.915068,8.225799,0.266404,-4.313872,5.094169,1.991801,1.095004,4.146211,6.351334,0.791967,-2.652602,7.164029,8.971102,-8.771920,8.517141,2.666129,9.115725,-6.631020,-7.363459,5.202832,4.251303,5.887701,-7.033037,5.072237,0.102120,8.475640,-5.409396,2.887218,1.146220,-4.886764,0.036467,9.350007,-9.070145,-0.411159,-1.222850,-7.358166,-3.370525,-4.743990,-6.724052,-8.479655,4.742925,-4.108339,-3.656143,1.209326,9.904785,7.477674,-1.673612,3.116881,-4.154010,6.360613,5.778458,4.418881,9.103672,-9.438656,2.114124,8.549661,3.165460,8.495472,4.121526,5.755630,-4.559324,8.009813,2.073530,0.386286,-7.264713,0.036966,-9.914990,0.401043,-9.928542,-2.511859,-5.131613,-6.309449,1.349482,-9.807564,5.824110,4.274001,-8.634123,-6.255565,-5.407241,3.524432,-7.351760,-5.951666,0.588099,-2.495131,-0.870834,-1.590883,-4.913815,-9.956144,-6.093210,-5.996011,-2.157763,7.465856,-9.947669,-5.748207,2.121586,-0.546094,-3.024350,-4.612969,-6.272347,-6.866294,0.984265,-1.080123,0.291096,0.310759,6.837701,1.512743,-3.701006,-1.874347,-0.749779,1.795114,-0.280112,7.712877,-0.677336,1.293667,-8.957343,9.119435,-0.062343,7.702144,-6.860497,9.142945,-2.692617,3.591813,2.332876,-9.013634,3.250466,4.565163,5.649976,-5.368545,-7.066273,-8.379421,6.478442,6.774660,4.176490,-9.445167,1.561898,5.009302,-2.144402,-9.829193,-3.484640,-6.886730,-7.523407,-4.904858,-7.487146,-1.854298,-3.796952,-9.042389,-9.426901,6.744683,-0.899781,-0.947918,7.444681,-7.854774,-6.498256,9.134898,2.921685,-2.226554,0.457668,9.165348,-3.462664,-2.733242,-2.512364,-9.988119,-9.390457,0.385457,8.140062,4.439639,7.065608,0.840964,-0.329960,7.696970,-0.365592,-7.472418,-0.294317,1.042172,9.901799,7.202433,-1.538455,-5.500285,2.781337,-2.522501,9.353345,9.013159,6.343289,5.991428,4.219254,6.031724,-2.833057,0.543557,7.800910,2.692520,-9.161923,-8.763215,8.861192,-9.567903,-1.815459,2.833316,-0.985628,0.798918,9.287946,3.412368,5.592510,-3.027173,-9.467516,-9.854309,2.126176,-2.162491,-6.098406,-6.294956,-7.988983,-9.680115,0.823813,-2.539228,-0.459161,3.531561,-1.122338,-6.924593,9.266105,-7.304054,-6.137408,4.398687,-6.564985,0.715426,1.469329,-4.327197,-3.302138,-6.915423,8.900309,9.009621,-2.781059,4.818341,-7.346416,-7.621488,5.186250,3.299472,4.135465,6.180781,5.634065,-4.010687,-7.665292,-0.158498,5.376389,4.277017,0.222055,-5.468190,1.461739,5.432442,1.276328,-9.099053,-1.642229,-6.754569,-0.350809,6.444498,5.154272,-6.916357,5.714934,-0.473580,-7.279796,6.034740,9.767540,0.665594,3.059665,-0.355276,6.327674,8.698152,-1.143710,9.852511,3.065840,-8.138915,7.330693,7.856423,6.750180,2.928176,2.094945,-5.747071,0.643293,3.925017,-2.185432,4.547999,-3.198305,0.271703,5.644287,-8.292286,9.444689,2.098383,9.597153,3.154223,-2.650240,-1.485599,1.039041,-9.255563,9.175887,-7.996418,8.117746,2.415582,-3.735246,5.223218,6.652878,8.763412,-8.362067,9.075779,4.312097,0.498627,-6.696496,1.477044,-4.232181,-6.512124,3.965317,0.829071,-0.382373,0.099937,3.355272,-2.182361,-7.411440,7.547094,-0.601309,-3.075530,-1.715269,-2.813503,-0.319440,-0.914973,1.797797,-2.943798,5.924610,-0.909619,-6.435502,8.970691,-8.241547,-8.426651,0.678610,8.659740,3.568134,9.965489,7.586001,-2.850356,8.376312,-4.878336,5.552296,6.968450,-6.566932,-7.742823,0.748155,-4.181916,-0.805080,-3.006399,7.280051,5.400469,-3.796872,-4.282933,-2.991163,3.784058,4.408486,6.944997,-7.290759,-5.387794,-3.475727,3.335185,-4.478035,1.871701,-5.306287,-7.851505,2.778548,-7.933220,-0.642421,-3.555276,5.171032,-9.253179,6.750202,4.234264,-7.479641,1.290605,3.254353,1.045167,-5.097454,-8.238780,-6.528608,-7.942532,-6.088163,7.966769,2.702667,-4.437384,2.547514,-1.440686,-6.477511,-4.934278,1.049960,5.173193,-4.902270,-1.740103,7.656084,-7.189175,3.174913,1.802752,3.951252,-6.779675,-2.011530,-5.204047,8.926810,5.949084,-0.807951,-7.224282,5.248571,-9.965341,-2.539412,-7.208047,2.479704,-3.868697,-5.180987,9.878433,-1.456190,-0.860070,-7.787650,0.679881,7.223150,3.216131,-5.036397,7.854037,4.139312,-3.211754,-5.978915,4.519078,6.554848,-3.726283,0.734234,7.144592,6.391135,8.796724,-3.751809,9.835877,8.206975,-5.663687,9.502812,5.228967,9.181336,-3.050665,-1.739839,-1.146207,6.080663,3.051360,-8.755559,9.239867,5.172881,7.877197,0.901636,8.716475,6.611700,-7.766193,-5.663506,3.111435,4.441192,2.229663,2.960489,8.741770,5.065841,8.284063,-2.655761,1.067372,1.471110,0.718228,-5.214872,0.205784,-1.486978,-7.940657,9.813547,7.552247,1.769537,1.406217,-1.694645,-1.551033,3.335761,4.025601,-2.246246,4.663516,5.605501,-7.309447,-1.848900,1.731139,7.225311,2.204151,0.698158,-4.500944,3.013259,7.316556,-8.742769,9.911577,1.101640,9.151625,-5.503797,-7.653147,-3.219914,9.700499,-8.948531,1.455759,-5.090598,2.936584,9.026118,-9.973449,1.633314,-7.297433,1.197937,1.402450,-8.201518,-4.035172,-4.339841,-6.880492,0.538788,6.096900,-9.009151,-6.129237,3.163875,-8.207057,2.324093,7.662190,-1.861319,-4.857638,-8.053684,8.091891,9.153761,4.082308,-0.905471,-3.516009,9.226756,9.777939,-0.317617,-8.303457,0.200100,1.115698,7.704348,2.409168,-4.138158,-1.676703,-2.678245,-1.148159,2.653836,4.998304,1.780043,-3.014622,7.937571,0.635240,1.854235,5.414252,-5.878943,8.430282,8.034373,-4.303841,-5.491281,-0.569872,-5.671016,-4.613849,-5.344978,0.350946,7.592124,-4.517196,6.914828,8.645087,2.538985,-9.203711,1.236303,-7.703340,-9.042401,-3.704401,7.796347,7.712483,5.322516,1.852207,2.959925,-8.076362,-3.077442,0.596787,-2.697652,-2.332563,8.838444,6.488308,-3.512160,-1.523733,-7.191395,-7.851762,5.554468,6.386661,8.606412,8.752079,5.482336,-2.567508,-4.301848,-6.446131,-0.266710,4.384847,7.453310,-9.280476,-9.675215,-6.987747,3.243317,-8.572013,9.551562,-4.015515,-9.598751,8.272551,5.695846,-5.877585,-6.360998,-1.927865,8.697863,-0.372105,-9.838956,8.116349,4.880100,-0.004596,-0.821862,-6.640011,-2.183448,-4.927174,-0.295722,3.075715,7.704454,3.575630,-7.858798,-2.010565,1.037369,-3.841939,6.930758,-8.598724,3.239920,-2.774950,7.026762,0.336455,5.520164,2.071457,-8.797376,5.150528,-6.383163,4.476196,-8.295196,-1.559838,-4.978038,6.935502,-6.390454,4.400424,-1.519569,9.160389,-6.823909,-1.009294,7.849030,4.756176,-3.675710,8.315957,5.433658,4.309727,6.302827,-0.757788,-4.883158,6.704586,3.510584,-6.748578,-0.564838,-0.898608,9.560869,-2.978928,-6.426710,-4.506544,-5.048850,2.048600,-7.982186,3.154773,-8.243196,3.559015,-0.412753,-6.095914,0.396223,0.878894,-4.033689,-5.340619,-3.063554,-4.676413,-3.626669,4.891577,3.687152,2.862750,9.132697,3.776313,-0.415345,-4.126769,6.482652,-1.231890,-8.759230,3.774904,3.884515,-3.925143,-0.578243,-7.270793,8.653330,-1.092068,-4.563526,-0.208289,-3.521995,-3.513515,-5.792115,1.721566,5.916667,3.558993,-7.310963,-2.766990,-5.453415,1.292756,-5.841125,-6.237232,-8.375738,-8.865631,-7.538248,-9.612374,-3.539566,7.428725,-6.205775,-9.333540,-6.882972,7.921696,-0.750207,5.956521,-8.586195,-1.133336,-4.432148,-8.880117,7.395818,-4.649583,5.520902,-6.540724,0.156396,-4.521029,9.130049,4.610869,-2.300512,-1.116772,-3.396210,-5.710017,-5.498282,3.349497,6.807400,9.430730,-0.238152,-3.014930,7.714118,0.756938,-4.761064,-3.566404,3.846610,5.764365,-9.699962,-7.847631,3.986344,4.145773,2.490392,6.589491,-9.005106,7.566336,-2.829028,-1.157154,6.020675,-4.367879,2.913887,3.882270,-6.215127,4.838891,-2.041191,7.647652,-1.053190,9.864733,-6.680592,-3.878297,-0.552154,7.912686,0.295850,-1.842545,-6.189544,-3.925171,8.239552,-9.495703,-4.992223,-9.578796,6.892128,8.320042,-4.108284,-4.525581,7.215645,9.199912,-1.433258,-1.985371,-4.866028,-5.566238,0.525778,-3.009706]], dtype = "float32")#candidate|6586|(1, 936)|const|float32
call_6585 = relay.TupleGetItem(func_4108_call(relay.reshape(const_6586.astype('float32'), [13, 12, 6])), 0)
call_6587 = relay.TupleGetItem(func_4110_call(relay.reshape(const_6586.astype('float32'), [13, 12, 6])), 0)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_6590 = func_5853_call()
call_6591 = func_5853_call()
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_6596 = relay.TupleGetItem(func_4991_call(), 3)
call_6597 = relay.TupleGetItem(func_4993_call(), 3)
output = relay.Tuple([uop_6576,call_6585,const_6586,call_6590,call_6596,])
output2 = relay.Tuple([uop_6578,call_6587,const_6586,call_6591,call_6597,])
func_6599 = relay.Function([], output)
mod['func_6599'] = func_6599
mod = relay.transform.InferType()(mod)
output = func_6599()
func_6600 = relay.Function([], output)
mutated_mod['func_6600'] = func_6600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5666_call = mod.get_global_var('func_5666')
func_5667_call = mutated_mod.get_global_var('func_5667')
call_6692 = func_5666_call()
call_6693 = func_5666_call()
func_1154_call = mod.get_global_var('func_1154')
func_1156_call = mutated_mod.get_global_var('func_1156')
var_6695 = relay.var("var_6695", dtype = "bool", shape = (160,))#candidate|6695|(160,)|var|bool
call_6694 = func_1154_call(relay.reshape(var_6695.astype('bool'), [5, 16, 2]))
call_6696 = func_1154_call(relay.reshape(var_6695.astype('bool'), [5, 16, 2]))
output = relay.Tuple([call_6692,call_6694,var_6695,])
output2 = relay.Tuple([call_6693,call_6696,var_6695,])
func_6697 = relay.Function([var_6695,], output)
mod['func_6697'] = func_6697
mod = relay.transform.InferType()(mod)
mutated_mod['func_6697'] = func_6697
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6698 = relay.var("var_6698", dtype = "bool", shape = (160,))#candidate|6698|(160,)|var|bool
func_6697_call = mutated_mod.get_global_var('func_6697')
call_6699 = func_6697_call(var_6698)
output = call_6699
func_6700 = relay.Function([var_6698], output)
mutated_mod['func_6700'] = func_6700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_6742 = func_5853_call()
call_6743 = func_5853_call()
output = call_6742
output2 = call_6743
func_6746 = relay.Function([], output)
mod['func_6746'] = func_6746
mod = relay.transform.InferType()(mod)
mutated_mod['func_6746'] = func_6746
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6746_call = mutated_mod.get_global_var('func_6746')
call_6747 = func_6746_call()
output = call_6747
func_6748 = relay.Function([], output)
mutated_mod['func_6748'] = func_6748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4360_call = mod.get_global_var('func_4360')
func_4361_call = mutated_mod.get_global_var('func_4361')
call_6754 = func_4360_call()
call_6755 = func_4360_call()
var_6756 = relay.var("var_6756", dtype = "bool", shape = (6, 4, 2))#candidate|6756|(6, 4, 2)|var|bool
bop_6757 = relay.logical_or(call_6754.astype('bool'), relay.reshape(var_6756.astype('bool'), relay.shape_of(call_6754))) # shape=(6, 4, 2)
bop_6760 = relay.logical_or(call_6755.astype('bool'), relay.reshape(var_6756.astype('bool'), relay.shape_of(call_6755))) # shape=(6, 4, 2)
func_1154_call = mod.get_global_var('func_1154')
func_1156_call = mutated_mod.get_global_var('func_1156')
var_6770 = relay.var("var_6770", dtype = "bool", shape = (160,))#candidate|6770|(160,)|var|bool
call_6769 = func_1154_call(relay.reshape(var_6770.astype('bool'), [5, 16, 2]))
call_6771 = func_1154_call(relay.reshape(var_6770.astype('bool'), [5, 16, 2]))
var_6788 = relay.var("var_6788", dtype = "bool", shape = (5, 16, 2))#candidate|6788|(5, 16, 2)|var|bool
bop_6789 = relay.bitwise_and(call_6769.astype('uint8'), relay.reshape(var_6788.astype('uint8'), relay.shape_of(call_6769))) # shape=(5, 16, 2)
bop_6792 = relay.bitwise_and(call_6771.astype('uint8'), relay.reshape(var_6788.astype('uint8'), relay.shape_of(call_6771))) # shape=(5, 16, 2)
output = relay.Tuple([bop_6757,var_6770,bop_6789,])
output2 = relay.Tuple([bop_6760,var_6770,bop_6792,])
func_6804 = relay.Function([var_6756,var_6770,var_6788,], output)
mod['func_6804'] = func_6804
mod = relay.transform.InferType()(mod)
var_6805 = relay.var("var_6805", dtype = "bool", shape = (6, 4, 2))#candidate|6805|(6, 4, 2)|var|bool
var_6806 = relay.var("var_6806", dtype = "bool", shape = (160,))#candidate|6806|(160,)|var|bool
var_6807 = relay.var("var_6807", dtype = "bool", shape = (5, 16, 2))#candidate|6807|(5, 16, 2)|var|bool
output = func_6804(var_6805,var_6806,var_6807,)
func_6808 = relay.Function([var_6805,var_6806,var_6807,], output)
mutated_mod['func_6808'] = func_6808
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6319_call = mod.get_global_var('func_6319')
func_6321_call = mutated_mod.get_global_var('func_6321')
call_6812 = relay.TupleGetItem(func_6319_call(), 0)
call_6813 = relay.TupleGetItem(func_6321_call(), 0)
output = relay.Tuple([call_6812,])
output2 = relay.Tuple([call_6813,])
func_6816 = relay.Function([], output)
mod['func_6816'] = func_6816
mod = relay.transform.InferType()(mod)
output = func_6816()
func_6817 = relay.Function([], output)
mutated_mod['func_6817'] = func_6817
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6746_call = mod.get_global_var('func_6746')
func_6748_call = mutated_mod.get_global_var('func_6748')
call_6890 = func_6746_call()
call_6891 = func_6746_call()
output = call_6890
output2 = call_6891
func_6896 = relay.Function([], output)
mod['func_6896'] = func_6896
mod = relay.transform.InferType()(mod)
output = func_6896()
func_6897 = relay.Function([], output)
mutated_mod['func_6897'] = func_6897
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5074_call = mod.get_global_var('func_5074')
func_5075_call = mutated_mod.get_global_var('func_5075')
call_6982 = relay.TupleGetItem(func_5074_call(), 0)
call_6983 = relay.TupleGetItem(func_5075_call(), 0)
output = call_6982
output2 = call_6983
func_7003 = relay.Function([], output)
mod['func_7003'] = func_7003
mod = relay.transform.InferType()(mod)
output = func_7003()
func_7004 = relay.Function([], output)
mutated_mod['func_7004'] = func_7004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4656_call = mod.get_global_var('func_4656')
func_4658_call = mutated_mod.get_global_var('func_4658')
call_7029 = func_4656_call()
call_7030 = func_4656_call()
func_1209_call = mod.get_global_var('func_1209')
func_1212_call = mutated_mod.get_global_var('func_1212')
var_7050 = relay.var("var_7050", dtype = "uint64", shape = ())#candidate|7050|()|var|uint64
const_7051 = relay.const([3,-1,-1,8,9,-5,-5,4,-5,-7,-3,-9,-5,6,-4,-6,-8,-1,1,2,3,1,-2,-9,3,-2,-1,3,-2,4,5,-2,8,-3,-3,9,2,5,6,-3,-3,5,7,-2,8,-4,-3,-9,2,-9,7,-2,-1,-1,4,-6,-10,-9,-1,-4,6,-6,-6,1,7,4,10,-10,-2,10,6,3,8,-1,-4,10,6,-8,-2,-2,-8,2,-10,-1,-3,2,-6,7,6,3,-4,-9,-2,3,-5,3,-1,3,5,-8,6,2,-3,-6,-7,-1,3,-3,9,8,-1,9,-4,-5,-8,-1,-1,6,2,-4,-10,-1,-7,7,10,-9,-6,5,5,-1,3,9,5,-7,-7,7,6,-10,2,-8,-3,-5,7,9,10,-7,1,6,-9,-4,-3,-4,1,-3,-1,5,-8,-3,2,9,1,4,1,-10,2,9,-9,6,6,2,10,1,10,7,5,2,3,8,8,6,-3,7,5,1,5,-1,1,-5,6,-10,7,7,-10,3,2,-7,-4,9,8,-3,1,7,5,-2,-1,4,-4,9,-5,-1,-4,5,5,-7,4,-5,5,-9,-4,-3,-3,7,7,1,-10,10,3,2,-9,-10,-1,10,-8,6,9,-1,6,10,-3,5,5,9,-1,7,-10,-3,-3,8,-3,7,4,6,5,-5,-9,4,-8,-4,-4,6,-10,-6,3,6,8,8,1,-4,-10,-7,-1,-2,5,-5,9,-4,4,1,6,3,-3,8,3,-2,-2,9,-3,-2,9,9,3,-6,-5,-4,8,-5,-6,-7,-6,1,10,-1,5,3,-1,1,-6,-10,-5,4,-2,4,-3,-9,10,4,4,-4,9,2,-8,5,-7,6,1,-5,10,-3,8,9,5,-7,1,7,-9,-1,9,10,2,10,-6,8,-2,-9,4,10,3,8,1,5,4,4,1,3,-1,-7,-8,5,6,2,-1,-1,2,-10,7,-10,1,-6,1,8,-2,9,9,-2,7,9,6,4,-9,10,10,-9,-7,7,-6,-10,-9,-8,2,-7,4,6,-4,-2,5,-3,4,-9,-8,-9,-9,-3,-7,-9,3,-9,-10,10,7,10,-4,8,4,-8,-2,-7,7,1,2,-4,-6,3,10,-1,-5,-9,-4,8,-4,10,-5,-1,6,-6,-2,3,-3,-3,2,-2,-2,8,7,4,2,1,9,-10,2,3,-6,3,5,-6,7,-7,-8,7,-3,-9,4,-4,2,10,-2,9,1,1,7,4,3,6,-8,-7,5,6,7,-4,6,2,-9,7,-4,-6,4,-6,-3,8,-5,-2,4,10,10,10,-8,-3,5,6,6,2,-4,-9,-9,2,-6,4,4,9,8,9,2,-4,10,10,-2,8,-1,6,-5,-5,3,-1,1,-1,9,-6,2,2,8,9,-4,-7,-5,-6,1,1,9,3,2,-1,-5,-6,5,-10,7,6,-8,8,-7,-4,-4,-4,-9,-2,-10,5,-10,-2,-6,1,-2,7,-9,1,-7,-6,-2,-5,5,3,10,1,-7,-6,-5,-8,-3,7,10,-8,5,-2,-4,1,4,-7,1,6,-2,5,-9,-4,-8,4,1,8,6,4,-5,-9,8,-3,5,1,4,-7,-6,5,4,-3,3,-2,1,9,10,5,6,-8,-7,-10,-2,-4,-10,4,10,10,1,2,-7,-8,-1,-4,10,9,1,-8,8,3,3,-3,-5,6,-4,-7,-1,7,-7,10,5,5,-3,-8,7,1,9,2,-9,-9,9,4,-3,4,2,-7,5,2,7,9,3,3,-5,5,5,7,-2,-6,1,-2,3,-1,-1,4,-3,1,4,8,-9,3,7,-2,10,1,-7,6,2,8,-8,-1,-9,9,-6,-1,7,3,-4,2,-2,-5,6,8,-9,-3,-3,10,-9,-5,5,4,-10,6,1,-5,-9,-1,-4,-4,9,9,-4,-4,-7,1,-5,-4,1,6,-5,6,-5,-2,-8,-1,-6,9,-1,-6,-1,10,10,-10,3,-5,-1,6,-8,7,7,-2,-10,4,3,-10,4,2,-6,-7,10,-9,4,9,6,-9,3,5,-2,5,-6,2,6,4,-8,-3,6,1,9,-4,-5,-7,4,-4,-10,4,5,-6,3,5,2,10,-9,-7,-3,5,-2,10,4,-4,4,-10,7,-2,-7,-2,4,-6,4,-3,-4,7,-3,-4,1,-3,10,-6,9,-7,-4,5,10,-10,7,-9,4,-9,-3,3,-4,8,10,-1,1,-7,-5,-4,-6,-7,-10,5,4,-10,-8,-10,-1,-6,-4,2,-3,2,-1,-4,3,-3,-10,6,4,-3,-8,7,-3,10,10,-3,-1,2,3,3,7,-8,4,-3,9,3,8,9,-2,9,3,2,8,7,10,-9,4,6,-1,-8,-2,8,-8,-1,7,2,-3,3,-10,5,10,7,-1,-2,1,-1,-1,-4,9,1,7,-6,-8,2,-9,8,-10,3,-9,4,-7,4,7,8,3,-9,-3,-1,-6,-8,9,-6,4,-10,6,-2,10,-4,-6,-2,2,-9,8,5,-2,-1,-1,-10,6,-8,6,9,8,5,-6,2,10,-2,-3,4,-1,4,2,7,-4,4,6,5,7,-7,7,-10,3,7,10,-1,6,5,9,-8,8,4,3,10,-1,2,6,-5,3,-5,3,4,-9,-7,-2,5,5,5,-9,8,10,8,-2,-5,6,6,3,-9,10,5,1,1,7,5,-1,-6,5,-6,-8,9,-2,1,6,10,-8,-9,4,4,-8,-9,-4,-9,-10,5,8,10,-1,-3,-3,-7,9,9,-8,7,3,-2,-5,-7,5,-5,-6,-3,7,5,1,2,-8,5,5,-9,-10,-7,-5,1,8,3,10,2,1,9,9,-4,-2,2,-1,-6,-5,5,7,10,-2,9,8,-9,-1,3,-10,7,-5,7,-2,-4,-6,-7,-7,-10,9,-8,3,9,8,3,8,7,-1,-9,9,-1,4,-10,4,-9,1,1,-5,-9,-4,-10,-2,-8,-3,-5,-10,-9,-4,-7,-1,3,-4,-8,-7,-3,-9,3,-9,-4,8,7,8,4,7,2,8,1,-10,-2], dtype = "uint64")#candidate|7051|(1152,)|const|uint64
call_7049 = relay.TupleGetItem(func_1209_call(relay.reshape(var_7050.astype('uint64'), []), relay.reshape(const_7051.astype('uint64'), [8, 16, 9]), ), 0)
call_7052 = relay.TupleGetItem(func_1212_call(relay.reshape(var_7050.astype('uint64'), []), relay.reshape(const_7051.astype('uint64'), [8, 16, 9]), ), 0)
output = relay.Tuple([call_7029,call_7049,var_7050,const_7051,])
output2 = relay.Tuple([call_7030,call_7052,var_7050,const_7051,])
func_7053 = relay.Function([var_7050,], output)
mod['func_7053'] = func_7053
mod = relay.transform.InferType()(mod)
var_7054 = relay.var("var_7054", dtype = "uint64", shape = ())#candidate|7054|()|var|uint64
output = func_7053(var_7054)
func_7055 = relay.Function([var_7054], output)
mutated_mod['func_7055'] = func_7055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_7112 = func_5853_call()
call_7113 = func_5853_call()
output = relay.Tuple([call_7112,])
output2 = relay.Tuple([call_7113,])
func_7117 = relay.Function([], output)
mod['func_7117'] = func_7117
mod = relay.transform.InferType()(mod)
output = func_7117()
func_7118 = relay.Function([], output)
mutated_mod['func_7118'] = func_7118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6319_call = mod.get_global_var('func_6319')
func_6321_call = mutated_mod.get_global_var('func_6321')
call_7195 = relay.TupleGetItem(func_6319_call(), 0)
call_7196 = relay.TupleGetItem(func_6321_call(), 0)
uop_7241 = relay.sigmoid(call_7195.astype('float64')) # shape=(6, 4, 2)
uop_7243 = relay.sigmoid(call_7196.astype('float64')) # shape=(6, 4, 2)
output = uop_7241
output2 = uop_7243
func_7271 = relay.Function([], output)
mod['func_7271'] = func_7271
mod = relay.transform.InferType()(mod)
output = func_7271()
func_7272 = relay.Function([], output)
mutated_mod['func_7272'] = func_7272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_7281 = func_5853_call()
call_7282 = func_5853_call()
output = call_7281
output2 = call_7282
func_7283 = relay.Function([], output)
mod['func_7283'] = func_7283
mod = relay.transform.InferType()(mod)
output = func_7283()
func_7284 = relay.Function([], output)
mutated_mod['func_7284'] = func_7284
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_7298 = relay.TupleGetItem(func_4386_call(), 0)
call_7299 = relay.TupleGetItem(func_4388_call(), 0)
func_4272_call = mod.get_global_var('func_4272')
func_4276_call = mutated_mod.get_global_var('func_4276')
var_7308 = relay.var("var_7308", dtype = "float64", shape = (16,))#candidate|7308|(16,)|var|float64
var_7309 = relay.var("var_7309", dtype = "float64", shape = (160,))#candidate|7309|(160,)|var|float64
call_7307 = relay.TupleGetItem(func_4272_call(relay.reshape(var_7308.astype('float64'), [1, 2, 8]), relay.reshape(var_7309.astype('float64'), [10, 2, 8]), ), 1)
call_7310 = relay.TupleGetItem(func_4276_call(relay.reshape(var_7308.astype('float64'), [1, 2, 8]), relay.reshape(var_7309.astype('float64'), [10, 2, 8]), ), 1)
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_7322 = relay.TupleGetItem(func_4991_call(), 0)
call_7323 = relay.TupleGetItem(func_4993_call(), 0)
output = relay.Tuple([call_7298,call_7307,var_7308,var_7309,call_7322,])
output2 = relay.Tuple([call_7299,call_7310,var_7308,var_7309,call_7323,])
func_7350 = relay.Function([var_7308,var_7309,], output)
mod['func_7350'] = func_7350
mod = relay.transform.InferType()(mod)
mutated_mod['func_7350'] = func_7350
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7350_call = mutated_mod.get_global_var('func_7350')
var_7352 = relay.var("var_7352", dtype = "float64", shape = (16,))#candidate|7352|(16,)|var|float64
var_7353 = relay.var("var_7353", dtype = "float64", shape = (160,))#candidate|7353|(160,)|var|float64
call_7351 = func_7350_call(var_7352,var_7353,)
output = call_7351
func_7354 = relay.Function([var_7352,var_7353,], output)
mutated_mod['func_7354'] = func_7354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4599_call = mod.get_global_var('func_4599')
func_4601_call = mutated_mod.get_global_var('func_4601')
call_7364 = relay.TupleGetItem(func_4599_call(), 0)
call_7365 = relay.TupleGetItem(func_4601_call(), 0)
func_1950_call = mod.get_global_var('func_1950')
func_1953_call = mutated_mod.get_global_var('func_1953')
const_7385 = relay.const([False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False], dtype = "bool")#candidate|7385|(180,)|const|bool
call_7384 = relay.TupleGetItem(func_1950_call(relay.reshape(const_7385.astype('bool'), [6, 30])), 2)
call_7386 = relay.TupleGetItem(func_1953_call(relay.reshape(const_7385.astype('bool'), [6, 30])), 2)
func_6746_call = mod.get_global_var('func_6746')
func_6748_call = mutated_mod.get_global_var('func_6748')
call_7397 = func_6746_call()
call_7398 = func_6746_call()
output = relay.Tuple([call_7364,call_7384,const_7385,call_7397,])
output2 = relay.Tuple([call_7365,call_7386,const_7385,call_7398,])
func_7399 = relay.Function([], output)
mod['func_7399'] = func_7399
mod = relay.transform.InferType()(mod)
output = func_7399()
func_7400 = relay.Function([], output)
mutated_mod['func_7400'] = func_7400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4991_call = mod.get_global_var('func_4991')
func_4993_call = mutated_mod.get_global_var('func_4993')
call_7468 = relay.TupleGetItem(func_4991_call(), 1)
call_7469 = relay.TupleGetItem(func_4993_call(), 1)
output = relay.Tuple([call_7468,])
output2 = relay.Tuple([call_7469,])
func_7474 = relay.Function([], output)
mod['func_7474'] = func_7474
mod = relay.transform.InferType()(mod)
output = func_7474()
func_7475 = relay.Function([], output)
mutated_mod['func_7475'] = func_7475
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4386_call = mod.get_global_var('func_4386')
func_4388_call = mutated_mod.get_global_var('func_4388')
call_7479 = relay.TupleGetItem(func_4386_call(), 0)
call_7480 = relay.TupleGetItem(func_4388_call(), 0)
func_4513_call = mod.get_global_var('func_4513')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_7501 = relay.TupleGetItem(func_4513_call(), 0)
call_7502 = relay.TupleGetItem(func_4514_call(), 0)
func_6513_call = mod.get_global_var('func_6513')
func_6515_call = mutated_mod.get_global_var('func_6515')
call_7505 = func_6513_call()
call_7506 = func_6513_call()
func_2428_call = mod.get_global_var('func_2428')
func_2430_call = mutated_mod.get_global_var('func_2430')
const_7515 = relay.const([4,-4,3,-4,-9,5,-2,-1,7,5,-2,-10,8,3,5,-5,-9,3,8,-6,2,-5,2,-3,7,-9,-6,3,2,-5,5,3,-9,-3,6,4,-3,-4,-4,-3,7,-9,10,5,6,-8,2,-5,2,9,-9,5,1,-6,6,-5,1,6,-4,3,2,2,-5,-4,7,4,-6,10,8,-2,5,-9,-9,-8,-7,6,-2,-3,5,5,-1,-10,8,4,-5,-2,4,-7,-6,10,5,3,4,4,3,3,-8,1,-4,2,3,-2,-5,2,3,5,9,3,3,-3,9,-8,-3,-1,-6,-8,8,8,6,-7,5,7,1,5,9,8,-6,-3,7,-7,10,4,3,3,5,10,-5,1,-9,8,6,8,-4,2,6,6,5,5,-3,1,10,7,-10,-1,-7,-1,-7,-7,-9,-4,-10,-2,-10,7,7,3,-1,3,1,2,-3,2,-9,2,-10,2,5,-7,1,10,1,-5,8,-4,2,-6,9,6,7,-6,2,-8,-4,-4,10,4,1,-4,9,-7,-5,7,-1,4,1,-6,9,-4,9,-9,3,-10,5,3,-3,-5,3,2,7,3,-7,-2,5,1,-5,-4,-6,-3,10,2,-8,4,9,7,-2,-3,-3,5,-3,1,7,-6,-10,3,-9,-5,-2,-8,5,-6,-8,-7,-5,9,9,8,5,-10,-5,7,7,-10,-9,1,-6,2,-7,-4,-1,2,5,9,-6,-7,1,-6,5,9,-4,9,-7,-5,10,-7,-4,-3,1,-9,9,1,-9,2,2,-8,-4,-8,8,5,5,-8,-5,8,-3,6,-2,-3,1,-2,9,-1,7,-3,-5,4,4,-8,5,6,10,9,6,-2,-9,2,-4,-10,6,-7,-4,10,-5,7,-2,-7,5,-6,-7,-8,3,-4,-6,-10,-8,1,10,-9,10,6,-9,6,-6,-4,1,1,3,2,10,10,-1,-9,4,7,-4,-8,5,-6,6,-5,-2,-2,-2,4,6,-7,9,-9,5,-9,-8,-3,-8,-5,-9,-3,7,-9,2,8,-9,5,4,-1,10,8,-4,3,10,-10,6,-3,1,-3,-5,-10,-7,-4,-1,-10,4,10,-6,4,9,-6,-7,10,-1,10,-4,-2,-9,4,1,2,-9,-5,-5,3,-1,1,-10,-8,5,-10,-10,2,9,9,9,5,-2,-4,-9,1,8,10,4,-2,5,8,4,-5,7,3,5,-3,-10,4,-4,9,-8,3,-6,8,6,-9,5,5,7,-7,8,9,-7,-9,-9,-6,-9,6,-3,-9,10,3,-1,9,-6,10,6,-4,-2,5,-1,-8,-9,6,-9,-5,2,-6,4,-8,-4,6,8,5,3,3,1,4,6,-2,-4,7,4,-6,-1,-1,-7,-6,-9,6,1,3,3,-1,-7,5,1,7,5,4,-2,-2,-3,3,-9,1,-10,-1,-4,-3,7,-2,2,-4,7,-5,-4,-7,5,-9,10,-4,8,5,-8,-3,-6,3,-8,-5,4,3,6,5,1,6,7,4,-3,-7,7,8,-9,-3,10,2,-9,2,-5,7,-4,-9,-10,6,4,-8,5,6,9,-9,-7,-4,5,2,-6,8,-1,-1,-2,8,-10,6,-4,-9,10,-3,8,3,-5,5,-3,9,2,7,-7,-9,-1,2,5,-8,9,2,-1,1,10,-7,-1,-7,8,-6,-10,2,9,-9,-5,-9,-10,-2,-6,7,2,-8,-2,-5,-2,-3,-5,-8,-1,9,5,2,1,-8,-8,-4,9,-3,-1,-1], dtype = "int16")#candidate|7515|(660,)|const|int16
call_7514 = relay.TupleGetItem(func_2428_call(relay.reshape(const_7515.astype('int16'), [5, 132])), 3)
call_7516 = relay.TupleGetItem(func_2430_call(relay.reshape(const_7515.astype('int16'), [5, 132])), 3)
func_4482_call = mod.get_global_var('func_4482')
func_4489_call = mutated_mod.get_global_var('func_4489')
const_7537 = relay.const(True, dtype = "bool")#candidate|7537|()|const|bool
var_7538 = relay.var("var_7538", dtype = "bool", shape = (1056,))#candidate|7538|(1056,)|var|bool
var_7539 = relay.var("var_7539", dtype = "bool", shape = (160,))#candidate|7539|(160,)|var|bool
var_7540 = relay.var("var_7540", dtype = "int8", shape = (576,))#candidate|7540|(576,)|var|int8
var_7541 = relay.var("var_7541", dtype = "float32", shape = (3600,))#candidate|7541|(3600,)|var|float32
const_7542 = relay.const([1.454172,-6.237436,-4.071883,1.394820,9.363330,-5.117057,-1.186825,7.430632,1.770030,6.695131,-6.911143,9.056305,3.959568,-3.211935,1.008485,-1.457071,-6.214797,-3.772325,0.638735,-7.935813,3.943289,-1.894306,2.820549,-2.675408,-1.492296,-3.141875,4.157189,-4.186462,-2.048818,8.914461,-0.626915,1.942814,-3.446896,6.349204,0.253117,-0.228806,3.312742,-5.174075,-9.691216,9.574879,-5.517280,8.613298,7.642677,7.851474,-9.364010,-0.781487,-9.874871,-6.715874,0.354372,-2.726217,3.051682,3.387369,-4.244666,9.257720,4.967068,0.863500,7.136307,8.565391,-2.172338,-7.471612,3.878300,0.021387,-2.318477,-4.654535,-2.271757,-6.759485,0.577006,-7.279015,8.558097,-5.349265,-9.940713,6.613158,-7.955969,3.921201,2.632533,-0.004794,-5.874177,-5.924434,1.806286,-1.546357,0.181094,3.080858,-5.881909,-0.332538,-8.672057,-3.693391,4.550327,-7.456693,-1.206228,-0.803053,2.975118,-1.434473,7.765053,2.834928,1.549547,-0.558805,-0.466374,0.640762,2.580584,6.157416,-6.900125,-4.726422,2.595608,-4.564731,-8.696625,2.292155,8.889943,6.186378,-4.671188,1.573639,-2.633629,-3.417716,7.711374,-1.471923,-5.378941,-8.288144,5.165993,-0.435555,0.222512,5.678928,2.262134,-1.433206,-4.843284,9.617013,-2.295032,7.484570,-0.841399,5.560100,6.444579,-3.442290,4.691089,3.083864,-3.905015,1.017840,-8.237880,3.819403,2.896050,-4.272025,-9.705585,-4.072888,-2.696913,9.888437,-6.066540,-5.854927,-9.762914,1.209726,-3.009983,6.175148,-0.237648,-9.150506,3.869022,-5.629618,1.209763,-3.817617,9.922349,-7.033660,-4.605821,-0.308863,4.875289,3.300999,-7.753700,0.214041,2.183097,9.922534,-1.675215,-8.448586,0.318448,-9.673307,3.342316,-2.342632,-6.311871,-5.112016,7.658092,0.728884,4.693273,-4.189505,2.787663,-4.863705,-3.361764,-1.065478,-7.840103,-5.438333,7.251631,-4.042642,-2.035669,9.981158,-6.757474,6.405961,9.705457,-2.179472,6.356996,-5.349328,-5.536338,2.297639,-7.981585,1.378300,-8.409084,-9.391107,4.142934,-0.675814,-2.482204,-7.125354,6.854364,-2.215869,-4.877766,-0.330944,3.795499,-3.014428,5.160118,5.750767,0.961396,-8.525252,-1.275280,8.790954,-7.955740,5.293737,-5.006652,4.605070,-6.527360,-3.671934,-0.116184,-3.503133,6.531119,2.969344,2.700876,-7.268524,-1.425377,-6.444527,9.130143,-4.727295,-6.421987,-5.989468,9.709388,-0.548396,3.444956,-4.232715,6.693848,-8.590359,8.919511,-2.568689,-1.490580,2.401877,9.140166,5.905497,3.034528,-9.212399,-1.400576,-6.406611,-8.202600,8.242075,1.999672,0.748303,-1.738934,9.899038,-1.176914,-3.801310,-2.384226,5.648682,-0.492772,5.423509,-6.186363,1.020294,-0.751007,-7.729733,-1.868435,8.685138,9.829414,6.703167,-8.554722,4.761142,-9.446762,2.892195,0.410638,-6.273241,5.132214,1.025915,-0.240025,-1.984312,9.463887,0.786288,-7.354879,3.859691,-6.808653,-1.731165,-5.549502,5.434499,1.750856,4.064399,4.253012,-7.507616,4.545053,-5.833047,-4.764173,0.816321,9.360673,-2.940313,9.411659,8.089208,-5.297301,-4.614256,1.841875,3.694388,-1.178783,8.332778,-8.978289,-8.463138,0.643202,3.000095,-2.857319,9.387106,-9.758284,9.500335,-9.346267,1.189692,-9.034575,3.628381,8.611543,8.177593,7.139067,7.913316,-7.752620,-5.263051,-2.434390,-3.768779,-3.074718,-5.535302,6.872866,-7.863031,-7.124264,-0.889410,4.925629,-0.630227,-1.498204,-8.366981,-5.179451,5.782441,9.651012,-0.678528,-8.835266,-4.596521,8.321385,3.069577,0.469149,-6.377359,5.752955,-4.205708,-3.971072,9.727907,-2.385076,-8.576417,6.415794,-8.678433,2.998697,-3.116589,3.695481,-0.758576,2.638818,0.683796,4.662029,-1.943919,-2.531290,7.185269,4.401745,6.634572,-1.401376,-3.371661,8.328256,6.526612,6.201077,-9.621225,-1.044749,0.786054,-7.850630,-3.005489,-4.157110,-4.263575,-2.446399,6.976938,-1.809913,1.932686,0.707717,-2.801960,-9.365831,9.847204,1.854381,-5.770314,1.342139,5.751191,-3.295623,6.945250,-6.117696,1.160260,-1.915996,-8.045737,6.705191,2.442548,7.542574,-3.615607,1.914742,-0.041970,9.473160,1.272812,-5.514364,9.875854,-7.500347,-0.337265,-6.264907,9.619040,-5.071935,-0.685715,-0.596932,-6.201517,2.752291,6.289339,5.473991,-2.825898,1.500620,9.406285,-8.536399,-0.605097,8.659714,-8.241043,7.245249,-0.930162,3.037127,9.555478,5.383156,-3.266187,-9.019724,0.602579,0.179011,2.316386,7.094770,-2.437029,9.281181,1.119422,7.328891,-5.583002,5.511272,4.060778,7.201622,-3.383657,-6.281677,-2.806159,1.077228,-4.937194,6.093780,6.268299,-3.451636,-1.333826,-0.679418,9.888248,6.259378,-0.794711,-3.474086,-7.692280,1.811083,-6.704283,8.952027,-8.408466,1.614073,1.463157,-7.498522,8.434558,-7.845501,-2.461238,2.810299,6.375109,-9.395649,-0.775593,3.753157,-8.523120,4.172621,-7.424386,6.550604,9.485332,-1.860104,6.939977,3.072650,9.270340], dtype = "float32")#candidate|7542|(480,)|const|float32
call_7536 = relay.TupleGetItem(func_4482_call(relay.reshape(const_7537.astype('bool'), []), relay.reshape(var_7538.astype('bool'), [11, 6, 16]), relay.reshape(var_7539.astype('bool'), [160,]), relay.reshape(var_7540.astype('int8'), [576,]), relay.reshape(var_7541.astype('float32'), [3600,]), relay.reshape(const_7542.astype('float32'), [480,]), ), 7)
call_7543 = relay.TupleGetItem(func_4489_call(relay.reshape(const_7537.astype('bool'), []), relay.reshape(var_7538.astype('bool'), [11, 6, 16]), relay.reshape(var_7539.astype('bool'), [160,]), relay.reshape(var_7540.astype('int8'), [576,]), relay.reshape(var_7541.astype('float32'), [3600,]), relay.reshape(const_7542.astype('float32'), [480,]), ), 7)
output = relay.Tuple([call_7479,call_7501,call_7505,call_7514,const_7515,call_7536,const_7537,var_7538,var_7539,var_7540,var_7541,const_7542,])
output2 = relay.Tuple([call_7480,call_7502,call_7506,call_7516,const_7515,call_7543,const_7537,var_7538,var_7539,var_7540,var_7541,const_7542,])
func_7561 = relay.Function([var_7538,var_7539,var_7540,var_7541,], output)
mod['func_7561'] = func_7561
mod = relay.transform.InferType()(mod)
var_7562 = relay.var("var_7562", dtype = "bool", shape = (1056,))#candidate|7562|(1056,)|var|bool
var_7563 = relay.var("var_7563", dtype = "bool", shape = (160,))#candidate|7563|(160,)|var|bool
var_7564 = relay.var("var_7564", dtype = "int8", shape = (576,))#candidate|7564|(576,)|var|int8
var_7565 = relay.var("var_7565", dtype = "float32", shape = (3600,))#candidate|7565|(3600,)|var|float32
output = func_7561(var_7562,var_7563,var_7564,var_7565,)
func_7566 = relay.Function([var_7562,var_7563,var_7564,var_7565,], output)
mutated_mod['func_7566'] = func_7566
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5222_call = mod.get_global_var('func_5222')
func_5224_call = mutated_mod.get_global_var('func_5224')
call_7637 = func_5222_call()
call_7638 = func_5222_call()
func_7271_call = mod.get_global_var('func_7271')
func_7272_call = mutated_mod.get_global_var('func_7272')
call_7656 = func_7271_call()
call_7657 = func_7271_call()
output = relay.Tuple([call_7637,call_7656,])
output2 = relay.Tuple([call_7638,call_7657,])
func_7667 = relay.Function([], output)
mod['func_7667'] = func_7667
mod = relay.transform.InferType()(mod)
mutated_mod['func_7667'] = func_7667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7667_call = mutated_mod.get_global_var('func_7667')
call_7668 = func_7667_call()
output = call_7668
func_7669 = relay.Function([], output)
mutated_mod['func_7669'] = func_7669
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6816_call = mod.get_global_var('func_6816')
func_6817_call = mutated_mod.get_global_var('func_6817')
call_7682 = relay.TupleGetItem(func_6816_call(), 0)
call_7683 = relay.TupleGetItem(func_6817_call(), 0)
output = relay.Tuple([call_7682,])
output2 = relay.Tuple([call_7683,])
func_7699 = relay.Function([], output)
mod['func_7699'] = func_7699
mod = relay.transform.InferType()(mod)
mutated_mod['func_7699'] = func_7699
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7699_call = mutated_mod.get_global_var('func_7699')
call_7700 = func_7699_call()
output = call_7700
func_7701 = relay.Function([], output)
mutated_mod['func_7701'] = func_7701
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7399_call = mod.get_global_var('func_7399')
func_7400_call = mutated_mod.get_global_var('func_7400')
call_7720 = relay.TupleGetItem(func_7399_call(), 3)
call_7721 = relay.TupleGetItem(func_7400_call(), 3)
uop_7738 = relay.log2(call_7720.astype('float32')) # shape=(6, 4, 2)
uop_7740 = relay.log2(call_7721.astype('float32')) # shape=(6, 4, 2)
func_2834_call = mod.get_global_var('func_2834')
func_2837_call = mutated_mod.get_global_var('func_2837')
var_7752 = relay.var("var_7752", dtype = "int64", shape = (6,))#candidate|7752|(6,)|var|int64
var_7753 = relay.var("var_7753", dtype = "int64", shape = (144,))#candidate|7753|(144,)|var|int64
call_7751 = relay.TupleGetItem(func_2834_call(relay.reshape(var_7752.astype('int64'), [1, 6, 1]), relay.reshape(var_7753.astype('int64'), [4, 6, 6]), ), 0)
call_7754 = relay.TupleGetItem(func_2837_call(relay.reshape(var_7752.astype('int64'), [1, 6, 1]), relay.reshape(var_7753.astype('int64'), [4, 6, 6]), ), 0)
func_3711_call = mod.get_global_var('func_3711')
func_3719_call = mutated_mod.get_global_var('func_3719')
const_7770 = relay.const([-5.151121,-1.138968,7.545060,-7.250707,-1.896906,9.563876,7.485316,2.015210,8.900411,-7.495887,6.516439,-8.217594,8.934100,-7.739758,-2.181783,9.811102,8.942466,-1.026258,3.451407,0.003403,-5.471987,8.260164,8.563062,1.844752,-6.123990,7.692985,2.288232,-2.719072,8.493670,-3.640063,-7.384060,5.907620,6.579365,-8.890563,-1.238512,-1.602430,-9.784868,-1.087845,2.110686,2.003449,5.270039,0.450396,-7.826848,-1.536668,9.999723,-1.276502,-6.993007,3.157495,7.476456,-8.212645,5.313926,-7.789378,-1.631615,-6.510250,-7.156517,-6.161714,-7.123350,0.438402,2.279292,-0.757534,-0.377732,7.453963,-0.429730,-3.141116,-3.630728,5.142300,6.680708,-5.886199,-8.564330,7.554860,-6.022202,6.413856,-1.462196,7.602695,-4.141902,-6.432732,-1.910223,2.551273,-3.362201,-6.066290,-9.434874,7.311913,1.309804,-3.542369,-8.600648,4.888873,1.176054,9.954619,6.072590,4.327184,-0.333047,-7.540260,7.022353,-2.438667,3.533288,9.032263,-4.787410,5.146885,-6.839289,-7.220626,-5.386818,1.813838,-0.234625,5.862846,9.799723,1.264976,-8.489979,3.280531,5.753985,8.002417,-7.153105,-8.814620,5.622418,1.956028,4.352488,-9.153542,5.277172,9.575982,-5.438115,3.707528,-6.204829,-2.541871,-9.706976,-6.502746,4.503294,-2.592089,-4.171402,-7.577764,-0.317906,6.330565,4.826216,4.140021,0.684597,-2.600818,7.119012,-1.523327,-9.708861,-6.765147,-1.623144,-0.231197,3.898301,4.249752,-6.399187,6.909058,9.606989,-7.696923,8.560058,7.518334,4.554425,-3.424890,8.239780,-6.261851,9.206476,-2.283358,4.821654,3.291361,0.106481,8.417920,3.939379,8.533793,3.998092,4.754603,1.648762,-6.493789,3.360339,-0.878633,3.946788,-0.884246,1.073611,-1.660357,-1.280122,7.619408,-6.794054,6.642887,-5.703009,8.512194,-3.367573,-3.495131,8.815591,-8.366053,6.468445,-2.097902,5.296228,-6.431206,6.212002,-0.023537,-8.488219,-5.773025,-2.059344,-8.689766,-8.015601,-4.751468,8.122162,-5.997953,1.711882,2.998335,5.910073,8.201130,-0.688201,-6.202854,-6.928117,8.223141,-0.333368,-7.593551,5.276392,1.833931,-0.553758,1.022219,-5.874509,-1.946761,-9.124373,0.827403,6.267389,3.593791,-8.492720,-2.007093,-2.536290,7.781434,5.737137,2.286401,0.539757,-4.688767,-7.980022,7.497516,2.483551,6.860279,0.268618,-2.350543,9.254955,-3.102826,4.417188,9.569633,1.432951,-7.840307,-1.049084,8.575104,0.616995,9.280127,5.938413,-9.505442,-7.343970,2.615485,-0.986671,5.992382,3.226297,3.076315,-1.815542,-4.762086,-7.260448,-5.652417,-9.957828,-0.489909,8.555041,4.609567,-8.530578,6.840782,6.333960,-4.325096,-4.570550,-1.146970,8.706625,-0.997683,-1.036704,9.973131,-8.042726,5.703791,-9.237421,-6.719347,5.836140,-8.587610,6.534149,-0.882099,-4.835051,3.279248,-7.487594,-7.403000,7.526593,5.474428,8.893259,-2.277600,-3.897909,-6.188314,1.726014,-7.235648,9.472534,-2.488527,2.980802,9.094427,7.249806,-1.385452,-0.946128,-8.125552,-6.497568,7.064826,-0.346211,9.874487,2.950615,1.786339,-2.941814,2.828975,9.762015,-9.145070,8.157453,-4.574882,-1.038648,-5.306708,-1.807845,4.156347,0.154146,-9.143039,-5.439693,-8.792292,-4.378116,7.697911,-8.709732,-7.216733,-3.358055,-5.094782,-0.815830,8.470420,8.617500,-3.399862,-9.722343,-1.742910,-4.816509,9.060776,-3.952284,8.163064,-5.651775,6.573166,1.823844,-8.878300,5.091463,3.880491,4.695182,-8.317800,9.828244,-1.610406,-6.228551,6.018765,-8.692838,-6.256134,-5.947723,1.407973,-3.769657,2.812504,-0.846804,1.356517,-2.918599,8.069749,3.487437,8.285077,-7.972501,-1.728936,-1.875265,-7.643809,2.025829,-5.927912,-4.994136,-1.059499,-9.276869,-6.304082,7.788151,-9.967805,6.166409,3.041013,-3.107453,3.378758,0.787058,7.461362,8.182815,-6.281994,-6.718659,-3.162937,-3.311526,2.260315,9.486208,1.337402,-5.636536,-9.447572,2.604761,-0.055505,-8.263618,8.654104,-1.395734,-3.656114,-3.325145,-0.076221,5.313080,5.398498,5.656730,-2.145293,-9.468268,9.468055,-8.335281,-7.798641,7.611925,0.015740,-5.543466,9.906891,4.471352,-7.576698,-0.115222,2.654331,-1.746289,2.707961,0.556975,-5.291234,8.158776,-8.537384,1.961358,-2.997254,-7.334531,9.340151,-5.212557,2.342521,-8.017350,3.453714,-7.606797,-9.596699,4.417475,-0.188771,0.611206,-1.442896,-4.687758,-4.721820,-0.887398,-0.708267,-5.367328,1.906676,7.443207,6.391716,4.745822,-3.368756,5.042467,-0.512864,8.081350,8.675682,3.920787,6.065597,6.733833,8.815852,-0.565824,-0.190120,9.795627,6.543660,-3.686004,-0.364475,6.530822,8.182870,4.598603,7.704279,-2.390739,-6.255254,6.027842,2.895100,5.027507,-6.492579,-3.729073,4.289081,-6.662814,-4.787642,7.010734,-2.408289,-5.734233,9.187022,5.913375,-1.850919,5.683377,6.273779,-1.669391,1.346557,-5.294784,-7.514946,-6.606286,-1.554341,-7.033735,4.440813,-2.148068,8.867409,1.680457,-3.282075,6.310552,-2.633535,2.431106,6.045688,-7.004471,-2.216179,-7.345801,-3.760072,-8.659802,-2.737103,7.838324,-6.886691,1.090878,-4.225445,-1.750094,-9.790492,8.862961,-8.411106,-5.720206,0.272974,4.489185,0.085760,-0.905636,-7.615665,8.700034,7.309198,7.330751,-3.608836,8.391923,0.346501,9.728683,-8.460734,5.607184,-8.287196,-7.459832,-9.564513,0.132887,-8.074319,0.293185,-8.604745,4.875152,-5.797111,2.727943,9.851278,0.048809,-7.588453,-3.398394,-5.613085,2.992495,-0.419136,-8.304161,5.912841,-4.983512,7.196729,4.661983,-3.755854,4.360571,1.510847,5.018002,-1.254956,7.407062,-6.282151,2.793001,7.449086,5.441201,-6.489128,0.402725,2.272545,7.428982,6.746706,-7.652410,6.154326,-2.465888,-4.323076,-3.913232,5.103985,6.543598,3.743185,-4.196638,4.748228,-8.125958,6.950650,-0.973935,-1.327569,0.288636,-8.737255,4.391113,7.304542,-8.815582,-0.441382,-5.621975,-6.047814,5.979528,-2.660723,2.611188,9.007419,-5.026263,5.058222,8.690264,-2.214388,7.370471,-7.032724,5.491756,9.039963,5.467183,-5.910228,4.389897,5.665031,-0.937439,-1.839066,2.864455,-8.078403,-5.549554,-0.508695,2.210073,-1.563351,1.871001,3.194453,-9.749258,-8.269413,-7.546587,-0.700878,-0.672104,-8.101830,1.405939,-9.353107,-9.580311,-7.732726,-6.371692,-6.472400,-8.668104,-3.922234,2.594040,-8.135845,-5.677562,9.428349,7.943744,-1.915779,5.155924,-3.649800,4.282709,-7.627133,4.572744,-7.879495,0.249507,3.664666,0.506665,-0.908398,-9.616189,7.405592,9.637162,1.106073,-4.712006,-7.525955,0.214058,-4.557046,1.439256,-4.696751,-5.363684,-0.308436,-6.865233,3.893586,-1.564221,-8.455101,-4.445712,1.327761,1.249735,-3.140656,8.578557,1.915084,6.850939,7.918579,-2.037397,-1.389026,4.342199,9.873800,-7.943429,2.304574,-4.743019,6.363209,9.894051,-4.949548,-6.342081,-2.311750,-0.660110,-7.181899,-4.084416,-4.931690,0.259749,7.324684,-3.284068,-4.597082,3.227745,6.035749,-4.426285,-5.298766,3.551457,-9.245215,4.327124,8.558275,-9.325843,5.431141,-0.050712,-8.205136,-1.365882,-6.977026,-4.059757,-1.575338,-9.138347,4.752763,-9.644448,3.860432,-7.232625,5.888405,-6.494739,5.266612,-5.648584,7.552766,0.316707,4.584796,8.241408,-5.369526,-7.967302,6.239942,-2.738267,8.883726,-8.211865,-8.334961,-3.034504,-7.802221,6.418294,-4.990169,7.214445,-0.134628,0.008676,-4.512902,6.917191,-2.269233,2.661156,-4.666192,-2.870260,4.001010,-7.119935,6.144336,3.273848,-6.545039,-0.353626,4.784164,-5.635001,-6.106786,7.322281,1.467191,5.041335,-7.174658,1.721115,-8.381806,4.454010,7.362741,3.697299,-6.849068,-6.976176,1.030158,1.642534,-5.014686,-0.122608,2.786783,-9.956709,-6.998601,-6.099057,-3.257347,-5.817586,0.339435,-7.067930,1.169966,-1.653036,6.238690,-0.749430,5.909203,5.719644,-7.216059,-4.930069,1.839862,-3.881001,-5.529211,-7.315318,-7.457584,9.967446,-9.888350,-7.094608,2.732298,-5.493351,-3.546151,-0.583536,-5.218170,6.317324,4.070143,0.175049,-8.258752,7.574049,-0.120483,-5.955692,-4.672581,0.513494,6.747984,-7.801631,-4.234575,5.671953,-6.553720,-4.135464,4.476587,7.114334,0.776869,4.291500,-7.115762,-7.461985,1.148523,6.933025,-6.534279,-1.833451,9.973644,-2.262789,6.594437,-1.963609,3.678493,5.500765,-4.313355,-8.738094,4.107194,-7.084287,-4.431503,-6.473021,3.061318,5.602077,-7.514443,8.357167,-5.385875,0.030452,-0.509894,9.050331,-7.614794,-4.191296,6.280137,-7.456912,7.111844,-4.248499,3.108950,8.203507,2.669601,-9.837591,-4.107186,9.121197,-1.120330,5.966919,-9.021079,-5.204988,3.075291,7.903725,6.594368,1.916565,-0.870648,-2.849692,-9.404225,-1.519669,-9.186765,-1.613366,9.548569,-7.322984,-1.015863,-9.159904,-7.386403,-6.114540,5.513788,2.326050,7.685096,7.347170,-2.726139,-7.530735,6.661457,-0.670841,6.639417,3.395956,-7.814336,-6.239766,4.984812,6.678969,-6.425525,6.388182,-8.913557,-7.349096,9.553108,3.142712,-9.203607,-7.066553,4.643393,3.477563,8.931802,1.148855,-8.848143,5.837056,-9.187384,-9.337066,-7.033662,-9.667252,-9.841829,-1.575044,3.873117,6.381789,1.348696,2.819052,4.773165,-8.087976,7.876687,-4.324235,6.787262,0.412017,1.460167,-5.515245,6.656923,-9.869386,-9.573511,6.464145,-6.920589,0.720398,7.812195,-5.104674,3.182602,8.971291,-0.921559,8.171327,4.253524,9.024552,-6.830179,-0.221779,5.101342,2.509150,-5.462682,1.247696,0.198403,-3.369461,8.592446,0.420835,4.962222,-0.433708,7.927469,-4.766455,-6.957625,0.973432,4.916275,9.702119,-6.080830,-6.447643,6.817964,0.891292,-7.845416,6.563034,8.822698,1.421890,-1.197566,-9.684449,2.304701,-0.882359,5.808961,-1.588641,-4.180527,0.825599,-7.469250,3.439834,6.446829,-4.569729,-7.639033,6.167221,0.384464,6.810250,-7.034028,7.365215,-5.829019,-2.809466,3.175834,-3.391560,-0.719564,-7.398967,-1.677033,-9.879632,-8.475935,4.208329,4.070049,-1.133359,9.335361,-4.159268,-3.463905,0.776104,6.020795,-9.193590,-4.229825,-5.882975,-0.303014,1.775454,-0.176383,-3.868544,3.738819,-5.315544,-8.266031,0.920742,-6.878759,-2.388634,6.636590,8.766622,4.793746,2.859998,-9.787721,-8.260097,-1.677213,8.623042,1.384617,0.181963,-9.738838,0.822127,8.476816,-8.831283,-5.459481,-1.111773,0.390025,3.487934,2.636933,-7.149364,-6.208869,-5.639919,7.300287,-9.828706,2.341652,7.240045,1.610767,-1.580066,5.559597,-1.645261,7.170698,7.381926,-7.892553,1.687019,3.378426,3.794870,-2.656917,-4.978015,-7.670920,8.831390,-9.279027,5.357333,1.601714,-3.725183,-2.203364,1.328882,0.456283,-1.522078,6.590130,2.405473,-2.671435,-8.085504,-0.014466,-2.770019,7.029863,-2.566407,-8.899534,4.447285,-7.121992,-2.124024,-4.401117,-1.772756,-9.999389,4.541852,5.404513,-4.529712,-9.056979,-1.390102,8.102490,6.206716,-5.802026,-4.204105,9.281742,5.074209,-9.005838,-2.909245,0.144906,-5.106056,-8.969989,1.902902,8.768170,2.537011,-2.812402,-4.093073,-5.669734,7.443099,-7.330768,7.082282,5.351986,1.150778,-0.250181,8.768999,-9.134924,7.351563,7.116729,-6.475776,-7.529546,-0.366785,-3.671424,-1.618457,-1.283296,4.802388,9.669931,-5.792892,8.717962,-1.417089,-4.499917,3.092670,-0.552322,4.037074,6.311282,-0.765846,8.900749,5.302267,0.233605,-0.313763,3.588309,-7.440886,-2.594740,9.288688,-9.754478,2.604452,4.366351,-2.372310,3.810078,-5.273166,7.085270,-9.024673,3.716041,-3.862151,7.234802,0.409104,7.114100,0.103459,-6.674831,4.291359,6.880952,8.215185,-9.290700,-6.459788,7.635852,-3.796407,8.789247,6.056848,-6.745129,0.066136,-9.765584,-8.808828,1.792304,9.672928,5.217889,-5.019564,7.108819,7.838065,1.030135,5.398438,-3.340863,-7.018811,-4.136917,1.388856,3.593960,-0.178179,9.908007,8.619366,2.373596,-6.426185,-4.760216,0.056323,6.048678,3.000635,-8.254723,0.857017,-0.184620,-7.893013,-6.267678,-1.175586,-9.976675,8.352937,8.124712,-4.982370,-1.351206,6.962805,-7.579478,-3.382511,-3.111457,-5.153741,0.811477,6.359263,6.678262,-2.984913,7.477051,-5.740267,-5.844561,2.698952,-7.414294,-4.043825,1.638220,4.621466,-1.459390,0.590386,2.887111,5.584990,1.522975,4.121860,-7.143970,-0.288484,-6.898375,4.622219,7.444351,-4.383028,3.516317,-1.381973,3.373207,-4.343253,4.102239,-6.048026,3.243081,7.487954,-8.241641,-6.720919,3.715645,3.923040,2.149537,-5.382590,3.456790,-7.098559,2.119394,1.120561,6.137548,-8.901572,1.192784,3.583257,-8.459573,-7.910741,9.756794,2.208082,4.369562,-3.022438,0.258087,2.319041,-1.404828,9.907046,-8.653157,-5.057509,-0.263679,6.281770,9.551098,5.032811,0.302825,-9.159602,-8.991321,4.758357,-2.415316,-3.645136,-7.012446,0.893734,3.011005,-4.376306,8.975190,4.342337,8.054476,-8.868980,-5.492960,-0.075289,4.913485,-4.744533,-3.818710,2.535931,-6.021615,8.635925,-4.379082,7.220203,5.338482,6.128281,-6.562807,1.671382,3.401571,-1.259086,4.313627,-4.022976,7.088386,-2.236040,-0.529219,4.700572,7.122290,-8.356822,6.863122,4.998001,3.519755,9.323137,-1.991311,-0.528388,-7.338322,7.440474,7.874274,-8.084531,-0.044732,1.692733,6.001907,4.736152,1.184526,-5.096016,6.033819,9.408700,-7.494390,-5.502768,0.752992,4.318456,1.101414,7.585432,-1.174558,-2.728941,-3.776336,9.417261,-4.780541,-8.628275,-1.133614,-7.138718,4.865964,9.075303,-6.431273,-9.941354,-3.116364,-1.066458,-1.853849,-2.053935,5.541429,8.686226,-8.700483,3.618453,-8.196498,-1.089900,-0.024492,-7.841842,3.810197,-2.227087,-5.262958,0.303253,-3.298893,-0.005351,-2.813895,8.705836,7.765498,3.567672,2.892456,-5.722052,8.731691,9.609969,1.897670,3.916372,5.327817,8.369777,-3.021446,-0.425726,-7.978143,1.787188,9.040419,-3.352808,4.767139,8.541733,3.070231,-8.382014,-2.145992,-9.463464,-5.418404,-0.179886,3.028174,9.318831,3.288227,-1.803057,-0.610428,-5.107103,-8.168593,7.298262,-3.841503,7.827772,-4.837315,-3.261779,7.352620,3.648097,-6.884518,0.192672,2.527413,0.911896,-2.056889,-8.062260,9.031651,-0.338241,3.969620,-1.303150,-9.271359,4.247567,4.197828,-1.784906,0.917871,-5.833238,7.108138,7.634101,-0.933787,7.044548,6.888853,-0.010003,-9.804279,-1.777701,-3.048538,-8.435923,-2.165001,1.842254,7.679255,-1.223641,4.368866,4.196498,-0.784321,4.620252,2.730246,8.568945,-5.219091,-5.659883,5.567955,2.039039,6.307306,-2.550025,2.617895,6.489588,5.577644,0.380556,6.385407,-4.840276,-2.262299,-0.131258,-1.943976,-2.829937,2.276307,-9.665024,5.296614,-8.905158,7.499568,2.322444,0.239206,7.650931,-0.212097,7.047479,7.410140,-4.987343,-8.514545,-8.690451,-8.215311,7.480460,4.739822,-4.779698,3.749035,7.978046,-9.046425,-2.418395,8.242360,-0.832665,-4.897643,5.579836,2.044125,8.992908,2.592868,8.415727,-4.458112,3.030784,-4.551830,7.634698,6.828493,-6.686325,9.996051,2.715101,-3.709103,-5.923704,4.505736,4.454248,0.882852,-6.545370,-2.195331,4.657360,4.718305,-1.183398,-8.864852,9.341332,-6.849672,2.804149,-1.106380,-3.449065,3.765207,-7.084748,1.009205,3.687922,-8.934915,6.757939,6.754234,-8.254944,2.975039,-3.223638,-6.277680,8.261560,0.966339,-1.842652,9.259815,6.604580,1.126932,-8.230126,4.784039,-6.172043,5.679862,-5.764490,-9.607666,5.643617,8.701639,9.289489,-5.794700,-5.836216,-8.966406,6.133814,6.802484,-2.950186,-8.564356,1.814324,-5.897426,-5.306122,6.495653,1.146036,5.613472,-4.321163,-9.138498,-1.577425,-5.872020,4.987388,1.108173,0.025549,3.808188,3.927221], dtype = "float64")#candidate|7770|(1521,)|const|float64
var_7771 = relay.var("var_7771", dtype = "int16", shape = (660,))#candidate|7771|(660,)|var|int16
var_7772 = relay.var("var_7772", dtype = "int16", shape = (9240, 1))#candidate|7772|(9240, 1)|var|int16
const_7773 = relay.const([-2,8,-1,-9,-2,1,4,3,-9,9,2,-7,4,2,-6,9,-7,3,4,10,6,-9,3,6,-10,1,6,10,7,-4,-5,4,-2,2,9,-3,3,-7,5,-6,8,-8,7,-4,4,-1,3,-2,2,-2,-6,-8,-6,-5,10,-5,-1,3,-2,4,7,4,-1,-6,2,4,2,7,8,-8,-5,7,5,-4,6,-3,-5,4,5,9,-9,-5,6,6,6,-2,-6,-7,-6,-10,-10,7,1,-1,3,-6,-2,1,7,-4,1,5,3,-10,4,-3,-6,10,-4,-6,1,-9,-6,-3,-10,-7,-2,-10,-4,-6,-4,-1,-3,-8,1,6,-7,-7,7,-6,-6,8,3,5,-10,-4,-3,-3,-7,3,-6,-2,-4,-5,-10,8,4,-5,5,4,2,10,-6,-10,-5,-3,-2,3,5,-6,9,-10,-1,-9,7,-2,3,2,6,-4,-7,-3,3,6,3,2,8,-4,9,3,-7,2,-6,1,8,-4,-4,3,-2,5,1,-9,1,7,-7,5,7,5,-6,7,6,7,10,-5,-7,10,-8,-8,-2,-9,7,-4,5,-10,-8,3,10,-3,-9,5,-9,-7,-5,5,2,-6,-10,-5,-10,6,-2,3,8,-4,-4,-5,3,-9,-7,-6,8,9,-4,5,-9,-1,1,-3,-10,7,6,-7,4,-9,-10,-1,9,-8,-2,7,5,2,-4,4,4,9,3,-10,4,1,4,-4,-2,6,-7,-5,10,8,-4,9,-4,-9,4,8,-9,-2,1,-8,10,6,6,2,1,-2,-4,5,7,7,-5,9,-5,9,-7,-10,-10,4,10,-3,-6,7,6,-8,-8,-6,3,7,6,-6,2,10,2,9,10,4,7,-7,-5,-5,3,8,-7,-4,2,6,5,5,9,-1,5,6,9,2,8,9,-9,7,-3,-8,10,8,-9,-7,6,-7,3,1,-7,-8,-10,-8,3,4,-6,-10,8,6,-10,6,-8,6,-8,-5,-10,2,9,1,-5,9,-9,10,8,5,-6,3,7,9,-6,10,9,-6,-4,-2,1,-10,2,-10,-5,-6,7,7,1,-9,2,1,-5,-10,3,8,3,8,10,-4,2,-8,-3,5,2,-9,5,-6,8,-9,-7,-8,-7,-6,4,-1,-3,-7,3,10,-8,-8,10,3,-9,8,-9,8,3,-2,7,-5,-10,7,-6,9,-8,7,2,-6,4,8,-2,-9,2,4,-5,-10,-3,10,-5,-5,7,-1,-2,1,2,-9,-4,1,-2,-5,-6,-1,1,-8,2,9,5,-10,8,-5,9,-7,4,10,3,-2,8,7,7,-8,-9,10,-9,-3,10,-9,3,3,-4,-3,10,-3,9,10,5,4,-4,-2,-5,-10,-4,-5,7,-4,2,-5,1,1,-9,-5,-8,2,3,3,-10,2,-3,1,-6,-8,-2,-1,4,2,-4,10,6,-1,6,7,-8,10,-6,3,5,10,-6,-10,-4,4,9,-9,-3,-4,-6,-5,-7,-8,-7,7,-2,-9,2,1,-2,-6,-8,-6,7,2,-8,-8], dtype = "int8")#candidate|7773|(576,)|const|int8
const_7774 = relay.const([2,-8,-9,-7,-1,10,5,-6,2,5,-4,7,-6,2,-4,1,-2,4,-1,2,8,-3,-3,-1,2,-5,8,2,-9,-9,9,8,1,5,-10,4,-10,-8,-8,9,7,-8,-8,-1,9,1,-2,-1,8,6,6,6,9,-10,5,8,-5,-10,-9,1,1,-7,-10,7,-6,-6,3,8,-7,8,8,-5,2,-8,-6,-10,1,-1,6,9,-1,2,-6,-5,-9,-5,10,-3,-7,5,10,-2,5,-3,1,2,-6,7,7,7,6,-6,-3,-9,8,6,1,10,-9,-6,-5,-4,7,3,3,1,-1,6,-5,-6,8,2,10,-7,5,9,4,-10,-5,4,-4,-7,-1,1,-7,1,-1,-7,5,9,-7,-1,-4,-3,-8,6,1,7,8,10,-8,-3,1,7,-3,-9,5,-3,-5,-7,-1,-4,-8,-6,10,-10,-4,7,-2,-3,-1,5,-4,-4,-5,9,3,2,-6,-8,4,-7,10,6,-8,-8,3,6,4,-6,2,6,-1,-7,-7,-3,2,1,-4,7,-8,-1,-8,8,-7,-2,-2,-4,-9,9,-5,-8,2,2,-6,8,-4,5,-3,4,9,-9,-6,-5,-4,-10,-7,-8,8,7,-9,-6,-1,4,5,-4,-6,7,-5,-7,-5,8,7,-2,-5,9,-1,6,-7,8,2,8,4,-2,-8,-8,7,-6,9,9,9,10,2,-4,8,-3,-5,-10,6,9,-10,8,10,-2,-4,-5,-9,-4,2,-2,-1,3,-7,6,3,-9,2,-10,1,-3,3,9,2,-2,3,-7,10,2,-10,-1,4,8,5,-10,2,-5,-1,4,2,-10,-2,1,6,7,4,1,-8,-5,8,1,-9,4,3,-7,-6,1,-5,-9,-8,7,4,1,8,5,3,8,6,-6,-10,5,-10,-5,9,-6,-10,-10,-10,8,-6,3,-3,-3,-3,-8,-2,10,-9,8,8,-4,6,5,-4,-5,-8,-2,-1,9,-4,8,10,-9,-2,-7,-1,-1,5,-7,2,9,-2,10,8,9,6,9,3,5,4,-8,-2,-6,-8,4,-4,-10,6,2,-1,7,6,5,3,-9,-1,6,7,-10,4,4,9,-6,6,-10,-1,-6,4,-8,-3,-5,-5,10,10,6,-4,-4,6,1,-10,-1,-9,-9,2,7,4,2,3,-1,9,-7,-2,7,2,2,-8,-4,1,7,9,-9,-8,-4,2,-3,7,-4,-2,-6,9,-6,-2,2,-2,-9,7,-5,8,5,9,10,10,4,5,4,-10,8,1,-5,3,5,1,-4,-1,10,-8,5,-4,-10,9,-10,-6,-10,10,-9,1,-2,6,-3,6,-7,4,4,9,7,-10,6,5,5,1,-8,-10,5,6,-2,-3,-7,-3,7,5,-9,-10,4,-10,1,-5,-4,-1,2,8,8,-5,8,-5,9,8,-8,-4,4,-3,7,-5,-4,1,4,4,-1,-8,-8,-6,7,-6,2,9,-7,-2,2,-7,-6,4,10,-1,-6,1,-3,10,3,-5,7,-5,-6,-9,6,7,-6,1,9,-8,2,1,-10,-5,7,10,-6,10,-3,2,-9,-3,-10,-3,-8,-7,2,-8,-7,5,-5,-1,1,-6,-4,-4,-7,-8,-1,9,-1,2,2,-6,-6,-6,8,-3,1,-3,-8,-8,4,-6,-8,-6,1,4,9,4,-3,-6,6,-7,-1,-1,-9,-3,-6,8,4,-7,-4,-8,-1,8,-1,-4,-8,-5,3,-7,7,-5,-9,-9,9,-9,6,-7,8,-2,4,7,9,8,-9,4,4,-3,6,-9,-9,-9,-4,4,2,4,-4,-7,-4,-2,-9,-1,10,8,-5,1,5,-8,6,2,10,3,6,4,4,-3,4,8,7,10,-4,7,-8,-6,-7,-2,4,-8,5,10,-9,2,8,-9,-7,10,-7,9,-10,-2,7,5,-1,-2,6,-6,7,-10,2,-4,6,8,-9,-1,-6,-9,8,2,6,6,10,-6,-3,-5,-6,4,1,7,1,-10,-2,-7,2,2,7,-9,-1,5,-3,-1,-7,1,6,-9,-6,3,-7,-10,2,-6,-1,8,-2,-8,-3,-2,-3,-10,10,6,-6,8,1,-2,-2,-4,3,-5,-6,10,3,2,6,6,1,4,3,3,-1,-9,-5,-6,-6,3,-5,3,-4,5,-9,8,5,7,3,1,7,7,-4,10,3,6,-8,-5,6,-4,2,-4,3,2,1,10,-7,10,9,3,-5,1,10,8,7,-10,4,-6,5,-3,-3,-4,1,2,-6,-3,6,4,1,3,-4,6,6,2,-2,-8,7,5,-8,9,6,6,-5,9,4,5,4,5,5,-9,-4,2,-9,-1,-6,2,2,3,8,-5,-3,-10,2,-6,7,-2,2,-4,10,9,-4,7,1,-5,-3,1,9,-2,-1,9,-4,8,-6,-9,8,2,3,9,-1,-2,3,10,-7,6,-1,-5,-6,10,-7,-8,-1,6,2,-5,-8,-7,10,-6,10,-6,-4,5,-8,-2,6,-8,10,10,-7,-3,1,9,-9,-10,-6,-9,1,-2,1,-2,2,5,-3,-4,-1,7,-8,5,3,6,6,-4,1,4,10,2,-7,5,-3,10,7,6,-6,-3,-8,2,6,9,-2,1,2,-7,10,6,-1,7,-6,3,4,2,-5,-4,-8,10,7,-3,7,-5,-2,-10,9,-2,10,8,-3,4,5,-1,-10,-5,2,-3,10,6,2,8,5,8,-5,-7,-7,6,-8,6,-8,2,-1,-1,-4,-4,4,10,1,-3,4,-7,-1,-4,-2,5,-1,1,4,2,8,-4,9,-2,-2,9,2,-9,-10,2,-3,-5,-3,-6,-10,-5,-6,3,-5,-6,-7,-4,-2,4,6,-8,-2,-3,9,2,-8,8,-7,9,-3,10,-3,-10,7,-9,-9,-4,-1,-8,6,10,6,-8,-8,-9,-6,-2,3,-4,-8,-7,-3,10,8,2,5,-6,1,-7,4,1,-5,9,-7,-2,9,1,-10], dtype = "int8")#candidate|7774|(1120,)|const|int8
call_7769 = relay.TupleGetItem(func_3711_call(relay.reshape(const_7770.astype('float64'), [13, 13, 9]), relay.reshape(var_7771.astype('int16'), [660,]), relay.reshape(var_7772.astype('int16'), [9240,]), relay.reshape(const_7773.astype('int8'), [288, 2]), relay.reshape(const_7774.astype('int8'), [1120,]), relay.reshape(const_7770.astype('float64'), [13, 13, 9]), ), 2)
call_7775 = relay.TupleGetItem(func_3719_call(relay.reshape(const_7770.astype('float64'), [13, 13, 9]), relay.reshape(var_7771.astype('int16'), [660,]), relay.reshape(var_7772.astype('int16'), [9240,]), relay.reshape(const_7773.astype('int8'), [288, 2]), relay.reshape(const_7774.astype('int8'), [1120,]), relay.reshape(const_7770.astype('float64'), [13, 13, 9]), ), 2)
func_4272_call = mod.get_global_var('func_4272')
func_4276_call = mutated_mod.get_global_var('func_4276')
const_7785 = relay.const([-9.176338,8.877435,-2.044466,5.760157,4.867239,-4.176393,-9.211568,2.917891,-8.676210,-2.126813,-7.644602,9.406929,-0.517721,7.042694,4.978266,-8.976022], dtype = "float64")#candidate|7785|(16,)|const|float64
var_7786 = relay.var("var_7786", dtype = "float64", shape = (4, 40))#candidate|7786|(4, 40)|var|float64
call_7784 = relay.TupleGetItem(func_4272_call(relay.reshape(const_7785.astype('float64'), [1, 2, 8]), relay.reshape(var_7786.astype('float64'), [10, 2, 8]), ), 1)
call_7787 = relay.TupleGetItem(func_4276_call(relay.reshape(const_7785.astype('float64'), [1, 2, 8]), relay.reshape(var_7786.astype('float64'), [10, 2, 8]), ), 1)
output = relay.Tuple([uop_7738,call_7751,var_7752,var_7753,call_7769,const_7770,var_7771,var_7772,const_7773,const_7774,call_7784,const_7785,var_7786,])
output2 = relay.Tuple([uop_7740,call_7754,var_7752,var_7753,call_7775,const_7770,var_7771,var_7772,const_7773,const_7774,call_7787,const_7785,var_7786,])
func_7789 = relay.Function([var_7752,var_7753,var_7771,var_7772,var_7786,], output)
mod['func_7789'] = func_7789
mod = relay.transform.InferType()(mod)
var_7790 = relay.var("var_7790", dtype = "int64", shape = (6,))#candidate|7790|(6,)|var|int64
var_7791 = relay.var("var_7791", dtype = "int64", shape = (144,))#candidate|7791|(144,)|var|int64
var_7792 = relay.var("var_7792", dtype = "int16", shape = (660,))#candidate|7792|(660,)|var|int16
var_7793 = relay.var("var_7793", dtype = "int16", shape = (9240, 1))#candidate|7793|(9240, 1)|var|int16
var_7794 = relay.var("var_7794", dtype = "float64", shape = (4, 40))#candidate|7794|(4, 40)|var|float64
output = func_7789(var_7790,var_7791,var_7792,var_7793,var_7794,)
func_7795 = relay.Function([var_7790,var_7791,var_7792,var_7793,var_7794,], output)
mutated_mod['func_7795'] = func_7795
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7839 = relay.const([[[2,5,7,-8,-5,-2,2,1,-3,9],[-10,-1,3,7,-6,-7,-2,10,-10,-8],[9,7,-5,9,1,5,-8,6,-6,1],[2,2,-10,5,-3,5,4,-5,-8,9],[2,-1,-2,4,-3,-2,10,-1,8,-10],[-9,-3,5,-4,-4,-2,-8,-9,-1,-8],[7,-9,8,9,6,-9,2,-9,-1,2],[7,4,-9,4,5,4,6,10,5,-9],[7,-7,-9,-10,1,-6,7,2,4,-6],[9,-2,3,-8,9,9,-5,-7,-3,5],[-10,-2,2,3,-1,-6,6,7,7,-10],[-5,4,-7,4,-9,-6,1,-6,-4,-10],[5,-7,-5,-4,2,-1,-5,6,-8,-6],[9,-8,1,-3,2,-10,-3,-1,3,-1]],[[9,3,6,8,8,-9,-7,7,-10,1],[-8,-10,-9,-7,6,1,-9,1,-4,7],[4,-8,4,7,8,7,-10,-6,10,3],[-3,-1,-9,-8,-3,4,3,-10,-9,-1],[6,6,-7,-7,8,-2,6,-3,-8,-7],[-6,-2,-5,3,7,5,-4,-9,1,-7],[-6,10,-4,7,4,5,-5,8,-7,-5],[7,-10,-1,1,7,-3,-6,-6,-7,-4],[-9,2,6,-5,1,1,-2,-6,-2,-4],[-4,3,-1,-4,-4,-1,7,-6,-3,10],[-10,9,-4,4,-3,-6,-7,-9,-9,-1],[1,-5,-7,-5,-1,2,8,5,8,7],[-10,-8,-1,9,4,-5,2,-5,-3,7],[7,-7,-5,-4,-4,6,-3,2,3,-8]]], dtype = "uint16")#candidate|7839|(2, 14, 10)|const|uint16
const_7840 = relay.const([[[-4,-2,-8,8,8,-8,1,-6,-7,-9],[5,-3,9,5,-8,1,3,7,-6,1],[-8,5,-1,6,1,-8,-1,7,1,-9],[-3,1,4,9,-2,-3,1,2,1,1],[1,-10,10,-2,9,2,-2,10,-2,5],[3,-6,10,-8,6,-6,-1,-1,4,-6],[3,-7,-2,2,-7,-1,6,5,-5,-10],[-6,-10,-3,-10,2,-1,3,-1,-4,10],[-9,4,-10,5,3,6,2,-6,7,-1],[1,6,-10,10,8,-7,-3,-4,9,-8],[-3,-2,2,-1,4,-8,5,-9,-8,1],[9,5,-9,4,-6,-10,7,-5,10,8],[9,-8,-7,-9,6,-3,8,-8,4,-4],[-4,-1,-6,10,4,9,3,8,-6,6]],[[-9,-8,8,-3,-10,5,1,5,-4,-3],[-2,-2,2,6,6,-2,5,-1,8,5],[1,9,8,9,-10,10,7,-8,1,8],[8,-2,10,5,-9,5,10,4,-10,10],[7,2,4,-2,-4,2,-10,4,-10,-1],[9,9,-2,9,-5,-3,-3,-6,-5,-1],[1,-2,10,5,6,10,-2,7,3,-7],[9,3,-7,8,-9,2,2,1,3,-5],[1,-6,-6,6,-1,8,-5,3,-1,-3],[-9,8,-2,-7,-6,3,8,10,-2,-1],[-1,6,-3,-7,9,-5,-8,4,-6,2],[3,-9,5,-5,8,-2,9,5,7,6],[-4,6,4,10,1,1,-9,7,2,5],[-7,8,-4,-8,5,-7,-5,-10,3,10]]], dtype = "uint16")#candidate|7840|(2, 14, 10)|const|uint16
bop_7841 = relay.equal(const_7839.astype('bool'), relay.reshape(const_7840.astype('bool'), relay.shape_of(const_7839))) # shape=(2, 14, 10)
uop_7844 = relay.log2(const_7839.astype('float64')) # shape=(2, 14, 10)
uop_7846 = relay.sin(const_7840.astype('float32')) # shape=(2, 14, 10)
func_4886_call = mod.get_global_var('func_4886')
func_4892_call = mutated_mod.get_global_var('func_4892')
const_7852 = relay.const([[-6,5,5,10,3,6,7,-10,-10,2,4,-10,10,8,3,-1,5,6,7,1,-10,-9,-8,-5,-6,8,8,-1,-5,10,-8,-8,9,4,8,8,-2,-4,-6,9,-5,5,6,-6,4,-10,9,5,9,-5,-7,-4,2,9,6,1,6,7,-2,4,8,-6,9,-6,3,7,6,8,9,5,9,7,4,9,6,9,5,-5,-9,5,4,-1,-3,-8,10,6,-1,-5,8,8,5,-1,5,7,9,-5,5,-3,8,-9,-5,6,-9,-9,-4,2,-6,-2,-1,2,-4,-2,6,-5,7,3,-8,-7,9,-5,-5,-4,4,-10,6,4,3,-7,1,3,6,7],[-4,-3,10,-8,7,-6,8,5,-1,4,-4,3,4,1,-2,6,-5,-1,-8,-2,10,7,7,2,10,-10,-8,2,-8,4,3,8,-8,5,-9,-1,6,-7,-10,8,8,6,2,-9,-1,4,2,4,-2,-6,-7,-8,-4,5,-7,-6,5,-10,-2,-1,2,10,7,2,4,-8,6,3,4,-6,3,5,-5,-6,4,1,3,7,-5,9,8,10,5,4,3,10,3,5,10,7,1,7,-1,-3,-5,6,10,-7,-9,-4,-2,-8,10,5,7,4,-3,-9,7,-9,-4,8,-10,9,-6,4,9,-5,7,1,-3,1,7,-8,-4,9,-5,4,-9,-7,-9,-7],[4,9,1,7,-8,1,10,10,-10,4,5,1,2,-3,10,1,-1,5,-4,-7,9,-6,9,5,-6,-5,6,4,-3,-10,6,-4,4,8,-2,-10,5,1,5,-3,4,1,3,9,2,-8,-3,-5,4,6,-10,-10,-4,1,7,-10,2,-1,7,-3,-1,9,-5,-4,-10,6,9,-5,7,2,-9,-4,-2,-8,-7,9,-1,-4,3,-7,10,-2,-7,2,4,7,6,6,8,-8,6,3,-6,-6,-6,-3,-4,5,-2,7,-1,-9,10,7,-1,1,4,5,-2,10,-3,2,6,1,4,-5,-6,4,-2,-2,-7,2,-8,1,9,-5,2,10,-7,-9,-10,-6],[1,-10,10,-9,6,8,8,3,-3,-8,8,-5,8,3,-10,-4,-8,5,-8,-7,-6,10,8,-1,-2,6,-8,4,-6,-6,8,9,-6,-6,-1,-3,-1,10,6,8,10,-9,-4,-6,2,7,4,7,-10,-8,-7,-7,2,6,9,-8,-10,9,10,6,-1,-1,1,-7,-1,4,-4,6,8,-5,-10,8,-10,3,6,9,2,-2,-9,4,2,10,8,-3,10,5,-1,-9,4,10,-9,7,10,-4,8,9,-7,5,6,6,-6,-7,6,1,-6,-1,-1,-8,-10,1,2,6,-10,-9,-9,-2,5,-5,5,-2,4,-8,4,7,8,-1,-8,2,-10,-2,-3,5],[6,-1,-3,-2,10,5,3,9,-9,-2,9,-3,-4,-7,1,-6,-1,8,2,4,-9,6,-8,5,-7,-4,-10,3,-4,-2,-2,4,3,-7,3,9,-8,-5,-1,-6,7,5,7,-3,8,-7,-4,-4,-6,-4,-2,-2,7,1,-8,-6,-6,-6,9,-5,-5,-9,-5,5,-4,2,-1,10,-2,6,7,6,-5,6,2,-2,4,-7,4,2,-3,6,9,-4,7,2,3,5,10,1,1,-2,-5,-5,3,7,-4,-1,-10,-3,-6,9,2,-7,-7,6,-4,-4,9,5,7,-9,-6,-3,7,1,10,3,6,-4,-10,1,-1,10,4,-4,-9,1,3,-10,-9,-2]], dtype = "int16")#candidate|7852|(5, 132)|const|int16
const_7853 = relay.const([-1,-6,-3,5,10,-9,-8,6,-4,-4,10,1,6,1,9,4,4,-4,6,-3,9,-5,-4,8,-7,7,10,9,9,5,-5,-7,8,-8,-3,1,2,9,-8,-8,-9,-4,4,-6,-3,-1,1,9,-1,4,-7,-6,-10,7,-3,-4,-9,-3,4,-3,8,7,-2,-9,-3,-9,-9,-9,1,8,10,-6,4,9,-7,-7,8,6,-10,5,1,6,-8,-10,1,-2,-4,10,-10,-8,-3,3,8,-1,8,4,9,-1,4,-7,3,-8,10,7,-8,6,-7,-3,10,-3,-2,-8,-6,-10,-10,7,-8,10,-4,-9,-9,4,-6,1,10,4,1,-3,-9,-7,-1,2,-1,9,-7,-8,5,-4,-8,5,-9,10,-9,6,5,8,-10,-5,-1,8,5,6,-9,-9,5,7,-4,-5,9,2,-7,-1,-1,9,3,1,5,-7,10,-1,1,9,6,-10,-7,10,3,2,8,-7,1,8,-7,-10,3,2,-1,9,6,2,-2,-7,2,8,-3,2,2,9,6,-6,1,3,10,-1,3,-8,-6,9,-4,-9,-3,10,2,9,-7,5,5,-3,-1,-9,-8,9,-4,3,9,-5,-4,2,-2,-1,5,10,5,-3,6,3,1,-7,2,2,-1,-4,4,10,-6,-7,-7,9,8,10,-5,9,5,-2,-5,8,3,-2,9,-5,3,4,-8,-5,6,-2,10,-9,-7,-2,7,-2,-4,-7,8,-6,3,2,2,10,5,-10,-5,-10,10,-9,-3,-9,-5,10,10,4,-5,-5,-8,-6,8,7,-5,-10,-10,3,-7,-2,9,-6,7,2,-10,10,3,10,2,-9,-6,-1,5,2,8,-4,6,-6,4,7,-7,10,3,-5,7,1,10,-2,7,7,-9,-2,3,-10,-8,-10,5,8,2,-4,-5,4,10,8,-1,-5,-8,-7,-7,-9,-5,-3,-1,-2,-2,3,3,1,-3,-3,8,5,4,-6,-1,7,5,8,-9,-10,7,8,-1,5,10,8,-5,3,-7,10,5,5,5,8,4,-5,-1,2,2,6,7,-1,1,2,4,-7,9,-10,5,-8,-6,-9,6,9,-9,9,10,-6,3,-10,-2,-5,-9,5,5,-1,6,9,9,9,2,-4,9,5,10,8,-2,-2,10,-5,1,-5,5,-1,10,4,10,-8,10,1,-1,-1,-4,6,-8,-8,-6,-8,-4,7,8,10,1,-7,3,10,-8,7,-4,5,-5,-3,-3,3,-9,-3,-4,-7,1,8,1,-6,-1,-9,9,10,-7,4,-5,7,-7,-5,1,8,3,6,3,2,-8,-10,-7,8,5,-3,-6,6,-1,6,10,-6,9,-10,-3,-6,-5,7,-9,9,-4,4,-5,7,3,9,-7,-8,-6,-7,-3,1,1,2,-2,6,3,8,-2,5,-8,9,-1,10,-7,8,3,-8,9,6,2,7,-2,5,-2,9,5,5,-9,3,5,-6,3,3,-7,-3,-1,-4,7,-6,10,-9,5,10,1,10,5,4,-1,1,-6,-6,-5,9], dtype = "int8")#candidate|7853|(576,)|const|int8
var_7854 = relay.var("var_7854", dtype = "int64", shape = (6,))#candidate|7854|(6,)|var|int64
const_7855 = relay.const([10,4,5,7,-5,4,4,-1,-5,-4,-7,7,1,-5,10,-2,9,-6,-7,-4,2,4,6,-3,-8,-1,7,10,-3,-2,5,1,-7,-10,-10,9,-2,7,10,8,-9,6,6,-6,1,10,-10,-9,8,3,4,1,7,-2,10,-7,-9,-4,9,4,8,5,4,8,3,-9,3,3,-10,9,6,-6,10,-2,2,8,-7,-1,-9,3,10,1,4,5,8,3,-1,1,-10,10,-6,-3,1,5,3,-2,-2,8,4,9,9,-7,10,4,8,4,-10,8,5,1,-3,-2,-5,-2,-6,-2,2,7,-7,6,5,-9,8,-6,3,10,-10,1,-3,-4,-4,5,-8,-2,3,10,7,-3,-9,8,8,-9,10,-6], dtype = "int64")#candidate|7855|(144,)|const|int64
call_7851 = relay.TupleGetItem(func_4886_call(relay.reshape(const_7852.astype('int16'), [660,]), relay.reshape(const_7853.astype('int8'), [576,]), relay.reshape(var_7854.astype('int64'), [6,]), relay.reshape(const_7855.astype('int64'), [2, 72]), ), 7)
call_7856 = relay.TupleGetItem(func_4892_call(relay.reshape(const_7852.astype('int16'), [660,]), relay.reshape(const_7853.astype('int8'), [576,]), relay.reshape(var_7854.astype('int64'), [6,]), relay.reshape(const_7855.astype('int64'), [2, 72]), ), 7)
bop_7866 = relay.logical_xor(uop_7844.astype('uint16'), relay.reshape(uop_7846.astype('uint16'), relay.shape_of(uop_7844))) # shape=(2, 14, 10)
bop_7881 = relay.mod(uop_7844.astype('float64'), relay.reshape(uop_7846.astype('float64'), relay.shape_of(uop_7844))) # shape=(2, 14, 10)
output = relay.Tuple([bop_7841,call_7851,const_7852,const_7853,var_7854,const_7855,bop_7866,bop_7881,])
output2 = relay.Tuple([bop_7841,call_7856,const_7852,const_7853,var_7854,const_7855,bop_7866,bop_7881,])
func_7887 = relay.Function([var_7854,], output)
mod['func_7887'] = func_7887
mod = relay.transform.InferType()(mod)
var_7888 = relay.var("var_7888", dtype = "int64", shape = (6,))#candidate|7888|(6,)|var|int64
output = func_7887(var_7888)
func_7889 = relay.Function([var_7888], output)
mutated_mod['func_7889'] = func_7889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6447_call = mod.get_global_var('func_6447')
func_6449_call = mutated_mod.get_global_var('func_6449')
call_7904 = func_6447_call()
call_7905 = func_6447_call()
func_6117_call = mod.get_global_var('func_6117')
func_6121_call = mutated_mod.get_global_var('func_6121')
var_7911 = relay.var("var_7911", dtype = "float64", shape = (308,))#candidate|7911|(308,)|var|float64
var_7912 = relay.var("var_7912", dtype = "float64", shape = (16,))#candidate|7912|(16,)|var|float64
call_7910 = relay.TupleGetItem(func_6117_call(relay.reshape(var_7911.astype('float64'), [11, 4, 7]), relay.reshape(var_7911.astype('float64'), [11, 4, 7]), relay.reshape(var_7912.astype('float64'), [16,]), ), 4)
call_7913 = relay.TupleGetItem(func_6121_call(relay.reshape(var_7911.astype('float64'), [11, 4, 7]), relay.reshape(var_7911.astype('float64'), [11, 4, 7]), relay.reshape(var_7912.astype('float64'), [16,]), ), 4)
output = relay.Tuple([call_7904,call_7910,var_7911,var_7912,])
output2 = relay.Tuple([call_7905,call_7913,var_7911,var_7912,])
func_7945 = relay.Function([var_7911,var_7912,], output)
mod['func_7945'] = func_7945
mod = relay.transform.InferType()(mod)
var_7946 = relay.var("var_7946", dtype = "float64", shape = (308,))#candidate|7946|(308,)|var|float64
var_7947 = relay.var("var_7947", dtype = "float64", shape = (16,))#candidate|7947|(16,)|var|float64
output = func_7945(var_7946,var_7947,)
func_7948 = relay.Function([var_7946,var_7947,], output)
mutated_mod['func_7948'] = func_7948
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6896_call = mod.get_global_var('func_6896')
func_6897_call = mutated_mod.get_global_var('func_6897')
call_7952 = func_6896_call()
call_7953 = func_6896_call()
output = relay.Tuple([call_7952,])
output2 = relay.Tuple([call_7953,])
func_7962 = relay.Function([], output)
mod['func_7962'] = func_7962
mod = relay.transform.InferType()(mod)
output = func_7962()
func_7963 = relay.Function([], output)
mutated_mod['func_7963'] = func_7963
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7968 = relay.const([[[-7.856214,0.083933,2.644243,3.581306,4.422782,-0.759570,-6.777551,9.210483,-6.519062,2.148788],[-2.122191,7.797348,4.344536,2.029878,-7.510067,-1.230722,-5.417440,2.306178,-5.012234,8.586087],[2.425155,-5.813461,5.806289,1.311462,-0.723598,-0.523842,-2.123970,2.980179,8.380509,-2.560379],[8.872518,-3.556755,-1.678011,-9.614950,-8.921726,-9.602095,3.684754,4.965090,-3.585278,-0.438307],[7.300319,1.614677,1.581630,6.419590,2.292623,-5.793807,-4.889485,-1.897942,7.569272,-5.981644],[2.320209,6.186178,2.785422,5.026957,1.455342,5.532064,-0.682418,-4.384303,4.171884,-0.501567],[8.458632,3.541929,5.897825,-6.396890,-1.220343,6.425127,6.768433,0.223442,6.447767,-2.853017],[-5.188245,-9.359828,-9.391868,-4.375755,-6.016174,8.788710,-1.729961,-9.440470,-2.330221,-8.713532],[1.460482,-7.648361,-8.234092,2.665271,6.824933,-0.882853,8.495624,-2.498239,2.145580,8.554613],[-0.792246,-3.764069,-9.321625,-6.714551,8.367343,8.444772,-2.507135,-2.243044,1.368185,0.885900]]], dtype = "float64")#candidate|7968|(1, 10, 10)|const|float64
uop_7969 = relay.sin(const_7968.astype('float64')) # shape=(1, 10, 10)
func_7789_call = mod.get_global_var('func_7789')
func_7795_call = mutated_mod.get_global_var('func_7795')
var_7995 = relay.var("var_7995", dtype = "int64", shape = (6,))#candidate|7995|(6,)|var|int64
var_7996 = relay.var("var_7996", dtype = "int64", shape = (144,))#candidate|7996|(144,)|var|int64
var_7997 = relay.var("var_7997", dtype = "int16", shape = (660,))#candidate|7997|(660,)|var|int16
const_7998 = relay.const([6,1,9,2,-6,6,-6,4,6,-5,4,7,-1,10,3,-4,-5,2,-4,3,-7,7,-2,1,6,10,-5,-3,8,-2,7,7,-10,5,7,-5,7,-8,-10,6,7,7,5,-10,5,1,9,-1,8,4,-4,-10,8,9,-8,-7,2,-9,-4,-7,3,9,5,1,-6,1,-2,2,-10,10,-7,-5,9,-6,-4,-3,1,7,2,1,2,9,-2,6,3,10,-2,-10,8,5,-1,9,10,7,-3,-1,10,-1,-2,-6,2,6,-2,5,4,-2,-8,-6,6,-10,2,5,3,6,-4,2,-8,-8,-9,-10,4,-10,2,1,-9,-8,6,7,-1,5,-5,1,-7,6,3,1,-10,10,-6,2,5,8,-7,-1,8,-4,-4,8,6,-9,10,8,10,-3,-10,2,9,9,7,-4,7,-7,3,-4,9,-9,5,10,5,10,2,-5,5,5,-3,6,7,10,-1,10,-2,-1,-4,2,6,-7,5,-7,5,2,-3,7,-4,-9,-5,-6,-7,6,10,3,10,-4,3,7,5,7,10,7,2,8,4,6,1,-5,10,6,-9,6,2,-1,7,-7,1,-10,10,2,-1,9,10,2,-3,1,9,-5,3,1,5,6,2,1,-1,9,-3,6,2,5,-6,-7,-4,-7,-10,8,6,1,7,3,-7,1,-1,-7,-5,-8,1,-8,-10,3,-3,5,-4,-9,-2,-10,-7,1,10,-2,-4,-5,-8,9,8,-9,-2,2,3,-6,6,-6,-9,-10,6,-1,2,5,-1,-9,-6,-3,3,4,-9,-2,8,-7,-6,-3,8,-5,4,-2,4,-5,8,-9,-5,10,7,8,-2,2,1,2,-3,-2,7,-3,3,-1,6,-5,-7,5,-7,-9,8,-8,-1,2,9,3,6,-7,2,4,-10,-10,-4,-10,8,3,-5,8,-1,-1,2,6,-8,1,-5,-9,-5,-3,-4,1,6,-9,-5,6,7,8,-9,-9,9,8,-6,10,-8,10,8,7,5,3,-2,8,6,9,10,4,-8,5,1,-5,8,4,-7,8,-6,-4,1,8,-5,5,-4,7,1,-8,-7,5,6,-9,-10,-7,-1,-5,-2,-10,-1,-4,-3,-9,-3,9,7,3,-3,8,-3,-10,-5,-9,-9,6,3,4,-1,2,-9,-1,-7,10,1,3,-5,10,-9,9,-7,9,2,-8,8,6,3,4,6,-7,-3,10,-5,-10,-7,-4,1,-4,9,-8,4,-4,5,-6,-1,-7,5,-4,10,-5,-2,-3,2,-10,1,-8,3,-1,-10,-1,-4,-9,8,1,7,4,5,-6,5,10,5,-1,3,-9,3,-6,-8,7,-8,3,4,-9,-7,8,1,9,9,4,-6,-5,-3,-5,7,7,10,-3,9,3,-4,-7,-2,-1,-8,3,10,-2,-2,-3,9,-4,-10,-3,-8,-7,9,9,2,-2,-7,-4,-6,9,3,7,-2,1,8,2,-10,8,3,-3,-9,5,2,2,-6,-6,-3,-1,3,-6,5,5,-7,7,2,4,4,7,1,-6,2,-5,4,-7,-7,-8,-9,8,-7,5,-4,1,2,-4,9,1,-9,-4,2,1,-4,-4,1,-8,-8,10,-6,7,-8,1,8,-9,-10,-1,-4,-2,1,-1,9,-3,-4,6,-1,-6,-6,8,-2,-3,10,3,-6,2,4,-2,-3,-9,-5,7,-9,-8,-3,-9,3,-5,5,9,-4,1,-4,-10,-5,4,-3,-7,-5,5,1,-10,5,-9,3,4,-9,-7,7,10,4,5,6,-10,-6,6,9,4,-1,-6,1,4,-6,-4,6,-6,-9,-8,2,-5,-2,-8,9,7,-4,-6,5,-6,-9,-4,6,5,-3,-2,10,-5,-2,-5,4,-1,-9,3,7,4,10,10,10,-3,8,-9,-5,-3,7,8,-4,-8,-7,4,10,7,8,10,-5,-2,-8,-3,5,-8,6,2,4,-2,10,-5,5,-4,1,2,7,-1,5,6,2,10,1,-9,-1,7,6,-6,6,-6,6,-5,4,-5,-9,-8,-8,-10,-10,5,-9,-7,-6,10,4,3,5,-10,3,7,10,-5,-4,7,-6,-7,7,-2,6,-9,9,10,-9,3,8,5,5,-4,5,-3,6,-5,-6,9,10,-4,-9,3,7,-9,-5,-10,-4,-7,8,9,-4,10,-5,3,7,4,-4,-4,-2,3,-5,6,-9,-10,7,-4,6,-2,-3,6,-4,5,-7,8,-2,-7,-6,-8,-7,6,8,6,4,-6,-3,-8,-3,3,-4,1,4,4,-10,6,1,-3,4,4,7,6,4,-5,10,9,10,1,6,5,8,-3,-3,-9,-8,-4,4,-3,7,5,7,-3,-2,3,8,3,-9,-4,-5,-1,7,-7,7,-7,-7,4,-6,3,9,-5,-3,-4,7,5,2,-6,-1,-8,-1,5,-9,4,-3,-3,-2,-1,9,7,5,9,-8,-4,5,7,9,8,10,3,-8,10,-5,6,6,9,3,-9,-2,-10,-7,5,-1,-3,-4,6,3,3,-7,-3,2,6,-1,-6,8,-1,5,10,-8,6,-9,5,8,-1,7,-10,7,4,-9,-10,8,-3,-7,10,-5,-9,-1,-8,2,-6,3,-10,1,10,-6,-8,-2,-1,3,-8,10,-3,-2,1,-10,5,-2,6,10,-3,6,5,2,1,-7,-2,-4,7,-5,2,-5,1,-5,-1,2,-3,5,8,-4,-1,-6,8,-9,8,5,-9,8,-10,-6,-7,-2,9,-8,5,4,5,-2,-1,-9,-4,8,7,-5,8,5,-2,-6,6,-5,-8,-10,10,5,2,-10,-10,-2,-4,-3,10,10,7,-2,3,-6,8,-3,8,10,4,6,8,-1,5,-7,-4,-7,-4,-5,-8,-8,-9,-5,-1,-4,-6,-8,-8,-7,5,-8,-10,1,3,2,7,6,-5,2,9,-10,6,-7,9,7,-7,-4,-9,-4,-8,-2,8,-2,2,-8,10,3,-6,-2,4,10,6,10,-8,8,3,-3,-9,-6,9,-9,2,4,-4,-4,6,4,7,-7,-10,-2,-4,-4,10,-3,1,-7,-6,2,7,-2,1,7,2,4,-1,-3,-1,-8,-4,-1,5,-2,7,2,-2,-7,4,1,-9,6,-1,-5,-5,-7,-3,7,-4,-8,-3,-7,9,-7,9,7,-3,8,-5,8,3,2,-4,4,8,-9,4,-7,9,6,-10,-5,-9,6,-3,5,-2,6,3,-1,3,3,7,2,2,5,-4,-6,3,-6,-8,4,7,-5,-9,-3,-10,2,6,5,-6,3,-1,3,-1,-10,-2,-1,6,9,-6,-10,9,-4,-7,-5,1,3,7,8,4,8,-4,-5,9,-6,6,-9,-9,10,-4,-9,4,-7,-7,-8,-4,-7,7,9,-7,9,2,-8,3,-6,-4,-3,6,-7,6,-4,-4,-9,4,-7,6,2,-5,8,8,-6,9,-1,9,6,5,-6,-10,10,-4,4,-2,-9,-9,-7,-10,-9,2,6,10,-9,-3,-4,3,-8,8,8,-10,-8,-3,-8,-8,4,9,-3,1,3,-10,-8,10,9,-9,1,1,10,2,7,-3,10,-10,-10,-7,-6,2,8,-1,2,-4,-9,2,-1,5,4,10,3,-7,4,6,10,5,1,-7,-5,-8,7,6,-2,-7,-3,10,-8,7,-10,-1,2,-8,-1,-8,5,-3,-3,2,9,4,10,-6,-9,-10,9,-7,9,-5,-10,9,8,10,10,-9,-5,3,-4,-4,5,2,-5,-4,-4,-5,2,2,7,-1,5,-9,10,-4,10,-7,-1,-8,8,1,1,-8,1,2,1,-6,-1,7,-7,-6,-10,-2,2,9,2,-1,7,5,-9,-7,-10,7,8,-5,-4,1,-3,-6,5,-4,5,-1,5,10,4,-4,-10,6,-4,2,3,3,6,-3,-5,9,4,-4,-7,5,-4,6,10,4,4,-2,-9,2,-6,-8,4,3,-7,-7,1,-6,2,9,-3,-6,8,3,-4,-5,-2,1,10,1,1,4,1,7,9,5,-10,10,-8,-7,9,-5,5,-4,2,-4,5,-4,-5,10,-8,7,-8,8,-1,-10,-7,9,3,-6,-1,7,-8,2,4,9,-9,-10,7,-2,-2,-7,9,10,-3,4,-9,-8,4,4,4,-9,-4,-1,-8,-7,7,-9,4,-8,-8,-9,-5,-5,8,4,5,-8,-4,-7,-2,-3,10,7,3,-1,10,-9,-8,2,6,-10,9,9,7,-6,-10,-1,-2,6,-6,6,6,8,2,10,8,-10,-7,2,4,-4,6,-9,-4,6,10,5,-9,-8,5,-10,9,9,10,-2,9,3,1,-6,4,2,-3,-10,2,-5,7,7,9,1,-7,-4,-9,2,8,3,-9,8,4,6,5,2,-1,5,6,7,-1,10,1,-9,1,1,-9,-1,4,-10,1,10,-10,1,-2,-9,-1,-2,2,-1,3,2,10,8,3,6,9,-7,2,-5,6,9,5,-2,-5,8,5,-4,3,3,-10,-1,5,-10,-4,3,-10,-9,-8,-2,2,-2,9,-5,6,2,7,4,1,-10,8,-7,10,3,-7,-10,4,7,6,10,2,-9,-5,-2,7,-3,9,-5,-8,-6,5,5,8,5,-5,-7,6,7,-8,-8,-3,2,-5,-1,-9,-9,5,-6,-7,6,-5,-1,8,2,9,3,-5,3,5,-4,-5,9,-8,-2,7,8,-2,2,-9,7,8,-9,6,2,10,-6,-8,2,1,10,-1,-9,-7,2,-9,3,7,-8,-8,4,6,-10,6,-10,-5,4,-7,8,6,-2,-8,-2,-9,-10,1,-2,4,3,5,5,-2,-7,-4,2,6,4,-9,9,-7,4,10,6,1,4,-3,-7,9,-3,-10,2,-1,9,1,9,-4,-7,-2,-10,2,-8,-4,9,10,8,-9,7,7,1,2,5,4,4,-4,-10,10,-1,-4,2,2,-5,8,-10,-7,-2,-10,9,-10,-3,-9,1,2,8,4,-1,7,7,9,-2,-10,-7,3,8,9,10,-4,-9,-4,-2,6,5,1,-1,-1,9,9,-4,2,-8,3,10,8,4,10,-10,-1,-2,-9,5,7,-3,-1,-9,-1,7,4,3,-1,-1,5,5,-6,-10,-1,-5,10,3,7,8,10,3,-3,3,3,4,7,4,8,8,-9,-6,-3,4,-2,7,8,-5,6,4,5,-7,-9,6,5,5,-7,4,-1,-9,1,-6,-7,9,-10,-1,2,7,-9,7,7,7,-2,-3,9,5,-9,8,-1,-7,9,7,-8,-3,7,10,-9,-7,9,-3,3,10,-8,-10,-5,-1,7,-6,-4,3,-8,-5,-1,9,4,2,-9,-3,-3,5,10,-4,5,5,8,3,10,-4,-4,-4,-4,-8,-1,9,4,1,1,-2,-7,8,-4,3,10,-6,10,-3,-8,-7,-3,-10,10,10,9,8,8,3,-6,5,-2,10,-3,-8,5,-8,4,3,3,7,-5,10,-10,5,-9,-4,5,5,-9,9,-8,4,8,6,-3,5,-8,3,-10,-8,1,10,-7,4,-5,4,1,-5,-5,2,4,6,-6,3,-9,5,-2,8,9,7,-6,-7,-9,7,5,-10,9,-4,6,1,6,-5,-10,-10,-4,10,10,-8,4,-2,5,2,1,8,-3,1,4,10,9,-10,-10,3,-2,10,-4,-6,6,6,-6,-5,5,10,3,3,1,3,8,1,6,-7,-4,3,3,-1,4,-9,3,-8,9,-6,-9,-4,-6,-8,-8,5,9,6,-7,-2,1,10,1,10,-3,4,7,8,5,-10,-10,5,-2,3,5,10,7,2,10,-9,10,5,-1,5,-1,-7,7,-2,4,-10,-1,7,-2,5,4,-7,7,-4,-8,-4,-1,2,4,8,-9,7,1,-7,6,9,8,-4,1,-5,4,-8,2,-2,-3,-4,-1,2,8,8,-1,-4,4,-4,-6,4,10,-5,-3,9,-1,8,-8,7,10,-10,2,-10,3,-9,-4,-9,4,-7,4,3,-2,9,-3,-6,2,6,1,8,1,-3,10,-9,7,-1,3,8,9,5,-4,7,-6,-7,8,-3,3,-3,-7,7,-10,8,-4,-9,4,5,5,-5,6,10,-9,2,-8,-5,7,10,10,-1,4,7,3,7,5,-9,-6,-4,1,-7,9,5,-3,3,2,-8,-3,-4,7,4,-5,-3,-3,6,-1,4,-4,-7,-1,10,6,10,1,6,7,-1,5,3,-1,2,1,-3,5,10,2,-1,-8,-8,7,8,-7,8,3,10,10,5,9,6,9,10,-6,2,4,-4,7,6,-10,-6,6,6,-7,9,10,10,1,-5,-2,2,8,-8,-5,10,1,-10,-1,6,7,4,1,7,3,-1,-8,3,-7,2,7,1,10,-6,-6,-1,-8,-10,-8,-2,-6,5,8,-1,-9,8,9,-6,1,-9,6,9,4,4,-6,-2,3,-8,5,3,4,-2,3,1,-1,10,-10,-1,8,-6,-4,-9,-6,-6,-6,-7,-4,-3,-6,-10,7,-2,9,-1,9,-3,8,1,-9,-4,-8,7,-9,-9,-7,2,7,10,1,4,1,-4,9,4,2,5,1,4,-4,-7,-1,2,-6,5,4,-7,9,5,-7,-10,-8,-1,-6,-9,9,1,6,10,-6,7,-6,-6,-6,-5,-1,-3,9,-8,-10,-5,-4,9,-2,9,-3,9,-3,-4,-7,5,3,8,2,9,2,1,10,3,-8,-9,3,8,-4,-8,-3,-10,-8,8,-2,-6,-1,-10,8,5,10,-4,-4,10,7,1,-10,6,-7,2,3,8,4,9,3,-5,-1,-7,-5,5,6,2,6,6,6,5,-3,-5,10,8,-9,-8,3,-5,6,-10,3,10,4,5,3,9,-4,4,8,9,4,6,-5,-8,1,3,2,5,9,-5,-1,-10,-9,-7,4,-4,5,8,3,1,5,-9,-9,-4,4,1,-4,-8,-3,7,3,8,3,8,-3,7,-4,7,-1,-10,-10,10,-3,-4,7,6,5,10,9,2,-8,1,7,3,-9,-3,-5,-3,-5,-7,-10,-2,6,-3,-1,-8,-3,-1,7,8,-7,4,-6,-2,-6,3,1,-1,9,-3,-8,-1,10,-3,4,-4,2,6,-7,-1,7,-8,-9,-5,-4,1,9,-5,4,7,-9,10,1,3,4,2,6,-8,-1,-5,1,-9,8,9,-3,-1,-9,8,-8,-7,-5,-2,1,7,-4,8,-10,6,-10,1,3,-8,4,-2,4,-3,-8,-9,-8,10,-1,-7,-5,1,10,-1,-6,7,4,10,-9,-9,9,-8,6,-7,8,10,-1,-1,6,5,-2,10,2,-3,3,1,-10,7,9,-7,-1,2,-9,-4,6,5,-4,3,-6,-10,-10,9,2,-8,-3,9,1,6,6,-4,-1,-10,7,2,2,10,-3,-2,8,-5,4,-3,-5,6,10,4,1,6,-9,-1,10,-3,-2,-9,4,1,10,-4,4,-6,9,6,6,-10,-2,-8,-4,-7,-5,-7,2,8,2,5,-1,10,3,-2,10,5,-4,-4,3,5,10,6,9,-2,-7,9,-1,10,7,-4,5,-8,-4,5,6,5,1,-5,-7,-3,7,-4,5,2,-7,10,10,1,10,9,-8,-9,-8,-1,-5,-1,10,-9,-1,-6,1,-10,-2,5,9,-8,-10,7,-3,-3,3,-1,9,-8,2,1,-10,6,-4,-5,-7,-1,10,-3,6,-1,9,-4,1,1,5,-1,-2,8,8,-2,-6,9,1,-1,9,-8,6,-9,1,2,-3,-3,-10,3,-6,-10,-8,-10,-3,5,-7,-2,-2,-9,4,-3,6,2,-8,-1,-9,-7,-2,-5,-10,-8,-5,9,5,2,-1,4,2,-3,-10,3,5,-6,8,1,4,-6,-2,-8,-3,4,-7,1,-2,-8,-9,2,10,3,1,-8,3,-6,9,10,4,7,-2,-9,-5,9,-7,-9,10,4,6,-6,6,-2,4,6,-5,9,1,2,-4,-9,-1,-7,10,2,-5,-3,-2,5,-8,-6,-6,-2,1,-3,4,-6,-2,-8,6,8,-10,-2,9,-8,2,2,9,3,8,4,9,1,-3,-6,8,-10,-9,1,-4,5,-5,2,-10,3,-4,-2,-9,6,1,-2,-8,-9,9,-4,-1,8,5,9,6,5,-10,-5,-1,10,-3,-1,7,9,-2,-8,2,-10,-8,6,2,6,-8,9,-1,1,3,6,-4,7,-10,2,5,-10,-2,8,8,5,4,7,-7,9,2,2,-2,3,-8,-3,8,5,-10,5,-7,-5,-6,-6,1,-3,-3,-9,5,-9,7,-5,7,-5,3,6,10,-2,-2,-9,6,-5,6,5,6,-4,6,-7,9,2,4,5,9,-2,8,5,-1,4,-2,1,-3,-10,6,3,-1,-9,-5,3,-2,5,4,5,-8,-5,7,8,-10,-10,8,-2,-10,-6,-5,-9,1,8,-3,3,9,-4,5,-6,-2,3,-10,9,-8,-5,3,2,7,3,3,3,-5,10,-9,-7,3,-1,7,-4,-6,-9,-2,-4,3,1,5,-9,9,2,-6,-10,-1,1,-10,2,-6,4,-2,-9,8,-10,-3,5,8,1,8,-10,-4,-6,10,2,-7,-3,9,-5,-1,-1,-5,6,6,5,3,-5,-10,3,9,5,-4,-6,-10,9,7,6,8,3,-1,10,-8,1,7,8,-9,-3,-1,5,1,3,-6,10,-10,10,3,-7,6,-9,-4,-1,9,-8,-5,2,-9,-6,3,-10,8,6,1,-10,-5,-2,-7,-4,6,-9,-6,-1,-5,1,10,10,-1,-9,4,-9,-10,8,3,6,-7,-2,-7,10,-9,-9,-2,9,5,-6,-9,8,6,-9,-9,10,-1,8,7,-9,9,-7,6,4,2,-10,7,-10,-5,3,5,9,8,-7,5,3,-3,5,-4,3,-9,9,-1,10,-10,-10,-6,5,8,9,8,-7,2,-10,-3,4,-6,-9,-2,4,9,10,-5,-9,5,-6,10,5,7,8,-10,1,5,-4,-6,10,-6,-1,5,6,8,4,9,-1,5,-6,2,-1,-7,4,7,3,4,6,3,-9,6,-10,1,1,1,-10,-7,7,-8,-9,7,-8,-7,-8,8,3,1,9,5,9,-9,6,-10,10,-8,-2,-3,3,7,-10,1,9,7,5,9,-5,-10,4,7,-9,3,9,-6,-5,6,-9,9,8,-7,-5,4,7,-4,-8,-3,8,-10,3,7,-10,5,9,-9,-9,9,-5,7,-1,-2,-4,5,2,-6,5,7,8,5,6,-6,10,-3,10,-6,-3,-9,-5,8,4,-4,-1,4,-3,-9,-3,-7,2,-8,10,-3,-4,9,-9,-7,-2,1,6,-5,4,-1,10,-10,8,5,3,2,-10,-7,9,-3,-8,6,-10,2,-4,-1,-1,-7,8,-8,9,10,-10,-10,2,-9,8,6,-4,-3,1,5,4,2,3,7,-7,-1,4,5,-7,-8,-10,4,-3,4,-1,-8,10,-1,10,-5,2,4,-7,4,3,-10,8,-7,-1,7,-2,8,-4,5,4,-1,-5,-6,5,-8,-4,3,2,-3,3,-6,-4,6,-3,4,-10,8,3,10,4,10,6,-9,5,9,1,-2,-10,-7,-1,4,7,9,-4,9,6,-5,3,9,4,-6,5,-2,-8,2,9,1,6,7,8,7,7,6,-5,-8,7,6,3,1,-8,-9,6,4,-1,-3,8,2,-3,-7,-5,9,-8,4,-6,3,7,-10,3,9,4,-2,4,-10,-4,9,-2,1,-5,3,1,5,7,3,7,5,-3,-8,3,-8,-6,6,5,-10,-4,4,-9,3,2,8,-7,-5,-4,-9,-2,3,6,-6,7,-3,-8,-6,8,5,-7,-1,7,-7,10,7,-5,-10,2,-1,-1,-1,5,-8,-7,3,5,8,-10,5,3,2,2,8,-7,2,5,-10,1,3,10,-3,10,9,8,-1,-5,8,4,-3,5,10,-1,10,10,-1,7,-5,9,8,9,-8,-10,-2,-2,-7,2,-9,-10,4,-2,8,1,8,-1,-9,4,3,-6,10,1,7,5,-6,-4,-2,-7,8,8,-10,-2,7,6,2,6,2,-9,3,-2,8,-1,-2,3,-10,6,7,-9,-4,6,-7,-7,-4,-7,-10,-7,-4,-9,9,-6,2,-7,2,5,2,-1,8,9,6,-8,-4,-3,3,7,-5,-9,7,-5,-3,-4,-6,4,-4,-5,-9,-7,9,-1,3,2,-3,4,-6,-8,1,-4,6,2,-10,-2,-1,-2,-8,-3,-1,8,6,3,-1,3,-2,1,-4,1,2,-3,-2,-5,7,3,3,-3,3,2,-6,10,-1,-7,-3,-1,2,10,-10,-4,3,7,9,4,8,10,1,4,-10,-9,1,-10,3,-7,-6,-9,10,-6,8,3,-6,-1,-2,8,-10,-8,6,-4,-9,1,-3,6,-8,2,-2,3,-9,-4,-1,-6,-1,10,2,6,8,-7,-10,4,-5,4,-5,-5,3,-7,6,-3,-6,4,-10,9,10,9,-1,7,-3,-3,-10,-3,10,7,-3,-4,-5,9,1,-1,4,-2,-5,2,4,6,-6,8,9,3,-6,-3,7,6,9,-10,1,7,5,-6,7,-4,1,10,-7,-3,1,-8,5,-6,-5,-7,-10,-2,6,-5,-10,-7,-1,2,-3,3,-9,2,-6,10,7,-6,4,4,-6,4,-8,-8,9,6,-2,-5,1,9,-8,-9,-6,3,-2,9,-8,5,-5,2,2,-5,-1,9,10,9,5,-4,-2,-1,4,4,5,7,-4,-6,-8,-3,3,-1,8,-2,10,3,3,-8,-6,-8,-4,2,5,-4,-9,2,-1,-7,-4,3,5,8,2,4,8,8,8,-8,8,-5,-1,10,-1,10,-6,-1,-8,8,3,-7,-7,-1,-5,-7,2,-9,-1,4,6,9,-6,-6,9,6,7,3,8,-8,-4,5,8,-1,-5,-1,9,-4,10,9,3,1,1,-3,-9,-4,-5,-1,7,2,-4,-2,4,-8,-7,4,-4,-9,9,6,2,-1,2,-9,-3,-10,5,10,9,4,6,-5,2,-7,-7,-1,6,-7,-5,7,7,-4,1,-2,1,6,3,-10,-7,-8,-4,3,-2,-8,7,2,3,8,10,-4,-5,10,4,-5,-1,-3,-3,-4,-7,1,-8,-7,10,6,-7,-5,-3,-4,-7,7,-3,4,7,2,-8,7,9,6,-3,-1,3,5,-1,4,-8,-9,-1,9,-8,-3,6,-2,-6,-6,1,9,5,1,-1,-7,5,-9,6,-4,9,-1,-7,-3,1,2,-9,5,5,4,-2,6,-7,-2,3,7,3,-10,-1,3,-2,-4,-8,-7,-9,-2,9,6,2,-9,4,-8,4,-7,-1,-8,9,-4,-5,3,-9,4,-2,-6,-8,1,10,1,9,2,-2,1,-6,-8,5,4,-4,-1,-1,-3,1,3,7,-7,3,6,-10,7,-3,7,-4,-9,-1,9,7,-1,7,-10,-1,1,-6,1,6,-10,-1,-5,9,-5,6,2,-5,-4,10,-9,2,-5,8,2,4,-3,10,1,-3,2,10,5,-1,-2,-4,2,-2,4,-4,6,-10,-2,10,-2,10,2,-9,9,-7,-1,-3,-7,-9,-7,-7,1,-3,-10,8,5,7,10,-6,6,-2,-6,-7,10,-4,-2,-9,10,8,4,-3,6,8,-6,6,2,6,-3,-1,-2,9,7,7,-1,-7,-2,5,8,3,10,5,-7,9,7,-4,-4,3,10,-9,6,5,-6,-4,-4,10,6,7,8,5,8,4,-10,-5,6,3,-10,10,1,-2,-2,-10,-10,2,-6,3,6,-6,-4,-9,5,-6,2,-2,-1,9,-1,-4,7,8,2,-7,-1,-5,4,-9,9,3,-1,-4,3,6,2,4,-5,-5,6,-7,5,-3,-7,-7,8,-8,6,1,-5,3,8,-1,10,2,-7,4,-1,2,-1,-6,8,-8,-6,-6,-8,2,-6,9,-8,1,-1,1,2,-2,10,-2,10,7,-10,10,-1,4,-5,3,-7,3,7,-10,5,2,7,-8,-5,-6,-7,5,-9,7,-5,9,3,7,-6,-1,-8,10,10,-4,-2,-1,7,9,4,-1,-6,-10,4,1,6,-5,-6,2,5,-10,-8,-8,-5,-2,4,-10,8,7,9,4,-9,-2,5,10,1,7,-9,6,-3,-6,4,7,-8,-3,-2,4,7,-8,-9,-2,-8,-10,7,2,-4,7,6,1,-8,-1,-3,-6,1,5,-4,-10,10,-9,6,7,4,2,-9,2,-7,-2,7,3,3,8,8,10,-8,3,4,5,-5,6,10,-3,-2,-9,4,9,-3,5,-4,7,5,7,-3,7,-1,-4,-4,10,-4,9,5,5,6,9,-4,4,-10,3,5,-1,-5,-1,-2,7,2,-3,-3,-6,6,-10,2,4,-5,5,-8,-10,1,-4,-2,10,8,-4,-2,1,-4,10,5,9,-2,-1,3,5,-1,-9,-1,-1,-4,1,3,-4,3,4,10,5,10,-2,7,8,-6,3,8,6,6,6,7,8,-3,-7,10,7,-10,-4,8,-5,9,-2,1,-8,5,-8,-3,-4,1,-3,5,-2,1,-2,-7,3,-6,-4,-5,5,6,4,-10,-10,-10,-3,-3,2,10,-2,2,5,-4,-4,-3,9,-2,1,-1,-4,-3,8,3,-1,3,-4,-1,-2,9,-4,-4,-2,-5,-10,-5,7,-3,-6,-4,-1,-2,-1,-3,-8,10,-5,-4,-3,-1,5,-9,-3,-9,3,6,10,9,1,-6,-8,-2,5,1,6,2,5,-6,-6,-9,-8,-2,-5,2,7,-6,6,-8,-5,-10,-9,4,4,4,3,-10,10,-9,-5,10,1,-6,7,10,1,5,-10,5,7,5,-5,-10,7,10,2,-3,-10,-10,3,1,7,3,4,-3,-9,2,-5,9,-4,5,8,9,-7,5,6,-3,1,-2,5,-6,8,-8,-10,5,5,10,-8,-3,7,-6,-3,7,4,-9,-9,-5,2,-7,10,8,2,9,8,-4,10,-9,-8,9,8,-2,2,1,1,-8,-2,6,-6,-5,-9,-9,-8,3,5,-9,-1,-9,10,-9,-1,-2,5,8,-5,6,-1,-2,-3,6,-9,10,-8,5,8,9,-2,2,-10,-7,-1,-10,7,-1,9,8,-2,9,5,8,-7,5,-9,-7,7,-6,8,-3,8,-5,1,6,-2,-3,-9,2,-5,5,6,-3,-7,-3,2,2,-10,-6,2,4,7,1,-6,1,-2,7,10,10,8,-4,9,-2,-5,-2,2,-1,3,4,6,5,4,5,4,1,9,4,-1,9,-7,-3,6,10,5,-1,9,-9,7,-7,9,3,-3,-8,-3,10,-7,-1,-6,-4,-4,2,-10,8,-6,8,-3,5,-10,-2,-1,5,5,1,-8,2,10,7,6,-7,10,-8,-8,1,-6,-3,5,-5,5,-2,2,2,10,2,-5,-6,6,-10,-5,-2,-5,-5,2,-3,-5,7,10,9,-1,4,10,10,4,-2,-10,9,1,8,-4,-10,5,-8,9,3,-10,5,-6,8,5,-8,-4,2,1,-1,-8,-7,10,-10,-5,-10,-1,-7,-10,-9,-4,-1,4,-6,-3,3,5,8,7,6,-10,-9,1,-8,-8,9,-3,-10,6,-3,2,2,-6,-5,-8,-7,7,-9,-1,-1,-5,-2,-1,-7,-10,-7,6,10,-10,5,5,-6,7,3,4,6,4,-2,-10,-3,-1,1,-10,9,5,9,7,2,-5,-9,-9,-10,3,-2,-1,3,5,-9,-4,-6,4,1,-3,5,-8,-8,-1,3,-10,-5,2,-5,2,4,4,-7,7,10,-10,9,1,-8,6,4,-8,1,9,-7,-9,8,-2,2,4,-9,-8,6,-8,10,8,1,5,4,-5,-6,3,-8,3,-2,3,-5,2,10,8,3,6,-9,-6,-8,5,7,-9,1,-8,-1,6,2,9,-9,6,10,8,4,4,6,5,7,10,-8,-1,-9,-6,7,5,-10,-10,2,2,1,-9,5,-10,-7,-10,-9,5,10,-1,5,-2,8,7,-9,7,5,9,-9,2,-1,1,5,-10,-7,1,8,9,7,-5,7,10,-7,3,10,-1,10,-3,-8,-10,-7,-9,6,10,-7,2,6,-7,-9,-8,-8,1,1,-2,10,-5,5,-1,-5,-4,3,-6,6,-1,-4,7,8,-9,-2,9,3,9,10,-8,-1,7,8,3,9,-2,-5,-6,-5,-3,5,10,-5,-7,9,2,-8,3,4,-2,4,-7,-1,3,7,-4,5,4,5,7,-7,-3,9,2,6,6,6,-8,-6,4,6,-8,3,2,-3,1,9,-6,-4,10,2,7,-9,6,5,-9,-9,-1,-6,2,2,-9,9,-9,-4,2,-7,6,3,1,2,-10,-6,-5,6,2,-3,10,8,5,-8,-10,6,-1,7,-1,-4,4,-4,2,8,-1,-9,-3,10,-3,-4,5,10,-1,2,10,2,5,2,-9,5,9,1,-3,9,1,-8,5,6,6,9,1,-7,1,-6,-2,-8,-7,3,2,-3,-9,-3,10,2,5,-10,-5,5,-10,6,-3,3,5,-9,9,-4,-4,5,-4,8,10,-8,-8,-3,-5,8,-3,-8,-8,7,-9,-8,-6,7,-9,1,-4,6,-1,8,-6,-6,7,7,-10,-5,-3,-4,-5,1,5,-5,1,10,-10,10,5,7,9,-9,8,2,6,-2,-6,-5,7,9,-1,1,-5,7,6,-6,-8,6,9,-9,3,-8,-6,-7,2,10,4,3,4,-1,-4,7,-2,-7,-2,-9,-10,3,9,9,-7,5,2,-1,9,-7,1,-6,9,-7,2,4,-3,7,7,1,7,-5,5,-7,2,-7,10,-5,9,-9,-7,2,-10,-2,-7,2,1,4,5,-8,9,-7,1,7,-5,-2,9,-2,6,-7,7,6,-7,3,4,-9,9,2,-10,-1,-7,-9,10,7,-7,9,-8,-3,-7,-8,-8,-6,3,-8,-8,9,-3,-4,-2,-10,-7,-5,6,-9,4,6,4,-8,1,-9,-4,-4,7,-3,9,7,4,1,10,5,-9,6,4,-10,2,3,10,-5,3,3,1,10,-2,9,4,7,-6,9,-9,-6,10,6,-7,6,-1,4,1,-9,-6,6,-2,-5,6,-2,-5,-7,-8,-5,-6,-8,10,-10,7,-5,-8,5,3,-2,-6,-5,3,-5,9,-7,-3,-3,-9,5,2,1,8,-2,9,-10,-8,-3,-1,1,8,-6,-5,3,1,1,7,-5,-9,-6,1,-1,-4,-8,-3,-6,9,4,-8,7,5,3,10,-9,-5,7,-2,4,5,3,-3,2,1,-5,3,10,-9,-1,1,8,-4,3,-7,6,-3,3,9,7,9,9,-5,1,-2,-3,-4,-10,-7,-6,3,8,2,1,5,9,1,8,-7,-8,-5,3,-3,8,9,4,-6,8,-4,-7,-9,4,6,-6,3,5,6,-7,-4,-8,-9,-7,-7,-10,5,9,-6,4,5,9,5,-7,-4,9,-9,1,9,2,-2,-6,-2,3,-6,-3,8,-2,-6,3,5,-5,8,2,-3,-3,7,-4,-4,8,-3,-2,1,-3,3,8,-7,-2,-1,2,1,9,-5,-8,9,9,-6,-2,-5,5,-2,-7,6,-3,6,-10,-3,6,3,8,-9,-5,-10,-2,-1,-4,-10,1,-10,2,2,-2,5,4,3,2,-9,-7,-4,-5,-5,-8,-9,10,3,-7,8,-9,-9,-2,5,4,-3,-6,-7,-1,-9,7,8,-1,-3,-6,-10,-3,10,-1,1,2,4,10,8,-6,-10,8,2,9,-8,6,1,-6,7,9,-3,-4,8,10,7,4,-9,-7,2,6,-2,7,-2,-6,10,-8,8,-2,10,-4,-8,-6,1,-9,1,2,-8,7,-1,2,10,-6,4,7,-10,2,-9,6,-4,-2,10,10,-2,1,-2,5,-3,-2,-1,-10,10,-8,2,9,-10,-3,-5,-10,10,10,-2,-5,8,-1,-6,9,-7,-7,2,5,8,-4,-10,2,6,1,-9,-5,4,7,1,8,-4,4,-2,9,8,-7,-8,10,2,-5,8,1,6,-3,-3,-2,9,-6,9,-3,9,-7,10,4,-7,-3,7,-8,-2,-1,-6,-6,10,-6,-7,8,-10,4,10,-9,7,3,-8,10,-6,6,3,-4,4,-4,10,7,-4,-7,-1,3,-2,3,-9,-1,1,6,-1,-8,2,-6,-3,10,3,4,-6,9,3,-10,-4,-7,10,10,-4,8,10,6,-4,5,-6,9,-5,-9,-2,-1,10,3,1,-3,10,3,-3,7,7,-7,2,4,6,-6,-2,9,4,4,-3,-2,-8,7,4,-1,8,4,3,7,-1,2,-1,5,-10,3,-6,10,-10,7,3,-6,5,-10,8,-10,4,2,2,1,8,7,10,10,-4,-3,3,7,9,-6,7,-4,9,-6,-5,5,2,-7,-1,2,4,-4,7,6,-9,3,-10,8,-4,10,-3,3,9,10,7,-5,9,7,-1,4,-5,9,-5,-5,-3,-8,-10,-4,1,8,7,-10,-5,4,1,-7,8,-4,-4,2,3,-6,3,3,3,1,-7,8,-7,7,2,-6,9,-3,-6,10,7,6,3,1,1,8,4,-9,8,-10,-9,1,4,-10,-9,2,4,5,7,7,-1,-5,1,-7,-1,9,1,7,6,-8,8,2,-9,-1,-4,-4,3,1,5,-3,2,6,4,3,-3,-4,2,-4,2,7,6,-4,-3,3,10,6,-7,-9,8,-10,2,3,-9,-5,2,8,3,7,4,4,7,8,-4,7,-1,-4,-1,9,4,1,-5,-4,-1,-4,10,-1,-10,10,-7,6,4,-1,7,-2,-3,6,2,-6,-10,7,10,6,-6,4,5,-9,1,3,9,10,-10,10,6,-4,8,-6,-7,10,3,7,5,-7,8,-8,-7,1,-5,-1,8,-5,7,7,-6,-7,1,6,-2,4,-5,10,-1,1,-1,4,6,-8,-3,-6,1,9,-9,-10,8,-4,-8,-6,3,-4,-8,6,10,-8,10,-3,9,-3,-6,1,8,-8,-10,-5,2,1,-8,5,-2,10,-6,3,4,4,-10,4,2,4,6,7,9,-9,5,-4,4,-9,6,6,7,-9,-6,-4,-7,-10,-8,-3,5,3,-4,8,-10,10,8,-5,7,3,7,10,6,6,-9,2,-1,-3,-1,-4,-8,6,-2,3,2,-3,-3,-4,-2,-6,1,6,-2,-6,-10,5,-7,-5,1,10,-4,-6,-5,8,9,10,-2,2,5,-9,8,-6,7,8,9,-5,1,10,10,-7,1,-10,4,-7,10,8,9,7,-3,-6,-2,-5,-10,3,10,10,-7,-4,-10,4,4,10,-3,-1,-9,-1,10,8,-9,-2,8,2,-10,-8,5,2,3,-7,8,-5,7,-10,9,6,8,9,-10,3,7,-2,-5,-4,-6,-5,8,-3,-5,3,10,4,-7,-6,-5,-7,-2,9,-5,4,-5,-8,-8,-10,-4,6,2,4,4,6,-10,-4,-6,-8,7,2,2,4,1,-10,5,-10,8,6,-5,1,-9,-8,9,4,9,-5,8,-10,3,3,-7,-5,-9,7,7,-9,-5,1,-2,-10,-3,-3,-4,9,2,5,8,-4,-3,3,9,6,9,-7,-2,-6,-4,5,2,5,-9,5,2,-4,-2,-7,-9,6,10,-2,2,9,-7,-6,-10,2,3,7,-9,-2,-10,-4,2,10,3,6,10,-3,-10,5,-10,-3,6,-8,-3,-8,1,-3,-1,-7,-4,2,-8,2,-4,2,-4,6,-5,5,-7,2,-4,-9,7,-9,-8,-7,-8,6,6,5,-1,1,5,5,-8,8,-1,7,4,8,-1,-10,-4,10,-4,-1,7,-2,-8,6,3,10,-2,1,6,-2,6,5,-10,-1,1,-1,6,3,-10,3,-3,-7,-1,5,-10,4,10,-6,-4,5,3,-4,-7,4,-3,3,10,-3,8,8,-4,4,2,2,-10,-3,-1,1,-3,-9,10,4,-2,10,-4,10,3,-2,5,-4,1,10,-4,3,-4,6,4,3,-7,-6,5,1,-9,4,-8,-2,6,4,1,-7,-10,10,-3,10,9,-2,-9,2,-7,5,-7,-4,-7,4,6,4,6,-1,-10,-8,-4,-3,5,-4,-4,-8,4,-5,-2,10,2,-5,-9,-5,7,7,-8,-6,-8,7,-9,-2,-9,-3,-7,1,6,-8,-2,5,-10,1,-7,-3,9,-4,7,9,-6,-8,-7,4,5,-10,5,-6,-2,-3,8,-3,-7,5,-4,9,9,4,-6,-9,8,-10,9,-10,-5,-9,10,-9,-8,1,1,3,-9,7,-5,8,8,-8,4,-9,4,1,9,-3,6,-2,-3,-6,1,-2,2,2,8,8,-2,2,-4,-10,-4,-1,-6,-7,7,5,-9,-6,7,-10,10,10,2,5,-4,8,-9,-10,1,8,-1,5,8,-10,1,-3,-7,-10,2,6,4,7,2,-10,5,10,-9,-7,-8,5,8,-10,-8,5,-8,9,4,5,3,10,3,5,6,-10,-10,4,4,2,-4,3,9,-4,-10,-8,2,3,7,7,10,8,6,-8,5,2,9,3,-9,-1,-6,4,-7,5,-4,7,-4,4,6,8,-3,5,6,-2,-7,-6,1,2,8,4,-2,6,6,3,5,5,4,2,10,-6,6,-9,-3,-9,-8,3,-5,-3,-2,-5,10,4,2,5,-9,-8,-5,6,-7,9,9,7,-2,7,1,-8,3,-6,-8,-4,1,6,8,4,-8,-5,6,2,-4,-9,-10,5,-8,6,-1,-7,-4,-8,6,2,-8,10,8,-9,1,-9,-6,-4,-5,-2,-3,-9,-3,-1,-3,-2,9,3,4,-4,-2,5,7,-4,-2,-1,7,-3,-10,-9,9,-4,-3,-8,10,1,-4,2,8,6,-4,4,-10,2,-3,-3,-2,3,-3,-2,2,5,-2,7,-4,-9,-1,-8,1,-1,2,-9,10,-10,2,5,5,-7,-8,-6,-9,-9,-7,-1,8,5,7,-4,5,-9,-6,-8,-6,-8,3,-5,9,3,2,6,-8,-9,4,-4,-7,-5,-7,2,2,-8,-5,5,8,10,2,9,9,-4,1,-2,-1,1,-2,3,-4,6,3,-3,-9,-2,-1,10,-1,2,2,-2,3,-3,6,-10,7,10,-9,-5,-8,-9,8,-8,6,2,-6,-3,6,7,-3,4,2,2,-9,-10,-3,-3,-2,1,2,6,-6,10,-4,-7,1,9,-5,7,-7,10,-9,3,5,7,-7,-7,3,-8,2,6,-7,1,3,6,6,-3,9,6,10,-1,-8,2,6,8,3,5,6,-2,3,-2,5,6,3,-10,-7,2,1,-9,-3,-7,1,-6,8,-10,9,-2,9,-8,1,-5,-9,6,-10,9,1,2,7,-3,-8,-8,6,1,9,8,-7,2,2,8,-2,7,-2,-7,7,-4,4,-1,-3,8,2,-5,10,7,-3,6,-9,-1,10,-9,-10,3,4,-6,8,10,1,1,1,5,-10,-3,2,1,4,10,-3,-9,6,-6,9,-4,-1,4,-10,8,-8,10,-5,-3,-1,2,-3,-10,6,3,2,-6,2,-5,-8,4,-5,5,5,10,10,-9,3,-4,-5,-4,4,-10,-9,9,-9,5,-7,-6,10,-10,8,-3,-7,9,4,9,-3,-4,-3,2,-6,-9,-7,5,3,-8,-5,1,10,5,3,-1,2,-1,-8,8,1,-7,2,-6,9,5,6,7,-8,-1,-8,-7,10,5,2,4,-1,-2,4,10,-1,-1,-1,-5,3,-9,-10,1,-4,-2,2,-10,6,7,-9,7,-2,-8,-7,1,1,-8,6,-5,-8,9,-10,2,-8,-9,-8,6,5,4,-9,1,-6,-4,-10,5,3,-7,-10,2,10,6,10,-9,-9,8,-7,-1,9,5,2,7,-1,-2,-5,-2,8,2,-3,-4,3,10,2,-3,7,-10,6,-6,-6,-10,5,-4,2,-10,9,7,7,-2,-1,9,2,6,-1,-7,-3,5,-2,10,9,9,7,1,-5,2,-7,1,2,-9,2,-9,-6,-2,5,2,-5,1,-7,5,-5,-6,-7,4,-6,4,3,-4,8,-5,9,5,8,-5,10,5,-4,10,9,5,-8,-3,10,10,-3,-1,2,-8,5,5,1,1,-2,9,4,7,2,-5,-7,-2,-9,5,-10,2,-6,1,9,-3,2,2,-5,-9,9,9,6,8,-4,-7,-8,2,-7,1,4,7,-5,9,8,-9,2,4,-9,3,9,-10,10,1,4,3,4,-3,1,-1,1,-5,-7,-1,5,-2,4,1,5,-3,-4,6,-8,-8,-2,-7,8,4,-3,4,8,2,9,8,-3,-2,9,6,-8,8,5,2,9,1,-10,-2,10,-10,5,-2,9,7,3,-7,8,-2,3,6,-10,4,1,-6,-9,-1,-6,-3,6,-5,3,-1,-7,4,7,-2,7,4,-3,1,1,-4,-5,-2,-9,2,-6,5,-8,-5,-8,-9,-4,-7,7,7,-1,3,-10,-9,-9,-2,-5,-2,5,5,8,-2,-9,9,6,4,-9,-3,3,7,-2,10,-8,-8,2,8,-9,2,9,6,9,3,8,-6,-6,4,6,5,6,4,-7,10,5,6,5,-9,1,-2,-6,1,-5,-1,-8,-2,-10,-4,1,4,8,-7,-1,7,8,4,-2,-7,-1,6,5,-6,6,-3,-6,2,9,6,8,6,5,-10,-7,1,-5,9,-9,-6,-9,-4,8,-8,9,-8,7,3,-4,-8,1,-10,10,-6,-6,-4,1,-9,-5,-5,1,1,9,-2,8,3,9,6,3,-8,4,4,-9,-4,10,-9,5,2,2,7,4,-9,-3,4,-5,-5,-4,4,-1,-10,-10,-5,6,8,-1,-8,-5,8,2,-6,-4,-7,9,4,2,3,10,8,5,-4,1,9,-10,5,-1,-8,1,7,-7,-10,-4,2,2,10,5,2,-9,-3,-10,-1,-1,-9,-6,-2,7,3,-8,-5,-4,6,10,-7,-8,8,-1,2,9,4,-8,-10,10,-6,10,-9,-8,-6,-2,7,-1,10,5,-4,5,-2,4,-10,7,5,9,4,8,6,-10,9,-10,-5,-5,1,-7,-5,-5,9,2,1,-7,-9,-2,-4,7,-6,-4,-2,-10,-9,4,-9,-10,4,2,5,10,-6,-10,7,-6,2,1,-1,7,-7,-5,-3,-5,-10,2,-8,-1,7,7,-9,-6,-6,-7,8,-8,-4,-1,9,3,5,-7,10,-9,1,2,2,-3,2,5,3,-5,6,5,2,-9,5,-9,-7,-3,-8,-10,-10,-9,6,-4,-7,7,5,-1,2,-3,7,4,-2,-2,-4,1,9,8,-1,-4,1,4,-7,-2,-6,-8,9,-6,-10,5,5,8,5,-9,10,7,-7,9,5,-3,-8,-1,-2,2,-7,6,3,6,-1,4,-8,-3,9,7,3,4,-10,2,4,-3,-9,5,-2,9,5,5,4,6,-9,-9,6,6,8,7,-2,-7,1,4,-10,-7,6,-8,-9,4,-9,10,4,-1,-6,6,-1,8,4,3,4,-1,-1,9,-3,-8,5,10,-6,4,9,9,-5,-2,-10,3,7,4,-10,10,5,-8,5,-10,8,2,-3,9,-9,-5,8,-3,-3,-6,10,-8,1,-5,-3,7,8,1,4,9,3,-2,-3,9,-2,9,-9,8,5,8,10,-1,9,-2,-4,-6,-7,1,3,-6,-4,-8,-5,7,-2,8,-2,-4,1,-6,7,5,8,5,-7,-8,-9,-6,-5,-2,7,2,-9,2,2,-8,-10,4,8,-3,2,5,-10,-4,3,-5,-6,-2,3,6,4,4,-6,3,-10,10,-6,1,-6,-2,-3,-9,-3,-5,-5,-10,6,2,-4,7,-9,-6,-1,-2,4,-8,-2,9,8,-10,6,1,-7,3,5,-5,-4,-9,10,4,9,2,-8,5,-4,8,-8,-1,9,-6,1,-9,2,1,-3,-5,-6,-4,-9,-10,-5,-4,-7,-7,8,-3,5,-5,-3,-1,3,9,-7,6,1,9,-6,10,-8,2,-2,-7,8,-6,-10,7,4,-5,-8,-7,10,-6,8,2,5,-6,-10,4,8,-10,8,4,-5,5,1,-4,-7,-9,-6,-5,-6,8,5,-5,3,-1,-3,4,-3,1,10,-7,6,2,-7,-5,-7,1,4,-2,3,9,-8,4,-2,7,2,9,-10,-2,-9,1,9,-9,-10,-1,6,-1,-2,6,-3,6,-5,-5,-5,1,3,1,6,8,-10,-2,-8,-9,-7,-4,7,6,-4,-8,-8,-2,-5,-7,-10,-8,6,7,3,6,-2,-10,2,-5,-9,-5,4,-9,10,-9,-3,-3,8,-2,-7,-1,-9,-9,9,7,-9,-6,-10,3,3,2,-10,4,4,-9,6,-9,-10,-8,-6,-8,7,-9,1,7,-5,-1,-2,5,2,-7,1,-5,-8,-2,8,-7,-6,-2,-10,2,-7,-10,-1,-7,8,-3,-1,2,1,-2,-5,-6,7,9,-8,-3,-7,6,-10,1,8,-9,-2,8,6,-4,1,2,-9,-7,4,-2,7,-9,2,6,-3,8,-7,-3,-8,-4,9,1,8,5,-10,-5,6,3,-3,5,-4,-5,1,4,7,10,-3,-3,9,-7,4,5,5,7,6,7,-7,1,-10,-7,2,-10,8,-7,3,5,5,9,-9,9,-8,-5,9,-3,2,6,9,10,1,-6,3,-4,-3,-10,9,8,-8,-2,-9,-5,-9,5,-7,7,4,2,7,6,9,2,5,-5,3,9,-6,-2,-5,3,2,2,5,3,-10,-2,3,6,4,-3,3,-8,8,2,-9,-7,-6,6,3,-3,-8,-1,-9,-3,2,-1,-9,4,10,-1,2,9,7,9,-7,-2,-7,8,-3,10,-6,-10,1,2,-9,-8,3,9,5,9,-10,6,5,3,2,5,6,3,-1,-1,-8,-1,8,-10,-8,4,-1,5,-2,-5,-6,4,-6,-1,2,7,-1,-10,8,2,8,-6,-6,-4,-1,-5,-9,-9,8,4,-2,-1,-9,1,-10,5,-9,-8,4,-3,10,2,-9,-6,2,8,-1,6,1,-9,-10,-8,7,-4,-7,-6,7,10,-2,2,6,-8,10,-9,1,1,-4,2,6,-4,3,3,9,-5,-10,5,-10,5,4,10,-3,9,-1,-1,-7,1,5,1,7,-5,4,5,2,3,-5,3,5,7,3,4,-5,3,10,3,1,-6,-9,-8,-10,-7,7,5,2,-9,-2,-4,-9,-6,-2,-8,-1,7,-5,1,7,2,-7,-7,9,-3,-10,-9,-5,-9,5,7,4,-8,-8,-6,-8,-10,-3,6,-4,4,-8,-4,9,-10,-5,-2,3,-7,10,8,2,-5,-9,-9,-1,-7,-8,-2,6,-1,10,-9,-5,6,10,5,5,6,-2,7,8,2,4,-10,7,1,-7,2,7,-7,-1,-10,4,-10,-9,-10,8,-2,8,-7,5,4,-8,-2,-2,3,-3,2,9,4,7,-6,7,-1,9,-2,6,4,2,-1,7,2,7,7,-5,5,-4,9,6,-10,10,9,8,1,1,8,8,-10,-3,-2,-8,10,-5,-5,3,-9,-7,-8,-4,-9,-1,-5,-7,5,-3,-6,-3,5,9,2,-7,-2,7,-1,1,8,-7,10,-9,1,1,3,6,-3,-7,-7,-3,-9,1,3,-10,-3,-3,8,-9,4,-8,5,2,-1,2,-5,6,-5,-4,10,-9,-10,7,4,8,-5,4,10,-9,-7,8,-4,-6,3,1,-5,-6,5,-4,9,-9,-8,-6,9,1,4,7,-6,-1,2,-2,-2,-3,-2,-6,-1,-7,9,9,-7,-3,-10,1,5,4,-3,6,7,-10,6,-1,-4,6,-2,-9,-7,-1,7,2,-5,-9,5,2,5,-4,-2,10,3,-7,-2,3,-3,6,-8,9,-7,10,4,-5,-5,-1,-5,-3,6,-5,-8,-8,5,-8,2,-6,8,10,-9,-2,-5,-3,4,1,6,8,4,-5,-10,2,10,1,-6,-9,-10,-1,-4,7,8,7,2,10,-1,-3,-5,3,2,5,-8,3,5,-5,8,-6,10,2,7,7,4,9,6,-7,7,-8,-6,3,5,-10,-1,-1,8,-2,5,4,-1,1,4,-10,9,6,-9,7,-8,-10,3,-10,5,7,1,-9,2,-4,7,-7,-1,4,-3,-7,7,-10,7,3,-1,-1,-2,9,-2,2,6,-8,4,9,2,-8,3,1,-7,-3,-7,-3,7,-2,-4,8,4,6,-7,-5,1,10,-3,-4,-7,1,1,10,-5,-7,-9,-8,3,10,9,9,-3,3,-1,-8,-4,-10,-4,-5,7,7,-8,-8,9,1,7,7,10,-6,7,-9,3,-7,2,-6,-5,4,10,-4,-9,-6,-4,4,4,-5,4,-3,-3,-1,-4,5,-2,3,-8,8,2,6,8,10,-2,3,8,2,-8,-10,2,2,-2,-3,-5,-2,6,3,-7,-7,9,-4,8,10,-9,-8,6,2,-8,10,7,-10,-9,-8,-5,5,9,-1,-5,4,-3,-2,4,-7,-10,-8,9,9,-9,4,4,-10,-1,1,-3,-10,7,3,8,6,7,5,1,3,3,-6,9,1,6,-5,-8,5,-9,-9], dtype = "int16")#candidate|7998|(9240,)|const|int16
var_7999 = relay.var("var_7999", dtype = "float64", shape = (160,))#candidate|7999|(160,)|var|float64
call_7994 = relay.TupleGetItem(func_7789_call(relay.reshape(var_7995.astype('int64'), [6,]), relay.reshape(var_7996.astype('int64'), [144,]), relay.reshape(var_7997.astype('int16'), [660,]), relay.reshape(const_7998.astype('int16'), [9240, 1]), relay.reshape(var_7999.astype('float64'), [4, 40]), ), 6)
call_8000 = relay.TupleGetItem(func_7795_call(relay.reshape(var_7995.astype('int64'), [6,]), relay.reshape(var_7996.astype('int64'), [144,]), relay.reshape(var_7997.astype('int16'), [660,]), relay.reshape(const_7998.astype('int16'), [9240, 1]), relay.reshape(var_7999.astype('float64'), [4, 40]), ), 6)
uop_8014 = relay.atan(uop_7969.astype('float64')) # shape=(1, 10, 10)
uop_8019 = relay.asinh(uop_8014.astype('float32')) # shape=(1, 10, 10)
uop_8024 = relay.acosh(uop_8014.astype('float64')) # shape=(1, 10, 10)
bop_8031 = relay.logical_and(uop_8014.astype('bool'), relay.reshape(const_7968.astype('bool'), relay.shape_of(uop_8014))) # shape=(1, 10, 10)
output = relay.Tuple([call_7994,var_7995,var_7996,var_7997,const_7998,var_7999,uop_8019,uop_8024,bop_8031,])
output2 = relay.Tuple([call_8000,var_7995,var_7996,var_7997,const_7998,var_7999,uop_8019,uop_8024,bop_8031,])
F = relay.Function([var_7995,var_7996,var_7997,var_7999,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_7995,var_7996,var_7997,var_7999,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
