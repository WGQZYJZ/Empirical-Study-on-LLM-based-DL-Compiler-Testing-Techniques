==========mod==========
#[version = "0.0.5"]
def @func_7155() -> (Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %0 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1 = %0.0;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 5, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = @func_5444() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %7 = not_equal(%4, %5) /* ty=Tensor[(2, 5, 3), bool] */;
  %8 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  %9 = %6.1;
  (%7, %8, %9)
}

def @func_7819() -> (Tensor[(1344), uint8],) {
  %10 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %11 = %10.2;
  (%11,)
}

def @func_6503() -> (Tensor[(2, 5, 3), float64],) {
  %12 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%12,)
}

def @func_9511() -> (Tensor[(2, 5, 3), bool], Tensor[(15, 4, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %13 = @func_7155() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %14 = @func_7067() /* ty=(Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) */;
  %15 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
  %16 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %17 = %13.0;
  %18 = %14.1;
  %19 = %15.1;
  %20 = %16.0;
  %21 = @func_5821() /* ty=Tensor[(2, 5, 3), float64] */;
  (%17, %18, %19, %20, %21)
}

def @func_7392() -> Tensor[(8, 11, 2), float64] {
  %22 = @func_6338() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %22.1
}

def @func_704() -> Tensor[(12, 16, 7), uint8] {
  %23 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %23.1
}

def @func_2391() -> (Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
  %24 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %26 = reshape(%25, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %27 = @func_1674(%26) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
  %28 = %27.2;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), float64] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %30 = cos(%29) /* ty=Tensor[(312), float32] */;
  %31 = cast(%30, dtype="uint8") /* ty=Tensor[(312), uint8] */;
  %32 = shape_of(%28, dtype="int32") /* ty=Tensor[(1), int32] */;
  %33 = cast(%28, dtype="uint8") /* ty=Tensor[(312), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %37 = %24.0;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %39 = reshape(%35, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %40 = reshape(%36, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %41 = reshape(%38, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %42 = @func_1313(%39, %40, %41) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %43 = cast(meta[relay.Constant][5] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %44 = reshape(%43, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %45 = @func_532(%44) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %48 = reshape(%46, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %49 = reshape(%47, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %50 = @func_346(%48, %49) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %51 = %50.2;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %53 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %54 = minimum(%33, %34) /* ty=Tensor[(312), uint8] */;
  %55 = %42.0;
  %56 = %45.2;
  %57 = sigmoid(%52) /* ty=Tensor[(2, 5, 3), float64] */;
  %58 = %53.0;
  (%37, meta[relay.Constant][1] /* ty=Tensor[(176), float64] */, meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, %54, %55, meta[relay.Constant][4] /* ty=Tensor[(360), float32] */, %56, meta[relay.Constant][5] /* ty=Tensor[(2912), uint64] */, %57, %58)
}

def @func_5166() -> (Tensor[(2, 5, 3), float64],) {
  %59 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  (%59,)
}

def @func_2479() -> Tensor[(8, 11, 2), float64] {
  %60 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %60.0
}

def @func_5804() -> (Tensor[(2, 5, 3), float64],) {
  %61 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %62 = %61.0;
  (%62,)
}

def @func_3187() -> (Tensor[(176), float64],) {
  %63 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %64 = %63.1;
  (%64,)
}

def @func_6720() -> (Tensor[(176), float64],) {
  %65 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %66 = %65.0;
  (%66,)
}

def @func_7340() -> (Tensor[(2, 5, 3), float64], Tensor[(1, 180), float32], Tensor[(180), float32], Tensor[(176), float64]) {
  %67 = @func_6692() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %69 = reshape(%68, newshape=[1, 180]) /* ty=Tensor[(1, 180), float32] */;
  %70 = @func_5022(%69) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) */;
  %71 = %70.3;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %73 = reshape(%72, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %74 = @func_2611(%73) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %75 = %67.2;
  %76 = %74.4;
  (%75, %71, meta[relay.Constant][6] /* ty=Tensor[(180), float32] */, %76)
}

def @func_8972() -> Tensor[(2, 5, 3), float32] {
  %77 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
  %77.0
}

def @func_9251(%var_9231: Tensor[(2, 5, 3), float64]) -> Tensor[(2, 5, 3), int8] {
  %78 = @func_6692() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %79 = %78.0;
  %80 = cast(%var_9231, dtype="int8") /* ty=Tensor[(2, 5, 3), int8] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="int8") /* ty=Tensor[(2, 5, 3), int8] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%82, %83) /* ty=Tensor[(2, 5, 3), int8] */
}

def @func_6338() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
  %84 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %85 = @func_5821() /* ty=Tensor[(2, 5, 3), float64] */;
  %86 = %84.1;
  (%85, %86)
}

def @func_2879(%var_2842: Tensor[(180), float64]) -> (Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) {
  %87 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %88 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %90 = reshape(%89, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %91 = @func_1674(%90) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
  %92 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %93 = cast(%var_2842, dtype="float64") /* ty=Tensor[(180), float64] */;
  %94 = reshape(%93, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float64] */;
  %95 = %88.0;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %97 = @func_1581(%94) /* ty=Tensor[(15, 4, 3), float64] */;
  %98 = cast(%97, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %99 = reshape(%96, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %100 = reshape(%98, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %101 = @func_1051(%99, %100) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %102 = %87.1;
  %103 = %91.1;
  %104 = %92.1;
  %105 = %101.2;
  (%102, %95, %103, meta[relay.Constant][7] /* ty=Tensor[(312), float64] */, %104, %97, %var_2842, %105)
}

def @func_5598(%var_5589: uint16, %var_5590: Tensor[(1, 16, 10), uint16]) -> Tensor[(1, 16, 10), bool] {
  %106 = cast(%var_5589, dtype="bool") /* ty=bool */;
  %107 = cast(%var_5590, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  not_equal(%106, %107) /* ty=Tensor[(1, 16, 10), bool] */
}

def @func_2190() -> (Tensor[(12, 16, 7), uint8],) {
  %108 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
  %109 = %108.4;
  (%109,)
}

def @func_4136() -> (Tensor[(1344), uint8],) {
  %110 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %111 = %110.2;
  (%111,)
}

def @func_647(%var_624: Tensor[(8, 11, 2), float64], %var_636: Tensor[(1344), uint8]) -> (Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) {
  %112 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %113 = %112.2;
  %114 = cast(%var_624, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = cast(%var_636, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %119 = reshape(%118, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
  %120 = @func_441(%119) /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %121 = cast(%113, dtype="uint16") /* ty=Tensor[(8, 11, 2), uint16] */;
  %122 = shape_of(%var_624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%var_624, dtype="uint16") /* ty=Tensor[(8, 11, 2), uint16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %125 = logical_or(%116, %117) /* ty=Tensor[(8, 11, 2), bool] */;
  %126 = %120.0;
  %127 = bitwise_or(%123, %124) /* ty=Tensor[(8, 11, 2), uint16] */;
  (%125, %126, %var_636, %127)
}

def @func_5038() -> Tensor[(2, 5, 3), float64] {
  %128 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %128.0
}

def @func_6216(%var_6187: Tensor[(2912), bool]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %129 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %130 = @func_3406() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) */;
  %131 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %132 = %131.1;
  %133 = cast(%var_6187, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(1), int32] */;
  %135 = cast(%132, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?), int64] */;
  %137 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %141 = reshape(%140, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
  %142 = @func_265(%141) /* ty=(Tensor[(6, 4, 13), uint16],) */;
  %143 = %129.0;
  %144 = %130.1;
  %145 = right_shift(%135, %136) /* ty=Tensor[(2912), int64] */;
  %146 = @func_2479() /* ty=Tensor[(8, 11, 2), float64] */;
  %147 = acos(%139) /* ty=Tensor[(2, 5, 3), float32] */;
  %148 = %142.0;
  (%143, %144, %145, %146, %147, %148, meta[relay.Constant][8] /* ty=Tensor[(312), float64] */)
}

def @func_6484() -> (Tensor[(2, 5, 3), float64],) {
  %149 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  (%149,)
}

def @func_7908(%var_7881: Tensor[(11, 4, 4), float64]) -> (Tensor[(8, 11, 2), int8], Tensor[(11, 4, 4), uint16]) {
  %150 = cast(%var_7881, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %151 = reshape(%150, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %152 = @func_2068(%151) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) */;
  %153 = cast(%var_7881, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %154 = log10(%153) /* ty=Tensor[(11, 4, 4), float64] */;
  %155 = @func_5398() /* ty=(Tensor[(176), float64],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %158 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%154, dtype="uint16") /* ty=Tensor[(11, 4, 4), uint16] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %161 = %152.1;
  %162 = bitwise_xor(%159, %160) /* ty=Tensor[(11, 4, 4), uint16] */;
  (%161, %162)
}

def @func_4330() -> Tensor[(2, 5, 3), float64] {
  %163 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %163.0
}

def @func_7067() -> (Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) {
  %164 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %165 = %164.1;
  %166 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="bool") /* ty=Tensor[(176), bool] */;
  %169 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%165, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %173 = less_equal(%170, %171) /* ty=Tensor[(8, 11, 2), bool] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_1713() -> (Tensor[(1, 2912), float64],) {
  %175 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
  %176 = %175.8;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(1, 2912), float64] */;
  %178 = exp(%177) /* ty=Tensor[(1, 2912), float64] */;
  (%178,)
}

def @func_7314(%var_7301: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), bool],) {
  %179 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %180 = %179.0;
  %181 = cast(%var_7301, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = logical_or(%183, %184) /* ty=Tensor[(2, 5, 3), bool] */;
  (%185,)
}

def @func_2731(%var_2728: Tensor[(360), float32]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) {
  %186 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
  %187 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %188 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
  %189 = cast(%var_2728, dtype="float32") /* ty=Tensor[(360), float32] */;
  %190 = %188.0;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %192 = cast(meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %193 = reshape(%189, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %194 = reshape(%191, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %195 = reshape(%192, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %196 = @func_1313(%193, %194, %195) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %197 = %186.0;
  %198 = %187.0;
  %199 = %196.2;
  (%197, %198, %190, %199, %var_2728, meta[relay.Constant][9] /* ty=Tensor[(180), float32] */)
}

def @func_3141() -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %200 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %202 = reshape(%201, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
  %203 = @func_265(%202) /* ty=(Tensor[(6, 4, 13), uint16],) */;
  %204 = %200.0;
  %205 = %203.0;
  (%204, %205, meta[relay.Constant][10] /* ty=Tensor[(312), float64] */)
}

def @func_1674(%var_1670: Tensor[(312), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %206 = cast(%var_1670, dtype="float64") /* ty=Tensor[(312), float64] */;
  %207 = reshape(%206, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
  %208 = @func_265(%207) /* ty=(Tensor[(6, 4, 13), uint16],) */;
  %209 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  %210 = %208.0;
  (%209, %210, %var_1670)
}

def @func_5907() -> Tensor[(2, 5, 3), float64] {
  %211 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %211.4
}

def @func_3544() -> Tensor[(15, 4, 3), float64] {
  %212 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %212.0
}

def @func_2262() -> (Tensor[(2, 5, 3), float64],) {
  %213 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %214 = %213.0;
  (%214,)
}

def @func_6356() -> (Tensor[(8, 11, 2), float64],) {
  %215 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %216 = %215.1;
  (%216,)
}

def @func_8160(%var_8112: Tensor[(180), float32], %var_8146: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float32], Tensor[(2, 5, 3), uint32], Tensor[(30, 1), float64]) {
  %217 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %218 = %217.0;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %220 = cast(%var_8112, dtype="float32") /* ty=Tensor[(180), float32] */;
  %221 = reshape(%219, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
  %222 = reshape(%220, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %223 = @func_3518(%221, %222) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
  %224 = cast(%var_8146, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %225 = reshape(%224, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %226 = @func_1571(%225) /* ty=(Tensor[(2, 5, 3), uint32],) */;
  %227 = %223.0;
  %228 = %226.0;
  (%218, %227, %var_8112, %228, %var_8146)
}

def @func_8942() -> Tensor[(2, 5, 3), float64] {
  @func_3743() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_441(%var_413: Tensor[(12, 16, 7), uint8]) -> (Tensor[(12, 16, 7), uint8],) {
  %229 = cast(%var_413, dtype="float32") /* ty=Tensor[(12, 16, 7), float32] */;
  %230 = exp(%229) /* ty=Tensor[(12, 16, 7), float32] */;
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 16, 7), uint8] */, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %232 = shape_of(%var_413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_413, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = less(%233, %234) /* ty=Tensor[(12, 16, 7), bool] */;
  %236 = cast(%235, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %237 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%230, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %240 = right_shift(%238, %239) /* ty=Tensor[(12, 16, 7), uint8] */;
  (%240,)
}

def @func_109(%var_103: Tensor[(13, 16, 14), uint64], %var_104: Tensor[(13, 16, 14), uint64]) -> (Tensor[(13, 16, 14), uint64],) {
  %241 = cast(%var_104, dtype="uint64") /* ty=Tensor[(13, 16, 14), uint64] */;
  %242 = shape_of(%var_103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_103, dtype="uint64") /* ty=Tensor[(13, 16, 14), uint64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %245 = maximum(%243, %244) /* ty=Tensor[(13, 16, 14), uint64] */;
  (%245,)
}

def @func_1947(%var_1868: Tensor[(2912), uint64], %var_1906: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) {
  %246 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %247 = cast(%var_1868, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %248 = reshape(%247, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %249 = @func_532(%248) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %250 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %253 = cast(%var_1906, dtype="float32") /* ty=Tensor[(180), float32] */;
  %254 = cast(%var_1868, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %255 = atanh(%254) /* ty=Tensor[(2912), float64] */;
  %256 = cast(%255, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %257 = reshape(%252, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %258 = reshape(%253, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %259 = reshape(%256, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
  %260 = @func_1809(%257, %258, %259) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
  %261 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %262 = cast(%255, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %263 = sin(%262) /* ty=Tensor[(2912), float32] */;
  %264 = cast(%255, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(1), int32] */;
  %266 = cast(%263, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?), float32] */;
  %268 = floor_mod(%266, %267) /* ty=Tensor[(2912), float32] */;
  %269 = cast(%var_1868, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %270 = log(%269) /* ty=Tensor[(2912), float64] */;
  %271 = cast(%270, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %272 = shape_of(%268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(%268, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), bool] */;
  %275 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %276 = cast(%var_1868, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %277 = shape_of(%263, dtype="int32") /* ty=Tensor[(1), int32] */;
  %278 = cast(%263, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?), bool] */;
  %280 = %246.0;
  %281 = %249.1;
  %282 = %260.3;
  %283 = %261.1;
  %284 = greater_equal(%273, %274) /* ty=Tensor[(2912), bool] */;
  %285 = %275.0;
  %286 = logical_or(%278, %279) /* ty=Tensor[(2912), bool] */;
  (%280, %281, %251, %282, %var_1906, %283, %284, %285, %286)
}

def @func_2754() -> (Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) {
  %287 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %290 = reshape(%288, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %291 = reshape(%289, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %292 = @func_1947(%290, %291) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) */;
  %293 = %287.0;
  %294 = %292.8;
  (%293, %294, meta[relay.Constant][12] /* ty=Tensor[(2912), uint64] */, meta[relay.Constant][13] /* ty=Tensor[(180), float32] */)
}

def @func_2899() -> (Tensor[(12, 16, 7), uint8],) {
  %295 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  (%295,)
}

def @func_7930() -> (Tensor[(176), float64],) {
  %296 = @func_5398() /* ty=(Tensor[(176), float64],) */;
  %297 = %296.0;
  (%297,)
}

def @func_2573() -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) {
  %298 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %299 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %300 = %298.0;
  %301 = %299.0;
  (%300, %301)
}

def @func_3439() -> Tensor[(12, 16, 7), uint8] {
  %302 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %302.0
}

def @func_8396() -> Tensor[(2, 5, 3), float64] {
  %303 = @func_5444() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %303.1
}

def @func_743() -> (Tensor[(8, 11, 2), float64],) {
  %304 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %305 = %304.3;
  (%305,)
}

def @func_1278() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %306 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %307 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %308 = cast(meta[relay.Constant][14] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %309 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %310 = reshape(%308, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %311 = reshape(%309, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %312 = @func_1051(%310, %311) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %313 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %316 = reshape(%315, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %317 = @func_8(%316) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %318 = %306.1;
  %319 = %307.0;
  %320 = %312.1;
  %321 = %317.0;
  (%318, %319, %320, meta[relay.Constant][14] /* ty=Tensor[(176), float64] */, meta[relay.Constant][15] /* ty=Tensor[(6, 30), float32] */, %314, %321)
}

def @func_4037() -> (Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) {
  %322 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %325 = reshape(%324, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
  %326 = @func_441(%325) /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %327 = %326.0;
  (%323, %327)
}

def @func_7671() -> (Tensor[(1, 2912), float64], Tensor[(2, 5, 3), float64]) {
  %328 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
  %329 = %328.0;
  %330 = @func_6253() /* ty=Tensor[(2, 5, 3), float64] */;
  (%329, %330)
}

def @func_8460(%var_8457: Tensor[(7, 3, 14), float32]) -> Tensor[(7, 3, 14), float32] {
  %331 = cast(%var_8457, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  atanh(%331) /* ty=Tensor[(7, 3, 14), float32] */
}

def @func_9296(%var_9267: Tensor[(2912), bool]) -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(312), float64], Tensor[(2912), bool], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %332 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %333 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %334 = cast(%var_9267, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %335 = reshape(%334, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %336 = @func_6216(%335) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
  %337 = cast(meta[relay.Constant][16] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %338 = reshape(%337, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %339 = @func_7844(%338) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) */;
  %340 = @func_6338() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %341 = %332.0;
  %342 = %333.0;
  %343 = %336.6;
  %344 = @func_2479() /* ty=Tensor[(8, 11, 2), float64] */;
  %345 = %339.2;
  %346 = %340.1;
  %347 = @func_9069() /* ty=Tensor[(8, 11, 2), float64] */;
  %348 = @func_7392() /* ty=Tensor[(8, 11, 2), float64] */;
  (%341, %342, %343, %var_9267, %344, %345, meta[relay.Constant][16] /* ty=Tensor[(180), float64] */, %346, %347, %348)
}

def @func_8255() -> (Tensor[(1344), uint8],) {
  %349 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
  %350 = %349.0;
  (%350,)
}

def @func_9423() -> Tensor[(?, 2912), bool] {
  %351 = @func_7128() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) */;
  %351.2
}

def @func_4401() -> (Tensor[(2, 5, 3), float64],) {
  %352 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%352,)
}

def @func_6123() -> Tensor[(14, 1, 3), float64] {
  %353 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
  %353.0
}

def @func_5821() -> Tensor[(2, 5, 3), float64] {
  @func_5373() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_2164() -> Tensor[(2, 5, 3), float64] {
  %354 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %354.0
}

def @func_578() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) {
  %355 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %356 = cast(meta[relay.Constant][17] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %357 = reshape(%356, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
  %358 = @func_441(%357) /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %359 = %355.0;
  %360 = %358.0;
  (%359, %360, meta[relay.Constant][17] /* ty=Tensor[(1344), uint8] */)
}

def @func_654() -> (Tensor[(8, 11, 2), float64],) {
  %361 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %362 = %361.3;
  (%362,)
}

def @func_6281() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %363 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %364 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %365 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
  %366 = %363.0;
  %367 = %364.0;
  (%365, %366, %367)
}

def @func_4634(%var_4631: Tensor[(30), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) {
  %368 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %369 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %370 = %368.1;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %372 = reshape(%371, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %373 = @func_8(%372) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %374 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %375 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %376 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
  %377 = %373.0;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %379 = cast(%var_4631, dtype="float64") /* ty=Tensor[(30), float64] */;
  %380 = reshape(%378, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %381 = reshape(%379, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %382 = @func_346(%380, %381) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %383 = %369.0;
  %384 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  %385 = %374.0;
  %386 = %375.5;
  %387 = %376.0;
  %388 = %382.2;
  (%370, %383, %384, %377, %385, %386, %387, %388, %var_4631)
}

def @func_7463() -> Tensor[(15, 4, 3), float32] {
  %389 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %389.2
}

def @func_4702() -> (Tensor[(2, 5, 3), float32], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), uint32], Tensor[(2, 5, 3), float64]) {
  %390 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %391 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %392 = %391.1;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %394 = cast(%392, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %395 = reshape(%394, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %396 = @func_1571(%395) /* ty=(Tensor[(2, 5, 3), uint32],) */;
  %397 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %398 = %390.1;
  %399 = log2(%393) /* ty=Tensor[(2, 5, 3), float64] */;
  %400 = %396.0;
  %401 = %397.0;
  (%398, %399, %400, %401)
}

def @func_1051(%var_992: Tensor[(176), float64], %var_1031: Tensor[(180), float32]) -> (Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
  %402 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
  %403 = %402.5;
  %404 = cast(%var_992, dtype="int8") /* ty=Tensor[(176), int8] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(%403, dtype="int8") /* ty=Tensor[(176), int8] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), int8] */;
  %408 = cast(%var_1031, dtype="float32") /* ty=Tensor[(180), float32] */;
  %409 = cast(%var_1031, dtype="float32") /* ty=Tensor[(180), float32] */;
  %410 = reshape(%408, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %411 = reshape(%409, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %412 = right_shift(%406, %407) /* ty=Tensor[(176), int8] */;
  %413 = @func_37(%410, %411) /* ty=Tensor[(15, 4, 3), float32] */;
  (%412, %413, %var_1031)
}

def @func_9069() -> Tensor[(8, 11, 2), float64] {
  %414 = @func_5154() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  cosh(%416) /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_3518(%var_3507: Tensor[(2, 88), float64], %var_3508: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) {
  %417 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %418 = cast(%var_3507, dtype="float64") /* ty=Tensor[(2, 88), float64] */;
  %419 = cast(%var_3508, dtype="float32") /* ty=Tensor[(180), float32] */;
  %420 = cast(meta[relay.Constant][18] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %421 = reshape(%418, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %422 = reshape(%419, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %423 = reshape(%420, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
  %424 = @func_1809(%421, %422, %423) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
  %425 = %417.0;
  %426 = %424.2;
  (%425, %426, %var_3507, %var_3508, meta[relay.Constant][18] /* ty=Tensor[(2912), uint64] */)
}

def @func_8001(%var_7991: Tensor[(3, 60), float32]) -> (Tensor[(8, 11, 2), bool], Tensor[(8, 11, 2), float64], Tensor[(3, 60), bool]) {
  %427 = @func_7067() /* ty=(Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) */;
  %428 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %429 = reshape(%428, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %430 = @func_3942(%429) /* ty=(Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) */;
  %431 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %432 = asinh(%431) /* ty=Tensor[(3, 60), float32] */;
  %433 = cast(%var_7991, dtype="bool") /* ty=Tensor[(3, 60), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(3, 60), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %437 = %427.0;
  %438 = %430.3;
  %439 = less(%435, %436) /* ty=Tensor[(3, 60), bool] */;
  (%437, %438, %439)
}

def @func_9620() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %440 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %441 = %440.1;
  %442 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  %443 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  (%441, %442, %443)
}

def @func_8521() -> Tensor[(2, 5, 3), float64] {
  %444 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %444.0
}

def @func_265(%var_255: Tensor[(6, 4, 13), float64]) -> (Tensor[(6, 4, 13), uint16],) {
  %445 = cast(%var_255, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %446 = sigmoid(%445) /* ty=Tensor[(6, 4, 13), float64] */;
  %447 = cast(%var_255, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %448 = acosh(%447) /* ty=Tensor[(6, 4, 13), float64] */;
  %449 = cast(%448, dtype="uint16") /* ty=Tensor[(6, 4, 13), uint16] */;
  %450 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%446, dtype="uint16") /* ty=Tensor[(6, 4, 13), uint16] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %453 = bitwise_or(%451, %452) /* ty=Tensor[(6, 4, 13), uint16] */;
  (%453,)
}

def @func_5683() -> (Tensor[(12, 16, 7), uint8],) {
  %454 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %455 = %454.0;
  (%455,)
}

def @func_8648(%var_8641: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
  %456 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %457 = shape_of(%var_8641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_8641, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%458, %459) /* ty=Tensor[(10, 6, 14), float64] */
}

def @func_8999(%var_8983: Tensor[(6, 14, 15), int64], %var_8984: Tensor[(6, 14, 15), int64]) -> (Tensor[(6, 14, 15), bool], Tensor[(12, 16, 7), uint8]) {
  %460 = cast(%var_8984, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
  %461 = shape_of(%var_8983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_8983, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = less_equal(%462, %463) /* ty=Tensor[(6, 14, 15), bool] */;
  %465 = @func_3439() /* ty=Tensor[(12, 16, 7), uint8] */;
  (%464, %465)
}

def @func_532(%var_474: Tensor[(2912), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %466 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %467 = cast(meta[relay.Constant][21] /* ty=Tensor[(2912), uint64] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %468 = shape_of(%var_474, dtype="int32") /* ty=Tensor[(1), int32] */;
  %469 = cast(%var_474, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?), bool] */;
  %471 = equal(%469, %470) /* ty=Tensor[(2912), bool] */;
  %472 = cast(%var_474, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %473 = cast(%var_474, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %474 = reshape(%472, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
  %475 = reshape(%473, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
  %476 = @func_109(%474, %475) /* ty=(Tensor[(13, 16, 14), uint64],) */;
  %477 = %476.0;
  %478 = cast(%477, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
  %479 = shape_of(%471, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(%471, dtype="int32") /* ty=Tensor[(2912), int32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), int32] */;
  %482 = left_shift(%480, %481) /* ty=Tensor[(2912), int32] */;
  %483 = cast(%471, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(1), int32] */;
  %485 = cast(%482, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %487 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %488 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %489 = %466.4;
  %490 = minimum(%485, %486) /* ty=Tensor[(2912), uint64] */;
  %491 = %487.0;
  %492 = %488.1;
  (%489, %490, %491, %492)
}

def @func_3840(%var_3771: Tensor[(9, 15, 10), int8], %var_3821: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) {
  %493 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 15, 10), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
  %494 = shape_of(%var_3771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_3771, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = logical_or(%495, %496) /* ty=Tensor[(9, 15, 10), bool] */;
  %498 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 15, 10), int8] */, dtype="int8") /* ty=Tensor[(9, 15, 10), int8] */;
  %499 = shape_of(%var_3771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_3771, dtype="int8") /* ty=Tensor[(9, 15, 10), int8] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %502 = bitwise_xor(%500, %501) /* ty=Tensor[(9, 15, 10), int8] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %504 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%497, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = cast(%502, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %508 = tan(%507) /* ty=Tensor[(9, 15, 10), float64] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %510 = acosh(%509) /* ty=Tensor[(9, 15, 10), float64] */;
  %511 = cast(%var_3821, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = cast(%510, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %516 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%508, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %519 = cast(%var_3771, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %520 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%510, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %523 = minimum(%505, %506) /* ty=Tensor[(9, 15, 10), float64] */;
  %524 = greater(%513, %514) /* ty=Tensor[(9, 15, 10), bool] */;
  %525 = add(%517, %518) /* ty=Tensor[(9, 15, 10), float32] */;
  %526 = right_shift(%521, %522) /* ty=Tensor[(9, 15, 10), uint32] */;
  (%523, %524, %525, %526)
}

def @func_5207(%var_5197: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint64], Tensor[(8, 11, 2), float64]) {
  %527 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %528 = %527.1;
  %529 = cast(%var_5197, dtype="uint64") /* ty=Tensor[(8, 11, 2), uint64] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="uint64") /* ty=Tensor[(8, 11, 2), uint64] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %533 = cast(%528, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %534 = bitwise_xor(%531, %532) /* ty=Tensor[(8, 11, 2), uint64] */;
  %535 = log10(%533) /* ty=Tensor[(8, 11, 2), float64] */;
  (%534, %535)
}

def @func_6141() -> Tensor[(2, 5, 3), float64] {
  %536 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %536.0
}

def @func_346(%var_298: Tensor[(176), float64], %var_302: Tensor[(2, 5, 3), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) {
  %537 = cast(%var_298, dtype="float64") /* ty=Tensor[(176), float64] */;
  %538 = reshape(%537, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %539 = @func_8(%538) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %540 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %541 = %540.0;
  %542 = cast(%var_302, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = greater_equal(%544, %545) /* ty=Tensor[(2, 5, 3), bool] */;
  %547 = cast(%546, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %548 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%541, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = %539.0;
  %552 = logical_and(%549, %550) /* ty=Tensor[(2, 5, 3), bool] */;
  (%551, %var_298, %552)
}

def @func_9347(%var_9317: Tensor[(12, 7, 12), float64], %var_9318: Tensor[(12, 7, 12), float64], %var_9343: Tensor[(176), float64]) -> (Tensor[(12, 7, 12), bool], Tensor[(8, 11, 2), float32], Tensor[(176), float64]) {
  %553 = cast(%var_9318, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %554 = shape_of(%var_9317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_9317, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = cast(%var_9343, dtype="float64") /* ty=Tensor[(176), float64] */;
  %558 = reshape(%557, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %559 = @func_2068(%558) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) */;
  %560 = greater_equal(%555, %556) /* ty=Tensor[(12, 7, 12), bool] */;
  %561 = %559.2;
  (%560, %561, %var_9343)
}

def @func_5154() -> (Tensor[(8, 11, 2), float64],) {
  %562 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %563 = %562.0;
  (%563,)
}

def @func_7731() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
  %564 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %565 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %566 = %564.1;
  %567 = %565.0;
  (%566, %567)
}

def @func_4538(%var_4459: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint8], Tensor[(8, 11, 2), bool], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), bool]) {
  %568 = @func_4069() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %569 = %568.0;
  %570 = cast(%var_4459, dtype="int16") /* ty=Tensor[(8, 11, 2), int16] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="int16") /* ty=Tensor[(8, 11, 2), int16] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %574 = left_shift(%572, %573) /* ty=Tensor[(8, 11, 2), int16] */;
  %575 = cast(%569, dtype="uint8") /* ty=Tensor[(8, 11, 2), uint8] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="uint8") /* ty=Tensor[(8, 11, 2), uint8] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %579 = cast(%569, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %580 = shape_of(%var_4459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_4459, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %584 = %583.0;
  %585 = cast(%584, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %586 = reshape(%585, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
  %587 = @func_441(%586) /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %588 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %591 = reshape(%590, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %592 = @func_1092(%591) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) */;
  %593 = logical_xor(%577, %578) /* ty=Tensor[(8, 11, 2), uint8] */;
  %594 = greater_equal(%581, %582) /* ty=Tensor[(8, 11, 2), bool] */;
  %595 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  %596 = %587.0;
  %597 = %592.1;
  (%593, %594, %595, %584, %596, %589, %597)
}

def @func_4009() -> Tensor[(2, 5, 3), float64] {
  @func_3743() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_6023(%var_5959: Tensor[(360), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(44, 4), float64], Tensor[(176), float64]) {
  %598 = cast(%var_5959, dtype="float32") /* ty=Tensor[(360), float32] */;
  %599 = reshape(%598, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %600 = @func_2731(%599) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) */;
  %601 = cast(%var_5959, dtype="float32") /* ty=Tensor[(360), float32] */;
  %602 = cast(meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %603 = %600.3;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(180), float32] */;
  %605 = reshape(%601, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %606 = reshape(%602, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %607 = reshape(%604, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %608 = @func_1313(%605, %606, %607) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %609 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
  %610 = %608.1;
  (%609, %603, %var_5959, %610, meta[relay.Constant][23] /* ty=Tensor[(176), float64] */)
}

def @func_7002() -> (Tensor[(12, 16, 7), uint8],) {
  %611 = @func_3697() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) */;
  %612 = %611.0;
  (%612,)
}

def @func_7618(%var_7608: Tensor[(5, 5, 10), uint16], %var_7609: Tensor[(5, 5, 10), uint16]) -> (Tensor[(5, 5, 10), uint16],) {
  %613 = cast(%var_7609, dtype="uint16") /* ty=Tensor[(5, 5, 10), uint16] */;
  %614 = shape_of(%var_7608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_7608, dtype="uint16") /* ty=Tensor[(5, 5, 10), uint16] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %617 = right_shift(%615, %616) /* ty=Tensor[(5, 5, 10), uint16] */;
  (%617,)
}

def @func_6626(%var_6610: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float64], Tensor[(180), float32]) {
  %618 = @func_5154() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %619 = cast(%var_6610, dtype="float64") /* ty=Tensor[(180), float64] */;
  %620 = reshape(%619, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %621 = @func_2611(%620) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %622 = %618.0;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %624 = reshape(%623, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %625 = @func_1239(%624) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %626 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  %627 = %621.0;
  %628 = %625.4;
  (%626, %622, %627, %var_6610, %628)
}

def @func_7782(%var_7766: Tensor[(9, 12, 9), bool]) -> (Tensor[(9, 12, 9), bool], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8]) {
  %629 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %630 = cast(%var_7766, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %631 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
  %632 = logical_and(%629, %630) /* ty=Tensor[(9, 12, 9), bool] */;
  %633 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %634 = %631.0;
  (%632, %633, %634)
}

def @func_5444() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %635 = @func_3439() /* ty=Tensor[(12, 16, 7), uint8] */;
  %636 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
  (%635, %636)
}

def @func_8025() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) {
  %637 = @func_6281() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %638 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %641 = cast(meta[relay.Constant][24] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %642 = reshape(%640, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %643 = reshape(%641, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %644 = @func_647(%642, %643) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) */;
  %645 = %637.0;
  %646 = %644.3;
  (%645, %639, %646, meta[relay.Constant][24] /* ty=Tensor[(1344), uint8] */)
}

def @func_2679() -> (Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) {
  %647 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %648 = %647.0;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  %650 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %651 = asinh(%649) /* ty=Tensor[(15, 4, 3), float64] */;
  %652 = %650.0;
  (%651, %652)
}

def @func_3406() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) {
  %653 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %654 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %655 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %656 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %657 = %653.0;
  %658 = %654.0;
  %659 = %655.0;
  %660 = %656.1;
  (%657, %658, %659, %660)
}

def @func_8(%var_5: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), float64],) {
  %661 = cast(%var_5, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %662 = acos(%661) /* ty=Tensor[(8, 11, 2), float64] */;
  (%662,)
}

def @func_3111(%var_3016: Tensor[(180), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float32]) {
  %663 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %664 = cast(%var_3016, dtype="float64") /* ty=Tensor[(180), float64] */;
  %665 = reshape(%664, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %666 = @func_2611(%665) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %667 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %668 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %670 = %663.0;
  %671 = %666.1;
  %672 = %667.1;
  %673 = tan(%669) /* ty=Tensor[(8, 11, 2), float32] */;
  (%670, %671, %var_3016, %672, %673)
}

def @func_3304(%var_3275: Tensor[(13, 16, 3), uint8]) -> (Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) {
  %674 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 16, 3), uint8] */, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %675 = cast(%var_3275, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %676 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %677 = reshape(%676, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %678 = @func_2611(%677) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %679 = less_equal(%674, %675) /* ty=Tensor[(13, 16, 3), bool] */;
  %680 = %678.0;
  (%679, %680, meta[relay.Constant][26] /* ty=Tensor[(6, 30), float64] */)
}

def @func_4359() -> (Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) {
  %681 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %682 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
  %683 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
  %684 = %682.4;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %686 = reshape(%683, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %687 = reshape(%685, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %688 = @func_2132(%686, %687) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
  %689 = cast(meta[relay.Constant][28] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %690 = cast(%684, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %691 = reshape(%689, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
  %692 = reshape(%690, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %693 = @func_3518(%691, %692) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
  %694 = %681.1;
  %695 = %688.1;
  %696 = %693.2;
  (%694, %684, %695, meta[relay.Constant][27] /* ty=Tensor[(2, 168), float64] */, %696, meta[relay.Constant][28] /* ty=Tensor[(176), float64] */)
}

def @func_37(%var_22: Tensor[(15, 4, 3), float32], %var_23: Tensor[(15, 4, 3), float32]) -> Tensor[(15, 4, 3), float32] {
  %697 = cast(%var_23, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %698 = shape_of(%var_22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_22, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%699, %700) /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_912() -> (Tensor[(12, 16, 7), uint8],) {
  %701 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  (%701,)
}

def @func_2132(%var_2077: Tensor[(3, 16, 7), float64], %var_2130: Tensor[(180, 1), float32]) -> (Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) {
  %702 = cast(%var_2077, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %703 = cast(meta[relay.Constant][29] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %704 = cast(meta[relay.Constant][30] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %705 = reshape(%703, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %706 = reshape(%704, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %707 = @func_346(%705, %706) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %708 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %709 = %707.0;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %711 = cast(%var_2130, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %712 = reshape(%708, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %713 = reshape(%710, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %714 = reshape(%711, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %715 = @func_1313(%712, %713, %714) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %716 = rsqrt(%702) /* ty=Tensor[(3, 16, 7), float64] */;
  %717 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %718 = %715.3;
  (%716, %717, %709, meta[relay.Constant][29] /* ty=Tensor[(176), float64] */, meta[relay.Constant][30] /* ty=Tensor[(30), float64] */, %718, meta[relay.Constant][31] /* ty=Tensor[(360), float32] */, %var_2130)
}

def @func_5520() -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
  %719 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %720 = @func_4168() /* ty=(Tensor[(176), float64],) */;
  %721 = %719.0;
  %722 = %720.0;
  (%721, %722)
}

def @func_3246(%var_3217: Tensor[(4, 728), uint64], %var_3239: Tensor[(3, 104), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(2912), uint64], Tensor[(4, 728), uint64], Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(3, 104), float64]) {
  %723 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %724 = %723.1;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %726 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %727 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
  %728 = cast(%var_3217, dtype="uint64") /* ty=Tensor[(4, 728), uint64] */;
  %729 = reshape(%728, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %730 = @func_532(%729) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %731 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %732 = cast(%var_3239, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %733 = reshape(%732, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %734 = @func_1674(%733) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
  %735 = log(%725) /* ty=Tensor[(2, 5, 3), float64] */;
  %736 = %726.1;
  %737 = %727.3;
  %738 = %730.1;
  %739 = %731.0;
  %740 = %734.1;
  (%735, %736, %737, %738, %var_3217, %739, %740, %var_3239)
}

def @func_6810() -> Tensor[(8, 11, 2), float64] {
  %741 = @func_6356() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %744 = sinh(%743) /* ty=Tensor[(8, 11, 2), float32] */;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  asin(%745) /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_1426() -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) {
  %746 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %747 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %748 = %746.2;
  %749 = %747.5;
  (%748, %749)
}

def @func_159() -> (Tensor[(2, 5, 3), float64],) {
  %750 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %751 = cosh(%750) /* ty=Tensor[(2, 5, 3), float64] */;
  (%751,)
}

def @func_2611(%var_2602: Tensor[(180), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
  %752 = cast(%var_2602, dtype="float64") /* ty=Tensor[(180), float64] */;
  %753 = reshape(%752, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float64] */;
  %754 = cast(meta[relay.Constant][33] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %755 = reshape(%754, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %756 = @func_8(%755) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %757 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %758 = @func_1581(%753) /* ty=Tensor[(15, 4, 3), float64] */;
  %759 = %756.0;
  (%757, %758, %var_2602, %759, meta[relay.Constant][33] /* ty=Tensor[(176), float64] */)
}

def @func_4168() -> (Tensor[(176), float64],) {
  %760 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %761 = %760.1;
  (%761,)
}

def @func_7745() -> Tensor[(15, 4, 3), float64] {
  @func_3544() /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_1092(%var_1081: Tensor[(8, 11, 2), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) {
  %762 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %763 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %764 = %763.0;
  %765 = cast(%var_1081, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = %762.1;
  %770 = not_equal(%767, %768) /* ty=Tensor[(8, 11, 2), bool] */;
  (%769, %770)
}

def @func_4830(%var_4751: Tensor[(12, 16, 7), uint8], %var_4772: Tensor[(180), float32]) -> (Tensor[(176), float64], Tensor[(12, 16, 7), int16], Tensor[(180), float32], Tensor[(180), float32], Tensor[(6, 30), float64], Tensor[(2912, 624), bool], Tensor[(624), uint8], Tensor[(624), float32], Tensor[(2, 5, 3), float64]) {
  %771 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %772 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
  %773 = %772.0;
  %774 = cast(%var_4751, dtype="int16") /* ty=Tensor[(12, 16, 7), int16] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="int16") /* ty=Tensor[(12, 16, 7), int16] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %778 = cast(meta[relay.Constant][34] /* ty=Tensor[(2912, 1), uint64] */, dtype="uint64") /* ty=Tensor[(2912, 1), uint64] */;
  %779 = cast(%var_4772, dtype="float32") /* ty=Tensor[(180), float32] */;
  %780 = reshape(%778, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %781 = reshape(%779, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %782 = @func_1947(%780, %781) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) */;
  %783 = cast(meta[relay.Constant][35] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %784 = reshape(%783, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), uint8] */;
  %785 = @func_3304(%784) /* ty=(Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) */;
  %786 = cast(meta[relay.Constant][35] /* ty=Tensor[(624), uint8] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %787 = erf(%786) /* ty=Tensor[(624), float64] */;
  %788 = cast(%787, dtype="bool") /* ty=Tensor[(624), bool] */;
  %789 = cast(meta[relay.Constant][34] /* ty=Tensor[(2912, 1), uint64] */, dtype="bool") /* ty=Tensor[(2912, 1), bool] */;
  %790 = cast(%787, dtype="float32") /* ty=Tensor[(624), float32] */;
  %791 = asin(%790) /* ty=Tensor[(624), float32] */;
  %792 = cast(%787, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(1), int32] */;
  %794 = cast(%791, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %796 = cast(%791, dtype="float32") /* ty=Tensor[(624), float32] */;
  %797 = %771.1;
  %798 = logical_xor(%776, %777) /* ty=Tensor[(12, 16, 7), int16] */;
  %799 = %782.4;
  %800 = %785.2;
  %801 = logical_or(%788, %789) /* ty=Tensor[(2912, 624), bool] */;
  %802 = minimum(%794, %795) /* ty=Tensor[(624), uint8] */;
  %803 = atan(%796) /* ty=Tensor[(624), float32] */;
  %804 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%797, %798, %799, %var_4772, %800, %801, %802, %803, %804)
}

def @func_5257() -> Tensor[(176), float64] {
  %805 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %805.0
}

def @func_2068(%var_2006: Tensor[(8, 11, 2), float64]) -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) {
  %806 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %809 = reshape(%808, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %810 = @func_1239(%809) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %811 = cast(%var_2006, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %812 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%807, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %815 = equal(%813, %814) /* ty=Tensor[(8, 11, 2), bool] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %817 = erf(%816) /* ty=Tensor[(8, 11, 2), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %819 = atanh(%818) /* ty=Tensor[(8, 11, 2), float64] */;
  %820 = cast(%817, dtype="int8") /* ty=Tensor[(8, 11, 2), int8] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="int8") /* ty=Tensor[(8, 11, 2), int8] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %824 = cast(%817, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %825 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%815, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %828 = %810.3;
  %829 = bitwise_and(%822, %823) /* ty=Tensor[(8, 11, 2), int8] */;
  %830 = minimum(%826, %827) /* ty=Tensor[(8, 11, 2), float32] */;
  (%828, %829, %830)
}

def @func_8047() -> (Tensor[(14, 1, 3), float64],) {
  %831 = @func_6123() /* ty=Tensor[(14, 1, 3), float64] */;
  (%831,)
}

def @func_9147() -> Tensor[(2, 5, 3), float64] {
  %832 = @func_6503() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %832.0
}

def @func_8315() -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %833 = @func_7731() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %834 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %835 = %833.0;
  (%834, %835)
}

def @func_8712() -> (Tensor[(2, 5, 3), float32],) {
  %836 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
  %837 = %836.0;
  (%837,)
}

def @func_965() -> (Tensor[(2, 5, 3), float64],) {
  %838 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %839 = %838.0;
  (%839,)
}

def @func_5577(%var_5542: Tensor[(11, 11, 10), float32], %var_5575: Tensor[(1350), int8]) -> (Tensor[(11, 11, 10), float32], Tensor[(176), float64], Tensor[(12, 16, 7), bool], Tensor[(8, 11, 2), float64], Tensor[(9, 15, 10), bool], Tensor[(1350), int8]) {
  %840 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 10), float32] */;
  %841 = shape_of(%var_5542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_5542, dtype="float32") /* ty=Tensor[(11, 11, 10), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %844 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
  %845 = %844.1;
  %846 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 16, 7), uint8] */, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %850 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %851 = cast(%var_5575, dtype="int8") /* ty=Tensor[(1350), int8] */;
  %852 = cast(%var_5575, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %853 = reshape(%851, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), int8] */;
  %854 = reshape(%852, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %855 = @func_3840(%853, %854) /* ty=(Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) */;
  %856 = minimum(%842, %843) /* ty=Tensor[(11, 11, 10), float32] */;
  %857 = @func_5257() /* ty=Tensor[(176), float64] */;
  %858 = logical_and(%848, %849) /* ty=Tensor[(12, 16, 7), bool] */;
  %859 = %850.1;
  %860 = %855.1;
  (%856, %857, %858, %859, %860, %var_5575)
}

def @func_9393() -> (Tensor[(2, 5, 3), float64],) {
  %861 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%861,)
}

def @func_9368() -> (Tensor[(2, 5, 3), float64],) {
  %862 = @func_5879() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) */;
  %863 = %862.0;
  (%863,)
}

def @func_7128() -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) {
  %864 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %865 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %866 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
  %867 = %866.0;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(1, 2912), float64] */;
  %869 = log2(%868) /* ty=Tensor[(1, 2912), float64] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(2), int32] */;
  %872 = cast(%869, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %874 = %864.1;
  %875 = %865.0;
  %876 = greater(%872, %873) /* ty=Tensor[(?, 2912), bool] */;
  (%874, %875, %876)
}

def @func_5022(%var_5000: Tensor[(1, 180), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) {
  %877 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %878 = cast(meta[relay.Constant][38] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %879 = cast(%var_5000, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
  %880 = reshape(%878, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %881 = reshape(%879, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %882 = @func_2132(%880, %881) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
  %883 = @func_4415() /* ty=(Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) */;
  %884 = %877.0;
  %885 = %882.5;
  %886 = %883.0;
  (%884, %885, meta[relay.Constant][38] /* ty=Tensor[(336, 1), float64] */, %var_5000, %886)
}

def @func_7532() -> Tensor[(8, 11, 2), float64] {
  @func_2479() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_1571(%var_1556: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), uint32],) {
  %887 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %888 = %887.0;
  %889 = cast(%var_1556, dtype="uint32") /* ty=Tensor[(2, 5, 3), uint32] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%888, dtype="uint32") /* ty=Tensor[(2, 5, 3), uint32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %893 = bitwise_or(%891, %892) /* ty=Tensor[(2, 5, 3), uint32] */;
  (%893,)
}

def @func_1537() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) {
  %894 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %895 = %894.0;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %897 = asinh(%896) /* ty=Tensor[(2, 5, 3), float64] */;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
  %899 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  %900 = asin(%898) /* ty=Tensor[(2, 5, 3), float32] */;
  (%899, %900)
}

def @func_5879() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
  %901 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %902 = @func_4168() /* ty=(Tensor[(176), float64],) */;
  %903 = %901.0;
  %904 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  %905 = %902.0;
  (%903, %904, %905)
}

def @func_869() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) {
  %906 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %907 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %908 = %907.0;
  %909 = cast(%908, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %910 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %911 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %912 = reshape(%910, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %913 = reshape(%911, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %914 = cast(meta[relay.Constant][40] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %915 = cast(%908, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %916 = reshape(%914, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %917 = reshape(%915, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %918 = @func_346(%916, %917) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %919 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 2912), uint64] */, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
  %920 = reshape(%919, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %921 = @func_532(%920) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %922 = %906.0;
  %923 = sqrt(%909) /* ty=Tensor[(2, 5, 3), float64] */;
  %924 = @func_37(%912, %913) /* ty=Tensor[(15, 4, 3), float32] */;
  %925 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  %926 = %918.1;
  %927 = %921.3;
  (%922, %923, %924, meta[relay.Constant][39] /* ty=Tensor[(180), float32] */, %925, %926, meta[relay.Constant][40] /* ty=Tensor[(176), float64] */, %927, meta[relay.Constant][41] /* ty=Tensor[(1, 2912), uint64] */)
}

def @func_5743() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
  %928 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %929 = @func_4330() /* ty=Tensor[(2, 5, 3), float64] */;
  %930 = %928.0;
  (%929, %930)
}

def @func_468() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %931 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %932 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %933 = %931.0;
  %934 = %932.0;
  (%933, %934)
}

def @func_8357(%var_8349: Tensor[(1, 176), float64], %var_8350: Tensor[(180), float32], %var_8351: Tensor[(104, 28), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(13, 16, 14), float32], Tensor[(1, 176), float64], Tensor[(180), float32], Tensor[(104, 28), uint64]) {
  %935 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %936 = cast(%var_8349, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %937 = cast(%var_8350, dtype="float32") /* ty=Tensor[(180), float32] */;
  %938 = cast(%var_8351, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
  %939 = reshape(%936, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %940 = reshape(%937, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %941 = reshape(%938, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
  %942 = @func_1809(%939, %940, %941) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
  %943 = %935.0;
  %944 = %942.5;
  (%943, %944, %var_8349, %var_8350, %var_8351)
}

def @func_5609() -> (Tensor[(2, 5, 3), float64],) {
  %945 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %946 = %945.0;
  (%946,)
}

def @func_8614() -> (Tensor[(2, 5, 3), float32],) {
  %947 = @func_4359() /* ty=(Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) */;
  %948 = %947.0;
  (%948,)
}

def @func_8436() -> Tensor[(2, 5, 3), float64] {
  %949 = @func_7155() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %949.1
}

def @func_4069() -> (Tensor[(8, 11, 2), float64],) {
  %950 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %951 = %950.6;
  (%951,)
}

def @func_4305() -> (Tensor[(14, 1, 3), float64],) {
  %952 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %953 = log10(%952) /* ty=Tensor[(14, 1, 3), float64] */;
  (%953,)
}

def @func_5373() -> Tensor[(2, 5, 3), float64] {
  %954 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %954.0
}

def @func_223() -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
  %955 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %956 = cast(meta[relay.Constant][43] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %957 = reshape(%956, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %958 = @func_8(%957) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %959 = %958.0;
  %960 = cast(%959, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %961 = log(%960) /* ty=Tensor[(8, 11, 2), float64] */;
  %962 = cast(%961, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %963 = reshape(%962, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %964 = @func_8(%963) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %965 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %966 = %955.0;
  %967 = %964.0;
  %968 = %965.0;
  (%966, meta[relay.Constant][43] /* ty=Tensor[(176), float64] */, %961, %967, %968)
}

def @func_1313(%var_1288: Tensor[(15, 2, 12), float32], %var_1299: Tensor[(44, 4), float64], %var_1300: Tensor[(180), float32]) -> (Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) {
  %969 = cast(%var_1299, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %970 = cast(%var_1300, dtype="float32") /* ty=Tensor[(180), float32] */;
  %971 = reshape(%969, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %972 = reshape(%970, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %973 = @func_1051(%971, %972) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %974 = cast(%var_1288, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
  %975 = sqrt(%974) /* ty=Tensor[(15, 2, 12), float32] */;
  %976 = cast(%975, dtype="float64") /* ty=Tensor[(15, 2, 12), float64] */;
  %977 = %973.1;
  %978 = acos(%976) /* ty=Tensor[(15, 2, 12), float64] */;
  (%977, %var_1299, %var_1300, %978)
}

def @func_8818(%var_8755: Tensor[(9, 14, 3), uint8], %var_8756: Tensor[(9, 14, 3), uint8]) -> (Tensor[(9, 14, 3), bool], Tensor[(9, 14, 3), int8], Tensor[(14, 1, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %979 = cast(%var_8756, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %980 = shape_of(%var_8755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_8755, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %983 = cast(%var_8756, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %984 = shape_of(%var_8755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(%var_8755, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %987 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
  %988 = @func_6356() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %989 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %990 = greater(%981, %982) /* ty=Tensor[(9, 14, 3), bool] */;
  %991 = logical_xor(%985, %986) /* ty=Tensor[(9, 14, 3), int8] */;
  %992 = %987.0;
  %993 = %988.0;
  %994 = %989.0;
  (%990, %991, %992, %993, %994)
}

def @func_5660(%var_5654: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(30, 1), float64]) {
  %995 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %996 = %995.0;
  %997 = cast(%996, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %998 = cast(meta[relay.Constant][44] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %999 = reshape(%997, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
  %1000 = reshape(%998, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %1001 = @func_3518(%999, %1000) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
  %1002 = cast(%var_5654, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %1003 = reshape(%1002, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %1004 = @func_4634(%1003) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) */;
  %1005 = %1001.2;
  %1006 = %1004.4;
  (%996, %1005, meta[relay.Constant][44] /* ty=Tensor[(180), float32] */, %1006, %var_5654)
}

def @func_8885() -> (Tensor[(2, 5, 3), float64],) {
  %1007 = @func_8702() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1008 = %1007.0;
  (%1008,)
}

def @func_3697() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) {
  %1009 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1010 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %1011 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %1012 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
  %1013 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %1014 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %1015 = %1009.0;
  %1016 = %1010.4;
  %1017 = %1011.0;
  %1018 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %1019 = %1012.1;
  %1020 = %1013.0;
  (%1014, %1015, %1016, %1017, %1018, %1019, %1020)
}

def @func_6692() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %1021 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1022 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
  %1023 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1024 = %1021.0;
  %1025 = %1022.9;
  %1026 = %1023.0;
  (%1024, %1025, %1026)
}

def @func_7223() -> (Tensor[(1344), uint8], Tensor[(176), float64]) {
  %1027 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
  %1028 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %1029 = %1027.0;
  %1030 = %1028.0;
  (%1029, %1030)
}

def @func_6469(%var_6447: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), float32], Tensor[(14, 1, 3), float64]) {
  %1031 = @func_5166() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1032 = %1031.0;
  %1033 = cast(%var_6447, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
  %1034 = shape_of(%1032, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1035 = cast(%1032, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
  %1036 = dyn.reshape(%1033, %1034, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1037 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
  %1038 = mod(%1035, %1036) /* ty=Tensor[(2, 5, 3), float32] */;
  %1039 = %1037.0;
  (%1038, %1039)
}

def @func_4415() -> (Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) {
  %1040 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
  %1041 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1042 = %1040.0;
  %1043 = %1041.1;
  (%1042, %1043)
}

def @func_1809(%var_1777: Tensor[(176), float64], %var_1778: Tensor[(180), float32], %var_1792: Tensor[(1, 2912), uint64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) {
  %1044 = cast(%var_1777, dtype="float64") /* ty=Tensor[(176), float64] */;
  %1045 = cast(%var_1778, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1046 = reshape(%1044, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %1047 = reshape(%1045, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %1048 = @func_1051(%1046, %1047) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %1049 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
  %1050 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
  %1051 = reshape(%1049, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
  %1052 = reshape(%1050, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
  %1053 = @func_109(%1051, %1052) /* ty=(Tensor[(13, 16, 14), uint64],) */;
  %1054 = %1053.0;
  %1055 = cast(%1054, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %1056 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %1057 = %1048.0;
  %1058 = tan(%1055) /* ty=Tensor[(13, 16, 14), float32] */;
  (%1056, %1057, %var_1777, %var_1778, %var_1792, %1058)
}

def @func_5398() -> (Tensor[(176), float64],) {
  %1059 = @func_4168() /* ty=(Tensor[(176), float64],) */;
  %1060 = %1059.0;
  (%1060,)
}

def @func_7514() -> Tensor[(15, 4, 3), float32] {
  @func_7463() /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_8917(%var_8912: Tensor[(336), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(180), float32]) {
  %1061 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %1062 = cast(%var_8912, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1063 = cast(meta[relay.Constant][45] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1064 = reshape(%1062, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %1065 = reshape(%1063, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %1066 = @func_2132(%1064, %1065) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
  %1067 = %1061.0;
  %1068 = %1066.0;
  (%1067, %1068, %var_8912, meta[relay.Constant][45] /* ty=Tensor[(180), float32] */)
}

def @func_9206() -> (Tensor[(2, 5, 3), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64]) {
  %1069 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1070 = cast(meta[relay.Constant][46] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1071 = reshape(%1070, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1072 = @func_2611(%1071) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %1073 = @func_4069() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %1074 = %1069.0;
  %1075 = %1072.2;
  %1076 = %1073.0;
  (%1074, %1075, meta[relay.Constant][46] /* ty=Tensor[(180), float64] */, %1076)
}

def @func_3743() -> Tensor[(2, 5, 3), float64] {
  %1077 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1077.0
}

def @func_9031() -> (Tensor[(2, 5, 3), float32], Tensor[(12, 16, 7), uint8]) {
  %1078 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
  %1079 = @func_7128() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) */;
  %1080 = %1078.0;
  %1081 = %1079.1;
  (%1080, %1081)
}

def @func_3269() -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(672, 2), uint8]) {
  %1082 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %1083 = cast(%1082, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %1084 = cast(meta[relay.Constant][47] /* ty=Tensor[(672, 2), uint8] */, dtype="uint8") /* ty=Tensor[(672, 2), uint8] */;
  %1085 = reshape(%1083, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %1086 = reshape(%1084, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %1087 = @func_647(%1085, %1086) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) */;
  %1088 = %1087.3;
  (%1082, %1088, meta[relay.Constant][47] /* ty=Tensor[(672, 2), uint8] */)
}

def @func_1581(%var_1577: Tensor[(15, 4, 3), float64]) -> Tensor[(15, 4, 3), float64] {
  %1089 = cast(%var_1577, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  %1090 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(15, 4, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1091 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%1091, %1092) /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_7844(%var_7842: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) {
  %1093 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %1094 = %1093.0;
  %1095 = cast(%1094, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %1096 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
  %1097 = cast(%var_7842, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1098 = reshape(%1097, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1099 = @func_2879(%1098) /* ty=(Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) */;
  %1100 = cos(%1095) /* ty=Tensor[(2, 5, 3), float64] */;
  %1101 = %1096.9;
  %1102 = %1099.0;
  (%1100, %1101, %1102, %var_7842)
}

def @func_6253() -> Tensor[(2, 5, 3), float64] {
  %1103 = @func_6141() /* ty=Tensor[(2, 5, 3), float64] */;
  %1104 = cast(%1103, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  atan(%1104) /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_1120() -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
  %1105 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %1106 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
  %1107 = %1105.3;
  %1108 = %1106.6;
  (%1107, %1108)
}

def @func_1441() -> Tensor[(12, 16, 7), uint8] {
  @func_704() /* ty=Tensor[(12, 16, 7), uint8] */
}

def @func_6368() -> (Tensor[(15, 4, 3), float64],) {
  %1109 = @func_3544() /* ty=Tensor[(15, 4, 3), float64] */;
  (%1109,)
}

def @func_3430() -> (Tensor[(176), float64], Tensor[(2912), bool]) {
  %1110 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %1111 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
  %1112 = %1110.0;
  %1113 = %1111.1;
  (%1112, %1113)
}

def @func_1822() -> (Tensor[(8, 11, 2), float64],) {
  %1114 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %1115 = %1114.0;
  (%1115,)
}

def @func_1239(%var_1230: Tensor[(4, 44), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
  %1116 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %1117 = cast(%var_1230, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %1118 = reshape(%1117, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %1119 = @func_8(%1118) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %1120 = cast(meta[relay.Constant][49] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1121 = cast(meta[relay.Constant][49] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1122 = reshape(%1120, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %1123 = reshape(%1121, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %1124 = %1116.0;
  %1125 = %1119.0;
  %1126 = @func_37(%1122, %1123) /* ty=Tensor[(15, 4, 3), float32] */;
  (%1124, %1125, %var_1230, %1126, meta[relay.Constant][49] /* ty=Tensor[(180), float32] */)
}

def @func_3942(%var_3937: Tensor[(3, 60), float32]) -> (Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) {
  %1127 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
  %1128 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %1129 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %1130 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
  %1131 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %1132 = %1131.0;
  %1133 = cast(%1132, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %1134 = %1127.1;
  %1135 = cast(%1134, dtype="float64") /* ty=Tensor[(176), float64] */;
  %1136 = cast(%var_3937, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %1137 = reshape(%1135, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
  %1138 = reshape(%1136, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %1139 = @func_3518(%1137, %1138) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
  %1140 = %1128.0;
  %1141 = %1129.0;
  %1142 = %1130.0;
  %1143 = log2(%1133) /* ty=Tensor[(8, 11, 2), float32] */;
  %1144 = %1139.3;
  (%1134, %1140, %1141, %1142, %1143, %1144, %var_3937)
}

def @func_1763() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
  %1145 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1146 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %1147 = %1145.0;
  %1148 = %1146.5;
  (%1147, %1148)
}

def @func_8702() -> (Tensor[(2, 5, 3), float64],) {
  %1149 = @func_8025() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) */;
  %1150 = %1149.0;
  (%1150,)
}

def @func_2792() -> Tensor[(8, 11, 2), float64] {
  %1151 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %1151.1
}

def @func_6243() -> Tensor[(12, 16, 7), uint8] {
  %1152 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
  %1152.0
}

def @func_888() -> (Tensor[(2, 5, 3), float64],) {
  %1153 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %1154 = %1153.4;
  (%1154,)
}

def @func_1618() -> (Tensor[(8, 11, 2), float64],) {
  %1155 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %1156 = %1155.1;
  (%1156,)
}

def @func_1180() -> (Tensor[(2, 5, 3), float64],) {
  %1157 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %1158 = %1157.1;
  (%1158,)
}

def @main() -> (Tensor[(16, 12, 14), float32],) {
  %1159 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %1160 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(16, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1161 = cast(meta[relay.Constant][50] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %1162 = dyn.reshape(%1159, %1160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1163 = maximum(%1161, %1162) /* ty=Tensor[(16, 12, 14), float32] */;
  (%1163,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1765() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
  @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_5039() -> Tensor[(2, 5, 3), float64] {
  %1 = fn () -> Tensor[(2, 5, 3), float64] {
    %0 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %0.0
  };
  %1() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_7532() -> Tensor[(8, 11, 2), float64] {
  @func_2479() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_8887() -> (Tensor[(2, 5, 3), float64],) {
  @func_8885() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_3408() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) {
  @func_3406() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) */
}

def @func_5581(%var_5579: Tensor[(11, 11, 10), float32], %var_5580: Tensor[(1350), int8]) -> (Tensor[(11, 11, 10), float32], Tensor[(176), float64], Tensor[(12, 16, 7), bool], Tensor[(8, 11, 2), float64], Tensor[(9, 15, 10), bool], Tensor[(1350), int8]) {
  @func_5577(%var_5579, %var_5580) /* ty=(Tensor[(11, 11, 10), float32], Tensor[(176), float64], Tensor[(12, 16, 7), bool], Tensor[(8, 11, 2), float64], Tensor[(9, 15, 10), bool], Tensor[(1350), int8]) */
}

def @func_1813(%var_1810: Tensor[(176), float64], %var_1811: Tensor[(180), float32], %var_1812: Tensor[(1, 2912), uint64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) {
  %17 = fn (%var_1777: Tensor[(176), float64], %var_1778: Tensor[(180), float32], %var_1792: Tensor[(1, 2912), uint64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) {
    %2 = cast(%var_1777, dtype="float64") /* ty=Tensor[(176), float64] */;
    %3 = cast(%var_1778, dtype="float32") /* ty=Tensor[(180), float32] */;
    %4 = reshape(%2, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %5 = reshape(%3, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %6 = @func_1051(%4, %5) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
    %7 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
    %8 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
    %9 = reshape(%7, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
    %10 = reshape(%8, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
    %11 = @func_109(%9, %10) /* ty=(Tensor[(13, 16, 14), uint64],) */;
    %12 = %11.0;
    %13 = cast(%12, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
    %14 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
    %15 = %6.0;
    %16 = tan(%13) /* ty=Tensor[(13, 16, 14), float32] */;
    (%14, %15, %var_1777, %var_1778, %var_1792, %16)
  };
  %17(%var_1810, %var_1811, %var_1812) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */
}

def @func_8437() -> Tensor[(2, 5, 3), float64] {
  %19 = fn () -> Tensor[(2, 5, 3), float64] {
    %18 = @func_7155() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %18.1
  };
  %19() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_745() -> (Tensor[(8, 11, 2), float64],) {
  @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_7731() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
  %20 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %21 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %22 = %20.1;
  %23 = %21.0;
  (%22, %23)
}

def @func_2391() -> (Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
  %24 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %26 = reshape(%25, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %27 = @func_1674(%26) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
  %28 = %27.2;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(312), float64] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %30 = cos(%29) /* ty=Tensor[(312), float32] */;
  %31 = cast(%30, dtype="uint8") /* ty=Tensor[(312), uint8] */;
  %32 = shape_of(%28, dtype="int32") /* ty=Tensor[(1), int32] */;
  %33 = cast(%28, dtype="uint8") /* ty=Tensor[(312), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %37 = %24.0;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %39 = reshape(%35, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %40 = reshape(%36, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %41 = reshape(%38, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %42 = @func_1313(%39, %40, %41) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %44 = reshape(%43, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %45 = @func_532(%44) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %46 = cast(meta[relay.Constant][0] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %48 = reshape(%46, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %49 = reshape(%47, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %50 = @func_346(%48, %49) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %51 = %50.2;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %53 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %54 = minimum(%33, %34) /* ty=Tensor[(312), uint8] */;
  %55 = %42.0;
  %56 = %45.2;
  %57 = sigmoid(%52) /* ty=Tensor[(2, 5, 3), float64] */;
  %58 = %53.0;
  (%37, meta[relay.Constant][0] /* ty=Tensor[(176), float64] */, meta[relay.Constant][1] /* ty=Tensor[(30), float64] */, %54, %55, meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, %56, meta[relay.Constant][4] /* ty=Tensor[(2912), uint64] */, %57, %58)
}

def @func_6810() -> Tensor[(8, 11, 2), float64] {
  %59 = @func_6356() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %62 = sinh(%61) /* ty=Tensor[(8, 11, 2), float32] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  asin(%63) /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_7733() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
  @func_7731() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_1583(%var_1582: Tensor[(15, 4, 3), float64]) -> Tensor[(15, 4, 3), float64] {
  %68 = fn (%var_1577: Tensor[(15, 4, 3), float64]) -> Tensor[(15, 4, 3), float64] {
    %64 = cast(%var_1577, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
    %65 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(15, 4, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%66, %67) /* ty=Tensor[(15, 4, 3), float64] */
  };
  %68(%var_1582) /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_3432() -> (Tensor[(176), float64], Tensor[(2912), bool]) {
  @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */
}

def @func_7225() -> (Tensor[(1344), uint8], Tensor[(176), float64]) {
  @func_7223() /* ty=(Tensor[(1344), uint8], Tensor[(176), float64]) */
}

def @func_3430() -> (Tensor[(176), float64], Tensor[(2912), bool]) {
  %69 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %70 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
  %71 = %69.0;
  %72 = %70.1;
  (%71, %72)
}

def @func_5684() -> (Tensor[(12, 16, 7), uint8],) {
  %75 = fn () -> (Tensor[(12, 16, 7), uint8],) {
    %73 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %74 = %73.0;
    (%74,)
  };
  %75() /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_5445() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %78 = fn () -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
    %76 = @func_3439() /* ty=Tensor[(12, 16, 7), uint8] */;
    %77 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
    (%76, %77)
  };
  %78() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */
}

def @func_1121() -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
  %83 = fn () -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
    %79 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %80 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
    %81 = %79.3;
    %82 = %80.6;
    (%81, %82)
  };
  %83() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */
}

def @func_2881(%var_2880: Tensor[(180), float64]) -> (Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) {
  %103 = fn (%var_2842: Tensor[(180), float64]) -> (Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) {
    %84 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %85 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
    %87 = reshape(%86, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %88 = @func_1674(%87) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
    %89 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %90 = cast(%var_2842, dtype="float64") /* ty=Tensor[(180), float64] */;
    %91 = reshape(%90, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float64] */;
    %92 = %85.0;
    %93 = cast(%92, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %94 = @func_1581(%91) /* ty=Tensor[(15, 4, 3), float64] */;
    %95 = cast(%94, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %96 = reshape(%93, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %97 = reshape(%95, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %98 = @func_1051(%96, %97) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
    %99 = %84.1;
    %100 = %88.1;
    %101 = %89.1;
    %102 = %98.2;
    (%99, %92, %100, meta[relay.Constant][6] /* ty=Tensor[(312), float64] */, %101, %94, %var_2842, %102)
  };
  %103(%var_2880) /* ty=(Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) */
}

def @func_3439() -> Tensor[(12, 16, 7), uint8] {
  %104 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %104.0
}

def @func_8651(%var_8649: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
  @func_8648(%var_8649) /* ty=Tensor[(10, 6, 14), float64] */
}

def @func_9148() -> Tensor[(2, 5, 3), float64] {
  %106 = fn () -> Tensor[(2, 5, 3), float64] {
    %105 = @func_6503() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %105.0
  };
  %106() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_8714() -> (Tensor[(2, 5, 3), float32],) {
  @func_8712() /* ty=(Tensor[(2, 5, 3), float32],) */
}

def @func_1822() -> (Tensor[(8, 11, 2), float64],) {
  %107 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %108 = %107.0;
  (%108,)
}

def @func_2479() -> Tensor[(8, 11, 2), float64] {
  %109 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %109.0
}

def @func_3521(%var_3519: Tensor[(2, 88), float64], %var_3520: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) {
  %120 = fn (%var_3507: Tensor[(2, 88), float64], %var_3508: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) {
    %110 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %111 = cast(%var_3507, dtype="float64") /* ty=Tensor[(2, 88), float64] */;
    %112 = cast(%var_3508, dtype="float32") /* ty=Tensor[(180), float32] */;
    %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
    %114 = reshape(%111, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %115 = reshape(%112, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %116 = reshape(%113, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
    %117 = @func_1809(%114, %115, %116) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
    %118 = %110.0;
    %119 = %117.2;
    (%118, %119, %var_3507, %var_3508, meta[relay.Constant][7] /* ty=Tensor[(2912), uint64] */)
  };
  %120(%var_3519, %var_3520) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */
}

def @func_470() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_6471(%var_6470: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), float32], Tensor[(14, 1, 3), float64]) {
  %130 = fn (%var_6447: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), float32], Tensor[(14, 1, 3), float64]) {
    %121 = @func_5166() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %122 = %121.0;
    %123 = cast(%var_6447, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
    %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %125 = cast(%122, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
    %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %127 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
    %128 = mod(%125, %126) /* ty=Tensor[(2, 5, 3), float32] */;
    %129 = %127.0;
    (%128, %129)
  };
  %130(%var_6470) /* ty=(Tensor[(2, 5, 3), float32], Tensor[(14, 1, 3), float64]) */
}

def @func_1618() -> (Tensor[(8, 11, 2), float64],) {
  %131 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %132 = %131.1;
  (%132,)
}

def @func_1181() -> (Tensor[(2, 5, 3), float64],) {
  %135 = fn () -> (Tensor[(2, 5, 3), float64],) {
    %133 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %134 = %133.1;
    (%134,)
  };
  %135() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_161() -> (Tensor[(2, 5, 3), float64],) {
  @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_1676(%var_1675: Tensor[(312), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %141 = fn (%var_1670: Tensor[(312), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
    %136 = cast(%var_1670, dtype="float64") /* ty=Tensor[(312), float64] */;
    %137 = reshape(%136, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
    %138 = @func_265(%137) /* ty=(Tensor[(6, 4, 13), uint16],) */;
    %139 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
    %140 = %138.0;
    (%139, %140, %var_1670)
  };
  %141(%var_1675) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */
}

def @func_2681() -> (Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) {
  @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_10(%var_9: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), float64],) {
  %144 = fn (%var_5: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), float64],) {
    %142 = cast(%var_5, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %143 = acos(%142) /* ty=Tensor[(8, 11, 2), float64] */;
    (%143,)
  };
  %144(%var_9) /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_5821() -> Tensor[(2, 5, 3), float64] {
  @func_5373() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_7223() -> (Tensor[(1344), uint8], Tensor[(176), float64]) {
  %145 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
  %146 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %147 = %145.0;
  %148 = %146.0;
  (%147, %148)
}

def @func_7908(%var_7881: Tensor[(11, 4, 4), float64]) -> (Tensor[(8, 11, 2), int8], Tensor[(11, 4, 4), uint16]) {
  %149 = cast(%var_7881, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %150 = reshape(%149, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %151 = @func_2068(%150) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) */;
  %152 = cast(%var_7881, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %153 = log10(%152) /* ty=Tensor[(11, 4, 4), float64] */;
  %154 = @func_5398() /* ty=(Tensor[(176), float64],) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %157 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%153, dtype="uint16") /* ty=Tensor[(11, 4, 4), uint16] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %160 = %151.1;
  %161 = bitwise_xor(%158, %159) /* ty=Tensor[(11, 4, 4), uint16] */;
  (%160, %161)
}

def @func_3111(%var_3016: Tensor[(180), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float32]) {
  %162 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %163 = cast(%var_3016, dtype="float64") /* ty=Tensor[(180), float64] */;
  %164 = reshape(%163, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %165 = @func_2611(%164) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %166 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %167 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
  %169 = %162.0;
  %170 = %165.1;
  %171 = %166.1;
  %172 = tan(%168) /* ty=Tensor[(8, 11, 2), float32] */;
  (%169, %170, %var_3016, %171, %172)
}

def @func_1571(%var_1556: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), uint32],) {
  %173 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %174 = %173.0;
  %175 = cast(%var_1556, dtype="uint32") /* ty=Tensor[(2, 5, 3), uint32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="uint32") /* ty=Tensor[(2, 5, 3), uint32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %179 = bitwise_or(%177, %178) /* ty=Tensor[(2, 5, 3), uint32] */;
  (%179,)
}

def @func_7819() -> (Tensor[(1344), uint8],) {
  %180 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %181 = %180.2;
  (%181,)
}

def @func_7672() -> (Tensor[(1, 2912), float64], Tensor[(2, 5, 3), float64]) {
  %185 = fn () -> (Tensor[(1, 2912), float64], Tensor[(2, 5, 3), float64]) {
    %182 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
    %183 = %182.0;
    %184 = @func_6253() /* ty=Tensor[(2, 5, 3), float64] */;
    (%183, %184)
  };
  %185() /* ty=(Tensor[(1, 2912), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_9425() -> Tensor[(?, 2912), bool] {
  @func_9423() /* ty=Tensor[(?, 2912), bool] */
}

def @func_8704() -> (Tensor[(2, 5, 3), float64],) {
  @func_8702() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_4037() -> (Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) {
  %186 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %189 = reshape(%188, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
  %190 = @func_441(%189) /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %191 = %190.0;
  (%187, %191)
}

def @func_2756() -> (Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) {
  @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */
}

def @func_3249(%var_3247: Tensor[(4, 728), uint64], %var_3248: Tensor[(3, 104), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(2912), uint64], Tensor[(4, 728), uint64], Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(3, 104), float64]) {
  %210 = fn (%var_3217: Tensor[(4, 728), uint64], %var_3239: Tensor[(3, 104), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(2912), uint64], Tensor[(4, 728), uint64], Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(3, 104), float64]) {
    %192 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %193 = %192.1;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
    %195 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %196 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
    %197 = cast(%var_3217, dtype="uint64") /* ty=Tensor[(4, 728), uint64] */;
    %198 = reshape(%197, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
    %199 = @func_532(%198) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %200 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %201 = cast(%var_3239, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
    %202 = reshape(%201, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %203 = @func_1674(%202) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
    %204 = log(%194) /* ty=Tensor[(2, 5, 3), float64] */;
    %205 = %195.1;
    %206 = %196.3;
    %207 = %199.1;
    %208 = %200.0;
    %209 = %203.1;
    (%204, %205, %206, %207, %var_3217, %208, %209, %var_3239)
  };
  %210(%var_3247, %var_3248) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(2912), uint64], Tensor[(4, 728), uint64], Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(3, 104), float64]) */
}

def @func_5610() -> (Tensor[(2, 5, 3), float64],) {
  %213 = fn () -> (Tensor[(2, 5, 3), float64],) {
    %211 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
    %212 = %211.0;
    (%212,)
  };
  %213() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_3698() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) {
  %226 = fn () -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) {
    %214 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %215 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %216 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %217 = @func_2754() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) */;
    %218 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
    %219 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
    %220 = %214.0;
    %221 = %215.4;
    %222 = %216.0;
    %223 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
    %224 = %217.1;
    %225 = %218.0;
    (%219, %220, %221, %222, %223, %224, %225)
  };
  %226() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) */
}

def @func_6023(%var_5959: Tensor[(360), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(44, 4), float64], Tensor[(176), float64]) {
  %227 = cast(%var_5959, dtype="float32") /* ty=Tensor[(360), float32] */;
  %228 = reshape(%227, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %229 = @func_2731(%228) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) */;
  %230 = cast(%var_5959, dtype="float32") /* ty=Tensor[(360), float32] */;
  %231 = cast(meta[relay.Constant][8] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %232 = %229.3;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(180), float32] */;
  %234 = reshape(%230, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %235 = reshape(%231, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %236 = reshape(%233, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %237 = @func_1313(%234, %235, %236) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %238 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
  %239 = %237.1;
  (%238, %232, %var_5959, %239, meta[relay.Constant][8] /* ty=Tensor[(176), float64] */)
}

def @func_1426() -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) {
  %240 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %241 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %242 = %240.2;
  %243 = %241.5;
  (%242, %243)
}

def @func_2190() -> (Tensor[(12, 16, 7), uint8],) {
  %244 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
  %245 = %244.4;
  (%245,)
}

def @func_8818(%var_8755: Tensor[(9, 14, 3), uint8], %var_8756: Tensor[(9, 14, 3), uint8]) -> (Tensor[(9, 14, 3), bool], Tensor[(9, 14, 3), int8], Tensor[(14, 1, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %246 = cast(%var_8756, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %247 = shape_of(%var_8755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_8755, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = cast(%var_8756, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %251 = shape_of(%var_8755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_8755, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %254 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
  %255 = @func_6356() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %256 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %257 = greater(%248, %249) /* ty=Tensor[(9, 14, 3), bool] */;
  %258 = logical_xor(%252, %253) /* ty=Tensor[(9, 14, 3), int8] */;
  %259 = %254.0;
  %260 = %255.0;
  %261 = %256.0;
  (%257, %258, %259, %260, %261)
}

def @func_8616() -> (Tensor[(2, 5, 3), float32],) {
  @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */
}

def @func_743() -> (Tensor[(8, 11, 2), float64],) {
  %262 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %263 = %262.3;
  (%263,)
}

def @func_2192() -> (Tensor[(12, 16, 7), uint8],) {
  @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_7931() -> (Tensor[(176), float64],) {
  %266 = fn () -> (Tensor[(176), float64],) {
    %264 = @func_5398() /* ty=(Tensor[(176), float64],) */;
    %265 = %264.0;
    (%265,)
  };
  %266() /* ty=(Tensor[(176), float64],) */
}

def @func_1947(%var_1868: Tensor[(2912), uint64], %var_1906: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) {
  %267 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %268 = cast(%var_1868, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %269 = reshape(%268, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %270 = @func_532(%269) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %271 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %272 = %271.0;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %274 = cast(%var_1906, dtype="float32") /* ty=Tensor[(180), float32] */;
  %275 = cast(%var_1868, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %276 = atanh(%275) /* ty=Tensor[(2912), float64] */;
  %277 = cast(%276, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %278 = reshape(%273, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %279 = reshape(%274, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %280 = reshape(%277, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
  %281 = @func_1809(%278, %279, %280) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
  %282 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %283 = cast(%276, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %284 = sin(%283) /* ty=Tensor[(2912), float32] */;
  %285 = cast(%276, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%284, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), float32] */;
  %289 = floor_mod(%287, %288) /* ty=Tensor[(2912), float32] */;
  %290 = cast(%var_1868, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %291 = log(%290) /* ty=Tensor[(2912), float64] */;
  %292 = cast(%291, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %293 = shape_of(%289, dtype="int32") /* ty=Tensor[(1), int32] */;
  %294 = cast(%289, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?), bool] */;
  %296 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %297 = cast(%var_1868, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %298 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %299 = cast(%284, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), bool] */;
  %301 = %267.0;
  %302 = %270.1;
  %303 = %281.3;
  %304 = %282.1;
  %305 = greater_equal(%294, %295) /* ty=Tensor[(2912), bool] */;
  %306 = %296.0;
  %307 = logical_or(%299, %300) /* ty=Tensor[(2912), bool] */;
  (%301, %302, %272, %303, %var_1906, %304, %305, %306, %307)
}

def @func_6626(%var_6610: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float64], Tensor[(180), float32]) {
  %308 = @func_5154() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %309 = cast(%var_6610, dtype="float64") /* ty=Tensor[(180), float64] */;
  %310 = reshape(%309, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %311 = @func_2611(%310) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %312 = %308.0;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %314 = reshape(%313, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %315 = @func_1239(%314) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
  %316 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  %317 = %311.0;
  %318 = %315.4;
  (%316, %312, %317, %var_6610, %318)
}

def @func_4402() -> (Tensor[(2, 5, 3), float64],) {
  %320 = fn () -> (Tensor[(2, 5, 3), float64],) {
    %319 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
    (%319,)
  };
  %320() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_8460(%var_8457: Tensor[(7, 3, 14), float32]) -> Tensor[(7, 3, 14), float32] {
  %321 = cast(%var_8457, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  atanh(%321) /* ty=Tensor[(7, 3, 14), float32] */
}

def @func_2611(%var_2602: Tensor[(180), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
  %322 = cast(%var_2602, dtype="float64") /* ty=Tensor[(180), float64] */;
  %323 = reshape(%322, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float64] */;
  %324 = cast(meta[relay.Constant][9] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %325 = reshape(%324, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %326 = @func_8(%325) /* ty=(Tensor[(8, 11, 2), float64],) */;
  %327 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %328 = @func_1581(%323) /* ty=Tensor[(15, 4, 3), float64] */;
  %329 = %326.0;
  (%327, %328, %var_2602, %329, meta[relay.Constant][9] /* ty=Tensor[(176), float64] */)
}

def @func_5210(%var_5208: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint64], Tensor[(8, 11, 2), float64]) {
  @func_5207(%var_5208) /* ty=(Tensor[(8, 11, 2), uint64], Tensor[(8, 11, 2), float64]) */
}

def @func_704() -> Tensor[(12, 16, 7), uint8] {
  %330 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %330.1
}

def @func_706() -> Tensor[(12, 16, 7), uint8] {
  @func_704() /* ty=Tensor[(12, 16, 7), uint8] */
}

def @func_6142() -> Tensor[(2, 5, 3), float64] {
  %332 = fn () -> Tensor[(2, 5, 3), float64] {
    %331 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %331.0
  };
  %332() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_265(%var_255: Tensor[(6, 4, 13), float64]) -> (Tensor[(6, 4, 13), uint16],) {
  %333 = cast(%var_255, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %334 = sigmoid(%333) /* ty=Tensor[(6, 4, 13), float64] */;
  %335 = cast(%var_255, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %336 = acosh(%335) /* ty=Tensor[(6, 4, 13), float64] */;
  %337 = cast(%336, dtype="uint16") /* ty=Tensor[(6, 4, 13), uint16] */;
  %338 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%334, dtype="uint16") /* ty=Tensor[(6, 4, 13), uint16] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %341 = bitwise_or(%339, %340) /* ty=Tensor[(6, 4, 13), uint16] */;
  (%341,)
}

def @func_1763() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
  %342 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %343 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
  %344 = %342.0;
  %345 = %343.5;
  (%344, %345)
}

def @func_8025() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) {
  %346 = @func_6281() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %347 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %350 = cast(meta[relay.Constant][10] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %351 = reshape(%349, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
  %352 = reshape(%350, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %353 = @func_647(%351, %352) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) */;
  %354 = %346.0;
  %355 = %353.3;
  (%354, %348, %355, meta[relay.Constant][10] /* ty=Tensor[(1344), uint8] */)
}

def @func_441(%var_413: Tensor[(12, 16, 7), uint8]) -> (Tensor[(12, 16, 7), uint8],) {
  %356 = cast(%var_413, dtype="float32") /* ty=Tensor[(12, 16, 7), float32] */;
  %357 = exp(%356) /* ty=Tensor[(12, 16, 7), float32] */;
  %358 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 16, 7), uint8] */, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %359 = shape_of(%var_413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_413, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = less(%360, %361) /* ty=Tensor[(12, 16, 7), bool] */;
  %363 = cast(%362, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %364 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%357, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %367 = right_shift(%365, %366) /* ty=Tensor[(12, 16, 7), uint8] */;
  (%367,)
}

def @func_7004() -> (Tensor[(12, 16, 7), uint8],) {
  @func_7002() /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_6369() -> (Tensor[(15, 4, 3), float64],) {
  %369 = fn () -> (Tensor[(15, 4, 3), float64],) {
    %368 = @func_3544() /* ty=Tensor[(15, 4, 3), float64] */;
    (%368,)
  };
  %369() /* ty=(Tensor[(15, 4, 3), float64],) */
}

def @func_912() -> (Tensor[(12, 16, 7), uint8],) {
  %370 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  (%370,)
}

def @func_869() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) {
  %371 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %372 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %373 = %372.0;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %375 = cast(meta[relay.Constant][12] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %376 = cast(meta[relay.Constant][12] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %377 = reshape(%375, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %378 = reshape(%376, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
  %379 = cast(meta[relay.Constant][13] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %380 = cast(%373, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %381 = reshape(%379, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %382 = reshape(%380, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %383 = @func_346(%381, %382) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %384 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 2912), uint64] */, dtype="uint64") /* ty=Tensor[(1, 2912), uint64] */;
  %385 = reshape(%384, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %386 = @func_532(%385) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %387 = %371.0;
  %388 = sqrt(%374) /* ty=Tensor[(2, 5, 3), float64] */;
  %389 = @func_37(%377, %378) /* ty=Tensor[(15, 4, 3), float32] */;
  %390 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  %391 = %383.1;
  %392 = %386.3;
  (%387, %388, %389, meta[relay.Constant][12] /* ty=Tensor[(180), float32] */, %390, %391, meta[relay.Constant][13] /* ty=Tensor[(176), float64] */, %392, meta[relay.Constant][14] /* ty=Tensor[(1, 2912), uint64] */)
}

def @func_4170() -> (Tensor[(176), float64],) {
  @func_4168() /* ty=(Tensor[(176), float64],) */
}

def @func_2070(%var_2069: Tensor[(8, 11, 2), float64]) -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) {
  %418 = fn (%var_2006: Tensor[(8, 11, 2), float64]) -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) {
    %393 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
    %394 = %393.0;
    %395 = cast(%394, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %396 = reshape(%395, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
    %397 = @func_1239(%396) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
    %398 = cast(%var_2006, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %399 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%394, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %402 = equal(%400, %401) /* ty=Tensor[(8, 11, 2), bool] */;
    %403 = cast(%402, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %404 = erf(%403) /* ty=Tensor[(8, 11, 2), float64] */;
    %405 = cast(%404, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %406 = atanh(%405) /* ty=Tensor[(8, 11, 2), float64] */;
    %407 = cast(%404, dtype="int8") /* ty=Tensor[(8, 11, 2), int8] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="int8") /* ty=Tensor[(8, 11, 2), int8] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %411 = cast(%404, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
    %412 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%402, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %415 = %397.3;
    %416 = bitwise_and(%409, %410) /* ty=Tensor[(8, 11, 2), int8] */;
    %417 = minimum(%413, %414) /* ty=Tensor[(8, 11, 2), float32] */;
    (%415, %416, %417)
  };
  %418(%var_2069) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) */
}

def @func_4540(%var_4539: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint8], Tensor[(8, 11, 2), bool], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), bool]) {
  %449 = fn (%var_4459: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint8], Tensor[(8, 11, 2), bool], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), bool]) {
    %419 = @func_4069() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %420 = %419.0;
    %421 = cast(%var_4459, dtype="int16") /* ty=Tensor[(8, 11, 2), int16] */;
    %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(%420, dtype="int16") /* ty=Tensor[(8, 11, 2), int16] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %425 = left_shift(%423, %424) /* ty=Tensor[(8, 11, 2), int16] */;
    %426 = cast(%420, dtype="uint8") /* ty=Tensor[(8, 11, 2), uint8] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%425, dtype="uint8") /* ty=Tensor[(8, 11, 2), uint8] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %430 = cast(%420, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %431 = shape_of(%var_4459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%var_4459, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %434 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %435 = %434.0;
    %436 = cast(%435, dtype="uint8") /* ty=Tensor[(12, 16, 7), uint8] */;
    %437 = reshape(%436, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
    %438 = @func_441(%437) /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %439 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %440 = %439.0;
    %441 = cast(%440, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %442 = reshape(%441, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %443 = @func_1092(%442) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) */;
    %444 = logical_xor(%428, %429) /* ty=Tensor[(8, 11, 2), uint8] */;
    %445 = greater_equal(%432, %433) /* ty=Tensor[(8, 11, 2), bool] */;
    %446 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
    %447 = %438.0;
    %448 = %443.1;
    (%444, %445, %446, %435, %447, %440, %448)
  };
  %449(%var_4539) /* ty=(Tensor[(8, 11, 2), uint8], Tensor[(8, 11, 2), bool], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), bool]) */
}

def @func_3441() -> Tensor[(12, 16, 7), uint8] {
  @func_3439() /* ty=Tensor[(12, 16, 7), uint8] */
}

def @func_4830(%var_4751: Tensor[(12, 16, 7), uint8], %var_4772: Tensor[(180), float32]) -> (Tensor[(176), float64], Tensor[(12, 16, 7), int16], Tensor[(180), float32], Tensor[(180), float32], Tensor[(6, 30), float64], Tensor[(2912, 624), bool], Tensor[(624), uint8], Tensor[(624), float32], Tensor[(2, 5, 3), float64]) {
  %450 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %451 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
  %452 = %451.0;
  %453 = cast(%var_4751, dtype="int16") /* ty=Tensor[(12, 16, 7), int16] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int16") /* ty=Tensor[(12, 16, 7), int16] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %457 = cast(meta[relay.Constant][15] /* ty=Tensor[(2912, 1), uint64] */, dtype="uint64") /* ty=Tensor[(2912, 1), uint64] */;
  %458 = cast(%var_4772, dtype="float32") /* ty=Tensor[(180), float32] */;
  %459 = reshape(%457, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %460 = reshape(%458, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %461 = @func_1947(%459, %460) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) */;
  %462 = cast(meta[relay.Constant][16] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %463 = reshape(%462, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), uint8] */;
  %464 = @func_3304(%463) /* ty=(Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) */;
  %465 = cast(meta[relay.Constant][16] /* ty=Tensor[(624), uint8] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %466 = erf(%465) /* ty=Tensor[(624), float64] */;
  %467 = cast(%466, dtype="bool") /* ty=Tensor[(624), bool] */;
  %468 = cast(meta[relay.Constant][15] /* ty=Tensor[(2912, 1), uint64] */, dtype="bool") /* ty=Tensor[(2912, 1), bool] */;
  %469 = cast(%466, dtype="float32") /* ty=Tensor[(624), float32] */;
  %470 = asin(%469) /* ty=Tensor[(624), float32] */;
  %471 = cast(%466, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(1), int32] */;
  %473 = cast(%470, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %475 = cast(%470, dtype="float32") /* ty=Tensor[(624), float32] */;
  %476 = %450.1;
  %477 = logical_xor(%455, %456) /* ty=Tensor[(12, 16, 7), int16] */;
  %478 = %461.4;
  %479 = %464.2;
  %480 = logical_or(%467, %468) /* ty=Tensor[(2912, 624), bool] */;
  %481 = minimum(%473, %474) /* ty=Tensor[(624), uint8] */;
  %482 = atan(%475) /* ty=Tensor[(624), float32] */;
  %483 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%476, %477, %478, %var_4772, %479, %480, %481, %482, %483)
}

def @func_8027() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) {
  @func_8025() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) */
}

def @func_7746() -> Tensor[(15, 4, 3), float64] {
  %484 = fn () -> Tensor[(15, 4, 3), float64] {
    @func_3544() /* ty=Tensor[(15, 4, 3), float64] */
  };
  %484() /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_5374() -> Tensor[(2, 5, 3), float64] {
  %486 = fn () -> Tensor[(2, 5, 3), float64] {
    %485 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %485.0
  };
  %486() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_7516() -> Tensor[(15, 4, 3), float32] {
  @func_7514() /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_9622() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  @func_9620() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_3304(%var_3275: Tensor[(13, 16, 3), uint8]) -> (Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) {
  %487 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 16, 3), uint8] */, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %488 = cast(%var_3275, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %490 = reshape(%489, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %491 = @func_2611(%490) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %492 = less_equal(%487, %488) /* ty=Tensor[(13, 16, 3), bool] */;
  %493 = %491.0;
  (%492, %493, meta[relay.Constant][18] /* ty=Tensor[(6, 30), float64] */)
}

def @func_7784(%var_7783: Tensor[(9, 12, 9), bool]) -> (Tensor[(9, 12, 9), bool], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8]) {
  %500 = fn (%var_7766: Tensor[(9, 12, 9), bool]) -> (Tensor[(9, 12, 9), bool], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8]) {
    %494 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %495 = cast(%var_7766, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
    %496 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
    %497 = logical_and(%494, %495) /* ty=Tensor[(9, 12, 9), bool] */;
    %498 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
    %499 = %496.0;
    (%497, %498, %499)
  };
  %500(%var_7783) /* ty=(Tensor[(9, 12, 9), bool], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8]) */
}

def @func_9253(%var_9252: Tensor[(2, 5, 3), float64]) -> Tensor[(2, 5, 3), int8] {
  %507 = fn (%var_9231: Tensor[(2, 5, 3), float64]) -> Tensor[(2, 5, 3), int8] {
    %501 = @func_6692() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
    %502 = %501.0;
    %503 = cast(%var_9231, dtype="int8") /* ty=Tensor[(2, 5, 3), int8] */;
    %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %505 = cast(%502, dtype="int8") /* ty=Tensor[(2, 5, 3), int8] */;
    %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    multiply(%505, %506) /* ty=Tensor[(2, 5, 3), int8] */
  };
  %507(%var_9252) /* ty=Tensor[(2, 5, 3), int8] */
}

def @func_9393() -> (Tensor[(2, 5, 3), float64],) {
  %508 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  (%508,)
}

def @func_8648(%var_8641: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
  %509 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %510 = shape_of(%var_8641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_8641, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%511, %512) /* ty=Tensor[(10, 6, 14), float64] */
}

def @func_7129() -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) {
  %526 = fn () -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) {
    %513 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %514 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %515 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(1, 2912), float64] */;
    %518 = log2(%517) /* ty=Tensor[(1, 2912), float64] */;
    %519 = cast(%516, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(2), int32] */;
    %521 = cast(%518, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %523 = %513.1;
    %524 = %514.0;
    %525 = greater(%521, %522) /* ty=Tensor[(?, 2912), bool] */;
    (%523, %524, %525)
  };
  %526() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) */
}

def @func_6218(%var_6217: Tensor[(2912), bool]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %547 = fn (%var_6187: Tensor[(2912), bool]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
    %527 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %528 = @func_3406() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) */;
    %529 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
    %530 = %529.1;
    %531 = cast(%var_6187, dtype="int64") /* ty=Tensor[(2912), int64] */;
    %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(1), int32] */;
    %533 = cast(%530, dtype="int64") /* ty=Tensor[(2912), int64] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?), int64] */;
    %535 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %536 = %535.0;
    %537 = cast(%536, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
    %538 = cast(meta[relay.Constant][20] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
    %539 = reshape(%538, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
    %540 = @func_265(%539) /* ty=(Tensor[(6, 4, 13), uint16],) */;
    %541 = %527.0;
    %542 = %528.1;
    %543 = right_shift(%533, %534) /* ty=Tensor[(2912), int64] */;
    %544 = @func_2479() /* ty=Tensor[(8, 11, 2), float64] */;
    %545 = acos(%537) /* ty=Tensor[(2, 5, 3), float32] */;
    %546 = %540.0;
    (%541, %542, %543, %544, %545, %546, meta[relay.Constant][20] /* ty=Tensor[(312), float64] */)
  };
  %547(%var_6217) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */
}

def @func_1951(%var_1949: Tensor[(2912), uint64], %var_1950: Tensor[(180), float32]) -> (Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) {
  @func_1947(%var_1949, %var_1950) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) */
}

def @func_2481() -> Tensor[(8, 11, 2), float64] {
  @func_2479() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_6124() -> Tensor[(14, 1, 3), float64] {
  %549 = fn () -> Tensor[(14, 1, 3), float64] {
    %548 = @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */;
    %548.0
  };
  %549() /* ty=Tensor[(14, 1, 3), float64] */
}

def @func_6629(%var_6627: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float64], Tensor[(180), float32]) {
  @func_6626(%var_6627) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float64], Tensor[(180), float32]) */
}

def @func_5744() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
  %553 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
    %550 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
    %551 = @func_4330() /* ty=Tensor[(2, 5, 3), float64] */;
    %552 = %550.0;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */
}

def @main() -> (Tensor[(16, 12, 14), float32],) {
  %554 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %555 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(16, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %558 = maximum(%556, %557) /* ty=Tensor[(16, 12, 14), float32] */;
  (%558,)
}

def @func_7340() -> (Tensor[(2, 5, 3), float64], Tensor[(1, 180), float32], Tensor[(180), float32], Tensor[(176), float64]) {
  %559 = @func_6692() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %560 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %561 = reshape(%560, newshape=[1, 180]) /* ty=Tensor[(1, 180), float32] */;
  %562 = @func_5022(%561) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) */;
  %563 = %562.3;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %565 = reshape(%564, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %566 = @func_2611(%565) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
  %567 = %559.2;
  %568 = %566.4;
  (%567, %563, meta[relay.Constant][23] /* ty=Tensor[(180), float32] */, %568)
}

def @func_5598(%var_5589: uint16, %var_5590: Tensor[(1, 16, 10), uint16]) -> Tensor[(1, 16, 10), bool] {
  %569 = cast(%var_5589, dtype="bool") /* ty=bool */;
  %570 = cast(%var_5590, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  not_equal(%569, %570) /* ty=Tensor[(1, 16, 10), bool] */
}

def @func_5804() -> (Tensor[(2, 5, 3), float64],) {
  %571 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %572 = %571.0;
  (%572,)
}

def @func_1538() -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) {
  %580 = fn () -> (Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) {
    %573 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %574 = %573.0;
    %575 = cast(%574, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
    %576 = asinh(%575) /* ty=Tensor[(2, 5, 3), float64] */;
    %577 = cast(%576, dtype="float32") /* ty=Tensor[(2, 5, 3), float32] */;
    %578 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
    %579 = asin(%577) /* ty=Tensor[(2, 5, 3), float32] */;
    (%578, %579)
  };
  %580() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */
}

def @func_3142() -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
  %587 = fn () -> (Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) {
    %581 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %582 = cast(meta[relay.Constant][24] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
    %583 = reshape(%582, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float64] */;
    %584 = @func_265(%583) /* ty=(Tensor[(6, 4, 13), uint16],) */;
    %585 = %581.0;
    %586 = %584.0;
    (%585, %586, meta[relay.Constant][24] /* ty=Tensor[(312), float64] */)
  };
  %587() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */
}

def @func_534(%var_533: Tensor[(2912), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %615 = fn (%var_474: Tensor[(2912), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
    %588 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %589 = cast(meta[relay.Constant][25] /* ty=Tensor[(2912), uint64] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %590 = shape_of(%var_474, dtype="int32") /* ty=Tensor[(1), int32] */;
    %591 = cast(%var_474, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), bool] */;
    %593 = equal(%591, %592) /* ty=Tensor[(2912), bool] */;
    %594 = cast(%var_474, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
    %595 = cast(%var_474, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
    %596 = reshape(%594, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
    %597 = reshape(%595, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), uint64] */;
    %598 = @func_109(%596, %597) /* ty=(Tensor[(13, 16, 14), uint64],) */;
    %599 = %598.0;
    %600 = cast(%599, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
    %601 = shape_of(%593, dtype="int32") /* ty=Tensor[(1), int32] */;
    %602 = cast(%593, dtype="int32") /* ty=Tensor[(2912), int32] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), int32] */;
    %604 = left_shift(%602, %603) /* ty=Tensor[(2912), int32] */;
    %605 = cast(%593, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
    %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(1), int32] */;
    %607 = cast(%604, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %609 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %610 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %611 = %588.4;
    %612 = minimum(%607, %608) /* ty=Tensor[(2912), uint64] */;
    %613 = %609.0;
    %614 = %610.1;
    (%611, %612, %613, %614)
  };
  %615(%var_533) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_3843(%var_3841: Tensor[(9, 15, 10), int8], %var_3842: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) {
  %650 = fn (%var_3771: Tensor[(9, 15, 10), int8], %var_3821: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) {
    %616 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 15, 10), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
    %617 = shape_of(%var_3771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %618 = cast(%var_3771, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
    %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %620 = logical_or(%618, %619) /* ty=Tensor[(9, 15, 10), bool] */;
    %621 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 15, 10), int8] */, dtype="int8") /* ty=Tensor[(9, 15, 10), int8] */;
    %622 = shape_of(%var_3771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%var_3771, dtype="int8") /* ty=Tensor[(9, 15, 10), int8] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %625 = bitwise_xor(%623, %624) /* ty=Tensor[(9, 15, 10), int8] */;
    %626 = cast(%625, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
    %627 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%620, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %630 = cast(%625, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
    %631 = tan(%630) /* ty=Tensor[(9, 15, 10), float64] */;
    %632 = cast(%631, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
    %633 = acosh(%632) /* ty=Tensor[(9, 15, 10), float64] */;
    %634 = cast(%var_3821, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
    %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %636 = cast(%633, dtype="bool") /* ty=Tensor[(9, 15, 10), bool] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %638 = cast(%633, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
    %639 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %640 = cast(%631, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
    %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %642 = cast(%var_3771, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
    %643 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%633, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %646 = minimum(%628, %629) /* ty=Tensor[(9, 15, 10), float64] */;
    %647 = greater(%636, %637) /* ty=Tensor[(9, 15, 10), bool] */;
    %648 = add(%640, %641) /* ty=Tensor[(9, 15, 10), float32] */;
    %649 = right_shift(%644, %645) /* ty=Tensor[(9, 15, 10), uint32] */;
    (%646, %647, %648, %649)
  };
  %650(%var_3841, %var_3842) /* ty=(Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) */
}

def @func_5155() -> (Tensor[(8, 11, 2), float64],) {
  %653 = fn () -> (Tensor[(8, 11, 2), float64],) {
    %651 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %652 = %651.0;
    (%652,)
  };
  %653() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_5258() -> Tensor[(176), float64] {
  %655 = fn () -> Tensor[(176), float64] {
    %654 = @func_3187() /* ty=(Tensor[(176), float64],) */;
    %654.0
  };
  %655() /* ty=Tensor[(176), float64] */
}

def @func_8885() -> (Tensor[(2, 5, 3), float64],) {
  %656 = @func_8702() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %657 = %656.0;
  (%657,)
}

def @func_7394() -> Tensor[(8, 11, 2), float64] {
  @func_7392() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_6722() -> (Tensor[(176), float64],) {
  @func_6720() /* ty=(Tensor[(176), float64],) */
}

def @func_5521() -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
  %662 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
    %658 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %659 = @func_4168() /* ty=(Tensor[(176), float64],) */;
    %660 = %658.0;
    %661 = %659.0;
    (%660, %661)
  };
  %662() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64]) */
}

def @func_5602(%var_5600: uint16, %var_5601: Tensor[(1, 16, 10), uint16]) -> Tensor[(1, 16, 10), bool] {
  @func_5598(%var_5600, %var_5601) /* ty=Tensor[(1, 16, 10), bool] */
}

def @func_7534() -> Tensor[(8, 11, 2), float64] {
  @func_7532() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_1620() -> (Tensor[(8, 11, 2), float64],) {
  @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_6254() -> Tensor[(2, 5, 3), float64] {
  %665 = fn () -> Tensor[(2, 5, 3), float64] {
    %663 = @func_6141() /* ty=Tensor[(2, 5, 3), float64] */;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
    atan(%664) /* ty=Tensor[(2, 5, 3), float64] */
  };
  %665() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_9069() -> Tensor[(8, 11, 2), float64] {
  %666 = @func_5154() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %667 = %666.0;
  %668 = cast(%667, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  cosh(%668) /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_468() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %669 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %670 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %671 = %669.0;
  %672 = %670.0;
  (%671, %672)
}

def @func_5024(%var_5023: Tensor[(1, 180), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) {
  %683 = fn (%var_5000: Tensor[(1, 180), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) {
    %673 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %674 = cast(meta[relay.Constant][27] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
    %675 = cast(%var_5000, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
    %676 = reshape(%674, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %677 = reshape(%675, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
    %678 = @func_2132(%676, %677) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
    %679 = @func_4415() /* ty=(Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) */;
    %680 = %673.0;
    %681 = %678.5;
    %682 = %679.0;
    (%680, %681, meta[relay.Constant][27] /* ty=Tensor[(336, 1), float64] */, %var_5000, %682)
  };
  %683(%var_5023) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(15, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(1, 180), float32], Tensor[(1, 2912), float64]) */
}

def @func_9207() -> (Tensor[(2, 5, 3), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64]) {
  %692 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64]) {
    %684 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %685 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %686 = reshape(%685, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %687 = @func_2611(%686) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
    %688 = @func_4069() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %689 = %684.0;
    %690 = %687.2;
    %691 = %688.0;
    (%689, %690, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, %691)
  };
  %692() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_6282() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %698 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
    %693 = @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %694 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
    %695 = @func_4009() /* ty=Tensor[(2, 5, 3), float64] */;
    %696 = %693.0;
    %697 = %694.0;
    (%695, %696, %697)
  };
  %698() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */
}

def @func_6720() -> (Tensor[(176), float64],) {
  %699 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
  %700 = %699.0;
  (%700,)
}

def @func_4010() -> Tensor[(2, 5, 3), float64] {
  %701 = fn () -> Tensor[(2, 5, 3), float64] {
    @func_3743() /* ty=Tensor[(2, 5, 3), float64] */
  };
  %701() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_7821() -> (Tensor[(1344), uint8],) {
  @func_7819() /* ty=(Tensor[(1344), uint8],) */
}

def @func_9351(%var_9348: Tensor[(12, 7, 12), float64], %var_9349: Tensor[(12, 7, 12), float64], %var_9350: Tensor[(176), float64]) -> (Tensor[(12, 7, 12), bool], Tensor[(8, 11, 2), float32], Tensor[(176), float64]) {
  %711 = fn (%var_9317: Tensor[(12, 7, 12), float64], %var_9318: Tensor[(12, 7, 12), float64], %var_9343: Tensor[(176), float64]) -> (Tensor[(12, 7, 12), bool], Tensor[(8, 11, 2), float32], Tensor[(176), float64]) {
    %702 = cast(%var_9318, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
    %703 = shape_of(%var_9317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_9317, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %706 = cast(%var_9343, dtype="float64") /* ty=Tensor[(176), float64] */;
    %707 = reshape(%706, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %708 = @func_2068(%707) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), int8], Tensor[(8, 11, 2), float32]) */;
    %709 = greater_equal(%704, %705) /* ty=Tensor[(12, 7, 12), bool] */;
    %710 = %708.2;
    (%709, %710, %var_9343)
  };
  %711(%var_9348, %var_9349, %var_9350) /* ty=(Tensor[(12, 7, 12), bool], Tensor[(8, 11, 2), float32], Tensor[(176), float64]) */
}

def @func_9032() -> (Tensor[(2, 5, 3), float32], Tensor[(12, 16, 7), uint8]) {
  %716 = fn () -> (Tensor[(2, 5, 3), float32], Tensor[(12, 16, 7), uint8]) {
    %712 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
    %713 = @func_7128() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) */;
    %714 = %712.0;
    %715 = %713.1;
    (%714, %715)
  };
  %716() /* ty=(Tensor[(2, 5, 3), float32], Tensor[(12, 16, 7), uint8]) */
}

def @func_2132(%var_2077: Tensor[(3, 16, 7), float64], %var_2130: Tensor[(180, 1), float32]) -> (Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) {
  %717 = cast(%var_2077, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %718 = cast(meta[relay.Constant][29] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %719 = cast(meta[relay.Constant][30] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %720 = reshape(%718, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %721 = reshape(%719, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
  %722 = @func_346(%720, %721) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
  %723 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %724 = %722.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %726 = cast(%var_2130, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %727 = reshape(%723, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
  %728 = reshape(%725, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
  %729 = reshape(%726, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %730 = @func_1313(%727, %728, %729) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
  %731 = rsqrt(%717) /* ty=Tensor[(3, 16, 7), float64] */;
  %732 = @func_1441() /* ty=Tensor[(12, 16, 7), uint8] */;
  %733 = %730.3;
  (%731, %732, %724, meta[relay.Constant][29] /* ty=Tensor[(176), float64] */, meta[relay.Constant][30] /* ty=Tensor[(30), float64] */, %733, meta[relay.Constant][31] /* ty=Tensor[(360), float32] */, %var_2130)
}

def @func_4703() -> (Tensor[(2, 5, 3), float32], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), uint32], Tensor[(2, 5, 3), float64]) {
  %746 = fn () -> (Tensor[(2, 5, 3), float32], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), uint32], Tensor[(2, 5, 3), float64]) {
    %734 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
    %735 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %736 = %735.1;
    %737 = cast(%736, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
    %738 = cast(%736, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
    %739 = reshape(%738, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
    %740 = @func_1571(%739) /* ty=(Tensor[(2, 5, 3), uint32],) */;
    %741 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %742 = %734.1;
    %743 = log2(%737) /* ty=Tensor[(2, 5, 3), float64] */;
    %744 = %740.0;
    %745 = %741.0;
    (%742, %743, %744, %745)
  };
  %746() /* ty=(Tensor[(2, 5, 3), float32], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), uint32], Tensor[(2, 5, 3), float64]) */
}

def @func_8397() -> Tensor[(2, 5, 3), float64] {
  %748 = fn () -> Tensor[(2, 5, 3), float64] {
    %747 = @func_5444() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
    %747.1
  };
  %748() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_9423() -> Tensor[(?, 2912), bool] {
  %749 = @func_7128() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(?, 2912), bool]) */;
  %749.2
}

def @func_5577(%var_5542: Tensor[(11, 11, 10), float32], %var_5575: Tensor[(1350), int8]) -> (Tensor[(11, 11, 10), float32], Tensor[(176), float64], Tensor[(12, 16, 7), bool], Tensor[(8, 11, 2), float64], Tensor[(9, 15, 10), bool], Tensor[(1350), int8]) {
  %750 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 10), float32] */;
  %751 = shape_of(%var_5542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%var_5542, dtype="float32") /* ty=Tensor[(11, 11, 10), float32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %754 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
  %755 = %754.1;
  %756 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 16, 7), uint8] */, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(12, 16, 7), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %761 = cast(%var_5575, dtype="int8") /* ty=Tensor[(1350), int8] */;
  %762 = cast(%var_5575, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %763 = reshape(%761, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), int8] */;
  %764 = reshape(%762, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %765 = @func_3840(%763, %764) /* ty=(Tensor[(9, 15, 10), float64], Tensor[(9, 15, 10), bool], Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint32]) */;
  %766 = minimum(%752, %753) /* ty=Tensor[(11, 11, 10), float32] */;
  %767 = @func_5257() /* ty=Tensor[(176), float64] */;
  %768 = logical_and(%758, %759) /* ty=Tensor[(12, 16, 7), bool] */;
  %769 = %760.1;
  %770 = %765.1;
  (%766, %767, %768, %769, %770, %var_5575)
}

def @func_9512() -> (Tensor[(2, 5, 3), bool], Tensor[(15, 4, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %780 = fn () -> (Tensor[(2, 5, 3), bool], Tensor[(15, 4, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
    %771 = @func_7155() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %772 = @func_7067() /* ty=(Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) */;
    %773 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
    %774 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %775 = %771.0;
    %776 = %772.1;
    %777 = %773.1;
    %778 = %774.0;
    %779 = @func_5821() /* ty=Tensor[(2, 5, 3), float64] */;
    (%775, %776, %777, %778, %779)
  };
  %780() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(15, 4, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_9071() -> Tensor[(8, 11, 2), float64] {
  @func_9069() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_6484() -> (Tensor[(2, 5, 3), float64],) {
  %781 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  (%781,)
}

def @func_2575() -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) {
  @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */
}

def @func_2679() -> (Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) {
  %782 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  %785 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %786 = asinh(%784) /* ty=Tensor[(15, 4, 3), float64] */;
  %787 = %785.0;
  (%786, %787)
}

def @func_1241(%var_1240: Tensor[(4, 44), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
  %799 = fn (%var_1230: Tensor[(4, 44), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
    %788 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
    %789 = cast(%var_1230, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
    %790 = reshape(%789, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %791 = @func_8(%790) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %792 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %793 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %794 = reshape(%792, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
    %795 = reshape(%793, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
    %796 = %788.0;
    %797 = %791.0;
    %798 = @func_37(%794, %795) /* ty=Tensor[(15, 4, 3), float32] */;
    (%796, %797, %var_1230, %798, meta[relay.Constant][34] /* ty=Tensor[(180), float32] */)
  };
  %799(%var_1240) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(4, 44), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */
}

def @func_6356() -> (Tensor[(8, 11, 2), float64],) {
  %800 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %801 = %800.1;
  (%801,)
}

def @func_5907() -> Tensor[(2, 5, 3), float64] {
  %802 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %802.4
}

def @func_7069() -> (Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) {
  @func_7067() /* ty=(Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) */
}

def @func_159() -> (Tensor[(2, 5, 3), float64],) {
  %803 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %804 = cosh(%803) /* ty=Tensor[(2, 5, 3), float64] */;
  (%804,)
}

def @func_4416() -> (Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) {
  %809 = fn () -> (Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) {
    %805 = @func_1713() /* ty=(Tensor[(1, 2912), float64],) */;
    %806 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %807 = %805.0;
    %808 = %806.1;
    (%807, %808)
  };
  %809() /* ty=(Tensor[(1, 2912), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_2573() -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) {
  %810 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
  %811 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %812 = %810.0;
  %813 = %811.0;
  (%812, %813)
}

def @func_5806() -> (Tensor[(2, 5, 3), float64],) {
  @func_5804() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_5398() -> (Tensor[(176), float64],) {
  %814 = @func_4168() /* ty=(Tensor[(176), float64],) */;
  %815 = %814.0;
  (%815,)
}

def @func_2164() -> Tensor[(2, 5, 3), float64] {
  %816 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %816.0
}

def @func_4070() -> (Tensor[(8, 11, 2), float64],) {
  %819 = fn () -> (Tensor[(8, 11, 2), float64],) {
    %817 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
    %818 = %817.6;
    (%818,)
  };
  %819() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_2136(%var_2134: Tensor[(3, 16, 7), float64], %var_2135: Tensor[(180, 1), float32]) -> (Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) {
  @func_2132(%var_2134, %var_2135) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */
}

def @func_224() -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
  %834 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) {
    %820 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %821 = cast(meta[relay.Constant][36] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %822 = reshape(%821, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %823 = @func_8(%822) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %824 = %823.0;
    %825 = cast(%824, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %826 = log(%825) /* ty=Tensor[(8, 11, 2), float64] */;
    %827 = cast(%826, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %828 = reshape(%827, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %829 = @func_8(%828) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %830 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %831 = %820.0;
    %832 = %829.0;
    %833 = %830.0;
    (%831, meta[relay.Constant][36] /* ty=Tensor[(176), float64] */, %826, %832, %833)
  };
  %834() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_967() -> (Tensor[(2, 5, 3), float64],) {
  @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_2794() -> Tensor[(8, 11, 2), float64] {
  @func_2792() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_1054(%var_1052: Tensor[(176), float64], %var_1053: Tensor[(180), float32]) -> (Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
  %847 = fn (%var_992: Tensor[(176), float64], %var_1031: Tensor[(180), float32]) -> (Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) {
    %835 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
    %836 = %835.5;
    %837 = cast(%var_992, dtype="int8") /* ty=Tensor[(176), int8] */;
    %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(1), int32] */;
    %839 = cast(%836, dtype="int8") /* ty=Tensor[(176), int8] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?), int8] */;
    %841 = cast(%var_1031, dtype="float32") /* ty=Tensor[(180), float32] */;
    %842 = cast(%var_1031, dtype="float32") /* ty=Tensor[(180), float32] */;
    %843 = reshape(%841, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
    %844 = reshape(%842, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), float32] */;
    %845 = right_shift(%839, %840) /* ty=Tensor[(176), int8] */;
    %846 = @func_37(%843, %844) /* ty=Tensor[(15, 4, 3), float32] */;
    (%845, %846, %var_1031)
  };
  %847(%var_1052, %var_1053) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */
}

def @func_6358() -> (Tensor[(8, 11, 2), float64],) {
  @func_6356() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_5400() -> (Tensor[(176), float64],) {
  @func_5398() /* ty=(Tensor[(176), float64],) */
}

def @func_889() -> (Tensor[(2, 5, 3), float64],) {
  %850 = fn () -> (Tensor[(2, 5, 3), float64],) {
    %848 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %849 = %848.4;
    (%849,)
  };
  %850() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_6339() -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
  %854 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) {
    %851 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %852 = @func_5821() /* ty=Tensor[(2, 5, 3), float64] */;
    %853 = %851.1;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_5662(%var_5661: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(30, 1), float64]) {
  %867 = fn (%var_5654: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(30, 1), float64]) {
    %855 = @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %856 = %855.0;
    %857 = cast(%856, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %858 = cast(meta[relay.Constant][37] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %859 = reshape(%857, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
    %860 = reshape(%858, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %861 = @func_3518(%859, %860) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
    %862 = cast(%var_5654, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %863 = reshape(%862, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %864 = @func_4634(%863) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) */;
    %865 = %861.2;
    %866 = %864.4;
    (%856, %865, meta[relay.Constant][37] /* ty=Tensor[(180), float32] */, %866, %var_5654)
  };
  %867(%var_5661) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(30, 1), float64]) */
}

def @func_2264() -> (Tensor[(2, 5, 3), float64],) {
  @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_7844(%var_7842: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) {
  %868 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %869 = %868.0;
  %870 = cast(%869, dtype="float64") /* ty=Tensor[(2, 5, 3), float64] */;
  %871 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
  %872 = cast(%var_7842, dtype="float64") /* ty=Tensor[(180), float64] */;
  %873 = reshape(%872, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %874 = @func_2879(%873) /* ty=(Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(6, 4, 13), uint16], Tensor[(312), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(180), float32]) */;
  %875 = cos(%870) /* ty=Tensor[(2, 5, 3), float64] */;
  %876 = %871.9;
  %877 = %874.0;
  (%875, %876, %877, %var_7842)
}

def @func_4307() -> (Tensor[(14, 1, 3), float64],) {
  @func_4305() /* ty=(Tensor[(14, 1, 3), float64],) */
}

def @func_3406() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float32]) {
  %878 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %879 = @func_2190() /* ty=(Tensor[(12, 16, 7), uint8],) */;
  %880 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %881 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
  %882 = %878.0;
  %883 = %879.0;
  %884 = %880.0;
  %885 = %881.1;
  (%882, %883, %884, %885)
}

def @func_5879() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
  %886 = @func_1180() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %887 = @func_4168() /* ty=(Tensor[(176), float64],) */;
  %888 = %886.0;
  %889 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  %890 = %887.0;
  (%888, %889, %890)
}

def @func_650(%var_648: Tensor[(8, 11, 2), float64], %var_649: Tensor[(1344), uint8]) -> (Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) {
  %907 = fn (%var_624: Tensor[(8, 11, 2), float64], %var_636: Tensor[(1344), uint8]) -> (Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) {
    %891 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %892 = %891.2;
    %893 = cast(%var_624, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%892, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %897 = cast(%var_636, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %898 = reshape(%897, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
    %899 = @func_441(%898) /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %900 = cast(%892, dtype="uint16") /* ty=Tensor[(8, 11, 2), uint16] */;
    %901 = shape_of(%var_624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %902 = cast(%var_624, dtype="uint16") /* ty=Tensor[(8, 11, 2), uint16] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %904 = logical_or(%895, %896) /* ty=Tensor[(8, 11, 2), bool] */;
    %905 = %899.0;
    %906 = bitwise_or(%902, %903) /* ty=Tensor[(8, 11, 2), uint16] */;
    (%904, %905, %var_636, %906)
  };
  %907(%var_648, %var_649) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) */
}

def @func_4330() -> Tensor[(2, 5, 3), float64] {
  %908 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
  %908.0
}

def @func_4360() -> (Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) {
  %925 = fn () -> (Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) {
    %909 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
    %910 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
    %911 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
    %912 = %910.4;
    %913 = cast(%912, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %914 = reshape(%911, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %915 = reshape(%913, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
    %916 = @func_2132(%914, %915) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
    %917 = cast(meta[relay.Constant][39] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %918 = cast(%912, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %919 = reshape(%917, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
    %920 = reshape(%918, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %921 = @func_3518(%919, %920) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
    %922 = %909.1;
    %923 = %916.1;
    %924 = %921.2;
    (%922, %912, %923, meta[relay.Constant][38] /* ty=Tensor[(2, 168), float64] */, %924, meta[relay.Constant][39] /* ty=Tensor[(176), float64] */)
  };
  %925() /* ty=(Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) */
}

def @func_2614(%var_2612: Tensor[(180), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) {
  @func_2611(%var_2612) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */
}

def @func_7316(%var_7315: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), bool],) {
  %933 = fn (%var_7301: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), bool],) {
    %926 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %927 = %926.0;
    %928 = cast(%var_7301, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %930 = cast(%927, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %932 = logical_or(%930, %931) /* ty=Tensor[(2, 5, 3), bool] */;
    (%932,)
  };
  %933(%var_7315) /* ty=(Tensor[(2, 5, 3), bool],) */
}

def @func_444(%var_442: Tensor[(12, 16, 7), uint8]) -> (Tensor[(12, 16, 7), uint8],) {
  @func_441(%var_442) /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_2733(%var_2732: Tensor[(360), float32]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) {
  %948 = fn (%var_2728: Tensor[(360), float32]) -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) {
    %934 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
    %935 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %936 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
    %937 = cast(%var_2728, dtype="float32") /* ty=Tensor[(360), float32] */;
    %938 = %936.0;
    %939 = cast(%938, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %940 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %941 = reshape(%937, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), float32] */;
    %942 = reshape(%939, newshape=[44, 4]) /* ty=Tensor[(44, 4), float64] */;
    %943 = reshape(%940, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %944 = @func_1313(%941, %942, %943) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */;
    %945 = %934.0;
    %946 = %935.0;
    %947 = %944.2;
    (%945, %946, %938, %947, %var_2728, meta[relay.Constant][40] /* ty=Tensor[(180), float32] */)
  };
  %948(%var_2732) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(180), float32]) */
}

def @func_8702() -> (Tensor[(2, 5, 3), float64],) {
  %949 = @func_8025() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(1344), uint8]) */;
  %950 = %949.0;
  (%950,)
}

def @func_1094(%var_1093: Tensor[(8, 11, 2), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) {
  %960 = fn (%var_1081: Tensor[(8, 11, 2), float64]) -> (Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) {
    %951 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
    %952 = @func_654() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %953 = %952.0;
    %954 = cast(%var_1081, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %955 = shape_of(%953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %956 = cast(%953, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
    %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %958 = %951.1;
    %959 = not_equal(%956, %957) /* ty=Tensor[(8, 11, 2), bool] */;
    (%958, %959)
  };
  %960(%var_1093) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), bool]) */
}

def @func_914() -> (Tensor[(12, 16, 7), uint8],) {
  @func_912() /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_3307(%var_3305: Tensor[(13, 16, 3), uint8]) -> (Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) {
  @func_3304(%var_3305) /* ty=(Tensor[(13, 16, 3), bool], Tensor[(12, 16, 7), uint8], Tensor[(6, 30), float64]) */
}

def @func_871() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) {
  @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */
}

def @func_5909() -> Tensor[(2, 5, 3), float64] {
  @func_5907() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_2166() -> Tensor[(2, 5, 3), float64] {
  @func_2164() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_965() -> (Tensor[(2, 5, 3), float64],) {
  %961 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %962 = %961.0;
  (%962,)
}

def @func_3188() -> (Tensor[(176), float64],) {
  %965 = fn () -> (Tensor[(176), float64],) {
    %963 = @func_1120() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64]) */;
    %964 = %963.1;
    (%964,)
  };
  %965() /* ty=(Tensor[(176), float64],) */
}

def @func_7847(%var_7845: Tensor[(180), float64]) -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) {
  @func_7844(%var_7845) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) */
}

def @func_6244() -> Tensor[(12, 16, 7), uint8] {
  %967 = fn () -> Tensor[(12, 16, 7), uint8] {
    %966 = @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */;
    %966.0
  };
  %967() /* ty=Tensor[(12, 16, 7), uint8] */
}

def @func_7157() -> (Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  @func_7155() /* ty=(Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */
}

def @func_8973() -> Tensor[(2, 5, 3), float32] {
  %969 = fn () -> Tensor[(2, 5, 3), float32] {
    %968 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
    %968.0
  };
  %969() /* ty=Tensor[(2, 5, 3), float32] */
}

def @func_6026(%var_6024: Tensor[(360), float32]) -> (Tensor[(2, 5, 3), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(44, 4), float64], Tensor[(176), float64]) {
  @func_6023(%var_6024) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(180), float32], Tensor[(360), float32], Tensor[(44, 4), float64], Tensor[(176), float64]) */
}

def @func_8256() -> (Tensor[(1344), uint8],) {
  %972 = fn () -> (Tensor[(1344), uint8],) {
    %970 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
    %971 = %970.0;
    (%971,)
  };
  %972() /* ty=(Tensor[(1344), uint8],) */
}

def @func_6486() -> (Tensor[(2, 5, 3), float64],) {
  @func_6484() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_7464() -> Tensor[(15, 4, 3), float32] {
  %974 = fn () -> Tensor[(15, 4, 3), float32] {
    %973 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
    %973.2
  };
  %974() /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_8001(%var_7991: Tensor[(3, 60), float32]) -> (Tensor[(8, 11, 2), bool], Tensor[(8, 11, 2), float64], Tensor[(3, 60), bool]) {
  %975 = @func_7067() /* ty=(Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) */;
  %976 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %977 = reshape(%976, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %978 = @func_3942(%977) /* ty=(Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) */;
  %979 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %980 = asinh(%979) /* ty=Tensor[(3, 60), float32] */;
  %981 = cast(%var_7991, dtype="bool") /* ty=Tensor[(3, 60), bool] */;
  %982 = shape_of(%980, dtype="int32") /* ty=Tensor[(2), int32] */;
  %983 = cast(%980, dtype="bool") /* ty=Tensor[(3, 60), bool] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %985 = %975.0;
  %986 = %978.3;
  %987 = less(%983, %984) /* ty=Tensor[(3, 60), bool] */;
  (%985, %986, %987)
}

def @func_655() -> (Tensor[(8, 11, 2), float64],) {
  %990 = fn () -> (Tensor[(8, 11, 2), float64],) {
    %988 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %989 = %988.3;
    (%989,)
  };
  %990() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_4305() -> (Tensor[(14, 1, 3), float64],) {
  %991 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %992 = log10(%991) /* ty=Tensor[(14, 1, 3), float64] */;
  (%992,)
}

def @func_8614() -> (Tensor[(2, 5, 3), float32],) {
  %993 = @func_4359() /* ty=(Tensor[(2, 5, 3), float32], Tensor[(15, 4, 3), float32], Tensor[(12, 16, 7), uint8], Tensor[(2, 168), float64], Tensor[(2, 88), float64], Tensor[(176), float64]) */;
  %994 = %993.0;
  (%994,)
}

def @func_6693() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
  %1001 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) {
    %995 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %996 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
    %997 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %998 = %995.0;
    %999 = %996.9;
    %1000 = %997.0;
    (%998, %999, %1000)
  };
  %1001() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */
}

def @func_8163(%var_8161: Tensor[(180), float32], %var_8162: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float32], Tensor[(2, 5, 3), uint32], Tensor[(30, 1), float64]) {
  %1014 = fn (%var_8112: Tensor[(180), float32], %var_8146: Tensor[(30, 1), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float32], Tensor[(2, 5, 3), uint32], Tensor[(30, 1), float64]) {
    %1002 = @func_1618() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1003 = %1002.0;
    %1004 = cast(%1003, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %1005 = cast(%var_8112, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1006 = reshape(%1004, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
    %1007 = reshape(%1005, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %1008 = @func_3518(%1006, %1007) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
    %1009 = cast(%var_8146, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %1010 = reshape(%1009, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
    %1011 = @func_1571(%1010) /* ty=(Tensor[(2, 5, 3), uint32],) */;
    %1012 = %1008.0;
    %1013 = %1011.0;
    (%1003, %1012, %var_8112, %1013, %var_8146)
  };
  %1014(%var_8161, %var_8162) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(180), float32], Tensor[(2, 5, 3), uint32], Tensor[(30, 1), float64]) */
}

def @func_8004(%var_8002: Tensor[(3, 60), float32]) -> (Tensor[(8, 11, 2), bool], Tensor[(8, 11, 2), float64], Tensor[(3, 60), bool]) {
  @func_8001(%var_8002) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(8, 11, 2), float64], Tensor[(3, 60), bool]) */
}

def @func_1442() -> Tensor[(12, 16, 7), uint8] {
  %1015 = fn () -> Tensor[(12, 16, 7), uint8] {
    @func_704() /* ty=Tensor[(12, 16, 7), uint8] */
  };
  %1015() /* ty=Tensor[(12, 16, 7), uint8] */
}

def @func_2393() -> (Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) {
  @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */
}

def @func_7342() -> (Tensor[(2, 5, 3), float64], Tensor[(1, 180), float32], Tensor[(180), float32], Tensor[(176), float64]) {
  @func_7340() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(1, 180), float32], Tensor[(180), float32], Tensor[(176), float64]) */
}

def @func_3270() -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(672, 2), uint8]) {
  %1023 = fn () -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(672, 2), uint8]) {
    %1016 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
    %1017 = cast(%1016, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %1018 = cast(meta[relay.Constant][43] /* ty=Tensor[(672, 2), uint8] */, dtype="uint8") /* ty=Tensor[(672, 2), uint8] */;
    %1019 = reshape(%1017, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %1020 = reshape(%1018, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
    %1021 = @func_647(%1019, %1020) /* ty=(Tensor[(8, 11, 2), bool], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8], Tensor[(8, 11, 2), uint16]) */;
    %1022 = %1021.3;
    (%1016, %1022, meta[relay.Constant][43] /* ty=Tensor[(672, 2), uint8] */)
  };
  %1023() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), uint16], Tensor[(672, 2), uint8]) */
}

def @func_5881() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) {
  @func_5879() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) */
}

def @func_2901() -> (Tensor[(12, 16, 7), uint8],) {
  @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */
}

def @func_7621(%var_7619: Tensor[(5, 5, 10), uint16], %var_7620: Tensor[(5, 5, 10), uint16]) -> (Tensor[(5, 5, 10), uint16],) {
  %1029 = fn (%var_7608: Tensor[(5, 5, 10), uint16], %var_7609: Tensor[(5, 5, 10), uint16]) -> (Tensor[(5, 5, 10), uint16],) {
    %1024 = cast(%var_7609, dtype="uint16") /* ty=Tensor[(5, 5, 10), uint16] */;
    %1025 = shape_of(%var_7608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(%var_7608, dtype="uint16") /* ty=Tensor[(5, 5, 10), uint16] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1028 = right_shift(%1026, %1027) /* ty=Tensor[(5, 5, 10), uint16] */;
    (%1028,)
  };
  %1029(%var_7619, %var_7620) /* ty=(Tensor[(5, 5, 10), uint16],) */
}

def @func_40(%var_38: Tensor[(15, 4, 3), float32], %var_39: Tensor[(15, 4, 3), float32]) -> Tensor[(15, 4, 3), float32] {
  %1034 = fn (%var_22: Tensor[(15, 4, 3), float32], %var_23: Tensor[(15, 4, 3), float32]) -> Tensor[(15, 4, 3), float32] {
    %1030 = cast(%var_23, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %1031 = shape_of(%var_22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1032 = cast(%var_22, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%1032, %1033) /* ty=Tensor[(15, 4, 3), float32] */
  };
  %1034(%var_38, %var_39) /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_3545() -> Tensor[(15, 4, 3), float64] {
  %1036 = fn () -> Tensor[(15, 4, 3), float64] {
    %1035 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %1035.0
  };
  %1036() /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_9298(%var_9297: Tensor[(2912), bool]) -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(312), float64], Tensor[(2912), bool], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %1054 = fn (%var_9267: Tensor[(2912), bool]) -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(312), float64], Tensor[(2912), bool], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
    %1037 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %1038 = @func_4401() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %1039 = cast(%var_9267, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %1040 = reshape(%1039, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %1041 = @func_6216(%1040) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(2912), int64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float32], Tensor[(6, 4, 13), uint16], Tensor[(312), float64]) */;
    %1042 = cast(meta[relay.Constant][44] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %1043 = reshape(%1042, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %1044 = @func_7844(%1043) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(180), float64]) */;
    %1045 = @func_6338() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %1046 = %1037.0;
    %1047 = %1038.0;
    %1048 = %1041.6;
    %1049 = @func_2479() /* ty=Tensor[(8, 11, 2), float64] */;
    %1050 = %1044.2;
    %1051 = %1045.1;
    %1052 = @func_9069() /* ty=Tensor[(8, 11, 2), float64] */;
    %1053 = @func_7392() /* ty=Tensor[(8, 11, 2), float64] */;
    (%1046, %1047, %1048, %var_9267, %1049, %1050, meta[relay.Constant][44] /* ty=Tensor[(180), float64] */, %1051, %1052, %1053)
  };
  %1054(%var_9297) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(312), float64], Tensor[(2912), bool], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(180), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_7002() -> (Tensor[(12, 16, 7), uint8],) {
  %1055 = @func_3697() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(2912), bool], Tensor[(176), float64]) */;
  %1056 = %1055.0;
  (%1056,)
}

def @func_5168() -> (Tensor[(2, 5, 3), float64],) {
  @func_5166() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_4636(%var_4635: Tensor[(30), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) {
  %1078 = fn (%var_4631: Tensor[(30), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) {
    %1057 = @func_1763() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
    %1058 = @func_2899() /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %1059 = %1057.1;
    %1060 = cast(%1059, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %1061 = reshape(%1060, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %1062 = @func_8(%1061) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1063 = @func_1537() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float32]) */;
    %1064 = @func_1278() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */;
    %1065 = @func_4136() /* ty=(Tensor[(1344), uint8],) */;
    %1066 = %1062.0;
    %1067 = cast(%1066, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %1068 = cast(%var_4631, dtype="float64") /* ty=Tensor[(30), float64] */;
    %1069 = reshape(%1067, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %1070 = reshape(%1068, newshape=[2, 5, 3]) /* ty=Tensor[(2, 5, 3), float64] */;
    %1071 = @func_346(%1069, %1070) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */;
    %1072 = %1058.0;
    %1073 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
    %1074 = %1063.0;
    %1075 = %1064.5;
    %1076 = %1065.0;
    %1077 = %1071.2;
    (%1059, %1072, %1073, %1066, %1074, %1075, %1076, %1077, %var_4631)
  };
  %1078(%var_4635) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(1344), uint8], Tensor[(2, 5, 3), bool], Tensor[(30), float64]) */
}

def @func_6504() -> (Tensor[(2, 5, 3), float64],) {
  %1080 = fn () -> (Tensor[(2, 5, 3), float64],) {
    %1079 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
    (%1079,)
  };
  %1080() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_5166() -> (Tensor[(2, 5, 3), float64],) {
  %1081 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  (%1081,)
}

def @func_8361(%var_8358: Tensor[(1, 176), float64], %var_8359: Tensor[(180), float32], %var_8360: Tensor[(104, 28), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(13, 16, 14), float32], Tensor[(1, 176), float64], Tensor[(180), float32], Tensor[(104, 28), uint64]) {
  %1092 = fn (%var_8349: Tensor[(1, 176), float64], %var_8350: Tensor[(180), float32], %var_8351: Tensor[(104, 28), uint64]) -> (Tensor[(2, 5, 3), float64], Tensor[(13, 16, 14), float32], Tensor[(1, 176), float64], Tensor[(180), float32], Tensor[(104, 28), uint64]) {
    %1082 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
    %1083 = cast(%var_8349, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
    %1084 = cast(%var_8350, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1085 = cast(%var_8351, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
    %1086 = reshape(%1083, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %1087 = reshape(%1084, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %1088 = reshape(%1085, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), uint64] */;
    %1089 = @func_1809(%1086, %1087, %1088) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), int8], Tensor[(176), float64], Tensor[(180), float32], Tensor[(1, 2912), uint64], Tensor[(13, 16, 14), float32]) */;
    %1090 = %1082.0;
    %1091 = %1089.5;
    (%1090, %1091, %var_8349, %var_8350, %var_8351)
  };
  %1092(%var_8358, %var_8359, %var_8360) /* ty=(Tensor[(2, 5, 3), float64], Tensor[(13, 16, 14), float32], Tensor[(1, 176), float64], Tensor[(180), float32], Tensor[(104, 28), uint64]) */
}

def @func_9368() -> (Tensor[(2, 5, 3), float64],) {
  %1093 = @func_5879() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(176), float64]) */;
  %1094 = %1093.0;
  (%1094,)
}

def @func_7392() -> Tensor[(8, 11, 2), float64] {
  %1095 = @func_6338() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1095.1
}

def @func_5823() -> Tensor[(2, 5, 3), float64] {
  @func_5821() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_4039() -> (Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) {
  @func_4037() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(12, 16, 7), uint8]) */
}

def @func_2792() -> Tensor[(8, 11, 2), float64] {
  %1096 = @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */;
  %1096.1
}

def @func_8943() -> Tensor[(2, 5, 3), float64] {
  %1097 = fn () -> Tensor[(2, 5, 3), float64] {
    @func_3743() /* ty=Tensor[(2, 5, 3), float64] */
  };
  %1097() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_1428() -> (Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) {
  @func_1426() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(8, 11, 2), float64]) */
}

def @func_9002(%var_9000: Tensor[(6, 14, 15), int64], %var_9001: Tensor[(6, 14, 15), int64]) -> (Tensor[(6, 14, 15), bool], Tensor[(12, 16, 7), uint8]) {
  %1104 = fn (%var_8983: Tensor[(6, 14, 15), int64], %var_8984: Tensor[(6, 14, 15), int64]) -> (Tensor[(6, 14, 15), bool], Tensor[(12, 16, 7), uint8]) {
    %1098 = cast(%var_8984, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
    %1099 = shape_of(%var_8983, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1100 = cast(%var_8983, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
    %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1102 = less_equal(%1100, %1101) /* ty=Tensor[(6, 14, 15), bool] */;
    %1103 = @func_3439() /* ty=Tensor[(12, 16, 7), uint8] */;
    (%1102, %1103)
  };
  %1104(%var_9000, %var_9001) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(12, 16, 7), uint8]) */
}

def @func_8521() -> Tensor[(2, 5, 3), float64] {
  %1105 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
  %1105.0
}

def @func_9370() -> (Tensor[(2, 5, 3), float64],) {
  @func_9368() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_8315() -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %1106 = @func_7731() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %1107 = @func_2792() /* ty=Tensor[(8, 11, 2), float64] */;
  %1108 = %1106.0;
  (%1107, %1108)
}

def @func_1714() -> (Tensor[(1, 2912), float64],) {
  %1113 = fn () -> (Tensor[(1, 2912), float64],) {
    %1109 = @func_869() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(180), float32], Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(176), float64], Tensor[(2, 5, 3), float64], Tensor[(1, 2912), uint64]) */;
    %1110 = %1109.8;
    %1111 = cast(%1110, dtype="float64") /* ty=Tensor[(1, 2912), float64] */;
    %1112 = exp(%1111) /* ty=Tensor[(1, 2912), float64] */;
    (%1112,)
  };
  %1113() /* ty=(Tensor[(1, 2912), float64],) */
}

def @func_8317() -> (Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  @func_8315() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_1574(%var_1572: Tensor[(2, 5, 3), float64]) -> (Tensor[(2, 5, 3), uint32],) {
  @func_1571(%var_1572) /* ty=(Tensor[(2, 5, 3), uint32],) */
}

def @func_7067() -> (Tensor[(8, 11, 2), bool], Tensor[(15, 4, 3), float64]) {
  %1114 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1115 = %1114.1;
  %1116 = @func_3187() /* ty=(Tensor[(176), float64],) */;
  %1117 = %1116.0;
  %1118 = cast(%1117, dtype="bool") /* ty=Tensor[(176), bool] */;
  %1119 = shape_of(%1115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1120 = cast(%1115, dtype="bool") /* ty=Tensor[(8, 11, 2), bool] */;
  %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1122 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1123 = less_equal(%1120, %1121) /* ty=Tensor[(8, 11, 2), bool] */;
  %1124 = %1122.0;
  (%1123, %1124)
}

def @func_8919(%var_8918: Tensor[(336), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(180), float32]) {
  %1133 = fn (%var_8912: Tensor[(336), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(180), float32]) {
    %1125 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1126 = cast(%var_8912, dtype="float64") /* ty=Tensor[(336), float64] */;
    %1127 = cast(meta[relay.Constant][45] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1128 = reshape(%1126, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %1129 = reshape(%1127, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
    %1130 = @func_2132(%1128, %1129) /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 16, 7), uint8], Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(30), float64], Tensor[(15, 2, 12), float64], Tensor[(360), float32], Tensor[(180, 1), float32]) */;
    %1131 = %1125.0;
    %1132 = %1130.0;
    (%1131, %1132, %var_8912, meta[relay.Constant][45] /* ty=Tensor[(180), float32] */)
  };
  %1133(%var_8918) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(180), float32]) */
}

def @func_579() -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) {
  %1140 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) {
    %1134 = @func_159() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %1135 = cast(meta[relay.Constant][46] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %1136 = reshape(%1135, newshape=[12, 16, 7]) /* ty=Tensor[(12, 16, 7), uint8] */;
    %1137 = @func_441(%1136) /* ty=(Tensor[(12, 16, 7), uint8],) */;
    %1138 = %1134.0;
    %1139 = %1137.0;
    (%1138, %1139, meta[relay.Constant][46] /* ty=Tensor[(1344), uint8] */)
  };
  %1140() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */
}

def @func_2262() -> (Tensor[(2, 5, 3), float64],) {
  %1141 = @func_965() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1142 = %1141.0;
  (%1142,)
}

def @func_7155() -> (Tensor[(2, 5, 3), bool], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %1143 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1144 = %1143.0;
  %1145 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 5, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %1146 = shape_of(%1144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1147 = cast(%1144, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1149 = @func_5444() /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2, 5, 3), float64]) */;
  %1150 = not_equal(%1147, %1148) /* ty=Tensor[(2, 5, 3), bool] */;
  %1151 = @func_3743() /* ty=Tensor[(2, 5, 3), float64] */;
  %1152 = %1149.1;
  (%1150, %1151, %1152)
}

def @func_5207(%var_5197: Tensor[(8, 11, 2), float64]) -> (Tensor[(8, 11, 2), uint64], Tensor[(8, 11, 2), float64]) {
  %1153 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1154 = %1153.1;
  %1155 = cast(%var_5197, dtype="uint64") /* ty=Tensor[(8, 11, 2), uint64] */;
  %1156 = shape_of(%1154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1157 = cast(%1154, dtype="uint64") /* ty=Tensor[(8, 11, 2), uint64] */;
  %1158 = dyn.reshape(%1155, %1156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1159 = cast(%1154, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
  %1160 = bitwise_xor(%1157, %1158) /* ty=Tensor[(8, 11, 2), uint64] */;
  %1161 = log10(%1159) /* ty=Tensor[(8, 11, 2), float64] */;
  (%1160, %1161)
}

def @func_268(%var_266: Tensor[(6, 4, 13), float64]) -> (Tensor[(6, 4, 13), uint16],) {
  @func_265(%var_266) /* ty=(Tensor[(6, 4, 13), uint16],) */
}

def @func_4332() -> Tensor[(2, 5, 3), float64] {
  @func_4330() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_3944(%var_3943: Tensor[(3, 60), float32]) -> (Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) {
  %1180 = fn (%var_3937: Tensor[(3, 60), float32]) -> (Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) {
    %1162 = @func_2391() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(30), float64], Tensor[(312), uint8], Tensor[(15, 4, 3), float32], Tensor[(360), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), uint64], Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8]) */;
    %1163 = @func_3430() /* ty=(Tensor[(176), float64], Tensor[(2912), bool]) */;
    %1164 = @func_3187() /* ty=(Tensor[(176), float64],) */;
    %1165 = @func_2573() /* ty=(Tensor[(8, 11, 2), float64], Tensor[(12, 16, 7), uint8]) */;
    %1166 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1167 = %1166.0;
    %1168 = cast(%1167, dtype="float32") /* ty=Tensor[(8, 11, 2), float32] */;
    %1169 = %1162.1;
    %1170 = cast(%1169, dtype="float64") /* ty=Tensor[(176), float64] */;
    %1171 = cast(%var_3937, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
    %1172 = reshape(%1170, newshape=[2, 88]) /* ty=Tensor[(2, 88), float64] */;
    %1173 = reshape(%1171, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %1174 = @func_3518(%1172, %1173) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(176), float64], Tensor[(2, 88), float64], Tensor[(180), float32], Tensor[(2912), uint64]) */;
    %1175 = %1163.0;
    %1176 = %1164.0;
    %1177 = %1165.0;
    %1178 = log2(%1168) /* ty=Tensor[(8, 11, 2), float32] */;
    %1179 = %1174.3;
    (%1169, %1175, %1176, %1177, %1178, %1179, %var_3937)
  };
  %1180(%var_3943) /* ty=(Tensor[(176), float64], Tensor[(176), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float32], Tensor[(180), float32], Tensor[(3, 60), float32]) */
}

def @func_8048() -> (Tensor[(14, 1, 3), float64],) {
  %1182 = fn () -> (Tensor[(14, 1, 3), float64],) {
    %1181 = @func_6123() /* ty=Tensor[(14, 1, 3), float64] */;
    (%1181,)
  };
  %1182() /* ty=(Tensor[(14, 1, 3), float64],) */
}

def @func_1824() -> (Tensor[(8, 11, 2), float64],) {
  @func_1822() /* ty=(Tensor[(8, 11, 2), float64],) */
}

def @func_8463(%var_8461: Tensor[(7, 3, 14), float32]) -> Tensor[(7, 3, 14), float32] {
  @func_8460(%var_8461) /* ty=Tensor[(7, 3, 14), float32] */
}

def @func_1279() -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  %1199 = fn () -> (Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
    %1183 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %1184 = @func_468() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) */;
    %1185 = cast(meta[relay.Constant][48] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %1186 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %1187 = reshape(%1185, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %1188 = reshape(%1186, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %1189 = @func_1051(%1187, %1188) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
    %1190 = @func_743() /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1191 = %1190.0;
    %1192 = cast(%1191, dtype="float64") /* ty=Tensor[(8, 11, 2), float64] */;
    %1193 = reshape(%1192, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %1194 = @func_8(%1193) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1195 = %1183.1;
    %1196 = %1184.0;
    %1197 = %1189.1;
    %1198 = %1194.0;
    (%1195, %1196, %1197, meta[relay.Constant][48] /* ty=Tensor[(176), float64] */, meta[relay.Constant][49] /* ty=Tensor[(6, 30), float32] */, %1191, %1198)
  };
  %1199() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64], Tensor[(15, 4, 3), float32], Tensor[(176), float64], Tensor[(6, 30), float32], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_8822(%var_8820: Tensor[(9, 14, 3), uint8], %var_8821: Tensor[(9, 14, 3), uint8]) -> (Tensor[(9, 14, 3), bool], Tensor[(9, 14, 3), int8], Tensor[(14, 1, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) {
  @func_8818(%var_8820, %var_8821) /* ty=(Tensor[(9, 14, 3), bool], Tensor[(9, 14, 3), int8], Tensor[(14, 1, 3), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64]) */
}

def @func_9620() -> (Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64], Tensor[(2, 5, 3), float64]) {
  %1200 = @func_2679() /* ty=(Tensor[(15, 4, 3), float64], Tensor[(8, 11, 2), float64]) */;
  %1201 = %1200.1;
  %1202 = @func_5038() /* ty=Tensor[(2, 5, 3), float64] */;
  %1203 = @func_2164() /* ty=Tensor[(2, 5, 3), float64] */;
  (%1201, %1202, %1203)
}

def @func_7911(%var_7909: Tensor[(11, 4, 4), float64]) -> (Tensor[(8, 11, 2), int8], Tensor[(11, 4, 4), uint16]) {
  @func_7908(%var_7909) /* ty=(Tensor[(8, 11, 2), int8], Tensor[(11, 4, 4), uint16]) */
}

def @func_6812() -> Tensor[(8, 11, 2), float64] {
  @func_6810() /* ty=Tensor[(8, 11, 2), float64] */
}

def @func_8712() -> (Tensor[(2, 5, 3), float32],) {
  %1204 = @func_8614() /* ty=(Tensor[(2, 5, 3), float32],) */;
  %1205 = %1204.0;
  (%1205,)
}

def @func_9395() -> (Tensor[(2, 5, 3), float64],) {
  @func_9393() /* ty=(Tensor[(2, 5, 3), float64],) */
}

def @func_3744() -> Tensor[(2, 5, 3), float64] {
  %1207 = fn () -> Tensor[(2, 5, 3), float64] {
    %1206 = @func_2262() /* ty=(Tensor[(2, 5, 3), float64],) */;
    %1206.0
  };
  %1207() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_3114(%var_3112: Tensor[(180), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float32]) {
  @func_3111(%var_3112) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(15, 4, 3), float64], Tensor[(180), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float32]) */
}

def @func_2899() -> (Tensor[(12, 16, 7), uint8],) {
  %1208 = @func_704() /* ty=Tensor[(12, 16, 7), uint8] */;
  (%1208,)
}

def @func_4834(%var_4832: Tensor[(12, 16, 7), uint8], %var_4833: Tensor[(180), float32]) -> (Tensor[(176), float64], Tensor[(12, 16, 7), int16], Tensor[(180), float32], Tensor[(180), float32], Tensor[(6, 30), float64], Tensor[(2912, 624), bool], Tensor[(624), uint8], Tensor[(624), float32], Tensor[(2, 5, 3), float64]) {
  @func_4830(%var_4832, %var_4833) /* ty=(Tensor[(176), float64], Tensor[(12, 16, 7), int16], Tensor[(180), float32], Tensor[(180), float32], Tensor[(6, 30), float64], Tensor[(2912, 624), bool], Tensor[(624), uint8], Tensor[(624), float32], Tensor[(2, 5, 3), float64]) */
}

def @func_4168() -> (Tensor[(176), float64],) {
  %1209 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
  %1210 = %1209.1;
  (%1210,)
}

def @func_112(%var_110: Tensor[(13, 16, 14), uint64], %var_111: Tensor[(13, 16, 14), uint64]) -> (Tensor[(13, 16, 14), uint64],) {
  %1216 = fn (%var_103: Tensor[(13, 16, 14), uint64], %var_104: Tensor[(13, 16, 14), uint64]) -> (Tensor[(13, 16, 14), uint64],) {
    %1211 = cast(%var_104, dtype="uint64") /* ty=Tensor[(13, 16, 14), uint64] */;
    %1212 = shape_of(%var_103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1213 = cast(%var_103, dtype="uint64") /* ty=Tensor[(13, 16, 14), uint64] */;
    %1214 = dyn.reshape(%1211, %1212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1215 = maximum(%1213, %1214) /* ty=Tensor[(13, 16, 14), uint64] */;
    (%1215,)
  };
  %1216(%var_110, %var_111) /* ty=(Tensor[(13, 16, 14), uint64],) */
}

def @func_1317(%var_1314: Tensor[(15, 2, 12), float32], %var_1315: Tensor[(44, 4), float64], %var_1316: Tensor[(180), float32]) -> (Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) {
  %1227 = fn (%var_1288: Tensor[(15, 2, 12), float32], %var_1299: Tensor[(44, 4), float64], %var_1300: Tensor[(180), float32]) -> (Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) {
    %1217 = cast(%var_1299, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
    %1218 = cast(%var_1300, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1219 = reshape(%1217, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %1220 = reshape(%1218, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %1221 = @func_1051(%1219, %1220) /* ty=(Tensor[(176), int8], Tensor[(15, 4, 3), float32], Tensor[(180), float32]) */;
    %1222 = cast(%var_1288, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
    %1223 = sqrt(%1222) /* ty=Tensor[(15, 2, 12), float32] */;
    %1224 = cast(%1223, dtype="float64") /* ty=Tensor[(15, 2, 12), float64] */;
    %1225 = %1221.1;
    %1226 = acos(%1224) /* ty=Tensor[(15, 2, 12), float64] */;
    (%1225, %var_1299, %var_1300, %1226)
  };
  %1227(%var_1314, %var_1315, %var_1316) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(44, 4), float64], Tensor[(180), float32], Tensor[(15, 2, 12), float64]) */
}

def @func_349(%var_347: Tensor[(176), float64], %var_348: Tensor[(2, 5, 3), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) {
  %1244 = fn (%var_298: Tensor[(176), float64], %var_302: Tensor[(2, 5, 3), float64]) -> (Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) {
    %1228 = cast(%var_298, dtype="float64") /* ty=Tensor[(176), float64] */;
    %1229 = reshape(%1228, newshape=[8, 11, 2]) /* ty=Tensor[(8, 11, 2), float64] */;
    %1230 = @func_8(%1229) /* ty=(Tensor[(8, 11, 2), float64],) */;
    %1231 = @func_223() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(176), float64], Tensor[(8, 11, 2), float64], Tensor[(8, 11, 2), float64], Tensor[(2, 5, 3), float64]) */;
    %1232 = %1231.0;
    %1233 = cast(%var_302, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %1234 = shape_of(%1232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1235 = cast(%1232, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %1236 = dyn.reshape(%1233, %1234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1237 = greater_equal(%1235, %1236) /* ty=Tensor[(2, 5, 3), bool] */;
    %1238 = cast(%1237, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %1239 = shape_of(%1232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1240 = cast(%1232, dtype="bool") /* ty=Tensor[(2, 5, 3), bool] */;
    %1241 = dyn.reshape(%1238, %1239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1242 = %1230.0;
    %1243 = logical_and(%1240, %1241) /* ty=Tensor[(2, 5, 3), bool] */;
    (%1242, %var_298, %1243)
  };
  %1244(%var_347, %var_348) /* ty=(Tensor[(8, 11, 2), float64], Tensor[(176), float64], Tensor[(2, 5, 3), bool]) */
}

def @func_7514() -> Tensor[(15, 4, 3), float32] {
  @func_7463() /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_4137() -> (Tensor[(1344), uint8],) {
  %1247 = fn () -> (Tensor[(1344), uint8],) {
    %1245 = @func_578() /* ty=(Tensor[(2, 5, 3), float64], Tensor[(12, 16, 7), uint8], Tensor[(1344), uint8]) */;
    %1246 = %1245.2;
    (%1246,)
  };
  %1247() /* ty=(Tensor[(1344), uint8],) */
}

def @func_8523() -> Tensor[(2, 5, 3), float64] {
  @func_8521() /* ty=Tensor[(2, 5, 3), float64] */
}

def @func_2754() -> (Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2912), uint64], Tensor[(180), float32]) {
  %1248 = @func_888() /* ty=(Tensor[(2, 5, 3), float64],) */;
  %1249 = cast(meta[relay.Constant][50] /* ty=Tensor[(2912), uint64] */, dtype="uint64") /* ty=Tensor[(2912), uint64] */;
  %1250 = cast(meta[relay.Constant][51] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1251 = reshape(%1249, newshape=[2912]) /* ty=Tensor[(2912), uint64] */;
  %1252 = reshape(%1250, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %1253 = @func_1947(%1251, %1252) /* ty=(Tensor[(12, 16, 7), uint8], Tensor[(2912), uint64], Tensor[(8, 11, 2), float64], Tensor[(180), float32], Tensor[(180), float32], Tensor[(2, 5, 3), float64], Tensor[(2912), bool], Tensor[(2, 5, 3), float64], Tensor[(2912), bool]) */;
  %1254 = %1248.0;
  %1255 = %1253.8;
  (%1254, %1255, meta[relay.Constant][50] /* ty=Tensor[(2912), uint64] */, meta[relay.Constant][51] /* ty=Tensor[(180), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen433/build/output.py:3590: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen433/build/output.py:3595: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x: (GradCell[T], GradCell[T]) = (%l, %r);
  let %x1: GradCell[T] = match (%x) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      let %x2: T = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          let %x5: T = %x4() /* ty=T */;
          %x5
        },
        Zero(%x6: fn () -> T) => {
          let %x7: T = %x6() /* ty=T */;
          %x7
        },
      };
      let %x8: T = match (%r) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          let %x11: T = %x10() /* ty=T */;
          %x11
        },
        Zero(%x12: fn () -> T) => {
          let %x13: T = %x12() /* ty=T */;
          %x13
        },
      };
      let %x14: T = %multiply(%x2, %x8) /* ty=T */;
      let %x15: GradCell[T] = Raw(%x14) /* ty=GradCell[T] */;
      %x15
    },
  };
  %x1
}

def @main() -> ((Tensor[(16, 12, 14), float32],), ()) {
  let %x16: fn () -> ((GradCell[Tensor[(16, 12, 14), float32]],), ()) = fn () -> ((GradCell[Tensor[(16, 12, 14), float32]],), ()) {
    let %x17: Tensor[(16, 12, 14), float32] = meta[relay.Constant][0] /* ty=Tensor[(16, 12, 14), float32] */;
    let %x18: GradCell[Tensor[(16, 12, 14), float32]] = Raw(%x17) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
    let %x19: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
      let %x20: Tensor[(16, 12, 14), float32] = meta[relay.Constant][1] /* ty=Tensor[(16, 12, 14), float32] */;
      %x20
    };
    let %x21: GradCell[Tensor[(16, 12, 14), float32]] = One(%x19) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
    let %x22: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x18,);
    let %x23: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
      let %x24: Tensor[(16, 12, 14), float32] = meta[relay.Constant][2] /* ty=Tensor[(16, 12, 14), float32] */;
      %x24
    };
    let %x25: GradCell[Tensor[(16, 12, 14), float32]] = Zero(%x23) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
    let %x26: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x25,);
    let %x27: fn (Tensor[(16, 12, 14), float32], Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] = fn (%lhs: Tensor[(16, 12, 14), float32], %rhs: Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] {
      let %x28: Tensor[(16, 12, 14), float32] = add(%lhs, %rhs) /* ty=Tensor[(16, 12, 14), float32] */;
      %x28
    };
    let %x29: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
      let %x30: Tensor[(16, 12, 14), float32] = meta[relay.Constant][3] /* ty=Tensor[(16, 12, 14), float32] */;
      %x30
    };
    let %x31: GradCell[Tensor[(16, 12, 14), float32]] = One(%x29) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
    let %x32: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x31,);
    let %x33: (GradCell[Tensor[(16, 12, 14), float32]], GradCell[Tensor[(16, 12, 14), float32]]) = (%x21, %x31);
    let %x34: Tensor[(16, 12, 14), float32] = meta[relay.Constant][4] /* ty=Tensor[(16, 12, 14), float32] */;
    let %x35: Tensor[(16, 12, 14), float32] = meta[relay.Constant][5] /* ty=Tensor[(16, 12, 14), float32] */;
    let %x36: Tensor[(16, 12, 14), float32] = meta[relay.Constant][6] /* ty=Tensor[(16, 12, 14), float32] */;
    let %x37: GradCell[Tensor[(16, 12, 14), float32]] = Raw(%x36) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
    let %x38: () = ();
    let %x39: ((GradCell[Tensor[(16, 12, 14), float32]],), ()) = (%x22, %x38);
    %x39
  };
  let %x40: Tensor[(16, 12, 14), float32] = meta[relay.Constant][0] /* ty=Tensor[(16, 12, 14), float32] */;
  let %x41: GradCell[Tensor[(16, 12, 14), float32]] = Raw(%x40) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
  let %x42: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
    let %x43: Tensor[(16, 12, 14), float32] = meta[relay.Constant][7] /* ty=Tensor[(16, 12, 14), float32] */;
    %x43
  };
  let %x44: GradCell[Tensor[(16, 12, 14), float32]] = One(%x42) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
  let %x45: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x41,);
  let %x46: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
    let %x47: Tensor[(16, 12, 14), float32] = meta[relay.Constant][8] /* ty=Tensor[(16, 12, 14), float32] */;
    %x47
  };
  let %x48: GradCell[Tensor[(16, 12, 14), float32]] = Zero(%x46) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
  let %x49: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x48,);
  let %x50: fn (Tensor[(16, 12, 14), float32], Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] = fn (%lhs1: Tensor[(16, 12, 14), float32], %rhs1: Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] {
    let %x51: Tensor[(16, 12, 14), float32] = add(%lhs1, %rhs1) /* ty=Tensor[(16, 12, 14), float32] */;
    %x51
  };
  let %x52: fn () -> Tensor[(16, 12, 14), float32] = fn () -> Tensor[(16, 12, 14), float32] {
    let %x53: Tensor[(16, 12, 14), float32] = meta[relay.Constant][9] /* ty=Tensor[(16, 12, 14), float32] */;
    %x53
  };
  let %x54: GradCell[Tensor[(16, 12, 14), float32]] = One(%x52) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
  let %x55: (GradCell[Tensor[(16, 12, 14), float32]],) = (%x54,);
  let %x56: (GradCell[Tensor[(16, 12, 14), float32]], GradCell[Tensor[(16, 12, 14), float32]]) = (%x44, %x54);
  let %x57: Tensor[(16, 12, 14), float32] = meta[relay.Constant][10] /* ty=Tensor[(16, 12, 14), float32] */;
  let %x58: Tensor[(16, 12, 14), float32] = meta[relay.Constant][11] /* ty=Tensor[(16, 12, 14), float32] */;
  let %x59: Tensor[(16, 12, 14), float32] = meta[relay.Constant][12] /* ty=Tensor[(16, 12, 14), float32] */;
  let %x60: GradCell[Tensor[(16, 12, 14), float32]] = Raw(%x59) /* ty=GradCell[Tensor[(16, 12, 14), float32]] */;
  let %x61: () = ();
  let %x62: ((GradCell[Tensor[(16, 12, 14), float32]],), ()) = (%x45, %x61);
  let %x63: (Tensor[(16, 12, 14), float32],) = (%x40,);
  let %x64: () = ();
  let %x65: ((Tensor[(16, 12, 14), float32],), ()) = (%x63, %x64);
  %x65
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x66: (GradCell[T], GradCell[T]) = (%l1, %r1);
  let %x67: GradCell[T] = match (%x66) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      let %x68: T = match (%l1) {
        Raw(%x69: T) => {
          %x69
        },
        One(%x70: fn () -> T) => {
          let %x71: T = %x70() /* ty=T */;
          %x71
        },
        Zero(%x72: fn () -> T) => {
          let %x73: T = %x72() /* ty=T */;
          %x73
        },
      };
      let %x74: T = match (%r1) {
        Raw(%x75: T) => {
          %x75
        },
        One(%x76: fn () -> T) => {
          let %x77: T = %x76() /* ty=T */;
          %x77
        },
        Zero(%x78: fn () -> T) => {
          let %x79: T = %x78() /* ty=T */;
          %x79
        },
      };
      let %x80: T = %add(%x68, %x74) /* ty=T */;
      let %x81: GradCell[T] = Raw(%x80) /* ty=GradCell[T] */;
      %x81
    },
  };
  %x67
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x82: T = match (%g) {
    Raw(%x83: T) => {
      %x83
    },
    One(%x84: fn () -> T) => {
      let %x85: T = %x84() /* ty=T */;
      %x85
    },
    Zero(%x86: fn () -> T) => {
      let %x87: T = %x86() /* ty=T */;
      %x87
    },
  };
  %x82
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen433/build/output.py", line 3620, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  27: TVMFuncCall
  26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  25: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  24: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  23: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  22: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  21: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  20: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  19: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  18: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  17: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  16: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  15: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  11: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  10: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  9: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
