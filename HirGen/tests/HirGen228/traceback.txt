==========mod==========
#[version = "0.0.5"]
def @func_5226(%var_5210: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) {
  %0 = cast(%var_5210, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %1 = sin(%0) /* ty=Tensor[(14, 12, 13), float32] */;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %4 = reshape(%3, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %5 = erf(%2) /* ty=Tensor[(14, 12, 13), float64] */;
  %6 = @func_490(%4) /* ty=Tensor[(16, 1), float64] */;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(16), float64] */)
}

def @func_7299(%var_7187: Tensor[(10, 15, 16), float32], %var_7200: Tensor[(672), int8], %var_7237: Tensor[(2, 960), float64], %var_7257: Tensor[(432), float32]) -> (Tensor[(14, 3, 16), float32], Tensor[(672), int8], Tensor[(1, 1, 10), bool], Tensor[(10, 15, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1280), float32], Tensor[(2, 960), float64], Tensor[(280), float64], Tensor[(480), bool], Tensor[(280), float64], Tensor[(16, 9, 3), float32], Tensor[(432), float32], Tensor[(280), float64], Tensor[(16, 1), float64], Tensor[(8, 2), float64]) {
  %7 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %8 = cast(%var_7200, dtype="int8") /* ty=Tensor[(672), int8] */;
  %9 = reshape(%7, newshape=[]) /* ty=int8 */;
  %10 = reshape(%8, newshape=[14, 3, 16]) /* ty=Tensor[(14, 3, 16), int8] */;
  %11 = @func_1909(%9, %10) /* ty=(Tensor[(14, 3, 16), float32],) */;
  %12 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %13 = reshape(%12, newshape=[]) /* ty=bool */;
  %14 = @func_148(%13) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %15 = cast(%var_7187, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %16 = cos(%15) /* ty=Tensor[(10, 15, 16), float32] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %18 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %20 = cast(%var_7237, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
  %21 = reshape(%19, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %22 = reshape(%20, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %23 = @func_2455(%21, %22) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %26 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int16") /* ty=int16 */;
  %27 = cast(meta[relay.Constant][4] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %28 = reshape(%24, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %29 = reshape(%25, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %30 = reshape(%26, newshape=[]) /* ty=int16 */;
  %31 = reshape(%27, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %32 = @func_6310(%28, %29, %30, %31) /* ty=(Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) */;
  %33 = cast(%var_7257, dtype="float32") /* ty=Tensor[(432), float32] */;
  %34 = reshape(%33, newshape=[16, 9, 3]) /* ty=Tensor[(16, 9, 3), float32] */;
  %35 = @func_6762(%34) /* ty=(Tensor[(16, 9, 3), float32],) */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %38 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int16") /* ty=int16 */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %40 = reshape(%36, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %41 = reshape(%37, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %42 = reshape(%38, newshape=[]) /* ty=int16 */;
  %43 = reshape(%39, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %44 = @func_6310(%40, %41, %42, %43) /* ty=(Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %46 = reshape(%45, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %47 = %11.0;
  %48 = %14.0;
  %49 = power(%17, %18) /* ty=Tensor[(10, 15, 16), float32] */;
  %50 = %23.1;
  %51 = %32.4;
  %52 = %35.0;
  %53 = %44.4;
  %54 = @func_490(%46) /* ty=Tensor[(16, 1), float64] */;
  (%47, %var_7200, %48, %49, %50, meta[relay.Constant][2] /* ty=Tensor[(1280), float32] */, %var_7237, %51, meta[relay.Constant][3] /* ty=Tensor[(480), bool] */, meta[relay.Constant][4] /* ty=Tensor[(280), float64] */, %52, %var_7257, %53, %54, meta[relay.Constant][5] /* ty=Tensor[(8, 2), float64] */)
}

def @func_2744(%var_2727: Tensor[(2, 8, 3), float32]) -> (Tensor[(2, 8, 3), float32],) {
  %55 = cast(%var_2727, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %56 = rsqrt(%55) /* ty=Tensor[(2, 8, 3), float32] */;
  (%56,)
}

def @func_7650(%var_7644: uint16, %var_7645: Tensor[(12, 11, 8), uint16]) -> (Tensor[(12, 11, 8), uint16],) {
  %57 = cast(%var_7644, dtype="uint16") /* ty=uint16 */;
  %58 = cast(%var_7645, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
  %59 = subtract(%57, %58) /* ty=Tensor[(12, 11, 8), uint16] */;
  (%59,)
}

def @func_8776(%var_8767: Tensor[(7, 4, 7), int64], %var_8768: Tensor[(7, 4, 7), int64]) -> (Tensor[(7, 4, 7), float64],) {
  %60 = cast(%var_8768, dtype="int64") /* ty=Tensor[(7, 4, 7), int64] */;
  %61 = shape_of(%var_8767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_8767, dtype="int64") /* ty=Tensor[(7, 4, 7), int64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %64 = logical_xor(%62, %63) /* ty=Tensor[(7, 4, 7), int64] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
  %66 = log2(%65) /* ty=Tensor[(7, 4, 7), float64] */;
  (%66,)
}

def @func_8986(%var_8976: float32, %var_8977: Tensor[(4, 6, 12), float32], %var_8982: Tensor[(195), float64], %var_8983: Tensor[(390), float64]) -> (Tensor[(4, 6, 12), float32], Tensor[(15, 13, 2), float64], Tensor[(195), float64], Tensor[(390), float64]) {
  %67 = cast(%var_8976, dtype="float32") /* ty=float32 */;
  %68 = cast(%var_8977, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %69 = cast(%var_8982, dtype="float64") /* ty=Tensor[(195), float64] */;
  %70 = cast(%var_8983, dtype="float64") /* ty=Tensor[(390), float64] */;
  %71 = reshape(%69, newshape=[15, 13, 1]) /* ty=Tensor[(15, 13, 1), float64] */;
  %72 = reshape(%70, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), float64] */;
  %73 = power(%67, %68) /* ty=Tensor[(4, 6, 12), float32] */;
  %74 = @func_3976(%71, %72) /* ty=Tensor[(15, 13, 2), float64] */;
  (%73, %74, %var_8982, %var_8983)
}

def @func_8918(%var_8866: Tensor[(2, 180), uint64], %var_8873: Tensor[(1620), float64], %var_8875: Tensor[(2, 180), uint64], %var_8914: Tensor[(140, 2), float64]) -> (Tensor[(2, 180), int8], Tensor[(1620), float64], Tensor[(2, 180), float64], Tensor[(48), float32], Tensor[(24, 2), float32], Tensor[(280), float64], int16, Tensor[(140, 2), float64]) {
  %75 = cast(%var_8875, dtype="int8") /* ty=Tensor[(2, 180), int8] */;
  %76 = shape_of(%var_8866, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%var_8866, dtype="int8") /* ty=Tensor[(2, 180), int8] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %79 = cast(%var_8873, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %80 = reshape(%79, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float64] */;
  %81 = @func_1399(%80) /* ty=(Tensor[(9, 15, 12), float64],) */;
  %82 = %81.0;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(9, 15, 12), float64] */;
  %84 = shape_of(%var_8873, dtype="int32") /* ty=Tensor[(1), int32] */;
  %85 = cast(%var_8873, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?), float64] */;
  %87 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %88 = %87.2;
  %89 = cast(%var_8866, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(2), int32] */;
  %91 = cast(%88, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %93 = bitwise_xor(%91, %92) /* ty=Tensor[(2, 180), int16] */;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %96 = reshape(%95, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %97 = @func_3436(%96) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
  %98 = cast(meta[relay.Constant][7] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %99 = power(%85, %86) /* ty=Tensor[(1620), float64] */;
  %100 = cast(%99, dtype="int16") /* ty=Tensor[(1620), int16] */;
  %101 = cast(%var_8914, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %102 = reshape(%98, newshape=[]) /* ty=int16 */;
  %103 = reshape(%100, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), int16] */;
  %104 = reshape(%101, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %105 = @func_3773(%102, %103, %104) /* ty=(Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) */;
  %106 = multiply(%77, %78) /* ty=Tensor[(2, 180), int8] */;
  %107 = sin(%94) /* ty=Tensor[(2, 180), float64] */;
  %108 = %97.2;
  %109 = %105.3;
  (%106, %99, %107, %108, meta[relay.Constant][6] /* ty=Tensor[(24, 2), float32] */, %109, meta[relay.Constant][7] /* ty=int16 */, %var_8914)
}

def @func_3773(%var_3736: int16, %var_3737: Tensor[(15, 9, 12), int16], %var_3757: Tensor[(280), float64]) -> (Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) {
  %110 = cast(%var_3736, dtype="int16") /* ty=int16 */;
  %111 = cast(%var_3737, dtype="int16") /* ty=Tensor[(15, 9, 12), int16] */;
  %112 = cast(%var_3757, dtype="float64") /* ty=Tensor[(280), float64] */;
  %113 = reshape(%112, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %114 = @func_420(%113) /* ty=(Tensor[(4, 14, 5), float64],) */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(24, 80), float64] */, dtype="float64") /* ty=Tensor[(24, 80), float64] */;
  %116 = reshape(%115, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %117 = @func_596(%116) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %120 = sin(%119) /* ty=Tensor[(15, 16, 8), float32] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %122 = acosh(%121) /* ty=Tensor[(15, 16, 8), float64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %124 = logical_xor(%110, %111) /* ty=Tensor[(15, 9, 12), int16] */;
  %125 = %114.0;
  %126 = acos(%123) /* ty=Tensor[(15, 16, 8), float64] */;
  (%124, meta[relay.Constant][8] /* ty=Tensor[(24, 80), float64] */, %125, %var_3757, %126)
}

def @func_9307() -> (Tensor[(2, 180), uint64], Tensor[(1248), float64], Tensor[(5, 40), float32], Tensor[(7, 4, 7), float64], Tensor[(196), int64]) {
  %127 = @func_9238() /* ty=(Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 40), float32] */, dtype="float32") /* ty=Tensor[(5, 40), float32] */;
  %129 = reshape(%128, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), float32] */;
  %130 = @func_1024(%129) /* ty=(Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) */;
  %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(196), int64] */, dtype="int64") /* ty=Tensor[(196), int64] */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(196), int64] */, dtype="int64") /* ty=Tensor[(196), int64] */;
  %133 = reshape(%131, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), int64] */;
  %134 = reshape(%132, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), int64] */;
  %135 = @func_8776(%133, %134) /* ty=(Tensor[(7, 4, 7), float64],) */;
  %136 = %127.0;
  %137 = %130.2;
  %138 = %135.0;
  (%136, %137, meta[relay.Constant][9] /* ty=Tensor[(5, 40), float32] */, %138, meta[relay.Constant][10] /* ty=Tensor[(196), int64] */)
}

def @func_529(%var_499: Tensor[(16, 13, 6), float64], %var_504: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) {
  %139 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %140 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_499, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = cast(%var_504, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %144 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = floor_mod(%141, %142) /* ty=Tensor[(16, 13, 6), float64] */;
  %148 = less(%145, %146) /* ty=Tensor[(16, 13, 6), bool] */;
  (%147, %148)
}

def @func_3436(%var_3423: Tensor[(48), float32]) -> (Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) {
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %150 = cast(%var_3423, dtype="float32") /* ty=Tensor[(48), float32] */;
  %151 = reshape(%150, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float32] */;
  %152 = @func_2744(%151) /* ty=(Tensor[(2, 8, 3), float32],) */;
  %153 = atan(%149) /* ty=Tensor[(2, 4, 4), float64] */;
  %154 = %152.0;
  (%153, %154, %var_3423)
}

def @func_763(%var_717: Tensor[(16, 4, 5), float64], %var_718: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), uint16], Tensor[(16, 4, 5), float64]) {
  %155 = cast(%var_718, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %156 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%var_717, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %159 = divide(%157, %158) /* ty=Tensor[(16, 4, 5), float64] */;
  %160 = cast(%var_717, dtype="uint16") /* ty=Tensor[(16, 4, 5), uint16] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="uint16") /* ty=Tensor[(16, 4, 5), uint16] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %164 = cast(%var_718, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %165 = bitwise_xor(%162, %163) /* ty=Tensor[(16, 4, 5), uint16] */;
  %166 = cos(%164) /* ty=Tensor[(16, 4, 5), float64] */;
  (%165, %166)
}

def @func_3603(%var_3579: Tensor[(12, 6, 12), int16]) -> (Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) {
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 6, 12), int16] */, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
  %168 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_3579, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %172 = reshape(%171, newshape=[]) /* ty=bool */;
  %173 = @func_148(%172) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %174 = %173.0;
  %175 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %176 = cast(%174, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
  %177 = less_equal(%169, %170) /* ty=Tensor[(12, 6, 12), bool] */;
  %178 = equal(%175, %176) /* ty=Tensor[(1, 1, 10), bool] */;
  (%177, %178)
}

def @func_8472(%var_8453: Tensor[(12, 5, 6), uint64], %var_8454: Tensor[(12, 5, 6), uint64]) -> Tensor[(12, 5, 6), uint64] {
  %179 = cast(%var_8454, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
  %180 = shape_of(%var_8453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_8453, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %183 = right_shift(%181, %182) /* ty=Tensor[(12, 5, 6), uint64] */;
  %184 = cast(%var_8453, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%186, %187) /* ty=Tensor[(12, 5, 6), uint64] */
}

def @func_3935(%var_3930: Tensor[(10, 3, 4), int8], %var_3931: Tensor[(10, 3, 4), int8]) -> Tensor[(10, 3, 4), int8] {
  %188 = cast(%var_3931, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %189 = shape_of(%var_3930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%var_3930, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%190, %191) /* ty=Tensor[(10, 3, 4), int8] */
}

def @func_8797() -> (Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) {
  %192 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 180), uint64] */, dtype="uint64") /* ty=Tensor[(2, 180), uint64] */;
  %194 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 180), uint64] */, dtype="uint64") /* ty=Tensor[(2, 180), uint64] */;
  %195 = reshape(%193, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), uint64] */;
  %196 = reshape(%194, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), uint64] */;
  %197 = log(%192) /* ty=Tensor[(7, 4, 9), float64] */;
  %198 = @func_8472(%195, %196) /* ty=Tensor[(12, 5, 6), uint64] */;
  (%197, %198, meta[relay.Constant][15] /* ty=Tensor[(2, 180), uint64] */)
}

def @func_2455(%var_2445: Tensor[(5, 16, 16), float32], %var_2452: Tensor[(1920), float64]) -> (Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) {
  %199 = cast(%var_2445, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %200 = cast(%var_2452, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %201 = reshape(%200, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %202 = @func_596(%201) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
  %203 = asin(%199) /* ty=Tensor[(5, 16, 16), float32] */;
  %204 = %202.1;
  (%203, %204, %var_2452)
}

def @func_2677(%var_2653: Tensor[(3, 1, 16), float64]) -> Tensor[(3, 1, 16), float64] {
  %205 = cast(%var_2653, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  asin(%205) /* ty=Tensor[(3, 1, 16), float64] */
}

def @func_6674(%var_6648: Tensor[(12, 15, 15), int64], %var_6664: Tensor[(32, 40), float32], %var_6665: Tensor[(1920), float64]) -> (Tensor[(12, 15, 15), int64], Tensor[(1, 1, 10), bool], bool, Tensor[(5, 16, 16), float32], Tensor[(32, 40), float32], Tensor[(1920), float64]) {
  %206 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 15, 15), int64] */, dtype="int64") /* ty=Tensor[(1, 15, 15), int64] */;
  %207 = cast(%var_6648, dtype="int64") /* ty=Tensor[(12, 15, 15), int64] */;
  %208 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %209 = reshape(%208, newshape=[]) /* ty=bool */;
  %210 = @func_148(%209) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %211 = cast(%var_6664, dtype="float32") /* ty=Tensor[(32, 40), float32] */;
  %212 = cast(%var_6665, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %213 = reshape(%211, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %214 = reshape(%212, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %215 = @func_2455(%213, %214) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %216 = bitwise_or(%206, %207) /* ty=Tensor[(12, 15, 15), int64] */;
  %217 = %210.0;
  %218 = %215.0;
  (%216, %217, False /* ty=bool */, %218, %var_6664, %var_6665)
}

def @func_7403(%var_7386: Tensor[(16, 10), float64]) -> Tensor[(16, 10), float64] {
  %219 = cast(%var_7386, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  sqrt(%219) /* ty=Tensor[(16, 10), float64] */
}

def @func_6762(%var_6756: Tensor[(16, 9, 3), float32]) -> (Tensor[(16, 9, 3), float32],) {
  %220 = cast(%var_6756, dtype="float32") /* ty=Tensor[(16, 9, 3), float32] */;
  %221 = acosh(%220) /* ty=Tensor[(16, 9, 3), float32] */;
  (%221,)
}

def @func_490(%var_475: Tensor[(16, 1), float64]) -> Tensor[(16, 1), float64] {
  %222 = cast(%var_475, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
  acos(%222) /* ty=Tensor[(16, 1), float64] */
}

def @func_6804(%var_6786: Tensor[(8, 182), float32]) -> (Tensor[(3, 11, 13), float32], Tensor[(13, 14, 8), float32], Tensor[(8, 182), float32]) {
  %223 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %224 = cast(%var_6786, dtype="float32") /* ty=Tensor[(8, 182), float32] */;
  %225 = reshape(%224, newshape=[13, 14, 8]) /* ty=Tensor[(13, 14, 8), float32] */;
  %226 = cos(%223) /* ty=Tensor[(3, 11, 13), float32] */;
  %227 = @func_693(%225) /* ty=Tensor[(13, 14, 8), float32] */;
  (%226, %227, %var_6786)
}

def @func_9238() -> (Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) {
  %228 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %229 = cast(meta[relay.Constant][18] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %230 = cast(meta[relay.Constant][18] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %231 = reshape(%229, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int8] */;
  %232 = reshape(%230, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int8] */;
  %233 = %228.2;
  %234 = @func_3935(%231, %232) /* ty=Tensor[(10, 3, 4), int8] */;
  (%233, %234, meta[relay.Constant][18] /* ty=Tensor[(30, 4), int8] */)
}

def @func_8731(%var_8663: Tensor[(6, 1, 1), float32], %var_8664: Tensor[(6, 1, 15), float32], %var_8669: Tensor[(308), int16]) -> (Tensor[(11, 14, 2), bool], Tensor[(1, 1, 10), bool], Tensor[(864), int16], Tensor[(6, ?, 15), float32], Tensor[(308), float32]) {
  %235 = cast(%var_8669, dtype="int16") /* ty=Tensor[(308), int16] */;
  %236 = reshape(%235, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), int16] */;
  %237 = @func_5886(%236) /* ty=(Tensor[(11, 14, 2), bool],) */;
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %239 = reshape(%238, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
  %240 = @func_3603(%239) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
  %241 = cast(%var_8663, dtype="float32") /* ty=Tensor[(6, 1, 1), float32] */;
  %242 = cast(%var_8664, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
  %243 = add(%241, %242) /* ty=Tensor[(6, 1, 15), float32] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
  %245 = sigmoid(%244) /* ty=Tensor[(6, 1, 15), float32] */;
  %246 = cast(%var_8664, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %247 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%243, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = logical_and(%248, %249) /* ty=Tensor[(6, ?, 15), bool] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(6, ?, 15), float32] */;
  %252 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%245, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %255 = cast(%var_8669, dtype="float32") /* ty=Tensor[(308), float32] */;
  %256 = sinh(%255) /* ty=Tensor[(308), float32] */;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(308), float32] */;
  %258 = %237.0;
  %259 = %240.1;
  %260 = divide(%253, %254) /* ty=Tensor[(6, ?, 15), float32] */;
  %261 = log10(%257) /* ty=Tensor[(308), float32] */;
  (%258, %259, meta[relay.Constant][19] /* ty=Tensor[(864), int16] */, %260, %261)
}

def @func_596(%var_574: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) {
  %262 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %263 = sqrt(%262) /* ty=Tensor[(15, 16, 8), float64] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %265 = atan(%264) /* ty=Tensor[(15, 16, 8), float64] */;
  %266 = cast(%var_574, dtype="uint32") /* ty=Tensor[(15, 16, 8), uint32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="uint32") /* ty=Tensor[(15, 16, 8), uint32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %270 = cast(%var_574, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %271 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%263, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = minimum(%268, %269) /* ty=Tensor[(15, 16, 8), uint32] */;
  %275 = greater(%272, %273) /* ty=Tensor[(15, 16, 8), bool] */;
  (%274, %275)
}

def @func_6475(%var_6436: Tensor[(16, 10, 13), bool], %var_6437: Tensor[(16, 10, 13), bool], %var_6453: Tensor[(1, 660), int16]) -> (Tensor[(16, 10, 13), bool], Tensor[(48), float32], int16, Tensor[(1, 660), int16], Tensor[(48), float32], Tensor[(14, 9, 16), float64], Tensor[(2016), float64]) {
  %276 = cast(%var_6437, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %277 = shape_of(%var_6436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_6436, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %281 = cast(%var_6453, dtype="int16") /* ty=Tensor[(1, 660), int16] */;
  %282 = cast(meta[relay.Constant][22] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %283 = reshape(%280, newshape=[]) /* ty=int16 */;
  %284 = reshape(%281, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), int16] */;
  %285 = reshape(%282, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %286 = @func_5089(%283, %284, %285) /* ty=(Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) */;
  %287 = cast(meta[relay.Constant][23] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %288 = reshape(%287, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %289 = logical_or(%278, %279) /* ty=Tensor[(16, 10, 13), bool] */;
  %290 = %286.2;
  %291 = @func_919(%288) /* ty=Tensor[(14, 9, 16), float64] */;
  (%289, %290, meta[relay.Constant][21] /* ty=int16 */, %var_6453, meta[relay.Constant][22] /* ty=Tensor[(48), float32] */, %291, meta[relay.Constant][23] /* ty=Tensor[(2016), float64] */)
}

def @func_6835(%var_6825: float64, %var_6826: Tensor[(1, 5, 1), float64]) -> Tensor[(1, 5, 1), float64] {
  %292 = cast(%var_6825, dtype="float64") /* ty=float64 */;
  %293 = cast(%var_6826, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  floor_mod(%292, %293) /* ty=Tensor[(1, 5, 1), float64] */
}

def @func_919(%var_904: Tensor[(14, 9, 16), float64]) -> Tensor[(14, 9, 16), float64] {
  %294 = cast(%var_904, dtype="float64") /* ty=Tensor[(14, 9, 16), float64] */;
  cosh(%294) /* ty=Tensor[(14, 9, 16), float64] */
}

def @func_420(%var_403: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64],) {
  %295 = cast(%var_403, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %296 = acos(%295) /* ty=Tensor[(4, 14, 5), float64] */;
  (%296,)
}

def @func_1399(%var_1388: Tensor[(9, 15, 12), float64]) -> (Tensor[(9, 15, 12), float64],) {
  %297 = cast(%var_1388, dtype="float64") /* ty=Tensor[(9, 15, 12), float64] */;
  %298 = cos(%297) /* ty=Tensor[(9, 15, 12), float64] */;
  (%298,)
}

def @func_8432(%var_8425: Tensor[(3, 3, 5), int64], %var_8426: Tensor[(3, 3, 5), int64]) -> (Tensor[(3, 3, 5), bool],) {
  %299 = cast(%var_8426, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %300 = shape_of(%var_8425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_8425, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %303 = greater(%301, %302) /* ty=Tensor[(3, 3, 5), bool] */;
  (%303,)
}

def @func_7850(%var_7829: Tensor[(4, 8, 10), uint32], %var_7830: Tensor[(4, 8, 10), uint32], %var_7835: Tensor[(2184), float32]) -> (Tensor[(4, 8, 10), bool], Tensor[(16, 1), float64], Tensor[(2184), float32], Tensor[(12, ?, 13), bool], Tensor[(156), float32]) {
  %304 = cast(%var_7830, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %305 = shape_of(%var_7829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_7829, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = cast(%var_7835, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %309 = reshape(%308, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float32] */;
  %310 = @func_5226(%309) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) */;
  %311 = cast(meta[relay.Constant][24] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %312 = reshape(%311, newshape=[12, 1, 13]) /* ty=Tensor[(12, 1, 13), float32] */;
  %313 = greater(%306, %307) /* ty=Tensor[(4, 8, 10), bool] */;
  %314 = %310.1;
  %315 = @func_7478(%312) /* ty=Tensor[(12, ?, 13), bool] */;
  (%313, %314, %var_7835, %315, meta[relay.Constant][24] /* ty=Tensor[(156), float32] */)
}

def @func_3976(%var_3966: Tensor[(15, 13, 1), float64], %var_3967: Tensor[(15, 13, 2), float64]) -> Tensor[(15, 13, 2), float64] {
  %316 = cast(%var_3966, dtype="float64") /* ty=Tensor[(15, 13, 1), float64] */;
  %317 = cast(%var_3967, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
  power(%316, %317) /* ty=Tensor[(15, 13, 2), float64] */
}

def @func_5425(%var_5389: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float32], Tensor[(15, 16, 8), uint32], Tensor[(1920), float64]) {
  %318 = cast(%var_5389, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
  %319 = acos(%318) /* ty=Tensor[(9, 15, 6), float64] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(9, 15, 6), float32] */;
  %321 = cast(meta[relay.Constant][25] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %322 = reshape(%321, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %323 = @func_596(%322) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
  %324 = erf(%320) /* ty=Tensor[(9, 15, 6), float32] */;
  %325 = %323.0;
  (%324, %325, meta[relay.Constant][25] /* ty=Tensor[(1920), float64] */)
}

def @func_9106(%var_9034: Tensor[(195), float64], %var_9040: Tensor[(45), int64], %var_9050: Tensor[(720), float64], %var_9069: Tensor[(15, 13, 2), float64], %var_9082: Tensor[(2016), float64]) -> (Tensor[(12, 5, 6), uint64], Tensor[(195), float64], Tensor[(390), float64], Tensor[(45), int64], Tensor[(15, 6, 8), float64], Tensor[(720), float64], Tensor[(15, 13, 2), uint16], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(3, 3, 5), int8]) {
  %326 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %327 = cast(%var_9050, dtype="float64") /* ty=Tensor[(720), float64] */;
  %328 = cast(%var_9050, dtype="float64") /* ty=Tensor[(720), float64] */;
  %329 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %330 = reshape(%327, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), float64] */;
  %331 = reshape(%328, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), float64] */;
  %332 = reshape(%329, newshape=[]) /* ty=bool */;
  %333 = @func_335(%330, %331, %332) /* ty=(Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) */;
  %334 = cast(%var_9034, dtype="float64") /* ty=Tensor[(195), float64] */;
  %335 = cast(meta[relay.Constant][26] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %336 = reshape(%334, newshape=[15, 13, 1]) /* ty=Tensor[(15, 13, 1), float64] */;
  %337 = reshape(%335, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), float64] */;
  %338 = @func_3976(%336, %337) /* ty=Tensor[(15, 13, 2), float64] */;
  %339 = cast(%var_9069, dtype="uint16") /* ty=Tensor[(15, 13, 2), uint16] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="uint16") /* ty=Tensor[(15, 13, 2), uint16] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %343 = cast(%var_9082, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %344 = reshape(%343, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %345 = cast(%var_9040, dtype="int64") /* ty=Tensor[(45), int64] */;
  %346 = cast(%var_9040, dtype="int64") /* ty=Tensor[(45), int64] */;
  %347 = reshape(%345, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), int64] */;
  %348 = reshape(%346, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), int64] */;
  %349 = @func_8432(%347, %348) /* ty=(Tensor[(3, 3, 5), bool],) */;
  %350 = %349.0;
  %351 = cast(%350, dtype="int8") /* ty=Tensor[(3, 3, 5), int8] */;
  %352 = cast(False /* ty=bool */, dtype="int8") /* ty=int8 */;
  %353 = %326.1;
  %354 = %333.0;
  %355 = multiply(%341, %342) /* ty=Tensor[(15, 13, 2), uint16] */;
  %356 = @func_919(%344) /* ty=Tensor[(14, 9, 16), float64] */;
  %357 = bitwise_or(%351, %352) /* ty=Tensor[(3, 3, 5), int8] */;
  (%353, %var_9034, meta[relay.Constant][26] /* ty=Tensor[(390), float64] */, %var_9040, %354, %var_9050, %355, %356, %var_9082, %357)
}

def @func_3267(%var_3248: Tensor[(6, 2, 6), int64], %var_3249: Tensor[(6, 2, 6), int64]) -> (Tensor[(6, 2, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(4, 14, 5), float64], Tensor[(140, 2), float64]) {
  %358 = cast(%var_3249, dtype="bool") /* ty=Tensor[(6, 2, 6), bool] */;
  %359 = shape_of(%var_3248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_3248, dtype="bool") /* ty=Tensor[(6, 2, 6), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(meta[relay.Constant][27] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %363 = reshape(%362, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %364 = cast(meta[relay.Constant][28] /* ty=Tensor[(140, 2), float64] */, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %365 = reshape(%364, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %366 = @func_420(%365) /* ty=(Tensor[(4, 14, 5), float64],) */;
  %367 = equal(%360, %361) /* ty=Tensor[(6, 2, 6), bool] */;
  %368 = @func_919(%363) /* ty=Tensor[(14, 9, 16), float64] */;
  %369 = %366.0;
  (%367, %368, meta[relay.Constant][27] /* ty=Tensor[(2016), float64] */, %369, meta[relay.Constant][28] /* ty=Tensor[(140, 2), float64] */)
}

def @func_8418(%var_8406: Tensor[(4, 12, 10), int64]) -> (Tensor[(4, 12, 10), int64],) {
  %370 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 12, 1), int64] */, dtype="int64") /* ty=Tensor[(1, 12, 1), int64] */;
  %371 = cast(%var_8406, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
  %372 = subtract(%370, %371) /* ty=Tensor[(4, 12, 10), int64] */;
  (%372,)
}

def @func_335(%var_314: Tensor[(15, 6, 8), float64], %var_315: Tensor[(15, 6, 8), float64], %var_329: bool) -> (Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) {
  %373 = cast(%var_315, dtype="float64") /* ty=Tensor[(15, 6, 8), float64] */;
  %374 = shape_of(%var_314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_314, dtype="float64") /* ty=Tensor[(15, 6, 8), float64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %377 = cast(%var_329, dtype="bool") /* ty=bool */;
  %378 = reshape(%377, newshape=[]) /* ty=bool */;
  %379 = @func_148(%378) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %380 = floor_mod(%375, %376) /* ty=Tensor[(15, 6, 8), float64] */;
  %381 = %379.0;
  (%380, %381, %var_329)
}

def @func_5588(%var_5568: Tensor[(15, 11, 9), float64]) -> (Tensor[(15, 11, 9), float64],) {
  %382 = cast(%var_5568, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %383 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %386 = floor_mod(%384, %385) /* ty=Tensor[(15, 11, 9), float64] */;
  (%386,)
}

def @func_8058(%var_8013: Tensor[(9, 1, 6), float32], %var_8052: Tensor[(48), float32]) -> (Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) {
  %387 = cast(%var_8013, dtype="float32") /* ty=Tensor[(9, 1, 6), float32] */;
  %388 = sqrt(%387) /* ty=Tensor[(9, 1, 6), float32] */;
  %389 = cast(%var_8013, dtype="bool") /* ty=Tensor[(9, 1, 6), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(9, 1, 6), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = cast(meta[relay.Constant][31] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %394 = reshape(%393, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %395 = cast(%var_8052, dtype="float32") /* ty=Tensor[(48), float32] */;
  %396 = reshape(%395, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %397 = @func_3436(%396) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
  %398 = cast(%388, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
  %399 = exp(%398) /* ty=Tensor[(9, 1, 6), float64] */;
  %400 = cast(%388, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %404 = less_equal(%391, %392) /* ty=Tensor[(9, ?, 6), bool] */;
  %405 = @func_919(%394) /* ty=Tensor[(14, 9, 16), float64] */;
  %406 = %397.2;
  %407 = divide(%402, %403) /* ty=Tensor[(9, ?, 6), float64] */;
  (%404, %405, meta[relay.Constant][31] /* ty=Tensor[(2016), float64] */, %406, %var_8052, %407)
}

def @func_9261(%var_9244: Tensor[(864), int16], %var_9246: Tensor[(864), int16], %var_9257: Tensor[(54, 1), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 6, 12), bool], Tensor[(864), bool], Tensor[(48), float32], Tensor[(54, 1), float32], Tensor[(1, 48), float32]) {
  %408 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %409 = cast(%var_9244, dtype="int16") /* ty=Tensor[(864), int16] */;
  %410 = reshape(%409, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
  %411 = @func_3603(%410) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
  %412 = cast(%var_9246, dtype="bool") /* ty=Tensor[(864), bool] */;
  %413 = shape_of(%var_9244, dtype="int32") /* ty=Tensor[(1), int32] */;
  %414 = cast(%var_9244, dtype="bool") /* ty=Tensor[(864), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?), bool] */;
  %416 = cast(%var_9257, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %417 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 48), float32] */, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %418 = reshape(%416, newshape=[9, 1, 6]) /* ty=Tensor[(9, 1, 6), float32] */;
  %419 = reshape(%417, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %420 = @func_8058(%418, %419) /* ty=(Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) */;
  %421 = %408.0;
  %422 = %411.0;
  %423 = greater_equal(%414, %415) /* ty=Tensor[(864), bool] */;
  %424 = %420.4;
  (%421, %422, %423, %424, %var_9257, meta[relay.Constant][32] /* ty=Tensor[(1, 48), float32] */)
}

def @func_7478(%var_7458: Tensor[(12, 1, 13), float32]) -> Tensor[(12, ?, 13), bool] {
  %425 = cast(%var_7458, dtype="float32") /* ty=Tensor[(12, 1, 13), float32] */;
  %426 = cos(%425) /* ty=Tensor[(12, 1, 13), float32] */;
  %427 = cast(%var_7458, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%429, %430) /* ty=Tensor[(12, ?, 13), bool] */
}

def @main(%var_9331: Tensor[(12, 5, 6), uint64]) -> Tensor[(12, 5, 6), uint16] {
  %431 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %432 = %431.1;
  %433 = cast(%var_9331, dtype="uint16") /* ty=Tensor[(12, 5, 6), uint16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint16") /* ty=Tensor[(12, 5, 6), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%435, %436) /* ty=Tensor[(12, 5, 6), uint16] */
}

def @func_3038(%var_2972: Tensor[(3, 15, 5), float64]) -> (Tensor[(3, 15, 5), uint32], Tensor[(3, 15, 5), float64], Tensor[(3, 15, 5), float64]) {
  %437 = cast(%var_2972, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %438 = acosh(%437) /* ty=Tensor[(3, 15, 5), float64] */;
  %439 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 15, 5), float64] */, dtype="uint32") /* ty=Tensor[(3, 15, 5), uint32] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="uint32") /* ty=Tensor[(3, 15, 5), uint32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %443 = cast(%var_2972, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %444 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 15, 5), float64] */, dtype="int8") /* ty=Tensor[(3, 15, 5), int8] */;
  %445 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%438, dtype="int8") /* ty=Tensor[(3, 15, 5), int8] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %448 = bitwise_xor(%446, %447) /* ty=Tensor[(3, 15, 5), int8] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %450 = cosh(%449) /* ty=Tensor[(3, 15, 5), float64] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %452 = subtract(%441, %442) /* ty=Tensor[(3, 15, 5), uint32] */;
  %453 = cos(%443) /* ty=Tensor[(3, 15, 5), float64] */;
  %454 = exp(%451) /* ty=Tensor[(3, 15, 5), float64] */;
  (%452, %453, %454)
}

def @func_8849(%var_8823: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), float32] {
  %455 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %458 = atan(%457) /* ty=Tensor[(7, 4, 9), float32] */;
  %459 = cast(%var_8823, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%461, %462) /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_9192(%var_9158: Tensor[(4, 6, 12), int16], %var_9159: Tensor[(4, 6, 12), int16], %var_9175: Tensor[(2, 432), int16]) -> (Tensor[(4, 6, 12), int8], Tensor[(12, 6, 12), bool]) {
  %463 = cast(%var_9159, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
  %464 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_9158, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = less_equal(%465, %466) /* ty=Tensor[(4, 6, 12), bool] */;
  %468 = cast(%467, dtype="int8") /* ty=Tensor[(4, 6, 12), int8] */;
  %469 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_9158, dtype="int8") /* ty=Tensor[(4, 6, 12), int8] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %472 = cast(%var_9175, dtype="int16") /* ty=Tensor[(2, 432), int16] */;
  %473 = reshape(%472, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
  %474 = @func_3603(%473) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
  %475 = %474.0;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(12, 6, 12), float32] */;
  %477 = rsqrt(%476) /* ty=Tensor[(12, 6, 12), float32] */;
  %478 = cast(%var_9175, dtype="bool") /* ty=Tensor[(2, 432), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = add(%470, %471) /* ty=Tensor[(4, 6, 12), int8] */;
  %483 = not_equal(%480, %481) /* ty=Tensor[(12, 6, 12), bool] */;
  (%482, %483)
}

def @func_6310(%var_6283: Tensor[(3, 16, 10), bool], %var_6284: Tensor[(3, 16, 10), bool], %var_6306: int16, %var_6308: Tensor[(280), float64]) -> (Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) {
  %484 = cast(%var_6284, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %485 = shape_of(%var_6283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_6283, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = logical_and(%486, %487) /* ty=Tensor[(3, 16, 10), bool] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %490 = cast(%var_6306, dtype="int16") /* ty=int16 */;
  %491 = cast(meta[relay.Constant][34] /* ty=Tensor[(1620), int16] */, dtype="int16") /* ty=Tensor[(1620), int16] */;
  %492 = cast(%var_6308, dtype="float64") /* ty=Tensor[(280), float64] */;
  %493 = reshape(%490, newshape=[]) /* ty=int16 */;
  %494 = reshape(%491, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), int16] */;
  %495 = reshape(%492, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %496 = @func_3773(%493, %494, %495) /* ty=(Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) */;
  %497 = sin(%489) /* ty=Tensor[(3, 16, 10), float32] */;
  %498 = %496.4;
  (%497, %498, %var_6306, meta[relay.Constant][34] /* ty=Tensor[(1620), int16] */, %var_6308)
}

def @func_5886(%var_5880: Tensor[(11, 14, 2), int16]) -> (Tensor[(11, 14, 2), bool],) {
  %499 = cast(%var_5880, dtype="bool") /* ty=Tensor[(11, 14, 2), bool] */;
  %500 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(11, 14, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 14, 2), int16] */, dtype="bool") /* ty=Tensor[(11, 14, 2), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = less_equal(%501, %502) /* ty=Tensor[(11, 14, 2), bool] */;
  (%503,)
}

def @func_5089(%var_5074: int16, %var_5075: Tensor[(12, 11, 5), int16], %var_5080: Tensor[(48), float32]) -> (Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) {
  %504 = cast(%var_5074, dtype="int16") /* ty=int16 */;
  %505 = cast(%var_5075, dtype="int16") /* ty=Tensor[(12, 11, 5), int16] */;
  %506 = cast(%var_5080, dtype="float32") /* ty=Tensor[(48), float32] */;
  %507 = reshape(%506, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %508 = @func_3436(%507) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
  %509 = cast(%var_5074, dtype="bool") /* ty=bool */;
  %510 = reshape(%509, newshape=[]) /* ty=bool */;
  %511 = @func_148(%510) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %512 = bitwise_and(%504, %505) /* ty=Tensor[(12, 11, 5), int16] */;
  %513 = %508.1;
  %514 = %511.0;
  (%512, %513, %var_5080, %514)
}

def @func_5621(%var_5616: uint32, %var_5617: Tensor[(1, 14, 2), uint32]) -> Tensor[(1, 14, 2), uint32] {
  %515 = cast(%var_5616, dtype="uint32") /* ty=uint32 */;
  %516 = cast(%var_5617, dtype="uint32") /* ty=Tensor[(1, 14, 2), uint32] */;
  bitwise_xor(%515, %516) /* ty=Tensor[(1, 14, 2), uint32] */
}

def @func_1909(%var_1888: int8, %var_1889: Tensor[(14, 3, 16), int8]) -> (Tensor[(14, 3, 16), float32],) {
  %517 = cast(%var_1888, dtype="int8") /* ty=int8 */;
  %518 = cast(%var_1889, dtype="int8") /* ty=Tensor[(14, 3, 16), int8] */;
  %519 = maximum(%517, %518) /* ty=Tensor[(14, 3, 16), int8] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(14, 3, 16), float32] */;
  %521 = cast(%var_1888, dtype="float32") /* ty=float32 */;
  %522 = power(%520, %521) /* ty=Tensor[(14, 3, 16), float32] */;
  (%522,)
}

def @func_693(%var_690: Tensor[(13, 14, 8), float32]) -> Tensor[(13, 14, 8), float32] {
  %523 = cast(%var_690, dtype="float32") /* ty=Tensor[(13, 14, 8), float32] */;
  log10(%523) /* ty=Tensor[(13, 14, 8), float32] */
}

def @func_5654(%var_5636: Tensor[(5, 3, 8), float64], %var_5640: Tensor[(5, 3, 8), float64], %var_5652: Tensor[(2184), float32]) -> (Tensor[(5, 3, 8), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(14, 12, 13), float64], Tensor[(2184), float32]) {
  %524 = cast(%var_5636, dtype="float64") /* ty=Tensor[(5, 3, 8), float64] */;
  %525 = atanh(%524) /* ty=Tensor[(5, 3, 8), float64] */;
  %526 = cast(%var_5640, dtype="int16") /* ty=Tensor[(5, 3, 8), int16] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="int16") /* ty=Tensor[(5, 3, 8), int16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %530 = cast(meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %531 = reshape(%530, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float32] */;
  %532 = @func_2744(%531) /* ty=(Tensor[(2, 8, 3), float32],) */;
  %533 = cast(%var_5652, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %534 = reshape(%533, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float32] */;
  %535 = @func_5226(%534) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) */;
  %536 = add(%528, %529) /* ty=Tensor[(5, 3, 8), int16] */;
  %537 = %532.0;
  %538 = %535.0;
  (%536, %537, meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, %538, %var_5652)
}

def @func_6025(%var_5968: Tensor[(3, 10, 16), uint8], %var_5969: Tensor[(3, 10, 16), uint8], %var_6002: Tensor[(28), uint32], %var_6008: Tensor[(2100), float32], %var_6015: Tensor[(1920), float64], %var_6018: Tensor[(48, 1), float64]) -> (Tensor[(3, 10, 16), float32], Tensor[(3, 10, 16), float32], Tensor[(1, 14, 2), uint32], uint32, Tensor[(28), uint32], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1920), float64], Tensor[(1280), float32], Tensor[(1920), float64], Tensor[(3, 1, 16), float64], Tensor[(48, 1), float64], Tensor[(13, 14, 8), float32], Tensor[(1456), float32]) {
  %539 = cast(%var_5969, dtype="uint8") /* ty=Tensor[(3, 10, 16), uint8] */;
  %540 = shape_of(%var_5968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_5968, dtype="uint8") /* ty=Tensor[(3, 10, 16), uint8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %543 = left_shift(%541, %542) /* ty=Tensor[(3, 10, 16), uint8] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %545 = acos(%544) /* ty=Tensor[(3, 10, 16), float64] */;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %547 = cast(%545, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %548 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %549 = cast(%var_6002, dtype="uint32") /* ty=Tensor[(28), uint32] */;
  %550 = reshape(%548, newshape=[]) /* ty=uint32 */;
  %551 = reshape(%549, newshape=[1, 14, 2]) /* ty=Tensor[(1, 14, 2), uint32] */;
  %552 = cast(%var_6008, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %553 = reshape(%552, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %554 = cast(meta[relay.Constant][38] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %555 = cast(%var_6015, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %556 = reshape(%554, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %557 = reshape(%555, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %558 = @func_2455(%556, %557) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %559 = cast(%var_6018, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %560 = reshape(%559, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %561 = cast(meta[relay.Constant][39] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %562 = reshape(%561, newshape=[13, 14, 8]) /* ty=Tensor[(13, 14, 8), float32] */;
  %563 = atan(%546) /* ty=Tensor[(3, 10, 16), float32] */;
  %564 = log(%547) /* ty=Tensor[(3, 10, 16), float32] */;
  %565 = @func_5621(%550, %551) /* ty=Tensor[(1, 14, 2), uint32] */;
  %566 = @func_5551(%553) /* ty=Tensor[(15, 10, 14), float32] */;
  %567 = %558.2;
  %568 = @func_2677(%560) /* ty=Tensor[(3, 1, 16), float64] */;
  %569 = @func_693(%562) /* ty=Tensor[(13, 14, 8), float32] */;
  (%563, %564, %565, meta[relay.Constant][37] /* ty=uint32 */, %var_6002, %566, %var_6008, %567, meta[relay.Constant][38] /* ty=Tensor[(1280), float32] */, %var_6015, %568, %var_6018, %569, meta[relay.Constant][39] /* ty=Tensor[(1456), float32] */)
}

def @func_148(%var_125: bool) -> (Tensor[(1, 1, 10), bool],) {
  %570 = cast(%var_125, dtype="bool") /* ty=bool */;
  %571 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1, 10), bool] */, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
  %572 = logical_or(%570, %571) /* ty=Tensor[(1, 1, 10), bool] */;
  (%572,)
}

def @func_1024(%var_984: Tensor[(4, 5, 10), float32]) -> (Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) {
  %573 = cast(%var_984, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %574 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(4, 5, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %577 = floor_divide(%575, %576) /* ty=Tensor[(4, 5, 10), float32] */;
  %578 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 5, 10), float32] */, dtype="uint16") /* ty=Tensor[(4, 5, 10), uint16] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(4, 5, 10), uint16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %582 = cast(meta[relay.Constant][42] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %583 = cast(meta[relay.Constant][42] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %584 = reshape(%582, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), float64] */;
  %585 = reshape(%583, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), float64] */;
  %586 = @func_529(%584, %585) /* ty=(Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) */;
  %587 = add(%580, %581) /* ty=Tensor[(4, 5, 10), uint16] */;
  %588 = %586.1;
  (%587, %588, meta[relay.Constant][42] /* ty=Tensor[(1248), float64] */)
}

def @func_5551(%var_5544: Tensor[(15, 10, 14), float32]) -> Tensor[(15, 10, 14), float32] {
  %589 = cast(%var_5544, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  sigmoid(%589) /* ty=Tensor[(15, 10, 14), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6310(%var_6283: Tensor[(3, 16, 10), bool], %var_6284: Tensor[(3, 16, 10), bool], %var_6306: int16, %var_6308: Tensor[(280), float64]) -> (Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) {
  %0 = cast(%var_6284, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %1 = shape_of(%var_6283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6283, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = logical_and(%2, %3) /* ty=Tensor[(3, 16, 10), bool] */;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %6 = cast(%var_6306, dtype="int16") /* ty=int16 */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1620), int16] */, dtype="int16") /* ty=Tensor[(1620), int16] */;
  %8 = cast(%var_6308, dtype="float64") /* ty=Tensor[(280), float64] */;
  %9 = reshape(%6, newshape=[]) /* ty=int16 */;
  %10 = reshape(%7, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), int16] */;
  %11 = reshape(%8, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %12 = @func_3773(%9, %10, %11) /* ty=(Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) */;
  %13 = sin(%5) /* ty=Tensor[(3, 16, 10), float32] */;
  %14 = %12.4;
  (%13, %14, %var_6306, meta[relay.Constant][0] /* ty=Tensor[(1620), int16] */, %var_6308)
}

def @func_8798() -> (Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) {
  %22 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) {
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 180), uint64] */, dtype="uint64") /* ty=Tensor[(2, 180), uint64] */;
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 180), uint64] */, dtype="uint64") /* ty=Tensor[(2, 180), uint64] */;
    %18 = reshape(%16, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), uint64] */;
    %19 = reshape(%17, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), uint64] */;
    %20 = log(%15) /* ty=Tensor[(7, 4, 9), float64] */;
    %21 = @func_8472(%18, %19) /* ty=Tensor[(12, 5, 6), uint64] */;
    (%20, %21, meta[relay.Constant][2] /* ty=Tensor[(2, 180), uint64] */)
  };
  %22() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */
}

def @func_7480(%var_7479: Tensor[(12, 1, 13), float32]) -> Tensor[(12, ?, 13), bool] {
  %29 = fn (%var_7458: Tensor[(12, 1, 13), float32]) -> Tensor[(12, ?, 13), bool] {
    %23 = cast(%var_7458, dtype="float32") /* ty=Tensor[(12, 1, 13), float32] */;
    %24 = cos(%23) /* ty=Tensor[(12, 1, 13), float32] */;
    %25 = cast(%var_7458, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
    %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%24, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%27, %28) /* ty=Tensor[(12, ?, 13), bool] */
  };
  %29(%var_7479) /* ty=Tensor[(12, ?, 13), bool] */
}

def @func_2459(%var_2457: Tensor[(5, 16, 16), float32], %var_2458: Tensor[(1920), float64]) -> (Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) {
  @func_2455(%var_2457, %var_2458) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */
}

def @func_3979(%var_3977: Tensor[(15, 13, 1), float64], %var_3978: Tensor[(15, 13, 2), float64]) -> Tensor[(15, 13, 2), float64] {
  %32 = fn (%var_3966: Tensor[(15, 13, 1), float64], %var_3967: Tensor[(15, 13, 2), float64]) -> Tensor[(15, 13, 2), float64] {
    %30 = cast(%var_3966, dtype="float64") /* ty=Tensor[(15, 13, 1), float64] */;
    %31 = cast(%var_3967, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
    power(%30, %31) /* ty=Tensor[(15, 13, 2), float64] */
  };
  %32(%var_3977, %var_3978) /* ty=Tensor[(15, 13, 2), float64] */
}

def @func_8421(%var_8419: Tensor[(4, 12, 10), int64]) -> (Tensor[(4, 12, 10), int64],) {
  @func_8418(%var_8419) /* ty=(Tensor[(4, 12, 10), int64],) */
}

def @func_8475(%var_8473: Tensor[(12, 5, 6), uint64], %var_8474: Tensor[(12, 5, 6), uint64]) -> Tensor[(12, 5, 6), uint64] {
  %42 = fn (%var_8453: Tensor[(12, 5, 6), uint64], %var_8454: Tensor[(12, 5, 6), uint64]) -> Tensor[(12, 5, 6), uint64] {
    %33 = cast(%var_8454, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
    %34 = shape_of(%var_8453, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%var_8453, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %37 = right_shift(%35, %36) /* ty=Tensor[(12, 5, 6), uint64] */;
    %38 = cast(%var_8453, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
    %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%37, dtype="uint64") /* ty=Tensor[(12, 5, 6), uint64] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%40, %41) /* ty=Tensor[(12, 5, 6), uint64] */
  };
  %42(%var_8473, %var_8474) /* ty=Tensor[(12, 5, 6), uint64] */
}

def @func_763(%var_717: Tensor[(16, 4, 5), float64], %var_718: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), uint16], Tensor[(16, 4, 5), float64]) {
  %43 = cast(%var_718, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %44 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_717, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = divide(%45, %46) /* ty=Tensor[(16, 4, 5), float64] */;
  %48 = cast(%var_717, dtype="uint16") /* ty=Tensor[(16, 4, 5), uint16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="uint16") /* ty=Tensor[(16, 4, 5), uint16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %52 = cast(%var_718, dtype="float64") /* ty=Tensor[(16, 4, 5), float64] */;
  %53 = bitwise_xor(%50, %51) /* ty=Tensor[(16, 4, 5), uint16] */;
  %54 = cos(%52) /* ty=Tensor[(16, 4, 5), float64] */;
  (%53, %54)
}

def @func_1913(%var_1911: int8, %var_1912: Tensor[(14, 3, 16), int8]) -> (Tensor[(14, 3, 16), float32],) {
  @func_1909(%var_1911, %var_1912) /* ty=(Tensor[(14, 3, 16), float32],) */
}

def @func_5590(%var_5589: Tensor[(15, 11, 9), float64]) -> (Tensor[(15, 11, 9), float64],) {
  %60 = fn (%var_5568: Tensor[(15, 11, 9), float64]) -> (Tensor[(15, 11, 9), float64],) {
    %55 = cast(%var_5568, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
    %56 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %59 = floor_mod(%57, %58) /* ty=Tensor[(15, 11, 9), float64] */;
    (%59,)
  };
  %60(%var_5589) /* ty=(Tensor[(15, 11, 9), float64],) */
}

def @func_1026(%var_1025: Tensor[(4, 5, 10), float32]) -> (Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) {
  %77 = fn (%var_984: Tensor[(4, 5, 10), float32]) -> (Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) {
    %61 = cast(%var_984, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
    %62 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 5, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %65 = floor_divide(%63, %64) /* ty=Tensor[(4, 5, 10), float32] */;
    %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 5, 10), float32] */, dtype="uint16") /* ty=Tensor[(4, 5, 10), uint16] */;
    %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%65, dtype="uint16") /* ty=Tensor[(4, 5, 10), uint16] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %72 = reshape(%70, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), float64] */;
    %73 = reshape(%71, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), float64] */;
    %74 = @func_529(%72, %73) /* ty=(Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) */;
    %75 = add(%68, %69) /* ty=Tensor[(4, 5, 10), uint16] */;
    %76 = %74.1;
    (%75, %76, meta[relay.Constant][5] /* ty=Tensor[(1248), float64] */)
  };
  %77(%var_1025) /* ty=(Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) */
}

def @func_6025(%var_5968: Tensor[(3, 10, 16), uint8], %var_5969: Tensor[(3, 10, 16), uint8], %var_6002: Tensor[(28), uint32], %var_6008: Tensor[(2100), float32], %var_6015: Tensor[(1920), float64], %var_6018: Tensor[(48, 1), float64]) -> (Tensor[(3, 10, 16), float32], Tensor[(3, 10, 16), float32], Tensor[(1, 14, 2), uint32], uint32, Tensor[(28), uint32], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1920), float64], Tensor[(1280), float32], Tensor[(1920), float64], Tensor[(3, 1, 16), float64], Tensor[(48, 1), float64], Tensor[(13, 14, 8), float32], Tensor[(1456), float32]) {
  %78 = cast(%var_5969, dtype="uint8") /* ty=Tensor[(3, 10, 16), uint8] */;
  %79 = shape_of(%var_5968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_5968, dtype="uint8") /* ty=Tensor[(3, 10, 16), uint8] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %82 = left_shift(%80, %81) /* ty=Tensor[(3, 10, 16), uint8] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %84 = acos(%83) /* ty=Tensor[(3, 10, 16), float64] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %86 = cast(%84, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %87 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %88 = cast(%var_6002, dtype="uint32") /* ty=Tensor[(28), uint32] */;
  %89 = reshape(%87, newshape=[]) /* ty=uint32 */;
  %90 = reshape(%88, newshape=[1, 14, 2]) /* ty=Tensor[(1, 14, 2), uint32] */;
  %91 = cast(%var_6008, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %92 = reshape(%91, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %94 = cast(%var_6015, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %95 = reshape(%93, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %96 = reshape(%94, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %97 = @func_2455(%95, %96) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %98 = cast(%var_6018, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %99 = reshape(%98, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %100 = cast(meta[relay.Constant][8] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %101 = reshape(%100, newshape=[13, 14, 8]) /* ty=Tensor[(13, 14, 8), float32] */;
  %102 = atan(%85) /* ty=Tensor[(3, 10, 16), float32] */;
  %103 = log(%86) /* ty=Tensor[(3, 10, 16), float32] */;
  %104 = @func_5621(%89, %90) /* ty=Tensor[(1, 14, 2), uint32] */;
  %105 = @func_5551(%92) /* ty=Tensor[(15, 10, 14), float32] */;
  %106 = %97.2;
  %107 = @func_2677(%99) /* ty=Tensor[(3, 1, 16), float64] */;
  %108 = @func_693(%101) /* ty=Tensor[(13, 14, 8), float32] */;
  (%102, %103, %104, meta[relay.Constant][6] /* ty=uint32 */, %var_6002, %105, %var_6008, %106, meta[relay.Constant][7] /* ty=Tensor[(1280), float32] */, %var_6015, %107, %var_6018, %108, meta[relay.Constant][8] /* ty=Tensor[(1456), float32] */)
}

def @func_6674(%var_6648: Tensor[(12, 15, 15), int64], %var_6664: Tensor[(32, 40), float32], %var_6665: Tensor[(1920), float64]) -> (Tensor[(12, 15, 15), int64], Tensor[(1, 1, 10), bool], bool, Tensor[(5, 16, 16), float32], Tensor[(32, 40), float32], Tensor[(1920), float64]) {
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 15, 15), int64] */, dtype="int64") /* ty=Tensor[(1, 15, 15), int64] */;
  %110 = cast(%var_6648, dtype="int64") /* ty=Tensor[(12, 15, 15), int64] */;
  %111 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %112 = reshape(%111, newshape=[]) /* ty=bool */;
  %113 = @func_148(%112) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %114 = cast(%var_6664, dtype="float32") /* ty=Tensor[(32, 40), float32] */;
  %115 = cast(%var_6665, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %116 = reshape(%114, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %117 = reshape(%115, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %118 = @func_2455(%116, %117) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %119 = bitwise_or(%109, %110) /* ty=Tensor[(12, 15, 15), int64] */;
  %120 = %113.0;
  %121 = %118.0;
  (%119, %120, False /* ty=bool */, %121, %var_6664, %var_6665)
}

def @func_8780(%var_8778: Tensor[(7, 4, 7), int64], %var_8779: Tensor[(7, 4, 7), int64]) -> (Tensor[(7, 4, 7), float64],) {
  @func_8776(%var_8778, %var_8779) /* ty=(Tensor[(7, 4, 7), float64],) */
}

def @func_8735(%var_8732: Tensor[(6, 1, 1), float32], %var_8733: Tensor[(6, 1, 15), float32], %var_8734: Tensor[(308), int16]) -> (Tensor[(11, 14, 2), bool], Tensor[(1, 1, 10), bool], Tensor[(864), int16], Tensor[(6, ?, 15), float32], Tensor[(308), float32]) {
  %149 = fn (%var_8663: Tensor[(6, 1, 1), float32], %var_8664: Tensor[(6, 1, 15), float32], %var_8669: Tensor[(308), int16]) -> (Tensor[(11, 14, 2), bool], Tensor[(1, 1, 10), bool], Tensor[(864), int16], Tensor[(6, ?, 15), float32], Tensor[(308), float32]) {
    %122 = cast(%var_8669, dtype="int16") /* ty=Tensor[(308), int16] */;
    %123 = reshape(%122, newshape=[11, 14, 2]) /* ty=Tensor[(11, 14, 2), int16] */;
    %124 = @func_5886(%123) /* ty=(Tensor[(11, 14, 2), bool],) */;
    %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
    %126 = reshape(%125, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
    %127 = @func_3603(%126) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
    %128 = cast(%var_8663, dtype="float32") /* ty=Tensor[(6, 1, 1), float32] */;
    %129 = cast(%var_8664, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
    %130 = add(%128, %129) /* ty=Tensor[(6, 1, 15), float32] */;
    %131 = cast(%130, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
    %132 = sigmoid(%131) /* ty=Tensor[(6, 1, 15), float32] */;
    %133 = cast(%var_8664, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
    %134 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%130, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %137 = logical_and(%135, %136) /* ty=Tensor[(6, ?, 15), bool] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(6, ?, 15), float32] */;
    %139 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%132, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %142 = cast(%var_8669, dtype="float32") /* ty=Tensor[(308), float32] */;
    %143 = sinh(%142) /* ty=Tensor[(308), float32] */;
    %144 = cast(%143, dtype="float32") /* ty=Tensor[(308), float32] */;
    %145 = %124.0;
    %146 = %127.1;
    %147 = divide(%140, %141) /* ty=Tensor[(6, ?, 15), float32] */;
    %148 = log10(%144) /* ty=Tensor[(308), float32] */;
    (%145, %146, meta[relay.Constant][10] /* ty=Tensor[(864), int16] */, %147, %148)
  };
  %149(%var_8732, %var_8733, %var_8734) /* ty=(Tensor[(11, 14, 2), bool], Tensor[(1, 1, 10), bool], Tensor[(864), int16], Tensor[(6, ?, 15), float32], Tensor[(308), float32]) */
}

def @func_7406(%var_7404: Tensor[(16, 10), float64]) -> Tensor[(16, 10), float64] {
  @func_7403(%var_7404) /* ty=Tensor[(16, 10), float64] */
}

def @func_8851(%var_8850: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), float32] {
  %158 = fn (%var_8823: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), float32] {
    %150 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
    %151 = %150.0;
    %152 = cast(%151, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %153 = atan(%152) /* ty=Tensor[(7, 4, 9), float32] */;
    %154 = cast(%var_8823, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
    %156 = cast(%153, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    maximum(%156, %157) /* ty=Tensor[(7, 4, 9), float32] */
  };
  %158(%var_8850) /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_6480(%var_6477: Tensor[(16, 10, 13), bool], %var_6478: Tensor[(16, 10, 13), bool], %var_6479: Tensor[(1, 660), int16]) -> (Tensor[(16, 10, 13), bool], Tensor[(48), float32], int16, Tensor[(1, 660), int16], Tensor[(48), float32], Tensor[(14, 9, 16), float64], Tensor[(2016), float64]) {
  @func_6475(%var_6477, %var_6478, %var_6479) /* ty=(Tensor[(16, 10, 13), bool], Tensor[(48), float32], int16, Tensor[(1, 660), int16], Tensor[(48), float32], Tensor[(14, 9, 16), float64], Tensor[(2016), float64]) */
}

def @func_8418(%var_8406: Tensor[(4, 12, 10), int64]) -> (Tensor[(4, 12, 10), int64],) {
  %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 12, 1), int64] */, dtype="int64") /* ty=Tensor[(1, 12, 1), int64] */;
  %160 = cast(%var_8406, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
  %161 = subtract(%159, %160) /* ty=Tensor[(4, 12, 10), int64] */;
  (%161,)
}

def @func_919(%var_904: Tensor[(14, 9, 16), float64]) -> Tensor[(14, 9, 16), float64] {
  %162 = cast(%var_904, dtype="float64") /* ty=Tensor[(14, 9, 16), float64] */;
  cosh(%162) /* ty=Tensor[(14, 9, 16), float64] */
}

def @func_5226(%var_5210: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) {
  %163 = cast(%var_5210, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %164 = sin(%163) /* ty=Tensor[(14, 12, 13), float32] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %167 = reshape(%166, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %168 = erf(%165) /* ty=Tensor[(14, 12, 13), float64] */;
  %169 = @func_490(%167) /* ty=Tensor[(16, 1), float64] */;
  (%168, %169, meta[relay.Constant][12] /* ty=Tensor[(16), float64] */)
}

def @func_529(%var_499: Tensor[(16, 13, 6), float64], %var_504: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) {
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %171 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_499, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %174 = cast(%var_504, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %175 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(16, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 13, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = floor_mod(%172, %173) /* ty=Tensor[(16, 13, 6), float64] */;
  %179 = less(%176, %177) /* ty=Tensor[(16, 13, 6), bool] */;
  (%178, %179)
}

def @func_7653(%var_7651: uint16, %var_7652: Tensor[(12, 11, 8), uint16]) -> (Tensor[(12, 11, 8), uint16],) {
  %183 = fn (%var_7644: uint16, %var_7645: Tensor[(12, 11, 8), uint16]) -> (Tensor[(12, 11, 8), uint16],) {
    %180 = cast(%var_7644, dtype="uint16") /* ty=uint16 */;
    %181 = cast(%var_7645, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
    %182 = subtract(%180, %181) /* ty=Tensor[(12, 11, 8), uint16] */;
    (%182,)
  };
  %183(%var_7651, %var_7652) /* ty=(Tensor[(12, 11, 8), uint16],) */
}

def @func_9266(%var_9263: Tensor[(864), int16], %var_9264: Tensor[(864), int16], %var_9265: Tensor[(54, 1), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 6, 12), bool], Tensor[(864), bool], Tensor[(48), float32], Tensor[(54, 1), float32], Tensor[(1, 48), float32]) {
  @func_9261(%var_9263, %var_9264, %var_9265) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 6, 12), bool], Tensor[(864), bool], Tensor[(48), float32], Tensor[(54, 1), float32], Tensor[(1, 48), float32]) */
}

def @func_492(%var_491: Tensor[(16, 1), float64]) -> Tensor[(16, 1), float64] {
  %185 = fn (%var_475: Tensor[(16, 1), float64]) -> Tensor[(16, 1), float64] {
    %184 = cast(%var_475, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
    acos(%184) /* ty=Tensor[(16, 1), float64] */
  };
  %185(%var_491) /* ty=Tensor[(16, 1), float64] */
}

def @func_596(%var_574: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) {
  %186 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %187 = sqrt(%186) /* ty=Tensor[(15, 16, 8), float64] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %189 = atan(%188) /* ty=Tensor[(15, 16, 8), float64] */;
  %190 = cast(%var_574, dtype="uint32") /* ty=Tensor[(15, 16, 8), uint32] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="uint32") /* ty=Tensor[(15, 16, 8), uint32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %194 = cast(%var_574, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %195 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%187, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = minimum(%192, %193) /* ty=Tensor[(15, 16, 8), uint32] */;
  %199 = greater(%196, %197) /* ty=Tensor[(15, 16, 8), bool] */;
  (%198, %199)
}

def @func_339(%var_336: Tensor[(15, 6, 8), float64], %var_337: Tensor[(15, 6, 8), float64], %var_338: bool) -> (Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) {
  %209 = fn (%var_314: Tensor[(15, 6, 8), float64], %var_315: Tensor[(15, 6, 8), float64], %var_329: bool) -> (Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) {
    %200 = cast(%var_315, dtype="float64") /* ty=Tensor[(15, 6, 8), float64] */;
    %201 = shape_of(%var_314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%var_314, dtype="float64") /* ty=Tensor[(15, 6, 8), float64] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %204 = cast(%var_329, dtype="bool") /* ty=bool */;
    %205 = reshape(%204, newshape=[]) /* ty=bool */;
    %206 = @func_148(%205) /* ty=(Tensor[(1, 1, 10), bool],) */;
    %207 = floor_mod(%202, %203) /* ty=Tensor[(15, 6, 8), float64] */;
    %208 = %206.0;
    (%207, %208, %var_329)
  };
  %209(%var_336, %var_337, %var_338) /* ty=(Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) */
}

def @func_5425(%var_5389: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float32], Tensor[(15, 16, 8), uint32], Tensor[(1920), float64]) {
  %210 = cast(%var_5389, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
  %211 = acos(%210) /* ty=Tensor[(9, 15, 6), float64] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(9, 15, 6), float32] */;
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %214 = reshape(%213, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %215 = @func_596(%214) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
  %216 = erf(%212) /* ty=Tensor[(9, 15, 6), float32] */;
  %217 = %215.0;
  (%216, %217, meta[relay.Constant][15] /* ty=Tensor[(1920), float64] */)
}

def @func_2677(%var_2653: Tensor[(3, 1, 16), float64]) -> Tensor[(3, 1, 16), float64] {
  %218 = cast(%var_2653, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  asin(%218) /* ty=Tensor[(3, 1, 16), float64] */
}

def @func_5625(%var_5623: uint32, %var_5624: Tensor[(1, 14, 2), uint32]) -> Tensor[(1, 14, 2), uint32] {
  @func_5621(%var_5623, %var_5624) /* ty=Tensor[(1, 14, 2), uint32] */
}

def @func_5428(%var_5426: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float32], Tensor[(15, 16, 8), uint32], Tensor[(1920), float64]) {
  @func_5425(%var_5426) /* ty=(Tensor[(9, 15, 6), float32], Tensor[(15, 16, 8), uint32], Tensor[(1920), float64]) */
}

def @func_7299(%var_7187: Tensor[(10, 15, 16), float32], %var_7200: Tensor[(672), int8], %var_7237: Tensor[(2, 960), float64], %var_7257: Tensor[(432), float32]) -> (Tensor[(14, 3, 16), float32], Tensor[(672), int8], Tensor[(1, 1, 10), bool], Tensor[(10, 15, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1280), float32], Tensor[(2, 960), float64], Tensor[(280), float64], Tensor[(480), bool], Tensor[(280), float64], Tensor[(16, 9, 3), float32], Tensor[(432), float32], Tensor[(280), float64], Tensor[(16, 1), float64], Tensor[(8, 2), float64]) {
  %219 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %220 = cast(%var_7200, dtype="int8") /* ty=Tensor[(672), int8] */;
  %221 = reshape(%219, newshape=[]) /* ty=int8 */;
  %222 = reshape(%220, newshape=[14, 3, 16]) /* ty=Tensor[(14, 3, 16), int8] */;
  %223 = @func_1909(%221, %222) /* ty=(Tensor[(14, 3, 16), float32],) */;
  %224 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %225 = reshape(%224, newshape=[]) /* ty=bool */;
  %226 = @func_148(%225) /* ty=(Tensor[(1, 1, 10), bool],) */;
  %227 = cast(%var_7187, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %228 = cos(%227) /* ty=Tensor[(10, 15, 16), float32] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %230 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %231 = cast(meta[relay.Constant][17] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %232 = cast(%var_7237, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
  %233 = reshape(%231, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %234 = reshape(%232, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %235 = @func_2455(%233, %234) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) */;
  %236 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %237 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %238 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int16") /* ty=int16 */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %240 = reshape(%236, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %241 = reshape(%237, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %242 = reshape(%238, newshape=[]) /* ty=int16 */;
  %243 = reshape(%239, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %244 = @func_6310(%240, %241, %242, %243) /* ty=(Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) */;
  %245 = cast(%var_7257, dtype="float32") /* ty=Tensor[(432), float32] */;
  %246 = reshape(%245, newshape=[16, 9, 3]) /* ty=Tensor[(16, 9, 3), float32] */;
  %247 = @func_6762(%246) /* ty=(Tensor[(16, 9, 3), float32],) */;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %249 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %250 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int16") /* ty=int16 */;
  %251 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %252 = reshape(%248, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %253 = reshape(%249, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), bool] */;
  %254 = reshape(%250, newshape=[]) /* ty=int16 */;
  %255 = reshape(%251, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %256 = @func_6310(%252, %253, %254, %255) /* ty=(Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) */;
  %257 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %258 = reshape(%257, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %259 = %223.0;
  %260 = %226.0;
  %261 = power(%229, %230) /* ty=Tensor[(10, 15, 16), float32] */;
  %262 = %235.1;
  %263 = %244.4;
  %264 = %247.0;
  %265 = %256.4;
  %266 = @func_490(%258) /* ty=Tensor[(16, 1), float64] */;
  (%259, %var_7200, %260, %261, %262, meta[relay.Constant][17] /* ty=Tensor[(1280), float32] */, %var_7237, %263, meta[relay.Constant][18] /* ty=Tensor[(480), bool] */, meta[relay.Constant][19] /* ty=Tensor[(280), float64] */, %264, %var_7257, %265, %266, meta[relay.Constant][20] /* ty=Tensor[(8, 2), float64] */)
}

def @func_6806(%var_6805: Tensor[(8, 182), float32]) -> (Tensor[(3, 11, 13), float32], Tensor[(13, 14, 8), float32], Tensor[(8, 182), float32]) {
  %272 = fn (%var_6786: Tensor[(8, 182), float32]) -> (Tensor[(3, 11, 13), float32], Tensor[(13, 14, 8), float32], Tensor[(8, 182), float32]) {
    %267 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
    %268 = cast(%var_6786, dtype="float32") /* ty=Tensor[(8, 182), float32] */;
    %269 = reshape(%268, newshape=[13, 14, 8]) /* ty=Tensor[(13, 14, 8), float32] */;
    %270 = cos(%267) /* ty=Tensor[(3, 11, 13), float32] */;
    %271 = @func_693(%269) /* ty=Tensor[(13, 14, 8), float32] */;
    (%270, %271, %var_6786)
  };
  %272(%var_6805) /* ty=(Tensor[(3, 11, 13), float32], Tensor[(13, 14, 8), float32], Tensor[(8, 182), float32]) */
}

def @func_8924(%var_8920: Tensor[(2, 180), uint64], %var_8921: Tensor[(1620), float64], %var_8922: Tensor[(2, 180), uint64], %var_8923: Tensor[(140, 2), float64]) -> (Tensor[(2, 180), int8], Tensor[(1620), float64], Tensor[(2, 180), float64], Tensor[(48), float32], Tensor[(24, 2), float32], Tensor[(280), float64], int16, Tensor[(140, 2), float64]) {
  @func_8918(%var_8920, %var_8921, %var_8922, %var_8923) /* ty=(Tensor[(2, 180), int8], Tensor[(1620), float64], Tensor[(2, 180), float64], Tensor[(48), float32], Tensor[(24, 2), float32], Tensor[(280), float64], int16, Tensor[(140, 2), float64]) */
}

def @func_5229(%var_5227: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) {
  @func_5226(%var_5227) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) */
}

def @func_7403(%var_7386: Tensor[(16, 10), float64]) -> Tensor[(16, 10), float64] {
  %273 = cast(%var_7386, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  sqrt(%273) /* ty=Tensor[(16, 10), float64] */
}

def @func_3436(%var_3423: Tensor[(48), float32]) -> (Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) {
  %274 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 4), float64] */;
  %275 = cast(%var_3423, dtype="float32") /* ty=Tensor[(48), float32] */;
  %276 = reshape(%275, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float32] */;
  %277 = @func_2744(%276) /* ty=(Tensor[(2, 8, 3), float32],) */;
  %278 = atan(%274) /* ty=Tensor[(2, 4, 4), float64] */;
  %279 = %277.0;
  (%278, %279, %var_3423)
}

def @func_8776(%var_8767: Tensor[(7, 4, 7), int64], %var_8768: Tensor[(7, 4, 7), int64]) -> (Tensor[(7, 4, 7), float64],) {
  %280 = cast(%var_8768, dtype="int64") /* ty=Tensor[(7, 4, 7), int64] */;
  %281 = shape_of(%var_8767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_8767, dtype="int64") /* ty=Tensor[(7, 4, 7), int64] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %284 = logical_xor(%282, %283) /* ty=Tensor[(7, 4, 7), int64] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
  %286 = log2(%285) /* ty=Tensor[(7, 4, 7), float64] */;
  (%286,)
}

def @func_7850(%var_7829: Tensor[(4, 8, 10), uint32], %var_7830: Tensor[(4, 8, 10), uint32], %var_7835: Tensor[(2184), float32]) -> (Tensor[(4, 8, 10), bool], Tensor[(16, 1), float64], Tensor[(2184), float32], Tensor[(12, ?, 13), bool], Tensor[(156), float32]) {
  %287 = cast(%var_7830, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %288 = shape_of(%var_7829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_7829, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = cast(%var_7835, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %292 = reshape(%291, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float32] */;
  %293 = @func_5226(%292) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %295 = reshape(%294, newshape=[12, 1, 13]) /* ty=Tensor[(12, 1, 13), float32] */;
  %296 = greater(%289, %290) /* ty=Tensor[(4, 8, 10), bool] */;
  %297 = %293.1;
  %298 = @func_7478(%295) /* ty=Tensor[(12, ?, 13), bool] */;
  (%296, %297, %var_7835, %298, meta[relay.Constant][23] /* ty=Tensor[(156), float32] */)
}

def @func_922(%var_920: Tensor[(14, 9, 16), float64]) -> Tensor[(14, 9, 16), float64] {
  @func_919(%var_920) /* ty=Tensor[(14, 9, 16), float64] */
}

def @func_5553(%var_5552: Tensor[(15, 10, 14), float32]) -> Tensor[(15, 10, 14), float32] {
  %300 = fn (%var_5544: Tensor[(15, 10, 14), float32]) -> Tensor[(15, 10, 14), float32] {
    %299 = cast(%var_5544, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
    sigmoid(%299) /* ty=Tensor[(15, 10, 14), float32] */
  };
  %300(%var_5552) /* ty=Tensor[(15, 10, 14), float32] */
}

def @func_8918(%var_8866: Tensor[(2, 180), uint64], %var_8873: Tensor[(1620), float64], %var_8875: Tensor[(2, 180), uint64], %var_8914: Tensor[(140, 2), float64]) -> (Tensor[(2, 180), int8], Tensor[(1620), float64], Tensor[(2, 180), float64], Tensor[(48), float32], Tensor[(24, 2), float32], Tensor[(280), float64], int16, Tensor[(140, 2), float64]) {
  %301 = cast(%var_8875, dtype="int8") /* ty=Tensor[(2, 180), int8] */;
  %302 = shape_of(%var_8866, dtype="int32") /* ty=Tensor[(2), int32] */;
  %303 = cast(%var_8866, dtype="int8") /* ty=Tensor[(2, 180), int8] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %305 = cast(%var_8873, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %306 = reshape(%305, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float64] */;
  %307 = @func_1399(%306) /* ty=(Tensor[(9, 15, 12), float64],) */;
  %308 = %307.0;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(9, 15, 12), float64] */;
  %310 = shape_of(%var_8873, dtype="int32") /* ty=Tensor[(1), int32] */;
  %311 = cast(%var_8873, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?), float64] */;
  %313 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %314 = %313.2;
  %315 = cast(%var_8866, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(2), int32] */;
  %317 = cast(%314, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %319 = bitwise_xor(%317, %318) /* ty=Tensor[(2, 180), int16] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %322 = reshape(%321, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %323 = @func_3436(%322) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
  %324 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %325 = power(%311, %312) /* ty=Tensor[(1620), float64] */;
  %326 = cast(%325, dtype="int16") /* ty=Tensor[(1620), int16] */;
  %327 = cast(%var_8914, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %328 = reshape(%324, newshape=[]) /* ty=int16 */;
  %329 = reshape(%326, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), int16] */;
  %330 = reshape(%327, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %331 = @func_3773(%328, %329, %330) /* ty=(Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) */;
  %332 = multiply(%303, %304) /* ty=Tensor[(2, 180), int8] */;
  %333 = sin(%320) /* ty=Tensor[(2, 180), float64] */;
  %334 = %323.2;
  %335 = %331.3;
  (%332, %325, %333, %334, meta[relay.Constant][24] /* ty=Tensor[(24, 2), float32] */, %335, meta[relay.Constant][25] /* ty=int16 */, %var_8914)
}

def @func_3777(%var_3774: int16, %var_3775: Tensor[(15, 9, 12), int16], %var_3776: Tensor[(280), float64]) -> (Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) {
  %353 = fn (%var_3736: int16, %var_3737: Tensor[(15, 9, 12), int16], %var_3757: Tensor[(280), float64]) -> (Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) {
    %336 = cast(%var_3736, dtype="int16") /* ty=int16 */;
    %337 = cast(%var_3737, dtype="int16") /* ty=Tensor[(15, 9, 12), int16] */;
    %338 = cast(%var_3757, dtype="float64") /* ty=Tensor[(280), float64] */;
    %339 = reshape(%338, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
    %340 = @func_420(%339) /* ty=(Tensor[(4, 14, 5), float64],) */;
    %341 = cast(meta[relay.Constant][26] /* ty=Tensor[(24, 80), float64] */, dtype="float64") /* ty=Tensor[(24, 80), float64] */;
    %342 = reshape(%341, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
    %343 = @func_596(%342) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
    %344 = %343.0;
    %345 = cast(%344, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
    %346 = sin(%345) /* ty=Tensor[(15, 16, 8), float32] */;
    %347 = cast(%346, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
    %348 = acosh(%347) /* ty=Tensor[(15, 16, 8), float64] */;
    %349 = cast(%348, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
    %350 = logical_xor(%336, %337) /* ty=Tensor[(15, 9, 12), int16] */;
    %351 = %340.0;
    %352 = acos(%349) /* ty=Tensor[(15, 16, 8), float64] */;
    (%350, meta[relay.Constant][26] /* ty=Tensor[(24, 80), float64] */, %351, %var_3757, %352)
  };
  %353(%var_3774, %var_3775, %var_3776) /* ty=(Tensor[(15, 9, 12), int16], Tensor[(24, 80), float64], Tensor[(4, 14, 5), float64], Tensor[(280), float64], Tensor[(15, 16, 8), float64]) */
}

def @func_696(%var_694: Tensor[(13, 14, 8), float32]) -> Tensor[(13, 14, 8), float32] {
  @func_693(%var_694) /* ty=Tensor[(13, 14, 8), float32] */
}

def @func_422(%var_421: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64],) {
  %356 = fn (%var_403: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64],) {
    %354 = cast(%var_403, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %355 = acos(%354) /* ty=Tensor[(4, 14, 5), float64] */;
    (%355,)
  };
  %356(%var_421) /* ty=(Tensor[(4, 14, 5), float64],) */
}

def @func_6764(%var_6763: Tensor[(16, 9, 3), float32]) -> (Tensor[(16, 9, 3), float32],) {
  %359 = fn (%var_6756: Tensor[(16, 9, 3), float32]) -> (Tensor[(16, 9, 3), float32],) {
    %357 = cast(%var_6756, dtype="float32") /* ty=Tensor[(16, 9, 3), float32] */;
    %358 = acosh(%357) /* ty=Tensor[(16, 9, 3), float32] */;
    (%358,)
  };
  %359(%var_6763) /* ty=(Tensor[(16, 9, 3), float32],) */
}

def @func_7855(%var_7852: Tensor[(4, 8, 10), uint32], %var_7853: Tensor[(4, 8, 10), uint32], %var_7854: Tensor[(2184), float32]) -> (Tensor[(4, 8, 10), bool], Tensor[(16, 1), float64], Tensor[(2184), float32], Tensor[(12, ?, 13), bool], Tensor[(156), float32]) {
  @func_7850(%var_7852, %var_7853, %var_7854) /* ty=(Tensor[(4, 8, 10), bool], Tensor[(16, 1), float64], Tensor[(2184), float32], Tensor[(12, ?, 13), bool], Tensor[(156), float32]) */
}

def @func_3271(%var_3269: Tensor[(6, 2, 6), int64], %var_3270: Tensor[(6, 2, 6), int64]) -> (Tensor[(6, 2, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(4, 14, 5), float64], Tensor[(140, 2), float64]) {
  @func_3267(%var_3269, %var_3270) /* ty=(Tensor[(6, 2, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(4, 14, 5), float64], Tensor[(140, 2), float64]) */
}

def @func_599(%var_597: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) {
  @func_596(%var_597) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */
}

def @func_2680(%var_2678: Tensor[(3, 1, 16), float64]) -> Tensor[(3, 1, 16), float64] {
  @func_2677(%var_2678) /* ty=Tensor[(3, 1, 16), float64] */
}

def @main(%var_9331: Tensor[(12, 5, 6), uint64]) -> Tensor[(12, 5, 6), uint16] {
  %360 = @func_8798() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %361 = %360.1;
  %362 = cast(%var_9331, dtype="uint16") /* ty=Tensor[(12, 5, 6), uint16] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="uint16") /* ty=Tensor[(12, 5, 6), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%364, %365) /* ty=Tensor[(12, 5, 6), uint16] */
}

def @func_767(%var_765: Tensor[(16, 4, 5), float64], %var_766: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), uint16], Tensor[(16, 4, 5), float64]) {
  @func_763(%var_765, %var_766) /* ty=(Tensor[(16, 4, 5), uint16], Tensor[(16, 4, 5), float64]) */
}

def @func_1401(%var_1400: Tensor[(9, 15, 12), float64]) -> (Tensor[(9, 15, 12), float64],) {
  %368 = fn (%var_1388: Tensor[(9, 15, 12), float64]) -> (Tensor[(9, 15, 12), float64],) {
    %366 = cast(%var_1388, dtype="float64") /* ty=Tensor[(9, 15, 12), float64] */;
    %367 = cos(%366) /* ty=Tensor[(9, 15, 12), float64] */;
    (%367,)
  };
  %368(%var_1400) /* ty=(Tensor[(9, 15, 12), float64],) */
}

def @func_5888(%var_5887: Tensor[(11, 14, 2), int16]) -> (Tensor[(11, 14, 2), bool],) {
  %374 = fn (%var_5880: Tensor[(11, 14, 2), int16]) -> (Tensor[(11, 14, 2), bool],) {
    %369 = cast(%var_5880, dtype="bool") /* ty=Tensor[(11, 14, 2), bool] */;
    %370 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 14, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 14, 2), int16] */, dtype="bool") /* ty=Tensor[(11, 14, 2), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %373 = less_equal(%371, %372) /* ty=Tensor[(11, 14, 2), bool] */;
    (%373,)
  };
  %374(%var_5887) /* ty=(Tensor[(11, 14, 2), bool],) */
}

def @func_3040(%var_3039: Tensor[(3, 15, 5), float64]) -> (Tensor[(3, 15, 5), uint32], Tensor[(3, 15, 5), float64], Tensor[(3, 15, 5), float64]) {
  %393 = fn (%var_2972: Tensor[(3, 15, 5), float64]) -> (Tensor[(3, 15, 5), uint32], Tensor[(3, 15, 5), float64], Tensor[(3, 15, 5), float64]) {
    %375 = cast(%var_2972, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %376 = acosh(%375) /* ty=Tensor[(3, 15, 5), float64] */;
    %377 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 15, 5), float64] */, dtype="uint32") /* ty=Tensor[(3, 15, 5), uint32] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%376, dtype="uint32") /* ty=Tensor[(3, 15, 5), uint32] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %381 = cast(%var_2972, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %382 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 15, 5), float64] */, dtype="int8") /* ty=Tensor[(3, 15, 5), int8] */;
    %383 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%376, dtype="int8") /* ty=Tensor[(3, 15, 5), int8] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %386 = bitwise_xor(%384, %385) /* ty=Tensor[(3, 15, 5), int8] */;
    %387 = cast(%386, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %388 = cosh(%387) /* ty=Tensor[(3, 15, 5), float64] */;
    %389 = cast(%388, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %390 = subtract(%379, %380) /* ty=Tensor[(3, 15, 5), uint32] */;
    %391 = cos(%381) /* ty=Tensor[(3, 15, 5), float64] */;
    %392 = exp(%389) /* ty=Tensor[(3, 15, 5), float64] */;
    (%390, %391, %392)
  };
  %393(%var_3039) /* ty=(Tensor[(3, 15, 5), uint32], Tensor[(3, 15, 5), float64], Tensor[(3, 15, 5), float64]) */
}

def @func_1909(%var_1888: int8, %var_1889: Tensor[(14, 3, 16), int8]) -> (Tensor[(14, 3, 16), float32],) {
  %394 = cast(%var_1888, dtype="int8") /* ty=int8 */;
  %395 = cast(%var_1889, dtype="int8") /* ty=Tensor[(14, 3, 16), int8] */;
  %396 = maximum(%394, %395) /* ty=Tensor[(14, 3, 16), int8] */;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(14, 3, 16), float32] */;
  %398 = cast(%var_1888, dtype="float32") /* ty=float32 */;
  %399 = power(%397, %398) /* ty=Tensor[(14, 3, 16), float32] */;
  (%399,)
}

def @func_8991(%var_8987: float32, %var_8988: Tensor[(4, 6, 12), float32], %var_8989: Tensor[(195), float64], %var_8990: Tensor[(390), float64]) -> (Tensor[(4, 6, 12), float32], Tensor[(15, 13, 2), float64], Tensor[(195), float64], Tensor[(390), float64]) {
  %408 = fn (%var_8976: float32, %var_8977: Tensor[(4, 6, 12), float32], %var_8982: Tensor[(195), float64], %var_8983: Tensor[(390), float64]) -> (Tensor[(4, 6, 12), float32], Tensor[(15, 13, 2), float64], Tensor[(195), float64], Tensor[(390), float64]) {
    %400 = cast(%var_8976, dtype="float32") /* ty=float32 */;
    %401 = cast(%var_8977, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %402 = cast(%var_8982, dtype="float64") /* ty=Tensor[(195), float64] */;
    %403 = cast(%var_8983, dtype="float64") /* ty=Tensor[(390), float64] */;
    %404 = reshape(%402, newshape=[15, 13, 1]) /* ty=Tensor[(15, 13, 1), float64] */;
    %405 = reshape(%403, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), float64] */;
    %406 = power(%400, %401) /* ty=Tensor[(4, 6, 12), float32] */;
    %407 = @func_3976(%404, %405) /* ty=Tensor[(15, 13, 2), float64] */;
    (%406, %407, %var_8982, %var_8983)
  };
  %408(%var_8987, %var_8988, %var_8989, %var_8990) /* ty=(Tensor[(4, 6, 12), float32], Tensor[(15, 13, 2), float64], Tensor[(195), float64], Tensor[(390), float64]) */
}

def @func_2455(%var_2445: Tensor[(5, 16, 16), float32], %var_2452: Tensor[(1920), float64]) -> (Tensor[(5, 16, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1920), float64]) {
  %409 = cast(%var_2445, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %410 = cast(%var_2452, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %411 = reshape(%410, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %412 = @func_596(%411) /* ty=(Tensor[(15, 16, 8), uint32], Tensor[(15, 16, 8), bool]) */;
  %413 = asin(%409) /* ty=Tensor[(5, 16, 16), float32] */;
  %414 = %412.1;
  (%413, %414, %var_2452)
}

def @func_3267(%var_3248: Tensor[(6, 2, 6), int64], %var_3249: Tensor[(6, 2, 6), int64]) -> (Tensor[(6, 2, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(4, 14, 5), float64], Tensor[(140, 2), float64]) {
  %415 = cast(%var_3249, dtype="bool") /* ty=Tensor[(6, 2, 6), bool] */;
  %416 = shape_of(%var_3248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_3248, dtype="bool") /* ty=Tensor[(6, 2, 6), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = cast(meta[relay.Constant][29] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %420 = reshape(%419, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %421 = cast(meta[relay.Constant][30] /* ty=Tensor[(140, 2), float64] */, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %422 = reshape(%421, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %423 = @func_420(%422) /* ty=(Tensor[(4, 14, 5), float64],) */;
  %424 = equal(%417, %418) /* ty=Tensor[(6, 2, 6), bool] */;
  %425 = @func_919(%420) /* ty=Tensor[(14, 9, 16), float64] */;
  %426 = %423.0;
  (%424, %425, meta[relay.Constant][29] /* ty=Tensor[(2016), float64] */, %426, meta[relay.Constant][30] /* ty=Tensor[(140, 2), float64] */)
}

def @func_6475(%var_6436: Tensor[(16, 10, 13), bool], %var_6437: Tensor[(16, 10, 13), bool], %var_6453: Tensor[(1, 660), int16]) -> (Tensor[(16, 10, 13), bool], Tensor[(48), float32], int16, Tensor[(1, 660), int16], Tensor[(48), float32], Tensor[(14, 9, 16), float64], Tensor[(2016), float64]) {
  %427 = cast(%var_6437, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %428 = shape_of(%var_6436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_6436, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %432 = cast(%var_6453, dtype="int16") /* ty=Tensor[(1, 660), int16] */;
  %433 = cast(meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %434 = reshape(%431, newshape=[]) /* ty=int16 */;
  %435 = reshape(%432, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), int16] */;
  %436 = reshape(%433, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %437 = @func_5089(%434, %435, %436) /* ty=(Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) */;
  %438 = cast(meta[relay.Constant][33] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %439 = reshape(%438, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %440 = logical_or(%429, %430) /* ty=Tensor[(16, 10, 13), bool] */;
  %441 = %437.2;
  %442 = @func_919(%439) /* ty=Tensor[(14, 9, 16), float64] */;
  (%440, %441, meta[relay.Constant][31] /* ty=int16 */, %var_6453, meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, %442, meta[relay.Constant][33] /* ty=Tensor[(2016), float64] */)
}

def @func_693(%var_690: Tensor[(13, 14, 8), float32]) -> Tensor[(13, 14, 8), float32] {
  %443 = cast(%var_690, dtype="float32") /* ty=Tensor[(13, 14, 8), float32] */;
  log10(%443) /* ty=Tensor[(13, 14, 8), float32] */
}

def @func_150(%var_149: bool) -> (Tensor[(1, 1, 10), bool],) {
  %447 = fn (%var_125: bool) -> (Tensor[(1, 1, 10), bool],) {
    %444 = cast(%var_125, dtype="bool") /* ty=bool */;
    %445 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1, 10), bool] */, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
    %446 = logical_or(%444, %445) /* ty=Tensor[(1, 1, 10), bool] */;
    (%446,)
  };
  %447(%var_149) /* ty=(Tensor[(1, 1, 10), bool],) */
}

def @func_9106(%var_9034: Tensor[(195), float64], %var_9040: Tensor[(45), int64], %var_9050: Tensor[(720), float64], %var_9069: Tensor[(15, 13, 2), float64], %var_9082: Tensor[(2016), float64]) -> (Tensor[(12, 5, 6), uint64], Tensor[(195), float64], Tensor[(390), float64], Tensor[(45), int64], Tensor[(15, 6, 8), float64], Tensor[(720), float64], Tensor[(15, 13, 2), uint16], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(3, 3, 5), int8]) {
  %448 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %449 = cast(%var_9050, dtype="float64") /* ty=Tensor[(720), float64] */;
  %450 = cast(%var_9050, dtype="float64") /* ty=Tensor[(720), float64] */;
  %451 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %452 = reshape(%449, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), float64] */;
  %453 = reshape(%450, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), float64] */;
  %454 = reshape(%451, newshape=[]) /* ty=bool */;
  %455 = @func_335(%452, %453, %454) /* ty=(Tensor[(15, 6, 8), float64], Tensor[(1, 1, 10), bool], bool) */;
  %456 = cast(%var_9034, dtype="float64") /* ty=Tensor[(195), float64] */;
  %457 = cast(meta[relay.Constant][35] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %458 = reshape(%456, newshape=[15, 13, 1]) /* ty=Tensor[(15, 13, 1), float64] */;
  %459 = reshape(%457, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), float64] */;
  %460 = @func_3976(%458, %459) /* ty=Tensor[(15, 13, 2), float64] */;
  %461 = cast(%var_9069, dtype="uint16") /* ty=Tensor[(15, 13, 2), uint16] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="uint16") /* ty=Tensor[(15, 13, 2), uint16] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %465 = cast(%var_9082, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %466 = reshape(%465, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
  %467 = cast(%var_9040, dtype="int64") /* ty=Tensor[(45), int64] */;
  %468 = cast(%var_9040, dtype="int64") /* ty=Tensor[(45), int64] */;
  %469 = reshape(%467, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), int64] */;
  %470 = reshape(%468, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), int64] */;
  %471 = @func_8432(%469, %470) /* ty=(Tensor[(3, 3, 5), bool],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="int8") /* ty=Tensor[(3, 3, 5), int8] */;
  %474 = cast(False /* ty=bool */, dtype="int8") /* ty=int8 */;
  %475 = %448.1;
  %476 = %455.0;
  %477 = multiply(%463, %464) /* ty=Tensor[(15, 13, 2), uint16] */;
  %478 = @func_919(%466) /* ty=Tensor[(14, 9, 16), float64] */;
  %479 = bitwise_or(%473, %474) /* ty=Tensor[(3, 3, 5), int8] */;
  (%475, %var_9034, meta[relay.Constant][35] /* ty=Tensor[(390), float64] */, %var_9040, %476, %var_9050, %477, %478, %var_9082, %479)
}

def @func_5658(%var_5655: Tensor[(5, 3, 8), float64], %var_5656: Tensor[(5, 3, 8), float64], %var_5657: Tensor[(2184), float32]) -> (Tensor[(5, 3, 8), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(14, 12, 13), float64], Tensor[(2184), float32]) {
  %495 = fn (%var_5636: Tensor[(5, 3, 8), float64], %var_5640: Tensor[(5, 3, 8), float64], %var_5652: Tensor[(2184), float32]) -> (Tensor[(5, 3, 8), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(14, 12, 13), float64], Tensor[(2184), float32]) {
    %480 = cast(%var_5636, dtype="float64") /* ty=Tensor[(5, 3, 8), float64] */;
    %481 = atanh(%480) /* ty=Tensor[(5, 3, 8), float64] */;
    %482 = cast(%var_5640, dtype="int16") /* ty=Tensor[(5, 3, 8), int16] */;
    %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
    %484 = cast(%481, dtype="int16") /* ty=Tensor[(5, 3, 8), int16] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %487 = reshape(%486, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float32] */;
    %488 = @func_2744(%487) /* ty=(Tensor[(2, 8, 3), float32],) */;
    %489 = cast(%var_5652, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %490 = reshape(%489, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float32] */;
    %491 = @func_5226(%490) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(16, 1), float64], Tensor[(16), float64]) */;
    %492 = add(%484, %485) /* ty=Tensor[(5, 3, 8), int16] */;
    %493 = %488.0;
    %494 = %491.0;
    (%492, %493, meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, %494, %var_5652)
  };
  %495(%var_5655, %var_5656, %var_5657) /* ty=(Tensor[(5, 3, 8), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(14, 12, 13), float64], Tensor[(2184), float32]) */
}

def @func_9308() -> (Tensor[(2, 180), uint64], Tensor[(1248), float64], Tensor[(5, 40), float32], Tensor[(7, 4, 7), float64], Tensor[(196), int64]) {
  %508 = fn () -> (Tensor[(2, 180), uint64], Tensor[(1248), float64], Tensor[(5, 40), float32], Tensor[(7, 4, 7), float64], Tensor[(196), int64]) {
    %496 = @func_9238() /* ty=(Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) */;
    %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 40), float32] */, dtype="float32") /* ty=Tensor[(5, 40), float32] */;
    %498 = reshape(%497, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), float32] */;
    %499 = @func_1024(%498) /* ty=(Tensor[(4, 5, 10), uint16], Tensor[(16, 13, 6), bool], Tensor[(1248), float64]) */;
    %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(196), int64] */, dtype="int64") /* ty=Tensor[(196), int64] */;
    %501 = cast(meta[relay.Constant][38] /* ty=Tensor[(196), int64] */, dtype="int64") /* ty=Tensor[(196), int64] */;
    %502 = reshape(%500, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), int64] */;
    %503 = reshape(%501, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), int64] */;
    %504 = @func_8776(%502, %503) /* ty=(Tensor[(7, 4, 7), float64],) */;
    %505 = %496.0;
    %506 = %499.2;
    %507 = %504.0;
    (%505, %506, meta[relay.Constant][37] /* ty=Tensor[(5, 40), float32] */, %507, meta[relay.Constant][38] /* ty=Tensor[(196), int64] */)
  };
  %508() /* ty=(Tensor[(2, 180), uint64], Tensor[(1248), float64], Tensor[(5, 40), float32], Tensor[(7, 4, 7), float64], Tensor[(196), int64]) */
}

def @func_5093(%var_5090: int16, %var_5091: Tensor[(12, 11, 5), int16], %var_5092: Tensor[(48), float32]) -> (Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) {
  %520 = fn (%var_5074: int16, %var_5075: Tensor[(12, 11, 5), int16], %var_5080: Tensor[(48), float32]) -> (Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) {
    %509 = cast(%var_5074, dtype="int16") /* ty=int16 */;
    %510 = cast(%var_5075, dtype="int16") /* ty=Tensor[(12, 11, 5), int16] */;
    %511 = cast(%var_5080, dtype="float32") /* ty=Tensor[(48), float32] */;
    %512 = reshape(%511, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %513 = @func_3436(%512) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
    %514 = cast(%var_5074, dtype="bool") /* ty=bool */;
    %515 = reshape(%514, newshape=[]) /* ty=bool */;
    %516 = @func_148(%515) /* ty=(Tensor[(1, 1, 10), bool],) */;
    %517 = bitwise_and(%509, %510) /* ty=Tensor[(12, 11, 5), int16] */;
    %518 = %513.1;
    %519 = %516.0;
    (%517, %518, %var_5080, %519)
  };
  %520(%var_5090, %var_5091, %var_5092) /* ty=(Tensor[(12, 11, 5), int16], Tensor[(2, 8, 3), float32], Tensor[(48), float32], Tensor[(1, 1, 10), bool]) */
}

def @func_6033(%var_6027: Tensor[(3, 10, 16), uint8], %var_6028: Tensor[(3, 10, 16), uint8], %var_6029: Tensor[(28), uint32], %var_6030: Tensor[(2100), float32], %var_6031: Tensor[(1920), float64], %var_6032: Tensor[(48, 1), float64]) -> (Tensor[(3, 10, 16), float32], Tensor[(3, 10, 16), float32], Tensor[(1, 14, 2), uint32], uint32, Tensor[(28), uint32], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1920), float64], Tensor[(1280), float32], Tensor[(1920), float64], Tensor[(3, 1, 16), float64], Tensor[(48, 1), float64], Tensor[(13, 14, 8), float32], Tensor[(1456), float32]) {
  @func_6025(%var_6027, %var_6028, %var_6029, %var_6030, %var_6031, %var_6032) /* ty=(Tensor[(3, 10, 16), float32], Tensor[(3, 10, 16), float32], Tensor[(1, 14, 2), uint32], uint32, Tensor[(28), uint32], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1920), float64], Tensor[(1280), float32], Tensor[(1920), float64], Tensor[(3, 1, 16), float64], Tensor[(48, 1), float64], Tensor[(13, 14, 8), float32], Tensor[(1456), float32]) */
}

def @func_6838(%var_6836: float64, %var_6837: Tensor[(1, 5, 1), float64]) -> Tensor[(1, 5, 1), float64] {
  %523 = fn (%var_6825: float64, %var_6826: Tensor[(1, 5, 1), float64]) -> Tensor[(1, 5, 1), float64] {
    %521 = cast(%var_6825, dtype="float64") /* ty=float64 */;
    %522 = cast(%var_6826, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
    floor_mod(%521, %522) /* ty=Tensor[(1, 5, 1), float64] */
  };
  %523(%var_6836, %var_6837) /* ty=Tensor[(1, 5, 1), float64] */
}

def @func_5621(%var_5616: uint32, %var_5617: Tensor[(1, 14, 2), uint32]) -> Tensor[(1, 14, 2), uint32] {
  %524 = cast(%var_5616, dtype="uint32") /* ty=uint32 */;
  %525 = cast(%var_5617, dtype="uint32") /* ty=Tensor[(1, 14, 2), uint32] */;
  bitwise_xor(%524, %525) /* ty=Tensor[(1, 14, 2), uint32] */
}

def @func_9197(%var_9194: Tensor[(4, 6, 12), int16], %var_9195: Tensor[(4, 6, 12), int16], %var_9196: Tensor[(2, 432), int16]) -> (Tensor[(4, 6, 12), int8], Tensor[(12, 6, 12), bool]) {
  @func_9192(%var_9194, %var_9195, %var_9196) /* ty=(Tensor[(4, 6, 12), int8], Tensor[(12, 6, 12), bool]) */
}

def @func_9238() -> (Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) {
  %526 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %527 = cast(meta[relay.Constant][39] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %528 = cast(meta[relay.Constant][39] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %529 = reshape(%527, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int8] */;
  %530 = reshape(%528, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int8] */;
  %531 = %526.2;
  %532 = @func_3935(%529, %530) /* ty=Tensor[(10, 3, 4), int8] */;
  (%531, %532, meta[relay.Constant][39] /* ty=Tensor[(30, 4), int8] */)
}

def @func_8061(%var_8059: Tensor[(9, 1, 6), float32], %var_8060: Tensor[(48), float32]) -> (Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) {
  %554 = fn (%var_8013: Tensor[(9, 1, 6), float32], %var_8052: Tensor[(48), float32]) -> (Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) {
    %533 = cast(%var_8013, dtype="float32") /* ty=Tensor[(9, 1, 6), float32] */;
    %534 = sqrt(%533) /* ty=Tensor[(9, 1, 6), float32] */;
    %535 = cast(%var_8013, dtype="bool") /* ty=Tensor[(9, 1, 6), bool] */;
    %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%534, dtype="bool") /* ty=Tensor[(9, 1, 6), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = cast(meta[relay.Constant][40] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %540 = reshape(%539, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float64] */;
    %541 = cast(%var_8052, dtype="float32") /* ty=Tensor[(48), float32] */;
    %542 = reshape(%541, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %543 = @func_3436(%542) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */;
    %544 = cast(%534, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
    %545 = exp(%544) /* ty=Tensor[(9, 1, 6), float64] */;
    %546 = cast(%534, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%545, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %550 = less_equal(%537, %538) /* ty=Tensor[(9, ?, 6), bool] */;
    %551 = @func_919(%540) /* ty=Tensor[(14, 9, 16), float64] */;
    %552 = %543.2;
    %553 = divide(%548, %549) /* ty=Tensor[(9, ?, 6), float64] */;
    (%550, %551, meta[relay.Constant][40] /* ty=Tensor[(2016), float64] */, %552, %var_8052, %553)
  };
  %554(%var_8059, %var_8060) /* ty=(Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) */
}

def @func_9192(%var_9158: Tensor[(4, 6, 12), int16], %var_9159: Tensor[(4, 6, 12), int16], %var_9175: Tensor[(2, 432), int16]) -> (Tensor[(4, 6, 12), int8], Tensor[(12, 6, 12), bool]) {
  %555 = cast(%var_9159, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
  %556 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_9158, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = less_equal(%557, %558) /* ty=Tensor[(4, 6, 12), bool] */;
  %560 = cast(%559, dtype="int8") /* ty=Tensor[(4, 6, 12), int8] */;
  %561 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_9158, dtype="int8") /* ty=Tensor[(4, 6, 12), int8] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %564 = cast(%var_9175, dtype="int16") /* ty=Tensor[(2, 432), int16] */;
  %565 = reshape(%564, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
  %566 = @func_3603(%565) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(12, 6, 12), float32] */;
  %569 = rsqrt(%568) /* ty=Tensor[(12, 6, 12), float32] */;
  %570 = cast(%var_9175, dtype="bool") /* ty=Tensor[(2, 432), bool] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = add(%562, %563) /* ty=Tensor[(4, 6, 12), int8] */;
  %575 = not_equal(%572, %573) /* ty=Tensor[(12, 6, 12), bool] */;
  (%574, %575)
}

def @func_533(%var_531: Tensor[(16, 13, 6), float64], %var_532: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) {
  @func_529(%var_531, %var_532) /* ty=(Tensor[(16, 13, 6), float64], Tensor[(16, 13, 6), bool]) */
}

def @func_3938(%var_3936: Tensor[(10, 3, 4), int8], %var_3937: Tensor[(10, 3, 4), int8]) -> Tensor[(10, 3, 4), int8] {
  %580 = fn (%var_3930: Tensor[(10, 3, 4), int8], %var_3931: Tensor[(10, 3, 4), int8]) -> Tensor[(10, 3, 4), int8] {
    %576 = cast(%var_3931, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
    %577 = shape_of(%var_3930, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%var_3930, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    add(%578, %579) /* ty=Tensor[(10, 3, 4), int8] */
  };
  %580(%var_3936, %var_3937) /* ty=Tensor[(10, 3, 4), int8] */
}

def @func_3605(%var_3604: Tensor[(12, 6, 12), int16]) -> (Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) {
  %593 = fn (%var_3579: Tensor[(12, 6, 12), int16]) -> (Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) {
    %581 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 6, 12), int16] */, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
    %582 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%var_3579, dtype="bool") /* ty=Tensor[(12, 6, 12), bool] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %585 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %586 = reshape(%585, newshape=[]) /* ty=bool */;
    %587 = @func_148(%586) /* ty=(Tensor[(1, 1, 10), bool],) */;
    %588 = %587.0;
    %589 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %590 = cast(%588, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
    %591 = less_equal(%583, %584) /* ty=Tensor[(12, 6, 12), bool] */;
    %592 = equal(%589, %590) /* ty=Tensor[(1, 1, 10), bool] */;
    (%591, %592)
  };
  %593(%var_3604) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */
}

def @func_6316(%var_6312: Tensor[(3, 16, 10), bool], %var_6313: Tensor[(3, 16, 10), bool], %var_6314: int16, %var_6315: Tensor[(280), float64]) -> (Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) {
  @func_6310(%var_6312, %var_6313, %var_6314, %var_6315) /* ty=(Tensor[(3, 16, 10), float32], Tensor[(15, 16, 8), float64], int16, Tensor[(1620), int16], Tensor[(280), float64]) */
}

def @func_8435(%var_8433: Tensor[(3, 3, 5), int64], %var_8434: Tensor[(3, 3, 5), int64]) -> (Tensor[(3, 3, 5), bool],) {
  %599 = fn (%var_8425: Tensor[(3, 3, 5), int64], %var_8426: Tensor[(3, 3, 5), int64]) -> (Tensor[(3, 3, 5), bool],) {
    %594 = cast(%var_8426, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
    %595 = shape_of(%var_8425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %596 = cast(%var_8425, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %598 = greater(%596, %597) /* ty=Tensor[(3, 3, 5), bool] */;
    (%598,)
  };
  %599(%var_8433, %var_8434) /* ty=(Tensor[(3, 3, 5), bool],) */
}

def @func_9240() -> (Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) {
  @func_9238() /* ty=(Tensor[(2, 180), uint64], Tensor[(10, 3, 4), int8], Tensor[(30, 4), int8]) */
}

def @func_9113(%var_9108: Tensor[(195), float64], %var_9109: Tensor[(45), int64], %var_9110: Tensor[(720), float64], %var_9111: Tensor[(15, 13, 2), float64], %var_9112: Tensor[(2016), float64]) -> (Tensor[(12, 5, 6), uint64], Tensor[(195), float64], Tensor[(390), float64], Tensor[(45), int64], Tensor[(15, 6, 8), float64], Tensor[(720), float64], Tensor[(15, 13, 2), uint16], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(3, 3, 5), int8]) {
  @func_9106(%var_9108, %var_9109, %var_9110, %var_9111, %var_9112) /* ty=(Tensor[(12, 5, 6), uint64], Tensor[(195), float64], Tensor[(390), float64], Tensor[(45), int64], Tensor[(15, 6, 8), float64], Tensor[(720), float64], Tensor[(15, 13, 2), uint16], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(3, 3, 5), int8]) */
}

def @func_2746(%var_2745: Tensor[(2, 8, 3), float32]) -> (Tensor[(2, 8, 3), float32],) {
  %602 = fn (%var_2727: Tensor[(2, 8, 3), float32]) -> (Tensor[(2, 8, 3), float32],) {
    %600 = cast(%var_2727, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
    %601 = rsqrt(%600) /* ty=Tensor[(2, 8, 3), float32] */;
    (%601,)
  };
  %602(%var_2745) /* ty=(Tensor[(2, 8, 3), float32],) */
}

def @func_6679(%var_6676: Tensor[(12, 15, 15), int64], %var_6677: Tensor[(32, 40), float32], %var_6678: Tensor[(1920), float64]) -> (Tensor[(12, 15, 15), int64], Tensor[(1, 1, 10), bool], bool, Tensor[(5, 16, 16), float32], Tensor[(32, 40), float32], Tensor[(1920), float64]) {
  @func_6674(%var_6676, %var_6677, %var_6678) /* ty=(Tensor[(12, 15, 15), int64], Tensor[(1, 1, 10), bool], bool, Tensor[(5, 16, 16), float32], Tensor[(32, 40), float32], Tensor[(1920), float64]) */
}

def @func_9261(%var_9244: Tensor[(864), int16], %var_9246: Tensor[(864), int16], %var_9257: Tensor[(54, 1), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 6, 12), bool], Tensor[(864), bool], Tensor[(48), float32], Tensor[(54, 1), float32], Tensor[(1, 48), float32]) {
  %603 = @func_8797() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 5, 6), uint64], Tensor[(2, 180), uint64]) */;
  %604 = cast(%var_9244, dtype="int16") /* ty=Tensor[(864), int16] */;
  %605 = reshape(%604, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), int16] */;
  %606 = @func_3603(%605) /* ty=(Tensor[(12, 6, 12), bool], Tensor[(1, 1, 10), bool]) */;
  %607 = cast(%var_9246, dtype="bool") /* ty=Tensor[(864), bool] */;
  %608 = shape_of(%var_9244, dtype="int32") /* ty=Tensor[(1), int32] */;
  %609 = cast(%var_9244, dtype="bool") /* ty=Tensor[(864), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?), bool] */;
  %611 = cast(%var_9257, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %612 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 48), float32] */, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %613 = reshape(%611, newshape=[9, 1, 6]) /* ty=Tensor[(9, 1, 6), float32] */;
  %614 = reshape(%612, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %615 = @func_8058(%613, %614) /* ty=(Tensor[(9, ?, 6), bool], Tensor[(14, 9, 16), float64], Tensor[(2016), float64], Tensor[(48), float32], Tensor[(48), float32], Tensor[(9, ?, 6), float64]) */;
  %616 = %603.0;
  %617 = %606.0;
  %618 = greater_equal(%609, %610) /* ty=Tensor[(864), bool] */;
  %619 = %615.4;
  (%616, %617, %618, %619, %var_9257, meta[relay.Constant][42] /* ty=Tensor[(1, 48), float32] */)
}

def @func_3439(%var_3437: Tensor[(48), float32]) -> (Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) {
  @func_3436(%var_3437) /* ty=(Tensor[(2, 4, 4), float64], Tensor[(2, 8, 3), float32], Tensor[(48), float32]) */
}

def @func_7305(%var_7301: Tensor[(10, 15, 16), float32], %var_7302: Tensor[(672), int8], %var_7303: Tensor[(2, 960), float64], %var_7304: Tensor[(432), float32]) -> (Tensor[(14, 3, 16), float32], Tensor[(672), int8], Tensor[(1, 1, 10), bool], Tensor[(10, 15, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1280), float32], Tensor[(2, 960), float64], Tensor[(280), float64], Tensor[(480), bool], Tensor[(280), float64], Tensor[(16, 9, 3), float32], Tensor[(432), float32], Tensor[(280), float64], Tensor[(16, 1), float64], Tensor[(8, 2), float64]) {
  @func_7299(%var_7301, %var_7302, %var_7303, %var_7304) /* ty=(Tensor[(14, 3, 16), float32], Tensor[(672), int8], Tensor[(1, 1, 10), bool], Tensor[(10, 15, 16), float32], Tensor[(15, 16, 8), bool], Tensor[(1280), float32], Tensor[(2, 960), float64], Tensor[(280), float64], Tensor[(480), bool], Tensor[(280), float64], Tensor[(16, 9, 3), float32], Tensor[(432), float32], Tensor[(280), float64], Tensor[(16, 1), float64], Tensor[(8, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */the function is provided too many arguments expected 1, found 2

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
