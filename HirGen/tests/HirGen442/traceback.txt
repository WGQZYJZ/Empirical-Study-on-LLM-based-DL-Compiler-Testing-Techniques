==========mod==========
#[version = "0.0.5"]
def @func_9722() -> (Tensor[(900), uint8],) {
  %0 = @func_9239() /* ty=Tensor[(900), uint8] */;
  (%0,)
}

def @func_1372(%var_1338: Tensor[(2, 7, 14), uint32], %var_1339: Tensor[(2, 7, 14), uint32], %var_1355: Tensor[(702), uint8], %var_1368: Tensor[(5, 56), float64]) -> (Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) {
  %1 = cast(%var_1339, dtype="uint32") /* ty=Tensor[(2, 7, 14), uint32] */;
  %2 = shape_of(%var_1338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_1338, dtype="uint32") /* ty=Tensor[(2, 7, 14), uint32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %5 = cast(%var_1355, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %6 = cast(%var_1355, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %7 = reshape(%5, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %8 = reshape(%6, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %9 = @func_1056(%7, %8) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %10 = cast(%var_1368, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %11 = cast(%var_1368, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %12 = reshape(%10, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %13 = reshape(%11, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %14 = @func_757(%12, %13) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
  %15 = right_shift(%3, %4) /* ty=Tensor[(2, 7, 14), uint32] */;
  %16 = %9.2;
  %17 = %14.0;
  (%15, %16, %var_1355, %17, %var_1368)
}

def @func_2461(%var_2423: Tensor[(6, 4, 5), float32], %var_2437: Tensor[(756), float32], %var_2439: Tensor[(768), int8], %var_2451: Tensor[(168), float64]) -> (Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) {
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %20 = reshape(%18, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %21 = reshape(%19, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %22 = @func_757(%20, %21) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
  %23 = cast(%var_2437, dtype="float32") /* ty=Tensor[(756), float32] */;
  %24 = cast(%var_2437, dtype="float32") /* ty=Tensor[(756), float32] */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 117), uint8] */, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %26 = cast(%var_2439, dtype="int8") /* ty=Tensor[(768), int8] */;
  %27 = reshape(%23, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %28 = reshape(%24, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %29 = reshape(%25, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %30 = reshape(%26, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %31 = @func_2346(%27, %28, %29, %30) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %32 = cast(%var_2423, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %33 = log(%32) /* ty=Tensor[(6, 4, 5), float32] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %35 = cast(%var_2451, dtype="float64") /* ty=Tensor[(168), float64] */;
  %36 = reshape(%35, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
  %37 = %22.1;
  %38 = %31.4;
  %39 = log10(%34) /* ty=Tensor[(6, 4, 5), float64] */;
  %40 = @func_2042(%36) /* ty=Tensor[(1, 12, 14), float64] */;
  (%37, meta[relay.Constant][0] /* ty=Tensor[(280), float64] */, %38, %var_2437, meta[relay.Constant][1] /* ty=Tensor[(6, 117), uint8] */, %var_2439, %39, %40, %var_2451)
}

def @func_7171(%var_7086: Tensor[(6, 10, 12), uint16], %var_7132: Tensor[(9, 100), uint8]) -> (Tensor[(6, 10, 12), int32], Tensor[(16, 12, 4), bool], Tensor[(768), int8], Tensor[(6, 10, 12), int32], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(1, 150), uint8], Tensor[(9, 100), float32], Tensor[(6, 10, 12), float32]) {
  %41 = cast(%var_7086, dtype="bool") /* ty=Tensor[(6, 10, 12), bool] */;
  %42 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="bool") /* ty=Tensor[(6, 10, 12), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = less(%43, %44) /* ty=Tensor[(6, 10, 12), bool] */;
  %46 = cast(%var_7086, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %51 = reshape(%50, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %52 = @func_1237(%51) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %53 = cast(%45, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %54 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %57 = divide(%55, %56) /* ty=Tensor[(6, 10, 12), float64] */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%57, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 150), uint8] */, dtype="uint8") /* ty=Tensor[(1, 150), uint8] */;
  %65 = cast(%var_7132, dtype="uint8") /* ty=Tensor[(9, 100), uint8] */;
  %66 = cast(%var_7132, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %67 = reshape(%62, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %68 = reshape(%63, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %69 = reshape(%64, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %70 = reshape(%65, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %71 = reshape(%66, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %72 = @func_7009(%67, %68, %69, %70, %71) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) */;
  %73 = cast(%var_7132, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %74 = cast(%45, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %75 = exp(%74) /* ty=Tensor[(6, 10, 12), float64] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(6, 10, 12), float32] */;
  %77 = bitwise_or(%48, %49) /* ty=Tensor[(6, 10, 12), int32] */;
  %78 = %52.0;
  %79 = left_shift(%60, %61) /* ty=Tensor[(6, 10, 12), int32] */;
  %80 = %72.2;
  %81 = asinh(%73) /* ty=Tensor[(9, 100), float32] */;
  %82 = log2(%76) /* ty=Tensor[(6, 10, 12), float32] */;
  (%77, %78, meta[relay.Constant][3] /* ty=Tensor[(768), int8] */, %79, %80, meta[relay.Constant][4] /* ty=Tensor[(648), bool] */, meta[relay.Constant][5] /* ty=Tensor[(1, 150), uint8] */, %81, %82)
}

def @func_9309() -> (Tensor[(1, 16, 7), float32],) {
  %83 = @func_9029() /* ty=Tensor[(1, 16, 7), float32] */;
  (%83,)
}

def @func_7340(%var_7311: Tensor[(3, 4, 5), float64], %var_7314: Tensor[(3, 4, 5), float64], %var_7331: Tensor[(144), int64], %var_7332: Tensor[(196), uint32], %var_7333: Tensor[(6, 117), uint8]) -> (Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %84 = cast(%var_7311, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %85 = atanh(%84) /* ty=Tensor[(3, 4, 5), float64] */;
  %86 = cast(%var_7314, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = greater_equal(%88, %89) /* ty=Tensor[(3, 4, 5), bool] */;
  %91 = cast(%var_7311, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 4, 5), float64] */, dtype="uint8") /* ty=Tensor[(3, 4, 5), uint8] */;
  %96 = shape_of(%var_7314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_7314, dtype="uint8") /* ty=Tensor[(3, 4, 5), uint8] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %99 = cast(%var_7331, dtype="int64") /* ty=Tensor[(144), int64] */;
  %100 = cast(%var_7331, dtype="int64") /* ty=Tensor[(144), int64] */;
  %101 = cast(%var_7332, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %102 = cast(%var_7333, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %103 = reshape(%99, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %104 = reshape(%100, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %105 = reshape(%101, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
  %106 = reshape(%102, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %107 = @func_6724(%103, %104, %105, %106) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %108 = bitwise_and(%93, %94) /* ty=Tensor[(3, 4, 5), int16] */;
  %109 = multiply(%97, %98) /* ty=Tensor[(3, 4, 5), uint8] */;
  %110 = %107.2;
  (%108, %109, %110, %var_7331, %var_7332, %var_7333)
}

def @func_471(%var_461: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  %111 = cast(%var_461, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %112 = atanh(%111) /* ty=Tensor[(1, 14, 13), float64] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %114 = log(%113) /* ty=Tensor[(1, 14, 13), float64] */;
  (%114,)
}

def @func_8504(%var_8383: Tensor[(16, 13, 3), int32], %var_8384: Tensor[(16, 13, 3), int32], %var_8436: Tensor[(120), float32], %var_8437: Tensor[(756), float32], %var_8439: Tensor[(84, 2), float64], %var_8447: Tensor[(150, 1), uint8], %var_8452: Tensor[(1, 135), float32], %var_8465: Tensor[(1680), float64], %var_8477: int8, %var_8479: Tensor[(336), float32]) -> (Tensor[(16, 13, 3), int32], Tensor[(16, 13, 3), float32], Tensor[(168), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(84, 2), float64], Tensor[(1, 12, 14), float64], Tensor[(150, 1), uint8], Tensor[(450, 2), uint8], Tensor[(3, 5, 9), float32], Tensor[(1, 135), float32], Tensor[(182), float64], Tensor[(1680), float64], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(336), float32], int8, Tensor[(520), int8], Tensor[(336), float32]) {
  %115 = cast(%var_8384, dtype="int32") /* ty=Tensor[(16, 13, 3), int32] */;
  %116 = shape_of(%var_8383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_8383, dtype="int32") /* ty=Tensor[(16, 13, 3), int32] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %119 = cast(%var_8383, dtype="float32") /* ty=Tensor[(16, 13, 3), float32] */;
  %120 = cast(%var_8436, dtype="float32") /* ty=Tensor[(120), float32] */;
  %121 = cast(%var_8437, dtype="float32") /* ty=Tensor[(756), float32] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %123 = cast(%var_8439, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %124 = reshape(%120, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %125 = reshape(%121, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %126 = reshape(%122, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %127 = reshape(%123, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %128 = @func_2461(%124, %125, %126, %127) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
  %129 = cast(%var_8447, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(450, 2), uint8] */, dtype="uint8") /* ty=Tensor[(450, 2), uint8] */;
  %131 = reshape(%129, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %132 = reshape(%130, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %133 = @func_5587(%131, %132) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %134 = cast(%var_8452, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %135 = reshape(%134, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %136 = @func_1698(%135) /* ty=(Tensor[(3, 5, 9), float32],) */;
  %137 = cast(%var_8465, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %138 = reshape(%137, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %139 = @func_2883(%138) /* ty=(Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */;
  %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %142 = reshape(%140, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %143 = reshape(%141, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %144 = cast(%var_8477, dtype="int8") /* ty=int8 */;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(520), int8] */, dtype="int8") /* ty=Tensor[(520), int8] */;
  %146 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %147 = cast(%var_8479, dtype="float32") /* ty=Tensor[(336), float32] */;
  %148 = %139.2;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(182), float64] */;
  %150 = reshape(%144, newshape=[]) /* ty=int8 */;
  %151 = reshape(%145, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
  %152 = reshape(%146, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %153 = reshape(%147, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %154 = reshape(%149, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %155 = @func_6479(%150, %151, %152, %153, %154) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
  %156 = logical_xor(%117, %118) /* ty=Tensor[(16, 13, 3), int32] */;
  %157 = erf(%119) /* ty=Tensor[(16, 13, 3), float32] */;
  %158 = %128.8;
  %159 = %133.1;
  %160 = %136.0;
  %161 = @func_874(%142, %143) /* ty=Tensor[(5, 14, 13), bool] */;
  %162 = %155.5;
  (%156, %157, %158, %var_8436, %var_8437, meta[relay.Constant][7] /* ty=Tensor[(768), int8] */, %var_8439, %159, %var_8447, meta[relay.Constant][8] /* ty=Tensor[(450, 2), uint8] */, %160, %var_8452, %148, %var_8465, %161, meta[relay.Constant][9] /* ty=Tensor[(910), float64] */, %162, %var_8477, meta[relay.Constant][10] /* ty=Tensor[(520), int8] */, %var_8479)
}

def @func_8336(%var_8315: Tensor[(910), float64]) -> (Tensor[(910), bool], Tensor[(8, 4, 15), float32], Tensor[(480), float64]) {
  %163 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %164 = %163.2;
  %165 = cast(%var_8315, dtype="bool") /* ty=Tensor[(910), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(1), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(910), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?), bool] */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %170 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %171 = reshape(%169, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %172 = reshape(%170, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
  %173 = less_equal(%167, %168) /* ty=Tensor[(910), bool] */;
  %174 = @func_5157(%171, %172) /* ty=Tensor[(8, 4, 15), float32] */;
  (%173, %174, meta[relay.Constant][11] /* ty=Tensor[(480), float64] */)
}

def @func_10466() -> (Tensor[(11, 3, 1), float64],) {
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 1), float64] */;
  %176 = asin(%175) /* ty=Tensor[(11, 3, 1), float64] */;
  (%176,)
}

def @func_6236(%var_6225: int16, %var_6226: Tensor[(1, 7, 4), int16]) -> (Tensor[(1, 7, 4), int16],) {
  %177 = cast(%var_6225, dtype="int16") /* ty=int16 */;
  %178 = cast(%var_6226, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
  %179 = add(%177, %178) /* ty=Tensor[(1, 7, 4), int16] */;
  (%179,)
}

def @func_10137() -> (Tensor[(5, 14, 13), float64], Tensor[(1, 16, 7), float32]) {
  %180 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %181 = %180.1;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
  %183 = asinh(%182) /* ty=Tensor[(5, 14, 13), float64] */;
  %184 = @func_9029() /* ty=Tensor[(1, 16, 7), float32] */;
  (%183, %184)
}

def @func_5587(%var_5525: Tensor[(10, 15, 1), uint8], %var_5526: Tensor[(10, 15, 6), uint8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) {
  %185 = cast(%var_5525, dtype="uint8") /* ty=Tensor[(10, 15, 1), uint8] */;
  %186 = cast(%var_5526, dtype="uint8") /* ty=Tensor[(10, 15, 6), uint8] */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
  %188 = reshape(%187, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
  %189 = bitwise_or(%185, %186) /* ty=Tensor[(10, 15, 6), uint8] */;
  %190 = @func_2042(%188) /* ty=Tensor[(1, 12, 14), float64] */;
  (%189, %190, meta[relay.Constant][13] /* ty=Tensor[(168, 1), float64] */)
}

def @func_8975(%var_8949: Tensor[(135), float32], %var_8957: Tensor[(336), float32], %var_8958: Tensor[(13, 14), float64]) -> (Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) {
  %191 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
  %194 = log(%193) /* ty=Tensor[(1, 16, 7), float32] */;
  %195 = cast(%192, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = cast(%var_8949, dtype="float32") /* ty=Tensor[(135), float32] */;
  %200 = reshape(%199, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %201 = @func_1698(%200) /* ty=(Tensor[(3, 5, 9), float32],) */;
  %202 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %203 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 52), int8] */, dtype="int8") /* ty=Tensor[(10, 52), int8] */;
  %204 = cast(meta[relay.Constant][16] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %205 = cast(%var_8957, dtype="float32") /* ty=Tensor[(336), float32] */;
  %206 = cast(%var_8958, dtype="float64") /* ty=Tensor[(13, 14), float64] */;
  %207 = reshape(%202, newshape=[]) /* ty=int8 */;
  %208 = reshape(%203, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
  %209 = reshape(%204, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %210 = reshape(%205, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %211 = reshape(%206, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %212 = @func_6479(%207, %208, %209, %210, %211) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
  %213 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %214 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %215 = reshape(%213, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
  %216 = reshape(%214, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
  %217 = not_equal(%197, %198) /* ty=Tensor[(?, 16, 7), bool] */;
  %218 = %201.0;
  %219 = %212.6;
  %220 = @func_6742(%215, %216) /* ty=Tensor[(8, 15, 4), float32] */;
  (%217, %218, %var_8949, %219, meta[relay.Constant][14] /* ty=int8 */, meta[relay.Constant][15] /* ty=Tensor[(10, 52), int8] */, meta[relay.Constant][16] /* ty=Tensor[(910), float64] */, %var_8957, %var_8958, %220, meta[relay.Constant][17] /* ty=Tensor[(480), float32] */)
}

def @func_7279(%var_7229: Tensor[(11, 10, 9), uint8], %var_7230: Tensor[(11, 10, 9), uint8], %var_7241: Tensor[(11, 10, 9), uint8], %var_7253: Tensor[(150), uint8], %var_7254: Tensor[(900), uint8], %var_7260: Tensor[(11, 10, 9), float64]) -> (Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), float64], Tensor[(168, 1), float32]) {
  %221 = cast(%var_7230, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %222 = shape_of(%var_7229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_7229, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %225 = logical_xor(%223, %224) /* ty=Tensor[(11, 10, 9), uint8] */;
  %226 = cast(%var_7241, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = power(%228, %229) /* ty=Tensor[(11, 10, 9), float64] */;
  %231 = cast(%var_7260, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = cast(%var_7241, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %236 = cast(%var_7253, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %237 = cast(%var_7254, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %238 = reshape(%236, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %239 = reshape(%237, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %240 = @func_5587(%238, %239) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %241 = %240.2;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
  %243 = tan(%242) /* ty=Tensor[(168, 1), float64] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %245 = equal(%233, %234) /* ty=Tensor[(11, 10, 9), bool] */;
  %246 = acos(%235) /* ty=Tensor[(11, 10, 9), float64] */;
  %247 = cos(%244) /* ty=Tensor[(168, 1), float32] */;
  (%var_7253, %var_7254, %245, %246, %247)
}

def @func_7876(%var_7867: Tensor[(196), uint32], %var_7868: Tensor[(6, 117), uint8]) -> (Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %249 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %250 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %251 = cast(%var_7867, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %252 = cast(%var_7868, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %253 = reshape(%249, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %254 = reshape(%250, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %255 = reshape(%251, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
  %256 = reshape(%252, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %257 = @func_6724(%253, %254, %255, %256) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %258 = erf(%248) /* ty=Tensor[(3, 12, 2), float32] */;
  %259 = %257.2;
  (%258, %259, meta[relay.Constant][19] /* ty=Tensor[(144), int64] */, %var_7867, %var_7868)
}

def @func_10425(%var_10385: float64, %var_10386: Tensor[(13, 14, 5), float64]) -> (Tensor[(13, 14, 5), float64],) {
  %260 = cast(%var_10385, dtype="float64") /* ty=float64 */;
  %261 = cast(%var_10386, dtype="float64") /* ty=Tensor[(13, 14, 5), float64] */;
  %262 = maximum(%260, %261) /* ty=Tensor[(13, 14, 5), float64] */;
  %263 = cast(%var_10385, dtype="float64") /* ty=float64 */;
  %264 = cast(%262, dtype="float64") /* ty=Tensor[(13, 14, 5), float64] */;
  %265 = floor_divide(%263, %264) /* ty=Tensor[(13, 14, 5), float64] */;
  (%265,)
}

def @func_10525(%var_10517: Tensor[(5, 11, 10), float64]) -> Tensor[(5, 11, 10), float64] {
  %266 = cast(%var_10517, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  log(%266) /* ty=Tensor[(5, 11, 10), float64] */
}

def @func_6724(%var_6691: Tensor[(3, 8, 6), int64], %var_6692: Tensor[(3, 8, 6), int64], %var_6713: Tensor[(98, 2), uint32], %var_6714: Tensor[(702), uint8]) -> (Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
  %267 = cast(%var_6691, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %268 = cos(%267) /* ty=Tensor[(3, 8, 6), float64] */;
  %269 = cast(%var_6692, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %270 = shape_of(%var_6691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_6691, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = equal(%271, %272) /* ty=Tensor[(3, 8, 6), bool] */;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %275 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%268, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(%var_6713, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
  %279 = cast(%var_6713, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
  %280 = cast(%var_6714, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %281 = cast(meta[relay.Constant][20] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %282 = reshape(%278, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
  %283 = reshape(%279, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
  %284 = reshape(%280, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %285 = reshape(%281, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
  %286 = @func_1372(%282, %283, %284, %285) /* ty=(Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) */;
  %287 = logical_and(%276, %277) /* ty=Tensor[(3, 8, 6), bool] */;
  %288 = %286.1;
  (%287, %288, %var_6713, %var_6714, meta[relay.Constant][20] /* ty=Tensor[(280), float64] */)
}

def @func_1056(%var_1040: Tensor[(6, 9, 13), uint8], %var_1041: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
  %289 = cast(%var_1041, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %290 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1040, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = cast(meta[relay.Constant][21] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %294 = cast(meta[relay.Constant][21] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %295 = reshape(%293, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %296 = reshape(%294, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %297 = not_equal(%291, %292) /* ty=Tensor[(6, 9, 13), bool] */;
  %298 = @func_874(%295, %296) /* ty=Tensor[(5, 14, 13), bool] */;
  (%297, %298, meta[relay.Constant][21] /* ty=Tensor[(910), float64] */)
}

def @func_9623(%var_9586: Tensor[(2, 135), float32], %var_9596: Tensor[(182), float64], %var_9609: Tensor[(120), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(2, 135), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(3, 5, 9), float32]) {
  %299 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %300 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 135), float32] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %301 = cast(%var_9586, dtype="bool") /* ty=Tensor[(2, 135), bool] */;
  %302 = cast(%var_9596, dtype="float64") /* ty=Tensor[(182), float64] */;
  %303 = reshape(%302, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %304 = @func_471(%303) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %305 = cast(%var_9609, dtype="float64") /* ty=Tensor[(120), float64] */;
  %306 = reshape(%305, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
  %307 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %308 = reshape(%307, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %309 = @func_1698(%308) /* ty=(Tensor[(3, 5, 9), float32],) */;
  %310 = %309.0;
  %311 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = %299.0;
  %316 = greater(%300, %301) /* ty=Tensor[(2, 135), bool] */;
  %317 = %304.0;
  %318 = @func_508(%306) /* ty=Tensor[(4, 15, 2), float64] */;
  %319 = power(%313, %314) /* ty=Tensor[(3, 5, 9), float32] */;
  (%315, %316, %317, %var_9596, %318, %var_9609, %319)
}

def @func_9009() -> Tensor[(1, 16, 7), float32] {
  %320 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %320.0
}

def @func_4164(%var_4137: Tensor[(6, 9, 15), float64], %var_4154: Tensor[(196), uint32], %var_4155: Tensor[(280), float64]) -> (Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
  %321 = cast(%var_4137, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  %322 = exp(%321) /* ty=Tensor[(6, 9, 15), float64] */;
  %323 = cast(%var_4137, dtype="bool") /* ty=Tensor[(6, 9, 15), bool] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="bool") /* ty=Tensor[(6, 9, 15), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = cast(meta[relay.Constant][23] /* ty=Tensor[(252, 4), float64] */, dtype="float64") /* ty=Tensor[(252, 4), float64] */;
  %328 = cast(%var_4154, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %329 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %330 = reshape(%327, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %331 = reshape(%328, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %332 = reshape(%329, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %333 = @func_3772(%330, %331, %332) /* ty=(Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %334 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %335 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %336 = reshape(%334, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %337 = reshape(%335, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %338 = @func_757(%336, %337) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
  %339 = greater_equal(%325, %326) /* ty=Tensor[(6, 9, 15), bool] */;
  %340 = %333.1;
  %341 = %338.0;
  (%339, %340, meta[relay.Constant][23] /* ty=Tensor[(252, 4), float64] */, %var_4154, %var_4155, %341)
}

def @func_5726(%var_5723: int64) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) {
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %343 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 300), uint32] */, dtype="uint32") /* ty=Tensor[(4, 300), uint32] */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %345 = reshape(%343, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %346 = reshape(%344, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %347 = @func_3467(%345, %346) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %348 = %347.2;
  %349 = cast(meta[relay.Constant][27] /* ty=Tensor[(18, 42), float32] */, dtype="bool") /* ty=Tensor[(18, 42), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(18, 42), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %353 = cast(meta[relay.Constant][27] /* ty=Tensor[(18, 42), float32] */, dtype="float64") /* ty=Tensor[(18, 42), float64] */;
  %354 = cast(%var_5723, dtype="int64") /* ty=int64 */;
  %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 300), uint32] */, dtype="uint32") /* ty=Tensor[(4, 300), uint32] */;
  %357 = cast(meta[relay.Constant][26] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %358 = reshape(%354, newshape=[]) /* ty=int64 */;
  %359 = reshape(%355, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), int64] */;
  %360 = reshape(%356, newshape=[1200]) /* ty=Tensor[(1200), uint32] */;
  %361 = reshape(%357, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %362 = @func_3515(%358, %359, %360, %361) /* ty=(Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) */;
  %363 = erf(%342) /* ty=Tensor[(1, 3, 8), float32] */;
  %364 = less(%351, %352) /* ty=Tensor[(18, 42), bool] */;
  %365 = rsqrt(%353) /* ty=Tensor[(18, 42), float64] */;
  %366 = %362.0;
  (%363, meta[relay.Constant][25] /* ty=Tensor[(4, 300), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(702), uint8] */, %364, %365, %366, %var_5723, meta[relay.Constant][28] /* ty=Tensor[(140), int64] */)
}

def @func_9466() -> (Tensor[(150), uint8],) {
  %367 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
  %368 = %367.2;
  (%368,)
}

def @func_8280() -> (Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %370 = cast(meta[relay.Constant][29] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %371 = reshape(%369, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %372 = reshape(%370, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %373 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  %374 = @func_874(%371, %372) /* ty=Tensor[(5, 14, 13), bool] */;
  (%373, %374, meta[relay.Constant][29] /* ty=Tensor[(910), float64] */)
}

def @func_8373() -> (Tensor[(1, 16, 7), float32],) {
  %375 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %376 = %375.0;
  (%376,)
}

def @func_757(%var_728: Tensor[(4, 5, 14), float64], %var_744: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) {
  %377 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 5, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %378 = shape_of(%var_728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_728, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %381 = cast(%var_744, dtype="int64") /* ty=Tensor[(4, 5, 14), int64] */;
  %382 = shape_of(%var_728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_728, dtype="int64") /* ty=Tensor[(4, 5, 14), int64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %385 = mod(%379, %380) /* ty=Tensor[(4, 5, 14), float64] */;
  %386 = bitwise_or(%383, %384) /* ty=Tensor[(4, 5, 14), int64] */;
  (%385, %386)
}

def @func_4258(%var_4236: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) {
  %387 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %388 = shape_of(%var_4236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_4236, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %392 = shape_of(%var_4236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_4236, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = logical_and(%389, %390) /* ty=Tensor[(14, 14, 9), bool] */;
  %396 = less(%393, %394) /* ty=Tensor[(14, 14, 9), bool] */;
  (%395, %396)
}

def @func_2346(%var_2279: Tensor[(7, 9, 12), float32], %var_2289: Tensor[(7, 9, 12), float32], %var_2305: Tensor[(702), uint8], %var_2343: Tensor[(64, 12), int8]) -> (Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) {
  %397 = cast(%var_2289, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %398 = shape_of(%var_2279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_2279, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %401 = cast(%var_2305, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %402 = cast(%var_2305, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %403 = reshape(%401, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %404 = reshape(%402, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %405 = @func_1056(%403, %404) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="uint64") /* ty=Tensor[(6, 9, 13), uint64] */;
  %408 = shape_of(%var_2305, dtype="int32") /* ty=Tensor[(1), int32] */;
  %409 = cast(%var_2305, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %411 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %412 = reshape(%411, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
  %413 = cast(%var_2279, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %414 = atanh(%413) /* ty=Tensor[(7, 9, 12), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %416 = cast(%var_2343, dtype="int8") /* ty=Tensor[(64, 12), int8] */;
  %417 = reshape(%416, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %418 = @func_1237(%417) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %419 = minimum(%399, %400) /* ty=Tensor[(7, 9, 12), float32] */;
  %420 = maximum(%409, %410) /* ty=Tensor[(702), uint64] */;
  %421 = @func_508(%412) /* ty=Tensor[(4, 15, 2), float64] */;
  %422 = acosh(%415) /* ty=Tensor[(7, 9, 12), float64] */;
  %423 = %418.0;
  (%419, %420, %421, meta[relay.Constant][33] /* ty=Tensor[(120), float64] */, %422, %423, %var_2343)
}

def @func_8120(%var_8092: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
  %424 = cast(%var_8092, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %425 = log(%424) /* ty=Tensor[(3, 11, 7), float32] */;
  (%425,)
}

def @func_10364() -> Tensor[(1, 16, 7), float32] {
  @func_8244() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9403(%var_9357: Tensor[(1764), bool], %var_9365: Tensor[(144), int64], %var_9373: Tensor[(900), uint8], %var_9379: Tensor[(8, 42), float32]) -> (Tensor[(1, 16, 7), float32], Tensor[(14, 14, 9), bool], Tensor[(10, 3, ?), float64], Tensor[(30), float64], Tensor[(60), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(280), float64], Tensor[(182), float64], Tensor[(135, 1), float32], Tensor[(8, 42), float32], Tensor[(182, 1), float64], Tensor[(1764), float32]) {
  %426 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %427 = cast(%var_9357, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %428 = reshape(%427, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
  %429 = @func_4258(%428) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) */;
  %430 = cast(meta[relay.Constant][34] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %431 = cast(meta[relay.Constant][35] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %432 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
  %433 = cast(meta[relay.Constant][36] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %434 = cast(meta[relay.Constant][37] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %435 = reshape(%430, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %436 = reshape(%431, newshape=[15, 4]) /* ty=Tensor[(15, 4), float64] */;
  %437 = reshape(%432, newshape=[144]) /* ty=Tensor[(144), int64] */;
  %438 = reshape(%433, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %439 = reshape(%434, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
  %440 = @func_8774(%435, %436, %437, %438, %439) /* ty=(Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
  %441 = cast(meta[relay.Constant][38] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %442 = cast(meta[relay.Constant][38] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %443 = cast(meta[relay.Constant][39] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %444 = cast(%var_9373, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %445 = cast(%var_9373, dtype="float32") /* ty=Tensor[(900), float32] */;
  %446 = reshape(%441, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %447 = reshape(%442, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %448 = reshape(%443, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %449 = reshape(%444, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %450 = reshape(%445, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %451 = @func_7009(%446, %447, %448, %449, %450) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) */;
  %452 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
  %453 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
  %454 = cast(meta[relay.Constant][36] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %455 = cast(meta[relay.Constant][37] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %456 = reshape(%452, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %457 = reshape(%453, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %458 = reshape(%454, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
  %459 = reshape(%455, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %460 = @func_6724(%456, %457, %458, %459) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %461 = cast(meta[relay.Constant][40] /* ty=Tensor[(135, 1), float32] */, dtype="float32") /* ty=Tensor[(135, 1), float32] */;
  %462 = cast(%var_9379, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
  %463 = cast(meta[relay.Constant][41] /* ty=Tensor[(182, 1), float64] */, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %464 = reshape(%461, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %465 = reshape(%462, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %466 = reshape(%463, newshape=[13, 14]) /* ty=Tensor[(13, 14), float64] */;
  %467 = @func_8975(%464, %465, %466) /* ty=(Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) */;
  %468 = cast(%var_9357, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %469 = %426.0;
  %470 = %429.0;
  %471 = %440.0;
  %472 = %451.2;
  %473 = %460.4;
  %474 = %467.3;
  %475 = sigmoid(%468) /* ty=Tensor[(1764), float32] */;
  (%469, %470, %471, meta[relay.Constant][34] /* ty=Tensor[(30), float64] */, meta[relay.Constant][35] /* ty=Tensor[(60), float64] */, %var_9365, meta[relay.Constant][36] /* ty=Tensor[(196), uint32] */, meta[relay.Constant][37] /* ty=Tensor[(702), uint8] */, %472, meta[relay.Constant][38] /* ty=Tensor[(648), bool] */, meta[relay.Constant][39] /* ty=Tensor[(150), uint8] */, %var_9373, %473, %474, meta[relay.Constant][40] /* ty=Tensor[(135, 1), float32] */, %var_9379, meta[relay.Constant][41] /* ty=Tensor[(182, 1), float64] */, %475)
}

def @func_8906() -> (Tensor[(1, 16, 7), float32],) {
  %476 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  (%476,)
}

def @func_9116() -> Tensor[(1, 16, 7), float32] {
  %477 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %477.0
}

def @func_9288() -> Tensor[(1, 16, 7), float32] {
  %478 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %478.0
}

def @func_7009(%var_6956: Tensor[(12, 6, 9), bool], %var_6957: Tensor[(12, 6, 9), bool], %var_6988: Tensor[(150), uint8], %var_6991: Tensor[(10, 15, 6), uint8], %var_7004: Tensor[(10, 15, 6), float32]) -> (Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) {
  %479 = cast(%var_6957, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %480 = shape_of(%var_6956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_6956, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = cast(%var_6988, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %484 = cast(meta[relay.Constant][42] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %485 = reshape(%483, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %486 = reshape(%484, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %487 = @func_5587(%485, %486) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %488 = %487.0;
  %489 = cast(%var_6991, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(%var_6991, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
  %494 = exp(%493) /* ty=Tensor[(10, 15, 6), float32] */;
  %495 = cast(%var_7004, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = logical_or(%481, %482) /* ty=Tensor[(12, 6, 9), bool] */;
  %500 = less(%491, %492) /* ty=Tensor[(10, 15, 6), bool] */;
  %501 = equal(%497, %498) /* ty=Tensor[(10, 15, 6), bool] */;
  (%499, %var_6988, meta[relay.Constant][42] /* ty=Tensor[(900), uint8] */, %500, %501)
}

def @func_10487() -> (Tensor[(1, 16, 7), float32],) {
  %502 = @func_9309() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %503 = %502.0;
  (%503,)
}

def @func_10073() -> (Tensor[(1, 16, 7), float32], Tensor[(910), float64], Tensor[(1, 702), uint8]) {
  %504 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %505 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 702), uint8] */, dtype="uint8") /* ty=Tensor[(1, 702), uint8] */;
  %506 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 702), uint8] */, dtype="uint8") /* ty=Tensor[(1, 702), uint8] */;
  %507 = reshape(%505, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %508 = reshape(%506, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %509 = @func_1056(%507, %508) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %510 = %504.0;
  %511 = %509.2;
  (%510, %511, meta[relay.Constant][43] /* ty=Tensor[(1, 702), uint8] */)
}

def @func_5157(%var_5144: Tensor[(8, 4, 15), float64], %var_5145: Tensor[(8, 4, 15), float64]) -> Tensor[(8, 4, 15), float32] {
  %512 = cast(%var_5145, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %513 = shape_of(%var_5144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_5144, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %516 = floor_mod(%514, %515) /* ty=Tensor[(8, 4, 15), float64] */;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  cosh(%517) /* ty=Tensor[(8, 4, 15), float32] */
}

def @func_6479(%var_6455: int8, %var_6456: Tensor[(4, 13, 10), int8], %var_6462: Tensor[(910), float64], %var_6469: Tensor[(336), float32], %var_6470: Tensor[(182), float64]) -> (Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) {
  %518 = cast(%var_6455, dtype="bool") /* ty=bool */;
  %519 = cast(%var_6456, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %520 = cast(%var_6462, dtype="float64") /* ty=Tensor[(910), float64] */;
  %521 = cast(%var_6462, dtype="float64") /* ty=Tensor[(910), float64] */;
  %522 = reshape(%520, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %523 = reshape(%521, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %524 = cast(%var_6456, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %525 = cast(%var_6469, dtype="float32") /* ty=Tensor[(336), float32] */;
  %526 = cast(%var_6469, dtype="float32") /* ty=Tensor[(336), float32] */;
  %527 = cast(%var_6470, dtype="float64") /* ty=Tensor[(182), float64] */;
  %528 = reshape(%525, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %529 = reshape(%526, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %530 = reshape(%527, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %531 = @func_1172(%528, %529, %530) /* ty=(Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) */;
  %532 = less(%518, %519) /* ty=Tensor[(4, 13, 10), bool] */;
  %533 = @func_874(%522, %523) /* ty=Tensor[(5, 14, 13), bool] */;
  %534 = sigmoid(%524) /* ty=Tensor[(4, 13, 10), float64] */;
  %535 = %531.1;
  (%532, %533, %var_6462, %534, %535, %var_6469, %var_6470)
}

def @func_9960() -> Tensor[(150), uint8] {
  %536 = @func_9466() /* ty=(Tensor[(150), uint8],) */;
  %536.0
}

def @func_10592() -> (Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) {
  %537 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %538 = %537.0;
  %539 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  (%538, %539)
}

def @func_6742(%var_6731: Tensor[(8, 15, 4), float32], %var_6732: Tensor[(8, 15, 4), float32]) -> Tensor[(8, 15, 4), float32] {
  %540 = cast(%var_6732, dtype="float32") /* ty=Tensor[(8, 15, 4), float32] */;
  %541 = shape_of(%var_6731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_6731, dtype="float32") /* ty=Tensor[(8, 15, 4), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%542, %543) /* ty=Tensor[(8, 15, 4), float32] */
}

def @func_9029() -> Tensor[(1, 16, 7), float32] {
  %544 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %544.0
}

def @func_9263(%var_9259: Tensor[(810), float64], %var_9261: Tensor[(1, 280), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(280), float64], Tensor[(810), float64], Tensor[(196), uint32], Tensor[(1, 280), float64]) {
  %545 = cast(%var_9259, dtype="float64") /* ty=Tensor[(810), float64] */;
  %546 = cast(meta[relay.Constant][44] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %547 = cast(%var_9261, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %548 = reshape(%545, newshape=[6, 9, 15]) /* ty=Tensor[(6, 9, 15), float64] */;
  %549 = reshape(%546, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %550 = reshape(%547, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %551 = @func_4164(%548, %549, %550) /* ty=(Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */;
  %552 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
  %553 = %551.4;
  (%552, %553, %var_9259, meta[relay.Constant][44] /* ty=Tensor[(196), uint32] */, %var_9261)
}

def @func_9858() -> Tensor[(1, 16, 7), float64] {
  @func_9212() /* ty=Tensor[(1, 16, 7), float64] */
}

def @func_7680(%var_7610: Tensor[(16, 16, 6), uint64], %var_7628: Tensor[(756), float32], %var_7630: Tensor[(168), float64], %var_7669: int16, %var_7670: Tensor[(14, 2), int16]) -> (Tensor[(16, 16, 6), uint64], Tensor[(7, 9, 12), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(168), float64], Tensor[(1, 12, 14), float64], Tensor[(16, 16, 6), float64], Tensor[(1, 7, 4), int16], int16, Tensor[(14, 2), int16]) {
  %554 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
  %555 = shape_of(%var_7610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_7610, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %558 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %559 = cast(%var_7628, dtype="float32") /* ty=Tensor[(756), float32] */;
  %560 = cast(meta[relay.Constant][47] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %561 = cast(%var_7630, dtype="float64") /* ty=Tensor[(168), float64] */;
  %562 = reshape(%558, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %563 = reshape(%559, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %564 = reshape(%560, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %565 = reshape(%561, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %566 = @func_2461(%562, %563, %564, %565) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
  %567 = cast(%var_7630, dtype="float64") /* ty=Tensor[(168), float64] */;
  %568 = reshape(%567, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
  %569 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 16, 6), uint64] */, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %570 = cast(%var_7669, dtype="int16") /* ty=int16 */;
  %571 = cast(%var_7670, dtype="int16") /* ty=Tensor[(14, 2), int16] */;
  %572 = reshape(%570, newshape=[]) /* ty=int16 */;
  %573 = reshape(%571, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), int16] */;
  %574 = @func_6236(%572, %573) /* ty=(Tensor[(1, 7, 4), int16],) */;
  %575 = left_shift(%556, %557) /* ty=Tensor[(16, 16, 6), uint64] */;
  %576 = %566.2;
  %577 = @func_2042(%568) /* ty=Tensor[(1, 12, 14), float64] */;
  %578 = exp(%569) /* ty=Tensor[(16, 16, 6), float64] */;
  %579 = %574.0;
  (%575, %576, meta[relay.Constant][46] /* ty=Tensor[(120), float32] */, %var_7628, meta[relay.Constant][47] /* ty=Tensor[(768), int8] */, %var_7630, %577, %578, %579, %var_7669, %var_7670)
}

def @func_1698(%var_1695: Tensor[(3, 5, 9), float32]) -> (Tensor[(3, 5, 9), float32],) {
  %580 = cast(%var_1695, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %581 = acos(%580) /* ty=Tensor[(3, 5, 9), float32] */;
  (%581,)
}

def @func_8774(%var_8755: Tensor[(10, 3, 1), float64], %var_8766: Tensor[(15, 4), float64], %var_8767: Tensor[(144), int64], %var_8768: Tensor[(196), uint32], %var_8769: Tensor[(6, 117), uint8]) -> (Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %582 = cast(%var_8755, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %583 = acos(%582) /* ty=Tensor[(10, 3, 1), float64] */;
  %584 = cast(%var_8755, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %588 = cast(%var_8766, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %589 = cast(%var_8766, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %590 = cast(%var_8767, dtype="int64") /* ty=Tensor[(144), int64] */;
  %591 = cast(%var_8768, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %592 = cast(%var_8769, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %593 = reshape(%588, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %594 = reshape(%589, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %595 = reshape(%590, newshape=[144]) /* ty=Tensor[(144), int64] */;
  %596 = reshape(%591, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %597 = reshape(%592, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
  %598 = @func_7340(%593, %594, %595, %596, %597) /* ty=(Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
  %599 = power(%586, %587) /* ty=Tensor[(10, 3, ?), float64] */;
  %600 = %598.4;
  (%599, %600, %var_8766, %var_8767, %var_8768, %var_8769)
}

def @func_10295(%var_10266: int64, %var_10272: Tensor[(910), float64]) -> (Tensor[(150), uint8], Tensor[(140), int64], int64, Tensor[(4, 13, 10), float64], Tensor[(520), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 12, 3), bool], Tensor[(360), int64]) {
  %601 = @func_9466() /* ty=(Tensor[(150), uint8],) */;
  %602 = cast(%var_10266, dtype="int64") /* ty=int64 */;
  %603 = reshape(%602, newshape=[]) /* ty=int64 */;
  %604 = @func_5726(%603) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) */;
  %605 = cast(%var_10266, dtype="int8") /* ty=int8 */;
  %606 = cast(meta[relay.Constant][48] /* ty=Tensor[(520), int8] */, dtype="int8") /* ty=Tensor[(520), int8] */;
  %607 = cast(%var_10272, dtype="float64") /* ty=Tensor[(910), float64] */;
  %608 = cast(meta[relay.Constant][49] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %609 = cast(meta[relay.Constant][50] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %610 = reshape(%605, newshape=[]) /* ty=int8 */;
  %611 = reshape(%606, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
  %612 = reshape(%607, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %613 = reshape(%608, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %614 = reshape(%609, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %615 = @func_6479(%610, %611, %612, %613, %614) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
  %616 = cast(%var_10266, dtype="int64") /* ty=int64 */;
  %617 = cast(meta[relay.Constant][51] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %618 = reshape(%616, newshape=[]) /* ty=int64 */;
  %619 = reshape(%617, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), int64] */;
  %620 = @func_2950(%618, %619) /* ty=(Tensor[(10, 12, 3), bool],) */;
  %621 = %601.0;
  %622 = %604.7;
  %623 = %615.3;
  %624 = %620.0;
  (%621, %622, %var_10266, %623, meta[relay.Constant][48] /* ty=Tensor[(520), int8] */, %var_10272, meta[relay.Constant][49] /* ty=Tensor[(336), float32] */, meta[relay.Constant][50] /* ty=Tensor[(182), float64] */, %624, meta[relay.Constant][51] /* ty=Tensor[(360), int64] */)
}

def @func_3737(%var_3708: Tensor[(60, 2), float64], %var_3712: Tensor[(54, 14), float32], %var_3713: Tensor[(702), uint8], %var_3714: Tensor[(768), int8]) -> (Tensor[(15, 5, 12), float32], Tensor[(4, 15, 2), float64], Tensor[(60, 2), float64], Tensor[(64, 12), int8], Tensor[(54, 14), float32], Tensor[(702), uint8], Tensor[(768), int8]) {
  %625 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
  %626 = cast(%var_3708, dtype="float64") /* ty=Tensor[(60, 2), float64] */;
  %627 = reshape(%626, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
  %628 = cast(%var_3712, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %629 = cast(%var_3712, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %630 = cast(%var_3713, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %631 = cast(%var_3714, dtype="int8") /* ty=Tensor[(768), int8] */;
  %632 = reshape(%628, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %633 = reshape(%629, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %634 = reshape(%630, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %635 = reshape(%631, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %636 = @func_2346(%632, %633, %634, %635) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %637 = log10(%625) /* ty=Tensor[(15, 5, 12), float32] */;
  %638 = @func_508(%627) /* ty=Tensor[(4, 15, 2), float64] */;
  %639 = %636.6;
  (%637, %638, %var_3708, %639, %var_3712, %var_3713, %var_3714)
}

def @func_2883(%var_2860: Tensor[(8, 14, 15), float64]) -> (Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %640 = cast(2.71274f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %641 = cast(%var_2860, dtype="float64") /* ty=Tensor[(8, 14, 15), float64] */;
  %642 = minimum(%640, %641) /* ty=Tensor[(8, 14, 15), float64] */;
  %643 = cast(%642, dtype="int16") /* ty=Tensor[(8, 14, 15), int16] */;
  %644 = shape_of(%var_2860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_2860, dtype="int16") /* ty=Tensor[(8, 14, 15), int16] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %647 = cast(meta[relay.Constant][53] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %648 = reshape(%647, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %649 = @func_471(%648) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %650 = logical_xor(%645, %646) /* ty=Tensor[(8, 14, 15), int16] */;
  %651 = %649.0;
  (%650, %651, meta[relay.Constant][53] /* ty=Tensor[(182), float64] */)
}

def @func_1172(%var_1123: Tensor[(7, 6, 8), float32], %var_1124: Tensor[(7, 6, 8), float32], %var_1134: Tensor[(182), float64]) -> (Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) {
  %652 = cast(%var_1124, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %653 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_1123, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = power(%654, %655) /* ty=Tensor[(7, 6, 8), float32] */;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %658 = shape_of(%var_1124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_1124, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = cast(%var_1134, dtype="float64") /* ty=Tensor[(182), float64] */;
  %662 = reshape(%661, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %663 = @func_471(%662) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %664 = cast(%var_1123, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %665 = atanh(%664) /* ty=Tensor[(7, 6, 8), float64] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %667 = asin(%666) /* ty=Tensor[(7, 6, 8), float64] */;
  %668 = cast(%667, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
  %669 = greater(%659, %660) /* ty=Tensor[(7, 6, 8), bool] */;
  %670 = %663.0;
  %671 = acos(%668) /* ty=Tensor[(7, 6, 8), float64] */;
  (%669, %670, %var_1134, %671)
}

def @func_8576(%var_8545: Tensor[(1, 16, 1), int8], %var_8560: Tensor[(98, 2), uint32], %var_8570: Tensor[(231), float32]) -> (Tensor[(1, 16, 1), bool], Tensor[(280), float64], Tensor[(144), int64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(3, 11, 7), float32], Tensor[(231), float32]) {
  %672 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %673 = cast(%var_8545, dtype="bool") /* ty=Tensor[(1, 16, 1), bool] */;
  %674 = cast(meta[relay.Constant][55] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %675 = cast(meta[relay.Constant][55] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %676 = cast(%var_8560, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
  %677 = cast(meta[relay.Constant][56] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %678 = reshape(%674, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %679 = reshape(%675, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
  %680 = reshape(%676, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
  %681 = reshape(%677, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %682 = @func_6724(%678, %679, %680, %681) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %683 = cast(%var_8570, dtype="float32") /* ty=Tensor[(231), float32] */;
  %684 = reshape(%683, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
  %685 = @func_8120(%684) /* ty=(Tensor[(3, 11, 7), float32],) */;
  %686 = less(%672, %673) /* ty=Tensor[(1, 16, 1), bool] */;
  %687 = %682.4;
  %688 = %685.0;
  (%686, %687, meta[relay.Constant][55] /* ty=Tensor[(144), int64] */, %var_8560, meta[relay.Constant][56] /* ty=Tensor[(702), uint8] */, %688, %var_8570)
}

def @func_10242(%var_10195: Tensor[(756), float32], %var_10196: Tensor[(702), uint8], %var_10229: Tensor[(168), float64]) -> (Tensor[(150), uint8], Tensor[(1, 16, 7), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(702), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(168), float64]) {
  %689 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %690 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %691 = cast(%var_10196, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %692 = cast(meta[relay.Constant][57] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %693 = reshape(%689, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %694 = reshape(%690, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %695 = reshape(%691, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %696 = reshape(%692, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %697 = @func_2346(%693, %694, %695, %696) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %698 = cast(meta[relay.Constant][58] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %699 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %700 = cast(meta[relay.Constant][57] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %701 = cast(%var_10229, dtype="float64") /* ty=Tensor[(168), float64] */;
  %702 = reshape(%698, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %703 = reshape(%699, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %704 = reshape(%700, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %705 = reshape(%701, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %706 = @func_2461(%702, %703, %704, %705) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
  %707 = @func_9960() /* ty=Tensor[(150), uint8] */;
  %708 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
  %709 = %697.5;
  %710 = %706.6;
  (%707, %708, %709, %var_10195, %var_10196, meta[relay.Constant][57] /* ty=Tensor[(768), int8] */, %710, meta[relay.Constant][58] /* ty=Tensor[(120), float32] */, %var_10229)
}

def @func_10170() -> (Tensor[(150), uint8],) {
  %711 = @func_9960() /* ty=Tensor[(150), uint8] */;
  (%711,)
}

def @main(%var_10674: Tensor[(6, 16, 7), float32], %var_10682: Tensor[(768), int8]) -> (Tensor[(6, 16, 7), uint32], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(1, 16, 7), float32], Tensor[(64, 12), float32]) {
  %712 = @func_9288() /* ty=Tensor[(1, 16, 7), float32] */;
  %713 = cast(%712, dtype="uint32") /* ty=Tensor[(1, 16, 7), uint32] */;
  %714 = cast(%var_10674, dtype="uint32") /* ty=Tensor[(6, 16, 7), uint32] */;
  %715 = @func_10592() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) */;
  %716 = cast(meta[relay.Constant][59] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %717 = cast(meta[relay.Constant][59] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %718 = cast(meta[relay.Constant][60] /* ty=Tensor[(6, 117), uint8] */, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %719 = cast(%var_10682, dtype="int8") /* ty=Tensor[(768), int8] */;
  %720 = reshape(%716, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %721 = reshape(%717, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %722 = reshape(%718, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %723 = reshape(%719, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %724 = @func_2346(%720, %721, %722, %723) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %725 = %724.6;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(64, 12), float32] */;
  %727 = right_shift(%713, %714) /* ty=Tensor[(6, 16, 7), uint32] */;
  %728 = %715.0;
  %729 = log2(%726) /* ty=Tensor[(64, 12), float32] */;
  (%727, meta[relay.Constant][59] /* ty=Tensor[(756), float32] */, meta[relay.Constant][60] /* ty=Tensor[(6, 117), uint8] */, %var_10682, %728, %729)
}

def @func_3467(%var_3420: Tensor[(5, 15, 16), uint32], %var_3456: Tensor[(702), uint8]) -> (Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) {
  %730 = cast(%var_3420, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
  %731 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(5, 15, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(meta[relay.Constant][61] /* ty=Tensor[(5, 15, 16), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %734 = cast(meta[relay.Constant][62] /* ty=Tensor[(18, 42), float32] */, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
  %735 = cast(meta[relay.Constant][62] /* ty=Tensor[(18, 42), float32] */, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
  %736 = cast(meta[relay.Constant][63] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %737 = cast(meta[relay.Constant][64] /* ty=Tensor[(32, 24), int8] */, dtype="int8") /* ty=Tensor[(32, 24), int8] */;
  %738 = reshape(%734, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %739 = reshape(%735, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %740 = reshape(%736, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %741 = reshape(%737, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %742 = @func_2346(%738, %739, %740, %741) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %743 = cast(meta[relay.Constant][64] /* ty=Tensor[(32, 24), int8] */, dtype="int8") /* ty=Tensor[(32, 24), int8] */;
  %744 = reshape(%743, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %745 = @func_1237(%744) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %746 = cast(%var_3456, dtype="int16") /* ty=Tensor[(702), int16] */;
  %747 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(702), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %748 = cast(meta[relay.Constant][63] /* ty=Tensor[(702), uint8] */, dtype="int16") /* ty=Tensor[(702), int16] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), int16] */;
  %750 = logical_xor(%732, %733) /* ty=Tensor[(5, 15, 16), uint32] */;
  %751 = %742.3;
  %752 = %745.0;
  %753 = bitwise_xor(%748, %749) /* ty=Tensor[(702), int16] */;
  (%750, %751, meta[relay.Constant][62] /* ty=Tensor[(18, 42), float32] */, meta[relay.Constant][64] /* ty=Tensor[(32, 24), int8] */, %752, %753)
}

def @func_8244() -> Tensor[(1, 16, 7), float32] {
  %754 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
  sqrt(%754) /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_8888(%var_8872: Tensor[(1200), uint32]) -> (Tensor[(7, 1, 7), float32], Tensor[(120), float64], Tensor[(1200), uint32], Tensor[(702), uint8]) {
  %755 = cast(meta[relay.Constant][66] /* ty=Tensor[(7, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %756 = cast(%var_8872, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %757 = cast(meta[relay.Constant][67] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %758 = reshape(%756, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %759 = reshape(%757, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %760 = @func_3467(%758, %759) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %761 = log10(%755) /* ty=Tensor[(7, 1, 7), float32] */;
  %762 = %760.1;
  (%761, %762, %var_8872, meta[relay.Constant][67] /* ty=Tensor[(702), uint8] */)
}

def @func_3515(%var_3472: int64, %var_3473: Tensor[(14, 1, 10), int64], %var_3509: Tensor[(1200), uint32], %var_3510: Tensor[(702), uint8]) -> (Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) {
  %763 = cast(%var_3472, dtype="int64") /* ty=int64 */;
  %764 = cast(%var_3473, dtype="int64") /* ty=Tensor[(14, 1, 10), int64] */;
  %765 = cast(%var_3473, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %766 = acosh(%765) /* ty=Tensor[(14, 1, 10), float32] */;
  %767 = cast(%766, dtype="int32") /* ty=Tensor[(14, 1, 10), int32] */;
  %768 = cast(%var_3472, dtype="int32") /* ty=int32 */;
  %769 = cast(%var_3509, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %770 = cast(%var_3510, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %771 = reshape(%769, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %772 = reshape(%770, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %773 = @func_3467(%771, %772) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %774 = add(%763, %764) /* ty=Tensor[(14, 1, 10), int64] */;
  %775 = subtract(%767, %768) /* ty=Tensor[(14, 1, 10), int32] */;
  %776 = %773.4;
  (%774, %775, %776, %var_3509, %var_3510)
}

def @func_3772(%var_3759: Tensor[(9, 14, 8), float64], %var_3766: Tensor[(196), uint32], %var_3768: Tensor[(280), float64]) -> (Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
  %777 = cast(%var_3759, dtype="float64") /* ty=Tensor[(9, 14, 8), float64] */;
  %778 = cast(%var_3766, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %779 = cast(%var_3766, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %780 = cast(meta[relay.Constant][68] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %781 = cast(%var_3768, dtype="float64") /* ty=Tensor[(280), float64] */;
  %782 = reshape(%778, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
  %783 = reshape(%779, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
  %784 = reshape(%780, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %785 = reshape(%781, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
  %786 = @func_1372(%782, %783, %784, %785) /* ty=(Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) */;
  %787 = sigmoid(%777) /* ty=Tensor[(9, 14, 8), float64] */;
  %788 = %786.1;
  (%787, %788, %var_3766, meta[relay.Constant][68] /* ty=Tensor[(702), uint8] */, %var_3768)
}

def @func_2950(%var_2941: int64, %var_2942: Tensor[(10, 12, 3), int64]) -> (Tensor[(10, 12, 3), bool],) {
  %789 = cast(%var_2941, dtype="bool") /* ty=bool */;
  %790 = cast(%var_2942, dtype="bool") /* ty=Tensor[(10, 12, 3), bool] */;
  %791 = equal(%789, %790) /* ty=Tensor[(10, 12, 3), bool] */;
  (%791,)
}

def @func_2042(%var_2028: Tensor[(1, 12, 14), float64]) -> Tensor[(1, 12, 14), float64] {
  %792 = cast(%var_2028, dtype="float64") /* ty=Tensor[(1, 12, 14), float64] */;
  log10(%792) /* ty=Tensor[(1, 12, 14), float64] */
}

def @func_9239() -> Tensor[(900), uint8] {
  %793 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
  %793.3
}

def @func_9949() -> (Tensor[(900), uint8], Tensor[(16, 12, 4), uint64], Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float64], Tensor[(1, 16, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(1, 16, 7), float64], Tensor[(910), float64]) {
  %794 = @func_9722() /* ty=(Tensor[(900), uint8],) */;
  %795 = cast(meta[relay.Constant][69] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %796 = reshape(%795, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %797 = @func_1237(%796) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %798 = %797.0;
  %799 = cast(meta[relay.Constant][69] /* ty=Tensor[(768), int8] */, dtype="uint64") /* ty=Tensor[(768), uint64] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="uint64") /* ty=Tensor[(16, 12, 4), uint64] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %803 = cast(meta[relay.Constant][70] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %804 = reshape(%803, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %805 = @func_471(%804) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %806 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %807 = %794.0;
  %808 = multiply(%801, %802) /* ty=Tensor[(16, 12, 4), uint64] */;
  %809 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
  %810 = @func_9212() /* ty=Tensor[(1, 16, 7), float64] */;
  %811 = @func_9288() /* ty=Tensor[(1, 16, 7), float32] */;
  %812 = %805.0;
  %813 = @func_9858() /* ty=Tensor[(1, 16, 7), float64] */;
  %814 = %806.2;
  (%807, %808, %809, %810, %811, %812, meta[relay.Constant][70] /* ty=Tensor[(182), float64] */, %813, %814)
}

def @func_8045(%var_7985: Tensor[(9, 2, 13), float32], %var_7992: Tensor[(234, 3), uint8], %var_8040: Tensor[(630), int16]) -> (Tensor[(9, 2, 13), float32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(234, 3), uint8], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 9, 7), int16], Tensor[(630), int16]) {
  %815 = cast(meta[relay.Constant][71] /* ty=Tensor[(9, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %816 = shape_of(%var_7985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%var_7985, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %819 = cast(meta[relay.Constant][72] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %820 = cast(%var_7992, dtype="uint8") /* ty=Tensor[(234, 3), uint8] */;
  %821 = reshape(%819, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %822 = reshape(%820, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
  %823 = @func_7876(%821, %822) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
  %824 = cast(meta[relay.Constant][73] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %825 = cast(meta[relay.Constant][73] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %826 = cast(meta[relay.Constant][74] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %827 = reshape(%824, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %828 = reshape(%825, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %829 = reshape(%826, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %830 = @func_1172(%827, %828, %829) /* ty=(Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) */;
  %831 = cast(%var_8040, dtype="int16") /* ty=Tensor[(630), int16] */;
  %832 = reshape(%831, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), int16] */;
  %833 = floor_mod(%817, %818) /* ty=Tensor[(9, 2, 13), float32] */;
  %834 = %823.2;
  %835 = %830.1;
  %836 = @func_5437(%832) /* ty=Tensor[(10, 9, 7), int16] */;
  (%833, %834, meta[relay.Constant][72] /* ty=Tensor[(196), uint32] */, %var_7992, %835, meta[relay.Constant][73] /* ty=Tensor[(336), float32] */, meta[relay.Constant][74] /* ty=Tensor[(182), float64] */, %836, %var_8040)
}

def @func_9212() -> Tensor[(1, 16, 7), float64] {
  %837 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(1, 16, 7), float64] */;
  atan(%838) /* ty=Tensor[(1, 16, 7), float64] */
}

def @func_8730() -> (Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) {
  %839 = cast(meta[relay.Constant][75] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %840 = cast(meta[relay.Constant][76] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %841 = reshape(%839, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %842 = reshape(%840, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %843 = @func_5587(%841, %842) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %844 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  %845 = %843.0;
  (%844, %845, meta[relay.Constant][75] /* ty=Tensor[(150), uint8] */, meta[relay.Constant][76] /* ty=Tensor[(900), uint8] */)
}

def @func_874(%var_865: Tensor[(5, 14, 13), float64], %var_866: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), bool] {
  %846 = cast(%var_866, dtype="bool") /* ty=Tensor[(5, 14, 13), bool] */;
  %847 = shape_of(%var_865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_865, dtype="bool") /* ty=Tensor[(5, 14, 13), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%848, %849) /* ty=Tensor[(5, 14, 13), bool] */
}

def @func_508(%var_502: Tensor[(4, 15, 2), float64]) -> Tensor[(4, 15, 2), float64] {
  %850 = cast(meta[relay.Constant][77] /* ty=Tensor[(4, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %851 = shape_of(%var_502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%var_502, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%852, %853) /* ty=Tensor[(4, 15, 2), float64] */
}

def @func_5437(%var_5427: Tensor[(10, 9, 7), int16]) -> Tensor[(10, 9, 7), int16] {
  %854 = cast(meta[relay.Constant][78] /* ty=Tensor[(10, 9, 7), int16] */, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %855 = shape_of(%var_5427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_5427, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%856, %857) /* ty=Tensor[(10, 9, 7), int16] */
}

def @func_10629(%var_10617: Tensor[(3, 16, 13), uint16], %var_10618: Tensor[(3, 16, 13), uint16], %var_10626: Tensor[(360), int64]) -> (Tensor[(3, 16, 13), uint16], Tensor[(10, 12, 3), bool], int64, Tensor[(360), int64]) {
  %858 = cast(%var_10618, dtype="uint16") /* ty=Tensor[(3, 16, 13), uint16] */;
  %859 = shape_of(%var_10617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%var_10617, dtype="uint16") /* ty=Tensor[(3, 16, 13), uint16] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %862 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %863 = cast(%var_10626, dtype="int64") /* ty=Tensor[(360), int64] */;
  %864 = reshape(%862, newshape=[]) /* ty=int64 */;
  %865 = reshape(%863, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), int64] */;
  %866 = @func_2950(%864, %865) /* ty=(Tensor[(10, 12, 3), bool],) */;
  %867 = bitwise_xor(%860, %861) /* ty=Tensor[(3, 16, 13), uint16] */;
  %868 = %866.0;
  (%867, %868, 10 /* ty=int64 */, %var_10626)
}

def @func_9540(%var_9473: Tensor[(240, 2), float32], %var_9482: Tensor[(756), float32], %var_9483: Tensor[(702), uint8], %var_9484: Tensor[(768), int8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(8, 15, 4), float32], Tensor[(240, 2), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(768), int8], Tensor[(32, 24), int8], Tensor[(1200), uint32], Tensor[(702), float64]) {
  %869 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
  %870 = cast(%var_9473, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %871 = cast(%var_9473, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %872 = reshape(%870, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
  %873 = reshape(%871, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
  %874 = cast(%var_9482, dtype="float32") /* ty=Tensor[(756), float32] */;
  %875 = cast(%var_9482, dtype="float32") /* ty=Tensor[(756), float32] */;
  %876 = cast(%var_9483, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %877 = cast(%var_9484, dtype="int8") /* ty=Tensor[(768), int8] */;
  %878 = reshape(%874, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %879 = reshape(%875, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %880 = reshape(%876, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %881 = reshape(%877, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %882 = @func_2346(%878, %879, %880, %881) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %883 = cast(meta[relay.Constant][79] /* ty=Tensor[(1200), uint32] */, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %884 = cast(%var_9483, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %885 = reshape(%883, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %886 = reshape(%884, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %887 = @func_3467(%885, %886) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %888 = cast(%var_9483, dtype="float64") /* ty=Tensor[(702), float64] */;
  %889 = %869.1;
  %890 = @func_6742(%872, %873) /* ty=Tensor[(8, 15, 4), float32] */;
  %891 = %882.5;
  %892 = %887.3;
  %893 = log(%888) /* ty=Tensor[(702), float64] */;
  (%889, %890, %var_9473, %891, %var_9482, %var_9484, %892, meta[relay.Constant][79] /* ty=Tensor[(1200), uint32] */, %893)
}

def @func_1237(%var_1217: Tensor[(16, 12, 4), int8]) -> (Tensor[(16, 12, 4), bool],) {
  %894 = cast(%var_1217, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
  %895 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(16, 12, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(meta[relay.Constant][80] /* ty=Tensor[(16, 12, 4), int8] */, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %898 = less_equal(%896, %897) /* ty=Tensor[(16, 12, 4), bool] */;
  (%898,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6729(%var_6725: Tensor[(3, 8, 6), int64], %var_6726: Tensor[(3, 8, 6), int64], %var_6727: Tensor[(98, 2), uint32], %var_6728: Tensor[(702), uint8]) -> (Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
  %22 = fn (%var_6691: Tensor[(3, 8, 6), int64], %var_6692: Tensor[(3, 8, 6), int64], %var_6713: Tensor[(98, 2), uint32], %var_6714: Tensor[(702), uint8]) -> (Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
    %0 = cast(%var_6691, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
    %1 = cos(%0) /* ty=Tensor[(3, 8, 6), float64] */;
    %2 = cast(%var_6692, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
    %3 = shape_of(%var_6691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%var_6691, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %6 = equal(%4, %5) /* ty=Tensor[(3, 8, 6), bool] */;
    %7 = cast(%6, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
    %8 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%1, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %11 = cast(%var_6713, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
    %12 = cast(%var_6713, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
    %13 = cast(%var_6714, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %15 = reshape(%11, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
    %16 = reshape(%12, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
    %17 = reshape(%13, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %18 = reshape(%14, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
    %19 = @func_1372(%15, %16, %17, %18) /* ty=(Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) */;
    %20 = logical_and(%9, %10) /* ty=Tensor[(3, 8, 6), bool] */;
    %21 = %19.1;
    (%20, %21, %var_6713, %var_6714, meta[relay.Constant][0] /* ty=Tensor[(280), float64] */)
  };
  %22(%var_6725, %var_6726, %var_6727, %var_6728) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */
}

def @func_9949() -> (Tensor[(900), uint8], Tensor[(16, 12, 4), uint64], Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float64], Tensor[(1, 16, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(1, 16, 7), float64], Tensor[(910), float64]) {
  %23 = @func_9722() /* ty=(Tensor[(900), uint8],) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %25 = reshape(%24, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %26 = @func_1237(%25) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %27 = %26.0;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(768), int8] */, dtype="uint64") /* ty=Tensor[(768), uint64] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="uint64") /* ty=Tensor[(16, 12, 4), uint64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %33 = reshape(%32, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %34 = @func_471(%33) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %35 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %36 = %23.0;
  %37 = multiply(%30, %31) /* ty=Tensor[(16, 12, 4), uint64] */;
  %38 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
  %39 = @func_9212() /* ty=Tensor[(1, 16, 7), float64] */;
  %40 = @func_9288() /* ty=Tensor[(1, 16, 7), float32] */;
  %41 = %34.0;
  %42 = @func_9858() /* ty=Tensor[(1, 16, 7), float64] */;
  %43 = %35.2;
  (%36, %37, %38, %39, %40, %41, meta[relay.Constant][2] /* ty=Tensor[(182), float64] */, %42, %43)
}

def @func_8979(%var_8976: Tensor[(135), float32], %var_8977: Tensor[(336), float32], %var_8978: Tensor[(13, 14), float64]) -> (Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) {
  %74 = fn (%var_8949: Tensor[(135), float32], %var_8957: Tensor[(336), float32], %var_8958: Tensor[(13, 14), float64]) -> (Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) {
    %44 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
    %45 = %44.0;
    %46 = cast(%45, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
    %47 = log(%46) /* ty=Tensor[(1, 16, 7), float32] */;
    %48 = cast(%45, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
    %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%47, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %52 = cast(%var_8949, dtype="float32") /* ty=Tensor[(135), float32] */;
    %53 = reshape(%52, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
    %54 = @func_1698(%53) /* ty=(Tensor[(3, 5, 9), float32],) */;
    %55 = cast(meta[relay.Constant][3] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 52), int8] */, dtype="int8") /* ty=Tensor[(10, 52), int8] */;
    %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %58 = cast(%var_8957, dtype="float32") /* ty=Tensor[(336), float32] */;
    %59 = cast(%var_8958, dtype="float64") /* ty=Tensor[(13, 14), float64] */;
    %60 = reshape(%55, newshape=[]) /* ty=int8 */;
    %61 = reshape(%56, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
    %62 = reshape(%57, newshape=[910]) /* ty=Tensor[(910), float64] */;
    %63 = reshape(%58, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %64 = reshape(%59, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %65 = @func_6479(%60, %61, %62, %63, %64) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %68 = reshape(%66, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
    %69 = reshape(%67, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
    %70 = not_equal(%50, %51) /* ty=Tensor[(?, 16, 7), bool] */;
    %71 = %54.0;
    %72 = %65.6;
    %73 = @func_6742(%68, %69) /* ty=Tensor[(8, 15, 4), float32] */;
    (%70, %71, %var_8949, %72, meta[relay.Constant][3] /* ty=int8 */, meta[relay.Constant][4] /* ty=Tensor[(10, 52), int8] */, meta[relay.Constant][5] /* ty=Tensor[(910), float64] */, %var_8957, %var_8958, %73, meta[relay.Constant][6] /* ty=Tensor[(480), float32] */)
  };
  %74(%var_8976, %var_8977, %var_8978) /* ty=(Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) */
}

def @func_10525(%var_10517: Tensor[(5, 11, 10), float64]) -> Tensor[(5, 11, 10), float64] {
  %75 = cast(%var_10517, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  log(%75) /* ty=Tensor[(5, 11, 10), float64] */
}

def @func_5161(%var_5159: Tensor[(8, 4, 15), float64], %var_5160: Tensor[(8, 4, 15), float64]) -> Tensor[(8, 4, 15), float32] {
  @func_5157(%var_5159, %var_5160) /* ty=Tensor[(8, 4, 15), float32] */
}

def @func_2950(%var_2941: int64, %var_2942: Tensor[(10, 12, 3), int64]) -> (Tensor[(10, 12, 3), bool],) {
  %76 = cast(%var_2941, dtype="bool") /* ty=bool */;
  %77 = cast(%var_2942, dtype="bool") /* ty=Tensor[(10, 12, 3), bool] */;
  %78 = equal(%76, %77) /* ty=Tensor[(10, 12, 3), bool] */;
  (%78,)
}

def @func_2466(%var_2462: Tensor[(6, 4, 5), float32], %var_2463: Tensor[(756), float32], %var_2464: Tensor[(768), int8], %var_2465: Tensor[(168), float64]) -> (Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) {
  %102 = fn (%var_2423: Tensor[(6, 4, 5), float32], %var_2437: Tensor[(756), float32], %var_2439: Tensor[(768), int8], %var_2451: Tensor[(168), float64]) -> (Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) {
    %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %81 = reshape(%79, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %82 = reshape(%80, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %83 = @func_757(%81, %82) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
    %84 = cast(%var_2437, dtype="float32") /* ty=Tensor[(756), float32] */;
    %85 = cast(%var_2437, dtype="float32") /* ty=Tensor[(756), float32] */;
    %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 117), uint8] */, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
    %87 = cast(%var_2439, dtype="int8") /* ty=Tensor[(768), int8] */;
    %88 = reshape(%84, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %89 = reshape(%85, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %90 = reshape(%86, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %91 = reshape(%87, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
    %92 = @func_2346(%88, %89, %90, %91) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
    %93 = cast(%var_2423, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %94 = log(%93) /* ty=Tensor[(6, 4, 5), float32] */;
    %95 = cast(%94, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %96 = cast(%var_2451, dtype="float64") /* ty=Tensor[(168), float64] */;
    %97 = reshape(%96, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
    %98 = %83.1;
    %99 = %92.4;
    %100 = log10(%95) /* ty=Tensor[(6, 4, 5), float64] */;
    %101 = @func_2042(%97) /* ty=Tensor[(1, 12, 14), float64] */;
    (%98, meta[relay.Constant][7] /* ty=Tensor[(280), float64] */, %99, %var_2437, meta[relay.Constant][8] /* ty=Tensor[(6, 117), uint8] */, %var_2439, %100, %101, %var_2451)
  };
  %102(%var_2462, %var_2463, %var_2464, %var_2465) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */
}

def @func_6479(%var_6455: int8, %var_6456: Tensor[(4, 13, 10), int8], %var_6462: Tensor[(910), float64], %var_6469: Tensor[(336), float32], %var_6470: Tensor[(182), float64]) -> (Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) {
  %103 = cast(%var_6455, dtype="bool") /* ty=bool */;
  %104 = cast(%var_6456, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %105 = cast(%var_6462, dtype="float64") /* ty=Tensor[(910), float64] */;
  %106 = cast(%var_6462, dtype="float64") /* ty=Tensor[(910), float64] */;
  %107 = reshape(%105, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %108 = reshape(%106, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %109 = cast(%var_6456, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %110 = cast(%var_6469, dtype="float32") /* ty=Tensor[(336), float32] */;
  %111 = cast(%var_6469, dtype="float32") /* ty=Tensor[(336), float32] */;
  %112 = cast(%var_6470, dtype="float64") /* ty=Tensor[(182), float64] */;
  %113 = reshape(%110, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %114 = reshape(%111, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %115 = reshape(%112, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %116 = @func_1172(%113, %114, %115) /* ty=(Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) */;
  %117 = less(%103, %104) /* ty=Tensor[(4, 13, 10), bool] */;
  %118 = @func_874(%107, %108) /* ty=Tensor[(5, 14, 13), bool] */;
  %119 = sigmoid(%109) /* ty=Tensor[(4, 13, 10), float64] */;
  %120 = %116.1;
  (%117, %118, %var_6462, %119, %120, %var_6469, %var_6470)
}

def @func_2346(%var_2279: Tensor[(7, 9, 12), float32], %var_2289: Tensor[(7, 9, 12), float32], %var_2305: Tensor[(702), uint8], %var_2343: Tensor[(64, 12), int8]) -> (Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) {
  %121 = cast(%var_2289, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %122 = shape_of(%var_2279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%var_2279, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %125 = cast(%var_2305, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %126 = cast(%var_2305, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %127 = reshape(%125, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %128 = reshape(%126, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
  %129 = @func_1056(%127, %128) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="uint64") /* ty=Tensor[(6, 9, 13), uint64] */;
  %132 = shape_of(%var_2305, dtype="int32") /* ty=Tensor[(1), int32] */;
  %133 = cast(%var_2305, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %135 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %136 = reshape(%135, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
  %137 = cast(%var_2279, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %138 = atanh(%137) /* ty=Tensor[(7, 9, 12), float32] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %140 = cast(%var_2343, dtype="int8") /* ty=Tensor[(64, 12), int8] */;
  %141 = reshape(%140, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %142 = @func_1237(%141) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %143 = minimum(%123, %124) /* ty=Tensor[(7, 9, 12), float32] */;
  %144 = maximum(%133, %134) /* ty=Tensor[(702), uint64] */;
  %145 = @func_508(%136) /* ty=Tensor[(4, 15, 2), float64] */;
  %146 = acosh(%139) /* ty=Tensor[(7, 9, 12), float64] */;
  %147 = %142.0;
  (%143, %144, %145, meta[relay.Constant][9] /* ty=Tensor[(120), float64] */, %146, %147, %var_2343)
}

def @func_510(%var_509: Tensor[(4, 15, 2), float64]) -> Tensor[(4, 15, 2), float64] {
  %152 = fn (%var_502: Tensor[(4, 15, 2), float64]) -> Tensor[(4, 15, 2), float64] {
    %148 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
    %149 = shape_of(%var_502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%var_502, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%150, %151) /* ty=Tensor[(4, 15, 2), float64] */
  };
  %152(%var_509) /* ty=Tensor[(4, 15, 2), float64] */
}

def @func_10074() -> (Tensor[(1, 16, 7), float32], Tensor[(910), float64], Tensor[(1, 702), uint8]) {
  %161 = fn () -> (Tensor[(1, 16, 7), float32], Tensor[(910), float64], Tensor[(1, 702), uint8]) {
    %153 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
    %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 702), uint8] */, dtype="uint8") /* ty=Tensor[(1, 702), uint8] */;
    %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 702), uint8] */, dtype="uint8") /* ty=Tensor[(1, 702), uint8] */;
    %156 = reshape(%154, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
    %157 = reshape(%155, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
    %158 = @func_1056(%156, %157) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
    %159 = %153.0;
    %160 = %158.2;
    (%159, %160, meta[relay.Constant][11] /* ty=Tensor[(1, 702), uint8] */)
  };
  %161() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(910), float64], Tensor[(1, 702), uint8]) */
}

def @func_1059(%var_1057: Tensor[(6, 9, 13), uint8], %var_1058: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
  %172 = fn (%var_1040: Tensor[(6, 9, 13), uint8], %var_1041: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
    %162 = cast(%var_1041, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
    %163 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%var_1040, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %167 = cast(meta[relay.Constant][12] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %168 = reshape(%166, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
    %169 = reshape(%167, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
    %170 = not_equal(%164, %165) /* ty=Tensor[(6, 9, 13), bool] */;
    %171 = @func_874(%168, %169) /* ty=Tensor[(5, 14, 13), bool] */;
    (%170, %171, meta[relay.Constant][12] /* ty=Tensor[(910), float64] */)
  };
  %172(%var_1057, %var_1058) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */
}

def @func_4169(%var_4166: Tensor[(6, 9, 15), float64], %var_4167: Tensor[(196), uint32], %var_4168: Tensor[(280), float64]) -> (Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
  @func_4164(%var_4166, %var_4167, %var_4168) /* ty=(Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */
}

def @func_6742(%var_6731: Tensor[(8, 15, 4), float32], %var_6732: Tensor[(8, 15, 4), float32]) -> Tensor[(8, 15, 4), float32] {
  %173 = cast(%var_6732, dtype="float32") /* ty=Tensor[(8, 15, 4), float32] */;
  %174 = shape_of(%var_6731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_6731, dtype="float32") /* ty=Tensor[(8, 15, 4), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%175, %176) /* ty=Tensor[(8, 15, 4), float32] */
}

def @func_9961() -> Tensor[(150), uint8] {
  %178 = fn () -> Tensor[(150), uint8] {
    %177 = @func_9466() /* ty=(Tensor[(150), uint8],) */;
    %177.0
  };
  %178() /* ty=Tensor[(150), uint8] */
}

def @func_10528(%var_10526: Tensor[(5, 11, 10), float64]) -> Tensor[(5, 11, 10), float64] {
  @func_10525(%var_10526) /* ty=Tensor[(5, 11, 10), float64] */
}

def @func_4164(%var_4137: Tensor[(6, 9, 15), float64], %var_4154: Tensor[(196), uint32], %var_4155: Tensor[(280), float64]) -> (Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
  %179 = cast(%var_4137, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  %180 = exp(%179) /* ty=Tensor[(6, 9, 15), float64] */;
  %181 = cast(%var_4137, dtype="bool") /* ty=Tensor[(6, 9, 15), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(6, 9, 15), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(252, 4), float64] */, dtype="float64") /* ty=Tensor[(252, 4), float64] */;
  %186 = cast(%var_4154, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %187 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %188 = reshape(%185, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %189 = reshape(%186, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %190 = reshape(%187, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %191 = @func_3772(%188, %189, %190) /* ty=(Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
  %192 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %193 = cast(%var_4155, dtype="float64") /* ty=Tensor[(280), float64] */;
  %194 = reshape(%192, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %195 = reshape(%193, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %196 = @func_757(%194, %195) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
  %197 = greater_equal(%183, %184) /* ty=Tensor[(6, 9, 15), bool] */;
  %198 = %191.1;
  %199 = %196.0;
  (%197, %198, meta[relay.Constant][13] /* ty=Tensor[(252, 4), float64] */, %var_4154, %var_4155, %199)
}

def @main(%var_10674: Tensor[(6, 16, 7), float32], %var_10682: Tensor[(768), int8]) -> (Tensor[(6, 16, 7), uint32], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(1, 16, 7), float32], Tensor[(64, 12), float32]) {
  %200 = @func_9288() /* ty=Tensor[(1, 16, 7), float32] */;
  %201 = cast(%200, dtype="uint32") /* ty=Tensor[(1, 16, 7), uint32] */;
  %202 = cast(%var_10674, dtype="uint32") /* ty=Tensor[(6, 16, 7), uint32] */;
  %203 = @func_10594() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %205 = cast(meta[relay.Constant][14] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 117), uint8] */, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %207 = cast(%var_10682, dtype="int8") /* ty=Tensor[(768), int8] */;
  %208 = reshape(%204, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %209 = reshape(%205, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %210 = reshape(%206, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %211 = reshape(%207, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %212 = @func_2352(%208, %209, %210, %211) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %213 = %212.6;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(64, 12), float32] */;
  %215 = right_shift(%201, %202) /* ty=Tensor[(6, 16, 7), uint32] */;
  %216 = %203.0;
  %217 = log2(%214) /* ty=Tensor[(64, 12), float32] */;
  (%215, meta[relay.Constant][14] /* ty=Tensor[(756), float32] */, meta[relay.Constant][15] /* ty=Tensor[(6, 117), uint8] */, %var_10682, %216, %217)
}

def @func_8246() -> Tensor[(1, 16, 7), float32] {
  @func_8244() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9117() -> Tensor[(1, 16, 7), float32] {
  %219 = fn () -> Tensor[(1, 16, 7), float32] {
    %218 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
    %218.0
  };
  %219() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9290() -> Tensor[(1, 16, 7), float32] {
  @func_9288() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_7286(%var_7280: Tensor[(11, 10, 9), uint8], %var_7281: Tensor[(11, 10, 9), uint8], %var_7282: Tensor[(11, 10, 9), uint8], %var_7283: Tensor[(150), uint8], %var_7284: Tensor[(900), uint8], %var_7285: Tensor[(11, 10, 9), float64]) -> (Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), float64], Tensor[(168, 1), float32]) {
  %247 = fn (%var_7229: Tensor[(11, 10, 9), uint8], %var_7230: Tensor[(11, 10, 9), uint8], %var_7241: Tensor[(11, 10, 9), uint8], %var_7253: Tensor[(150), uint8], %var_7254: Tensor[(900), uint8], %var_7260: Tensor[(11, 10, 9), float64]) -> (Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), float64], Tensor[(168, 1), float32]) {
    %220 = cast(%var_7230, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
    %221 = shape_of(%var_7229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%var_7229, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %224 = logical_xor(%222, %223) /* ty=Tensor[(11, 10, 9), uint8] */;
    %225 = cast(%var_7241, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
    %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%224, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %229 = power(%227, %228) /* ty=Tensor[(11, 10, 9), float64] */;
    %230 = cast(%var_7260, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%229, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %234 = cast(%var_7241, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
    %235 = cast(%var_7253, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %236 = cast(%var_7254, dtype="uint8") /* ty=Tensor[(900), uint8] */;
    %237 = reshape(%235, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
    %238 = reshape(%236, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
    %239 = @func_5587(%237, %238) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
    %240 = %239.2;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
    %242 = tan(%241) /* ty=Tensor[(168, 1), float64] */;
    %243 = cast(%242, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %244 = equal(%232, %233) /* ty=Tensor[(11, 10, 9), bool] */;
    %245 = acos(%234) /* ty=Tensor[(11, 10, 9), float64] */;
    %246 = cos(%243) /* ty=Tensor[(168, 1), float32] */;
    (%var_7253, %var_7254, %244, %245, %246)
  };
  %247(%var_7280, %var_7281, %var_7282, %var_7283, %var_7284, %var_7285) /* ty=(Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), float64], Tensor[(168, 1), float32]) */
}

def @func_7686(%var_7681: Tensor[(16, 16, 6), uint64], %var_7682: Tensor[(756), float32], %var_7683: Tensor[(168), float64], %var_7684: int16, %var_7685: Tensor[(14, 2), int16]) -> (Tensor[(16, 16, 6), uint64], Tensor[(7, 9, 12), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(168), float64], Tensor[(1, 12, 14), float64], Tensor[(16, 16, 6), float64], Tensor[(1, 7, 4), int16], int16, Tensor[(14, 2), int16]) {
  %274 = fn (%var_7610: Tensor[(16, 16, 6), uint64], %var_7628: Tensor[(756), float32], %var_7630: Tensor[(168), float64], %var_7669: int16, %var_7670: Tensor[(14, 2), int16]) -> (Tensor[(16, 16, 6), uint64], Tensor[(7, 9, 12), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(168), float64], Tensor[(1, 12, 14), float64], Tensor[(16, 16, 6), float64], Tensor[(1, 7, 4), int16], int16, Tensor[(14, 2), int16]) {
    %248 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
    %249 = shape_of(%var_7610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%var_7610, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %252 = cast(meta[relay.Constant][17] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %253 = cast(%var_7628, dtype="float32") /* ty=Tensor[(756), float32] */;
    %254 = cast(meta[relay.Constant][18] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
    %255 = cast(%var_7630, dtype="float64") /* ty=Tensor[(168), float64] */;
    %256 = reshape(%252, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %257 = reshape(%253, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %258 = reshape(%254, newshape=[768]) /* ty=Tensor[(768), int8] */;
    %259 = reshape(%255, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %260 = @func_2461(%256, %257, %258, %259) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
    %261 = cast(%var_7630, dtype="float64") /* ty=Tensor[(168), float64] */;
    %262 = reshape(%261, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
    %263 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 16, 6), uint64] */, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %264 = cast(%var_7669, dtype="int16") /* ty=int16 */;
    %265 = cast(%var_7670, dtype="int16") /* ty=Tensor[(14, 2), int16] */;
    %266 = reshape(%264, newshape=[]) /* ty=int16 */;
    %267 = reshape(%265, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), int16] */;
    %268 = @func_6236(%266, %267) /* ty=(Tensor[(1, 7, 4), int16],) */;
    %269 = left_shift(%250, %251) /* ty=Tensor[(16, 16, 6), uint64] */;
    %270 = %260.2;
    %271 = @func_2042(%262) /* ty=Tensor[(1, 12, 14), float64] */;
    %272 = exp(%263) /* ty=Tensor[(16, 16, 6), float64] */;
    %273 = %268.0;
    (%269, %270, meta[relay.Constant][17] /* ty=Tensor[(120), float32] */, %var_7628, meta[relay.Constant][18] /* ty=Tensor[(768), int8] */, %var_7630, %271, %272, %273, %var_7669, %var_7670)
  };
  %274(%var_7681, %var_7682, %var_7683, %var_7684, %var_7685) /* ty=(Tensor[(16, 16, 6), uint64], Tensor[(7, 9, 12), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(168), float64], Tensor[(1, 12, 14), float64], Tensor[(16, 16, 6), float64], Tensor[(1, 7, 4), int16], int16, Tensor[(14, 2), int16]) */
}

def @func_3776(%var_3773: Tensor[(9, 14, 8), float64], %var_3774: Tensor[(196), uint32], %var_3775: Tensor[(280), float64]) -> (Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
  %287 = fn (%var_3759: Tensor[(9, 14, 8), float64], %var_3766: Tensor[(196), uint32], %var_3768: Tensor[(280), float64]) -> (Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) {
    %275 = cast(%var_3759, dtype="float64") /* ty=Tensor[(9, 14, 8), float64] */;
    %276 = cast(%var_3766, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %277 = cast(%var_3766, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %278 = cast(meta[relay.Constant][19] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %279 = cast(%var_3768, dtype="float64") /* ty=Tensor[(280), float64] */;
    %280 = reshape(%276, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
    %281 = reshape(%277, newshape=[2, 7, 14]) /* ty=Tensor[(2, 7, 14), uint32] */;
    %282 = reshape(%278, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %283 = reshape(%279, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
    %284 = @func_1372(%280, %281, %282, %283) /* ty=(Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) */;
    %285 = sigmoid(%275) /* ty=Tensor[(9, 14, 8), float64] */;
    %286 = %284.1;
    (%285, %286, %var_3766, meta[relay.Constant][19] /* ty=Tensor[(702), uint8] */, %var_3768)
  };
  %287(%var_3773, %var_3774, %var_3775) /* ty=(Tensor[(9, 14, 8), float64], Tensor[(910), float64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */
}

def @func_8280() -> (Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
  %288 = cast(meta[relay.Constant][20] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %289 = cast(meta[relay.Constant][20] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %290 = reshape(%288, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %291 = reshape(%289, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %292 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  %293 = @func_874(%290, %291) /* ty=Tensor[(5, 14, 13), bool] */;
  (%292, %293, meta[relay.Constant][20] /* ty=Tensor[(910), float64] */)
}

def @func_8375() -> (Tensor[(1, 16, 7), float32],) {
  @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */
}

def @func_471(%var_461: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  %294 = cast(%var_461, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %295 = atanh(%294) /* ty=Tensor[(1, 14, 13), float64] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %297 = log(%296) /* ty=Tensor[(1, 14, 13), float64] */;
  (%297,)
}

def @func_2044(%var_2043: Tensor[(1, 12, 14), float64]) -> Tensor[(1, 12, 14), float64] {
  %299 = fn (%var_2028: Tensor[(1, 12, 14), float64]) -> Tensor[(1, 12, 14), float64] {
    %298 = cast(%var_2028, dtype="float64") /* ty=Tensor[(1, 12, 14), float64] */;
    log10(%298) /* ty=Tensor[(1, 12, 14), float64] */
  };
  %299(%var_2043) /* ty=Tensor[(1, 12, 14), float64] */
}

def @func_9310() -> (Tensor[(1, 16, 7), float32],) {
  %301 = fn () -> (Tensor[(1, 16, 7), float32],) {
    %300 = @func_9029() /* ty=Tensor[(1, 16, 7), float32] */;
    (%300,)
  };
  %301() /* ty=(Tensor[(1, 16, 7), float32],) */
}

def @func_10295(%var_10266: int64, %var_10272: Tensor[(910), float64]) -> (Tensor[(150), uint8], Tensor[(140), int64], int64, Tensor[(4, 13, 10), float64], Tensor[(520), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 12, 3), bool], Tensor[(360), int64]) {
  %302 = @func_9466() /* ty=(Tensor[(150), uint8],) */;
  %303 = cast(%var_10266, dtype="int64") /* ty=int64 */;
  %304 = reshape(%303, newshape=[]) /* ty=int64 */;
  %305 = @func_5726(%304) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) */;
  %306 = cast(%var_10266, dtype="int8") /* ty=int8 */;
  %307 = cast(meta[relay.Constant][21] /* ty=Tensor[(520), int8] */, dtype="int8") /* ty=Tensor[(520), int8] */;
  %308 = cast(%var_10272, dtype="float64") /* ty=Tensor[(910), float64] */;
  %309 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %310 = cast(meta[relay.Constant][23] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %311 = reshape(%306, newshape=[]) /* ty=int8 */;
  %312 = reshape(%307, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
  %313 = reshape(%308, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %314 = reshape(%309, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %315 = reshape(%310, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %316 = @func_6479(%311, %312, %313, %314, %315) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
  %317 = cast(%var_10266, dtype="int64") /* ty=int64 */;
  %318 = cast(meta[relay.Constant][24] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %319 = reshape(%317, newshape=[]) /* ty=int64 */;
  %320 = reshape(%318, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), int64] */;
  %321 = @func_2950(%319, %320) /* ty=(Tensor[(10, 12, 3), bool],) */;
  %322 = %302.0;
  %323 = %305.7;
  %324 = %316.3;
  %325 = %321.0;
  (%322, %323, %var_10266, %324, meta[relay.Constant][21] /* ty=Tensor[(520), int8] */, %var_10272, meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, meta[relay.Constant][23] /* ty=Tensor[(182), float64] */, %325, meta[relay.Constant][24] /* ty=Tensor[(360), int64] */)
}

def @func_9029() -> Tensor[(1, 16, 7), float32] {
  %326 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %326.0
}

def @func_10633(%var_10630: Tensor[(3, 16, 13), uint16], %var_10631: Tensor[(3, 16, 13), uint16], %var_10632: Tensor[(360), int64]) -> (Tensor[(3, 16, 13), uint16], Tensor[(10, 12, 3), bool], int64, Tensor[(360), int64]) {
  %338 = fn (%var_10617: Tensor[(3, 16, 13), uint16], %var_10618: Tensor[(3, 16, 13), uint16], %var_10626: Tensor[(360), int64]) -> (Tensor[(3, 16, 13), uint16], Tensor[(10, 12, 3), bool], int64, Tensor[(360), int64]) {
    %327 = cast(%var_10618, dtype="uint16") /* ty=Tensor[(3, 16, 13), uint16] */;
    %328 = shape_of(%var_10617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%var_10617, dtype="uint16") /* ty=Tensor[(3, 16, 13), uint16] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %331 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %332 = cast(%var_10626, dtype="int64") /* ty=Tensor[(360), int64] */;
    %333 = reshape(%331, newshape=[]) /* ty=int64 */;
    %334 = reshape(%332, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), int64] */;
    %335 = @func_2950(%333, %334) /* ty=(Tensor[(10, 12, 3), bool],) */;
    %336 = bitwise_xor(%329, %330) /* ty=Tensor[(3, 16, 13), uint16] */;
    %337 = %335.0;
    (%336, %337, 10 /* ty=int64 */, %var_10626)
  };
  %338(%var_10630, %var_10631, %var_10632) /* ty=(Tensor[(3, 16, 13), uint16], Tensor[(10, 12, 3), bool], int64, Tensor[(360), int64]) */
}

def @func_6746(%var_6744: Tensor[(8, 15, 4), float32], %var_6745: Tensor[(8, 15, 4), float32]) -> Tensor[(8, 15, 4), float32] {
  @func_6742(%var_6744, %var_6745) /* ty=Tensor[(8, 15, 4), float32] */
}

def @func_8050(%var_8047: Tensor[(9, 2, 13), float32], %var_8048: Tensor[(234, 3), uint8], %var_8049: Tensor[(630), int16]) -> (Tensor[(9, 2, 13), float32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(234, 3), uint8], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 9, 7), int16], Tensor[(630), int16]) {
  @func_8045(%var_8047, %var_8048, %var_8049) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(234, 3), uint8], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 9, 7), int16], Tensor[(630), int16]) */
}

def @func_8891(%var_8889: Tensor[(1200), uint32]) -> (Tensor[(7, 1, 7), float32], Tensor[(120), float64], Tensor[(1200), uint32], Tensor[(702), uint8]) {
  @func_8888(%var_8889) /* ty=(Tensor[(7, 1, 7), float32], Tensor[(120), float64], Tensor[(1200), uint32], Tensor[(702), uint8]) */
}

def @func_9859() -> Tensor[(1, 16, 7), float64] {
  %339 = fn () -> Tensor[(1, 16, 7), float64] {
    @func_9212() /* ty=Tensor[(1, 16, 7), float64] */
  };
  %339() /* ty=Tensor[(1, 16, 7), float64] */
}

def @func_8774(%var_8755: Tensor[(10, 3, 1), float64], %var_8766: Tensor[(15, 4), float64], %var_8767: Tensor[(144), int64], %var_8768: Tensor[(196), uint32], %var_8769: Tensor[(6, 117), uint8]) -> (Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %340 = cast(%var_8755, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %341 = acos(%340) /* ty=Tensor[(10, 3, 1), float64] */;
  %342 = cast(%var_8755, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %346 = cast(%var_8766, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %347 = cast(%var_8766, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %348 = cast(%var_8767, dtype="int64") /* ty=Tensor[(144), int64] */;
  %349 = cast(%var_8768, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %350 = cast(%var_8769, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
  %351 = reshape(%346, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %352 = reshape(%347, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %353 = reshape(%348, newshape=[144]) /* ty=Tensor[(144), int64] */;
  %354 = reshape(%349, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %355 = reshape(%350, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
  %356 = @func_7340(%351, %352, %353, %354, %355) /* ty=(Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
  %357 = power(%344, %345) /* ty=Tensor[(10, 3, ?), float64] */;
  %358 = %356.4;
  (%357, %358, %var_8766, %var_8767, %var_8768, %var_8769)
}

def @func_5437(%var_5427: Tensor[(10, 9, 7), int16]) -> Tensor[(10, 9, 7), int16] {
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 9, 7), int16] */, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %360 = shape_of(%var_5427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_5427, dtype="int16") /* ty=Tensor[(10, 9, 7), int16] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%361, %362) /* ty=Tensor[(10, 9, 7), int16] */
}

def @func_3520(%var_3516: int64, %var_3517: Tensor[(14, 1, 10), int64], %var_3518: Tensor[(1200), uint32], %var_3519: Tensor[(702), uint8]) -> (Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) {
  %377 = fn (%var_3472: int64, %var_3473: Tensor[(14, 1, 10), int64], %var_3509: Tensor[(1200), uint32], %var_3510: Tensor[(702), uint8]) -> (Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) {
    %363 = cast(%var_3472, dtype="int64") /* ty=int64 */;
    %364 = cast(%var_3473, dtype="int64") /* ty=Tensor[(14, 1, 10), int64] */;
    %365 = cast(%var_3473, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
    %366 = acosh(%365) /* ty=Tensor[(14, 1, 10), float32] */;
    %367 = cast(%366, dtype="int32") /* ty=Tensor[(14, 1, 10), int32] */;
    %368 = cast(%var_3472, dtype="int32") /* ty=int32 */;
    %369 = cast(%var_3509, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
    %370 = cast(%var_3510, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %371 = reshape(%369, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
    %372 = reshape(%370, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %373 = @func_3467(%371, %372) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
    %374 = add(%363, %364) /* ty=Tensor[(14, 1, 10), int64] */;
    %375 = subtract(%367, %368) /* ty=Tensor[(14, 1, 10), int32] */;
    %376 = %373.4;
    (%374, %375, %376, %var_3509, %var_3510)
  };
  %377(%var_3516, %var_3517, %var_3518, %var_3519) /* ty=(Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) */
}

def @func_5726(%var_5723: int64) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) {
  %378 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %379 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 300), uint32] */, dtype="uint32") /* ty=Tensor[(4, 300), uint32] */;
  %380 = cast(meta[relay.Constant][28] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %381 = reshape(%379, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %382 = reshape(%380, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %383 = @func_3467(%381, %382) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %384 = %383.2;
  %385 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 42), float32] */, dtype="bool") /* ty=Tensor[(18, 42), bool] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %387 = cast(%384, dtype="bool") /* ty=Tensor[(18, 42), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %389 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 42), float32] */, dtype="float64") /* ty=Tensor[(18, 42), float64] */;
  %390 = cast(%var_5723, dtype="int64") /* ty=int64 */;
  %391 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 300), uint32] */, dtype="uint32") /* ty=Tensor[(4, 300), uint32] */;
  %393 = cast(meta[relay.Constant][28] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %394 = reshape(%390, newshape=[]) /* ty=int64 */;
  %395 = reshape(%391, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), int64] */;
  %396 = reshape(%392, newshape=[1200]) /* ty=Tensor[(1200), uint32] */;
  %397 = reshape(%393, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %398 = @func_3515(%394, %395, %396, %397) /* ty=(Tensor[(14, 1, 10), int64], Tensor[(14, 1, 10), int32], Tensor[(16, 12, 4), bool], Tensor[(1200), uint32], Tensor[(702), uint8]) */;
  %399 = erf(%378) /* ty=Tensor[(1, 3, 8), float32] */;
  %400 = less(%387, %388) /* ty=Tensor[(18, 42), bool] */;
  %401 = rsqrt(%389) /* ty=Tensor[(18, 42), float64] */;
  %402 = %398.0;
  (%399, meta[relay.Constant][27] /* ty=Tensor[(4, 300), uint32] */, meta[relay.Constant][28] /* ty=Tensor[(702), uint8] */, %400, %401, %402, %var_5723, meta[relay.Constant][30] /* ty=Tensor[(140), int64] */)
}

def @func_8120(%var_8092: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
  %403 = cast(%var_8092, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %404 = log(%403) /* ty=Tensor[(3, 11, 7), float32] */;
  (%404,)
}

def @func_8373() -> (Tensor[(1, 16, 7), float32],) {
  %405 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
  %406 = %405.0;
  (%406,)
}

def @func_10299(%var_10297: int64, %var_10298: Tensor[(910), float64]) -> (Tensor[(150), uint8], Tensor[(140), int64], int64, Tensor[(4, 13, 10), float64], Tensor[(520), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 12, 3), bool], Tensor[(360), int64]) {
  @func_10295(%var_10297, %var_10298) /* ty=(Tensor[(150), uint8], Tensor[(140), int64], int64, Tensor[(4, 13, 10), float64], Tensor[(520), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 12, 3), bool], Tensor[(360), int64]) */
}

def @func_9627(%var_9624: Tensor[(2, 135), float32], %var_9625: Tensor[(182), float64], %var_9626: Tensor[(120), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(2, 135), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(3, 5, 9), float32]) {
  %428 = fn (%var_9586: Tensor[(2, 135), float32], %var_9596: Tensor[(182), float64], %var_9609: Tensor[(120), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(2, 135), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(3, 5, 9), float32]) {
    %407 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
    %408 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 135), float32] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
    %409 = cast(%var_9586, dtype="bool") /* ty=Tensor[(2, 135), bool] */;
    %410 = cast(%var_9596, dtype="float64") /* ty=Tensor[(182), float64] */;
    %411 = reshape(%410, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %412 = @func_471(%411) /* ty=(Tensor[(1, 14, 13), float64],) */;
    %413 = cast(%var_9609, dtype="float64") /* ty=Tensor[(120), float64] */;
    %414 = reshape(%413, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
    %415 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
    %416 = reshape(%415, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
    %417 = @func_1698(%416) /* ty=(Tensor[(3, 5, 9), float32],) */;
    %418 = %417.0;
    %419 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
    %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%418, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %423 = %407.0;
    %424 = greater(%408, %409) /* ty=Tensor[(2, 135), bool] */;
    %425 = %412.0;
    %426 = @func_508(%414) /* ty=Tensor[(4, 15, 2), float64] */;
    %427 = power(%421, %422) /* ty=Tensor[(3, 5, 9), float32] */;
    (%423, %424, %425, %var_9596, %426, %var_9609, %427)
  };
  %428(%var_9624, %var_9625, %var_9626) /* ty=(Tensor[(1, 16, 7), float32], Tensor[(2, 135), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(3, 5, 9), float32]) */
}

def @func_10242(%var_10195: Tensor[(756), float32], %var_10196: Tensor[(702), uint8], %var_10229: Tensor[(168), float64]) -> (Tensor[(150), uint8], Tensor[(1, 16, 7), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(702), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(168), float64]) {
  %429 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %430 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %431 = cast(%var_10196, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %432 = cast(meta[relay.Constant][32] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %433 = reshape(%429, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %434 = reshape(%430, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %435 = reshape(%431, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %436 = reshape(%432, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
  %437 = @func_2346(%433, %434, %435, %436) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
  %438 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %439 = cast(%var_10195, dtype="float32") /* ty=Tensor[(756), float32] */;
  %440 = cast(meta[relay.Constant][32] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %441 = cast(%var_10229, dtype="float64") /* ty=Tensor[(168), float64] */;
  %442 = reshape(%438, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %443 = reshape(%439, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %444 = reshape(%440, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %445 = reshape(%441, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %446 = @func_2461(%442, %443, %444, %445) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
  %447 = @func_9960() /* ty=Tensor[(150), uint8] */;
  %448 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
  %449 = %437.5;
  %450 = %446.6;
  (%447, %448, %449, %var_10195, %var_10196, meta[relay.Constant][32] /* ty=Tensor[(768), int8] */, %450, meta[relay.Constant][33] /* ty=Tensor[(120), float32] */, %var_10229)
}

def @func_5157(%var_5144: Tensor[(8, 4, 15), float64], %var_5145: Tensor[(8, 4, 15), float64]) -> Tensor[(8, 4, 15), float32] {
  %451 = cast(%var_5145, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %452 = shape_of(%var_5144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_5144, dtype="float64") /* ty=Tensor[(8, 4, 15), float64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %455 = floor_mod(%453, %454) /* ty=Tensor[(8, 4, 15), float64] */;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  cosh(%456) /* ty=Tensor[(8, 4, 15), float32] */
}

def @func_10592() -> (Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) {
  %457 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %458 = %457.0;
  %459 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  (%458, %459)
}

def @func_2352(%var_2348: Tensor[(7, 9, 12), float32], %var_2349: Tensor[(7, 9, 12), float32], %var_2350: Tensor[(702), uint8], %var_2351: Tensor[(64, 12), int8]) -> (Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) {
  @func_2346(%var_2348, %var_2349, %var_2350, %var_2351) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */
}

def @func_8504(%var_8383: Tensor[(16, 13, 3), int32], %var_8384: Tensor[(16, 13, 3), int32], %var_8436: Tensor[(120), float32], %var_8437: Tensor[(756), float32], %var_8439: Tensor[(84, 2), float64], %var_8447: Tensor[(150, 1), uint8], %var_8452: Tensor[(1, 135), float32], %var_8465: Tensor[(1680), float64], %var_8477: int8, %var_8479: Tensor[(336), float32]) -> (Tensor[(16, 13, 3), int32], Tensor[(16, 13, 3), float32], Tensor[(168), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(84, 2), float64], Tensor[(1, 12, 14), float64], Tensor[(150, 1), uint8], Tensor[(450, 2), uint8], Tensor[(3, 5, 9), float32], Tensor[(1, 135), float32], Tensor[(182), float64], Tensor[(1680), float64], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(336), float32], int8, Tensor[(520), int8], Tensor[(336), float32]) {
  %460 = cast(%var_8384, dtype="int32") /* ty=Tensor[(16, 13, 3), int32] */;
  %461 = shape_of(%var_8383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_8383, dtype="int32") /* ty=Tensor[(16, 13, 3), int32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %464 = cast(%var_8383, dtype="float32") /* ty=Tensor[(16, 13, 3), float32] */;
  %465 = cast(%var_8436, dtype="float32") /* ty=Tensor[(120), float32] */;
  %466 = cast(%var_8437, dtype="float32") /* ty=Tensor[(756), float32] */;
  %467 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %468 = cast(%var_8439, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %469 = reshape(%465, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %470 = reshape(%466, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %471 = reshape(%467, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %472 = reshape(%468, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %473 = @func_2461(%469, %470, %471, %472) /* ty=(Tensor[(4, 5, 14), int64], Tensor[(280), float64], Tensor[(7, 9, 12), float64], Tensor[(756), float32], Tensor[(6, 117), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(1, 12, 14), float64], Tensor[(168), float64]) */;
  %474 = cast(%var_8447, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(450, 2), uint8] */, dtype="uint8") /* ty=Tensor[(450, 2), uint8] */;
  %476 = reshape(%474, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %477 = reshape(%475, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %478 = @func_5587(%476, %477) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %479 = cast(%var_8452, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %480 = reshape(%479, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %481 = @func_1698(%480) /* ty=(Tensor[(3, 5, 9), float32],) */;
  %482 = cast(%var_8465, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %483 = reshape(%482, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %484 = @func_2883(%483) /* ty=(Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */;
  %485 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %487 = reshape(%485, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %488 = reshape(%486, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %489 = cast(%var_8477, dtype="int8") /* ty=int8 */;
  %490 = cast(meta[relay.Constant][37] /* ty=Tensor[(520), int8] */, dtype="int8") /* ty=Tensor[(520), int8] */;
  %491 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %492 = cast(%var_8479, dtype="float32") /* ty=Tensor[(336), float32] */;
  %493 = %484.2;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(182), float64] */;
  %495 = reshape(%489, newshape=[]) /* ty=int8 */;
  %496 = reshape(%490, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), int8] */;
  %497 = reshape(%491, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %498 = reshape(%492, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %499 = reshape(%494, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %500 = @func_6479(%495, %496, %497, %498, %499) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */;
  %501 = logical_xor(%462, %463) /* ty=Tensor[(16, 13, 3), int32] */;
  %502 = erf(%464) /* ty=Tensor[(16, 13, 3), float32] */;
  %503 = %473.8;
  %504 = %478.1;
  %505 = %481.0;
  %506 = @func_874(%487, %488) /* ty=Tensor[(5, 14, 13), bool] */;
  %507 = %500.5;
  (%501, %502, %503, %var_8436, %var_8437, meta[relay.Constant][34] /* ty=Tensor[(768), int8] */, %var_8439, %504, %var_8447, meta[relay.Constant][35] /* ty=Tensor[(450, 2), uint8] */, %505, %var_8452, %493, %var_8465, %506, meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, %507, %var_8477, meta[relay.Constant][37] /* ty=Tensor[(520), int8] */, %var_8479)
}

def @func_10489() -> (Tensor[(1, 16, 7), float32],) {
  @func_10487() /* ty=(Tensor[(1, 16, 7), float32],) */
}

def @func_10138() -> (Tensor[(5, 14, 13), float64], Tensor[(1, 16, 7), float32]) {
  %513 = fn () -> (Tensor[(5, 14, 13), float64], Tensor[(1, 16, 7), float32]) {
    %508 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
    %509 = %508.1;
    %510 = cast(%509, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
    %511 = asinh(%510) /* ty=Tensor[(5, 14, 13), float64] */;
    %512 = @func_9029() /* ty=Tensor[(1, 16, 7), float32] */;
    (%511, %512)
  };
  %513() /* ty=(Tensor[(5, 14, 13), float64], Tensor[(1, 16, 7), float32]) */
}

def @func_8045(%var_7985: Tensor[(9, 2, 13), float32], %var_7992: Tensor[(234, 3), uint8], %var_8040: Tensor[(630), int16]) -> (Tensor[(9, 2, 13), float32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(234, 3), uint8], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64], Tensor[(10, 9, 7), int16], Tensor[(630), int16]) {
  %514 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %515 = shape_of(%var_7985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_7985, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %518 = cast(meta[relay.Constant][39] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %519 = cast(%var_7992, dtype="uint8") /* ty=Tensor[(234, 3), uint8] */;
  %520 = reshape(%518, newshape=[196]) /* ty=Tensor[(196), uint32] */;
  %521 = reshape(%519, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
  %522 = @func_7876(%520, %521) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
  %523 = cast(meta[relay.Constant][40] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %524 = cast(meta[relay.Constant][40] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %525 = cast(meta[relay.Constant][41] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %526 = reshape(%523, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %527 = reshape(%524, newshape=[7, 6, 8]) /* ty=Tensor[(7, 6, 8), float32] */;
  %528 = reshape(%525, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %529 = @func_1172(%526, %527, %528) /* ty=(Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) */;
  %530 = cast(%var_8040, dtype="int16") /* ty=Tensor[(630), int16] */;
  %531 = reshape(%530, newshape=[10, 9, 7]) /* ty=Tensor[(10, 9, 7), int16] */;
  %532 = floor_mod(%516, %517) /* ty=Tensor[(9, 2, 13), float32] */;
  %533 = %522.2;
  %534 = %529.1;
  %535 = @func_5437(%531) /* ty=Tensor[(10, 9, 7), int16] */;
  (%532, %533, meta[relay.Constant][39] /* ty=Tensor[(196), uint32] */, %var_7992, %534, meta[relay.Constant][40] /* ty=Tensor[(336), float32] */, meta[relay.Constant][41] /* ty=Tensor[(182), float64] */, %535, %var_8040)
}

def @func_8888(%var_8872: Tensor[(1200), uint32]) -> (Tensor[(7, 1, 7), float32], Tensor[(120), float64], Tensor[(1200), uint32], Tensor[(702), uint8]) {
  %536 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %537 = cast(%var_8872, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %538 = cast(meta[relay.Constant][43] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
  %539 = reshape(%537, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
  %540 = reshape(%538, newshape=[702]) /* ty=Tensor[(702), uint8] */;
  %541 = @func_3467(%539, %540) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
  %542 = log10(%536) /* ty=Tensor[(7, 1, 7), float32] */;
  %543 = %541.1;
  (%542, %543, %var_8872, meta[relay.Constant][43] /* ty=Tensor[(702), uint8] */)
}

def @func_8730() -> (Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) {
  %544 = cast(meta[relay.Constant][44] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %545 = cast(meta[relay.Constant][45] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %546 = reshape(%544, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
  %547 = reshape(%545, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %548 = @func_5587(%546, %547) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
  %549 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  %550 = %548.0;
  (%549, %550, meta[relay.Constant][44] /* ty=Tensor[(150), uint8] */, meta[relay.Constant][45] /* ty=Tensor[(900), uint8] */)
}

def @func_9010() -> Tensor[(1, 16, 7), float32] {
  %552 = fn () -> Tensor[(1, 16, 7), float32] {
    %551 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
    %551.0
  };
  %552() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9288() -> Tensor[(1, 16, 7), float32] {
  %553 = @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %553.0
}

def @func_7175(%var_7173: Tensor[(6, 10, 12), uint16], %var_7174: Tensor[(9, 100), uint8]) -> (Tensor[(6, 10, 12), int32], Tensor[(16, 12, 4), bool], Tensor[(768), int8], Tensor[(6, 10, 12), int32], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(1, 150), uint8], Tensor[(9, 100), float32], Tensor[(6, 10, 12), float32]) {
  @func_7171(%var_7173, %var_7174) /* ty=(Tensor[(6, 10, 12), int32], Tensor[(16, 12, 4), bool], Tensor[(768), int8], Tensor[(6, 10, 12), int32], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(1, 150), uint8], Tensor[(9, 100), float32], Tensor[(6, 10, 12), float32]) */
}

def @func_8732() -> (Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) {
  @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */
}

def @func_474(%var_472: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  @func_471(%var_472) /* ty=(Tensor[(1, 14, 13), float64],) */
}

def @func_9545(%var_9541: Tensor[(240, 2), float32], %var_9542: Tensor[(756), float32], %var_9543: Tensor[(702), uint8], %var_9544: Tensor[(768), int8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(8, 15, 4), float32], Tensor[(240, 2), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(768), int8], Tensor[(32, 24), int8], Tensor[(1200), uint32], Tensor[(702), float64]) {
  %579 = fn (%var_9473: Tensor[(240, 2), float32], %var_9482: Tensor[(756), float32], %var_9483: Tensor[(702), uint8], %var_9484: Tensor[(768), int8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(8, 15, 4), float32], Tensor[(240, 2), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(768), int8], Tensor[(32, 24), int8], Tensor[(1200), uint32], Tensor[(702), float64]) {
    %554 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
    %555 = cast(%var_9473, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
    %556 = cast(%var_9473, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
    %557 = reshape(%555, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
    %558 = reshape(%556, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float32] */;
    %559 = cast(%var_9482, dtype="float32") /* ty=Tensor[(756), float32] */;
    %560 = cast(%var_9482, dtype="float32") /* ty=Tensor[(756), float32] */;
    %561 = cast(%var_9483, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %562 = cast(%var_9484, dtype="int8") /* ty=Tensor[(768), int8] */;
    %563 = reshape(%559, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %564 = reshape(%560, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %565 = reshape(%561, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %566 = reshape(%562, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
    %567 = @func_2346(%563, %564, %565, %566) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
    %568 = cast(meta[relay.Constant][46] /* ty=Tensor[(1200), uint32] */, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
    %569 = cast(%var_9483, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %570 = reshape(%568, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), uint32] */;
    %571 = reshape(%569, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %572 = @func_3467(%570, %571) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */;
    %573 = cast(%var_9483, dtype="float64") /* ty=Tensor[(702), float64] */;
    %574 = %554.1;
    %575 = @func_6742(%557, %558) /* ty=Tensor[(8, 15, 4), float32] */;
    %576 = %567.5;
    %577 = %572.3;
    %578 = log(%573) /* ty=Tensor[(702), float64] */;
    (%574, %575, %var_9473, %576, %var_9482, %var_9484, %577, meta[relay.Constant][46] /* ty=Tensor[(1200), uint32] */, %578)
  };
  %579(%var_9541, %var_9542, %var_9543, %var_9544) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(8, 15, 4), float32], Tensor[(240, 2), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(768), int8], Tensor[(32, 24), int8], Tensor[(1200), uint32], Tensor[(702), float64]) */
}

def @func_1377(%var_1373: Tensor[(2, 7, 14), uint32], %var_1374: Tensor[(2, 7, 14), uint32], %var_1375: Tensor[(702), uint8], %var_1376: Tensor[(5, 56), float64]) -> (Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) {
  %597 = fn (%var_1338: Tensor[(2, 7, 14), uint32], %var_1339: Tensor[(2, 7, 14), uint32], %var_1355: Tensor[(702), uint8], %var_1368: Tensor[(5, 56), float64]) -> (Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) {
    %580 = cast(%var_1339, dtype="uint32") /* ty=Tensor[(2, 7, 14), uint32] */;
    %581 = shape_of(%var_1338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(%var_1338, dtype="uint32") /* ty=Tensor[(2, 7, 14), uint32] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %584 = cast(%var_1355, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %585 = cast(%var_1355, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %586 = reshape(%584, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
    %587 = reshape(%585, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), uint8] */;
    %588 = @func_1056(%586, %587) /* ty=(Tensor[(6, 9, 13), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
    %589 = cast(%var_1368, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
    %590 = cast(%var_1368, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
    %591 = reshape(%589, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %592 = reshape(%590, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %593 = @func_757(%591, %592) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */;
    %594 = right_shift(%582, %583) /* ty=Tensor[(2, 7, 14), uint32] */;
    %595 = %588.2;
    %596 = %593.0;
    (%594, %595, %var_1355, %596, %var_1368)
  };
  %597(%var_1373, %var_1374, %var_1375, %var_1376) /* ty=(Tensor[(2, 7, 14), uint32], Tensor[(910), float64], Tensor[(702), uint8], Tensor[(4, 5, 14), float64], Tensor[(5, 56), float64]) */
}

def @func_8123(%var_8121: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
  @func_8120(%var_8121) /* ty=(Tensor[(3, 11, 7), float32],) */
}

def @func_9266(%var_9264: Tensor[(810), float64], %var_9265: Tensor[(1, 280), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(280), float64], Tensor[(810), float64], Tensor[(196), uint32], Tensor[(1, 280), float64]) {
  %607 = fn (%var_9259: Tensor[(810), float64], %var_9261: Tensor[(1, 280), float64]) -> (Tensor[(1, 16, 7), float32], Tensor[(280), float64], Tensor[(810), float64], Tensor[(196), uint32], Tensor[(1, 280), float64]) {
    %598 = cast(%var_9259, dtype="float64") /* ty=Tensor[(810), float64] */;
    %599 = cast(meta[relay.Constant][47] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %600 = cast(%var_9261, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
    %601 = reshape(%598, newshape=[6, 9, 15]) /* ty=Tensor[(6, 9, 15), float64] */;
    %602 = reshape(%599, newshape=[196]) /* ty=Tensor[(196), uint32] */;
    %603 = reshape(%600, newshape=[280]) /* ty=Tensor[(280), float64] */;
    %604 = @func_4164(%601, %602, %603) /* ty=(Tensor[(6, 9, 15), bool], Tensor[(910), float64], Tensor[(252, 4), float64], Tensor[(196), uint32], Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */;
    %605 = @func_9116() /* ty=Tensor[(1, 16, 7), float32] */;
    %606 = %604.4;
    (%605, %606, %var_9259, meta[relay.Constant][47] /* ty=Tensor[(196), uint32] */, %var_9261)
  };
  %607(%var_9264, %var_9265) /* ty=(Tensor[(1, 16, 7), float32], Tensor[(280), float64], Tensor[(810), float64], Tensor[(196), uint32], Tensor[(1, 280), float64]) */
}

def @func_8516(%var_8506: Tensor[(16, 13, 3), int32], %var_8507: Tensor[(16, 13, 3), int32], %var_8508: Tensor[(120), float32], %var_8509: Tensor[(756), float32], %var_8510: Tensor[(84, 2), float64], %var_8511: Tensor[(150, 1), uint8], %var_8512: Tensor[(1, 135), float32], %var_8513: Tensor[(1680), float64], %var_8514: int8, %var_8515: Tensor[(336), float32]) -> (Tensor[(16, 13, 3), int32], Tensor[(16, 13, 3), float32], Tensor[(168), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(84, 2), float64], Tensor[(1, 12, 14), float64], Tensor[(150, 1), uint8], Tensor[(450, 2), uint8], Tensor[(3, 5, 9), float32], Tensor[(1, 135), float32], Tensor[(182), float64], Tensor[(1680), float64], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(336), float32], int8, Tensor[(520), int8], Tensor[(336), float32]) {
  @func_8504(%var_8506, %var_8507, %var_8508, %var_8509, %var_8510, %var_8511, %var_8512, %var_8513, %var_8514, %var_8515) /* ty=(Tensor[(16, 13, 3), int32], Tensor[(16, 13, 3), float32], Tensor[(168), float64], Tensor[(120), float32], Tensor[(756), float32], Tensor[(768), int8], Tensor[(84, 2), float64], Tensor[(1, 12, 14), float64], Tensor[(150, 1), uint8], Tensor[(450, 2), uint8], Tensor[(3, 5, 9), float32], Tensor[(1, 135), float32], Tensor[(182), float64], Tensor[(1680), float64], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(336), float32], int8, Tensor[(520), int8], Tensor[(336), float32]) */
}

def @func_878(%var_876: Tensor[(5, 14, 13), float64], %var_877: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), bool] {
  @func_874(%var_876, %var_877) /* ty=Tensor[(5, 14, 13), bool] */
}

def @func_9213() -> Tensor[(1, 16, 7), float64] {
  %610 = fn () -> Tensor[(1, 16, 7), float64] {
    %608 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
    %609 = cast(%608, dtype="float64") /* ty=Tensor[(1, 16, 7), float64] */;
    atan(%609) /* ty=Tensor[(1, 16, 7), float64] */
  };
  %610() /* ty=Tensor[(1, 16, 7), float64] */
}

def @func_7171(%var_7086: Tensor[(6, 10, 12), uint16], %var_7132: Tensor[(9, 100), uint8]) -> (Tensor[(6, 10, 12), int32], Tensor[(16, 12, 4), bool], Tensor[(768), int8], Tensor[(6, 10, 12), int32], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(1, 150), uint8], Tensor[(9, 100), float32], Tensor[(6, 10, 12), float32]) {
  %611 = cast(%var_7086, dtype="bool") /* ty=Tensor[(6, 10, 12), bool] */;
  %612 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="bool") /* ty=Tensor[(6, 10, 12), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = less(%613, %614) /* ty=Tensor[(6, 10, 12), bool] */;
  %616 = cast(%var_7086, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %620 = cast(meta[relay.Constant][49] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %621 = reshape(%620, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
  %622 = @func_1237(%621) /* ty=(Tensor[(16, 12, 4), bool],) */;
  %623 = cast(%615, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %624 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %627 = divide(%625, %626) /* ty=Tensor[(6, 10, 12), float64] */;
  %628 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %632 = cast(meta[relay.Constant][50] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %633 = cast(meta[relay.Constant][50] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %634 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 150), uint8] */, dtype="uint8") /* ty=Tensor[(1, 150), uint8] */;
  %635 = cast(%var_7132, dtype="uint8") /* ty=Tensor[(9, 100), uint8] */;
  %636 = cast(%var_7132, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %637 = reshape(%632, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %638 = reshape(%633, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
  %639 = reshape(%634, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %640 = reshape(%635, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
  %641 = reshape(%636, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %642 = @func_7009(%637, %638, %639, %640, %641) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) */;
  %643 = cast(%var_7132, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %644 = cast(%615, dtype="float64") /* ty=Tensor[(6, 10, 12), float64] */;
  %645 = exp(%644) /* ty=Tensor[(6, 10, 12), float64] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(6, 10, 12), float32] */;
  %647 = bitwise_or(%618, %619) /* ty=Tensor[(6, 10, 12), int32] */;
  %648 = %622.0;
  %649 = left_shift(%630, %631) /* ty=Tensor[(6, 10, 12), int32] */;
  %650 = %642.2;
  %651 = asinh(%643) /* ty=Tensor[(9, 100), float32] */;
  %652 = log2(%646) /* ty=Tensor[(6, 10, 12), float32] */;
  (%647, %648, meta[relay.Constant][49] /* ty=Tensor[(768), int8] */, %649, %650, meta[relay.Constant][50] /* ty=Tensor[(648), bool] */, meta[relay.Constant][51] /* ty=Tensor[(1, 150), uint8] */, %651, %652)
}

def @func_7015(%var_7010: Tensor[(12, 6, 9), bool], %var_7011: Tensor[(12, 6, 9), bool], %var_7012: Tensor[(150), uint8], %var_7013: Tensor[(10, 15, 6), uint8], %var_7014: Tensor[(10, 15, 6), float32]) -> (Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) {
  %676 = fn (%var_6956: Tensor[(12, 6, 9), bool], %var_6957: Tensor[(12, 6, 9), bool], %var_6988: Tensor[(150), uint8], %var_6991: Tensor[(10, 15, 6), uint8], %var_7004: Tensor[(10, 15, 6), float32]) -> (Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) {
    %653 = cast(%var_6957, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
    %654 = shape_of(%var_6956, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%var_6956, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %657 = cast(%var_6988, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %658 = cast(meta[relay.Constant][52] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
    %659 = reshape(%657, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), uint8] */;
    %660 = reshape(%658, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
    %661 = @func_5587(%659, %660) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */;
    %662 = %661.0;
    %663 = cast(%var_6991, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
    %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%662, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %667 = cast(%var_6991, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
    %668 = exp(%667) /* ty=Tensor[(10, 15, 6), float32] */;
    %669 = cast(%var_7004, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
    %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%668, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %673 = logical_or(%655, %656) /* ty=Tensor[(12, 6, 9), bool] */;
    %674 = less(%665, %666) /* ty=Tensor[(10, 15, 6), bool] */;
    %675 = equal(%671, %672) /* ty=Tensor[(10, 15, 6), bool] */;
    (%673, %var_6988, meta[relay.Constant][52] /* ty=Tensor[(900), uint8] */, %674, %675)
  };
  %676(%var_7010, %var_7011, %var_7012, %var_7013, %var_7014) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) */
}

def @func_10594() -> (Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) {
  @func_10592() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float32]) */
}

def @func_3742(%var_3738: Tensor[(60, 2), float64], %var_3739: Tensor[(54, 14), float32], %var_3740: Tensor[(702), uint8], %var_3741: Tensor[(768), int8]) -> (Tensor[(15, 5, 12), float32], Tensor[(4, 15, 2), float64], Tensor[(60, 2), float64], Tensor[(64, 12), int8], Tensor[(54, 14), float32], Tensor[(702), uint8], Tensor[(768), int8]) {
  %692 = fn (%var_3708: Tensor[(60, 2), float64], %var_3712: Tensor[(54, 14), float32], %var_3713: Tensor[(702), uint8], %var_3714: Tensor[(768), int8]) -> (Tensor[(15, 5, 12), float32], Tensor[(4, 15, 2), float64], Tensor[(60, 2), float64], Tensor[(64, 12), int8], Tensor[(54, 14), float32], Tensor[(702), uint8], Tensor[(768), int8]) {
    %677 = cast(meta[relay.Constant][53] /* ty=Tensor[(15, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
    %678 = cast(%var_3708, dtype="float64") /* ty=Tensor[(60, 2), float64] */;
    %679 = reshape(%678, newshape=[4, 15, 2]) /* ty=Tensor[(4, 15, 2), float64] */;
    %680 = cast(%var_3712, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %681 = cast(%var_3712, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %682 = cast(%var_3713, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %683 = cast(%var_3714, dtype="int8") /* ty=Tensor[(768), int8] */;
    %684 = reshape(%680, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %685 = reshape(%681, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %686 = reshape(%682, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %687 = reshape(%683, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
    %688 = @func_2346(%684, %685, %686, %687) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
    %689 = log10(%677) /* ty=Tensor[(15, 5, 12), float32] */;
    %690 = @func_508(%679) /* ty=Tensor[(4, 15, 2), float64] */;
    %691 = %688.6;
    (%689, %690, %var_3708, %691, %var_3712, %var_3713, %var_3714)
  };
  %692(%var_3738, %var_3739, %var_3740, %var_3741) /* ty=(Tensor[(15, 5, 12), float32], Tensor[(4, 15, 2), float64], Tensor[(60, 2), float64], Tensor[(64, 12), int8], Tensor[(54, 14), float32], Tensor[(702), uint8], Tensor[(768), int8]) */
}

def @func_5729(%var_5727: int64) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) {
  @func_5726(%var_5727) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(4, 300), uint32], Tensor[(702), uint8], Tensor[(18, 42), bool], Tensor[(18, 42), float64], Tensor[(14, 1, 10), int64], int64, Tensor[(140), int64]) */
}

def @func_8338(%var_8337: Tensor[(910), float64]) -> (Tensor[(910), bool], Tensor[(8, 4, 15), float32], Tensor[(480), float64]) {
  %705 = fn (%var_8315: Tensor[(910), float64]) -> (Tensor[(910), bool], Tensor[(8, 4, 15), float32], Tensor[(480), float64]) {
    %693 = @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */;
    %694 = %693.2;
    %695 = cast(%var_8315, dtype="bool") /* ty=Tensor[(910), bool] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(1), int32] */;
    %697 = cast(%694, dtype="bool") /* ty=Tensor[(910), bool] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?), bool] */;
    %699 = cast(meta[relay.Constant][54] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %700 = cast(meta[relay.Constant][54] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %701 = reshape(%699, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
    %702 = reshape(%700, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float64] */;
    %703 = less_equal(%697, %698) /* ty=Tensor[(910), bool] */;
    %704 = @func_5157(%701, %702) /* ty=Tensor[(8, 4, 15), float32] */;
    (%703, %704, meta[relay.Constant][54] /* ty=Tensor[(480), float64] */)
  };
  %705(%var_8337) /* ty=(Tensor[(910), bool], Tensor[(8, 4, 15), float32], Tensor[(480), float64]) */
}

def @func_10366() -> Tensor[(1, 16, 7), float32] {
  @func_10364() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9723() -> (Tensor[(900), uint8],) {
  %707 = fn () -> (Tensor[(900), uint8],) {
    %706 = @func_9239() /* ty=Tensor[(900), uint8] */;
    (%706,)
  };
  %707() /* ty=(Tensor[(900), uint8],) */
}

def @func_9466() -> (Tensor[(150), uint8],) {
  %708 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
  %709 = %708.2;
  (%709,)
}

def @func_761(%var_759: Tensor[(4, 5, 14), float64], %var_760: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) {
  @func_757(%var_759, %var_760) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) */
}

def @func_9951() -> (Tensor[(900), uint8], Tensor[(16, 12, 4), uint64], Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float64], Tensor[(1, 16, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(1, 16, 7), float64], Tensor[(910), float64]) {
  @func_9949() /* ty=(Tensor[(900), uint8], Tensor[(16, 12, 4), uint64], Tensor[(1, 16, 7), float32], Tensor[(1, 16, 7), float64], Tensor[(1, 16, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(1, 16, 7), float64], Tensor[(910), float64]) */
}

def @func_2883(%var_2860: Tensor[(8, 14, 15), float64]) -> (Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %710 = cast(2.71274f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %711 = cast(%var_2860, dtype="float64") /* ty=Tensor[(8, 14, 15), float64] */;
  %712 = minimum(%710, %711) /* ty=Tensor[(8, 14, 15), float64] */;
  %713 = cast(%712, dtype="int16") /* ty=Tensor[(8, 14, 15), int16] */;
  %714 = shape_of(%var_2860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%var_2860, dtype="int16") /* ty=Tensor[(8, 14, 15), int16] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %717 = cast(meta[relay.Constant][55] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %718 = reshape(%717, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %719 = @func_471(%718) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %720 = logical_xor(%715, %716) /* ty=Tensor[(8, 14, 15), int16] */;
  %721 = %719.0;
  (%720, %721, meta[relay.Constant][55] /* ty=Tensor[(182), float64] */)
}

def @func_8244() -> Tensor[(1, 16, 7), float32] {
  %722 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
  sqrt(%722) /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_9240() -> Tensor[(900), uint8] {
  %724 = fn () -> Tensor[(900), uint8] {
    %723 = @func_8730() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(10, 15, 6), uint8], Tensor[(150), uint8], Tensor[(900), uint8]) */;
    %723.3
  };
  %724() /* ty=Tensor[(900), uint8] */
}

def @func_874(%var_865: Tensor[(5, 14, 13), float64], %var_866: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), bool] {
  %725 = cast(%var_866, dtype="bool") /* ty=Tensor[(5, 14, 13), bool] */;
  %726 = shape_of(%var_865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_865, dtype="bool") /* ty=Tensor[(5, 14, 13), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%727, %728) /* ty=Tensor[(5, 14, 13), bool] */
}

def @func_1700(%var_1699: Tensor[(3, 5, 9), float32]) -> (Tensor[(3, 5, 9), float32],) {
  %731 = fn (%var_1695: Tensor[(3, 5, 9), float32]) -> (Tensor[(3, 5, 9), float32],) {
    %729 = cast(%var_1695, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
    %730 = acos(%729) /* ty=Tensor[(3, 5, 9), float32] */;
    (%730,)
  };
  %731(%var_1699) /* ty=(Tensor[(3, 5, 9), float32],) */
}

def @func_10429(%var_10427: float64, %var_10428: Tensor[(13, 14, 5), float64]) -> (Tensor[(13, 14, 5), float64],) {
  @func_10425(%var_10427, %var_10428) /* ty=(Tensor[(13, 14, 5), float64],) */
}

def @func_4260(%var_4259: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) {
  %742 = fn (%var_4236: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) {
    %732 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %733 = shape_of(%var_4236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%var_4236, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %736 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %737 = shape_of(%var_4236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%var_4236, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %740 = logical_and(%734, %735) /* ty=Tensor[(14, 14, 9), bool] */;
    %741 = less(%738, %739) /* ty=Tensor[(14, 14, 9), bool] */;
    (%740, %741)
  };
  %742(%var_4259) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) */
}

def @func_9031() -> Tensor[(1, 16, 7), float32] {
  @func_9029() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_7879(%var_7877: Tensor[(196), uint32], %var_7878: Tensor[(6, 117), uint8]) -> (Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %755 = fn (%var_7867: Tensor[(196), uint32], %var_7868: Tensor[(6, 117), uint8]) -> (Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
    %743 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
    %744 = cast(meta[relay.Constant][60] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %745 = cast(meta[relay.Constant][60] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %746 = cast(%var_7867, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %747 = cast(%var_7868, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
    %748 = reshape(%744, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %749 = reshape(%745, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %750 = reshape(%746, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
    %751 = reshape(%747, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %752 = @func_6724(%748, %749, %750, %751) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
    %753 = erf(%743) /* ty=Tensor[(3, 12, 2), float32] */;
    %754 = %752.2;
    (%753, %754, meta[relay.Constant][60] /* ty=Tensor[(144), int64] */, %var_7867, %var_7868)
  };
  %755(%var_7877, %var_7878) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */
}

def @func_10171() -> (Tensor[(150), uint8],) {
  %757 = fn () -> (Tensor[(150), uint8],) {
    %756 = @func_9960() /* ty=Tensor[(150), uint8] */;
    (%756,)
  };
  %757() /* ty=(Tensor[(150), uint8],) */
}

def @func_10247(%var_10244: Tensor[(756), float32], %var_10245: Tensor[(702), uint8], %var_10246: Tensor[(168), float64]) -> (Tensor[(150), uint8], Tensor[(1, 16, 7), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(702), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(168), float64]) {
  @func_10242(%var_10244, %var_10245, %var_10246) /* ty=(Tensor[(150), uint8], Tensor[(1, 16, 7), float32], Tensor[(16, 12, 4), bool], Tensor[(756), float32], Tensor[(702), uint8], Tensor[(768), int8], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(168), float64]) */
}

def @func_757(%var_728: Tensor[(4, 5, 14), float64], %var_744: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), int64]) {
  %758 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 5, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %759 = shape_of(%var_728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%var_728, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %762 = cast(%var_744, dtype="int64") /* ty=Tensor[(4, 5, 14), int64] */;
  %763 = shape_of(%var_728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_728, dtype="int64") /* ty=Tensor[(4, 5, 14), int64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %766 = mod(%760, %761) /* ty=Tensor[(4, 5, 14), float64] */;
  %767 = bitwise_or(%764, %765) /* ty=Tensor[(4, 5, 14), int64] */;
  (%766, %767)
}

def @func_5440(%var_5438: Tensor[(10, 9, 7), int16]) -> Tensor[(10, 9, 7), int16] {
  @func_5437(%var_5438) /* ty=Tensor[(10, 9, 7), int16] */
}

def @func_3470(%var_3468: Tensor[(5, 15, 16), uint32], %var_3469: Tensor[(702), uint8]) -> (Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) {
  %792 = fn (%var_3420: Tensor[(5, 15, 16), uint32], %var_3456: Tensor[(702), uint8]) -> (Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) {
    %768 = cast(%var_3420, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
    %769 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(5, 15, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 15, 16), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(18, 42), float32] */, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
    %773 = cast(meta[relay.Constant][63] /* ty=Tensor[(18, 42), float32] */, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
    %774 = cast(meta[relay.Constant][64] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %775 = cast(meta[relay.Constant][65] /* ty=Tensor[(32, 24), int8] */, dtype="int8") /* ty=Tensor[(32, 24), int8] */;
    %776 = reshape(%772, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %777 = reshape(%773, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %778 = reshape(%774, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %779 = reshape(%775, newshape=[64, 12]) /* ty=Tensor[(64, 12), int8] */;
    %780 = @func_2346(%776, %777, %778, %779) /* ty=(Tensor[(7, 9, 12), float32], Tensor[(702), uint64], Tensor[(4, 15, 2), float64], Tensor[(120), float64], Tensor[(7, 9, 12), float64], Tensor[(16, 12, 4), bool], Tensor[(64, 12), int8]) */;
    %781 = cast(meta[relay.Constant][65] /* ty=Tensor[(32, 24), int8] */, dtype="int8") /* ty=Tensor[(32, 24), int8] */;
    %782 = reshape(%781, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), int8] */;
    %783 = @func_1237(%782) /* ty=(Tensor[(16, 12, 4), bool],) */;
    %784 = cast(%var_3456, dtype="int16") /* ty=Tensor[(702), int16] */;
    %785 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(702), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %786 = cast(meta[relay.Constant][64] /* ty=Tensor[(702), uint8] */, dtype="int16") /* ty=Tensor[(702), int16] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?), int16] */;
    %788 = logical_xor(%770, %771) /* ty=Tensor[(5, 15, 16), uint32] */;
    %789 = %780.3;
    %790 = %783.0;
    %791 = bitwise_xor(%786, %787) /* ty=Tensor[(702), int16] */;
    (%788, %789, meta[relay.Constant][63] /* ty=Tensor[(18, 42), float32] */, meta[relay.Constant][65] /* ty=Tensor[(32, 24), int8] */, %790, %791)
  };
  %792(%var_3468, %var_3469) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(120), float64], Tensor[(18, 42), float32], Tensor[(32, 24), int8], Tensor[(16, 12, 4), bool], Tensor[(702), int16]) */
}

def @func_2954(%var_2952: int64, %var_2953: Tensor[(10, 12, 3), int64]) -> (Tensor[(10, 12, 3), bool],) {
  @func_2950(%var_2952, %var_2953) /* ty=(Tensor[(10, 12, 3), bool],) */
}

def @func_6486(%var_6481: int8, %var_6482: Tensor[(4, 13, 10), int8], %var_6483: Tensor[(910), float64], %var_6484: Tensor[(336), float32], %var_6485: Tensor[(182), float64]) -> (Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) {
  @func_6479(%var_6481, %var_6482, %var_6483, %var_6484, %var_6485) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(5, 14, 13), bool], Tensor[(910), float64], Tensor[(4, 13, 10), float64], Tensor[(1, 14, 13), float64], Tensor[(336), float32], Tensor[(182), float64]) */
}

def @func_8908() -> (Tensor[(1, 16, 7), float32],) {
  @func_8906() /* ty=(Tensor[(1, 16, 7), float32],) */
}

def @func_6239(%var_6237: int16, %var_6238: Tensor[(1, 7, 4), int16]) -> (Tensor[(1, 7, 4), int16],) {
  %796 = fn (%var_6225: int16, %var_6226: Tensor[(1, 7, 4), int16]) -> (Tensor[(1, 7, 4), int16],) {
    %793 = cast(%var_6225, dtype="int16") /* ty=int16 */;
    %794 = cast(%var_6226, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
    %795 = add(%793, %794) /* ty=Tensor[(1, 7, 4), int16] */;
    (%795,)
  };
  %796(%var_6237, %var_6238) /* ty=(Tensor[(1, 7, 4), int16],) */
}

def @func_9468() -> (Tensor[(150), uint8],) {
  @func_9466() /* ty=(Tensor[(150), uint8],) */
}

def @func_10487() -> (Tensor[(1, 16, 7), float32],) {
  %797 = @func_9309() /* ty=(Tensor[(1, 16, 7), float32],) */;
  %798 = %797.0;
  (%798,)
}

def @func_10364() -> Tensor[(1, 16, 7), float32] {
  @func_8244() /* ty=Tensor[(1, 16, 7), float32] */
}

def @func_5590(%var_5588: Tensor[(10, 15, 1), uint8], %var_5589: Tensor[(10, 15, 6), uint8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) {
  %805 = fn (%var_5525: Tensor[(10, 15, 1), uint8], %var_5526: Tensor[(10, 15, 6), uint8]) -> (Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) {
    %799 = cast(%var_5525, dtype="uint8") /* ty=Tensor[(10, 15, 1), uint8] */;
    %800 = cast(%var_5526, dtype="uint8") /* ty=Tensor[(10, 15, 6), uint8] */;
    %801 = cast(meta[relay.Constant][66] /* ty=Tensor[(168, 1), float64] */, dtype="float64") /* ty=Tensor[(168, 1), float64] */;
    %802 = reshape(%801, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float64] */;
    %803 = bitwise_or(%799, %800) /* ty=Tensor[(10, 15, 6), uint8] */;
    %804 = @func_2042(%802) /* ty=Tensor[(1, 12, 14), float64] */;
    (%803, %804, meta[relay.Constant][66] /* ty=Tensor[(168, 1), float64] */)
  };
  %805(%var_5588, %var_5589) /* ty=(Tensor[(10, 15, 6), uint8], Tensor[(1, 12, 14), float64], Tensor[(168, 1), float64]) */
}

def @func_8781(%var_8776: Tensor[(10, 3, 1), float64], %var_8777: Tensor[(15, 4), float64], %var_8778: Tensor[(144), int64], %var_8779: Tensor[(196), uint32], %var_8780: Tensor[(6, 117), uint8]) -> (Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  @func_8774(%var_8776, %var_8777, %var_8778, %var_8779, %var_8780) /* ty=(Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */
}

def @func_2886(%var_2884: Tensor[(8, 14, 15), float64]) -> (Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  @func_2883(%var_2884) /* ty=(Tensor[(8, 14, 15), int16], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */
}

def @func_8580(%var_8577: Tensor[(1, 16, 1), int8], %var_8578: Tensor[(98, 2), uint32], %var_8579: Tensor[(231), float32]) -> (Tensor[(1, 16, 1), bool], Tensor[(280), float64], Tensor[(144), int64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(3, 11, 7), float32], Tensor[(231), float32]) {
  %823 = fn (%var_8545: Tensor[(1, 16, 1), int8], %var_8560: Tensor[(98, 2), uint32], %var_8570: Tensor[(231), float32]) -> (Tensor[(1, 16, 1), bool], Tensor[(280), float64], Tensor[(144), int64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(3, 11, 7), float32], Tensor[(231), float32]) {
    %806 = cast(meta[relay.Constant][67] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %807 = cast(%var_8545, dtype="bool") /* ty=Tensor[(1, 16, 1), bool] */;
    %808 = cast(meta[relay.Constant][68] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %809 = cast(meta[relay.Constant][68] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %810 = cast(%var_8560, dtype="uint32") /* ty=Tensor[(98, 2), uint32] */;
    %811 = cast(meta[relay.Constant][69] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %812 = reshape(%808, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %813 = reshape(%809, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %814 = reshape(%810, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
    %815 = reshape(%811, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %816 = @func_6724(%812, %813, %814, %815) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
    %817 = cast(%var_8570, dtype="float32") /* ty=Tensor[(231), float32] */;
    %818 = reshape(%817, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
    %819 = @func_8120(%818) /* ty=(Tensor[(3, 11, 7), float32],) */;
    %820 = less(%806, %807) /* ty=Tensor[(1, 16, 1), bool] */;
    %821 = %816.4;
    %822 = %819.0;
    (%820, %821, meta[relay.Constant][68] /* ty=Tensor[(144), int64] */, %var_8560, meta[relay.Constant][69] /* ty=Tensor[(702), uint8] */, %822, %var_8570)
  };
  %823(%var_8577, %var_8578, %var_8579) /* ty=(Tensor[(1, 16, 1), bool], Tensor[(280), float64], Tensor[(144), int64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(3, 11, 7), float32], Tensor[(231), float32]) */
}

def @func_10425(%var_10385: float64, %var_10386: Tensor[(13, 14, 5), float64]) -> (Tensor[(13, 14, 5), float64],) {
  %824 = cast(%var_10385, dtype="float64") /* ty=float64 */;
  %825 = cast(%var_10386, dtype="float64") /* ty=Tensor[(13, 14, 5), float64] */;
  %826 = maximum(%824, %825) /* ty=Tensor[(13, 14, 5), float64] */;
  %827 = cast(%var_10385, dtype="float64") /* ty=float64 */;
  %828 = cast(%826, dtype="float64") /* ty=Tensor[(13, 14, 5), float64] */;
  %829 = floor_divide(%827, %828) /* ty=Tensor[(13, 14, 5), float64] */;
  (%829,)
}

def @func_10467() -> (Tensor[(11, 3, 1), float64],) {
  %832 = fn () -> (Tensor[(11, 3, 1), float64],) {
    %830 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 1), float64] */;
    %831 = asin(%830) /* ty=Tensor[(11, 3, 1), float64] */;
    (%831,)
  };
  %832() /* ty=(Tensor[(11, 3, 1), float64],) */
}

def @func_8906() -> (Tensor[(1, 16, 7), float32],) {
  %833 = @func_8244() /* ty=Tensor[(1, 16, 7), float32] */;
  (%833,)
}

def @func_1239(%var_1238: Tensor[(16, 12, 4), int8]) -> (Tensor[(16, 12, 4), bool],) {
  %839 = fn (%var_1217: Tensor[(16, 12, 4), int8]) -> (Tensor[(16, 12, 4), bool],) {
    %834 = cast(%var_1217, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
    %835 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(16, 12, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(meta[relay.Constant][71] /* ty=Tensor[(16, 12, 4), int8] */, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %838 = less_equal(%836, %837) /* ty=Tensor[(16, 12, 4), bool] */;
    (%838,)
  };
  %839(%var_1238) /* ty=(Tensor[(16, 12, 4), bool],) */
}

def @func_1176(%var_1173: Tensor[(7, 6, 8), float32], %var_1174: Tensor[(7, 6, 8), float32], %var_1175: Tensor[(182), float64]) -> (Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) {
  %860 = fn (%var_1123: Tensor[(7, 6, 8), float32], %var_1124: Tensor[(7, 6, 8), float32], %var_1134: Tensor[(182), float64]) -> (Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) {
    %840 = cast(%var_1124, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
    %841 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(%var_1123, dtype="float32") /* ty=Tensor[(7, 6, 8), float32] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %844 = power(%842, %843) /* ty=Tensor[(7, 6, 8), float32] */;
    %845 = cast(%844, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
    %846 = shape_of(%var_1124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %847 = cast(%var_1124, dtype="bool") /* ty=Tensor[(7, 6, 8), bool] */;
    %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %849 = cast(%var_1134, dtype="float64") /* ty=Tensor[(182), float64] */;
    %850 = reshape(%849, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %851 = @func_471(%850) /* ty=(Tensor[(1, 14, 13), float64],) */;
    %852 = cast(%var_1123, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
    %853 = atanh(%852) /* ty=Tensor[(7, 6, 8), float64] */;
    %854 = cast(%853, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
    %855 = asin(%854) /* ty=Tensor[(7, 6, 8), float64] */;
    %856 = cast(%855, dtype="float64") /* ty=Tensor[(7, 6, 8), float64] */;
    %857 = greater(%847, %848) /* ty=Tensor[(7, 6, 8), bool] */;
    %858 = %851.0;
    %859 = acos(%856) /* ty=Tensor[(7, 6, 8), float64] */;
    (%857, %858, %var_1134, %859)
  };
  %860(%var_1173, %var_1174, %var_1175) /* ty=(Tensor[(7, 6, 8), bool], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(7, 6, 8), float64]) */
}

def @func_9408(%var_9404: Tensor[(1764), bool], %var_9405: Tensor[(144), int64], %var_9406: Tensor[(900), uint8], %var_9407: Tensor[(8, 42), float32]) -> (Tensor[(1, 16, 7), float32], Tensor[(14, 14, 9), bool], Tensor[(10, 3, ?), float64], Tensor[(30), float64], Tensor[(60), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(280), float64], Tensor[(182), float64], Tensor[(135, 1), float32], Tensor[(8, 42), float32], Tensor[(182, 1), float64], Tensor[(1764), float32]) {
  %911 = fn (%var_9357: Tensor[(1764), bool], %var_9365: Tensor[(144), int64], %var_9373: Tensor[(900), uint8], %var_9379: Tensor[(8, 42), float32]) -> (Tensor[(1, 16, 7), float32], Tensor[(14, 14, 9), bool], Tensor[(10, 3, ?), float64], Tensor[(30), float64], Tensor[(60), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(280), float64], Tensor[(182), float64], Tensor[(135, 1), float32], Tensor[(8, 42), float32], Tensor[(182, 1), float64], Tensor[(1764), float32]) {
    %861 = @func_8373() /* ty=(Tensor[(1, 16, 7), float32],) */;
    %862 = cast(%var_9357, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %863 = reshape(%862, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
    %864 = @func_4258(%863) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), bool]) */;
    %865 = cast(meta[relay.Constant][72] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %866 = cast(meta[relay.Constant][73] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %867 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
    %868 = cast(meta[relay.Constant][74] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %869 = cast(meta[relay.Constant][75] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %870 = reshape(%865, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
    %871 = reshape(%866, newshape=[15, 4]) /* ty=Tensor[(15, 4), float64] */;
    %872 = reshape(%867, newshape=[144]) /* ty=Tensor[(144), int64] */;
    %873 = reshape(%868, newshape=[196]) /* ty=Tensor[(196), uint32] */;
    %874 = reshape(%869, newshape=[6, 117]) /* ty=Tensor[(6, 117), uint8] */;
    %875 = @func_8774(%870, %871, %872, %873, %874) /* ty=(Tensor[(10, 3, ?), float64], Tensor[(196), uint32], Tensor[(15, 4), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */;
    %876 = cast(meta[relay.Constant][76] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
    %877 = cast(meta[relay.Constant][76] /* ty=Tensor[(648), bool] */, dtype="bool") /* ty=Tensor[(648), bool] */;
    %878 = cast(meta[relay.Constant][77] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %879 = cast(%var_9373, dtype="uint8") /* ty=Tensor[(900), uint8] */;
    %880 = cast(%var_9373, dtype="float32") /* ty=Tensor[(900), float32] */;
    %881 = reshape(%876, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
    %882 = reshape(%877, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), bool] */;
    %883 = reshape(%878, newshape=[150]) /* ty=Tensor[(150), uint8] */;
    %884 = reshape(%879, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint8] */;
    %885 = reshape(%880, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
    %886 = @func_7009(%881, %882, %883, %884, %885) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(10, 15, 6), bool], Tensor[(10, 15, 6), bool]) */;
    %887 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
    %888 = cast(%var_9365, dtype="int64") /* ty=Tensor[(144), int64] */;
    %889 = cast(meta[relay.Constant][74] /* ty=Tensor[(196), uint32] */, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %890 = cast(meta[relay.Constant][75] /* ty=Tensor[(702), uint8] */, dtype="uint8") /* ty=Tensor[(702), uint8] */;
    %891 = reshape(%887, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %892 = reshape(%888, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %893 = reshape(%889, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
    %894 = reshape(%890, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %895 = @func_6724(%891, %892, %893, %894) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
    %896 = cast(meta[relay.Constant][78] /* ty=Tensor[(135, 1), float32] */, dtype="float32") /* ty=Tensor[(135, 1), float32] */;
    %897 = cast(%var_9379, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
    %898 = cast(meta[relay.Constant][79] /* ty=Tensor[(182, 1), float64] */, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
    %899 = reshape(%896, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %900 = reshape(%897, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %901 = reshape(%898, newshape=[13, 14]) /* ty=Tensor[(13, 14), float64] */;
    %902 = @func_8975(%899, %900, %901) /* ty=(Tensor[(?, 16, 7), bool], Tensor[(3, 5, 9), float32], Tensor[(135), float32], Tensor[(182), float64], int8, Tensor[(10, 52), int8], Tensor[(910), float64], Tensor[(336), float32], Tensor[(13, 14), float64], Tensor[(8, 15, 4), float32], Tensor[(480), float32]) */;
    %903 = cast(%var_9357, dtype="float32") /* ty=Tensor[(1764), float32] */;
    %904 = %861.0;
    %905 = %864.0;
    %906 = %875.0;
    %907 = %886.2;
    %908 = %895.4;
    %909 = %902.3;
    %910 = sigmoid(%903) /* ty=Tensor[(1764), float32] */;
    (%904, %905, %906, meta[relay.Constant][72] /* ty=Tensor[(30), float64] */, meta[relay.Constant][73] /* ty=Tensor[(60), float64] */, %var_9365, meta[relay.Constant][74] /* ty=Tensor[(196), uint32] */, meta[relay.Constant][75] /* ty=Tensor[(702), uint8] */, %907, meta[relay.Constant][76] /* ty=Tensor[(648), bool] */, meta[relay.Constant][77] /* ty=Tensor[(150), uint8] */, %var_9373, %908, %909, meta[relay.Constant][78] /* ty=Tensor[(135, 1), float32] */, %var_9379, meta[relay.Constant][79] /* ty=Tensor[(182, 1), float64] */, %910)
  };
  %911(%var_9404, %var_9405, %var_9406, %var_9407) /* ty=(Tensor[(1, 16, 7), float32], Tensor[(14, 14, 9), bool], Tensor[(10, 3, ?), float64], Tensor[(30), float64], Tensor[(60), float64], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(702), uint8], Tensor[(900), uint8], Tensor[(648), bool], Tensor[(150), uint8], Tensor[(900), uint8], Tensor[(280), float64], Tensor[(182), float64], Tensor[(135, 1), float32], Tensor[(8, 42), float32], Tensor[(182, 1), float64], Tensor[(1764), float32]) */
}

def @func_8282() -> (Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) {
  @func_8280() /* ty=(Tensor[(1, 16, 7), float32], Tensor[(5, 14, 13), bool], Tensor[(910), float64]) */
}

def @func_7346(%var_7341: Tensor[(3, 4, 5), float64], %var_7342: Tensor[(3, 4, 5), float64], %var_7343: Tensor[(144), int64], %var_7344: Tensor[(196), uint32], %var_7345: Tensor[(6, 117), uint8]) -> (Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
  %939 = fn (%var_7311: Tensor[(3, 4, 5), float64], %var_7314: Tensor[(3, 4, 5), float64], %var_7331: Tensor[(144), int64], %var_7332: Tensor[(196), uint32], %var_7333: Tensor[(6, 117), uint8]) -> (Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) {
    %912 = cast(%var_7311, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %913 = atanh(%912) /* ty=Tensor[(3, 4, 5), float64] */;
    %914 = cast(%var_7314, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %915 = shape_of(%913, dtype="int32") /* ty=Tensor[(3), int32] */;
    %916 = cast(%913, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %918 = greater_equal(%916, %917) /* ty=Tensor[(3, 4, 5), bool] */;
    %919 = cast(%var_7311, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
    %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%918, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %923 = cast(meta[relay.Constant][80] /* ty=Tensor[(3, 4, 5), float64] */, dtype="uint8") /* ty=Tensor[(3, 4, 5), uint8] */;
    %924 = shape_of(%var_7314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %925 = cast(%var_7314, dtype="uint8") /* ty=Tensor[(3, 4, 5), uint8] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %927 = cast(%var_7331, dtype="int64") /* ty=Tensor[(144), int64] */;
    %928 = cast(%var_7331, dtype="int64") /* ty=Tensor[(144), int64] */;
    %929 = cast(%var_7332, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %930 = cast(%var_7333, dtype="uint8") /* ty=Tensor[(6, 117), uint8] */;
    %931 = reshape(%927, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %932 = reshape(%928, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), int64] */;
    %933 = reshape(%929, newshape=[98, 2]) /* ty=Tensor[(98, 2), uint32] */;
    %934 = reshape(%930, newshape=[702]) /* ty=Tensor[(702), uint8] */;
    %935 = @func_6724(%931, %932, %933, %934) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(910), float64], Tensor[(98, 2), uint32], Tensor[(702), uint8], Tensor[(280), float64]) */;
    %936 = bitwise_and(%921, %922) /* ty=Tensor[(3, 4, 5), int16] */;
    %937 = multiply(%925, %926) /* ty=Tensor[(3, 4, 5), uint8] */;
    %938 = %935.2;
    (%936, %937, %938, %var_7331, %var_7332, %var_7333)
  };
  %939(%var_7341, %var_7342, %var_7343, %var_7344, %var_7345) /* ty=(Tensor[(3, 4, 5), int16], Tensor[(3, 4, 5), uint8], Tensor[(98, 2), uint32], Tensor[(144), int64], Tensor[(196), uint32], Tensor[(6, 117), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen442/build/output.py", line 1774, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:18:14] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

