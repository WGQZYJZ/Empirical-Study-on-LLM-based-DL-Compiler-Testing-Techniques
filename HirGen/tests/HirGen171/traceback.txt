==========mod==========
#[version = "0.0.5"]
def @func_2040(%var_2033: Tensor[(1, 2, 3), uint64], %var_2034: Tensor[(10, 2, 3), uint64]) -> Tensor[(10, 2, 3), uint64] {
  %0 = cast(%var_2033, dtype="uint64") /* ty=Tensor[(1, 2, 3), uint64] */;
  %1 = cast(%var_2034, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
  subtract(%0, %1) /* ty=Tensor[(10, 2, 3), uint64] */
}

def @func_5991() -> (Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) {
  %2 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
  %5 = cast(%3, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
  %6 = sin(%4) /* ty=Tensor[(9, 16, 6), float64] */;
  %7 = sqrt(%5) /* ty=Tensor[(9, 16, 6), float64] */;
  (%6, %7)
}

def @func_821(%var_809: Tensor[(9, 15, 14), float64], %var_810: Tensor[(9, 15, 14), float64]) -> Tensor[(9, 15, 14), float64] {
  %8 = cast(%var_810, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
  %9 = shape_of(%var_809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_809, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%10, %11) /* ty=Tensor[(9, 15, 14), float64] */
}

def @func_68(%var_62: Tensor[(15, 16, 3), float32]) -> (Tensor[(15, 16, 3), float32],) {
  %12 = cast(%var_62, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %13 = acos(%12) /* ty=Tensor[(15, 16, 3), float32] */;
  (%13,)
}

def @func_7965(%var_7961: Tensor[(10, 1, 11), float32]) -> (Tensor[(10, 1, 11), float32],) {
  %14 = cast(%var_7961, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %15 = asin(%14) /* ty=Tensor[(10, 1, 11), float32] */;
  (%15,)
}

def @func_4763() -> Tensor[(16, 16, 8), bool] {
  %16 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %16.4
}

def @func_6916() -> (Tensor[(9, 16, 6), uint32], Tensor[(90), int64], Tensor[(882), float32]) {
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(882), float32] */, dtype="float32") /* ty=Tensor[(882), float32] */;
  %18 = reshape(%17, newshape=[882]) /* ty=Tensor[(882), float32] */;
  %19 = @func_5814(%18) /* ty=(Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) */;
  %20 = @func_5917() /* ty=Tensor[(9, 16, 6), uint32] */;
  %21 = %19.5;
  (%20, %21, meta[relay.Constant][0] /* ty=Tensor[(882), float32] */)
}

def @func_4460() -> (Tensor[(9, 16, 6), float32],) {
  %22 = cast(4.57002f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %24 = minimum(%22, %23) /* ty=Tensor[(9, 16, 6), float32] */;
  (%24,)
}

def @func_6483(%var_6456: Tensor[(462), int64]) -> (Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) {
  %25 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
  %26 = cast(%var_6456, dtype="int64") /* ty=Tensor[(462), int64] */;
  %27 = reshape(%26, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
  %28 = @func_1084(%27) /* ty=Tensor[(7, 6, 11), int64] */;
  %29 = cast(%28, dtype="bool") /* ty=Tensor[(7, 6, 11), bool] */;
  %30 = shape_of(%var_6456, dtype="int32") /* ty=Tensor[(1), int32] */;
  %31 = cast(%var_6456, dtype="bool") /* ty=Tensor[(462), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?), bool] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %34 = reshape(%33, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
  %35 = @func_5043(%34) /* ty=(Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) */;
  %36 = %25.0;
  %37 = greater(%31, %32) /* ty=Tensor[(462), bool] */;
  %38 = %35.1;
  (%36, %37, %38, meta[relay.Constant][2] /* ty=Tensor[(2048), bool] */)
}

def @func_8261(%var_8234: Tensor[(4, 300), float64]) -> (Tensor[(14, 9, 8), float32], Tensor[(4, 300), float64], Tensor[(16, 5, 15), float32]) {
  %39 = @func_7179() /* ty=(Tensor[(14, 9, 8), float32],) */;
  %40 = cast(%var_8234, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
  %41 = reshape(%40, newshape=[16, 5, 15]) /* ty=Tensor[(16, 5, 15), float64] */;
  %42 = @func_7020(%41) /* ty=Tensor[(16, 5, 15), float64] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %44 = log(%43) /* ty=Tensor[(16, 5, 15), float32] */;
  %45 = cast(%42, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %49 = %39.0;
  %50 = floor_mod(%47, %48) /* ty=Tensor[(16, 5, 15), float32] */;
  (%49, %var_8234, %50)
}

def @func_6710(%var_6707: Tensor[(462), int64]) -> (Tensor[(14, 9, 8), float32], Tensor[(9, 16, 6), float32], Tensor[(256), int16], Tensor[(462), int64]) {
  %51 = @func_5239() /* ty=(Tensor[(14, 9, 8), float32],) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %54 = exp(%53) /* ty=Tensor[(14, 9, 8), float32] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(14, 9, 8), float64] */;
  %56 = tan(%55) /* ty=Tensor[(14, 9, 8), float64] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %58 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %59 = cast(%var_6707, dtype="int64") /* ty=Tensor[(462), int64] */;
  %60 = reshape(%59, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %61 = @func_6483(%60) /* ty=(Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) */;
  %62 = cos(%57) /* ty=Tensor[(14, 9, 8), float32] */;
  %63 = %58.0;
  %64 = %61.2;
  (%62, %63, %64, %var_6707)
}

def @func_2419(%var_2406: Tensor[(7, 16, 2), int16], %var_2407: Tensor[(7, 16, 2), int16], %var_2415: int64, %var_2416: Tensor[(90, 1), int64]) -> (Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) {
  %65 = cast(%var_2407, dtype="bool") /* ty=Tensor[(7, 16, 2), bool] */;
  %66 = shape_of(%var_2406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_2406, dtype="bool") /* ty=Tensor[(7, 16, 2), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = cast(%var_2415, dtype="int64") /* ty=int64 */;
  %70 = cast(%var_2416, dtype="int64") /* ty=Tensor[(90, 1), int64] */;
  %71 = reshape(%69, newshape=[]) /* ty=int64 */;
  %72 = reshape(%70, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %73 = greater_equal(%67, %68) /* ty=Tensor[(7, 16, 2), bool] */;
  %74 = @func_1302(%71, %72) /* ty=Tensor[(1, 15, 6), bool] */;
  (%73, %74, %var_2415, %var_2416)
}

def @func_5171() -> Tensor[(14, 9, 8), float32] {
  %75 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %76 = %75.2;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %78 = log(%77) /* ty=Tensor[(14, 9, 8), float32] */;
  %79 = cast(%76, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%81, %82) /* ty=Tensor[(14, 9, 8), float32] */
}

def @func_1084(%var_1075: Tensor[(7, 6, 11), int64]) -> Tensor[(7, 6, 11), int64] {
  %83 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %84 = cast(%var_1075, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  bitwise_xor(%83, %84) /* ty=Tensor[(7, 6, 11), int64] */
}

def @func_4473(%var_4462: Tensor[(6, 9, 4), int16]) -> (Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) {
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 9, 4), int16] */, dtype="int16") /* ty=Tensor[(6, 9, 4), int16] */;
  %86 = shape_of(%var_4462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_4462, dtype="int16") /* ty=Tensor[(6, 9, 4), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 9, 4), int16] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %90 = right_shift(%87, %88) /* ty=Tensor[(6, 9, 4), int16] */;
  %91 = asinh(%89) /* ty=Tensor[(6, 9, 4), float64] */;
  (%90, %91)
}

def @func_4537() -> (Tensor[(9, 16, 6), uint32],) {
  %92 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %93 = %92.0;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 16, 6), float32] */, dtype="uint32") /* ty=Tensor[(9, 16, 6), uint32] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="uint32") /* ty=Tensor[(9, 16, 6), uint32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %98 = left_shift(%96, %97) /* ty=Tensor[(9, 16, 6), uint32] */;
  (%98,)
}

def @func_2528(%var_2503: float32, %var_2504: Tensor[(14, 7, 9), float32]) -> (Tensor[(14, 7, 9), float32],) {
  %99 = cast(%var_2503, dtype="float32") /* ty=float32 */;
  %100 = cast(%var_2504, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %101 = floor_mod(%99, %100) /* ty=Tensor[(14, 7, 9), float32] */;
  (%101,)
}

def @func_5887() -> (Tensor[(9, 16, 6), float32],) {
  %102 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %103 = %102.0;
  (%103,)
}

def @func_7945(%var_7891: int64, %var_7892: Tensor[(90), int64], %var_7904: Tensor[(8, 28), int16]) -> (Tensor[(16, 16, 8), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(90), int64], Tensor[(90), int64], Tensor[(8, 28), int16], Tensor[(385), float32], Tensor[(1, 15, 6), float64], Tensor[(126), int32], Tensor[(1008, ?), float32]) {
  %104 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %107 = cast(%var_7891, dtype="int64") /* ty=int64 */;
  %108 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
  %109 = reshape(%107, newshape=[]) /* ty=int64 */;
  %110 = reshape(%108, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(385), float64] */, dtype="float64") /* ty=Tensor[(385), float64] */;
  %112 = cast(%var_7904, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
  %113 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
  %114 = reshape(%111, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), float64] */;
  %115 = reshape(%112, newshape=[224]) /* ty=Tensor[(224), int16] */;
  %116 = reshape(%113, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %117 = @func_2557(%114, %115, %116) /* ty=(Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(385), float64] */, dtype="float32") /* ty=Tensor[(385), float32] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %120 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
  %121 = cast(%var_7904, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
  %122 = reshape(%119, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
  %123 = reshape(%120, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %124 = reshape(%121, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
  %125 = @func_3320(%122, %123, %124) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
  %126 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
  %127 = sqrt(%106) /* ty=Tensor[(16, 16, 8), float64] */;
  %128 = @func_1302(%109, %110) /* ty=Tensor[(1, 15, 6), bool] */;
  %129 = %117.3;
  %130 = log2(%118) /* ty=Tensor[(385), float32] */;
  %131 = %125.9;
  %132 = %126.1;
  (%127, %128, %var_7891, %var_7892, %129, %var_7904, %130, %131, meta[relay.Constant][6] /* ty=Tensor[(126), int32] */, %132)
}

def @func_8057() -> (Tensor[(9, 16, 6), float32],) {
  %133 = @func_6040() /* ty=Tensor[(9, 16, 6), float32] */;
  (%133,)
}

def @func_1251(%var_1185: Tensor[(9, 3, 9), float32], %var_1192: Tensor[(720, 1), float32], %var_1226: Tensor[(462), int64]) -> (Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) {
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %135 = cast(%var_1192, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %136 = reshape(%134, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), float64] */;
  %137 = reshape(%135, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %138 = @func_754(%136, %137) /* ty=(Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) */;
  %139 = cast(%var_1226, dtype="int64") /* ty=Tensor[(462), int64] */;
  %140 = reshape(%139, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
  %141 = cast(%var_1185, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %142 = sqrt(%141) /* ty=Tensor[(9, 3, 9), float32] */;
  %143 = cast(%var_1185, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %147 = cast(%var_1192, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %148 = reshape(%147, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %149 = @func_68(%148) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %152 = sin(%151) /* ty=Tensor[(15, 16, 3), float64] */;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %154 = atan(%153) /* ty=Tensor[(15, 16, 3), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %156 = %138.0;
  %157 = @func_1084(%140) /* ty=Tensor[(7, 6, 11), int64] */;
  %158 = bitwise_xor(%145, %146) /* ty=Tensor[(9, 3, 9), int8] */;
  %159 = sqrt(%155) /* ty=Tensor[(15, 16, 3), float32] */;
  (%var_1192, %156, meta[relay.Constant][7] /* ty=Tensor[(220), float64] */, %157, %var_1226, %158, %159)
}

def @func_6040() -> Tensor[(9, 16, 6), float32] {
  %160 = @func_5887() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %160.0
}

def @func_8197() -> Tensor[(9, 16, 6), uint32] {
  %161 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %161.0
}

def @func_4976(%var_4940: Tensor[(9, 16, 6), float32], %var_4953: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], int64, Tensor[(126, 1), int32], Tensor[(90), int64], Tensor[(224), int16]) {
  %162 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %163 = %162.0;
  %164 = cast(%var_4940, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %168 = cast(%var_4940, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %170 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %171 = cast(%var_4953, dtype="int16") /* ty=Tensor[(224), int16] */;
  %172 = reshape(%169, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
  %173 = reshape(%170, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %174 = reshape(%171, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
  %175 = @func_3320(%172, %173, %174) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
  %176 = divide(%166, %167) /* ty=Tensor[(9, 16, 6), float32] */;
  %177 = acos(%168) /* ty=Tensor[(9, 16, 6), float32] */;
  %178 = %175.1;
  (%176, %177, %178, meta[relay.Constant][8] /* ty=Tensor[(126, 1), int32] */, meta[relay.Constant][9] /* ty=Tensor[(90), int64] */, %var_4953)
}

def @func_7020(%var_7013: Tensor[(16, 5, 15), float64]) -> Tensor[(16, 5, 15), float64] {
  %179 = cast(%var_7013, dtype="float64") /* ty=Tensor[(16, 5, 15), float64] */;
  exp(%179) /* ty=Tensor[(16, 5, 15), float64] */
}

def @func_6931(%var_6920: Tensor[(9, 7, 11), float32]) -> (Tensor[(9, 7, 11), float32], Tensor[(14, 9, 8), float32]) {
  %180 = cast(%var_6920, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %181 = sigmoid(%180) /* ty=Tensor[(9, 7, 11), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %183 = @func_5964() /* ty=(Tensor[(14, 9, 8), float32],) */;
  %184 = sin(%182) /* ty=Tensor[(9, 7, 11), float32] */;
  %185 = %183.0;
  (%184, %185)
}

def @func_7343() -> (Tensor[(16, 16, 8), bool],) {
  %186 = @func_7277() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %187 = %186.0;
  (%187,)
}

def @func_4580() -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) {
  %188 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %189 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %190 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %191 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %192 = reshape(%190, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), int8] */;
  %193 = reshape(%191, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), int8] */;
  %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(2048), float64] */, dtype="float64") /* ty=Tensor[(2048), float64] */;
  %195 = reshape(%194, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %196 = @func_1863(%195) /* ty=Tensor[(16, 16, 8), float64] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(2048), float64] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = %188.0;
  %202 = %189.0;
  %203 = @func_3502(%192, %193) /* ty=Tensor[(14, 9, 8), int8] */;
  %204 = logical_or(%199, %200) /* ty=Tensor[(16, 16, 8), bool] */;
  (%201, %202, %203, meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, %204)
}

def @func_7057() -> Tensor[(9, 16, 6), float32] {
  %205 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %205.0
}

def @func_3973(%var_3958: Tensor[(8, 14, 8), float32]) -> (Tensor[(8, 14, 8), float32],) {
  %206 = cast(%var_3958, dtype="float32") /* ty=Tensor[(8, 14, 8), float32] */;
  %207 = acosh(%206) /* ty=Tensor[(8, 14, 8), float32] */;
  (%207,)
}

def @func_7582(%var_7563: int16, %var_7564: Tensor[(3, 15, 11), int16]) -> (Tensor[(3, 15, 11), bool],) {
  %208 = cast(%var_7563, dtype="bool") /* ty=bool */;
  %209 = cast(%var_7564, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
  %210 = less(%208, %209) /* ty=Tensor[(3, 15, 11), bool] */;
  (%210,)
}

def @func_6386(%var_6359: Tensor[(65), int16], %var_6360: Tensor[(585), int16], %var_6368: Tensor[(720), float32], %var_6377: Tensor[(78), int64]) -> (Tensor[(9, 16, 6), float64], Tensor[(9, 5, 13), int16], Tensor[(65), int16], Tensor[(585), int16], Tensor[(462), float32], Tensor[(539, 1), int16], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(3, 13, 2), bool], Tensor[(78), int64]) {
  %211 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
  %212 = cast(%var_6359, dtype="int16") /* ty=Tensor[(65), int16] */;
  %213 = cast(%var_6360, dtype="int16") /* ty=Tensor[(585), int16] */;
  %214 = reshape(%212, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), int16] */;
  %215 = reshape(%213, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), int16] */;
  %216 = @func_5876(%214, %215) /* ty=(Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) */;
  %217 = cast(meta[relay.Constant][12] /* ty=Tensor[(539, 1), int16] */, dtype="int16") /* ty=Tensor[(539, 1), int16] */;
  %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(539, 1), int16] */, dtype="int16") /* ty=Tensor[(539, 1), int16] */;
  %219 = cast(meta[relay.Constant][13] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
  %220 = cast(%var_6368, dtype="float32") /* ty=Tensor[(720), float32] */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %222 = reshape(%217, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %223 = reshape(%218, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %224 = reshape(%219, newshape=[243]) /* ty=Tensor[(243), float32] */;
  %225 = reshape(%220, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %226 = reshape(%221, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %227 = @func_2297(%222, %223, %224, %225, %226) /* ty=(Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) */;
  %228 = cast(%var_6377, dtype="int64") /* ty=Tensor[(78), int64] */;
  %229 = reshape(%228, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %230 = %211.0;
  %231 = %216.0;
  %232 = %227.3;
  %233 = @func_4017(%229) /* ty=Tensor[(3, 13, 2), bool] */;
  (%230, %231, %var_6359, %var_6360, %232, meta[relay.Constant][12] /* ty=Tensor[(539, 1), int16] */, meta[relay.Constant][13] /* ty=Tensor[(243), float32] */, %var_6368, meta[relay.Constant][14] /* ty=Tensor[(462), int64] */, %233, %var_6377)
}

def @func_5964() -> (Tensor[(14, 9, 8), float32],) {
  %234 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
  (%234,)
}

def @func_7441() -> (Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) {
  %235 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %238 = log2(%237) /* ty=Tensor[(1008, 1), float64] */;
  %239 = cast(%238, dtype="uint8") /* ty=Tensor[(1008, 1), uint8] */;
  %240 = cast(meta[relay.Constant][15] /* ty=Tensor[(1008, 2), float64] */, dtype="uint8") /* ty=Tensor[(1008, 2), uint8] */;
  %241 = cast(%236, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %242 = atanh(%241) /* ty=Tensor[(1008, 1), float64] */;
  %243 = cast(%236, dtype="int64") /* ty=Tensor[(1008, 1), int64] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%242, dtype="int64") /* ty=Tensor[(1008, 1), int64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %247 = right_shift(%245, %246) /* ty=Tensor[(1008, ?), int64] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(1008, ?), float32] */;
  %249 = shape_of(%238, dtype="int32") /* ty=Tensor[(2), int32] */;
  %250 = cast(%238, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %252 = logical_xor(%239, %240) /* ty=Tensor[(1008, 2), uint8] */;
  %253 = add(%250, %251) /* ty=Tensor[(1008, ?), float32] */;
  (%252, %253)
}

def @func_5291(%var_5286: Tensor[(5, 5, 10), float64]) -> Tensor[(5, 5, 10), float64] {
  %254 = cast(%var_5286, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  acos(%254) /* ty=Tensor[(5, 5, 10), float64] */
}

def @func_7233(%var_7227: Tensor[(3, 42), int32], %var_7229: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 42), int32], Tensor[(90, 1), int64], Tensor[(224), int16]) {
  %255 = cast(%var_7227, dtype="int32") /* ty=Tensor[(3, 42), int32] */;
  %256 = cast(meta[relay.Constant][16] /* ty=Tensor[(90, 1), int64] */, dtype="int64") /* ty=Tensor[(90, 1), int64] */;
  %257 = cast(%var_7229, dtype="int16") /* ty=Tensor[(224), int16] */;
  %258 = reshape(%255, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
  %259 = reshape(%256, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %260 = reshape(%257, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
  %261 = @func_3320(%258, %259, %260) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
  %262 = @func_6040() /* ty=Tensor[(9, 16, 6), float32] */;
  %263 = %261.9;
  (%262, %263, %var_7227, meta[relay.Constant][16] /* ty=Tensor[(90, 1), int64] */, %var_7229)
}

def @func_7096() -> (Tensor[(16, 16, 8), bool], Tensor[(9, 16, 6), float64]) {
  %264 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
  %267 = @func_5587() /* ty=Tensor[(16, 16, 8), bool] */;
  %268 = erf(%266) /* ty=Tensor[(9, 16, 6), float64] */;
  (%267, %268)
}

def @func_6618(%var_6613: Tensor[(864), uint32], %var_6614: int64) -> (Tensor[(1008, 1), float32], Tensor[(90), int64], Tensor[(864), uint32], int64, Tensor[(90), int64]) {
  %269 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %272 = cast(%var_6613, dtype="uint32") /* ty=Tensor[(864), uint32] */;
  %273 = cast(%var_6614, dtype="int64") /* ty=int64 */;
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %275 = reshape(%272, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), uint32] */;
  %276 = reshape(%273, newshape=[]) /* ty=int64 */;
  %277 = reshape(%274, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %278 = @func_5768(%275, %276, %277) /* ty=(int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) */;
  %279 = rsqrt(%271) /* ty=Tensor[(1008, 1), float32] */;
  %280 = %278.3;
  (%279, %280, %var_6613, %var_6614, meta[relay.Constant][17] /* ty=Tensor[(90), int64] */)
}

def @func_4289(%var_4270: Tensor[(16, 4, 4), int16], %var_4271: Tensor[(16, 4, 4), int16]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) {
  %281 = cast(%var_4271, dtype="int16") /* ty=Tensor[(16, 4, 4), int16] */;
  %282 = shape_of(%var_4270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_4270, dtype="int16") /* ty=Tensor[(16, 4, 4), int16] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %285 = add(%283, %284) /* ty=Tensor[(16, 4, 4), int16] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %287 = sinh(%286) /* ty=Tensor[(16, 4, 4), float64] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = cast(%285, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %293 = less(%290, %291) /* ty=Tensor[(16, 4, 4), bool] */;
  %294 = log2(%292) /* ty=Tensor[(16, 4, 4), float32] */;
  (%293, %294)
}

def @main(%var_8448: Tensor[(15, 2, 1), float64]) -> Tensor[(15, 2, 1), float64] {
  %295 = cast(%var_8448, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  log10(%295) /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5768(%var_5707: Tensor[(9, 16, 6), uint32], %var_5719: int64, %var_5720: Tensor[(90), int64]) -> (int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) {
  %296 = cast(meta[relay.Constant][18] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %298 = cast(%var_5719, dtype="int64") /* ty=int64 */;
  %299 = cast(%var_5720, dtype="int64") /* ty=Tensor[(90), int64] */;
  %300 = reshape(%296, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %301 = reshape(%297, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %302 = reshape(%298, newshape=[]) /* ty=int64 */;
  %303 = reshape(%299, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
  %304 = @func_2419(%300, %301, %302, %303) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
  %305 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %306 = %305.0;
  %307 = cast(%var_5707, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = not_equal(%309, %310) /* ty=Tensor[(9, 16, 6), bool] */;
  %312 = cast(%311, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %313 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%306, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = cast(meta[relay.Constant][19] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %318 = reshape(%316, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint64] */;
  %319 = reshape(%317, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), uint64] */;
  %320 = @func_2040(%318, %319) /* ty=Tensor[(10, 2, 3), uint64] */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(60), uint64] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = %304.2;
  %326 = less_equal(%314, %315) /* ty=Tensor[(9, 16, 6), bool] */;
  %327 = logical_or(%323, %324) /* ty=Tensor[(10, 2, 3), bool] */;
  (%325, meta[relay.Constant][18] /* ty=Tensor[(224), int16] */, %var_5719, %var_5720, %326, meta[relay.Constant][19] /* ty=Tensor[(6), uint64] */, %327)
}

def @func_5814(%var_5793: Tensor[(882), float32]) -> (Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) {
  %328 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %329 = cast(-9.43964f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %330 = cast(%var_5793, dtype="float32") /* ty=Tensor[(882), float32] */;
  %331 = reshape(%329, newshape=[]) /* ty=float32 */;
  %332 = reshape(%330, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float32] */;
  %333 = @func_2528(%331, %332) /* ty=(Tensor[(14, 7, 9), float32],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %336 = cast(-9.43964f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %337 = cast(meta[relay.Constant][21] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %338 = reshape(%336, newshape=[]) /* ty=int64 */;
  %339 = reshape(%337, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %340 = %328.0;
  %341 = exp(%335) /* ty=Tensor[(14, 7, 9), float32] */;
  %342 = @func_1302(%338, %339) /* ty=Tensor[(1, 15, 6), bool] */;
  (%340, -9.43964f /* ty=float32 */, %var_5793, %341, %342, meta[relay.Constant][21] /* ty=Tensor[(90), int64] */)
}

def @func_7277() -> (Tensor[(16, 16, 8), bool],) {
  %343 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %344 = %343.0;
  (%344,)
}

def @func_8443() -> Tensor[(9, 16, 6), float32] {
  %345 = @func_8040() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %345.0
}

def @func_3889(%var_3871: Tensor[(16, 7, 16), float64], %var_3880: Tensor[(720), float32]) -> (Tensor[(16, 7, 16), float64], Tensor[(1, 3), bool], Tensor[(462), float32], Tensor[(720), float32], Tensor[(77, 6), int64]) {
  %346 = cast(1.7285f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %347 = cast(%var_3871, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %348 = cast(1.7285f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %349 = reshape(%348, newshape=[]) /* ty=int32 */;
  %350 = cast(%var_3880, dtype="float32") /* ty=Tensor[(720), float32] */;
  %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(77, 6), int64] */, dtype="int64") /* ty=Tensor[(77, 6), int64] */;
  %352 = reshape(%350, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %353 = reshape(%351, newshape=[462, 1]) /* ty=Tensor[(462, 1), int64] */;
  %354 = @func_2702(%352, %353) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) */;
  %355 = divide(%346, %347) /* ty=Tensor[(16, 7, 16), float64] */;
  %356 = @func_1679(%349) /* ty=Tensor[(1, 3), bool] */;
  %357 = %354.4;
  (%355, %356, %357, %var_3880, meta[relay.Constant][22] /* ty=Tensor[(77, 6), int64] */)
}

def @func_7179() -> (Tensor[(14, 9, 8), float32],) {
  %358 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
  (%358,)
}

def @func_1679(%var_1671: int32) -> Tensor[(1, 3), bool] {
  %359 = cast(%var_1671, dtype="bool") /* ty=bool */;
  %360 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
  less_equal(%359, %360) /* ty=Tensor[(1, 3), bool] */
}

def @func_5239() -> (Tensor[(14, 9, 8), float32],) {
  %361 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
  (%361,)
}

def @func_6058(%var_6049: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), float64], Tensor[(16, 16, 8), float64]) {
  %362 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %363 = %362.0;
  %364 = cast(%var_6049, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %368 = cast(%363, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %369 = floor_mod(%366, %367) /* ty=Tensor[(16, 16, 8), float64] */;
  %370 = acosh(%368) /* ty=Tensor[(16, 16, 8), float64] */;
  (%369, %370)
}

def @func_7135() -> (Tensor[(9, 16, 6), uint32],) {
  %371 = @func_6846() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %372 = %371.0;
  (%372,)
}

def @func_3320(%var_3283: Tensor[(3, 6, 7), int32], %var_3295: Tensor[(90), int64], %var_3299: Tensor[(16, 14), int16]) -> (Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) {
  %373 = cast(%var_3283, dtype="int32") /* ty=Tensor[(3, 6, 7), int32] */;
  %374 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(3, 6, 7), int32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %377 = cast(%var_3299, dtype="int16") /* ty=Tensor[(16, 14), int16] */;
  %378 = cast(%var_3299, dtype="int16") /* ty=Tensor[(16, 14), int16] */;
  %379 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %380 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %381 = cast(%var_3295, dtype="int64") /* ty=Tensor[(90), int64] */;
  %382 = reshape(%380, newshape=[]) /* ty=int64 */;
  %383 = reshape(%381, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %384 = @func_1302(%382, %383) /* ty=Tensor[(1, 15, 6), bool] */;
  %385 = cast(%384, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %386 = reshape(%377, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %387 = reshape(%378, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %388 = reshape(%379, newshape=[]) /* ty=int64 */;
  %389 = reshape(%385, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
  %390 = @func_2419(%386, %387, %388, %389) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
  %391 = cast(meta[relay.Constant][25] /* ty=Tensor[(2048), float64] */, dtype="float64") /* ty=Tensor[(2048), float64] */;
  %392 = reshape(%391, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %393 = cast(meta[relay.Constant][26] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %394 = reshape(%393, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
  %395 = cast(%384, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %396 = right_shift(%375, %376) /* ty=Tensor[(3, 6, 7), int32] */;
  %397 = %390.3;
  %398 = @func_1863(%392) /* ty=Tensor[(16, 16, 8), float64] */;
  %399 = @func_1084(%394) /* ty=Tensor[(7, 6, 11), int64] */;
  %400 = rsqrt(%395) /* ty=Tensor[(1, 15, 6), float64] */;
  (%396, 10 /* ty=int64 */, %var_3295, %397, %var_3299, %398, meta[relay.Constant][25] /* ty=Tensor[(2048), float64] */, %399, meta[relay.Constant][26] /* ty=Tensor[(462), int64] */, %400)
}

def @func_5620() -> (Tensor[(16, 16, 8), bool],) {
  %401 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %402 = %401.4;
  (%402,)
}

def @func_4017(%var_4013: Tensor[(3, 13, 2), int64]) -> Tensor[(3, 13, 2), bool] {
  %403 = cast(1 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %404 = cast(%var_4013, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  not_equal(%403, %404) /* ty=Tensor[(3, 13, 2), bool] */
}

def @func_5092() -> (Tensor[(9, 16, 6), float32],) {
  %405 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %406 = %405.0;
  (%406,)
}

def @func_3937(%var_3916: Tensor[(12, 16, 11), float32], %var_3932: int64) -> (Tensor[(12, 16, 11), uint32], Tensor[(12, 16, 11), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(45, 2), int64]) {
  %407 = cast(%var_3916, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %408 = sinh(%407) /* ty=Tensor[(12, 16, 11), float32] */;
  %409 = cast(%var_3916, dtype="uint32") /* ty=Tensor[(12, 16, 11), uint32] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="uint32") /* ty=Tensor[(12, 16, 11), uint32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %413 = cast(%var_3916, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %414 = cast(%var_3932, dtype="int64") /* ty=int64 */;
  %415 = cast(meta[relay.Constant][27] /* ty=Tensor[(45, 2), int64] */, dtype="int64") /* ty=Tensor[(45, 2), int64] */;
  %416 = reshape(%414, newshape=[]) /* ty=int64 */;
  %417 = reshape(%415, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %418 = logical_xor(%411, %412) /* ty=Tensor[(12, 16, 11), uint32] */;
  %419 = tan(%413) /* ty=Tensor[(12, 16, 11), float64] */;
  %420 = @func_1302(%416, %417) /* ty=Tensor[(1, 15, 6), bool] */;
  (%418, %419, %420, %var_3932, meta[relay.Constant][27] /* ty=Tensor[(45, 2), int64] */)
}

def @func_8378() -> (Tensor[(9, 16, 6), float32],) {
  %421 = @func_8057() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %422 = %421.0;
  (%422,)
}

def @func_4910(%var_4889: Tensor[(9, 16, 6), float32]) -> (Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) {
  %423 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %424 = %423.0;
  %425 = cast(%var_4889, dtype="uint64") /* ty=Tensor[(9, 16, 6), uint64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="uint64") /* ty=Tensor[(9, 16, 6), uint64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %429 = subtract(%427, %428) /* ty=Tensor[(9, 16, 6), uint64] */;
  %430 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  (%429, %430)
}

def @func_6447(%var_6442: Tensor[(1008, 3), float64]) -> (Tensor[(1008, 3), bool],) {
  %431 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
  %434 = cast(%var_6442, dtype="bool") /* ty=Tensor[(1008, 3), bool] */;
  %435 = equal(%433, %434) /* ty=Tensor[(1008, 3), bool] */;
  (%435,)
}

def @func_4255(%var_4181: Tensor[(16, 8, 13), int16], %var_4203: Tensor[(720), float32]) -> (Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) {
  %436 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
  %437 = shape_of(%var_4181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_4181, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %440 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 8, 13), int16] */, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %441 = shape_of(%var_4181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_4181, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %444 = cast(%var_4203, dtype="float32") /* ty=Tensor[(720), float32] */;
  %445 = reshape(%444, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %446 = @func_68(%445) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %447 = cast(meta[relay.Constant][30] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %448 = reshape(%447, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %449 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %450 = reshape(%449, newshape=[]) /* ty=int32 */;
  %451 = cast(meta[relay.Constant][30] /* ty=Tensor[(78), int64] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %452 = equal(%438, %439) /* ty=Tensor[(16, 8, 13), bool] */;
  %453 = mod(%442, %443) /* ty=Tensor[(16, 8, 13), float32] */;
  %454 = %446.0;
  %455 = @func_4017(%448) /* ty=Tensor[(3, 13, 2), bool] */;
  %456 = @func_1679(%450) /* ty=Tensor[(1, 3), bool] */;
  %457 = cos(%451) /* ty=Tensor[(78), float32] */;
  (%452, %453, %454, %var_4203, %455, %456, -8 /* ty=int32 */, %457)
}

def @func_3502(%var_3486: Tensor[(14, 9, 8), int8], %var_3487: Tensor[(14, 9, 8), int8]) -> Tensor[(14, 9, 8), int8] {
  %458 = cast(%var_3487, dtype="int8") /* ty=Tensor[(14, 9, 8), int8] */;
  %459 = shape_of(%var_3486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_3486, dtype="int8") /* ty=Tensor[(14, 9, 8), int8] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%460, %461) /* ty=Tensor[(14, 9, 8), int8] */
}

def @func_754(%var_738: Tensor[(10, 11, 2), float64], %var_745: Tensor[(180, 4), float32]) -> (Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) {
  %462 = cast(%var_738, dtype="float64") /* ty=Tensor[(10, 11, 2), float64] */;
  %463 = cast(%var_745, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %464 = reshape(%463, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %465 = @func_68(%464) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %468 = reshape(%467, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %469 = @func_68(%468) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %470 = log(%462) /* ty=Tensor[(10, 11, 2), float64] */;
  %471 = %469.0;
  (%470, %466, %var_745, %471)
}

def @func_5448() -> (Tensor[(1008, 1), float64],) {
  %472 = @func_5372() /* ty=Tensor[(1008, 1), int8] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %474 = exp(%473) /* ty=Tensor[(1008, 1), float64] */;
  (%474,)
}

def @func_5043(%var_5014: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) {
  %475 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  %476 = cast(%var_5014, dtype="uint32") /* ty=Tensor[(16, 16, 8), uint32] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="uint32") /* ty=Tensor[(16, 16, 8), uint32] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %480 = cast(meta[relay.Constant][31] /* ty=Tensor[(256), int16] */, dtype="int16") /* ty=Tensor[(256), int16] */;
  %481 = cast(meta[relay.Constant][31] /* ty=Tensor[(256), int16] */, dtype="int16") /* ty=Tensor[(256), int16] */;
  %482 = reshape(%480, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), int16] */;
  %483 = reshape(%481, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), int16] */;
  %484 = @func_4289(%482, %483) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %487 = maximum(%478, %479) /* ty=Tensor[(16, 16, 8), uint32] */;
  %488 = atanh(%486) /* ty=Tensor[(16, 4, 4), float64] */;
  (%487, meta[relay.Constant][31] /* ty=Tensor[(256), int16] */, %488)
}

def @func_5876(%var_5854: Tensor[(1, 5, 13), int16], %var_5855: Tensor[(9, 5, 13), int16]) -> (Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) {
  %489 = cast(%var_5854, dtype="int16") /* ty=Tensor[(1, 5, 13), int16] */;
  %490 = cast(%var_5855, dtype="int16") /* ty=Tensor[(9, 5, 13), int16] */;
  %491 = cast(meta[relay.Constant][32] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %492 = reshape(%491, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
  %493 = @func_5043(%492) /* ty=(Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) */;
  %494 = %493.0;
  %495 = cast(meta[relay.Constant][32] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = minimum(%489, %490) /* ty=Tensor[(9, 5, 13), int16] */;
  %500 = greater_equal(%497, %498) /* ty=Tensor[(16, 16, 8), bool] */;
  (%499, %500)
}

def @func_1302(%var_1291: int64, %var_1292: Tensor[(1, 15, 6), int64]) -> Tensor[(1, 15, 6), bool] {
  %501 = cast(%var_1291, dtype="bool") /* ty=bool */;
  %502 = cast(%var_1292, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  less_equal(%501, %502) /* ty=Tensor[(1, 15, 6), bool] */
}

def @func_6163(%var_6129: Tensor[(1, 6, 8), uint16], %var_6130: Tensor[(2, 6, 8), uint16], %var_6159: Tensor[(9, 6, 8), uint16]) -> (Tensor[(2, 6, 8), bool], Tensor[(9, 16, 6), float64], Tensor[(9, 6, 8), int16]) {
  %503 = cast(%var_6129, dtype="bool") /* ty=Tensor[(1, 6, 8), bool] */;
  %504 = cast(%var_6130, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %505 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
  %506 = cast(%var_6129, dtype="int16") /* ty=Tensor[(1, 6, 8), int16] */;
  %507 = cast(%var_6159, dtype="int16") /* ty=Tensor[(9, 6, 8), int16] */;
  %508 = less_equal(%503, %504) /* ty=Tensor[(2, 6, 8), bool] */;
  %509 = %505.0;
  %510 = right_shift(%506, %507) /* ty=Tensor[(9, 6, 8), int16] */;
  (%508, %509, %510)
}

def @func_2297(%var_2259: Tensor[(7, 11, 7), int16], %var_2260: Tensor[(7, 11, 7), int16], %var_2279: Tensor[(243), float32], %var_2280: Tensor[(720), float32], %var_2281: Tensor[(462), int64]) -> (Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) {
  %511 = cast(%var_2279, dtype="float32") /* ty=Tensor[(243), float32] */;
  %512 = cast(%var_2280, dtype="float32") /* ty=Tensor[(720), float32] */;
  %513 = cast(%var_2281, dtype="int64") /* ty=Tensor[(462), int64] */;
  %514 = reshape(%511, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
  %515 = reshape(%512, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %516 = reshape(%513, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %517 = @func_1251(%514, %515, %516) /* ty=(Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) */;
  %518 = %517.4;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(462), float32] */;
  %520 = cast(%var_2260, dtype="bool") /* ty=Tensor[(7, 11, 7), bool] */;
  %521 = shape_of(%var_2259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_2259, dtype="bool") /* ty=Tensor[(7, 11, 7), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = greater(%522, %523) /* ty=Tensor[(7, 11, 7), bool] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(7, 11, 7), float32] */;
  %526 = tan(%519) /* ty=Tensor[(462), float32] */;
  %527 = exp(%525) /* ty=Tensor[(7, 11, 7), float32] */;
  (%var_2279, %var_2280, %var_2281, %526, %527)
}

def @func_3704(%var_3676: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64], Tensor[(14, 15, 14), float64]) {
  %528 = cast(%var_3676, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %529 = cast(%var_3676, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %530 = sin(%528) /* ty=Tensor[(14, 15, 14), float64] */;
  %531 = sinh(%529) /* ty=Tensor[(14, 15, 14), float64] */;
  (%530, %531)
}

def @func_4828(%var_4808: Tensor[(243), float32], %var_4809: Tensor[(720), float32], %var_4810: Tensor[(462), int64], %var_4819: Tensor[(216), int16]) -> (Tensor[(16, 16, 8), bool], Tensor[(16, 16, 8), float64], Tensor[(1008, 1), float64], Tensor[(15, 16, 3), float32], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(6, 9, 4), int16], Tensor[(216), int16], Tensor[(14, 9, 8), int8]) {
  %532 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %534 = reshape(%533, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %535 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %536 = %535.3;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %538 = cast(%var_4808, dtype="float32") /* ty=Tensor[(243), float32] */;
  %539 = cast(%var_4809, dtype="float32") /* ty=Tensor[(720), float32] */;
  %540 = cast(%var_4810, dtype="int64") /* ty=Tensor[(462), int64] */;
  %541 = reshape(%538, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
  %542 = reshape(%539, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %543 = reshape(%540, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %544 = @func_1251(%541, %542, %543) /* ty=(Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) */;
  %545 = cast(%var_4819, dtype="int16") /* ty=Tensor[(216), int16] */;
  %546 = reshape(%545, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), int16] */;
  %547 = @func_4473(%546) /* ty=(Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) */;
  %548 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %549 = @func_1863(%534) /* ty=Tensor[(16, 16, 8), float64] */;
  %550 = log(%537) /* ty=Tensor[(1008, 1), float64] */;
  %551 = %544.6;
  %552 = %547.0;
  %553 = %548.2;
  (%532, %549, %550, %551, %var_4808, %var_4809, %var_4810, %552, %var_4819, %553)
}

def @func_5519() -> (Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) {
  %554 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %557 = reshape(%556, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), float32] */;
  %558 = @func_4910(%557) /* ty=(Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) */;
  %559 = %558.0;
  (%555, %559)
}

def @func_5587() -> Tensor[(16, 16, 8), bool] {
  @func_4763() /* ty=Tensor[(16, 16, 8), bool] */
}

def @func_7450(%var_7443: Tensor[(7, 12, 2), float32]) -> Tensor[(7, 12, 2), float32] {
  %560 = cast(%var_7443, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  acosh(%560) /* ty=Tensor[(7, 12, 2), float32] */
}

def @func_7728(%var_7664: Tensor[(1664), int16]) -> (Tensor[(9, 16, 6), uint32], Tensor[(720, 1664), bool], Tensor[(720, 3), int16], Tensor[(720, 4), bool]) {
  %561 = @func_7135() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %562 = cast(meta[relay.Constant][33] /* ty=Tensor[(720, 1), float32] */, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %563 = cast(%var_7664, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %564 = floor_mod(%562, %563) /* ty=Tensor[(720, 1664), float64] */;
  %565 = cast(%564, dtype="bool") /* ty=Tensor[(720, 1664), bool] */;
  %566 = cast(%var_7664, dtype="bool") /* ty=Tensor[(1664), bool] */;
  %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %568 = log10(%567) /* ty=Tensor[(720, 1), float32] */;
  %569 = cast(%var_7664, dtype="int16") /* ty=Tensor[(1664), int16] */;
  %570 = cast(meta[relay.Constant][33] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %571 = reshape(%569, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), int16] */;
  %572 = reshape(%570, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %573 = @func_4255(%571, %572) /* ty=(Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) */;
  %574 = %573.5;
  %575 = cast(%568, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %576 = cast(%574, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %577 = cast(%568, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %578 = cast(meta[relay.Constant][34] /* ty=Tensor[(720, 4), float32] */, dtype="bool") /* ty=Tensor[(720, 4), bool] */;
  %579 = %561.0;
  %580 = greater_equal(%565, %566) /* ty=Tensor[(720, 1664), bool] */;
  %581 = maximum(%575, %576) /* ty=Tensor[(720, 3), int16] */;
  %582 = logical_or(%577, %578) /* ty=Tensor[(720, 4), bool] */;
  (%579, %580, %581, %582)
}

def @func_6564(%var_6559: Tensor[(16, 16, 8), bool]) -> Tensor[(16, 16, 8), bool] {
  %583 = @func_5587() /* ty=Tensor[(16, 16, 8), bool] */;
  %584 = cast(%var_6559, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%586, %587) /* ty=Tensor[(16, 16, 8), bool] */
}

def @func_2557(%var_2539: Tensor[(11, 5, 7), float64], %var_2549: Tensor[(224), int16], %var_2550: Tensor[(90), int64]) -> (Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) {
  %588 = cast(5.51887f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %589 = cast(%var_2539, dtype="float64") /* ty=Tensor[(11, 5, 7), float64] */;
  %590 = cast(%var_2549, dtype="int16") /* ty=Tensor[(224), int16] */;
  %591 = cast(%var_2549, dtype="int16") /* ty=Tensor[(224), int16] */;
  %592 = cast(5.51887f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %593 = cast(%var_2550, dtype="int64") /* ty=Tensor[(90), int64] */;
  %594 = reshape(%590, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %595 = reshape(%591, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %596 = reshape(%592, newshape=[]) /* ty=int64 */;
  %597 = reshape(%593, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
  %598 = @func_2419(%594, %595, %596, %597) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
  %599 = mod(%588, %589) /* ty=Tensor[(11, 5, 7), float64] */;
  %600 = %598.1;
  (%599, %600, %var_2549, %var_2550)
}

def @func_7198() -> (Tensor[(16, 16, 8), bool],) {
  %601 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  (%601,)
}

def @func_7856(%var_7851: Tensor[(3, 5, 5), float64]) -> (Tensor[(3, 5, 5), float64], Tensor[(9, 16, 6), float32]) {
  %602 = cast(%var_7851, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %603 = sigmoid(%602) /* ty=Tensor[(3, 5, 5), float64] */;
  %604 = @func_7057() /* ty=Tensor[(9, 16, 6), float32] */;
  (%603, %604)
}

def @func_5372() -> Tensor[(1008, 1), int8] {
  %605 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %605.3
}

def @func_6846() -> (Tensor[(9, 16, 6), uint32],) {
  %606 = @func_5519() /* ty=(Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) */;
  %607 = %606.0;
  (%607,)
}

def @func_7598(%var_7594: Tensor[(6), uint64]) -> (Tensor[(1008, ?), float32], Tensor[(10, 2, 3), uint64], Tensor[(6), uint64], Tensor[(60), uint64]) {
  %608 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
  %609 = cast(%var_7594, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %610 = cast(meta[relay.Constant][35] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %611 = reshape(%609, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint64] */;
  %612 = reshape(%610, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), uint64] */;
  %613 = %608.1;
  %614 = @func_2040(%611, %612) /* ty=Tensor[(10, 2, 3), uint64] */;
  (%613, %614, %var_7594, meta[relay.Constant][35] /* ty=Tensor[(60), uint64] */)
}

def @func_2702(%var_2687: Tensor[(720), float32], %var_2698: Tensor[(462, 1), int64]) -> (Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) {
  %615 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %616 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(9, 8, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(meta[relay.Constant][38] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %620 = cast(%var_2687, dtype="float32") /* ty=Tensor[(720), float32] */;
  %621 = reshape(%619, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), float64] */;
  %622 = reshape(%620, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %623 = @func_754(%621, %622) /* ty=(Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) */;
  %624 = cast(meta[relay.Constant][39] /* ty=Tensor[(539), int16] */, dtype="int16") /* ty=Tensor[(539), int16] */;
  %625 = cast(meta[relay.Constant][39] /* ty=Tensor[(539), int16] */, dtype="int16") /* ty=Tensor[(539), int16] */;
  %626 = cast(meta[relay.Constant][40] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
  %627 = cast(%var_2687, dtype="float32") /* ty=Tensor[(720), float32] */;
  %628 = cast(%var_2698, dtype="int64") /* ty=Tensor[(462, 1), int64] */;
  %629 = reshape(%624, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %630 = reshape(%625, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %631 = reshape(%626, newshape=[243]) /* ty=Tensor[(243), float32] */;
  %632 = reshape(%627, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %633 = reshape(%628, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %634 = @func_2297(%629, %630, %631, %632, %633) /* ty=(Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) */;
  %635 = logical_and(%617, %618) /* ty=Tensor[(9, 8, 8), bool] */;
  %636 = %623.0;
  %637 = %634.3;
  (%635, %636, meta[relay.Constant][38] /* ty=Tensor[(220), float64] */, %var_2687, %637, meta[relay.Constant][39] /* ty=Tensor[(539), int16] */, meta[relay.Constant][40] /* ty=Tensor[(243), float32] */, %var_2698)
}

def @func_8040() -> (Tensor[(9, 16, 6), float32],) {
  %638 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %639 = %638.0;
  (%639,)
}

def @func_5917() -> Tensor[(9, 16, 6), uint32] {
  %640 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %640.0
}

def @func_8066() -> Tensor[(9, 16, 6), float64] {
  %641 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
  %641.0
}

def @func_1863(%var_1847: Tensor[(16, 16, 8), float64]) -> Tensor[(16, 16, 8), float64] {
  %642 = cast(%var_1847, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  exp(%642) /* ty=Tensor[(16, 16, 8), float64] */
}

def @func_8140(%var_8074: Tensor[(1008, 2), uint8], %var_8089: Tensor[(1008, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(13, 6), int64], Tensor[(1008, 2), bool], Tensor[(1008, 2), float64]) {
  %643 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 6), int64] */;
  %644 = reshape(%643, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %645 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
  %646 = %645.0;
  %647 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(2), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %651 = logical_and(%649, %650) /* ty=Tensor[(1008, 2), bool] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
  %653 = log2(%652) /* ty=Tensor[(1008, 2), float32] */;
  %654 = cast(%var_8089, dtype="int32") /* ty=Tensor[(1008, 2), int32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(2), int32] */;
  %656 = cast(%653, dtype="int32") /* ty=Tensor[(1008, 2), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %658 = add(%656, %657) /* ty=Tensor[(1008, 2), int32] */;
  %659 = cast(%658, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %660 = shape_of(%653, dtype="int32") /* ty=Tensor[(2), int32] */;
  %661 = cast(%653, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %663 = cast(%var_8089, dtype="float64") /* ty=Tensor[(1008, 2), float64] */;
  %664 = @func_4017(%644) /* ty=Tensor[(3, 13, 2), bool] */;
  %665 = equal(%661, %662) /* ty=Tensor[(1008, 2), bool] */;
  %666 = log10(%663) /* ty=Tensor[(1008, 2), float64] */;
  (%664, meta[relay.Constant][41] /* ty=Tensor[(13, 6), int64] */, %665, %666)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3975(%var_3974: Tensor[(8, 14, 8), float32]) -> (Tensor[(8, 14, 8), float32],) {
  %2 = fn (%var_3958: Tensor[(8, 14, 8), float32]) -> (Tensor[(8, 14, 8), float32],) {
    %0 = cast(%var_3958, dtype="float32") /* ty=Tensor[(8, 14, 8), float32] */;
    %1 = acosh(%0) /* ty=Tensor[(8, 14, 8), float32] */;
    (%1,)
  };
  %2(%var_3974) /* ty=(Tensor[(8, 14, 8), float32],) */
}

def @func_5992() -> (Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) {
  %9 = fn () -> (Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) {
    %3 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %4 = %3.0;
    %5 = cast(%4, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
    %6 = cast(%4, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
    %7 = sin(%5) /* ty=Tensor[(9, 16, 6), float64] */;
    %8 = sqrt(%6) /* ty=Tensor[(9, 16, 6), float64] */;
    (%7, %8)
  };
  %9() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */
}

def @func_4764() -> Tensor[(16, 16, 8), bool] {
  %11 = fn () -> Tensor[(16, 16, 8), bool] {
    %10 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
    %10.4
  };
  %11() /* ty=Tensor[(16, 16, 8), bool] */
}

def @func_8443() -> Tensor[(9, 16, 6), float32] {
  %12 = @func_8040() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %12.0
}

def @func_7022(%var_7021: Tensor[(16, 5, 15), float64]) -> Tensor[(16, 5, 15), float64] {
  %14 = fn (%var_7013: Tensor[(16, 5, 15), float64]) -> Tensor[(16, 5, 15), float64] {
    %13 = cast(%var_7013, dtype="float64") /* ty=Tensor[(16, 5, 15), float64] */;
    exp(%13) /* ty=Tensor[(16, 5, 15), float64] */
  };
  %14(%var_7021) /* ty=Tensor[(16, 5, 15), float64] */
}

def @func_7233(%var_7227: Tensor[(3, 42), int32], %var_7229: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 42), int32], Tensor[(90, 1), int64], Tensor[(224), int16]) {
  %15 = cast(%var_7227, dtype="int32") /* ty=Tensor[(3, 42), int32] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(90, 1), int64] */, dtype="int64") /* ty=Tensor[(90, 1), int64] */;
  %17 = cast(%var_7229, dtype="int16") /* ty=Tensor[(224), int16] */;
  %18 = reshape(%15, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
  %19 = reshape(%16, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %20 = reshape(%17, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
  %21 = @func_3320(%18, %19, %20) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
  %22 = @func_6040() /* ty=Tensor[(9, 16, 6), float32] */;
  %23 = %21.9;
  (%22, %23, %var_7227, meta[relay.Constant][0] /* ty=Tensor[(90, 1), int64] */, %var_7229)
}

def @func_6917() -> (Tensor[(9, 16, 6), uint32], Tensor[(90), int64], Tensor[(882), float32]) {
  %29 = fn () -> (Tensor[(9, 16, 6), uint32], Tensor[(90), int64], Tensor[(882), float32]) {
    %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(882), float32] */, dtype="float32") /* ty=Tensor[(882), float32] */;
    %25 = reshape(%24, newshape=[882]) /* ty=Tensor[(882), float32] */;
    %26 = @func_5814(%25) /* ty=(Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) */;
    %27 = @func_5917() /* ty=Tensor[(9, 16, 6), uint32] */;
    %28 = %26.5;
    (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(882), float32] */)
  };
  %29() /* ty=(Tensor[(9, 16, 6), uint32], Tensor[(90), int64], Tensor[(882), float32]) */
}

def @func_7180() -> (Tensor[(14, 9, 8), float32],) {
  %31 = fn () -> (Tensor[(14, 9, 8), float32],) {
    %30 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
    (%30,)
  };
  %31() /* ty=(Tensor[(14, 9, 8), float32],) */
}

def @func_7856(%var_7851: Tensor[(3, 5, 5), float64]) -> (Tensor[(3, 5, 5), float64], Tensor[(9, 16, 6), float32]) {
  %32 = cast(%var_7851, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %33 = sigmoid(%32) /* ty=Tensor[(3, 5, 5), float64] */;
  %34 = @func_7057() /* ty=Tensor[(9, 16, 6), float32] */;
  (%33, %34)
}

def @func_5773(%var_5770: Tensor[(9, 16, 6), uint32], %var_5771: int64, %var_5772: Tensor[(90), int64]) -> (int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) {
  @func_5768(%var_5770, %var_5771, %var_5772) /* ty=(int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) */
}

def @func_6060(%var_6059: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), float64], Tensor[(16, 16, 8), float64]) {
  %44 = fn (%var_6049: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), float64], Tensor[(16, 16, 8), float64]) {
    %35 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
    %36 = %35.0;
    %37 = cast(%var_6049, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%36, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %41 = cast(%36, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %42 = floor_mod(%39, %40) /* ty=Tensor[(16, 16, 8), float64] */;
    %43 = acosh(%41) /* ty=Tensor[(16, 16, 8), float64] */;
    (%42, %43)
  };
  %44(%var_6059) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(16, 16, 8), float64]) */
}

def @func_5240() -> (Tensor[(14, 9, 8), float32],) {
  %46 = fn () -> (Tensor[(14, 9, 8), float32],) {
    %45 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
    (%45,)
  };
  %46() /* ty=(Tensor[(14, 9, 8), float32],) */
}

def @func_8380() -> (Tensor[(9, 16, 6), float32],) {
  @func_8378() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_5092() -> (Tensor[(9, 16, 6), float32],) {
  %47 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %48 = %47.0;
  (%48,)
}

def @func_5521() -> (Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) {
  @func_5519() /* ty=(Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) */
}

def @func_1087(%var_1085: Tensor[(7, 6, 11), int64]) -> Tensor[(7, 6, 11), int64] {
  @func_1084(%var_1085) /* ty=Tensor[(7, 6, 11), int64] */
}

def @func_5889() -> (Tensor[(9, 16, 6), float32],) {
  @func_5887() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_825(%var_823: Tensor[(9, 15, 14), float64], %var_824: Tensor[(9, 15, 14), float64]) -> Tensor[(9, 15, 14), float64] {
  @func_821(%var_823, %var_824) /* ty=Tensor[(9, 15, 14), float64] */
}

def @func_2424(%var_2420: Tensor[(7, 16, 2), int16], %var_2421: Tensor[(7, 16, 2), int16], %var_2422: int64, %var_2423: Tensor[(90, 1), int64]) -> (Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) {
  %59 = fn (%var_2406: Tensor[(7, 16, 2), int16], %var_2407: Tensor[(7, 16, 2), int16], %var_2415: int64, %var_2416: Tensor[(90, 1), int64]) -> (Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) {
    %49 = cast(%var_2407, dtype="bool") /* ty=Tensor[(7, 16, 2), bool] */;
    %50 = shape_of(%var_2406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%var_2406, dtype="bool") /* ty=Tensor[(7, 16, 2), bool] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %53 = cast(%var_2415, dtype="int64") /* ty=int64 */;
    %54 = cast(%var_2416, dtype="int64") /* ty=Tensor[(90, 1), int64] */;
    %55 = reshape(%53, newshape=[]) /* ty=int64 */;
    %56 = reshape(%54, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
    %57 = greater_equal(%51, %52) /* ty=Tensor[(7, 16, 2), bool] */;
    %58 = @func_1302(%55, %56) /* ty=Tensor[(1, 15, 6), bool] */;
    (%57, %58, %var_2415, %var_2416)
  };
  %59(%var_2420, %var_2421, %var_2422, %var_2423) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */
}

def @func_6391(%var_6387: Tensor[(65), int16], %var_6388: Tensor[(585), int16], %var_6389: Tensor[(720), float32], %var_6390: Tensor[(78), int64]) -> (Tensor[(9, 16, 6), float64], Tensor[(9, 5, 13), int16], Tensor[(65), int16], Tensor[(585), int16], Tensor[(462), float32], Tensor[(539, 1), int16], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(3, 13, 2), bool], Tensor[(78), int64]) {
  %83 = fn (%var_6359: Tensor[(65), int16], %var_6360: Tensor[(585), int16], %var_6368: Tensor[(720), float32], %var_6377: Tensor[(78), int64]) -> (Tensor[(9, 16, 6), float64], Tensor[(9, 5, 13), int16], Tensor[(65), int16], Tensor[(585), int16], Tensor[(462), float32], Tensor[(539, 1), int16], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(3, 13, 2), bool], Tensor[(78), int64]) {
    %60 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
    %61 = cast(%var_6359, dtype="int16") /* ty=Tensor[(65), int16] */;
    %62 = cast(%var_6360, dtype="int16") /* ty=Tensor[(585), int16] */;
    %63 = reshape(%61, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), int16] */;
    %64 = reshape(%62, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), int16] */;
    %65 = @func_5876(%63, %64) /* ty=(Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) */;
    %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(539, 1), int16] */, dtype="int16") /* ty=Tensor[(539, 1), int16] */;
    %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(539, 1), int16] */, dtype="int16") /* ty=Tensor[(539, 1), int16] */;
    %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
    %69 = cast(%var_6368, dtype="float32") /* ty=Tensor[(720), float32] */;
    %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
    %71 = reshape(%66, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
    %72 = reshape(%67, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
    %73 = reshape(%68, newshape=[243]) /* ty=Tensor[(243), float32] */;
    %74 = reshape(%69, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %75 = reshape(%70, newshape=[462]) /* ty=Tensor[(462), int64] */;
    %76 = @func_2297(%71, %72, %73, %74, %75) /* ty=(Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) */;
    %77 = cast(%var_6377, dtype="int64") /* ty=Tensor[(78), int64] */;
    %78 = reshape(%77, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
    %79 = %60.0;
    %80 = %65.0;
    %81 = %76.3;
    %82 = @func_4017(%78) /* ty=Tensor[(3, 13, 2), bool] */;
    (%79, %80, %var_6359, %var_6360, %81, meta[relay.Constant][2] /* ty=Tensor[(539, 1), int16] */, meta[relay.Constant][3] /* ty=Tensor[(243), float32] */, %var_6368, meta[relay.Constant][4] /* ty=Tensor[(462), int64] */, %82, %var_6377)
  };
  %83(%var_6387, %var_6388, %var_6389, %var_6390) /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 5, 13), int16], Tensor[(65), int16], Tensor[(585), int16], Tensor[(462), float32], Tensor[(539, 1), int16], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(3, 13, 2), bool], Tensor[(78), int64]) */
}

def @func_7097() -> (Tensor[(16, 16, 8), bool], Tensor[(9, 16, 6), float64]) {
  %89 = fn () -> (Tensor[(16, 16, 8), bool], Tensor[(9, 16, 6), float64]) {
    %84 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %85 = %84.0;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
    %87 = @func_5587() /* ty=Tensor[(16, 16, 8), bool] */;
    %88 = erf(%86) /* ty=Tensor[(9, 16, 6), float64] */;
    (%87, %88)
  };
  %89() /* ty=(Tensor[(16, 16, 8), bool], Tensor[(9, 16, 6), float64]) */
}

def @func_5620() -> (Tensor[(16, 16, 8), bool],) {
  %90 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %91 = %90.4;
  (%91,)
}

def @func_8066() -> Tensor[(9, 16, 6), float64] {
  %92 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
  %92.0
}

def @func_5373() -> Tensor[(1008, 1), int8] {
  %94 = fn () -> Tensor[(1008, 1), int8] {
    %93 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
    %93.3
  };
  %94() /* ty=Tensor[(1008, 1), int8] */
}

def @func_8445() -> Tensor[(9, 16, 6), float32] {
  @func_8443() /* ty=Tensor[(9, 16, 6), float32] */
}

def @func_758(%var_756: Tensor[(10, 11, 2), float64], %var_757: Tensor[(180, 4), float32]) -> (Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) {
  @func_754(%var_756, %var_757) /* ty=(Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) */
}

def @func_6566(%var_6565: Tensor[(16, 16, 8), bool]) -> Tensor[(16, 16, 8), bool] {
  %100 = fn (%var_6559: Tensor[(16, 16, 8), bool]) -> Tensor[(16, 16, 8), bool] {
    %95 = @func_5587() /* ty=Tensor[(16, 16, 8), bool] */;
    %96 = cast(%var_6559, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%98, %99) /* ty=Tensor[(16, 16, 8), bool] */
  };
  %100(%var_6565) /* ty=Tensor[(16, 16, 8), bool] */
}

def @func_7600(%var_7599: Tensor[(6), uint64]) -> (Tensor[(1008, ?), float32], Tensor[(10, 2, 3), uint64], Tensor[(6), uint64], Tensor[(60), uint64]) {
  %108 = fn (%var_7594: Tensor[(6), uint64]) -> (Tensor[(1008, ?), float32], Tensor[(10, 2, 3), uint64], Tensor[(6), uint64], Tensor[(60), uint64]) {
    %101 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
    %102 = cast(%var_7594, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
    %104 = reshape(%102, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint64] */;
    %105 = reshape(%103, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), uint64] */;
    %106 = %101.1;
    %107 = @func_2040(%104, %105) /* ty=Tensor[(10, 2, 3), uint64] */;
    (%106, %107, %var_7594, meta[relay.Constant][5] /* ty=Tensor[(60), uint64] */)
  };
  %108(%var_7599) /* ty=(Tensor[(1008, ?), float32], Tensor[(10, 2, 3), uint64], Tensor[(6), uint64], Tensor[(60), uint64]) */
}

def @func_5294(%var_5292: Tensor[(5, 5, 10), float64]) -> Tensor[(5, 5, 10), float64] {
  @func_5291(%var_5292) /* ty=Tensor[(5, 5, 10), float64] */
}

def @func_5622() -> (Tensor[(16, 16, 8), bool],) {
  @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */
}

def @func_5519() -> (Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) {
  %109 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  %112 = reshape(%111, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), float32] */;
  %113 = @func_4910(%112) /* ty=(Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) */;
  %114 = %113.0;
  (%110, %114)
}

def @func_8261(%var_8234: Tensor[(4, 300), float64]) -> (Tensor[(14, 9, 8), float32], Tensor[(4, 300), float64], Tensor[(16, 5, 15), float32]) {
  %115 = @func_7179() /* ty=(Tensor[(14, 9, 8), float32],) */;
  %116 = cast(%var_8234, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
  %117 = reshape(%116, newshape=[16, 5, 15]) /* ty=Tensor[(16, 5, 15), float64] */;
  %118 = @func_7020(%117) /* ty=Tensor[(16, 5, 15), float64] */;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %120 = log(%119) /* ty=Tensor[(16, 5, 15), float32] */;
  %121 = cast(%118, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="float32") /* ty=Tensor[(16, 5, 15), float32] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %125 = %115.0;
  %126 = floor_mod(%123, %124) /* ty=Tensor[(16, 5, 15), float32] */;
  (%125, %var_8234, %126)
}

def @func_3506(%var_3504: Tensor[(14, 9, 8), int8], %var_3505: Tensor[(14, 9, 8), int8]) -> Tensor[(14, 9, 8), int8] {
  @func_3502(%var_3504, %var_3505) /* ty=Tensor[(14, 9, 8), int8] */
}

def @func_6712(%var_6711: Tensor[(462), int64]) -> (Tensor[(14, 9, 8), float32], Tensor[(9, 16, 6), float32], Tensor[(256), int16], Tensor[(462), int64]) {
  %141 = fn (%var_6707: Tensor[(462), int64]) -> (Tensor[(14, 9, 8), float32], Tensor[(9, 16, 6), float32], Tensor[(256), int16], Tensor[(462), int64]) {
    %127 = @func_5239() /* ty=(Tensor[(14, 9, 8), float32],) */;
    %128 = %127.0;
    %129 = cast(%128, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %130 = exp(%129) /* ty=Tensor[(14, 9, 8), float32] */;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(14, 9, 8), float64] */;
    %132 = tan(%131) /* ty=Tensor[(14, 9, 8), float64] */;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %134 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %135 = cast(%var_6707, dtype="int64") /* ty=Tensor[(462), int64] */;
    %136 = reshape(%135, newshape=[462]) /* ty=Tensor[(462), int64] */;
    %137 = @func_6483(%136) /* ty=(Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) */;
    %138 = cos(%133) /* ty=Tensor[(14, 9, 8), float32] */;
    %139 = %134.0;
    %140 = %137.2;
    (%138, %139, %140, %var_6707)
  };
  %141(%var_6711) /* ty=(Tensor[(14, 9, 8), float32], Tensor[(9, 16, 6), float32], Tensor[(256), int16], Tensor[(462), int64]) */
}

def @func_6168(%var_6165: Tensor[(1, 6, 8), uint16], %var_6166: Tensor[(2, 6, 8), uint16], %var_6167: Tensor[(9, 6, 8), uint16]) -> (Tensor[(2, 6, 8), bool], Tensor[(9, 16, 6), float64], Tensor[(9, 6, 8), int16]) {
  @func_6163(%var_6165, %var_6166, %var_6167) /* ty=(Tensor[(2, 6, 8), bool], Tensor[(9, 16, 6), float64], Tensor[(9, 6, 8), int16]) */
}

def @func_5768(%var_5707: Tensor[(9, 16, 6), uint32], %var_5719: int64, %var_5720: Tensor[(90), int64]) -> (int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) {
  %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %144 = cast(%var_5719, dtype="int64") /* ty=int64 */;
  %145 = cast(%var_5720, dtype="int64") /* ty=Tensor[(90), int64] */;
  %146 = reshape(%142, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %147 = reshape(%143, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %148 = reshape(%144, newshape=[]) /* ty=int64 */;
  %149 = reshape(%145, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
  %150 = @func_2419(%146, %147, %148, %149) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
  %151 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %152 = %151.0;
  %153 = cast(%var_5707, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = not_equal(%155, %156) /* ty=Tensor[(9, 16, 6), bool] */;
  %158 = cast(%157, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %159 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%152, dtype="bool") /* ty=Tensor[(9, 16, 6), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %164 = reshape(%162, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint64] */;
  %165 = reshape(%163, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), uint64] */;
  %166 = @func_2040(%164, %165) /* ty=Tensor[(10, 2, 3), uint64] */;
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), uint64] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = %150.2;
  %172 = less_equal(%160, %161) /* ty=Tensor[(9, 16, 6), bool] */;
  %173 = logical_or(%169, %170) /* ty=Tensor[(10, 2, 3), bool] */;
  (%171, meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, %var_5719, %var_5720, %172, meta[relay.Constant][7] /* ty=Tensor[(6), uint64] */, %173)
}

def @main(%var_8448: Tensor[(15, 2, 1), float64]) -> Tensor[(15, 2, 1), float64] {
  %174 = cast(%var_8448, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  log10(%174) /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_6847() -> (Tensor[(9, 16, 6), uint32],) {
  %177 = fn () -> (Tensor[(9, 16, 6), uint32],) {
    %175 = @func_5519() /* ty=(Tensor[(9, 16, 6), uint32], Tensor[(9, 16, 6), uint64]) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(9, 16, 6), uint32],) */
}

def @func_5588() -> Tensor[(16, 16, 8), bool] {
  %178 = fn () -> Tensor[(16, 16, 8), bool] {
    @func_4763() /* ty=Tensor[(16, 16, 8), bool] */
  };
  %178() /* ty=Tensor[(16, 16, 8), bool] */
}

def @func_5172() -> Tensor[(14, 9, 8), float32] {
  %187 = fn () -> Tensor[(14, 9, 8), float32] {
    %179 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
    %180 = %179.2;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %182 = log(%181) /* ty=Tensor[(14, 9, 8), float32] */;
    %183 = cast(%180, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%182, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%185, %186) /* ty=Tensor[(14, 9, 8), float32] */
  };
  %187() /* ty=Tensor[(14, 9, 8), float32] */
}

def @func_6449(%var_6448: Tensor[(1008, 3), float64]) -> (Tensor[(1008, 3), bool],) {
  %193 = fn (%var_6442: Tensor[(1008, 3), float64]) -> (Tensor[(1008, 3), bool],) {
    %188 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
    %189 = %188.0;
    %190 = cast(%189, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
    %191 = cast(%var_6442, dtype="bool") /* ty=Tensor[(1008, 3), bool] */;
    %192 = equal(%190, %191) /* ty=Tensor[(1008, 3), bool] */;
    (%192,)
  };
  %193(%var_6448) /* ty=(Tensor[(1008, 3), bool],) */
}

def @func_2561(%var_2558: Tensor[(11, 5, 7), float64], %var_2559: Tensor[(224), int16], %var_2560: Tensor[(90), int64]) -> (Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) {
  %207 = fn (%var_2539: Tensor[(11, 5, 7), float64], %var_2549: Tensor[(224), int16], %var_2550: Tensor[(90), int64]) -> (Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) {
    %194 = cast(5.51887f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %195 = cast(%var_2539, dtype="float64") /* ty=Tensor[(11, 5, 7), float64] */;
    %196 = cast(%var_2549, dtype="int16") /* ty=Tensor[(224), int16] */;
    %197 = cast(%var_2549, dtype="int16") /* ty=Tensor[(224), int16] */;
    %198 = cast(5.51887f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
    %199 = cast(%var_2550, dtype="int64") /* ty=Tensor[(90), int64] */;
    %200 = reshape(%196, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
    %201 = reshape(%197, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
    %202 = reshape(%198, newshape=[]) /* ty=int64 */;
    %203 = reshape(%199, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
    %204 = @func_2419(%200, %201, %202, %203) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
    %205 = mod(%194, %195) /* ty=Tensor[(11, 5, 7), float64] */;
    %206 = %204.1;
    (%205, %206, %var_2549, %var_2550)
  };
  %207(%var_2558, %var_2559, %var_2560) /* ty=(Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) */
}

def @func_1679(%var_1671: int32) -> Tensor[(1, 3), bool] {
  %208 = cast(%var_1671, dtype="bool") /* ty=bool */;
  %209 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
  less_equal(%208, %209) /* ty=Tensor[(1, 3), bool] */
}

def @func_68(%var_62: Tensor[(15, 16, 3), float32]) -> (Tensor[(15, 16, 3), float32],) {
  %210 = cast(%var_62, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %211 = acos(%210) /* ty=Tensor[(15, 16, 3), float32] */;
  (%211,)
}

def @func_5887() -> (Tensor[(9, 16, 6), float32],) {
  %212 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %213 = %212.0;
  (%213,)
}

def @func_4580() -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) {
  %214 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %215 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %216 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %217 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %218 = reshape(%216, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), int8] */;
  %219 = reshape(%217, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), int8] */;
  %220 = cast(meta[relay.Constant][11] /* ty=Tensor[(2048), float64] */, dtype="float64") /* ty=Tensor[(2048), float64] */;
  %221 = reshape(%220, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %222 = @func_1863(%221) /* ty=Tensor[(16, 16, 8), float64] */;
  %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(2048), float64] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = %214.0;
  %228 = %215.0;
  %229 = @func_3502(%218, %219) /* ty=Tensor[(14, 9, 8), int8] */;
  %230 = logical_or(%225, %226) /* ty=Tensor[(16, 16, 8), bool] */;
  (%227, %228, %229, meta[relay.Constant][10] /* ty=Tensor[(1008, 1), int8] */, %230)
}

def @func_4910(%var_4889: Tensor[(9, 16, 6), float32]) -> (Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) {
  %231 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %232 = %231.0;
  %233 = cast(%var_4889, dtype="uint64") /* ty=Tensor[(9, 16, 6), uint64] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="uint64") /* ty=Tensor[(9, 16, 6), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %237 = subtract(%235, %236) /* ty=Tensor[(9, 16, 6), uint64] */;
  %238 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  (%237, %238)
}

def @func_4979(%var_4977: Tensor[(9, 16, 6), float32], %var_4978: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], int64, Tensor[(126, 1), int32], Tensor[(90), int64], Tensor[(224), int16]) {
  %256 = fn (%var_4940: Tensor[(9, 16, 6), float32], %var_4953: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], int64, Tensor[(126, 1), int32], Tensor[(90), int64], Tensor[(224), int16]) {
    %239 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %240 = %239.0;
    %241 = cast(%var_4940, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
    %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%240, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %245 = cast(%var_4940, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
    %246 = cast(meta[relay.Constant][12] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
    %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
    %248 = cast(%var_4953, dtype="int16") /* ty=Tensor[(224), int16] */;
    %249 = reshape(%246, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
    %250 = reshape(%247, newshape=[90]) /* ty=Tensor[(90), int64] */;
    %251 = reshape(%248, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
    %252 = @func_3320(%249, %250, %251) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
    %253 = divide(%243, %244) /* ty=Tensor[(9, 16, 6), float32] */;
    %254 = acos(%245) /* ty=Tensor[(9, 16, 6), float32] */;
    %255 = %252.1;
    (%253, %254, %255, meta[relay.Constant][12] /* ty=Tensor[(126, 1), int32] */, meta[relay.Constant][13] /* ty=Tensor[(90), int64] */, %var_4953)
  };
  %256(%var_4977, %var_4978) /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], int64, Tensor[(126, 1), int32], Tensor[(90), int64], Tensor[(224), int16]) */
}

def @func_3325(%var_3322: Tensor[(3, 6, 7), int32], %var_3323: Tensor[(90), int64], %var_3324: Tensor[(16, 14), int16]) -> (Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) {
  @func_3320(%var_3322, %var_3323, %var_3324) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */
}

def @func_6163(%var_6129: Tensor[(1, 6, 8), uint16], %var_6130: Tensor[(2, 6, 8), uint16], %var_6159: Tensor[(9, 6, 8), uint16]) -> (Tensor[(2, 6, 8), bool], Tensor[(9, 16, 6), float64], Tensor[(9, 6, 8), int16]) {
  %257 = cast(%var_6129, dtype="bool") /* ty=Tensor[(1, 6, 8), bool] */;
  %258 = cast(%var_6130, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %259 = @func_5991() /* ty=(Tensor[(9, 16, 6), float64], Tensor[(9, 16, 6), float64]) */;
  %260 = cast(%var_6129, dtype="int16") /* ty=Tensor[(1, 6, 8), int16] */;
  %261 = cast(%var_6159, dtype="int16") /* ty=Tensor[(9, 6, 8), int16] */;
  %262 = less_equal(%257, %258) /* ty=Tensor[(2, 6, 8), bool] */;
  %263 = %259.0;
  %264 = right_shift(%260, %261) /* ty=Tensor[(9, 6, 8), int16] */;
  (%262, %263, %264)
}

def @func_5879(%var_5877: Tensor[(1, 5, 13), int16], %var_5878: Tensor[(9, 5, 13), int16]) -> (Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) {
  %277 = fn (%var_5854: Tensor[(1, 5, 13), int16], %var_5855: Tensor[(9, 5, 13), int16]) -> (Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) {
    %265 = cast(%var_5854, dtype="int16") /* ty=Tensor[(1, 5, 13), int16] */;
    %266 = cast(%var_5855, dtype="int16") /* ty=Tensor[(9, 5, 13), int16] */;
    %267 = cast(meta[relay.Constant][14] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
    %268 = reshape(%267, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
    %269 = @func_5043(%268) /* ty=(Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) */;
    %270 = %269.0;
    %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
    %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%270, dtype="bool") /* ty=Tensor[(16, 16, 8), bool] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %275 = minimum(%265, %266) /* ty=Tensor[(9, 5, 13), int16] */;
    %276 = greater_equal(%273, %274) /* ty=Tensor[(16, 16, 8), bool] */;
    (%275, %276)
  };
  %277(%var_5877, %var_5878) /* ty=(Tensor[(9, 5, 13), int16], Tensor[(16, 16, 8), bool]) */
}

def @func_8042() -> (Tensor[(9, 16, 6), float32],) {
  @func_8040() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_2706(%var_2704: Tensor[(720), float32], %var_2705: Tensor[(462, 1), int64]) -> (Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) {
  @func_2702(%var_2704, %var_2705) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) */
}

def @func_71(%var_69: Tensor[(15, 16, 3), float32]) -> (Tensor[(15, 16, 3), float32],) {
  @func_68(%var_69) /* ty=(Tensor[(15, 16, 3), float32],) */
}

def @func_7949(%var_7946: int64, %var_7947: Tensor[(90), int64], %var_7948: Tensor[(8, 28), int16]) -> (Tensor[(16, 16, 8), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(90), int64], Tensor[(90), int64], Tensor[(8, 28), int16], Tensor[(385), float32], Tensor[(1, 15, 6), float64], Tensor[(126), int32], Tensor[(1008, ?), float32]) {
  %307 = fn (%var_7891: int64, %var_7892: Tensor[(90), int64], %var_7904: Tensor[(8, 28), int16]) -> (Tensor[(16, 16, 8), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(90), int64], Tensor[(90), int64], Tensor[(8, 28), int16], Tensor[(385), float32], Tensor[(1, 15, 6), float64], Tensor[(126), int32], Tensor[(1008, ?), float32]) {
    %278 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
    %279 = %278.0;
    %280 = cast(%279, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %281 = cast(%var_7891, dtype="int64") /* ty=int64 */;
    %282 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
    %283 = reshape(%281, newshape=[]) /* ty=int64 */;
    %284 = reshape(%282, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
    %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(385), float64] */, dtype="float64") /* ty=Tensor[(385), float64] */;
    %286 = cast(%var_7904, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
    %287 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
    %288 = reshape(%285, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), float64] */;
    %289 = reshape(%286, newshape=[224]) /* ty=Tensor[(224), int16] */;
    %290 = reshape(%287, newshape=[90]) /* ty=Tensor[(90), int64] */;
    %291 = @func_2557(%288, %289, %290) /* ty=(Tensor[(11, 5, 7), float64], Tensor[(1, 15, 6), bool], Tensor[(224), int16], Tensor[(90), int64]) */;
    %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(385), float64] */, dtype="float32") /* ty=Tensor[(385), float32] */;
    %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %294 = cast(%var_7892, dtype="int64") /* ty=Tensor[(90), int64] */;
    %295 = cast(%var_7904, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
    %296 = reshape(%293, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), int32] */;
    %297 = reshape(%294, newshape=[90]) /* ty=Tensor[(90), int64] */;
    %298 = reshape(%295, newshape=[16, 14]) /* ty=Tensor[(16, 14), int16] */;
    %299 = @func_3320(%296, %297, %298) /* ty=(Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) */;
    %300 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
    %301 = sqrt(%280) /* ty=Tensor[(16, 16, 8), float64] */;
    %302 = @func_1302(%283, %284) /* ty=Tensor[(1, 15, 6), bool] */;
    %303 = %291.3;
    %304 = log2(%292) /* ty=Tensor[(385), float32] */;
    %305 = %299.9;
    %306 = %300.1;
    (%301, %302, %var_7891, %var_7892, %303, %var_7904, %304, %305, meta[relay.Constant][16] /* ty=Tensor[(126), int32] */, %306)
  };
  %307(%var_7946, %var_7947, %var_7948) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(90), int64], Tensor[(90), int64], Tensor[(8, 28), int16], Tensor[(385), float32], Tensor[(1, 15, 6), float64], Tensor[(126), int32], Tensor[(1008, ?), float32]) */
}

def @func_3892(%var_3890: Tensor[(16, 7, 16), float64], %var_3891: Tensor[(720), float32]) -> (Tensor[(16, 7, 16), float64], Tensor[(1, 3), bool], Tensor[(462), float32], Tensor[(720), float32], Tensor[(77, 6), int64]) {
  %320 = fn (%var_3871: Tensor[(16, 7, 16), float64], %var_3880: Tensor[(720), float32]) -> (Tensor[(16, 7, 16), float64], Tensor[(1, 3), bool], Tensor[(462), float32], Tensor[(720), float32], Tensor[(77, 6), int64]) {
    %308 = cast(1.7285f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %309 = cast(%var_3871, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
    %310 = cast(1.7285f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
    %311 = reshape(%310, newshape=[]) /* ty=int32 */;
    %312 = cast(%var_3880, dtype="float32") /* ty=Tensor[(720), float32] */;
    %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(77, 6), int64] */, dtype="int64") /* ty=Tensor[(77, 6), int64] */;
    %314 = reshape(%312, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %315 = reshape(%313, newshape=[462, 1]) /* ty=Tensor[(462, 1), int64] */;
    %316 = @func_2702(%314, %315) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) */;
    %317 = divide(%308, %309) /* ty=Tensor[(16, 7, 16), float64] */;
    %318 = @func_1679(%311) /* ty=Tensor[(1, 3), bool] */;
    %319 = %316.4;
    (%317, %318, %319, %var_3880, meta[relay.Constant][17] /* ty=Tensor[(77, 6), int64] */)
  };
  %320(%var_3890, %var_3891) /* ty=(Tensor[(16, 7, 16), float64], Tensor[(1, 3), bool], Tensor[(462), float32], Tensor[(720), float32], Tensor[(77, 6), int64]) */
}

def @func_7585(%var_7583: int16, %var_7584: Tensor[(3, 15, 11), int16]) -> (Tensor[(3, 15, 11), bool],) {
  %324 = fn (%var_7563: int16, %var_7564: Tensor[(3, 15, 11), int16]) -> (Tensor[(3, 15, 11), bool],) {
    %321 = cast(%var_7563, dtype="bool") /* ty=bool */;
    %322 = cast(%var_7564, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
    %323 = less(%321, %322) /* ty=Tensor[(3, 15, 11), bool] */;
    (%323,)
  };
  %324(%var_7583, %var_7584) /* ty=(Tensor[(3, 15, 11), bool],) */
}

def @func_1306(%var_1304: int64, %var_1305: Tensor[(1, 15, 6), int64]) -> Tensor[(1, 15, 6), bool] {
  @func_1302(%var_1304, %var_1305) /* ty=Tensor[(1, 15, 6), bool] */
}

def @func_5965() -> (Tensor[(14, 9, 8), float32],) {
  %326 = fn () -> (Tensor[(14, 9, 8), float32],) {
    %325 = @func_5171() /* ty=Tensor[(14, 9, 8), float32] */;
    (%325,)
  };
  %326() /* ty=(Tensor[(14, 9, 8), float32],) */
}

def @func_7237(%var_7235: Tensor[(3, 42), int32], %var_7236: Tensor[(224), int16]) -> (Tensor[(9, 16, 6), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 42), int32], Tensor[(90, 1), int64], Tensor[(224), int16]) {
  @func_7233(%var_7235, %var_7236) /* ty=(Tensor[(9, 16, 6), float32], Tensor[(1, 15, 6), float64], Tensor[(3, 42), int32], Tensor[(90, 1), int64], Tensor[(224), int16]) */
}

def @func_821(%var_809: Tensor[(9, 15, 14), float64], %var_810: Tensor[(9, 15, 14), float64]) -> Tensor[(9, 15, 14), float64] {
  %327 = cast(%var_810, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
  %328 = shape_of(%var_809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_809, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%329, %330) /* ty=Tensor[(9, 15, 14), float64] */
}

def @func_7135() -> (Tensor[(9, 16, 6), uint32],) {
  %331 = @func_6846() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %332 = %331.0;
  (%332,)
}

def @func_7728(%var_7664: Tensor[(1664), int16]) -> (Tensor[(9, 16, 6), uint32], Tensor[(720, 1664), bool], Tensor[(720, 3), int16], Tensor[(720, 4), bool]) {
  %333 = @func_7135() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %334 = cast(meta[relay.Constant][18] /* ty=Tensor[(720, 1), float32] */, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %335 = cast(%var_7664, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %336 = floor_mod(%334, %335) /* ty=Tensor[(720, 1664), float64] */;
  %337 = cast(%336, dtype="bool") /* ty=Tensor[(720, 1664), bool] */;
  %338 = cast(%var_7664, dtype="bool") /* ty=Tensor[(1664), bool] */;
  %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %340 = log10(%339) /* ty=Tensor[(720, 1), float32] */;
  %341 = cast(%var_7664, dtype="int16") /* ty=Tensor[(1664), int16] */;
  %342 = cast(meta[relay.Constant][18] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %343 = reshape(%341, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), int16] */;
  %344 = reshape(%342, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %345 = @func_4255(%343, %344) /* ty=(Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) */;
  %346 = %345.5;
  %347 = cast(%340, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %348 = cast(%346, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %349 = cast(%340, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %350 = cast(meta[relay.Constant][19] /* ty=Tensor[(720, 4), float32] */, dtype="bool") /* ty=Tensor[(720, 4), bool] */;
  %351 = %333.0;
  %352 = greater_equal(%337, %338) /* ty=Tensor[(720, 1664), bool] */;
  %353 = maximum(%347, %348) /* ty=Tensor[(720, 3), int16] */;
  %354 = logical_or(%349, %350) /* ty=Tensor[(720, 4), bool] */;
  (%351, %352, %353, %354)
}

def @func_1865(%var_1864: Tensor[(16, 16, 8), float64]) -> Tensor[(16, 16, 8), float64] {
  %356 = fn (%var_1847: Tensor[(16, 16, 8), float64]) -> Tensor[(16, 16, 8), float64] {
    %355 = cast(%var_1847, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    exp(%355) /* ty=Tensor[(16, 16, 8), float64] */
  };
  %356(%var_1864) /* ty=Tensor[(16, 16, 8), float64] */
}

def @func_4258(%var_4256: Tensor[(16, 8, 13), int16], %var_4257: Tensor[(720), float32]) -> (Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) {
  %379 = fn (%var_4181: Tensor[(16, 8, 13), int16], %var_4203: Tensor[(720), float32]) -> (Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) {
    %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
    %358 = shape_of(%var_4181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_4181, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 8, 13), int16] */, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
    %362 = shape_of(%var_4181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%var_4181, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %365 = cast(%var_4203, dtype="float32") /* ty=Tensor[(720), float32] */;
    %366 = reshape(%365, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
    %367 = @func_68(%366) /* ty=(Tensor[(15, 16, 3), float32],) */;
    %368 = cast(meta[relay.Constant][22] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
    %369 = reshape(%368, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
    %370 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %371 = reshape(%370, newshape=[]) /* ty=int32 */;
    %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(78), int64] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %373 = equal(%359, %360) /* ty=Tensor[(16, 8, 13), bool] */;
    %374 = mod(%363, %364) /* ty=Tensor[(16, 8, 13), float32] */;
    %375 = %367.0;
    %376 = @func_4017(%369) /* ty=Tensor[(3, 13, 2), bool] */;
    %377 = @func_1679(%371) /* ty=Tensor[(1, 3), bool] */;
    %378 = cos(%372) /* ty=Tensor[(78), float32] */;
    (%373, %374, %375, %var_4203, %376, %377, -8 /* ty=int32 */, %378)
  };
  %379(%var_4256, %var_4257) /* ty=(Tensor[(16, 8, 13), bool], Tensor[(16, 8, 13), float32], Tensor[(15, 16, 3), float32], Tensor[(720), float32], Tensor[(3, 13, 2), bool], Tensor[(1, 3), bool], int32, Tensor[(78), float32]) */
}

def @func_754(%var_738: Tensor[(10, 11, 2), float64], %var_745: Tensor[(180, 4), float32]) -> (Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) {
  %380 = cast(%var_738, dtype="float64") /* ty=Tensor[(10, 11, 2), float64] */;
  %381 = cast(%var_745, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %382 = reshape(%381, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %383 = @func_68(%382) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %384 = %383.0;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %386 = reshape(%385, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %387 = @func_68(%386) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %388 = log(%380) /* ty=Tensor[(10, 11, 2), float64] */;
  %389 = %387.0;
  (%388, %384, %var_745, %389)
}

def @func_7442() -> (Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) {
  %409 = fn () -> (Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) {
    %390 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
    %391 = %390.0;
    %392 = cast(%391, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
    %393 = log2(%392) /* ty=Tensor[(1008, 1), float64] */;
    %394 = cast(%393, dtype="uint8") /* ty=Tensor[(1008, 1), uint8] */;
    %395 = cast(meta[relay.Constant][23] /* ty=Tensor[(1008, 2), float64] */, dtype="uint8") /* ty=Tensor[(1008, 2), uint8] */;
    %396 = cast(%391, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
    %397 = atanh(%396) /* ty=Tensor[(1008, 1), float64] */;
    %398 = cast(%391, dtype="int64") /* ty=Tensor[(1008, 1), int64] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(2), int32] */;
    %400 = cast(%397, dtype="int64") /* ty=Tensor[(1008, 1), int64] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %402 = right_shift(%400, %401) /* ty=Tensor[(1008, ?), int64] */;
    %403 = cast(%402, dtype="float32") /* ty=Tensor[(1008, ?), float32] */;
    %404 = shape_of(%393, dtype="int32") /* ty=Tensor[(2), int32] */;
    %405 = cast(%393, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %407 = logical_xor(%394, %395) /* ty=Tensor[(1008, 2), uint8] */;
    %408 = add(%405, %406) /* ty=Tensor[(1008, ?), float32] */;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */
}

def @func_7057() -> Tensor[(9, 16, 6), float32] {
  %410 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %410.0
}

def @func_5917() -> Tensor[(9, 16, 6), uint32] {
  %411 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
  %411.0
}

def @func_7965(%var_7961: Tensor[(10, 1, 11), float32]) -> (Tensor[(10, 1, 11), float32],) {
  %412 = cast(%var_7961, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %413 = asin(%412) /* ty=Tensor[(10, 1, 11), float32] */;
  (%413,)
}

def @func_4020(%var_4018: Tensor[(3, 13, 2), int64]) -> Tensor[(3, 13, 2), bool] {
  @func_4017(%var_4018) /* ty=Tensor[(3, 13, 2), bool] */
}

def @func_4293(%var_4291: Tensor[(16, 4, 4), int16], %var_4292: Tensor[(16, 4, 4), int16]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) {
  @func_4289(%var_4291, %var_4292) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) */
}

def @func_6622(%var_6620: Tensor[(864), uint32], %var_6621: int64) -> (Tensor[(1008, 1), float32], Tensor[(90), int64], Tensor[(864), uint32], int64, Tensor[(90), int64]) {
  @func_6618(%var_6620, %var_6621) /* ty=(Tensor[(1008, 1), float32], Tensor[(90), int64], Tensor[(864), uint32], int64, Tensor[(90), int64]) */
}

def @func_7731(%var_7729: Tensor[(1664), int16]) -> (Tensor[(9, 16, 6), uint32], Tensor[(720, 1664), bool], Tensor[(720, 3), int16], Tensor[(720, 4), bool]) {
  @func_7728(%var_7729) /* ty=(Tensor[(9, 16, 6), uint32], Tensor[(720, 1664), bool], Tensor[(720, 3), int16], Tensor[(720, 4), bool]) */
}

def @func_2044(%var_2042: Tensor[(1, 2, 3), uint64], %var_2043: Tensor[(10, 2, 3), uint64]) -> Tensor[(10, 2, 3), uint64] {
  @func_2040(%var_2042, %var_2043) /* ty=Tensor[(10, 2, 3), uint64] */
}

def @func_1251(%var_1185: Tensor[(9, 3, 9), float32], %var_1192: Tensor[(720, 1), float32], %var_1226: Tensor[(462), int64]) -> (Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) {
  %414 = cast(meta[relay.Constant][24] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %415 = cast(%var_1192, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %416 = reshape(%414, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), float64] */;
  %417 = reshape(%415, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %418 = @func_754(%416, %417) /* ty=(Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) */;
  %419 = cast(%var_1226, dtype="int64") /* ty=Tensor[(462), int64] */;
  %420 = reshape(%419, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
  %421 = cast(%var_1185, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %422 = sqrt(%421) /* ty=Tensor[(9, 3, 9), float32] */;
  %423 = cast(%var_1185, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %427 = cast(%var_1192, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %428 = reshape(%427, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float32] */;
  %429 = @func_68(%428) /* ty=(Tensor[(15, 16, 3), float32],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %432 = sin(%431) /* ty=Tensor[(15, 16, 3), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %434 = atan(%433) /* ty=Tensor[(15, 16, 3), float64] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %436 = %418.0;
  %437 = @func_1084(%420) /* ty=Tensor[(7, 6, 11), int64] */;
  %438 = bitwise_xor(%425, %426) /* ty=Tensor[(9, 3, 9), int8] */;
  %439 = sqrt(%435) /* ty=Tensor[(15, 16, 3), float32] */;
  (%var_1192, %436, meta[relay.Constant][24] /* ty=Tensor[(220), float64] */, %437, %var_1226, %438, %439)
}

def @func_8198() -> Tensor[(9, 16, 6), uint32] {
  %441 = fn () -> Tensor[(9, 16, 6), uint32] {
    %440 = @func_4537() /* ty=(Tensor[(9, 16, 6), uint32],) */;
    %440.0
  };
  %441() /* ty=Tensor[(9, 16, 6), uint32] */
}

def @func_4582() -> (Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) {
  @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */
}

def @func_1084(%var_1075: Tensor[(7, 6, 11), int64]) -> Tensor[(7, 6, 11), int64] {
  %442 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %443 = cast(%var_1075, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  bitwise_xor(%442, %443) /* ty=Tensor[(7, 6, 11), int64] */
}

def @func_7343() -> (Tensor[(16, 16, 8), bool],) {
  %444 = @func_7277() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %445 = %444.0;
  (%445,)
}

def @func_8140(%var_8074: Tensor[(1008, 2), uint8], %var_8089: Tensor[(1008, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(13, 6), int64], Tensor[(1008, 2), bool], Tensor[(1008, 2), float64]) {
  %446 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 6), int64] */;
  %447 = reshape(%446, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %448 = @func_7441() /* ty=(Tensor[(1008, 2), uint8], Tensor[(1008, ?), float32]) */;
  %449 = %448.0;
  %450 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %454 = logical_and(%452, %453) /* ty=Tensor[(1008, 2), bool] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
  %456 = log2(%455) /* ty=Tensor[(1008, 2), float32] */;
  %457 = cast(%var_8089, dtype="int32") /* ty=Tensor[(1008, 2), int32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %459 = cast(%456, dtype="int32") /* ty=Tensor[(1008, 2), int32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %461 = add(%459, %460) /* ty=Tensor[(1008, 2), int32] */;
  %462 = cast(%461, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %463 = shape_of(%456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %464 = cast(%456, dtype="bool") /* ty=Tensor[(1008, 2), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %466 = cast(%var_8089, dtype="float64") /* ty=Tensor[(1008, 2), float64] */;
  %467 = @func_4017(%447) /* ty=Tensor[(3, 13, 2), bool] */;
  %468 = equal(%464, %465) /* ty=Tensor[(1008, 2), bool] */;
  %469 = log10(%466) /* ty=Tensor[(1008, 2), float64] */;
  (%467, meta[relay.Constant][25] /* ty=Tensor[(13, 6), int64] */, %468, %469)
}

def @func_6485(%var_6484: Tensor[(462), int64]) -> (Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) {
  %484 = fn (%var_6456: Tensor[(462), int64]) -> (Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) {
    %470 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
    %471 = cast(%var_6456, dtype="int64") /* ty=Tensor[(462), int64] */;
    %472 = reshape(%471, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
    %473 = @func_1084(%472) /* ty=Tensor[(7, 6, 11), int64] */;
    %474 = cast(%473, dtype="bool") /* ty=Tensor[(7, 6, 11), bool] */;
    %475 = shape_of(%var_6456, dtype="int32") /* ty=Tensor[(1), int32] */;
    %476 = cast(%var_6456, dtype="bool") /* ty=Tensor[(462), bool] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?), bool] */;
    %478 = cast(meta[relay.Constant][26] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
    %479 = reshape(%478, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
    %480 = @func_5043(%479) /* ty=(Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) */;
    %481 = %470.0;
    %482 = greater(%476, %477) /* ty=Tensor[(462), bool] */;
    %483 = %480.1;
    (%481, %482, %483, meta[relay.Constant][26] /* ty=Tensor[(2048), bool] */)
  };
  %484(%var_6484) /* ty=(Tensor[(1008, 1), float64], Tensor[(462), bool], Tensor[(256), int16], Tensor[(2048), bool]) */
}

def @func_6933(%var_6932: Tensor[(9, 7, 11), float32]) -> (Tensor[(9, 7, 11), float32], Tensor[(14, 9, 8), float32]) {
  %491 = fn (%var_6920: Tensor[(9, 7, 11), float32]) -> (Tensor[(9, 7, 11), float32], Tensor[(14, 9, 8), float32]) {
    %485 = cast(%var_6920, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %486 = sigmoid(%485) /* ty=Tensor[(9, 7, 11), float32] */;
    %487 = cast(%486, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %488 = @func_5964() /* ty=(Tensor[(14, 9, 8), float32],) */;
    %489 = sin(%487) /* ty=Tensor[(9, 7, 11), float32] */;
    %490 = %488.0;
    (%489, %490)
  };
  %491(%var_6932) /* ty=(Tensor[(9, 7, 11), float32], Tensor[(14, 9, 8), float32]) */
}

def @func_5094() -> (Tensor[(9, 16, 6), float32],) {
  @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_6618(%var_6613: Tensor[(864), uint32], %var_6614: int64) -> (Tensor[(1008, 1), float32], Tensor[(90), int64], Tensor[(864), uint32], int64, Tensor[(90), int64]) {
  %492 = @func_5448() /* ty=(Tensor[(1008, 1), float64],) */;
  %493 = %492.0;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %495 = cast(%var_6613, dtype="uint32") /* ty=Tensor[(864), uint32] */;
  %496 = cast(%var_6614, dtype="int64") /* ty=int64 */;
  %497 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %498 = reshape(%495, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), uint32] */;
  %499 = reshape(%496, newshape=[]) /* ty=int64 */;
  %500 = reshape(%497, newshape=[90]) /* ty=Tensor[(90), int64] */;
  %501 = @func_5768(%498, %499, %500) /* ty=(int64, Tensor[(224), int16], int64, Tensor[(90), int64], Tensor[(9, 16, 6), bool], Tensor[(6), uint64], Tensor[(10, 2, 3), bool]) */;
  %502 = rsqrt(%494) /* ty=Tensor[(1008, 1), float32] */;
  %503 = %501.3;
  (%502, %503, %var_6613, %var_6614, meta[relay.Constant][27] /* ty=Tensor[(90), int64] */)
}

def @func_8378() -> (Tensor[(9, 16, 6), float32],) {
  %504 = @func_8057() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %505 = %504.0;
  (%505,)
}

def @func_1256(%var_1253: Tensor[(9, 3, 9), float32], %var_1254: Tensor[(720, 1), float32], %var_1255: Tensor[(462), int64]) -> (Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) {
  @func_1251(%var_1253, %var_1254, %var_1255) /* ty=(Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) */
}

def @func_7345() -> (Tensor[(16, 16, 8), bool],) {
  @func_7343() /* ty=(Tensor[(16, 16, 8), bool],) */
}

def @func_8040() -> (Tensor[(9, 16, 6), float32],) {
  %506 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %507 = %506.0;
  (%507,)
}

def @func_5046(%var_5044: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) {
  @func_5043(%var_5044) /* ty=(Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) */
}

def @func_2531(%var_2529: float32, %var_2530: Tensor[(14, 7, 9), float32]) -> (Tensor[(14, 7, 9), float32],) {
  %511 = fn (%var_2503: float32, %var_2504: Tensor[(14, 7, 9), float32]) -> (Tensor[(14, 7, 9), float32],) {
    %508 = cast(%var_2503, dtype="float32") /* ty=float32 */;
    %509 = cast(%var_2504, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
    %510 = floor_mod(%508, %509) /* ty=Tensor[(14, 7, 9), float32] */;
    (%510,)
  };
  %511(%var_2529, %var_2530) /* ty=(Tensor[(14, 7, 9), float32],) */
}

def @func_5919() -> Tensor[(9, 16, 6), uint32] {
  @func_5917() /* ty=Tensor[(9, 16, 6), uint32] */
}

def @func_3940(%var_3938: Tensor[(12, 16, 11), float32], %var_3939: int64) -> (Tensor[(12, 16, 11), uint32], Tensor[(12, 16, 11), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(45, 2), int64]) {
  %526 = fn (%var_3916: Tensor[(12, 16, 11), float32], %var_3932: int64) -> (Tensor[(12, 16, 11), uint32], Tensor[(12, 16, 11), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(45, 2), int64]) {
    %512 = cast(%var_3916, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %513 = sinh(%512) /* ty=Tensor[(12, 16, 11), float32] */;
    %514 = cast(%var_3916, dtype="uint32") /* ty=Tensor[(12, 16, 11), uint32] */;
    %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%513, dtype="uint32") /* ty=Tensor[(12, 16, 11), uint32] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %518 = cast(%var_3916, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
    %519 = cast(%var_3932, dtype="int64") /* ty=int64 */;
    %520 = cast(meta[relay.Constant][28] /* ty=Tensor[(45, 2), int64] */, dtype="int64") /* ty=Tensor[(45, 2), int64] */;
    %521 = reshape(%519, newshape=[]) /* ty=int64 */;
    %522 = reshape(%520, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
    %523 = logical_xor(%516, %517) /* ty=Tensor[(12, 16, 11), uint32] */;
    %524 = tan(%518) /* ty=Tensor[(12, 16, 11), float64] */;
    %525 = @func_1302(%521, %522) /* ty=Tensor[(1, 15, 6), bool] */;
    (%523, %524, %525, %var_3932, meta[relay.Constant][28] /* ty=Tensor[(45, 2), int64] */)
  };
  %526(%var_3938, %var_3939) /* ty=(Tensor[(12, 16, 11), uint32], Tensor[(12, 16, 11), float64], Tensor[(1, 15, 6), bool], int64, Tensor[(45, 2), int64]) */
}

def @func_5448() -> (Tensor[(1008, 1), float64],) {
  %527 = @func_5372() /* ty=Tensor[(1008, 1), int8] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %529 = exp(%528) /* ty=Tensor[(1008, 1), float64] */;
  (%529,)
}

def @func_6041() -> Tensor[(9, 16, 6), float32] {
  %531 = fn () -> Tensor[(9, 16, 6), float32] {
    %530 = @func_5887() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %530.0
  };
  %531() /* ty=Tensor[(9, 16, 6), float32] */
}

def @func_7859(%var_7857: Tensor[(3, 5, 5), float64]) -> (Tensor[(3, 5, 5), float64], Tensor[(9, 16, 6), float32]) {
  @func_7856(%var_7857) /* ty=(Tensor[(3, 5, 5), float64], Tensor[(9, 16, 6), float32]) */
}

def @func_4476(%var_4474: Tensor[(6, 9, 4), int16]) -> (Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) {
  @func_4473(%var_4474) /* ty=(Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) */
}

def @func_4289(%var_4270: Tensor[(16, 4, 4), int16], %var_4271: Tensor[(16, 4, 4), int16]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) {
  %532 = cast(%var_4271, dtype="int16") /* ty=Tensor[(16, 4, 4), int16] */;
  %533 = shape_of(%var_4270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_4270, dtype="int16") /* ty=Tensor[(16, 4, 4), int16] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %536 = add(%534, %535) /* ty=Tensor[(16, 4, 4), int16] */;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %538 = sinh(%537) /* ty=Tensor[(16, 4, 4), float64] */;
  %539 = cast(%536, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = cast(%536, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %544 = less(%541, %542) /* ty=Tensor[(16, 4, 4), bool] */;
  %545 = log2(%543) /* ty=Tensor[(16, 4, 4), float32] */;
  (%544, %545)
}

def @func_8057() -> (Tensor[(9, 16, 6), float32],) {
  %546 = @func_6040() /* ty=Tensor[(9, 16, 6), float32] */;
  (%546,)
}

def @func_7450(%var_7443: Tensor[(7, 12, 2), float32]) -> Tensor[(7, 12, 2), float32] {
  %547 = cast(%var_7443, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  acosh(%547) /* ty=Tensor[(7, 12, 2), float32] */
}

def @func_3706(%var_3705: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64], Tensor[(14, 15, 14), float64]) {
  %552 = fn (%var_3676: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64], Tensor[(14, 15, 14), float64]) {
    %548 = cast(%var_3676, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
    %549 = cast(%var_3676, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
    %550 = sin(%548) /* ty=Tensor[(14, 15, 14), float64] */;
    %551 = sinh(%549) /* ty=Tensor[(14, 15, 14), float64] */;
    (%550, %551)
  };
  %552(%var_3705) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(14, 15, 14), float64]) */
}

def @func_4538() -> (Tensor[(9, 16, 6), uint32],) {
  %560 = fn () -> (Tensor[(9, 16, 6), uint32],) {
    %553 = @func_4460() /* ty=(Tensor[(9, 16, 6), float32],) */;
    %554 = %553.0;
    %555 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 16, 6), float32] */, dtype="uint32") /* ty=Tensor[(9, 16, 6), uint32] */;
    %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%554, dtype="uint32") /* ty=Tensor[(9, 16, 6), uint32] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %559 = left_shift(%557, %558) /* ty=Tensor[(9, 16, 6), uint32] */;
    (%559,)
  };
  %560() /* ty=(Tensor[(9, 16, 6), uint32],) */
}

def @func_8068() -> Tensor[(9, 16, 6), float64] {
  @func_8066() /* ty=Tensor[(9, 16, 6), float64] */
}

def @func_4834(%var_4830: Tensor[(243), float32], %var_4831: Tensor[(720), float32], %var_4832: Tensor[(462), int64], %var_4833: Tensor[(216), int16]) -> (Tensor[(16, 16, 8), bool], Tensor[(16, 16, 8), float64], Tensor[(1008, 1), float64], Tensor[(15, 16, 3), float32], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(6, 9, 4), int16], Tensor[(216), int16], Tensor[(14, 9, 8), int8]) {
  @func_4828(%var_4830, %var_4831, %var_4832, %var_4833) /* ty=(Tensor[(16, 16, 8), bool], Tensor[(16, 16, 8), float64], Tensor[(1008, 1), float64], Tensor[(15, 16, 3), float32], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(6, 9, 4), int16], Tensor[(216), int16], Tensor[(14, 9, 8), int8]) */
}

def @func_2303(%var_2298: Tensor[(7, 11, 7), int16], %var_2299: Tensor[(7, 11, 7), int16], %var_2300: Tensor[(243), float32], %var_2301: Tensor[(720), float32], %var_2302: Tensor[(462), int64]) -> (Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) {
  %578 = fn (%var_2259: Tensor[(7, 11, 7), int16], %var_2260: Tensor[(7, 11, 7), int16], %var_2279: Tensor[(243), float32], %var_2280: Tensor[(720), float32], %var_2281: Tensor[(462), int64]) -> (Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) {
    %561 = cast(%var_2279, dtype="float32") /* ty=Tensor[(243), float32] */;
    %562 = cast(%var_2280, dtype="float32") /* ty=Tensor[(720), float32] */;
    %563 = cast(%var_2281, dtype="int64") /* ty=Tensor[(462), int64] */;
    %564 = reshape(%561, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
    %565 = reshape(%562, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
    %566 = reshape(%563, newshape=[462]) /* ty=Tensor[(462), int64] */;
    %567 = @func_1251(%564, %565, %566) /* ty=(Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) */;
    %568 = %567.4;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(462), float32] */;
    %570 = cast(%var_2260, dtype="bool") /* ty=Tensor[(7, 11, 7), bool] */;
    %571 = shape_of(%var_2259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%var_2259, dtype="bool") /* ty=Tensor[(7, 11, 7), bool] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %574 = greater(%572, %573) /* ty=Tensor[(7, 11, 7), bool] */;
    %575 = cast(%574, dtype="float32") /* ty=Tensor[(7, 11, 7), float32] */;
    %576 = tan(%569) /* ty=Tensor[(462), float32] */;
    %577 = exp(%575) /* ty=Tensor[(7, 11, 7), float32] */;
    (%var_2279, %var_2280, %var_2281, %576, %577)
  };
  %578(%var_2298, %var_2299, %var_2300, %var_2301, %var_2302) /* ty=(Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) */
}

def @func_3502(%var_3486: Tensor[(14, 9, 8), int8], %var_3487: Tensor[(14, 9, 8), int8]) -> Tensor[(14, 9, 8), int8] {
  %579 = cast(%var_3487, dtype="int8") /* ty=Tensor[(14, 9, 8), int8] */;
  %580 = shape_of(%var_3486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_3486, dtype="int8") /* ty=Tensor[(14, 9, 8), int8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%581, %582) /* ty=Tensor[(14, 9, 8), int8] */
}

def @func_7137() -> (Tensor[(9, 16, 6), uint32],) {
  @func_7135() /* ty=(Tensor[(9, 16, 6), uint32],) */
}

def @func_8264(%var_8262: Tensor[(4, 300), float64]) -> (Tensor[(14, 9, 8), float32], Tensor[(4, 300), float64], Tensor[(16, 5, 15), float32]) {
  @func_8261(%var_8262) /* ty=(Tensor[(14, 9, 8), float32], Tensor[(4, 300), float64], Tensor[(16, 5, 15), float32]) */
}

def @func_7059() -> Tensor[(9, 16, 6), float32] {
  @func_7057() /* ty=Tensor[(9, 16, 6), float32] */
}

def @func_7279() -> (Tensor[(16, 16, 8), bool],) {
  @func_7277() /* ty=(Tensor[(16, 16, 8), bool],) */
}

def @func_5043(%var_5014: Tensor[(16, 16, 8), bool]) -> (Tensor[(16, 16, 8), uint32], Tensor[(256), int16], Tensor[(16, 4, 4), float64]) {
  %583 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  %584 = cast(%var_5014, dtype="uint32") /* ty=Tensor[(16, 16, 8), uint32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="uint32") /* ty=Tensor[(16, 16, 8), uint32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %588 = cast(meta[relay.Constant][30] /* ty=Tensor[(256), int16] */, dtype="int16") /* ty=Tensor[(256), int16] */;
  %589 = cast(meta[relay.Constant][30] /* ty=Tensor[(256), int16] */, dtype="int16") /* ty=Tensor[(256), int16] */;
  %590 = reshape(%588, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), int16] */;
  %591 = reshape(%589, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), int16] */;
  %592 = @func_4289(%590, %591) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), float32]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %595 = maximum(%586, %587) /* ty=Tensor[(16, 16, 8), uint32] */;
  %596 = atanh(%594) /* ty=Tensor[(16, 4, 4), float64] */;
  (%595, meta[relay.Constant][30] /* ty=Tensor[(256), int16] */, %596)
}

def @func_4828(%var_4808: Tensor[(243), float32], %var_4809: Tensor[(720), float32], %var_4810: Tensor[(462), int64], %var_4819: Tensor[(216), int16]) -> (Tensor[(16, 16, 8), bool], Tensor[(16, 16, 8), float64], Tensor[(1008, 1), float64], Tensor[(15, 16, 3), float32], Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(6, 9, 4), int16], Tensor[(216), int16], Tensor[(14, 9, 8), int8]) {
  %597 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %599 = reshape(%598, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %600 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %601 = %600.3;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %603 = cast(%var_4808, dtype="float32") /* ty=Tensor[(243), float32] */;
  %604 = cast(%var_4809, dtype="float32") /* ty=Tensor[(720), float32] */;
  %605 = cast(%var_4810, dtype="int64") /* ty=Tensor[(462), int64] */;
  %606 = reshape(%603, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
  %607 = reshape(%604, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %608 = reshape(%605, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %609 = @func_1251(%606, %607, %608) /* ty=(Tensor[(720, 1), float32], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(9, 3, 9), int8], Tensor[(15, 16, 3), float32]) */;
  %610 = cast(%var_4819, dtype="int16") /* ty=Tensor[(216), int16] */;
  %611 = reshape(%610, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), int16] */;
  %612 = @func_4473(%611) /* ty=(Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) */;
  %613 = @func_4580() /* ty=(Tensor[(9, 16, 6), float32], Tensor[(9, 16, 6), float32], Tensor[(14, 9, 8), int8], Tensor[(1008, 1), int8], Tensor[(16, 16, 8), bool]) */;
  %614 = @func_1863(%599) /* ty=Tensor[(16, 16, 8), float64] */;
  %615 = log(%602) /* ty=Tensor[(1008, 1), float64] */;
  %616 = %609.6;
  %617 = %612.0;
  %618 = %613.2;
  (%597, %614, %615, %616, %var_4808, %var_4809, %var_4810, %617, %var_4819, %618)
}

def @func_1302(%var_1291: int64, %var_1292: Tensor[(1, 15, 6), int64]) -> Tensor[(1, 15, 6), bool] {
  %619 = cast(%var_1291, dtype="bool") /* ty=bool */;
  %620 = cast(%var_1292, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  less_equal(%619, %620) /* ty=Tensor[(1, 15, 6), bool] */
}

def @func_3320(%var_3283: Tensor[(3, 6, 7), int32], %var_3295: Tensor[(90), int64], %var_3299: Tensor[(16, 14), int16]) -> (Tensor[(3, 6, 7), int32], int64, Tensor[(90), int64], Tensor[(90, 1), int64], Tensor[(16, 14), int16], Tensor[(16, 16, 8), float64], Tensor[(2048), float64], Tensor[(7, 6, 11), int64], Tensor[(462), int64], Tensor[(1, 15, 6), float64]) {
  %621 = cast(%var_3283, dtype="int32") /* ty=Tensor[(3, 6, 7), int32] */;
  %622 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(3, 6, 7), int32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %625 = cast(%var_3299, dtype="int16") /* ty=Tensor[(16, 14), int16] */;
  %626 = cast(%var_3299, dtype="int16") /* ty=Tensor[(16, 14), int16] */;
  %627 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %628 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %629 = cast(%var_3295, dtype="int64") /* ty=Tensor[(90), int64] */;
  %630 = reshape(%628, newshape=[]) /* ty=int64 */;
  %631 = reshape(%629, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %632 = @func_1302(%630, %631) /* ty=Tensor[(1, 15, 6), bool] */;
  %633 = cast(%632, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %634 = reshape(%625, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %635 = reshape(%626, newshape=[7, 16, 2]) /* ty=Tensor[(7, 16, 2), int16] */;
  %636 = reshape(%627, newshape=[]) /* ty=int64 */;
  %637 = reshape(%633, newshape=[90, 1]) /* ty=Tensor[(90, 1), int64] */;
  %638 = @func_2419(%634, %635, %636, %637) /* ty=(Tensor[(7, 16, 2), bool], Tensor[(1, 15, 6), bool], int64, Tensor[(90, 1), int64]) */;
  %639 = cast(meta[relay.Constant][32] /* ty=Tensor[(2048), float64] */, dtype="float64") /* ty=Tensor[(2048), float64] */;
  %640 = reshape(%639, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), float64] */;
  %641 = cast(meta[relay.Constant][33] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %642 = reshape(%641, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), int64] */;
  %643 = cast(%632, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %644 = right_shift(%623, %624) /* ty=Tensor[(3, 6, 7), int32] */;
  %645 = %638.3;
  %646 = @func_1863(%640) /* ty=Tensor[(16, 16, 8), float64] */;
  %647 = @func_1084(%642) /* ty=Tensor[(7, 6, 11), int64] */;
  %648 = rsqrt(%643) /* ty=Tensor[(1, 15, 6), float64] */;
  (%644, 10 /* ty=int64 */, %var_3295, %645, %var_3299, %646, meta[relay.Constant][32] /* ty=Tensor[(2048), float64] */, %647, meta[relay.Constant][33] /* ty=Tensor[(462), int64] */, %648)
}

def @func_5814(%var_5793: Tensor[(882), float32]) -> (Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) {
  %649 = @func_5092() /* ty=(Tensor[(9, 16, 6), float32],) */;
  %650 = cast(-9.43964f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %651 = cast(%var_5793, dtype="float32") /* ty=Tensor[(882), float32] */;
  %652 = reshape(%650, newshape=[]) /* ty=float32 */;
  %653 = reshape(%651, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float32] */;
  %654 = @func_2528(%652, %653) /* ty=(Tensor[(14, 7, 9), float32],) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(14, 7, 9), float32] */;
  %657 = cast(-9.43964f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %658 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %659 = reshape(%657, newshape=[]) /* ty=int64 */;
  %660 = reshape(%658, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), int64] */;
  %661 = %649.0;
  %662 = exp(%656) /* ty=Tensor[(14, 7, 9), float32] */;
  %663 = @func_1302(%659, %660) /* ty=Tensor[(1, 15, 6), bool] */;
  (%661, -9.43964f /* ty=float32 */, %var_5793, %662, %663, meta[relay.Constant][34] /* ty=Tensor[(90), int64] */)
}

def @func_2702(%var_2687: Tensor[(720), float32], %var_2698: Tensor[(462, 1), int64]) -> (Tensor[(9, 8, 8), bool], Tensor[(10, 11, 2), float64], Tensor[(220), float64], Tensor[(720), float32], Tensor[(462), float32], Tensor[(539), int16], Tensor[(243), float32], Tensor[(462, 1), int64]) {
  %664 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %665 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(9, 8, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = cast(meta[relay.Constant][37] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %669 = cast(%var_2687, dtype="float32") /* ty=Tensor[(720), float32] */;
  %670 = reshape(%668, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), float64] */;
  %671 = reshape(%669, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %672 = @func_754(%670, %671) /* ty=(Tensor[(10, 11, 2), float64], Tensor[(15, 16, 3), float32], Tensor[(180, 4), float32], Tensor[(15, 16, 3), float32]) */;
  %673 = cast(meta[relay.Constant][38] /* ty=Tensor[(539), int16] */, dtype="int16") /* ty=Tensor[(539), int16] */;
  %674 = cast(meta[relay.Constant][38] /* ty=Tensor[(539), int16] */, dtype="int16") /* ty=Tensor[(539), int16] */;
  %675 = cast(meta[relay.Constant][39] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
  %676 = cast(%var_2687, dtype="float32") /* ty=Tensor[(720), float32] */;
  %677 = cast(%var_2698, dtype="int64") /* ty=Tensor[(462, 1), int64] */;
  %678 = reshape(%673, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %679 = reshape(%674, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), int16] */;
  %680 = reshape(%675, newshape=[243]) /* ty=Tensor[(243), float32] */;
  %681 = reshape(%676, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %682 = reshape(%677, newshape=[462]) /* ty=Tensor[(462), int64] */;
  %683 = @func_2297(%678, %679, %680, %681, %682) /* ty=(Tensor[(243), float32], Tensor[(720), float32], Tensor[(462), int64], Tensor[(462), float32], Tensor[(7, 11, 7), float32]) */;
  %684 = logical_and(%666, %667) /* ty=Tensor[(9, 8, 8), bool] */;
  %685 = %672.0;
  %686 = %683.3;
  (%684, %685, meta[relay.Constant][37] /* ty=Tensor[(220), float64] */, %var_2687, %686, meta[relay.Constant][38] /* ty=Tensor[(539), int16] */, meta[relay.Constant][39] /* ty=Tensor[(243), float32] */, %var_2698)
}

def @func_7277() -> (Tensor[(16, 16, 8), bool],) {
  %687 = @func_5620() /* ty=(Tensor[(16, 16, 8), bool],) */;
  %688 = %687.0;
  (%688,)
}

def @func_5450() -> (Tensor[(1008, 1), float64],) {
  @func_5448() /* ty=(Tensor[(1008, 1), float64],) */
}

def @func_4913(%var_4911: Tensor[(9, 16, 6), float32]) -> (Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) {
  @func_4910(%var_4911) /* ty=(Tensor[(9, 16, 6), uint64], Tensor[(16, 16, 8), bool]) */
}

def @func_4461() -> (Tensor[(9, 16, 6), float32],) {
  %692 = fn () -> (Tensor[(9, 16, 6), float32],) {
    %689 = cast(4.57002f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %690 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
    %691 = minimum(%689, %690) /* ty=Tensor[(9, 16, 6), float32] */;
    (%691,)
  };
  %692() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_7968(%var_7966: Tensor[(10, 1, 11), float32]) -> (Tensor[(10, 1, 11), float32],) {
  @func_7965(%var_7966) /* ty=(Tensor[(10, 1, 11), float32],) */
}

def @func_4017(%var_4013: Tensor[(3, 13, 2), int64]) -> Tensor[(3, 13, 2), bool] {
  %693 = cast(1 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %694 = cast(%var_4013, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  not_equal(%693, %694) /* ty=Tensor[(3, 13, 2), bool] */
}

def @func_8059() -> (Tensor[(9, 16, 6), float32],) {
  @func_8057() /* ty=(Tensor[(9, 16, 6), float32],) */
}

def @func_4473(%var_4462: Tensor[(6, 9, 4), int16]) -> (Tensor[(6, 9, 4), int16], Tensor[(6, 9, 4), float64]) {
  %695 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 9, 4), int16] */, dtype="int16") /* ty=Tensor[(6, 9, 4), int16] */;
  %696 = shape_of(%var_4462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_4462, dtype="int16") /* ty=Tensor[(6, 9, 4), int16] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %699 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 9, 4), int16] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %700 = right_shift(%697, %698) /* ty=Tensor[(6, 9, 4), int16] */;
  %701 = asinh(%699) /* ty=Tensor[(6, 9, 4), float64] */;
  (%700, %701)
}

def @func_5291(%var_5286: Tensor[(5, 5, 10), float64]) -> Tensor[(5, 5, 10), float64] {
  %702 = cast(%var_5286, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  acos(%702) /* ty=Tensor[(5, 5, 10), float64] */
}

def @func_8144(%var_8142: Tensor[(1008, 2), uint8], %var_8143: Tensor[(1008, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(13, 6), int64], Tensor[(1008, 2), bool], Tensor[(1008, 2), float64]) {
  @func_8140(%var_8142, %var_8143) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(13, 6), int64], Tensor[(1008, 2), bool], Tensor[(1008, 2), float64]) */
}

def @func_5817(%var_5815: Tensor[(882), float32]) -> (Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) {
  @func_5814(%var_5815) /* ty=(Tensor[(9, 16, 6), float32], float32, Tensor[(882), float32], Tensor[(14, 7, 9), float32], Tensor[(1, 15, 6), bool], Tensor[(90), int64]) */
}

def @func_7199() -> (Tensor[(16, 16, 8), bool],) {
  %704 = fn () -> (Tensor[(16, 16, 8), bool],) {
    %703 = @func_4763() /* ty=Tensor[(16, 16, 8), bool] */;
    (%703,)
  };
  %704() /* ty=(Tensor[(16, 16, 8), bool],) */
}

def @func_2040(%var_2033: Tensor[(1, 2, 3), uint64], %var_2034: Tensor[(10, 2, 3), uint64]) -> Tensor[(10, 2, 3), uint64] {
  %705 = cast(%var_2033, dtype="uint64") /* ty=Tensor[(1, 2, 3), uint64] */;
  %706 = cast(%var_2034, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
  subtract(%705, %706) /* ty=Tensor[(10, 2, 3), uint64] */
}

def @func_7453(%var_7451: Tensor[(7, 12, 2), float32]) -> Tensor[(7, 12, 2), float32] {
  @func_7450(%var_7451) /* ty=Tensor[(7, 12, 2), float32] */
}

def @func_1682(%var_1680: int32) -> Tensor[(1, 3), bool] {
  @func_1679(%var_1680) /* ty=Tensor[(1, 3), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen171/build/output.py:1791: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen171/build/output.py", line 1796, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(30) tvmgen_default_fused_log10_kernel0(double* __restrict__ T_log10, double* __restrict__ placeholder) {
  T_log10[(((int)threadIdx.x))] = log10(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

